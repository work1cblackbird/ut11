///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Авторизация

// Определяет имя сервера авторизации для обновления ключей доступа к сервису.
//
// Возвращаемое значение:
//   Строка - имя сервера сервиса.
//
Функция СерверАвторизации() Экспорт
	
	Результат = "oauth.yandex.ru";
	
	Возврат Результат;
	
КонецФункции

// Определяет адрес ресурса авторизации.
//
// Возвращаемое значение:
//   Строка - адрес ресурса. 
//
Функция АдресАвторизации() Экспорт
	
	ДанныеПриложения = ДанныеПриложения();

	Результат = "https://oauth.yandex.ru/authorize?response_type=code"
		+ "&client_id=" + ДанныеПриложения.IDПриложения 
		+ "&client_secret=" + ДанныеПриложения.ПарольПриложения 
		+ "&redirect_uri=" + "https://oauth.yandex.ru/verification_code";
	
	Возврат Результат;
	
КонецФункции

// Определяет данные авторизации.
//
// Параметры:
//   СтруктураОтвета - Структура - содержит набор ключей, которые необходимо вернуть.
//
// Возвращаемое значение:
//   Структура - содержит запрошенный набор ключей:
//     * access_token         - Строка - токен авторизации;
//     * access_token_expires - Дата - период действия токена;
//     * refresh_token        - Строка - токен автообновления.
//
Функция ДанныеАвторизации(СтруктураОтвета) Экспорт
	
	СтруктураДанныхАвторизации = Новый Структура;
	
	Если СтруктураОтвета.Свойство("access_token") 
		И СтруктураОтвета.Свойство("expires_in") 
		И СтруктураОтвета.Свойство("refresh_token") Тогда
		
		expires_in = СтруктураОтвета.expires_in;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
			СрокЖизниТокена = НачалоДня(ТекущаяДатаСеанса() + Число(expires_in));
			СтруктураДанныхАвторизации.Вставить("access_token",         СтруктураОтвета.access_token);
			СтруктураДанныхАвторизации.Вставить("access_token_expires", СрокЖизниТокена);
			СтруктураДанныхАвторизации.Вставить("refresh_token",        СтруктураОтвета.refresh_token);
			
			Если СрокЖизниТокена<ТекущаяДатаСеанса() Тогда   
				КлючиОбновлены = ОбновитьКлючиДоступа(СтруктураДанныхАвторизации);
				
				Если КлючиОбновлены.Результат Тогда  
					СтруктураОтвета = КлючиОбновлены.СтруктураОтвета;
					Если СтруктураОтвета.Свойство("access_token") 
						И СтруктураОтвета.Свойство("expires_in") 
						И СтруктураОтвета.Свойство("refresh_token") Тогда
						
						expires_in = СтруктураОтвета.expires_in;
						
						Если ОбщегоНазначенияУТКлиентСервер.ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
							СрокЖизниТокена = НачалоДня(ТекущаяДатаСеанса() + Число(expires_in));
							СтруктураДанныхАвторизации.Вставить("access_token",         СтруктураОтвета.access_token);
							СтруктураДанныхАвторизации.Вставить("access_token_expires", СрокЖизниТокена);
							СтруктураДанныхАвторизации.Вставить("refresh_token",        СтруктураОтвета.refresh_token);
							Если СрокЖизниТокена>ТекущаяДатаСеанса() Тогда   
								КлючиОбновлены = ОбновитьКлючиДоступа(СтруктураДанныхАвторизации);
								Если КлючиОбновлены.Результат Тогда 
									
								КонецЕсли;
							КонецЕсли;
						Иначе
							ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище';
														|en = 'An error occurred when saving the data to the secure storage'", 
							ОбщегоНазначения.КодОсновногоЯзыка());
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Некорректное значение свойства expires_in при получении ключа авторизации: %1';
								|en = 'Out of order property value expires_in: %1'", 
							ОбщегоНазначения.КодОсновногоЯзыка()),
							СтруктураОтвета.expires_in);
							
							ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
							УровеньЖурналаРегистрации.Ошибка,,, 
							ТекстОшибки);
						КонецЕсли;
					КонецЕсли;
					
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстОписанияСобытия = НСтр("ru = 'Ошибка сохранения данных в безопасном хранилище';
										|en = 'An error occurred when saving the data to the secure storage'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение свойства expires_in при получении ключа авторизации: %1';
				|en = 'Out of order property value expires_in: %1'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			СтруктураОтвета.expires_in);
			
			ЗаписьЖурналаРегистрации(ТекстОписанияСобытия, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанныхАвторизации;
	
КонецФункции

// Функция возвращает http запрос для обновления ключей доступа к сервису для организации.
//
// Параметры:
//   ИдентификаторАккаунта - Строка - идентификатор аккаунта для подключения к сервису.
//
// Возвращаемое значение:
//   HTTPЗапрос - запрос для получения ключей доступа.
//
Функция ЗапросОбновитьТокеныДоступа(ИдентификаторАккаунта) Экспорт
	
	ДанныеПриложения = ДанныеПриложения();

	СтруктураДанныхАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ИдентификаторАккаунта);
	
	Если СтруктураДанныхАвторизации <> Неопределено Тогда
		refresh_token = СтруктураДанныхАвторизации.refresh_token;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=refresh_token");
	ПараметрыURL.Добавить("refresh_token" + refresh_token);
	ПараметрыURL.Добавить("client_id=" + ДанныеПриложения.IDПриложения);
	ПараметрыURL.Добавить("client_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
	
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает http запрос для получения ключей доступа к сервису по временному коду.
//
// Параметры:
//   ВременныйКод - Строка - временный код для подключения к сервису.
//
// Возвращаемое значение:
//   HTTPЗапрос - запрос для получения ключей доступа.
//
Функция ЗапросПолучитьТокеныПоКоду(ВременныйКод) Экспорт
	
	ДанныеПриложения = ДанныеПриложения();
	
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");

	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=authorization_code");
	ПараметрыURL.Добавить("code=" + ВременныйКод);
    ПараметрыURL.Добавить("client_id=" + ДанныеПриложения.IDПриложения);    
    ПараметрыURL.Добавить("client_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Адрес = "/token?"; 
    HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Тело = СтрСоединить(ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(Тело,"windows-1251");
    
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает информацию о пользователе Яндекс ID (логин и идентификатор пользователя).
//
// Параметры:
//   КлючДоступа - Строка - ключ доступа, выданный для логина пользователя.
// 
// Возвращаемое значение:
//   Структура - информацию о пользователе:
//     * Имя           - Строка - логин пользователя на Яндекс ID;
//     * Идентификатор - Строка - уникальный идентификатор пользователя на Яндекс ID.
//
Функция ПолучитьДанныеЛогина(КлючДоступа) Экспорт
		
	ДанныеПриложения = ДанныеПриложения();
	Сервер = СерверДанныхАвторизации();
	ИмяМетода = "/info";
	Адрес = ИмяМетода +"?";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "OAuth " + КлючДоступа);
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("format=" + "json");
	ПараметрыURL.Добавить("jwt_secret=" + ДанныеПриложения.ПарольПриложения);
	
	Попытка	
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,200,СоединениеOpenSSL);
	Исключение
		ТекстОписанияСобытия = НСтр("ru = 'Отсутствует соединение с сервером'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером: %1'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер);
		
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
		Возврат Неопределено;
	КонецПопытки;
	
	ТелоЗапроса = СтрСоединить(ПараметрыURL, "&");
	Адрес = Адрес + ТелоЗапроса;
	
	HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки); 
	СтруктураОтвета = Новый Структура();
	СтруктураДанныхЛогина = Новый Структура();
		
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;
	Исключение 
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса получения данных о пользователе Яндекс ID (логина и идентификатора пользователя)",
				ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
		Возврат Неопределено;
	КонецПопытки;
	
	Если КодСостояния = 200 Тогда
		СтруктураДанныхЛогина.Вставить("Имя",СтруктураОтвета.login);
		СтруктураДанныхЛогина.Вставить("Идентификатор",СтруктураОтвета.id);
	Иначе
		Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.status = "ERROR" Тогда
			ОписаниеОшибок = ТекстОшибки(СтруктураОтвета.errors);
		Иначе
			ОписаниеОшибок = ""; 
		КонецЕсли;
		
		ТекстОписанияСобытия = НСтр("ru = 'Ошибка выполнения запроса'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка вызова API Яндекс Маркет: %1; %2; %3'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			КодСостояния,
			HTTPОтвет.ПолучитьТелоКакСтроку(),
			ОписаниеОшибок);

		ЗаписьЖурналаРегистрации(ТекстОписанияСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураДанныхЛогина;
	
КонецФункции

// Добавляет данные авторизации в безопасное хранилище по ключу обновления. 
//
// Параметры:
//   ДанныеАвторизации - Структура - данные авторизации для подключения к сервису (см. ДанныеАвторизации);   
//
// Возвращаемое значение:
//   Структура - содержит данные авторизации:
//     * СтруктураОтвета      - Строка - ответ сервера с информацией по ключам;
//     * Результат            - Булево - токены обновлены.
//
Функция ОбновитьКлючиДоступа(ДанныеАвторизации)
	
	ДанныеЛогина      = ПолучитьДанныеЛогина(ДанныеАвторизации.access_token);
	Идентификатор     = ДанныеЛогина.Идентификатор;  
	Результат = Ложь;
	
	Попытка
		Сервер         = СерверАвторизации();
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,60,СоединениеOpenSSL);

		HTTPЗапрос = ЗапросОбновитьТокеныДоступа(Идентификатор);
		
		HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния; 
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
		Если КодСостояния = 200  Тогда
			// обработать раздел errors в структуре ответа
	    	СтруктураОтвета   = ИзJSON(СтрокаОтвета);
			ДанныеАвторизации = ДанныеАвторизации(СтруктураОтвета);  
			ДанныеЛогина      = ПолучитьДанныеЛогина(ДанныеАвторизации.access_token);
			Идентификатор     = ДанныеЛогина.Идентификатор;
			
			Если УстановитьНастройкиАвторизации(ДанныеАвторизации, ДанныеЛогина) Тогда	
				Результат = Истина;
			Иначе 
				Результат = Ложь;
			КонецЕсли;
			
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2';
					|en = 'An error occurred when executing the %1 request: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер, 
				СтрокаОтвета);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
			
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2';
				|en = 'No connection with the %1 server. Reason: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;   
	
	КлючиОбновлены = Новый Структура();
	КлючиОбновлены.Вставить("Результат",Результат);  
	КлючиОбновлены.Вставить("СтруктураОтвета",СтруктураОтвета);
	
	Возврат КлючиОбновлены;
	
КонецФункции

// Определяет данные авторизации из безопасного хранилища. 
//
// Параметры:
//   ИдентификаторАккаунта - Строка - идентификатор аккаунта для подключения к сервису.
//
// Возвращаемое значение:
//   - Структура    - данные авторизации для подключения к сервису (см. ДанныеАвторизации);
//   - Неопределено - данные авторизации не найдены.
//
Функция ДанныеАвторизацииПоИдентификаторуАккаунта(ИдентификаторАккаунта) Экспорт
	
	Владелец = "ЯндексМаркет";
	Ключ     = "_" + СокрЛП(ИдентификаторАккаунта);
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеДанные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключ, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекущиеДанные;
	
КонецФункции
 
// Определяет данные авторизации по указанной учетной записи (магазину). 
//
// Параметры:
//   Магазин - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису. 
//
// Возвращаемое значение:
//   - Структура    - данные авторизации для подключения к сервису (см. ДанныеАвторизации);
//   - Неопределено - данные авторизации не найдены.
//
Функция ДанныеАвторизацииПоМагазину(Магазин) Экспорт      
	
	ИдентификаторАккаунта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ИдентификаторАккаунта");
	
	ТекущиеДанные = ДанныеАвторизацииПоИдентификаторуАккаунта(ИдентификаторАккаунта);
	Возврат ТекущиеДанные;
	
КонецФункции

// Определяет данные авторизации по указанной учетной записи (магазину). 
//
// Параметры:
//   ИдентификаторАккаунта - Строка - идентификатор аккаунта для подключения к сервису.
//
// Возвращаемое значение:
//   Строка - имя аккаунта (см. ПолучитьДанныеЛогина).
//
Функция ДанныеАвторизацииЛогин(ИдентификаторАккаунта) Экспорт
	
	ТекущиеДанные = ДанныеАвторизацииПоИдентификаторуАккаунта(ИдентификаторАккаунта);
	
	Если ТекущиеДанные <> Неопределено Тогда   
		Логин = ТекущиеДанные.login;
	КонецЕсли;
	
	Возврат Логин;
	
КонецФункции

// Добавляет данные авторизации в безопасное хранилище. 
//
// Параметры:
//   ДанныеАвторизации - Структура - данные авторизации для подключения к сервису (см. ДанныеАвторизации);
//   Аккаунт           - Структура - данные об аккаунте (см. ПолучитьДанныеЛогина).
//
// Возвращаемое значение:
//   Булево - результат успешного выполнения операции.
//
Функция УстановитьНастройкиАвторизации(ДанныеАвторизации, Аккаунт) Экспорт
	
	Результат = Ложь;
	Владелец  = "ЯндексМаркет";
	
	Если Аккаунт <> Неопределено 
		 И ДанныеАвторизации.Свойство("access_token")
		 И ДанныеАвторизации.Свойство("access_token_expires") 
		 И ДанныеАвторизации.Свойство("refresh_token") Тогда
		ДанныеАвторизации.Вставить("id",    СокрЛП(Аккаунт.Идентификатор));
		ДанныеАвторизации.Вставить("login", СокрЛП(Аккаунт.Имя));
				
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации, "_" + СокрЛП(Аккаунт.Идентификатор));  
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Истина;
	КонецЕсли;
	
	Если Не Результат Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить данные авторизации в безопасном хранилище для владельца ""%1"".'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Владелец);
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Удаляет данные авторизации из безопасного хранилища. 
//
// Параметры:
//   ИдентификаторАккаунта - Строка - идентификатор аккаунта для подключения к сервису.
//
Процедура УдалитьДанныеАвторизации(ИдентификаторАккаунта) Экспорт

	Владелец = "ЯндексМаркет";
	Ключ     = "_" + СокрЛП(ИдентификаторАккаунта);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторАккаунта", ИдентификаторАккаунта);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗаписьМаркетплеса
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта = &ИдентификаторАккаунта";

	УстановитьПривилегированныйРежим(Истина);
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать();

	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, Ключ);
	УстановитьПривилегированныйРежим(Ложь);

	Префиксы = ПрефиксыРегламентныхЗаданий();
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл
		Идентификатор = ВыборкаУчетныхЗаписей.УчетнаяЗаписьМаркетплеса.УникальныйИдентификатор();
		Для Каждого Префикс Из Префиксы Цикл
			Справочники.УчетныеЗаписиМаркетплейсов.УстановитьИспользованиеРегламентногоЗадания(Префикс.Значение + Идентификатор, Ложь);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Получает данные обо всех зарегистрированных аккаунтах Яндекс Маркет.
//
// Возвращаемое значение:
//   Массив Из Структура - данные об аккаунтах:
//     * Идентификатор        - Строка - идентификатор аккаунта подключения;
//     * Наименование         - Строка - наименование аккаунта;
//     * ТребуетсяАвторизация - Булево - признак успешно завершенной авторизации (действующего токена доступа).
//
Функция ПолучитьСписокАккаунтов() Экспорт

	Результат = Новый Массив;
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ИмяБезопасногоХранилищаДанных = "БезопасноеХранилищеДанныхОбластейДанных";
	Иначе
		ИмяБезопасногоХранилищаДанных = "БезопасноеХранилищеДанных";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БезопасноеХранилищеДанных.Данные КАК Данные
		|ИЗ
		|	#ИмяБезопасногоХранилищаДанных КАК БезопасноеХранилищеДанных
		|ГДЕ
		|	БезопасноеХранилищеДанных.Владелец = &Владелец";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяБезопасногоХранилищаДанных", "РегистрСведений." + ИмяБезопасногоХранилищаДанных);
	Запрос.УстановитьПараметр("Владелец", "ЯндексМаркет");
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаДанных.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДанных.Данные) Тогда
			СохраненныеДанные = ВыборкаДанных.Данные.Получить();
			
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				Для Каждого КлючЗначение Из СохраненныеДанные Цикл
					Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
						 И КлючЗначение.Значение.Свойство("id") 
					 	 И КлючЗначение.Значение.Свойство("login") 
					 	 И КлючЗначение.Значение.Свойство("access_token") 
					 	 И КлючЗначение.Значение.Свойство("access_token_expires") Тогда
						Аккаунт = Новый Структура;
						Аккаунт.Вставить("Идентификатор",        КлючЗначение.Значение.id);
						Аккаунт.Вставить("Наименование",         КлючЗначение.Значение.login);
						Аккаунт.Вставить("ТребуетсяАвторизация", Истина); 
						
						Если ТипЗнч(КлючЗначение.Значение.access_token_expires) = Тип("Дата") 
							 И КлючЗначение.Значение.access_token_expires > ТекущаяДатаСеанса() Тогда
							Аккаунт.Вставить("ТребуетсяАвторизация", Ложь); 
						КонецЕсли;
						
						Результат.Добавить(Аккаунт);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УчетныеЗаписи

// Определяет настройки учетной записи торговой площадки Яндекс Маркет.
//
// Параметры:
//   УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису; 
//   СлужебныеПараметры - Булево - признак необходимости возврата в результате дополнительных параметров.
// 
// Возвращаемое значение:
//   Структура - настройки учетной записи:
//     * УникальныйИдентификатор           - УникальныйИдентификатор - идентификатор учетной записи;
//     * УчетнаяЗапись                     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Наименование                      - Строка - наименование учетной записи (магазина);
//     * Представление                     - Строка - представление учетной записи;
//     * ПометкаУдаления                   - Булево - признак недействующего магазина;
//     * ВидМаркетплейса                   - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса для получения учетной записи;
//     * Организация                       - СправочникСсылка.Организации - организация, связанная с магазином;
//     * ИсточникКатегории                 - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории;
//     * ЦенаПродажи                       - СправочникСсылка.ВидыЦен - вид цены продажи;
//     * СхемаРаботы                       - ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок - схема работы магазина;
//     * ИдентификаторАккаунта             - Строка - идентификатор аккаунта;
//     * ИдентификаторКабинета             - Строка - идентификатор кабинета;
//     * ИдентификаторМагазина             - Строка - идентификатор кампании;
//     * ИдентификаторКлиента              - Строка - номер магазина;
//     * НеОбновлятьДанныеТорговойПлощадки - Булево - признак запрещенного обмена данными с торговой площадкой;
//     * ОбязательныеРеквизитыЗаполнены    - Булево - признак заполненности обязательных реквизитов учетной записи;
//     * ОбязательныеЗаданияВключены       - Булево - признак включенных обязательных регламентных заданий;
//     * Партнер                           - СправочникСсылка.Партнеры - партнер торговой площадки;
//     * Контрагент                        - СправочникСсылка.Контрагенты - контрагент торговой площадки;
//     * СоглашениеКомиссия                - СправочникСсылка.СоглашенияСКлиентами - соглашение с комиссионером;
//     * ДоговорКомиссия                   - СправочникСсылка.ДоговорыКонтрагентов - договор с комиссионером;
//     * ДополнительныеНастройки           - Структура Из КлючИЗначение - настройки из табличной части ДополнительныеНастройки.
//
Функция ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись, СлужебныеПараметры = Истина) Экспорт
	
	ДанныеУчетнойЗаписи = Новый Структура;
	ДанныеУчетнойЗаписи.Вставить("УникальныйИдентификатор",           ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	ДанныеУчетнойЗаписи.Вставить("УчетнаяЗапись",                     Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("Наименование",                      "");
	ДанныеУчетнойЗаписи.Вставить("Представление",                     "");
	ДанныеУчетнойЗаписи.Вставить("ВидМаркетплейса",                   Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет);
	ДанныеУчетнойЗаписи.Вставить("ПометкаУдаления",                   Ложь);
	ДанныеУчетнойЗаписи.Вставить("Организация",                       Справочники.Организации.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("ЦенаПродажи",                       Справочники.ВидыЦен.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("ИсточникКатегории",                 Перечисления.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("СхемаРаботы",                       Перечисления.СхемыРаботыТорговыхПлощадок.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторАккаунта",             "");
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторКабинета",             "");
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторМагазина",             "");
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторКлиента",              "");
	ДанныеУчетнойЗаписи.Вставить("НеОбновлятьДанныеТорговойПлощадки", Истина);
	ДанныеУчетнойЗаписи.Вставить("Партнер",                           Справочники.Партнеры.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("Контрагент",                        Справочники.Контрагенты.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("СоглашениеКомиссия",                Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("ДоговорКомиссия",                   Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ДанныеУчетнойЗаписи.Вставить("ДополнительныеНастройки",           Новый Структура);
	
	Если СлужебныеПараметры Тогда
		ДанныеУчетнойЗаписи.Вставить("ОбязательныеРеквизитыЗаполнены", Ложь);
		ДанныеУчетнойЗаписи.Вставить("ОбязательныеЗаданияВключены",    Ложь);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиМаркетплейсов.Наименование КАК Наименование,
		|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления КАК ПометкаУдаления,
		|	УчетныеЗаписиМаркетплейсов.Организация КАК Организация,
		|	УчетныеЗаписиМаркетплейсов.ИсточникКатегории КАК ИсточникКатегории,
		|	ЕСТЬNULL(ВидыЦенМаркетплейсов.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ЦенаПродажи,
		|	УчетныеЗаписиМаркетплейсов.СхемаРаботы КАК СхемаРаботы,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта КАК ИдентификаторАккаунта,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторКабинета КАК ИдентификаторКабинета,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина КАК ИдентификаторМагазина,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	УчетныеЗаписиМаркетплейсов.НеОбновлятьДанныеТорговойПлощадки КАК НеОбновлятьДанныеТорговойПлощадки,
		|	УчетныеЗаписиМаркетплейсов.Партнер КАК Партнер,
		|	УчетныеЗаписиМаркетплейсов.Контрагент КАК Контрагент,
		|	УчетныеЗаписиМаркетплейсов.Соглашение КАК СоглашениеКомиссия,
		|	УчетныеЗаписиМаркетплейсов.ДоговорПродажиЧерезСкладыТорговойПлощадки КАК ДоговорКомиссия
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенМаркетплейсов
		|		ПО УчетныеЗаписиМаркетплейсов.Ссылка = ВидыЦенМаркетплейсов.Ссылка
		|			И (ВидыЦенМаркетплейсов.ИмяНастройки = &ИмяНастройки)
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		|	И УчетныеЗаписиМаркетплейсов.Ссылка = &УчетнаяЗапись"; 

	ИмяНастройки = НСтр("ru = 'Цена продажи'");
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Параметры.Вставить("ИмяНастройки",  ИмяНастройки);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДанных.Следующий() Тогда
		ДанныеУчетнойЗаписи.УникальныйИдентификатор           = ВыборкаДанных.УчетнаяЗапись.УникальныйИдентификатор();
		ДанныеУчетнойЗаписи.УчетнаяЗапись                     = ВыборкаДанных.УчетнаяЗапись;
		ДанныеУчетнойЗаписи.Наименование                      = ВыборкаДанных.Наименование;
		ДанныеУчетнойЗаписи.Представление                     = Строка(ВыборкаДанных.УчетнаяЗапись);
		ДанныеУчетнойЗаписи.ПометкаУдаления                   = ВыборкаДанных.ПометкаУдаления;
		ДанныеУчетнойЗаписи.Организация                       = ВыборкаДанных.Организация;
		ДанныеУчетнойЗаписи.ЦенаПродажи                       = ВыборкаДанных.ЦенаПродажи;
		ДанныеУчетнойЗаписи.ИсточникКатегории                 = ВыборкаДанных.ИсточникКатегории;
		ДанныеУчетнойЗаписи.СхемаРаботы                       = ВыборкаДанных.СхемаРаботы;
		ДанныеУчетнойЗаписи.ИдентификаторАккаунта             = ВыборкаДанных.ИдентификаторАккаунта;
		ДанныеУчетнойЗаписи.ИдентификаторКабинета             = ВыборкаДанных.ИдентификаторКабинета;
		ДанныеУчетнойЗаписи.ИдентификаторМагазина             = ВыборкаДанных.ИдентификаторМагазина;
		ДанныеУчетнойЗаписи.ИдентификаторКлиента              = ВыборкаДанных.ИдентификаторКлиента;
		ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки = ВыборкаДанных.НеОбновлятьДанныеТорговойПлощадки;
		ДанныеУчетнойЗаписи.Партнер                           = ВыборкаДанных.Партнер;
		ДанныеУчетнойЗаписи.Контрагент                        = ВыборкаДанных.Контрагент;
		ДанныеУчетнойЗаписи.СоглашениеКомиссия                = ВыборкаДанных.СоглашениеКомиссия;
		ДанныеУчетнойЗаписи.ДоговорКомиссия                   = ВыборкаДанных.ДоговорКомиссия; 
		
		Если СлужебныеПараметры Тогда
			Если ЗначениеЗаполнено(ДанныеУчетнойЗаписи.Организация)
					И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторАккаунта)
					И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторКабинета)
					И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторМагазина)
					И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторКлиента)
					И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.СхемаРаботы)
					И ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ЦенаПродажи) Тогда
				ДанныеУчетнойЗаписи.Вставить("ОбязательныеРеквизитыЗаполнены", Истина);
			КонецЕсли;
			
			ДоступнаРаботаСОстатками     = Справочники.УчетныеЗаписиМаркетплейсов.ДоступнаРаботаСОстаткамиДляУчетнойЗаписи(УчетнаяЗапись);
			ПрефиксыРегламентныхЗаданий  = ПрефиксыРегламентныхЗаданий(Истина, ДоступнаРаботаСОстатками);
			СостоянияРегламентныхЗаданий = ПолучитьСостоянияРегламентныхЗаданийМагазина(УчетнаяЗапись, ПрефиксыРегламентныхЗаданий);
			
			ДанныеУчетнойЗаписи.Вставить("ОбязательныеЗаданияВключены", Не СостоянияРегламентныхЗаданий.ЕстьОтключенныеРегламентныеЗадания); 
		КонецЕсли;
		
		ДополнительныеНастройки = Справочники.УчетныеЗаписиМаркетплейсов.ОписаниеДополнительныхНастроекУчетнойЗаписи(УчетнаяЗапись,
			"СпособОтраженияПродаж, СкладОтгрузки, ДоговорВзаимозачеты, РозничныйПартнер, РозничныйКонтрагент, СоглашениеРеализация, ДоговорРеализация");
		ДанныеУчетнойЗаписи.ДополнительныеНастройки = ДополнительныеНастройки;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеУчетнойЗаписи, ДополнительныеНастройки, Истина);
	КонецЕсли;
	
	Возврат ДанныеУчетнойЗаписи;
		
КонецФункции

// Выбирает учетные записи, для которых разрешен обмен данными.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                 - Неопределено - выбрать все учетные записи (по умолчанию).
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - результат выборки. Поля выборки соответствуют результату функции ДанныеУчетнойЗаписиЯндексМаркет.
//
Функция ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиМаркетплейсов.Наименование КАК Наименование,
		|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления КАК ПометкаУдаления,
		|	УчетныеЗаписиМаркетплейсов.Организация КАК Организация,
		|	УчетныеЗаписиМаркетплейсов.ИсточникКатегории КАК ИсточникКатегории,
		|	ЕСТЬNULL(ВидыЦенМаркетплейсов.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ЦенаПродажи,
		|	УчетныеЗаписиМаркетплейсов.СхемаРаботы КАК СхемаРаботы,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта КАК ИдентификаторАккаунта,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторКабинета КАК ИдентификаторКабинета,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина КАК ИдентификаторМагазина,
		|	УчетныеЗаписиМаркетплейсов.ИдентификаторКлиента КАК ИдентификаторКлиента,
		|	УчетныеЗаписиМаркетплейсов.НеОбновлятьДанныеТорговойПлощадки КАК НеОбновлятьДанныеТорговойПлощадки,
		|	ВЫБОР
		|		КОГДА УчетныеЗаписиМаркетплейсов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта <> """"
		|				И УчетныеЗаписиМаркетплейсов.ИдентификаторКабинета <> """"
		|				И УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина <> """"
		|				И УчетныеЗаписиМаркетплейсов.ИдентификаторКлиента <> """"
		|				И УчетныеЗаписиМаркетплейсов.СхемаРаботы <> ЗНАЧЕНИЕ(Перечисление.СхемыРаботыТорговыхПлощадок.ПустаяСсылка)
		|				И ВидыЦенМаркетплейсов.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбязательныеРеквизитыЗаполнены
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенМаркетплейсов
		|		ПО УчетныеЗаписиМаркетплейсов.Ссылка = ВидыЦенМаркетплейсов.Ссылка
		|			И (ВидыЦенМаркетплейсов.ИмяНастройки = &ИмяНастройки)
		|ГДЕ
		|	(УчетныеЗаписиМаркетплейсов.Ссылка = &УчетнаяЗапись
		|			ИЛИ &УчетнаяЗапись = НЕОПРЕДЕЛЕНО)
		|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
		|	И НЕ УчетныеЗаписиМаркетплейсов.НеОбновлятьДанныеТорговойПлощадки"; 

	ИмяНастройки = НСтр("ru = 'Цена продажи'");
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Параметры.Вставить("ИмяНастройки",  ИмяНастройки);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВыборкаДанных;
		
КонецФункции

#КонецОбласти

#Область УправлениеКаталогом

// Получает рекомендации по заполнению реквизитов товарной позиции с Яндекс Маркет.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию            - Булево - признак автоматического или ручного запуска регламентного задания;
//     * ИдентификаторПубликации - Строка - идентификатор публикации товарной позиции или идентификатор предложения.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьРекомендацииПоСклейкеТовараЯндексМаркет(УчетнаяЗапись = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
		
	ПоРасписанию = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		 И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	ИдентификаторПубликации = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		ДополнительныеПараметры.Свойство("ИдентификаторПубликации", ИдентификаторПубликации);
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запуск по расписанию: получить рекомендации при выгрузке товарного каталога для учетной записи ""%1"" на торговую площадку.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Запуск по расписанию: получить рекомендации при выгрузке товарного каталога на торговую площадку.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
			
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Попытка
			Отказ = Ложь;
			ПредварительныйПросмотрКарточекТоваровИзСервиса(ВыборкаДанных, ИдентификаторПубликации, Отказ);
			
			Если Отказ Тогда
				Ошибка.КодОшибки      = "ЯндексМаркет_API_ПолучитьРекомендацииПоСклейкеТовараЯндексМаркет";
				Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При получении рекомендаций при выгрузке товарного каталога для учетной записи ""%1"" на торговую площадку возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.Наименование);
					
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СерверныеОповещения.ОтправитьСерверноеОповещение(
					"ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные",
					ВыборкаДанных.УчетнаяЗапись,
					Неопределено,
					Истина);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При получении рекомендаций при выгрузке товарного каталога для учетной записи ""%1"" на торговую площадку возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = "ЯндексМаркет_ПолучитьРекомендацииПоСклейкеТовараЯндексМаркет";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Если ПоРасписанию Тогда 
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Завершено получение рекомендаций при выгрузке товарного каталога для учетной записи ""%1"" на торговую площадку.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершено получение рекомендаций при выгрузке товарного каталога на торговую площадку.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;
	
КонецФункции

// Отправляет товарные позиции на модерацию.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ОтправитьНаМодерациюСвязиТоваровЯндексМаркет(УчетнаяЗапись = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
		
	ПоРасписанию = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		 И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запуск по расписанию: отправить товарные позиции на модерацию для учетной записи ""%1"".'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Запуск по расписанию: отправить товарные позиции на модерацию.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
			
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Попытка     
			Отказ = Ложь;
			ДобавитьИзменитьТоварыВСервисе(ВыборкаДанных, Отказ);
			
			Если Отказ Тогда
				Ошибка.КодОшибки      = "ЯндексМаркет_API_ОтправитьНаМодерациюСвязиТоваровЯндексМаркет";
				Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При отправке товарных позиций на модерацию для учетной записи ""%1"" возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.Наименование);
					
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СерверныеОповещения.ОтправитьСерверноеОповещение(
					"ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные",
					ВыборкаДанных.УчетнаяЗапись,
					Неопределено,
					Истина);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При отправке товарных позиций на модерацию для учетной записи ""%1"" возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтправитьНаМодерациюСвязиТоваровЯндексМаркет";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Если ПоРасписанию Тогда 
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Завершена отправка товарных позиций на модерацию для учетной записи ""%1"".'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершена отправка товарных позиций на модерацию.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;

КонецФункции

// Получает статусы модерации товарных позиций с торговой площадки.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьСтатусыМодерацииТоваровЯндексМаркет(УчетнаяЗапись = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
		
	ПоРасписанию = Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		 И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запуск по расписанию: получение статусов модерации товаров для учетной записи ""%1"" с торговой площадки.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Запуск по расписанию: получение статусов модерации товаров с торговой площадки.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
					
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Попытка
			Отказ = Ложь;
			ИнформацияОТоварахВКаталогеИзСервиса(ВыборкаДанных, Отказ);
			
			Если Отказ Тогда
				Ошибка.КодОшибки      = "ЯндексМаркет_API_ПолучитьСтатусыМодерацииТоваровЯндексМаркет";
				Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При получении статусов модерации товаров для учетной записи ""%1"" с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.УчетнаяЗапись);
					
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СерверныеОповещения.ОтправитьСерверноеОповещение(
					"ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные",
					ВыборкаДанных.УчетнаяЗапись,
					Неопределено,
					Истина);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При получении статусов модерации товаров для учетной записи ""%1"" с торговой площадки возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = "ЯндексМаркет_ПолучитьСтатусыМодерацииТоваровЯндексМаркет";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Если ПоРасписанию Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Завершено получение статусов модерации товаров для учетной записи ""%1"" с торговой площадки.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершено получение статусов модерации товаров с торговой площадки.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;

КонецФункции

// Определяет категорию товара в зависимости от настройки учетной записи.
//
// Параметры:
//   Номенклатура  - СправочникСсылка.Номенклатура - ссылка на номенклатуру, для которой определяется категория;
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Строка - наименование категории товара.
//
Функция КатегорияТовара(Номенклатура, УчетнаяЗапись) Экспорт 
	
	ИспользоватьТоварныеКатегории   = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	ДанныеУчетнойЗаписиЯндексМаркет = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись, Ложь);
	ИсточникКатегории               = ДанныеУчетнойЗаписиЯндексМаркет.ИсточникКатегории;
	КатегорияТовараСтрокой          = "";
	
	Если ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры Тогда
		КатегорияТовара        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
		КатегорияТовараСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КатегорияТовара, "Наименование");

	ИначеЕсли ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры Тогда
		КатегорияТовара        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Родитель");
		КатегорияТовараСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КатегорияТовара, "Наименование");
			
	ИначеЕсли ИсточникКатегории = Перечисления.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория
			  И ИспользоватьТоварныеКатегории Тогда
		КатегорияТовара        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТоварнаяКатегория");
		КатегорияТовараСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КатегорияТовара, "Наименование");
		
	Иначе
		КатегорияТовараСтрокой = "";
	КонецЕсли;
	
	Возврат КатегорияТовараСтрокой;
	
КонецФункции

// Определяет весогабаритные характеристики для упаковки номенклатуры.
//
// Параметры:
//   Упаковка                     - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции;
//   Номенклатура                 - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   ОтличатьВесогабаритыУпаковки - Булево - необходимость указания признака упаковки.
//
// Возвращаемое значение:
//   Структура - весогабаритные характеристики:
//	   * length  - Строка - длина;
//	   * width   - Строка - ширина;
//	   * height  - Строка - высота;
//	   * weight  - Строка - вес;
//	   * package - Число - признак базовой единицы измерения или упаковки номенклатуры (0/1).
//
Функция ПолучитьВесогабариты(Упаковка, Номенклатура, ОтличатьВесогабаритыУпаковки = Ложь) Экспорт
	
	Если ОтличатьВесогабаритыУпаковки Тогда
		СтруктураВесогабаритов = Новый Структура("length, width, height, weight, package");
	Иначе
		СтруктураВесогабаритов = Новый Структура("length, width, height, weight");
	КонецЕсли;
	
	СтруктураВесогабаритов.length = "0"; 
	СтруктураВесогабаритов.width  = "0"; 
	СтруктураВесогабаритов.height = "0"; 
	СтруктураВесогабаритов.weight = "0";
	
	Если ОтличатьВесогабаритыУпаковки Тогда
		СтруктураВесогабаритов.package = 0;  
	КонецЕсли;
	
	ЕдиницаИзмеренияНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	Если ЗначениеЗаполнено(Упаковка)
		 И Упаковка <> ЕдиницаИзмеренияНоменклатуры Тогда 
		ВесогабаритыУпаковки = 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
			|	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
			|	УпаковкиЕдиницыИзмерения.Глубина КАК Длина,
			|	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
			|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
			|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения КАК ДлинаЕдиницаИзмерения,
			|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения КАК ШиринаЕдиницаИзмерения,
			|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения КАК ВысотаЕдиницаИзмерения
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
			|ГДЕ
			|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения
			|	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)";
		
		Запрос.Параметры.Вставить("УпаковкаЕдиницаИзмерения", Упаковка);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДанных.Следующий() Цикл   
			СокращенияЕдИзмДлина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ДлинаЕдиницаИзмерения, "МеждународноеСокращение");
			Если СокращенияЕдИзмДлина = "MTR" Тогда //м 
				Длина = ВыборкаДанных.Длина * 100;  
			ИначеЕсли СокращенияЕдИзмДлина = "KMT" Тогда //км 
				Длина = ВыборкаДанных.Длина * 100000;
			ИначеЕсли СокращенияЕдИзмДлина = "CMT" Тогда //см
				Длина = ВыборкаДанных.Длина;  
			Иначе
				Длина = 0; 
			КонецЕсли;
			
			СокращенияЕдИзмШирина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ШиринаЕдиницаИзмерения, "МеждународноеСокращение");
			Если СокращенияЕдИзмШирина = "MTR" Тогда //м 
				Ширина = ВыборкаДанных.Ширина * 100;  
			ИначеЕсли СокращенияЕдИзмШирина = "KMT" Тогда //км 
				Ширина = ВыборкаДанных.Ширина * 100000;
			ИначеЕсли СокращенияЕдИзмШирина = "CMT" Тогда //см
				Ширина = ВыборкаДанных.Ширина; 
			Иначе
				Ширина = 0;
			КонецЕсли;   
			
			СокращенияЕдИзмВысота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ВысотаЕдиницаИзмерения, "МеждународноеСокращение");
			Если СокращенияЕдИзмВысота = "MTR" Тогда //м 
				Высота = ВыборкаДанных.Высота * 100;  
			ИначеЕсли СокращенияЕдИзмВысота = "KMT" Тогда //км 
				Высота = ВыборкаДанных.Высота * 100000;
			ИначеЕсли СокращенияЕдИзмВысота = "CMT" Тогда //см
				Высота = ВыборкаДанных.Высота;
			Иначе
				Высота = 0;
			КонецЕсли;
			
			СокращенияЕдИзмВес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ВесЕдиницаИзмерения, "МеждународноеСокращение");
			Если СокращенияЕдИзмВес = "GRM" Тогда //г 
				Вес = ВыборкаДанных.Вес / 1000;  
			ИначеЕсли СокращенияЕдИзмВес = "CTM" Тогда //кар 
				Вес = ВыборкаДанных.Вес / 5000;
			ИначеЕсли СокращенияЕдИзмВес = "KGM" Тогда //кг
				Вес = ВыборкаДанных.Вес;   
			ИначеЕсли СокращенияЕдИзмВес = "TNE" Тогда //т
				Вес = ВыборкаДанных.Вес * 1000;
			Иначе 
				Вес = 0;
			КонецЕсли;
		КонецЦикла;   
		
	Иначе 
		ВесогабаритыУпаковки = 0;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
			|	Номенклатура.ВесЧислитель КАК ВесЧислитель,
			|	Номенклатура.ВесЗнаменатель КАК ВесЗнаменатель,
			|	Номенклатура.ВесИспользовать КАК ВесИспользовать,
			|	Номенклатура.ДлинаЕдиницаИзмерения КАК ДлинаЕдиницаИзмерения,
			|	Номенклатура.ДлинаЧислитель КАК ДлинаЧислитель,
			|	Номенклатура.ДлинаЗнаменатель КАК ДлинаЗнаменатель,
			|	Номенклатура.ДлинаИспользовать КАК ДлинаИспользовать,
			|	Номенклатура.ПлощадьЕдиницаИзмерения КАК ПлощадьЕдиницаИзмерения,
			|	Номенклатура.ПлощадьЧислитель КАК ПлощадьЧислитель,
			|	Номенклатура.ПлощадьЗнаменатель КАК ПлощадьЗнаменатель,
			|	Номенклатура.ПлощадьИспользовать КАК ПлощадьИспользовать,
			|	Номенклатура.ОбъемЕдиницаИзмерения КАК ОбъемЕдиницаИзмерения,
			|	Номенклатура.ОбъемЧислитель КАК ОбъемЧислитель,
			|	Номенклатура.ОбъемЗнаменатель КАК ОбъемЗнаменатель,
			|	Номенклатура.ОбъемИспользовать КАК ОбъемИспользовать
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура";  
		
		Запрос.Параметры.Вставить("Номенклатура", Номенклатура);  
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДанных.Следующий() Цикл  
			Если ВыборкаДанных.ВесИспользовать Тогда 
				СокращенияЕдИзмВес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ВесЕдиницаИзмерения, "МеждународноеСокращение");
				Если СокращенияЕдИзмВес = "GRM" Тогда //г   
					ВесЧислитель   = ВыборкаДанных.ВесЧислитель / 1000; 
					ВесЗнаменатель = ВыборкаДанных.ВесЗнаменатель; 
					Вес            = ВесЧислитель / ВесЗнаменатель;
				ИначеЕсли СокращенияЕдИзмВес = "CTM" Тогда //кар 
					ВесЧислитель   = ВыборкаДанных.ВесЧислитель / 5000; 
					ВесЗнаменатель = ВыборкаДанных.ВесЗнаменатель;
					Вес            = ВесЧислитель / ВесЗнаменатель;
				ИначеЕсли СокращенияЕдИзмВес = "KGM" Тогда //кг        
					ВесЧислитель   = ВыборкаДанных.ВесЧислитель;
					ВесЗнаменатель = ВыборкаДанных.ВесЗнаменатель; 
					Вес            = ВесЧислитель / ВесЗнаменатель;
				ИначеЕсли СокращенияЕдИзмВес = "TNE" Тогда //т
					ВесЧислитель   = ВыборкаДанных.ВесЧислитель * 1000;
					ВесЗнаменатель = ВыборкаДанных.ВесЗнаменатель;
					Вес            = ВесЧислитель / ВесЗнаменатель;
				Иначе 
					Вес = 0;
				КонецЕсли;
			Иначе  
				Вес = 0;
			КонецЕсли;
			
			Если ВыборкаДанных.ДлинаИспользовать Тогда
				СокращенияЕдИзмДлина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ДлинаЕдиницаИзмерения, "МеждународноеСокращение");
				Если СокращенияЕдИзмДлина = "MTR" Тогда //м 
					ДлинаЧислитель   = ВыборкаДанных.ДлинаЧислитель * 100; 
					ДлинаЗнаменатель = ВыборкаДанных.ДлинаЗнаменатель; 
					Длина            = ДлинаЧислитель / ДлинаЗнаменатель;
				ИначеЕсли СокращенияЕдИзмДлина = "KMT" Тогда //км 
					ДлинаЧислитель   = ВыборкаДанных.ДлинаЧислитель * 100000; 
					ДлинаЗнаменатель = ВыборкаДанных.ДлинаЗнаменатель;
					Длина            = ДлинаЧислитель / ДлинаЗнаменатель;
				ИначеЕсли СокращенияЕдИзмДлина = "CMT" Тогда //см
					ДлинаЧислитель   = ВыборкаДанных.ДлинаЧислитель;  
					ДлинаЗнаменатель = ВыборкаДанных.ДлинаЗнаменатель;
					Длина            = ДлинаЧислитель / ДлинаЗнаменатель;
				Иначе
					Длина = 0; 
				КонецЕсли;
			Иначе
				Длина = 0;
			КонецЕсли;
			
			Если ВыборкаДанных.ПлощадьИспользовать 
				 И Длина <> 0 Тогда      
				СокращенияЕдИзмПлощадь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ПлощадьЕдиницаИзмерения, "МеждународноеСокращение");
				Если СокращенияЕдИзмПлощадь = "MTK" Тогда //м2 
					ПлощадьЧислитель   = ВыборкаДанных.ПлощадьЧислитель;  
					ПлощадьЗнаменатель = ВыборкаДанных.ПлощадьЗнаменатель;
					Площадь            = ПлощадьЧислитель / ПлощадьЗнаменатель; 
					Ширина = (Площадь / (Длина / 100))*100; 
				Иначе
					Ширина = 0; 
				КонецЕсли; 
			Иначе 
				Ширина = 0;
			КонецЕсли;
			
			Если ВыборкаДанных.ОбъемИспользовать 
				 И Длина <> 0 
				 И Ширина <> 0 Тогда  
				СокращенияЕдИзмОбъем = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.ОбъемЕдиницаИзмерения, "МеждународноеСокращение");
				Если СокращенияЕдИзмОбъем = "MTQ" Тогда //м3 
					ОбъемЧислитель   = ВыборкаДанных.ОбъемЧислитель;  
					ОбъемЗнаменатель = ВыборкаДанных.ОбъемЗнаменатель;
					Объем            = ОбъемЧислитель / ОбъемЗнаменатель; 
					Высота           = (Объем /(Длина/100*Ширина/100))*100;
				ИначеЕсли СокращенияЕдИзмОбъем = "LTR" Тогда //л (дм3) 
					ОбъемЧислитель   = ВыборкаДанных.ОбъемЧислитель;  
					ОбъемЗнаменатель = ВыборкаДанных.ОбъемЗнаменатель;
					Объем            = ОбъемЧислитель / ОбъемЗнаменатель; 
					Высота           = (Объем /Длина*Ширина)*10; 
				Иначе
					Высота = 0; 
				КонецЕсли; 
			Иначе 
				Высота = 0;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВесогабаритов.length = ?(ЗначениеЗаполнено(Длина),  Формат(Длина, "ЧДЦ=2; ЧРД=."),  "0");
	СтруктураВесогабаритов.width  = ?(ЗначениеЗаполнено(Ширина), Формат(Ширина, "ЧДЦ=2; ЧРД=."), "0"); 
	СтруктураВесогабаритов.height = ?(ЗначениеЗаполнено(Высота), Формат(Высота, "ЧДЦ=2; ЧРД=."), "0"); 
	СтруктураВесогабаритов.weight = ?(ЗначениеЗаполнено(Вес),    Формат(Вес, "ЧДЦ=2; ЧРД=."),    "0");
	
	Если ОтличатьВесогабаритыУпаковки Тогда
		СтруктураВесогабаритов.package = ВесогабаритыУпаковки;
	КонецЕсли;
	
	Возврат СтруктураВесогабаритов;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(ЕдиницаИзмеренияСрокаГодности) 
	
	ПредставлениеПериода = "";
	
	Если ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Час Тогда 
		ПредставлениеПериода = "HOUR";
	ИначеЕсли  ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.День Тогда 
		ПредставлениеПериода = "DAY";
	ИначеЕсли  ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда     
		ПредставлениеПериода = "DAY";
	ИначеЕсли   ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Месяц Тогда  
		ПредставлениеПериода = "MONTH";
	ИначеЕсли   ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Год Тогда   
		ПредставлениеПериода = "YEAR";
	КонецЕсли;
	
	Возврат  ПредставлениеПериода;
		
КонецФункции

// Добавляет выбранный ассортимент магазина-источника в магазин приемник.
//
// Параметры:
//   МагазинИсточник               - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись источник ассортимента;
//   МагазинПриемник               - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись приемник ассортимента;
//   ПараметрыКомпоновщикаНастроек - см. ПараметрыДобавленияАссортимента.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ДобавитьАссортимент(МагазинИсточник, МагазинПриемник, ПараметрыКомпоновщикаНастроек) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ДобавитьАссортимент");

	СхемаКомпоновкиДанных               = ПараметрыКомпоновщикаНастроек.СхемаКомпоновкиДанных;
	НастройкиКомпоновщика               = ПараметрыКомпоновщикаНастроек.НастройкиКомпоновкиДанных;
	ИдентификаторыПубликацииВыбранные   = ПараметрыКомпоновщикаНастроек.ИдентификаторыПубликацииВыбранные;
	ИдентификаторыПубликацииИсключенные = ПараметрыКомпоновщикаНастроек.ИдентификаторыПубликацииИсключенные;

	Если ИдентификаторыПубликацииВыбранные <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновщика.Отбор, "ИдентификаторПубликации",
			ИдентификаторыПубликацииВыбранные, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

	Если ИдентификаторыПубликацииИсключенные <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновщика.Отбор, "ИдентификаторПубликации",
			ИдентификаторыПубликацииИсключенные, ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки =
			КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ТаблицаАссортимента = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаАссортимента);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись", МагазинПриемник);
		ЭлементБлокировкиДанных.ИсточникДанных = ТаблицаАссортимента;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		КонецЕсли;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
		КонецЕсли;
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(МагазинПриемник);
		
		Для Каждого СтрокаТаблицыЗначений Из ТаблицаАссортимента Цикл
			Если Не СтрокаТаблицыЗначений.ЗначениеФлагаПометкаУстановлена Тогда
				Продолжить;
			КонецЕсли;

			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицыЗначений,, "УчетнаяЗапись, ИдентификаторПредложения");
			
			Запись.УчетнаяЗапись            = МагазинПриемник;
			Запись.ИдентификаторПредложения = Новый УникальныйИдентификатор();
			
			Если Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена") Тогда
				Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация");
			КонецЕсли;
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить копирование ассортимента из магазина ""%1"" в магазин ""%2"" по причине: %3.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			МагазинИсточник,
			МагазинПриемник,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ДобавлениеАссортиментаИзМагазинаИсточника";
		Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецПопытки;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ТаблицаАссортимента.Количество() / 1000);

	УстановитьПривилегированныйРежим(Истина);
	СерверныеОповещения.ОтправитьСерверноеОповещение(
		"ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные",
		МагазинПриемник,
		Неопределено,
		Истина);
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Ошибка;

КонецФункции

// Конструктор параметров добавления ассортимента.
//
// Возвращаемое значение:
//   Структура - параметры для копирования ассортимента:
//     * НастройкиКомпоновкиДанных           - НастройкиКомпоновкиДанных - используемые в динамическом списке настройки компоновки данных.
//     * СхемаКомпоновкиДанных               - СхемаКомпоновкиДанных - используемая в динамическом списке схема компоновки данных.
//     * ИдентификаторыПубликацииВыбранные   - СписокЗначений Из Строка, Неопределено - список идентификаторов публикации,
//                                               которые выбраны для копирования.
//     * ИдентификаторыПубликацииИсключенные - СписокЗначений Из Строка, Неопределено - список идентификаторов публикации,
//                                               которые исключаются из копирования.
//
Функция ПараметрыДобавленияАссортимента() Экспорт

	ПараметрыКомпоновщикаНастроек = Новый Структура;
	ПараметрыКомпоновщикаНастроек.Вставить("НастройкиКомпоновкиДанных",           Новый НастройкиКомпоновкиДанных);
	ПараметрыКомпоновщикаНастроек.Вставить("СхемаКомпоновкиДанных",               Новый СхемаКомпоновкиДанных);
	ПараметрыКомпоновщикаНастроек.Вставить("ИдентификаторыПубликацииВыбранные",   Неопределено);
	ПараметрыКомпоновщикаНастроек.Вставить("ИдентификаторыПубликацииИсключенные", Неопределено);

	Возврат ПараметрыКомпоновщикаНастроек;

КонецФункции

// Заполняет товарный каталог магазина по данным прайс-листа.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ЦенаПродажи   - СправочникСсылка.ВидыЦен - вид цены продажи.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ЗаполнитьПоДаннымПрайсЛиста(УчетнаяЗапись, ЦенаПродажи) Экспорт
	
	Ошибка       = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	МассивОшибок = Новый Массив;
	
	ИспользуетсяЦенообразование25          = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(); 
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ЗаполнитьПоДаннымПрайсЛиста");
			
	Запрос = Новый Запрос;

	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка
			|	КОНЕЦ КАК Упаковка,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекущаяДата, ВидЦены = &ЦенаПродажи) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ПО (ХарактеристикиНоменклатуры.Владелец = ВЫБОР
			|				КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
			|					ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры
			|				КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
			|					ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура
			|				КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
			|					ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ВладелецХарактеристик
			|				ИНАЧЕ НЕОПРЕДЕЛЕНО
			|			КОНЕЦ)
			|			И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|		ПО (СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись)
			|			И ЦеныНоменклатурыСрезПоследних.Номенклатура = СтатусыПубликацииТоваровЯндексМаркет.Номенклатура
			|			И (ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = СтатусыПубликацииТоваровЯндексМаркет.Характеристика)
			|ГДЕ
			|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура ЕСТЬ NULL";
		
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Упаковка
			|	КОНЕЦ КАК Упаковка,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ЦенаПродажи) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|		ПО (СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись)
			|			И ЦеныНоменклатурыСрезПоследних.Номенклатура = СтатусыПубликацииТоваровЯндексМаркет.Номенклатура
			|			И ЦеныНоменклатурыСрезПоследних.Характеристика = СтатусыПубликацииТоваровЯндексМаркет.Характеристика
			|ГДЕ
			|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура ЕСТЬ NULL";
	КонецЕсли;
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Параметры.Вставить("ЦенаПродажи",   ЦенаПродажи);
	Запрос.Параметры.Вставить("ТекущаяДата",   ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока ВыборкаДанных.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  УчетнаяЗапись);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   ВыборкаДанных.Номенклатура);
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", ВыборкаДанных.Характеристика);
			КонецЕсли;
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", ВыборкаДанных.Упаковка);
			КонецЕсли;
			БлокировкаДанных.Заблокировать();
	
			НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДанных.Номенклатура);
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДанных.Характеристика);
			КонецЕсли;                                 
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НаборЗаписей.Отбор.Упаковка.Установить(ВыборкаДанных.Упаковка);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Запись             = НаборЗаписей[0];
				Запись.ЦенаПродажи = ВыборкаДанных.Цена;
				
			Иначе 
				Запись                = НаборЗаписей.Добавить(); 
				Запись.УчетнаяЗапись  = УчетнаяЗапись; 
				Запись.Номенклатура   = ВыборкаДанных.Номенклатура; 
				Запись.ЦенаПродажи    = ВыборкаДанных.Цена;
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					Запись.Характеристика = ВыборкаДанных.Характеристика; 
				КонецЕсли;
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					Запись.Упаковка = ВыборкаДанных.Упаковка; 
				КонецЕсли;
			КонецЕсли; 
			
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать товарную позицию %1, %2, %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.Номенклатура,
				ВыборкаДанных.Характеристика,
				ВыборкаДанных.Упаковка);

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);

			МассивОшибок.Добавить(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ВыборкаДанных.Количество() / 1000);

	Если МассивОшибок.Количество() > 0 Тогда
		Ошибка.КодОшибки      = "ЯндексМаркет_ОбновитьПоДаннымПрайсЛиста";
		Ошибка.ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область УправлениеОстаткамиТоваров

// Выгружает остатки товарных позиций из информационной базы на торговую площадку.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыгрузитьОстаткиТоваровЯндексМаркет(УчетнаяЗапись = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВыгрузкаОстатковТоваровЯндексМаркет);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
			
	ПоРасписанию = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		 И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		СтрокаИнформацииПоУЗ = НСтр("ru = 'Запуск по расписанию: выгрузка остатков товаров для учетной записи ""%1"" на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаИнформацииБезУЗ = НСтр("ru = 'Запуск по расписанию: выгрузка остатков товаров на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		СтрокаИнформацииПоУЗ = НСтр("ru = 'Запуск по инициативе пользователя: выгрузка остатков товаров для учетной записи ""%1"" на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаИнформацииБезУЗ = НСтр("ru = 'Запуск по инициативе пользователя: выгрузка остатков товаров на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформацииПоУЗ, 
				УчетнаяЗапись));
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтрокаИнформацииБезУЗ);
	КонецЕсли;
	
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Попытка
			Отказ = Ложь;
	    	ВыгрузитьОстаткиТоваровВСервис(ВыборкаДанных, Отказ);
			
			Если Отказ Тогда
				Ошибка.КодОшибки      = "ЯндексМаркет_API_ВыгрузитьОстаткиТоваровЯндексМаркет";
				Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выгрузке остатков товаров для учетной записи ""%1"" на торговую площадку возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.УчетнаяЗапись);
					
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СерверныеОповещения.ОтправитьСерверноеОповещение(
					"ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные",
					ВыборкаДанных.УчетнаяЗапись,
					Неопределено,
					Истина);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выгрузке остатков товаров для учетной записи ""%1"" на торговую площадку возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = "ЯндексМаркет_ВыгрузитьОстаткиТоваровЯндексМаркет";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Завершена выгрузка остатков товаров для учетной записи ""%1"" на торговую площадку.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись));
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершена выгрузка остатков товаров на торговую площадку.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область УправлениеЦенамиНаТовары

// Загружает рекомендованные цены на товары c торговой площадки.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания;
//     * ТаблицаВидовЦен       - ТаблицаЗначений - загружаемые виды цен:
//       ** ВидЦены              - СправочникСсылка.ВидыЦен - вид цены.
//     * ТаблицаТоваров        - ТаблицаЗначений - список товаров:
//       ** УчетнаяЗапись        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//       ** Номенклатура         - СправочникСсылка.Номенклатура - номенклатура;
//       ** Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика;
//       ** Упаковка             - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ЗагрузитьРекомендованныеЦеныЯндексМаркет(УчетнаяЗапись = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаРекомендованныхЦенЯндексМаркет);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
		
	ПоРасписанию = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		СтрокаИнформацииПоУЗ = НСтр("ru = 'Запуск по расписанию: загрузка рекомендованных цен товаров для учетной записи ""%1"" с торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаИнформацииБезУЗ = НСтр("ru = 'Запуск по расписанию: загрузка рекомендованных цен товаров с торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		СтрокаИнформацииПоУЗ = НСтр("ru = 'Запуск по инициативе пользователя: загрузка рекомендованных цен товаров для учетной записи ""%1"" с торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()); 
		СтрокаИнформацииБезУЗ = НСтр("ru = 'Запуск по инициативе пользователя: загрузка рекомендованных цен товаров с торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()); 
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформацииПоУЗ, 
				УчетнаяЗапись));
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтрокаИнформацииБезУЗ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
		
	ВидыЦен = ПолучитьМассивРекомендованныхЦен();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("ТаблицаВидовЦен") Тогда
		ВидыЦен = ДополнительныеПараметры.ТаблицаВидовЦен.ВыгрузитьКолонку("ВидЦены");
	КонецЕсли;
	
	Если ВидыЦен.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не определены виды цен с признаком ""Загружается из Яндекс Маркет"".'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ЗагрузитьРекомендованныеЦеныЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	ТаблицаТоваров = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("ТаблицаТоваров") Тогда
		ТаблицаТоваров = ДополнительныеПараметры.ТаблицаТоваров;
	КонецЕсли;
	
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Попытка
			ИдентификаторыОтработанные = Новый СписокЗначений;
			
			Пока Истина Цикл
				ИдентификаторыПубликации = ПолучитьИдентификаторыПубликации(ВыборкаДанных.УчетнаяЗапись, ВидыЦен, ИдентификаторыОтработанные, ТаблицаТоваров);
				Если ИдентификаторыПубликации.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Отказ = Ложь;
				ПолучитьРекомендованныеЦеныИзСервиса(ВыборкаДанных, ИдентификаторыПубликации, ВидыЦен, Отказ);
				
				Если Отказ Тогда
					Ошибка.КодОшибки      = "ЯндексМаркет_API_ЗагрузитьРекомендованныеЦеныЯндексМаркет";
					Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При загрузке рекомендованных цен товаров для учетной записи ""%1"" с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'"),
						ВыборкаДанных.УчетнаяЗапись);
				КонецЕсли;
				
				Для Каждого ЭлементКоллекции Из ИдентификаторыПубликации Цикл
					ИдентификаторыОтработанные.Добавить(ЭлементКоллекции.Значение);
				КонецЦикла;
			КонецЦикла;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При загрузке рекомендованных цен товаров для учетной записи ""%1"" с торговой площадки возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = "ЯндексМаркет_ЗагрузитьРекомендованныеЦеныЯндексМаркет";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЦикла;

	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Завершена загрузка рекомендованных цен товаров для учетной записи ""%1"" с торговой площадки.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись));
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершена загрузка рекомендованных цен товаров с торговой площадки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;

КонецФункции

// Выгружает рекомендованные цены на товары c торговой площадки.
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания.
//     * ТаблицаТоваров        - ТаблицаЗначений - список товаров:
//       ** УчетнаяЗапись        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//       ** Номенклатура         - СправочникСсылка.Номенклатура - номенклатура;
//       ** Характеристика       - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика;
//       ** Упаковка             - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыгрузитьУстановленныеЦеныЯндексМаркет(УчетнаяЗапись = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенЯндексМаркет);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
			
	ПоРасписанию = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		 И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		СтрокаИнформацииПоУЗ = НСтр("ru = 'Запуск по расписанию: выгрузка текущих цен товаров для учетной записи ""%1"" на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаИнформацииБезУЗ = НСтр("ru = 'Запуск по расписанию: выгрузка текущих цен товаров на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		СтрокаИнформацииПоУЗ = НСтр("ru = 'Запуск по инициативе пользователя: выгрузка текущих цен товаров для учетной записи ""%1"" на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()); 
		СтрокаИнформацииБезУЗ = НСтр("ru = 'Запуск по инициативе пользователя: выгрузка текущих цен товаров на торговую площадку.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()); 
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтрокаИнформацииПоУЗ, 
				УчетнаяЗапись));
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтрокаИнформацииБезУЗ);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаТоваров = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		 И ДополнительныеПараметры.Свойство("ТаблицаТоваров") Тогда
		ТаблицаТоваров = ДополнительныеПараметры.ТаблицаТоваров;
	КонецЕсли;
	
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		Попытка
			Отказ = Ложь;
	    	УстановитьЦеныВСервисе(ВыборкаДанных, ТаблицаТоваров, Отказ);
			
			Если Отказ Тогда
				Ошибка.КодОшибки      = "ЯндексМаркет_API_ВыгрузитьУстановленныеЦеныЯндексМаркет";
				Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При выгрузке текущих цен товаров для учетной записи ""%1"" на торговую площадку возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.УчетнаяЗапись);
					
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СерверныеОповещения.ОтправитьСерверноеОповещение(
					"ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные",
					ВыборкаДанных.УчетнаяЗапись,
					Неопределено,
					Истина);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выгрузке текущих цен товаров для учетной записи ""%1"" на торговую площадку возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = "ЯндексМаркет_ВыгрузитьУстановленныеЦеныЯндексМаркет";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Завершена выгрузка текущих цен товаров для учетной записи ""%1"" на торговую площадку.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись));
	Иначе
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершена выгрузка текущих цен товаров для учетной записи ""%1"" на торговую площадку.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;

КонецФункции

// Определяет список рекомендованных цен.
// 
// Возвращаемое значение:
//    Массив Из СправочникСсылка.ВидыЦен - рекомендованные виды цен.
//
Функция ПолучитьМассивРекомендованныхЦен() Экспорт  
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	НЕ ВидыЦен.ПометкаУдаления
		|	И ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяИзЯндексМаркет)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции  

// Конструктор настроек по способу задания цены.
//
// Возвращаемое значение:
//   Структура - настройки:
//     * ИмяПараметра      - Строка - имя параметра.
//     * СписокВыбора      - Строка - список выбора (строка с разделителем).
//     * ЗначениеПараметра - Строка - значение параметра.
//
Функция СтруктураПараметровСпособаЗаданияЦены() Экспорт

	СтруктураПараметровСпособаЗаданияЦены              = Новый Структура("ИмяПараметра, СписокВыбора, ЗначениеПараметра");
	СтруктураПараметровСпособаЗаданияЦены.ИмяПараметра = НСтр("ru = 'Тип цены Яндекс Маркет'");
	СтруктураПараметровСпособаЗаданияЦены.СписокВыбора = "Минимальная цена продажи на Маркете;Рекомендованная Маркетом;Минимальная среди всех предложений товара на Маркете;Максимальная без скидки;Максимальная для показов на Маркете";

	Возврат СтруктураПараметровСпособаЗаданияЦены;
	
КонецФункции

// Обновляет актуальные цены торговой площадки.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ЦенаПродажи   - СправочникСсылка.ВидыЦен - вид цены продажи;
//   ТаблицаЦен    - ТаблицаЗначений - список рекомендованных цен:
//     * ВидЦены     - СправочникСсылка.ВидыЦен - вид цены;
//     * ПолеТаблицы - Строка - обозначение вида цены в Яндекс Маркет.
//
// Возвращаемое значение:
//   Структура - описание ошибки при выполнении операции (см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка):
//     * КодОшибки      - Строка - код ошибки;
//     * ОписаниеОшибки - Строка - текстовое описание ошибки;
//     * Детализация    - Массив Из Строка - детализированная информация по ошибке;
//                      - Неопределено - детализация не используется (по умолчанию).
//     * АктуальныеЦены - Неопределено - при возникновении ошибки;
//                      - Массив Из Структура - актуальные цены, описания полей см. Обработка.УправлениеПродажамиНаЯндексМаркет.ВыгрузкаТоварногоКаталога.АктуальныеЦены.
//
Функция ОбновитьАктуальныеЦеныТорговойПлощадки(УчетнаяЗапись, ЦенаПродажи, ТаблицаЦен) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	Ошибка.Вставить("АктуальныеЦены", Неопределено);
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ОбновитьАктуальныеЦеныТорговойПлощадки");
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаЦен.ВидЦены КАК ВидЦены,
			|	ТаблицаЦен.ПолеТаблицы КАК ПолеТаблицы
			|ПОМЕСТИТЬ ВнутренняяТаблицаЦен
			|ИЗ
			|	&ТаблицаЦен КАК ТаблицаЦен
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидЦены
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АктуальныеЦены.Номенклатура КАК Номенклатура,
			|	АктуальныеЦены.Характеристика КАК Характеристика,
			|	АктуальныеЦены.Упаковка КАК Упаковка,
			|	АктуальныеЦены.ПредставлениеТовара КАК ПредставлениеТовара,
			|	АктуальныеЦены.ДатаОбновления КАК ДатаОбновления,
			|	МАКСИМУМ(АктуальныеЦены.ЦенаПродажи) КАК ЦенаПродажи,
			|	МАКСИМУМ(АктуальныеЦены.МинимальнаяЦенаПродажи) КАК МинимальнаяЦенаПродажи,
			|	МАКСИМУМ(АктуальныеЦены.РекомендованнаяЦена) КАК РекомендованнаяЦена,
			|	МАКСИМУМ(АктуальныеЦены.МинимальнаяСредиВсехПредложений) КАК МинимальнаяСредиВсехПредложений,
			|	МАКСИМУМ(АктуальныеЦены.МаксимальнаяБезСкидки) КАК МаксимальнаяБезСкидки,
			|	МАКСИМУМ(АктуальныеЦены.МаксимальнаяДляПоказов) КАК МаксимальнаяДляПоказов
			|ИЗ
			|	(ВЫБРАТЬ
			|		СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
			|		СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
			|		СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
			|		СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК ПредставлениеТовара,
			|		СтатусыПубликацииТоваровЯндексМаркет.ДатаУстановкиЦены КАК ДатаОбновления,
			|		ВЫБОР
			|			КОГДА ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦен
			|				ТОГДА ЦеныНоменклатуры25СрезПоследних.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЦенаПродажи,
			|		ВЫБОР
			|			КОГДА ВнутренняяТаблицаЦен.ПолеТаблицы = ""МинимальнаяЦенаПродажи""
			|				ТОГДА ЦеныНоменклатуры25СрезПоследних.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК МинимальнаяЦенаПродажи,
			|		ВЫБОР
			|			КОГДА ВнутренняяТаблицаЦен.ПолеТаблицы = ""РекомендованнаяЦена""
			|				ТОГДА ЦеныНоменклатуры25СрезПоследних.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК РекомендованнаяЦена,
			|		ВЫБОР
			|			КОГДА ВнутренняяТаблицаЦен.ПолеТаблицы = ""МинимальнаяСредиВсехПредложений""
			|				ТОГДА ЦеныНоменклатуры25СрезПоследних.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК МинимальнаяСредиВсехПредложений,
			|		ВЫБОР
			|			КОГДА ВнутренняяТаблицаЦен.ПолеТаблицы = ""МаксимальнаяБезСкидки""
			|				ТОГДА ЦеныНоменклатуры25СрезПоследних.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК МаксимальнаяБезСкидки,
			|		ВЫБОР
			|			КОГДА ВнутренняяТаблицаЦен.ПолеТаблицы = ""МаксимальнаяДляПоказов""
			|				ТОГДА ЦеныНоменклатуры25СрезПоследних.Цена
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК МаксимальнаяДляПоказов
			|	ИЗ
			|		РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
			|					,
			|					ВидЦены.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяИзЯндексМаркет)
			|						ИЛИ ВидЦены = &ВидЦен) КАК ЦеныНоменклатуры25СрезПоследних
			|			ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВнутренняяТаблицаЦен КАК ВнутренняяТаблицаЦен
			|			ПО (ЦеныНоменклатуры25СрезПоследних.ВидЦены = ВнутренняяТаблицаЦен.ВидЦены)
			|	ГДЕ
			|		СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
			|		И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
			|		И ЦеныНоменклатуры25СрезПоследних.Номенклатура ЕСТЬ НЕ NULL) КАК АктуальныеЦены
			|
			|СГРУППИРОВАТЬ ПО
			|	АктуальныеЦены.Номенклатура,
			|	АктуальныеЦены.Характеристика,
			|	АктуальныеЦены.Упаковка,
			|	АктуальныеЦены.ПредставлениеТовара,
			|	АктуальныеЦены.ДатаОбновления";
		
		ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
		Если Не ИспользуетсяЦенообразование25 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ЦеныНоменклатуры25", "РегистрСведений.ЦеныНоменклатуры");
		КонецЕсли;
		
		Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.Параметры.Вставить("ТаблицаЦен",    ТаблицаЦен);
		Запрос.Параметры.Вставить("ВидЦен",        ЦенаПродажи);
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанных = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
		УстановитьПривилегированныйРежим(Ложь);
		
		Ошибка.Вставить("АктуальныеЦены", ВыборкаДанных);
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ВыборкаДанных.Количество() / 1000);

	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обновлении актуальных цен товарных позиций для учетной записи ""%1"" возникли ошибки: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ВыборкаДанных.УчетнаяЗапись,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ОбновитьАктуальныеЦеныТорговойПлощадки";
		Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецПопытки;
	
	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область УправлениеМагазинами

// Возвращает список магазинов, к которым имеет доступ пользователь - владелец авторизационного токена. 
//
// Параметры:
//   ИдентификаторАккаунта - Строка - идентификатор аккаунта для подключения к сервису.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьМагазиныЯндексМаркет(ИдентификаторАккаунта) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();  
	Отказ  = Ложь;
	
	ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ИдентификаторАккаунта);
	Магазины          = ПолучитьМагазиныПользователяИзСервиса(ДанныеАвторизации, Отказ);

	Если Не Отказ Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка,
			|	УчетныеЗаписиМаркетплейсов.Наименование КАК Наименование,
			|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления КАК ПометкаУдаления,
			|	УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта КАК ИдентификаторАккаунта,
			|	УчетныеЗаписиМаркетплейсов.ИдентификаторМагазина КАК ИдентификаторМагазина,
			|	УчетныеЗаписиМаркетплейсов.ИдентификаторКабинета КАК ИдентификаторКабинета,
			|	УчетныеЗаписиМаркетплейсов.СхемаРаботы КАК СхемаРаботы,
			|	ЛОЖЬ КАК Активность
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
			|	И УчетныеЗаписиМаркетплейсов.ИдентификаторАккаунта = &ИдентификаторАккаунта";
		
		Запрос.УстановитьПараметр("ИдентификаторАккаунта", ИдентификаторАккаунта);
		
		УстановитьПривилегированныйРежим(Истина);
		УчетныеЗаписи = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ЭлементКоллекции Из Магазины.campaigns Цикл
			СхемаРаботы = ОпределитьСхемуРаботы(ЭлементКоллекции.placementType);
			
			СтрокаТаблицыЗначений = УчетныеЗаписи.Найти(Формат(ЭлементКоллекции.id, "ЧН=; ЧГ=0"), "ИдентификаторМагазина");
			Если СтрокаТаблицыЗначений = Неопределено Тогда
				Попытка
					НоваяУчетнаяЗапись                                   = Справочники.УчетныеЗаписиМаркетплейсов.СоздатьЭлемент();
					НоваяУчетнаяЗапись.Наименование                      = ЭлементКоллекции.domain;
					НоваяУчетнаяЗапись.ВидМаркетплейса                   = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет;
					НоваяУчетнаяЗапись.ИдентификаторАккаунта             = ИдентификаторАккаунта;
					НоваяУчетнаяЗапись.ИдентификаторМагазина             = Формат(ЭлементКоллекции.id, "ЧН=; ЧГ=0");
					НоваяУчетнаяЗапись.ИдентификаторКабинета             = Формат(ЭлементКоллекции.business.id, "ЧН=; ЧГ=0");
					НоваяУчетнаяЗапись.СхемаРаботы                       = СхемаРаботы;
					НоваяУчетнаяЗапись.ПометкаУдаления                   = Ложь;
					НоваяУчетнаяЗапись.НеОбновлятьДанныеТорговойПлощадки = Истина;
					НоваяУчетнаяЗапись.Записать();
					
				Исключение
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			Иначе
				СтрокаТаблицыЗначений.Активность = Истина;
				
				Если ЭлементКоллекции.placementType = "FBS"
						И СтрокаТаблицыЗначений.СхемаРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.Express Тогда
					СхемаРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.Express;
				КонецЕсли;
				
				Если СтрокаТаблицыЗначений.Наименование <> ЭлементКоллекции.domain
					 	Или СтрокаТаблицыЗначений.ИдентификаторАккаунта <> ИдентификаторАккаунта
					 	Или СтрокаТаблицыЗначений.ИдентификаторКабинета <> Формат(ЭлементКоллекции.business.id, "ЧН=; ЧГ=0")
					 	Или СтрокаТаблицыЗначений.СхемаРаботы <> СхемаРаботы Тогда
					Попытка
						УчетнаяЗапись = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
						УчетнаяЗапись.Наименование          = ЭлементКоллекции.domain;
						УчетнаяЗапись.ИдентификаторАккаунта = ИдентификаторАккаунта;
						УчетнаяЗапись.ИдентификаторКабинета = Формат(ЭлементКоллекции.business.id, "ЧН=; ЧГ=0");
						УчетнаяЗапись.СхемаРаботы           = СхемаРаботы;
						УчетнаяЗапись.ПометкаУдаления       = Ложь;
						УчетнаяЗапись.Записать();
						
					Исключение
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыЗначений Из УчетныеЗаписи Цикл
			Если Не СтрокаТаблицыЗначений.Активность И Не СтрокаТаблицыЗначений.ПометкаУдаления Тогда
				Попытка
					УчетнаяЗапись = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
					УчетнаяЗапись.УстановитьПометкуУдаления(Истина);
					
				Исключение
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;     
				
			ИначеЕсли СтрокаТаблицыЗначений.Активность И СтрокаТаблицыЗначений.ПометкаУдаления Тогда
				Попытка
					УчетнаяЗапись = СтрокаТаблицыЗначений.Ссылка.ПолучитьОбъект();
					УчетнаяЗапись.УстановитьПометкуУдаления(Ложь);
					
				Исключение
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;   
			КонецЕсли; 
		КонецЦикла;
		
		Если Магазины.campaigns.Количество() = 0 Тогда
			Ошибка.КодОшибки      = "ЯндексМаркет_ПолучитьМагазиныЯндексМаркет";
			Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В личном кабинете торговой площадки для аккаунта ""%1"" магазины не зарегистрированы.'"),
				ДанныеАвторизации.login);
		КонецЕсли;
		
	Иначе
		Ошибка.КодОшибки      = "ЯндексМаркет_API_ПолучитьМагазиныЯндексМаркет";
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении списка магазинов для аккаунта ""%1"" возникли ошибки. Подробности см. в журнале регистрации.'"),
			ДанныеАвторизации.login);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область УправлениеПродажами

// Выполняет загрузку информации о продажах товаров через торговую площадку. 
//
// Параметры:
//   УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                           - Неопределено - выполнить регламентное задание по всем учетным записям, с которыми разрешен обмен данными.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в функцию;
//                           - Структура - возможные ключи дополнительных параметров:
//     * ПоРасписанию          - Булево - признак автоматического или ручного запуска регламентного задания.
//     * НачалоПериода         - Дата, Неопределено - начало периода загрузки данных.
//     * ОкончаниеПериода      - Дата, Неопределено - окончание периода загрузки данных.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ЗагрузитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗапись = Неопределено, 
			ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет") Тогда
		ТекстОшибки = НСтр("ru = 'Интеграция с Яндекс Маркет не используется.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_ИспользоватьИнтеграциюСЯндексМаркет";
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись);
		ДанныеАвторизации   = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		
		Если ДанныеАвторизации = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" отсутствует информация об аккаунте.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ОтсутствуетИнформацияОбАккаунте";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
		
		Если ДанныеУчетнойЗаписи.НеОбновлятьДанныеТорговойПлощадки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для учетной записи ""%1"" запрещен обмен данными с торговой площадкой.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_НеОбновлятьДанныеТорговойПлощадки";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ПоРасписанию = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
			И ДополнительныеПараметры.Свойство("ПоРасписанию") Тогда
		ПоРасписанию = ДополнительныеПараметры.ПоРасписанию;
	КонецЕсли;
	
	НачалоПериода    = НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	ОкончаниеПериода = КонецМесяца(НачалоПериода);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("НачалоПериода") Тогда
			НачалоПериода = ?(ЗначениеЗаполнено(ДополнительныеПараметры.НачалоПериода), 
				ДополнительныеПараметры.НачалоПериода, 
				НачалоПериода);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОкончаниеПериода") Тогда
			ОкончаниеПериода = ?(ЗначениеЗаполнено(ДополнительныеПараметры.ОкончаниеПериода), 
				ДополнительныеПараметры.ОкончаниеПериода, 
				ОкончаниеПериода);
		КонецЕсли;
	КонецЕсли;
	
	Если НачалоПериода > ОкончаниеПериода Тогда
		ТекстОшибки = НСтр("ru = 'Период загрузки информации о продажах товаров через торговую площадку указан неверно.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
				
		Ошибка.КодОшибки      = "ЯндексМаркет_API_ЗагрузитьИнформациюОПродажахТоваров";
		Ошибка.ОписаниеОшибки = ТекстОшибки;

		Возврат Ошибка;
	КонецЕсли;
	
	Если ПоРасписанию Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запуск по расписанию: загрузка информации о продажах товаров через торговую площадку для учетной записи ""%1"".'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Запуск по расписанию: загрузка информации о продажах товаров через торговую площадку.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаДанных = ВыбратьУчетныеЗаписиЯндексМаркет(УчетнаяЗапись);
	
	Пока ВыборкаДанных.Следующий() Цикл
		// Получить файлы отчетов
		Файлы = Новый Массив;
		
		Попытка
			Отказ = Ложь;
			Файлы = ПолучитьОтчетыОРеализованныхТоварахИзСервиса(ВыборкаДанных, 
				НачалоПериода, 
				ОкончаниеПериода, 
				Отказ);
			
			Если Отказ Тогда
				Ошибка.КодОшибки      = "ЯндексМаркет_API_ЗагрузитьИнформациюОПродажахТоваров";
				Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки. Подробности см. в журнале регистрации.'"),
					ВыборкаДанных.Наименование);
				Продолжить;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаДанных.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
			Ошибка.КодОшибки      = "ЯндексМаркет_ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Продолжить;
		КонецПопытки;
		
		// Обработать полученные файлы
		Если Файлы.Количество() = 0 Тогда
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки: за период с %2 по %3 нет данных.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				ВыборкаДанных.УчетнаяЗапись,
				Формат(НачалоПериода, "ДЛФ=D;"),
				Формат(ОкончаниеПериода, "ДЛФ=D;"));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
				
			Ошибка.КодОшибки      = "ЯндексМаркет_ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку";
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
			Продолжить;
			
		Иначе  
			// Инициализация шаблонов
			ЛистыШаблона = Новый Структура;
			ЛистыШаблона.Вставить("Товары__переданные_в_доставку", Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																		"Товары, переданные в доставку", "ПФ_MXL_ТоварыПереданныеВДоставку", 1));
			ЛистыШаблона.Вставить("Доставленные_товары",           Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																		"Доставленные товары", "ПФ_MXL_ДоставленныеТовары", 2));
			ЛистыШаблона.Вставить("Невыкупленные_товары",          Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																		"Невыкупленные товары", "ПФ_MXL_НевыкупленныеТовары", 3));
			ЛистыШаблона.Вставить("Возвращенные_товары",           Новый Структура("ИмяЛиста, ИмяМакетаСШаблоном, Служебный", 
																		"Возвращенные товары", "ПФ_MXL_ВозвращенныеТовары", 4));
			
			ПараметрыЗагрузкиВТабличнуюЧасть = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();
			ПараметрыЗагрузкиВТабличнуюЧасть.ИмяОбъектаМетаданных = "Обработка.УправлениеПродажамиНаЯндексМаркет";
			ПараметрыЗагрузкиВТабличнуюЧасть.ИмяТабличнойЧасти    = "ДанныеОРеализованныхТоварах";
			ПараметрыЗагрузкиВТабличнуюЧасть.ИмяМакетаСШаблоном   = "";
			
			Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
				ПараметрыЗагрузкиВТабличнуюЧасть.ИмяМакетаСШаблоном = КлючИЗначение.Значение.ИмяМакетаСШаблоном;
				
				ПараметрыШапки       = ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки();
				ИнформацияПоКолонкам = ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам();
				
				ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(
					ПараметрыЗагрузкиВТабличнуюЧасть,
					ИнформацияПоКолонкам,
					ПараметрыШапки);
					
				КлючИЗначение.Значение.Вставить("ПараметрыШапки",                           ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыШапки));
				КлючИЗначение.Значение.Вставить("ИнформацияПоКолонкам",                     ОбщегоНазначения.СкопироватьРекурсивно(ИнформацияПоКолонкам));
				КлючИЗначение.Значение.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    ПараметрыЗагрузкиВТабличнуюЧасть.ВысотаЗаголовкаТаблицыМакетаСШаблоном);
				КлючИЗначение.Значение.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", ПараметрыЗагрузкиВТабличнуюЧасть.ВысотаЗаголовкаТаблицыЗагружаемогоМакета);
				КлючИЗначение.Значение.Вставить("ШаблонСДанными",                           Новый ТабличныйДокумент);
				КлючИЗначение.Значение.Вставить("ЗаполняемыйШаблон",                        Неопределено);
			КонецЦикла;
			
			// Чтение данных
			ТаблицаЗагруженныхДанных = Новый ТаблицаЗначений;
			
			Для Каждого Файл Из Файлы Цикл
				ДанныеФайла = Новый ТабличныйДокумент;
				ДанныеФайла.Прочитать(Файл, СпособЧтенияЗначенийТабличногоДокумента.Значение);
				ФайловаяСистема.УдалитьВременныйФайл(Файлы[0]);
				
				Для Каждого Область Из ДанныеФайла.Области Цикл
					Если ЛистыШаблона.Свойство(Область.Имя) Тогда
						ШаблонСДанными = Новый ТабличныйДокумент;
						ШаблонСДанными.Вывести(ДанныеФайла.ПолучитьОбласть(Область.Имя));
						
						ЛистыШаблона[Область.Имя].ШаблонСДанными = ШаблонСДанными;
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента(Новый УникальныйИдентификатор);
				ПараметрыЗагрузки.ЛистыШаблона = ОбщегоНазначения.СкопироватьРекурсивно(ЛистыШаблона);
				
				РезультатЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ТабличныйДокументВТаблицу(ДанныеФайла, 
					ПараметрыЗагрузки, 
					Истина);
				
				Для Каждого ЭлементКоллекции Из РезультатЗагрузки.Колонки Цикл
					Если ТаблицаЗагруженныхДанных.Колонки.Найти(ЭлементКоллекции.Имя) = Неопределено Тогда
						ТаблицаЗагруженныхДанных.Колонки.Добавить(ЭлементКоллекции.Имя, 
							Новый ОписаниеТипов(ЭлементКоллекции.ТипЗначения), 
							ЭлементКоллекции.Заголовок);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого СтрокаТаблицыЗначений Из РезультатЗагрузки Цикл
					Если СтрокаТаблицыЗначений.Служебный = 1
							И (СтрокаТаблицыЗначений.ДатаПередачиВДоставку < НачалоПериода
								Или СтрокаТаблицыЗначений.ДатаПередачиВДоставку > ОкончаниеПериода) Тогда
						Продолжить;
					ИначеЕсли СтрокаТаблицыЗначений.Служебный = 2
								И (СтрокаТаблицыЗначений.ДатаДоставки < НачалоПериода
									Или СтрокаТаблицыЗначений.ДатаДоставки > ОкончаниеПериода) Тогда
						Продолжить;
					ИначеЕсли (СтрокаТаблицыЗначений.Служебный = 3
									Или СтрокаТаблицыЗначений.Служебный = 4)
								И (СтрокаТаблицыЗначений.ДатаНевыкупаВозврата < НачалоПериода
									Или СтрокаТаблицыЗначений.ДатаНевыкупаВозврата > ОкончаниеПериода) Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗагруженныхДанных.Добавить(), СтрокаТаблицыЗначений);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗагруженныхДанных Цикл
				СтрокаТаблицыЗначений.НомерСтроки = ТаблицаЗагруженныхДанных.Индекс(СтрокаТаблицыЗначений) + 1;
			КонецЦикла;
			
			// Сопоставление данных
			ТаблицаСопоставленияДанных = ТаблицаЗагруженныхДанных.СкопироватьКолонки();
			
			ПараметрыСопоставления = Новый Структура;
			ПараметрыСопоставления.Вставить("УчетнаяЗапись",                    ВыборкаДанных.УчетнаяЗапись);
			ПараметрыСопоставления.Вставить("ИмяТабличнойЧасти",                "ДанныеОРеализованныхТоварах");
			ПараметрыСопоставления.Вставить("КолонкиОбязательныеПриПроверке",   Новый СписокЗначений);
			ПараметрыСопоставления.Вставить("КолонкиДополнительныеПриПроверке", Новый СписокЗначений);
			
			Обработки.УправлениеПродажамиНаЯндексМаркет.СопоставитьЗагружаемыеДанные(ТаблицаСопоставленияДанных, 
				ТаблицаЗагруженныхДанных, 
				ПараметрыСопоставления);
				
			// Создание документов
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("УчетнаяЗапись",                ВыборкаДанных.УчетнаяЗапись);
			ПараметрыЗаписи.Вставить("ДополнительныеПараметры",      Неопределено);
			ПараметрыЗаписи.Вставить("ИмяТабличнойЧасти",            "ДанныеОРеализованныхТоварах");
			ПараметрыЗаписи.Вставить("ЗагружатьНезаполненныеСтроки", Истина);
			
			РезультатЗаписи = Обработки.УправлениеПродажамиНаЯндексМаркет.ЗаписатьЗагружаемыеДанные(ТаблицаСопоставленияДанных, 
				ПараметрыЗаписи);
			
			Если Не ПустаяСтрока(РезультатЗаписи.ОписаниеОшибки) Тогда
				Отказ = Истина;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки: %2'",
						ОбщегоНазначения.КодОсновногоЯзыка()), 
					ВыборкаДанных.УчетнаяЗапись,
					РезультатЗаписи.ОписаниеОшибки);
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ТекстОшибки);
					
				Ошибка.КодОшибки      = "ЯндексМаркет_ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку";
				Ошибка.ОписаниеОшибки = ТекстОшибки;
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоРасписанию Тогда 
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Завершена загрузка информации о продажах товаров через торговую площадку для учетной записи ""%1"".'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись));
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Завершена загрузка информации о продажах товаров через торговую площадку.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

// Определяет префиксы и представления регламентных заданий.
//
// Параметры:
//   ТолькоОбязательные       - Булево - признак получения только обязательных регламентных заданий;
//   ДоступнаРаботаСОстатками - Булево - см. Справочники.УчетныеЗаписиМаркетплейсов.ДоступнаРаботаСОстатками.
// 
// Возвращаемое значение:
//   СписокЗначений Из Строка - префиксы и представления регламентных заданий:
//     * Значение      - Строка - префикс регламентного задания;
//     * Представление - Строка - представление регламентного задания.
//
Функция ПрефиксыРегламентныхЗаданий(ТолькоОбязательные = Ложь, ДоступнаРаботаСОстатками = Истина) Экспорт

	Префиксы = Новый СписокЗначений;
	
	Префиксы.Добавить("ЯндексМаркет_ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет_",
		НСтр("ru = 'Яндекс Маркет. Получение рекомендаций при выгрузке товарного каталога'"));
	Префиксы.Добавить("ЯндексМаркет_ОтправкаНаМодерациюСвязейТоваровЯндексМаркет_",
		НСтр("ru = 'Яндекс Маркет. Отправка на модерацию связей товаров'"));
	Префиксы.Добавить("ЯндексМаркет_ПолучениеСтатусовМодерацииТоваровЯндексМаркет_",
		НСтр("ru = 'Яндекс Маркет. Получение статусов модерации товаров'"));

	Если Не ТолькоОбязательные Тогда
		Префиксы.Добавить("ЯндексМаркет_ВыгрузкаУстановленныхЦенЯндексМаркет_",
			НСтр("ru = 'Яндекс Маркет. Выгрузка установленных цен товаров'"));

		Если ДоступнаРаботаСОстатками Тогда
			Префиксы.Добавить("ЯндексМаркет_ВыгрузкаОстатковТоваровЯндексМаркет_",
				НСтр("ru = 'Яндекс Маркет. Выгрузка остатков товаров'"));
		КонецЕсли;

		Префиксы.Добавить("ЯндексМаркет_ЗагрузкаДанныхОПродажах_",
			НСтр("ru = 'Яндекс Маркет. Загрузка информации о продажах товаров через торговую площадку'"));
	КонецЕсли;

	Возврат Префиксы;

КонецФункции

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
// См. ОчередьЗаданийЛокализация.ПриОпределенииПсевдонимовОбработчиков.
//
// Параметры:
//   СоответствиеИменПсевдонимам - Соответствие из КлючИЗначение:
//     * Ключ - Строка - псевдоним метода, например "ОчиститьОбластьДанных".
//     * Значение - Строка - Имя метода для вызова, например "РаботаВМоделиСервиса.ОчиститьОбластьДанных".
//         В качестве значения можно указать Неопределено, в этом случае считается что имя совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыгрузкаОстатковТоваровЯндексМаркет.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенЯндексМаркет.ИмяМетода); 
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаРекомендованныхЦенЯндексМаркет.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет.ИмяМетода);
	
КонецПроцедуры

// Определяет состояния регламентных заданий.
//
// Параметры:
//   УчетнаяЗапись               - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ПрефиксыРегламентныхЗаданий - СписокЗначений Из Строка, Неопределено - см. ПрефиксыРегламентныхЗаданий.
// 
// Возвращаемое значение:
//   Структура - состояния. Содержит поля:
//       * ЕстьОтключенныеРегламентныеЗадания - Булево - признак наличия отключенных регламентных заданий;
//       * ОтключенныеРегламентныеЗадания     - СписокЗначений Из Строка - содержит данные для выбора. Колонки:
//           ** Значение      - Строка - префикс регламентного задания;
//           ** Представление - Строка - представление регламентного задания.
//
Функция ПолучитьСостоянияРегламентныхЗаданийМагазина(УчетнаяЗапись, ПрефиксыРегламентныхЗаданий = Неопределено) Экспорт

	СостоянияРегламентныхЗаданийМагазина = Новый Структура;
	СостоянияРегламентныхЗаданийМагазина.Вставить("ЕстьОтключенныеРегламентныеЗадания", Ложь);
	СостоянияРегламентныхЗаданийМагазина.Вставить("ОтключенныеРегламентныеЗадания",     Новый СписокЗначений);

	ДоступнаРаботаСОстатками = Справочники.УчетныеЗаписиМаркетплейсов.ДоступнаРаботаСОстаткамиДляУчетнойЗаписи(УчетнаяЗапись);

	Если ПрефиксыРегламентныхЗаданий = Неопределено Тогда
		ПрефиксыРегламентныхЗаданий = ПрефиксыРегламентныхЗаданий(Ложь, ДоступнаРаботаСОстатками);
	КонецЕсли;

	Для Каждого Префикс Из ПрефиксыРегламентныхЗаданий Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", Префикс.Представление, УчетнаяЗапись);
		Ключ          = Префикс.Значение + Строка(УчетнаяЗапись.УникальныйИдентификатор());

		Отбор = Новый Структура("Ключ", Ключ);
		Результат = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если Результат.Количество() = 0 Тогда
			СостоянияРегламентныхЗаданийМагазина.ЕстьОтключенныеРегламентныеЗадания = Истина;
			СостоянияРегламентныхЗаданийМагазина.ОтключенныеРегламентныеЗадания.Добавить(Префикс.Значение, Представление);
		Иначе
			Задание = Результат[0];
			Если Не Задание.Использование Тогда
				СостоянияРегламентныхЗаданийМагазина.ЕстьОтключенныеРегламентныеЗадания = Истина;
				СостоянияРегламентныхЗаданийМагазина.ОтключенныеРегламентныеЗадания.Добавить(Префикс.Значение, Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат СостоянияРегламентныхЗаданийМагазина;

КонецФункции

#КонецОбласти

#Область СервисныеФункции

// Возвращает имя события журнала регистрации работы с торговой площадкой.
//
// Возвращаемое значение:
//   Строка - Наименование события для записей в журнале регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Интеграция с Яндекс Маркет'", 
				ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

// Преобразует строку, содержащую текст JSON, в структуру данных.
//
// Параметры:
//   СтрокаJSON                   - Строка - строка, содержащая текст в формате JSON.
//   ИменаСвойствСоЗначениямиДата - Массив Из Строка, Строка - массив, элементы которого содержат имена свойств JSON, для 
//                                    которых нужно вызывать восстановление даты из строки.
//   ПрочитатьВСоответствие       - Булево - если установлено Истина, чтение объекта JSON будет выполнено в Соответствие. Если установлено
//                                    Ложь, объекты будут считываться в объект типа Структура. Значение по умолчанию: Ложь.
//
// Возвращаемое значение:
//   Произвольный - результат преобразования строки JSON.
//
Функция ИзJSON(СтрокаJSON, ИменаСвойствСоЗначениямиДата = "", ПрочитатьВСоответствие = Ложь) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;

КонецФункции

#КонецОбласти

// Определяет список магазинов из сервиса, к которым имеет доступ пользователь - владелец авторизационного токена, использованного в запросе. 
// Для агентских пользователей список состоит из подчиненных магазинов.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/campaigns/getCampaigns.
//
// Параметры:
//   ДанныеАвторизации - Структура - данные авторизации для подключения к сервису (см. ДанныеАвторизацииПоИдентификаторуАккаунта);
//   Отказ             - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура Из КлючИЗначение - результат выполнения запроса:
//       * campaigns  - Массив Из Структура - список с информацией по каждому магазину (CampaignDTO):
//         ** domain        - Строка - URL или наименование магазина;
//         ** id            - Число - идентификатор кампании;
//         ** clientId      - Число - идентификатор плательщика в Яндекс Балансе;
//         ** business      - Структура - информацию о бизнесе (BusinessDTO):
//           *** id           - Число - идентификатор бизнеса;
//           *** name         - Строка - название бизнеса.
//         ** placementType - Строка - модель, по которой работает магазин.
//       * pager      - Структура - Модель для пагинации (FlippingPagerDTO):
//         ** total       - Число - сколько всего найдено элементов;
//         ** from        - Число - начальный номер найденного элемента на странице;
//         ** to          - Число - конечный номер найденного элемента на странице;
//         ** currentPage - Число - текущая страница;
//         ** pagesCount  - Число - общее количество страниц;
//         ** pageSize    - Число - размер страницы.
//
Функция ПолучитьМагазиныПользователяИзСервиса(ДанныеАвторизации, Отказ = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		ДанныеПриложения = ДанныеПриложения();
		Сервер           = СерверПартнерскогоAPI();
		АдресРесурса     = "";

		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 60, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		
		HTTPОтвет    = HTTPСоединение.Получить(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния <> 200 Тогда
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли;
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;

	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвторизацияСлужебный

// Конструктор данных для авторизации приложения.
//
// Возвращаемое значение:
//   Структура - данные для авторизации приложения:
//     * IDПриложения     - Строка - идентификатор приложения;
//     * ПарольПриложения - Строка - пароль приложения.
//
Функция ДанныеПриложения()
	
	Результат = Новый Структура;
	Результат.Вставить("IDПриложения",     "cc9b7be075074e6caaff515a3c5ef0e5");
	Результат.Вставить("ПарольПриложения", "dc807379134444cca2a27e21c9bf9d7d");
	
	Возврат Результат;
	
КонецФункции

// Определяет имя сервиса данных авторизации Яндекс.
//
// Возвращаемое значение:
//   Строка - имя сервера сервиса данных авторизации.
//
Функция СерверДанныхАвторизации()
	
	Результат = "login.yandex.ru";
	
	Возврат Результат;
	
КонецФункции

// Определяет имя сервиса партнерского API.
//
// Параметры:
//   ПоМагазину - Булево - определение имени сервиса для магазина (Истина, по умолчанию) или для кабинета (Ложь).
//
// Возвращаемое значение:
//   Строка - имя сервера сервиса.
//
Функция СерверПартнерскогоAPI(ПоМагазину = Истина)
	
	Если ПоМагазину Тогда
		Результат = "api.partner.market.yandex.ru/v2/campaigns";
	Иначе
		Результат = "api.partner.market.yandex.ru/businesses";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции  

#КонецОбласти

#Область УправлениеКаталогомСлужебный

// Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/business-assortment/getSuggestedOfferMappings.
//
// Параметры:
//   ДанныеУчетнойЗаписи      - Структура - данные учетной записи (см. ДанныеУчетнойЗаписиЯндексМаркет);
//   ИдентификаторПредложения - Строка - идентификатор предложения;
//                            - Неопределено - получить рекомендации по всем товарным позициям;
//   Отказ                    - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПредварительныйПросмотрКарточекТоваровИзСервиса(ДанныеУчетнойЗаписи, ИдентификаторПредложения = Неопределено, Отказ = Ложь)

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ПредварительныйПросмотрКарточекТоваровИзСервиса");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.offerId КАК offerId,
		|	СтатусыПубликацииТоваровЯндексМаркет.name КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.category КАК category,
		|	СтатусыПубликацииТоваровЯндексМаркет.vendor КАК vendor,
		|	СтатусыПубликацииТоваровЯндексМаркет.vendorCode КАК vendorCode
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|		СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|		СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|		СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения КАК offerId,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Наименование, """") = """"
		|				ТОГДА СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара
		|			ИНАЧЕ СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Наименование + ВЫБОР
		|					КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Наименование, """") = """"
		|						ТОГДА """"
		|					ИНАЧЕ "", "" + СтатусыПубликацииТоваровЯндексМаркет.Характеристика.Наименование
		|				КОНЕЦ
		|		КОНЕЦ КАК name,
		|		СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория КАК category,
		|		ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование, """") КАК vendor,
		|		ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode
		|	ИЗ
		|		РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|	ГДЕ
		|		СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|		И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый)
		|		И (СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения = &ИдентификаторПредложения
		|				ИЛИ &ИдентификаторПредложения = НЕОПРЕДЕЛЕНО)) КАК СтатусыПубликацииТоваровЯндексМаркет";
	
	Запрос.Параметры.Вставить("УчетнаяЗапись",            ДанныеУчетнойЗаписи.УчетнаяЗапись);
	Запрос.Параметры.Вставить("ИдентификаторПредложения", ИдентификаторПредложения);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();  
		
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ВыборкаДанных.Количество() / 10000);

	Попытка	  
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-mappings/suggestions.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		Пока ВыборкаДанных.Следующий() Цикл
			SuggestedOfferDTO = Новый Структура("offerId, name, category, vendor, vendorCode, barcodes");
			ЗаполнитьЗначенияСвойств(SuggestedOfferDTO, ВыборкаДанных);
			
			barcodes = ПолучитьШтрихКоды(ВыборкаДанных.Номенклатура, ВыборкаДанных.Характеристика);
			SuggestedOfferDTO.barcodes = barcodes; 
			
			offers = Новый Массив;
			offers.Добавить(SuggestedOfferDTO);
			
			ДанныеЗапроса = Новый Структура;
			ДанныеЗапроса.Вставить("offers", offers);
			ТелоЗапроса = ВJSON(ДанныеЗапроса);
			
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			
			HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			КодСостояния = HTTPОтвет.КодСостояния;
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Результат    = ИзJSON(СтрокаОтвета);
			
			Если КодСостояния = 200 И Результат.status = "OK" Тогда
				Если Результат.result.offers.Количество() > 0 Тогда
					Рекомендация = Неопределено;
					Результат.result.offers[0].Свойство("mapping", Рекомендация);
					
					ОбновитьСтатусыПубликацииПоКабинету(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
						ВыборкаДанных.Номенклатура, 
						ВыборкаДанных.Характеристика, 
						ВыборкаДанных.Упаковка, 
						Рекомендация);
				КонецЕсли;
				
			Иначе	
				Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
					ОбработатьОшибки(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
						ВыборкаДанных.Номенклатура, 
						ВыборкаДанных.Характеристика, 
						ВыборкаДанных.Упаковка,
						Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриПолученииРекомендации,
						Результат.errors);
				Иначе
					ОбработатьОшибки(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
						ВыборкаДанных.Номенклатура, 
						ВыборкаДанных.Характеристика, 
						Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриПолученииРекомендации,
						ВыборкаДанных.Упаковка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

// Добавляет товары в каталог или редактирует информацию об уже имеющихся товарах.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/business-assortment/updateOfferMappings.
//
// Параметры:
//   ДанныеУчетнойЗаписи - Структура - данные учетной записи (см. ДанныеУчетнойЗаписиЯндексМаркет);
//   Отказ               - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ДобавитьИзменитьТоварыВСервисе(ДанныеУчетнойЗаписи, Отказ = Ложь)
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ДобавитьИзменитьТоварыВСервисе");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения КАК offerId,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК manufacturer,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК manufacturerCountry,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СрокГодности, 0) КАК ЧИСЛО(15,3)) КАК СрокГодности,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.ЕдиницаИзмеренияСрокаГодности, """") КАК ЕдиницаИзмеренияСрокаГодности,
		|	ВЫБОР КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки,"""")<>"""" ТОГДА
		|		СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки
		|	ИНАЧЕ
		|       СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара
		|	КОНЕЦ  КАК name,   
		|	ВЫБОР КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки,"""")<>"""" ТОГДА
		|		СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки
		|	ИНАЧЕ
		|       СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория
		|	КОНЕЦ  КАК category
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения КАК offerId,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Марка.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК manufacturer,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК manufacturerCountry,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СрокГодности, 0) КАК ЧИСЛО(15,3)) КАК СрокГодности,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.ЕдиницаИзмеренияСрокаГодности, """") КАК ЕдиницаИзмеренияСрокаГодности,
		|	ВЫБОР КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки,"""")<>"""" ТОГДА
		|		СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки
		|	ИНАЧЕ
		|       СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара
		|	КОНЕЦ  КАК name,   
		|	ВЫБОР КОГДА ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки,"""")<>"""" ТОГДА
		|		СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки
		|	ИНАЧЕ
		|       СтатусыПубликацииТоваровЯндексМаркет.ТоварнаяКатегория
		|	КОНЕЦ  КАК category
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового)";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.УчетнаяЗапись);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
		
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ВыборкаДанных.Количество() / 10000);

	Попытка
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-mappings/update.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		Пока ВыборкаДанных.Следующий() Цикл
	 		//@skip-check structure-consructor-too-many-keys
	 		UpdateOfferDTO = Новый Структура("offerId, name, category, vendor, vendorCode, barcodes, manufacturer, manufacturerCountries, weightDimensions, shelfLife");
			ЗаполнитьЗначенияСвойств(UpdateOfferDTO, ВыборкаДанных);                                                                                              
			
			barcodes = ПолучитьШтрихКоды(ВыборкаДанных.Номенклатура, ВыборкаДанных.Характеристика);
			UpdateOfferDTO.barcodes = barcodes; 
			
			manufacturerCountries = Новый Массив;
			manufacturerCountries.Добавить(ВыборкаДанных.manufacturerCountry);
			UpdateOfferDTO.manufacturerCountries = manufacturerCountries;
			
			Весогабариты = ПолучитьВесогабариты(ВыборкаДанных.Упаковка, ВыборкаДанных.Номенклатура);
			UpdateOfferDTO.weightDimensions = Весогабариты;
			
			Если ВыборкаДанных.СрокГодности<>0
				И ВыборкаДанных.ЕдиницаИзмеренияСрокаГодности <> "" Тогда
				TimePeriodDTO = Новый Структура("timePeriod, timeUnit"); 
				TimePeriodDTO.timePeriod = ВыборкаДанных.СрокГодности;   
				TimeUnitType = ПолучитьПредставлениеПериода(ВыборкаДанных.ЕдиницаИзмеренияСрокаГодности);                          
				TimePeriodDTO.timeUnit = TimeUnitType;
				UpdateOfferDTO.shelfLife = TimePeriodDTO;
			КонецЕсли;
			
			UpdateMappingDTO           = Новый Структура("marketSku");
			UpdateMappingDTO.marketSku = ВыборкаДанных.marketSku;
			
			UpdateOfferMappingDTO         = Новый Структура("offer, mapping");
			UpdateOfferMappingDTO.offer   = UpdateOfferDTO; 
			UpdateOfferMappingDTO.mapping = UpdateMappingDTO;
			
			offerMappings = Новый Массив;
			offerMappings.Добавить(UpdateOfferMappingDTO);

			ДанныеЗапроса = Новый Структура;
			ДанныеЗапроса.Вставить("offerMappings", offerMappings);
			ТелоЗапроса = ВJSON(ДанныеЗапроса);
			
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			
			HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			КодСостояния = HTTPОтвет.КодСостояния;
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Результат    = ИзJSON(СтрокаОтвета);
			
			Если КодСостояния = 200 И Результат.status = "OK" Тогда
				ЗаписатьСтатусНаМодерации(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
					ВыборкаДанных.Номенклатура, 
					ВыборкаДанных.Характеристика, 
					ВыборкаДанных.Упаковка);
				
			Иначе	
				Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
					ОбработатьОшибки(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
						ВыборкаДанных.Номенклатура, 
						ВыборкаДанных.Характеристика, 
						ВыборкаДанных.Упаковка,   
						Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию,
						Результат.errors);
				Иначе
					ОбработатьОшибки(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
						ВыборкаДанных.Номенклатура, 
						ВыборкаДанных.Характеристика, 
						Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию,
						ВыборкаДанных.Упаковка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

// Возвращает список товаров в каталоге с параметрами каждого товара.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/business-assortment/getOfferMappings.
//
// Параметры:
//   ДанныеУчетнойЗаписи - Структура - данные учетной записи (см. ДанныеУчетнойЗаписиЯндексМаркет);
//   Отказ               - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ИнформацияОТоварахВКаталогеИзСервиса(ДанныеУчетнойЗаписи, Отказ = Ложь)
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ИнформацияОТоварахВКаталогеИзСервиса");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения КАК ИдентификаторПредложения
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации)";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.УчетнаяЗапись);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ВыборкаДанных.Количество() / 10000);

	offerIds    = Новый Массив;
	Предложения = Новый Соответствие;
	
	Пока ВыборкаДанных.Следующий() Цикл
		offerIds.Добавить(ВыборкаДанных.ИдентификаторПредложения);
		
		КлючЗаписи = Новый Структура;
		КлючЗаписи.Вставить("Номенклатура",   ВыборкаДанных.Номенклатура);
		КлючЗаписи.Вставить("Характеристика", ВыборкаДанных.Характеристика);
		КлючЗаписи.Вставить("Упаковка",       ВыборкаДанных.Упаковка);
		
		Предложения.Вставить(ВыборкаДанных.ИдентификаторПредложения, КлючЗаписи);
	КонецЦикла;
	
	Если offerIds.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка	  
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-mappings.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("offerIds", offerIds);
		ТелоЗапроса = ВJSON(ДанныеЗапроса);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			Для Каждого ЭлементКоллекции Из Результат.result.offerMappings Цикл
				КлючЗаписи = Предложения.Получить(ЭлементКоллекции.offer.offerId);
				
				Если КлючЗаписи <> Неопределено Тогда
					ОбновитьСтатусыНаМодерацииПоКабинету(ДанныеУчетнойЗаписи.УчетнаяЗапись, 
						КлючЗаписи.Номенклатура, 
						КлючЗаписи.Характеристика, 
						КлючЗаписи.Упаковка,
					    ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;
			
		Иначе	
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

// Определяет список штрихкодов для указанной пары номенклатуры и характеристики.
//
// Параметры:
//   Номенклатура   - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции.
//
// Возвращаемое значение:
//   Массив Из Строка - список штрихкодов.
//
Функция ПолучитьШтрихКоды(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК barcode,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
		|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Запрос.Параметры.Вставить("Номенклатура",   Номенклатура);
	Запрос.Параметры.Вставить("Характеристика", Характеристика);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ШтрихКоды = Новый Массив;
	
	Если Результат.Количество() > 0 Тогда
		ШтрихКоды = Результат.ВыгрузитьКолонку("barcode");
	КонецЕсли;
	
	Возврат ШтрихКоды;
	
КонецФункции

// Устанавливает статус "На модерации" для товарной позиции.
//
// Параметры:
//   УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   Номенклатура   - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//   Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции.
//
Процедура ЗаписатьСтатусНаМодерации(УчетнаяЗапись, Номенклатура, Характеристика, Упаковка)
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  УчетнаяЗапись);
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       Упаковка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись        = НаборЗаписей[0];
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
			
			НаборЗаписей.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры

// Обновляет статусы публикации товарных позиций.
//
// Параметры:
//   УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   Номенклатура   - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//   Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции.
//   Рекомендация   - Неопределено - рекомендация не найдена;
//                  - Структура - информация о рекомендованной карточке товара (GetMappingDTO):
//     * marketSku          - Число - идентификатор карточки на Маркете;
//     * marketSkuName      - Строка - название карточки на Маркете. Может отсутствовать в ответе;
//     * marketModelId      - Число - идентификатор модели на Маркете. Может отсутствовать в ответе;
//     * marketModelName    - Строка - название модели на Маркете. Может отсутствовать в ответе;
//     * marketCategoryId   - Число - идентификатор категории карточки на Маркете. Может отсутствовать в ответе;
//     * marketCategoryName - Строка - название категории карточки на Маркете. Может отсутствовать в ответе.
//
Процедура ОбновитьСтатусыПубликацииПоКабинету(УчетнаяЗапись, Номенклатура, Характеристика, Упаковка, Рекомендация)
	
	Если Рекомендация = Неопределено Тогда
		Рекомендация = Новый Структура;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  УчетнаяЗапись);
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       Упаковка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			Если Рекомендация.Свойство("marketSku") Тогда
				Запись.ИдентификаторТовараПлощадки = Формат(Рекомендация.marketSku, "ЧН=; ЧГ=0");
				Запись.Статус                      = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация;
				Запись.ЕстьИдентификаторПлощадки   = Истина;
			Иначе
				Запись.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.РекомендацияНеНайдена;
				Запись.ОписаниеОшибки = НСтр("ru = 'Для товара с указанными свойствами не была подобрана рекомендованная карточка товара на Яндекс Маркет. 
											 |Для получения рекомендации укажите в запросе как можно больше информации о товаре (категорию, бренд (марку),штрих-коды товара, ориентировочную цену товара). После заполнения данных отправьте повторно публикацию на получение рекомендации (кнопка ""Получить рекомендацию"").
											 |Попробуйте найти товар в поиске по разделу «Покупки» на Маркете. 
											 |Если товар найдется, SKU на Яндексе можно взять из URL его страницы. 
											 |Например, если URL страницы товара — https://market.yandex.ru/product--pir-2821ak/649875256?sponsored=1&sku=100848394231, то его SKU на Яндексе — 100848394231.
											 |Если вы смогли самостоятельно подобрать SKU на Яндексе - заполните его и отправьте товар на модерацию (кнопка ""Отправить на модерацию"").
											 |Если SKU не удалось подобрать - наиболее подробно опишите товар и отправьте запрос без указания SKU (кнопка ""Отправить на модерацию"") - сотрудники Маркета могут подобрать или создать карточки для ваших товаров в личном кабинете, если товар еще не продается на Маркете.'"); 
			КонецЕсли;
			Если Рекомендация.Свойство("marketSkuName") Тогда 
				Запись.НаименованиеТовараПлощадки = Рекомендация.marketSkuName;
			КонецЕсли;
			Если Рекомендация.Свойство("marketCategoryName") Тогда 
				Запись.НаименованиеКатегорииПлощадки = Рекомендация.marketCategoryName;
			КонецЕсли;
			Если Рекомендация.Свойство("marketModelName") Тогда 
				Запись.НаименованиеМоделиПлощадки = Рекомендация.marketModelName;
			КонецЕсли;
		
			НаборЗаписей.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает перевод распространенных ошибок в ответе сервиса.
//
// Параметры:
//   Сообщение - Строка - сообщение об ошибке.
//
// Возвращаемое значение:
//   Строка - перевод сообщения об ошибке. 
//
Функция ПереводОшибки(Сообщение)
	
	Если Сообщение = "Offer at position 1 should not have empty value of vendor" Тогда   
		ПереводОшибки = НСтр("ru = 'Для товара не заполнен бренд (марка)'");
	ИначеЕсли Сообщение = "Offer at position 1 should not have empty value of category" Тогда
		ПереводОшибки = НСтр("ru = 'Для товара не заполнена категория'");
	ИначеЕсли Сообщение = "Offer at position 1 should not have empty values in list of manufacturerCountries" Тогда
		ПереводОшибки = НСтр("ru = 'Для товара не заполнена страна происхождения'");
	ИначеЕсли Сообщение = "Offer at position 1 should have at least one barcode" Тогда  
		ПереводОшибки = НСтр("ru = 'Для товара не заполнено ни одного штрих-кода'"); 
	Иначе
		ПереводОшибки = "";
	КонецЕсли;
	
	Возврат ПереводОшибки;
КонецФункции

// Устанавливает признаки ошибки при отправке статусов товарной позиции.
//
// Параметры:
//   УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   Номенклатура   - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//   Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции;
//   ТипОшибки      - ПеречислениеСсылка.СтатусыВыгрузкиТоваровЯндексМаркет - статус публикации;
//   Ошибки         - Массив Из Структура - ошибки сервиса:
//     * code         - Строка - код ошибки;
//     * message      - Строка - описание ошибки.
//                  - Неопределено - сведения об ошибках сервиса отсутствуют.
//
Процедура ОбработатьОшибки(УчетнаяЗапись, Номенклатура, Характеристика, Упаковка, ТипОшибки, Ошибки = Неопределено)
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  УчетнаяЗапись);
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       Упаковка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись                = НаборЗаписей[0];
			Запись.КодОшибки      = ""; 
			Запись.ОписаниеОшибки = "";
			Запись.Статус         = ТипОшибки;
			
			Если Ошибки <> Неопределено Тогда
				Для Каждого ЭлементКоллекции Из Ошибки Цикл
					ПереводОшибки         = ПереводОшибки(ЭлементКоллекции.message);
					Запись.КодОшибки      = Запись.КодОшибки + ?(ЗначениеЗаполнено(Запись.КодОшибки), "; ", "") 
												+ ЭлементКоллекции.code; 
					Запись.ОписаниеОшибки = Запись.ОписаниеОшибки + ?(ЗначениеЗаполнено(Запись.ОписаниеОшибки), "; " + Символы.ПС, "")
												+ ?(ЗначениеЗаполнено(ПереводОшибки), ПереводОшибки, ЭлементКоллекции.message);
				КонецЦикла;
			КонецЕсли;
				
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Обновляет статусы публикации товарных позиций.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   Номенклатура      - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//   Характеристика    - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//   Упаковка          - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции.
//   ИнформацияОТоваре - Массив Из Структура - информация о товаре (GetOfferMappingDTO):
//     * offer           - Структура - основные параметры товара (GetOfferDTO):
//       ** offerId        - Строка - идентификатор предложения;
//       ** cardStatus     - Строка - статус карточки товара (OfferCardStatusType);
//       ** campaigns      - Массив Из Структура - список магазинов, в которых размещен товар (OfferCampaignStatusDTO):
//          *** campaignId   - Число - идентификатор кампании;
//          *** status       - Строка - статус карточки товара (OfferCardStatusType).
//     * mapping         - Структура - информация о карточке товара на Маркете (GetMappingDTO):
//       ** marketSku          - Число - идентификатор карточки на Маркете;
//       ** marketSkuName      - Строка - название карточки на Маркете. Может отсутствовать в ответе;
//       ** marketModelId      - Число - идентификатор модели на Маркете. Может отсутствовать в ответе;
//       ** marketModelName    - Строка - название модели на Маркете. Может отсутствовать в ответе;
//       ** marketCategoryId   - Число - идентификатор категории карточки на Маркете. Может отсутствовать в ответе;
//       ** marketCategoryName - Строка - название категории карточки на Маркете. Может отсутствовать в ответе.
//
Процедура ОбновитьСтатусыНаМодерацииПоКабинету(УчетнаяЗапись, Номенклатура, Характеристика, Упаковка, ИнформацияОТоваре)
	
	Если Не ИнформацияОТоваре.offer.Свойство("cardStatus") Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  УчетнаяЗапись);
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       Упаковка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Прочитать();

		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			Если ИнформацияОТоваре.Свойство("mapping") Тогда   
				Если ИнформацияОТоваре.mapping.Свойство("marketSku") Тогда  
					Запись.ИдентификаторТовараПлощадки = Формат(ИнформацияОТоваре.mapping.marketSku, "ЧН=; ЧГ=0"); 
				КонецЕсли;
			КонецЕсли;

			СтатусСОписанием      = ПолучитьСтатусМодерацииСОписанием(ИнформацияОТоваре.offer.cardStatus, Запись.Статус);
			Запись.Статус         = СтатусСОписанием.Статус;
			Запись.ОписаниеОшибки = СтатусСОписанием.ОписаниеОшибки;
			
			НаборЗаписей.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();
						
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры
	
// Определяет расширенное описание статуса публикации товарной позиции.
//
// Параметры:
//   СтатусПубликации - Строка - статус публикации товара (OfferProcessingStatusType);
//   ТекущийСтатус    - ПеречислениеСсылка.СтатусыВыгрузкиТоваровЯндексМаркет - текущий статус товарной позиции;
//   ПричиныОтказа    - Массив Из Структура - причины, по которым товар не прошел модерацию (OfferProcessingNoteDTO):
//     * type           - Строка - тип причины, по которой товар не прошел модерацию;
//     * payload        - Строка - дополнительная информация о причине отклонения товара.
//
Функция ПолучитьСтатусМодерацииСОписанием(СтатусПубликации, ТекущийСтатус, ПричиныОтказа = Неопределено)
	
	Структура = Новый Структура("Статус, ОписаниеОшибки");
	
	Если СтатусПубликации = "READY" Тогда
		// Товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = "";
		
	ИначеЕсли СтатусПубликации = "IN_WORK" Тогда
		// Товар проходит модерацию. Это занимает несколько дней
		Если ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		КонецЕсли;
		
	ИначеЕсли СтатусПубликации = "NEED_CONTENT" Тогда
		// Для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно (через API или личный кабинет магазина) или создать ее, если товар еще не продается на Маркете
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Для товара не указан SKU на Яндексе, и сотрудники Маркета не смогли привязать его к карточке. Найдите карточку товара самостоятельно в поиске по разделу «Покупки» или создайте ее, если товар еще не продается на Маркете.'");
		
	ИначеЕсли СтатусПубликации = "NEED_INFO" Тогда
		// Товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре notes
		ОписаниеОшибки = НСтр("ru = 'Вы указали для товара неверную или недостаточную информацию.'");
		
		Если ЗначениеЗаполнено(ПричиныОтказа) Тогда
			Если ТипЗнч(ПричиныОтказа) = Тип("Строка") Тогда 
				ОписаниеОшибки = ОписаниеОшибки + " " + ПричиныОтказа;
				
			ИначеЕсли ТипЗнч(ПричиныОтказа) = Тип("Массив") Тогда 
				Для Каждого ЭлементКоллекции Из ПричиныОтказа Цикл
					Если ЭлементКоллекции.type = "ASSORTMENT" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар'");
					ИначеЕсли ЭлементКоллекции.type = "CANCELLED" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар отозван с модерации по вашей инициативе'");
					ИначеЕсли ЭлементКоллекции.type = "CONFLICTING_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Вы предоставили противоречивую информацию о товаре'");
					ИначеЕсли ЭлементКоллекции.type = "DEPARTMENT_FROZEN" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию'");
					ИначеЕсли ЭлементКоллекции.type = "INCORRECT_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Информация о товаре, которую вы предоставили, противоречит описанию от производителя'");
					ИначеЕсли ЭлементКоллекции.type = "LEGAL_CONFLICT" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_CLASSIFICATION_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_PICTURES" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Для идентификации товара нужны его изображения. Отправьте URL изображений товара или загрузите обновленный каталог через личный кабинет магазина'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_VENDOR" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Неверно указан производитель товара'");
					ИначеЕсли ЭлементКоллекции.type = "NO_CATEGORY, NO_KNOWLEDGE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'");
					ИначеЕсли ЭлементКоллекции.type = "NO_PARAMETERS_IN_SHOP_TITLE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь'");
					ИначеЕсли ЭлементКоллекции.type = "NO_SIZE_MEASURE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру'");
					ИначеЕсли ЭлементКоллекции.type = "UNKNOWN" Тогда
						ОписаниеОшибки = НСтр("ru = 'Товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру'");
					КонецЕсли;
					
					Если ЭлементКоллекции.Свойство("payload") И ЗначениеЗаполнено(ЭлементКоллекции.payload) Тогда
						ОписаниеОшибки = ОписаниеОшибки + " (" + ЭлементКоллекции.payload + ")";
					КонецЕсли;
					ОписаниеОшибки = ОписаниеОшибки + ".";
				КонецЦикла;
			Иначе
				ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Уточните входные данные запроса и отправьте связь на модерацию повторно.'");
			КонецЕсли;
		КонецЕсли;
			
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = ОписаниеОшибки;
		
	ИначеЕсли СтатусПубликации = "REJECTED" Тогда   
		// Товар не прошел модерацию, так как Маркет не планирует размещать подобные товары
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'В ближайшее время Маркет не планирует размещать товары данной категории. Если у вас есть вопросы по категориям товаров, размещаемым на Маркете, обратитесь в службу поддержки.'");
		
	ИначеЕсли СтатусПубликации = "SUSPENDED" Тогда                                                   
		// Товар не прошел модерацию, так как Маркет пока не размещает подобные товары
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = НСтр("ru = 'Маркет пока не размещает товары данной категории, но начнет в ближайшее время. После этого товар автоматически отправится на модерацию, и статус изменится на IN_WORK. Чтобы уточнить сроки появления категорий товаров на Маркете, обратитесь в службу поддержки.'");
	КонецЕсли;
	
	Если СтатусПубликации = "HAS_CARD_CAN_UPDATE_PROCESSING" 
			Или СтатусПубликации = "NO_CARD_PROCESSING" Тогда 
		// Изменения на проверке
		Если ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации Тогда
			Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		КонецЕсли;

	ИначеЕсли СтатусПубликации = "NO_CARD_ADD_TO_CAMPAIGN" Тогда 
		// Разместите товар в магазине
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = "";

	ИначеЕсли СтатусПубликации = "NO_CARD_MARKET_WILL_CREATE" Тогда 
		// Создаст Маркет
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = НСтр("ru = 'Вы добавили товар, который пока не продавался на Маркете. Карточки для товаров этой категории могут создавать только сотрудники Маркета. Обычно создание карточки занимает не больше двух дней.'");

	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_NOT_UPDATE" Тогда
		// Карточка Маркета
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Напрямую управлять карточкой с таким статусом нельзя - вы можете менять только условия продажи товара, его вес и габариты.
											  |Если нужно изменить описание, изображения или другие характеристики товара — напишите в службу поддержки с помощью кнопки Помощь с карточкой на странице товара.'");
		
	ИначеЕсли СтатусПубликации = "NO_CARD_NEED_CONTENT" Тогда 
		// Создайте карточку
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'В категории есть дополнительные поля, без которых карточку нельзя создать. Заполните характеристики на странице товара или загрузите информацию для всех товаров, используя Excel-шаблон категории или конвертер контента.'");

	ИначеЕсли СтатусПубликации = "NO_CARD_ERRORS" Тогда 
		// Не создана из-за ошибки
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Маркет обнаружил ошибку в данных о товаре, поэтому создать карточку не удалось.'");

	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_UPDATE" Тогда 
		// Можно дополнить
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = НСтр("ru = 'Карточку можно дополнить недостающей информацией. 
											  |Если на карточке мало данных - товар сложно найти в поиске и с помощью фильтров на Маркете, а покупателям будет трудно принять решение о покупке.
											  |Дополните карточку товара и Маркет за свой счет предложит покупателям кешбэк на ваши товары.'");
		
	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_UPDATE_ERRORS" Тогда 
		// Изменения не приняты
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Вы отредактировали карточку, но Маркет нашел ошибки в измененных данных - их нужно исправить. Карточка пока остается в том же виде, что была до редактирования.'");
	КонецЕсли;
	
	// Прочее
	Если Не ЗначениеЗаполнено(Структура.Статус) Тогда
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена; 
		Структура.ОписаниеОшибки = НСтр("ru = 'Товар не прошел модерацию по неустановленной причине. Обратитесь в службу поддержки или к вашему менеджеру.'");
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

#КонецОбласти

#Область УправлениеОстаткамиТоваровСлужебный

// Передает данные об остатках товаров на витрине. 
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/stocks/updateStocks.
//
// Параметры:
//   ДанныеУчетнойЗаписи - Структура - данные учетной записи (см. ДанныеУчетнойЗаписиЯндексМаркет);
//   Отказ               - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ВыгрузитьОстаткиТоваровВСервис(ДанныеУчетнойЗаписи, Отказ = Ложь) 
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.ВыгрузитьОстаткиТоваровВСервис");
	
	ТаблицаСкладов = ИнтеграцияСМаркетплейсамиСервер.ПолучитьСопоставленныеСклады(
		ДанныеУчетнойЗаписи.УчетнаяЗапись,
		Ложь);
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружено сопоставленных складов Яндекс Маркет по учетной записи <%1>'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеУчетнойЗаписи.УчетнаяЗапись);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстСообщения);
	
		Отказ = Истина;
	
		Возврат;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Группа КАК Справочник.Склады) КАК Группа,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИдентификаторСклада КАК СТРОКА(50)) КАК ИдентификаторСклада
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	&ТаблицаСкладов КАК ТаблицаСкладов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	ИдентификаторСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись КАК УчетнаяЗапись,
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения КАК ИдентификаторПредложения,
		|	ЕСТЬNULL(ТаблицаСкладов.ИдентификаторСклада, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(ТаблицаСкладов.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО (ИСТИНА)
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
		|	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи = 0
		|	И ЕСТЬNULL(ТаблицаСкладов.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ЕСТЬNULL(ТаблицаСкладов.ИдентификаторСклада, """") <> """"
		|	И НЕ ЕСТЬNULL(ТаблицаСкладов.Склад.ЭтоГруппа, ЛОЖЬ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСкладов";
	
	Запрос.Параметры.Вставить("УчетнаяЗапись",  ДанныеУчетнойЗаписи.УчетнаяЗапись);
	Запрос.Параметры.Вставить("ТаблицаСкладов", ТаблицаСкладов);
	Запрос.Параметры.Вставить("ТекущаяДата",    ТекущаяДатаСеанса());
	Запрос.Выполнить();
	
	РезультатЗапроса = ПолучитьРазницуОстатковТоваровДляВыгрузки(ДанныеУчетнойЗаписи.УчетнаяЗапись, МенеджерВТ);
	
	ЗавершитьВыгрузку = РезультатЗапроса.Пустой();
	
	КоличествоЗаписей = 0;
	
	Если Не ЗавершитьВыгрузку Тогда
		ВыборкаОбщихИтогов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаОбщихИтогов.Следующий() Тогда
			КоличествоЗаписей = ВыборкаОбщихИтогов.ИдентификаторЗаписи;
		КонецЕсли;
	
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоЗаписей / 10000);
	
		skus   = Новый Массив;
		Порция = Новый ТаблицаЗначений;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Порция.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения,, Колонка.Ширина);
		КонецЦикла;
	
		ВыборкаSKU = ВыборкаОбщихИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаSKU.Следующий() Цикл
			ВыборкаОстатковSKU = ВыборкаSKU.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОстатковSKU.Следующий() Цикл
				Если skus.Количество() >= 2000 Тогда
					ВыгрузитьПорциюОстатковТоваровВСервис(ДанныеУчетнойЗаписи, skus, Порция, Отказ);
				
					Порция.Очистить();
					skus = Новый Массив;
					
					Если Отказ Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				// Для записей в регистры
				ВыборкаСкладов = ВыборкаОстатковSKU.Выбрать();
				Пока ВыборкаСкладов.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(Порция.Добавить(), ВыборкаСкладов);
				КонецЦикла;
				
				// Для запроса HTTP
				items = Новый Массив;
				
				StockItemDTO           = Новый Структура("type, count, updatedAt");
				StockItemDTO.type      = "FIT";
				StockItemDTO.count     = ВыборкаОстатковSKU.count;
				StockItemDTO.updatedAt = ЗаписатьДатуJSON(ТекущаяДатаСеанса(), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);
				
			items.Добавить(StockItemDTO);
				
				StockDTO             = Новый Структура("sku, warehouseId, items");
				StockDTO.sku         = ВыборкаОстатковSKU.sku;
				StockDTO.warehouseId = ВыборкаОстатковSKU.warehouseId;
				StockDTO.items       = items;
				
				skus.Добавить(StockDTO);
			КонецЦикла;
		КонецЦикла;

		Если skus.Количество() > 0 Тогда
			ВыгрузитьПорциюОстатковТоваровВСервис(ДанныеУчетнойЗаписи, skus, Порция, Отказ);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПорциюОстатковТоваровВСервис(ДанныеУчетнойЗаписи, skus, Порция, Отказ = Ложь)
	
	Если skus.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Попытка	  
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI();
		ИмяМетода         = "/offers/stocks.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторМагазина + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("skus", skus);
		ТелоЗапроса = ВJSON(ДанныеЗапроса);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		HTTPОтвет    = HTTPСоединение.Записать(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			ОбновитьДанныеОбОстатках(Порция);
			
		Иначе
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;
				
КонецПроцедуры    

// Определяет наличие разницы в остатках товаров между количеством рассчитанным по данным информационной базы и количеством по данным торговой площадки.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   МенеджерВТ    - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные об остатках товарных позиций:
//     * УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Номенклатура   - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//     * Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции;
//     * sku            - Строка - идентификатор публикации;
//     * Склад          - СправочникСсылка.Склады - склад, для которого определяются остатки товарных позиций;
//     * warehouseId    - Строка - идентификатор объекта маркетплейса (склада);
//     * Остаток        - Число - свободный остаток товарной позиции на складе;
//     * count          - Число - остаток в указанной единице измерения.
//
Функция ПолучитьРазницуОстатковТоваровДляВыгрузки(УчетнаяЗапись, МенеджерВТ) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Склад КАК Склад,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток < 0
		|				ТОГДА 0
		|			ИНАЧЕ Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток
		|		КОНЕЦ, 0) КАК Остаток
		|ПОМЕСТИТЬ ВТОстатки
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Назначение) В
		|				(ВЫБРАТЬ
		|					Фильтр.Номенклатура КАК Номенклатура,
		|					Фильтр.Характеристика КАК Характеристика,
		|					Фильтр.Склад КАК Склад,
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|				ИЗ
		|					ВтТовары КАК Фильтр)) КАК Запасы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.ИдентификаторПредложения КАК sku,
		|	Товары.Склад КАК Склад,
		|	Товары.ИдентификаторОбъектаМаркетплейса КАК warehouseId,
		|	ЕСТЬNULL(Остатки.Остаток, 0) КАК ОстатокНовый,
		|	ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0) КАК ОстатокОтправленный
		|ПОМЕСТИТЬ ТаблицаОстатков
		|ИЗ
		|	ВтТовары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстатки КАК Остатки
		|		ПО Товары.Номенклатура = Остатки.Номенклатура
		|			И Товары.Характеристика = Остатки.Характеристика
		|			И Товары.Склад = Остатки.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
		|		ПО (ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И Товары.Склад = ОстаткиТоваровМаркетплейсов.Склад
		|			И Товары.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
		|			И Товары.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(Остатки.Остаток, 0) + ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	sku,
		|	warehouseId
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.sku КАК sku,
		|	Остатки.warehouseId КАК warehouseId,
		|	СУММА(Остатки.ОстатокНовый) КАК ОстатокНовый,
		|	СУММА(Остатки.ОстатокОтправленный) КАК ОстатокОтправленный
		|ПОМЕСТИТЬ ИзмененияОстатков
		|ИЗ
		|	ТаблицаОстатков КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.sku,
		|	Остатки.warehouseId
		|
		|ИМЕЮЩИЕ
		|	СУММА(Остатки.ОстатокНовый) <> СУММА(Остатки.ОстатокОтправленный)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	sku,
		|	warehouseId
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&УчетнаяЗапись КАК УчетнаяЗапись,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.sku КАК sku,
		|	Товары.Склад КАК Склад,
		|	Товары.warehouseId КАК warehouseId,
		|	Товары.ОстатокНовый КАК Остаток,
		|	ВЫБОР
		|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(Остатки.ОстатокНовый, 0)
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Остатки.ОстатокНовый, 0) / ВЫБОР
		|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
		|				КОНЕЦ КАК ЧИСЛО(15, 0))
		|	КОНЕЦ КАК count,
		|	Товары.sku + "";"" + Товары.warehouseId КАК ИдентификаторЗаписи
		|ИЗ
		|	ТаблицаОстатков КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененияОстатков КАК Остатки
		|		ПО Товары.sku = Остатки.sku
		|			И Товары.warehouseId = Остатки.warehouseId
		|ГДЕ
		|	Товары.ОстатокНовый <> Товары.ОстатокОтправленный
		|ИТОГИ
		|	МАКСИМУМ(count),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИдентификаторЗаписи)
		|ПО
		|	ОБЩИЕ,
		|	sku,
		|	warehouseId
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ИзмененияОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатков";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Параметры.Вставить("ТекущаяДата",   ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

// Записывает актуальные данные об остатках товаров в регистры сведений ОстаткиТоваровМаркетплейсов и СтатусыПубликацииТоваровЯндексМаркет.
//
// Параметры:
//   ОстаткиТоваров - см. ПолучитьРазницуОстатковТоваровДляВыгрузки.
//
Процедура ОбновитьДанныеОбОстатках(ОстаткиТоваров)  
	
	Для Каждого СтрокаТаблицыЗначений Из ОстаткиТоваров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОстаткиТоваровМаркетплейсов");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаТаблицыЗначений.УчетнаяЗапись);
			ЭлементБлокировкиДанных.УстановитьЗначение("Склад",                     СтрокаТаблицыЗначений.Склад);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаТаблицыЗначений.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаТаблицыЗначений.Характеристика);
			БлокировкаДанных.Заблокировать();

			НаборЗаписей = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаТаблицыЗначений.УчетнаяЗапись);
			НаборЗаписей.Отбор.Склад.Установить(СтрокаТаблицыЗначений.Склад);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыЗначений.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицыЗначений.Характеристика);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Запись                      = НаборЗаписей[0];
				Запись.Количество           = СтрокаТаблицыЗначений.Остаток; 
				Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();
				
			Иначе
				Запись                           = НаборЗаписей.Добавить();  
				Запись.УчетнаяЗаписьМаркетплейса = СтрокаТаблицыЗначений.УчетнаяЗапись; 
				Запись.Склад                     = СтрокаТаблицыЗначений.Склад;
				Запись.Номенклатура              = СтрокаТаблицыЗначений.Номенклатура;  
				Запись.Характеристика            = СтрокаТаблицыЗначений.Характеристика;
				Запись.Количество                = СтрокаТаблицыЗначений.Остаток;
				Запись.ДатаВыгрузкиОстатков      = ТекущаяДатаСеанса();
			КонецЕсли;
			
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();
							
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	ОстаткиТоваров.Свернуть("УчетнаяЗапись, Номенклатура, Характеристика, Упаковка", "count");
	
	Для Каждого СтрокаТаблицыЗначений Из ОстаткиТоваров Цикл	
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  СтрокаТаблицыЗначений.УчетнаяЗапись);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   СтрокаТаблицыЗначений.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", СтрокаТаблицыЗначений.Характеристика);
			ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       СтрокаТаблицыЗначений.Упаковка);
			БлокировкаДанных.Заблокировать();

			НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УчетнаяЗапись.Установить(СтрокаТаблицыЗначений.УчетнаяЗапись);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыЗначений.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицыЗначений.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(СтрокаТаблицыЗначений.Упаковка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Запись                   = НаборЗаписей[0];
				Запись.ОстатокВУпаковках = СтрокаТаблицыЗначений.count;
				
				НаборЗаписей.Записать();
			КонецЕсли; 

			ЗафиксироватьТранзакцию();
				
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЦенамиНаТоварыСлужебный

// Устарел. Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/prices/getSuggestedPrices.
//
// Параметры:
//   ДанныеУчетнойЗаписи      - Структура - данные учетной записи (см. ДанныеУчетнойЗаписиЯндексМаркет);
//   ИдентификаторыПубликации - СписокЗначений Из Строка - список идентификаторов товарных позиций;
//   ВидыЦен                  - Массив Из СправочникСсылка.ВидыЦен - рекомендованные виды цен, (см. ПолучитьМассивРекомендованныхЦен);
//   Отказ                    - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПолучитьРекомендованныеЦеныИзСервиса(ДанныеУчетнойЗаписи, ИдентификаторыПубликации, ВидыЦен, Отказ = Ложь)   
	
	Если ИдентификаторыПубликации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	offers = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ИдентификаторыПубликации Цикл
		SuggestOfferPriceDTO = Новый Структура("marketSku");
		SuggestOfferPriceDTO.Вставить("marketSku", ЭлементКоллекции.Значение);
		
		offers.Добавить(SuggestOfferPriceDTO);
	КонецЦикла;

	Если offers.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка	  
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI();
		ИмяМетода         = "/offer-prices/suggestions.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторМагазина + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("offers", offers);
		ТелоЗапроса = ВJSON(ДанныеЗапроса);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			ОбновитьРекомендованныеЦены(ДанныеУчетнойЗаписи.УчетнаяЗапись, Результат.result.offers, ВидыЦен);
			
		Иначе
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли; 	
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает цены на товары в магазине.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/api/prices/updateBusinessPrices.
//
// Параметры:
//   ДанныеУчетнойЗаписи - Структура - данные учетной записи (см. ДанныеУчетнойЗаписиЯндексМаркет);
//   ТаблицаТоваров      - Неопределено - без дополнительных ограничений по списку товаров;
//                       - ТаблицаЗначений - список товаров ограничения выборки:
//     * УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Номенклатура      - СправочникСсылка.Номенклатура - номенклатура;
//     * Характеристика    - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика;
//     * Упаковка          - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//   Отказ               - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура УстановитьЦеныВСервисе(ДанныеУчетнойЗаписи, ТаблицаТоваров = Неопределено, Отказ = Ложь)
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСЯндексМаркетСервер.УстановитьЦеныВСервисе");

	ТекстЗапроса = "";
	
	Если ТаблицаТоваров <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаТоваров.УчетнаяЗапись КАК Справочник.УчетныеЗаписиМаркетплейсов) КАК УчетнаяЗапись,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
			|ПОМЕСТИТЬ ВТ_Товары
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	УчетнаяЗапись,
			|	Номенклатура,
			|	Характеристика,
			|	Упаковка"
			+ ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ОтносительныеКурсыВСрезПоследних.Валюта КАК Валюта,
		|	ОтносительныеКурсыВСрезПоследних.КурсЧислитель КАК КурсЧислитель,
		|	ОтносительныеКурсыВСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись КАК УчетнаяЗапись,
		|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
		|	&УпаковкаТовара КАК УпаковкаТовара,
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПредложения КАК ИдентификаторПредложения,
		|	СтатусыПубликацииТоваровЯндексМаркет.ЦенаПродажи КАК ЦенаПродажи,
		|	СтатусыПубликацииТоваровЯндексМаркет.ДатаУстановкиЦены КАК ДатаУстановкиЦены,
		|	&ВидЦен КАК ВидЦены,
		|	&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка
		|ПОМЕСТИТЬ ТаблицаТоварныхПозиций
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО (СправНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
		|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
		|	И &ТекстУсловияПоТоварам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ПоляДляЦенообразованияВыборка,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	&ПоляДляЦенообразованияСрез КАК ПоляДляЦенообразованияСрез,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ЦеныНоменклатуры.Валюта КАК Валюта,
		|	ЦеныНоменклатуры.Период КАК Период
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	ИсточникЦенНоменклатуры КАК ЦеныНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ПоляДляЦенообразованияСрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ТаблицаТоварныхПозиций.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ТаблицаТоварныхПозиций.Номенклатура КАК Номенклатура,
		|	ТаблицаТоварныхПозиций.Характеристика КАК Характеристика,
		|	ТаблицаТоварныхПозиций.УпаковкаТовара КАК Упаковка,
		|	ТаблицаТоварныхПозиций.ИдентификаторПредложения КАК ИдентификаторПредложения,
		|	ЦеныНоменклатуры.Период КАК Период,
		|	&ЦенаПродажи КАК Цена
		|ИЗ
		|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУчета
		|		ПО (КурсыВалютУчета.Валюта = &БазоваяВалюта)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоварныхПозиций КАК ТаблицаТоварныхПозиций
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|ГДЕ
		|	(&ЦенаПродажи <> ТаблицаТоварныхПозиций.ЦенаПродажи
		|			ИЛИ РАЗНОСТЬДАТ(ТаблицаТоварныхПозиций.ДатаУстановкиЦены, &ДатаЦен, ДЕНЬ) > 30)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоварныхПозиций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатуры";

	ТекущаяДата                   = ТекущаяДатаСеанса();
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ТекущаяДата);

	НастройкаЦенообразования                 = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "СтатусыПубликацииТоваровЯндексМаркет";
	НастройкаЦенообразования.ПолеСерия       = "";

	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", ТекстЗамены);
		ПоляДляЦенообразования =
			"ХарактеристикаЦО,
			|	СерияЦО,
			|	УпаковкаЦО";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", "ИСТИНА");
		ПоляДляЦенообразования =
			"Характеристика";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияВыборка", ПоляДляЦенообразования);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"СтатусыПубликацииТоваровЯндексМаркет.Упаковка",
		"ВЫБОР
		|		КОГДА СтатусыПубликацииТоваровЯндексМаркет.Упаковка = СправНоменклатура.ЕдиницаИзмерения
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ СтатусыПубликацииТоваровЯндексМаркет.Упаковка
		|	КОНЕЦ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпаковкаТовара", "СтатусыПубликацииТоваровЯндексМаркет.Упаковка");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ИсточникЦенНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры("ТаблицаТоварныхПозиций",
			"&ДатаЦен",
			Новый Структура("ВТаблице", "ВидЦены"),
			ИспользуетсяЦенообразование25));

	Если ИспользуетсяЦенообразование25 Тогда
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ЦеныНоменклатуры.СерияЦО КАК СерияЦО,
			|	ЦеныНоменклатуры.УпаковкаЦО КАК УпаковкаЦО";
	Иначе
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.Характеристика КАК Характеристика";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияСрез КАК ПоляДляЦенообразованияСрез", ПоляДляЦенообразованияСрез);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияСрез", ПоляДляЦенообразования);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
			"ТаблицаТоварныхПозиций",
			"ЦеныНоменклатуры",,
			ИспользуетсяЦенообразование25));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ЦенаПродажи",
		"ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) 
		|			* ВЫБОР
		|				КОГДА ТаблицаТоварныхПозиций.Упаковка <> ЦеныНоменклатуры.Упаковка
		|					ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) 
		|							/ ВЫБОР
		|								КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
		|									ТОГДА 1
		|								ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|							КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ 
		|			* ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Валюта = &БазоваяВалюта
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютУчета.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютУчета.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1))
		|			КОНЕЦ КАК ЧИСЛО(31, 2))");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ТаблицаТоварныхПозиций.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ ТаблицаТоварныхПозиций.Упаковка
			|КОНЕЦ)",
			"ТаблицаТоварныхПозиций.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ ЦеныНоменклатуры.Упаковка
			|КОНЕЦ)",
			"ЦеныНоменклатуры.Номенклатура"));

	Если ТаблицаТоваров = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияПоТоварам", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияПоТоварам", 
			"	(СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись, СтатусыПубликацииТоваровЯндексМаркет.Номенклатура, СтатусыПубликацииТоваровЯндексМаркет.Характеристика, СтатусыПубликацииТоваровЯндексМаркет.Упаковка) В
			|			(ВЫБРАТЬ
			|				ВТ_Товары.УчетнаяЗапись,
			|				ВТ_Товары.Номенклатура,
			|				ВТ_Товары.Характеристика,
			|				ВТ_Товары.Упаковка
			|			ИЗ
			|				ВТ_Товары КАК ВТ_Товары)");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Параметры.Вставить("УчетнаяЗапись",  ДанныеУчетнойЗаписи.УчетнаяЗапись);
	Запрос.Параметры.Вставить("ВидЦен",         ДанныеУчетнойЗаписи.ЦенаПродажи);
	Запрос.УстановитьПараметр("ДатаЦен",        ТекущаяДата);
	Запрос.УстановитьПараметр("БазоваяВалюта",  ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Запрос.Параметры.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	
	ЦеныТоваров = Запрос.Выполнить().Выбрать();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ЦеныТоваров.Количество() / 1000);

	Если ЦеныТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Порция = Новый Массив;
	offers = Новый Массив;
	
	Пока ЦеныТоваров.Следующий() Цикл
		Если ЦеныТоваров.Цена <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если offers.Количество() >= 500 Тогда
			УстановитьПорциюЦенВСервисе(ДанныеУчетнойЗаписи, offers, Порция, Отказ);
			
			Порция = Новый Массив;
			offers = Новый Массив;
				
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
		// Для записей в регистры
		Позиция = Новый Структура;
		Позиция.Вставить("УчетнаяЗапись",	ЦеныТоваров.УчетнаяЗапись);
		Позиция.Вставить("Номенклатура",	ЦеныТоваров.Номенклатура);
		Позиция.Вставить("Характеристика",	ЦеныТоваров.Характеристика);
		Позиция.Вставить("Упаковка",		ЦеныТоваров.Упаковка);
		Позиция.Вставить("Цена",			ЦеныТоваров.Цена);
		Позиция.Вставить("Период",			ЦеныТоваров.Период);
		
        Порция.Добавить(Позиция);
		
		// Для запроса HTTP
		UpdatePriceWithDiscountDTO            = Новый Структура("currencyId, value");
		UpdatePriceWithDiscountDTO.currencyId = "RUR";
		UpdatePriceWithDiscountDTO.value      = Формат(ЦеныТоваров.Цена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		
		UpdateBusinessOfferPriceDTO         = Новый Структура("offerId, price");
		UpdateBusinessOfferPriceDTO.offerId = ЦеныТоваров.ИдентификаторПредложения;
		UpdateBusinessOfferPriceDTO.price   = UpdatePriceWithDiscountDTO;
		
		offers.Добавить(UpdateBusinessOfferPriceDTO);
	КонецЦикла;
	
	Если offers.Количество() > 0 Тогда
		УстановитьПорциюЦенВСервисе(ДанныеУчетнойЗаписи, offers, Порция, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПорциюЦенВСервисе(ДанныеУчетнойЗаписи, offers, Порция, Отказ = Ложь)
	
	Если offers.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		Сервер            = СерверПартнерскогоAPI(Ложь);
		ИмяМетода         = "/offer-prices/updates.json";
		АдресРесурса      = "/" + ДанныеУчетнойЗаписи.ИдентификаторКабинета + ИмяМетода;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("offers", offers);
		ТелоЗапроса = ВJSON(ДанныеЗапроса);
		
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			ОбновитьДатуУстановкиЦены(Порция);
			
		Иначе
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли;
			
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
		КонецЕсли;
		
	Исключение 
		Отказ = Истина;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Определяет следующую порцию идентификаторов товарных позиций.
//
// Параметры:
//   УчетнаяЗапись              - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ВидыЦен                    - Массив Из СправочникСсылка.ВидыЦен - рекомендованные виды цен (см. ПолучитьМассивРекомендованныхЦен);
//   ИдентификаторыОтработанные - СписокЗначений Из Строка - список отработанных идентификаторов товарных позиций;
//   ТаблицаТоваров             - Неопределено - без дополнительных ограничений по списку товаров;
//                              - ТаблицаЗначений - список товаров ограничения выборки:
//     * УчетнаяЗапись            - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Номенклатура             - СправочникСсылка.Номенклатура - номенклатура;
//     * Характеристика           - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика;
//     * Упаковка                 - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//
// Возвращаемое значение:
//   СписокЗначений Из Строка - список идентификаторов товарных позиций.
//
Функция ПолучитьИдентификаторыПубликации(УчетнаяЗапись, ВидыЦен, ИдентификаторыОтработанные, ТаблицаТоваров = Неопределено) 
	
	Результат = Новый СписокЗначений;
	
	Если ВидыЦен = Неопределено 
			Или ВидыЦен.Количество() = 0 Тогда
		ВидыЦен = ПолучитьМассивРекомендованныхЦен();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаТоваров.УчетнаяЗапись КАК Справочник.УчетныеЗаписиМаркетплейсов) КАК УчетнаяЗапись,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
			|ПОМЕСТИТЬ ВТ_Товары
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	УчетнаяЗапись,
			|	Номенклатура,
			|	Характеристика,
			|	Упаковка"
			+ ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(); 
	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
			|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
			|ГДЕ
			|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
			|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
			|	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки В (&ИдентификаторыОтработанные)
			|	И (ЦеныНоменклатуры25СрезПоследних.Номенклатура ЕСТЬ NULL
			|			ИЛИ ЦеныНоменклатуры25СрезПоследних.ВидЦены В (&ЗагружаемыеВидыЦен)
			|				И ЦеныНоменклатуры25СрезПоследних.Период < &ТекущаяДата
			|				И НЕ ЦеныНоменклатуры25СрезПоследних.ВидЦены.ПометкаУдаления)
			|	И &ТекстУсловияПоТоварам";
		
	Иначе 
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
			|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|ГДЕ
			|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись = &УчетнаяЗапись
			|	И СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
			|	И НЕ СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки В (&ИдентификаторыОтработанные)
			|	И (ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
			|			ИЛИ ЦеныНоменклатурыСрезПоследних.ВидЦены В (&ЗагружаемыеВидыЦен)
			|				И ЦеныНоменклатурыСрезПоследних.Период < &ТекущаяДата
			|				И НЕ ЦеныНоменклатурыСрезПоследних.ВидЦены.ПометкаУдаления)
			|	И &ТекстУсловияПоТоварам";
	КонецЕсли; 
	
	Если ТаблицаТоваров = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияПоТоварам", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияПоТоварам", 
			"	(СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗапись, СтатусыПубликацииТоваровЯндексМаркет.Номенклатура, СтатусыПубликацииТоваровЯндексМаркет.Характеристика, СтатусыПубликацииТоваровЯндексМаркет.Упаковка) В
			|			(ВЫБРАТЬ
			|				ВТ_Товары.УчетнаяЗапись,
			|				ВТ_Товары.Номенклатура,
			|				ВТ_Товары.Характеристика,
			|				ВТ_Товары.Упаковка
			|			ИЗ
			|				ВТ_Товары КАК ВТ_Товары)");
	КонецЕсли;
	
	Запрос.Параметры.Вставить("УчетнаяЗапись",              УчетнаяЗапись);
	Запрос.Параметры.Вставить("ТекущаяДата",                НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Параметры.Вставить("ЗагружаемыеВидыЦен",         ВидыЦен);
	Запрос.Параметры.Вставить("ИдентификаторыОтработанные", ИдентификаторыОтработанные);
	Запрос.Параметры.Вставить("ТаблицаТоваров",             ТаблицаТоваров);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Результат.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("ИдентификаторТовараПлощадки"));
	
	Возврат Результат; 
	
КонецФункции

// Обновляет цены на товары в информационной базе.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Рекомендации  - Массив Из Структура - список товаров с ценами для продвижения (PriceSuggestOfferDTO):
//     * marketSku       - Число - SKU на Маркете;
//     * offerId         - Строка - идентификатор предложения из прайс-листа;
//     * priceSuggestion - Массив Из Структура - цены для продвижения (PriceSuggestDTO):
//       ** type           - Строка - тип цены;
//       ** price          - Число - цена в рублях.
//   ВидыЦен       - Массив Из СправочникСсылка.ВидыЦен - рекомендованные виды цен (см. ПолучитьМассивРекомендованныхЦен).
//
Процедура ОбновитьРекомендованныеЦены(УчетнаяЗапись, Рекомендации, Знач ВидыЦен)

	ИспользуетсяЦенообразование25                            = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	ИспользоватьХарактеристикиНоменклатуры                   = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьХарактеристикиНоменклатурыДляЦенообразования = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатурыДляЦенообразования");
	ИспользоватьУпаковкиНоменклатуры                         = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	СтруктураУстановкиЦен = Новый Структура;
	СтруктураУстановкиЦен.Вставить("Дата",                          ТекущаяДатаСеанса());
	СтруктураУстановкиЦен.Вставить("ИспользуетсяЦенообразование25", ИспользуетсяЦенообразование25);
	СтруктураУстановкиЦен.Вставить("КодФормы",                      "");
	СтруктураУстановкиЦен.Вставить("Модифицированность",            "");
	
	ВидыВсехРекомендованныхЦен = ПолучитьМассивРекомендованныхЦен();
	Если ВидыЦен = Неопределено
			Или ВидыЦен.Количество() = 0 Тогда
		ВидыРекомендованныхЦен = ВидыВсехРекомендованныхЦен; 
	Иначе
		ВидыРекомендованныхЦен = ОбщегоНазначения.СкопироватьРекурсивно(ВидыЦен);
	КонецЕсли;

	ВидыЦен = Новый Массив;
	Для Каждого ЭлементКоллекции Из ВидыРекомендованныхЦен Цикл
		ВыбранныеЦены = Новый Структура();
		ВыбранныеЦены.Вставить("Выбрана", Истина);
		ВыбранныеЦены.Вставить("Влияет",  Ложь);
		ВыбранныеЦены.Вставить("Ссылка",  ЭлементКоллекции);
		ВыбранныеЦены.Вставить("ВидЦены", ЭлементКоллекции);
		ВидыЦен.Добавить(ВыбранныеЦены);
	КонецЦикла;
	
	СтруктураУстановкиЦен.Вставить("ВыбранныеЦены", ВидыЦен);
	
	ТаблицаЦен = Новый ТаблицаЗначений();
	ТаблицаЦен.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Если ИспользуетсяЦенообразование25 Тогда
		ТаблицаЦен.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаЦен.Колонки.Добавить("УпаковкаЦО",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Иначе
		ТаблицаЦен.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаЦен.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	КонецЕсли;
	ТаблицаЦен.Колонки.Добавить("ВидЦены",             Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЦен.Колонки.Добавить("Цена",                ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
	ТаблицаЦен.Колонки.Добавить("ЦенаИзмененаВручную", Новый ОписаниеТипов("Булево"));
	ТаблицаЦен.Колонки.Добавить("Валюта",              Новый ОписаниеТипов("СправочникСсылка.Валюты")); 
	
	Для Каждого СтруктураПредложения Из Рекомендации Цикл
		Если СтруктураПредложения.Свойство("marketSku")
			 И СтруктураПредложения.Свойство("priceSuggestion") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
				|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
				|	СтатусыПубликацииТоваровЯндексМаркет.Упаковка КАК Упаковка,
				|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
				|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК ИспользоватьХарактеристики,
				|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьУпаковки, ЛОЖЬ) КАК ИспользоватьУпаковки
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
				|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
				|ГДЕ
			    |	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки = &ИдентификаторТовараПлощадки";  
			
			Запрос.Параметры.Вставить("ИдентификаторТовараПлощадки", СтрЗаменить(Строка(СтруктураПредложения.marketSku), Символ(160), ""));
			
			ВыборкаДанных = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаДанных.Следующий() Цикл
				Для Каждого ЭлементМассива Из СтруктураПредложения.priceSuggestion Цикл 
					ВидыЦенПоИмениПоля = ВидыЦенПоИмениПоля(ЭлементМассива.type, ВидыВсехРекомендованныхЦен);
					
					Для Каждого ВидЦены Из ВидыЦенПоИмениПоля Цикл
						Если ВидыРекомендованныхЦен.Найти(ВидЦены) <> Неопределено Тогда
							СтрокаТаблицыЗначений = ТаблицаЦен.Добавить();
							Если ИспользуетсяЦенообразование25 Тогда
								СтрокаТаблицыЗначений.Номенклатура = ВыборкаДанных.Номенклатура;
								Если ИспользоватьХарактеристикиНоменклатурыДляЦенообразования
									 И ВыборкаДанных.ИспользоватьХарактеристики Тогда
									ХарактеристикаЦО                       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДанных.Характеристика, "ХарактеристикаНоменклатурыДляЦенообразования");
									СтрокаТаблицыЗначений.ХарактеристикаЦО = ХарактеристикаЦО;
								КонецЕсли;
								Если ИспользоватьУпаковкиНоменклатуры 
									 И ВыборкаДанных.ИспользоватьУпаковки Тогда
									СтрокаТаблицыЗначений.УпаковкаЦО = ВыборкаДанных.Упаковка;
								КонецЕсли;
							Иначе
								СтрокаСвойств = "Номенклатура";
								Если ИспользоватьХарактеристикиНоменклатуры
									 И ВыборкаДанных.ИспользоватьХарактеристики Тогда 
									СтрокаСвойств = СтрокаСвойств + ", Характеристика";
								КонецЕсли;
								Если ИспользоватьУпаковкиНоменклатуры 
									 И ВыборкаДанных.ИспользоватьУпаковки Тогда
									СтрокаСвойств = СтрокаСвойств + ", Упаковка";
								КонецЕсли;
								ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаДанных, СтрокаСвойств);
							КонецЕсли;
							СтрокаТаблицыЗначений.Цена    = ЭлементМассива.price;
							СтрокаТаблицыЗначений.Валюта  = Справочники.Валюты.НайтиПоКоду("643");
							СтрокаТаблицыЗначений.ВидЦены = ВидЦены;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураУстановкиЦен.Вставить("ТаблицаЦен", ТаблицаЦен);
	МассивДокументов = Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(СтруктураУстановкиЦен);
	
	Для Каждого ЭлементКоллекции Из МассивДокументов Цикл 
		Попытка
			ДокументОбъект = ЭлементКоллекции.УстановкаЦенНоменклатуры.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Конструктор типов цен (PriceSuggestType).
//
// Возвращаемое значение:
//   Соответствие Из Строка - типы цен.
//
Функция СоответствиеИдентификаторов()
	
	СоответствиеИдентификаторов = Новый Соответствие;
	
	СоответствиеИдентификаторов.Вставить("BUYBOX",               "Минимальная цена продажи на Маркете");
	СоответствиеИдентификаторов.Вставить("DEFAULT_OFFER",        "Рекомендованная Маркетом");
	СоответствиеИдентификаторов.Вставить("MIN_PRICE_MARKET",     "Минимальная среди всех предложений товара на Маркете");
	СоответствиеИдентификаторов.Вставить("MAX_DISCOUNT_BASE",    "Максимальная без скидки");
	СоответствиеИдентификаторов.Вставить("MARKET_OUTLIER_PRICE", "Максимальная для показов на Маркете");
	
	Возврат СоответствиеИдентификаторов; 

КонецФункции 

Функция ВидыЦенПоИмениПоля(ИмяПоля, МассивРекомендованныхЦен)   
	
	ВидыЦенПоИмениПоля = Новый Массив;
	
	СоответствиеИдентификаторов = СоответствиеИдентификаторов(); 
	ИмяТипа = СоответствиеИдентификаторов.Получить(ИмяПоля);  
	
	Если ИмяТипа = Неопределено Тогда 
		// Зафиксировать, что на стороне сервиса появился не поддерживаемый в текущей конфигурации вид цены
	Иначе
		Для Каждого ЭлементМассива Из МассивРекомендованныхЦен Цикл 
			ЗначениеИзХранилища = ЭлементМассива.ХранилищеНастроекПараметровСпособаЗаданияЦены.Получить();
			Если ЗначениеИзХранилища.ЗначениеПараметра = ИмяТипа Тогда    
				ВидыЦенПоИмениПоля.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ВидыЦенПоИмениПоля;
	
КонецФункции

// Записывает актуальные данные об остатках товаров в регистры сведений ОстаткиТоваровМаркетплейсов и СтатусыПубликацииТоваровЯндексМаркет.
//
// Параметры:
//   ЦеныТоваров - Массив Из Структура - выборка данных о ценах товарных позиций:
//     * УчетнаяЗапись               - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Номенклатура                - СправочникСсылка.Номенклатура - номенклатура товарной позиции;
//     * Характеристика              - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товарной позиции;
//     * Упаковка                    - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка товарной позиции;
//     * Цена                        - Число - установленная цена товара;
//     * Период                      - Дата - период установки цены.
//
Процедура ОбновитьДатуУстановкиЦены(ЦеныТоваров)
	
	Для Каждого ЭлементКоллекции Из ЦеныТоваров Цикл
		НачатьТранзакцию();
		 
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗапись",  ЭлементКоллекции.УчетнаяЗапись);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",   ЭлементКоллекции.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", ЭлементКоллекции.Характеристика);
			ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",       ЭлементКоллекции.Упаковка);
			БлокировкаДанных.Заблокировать();

			НаборЗаписей = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УчетнаяЗапись.Установить(ЭлементКоллекции.УчетнаяЗапись);
			НаборЗаписей.Отбор.Номенклатура.Установить(ЭлементКоллекции.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ЭлементКоллекции.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(ЭлементКоллекции.Упаковка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Запись                   = НаборЗаписей[0];
				Запись.ДатаУстановкиЦены = ЭлементКоллекции.Период;
				Запись.ЦенаПродажи       = ЭлементКоллекции.Цена;
				
				НаборЗаписей.Записать();
			КонецЕсли;

			ЗафиксироватьТранзакцию();

		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеМагазинамиСлужебный

// Определяет схему работы магазина по его представлению из сервиса. 
//
// Параметры:
//   Представление - Строка - представление схемы работы в сервисе.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок - схема работы магазина.
//
Функция ОпределитьСхемуРаботы(Представление)
	
	Если Представление = "FBS" Тогда
		Возврат Перечисления.СхемыРаботыТорговыхПлощадок.FBS;
	ИначеЕсли Представление = "Express" Или Представление = "Экспресс" Тогда
		Возврат Перечисления.СхемыРаботыТорговыхПлощадок.Express;
	ИначеЕсли Представление = "FBY" Тогда
		Возврат Перечисления.СхемыРаботыТорговыхПлощадок.FBO;
	ИначеЕсли Представление = "DBS" Тогда
		Возврат Перечисления.СхемыРаботыТорговыхПлощадок.DBS;
	КонецЕсли;
	
	Возврат Перечисления.СхемыРаботыТорговыхПлощадок.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область УправлениеПродажами

// Загружает информацию о продажах товаров из сервиса.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/reports/generateGoodsRealizationReport.
//
// Параметры:
//   ДанныеУчетнойЗаписи - Структура - данные учетной записи, см. ДанныеУчетнойЗаписиЯндексМаркет.
//   НачалоПериода       - Дата - начало периода загрузки данных.
//   ОкончаниеПериода    - Дата - окончание периода загрузки данных.
//   Отказ               - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   Массив Из Строка - пути к полученным файлам отчетов о реализованных товарах.
//
Функция ПолучитьОтчетыОРеализованныхТоварахИзСервиса(ДанныеУчетнойЗаписи, Знач НачалоПериода, Знач ОкончаниеПериода, 
			Отказ = Ложь) Экспорт
	
	ОтчетыСервиса = Новый Соответствие;
	Файлы         = Новый Массив;
	
	// Генерация отчетов по реализации за указанный период помесячно
	Пока НачалоПериода < ОкончаниеПериода Цикл
		Попытка
			ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
			ДанныеПриложения  = ДанныеПриложения();

			ПараметрыURL = Новый Массив;
			ПараметрыURL.Добавить("format=" + "FILE");
			
			Сервер       = "api.partner.market.yandex.ru/reports";
			АдресРесурса = "/goods-realization/generate?" + СтрСоединить(ПараметрыURL, "&");
			
			ИнтернетПрокси = Неопределено;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
				МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
				ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			КонецЕсли;
			СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			
			HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type",  "application/json");
			Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token 
													+ ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
			
			ДанныеЗапроса = Новый Структура;
			ДанныеЗапроса.Вставить("campaignId", ДанныеУчетнойЗаписи.ИдентификаторМагазина);
			ДанныеЗапроса.Вставить("year",       Год(НачалоПериода));
			ДанныеЗапроса.Вставить("month",      Месяц(НачалоПериода));
			ТелоЗапроса = ВJSON(ДанныеЗапроса);
			
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
			
			HTTPОтвет    = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  
			КодСостояния = HTTPОтвет.КодСостояния;
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Результат    = ИзJSON(СтрокаОтвета);
			
			Если КодСостояния = 200 И Результат.status = "OK" Тогда
				ДанныеОтчета = Новый Структура;
				ДанныеОтчета.Вставить("Период",         НачалоПериода);
				ДанныеОтчета.Вставить("ВремяГенерации", ТекущаяУниверсальнаяДатаВМиллисекундах() 
															+ Результат.result.estimatedGenerationTime);
				ДанныеОтчета.Вставить("Статус",         "PENDING");
				ДанныеОтчета.Вставить("Повторы",        0);
				ДанныеОтчета.Вставить("ПутьКФайлу",     "");
				
				ОтчетыСервиса.Вставить(Результат.result.reportId, ДанныеОтчета);
				
			Иначе
				Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
					ОписаниеОшибок = ТекстОшибки(Результат.errors);
				Иначе
					ОписаниеОшибок = ""; 
				КонецЕсли;
				
				Отказ = Истина;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка выполнения запроса %1 за период %2 г.: %3%4'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
					Сервер + АдресРесурса, 
					Формат(НачалоПериода, "ДФ=MMMM.yyyy"),
					ОписаниеОшибок,
					СтрокаОтвета);
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ТекстОшибки);
			КонецЕсли;
			
		Исключение 
			Отказ = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				Сервер,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
			Прервать;
		КонецПопытки;
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, 1);
	КонецЦикла;
	
	// Проверить статусы генерации отчетов
	Пока Истина Цикл
		ОжидатьДалее = Ложь;
		
		Для Каждого КлючИЗначение Из ОтчетыСервиса Цикл
			Если КлючИЗначение.Значение.Статус = "PENDING"
					Или КлючИЗначение.Значение.Статус = "PROCESSING" Тогда
				ОжидатьДалее = Истина;
				
				Если КлючИЗначение.Значение.Повторы >= 5 Тогда
					КлючИЗначение.Значение.Статус = "FAILED";
					ОписаниеОшибки                = НСтр("ru = 'Не удалось получить отчет за ограниченное количество попыток.'");
					
					Отказ = Истина;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка генерации отчета о реализованных товарах за период %1 г. %2'", 
							ОбщегоНазначения.КодОсновногоЯзыка()), 
						Формат(КлючИЗначение.Значение.Период, "ДФ=MMMM.yyyy"),
						ОписаниеОшибки);
					
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Ошибка,,, 
						ТекстОшибки);
					
				ИначеЕсли КлючИЗначение.Значение.ВремяГенерации <= ТекущаяУниверсальнаяДатаВМиллисекундах() Тогда
					ОписаниеОшибки = "";
					ПутьКФайлу     = ПолучитьСтатусГенерацииОтчетаИзСервиса(ДанныеУчетнойЗаписи, 
						КлючИЗначение.Ключ, 
						КлючИЗначение.Значение.Статус,
						ОписаниеОшибки);
						
					Если КлючИЗначение.Значение.Статус = "FAILED" Тогда
						Отказ = Истина;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка генерации отчета о реализованных товарах за период %1 г. %2'", 
								ОбщегоНазначения.КодОсновногоЯзыка()), 
							Формат(КлючИЗначение.Значение.Период, "ДФ=MMMM.yyyy"),
							ОписаниеОшибки);
						
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Ошибка,,, 
							ТекстОшибки);
							
					ИначеЕсли КлючИЗначение.Значение.Статус = "DONE" Тогда
						Файлы.Добавить(ПутьКФайлу);
						
					Иначе
						КлючИЗначение.Значение.Статус         = "PROCESSING";
						КлючИЗначение.Значение.ВремяГенерации = ТекущаяУниверсальнаяДатаВМиллисекундах() + 1000;
						КлючИЗначение.Значение.Повторы        = КлючИЗначение.Значение.Повторы + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОжидатьДалее Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияБТС.Пауза(5);
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Получает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.
// Описание метода см. https://yandex.ru/dev/market/partner-api/doc/ru/reference/reports/getReportInfo.
//
// Параметры:
//   ДанныеУчетнойЗаписи - Структура - данные учетной записи, см. ДанныеУчетнойЗаписиЯндексМаркет.
//   ИдентификаторОтчета - Строка - идентификатор отчета, который получен после запуска его генерации.                           
//   Статус              - Строка - выходной параметр, определяет текущий статус генерации отчета.
//   ОписаниеОшибки      - Строка - описание ошибки генерации отчета.
//
// Возвращаемое значение:
//   Строка - путь к файлу отчета на сервере, если он уже сформирован, иначе - пустая строка.
//
Функция ПолучитьСтатусГенерацииОтчетаИзСервиса(ДанныеУчетнойЗаписи, ИдентификаторОтчета, Статус, ОписаниеОшибки = "")
	
	Попытка
		ДанныеАвторизации = ДанныеАвторизацииПоИдентификаторуАккаунта(ДанныеУчетнойЗаписи.ИдентификаторАккаунта);
		ДанныеПриложения  = ДанныеПриложения();
		
		Сервер       = "api.partner.market.yandex.ru/reports";
		АдресРесурса = "/info/" + ИдентификаторОтчета;
		
		ИнтернетПрокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,, ИнтернетПрокси, 180, СоединениеOpenSSL);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type",  "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token 
												+ ", oauth_client_id=" + ДанныеПриложения.IDПриложения);
		
		HTTPЗапрос   = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		HTTPОтвет    = HTTPСоединение.Получить(HTTPЗапрос);  
		КодСостояния = HTTPОтвет.КодСостояния;
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Результат    = ИзJSON(СтрокаОтвета);
		
		Если КодСостояния = 200 И Результат.status = "OK" Тогда
			Статус = Результат.result.status;
			
			Если Статус = "FAILED" Тогда
				Если Результат.result.Свойство("subStatus") И Результат.result.subStatus = "NO_DATA" Тогда
					ОписаниеОшибки = НСтр("ru = 'Для такого отчета нет данных.'", 
						ОбщегоНазначения.КодОсновногоЯзыка());
				ИначеЕсли Результат.result.Свойство("subStatus") И Результат.result.subStatus = "TOO_LARGE" Тогда
					ОписаниеОшибки = НСтр("ru = 'Отчет превысил допустимый размер - укажите меньший период времени или уточните условия запроса.'", 
						ОбщегоНазначения.КодОсновногоЯзыка());
				Иначе
					ОписаниеОшибки = НСтр("ru = 'Во время генерации произошла ошибка.'", 
						ОбщегоНазначения.КодОсновногоЯзыка());
				КонецЕсли;
				
			ИначеЕсли Статус = "DONE" Тогда
				Если Результат.result.Свойство("subStatus") И Результат.result.subStatus = "NO_DATA" Тогда
					Статус         = "FAILED";
					ОписаниеОшибки = НСтр("ru = 'Для такого отчета нет данных.'", 
						ОбщегоНазначения.КодОсновногоЯзыка());
				ИначеЕсли Результат.result.Свойство("subStatus") И Результат.result.subStatus = "TOO_LARGE" Тогда
					Статус         = "FAILED";
					ОписаниеОшибки = НСтр("ru = 'Отчет превысил допустимый размер - укажите меньший период времени или уточните условия запроса.'", 
						ОбщегоНазначения.КодОсновногоЯзыка());
				Иначе
					ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
					ПараметрыПолучения.ПутьДляСохранения = ПолучитьИмяВременногоФайла("xlsx");
					
					РезультатПолучения = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Результат.result.file, 
						ПараметрыПолучения, 
						Ложь);
					
					Если РезультатПолучения.Статус Тогда
						Возврат РезультатПолучения.Путь;
					Иначе
						Статус         = "FAILED";
						ОписаниеОшибки = РезультатПолучения.СообщениеОбОшибке;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если Результат.Свойство("status") И Результат.status = "ERROR" Тогда
				ОписаниеОшибок = ТекстОшибки(Результат.errors);
			Иначе
				ОписаниеОшибок = ""; 
			КонецЕсли;
			
			Статус         = "FAILED";
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2%3'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Сервер + АдресРесурса, 
				ОписаниеОшибок,
				СтрокаОтвета);
		КонецЕсли;
		
	Исключение 
		Статус         = "FAILED";
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;  
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СервисныеФункцииСлужебный

// Преобразует данные в строку JSON.
//
// Параметры:
//   Значение - Произвольный - объект записи JSON. Представляет собой значение произвольного типа.  
//                Ограничения см. в описании функции глобального контекста ЗаписатьJSON.
//
// Возвращаемое значение:
//   Строка - строка JSON.
//
Функция ВJSON(Значение)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

// Формирует текст ошибки по результатам работы метода сервиса.
//
// Параметры:
//   Ошибки - Массив Из Структура - ошибки сервиса:
//     * code    - Строка - код ошибки;
//     * message - Строка - описание ошибки.
//
// Возвращаемое значение:
//   Строка - описание ошибок.
//
Функция ТекстОшибки(Ошибки)
	
	Результат = "";
	
	Для Каждого ЭлементКоллекции Из Ошибки Цикл
		Результат = Результат + "(" + ЭлементКоллекции.code + ") " + ЭлементКоллекции.message + "; " + Символы.ПС;
	КонецЦикла;
		
	Возврат СокрЛП(Результат);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли