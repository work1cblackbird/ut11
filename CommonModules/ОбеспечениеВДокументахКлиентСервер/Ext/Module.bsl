////////////////////////////////////////////////////////////////////////////////
// Модуль "Обеспечение в документах (Клиент-Сервер)", содержит процедуры и функции
// обслуживающие работу механизма резервирования и обеспечения потребностей в документах на клиенте и на сервере"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////
// Заполнение вариантов обеспечения и серий.

// Конструктор структуры ключевых параметров формы запроса количества и серий.
//
//  Возвращаемое значение:
//  Структура - структура с полями:
//   * Режим - Строка - режим открытия формы.
//   * ПодборТоваров - Булево - признак того, что форма открывается из подбора товаров.
//   * ПодборВариантовОбеспечения - Булево - признак, что в форме необходимо подбирать варианты обеспечения.
//   * ПодборСерий - Булево - признак, что форма открыта для подбора серий.
//   * ПодборСкладов - Булево - признак того, что форма открыта для отбора складов.
//   * СкрытьЦену - Булево - признак, что в открываемой форме нужно скрыть информацию о ценах.
//   * РедактироватьВидЦены - Булево - признак того, что в открываемой форме можно редактировать вид цены.
//   * РедактироватьЦену - Булево -  - признак того, что в открываемой форме можно редактировать цены.
//   * ВыборСерии - Булево - признак того, что форма открывается исключительно для указания серий.
//   * СкрыватьРучныеСкидки - Булево - признак того, что в открываемой форме нужно скрыть указание ручных скидок.
//   * ИспользоватьРучныеСкидкиВПродажах - Булево - признак использования скидок.
//   * ОграничиватьВариантыОбеспечения - Булево - признак, что варианты обеспечения передаются в форму.
//   * ДопКолонкиДляУказанияСерий - Строка - перечень дополнительных колонок через запятую.
//   * РежимОтображенияТоваров - Строка, Неопределено - "Все" либо "СвободныеОстатки".
//   * ДатаОтгрузкиВсехСтрокОднойДатой - Дата, Неопределено - дата отгрузки из шапки документа.
//   * ДатаОтгрузкиНовыхСтрок - Дата, Неопределено - дата отгрузки измененных в форме строк.
//
Функция КлючевыеПараметрыФормыЗапросаКоличестваИСерий() Экспорт
	
	ПараметрыФормы = Новый Структура();
	
	// Ключевые параметры.
	ПараметрыФормы.Вставить("Режим",                             Неопределено);
	ПараметрыФормы.Вставить("ПодборТоваров",                     Ложь);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",        Ложь);
	ПараметрыФормы.Вставить("ПодборСерий",                       Ложь);
	ПараметрыФормы.Вставить("ПодборСкладов",                     Ложь);
	ПараметрыФормы.Вставить("СкрытьЦену",                        Истина);
	ПараметрыФормы.Вставить("РедактироватьВидЦены",              Ложь);
	ПараметрыФормы.Вставить("РедактироватьЦену",                 Ложь);
	ПараметрыФормы.Вставить("ВыборСерии",                        Ложь);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              Истина);
	ПараметрыФормы.Вставить("ИспользоватьРучныеСкидкиВПродажах", Ложь);
	ПараметрыФормы.Вставить("ОграничиватьВариантыОбеспечения",   Ложь);
	ПараметрыФормы.Вставить("ДопКолонкиДляУказанияСерий",        Неопределено);
	
	// Для настойки отображения формы.
	ПараметрыФормы.Вставить("РежимОтображенияТоваров",           Неопределено);
	
	// Для вопроса об отгрузке одной датой.
	ПараметрыФормы.Вставить("ВыбраныВсеСтрокиДокумента",       Ложь);
	ПараметрыФормы.Вставить("ДатаОтгрузкиВсехСтрокОднойДатой", Неопределено);
	ПараметрыФормы.Вставить("ДатаОтгрузкиНовыхСтрок",          Неопределено);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Конструктор структуры параметров указания серий.
//
// Параметры:
//  Все - Булево - если истина то будут получены все параметры, иначе будут получены не ключевые параметры.
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//   * Режим - Строка - режим открытия формы.
//   * ПодборТоваров - Булево - признак того, что форма открывается из подбора товаров.
//   * ПодборВариантовОбеспечения - Булево - признак, что в форме необходимо подбирать варианты обеспечения.
//   * ПодборСерий - Булево - признак, что форма открыта для подбора серий.
//   * ПодборСкладов - Булево - признак того, что форма открыта для отбора складов.
//   * СкрытьЦену - Булево - признак, что в открываемой форме нужно скрыть информацию о ценах.
//   * РедактироватьВидЦены - Булево - признак того, что в открываемой форме можно редактировать вид цены.
//   * РедактироватьЦену - Булево -  - признак того, что в открываемой форме можно редактировать цены.
//   * ВыборСерии - Булево - признак того, что форма открывается исключительно для указания серий.
//   * СкрыватьРучныеСкидки - Булево - признак того, что в открываемой форме нужно скрыть указание ручных скидок.
//   * ИспользоватьРучныеСкидкиВПродажах - Булево - признак использования скидок.
//   * ОграничиватьВариантыОбеспечения - Булево - признак, что варианты обеспечения передаются в форму.
//   * ДопКолонкиДляУказанияСерий - Строка - перечень дополнительных колонок через запятую.
//   * РежимОтображенияТоваров - Строка, Неопределено - "Все" либо "СвободныеОстатки".
//   * ДатаОтгрузкиВсехСтрокОднойДатой - Дата, Неопределено - дата отгрузки из шапки документа.
//   * ДатаОтгрузкиНовыхСтрок - Дата, Неопределено - дата отгрузки измененных в форме строк.
//   * ТолькоПросмотр - Булево - Истина, если форму нужнооткрыть только на просмотр.
//   * Номенклатура - СправочникСсылка.Номенклатура - аналитика для получения остатков товаров отображаемых в форме.
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - аналитика для получения остатков товаров отображаемых в форме.
//   * Назначение - СправочникСсылка.Назначения - аналитика для получения остатков товаров отображаемых в форме.
//   * Подразделение - СправочникСсылка.СтруктураПредприятия - аналитика для получения остатков товаров отображаемых в форме.
//   * Склад - СправочникСсылка.Склады - аналитика для получения остатков товаров отображаемых в форме.
//   * Склады - Массив из СправочникСсылка.Склады - массив складов для получения остатков, если в документе указана группа складов.
//   * АдресТаблицыПодобраноРанее - Строка - адрес таблицы содержащей ранее подобранные товары, для сторнирования остатков.
//   * АдресДоступныеОстатки - Строка - адрес таблицы с готовыми рассчитанными остатками, используется в режиме ПодборТоваров = Истина.
//   * ЗаказыНаОтгрузку - Массив из ОпределяемыйТип.ОжидаемаяОтгрузка - заказы указанные в документе.
//   * Регистратор - ОпределяемыйТип.ОжидаемаяОтгрузка - ссылка на документ.
//   * ВариантОбеспеченияПоДокументу - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения из текущей строки документа.
//   * ВариантОбеспеченияДоИзменения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения из текущей строки документа до изменения.
//   * ОбособленноПоДокументу - Булево - значение признака "Обособленно2 из текущей строки документа до изменения.
//   * КоличествоПоДокументу - Число - количество из текущей строки документа до изменения.
//   * СкладПоДокументу - СправочникСсылка.Склады - склад из текущей строки документа до изменения.
//   * КоличествоОформлено - Число - Количество на которое оформлены накладные и ордера для текущей строки докукмента.
//   * Цена - Число - цена товара.
//   * ВидЦены - СправочникСсылка.ВидыЦен - вид цены по которому нужно получить цену.
//   * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка по которой нужно получить цену для товара.
//   * Валюта - СправочникСсылка.Валюты - валюта по которой нужно получить цену для товара.
//   * Дата - Дата - дата на которую нужно получить цену для товара.
//   * ЦенаВключаетНДС - Булево - если Истина, то нужно получать цены включая НДС, иначе - без учета НДС.
//   * БезОтбораПоВключениюНДСВЦену - Булево - если Истина, то нужно искать цену без отбора по включению НДС.
//   * Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение по которому искать цену.
//   * АдресВоВременномХранилище - Строка - адрес данных о скидках на товар.
//   * ДопустимыеОбособленныеДействия - Массив из ПеречислениеСсылка.ВариантыОбеспечения - доступные обособленные действия для укзаания в форме.
//   * ДопустимыеНеобособленныеДействия - Массив из ПеречислениеСсылка.ВариантыОбеспечения - доступные необособленные действия для укзаания в форме.
//   * ВариантОбеспеченияИФлагОбособленно - Структура - структура содержащая вариант обеспечения и признак обособленно, если в форме жестко заданы выбираемые значения этих полей.
//   * РазбиватьСтрокиЗапрещено - Булево - если истина, то в форме нельзя разбивать исходную строку на две и более указывая количество.
//   * ПараметрыУказанияСерий - см. НоменклатураСервер.ПараметрыУказанияСерий
//   * Серия - СправочникСсылка.СерииНоменклатуры, Массив из СправочникСсылка.СерииНоменклатуры - серия из текущей строки документа.
//
Функция ПараметрыФормыЗапросаКоличестваИСерий(Все = Истина) Экспорт
	
	ПараметрыФормы = Новый Структура();
	Если Все Тогда
		ПараметрыФормы = КлючевыеПараметрыФормыЗапросаКоличестваИСерий();
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТолькоПросмотр",                  Ложь);

	// Для получения остатков.
	ПараметрыФормы.Вставить("Номенклатура",                    Неопределено);
	ПараметрыФормы.Вставить("Характеристика",                  Неопределено);
	ПараметрыФормы.Вставить("Назначение",                      Неопределено);
	ПараметрыФормы.Вставить("Подразделение",                   Неопределено);
	ПараметрыФормы.Вставить("Склад",                           Неопределено);
	ПараметрыФормы.Вставить("Склады",                          Новый Массив);
	ПараметрыФормы.Вставить("АдресТаблицыПодобраноРанее",      Неопределено);
	ПараметрыФормы.Вставить("АдресДоступныеОстатки",           Неопределено);
	ПараметрыФормы.Вставить("ЗаказыНаОтгрузку",                Новый СписокЗначений);
	ПараметрыФормы.Вставить("Регистратор",                     Неопределено);

	// Для выделения текущей строки документа.
	ПараметрыФормы.Вставить("ВариантОбеспеченияПоДокументу",   Неопределено);
	ПараметрыФормы.Вставить("ВариантОбеспеченияДоИзменения",   Неопределено);
	ПараметрыФормы.Вставить("ОбособленноПоДокументу",          Неопределено);
	ПараметрыФормы.Вставить("КоличествоПоДокументу",           Неопределено);
	ПараметрыФормы.Вставить("СкладПоДокументу",                Неопределено);
	ПараметрыФормы.Вставить("КоличествоОформлено",             Неопределено);
	
	// Для получения цен.
	ПараметрыФормы.Вставить("Цена",                            Неопределено);
	ПараметрыФормы.Вставить("ВидЦены",                         Неопределено);
	ПараметрыФормы.Вставить("Упаковка",                        Неопределено);
	ПараметрыФормы.Вставить("Валюта",                          Неопределено);
	ПараметрыФормы.Вставить("Дата",                            Неопределено);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",                 Неопределено);
	ПараметрыФормы.Вставить("БезОтбораПоВключениюНДСВЦену",    Неопределено);
	ПараметрыФормы.Вставить("Соглашение",                      Неопределено);
	ПараметрыФормы.Вставить("Партнер",                         Неопределено);
	ПараметрыФормы.Вставить("ИспользуетсяЦенообразование25",   Ложь);
	
	// Для получения скидок.
	ПараметрыФормы.Вставить("АдресВоВременномХранилище",       Неопределено);
	
	// Для управления перечнем доступных действий.
	ПараметрыФормы.Вставить("ДопустимыеОбособленныеДействия",     Новый СписокЗначений);
	ПараметрыФормы.Вставить("ДопустимыеНеобособленныеДействия",   Новый СписокЗначений);
	ПараметрыФормы.Вставить("ВариантОбеспеченияИФлагОбособленно", Неопределено);
	ПараметрыФормы.Вставить("РазбиватьСтрокиЗапрещено",           Ложь);
	
	// Для заполнения серий.
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",          Неопределено);
	ПараметрыФормы.Вставить("Серия",                           Неопределено);
	ПараметрыФормы.Вставить("ОбособленныйНабор",               Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Конструктор структуры ключевых параметров формы запроса количества и серий.
//
// Параметры:
//  ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//
// Возвращаемое значение:
//  Строка - ключ структуры, содержащей данные по указанному типу номенклатуры.
//
Функция ИмяСвойстваСтруктурыВариантыОбеспеченияПоТипуНоменклатуры(ТипНоменклатуры) Экспорт
	
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
		ИмяСвойства = "Товар";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ИмяСвойства = "Работа";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		ИмяСвойства = "Услуга";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ИмяСвойства = "Тара";
	КонецЕсли;
	
	Возврат ИмяСвойства;
	
КонецФункции

// Рассчитывает вариант обеспечения по умолчанию для подбора товаров исходя из входящих параметров.
//
// Параметры:
//  ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//  ДопустимыеОбособленныеДействия - Массив из ПеречислениеСсылка.ВариантыОбеспечения - допустимые для выбора обособленные варианты обеспечения.
//  ДопустимыеНеобособленныеДействия - Массив из ПеречислениеСсылка.ВариантыОбеспечения - допустимые для выбора необособленные варианты обеспечения.
//  ОграничиватьВариантыОбеспечения - Булево - признак необходимости ограничения варианта обеспечения переданным в открываемую форму.
//  ВариантОбеспеченияИФлагОбособленно - Структура - структура с полями:
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - значение варианта обеспечения.
//   * Обособленно - Булево - значение признака "Обособленно".
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - значение варианта обеспечения.
//   * Обособленно - Булево - значение признака "Обособленно".
//
Функция ВариантИФлагПоУмолчаниюДляПодбора(ТипНоменклатуры, ДопустимыеОбособленныеДействия, ДопустимыеНеобособленныеДействия, ОграничиватьВариантыОбеспечения, ВариантОбеспеченияИФлагОбособленно) Экспорт

	Результат = Новый Структура("Обособленно,ВариантОбеспечения");
	
	ДопустимыеВариантыОбеспечения = ДопустимыеВариантыОбеспечения(ТипНоменклатуры, ДопустимыеОбособленныеДействия, ДопустимыеНеобособленныеДействия, ОграничиватьВариантыОбеспечения, ВариантОбеспеченияИФлагОбособленно);
	ИмяСвойства = ИмяСвойстваСтруктурыВариантыОбеспеченияПоТипуНоменклатуры(ТипНоменклатуры);
	
	Если ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно
				И ДопустимыеВариантыОбеспечения.Обособленные.Найти(ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения) <> Неопределено 
			Или Не ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно
				И ДопустимыеВариантыОбеспечения.Необособленные.Найти(ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения) <> Неопределено Тогда
			
			Результат.Обособленно = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно;
			Результат.ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения;
		
	ИначеЕсли ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно
					И ДопустимыеВариантыОбеспечения.Необособленные.Найти(ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения) <> Неопределено
				Или Не ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно
				И ДопустимыеВариантыОбеспечения.Обособленные.Найти(ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения) <> Неопределено Тогда
		
			Результат.Обособленно = Не ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно;
			Результат.ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения;
	
	Иначе
		
		Если ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно
					И ДопустимыеВариантыОбеспечения.Обособленные.Количество() > 0
				Или Не ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно
					И ДопустимыеВариантыОбеспечения.Необособленные.Количество() = 0 Тогда
		
				Результат.Обособленно = Истина;
				Результат.ВариантОбеспечения = ДопустимыеВариантыОбеспечения.Обособленные[0];
					
		Иначе
			
				Результат.Обособленно = Ложь;
				Результат.ВариантОбеспечения = ДопустимыеВариантыОбеспечения.Необособленные[0];
			Возврат Результат;
			
		КонецЕсли;
		
КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Рассчитывает вариант обеспечения по умолчанию для подбора товаров исходя из входящих параметров.
//
// Параметры:
//  ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//  ДопустимыеОбособленныеДействия - Массив из ПеречислениеСсылка.ВариантыОбеспечения - допустимые для выбора обособленные варианты обеспечения.
//  ДопустимыеНеобособленныеДействия - Массив из ПеречислениеСсылка.ВариантыОбеспечения - допустимые для выбора необособленные варианты обеспечения.
//  ОграничиватьВариантыОбеспечения - Булево - признак необходимости ограничения варианта обеспечения переданным в открываемую форму.
//  ВариантОбеспеченияИФлагОбособленно - Структура - структура с полями:
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - значение варианта обеспечения.
//   * Обособленно - Булево - значение признака "Обособленно".
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - значение варианта обеспечения.
//   * Обособленно - Булево - значение признака "Обособленно".
//
Функция ДопустимыеВариантыОбеспечения(ТипНоменклатуры, ДопустимыеОбособленныеДействия, ДопустимыеНеобособленныеДействия, ОграничиватьВариантыОбеспечения, ВариантОбеспеченияИФлагОбособленно) Экспорт
	
	Обособленные = Новый Массив();
	Необособленные = Новый Массив(); 
	Если ОграничиватьВариантыОбеспечения Тогда
		
		ИмяСвойства = ИмяСвойстваСтруктурыВариантыОбеспеченияПоТипуНоменклатуры(ТипНоменклатуры);
		
		Если ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно Тогда
			
			Обособленные.Добавить(ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения);
			
		Иначе
			
			Необособленные.Добавить(ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
			
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
		ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
			
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
		ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
			Обособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
		ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
			Необособленные.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
		КонецЕсли;
		
		ВсегоЭлементов = Обособленные.Количество();
		Для Счетчик = 1 По ВсегоЭлементов Цикл
			
			Если ДопустимыеОбособленныеДействия.НайтиПоЗначению(Обособленные[ВсегоЭлементов - Счетчик]) = Неопределено Тогда
				Обособленные.Удалить(ВсегоЭлементов - Счетчик);
			КонецЕсли;
			
		КонецЦикла;
		
		ВсегоЭлементов = Необособленные.Количество();
		Для Счетчик = 1 По ВсегоЭлементов Цикл
			
			Если ДопустимыеНеобособленныеДействия.НайтиПоЗначению(Необособленные[ВсегоЭлементов - Счетчик]) = Неопределено Тогда
				Необособленные.Удалить(ВсегоЭлементов - Счетчик);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура("Обособленные,Необособленные", Обособленные,Необособленные);
	Возврат Результат;
	
КонецФункции

// Возвращает список значений, содержащий все доступные варианты обеспечения.
//
// Возвращаемое значение:
//  - СписокЗначений - список всех вариантов обеспечения.
//
Функция ВсеДействия() Экспорт
	
	ВсеДействия = Новый СписокЗначений();
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
	Возврат ВсеДействия;
	
КонецФункции

// Возвращает перечень действий, доступных для выбора в строке заказа по умолчанию.
// Возвращаемое значение:
//  Массив - Массив действий.
Функция ДоступныеДействияДляВыбораОбеспеченияВСтрокеПоУмолчанию() Экспорт
	
	ВсеДействия = Новый Массив();
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
	ВсеДействия.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
	Возврат ВсеДействия;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживающие формы документов

// Добавление в структуру действий действия, для заполнения реквизитов табличной части и шапки формы,
// а также служебных реквизитов табличной части и формы, необходимых для условного оформления.
// Действие для заполнения служебных реквизитов формы:
//  - Форма.ДатаОтгрузкиОбязательна
//  - Форма.СкладОбязателен
//  - СтрокаКоллекции.ДатаОтгрузкиОбязательна
//  - СтрокаКоллекции.СкладОбязателен
// Событие обработки табличных частей:
//  "ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения"
// Событие обработки табличных частей:
//  "ЗаполнитьКолонкуДоступно"
// Действие для заполнения реквизита табличной части:
//  СтрокаКоллекции.Доступно
//  СтрокаКоллекции.ПерераспределятьЗапасы
// Действие для заполнения реквизита табличной части:
//  СтрокаКоллекции.ВариантОбеспечения
//  СтрокаКоллекции.ДатаОтгрузки
// Событие обработки табличных частей:
//  "ПроверитьЗаполнитьОбеспечениеВДокументеПродажи"
// Действие для заполнения реквизита табличной части:
//  СтрокаКоллекции.ВариантОбеспечения
// Событие обработки табличных частей, только на сервере:
//  "УвеличитьДатуОтгрузкиДокумента".
// 
// Параметры:
//  СтруктураДействий - Структура - структура в которую добавляется действие.
//  ПоляСтрокой - Строка - "ВариантОбеспечения" и/или "ДатаОтгрузки","СкладОбязателен","ДатаОтгрузкиОбязательна", "ДатаОтгрузкиОтложенно" через запятую.
//  ПараметрыДокумента - Структура - Данные формы:
//   * ДатаОтгрузкиВСтроке                - Дата, Неопределено   - Дата отгрузки из строки документа.
//   * ИмяПоляДатаОтгрузки                - Строка               - Имя поля "Дата отгрузки" в шапке документа.
//   * ВариантОбеспеченияИФлагОбособленно - см. ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию
//   * Объект                             - ДанныеФормыСтруктура - Объект формы связанный с заказом на отгрузку,
//                                                                 в том числе поле "Ссылка" для определения типа заказа на отгрузку.
//
Процедура ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента) Экспорт
	
	ВызовИзОбъекта = Не ПараметрыДокумента.Свойство("Форма");
	
	Форма = ?(ВызовИзОбъекта,
		Новый Структура("Объект",
		ПараметрыДокумента.Объект), ПараметрыДокумента.Форма);
	ПараметрыВстраивания = ?(ВызовИзОбъекта,
		ПараметрыДокумента.ПараметрыВстраивания,
		ПараметрыДокумента.Форма.ДоступныеОстаткиПараметрыВстраивания);
	
	Поля = Новый Структура(ПоляСтрокой);
	
	Если Поля.Свойство("ВариантОбеспечения") Тогда
		
		ПараметрыДействия = Новый Структура();
		
		ПараметрыДействия.Вставить("ВариантОбеспеченияИФлагОбособленно", ПараметрыДокумента.ВариантОбеспеченияИФлагОбособленно);
		ПараметрыДействия.Вставить("Форма",                              Форма);
		ПараметрыДействия.Вставить("ПараметрыВстраивания",               ПараметрыВстраивания);
		ПараметрыДействия.Вставить("ВызовИзОбъекта",                     ВызовИзОбъекта);
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		
	КонецЕсли;
	
	Если Поля.Свойство("ДоступноВДругихСтроках") Тогда
		
		ПараметрыДействия = Новый Структура();
		
		ПараметрыДействия.Вставить("Форма",                Форма);
		ПараметрыДействия.Вставить("ПараметрыВстраивания", ПараметрыВстраивания);
		ПараметрыДействия.Вставить("ВызовИзОбъекта",       Ложь);
		
		СтруктураДействий.Вставить("ЗаполнитьКолонкуДоступно", ПараметрыДействия);
		
		Адрес = ПараметрыВстраивания.СлужебныеПараметры.АдресНоменклатура;
		КэшТекущейСтроки = Форма.КэшированныеСтроки[ПараметрыВстраивания.ИмяТаблицыФормы];
		
		ПараметрыДействия = Новый Структура();
		
		ПараметрыДействия.Вставить("АдресНоменклатура",                               Адрес);
		ПараметрыДействия.Вставить("ОбновитьКолонкуДоступно",                         Ложь);
		ПараметрыДействия.Вставить("КэшТекущейСтроки",                                КэшТекущейСтроки);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьОбновленияКолонкиДоступно", ПараметрыДействия);
		
	КонецЕсли;
	
	Если Поля.Свойство("Доступно") Тогда
		
		ПараметрыДействия = Новый Структура();
		
		ПараметрыДействия.Вставить("Форма",                Форма);
		ПараметрыДействия.Вставить("ПараметрыВстраивания", ПараметрыВстраивания);
		ПараметрыДействия.Вставить("ВызовИзОбъекта",       Ложь);
		
		СтруктураДействий.Вставить("ЗаполнитьКолонкуДоступно", ПараметрыДействия);
		
	КонецЕсли;
	
	Если Поля.Свойство("ОбновитьКэшНоменклатура") Тогда
		
		ПараметрыДействия = Новый Структура();
		
		Адрес = ПараметрыВстраивания.СлужебныеПараметры.АдресНоменклатура;
		ПараметрыДействия = Новый Структура("АдресНоменклатура", Адрес, Ложь);
		СтруктураДействий.Вставить("ОбновитьКэшНоменклатура", ПараметрыДействия);
		
	КонецЕсли;
	
	Если Поля.Свойство("СкладОбязателен") Или Поля.Свойство("ДатаОтгрузкиОбязательна") Тогда
		
		ПараметрыДействия = Новый Структура();
		
		ПараметрыДействия.Вставить("Форма",                Форма);
		ПараметрыДействия.Вставить("ПараметрыВстраивания", ПараметрыВстраивания);
		ПараметрыДействия.Вставить("ВызовИзОбъекта",       Ложь);
		
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения", ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет из структуры действий действия связанные с обеспечением.
//
// Параметры:
//  СтруктураДействий - Структура - структура действий.
//
Процедура УдалитьДействияОбеспечения(СтруктураДействий) Экспорт
	
	СтруктураДействий.Удалить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи");
	СтруктураДействий.Удалить("ЗаполнитьКолонкуДоступно");
	СтруктураДействий.Удалить("ПроверитьНеобходимостьОбновленияКолонкиДоступно");
	СтруктураДействий.Удалить("ОбновитьКэшНоменклатура");
	СтруктураДействий.Удалить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения");
	
КонецПроцедуры

// Заполняет служебные реквизиты обеспечения в шапке формы, исходя из изменений служебных реквизитов табличной части.
// Необходимо использовать в паре с ДобавитьДействияОбеспечения на клиенте после обработки строки табличной части.
// 
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - табличная часть в которой произошли изменения служебных реквизитов.
//  ДатаОтгрузкиОбязательна - Булево - одноименный реквизит формы, который нужно обновить.
//  СкладОбязателен - Булево - одноименный реквизит формы, который нужно обновить.
//
Процедура ЗаполнитьСлужебныеРеквизиты(Коллекция, ДатаОтгрузкиОбязательна, СкладОбязателен) Экспорт
	
	ДатаОтгрузкиОбязательна  = ?(Коллекция.Итог("ДатаОтгрузкиОбязательна") = 0, 0, 1);
	СкладОбязателен          = ?(Коллекция.Итог("СкладОбязателен") = 0, 0, 1);
	
КонецПроцедуры

// Возвращает варианты обеспечения по умолчанию для каждого типа номенклатуры, в зависимости от стратегии обеспечения.
// Структура вариантов обеспечения нужно инициализировать в документах только если необходимо полностью переопределить правила, используемые
// при заполнении варианта обеспечения по умолчанию. В случае если известен и жестко задан вариант обеспечения для каждого типа номенклатуры.
// 
// Параметры:
//  ЗаполнятьОбособленно - Булево - признак использования обособленной стратегии обеспечения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Товар - Структура - структура с ключами:
//      ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения по умолчанию.
//      ** Обособленно - Булево - значение флага Обособленно по умолчанию.
//   * МногооборотнаяТара - Структура - структура с ключами:
//      ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения по умолчанию.
//      ** Обособленно - Булево - значение флага Обособленно по умолчанию.
//   * Работа - Структура - структура с ключами:
//      ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения по умолчанию.
//      ** Обособленно - Булево - значение флага Обособленно по умолчанию.
//   * Услуга - Структура - структура с ключами:
//      ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения по умолчанию.
//      ** Обособленно - Булево - значение флага Обособленно по умолчанию.
//
Функция ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ЗаполнятьОбособленно) Экспорт
	
	КОбеспечению   = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
	НеОбеспечивать = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
	
	Результат = Новый Структура();
	Результат.Вставить("Товар",  Новый Структура("ВариантОбеспечения,Обособленно", КОбеспечению,   Ложь));
	Результат.Вставить("Тара",   Новый Структура("ВариантОбеспечения,Обособленно", КОбеспечению,   Ложь));
	Результат.Вставить("Работа", Новый Структура("ВариантОбеспечения,Обособленно", НеОбеспечивать, Ложь));
	Результат.Вставить("Услуга", Новый Структура("ВариантОбеспечения,Обособленно", НеОбеспечивать, Ложь));
	
	Если ЗаполнятьОбособленно Тогда
		
		Результат.Товар.Обособленно         = Истина;
		Результат.Работа.Обособленно        = Истина;
		Результат.Работа.ВариантОбеспечения = КОбеспечению;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает условное обозначение режима побора складов.
//
// Возвращаемое значение:
//  Строка - строка "ПодборСерий".
//
Функция РежимПодборСерий() Экспорт
	Возврат "ПодборСерий";
КонецФункции

// Возвращает условное обозначение режима побора складов.
//
// Возвращаемое значение:
//  Строка - строка "ВыборДействия".
//
Функция РежимВыборДействия() Экспорт
	Возврат "ВыборДействия";
КонецФункции

// Возвращает условное обозначение режима состояния обеспечения.
//
// Возвращаемое значение:
//  Строка - строка "СостоянияОбеспечения".
//
Функция РежимСостоянияОбеспечения() Экспорт
	Возврат "СостоянияОбеспечения";
КонецФункции

// Возвращает условное обозначение режима заполнения действия из списка.
//
// Возвращаемое значение:
//  Строка - строка "ЗаполнениеДействияИзСписка".
//
Функция РежимЗаполнениеДействияИзСписка() Экспорт
	Возврат "ЗаполнениеДействияИзСписка";
КонецФункции

// Возвращает условное обозначение режима выбора действия в строке непосредственно.
//
// Возвращаемое значение:
//  Строка - строка "ВыборДействияНепосредственно".
//
Функция РежимВыборДействияНепосредственно() Экспорт
	Возврат "ВыборДействияНепосредственно";
КонецФункции

// Возвращает условное обозначение режима побора складов.
//
// Возвращаемое значение:
//  Строка - строка "ПодборСкладов".
//
Функция РежимПодборСкладов() Экспорт
	Возврат "ПодборСкладов";
КонецФункции

// Возвращает условное обозначение режима побора складов.
//
// Возвращаемое значение:
//  Неопределено - значение Неопределено.
//
Функция РежимПросмотрДоступности() Экспорт
	Возврат Неопределено;
КонецФункции

// Определяет нужно ли проверять или заполнять дату отгрузки после изменения варианта обеспечения в строках документа.
//
// Параметры:
//  Режим - Строка - режим выполнения действия.
//
// Возвращаемое значение:
//  Булево - Истина, если нужно проверять или заполнять дату отгрузки.
//
Функция НужноПроверитьЗаполнитьДатуОтгрузкиДляСтрокОтгрузить(Режим) Экспорт
	
	Возврат ЭтоРежимИзмененияВариантаОбеспечения(Режим);
	
КонецФункции

// Определяет режим изменения варианта обеспечения
//
// Параметры:
//  Режим - Строка - режим выполнения действия.
//
// Возвращаемое значение:
//  Булево - Истина, если меняется вариант обеспечения.
//
Функция ЭтоРежимИзмененияВариантаОбеспечения(Режим) Экспорт
	
	Возврат Режим = Неопределено
		Или Режим = РежимВыборДействия()
		Или Режим = РежимСостоянияОбеспечения()
		Или Режим = РежимВыборДействияНепосредственно()
		Или Режим = РежимЗаполнениеДействияИзСписка();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Структура данных выбора варианта обеспечения.
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения,Неопределено -
//   * ОткрытьФормуВыбораСкладаИСерий - Булево
//   * РазбитьСтроку - Булево -
//   * ОткрытьФормуРазбиенияСтроки - Булево -
//   * ДоступноеКоличествоПриРазбиенииСтроки - Число -
//   * ДопустимоеОтклонениеПриВыбореВариантаОбеспечения - Число -
//   * ОбщееКоличествоПриРазбиенииСтроки - Число -
//   * Доступно - Число -
Функция ЗначениеВыбораВариантаОбеспечения() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВариантОбеспечения", Неопределено);
	Результат.Вставить("ОткрытьФормуВыбораСкладаИСерий", Ложь);
	Результат.Вставить("РазбитьСтроку", Ложь);
	Результат.Вставить("ОткрытьФормуРазбиенияСтроки", Ложь);
	Результат.Вставить("ДоступноеКоличествоПриРазбиенииСтроки", 0);
	Результат.Вставить("ДопустимоеОтклонениеПриВыбореВариантаОбеспечения", 0);
	Результат.Вставить("ОбщееКоличествоПриРазбиенииСтроки", 0);
	Результат.Вставить("Доступно", 0);
	
	Возврат Результат;
	
КонецФункции

Функция КоллекцияНаФорме(Форма, ПараметрыВстраивания) Экспорт
	
	Если ПараметрыВстраивания.ИмяТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоллекцияНаФорме = Неопределено;
	ПутиКДанным = СтрРазделить(ПараметрыВстраивания.ИмяТаблицы, ".");
	Если ПараметрыВстраивания.СлужебныеПараметры.ЭтоДокумент Тогда
		КоллекцияНаФорме = Форма.Объект[ПутиКДанным[2]];
	Иначе
		КоллекцияНаФорме = Форма;
		Для Счетчик = 1 По ПутиКДанным.ВГраница() Цикл
			КоллекцияНаФорме = КоллекцияНаФорме[ПутиКДанным[Счетчик]];
		КонецЦикла;
	КонецЕсли;
	Возврат КоллекцияНаФорме;
	
КонецФункции

Функция ДанныеПрограммногоОбъекта(ПараметрыДействия, СтрокаТабЧасти) Экспорт
	
	Форма                = ПараметрыДействия.Форма;
	ПараметрыВстраивания = ПараметрыДействия.ПараметрыВстраивания;
	
	ДанныеСтроки = ПараметрыВстраивания.СлужебныеПараметры.ДанныеСтроки;
	ШаблонСериализации = ПараметрыВстраивания.ШаблонСериализацииДанныхФормы;
	МассивИмен = СтрРазделить(ПараметрыВстраивания.ИмяТаблицы, ".");
	ИмяТЧ = МассивИмен[МассивИмен.ВГраница()];
	
	СериализоватьДанныеФормы(
		ДанныеСтроки,
		Форма,
		ШаблонСериализации,
		ПараметрыВстраивания.ПоляСвязиТабличныхЧастей,
		СтрокаТабЧасти,
		ИмяТЧ,
		"");
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ОбособленноПриИзменении(Обособленно, ВариантОбеспечения, ТипНоменклатуры) Экспорт
	
	НовыйВариантОбеспечения = ВариантОбеспечения;
	
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		Если Обособленно И ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется") Тогда
			
			НовыйВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
			
		ИначеЕсли Не Обособленно И ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению") Тогда
			
			НовыйВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйВариантОбеспечения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СериализоватьДанныеФормы(ДанныеСтроки, ОбъектДанных, ШаблонСериализации, ПоляСвязи, СтрокаТабЧасти, ИмяТЧ, ИмяСвойства)
	
	БыстрыйПоиск = Новый Соответствие();
	Если ИмяТЧ = ИмяСвойства Тогда
		
		ДанныеЗаполнения = СтрокаТабЧасти;
		
	ИначеЕсли ТипЗнч(ОбъектДанных) <> Тип("ДанныеФормыКоллекция") Тогда
		
		ДанныеЗаполнения = ОбъектДанных;
		
	Иначе
		
		ЭлементСоответствия = БыстрыйПоиск;
		Если СтрокаТабЧасти <> Неопределено Тогда
			
			Отбор = Новый Структура;
			
			Для Каждого КлючИЗначение Из ПоляСвязи[ИмяСвойства] Цикл
				Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
			Для Каждого Свойство Из ПоляСвязи[ИмяСвойства] Цикл
				Отбор[Свойство.Ключ] = СтрокаТабЧасти[Свойство.Значение];
				
				ТекЭлемент = ЭлементСоответствия.Получить(Отбор[Свойство.Ключ]);
				Если ТекЭлемент = Неопределено Тогда
					ЭлементСоответствия.Вставить(Отбор[Свойство.Ключ], Новый Соответствие());
					ТекЭлемент = ЭлементСоответствия.Получить(Отбор[Свойство.Ключ]);
				КонецЕсли;
				ЭлементСоответствия = ТекЭлемент;
				
			КонецЦикла;
		КонецЕсли;
		
		ДанныеЗаполнения = ЭлементСоответствия.Получить("Значение");
		Если СтрокаТабЧасти <> Неопределено Тогда
			Если ДанныеЗаполнения = Неопределено Тогда
				НайденныеСтроки = ОбъектДанных.НайтиСтроки(Отбор);
				ДанныеЗаполнения = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], Неопределено);
				ЭлементСоответствия.Вставить("Значение", ДанныеЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Свойство Из ШаблонСериализации Цикл
		
		Если ТипЗнч(Свойство.Значение) = Тип("Структура") Тогда
			
			СериализоватьДанныеФормы(
				ДанныеСтроки[Свойство.Ключ],
				ОбъектДанных[Свойство.Ключ],
				Свойство.Значение,
				ПоляСвязи,
				СтрокаТабЧасти,
				ИмяТЧ,
				Свойство.Ключ);
				
		ИначеЕсли ДанныеЗаполнения <> Неопределено Тогда
			ДанныеСтроки[Свойство.Ключ] = ДанныеЗаполнения[Свойство.Ключ];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
