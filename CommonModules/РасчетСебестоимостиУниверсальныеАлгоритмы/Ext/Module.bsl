///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Партионный учет (универсальные алгоритмы)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаспределениеМетодомУменьшаемогоОстатка

#Область ОписаниеАлгоритмаРаспределения
	
// Рассмотрим на примере задачи заполнения видов запасов в регистре себестоимости,
// когда учет себестоимости изначально велся без учета видов запасов, а с некоторого периода возникла необходимость
// учета себестоимости с детализацией до вида запасов номенклатуры.
// Остатки с пустыми видами запасов находится в регистре СебестоимостьТоваров.
// Остатки с заполненными видами запасов находится в регистре ТоварыОрганизаций.
// Необходимо остатки по каждой учетной позиции регистра себестоимости разделить по имеющимся видам запасов товаров организаций пропорционально количеству остатка.
// Количество полей в таблицах сократим – не влияющие на логику распределения поля не указываем.

// ИСХОДНЫЕ ДАННЫЕ ДЛЯ РАСПРЕДЕЛЕНИЯ
// 1. Таблица-источник (ТИ). Эти данные необходимо распределить (скорректировать).
// 2. Таблица-база распределения (ТБ). Эти данные используются для увеличения детализации данных из ТИ.
// 3. Описание полей ТИ и ББ:
// Поля связи – общие поля ТИ и ТБ, по которым будет выполняться сопоставление данных этих таблиц
// - Организация
// - АналитикаУчетаНоменклатуры
// Поле базиса ТИ – имя поля для хранения уменьшаемого остатка в ТИ
// - Количество
// Поле базиса ТБ – аналогичное поле в ТБ
// - Количество
// Ресурсы ТИ – суммовые поля ТИ, распределяемые пропорционально остатку
// - Стоимость
// - ДопРасходы
// Прочие поля ТИ – поля ТИ, непосредственно не участвующие в распределении, но необходимые в таблице-результате (ТР) распределения
// - Партия (также здесь будут АналитикаУчетаПартий, РазделУчета, ВидДеятельностиНДС…)
// - количество таких полей может быть любым;
// - важен порядок перечисления этих полей – будет использован для сортировки ТИ
// Прочие поля ТБ – аналогичные поля в ТБ
// - ВидЗапасов
// Правила заполнения прочих полей в результате распределения: указываем какое поле из какой таблицы брать (только для полей, присутствующих и в ТИ, и в ТБ)
// - всегда из ТИ
// - всегда из ТБ
// - из ТИ если заполнено, потом из ТБ
// - из ТБ если заполнено, потом из ТИ

// ОПИСАНИЕ АЛГОРИТМА РАСПРЕДЕЛЕНИЯ
// 1. Нумерация данных
// 1.1. Выберем все РАЗЛИЧНЫЕ значения полей связи ТИ и ТБ, упорядочим по <Поля связи> и пронумеруем.
// Получим таблицу ВТКлючиПолейСвязи

// 1.2. Упорядочим ТИ по <Поля связи> + <Прочие поля ТИ> и пронумеруем, при этом
// - добавим поля вида Цена<Имя ресурса> = < Имя ресурса > / (положительное количество) 
// - поле Количество приведем к положительному значению, а его изначальный знак (+1 или -1) поместим в поле ЗнакБазиса
// - наложим отбор Количество <> 0
// Получим таблицу ВТИсходнаяТИ

// 1.3. Упорядочим ТБ по <Поля связи> + <Прочие поля ТБ> и пронумеруем, при этом
// - поле Количество приведем к положительному значению
// - при этом наложим отбор Количество <> 0
// Получим таблицу ВТИсходнаяТБ

// 2. Распределение данных

// 3. Окончание распределения

// 3.1. Получаем общую таблицу результатов распределения
// - Объединяем все таблицы вида ВТРезультатСписания<Номер правила>
// Получаем ВТРезультатыСписания

// 3.2. Формируем окончательную таблицу сформированных корректировок 
// - соединяем ВТРезультатыСписания с ВТИсходнаяТИ и ВТИсходнаяТБ
// 	- количество берем из ВТРезультатыСписания и умножаем на ЗнакБазиса из ВТИсходнаяТИ
// 	- ресурсы берем из ВТРезультатыСписания (знак у них уже правильный)
// 	- поля связи берем из ВТИсходнаяТИ
// 	- прочие поля берем из ВТИсходнаяТИ или ВТИсходнаяТБ по указанным правилам
// 	- если корректируется регистр, то добавляем колонки Период, ВидДвижения = Приход, Регистратор, ТипЗаписи
// - если корректируется регистр, то добавляем в результат такие же записи (для сторно остатков), но
// 	- с отрицательным количеством и ресурсами
// 	- с прочими полями, взятыми только из ВТИсходнаяТИ (если поля в ВТИсходнаяТИ нет, то пишем в него пустое значение соответствующего тип)
// - если корректируется регистр, то колонки, которых нет в корректируемом регистре, отбрасываются.
// Получаем ВТРезультатРаспределения

// 3.3. Диагностируем ошибки распределения
// - вычитаем из ВТИсходнаяТИ таблицу ВТРезультатыСписания
// 	- если для ключа связи нет ни одной строки в ВТРезультатыСписания («нет данных в базе распределения»)
// 	- если есть строки, где Количество <> 0 («не хватает данных в базе распределения»)
// - вычитаем из ВТИсходнаяТБ таблицу ВТРезультатыСписания
// 	- если для ключа связи нет ни одной строки в ВТРезультатыСписания («нет данных в ТИ для распределения»)
// 	- если есть строки, где Количество <> 0 («не хватает данных в ТИ для распределения»)

// 3.4. Удаляем все оставшиеся ненужные таблицы, сформированные при расчете
// – оставляем только ВТРезультатРаспределения, ВТНераспределенныеДанныеИсточника, ВТНераспределенныеДанныеБазы

#КонецОбласти 

#Область ИнициализацияРаспределения

// Инициализирует основные параметры распределения.
// Обязательная.
//
// Параметры:
//  ИмяТаблицыИсточника - Строка - имя временной таблицы, содержащей данные для распределения.
//  ИмяТаблицыБазыРаспределения - Строка - имя временной таблицы, содержащей базу, по которой будут распределены данные из ИмяТаблицыИсточника.
// 	ПоляСвязи- Строка - перечень полей (через запятую), по которым данные таблицы ИмяТаблицыИсточника будут сопоставляться с данными таблицы ИмяТаблицыБазыРаспределения;
//		имена полей этих таблиц должны совпадать;
//		сопоставление выполняется по условию "ИмяТаблицыИсточника.ПолеСвязи1 = ИмяТаблицыБазыРаспределения.ПолеСвязи1 И ИмяТаблицыИсточника.ПолеСвязи2 = ИмяТаблицыБазыРаспределения.ПолеСвязи2 И ...".
//	УдалятьИсточникПослеРаспределения - Булево - определяет необходимость удаления таблицы ИмяТаблицыИсточника после окончания распределения.
//	УдалятьБазуПослеРаспределения - Булево - определяет необходимость удаления таблицы ИмяТаблицыБазыРаспределения после окончания распределения.
// Возвращаемое значение:
// 	Структура - Описание:
// * Шаблоны - Структура -:
// ** ПравилаВыбораПолей - Строка -
// ** ПоляБазыДополнение - Строка -
// ** ПоляБазыНеИменованные - Строка -
// ** ПоляБазыИменованные - Строка -
// ** ПоляИсточникаНеИменованные - Строка -
// ** ПоляИсточникаИменованные - Строка -
// ** ПоляСвязиСоединение - Строка -
// ** ПоляСвязиНеИменованные - Строка -
// ** ПоляСвязиИменованные - Строка -
// ** СоединениеСтрокИЛИ - Строка -
// ** СоединениеСтрокИ - Строка -
// ** РазделительПолей - Строка -
// * ПравилаЗаполненияПрочихПолей - Структура -
// * НеВключатьПоляБазы - Строка -
// * НеВключатьПоляИсточника - Строка -
// * ПрочиеПоляБазы - Строка -
// * ПрочиеПоляИсточника - Строка -
// * ПравилаРаспределения - Массив -
// * УдалятьБазуПослеРаспределения - Булево -
// * УдалятьИсточникПослеРаспределения - Булево -
//
Функция ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка(
			ИмяТаблицыИсточника, ИмяТаблицыБазыРаспределения, ПоляСвязи,
			УдалятьИсточникПослеРаспределения = Ложь, УдалятьБазуПослеРаспределения = Ложь) Экспорт
	
	ПараметрыРаспределения = Новый Структура;
	// Описание источников и приемников данных распределения
	ПараметрыРаспределения.Вставить("ИмяТаблицыИсточника", 				 ИмяТаблицыИсточника);
	ПараметрыРаспределения.Вставить("УдалятьИсточникПослеРаспределения", УдалятьИсточникПослеРаспределения);
	ПараметрыРаспределения.Вставить("ИмяТаблицыБазыРаспределения", 		 ИмяТаблицыБазыРаспределения);
	ПараметрыРаспределения.Вставить("УдалятьБазуПослеРаспределения", 	 УдалятьБазуПослеРаспределения);
	// Описание полей связи
	ПараметрыРаспределения.Вставить("ПоляСвязи",			ПоляСвязи);
	// Описание числовых полей
	ПараметрыРаспределения.Вставить("ПравилаРаспределения",	Новый Массив); // содержит структуры с полями РесурсыИсточника, ПолеБазисаИсточника, ПолеБазисаБазы
	// Описание прочих полей
	ПараметрыРаспределения.Вставить("ПрочиеПоляИсточника",	"");
	ПараметрыРаспределения.Вставить("ПрочиеПоляБазы",		"");
	// Описание заполнения полей
	ПараметрыРаспределения.Вставить("НеВключатьПоляИсточника", 		"");
	ПараметрыРаспределения.Вставить("НеВключатьПоляБазы", 			"");
	ПараметрыРаспределения.Вставить("ПравилаЗаполненияПрочихПолей",	Новый Структура);
	
	// Описание результирующих таблиц.
	ИнициализироватьТаблицыРезультатовРаспределения(ПараметрыРаспределения,
		"ВТРезультатРаспределения",
		"ВТНераспределенныеДанныеИсточника",
		"ВТНераспределенныеДанныеБазы");
	
	// Шаблоны полей запросов
	Шаблоны = Новый Структура;
	Шаблоны.Вставить("РазделительПолей", "," + Символы.ПС + Символы.Таб);
	Шаблоны.Вставить("СоединениеСтрокИ", Символы.ПС + Символы.Таб + "И ");
	Шаблоны.Вставить("СоединениеСтрокИЛИ", Символы.ПС + Символы.Таб + "ИЛИ ");
	
	ПоляСвязиИменованные   = "";
	ПоляСвязиНеИменованные = "";
	ПоляСвязиСоединение    = "";
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСвязи, ",", Истина, Истина) Цикл
		ДополнитьСтроку(ПоляСвязиИменованные,   "%1." + ИмяПоля + " КАК " + ИмяПоля,,,, Шаблоны.РазделительПолей);
		ДополнитьСтроку(ПоляСвязиНеИменованные, "%1." + ИмяПоля ,,,, Шаблоны.РазделительПолей);
		ДополнитьСтроку(ПоляСвязиСоединение, "%1." + ИмяПоля + " = %2." + ИмяПоля,,,, Шаблоны.СоединениеСтрокИ);
	КонецЦикла;
	
	Шаблоны.Вставить("ПоляСвязиИменованные",   	  ПоляСвязиИменованные);
	Шаблоны.Вставить("ПоляСвязиНеИменованные", 	  ПоляСвязиНеИменованные);
	Шаблоны.Вставить("ПоляСвязиСоединение",    	  ПоляСвязиСоединение);
	Шаблоны.Вставить("ПоляИсточникаИменованные",   "");
	Шаблоны.Вставить("ПоляИсточникаНеИменованные", "");
	Шаблоны.Вставить("ПоляБазыИменованные",   	  "");
	Шаблоны.Вставить("ПоляБазыНеИменованные", 	  "");
	Шаблоны.Вставить("ПоляБазыДополнение", 	 	  "");
	Шаблоны.Вставить("ПравилаВыбораПолей", 		  "");
	
	ПараметрыРаспределения.Вставить("Шаблоны", Шаблоны);
	
	Возврат ПараметрыРаспределения;
	
КонецФункции

// Инициализирует описание таблиц, в которые помещаются результаты распределения.
// Необязательная.
//
// Параметры:
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//	ИмяТаблицыРезультата - Строка - имя временной таблицы, в которую помещается результат распределения.
//	ИмяТаблицыНераспределенныхДанныхИсточника - Строка - имя временной таблицы, в которую помещается данные источника, не распределенные по базе;
//		если указана пустая строка, то таблица формироваться не будет.
//	ИмяТаблицыНераспределенныхДанныхБазы - Строка - имя временной таблицы, в которую помещается данные базы, для которых нет данных в источнике;
//		если указана пустая строка, то таблица формироваться не будет.
//
//	Возвращаемое значение:
//		Структура - параметры распределения.
//
Функция ИнициализироватьТаблицыРезультатовРаспределения(ПараметрыРаспределения,
			ИмяТаблицыРезультата,
			ИмяТаблицыНераспределенныхДанныхИсточника = "",
			ИмяТаблицыНераспределенныхДанныхБазы = "") Экспорт
	
	ПараметрыРаспределения.Вставить("ИмяТаблицыРезультата", 					 ИмяТаблицыРезультата);
	ПараметрыРаспределения.Вставить("ИмяТаблицыНераспределенныхДанныхИсточника", ИмяТаблицыНераспределенныхДанныхИсточника);
	ПараметрыРаспределения.Вставить("ИмяТаблицыНераспределенныхДанныхБазы", 	 ИмяТаблицыНераспределенныхДанныхБазы);
	
	Возврат ПараметрыРаспределения;
	
КонецФункции

// Инициализирует описание числовых полей таблиц, которые подлежат распределению.
// Обязательная. Возможен вызов несколько раз.
// Возможны ситуации, когда распределение разных ресурсов таблицы-источника необходимо выполнить по разным базисам.
// Например, ресурс Ресурс1 необходимо распределить по полю Базис1, а ресурс Ресурс2 - по полю Базис2.
// В этом случае необходимо вызывать процедуру два раза:
// ИнициализироватьЧисловыеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения, "Ресурс1", "Базис1", "Базис1");
// ИнициализироватьЧисловыеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения, "Ресурс2", "Базис2", "Базис2");
//
// Параметры:
//	ПараметрыРаспределения - см. РасчетСебестоимостиУниверсальныеАлгоритмы.ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка
//	РесурсыИсточника - Строка - перечень распределяемых числовых полей таблицы-источника (через запятую).
//	ПолеБазисаИсточника - Строка - имя поля базиса таблицы-источника, по которому необходимо выполнить распределение ресурсов.
//	ПолеБазисаБазы - Строка - имя поля базиса таблицы-базы, по которому необходимо выполнить распределение ресурсов; может не совпадать с ПолеБазисаИсточника.
//
Процедура ИнициализироватьЧисловыеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения,
			РесурсыИсточника = "", ПолеБазисаИсточника = "Количество", ПолеБазисаБазы = "Количество") Экспорт
			
	ПравилоРаспределения = Новый Структура;
	ПравилоРаспределения.Вставить("РесурсыИсточника",		РесурсыИсточника);
	ПравилоРаспределения.Вставить("ПолеБазисаИсточника",	ПолеБазисаИсточника);
	ПравилоРаспределения.Вставить("ПолеБазисаБазы",			ПолеБазисаБазы);
	
	// Шаблоны полей запросов
	ПравилоРаспределения.Вставить("Шаблоны",				Новый Структура);
	
	БазисИсточника 			  	 = "%1." + ПолеБазисаИсточника;
	БазисИсточникаИменованный 	 = "%1." + ПолеБазисаИсточника + " КАК " + ПолеБазисаИсточника;
	БазисБазы 			 	  	 = "%1." + ПолеБазисаБазы;
	БазисБазыИменованный 	     = "%1." + ПолеБазисаБазы + " КАК " + ПолеБазисаБазы;
	ОтборНенулевойБазисИсточника = БазисИсточника + " <> 0";
	ОтборНенулевойБазисБазы 	 = БазисБазы + " <> 0";
	БазисИсточникаРаспределенный = "СУММА(%1.Базис_Распределено) КАК " + ПолеБазисаИсточника;
	
	РасчетБазисаКСписанию =
		"ВЫБОР КОГДА %2." + ПолеБазисаБазы + " ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА %3." + ПолеБазисаИсточника + " < %2." + ПолеБазисаБазы + "
		|			ТОГДА %3." + ПолеБазисаИсточника + "
		|		ИНАЧЕ %2." + ПолеБазисаБазы + "
		|	КОНЕЦ КАК БазисКСписанию";
	
	РасчетЕстьСтрокаТБ = "ВЫБОР КОГДА %2." + ПолеБазисаБазы + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьСтрокаТБ";
	БазисКСписанию = "%1.БазисКСписанию КАК " + ПолеБазисаИсточника;
	НулевойБазисИсточника = "0 КАК " + ПолеБазисаИсточника;
	УменьшениеБазисаИсточника = "%1." + ПолеБазисаИсточника + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) КАК " + ПолеБазисаИсточника;
	УменьшениеБазисаБазы = "%1." + ПолеБазисаБазы + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) КАК " + ПолеБазисаБазы;
	ОтборУменьшениеБазисаИсточника = "%1." + ПолеБазисаИсточника + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) > 0 ";
	ОтборУменьшениеБазисаБазы = "%1." + ПолеБазисаБазы + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) > 0 ";
	
	БазисИсточникаПоложительный = "СУММА(ВЫБОР КОГДА %1." + ПолеБазисаИсточника + " < 0 ТОГДА -%1." + ПолеБазисаИсточника + " ИНАЧЕ %1." + ПолеБазисаИсточника + " КОНЕЦ)";
	БазисБазыПоложительный      = "СУММА(ВЫБОР КОГДА %1." + ПолеБазисаБазы + " < 0 ТОГДА -%1." + ПолеБазисаБазы + " ИНАЧЕ %1." + ПолеБазисаБазы + " КОНЕЦ)";
	
	СуммаБазисовИсточника = "СУММА(%1." + ПолеБазисаИсточника + ") КАК " + ПолеБазисаИсточника;
	СуммаБазисовБазы = "СУММА(%1." + ПолеБазисаБазы + ") КАК " + ПолеБазисаБазы;
	НенулеваяСуммаРаспределенныхБазисовБазы = "СУММА(%1." + ПолеБазисаБазы + ") <> 0";
	
	БазисИсточникаПоложительныйИменованный = БазисИсточникаПоложительный + " КАК " + ПолеБазисаИсточника;
	БазисБазыПоложительныйИменованный      = БазисБазыПоложительный + " КАК " + ПолеБазисаБазы;
	
	ЗнакБазисаИсточника 			 = "ВЫБОР КОГДА %1." + ПолеБазисаИсточника + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ КАК Знак" + ПолеБазисаИсточника;
	ЗнакБазисаИсточникаНеИменованный = "ВЫБОР КОГДА %1." + ПолеБазисаИсточника + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ";
	ЗнакБазисаБазы      			 = "ВЫБОР КОГДА " + ПолеБазисаБазы + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ КАК Знак" + ПолеБазисаБазы;
	ЗнакБазисаБазыНеИменованный		 = "ВЫБОР КОГДА " + ПолеБазисаБазы + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ";
	БазисИсточникаСИсходнымЗнаком 	 = "%1." + ПолеБазисаИсточника + " * ЕСТЬNULL(%3.Знак" + ПолеБазисаИсточника + ", 1) КАК " + ПолеБазисаИсточника;
	БазисБазыСИсходнымЗнаком 	 	 = "%1." + ПолеБазисаИсточника + " * ЕСТЬNULL(%2.Знак" + ПолеБазисаБазы + ", 1) КАК " + ПолеБазисаБазы;
	
	ОтборНенулеваяСуммаБазисовИсточника = БазисИсточникаПоложительный + " <> 0";
	ОтборНенулеваяСуммаБазисовБазы = БазисБазыПоложительный + " <> 0";
	
	РесурсыИменованные = "";
	РассчитанныеРесурсыИменованные = "";
	СуммыРесурсовИменованные = "";
	ЦеныРесурсовИменованные = "";
	ЦеныСуммРесурсовИменованные  = "";
	РесурсыКСписанию = "";
	НулевыеРесурсыИсточника = "";
	УменьшениеРесурсовИсточника = "";
	СуммаРесурсовИсточника = "";
	НенулеваяСуммаРаспределенныхРесурсовИсточника = "";
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РесурсыИсточника, ",", Истина, Истина) Цикл
		
		ДополнитьСтроку(РесурсыИменованные, "%1." + ИмяПоля + " КАК " + ИмяПоля);
		ДополнитьСтроку(РассчитанныеРесурсыИменованные, "%1.Базис_Распределено * ЕСТЬNULL(%2.Цена" + ИмяПоля + ", 0) КАК " + ИмяПоля);
		ДополнитьСтроку(СуммыРесурсовИменованные, "СУММА(%1." + ИмяПоля + ") КАК " + ИмяПоля);
		
		ДополнитьСтроку(ЦеныРесурсовИменованные,  "%1.Цена" + ИмяПоля + " КАК Цена" + ИмяПоля);
		ДополнитьСтроку(ЦеныСуммРесурсовИменованные,  "СУММА(%1." + ИмяПоля + ") / " + БазисИсточникаПоложительный + " КАК Цена" + ИмяПоля);
		
		ДополнитьСтроку(РесурсыКСписанию, "
			|	ВЫРАЗИТЬ(ВЫБОР КОГДА НЕ %1.ЕстьСтрокаТБ
			|			ТОГДА 0
			|		КОГДА %1.БазисКСписанию = %3." + ПолеБазисаИсточника + "
			|			ТОГДА %3." + ИмяПоля + " 
			|		ИНАЧЕ %1.БазисКСписанию * %3.Цена" + ИмяПоля + "
			|	КОНЕЦ КАК ЧИСЛО (31,2)) КАК " + ИмяПоля);
		
		ДополнитьСтроку(НулевыеРесурсыИсточника, "0 КАК " + ИмяПоля);
		ДополнитьСтроку(УменьшениеРесурсовИсточника, "%1." + ИмяПоля + " - ЕСТЬNULL(%4." + ИмяПоля + ", 0) КАК " + ИмяПоля);
		
		ДополнитьСтроку(СуммаРесурсовИсточника, "СУММА(%1." + ИмяПоля + ") КАК " + ИмяПоля);
		ДополнитьСтроку(НенулеваяСуммаРаспределенныхРесурсовИсточника, "СУММА(%1." + ИмяПоля + ") <> 0",,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ);
		
	КонецЦикла;
	
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточника", 						БазисИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточникаИменованный", 				БазисИсточникаИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточникаРаспределенный", 			БазисИсточникаРаспределенный);
	ПравилоРаспределения.Шаблоны.Вставить("БазисБазы", 								БазисБазы);
	ПравилоРаспределения.Шаблоны.Вставить("БазисБазыИменованный", 					БазисБазыИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулевойБазисИсточника", 			ОтборНенулевойБазисИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулевойБазисБазы", 				ОтборНенулевойБазисБазы);
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточникаПоложительныйИменованный", БазисИсточникаПоложительныйИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("БазисБазыПоложительныйИменованный", 		БазисБазыПоложительныйИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточника", 					ЗнакБазисаИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаБазы", 						ЗнакБазисаБазы);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточникаНеИменованный", 		ЗнакБазисаИсточникаНеИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаБазыНеИменованный", 			ЗнакБазисаБазыНеИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовИсточника", 	ОтборНенулеваяСуммаБазисовИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовБазы",			ОтборНенулеваяСуммаБазисовБазы);
	ПравилоРаспределения.Шаблоны.Вставить("РесурсыИменованные",						РесурсыИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("РассчитанныеРесурсыИменованные",			РассчитанныеРесурсыИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("СуммыРесурсовИменованные",				СуммыРесурсовИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("ЦеныРесурсовИменованные",				ЦеныРесурсовИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("ЦеныСуммРесурсовИменованные",			ЦеныСуммРесурсовИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("РесурсыКСписанию",						РесурсыКСписанию);
	ПравилоРаспределения.Шаблоны.Вставить("НенулеваяСуммаЧисловыхПолейИсточника",   НенулеваяСуммаРаспределенныхРесурсовИсточника);
	
	ПравилоРаспределения.Шаблоны.Вставить("РасчетБазисаКСписанию",					РасчетБазисаКСписанию);
	ПравилоРаспределения.Шаблоны.Вставить("РасчетЕстьСтрокаТБ",						РасчетЕстьСтрокаТБ);
	ПравилоРаспределения.Шаблоны.Вставить("БазисКСписанию",							БазисКСписанию);
	ПравилоРаспределения.Шаблоны.Вставить("НулевойБазисИсточника",					НулевойБазисИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("НулевыеРесурсыИсточника",				НулевыеРесурсыИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("УменьшениеБазисаИсточника",				УменьшениеБазисаИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("УменьшениеБазисаБазы",					УменьшениеБазисаБазы);
	ПравилоРаспределения.Шаблоны.Вставить("УменьшениеРесурсовИсточника",			УменьшениеРесурсовИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборУменьшениеБазисаИсточника",			ОтборУменьшениеБазисаИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборУменьшениеБазисаБазы",				ОтборУменьшениеБазисаБазы);
	
	Если ПараметрыРаспределения.ПравилаРаспределения.Количество() = 0 Тогда
		ПараметрыРаспределения.Шаблоны.Вставить("ВсеБазисыИсточника", 					  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ВсеРесурсыИсточника", 					  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточника", 						  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаИменованный", 			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаРаспределенный",			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазы", 							  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыИменованный", 				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаПоложительныйИменованный", 		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыПоложительныйИменованный", 	  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточника", 					  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазы", 						  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточникаНеИменованный", 			"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазыНеИменованный", 					"");
		ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовИсточника", 	  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовБазы", 		  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("РесурсыИменованные", 			  		  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("РассчитанныеРесурсыИменованные", 			  	"");
		ПараметрыРаспределения.Шаблоны.Вставить("СуммыРесурсовИменованные", 			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЦеныРесурсовИменованные", 			  	  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЦеныСуммРесурсовИменованные", 			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("НулевыеБазисыИсточников",				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("НулевыеРесурсыИсточников",				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаСИсходнымЗнаком",		  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыСИсходнымЗнаком",		  				"");
		ПараметрыРаспределения.Шаблоны.Вставить("СуммаЧисловыхПолейИсточника",		  		  	"");
		ПараметрыРаспределения.Шаблоны.Вставить("СуммаБазисовБазы",		  				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("НенулеваяСуммаРаспределенныхБазисовБазы",	   	"");
		
	КонецЕсли;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ВсеБазисыИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ВсеБазисыИсточника, ПолеБазисаИсточника,,,, ","));
	ПараметрыРаспределения.Шаблоны.Вставить("ВсеРесурсыИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ВсеРесурсыИсточника, РесурсыИсточника,,,, ","));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточника, БазисИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаИменованный, БазисИсточникаИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаРаспределенный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаРаспределенный, БазисИсточникаРаспределенный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазы, БазисБазы,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазыИменованный, БазисБазыИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаПоложительныйИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаПоложительныйИменованный, БазисИсточникаПоложительныйИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыПоложительныйИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазыПоложительныйИменованный, БазисБазыПоложительныйИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточника, ЗнакБазисаИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазы, ЗнакБазисаБазы,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточникаНеИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточникаНеИменованный, ЗнакБазисаИсточникаНеИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазыНеИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазыНеИменованный, ЗнакБазисаБазыНеИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовИсточника, ОтборНенулеваяСуммаБазисовИсточника,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовБазы, ОтборНенулеваяСуммаБазисовБазы,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	ПараметрыРаспределения.Шаблоны.Вставить("РесурсыИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.РесурсыИменованные, РесурсыИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("РассчитанныеРесурсыИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.РассчитанныеРесурсыИменованные, РассчитанныеРесурсыИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("СуммыРесурсовИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.СуммыРесурсовИменованные, СуммыРесурсовИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ЦеныРесурсовИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЦеныРесурсовИменованные, ЦеныРесурсовИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("ЦеныСуммРесурсовИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЦеныСуммРесурсовИменованные, ЦеныСуммРесурсовИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("НулевыеБазисыИсточников",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НулевыеБазисыИсточников, НулевойБазисИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("НулевыеРесурсыИсточников",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НулевыеРесурсыИсточников, НулевыеРесурсыИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаСИсходнымЗнаком",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаСИсходнымЗнаком, БазисИсточникаСИсходнымЗнаком,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыСИсходнымЗнаком",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазыСИсходнымЗнаком, БазисБазыСИсходнымЗнаком,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("СуммаЧисловыхПолейИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.СуммаЧисловыхПолейИсточника, СуммаБазисовИсточника, СуммаРесурсовИсточника,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("СуммаБазисовБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.СуммаБазисовБазы, СуммаБазисовБазы,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
	ПараметрыРаспределения.Шаблоны.Вставить("НенулеваяСуммаРаспределенныхБазисовБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НенулеваяСуммаРаспределенныхБазисовБазы, НенулеваяСуммаРаспределенныхБазисовБазы,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	
	ПараметрыРаспределения.ПравилаРаспределения.Добавить(ПравилоРаспределения);
	
	Для Каждого ТекущееПравило Из ПараметрыРаспределения.ПравилаРаспределения Цикл
		
		ДругиеНулевыеБазисы = "";
		ДругиеНулевыеРесурсы = "";
		
		Для Каждого ДругиеПравила Из ПараметрыРаспределения.ПравилаРаспределения Цикл
			
			Если ТекущееПравило = ДругиеПравила Тогда
				Продолжить;
			КонецЕсли;
			
			ДополнитьСтроку(ДругиеНулевыеБазисы, ДругиеПравила.Шаблоны.НулевойБазисИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
			ДополнитьСтроку(ДругиеНулевыеРесурсы, ДругиеПравила.Шаблоны.НулевыеРесурсыИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
			
		КонецЦикла;
		
		ТекущееПравило.Шаблоны.Вставить("ДругиеНулевыеБазисы",  ДругиеНулевыеБазисы);
		ТекущееПравило.Шаблоны.Вставить("ДругиеНулевыеРесурсы", ДругиеНулевыеРесурсы);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует описание прочих полей таблиц, которые необходимо включить в результат распределения.
// Необязательная.
// Прочие поля источника/базы, присутствующие в полях связи, будут исключены из списка прочих полей.
//
// Параметры:
//	ПараметрыРаспределения - см. РасчетСебестоимостиУниверсальныеАлгоритмы.ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка
//	ПрочиеПоляИсточника - Строка - перечень прочих полей таблицы-источника (через запятую);
//		по этим полям будет выполнено упорядочивание данных таблицы-источника перед распределением.
//	ПрочиеПоляБазы - Строка - перечень прочих полей таблицы-базы (через запятую);
//		по этим полям будет выполнено упорядочивание данных таблицы-базы перед распределением.
//	НеВключатьПоляИсточника - Строка - перечень полей (через запятую) таблицы-источника, которые необходимы для упорядочивания данных, но не нужны в результате распределения.
//	НеВключатьПоляБазы - Строка - перечень полей (через запятую) таблицы-базы, которые необходимы для упорядочивания данных, но не нужны в результате распределения.
//
Процедура ИнициализироватьПрочиеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения,
			ПрочиеПоляИсточника = "", ПрочиеПоляБазы = "", НеВключатьПоляИсточника = "", НеВключатьПоляБазы = "") Экспорт
	
	// Шаблоны полей запросов
	ПоляИсточника = "";
	ПоляБазы = "";
	ПоляИсточникаИменованные = "";
	ПоляИсточникаНеИменованные = "";
	СтруктураПоляСвязи = Новый Структура(ПараметрыРаспределения.ПоляСвязи);
	
	ИсключаемыеПоля = Новый Структура(НеВключатьПоляИсточника);
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочиеПоляИсточника, ",", Истина, Истина) Цикл
		
		Если ИсключаемыеПоля.Свойство(ИмяПоля) ИЛИ СтруктураПоляСвязи.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьСтроку(ПоляИсточника, ИмяПоля);
		ДополнитьСтроку(ПоляИсточникаИменованные,   "%1." + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
		ДополнитьСтроку(ПоляИсточникаНеИменованные, "%1." + ИмяПоля ,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
		
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(ИмяПоля, 1);
		
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляИсточникаИменованные",   ПоляИсточникаИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляИсточникаНеИменованные", ПоляИсточникаНеИменованные);
	
	ПоляБазыИменованные = "";
	ПоляБазыНеИменованные = "";
	ПоляБазыДополнение = "";
	
	ИсключаемыеПоля = Новый Структура(НеВключатьПоляБазы);
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочиеПоляБазы, ",", Истина, Истина) Цикл
		
		Если ИсключаемыеПоля.Свойство(ИмяПоля) ИЛИ СтруктураПоляСвязи.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьСтроку(ПоляБазы, ИмяПоля);
		ДополнитьСтроку(ПоляБазыИменованные,   "%1." + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
		ДополнитьСтроку(ПоляБазыНеИменованные, "%1." + ИмяПоля ,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
		
		Если НЕ ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Свойство(ИмяПоля) Тогда
			
			// Поля с таким именем нет в источнике - возьмем его из базы.
			ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(ИмяПоля, 2);
			
			ДополнитьСтроку(ПоляБазыДополнение, "&ПустоеЗначениеБазы_" + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
			
		Иначе
			
			// Поля, которые есть в источнике и в базе возьмем с приоритетом базы.
			ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(ИмяПоля, 4);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыИменованные",   ПоляБазыИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыНеИменованные", ПоляБазыНеИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыДополнение", 	 ПоляБазыДополнение);
	
	ПараметрыРаспределения.Вставить("ПрочиеПоляИсточника", 			 ПоляИсточника);
	ПараметрыРаспределения.Вставить("НеВключатьПоляИсточника", 		 НеВключатьПоляИсточника);
	ПараметрыРаспределения.Вставить("НеВключатьПоляБазы", 			 НеВключатьПоляБазы);
	ПараметрыРаспределения.Вставить("ПрочиеПоляБазы", 				 ПоляБазы);
	
	ИнициализироватьПравилаЗаполненияПрочихПолейРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения);
	
КонецПроцедуры

// Инициализирует правила заполнения прочих полей таблиц в результате распределения.
// Необязательная.
//
// Параметры:
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//	ПоляДляЗаполненияИзИсточника - Строка - перечень прочих полей таблицы-источника (через запятую), которые должны быть безусловно перенесены в результат распределения.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//	ПоляДляЗаполненияИзБазы - Строка - перечень прочих полей таблицы-базы (через запятую), которые должны быть безусловно перенесены в результат распределения.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//	ПоляСПриоритетомИсточника - Строка - перечень прочих полей таблицы-источника (через запятую), которые должны быть перенесены в результат распределения
//		в том случае, если значение поля в источнике заполнено; если значение поля в источнике не заполнено, то в результат будет перенесено значение поля из базы.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//	ПоляСПриоритетомБазы - Строка - перечень прочих полей таблицы-базы (через запятую), которые должны быть перенесены в результат распределения
//		в том случае, если значение поля в базе заполнено; если значение поля в базе не заполнено, то в результат будет перенесено значение поля из источника.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//
Процедура ИнициализироватьПравилаЗаполненияПрочихПолейРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения,
			ПоляДляЗаполненияИзИсточника = "", ПоляДляЗаполненияИзБазы = "",
			ПоляСПриоритетомИсточника = "", ПоляСПриоритетомБазы = "") Экспорт
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляДляЗаполненияИзИсточника) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 1);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляДляЗаполненияИзБазы) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 2);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляСПриоритетомИсточника) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 3);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляСПриоритетомБазы) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 4);
	КонецЦикла;
	
	// Шаблоны полей запросов
	ПравилаВыбораПолей = "";

	Для Каждого КлючИЗначение Из ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей Цикл
		
		ПрочееПоле = "";
		
		Если КлючИЗначение.Значение = 1 Тогда
			ПрочееПоле = "%3." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Значение = 2 Тогда
			ПрочееПоле = "%2." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Значение = 3 Тогда
			ПрочееПоле = "ВЫБОР КОГДА %3." + КлючИЗначение.Ключ + " = &ПустоеЗначениеИсточника_" + КлючИЗначение.Ключ + "
				|		ТОГДА %2." + КлючИЗначение.Ключ + " ИНАЧЕ %3." + КлючИЗначение.Ключ + "
				|	КОНЕЦ КАК " + КлючИЗначение.Ключ;
		Иначе
			ПрочееПоле = "ВЫБОР КОГДА %2." + КлючИЗначение.Ключ + " = &ПустоеЗначениеБазы_" + КлючИЗначение.Ключ + "
				|		ТОГДА %3." + КлючИЗначение.Ключ + " ИНАЧЕ %2." + КлючИЗначение.Ключ + "
				|	КОНЕЦ КАК " + КлючИЗначение.Ключ;
		КонецЕсли;
		
		ДополнитьСтроку(ПравилаВыбораПолей, ПрочееПоле,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей);
		
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПравилаВыбораПолей", ПравилаВыбораПолей);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапускРаспределения

// Выполняет распределение данных временных таблиц методом уменьшаемого остатка.
// В результате будут сформированы следующие временные таблицы:
//	ВТРезультатРаспределения - результат распределения;
//		содержит поля ПоляСвязи + (все РесурсыИсточника + ПолеБазисаИсточника) + (ПрочиеПоляИсточника без НеВключатьПоляИсточника)
//		также содержит служебные поля "КлючТИ" и "КлючТБ"
//	ВТНераспределенныеДанныеИсточника - данные из ИмяТаблицыИсточника, для которых не хватило данных в базе распределения;
//		содержит те же поля, что и ВТРезультатРаспределения за исключением служебных полей;
//		также содержит служебное поле ЕстьБаза с типом Булево:
//			- если равно Истина, то для данной записи источника была база, но количества в поле базиса таблицы-базы не хватило для полного распределения данных таблицы-источника;
//				числовые поля содержат нераспределенные остатки; прочие поля заполнены из таблицы-источника.
//			- если равно Ложь, то для данной записи источника не было базы распределения;
//				числовые поля содержат исходные значения из таблицы-источника; прочие поля заполнены из таблицы-источника.
//	ВТНераспределенныеДанныеБазы - данные из ИмяТаблицыБазыРаспределения, для которых не хватило данных в источнике.
//		содержит поля ПоляСвязи + (все ПолеБазисаБазы) + (ПрочиеПоляБазы без НеВключатьПоляБазы)
// Имена таблиц результатов можно переопределить в процедуре ИнициализироватьТаблицыРезультатовРаспределения().
//
// Также в ПараметрыРаспределения будет добавлен ключ РезультатыРаспределения с типом Структура, в которую будут добавлены следующие данные (Ключ - Значение):
//	КоличествоИтераций - общее количество итераций распределения
//	ВремяРасчета - общее время расчета в секундах
//	РазмерИсточника - количество записей в таблице ИмяТаблицыИсточника
//	РазмерБазы - количество записей в таблице ИмяТаблицыБазыРаспределения
//	РазмерРезультата - количество записей в таблице ВТРезультатРаспределения
//	РазмерНераспределенныхЗаписейИсточника - количество записей в таблице ВТНераспределенныеДанныеИсточника
//	РазмерНераспределенныхЗаписейБазы - количество записей в таблице ВТНераспределенныеДанныеБазы
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета, содержащий менеджер временных таблиц, содержащий таблицы ИмяТаблицыИсточника и ИмяТаблицыБазыРаспределения.
//	ПараметрыРаспределения - см. РасчетСебестоимостиУниверсальныеАлгоритмы.ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка
//
Процедура РаспределитьМетодомУменьшаемогоОстатка(ПараметрыРасчета, ПараметрыРаспределения) Экспорт
	
	МенеджерВременныхТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьМенеджерВТИзКонтейнера(ПараметрыРасчета);
	
	#Область ВспомогательныеДанные
	
	// Подготовим вспомогательные данные
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыРаспределения.Вставить("РезультатыРаспределения", Новый Структура);
	
	ПараметрыУниверсальныхМеханизмов = ИнициализироватьПараметрыИспользованияУниверсальныхМеханизмов(МенеджерВременныхТаблиц);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(
		МенеджерВременныхТаблиц,
		СоединитьСтроки(
			ПараметрыРаспределения.ИмяТаблицыРезультата,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы)); // результаты прошлого распределения
	
	СуществующиеВТ = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПоляИсточникаДляУпорядочивания = "";
	ПоляБазыДляУпорядочивания = "";
	
	// Получим типы пустых значений всех прочих полей источника и базы
	// Значения этих типов поместим в параметры запроса чтобы использовать их для определения заполнения полей при выборе значений полей по правилам
	Если ЗначениеЗаполнено(ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.ПоляИсточникаИменованные
		|ИЗ
		|	&ИмяТаблицыИсточника КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ПоляИсточникаИменованные", ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыИсточника", ПараметрыРаспределения.ИмяТаблицыИсточника);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т");
		
		Колонки = Запрос.Выполнить().Выгрузить().Колонки;
		
		Для Каждого ТекущаяКолонка Из Колонки Цикл
			
			ТипЗначенияКолонки = ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);
			
			Запрос.УстановитьПараметр(
				"ПустоеЗначениеИсточника_" + ТекущаяКолонка.Имя,
				ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
			
			ДополнитьСтроку(
				ПоляИсточникаДляУпорядочивания,
				ТекущаяКолонка.Имя + ?(ЭтоОписаниеТиповДокументов(ТипЗначенияКолонки), ".МоментВремени", ""));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.ПоляБазыИменованные
		|ИЗ
		|	&ИмяТаблицыБазыРаспределения КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ПоляБазыИменованные", ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыБазыРаспределения", ПараметрыРаспределения.ИмяТаблицыБазыРаспределения);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т");
		
		Колонки = Запрос.Выполнить().Выгрузить().Колонки;
		
		Для Каждого ТекущаяКолонка Из Колонки Цикл
			
			ТипЗначенияКолонки = ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);
			
			Запрос.УстановитьПараметр(
				"ПустоеЗначениеБазы_" + ТекущаяКолонка.Имя,
				ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
			
			ДополнитьСтроку(
				ПоляБазыДляУпорядочивания,
				ТекущаяКолонка.Имя + ?(ЭтоОписаниеТиповДокументов(ТипЗначенияКолонки), ".МоментВремени", ""));
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ПодготовкаДанных
	
	// 1.1
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ПоляСвязи
	|ПОМЕСТИТЬ ВТВсеПоляСвязи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.ПоляСвязи
	|	ИЗ
	|		&ИмяТаблицыИсточника КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.ПоляСвязи
	|	ИЗ
	|		&ИмяТаблицыБазыРаспределения КАК Т) КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыИсточника", 		  ПараметрыРаспределения.ИмяТаблицыИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыБазыРаспределения", ПараметрыРаспределения.ИмяТаблицыБазыРаспределения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ПоляСвязи",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, "Т"));
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	ПараметрыНумерации = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		ПараметрыРаспределения.ПоляСвязи, // упорядочивание
		"КлючСвязи"); // номер строки
		
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыУниверсальныхМеханизмов,
		ПараметрыНумерации,
		"ВТВсеПоляСвязи",
		"ВТКлючиПолейСвязи");
	
	// 1.2
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ключи.КлючСвязи КАК КлючСвязи,
	|	&ВсеПоляИсточника
	|ПОМЕСТИТЬ ВТИсходнаяТИБезНумерации
	|ИЗ
	|	ИмяТаблицыИсточника КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКлючиПолейСвязи КАК Ключи
	|	ПО &ПоляСвязиСоединение
	|СГРУППИРОВАТЬ ПО
	|	Ключи.КлючСвязи,
	|	Т.ПоляГруппировки
	|	,&ОтборНенулеваяСуммаБазисовИсточника";
	
	ЧисловыеПоля = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.БазисИсточникаПоложительныйИменованный,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточника,
		ПараметрыРаспределения.Шаблоны.СуммыРесурсовИменованные,
		ПараметрыРаспределения.Шаблоны.ЦеныСуммРесурсовИменованные,,
		ПараметрыРаспределения.Шаблоны.РазделительПолей);
	
	ВсеПоля = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные,
		ЧисловыеПоля,,,
		ПараметрыРаспределения.Шаблоны.РазделительПолей);
		
	ПоляГруппировки = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиНеИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляИсточникаНеИменованные,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточникаНеИменованный,,,
		ПараметрыРаспределения.Шаблоны.РазделительПолей);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыИсточника", 				  ПараметрыРаспределения.ИмяТаблицыИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВсеПоляИсточника",    				  ВсеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиСоединение", 				  ПараметрыРаспределения.Шаблоны.ПоляСвязиСоединение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ПоляГруппировки", 	  				  ПоляГруппировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ОтборНенулеваяСуммаБазисовИсточника",
		"ИМЕЮЩИЕ" + Символы.ПС + ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовИсточника);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "Ключи");
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	ПараметрыНумерации = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		СоединитьСтроки(ПараметрыРаспределения.ПоляСвязи, ПоляИсточникаДляУпорядочивания), // упорядочивание
		"КлючТИ", // колонка номера
		"КлючТИ"); // индекс
		
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыУниверсальныхМеханизмов,
		ПараметрыНумерации,
		"ВТИсходнаяТИБезНумерации",
		"ВТИсходнаяТИ");
	
	// 1.3
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ключи.КлючСвязи КАК КлючСвязи,
	|	&ВсеПоляБазы
	|ПОМЕСТИТЬ ВТИсходнаяТББезНумерации
	|ИЗ
	|	ИмяТаблицыБазыРаспределения КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКлючиПолейСвязи КАК Ключи
	|	ПО &ПоляСвязиСоединение
	|СГРУППИРОВАТЬ ПО
	|	Ключи.КлючСвязи,
	|	Т.ПоляГруппировки
	|	,&ОтборНенулеваяСуммаБазисовБазы";
	
	ВсеПоля = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные,
		ПараметрыРаспределения.Шаблоны.БазисБазыПоложительныйИменованный,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазы,,
		ПараметрыРаспределения.Шаблоны.РазделительПолей);
	
	ПоляГруппировки = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиНеИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляБазыНеИменованные,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазыНеИменованный,,,
		ПараметрыРаспределения.Шаблоны.РазделительПолей);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыБазыРаспределения", 	 ПараметрыРаспределения.ИмяТаблицыБазыРаспределения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВсеПоляБазы",    				 ВсеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязиСоединение", 			 ПараметрыРаспределения.Шаблоны.ПоляСвязиСоединение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.ПоляГруппировки", 	  			 ПоляГруппировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ОтборНенулеваяСуммаБазисовБазы",
		"ИМЕЮЩИЕ" + Символы.ПС + ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовБазы);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "Ключи");
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	ПараметрыНумерации = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		СоединитьСтроки(ПараметрыРаспределения.ПоляСвязи, ПоляБазыДляУпорядочивания), // упорядочивание
		"КлючТБ", // колонка номера
		"КлючТБ"); // индекс
		
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыУниверсальныхМеханизмов,
		ПараметрыНумерации,
		"ВТИсходнаяТББезНумерации",
		"ВТИсходнаяТБ");
		
	// Уничтожим ненужные ВТ
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,
		"ВТВсеПоляСвязи, ВТИсходнаяТИБезНумерации, ВТИсходнаяТББезНумерации");
	
	#КонецОбласти
	
	#Область Распределение_Базисы
	
	ИменаТаблицРезультатов = "";
	НомерПравила = 0;
	
	Для Каждого ПравилоРаспределения Из ПараметрыРаспределения.ПравилаРаспределения Цикл // по базисам распределения
		
		НомерПравила = НомерПравила + 1;
		
		РассчитатьПолеТаблицыНарастающимИтогом(
			ПараметрыРасчета,
			Запрос,
			"ВТИсходнаяТИ",
			"ВТБазисыИсточникаНарастающимИтогом",
			"КлючТИ",
			ПравилоРаспределения.ПолеБазисаИсточника);
			
		РассчитатьПолеТаблицыНарастающимИтогом(
			ПараметрыРасчета,
			Запрос,
			"ВТИсходнаяТБ",
			"ВТБазисыБазыНарастающимИтогом",
			"КлючТБ",
			ПравилоРаспределения.ПолеБазисаБазы);
			
		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРаспределениеПоБазисам");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.КлючСвязи КАК КлючСвязи,
		|	МАКСИМУМ(Т.КлючТИ) КАК КлючТИ,
		|	МАКСИМУМ(Т.КлючТБ) КАК КлючТБ,
		|	Т.Базис_Итог КАК Базис_Итог
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.КлючСвязи КАК КлючСвязи,
		|		Т.КлючТИ КАК КлючТИ,
		|		-1 КАК КлючТБ,
		|		Т.Базис_Итог
		|	ИЗ
		|		ВТБазисыИсточникаНарастающимИтогом КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Т.КлючСвязи КАК КлючСвязи,
		|		-1 КАК КлючТИ,
		|		Т.КлючТБ КАК КлючТБ,
		|		Т.Базис_Итог
		|	ИЗ
		|		ВТБазисыБазыНарастающимИтогом КАК Т) КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.КлючСвязи,
		|	Т.Базис_Итог
		|УПОРЯДОЧИТЬ ПО
		|	Т.КлючСвязи,
		|	Т.Базис_Итог УБЫВ";
			
		ТаблицаБазисов = Запрос.Выполнить().Выгрузить();
		
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,
			"ВТБазисыИсточникаНарастающимИтогом, ВТБазисыБазыНарастающимИтогом");
		
		КлючСвязи = Неопределено;
		КлючТИ = -1;
		КлючТБ = -1;
		
		Для Каждого ТекущаяСтрока Из ТаблицаБазисов Цикл
			
			Если КлючСвязи <> ТекущаяСтрока.КлючСвязи Тогда
				
				КлючСвязи = ТекущаяСтрока.КлючСвязи;
				КлючТИ = ТекущаяСтрока.КлючТИ;
				КлючТБ = ТекущаяСтрока.КлючТБ;

			Иначе
				
				Если ТекущаяСтрока.КлючТИ = -1 Тогда
					ТекущаяСтрока.КлючТИ = КлючТИ;
				Иначе
					КлючТИ = ТекущаяСтрока.КлючТИ;
				КонецЕсли;
				
				Если ТекущаяСтрока.КлючТБ = -1 Тогда
					ТекущаяСтрока.КлючТБ = КлючТБ;
				Иначе
					КлючТБ = ТекущаяСтрока.КлючТБ;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаБазисов.Сортировать("КлючСвязи, Базис_Итог");
		
		ТаблицаБазисов.Колонки.Добавить("Базис_Распределено", ТаблицаБазисов.Колонки.Базис_Итог.ТипЗначения);
		
		КлючСвязи = Неопределено;
		Базис_Итог = 0;
		
		Для Каждого ТекущаяСтрока Из ТаблицаБазисов Цикл
			
			Если КлючСвязи <> ТекущаяСтрока.КлючСвязи Тогда
				КлючСвязи = ТекущаяСтрока.КлючСвязи;
				ТекущаяСтрока.Базис_Распределено = ТекущаяСтрока.Базис_Итог;
			Иначе
				ТекущаяСтрока.Базис_Распределено = ТекущаяСтрока.Базис_Итог - Базис_Итог;
			КонецЕсли;
			
			Базис_Итог = ТекущаяСтрока.Базис_Итог; // итог предыдущей строки для распределения следующей строки
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаБазисов", ТаблицаБазисов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.КлючСвязи,
		|	Т.КлючТИ,
		|	Т.КлючТБ,
		|	Т.Базис_Итог,
		|	Т.Базис_Распределено
		|ПОМЕСТИТЬ ВТРаспределениеПоБазисам
		|ИЗ
		|	&ТаблицаБазисов КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючТИ";
			
		Запрос.Выполнить();
		
		Запрос.Параметры.Удалить("ТаблицаБазисов");
		ТаблицаБазисов = Неопределено;
		
		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		Если ПравилоРаспределения.РесурсыИсточника = "" Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.КлючТИ,
			|	Т.КлючТБ,
			|	&БазисИсточникаРаспределенный
			|ПОМЕСТИТЬ ВТРезультатыСписанияПромежуточная
			|ИЗ
			|	ВТРаспределениеПоБазисам КАК Т
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючТИ,
			|	Т.КлючТБ
			|ИНДЕКСИРОВАТЬ ПО
			|	Т.КлючТИ
			|";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.КлючСвязи,
			|	Т.КлючТИ,
			|	Т.КлючТБ,
			|	Т.Базис_Распределено,
			|	Т.РассчитанныеРесурсыИменованные
			|ПОМЕСТИТЬ ВТРезультатыСписанияПредварительная
			|ИЗ
			|	ВТРаспределениеПоБазисам КАК Т
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходнаяТИ КАК Источники
			|		ПО Т.КлючТИ = Источники.КлючТИ
			|ИНДЕКСИРОВАТЬ ПО
			|	Т.КлючТИ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.КлючТИ,
			|	&СуммыРесурсовИменованные
			|ПОМЕСТИТЬ ВТОтклоненияРаспределения
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.КлючТИ,
			|		&РесурсыИменованныеОтрицательные
			|	ИЗ
			|		ВТРезультатыСписанияПредварительная КАК Т
			|	ГДЕ
			|		Т.КлючТИ <> -1
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.КлючТИ,
			|		&РесурсыИменованные
			|	ИЗ
			|		ВТИсходнаяТИ КАК Т) КАК Т
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючТИ
			|	,&НенулеваяСуммаЧисловыхПолейИсточника
			|ИНДЕКСИРОВАТЬ ПО
			|	Т.КлючТИ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.КлючТИ,
			|	МАКСИМУМ(Т.Базис_Распределено) КАК Базис_Распределено
			|ПОМЕСТИТЬ ВТСписаниеОтклоненийКоличества
			|ИЗ
			|	ВТРезультатыСписанияПредварительная КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтклоненияРаспределения КАК Отклонения
			|		ПО Т.КлючТИ = Отклонения.КлючТИ
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючТИ
			|ИНДЕКСИРОВАТЬ ПО
			|	Т.КлючТИ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.КлючТИ,
			|	МИНИМУМ(Т.КлючТБ) КАК КлючТБ
			|ПОМЕСТИТЬ ВТСписаниеОтклоненийКлючиТБ
			|ИЗ
			|	ВТРезультатыСписанияПредварительная КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписаниеОтклоненийКоличества КАК Отклонения
			|		ПО Т.КлючТИ = Отклонения.КлючТИ
			|		И Т.Базис_Распределено = Отклонения.Базис_Распределено
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючТИ
			|ИНДЕКСИРОВАТЬ ПО
			|	Т.КлючТИ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.КлючТИ,
			|	Т.КлючТБ,
			|	&БазисИсточникаРаспределенный,
			|	&СуммыРесурсовИменованные
			|ПОМЕСТИТЬ ВТРезультатыСписанияПромежуточная
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.КлючТИ,
			|		Т.КлючТБ,
			|		Т.Базис_Распределено,
			|		&РесурсыИменованные
			|	ИЗ
			|		ВТРезультатыСписанияПредварительная КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.КлючТИ,
			|		Отклонения.КлючТБ,
			|		0,
			|		&РесурсыИменованные
			|	ИЗ
			|		ВТОтклоненияРаспределения КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписаниеОтклоненийКлючиТБ КАК Отклонения
			|			ПО Т.КлючТИ = Отклонения.КлючТИ
			|	) КАК Т
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючТИ,
			|	Т.КлючТБ
			|ИНДЕКСИРОВАТЬ ПО
			|	Т.КлючТИ
			|";
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.РассчитанныеРесурсыИменованные", ПравилоРаспределения.Шаблоны.РассчитанныеРесурсыИменованные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммыРесурсовИменованные",
			СоединитьСтроки(ПравилоРаспределения.Шаблоны.СуммыРесурсовИменованные,
				ПравилоРаспределения.Шаблоны.ДругиеНулевыеБазисы,
				ПравилоРаспределения.Шаблоны.ДругиеНулевыеРесурсы));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&НенулеваяСуммаЧисловыхПолейИсточника",
			"ИМЕЮЩИЕ" + Символы.ПС + ПравилоРаспределения.Шаблоны.НенулеваяСуммаЧисловыхПолейИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БазисИсточникаРаспределенный", ПравилоРаспределения.Шаблоны.БазисИсточникаРаспределенный);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыИменованныеОтрицательные",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПравилоРаспределения.Шаблоны.РесурсыИменованные, "-Т"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыИменованные", ПравилоРаспределения.Шаблоны.РесурсыИменованные);
				
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "Источники");
		
		ИмяТаблицыРезультата = "ВТРезультатыСписания" + ?(ПараметрыРаспределения.ПравилаРаспределения.Количество() = 1, "", ЧислоВСтрокуБезПробелов(НомерПравила));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультатыСписанияПромежуточная", ИмяТаблицыРезультата);
		ДополнитьСтроку(ИменаТаблицРезультатов, ИмяТаблицыРезультата);
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
		
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,
			"ВТРаспределениеПоБазисам, ВТОтклоненияРаспределения, ВТРезультатыСписанияПредварительная,
			|ВТОтклоненияРаспределения, ВТСписаниеОтклоненийКоличества, ВТСписаниеОтклоненийКлючиТБ");
		
	КонецЦикла; // базисы распределения
	
	#КонецОбласти
	
	#Область РезультатыРаспределения
	
	// 3.1
	Если НЕ ПустаяСтрока(ИменаТаблицРезультатов) Тогда
		
		Если СтрНайти(ИменаТаблицРезультатов, ",") > 0 Тогда
			
			РасчетСебестоимостиПрикладныеАлгоритмы.ОбъединитьВременныеТаблицы(
				МенеджерВременныхТаблиц,
				ИменаТаблицРезультатов,
				"ВТРезультатыСписания",
				СоединитьСтроки("КлючТИ, КлючТБ", ПараметрыРаспределения.Шаблоны.ВсеБазисыИсточника, ПараметрыРаспределения.Шаблоны.ВсеРесурсыИсточника),
				СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ВсеБазисыИсточника, ПараметрыРаспределения.Шаблоны.ВсеРесурсыИсточника),
				"КлючТИ",
				Истина);
				
		КонецЕсли;
			
		Запрос.Текст = "";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК КлючТИ,
		|	0 КАК КлючТБ,
		|	&ПоляВТРезультатСписания
		|ПОМЕСТИТЬ ВТРезультатыСписания";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВТРезультатСписания",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НулевыеБазисыИсточников, ПараметрыРаспределения.Шаблоны.НулевыеРесурсыИсточников,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
		
	КонецЕсли;
	
	// 3.2
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.КлючТИ,
	|	Т.КлючТБ,
	|	&ПоляВТРезультатСписания
	|ПОМЕСТИТЬ ИмяТаблицыРезультата
	|ИЗ
	|	ВТРезультатыСписания КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходнаяТИ КАК СтрокиТИ
	|		ПО Т.КлючТИ = СтрокиТИ.КлючТИ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходнаяТБ КАК СтрокиТБ
	|		ПО Т.КлючТБ = СтрокиТБ.КлючТБ
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыРезультата", ПараметрыРаспределения.ИмяТаблицыРезультата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВТРезультатСписания",
		СоединитьСтроки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, "СтрокиТИ"),
			ПараметрыРаспределения.Шаблоны.ПравилаВыбораПолей,
			ПараметрыРаспределения.Шаблоны.БазисИсточникаИменованный,
			ПараметрыРаспределения.Шаблоны.РесурсыИменованные,,
			ПараметрыРаспределения.Шаблоны.РазделительПолей));
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "СтрокиТБ", "СтрокиТИ");
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	// 3.3
	Запрос.Текст = "";
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника) Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	&ПоляИсточникаНечисловые,
		|	&ПоляОстатковИсточникаЧисловые
		|ПОМЕСТИТЬ ИмяТаблицыНераспределенныхДанныхИсточника
		|ИЗ
		|	ВТИсходнаяТИ КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатыСписания КАК Остатки
		|		ПО Т.КлючТИ = Остатки.КлючТИ
		|		И Остатки.КлючТБ = -1
		|";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы) Тогда
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	&ПоляБазыНечисловые,
		|	&БазисБазыСИсходнымЗнаком
		|ПОМЕСТИТЬ ИмяТаблицыНераспределенныхДанныхБазы
		|ИЗ
		|	ВТИсходнаяТБ КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатыСписания КАК Остатки
		|		ПО Остатки.КлючТИ = -1
		|		И Т.КлючТБ = Остатки.КлючТБ
		|";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыНераспределенныхДанныхИсточника", ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыНераспределенныхДанныхБазы", ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляИсточникаНечисловые",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные, ПараметрыРаспределения.Шаблоны.ПоляБазыДополнение,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОстатковИсточникаЧисловые",
			СоединитьСтроки(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.БазисИсточникаСИсходнымЗнаком, "Остатки", "", "Т"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.РесурсыИменованные, "Остатки")
				,,,,
				ПараметрыРаспределения.Шаблоны.РазделительПолей));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БазисБазыСИсходнымЗнаком",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.БазисБазыСИсходнымЗнаком, "Остатки", "Т"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляБазыНечисловые",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительПолей));
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "СтрокиТБ", "СтрокиТИ");
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
		
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВТОстаткиЧисловыхПолейИсточника");
		
	КонецЕсли;
	
	// 3.4
	// Уничтожим ненужные ВТ
	ИменаТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(
		МенеджерВременныхТаблиц,
		СоединитьСтроки(
			СуществующиеВТ,
			ПараметрыРаспределения.ИмяТаблицыРезультата,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы)); // результаты прошлого распределения
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц);
	
	// Заполним справочные показатели результата распределения.
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("ВремяРасчета",
		(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерИсточника",
		РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыИсточника));
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерБазы",
		РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыБазыРаспределения));
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерРезультата",
		РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыРезультата));
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника) Тогда
		ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерНераспределенныхЗаписейИсточника",
			РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы) Тогда
		ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерНераспределенныхЗаписейБазы",
			РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы));
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СтроковыеФункции

Функция СоединитьСтроки(Строка1 = "", Строка2 = "", Строка3 = "", Строка4 = "", Строка5 = "", Разделитель = ", ") Экспорт
	
	МассивСтрок = Новый Массив;
	
	Если НЕ ПустаяСтрока(Строка1) Тогда
		МассивСтрок.Добавить(Строка1);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка2) Тогда
		МассивСтрок.Добавить(Строка2);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка3) Тогда
		МассивСтрок.Добавить(Строка3);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка4) Тогда
		МассивСтрок.Добавить(Строка4);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка5) Тогда
		МассивСтрок.Добавить(Строка5);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Разделитель);;
	
КонецФункции

Процедура ДополнитьСтроку(СтрокаПриемник = "", Строка2 = "", Строка3 = "", Строка4 = "", Строка5 = "", Разделитель = ", ") Экспорт
	
	СтрокаПриемник = СоединитьСтроки(
		СтрокаПриемник,
		Строка2,
		Строка3,
		Строка4,
		Строка5,
		Разделитель);
	
КонецПроцедуры

Функция ЧислоВСтрокуБезПробелов(ЧисловоеЗначение) Экспорт
	
	Возврат Формат(ЧисловоеЗначение, "ЧГ=");
	
КонецФункции

Функция УдалитьЭлементыИзСтрокиШаблона(СтрокаШаблона, УдаляемыеЭлементы) Экспорт
	
	МассивСтрок 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаШаблона, ",", Истина, Истина);
	МассивУдаляемых = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УдаляемыеЭлементы, ",", Истина, Истина);
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
		
		ИсходныйЭлемент = МассивСтрок.Найти(УдаляемыйЭлемент);
		
		Если ИсходныйЭлемент <> Неопределено Тогда
			МассивСтрок.Удалить(ИсходныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, ", ");
	
КонецФункции

#КонецОбласти

#Область ОперацииСТипамиЗначений

Функция ЭтоОписаниеТиповДокументов(ТипПоля)
	
	ОписаниеТиповПоля 		   = ОписанияТиповБезТипаNull(ТипПоля);
	ТипыДокументов 			   = ОписаниеТиповДокументов();
	ТипСодержитТолькоДокументы = (ОписаниеТиповПоля.Типы().Количество() > 0);
	
	Для Каждого ТекущийТип Из ОписаниеТиповПоля.Типы() Цикл
		
		Если НЕ ТипыДокументов.СодержитТип(ТекущийТип) Тогда
			ТипСодержитТолькоДокументы = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипСодержитТолькоДокументы;
	
КонецФункции

Функция ОписанияТиповБезТипаNull(ИсходныеТипы) Экспорт
	
	Если ТипЗнч(ИсходныеТипы) = Тип("Тип") ИЛИ ТипЗнч(ИсходныеТипы) = Тип("Строка") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ИсходныеТипы);
		Описание = Новый ОписаниеТипов(МассивТипов);
		
	ИначеЕсли ТипЗнч(ИсходныеТипы) = Тип("Массив") Тогда
		
		Описание = Новый ОписаниеТипов(ИсходныеТипы);
		
	Иначе // это ОписаниеТипов
		
		Описание = ИсходныеТипы;
		
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(Описание,, "NULL");
	
КонецФункции

// Возвращает описание типов всех документов с учетом документов из расширений конфигурации.
//
// Возвращаемое значение:
//	ОписаниеТипов - описание типов всех документов
//
Функция ОписаниеТиповДокументов() Экспорт
	
	// В платформе в результате, возвращаемом методом Документы.ТипВсеСсылки() не содержатся типы документов из расширений.
	// Планируется поддержать типы документов из расширений в версии Платформы 8.3.20
	
	МассивТипов = Новый Массив;
	
	Для Каждого МетаДокумент Из Метаданные.Документы Цикл
		МассивТипов.Добавить(Тип("ДокументСсылка." + МетаДокумент.Имя));
	КонецЦикла;
	
	ТипыДокументов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ТипыДокументов;
	
КонецФункции

// Возвращает строковое представление пустого значения указанного типа для запроса.
//
// Параметры:
//	ОписаниеТипаЗначения - ОписаниеТипов -
//
// Возвращаемое значение:
//	Строка - 
//
Функция ПредставлениеПустогоЗначенияТипаДляЗапроса(ОписаниеТипаЗначения) Экспорт
	
	ОписаниеТипаСкорректированный = ОписанияТиповБезТипаNull(ОписаниеТипаЗначения);
	
	Результат = "НЕОПРЕДЕЛЕНО";
	
	Если ОписаниеТипаСкорректированный.Типы().Количество() = 1 Тогда
		
		ТипЗначения = ОписаниеТипаСкорректированный.Типы()[0];
		
		Если ТипЗначения = Тип("Булево") Тогда
			Результат = "ЛОЖЬ";
		ИначеЕсли ТипЗначения = Тип("Дата") Тогда
			Результат = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда
			Результат = """""";
		ИначеЕсли ТипЗначения = Тип("Число") Тогда
			Результат = "0";
		ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления")
		 ИЛИ ТипЗначения = Тип("УникальныйИдентификатор")
		 ИЛИ ТипЗначения = Тип("Тип") Тогда
			Результат = "НЕОПРЕДЕЛЕНО";
		Иначе // ссылочный тип
			
			Если Метаданные.НайтиПоТипу(ТипЗначения) <> Неопределено Тогда
				Результат = "ЗНАЧЕНИЕ(" + ОписаниеТипаСкорректированный.ПривестиЗначение(Неопределено).Метаданные().ПолноеИмя() + ".ПустаяСсылка)";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает полное имя объекта метаданных по его типу.
//
// Параметры:
//	ТипОбъекта - Тип - тип объекта метаданных
//
// Возвращаемое значение:
//	Строка - полное имя объекта метаданных
//
Функция ИмяОбъектаМетаданныхПоТипу(ТипОбъекта) Экспорт
	
	МетаОбъект = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если МетаОбъект = Неопределено Тогда
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Возврат МетаОбъект.ПолноеИмя();
	
КонецФункции

// Возвращает полное имя объекта метаданных, соответствующего типу значения статьи расходов.
//
// Параметры:
//	Статья - ПланВидовХарактеристикСсылка.СтатьиРасходов - статья расходов
//
// Возвращаемое значение:
//	Строка - полное имя объекта метаданных
//
Функция ПредставлениеТипаЗначенияСтатьи(Статья) Экспорт
	
	ТипАналитики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "ТипЗначения");
	Возврат ИмяОбъектаМетаданныхПоТипу(ТипАналитики.Типы()[0]);
	
КонецФункции

#КонецОбласти

#Область КолонкиТаблиц

// Возвращает строку, содержащего имена всех колонок временной таблицы.
//
// Параметры:
//	КонтейнерМенеджераВТ - Структура - Структура, содержащая в себе менеджер временных таблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
// Возвращаемое значение:
//	Строка - список имен колонок через запятую
//
Функция ПолучитьИменаКолонокВременнойТаблицыСтрокой(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	Таблица = РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, 0);
	Колонки = Таблица.Колонки;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + Колонка.Имя;
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

// Преобразует таблицу значений в табличный документ.
// Параметры:
//	Таблица - ТаблицаЗначений -
//	ДатыВФорматеМесяцГод - Булево - преобразовывать даты в формат "Месяц Год"
//
// Возвращаемое значение:
//	ТабличныйДокумент -
Функция ТаблицуЗначенийВТабличныйДокумент(Таблица, ДатыВФорматеМесяцГод = Истина) Экспорт
	
	ВыгрузкаТаблицы = Новый ТабличныйДокумент; // преобразованная в mxl таблица значений
	
	НомерСтроки  = 1;
	НомерКолонки = 0;
	
	// Сформируем шапку табличного документа - выведем имена колонок таблицы значений
	Для Каждого ТекКолонка Из Таблица.Колонки Цикл
		
		НомерКолонки = НомерКолонки + 1;
		
		Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		
		Область.Текст 		  = ТекКолонка.Имя;
		Область.ШиринаКолонки = ТекКолонка.Ширина;
		Область.Шрифт 		  = Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение; 
		Область.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
	КонецЦикла;
	
	// Выведем строки таблицы значений
	Для Каждого ТекСтр Из Таблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		
		Для Каждого ТекКолонка Из Таблица.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			
			Область = ВыгрузкаТаблицы.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Если ДатыВФорматеМесяцГод И ТипЗнч(ТекСтр[ТекКолонка.Имя]) = Тип("Дата") Тогда
				Область.Текст = ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(ТекСтр[ТекКолонка.Имя]);
			Иначе
				Область.Текст = ТекСтр[ТекКолонка.Имя];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузкаТаблицы.ФиксацияСверху = 1;
	ВыгрузкаТаблицы.ФиксацияСлева  = 1;
	
	Возврат ВыгрузкаТаблицы;
	
КонецФункции

#КонецОбласти

#Область РаботаСМетаданными

// Проверяет, является ли указанный объект метаданных независимым регистром сведений.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных - проверяемый объект метаданных
//
// Возвращаемое значение:
//	Булево - результат проверки
//
Функция ЭтоНезависимыйРегистрСведений(МетаданныеРегистра) Экспорт
	
	Результат = Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра)
		И МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, является ли указанный объект метаданных периодическим регистром сведений.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных - проверяемый объект метаданных
//
// Возвращаемое значение:
//	Булево - результат проверки
//
Функция ЭтоПериодическийРегистрСведений(МетаданныеРегистра) Экспорт
	
	Результат = Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра)
		И МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросами

// Выполнить запрос с замером.
// 
// Параметры:
//  Запрос - Запрос - Запрос
//  ИмяСобытияЖР - Строка - Имя события журнала регистрации
// 
// Возвращаемое значение:
//  Массив, РезультатЗапроса, ВыборкаИзРезультатаЗапроса, Неопределено - Выполнить запрос с замером
Функция ВыполнитьЗапросСЗамером(Запрос, ИмяСобытияЖР) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РезультатВыполненияЗапроса", "");
	
	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Результаты = РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,, Истина);
	
	ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполнения) / 1000;
	
	ПараметрыРасчета.РезультатВыполненияЗапроса = 
		НСтр("ru='Общее время'") + ": " + РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ВремяВыполнения) + Символы.ПС
		+ ПараметрыРасчета.РезультатВыполненияЗапроса;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖР,
		УровеньЖурналаРегистрации.Информация,,,
		ПараметрыРасчета.РезультатВыполненияЗапроса);
		
	Возврат Результаты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Временная, до переноса в этот модуль алгоритмов модуля РасчетСебестоимостиПрикладныеАлгоритмы:
//		- ЗаполнитьНомераСтрокВременнойТаблицы
Функция ИнициализироватьПараметрыИспользованияУниверсальныхМеханизмов(МенеджерВременныхТаблиц)
	
	Параметры = Новый Структура;
	Параметры.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УстановитьТехнологическиеПараметрыРасчета(Параметры);
	
	Возврат Параметры;
	
КонецФункции

Процедура РассчитатьПолеТаблицыНарастающимИтогом(ПараметрыРасчета, Запрос, ИмяВТИсходной, ИмяВТРезультата, ПолеКлючаЗаписи, ПолеБазиса)
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ИмяВТРезультата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.КлючСвязи,
	|	Т.ПолеКлючаЗаписи,
	|	Т.ПолеБазиса
	|ИЗ
	|	ИмяВТИсходной КАК Т
	|ГДЕ
	|	Т.ПолеБазиса <> 0
	|УПОРЯДОЧИТЬ ПО
	|	КлючСвязи,
	|	ПолеБазиса УБЫВ,
	|	ПолеКлючаЗаписи";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолеКлючаЗаписи", ПолеКлючаЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолеБазиса", 	  ПолеБазиса);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВТИсходной",   ИмяВТИсходной);
	
	ТаблицаИсходная = Запрос.Выполнить().Выгрузить();
	ТаблицаИсходная.Колонки.Добавить("Базис_Итог", ТаблицаИсходная.Колонки[ПолеБазиса].ТипЗначения);
	
	КлючСвязи  = Неопределено;
	Базис_Итог = 0;
	
	Для Каждого ТекущаяСтрока Из ТаблицаИсходная Цикл
		
		Если КлючСвязи <> ТекущаяСтрока.КлючСвязи Тогда
			КлючСвязи  = ТекущаяСтрока.КлючСвязи;
			Базис_Итог = 0;
		КонецЕсли;
		
		Базис_Итог = Базис_Итог + ТекущаяСтрока[ПолеБазиса];
		ТекущаяСтрока.Базис_Итог = Базис_Итог;
		
	КонецЦикла;
	
	ТаблицаИсходная.Колонки.Удалить(ПолеБазиса);
	
	Запрос.УстановитьПараметр("ТаблицаИсходная", ТаблицаИсходная);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.КлючСвязи,
	|	Т.ПолеКлючаЗаписи,
	|	Т.Базис_Итог
	|ПОМЕСТИТЬ ИмяВТРезультата
	|ИЗ
	|	&ТаблицаИсходная КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолеКлючаЗаписи", ПолеКлючаЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВТРезультата", ИмяВТРезультата);
	
	Запрос.Выполнить();

	Запрос.Параметры.Удалить("ТаблицаИсходная");
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

#КонецОбласти
