#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийОбъекта

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Возврат;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация
	Если Не Объект.ЭтоГруппа Тогда
		Если Не ПустаяСтрока(Объект.КорреспондирующийСчет) Тогда
			Если ПустаяСтрока(СтрЗаменить(Объект.КорреспондирующийСчет, ".", "")) Тогда
				Объект.КорреспондирующийСчет = "";
			ИначеЕсли Прав(СокрЛП(Объект.КорреспондирующийСчет), 1) = "." Тогда
				Объект.КорреспондирующийСчет = Лев(СокрЛП(Объект.КорреспондирующийСчет), СтрДлина(СокрЛП(Объект.КорреспондирующийСчет)) - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	//++ Локализация
	Возврат;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область МетодыМодуляМенеджера

// Регистрирует данные для обработчика обновления.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	//++ Локализация


	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Вызывается из соответствующего обработчика формы плана видов характеристик
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация
	ЗаполнитьСписокВыбораКорСчета(Форма);
	УправлениеЭлементамиФормы(Форма);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяЭлемента - Строка - Имя элемента формы
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриИзмененииРеквизита(ИмяЭлемента, Форма) Экспорт
	//++ Локализация


	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяКоманды - Строка - Имя команды
// 	ЭтаФорма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ВыполнитьКоманду(ИмяКоманды, ЭтаФорма) Экспорт
	//++ Локализация
	Возврат;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов


#КонецОбласти

#Область НастройкаСчетовРеглУчета

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ЗаполнитьСписокВыбораКорСчета(Форма)

	СписокВыбора = Форма.Элементы.КорреспондирующийСчет.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("91.01", НСтр("ru='Прочие доходы (91.01)'"));

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура УправлениеЭлементамиФормы(Форма) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- Локализация
