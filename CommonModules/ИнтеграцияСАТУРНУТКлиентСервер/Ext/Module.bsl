#Область ПрограммныйИнтерфейс

#Область НакладнаяСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыНакладнаяСАТУРН(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",             НСтр("ru = 'Внутреннее потребление'"),               "ИспользоватьВнутреннееПотребление");	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВыкупТоваровХранителем",            НСтр("ru = 'Выкуп товаров хранителем'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "КорректировкаПриобретения",         НСтр("ru = 'Корректировка приобретения'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтгрузкаТоваровСХранения",          НСтр("ru = 'Отгрузку товаров с хранения'"),          "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхПродажах",           НСтр("ru = 'Отчет о розничных продажах'"),           "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровХранителю",          НСтр("ru = 'Передачу товаров'"),                     "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи,ИспользоватьКомиссиюПриПродажах" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПоступлениеТоваровОтХранителя",     НСтр("ru = 'Поступление товаров от хранителя'"),     "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПоступлениеТоваровНаСклад",         НСтр("ru = 'Поступление товаров на склад'"),         "ИспользоватьТоварыВПутиОтПоставщиков,ИспользоватьНеотфактурованныеПоставки");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров услуг'"));
	
	
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - ФормаКлиентскогоПриложения - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандНакладнаяСАТУРН(Форма, Команды) Экспорт
	
	Операция = Форма.Объект.Операция;
	Входящая = Не Форма.ГрузоотправительСопоставленСОрганизацией;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если ИмяМетаданных = "ПриобретениеТоваровУслуг"
			Или ИмяМетаданных = "ВозвратТоваровОтКлиента"
			Или ИмяМетаданных = "КорректировкаПриобретения"
			Или ИмяМетаданных = "ПоступлениеТоваровНаСклад"
			Или ИмяМетаданных = "ПоступлениеТоваровОтХранителя" Тогда
			Элемент.Видимость = Входящая И Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка");
		ИначеЕсли ИмяМетаданных = "РеализацияТоваровУслуг"
			Или ИмяМетаданных = "ВозвратТоваровПоставщику" Тогда
			Элемент.Видимость = 
				(Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспорт")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля"));
		ИначеЕсли ИмяМетаданных = "ОтчетОРозничныхПродажах" Тогда
			Элемент.Видимость = Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля");
		ИначеЕсли ИмяМетаданных = "ПередачаТоваровМеждуОрганизациями"
			Или ИмяМетаданных = "ВозвратТоваровМеждуОрганизациями"
			Или ИмяМетаданных = "ПеремещениеТоваров"
			Или ИмяМетаданных = "ОтгрузкаТоваровСХранения"
			Или ИмяМетаданных = "ВыкупТоваровХранителем"
			Или ИмяМетаданных = "ПередачаТоваровХранителю"
			
			
		Тогда
			Элемент.Видимость = Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка");
		ИначеЕсли ИмяМетаданных = "ВнутреннееПотребление"
			
			
			
		Тогда
			Элемент.Видимость = Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство");
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область АктИнвентаризацииСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыАктИнвентаризацииСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ОприходованиеИзлишковТоваров", НСтр("ru = 'Оприходование излишков товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СписаниеНедостачТоваров",      НСтр("ru = 'Списание недостач товаров'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОприходованиеИзлишковТоваров",    НСтр("ru = 'Оприходование излишков товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СписаниеНедостачТоваров",         НСтр("ru = 'Списание недостач товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваров",              НСтр("ru = 'Пересортицу товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПорчаТоваров",                    НСтр("ru = 'Порчу товаров'"),                   "ИспользоватьКачествоТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПрочееОприходованиеТоваров",      НСтр("ru = 'Прочее оприходование товаров'"),    "ИспользоватьПрочееОприходованиеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОприходованиеИзлишковТоваровУХранителя", НСтр("ru = 'Оприходование излишков товаров у хранителя/комиссионера'"), "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОСписанииТоваровУХранителя",        НСтр("ru = 'Отчет о списании товаров у хранителя'"), "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваровУХранителя",           НСтр("ru = 'Пересортицу товаров у хранителя'"), "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПорчаТоваровУХранителя",                 НСтр("ru = 'Порчу товаров у хранителя'"),       "ИспользоватьПорчуТоваровУХранителей,ИспользоватьКачествоТоваров");
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - ФормаКлиентскогоПриложения - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандАктИнвентаризацииСАТУРН(Форма, Команды) Экспорт
	
	ЕстьРасход = Ложь;
	ЕстьПриход = Ложь;
	Для Каждого СтрокаТЧ Из Форма.Объект.Товары Цикл
		Если СтрокаТЧ.КоличествоУпаковок<0 Тогда 
			ЕстьРасход = Истина;
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок>0 Тогда 
			ЕстьПриход = Истина;
		КонецЕсли;
	КонецЦикла;
	Пересорт = ЕстьПриход И ЕстьРасход;
	Приход = ЕстьПриход И Не Пересорт;
	Расход = ЕстьРасход И Не Пересорт;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Если ИмяМетаданных = "ОприходованиеИзлишковТоваров"
			Или ИмяМетаданных = "ПрочееОприходованиеТоваров"
			Или ИмяМетаданных = "ОприходованиеИзлишковТоваровУХранителя" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Приход;
		ИначеЕсли ИмяМетаданных = "СписаниеНедостачТоваров"
			Или ИмяМетаданных = "ОтчетОСписанииТоваровУХранителя" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Расход;
		ИначеЕсли ИмяМетаданных = "ПересортицаТоваров"
			Или ИмяМетаданных = "ПорчаТоваров"
			Или ИмяМетаданных = "ПересортицаТоваровУХранителя"
			Или ИмяМетаданных = "ПорчаТоваровУХранителя" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Пересорт;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область АктПримененияСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыАктПримененияСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотребление", НСтр("ru = 'Внутреннее потребление'"),    "ИспользоватьВнутреннееПотребление");
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг", НСтр("ru = 'Реализацию товаров услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",  НСтр("ru = 'Внутреннее потребление'"),    "ИспользоватьВнутреннееПотребление");
	
	
КонецПроцедуры

#КонецОбласти

#Область ИмпортПродукцииСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыИмпортПродукцииСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперацияСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПроизводственнаяОперацияСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотребление", НСтр("ru = 'Внутреннее потребление'"), "ИспользоватьВнутреннееПотребление");
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление", НСтр("ru = 'Внутреннее потребление'"),   "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",         НСтр("ru = 'Сборку товаров'"),           "ИспользоватьСборкуРазборку");
	
	
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПрочееОприходованиеТоваров", НСтр("ru = 'Прочее оприходование товаров'"), "ИспользоватьПрочееОприходованиеТоваров");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти