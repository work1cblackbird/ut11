
#Область СлужебныйПрограммныйИнтерфейс

// Метод Connect Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Булево.
//
Функция Соединиться(ИДУстройства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаОфлайнОбмена.WS)
	|	И ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторСервисОборудования";
	
	Запрос.УстановитьПараметр("ИдентификаторСервисОборудования", ИДУстройства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Метод GetSettings Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьНастройки(ИДУстройства) Экспорт
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
	
	НастройкиККМ = МенеджерОфлайнОборудованияКлиентСервер.НастройкиККМ();
	ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиККМ);
	
	ТекстСообщения = ОфлайнОборудование1СККМВызовСервера.ТекстXMLНастроек(НастройкиККМ, ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
	
	МенеджерОфлайнОборудованияВызовСервера.ОповеститьОбУдачнойВыгрузке(ОфлайнОборудование, Новый Структура("Настройки", Истина));
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetPriceList Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьПрайсЛист(ИДУстройства) Экспорт
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
	
	ПрайсЛистККМ = МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ();
	ЗаполнитьПрайсЛист(ОфлайнОборудование, ПрайсЛистККМ, Ложь);
	
	ТекстСообщения = ОфлайнОборудование1СККМВызовСервера.ТекстXMLПрайсЛиста(ПрайсЛистККМ, ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
	
	МенеджерОфлайнОборудованияВызовСервера.ОповеститьОбУдачнойВыгрузке(ОфлайнОборудование, Новый Структура("ПрайсЛист", Истина));
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetDocs Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьДокументы(ИДУстройства, ТипДокумента) Экспорт
	
	Если ТипДокумента = "Order" Тогда
		
		ЗаказыККМ = МенеджерОфлайнОборудованияКлиентСервер.ЗаказыККМ();
		
		ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
		ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
		
		ЗаполнитьЗаказы(ОфлайнОборудование, ЗаказыККМ);
		
		ТекстСообщения = ОфлайнОборудование1СККМВызовСервера.ТекстXMLЗаказов(ЗаказыККМ, ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
		
		МенеджерОфлайнОборудованияВызовСервера.ОповеститьОбУдачнойВыгрузке(ОфлайнОборудование, Новый Структура("Заказы", Истина));
		
		Возврат ТекстСообщения;
		
	КонецЕсли;
	
КонецФункции

// Метод GetGood Web-сервиса EquipmentService
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьТовар(ИДУстройства, Штрихкод) Экспорт
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
	
	ПрайсЛистККМ = МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ();
	ЗаполнитьПрайсЛистПоШтрихкоду(ОфлайнОборудование, ПрайсЛистККМ, Штрихкод);
	
	ТекстСообщения = ОфлайнОборудование1СККМВызовСервера.ТекстXMLПрайсЛиста(ПрайсЛистККМ, ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод PreparePriceList Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьИдентификаторПередачиПрайсЛиста(ИДУстройства, ПолныйПрайсЛист = Ложь) Экспорт
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	
	ИдентификаторПередачи = РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.ПолучитьНеотправленныйИдентификатор(ОфлайнОборудование);
	
	Если ИдентификаторПередачи = Неопределено Тогда
		ИдентификаторПередачи = Строка(Новый УникальныйИдентификатор);
		ЗапуститьФормированиеОчередиСообщенийОбмена(ОфлайнОборудование, ИдентификаторПередачи, ПолныйПрайсЛист);
	КонецЕсли;
	
	Возврат ИдентификаторПередачи;
	
КонецФункции

// Метод GetPriceListPackage Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьПакетПрайсЛиста(ИДУстройства, ИдентификаторПередачи, Рестарт) Экспорт
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
	
	СтруктураОтвета = ПолучитьОтветПриВыгрузкеПакетаПрайсЛиста();
	
	СтруктураСообщения = РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.ПолучитьСообщениеИзОчереди(
		ОфлайнОборудование,
		ИдентификаторПередачи,
		Рестарт);
	
	Если НЕ СтруктураСообщения = Неопределено И СтруктураСообщения.Ошибка Тогда
		
		ВызватьИсключение СтруктураСообщения.ОписаниеОшибки;
		
	КонецЕсли;
	
	Если СтруктураСообщения = Неопределено Тогда
		
		СтруктураОтвета.Успешно = Ложь; // Пакет еще не готов
		
	Иначе
		
		ПометитьСообщениеОбменаВОчередиКакОтправленное(СтруктураСообщения);
		СтруктураОтвета.Успешно  = Истина;
		СтруктураОтвета.ПакетПрайсЛиста = СтруктураСообщения.ДанныеПакета.Получить();
		СтруктураОтвета.НомерПакета = СтруктураСообщения.ПорядковыйНомер;
		СтруктураОтвета.ПакетовВсего = СтруктураСообщения.ПакетовВсего;
		
		Если СтруктураСообщения.ПорядковыйНомер = 1 Тогда
			
			МенеджерОфлайнОборудованияВызовСервера.ОповеститьОбУдачнойВыгрузке(
				ОфлайнОборудование,
				Новый Структура("ПрайсЛист", Истина));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщенияОтветаПолученияПакетаПрайсЛиста(
		СтруктураОтвета,
		ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод PostDoc Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ЗагрузитьДокумент(ИДУстройства, ТипДокумента, XMLТекст) Экспорт
	
	СтруктураОтвета = ПолучитьОтветПриЗагрузке();
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
	ВерсияФорматаОбмена = ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	Если ТипДокумента = "SaleReports" ИЛИ ТипДокумента = "SalesReport" ИЛИ ТипДокумента = "SaleReport" Тогда
		ЗагрузитьОтчетыОПродажах(ОфлайнОборудование, XMLТекст, ВерсияФорматаОбмена, Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ТипДокумента = "AlcoholTareOpening" Тогда
		ЗагрузитьВскрытияАлкогольнойТары(ОфлайнОборудование, XMLТекст, ВерсияФорматаОбмена, Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ТипДокумента = "PriceCheckerReport" Тогда
		ЗагрузитьОтчетПрайсЧекера(ОфлайнОборудование, XMLТекст, ВерсияФорматаОбмена, Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	Если Отказ Тогда
		
		СтруктураОтвета.Успешно  = Ложь;
		СтруктураОтвета.Описание = СообщениеОбОшибке;
		
	Иначе
		СтруктураОтвета.Успешно  = Истина;
		СтруктураОтвета.Описание = НСтр("ru = 'Данные успешно загружены'");
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщенияОтветаЗагрузкиДокумента(СтруктураОтвета, ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetVersion Web-сервиса EquipmentService.
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьВерсиюФорматаОбмена(ИДУстройства) Экспорт
	
	ОфлайнОборудование = ЭкземплярОборудованияПоИдентификатору(ИДУстройства);
	
	Если ОфлайнОборудование = Неопределено Тогда
		
		Возврат 0;
	Иначе
		
		ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
		
		Возврат ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает пустую структуру записи ответа PostDocsResponse
// Для заполнения XDTO-пакета EquipmentService.
//
Функция ПолучитьОтветПриЗагрузке()
	
	СтруктураОтветаПриЗагрузке = Новый Структура;
	
	СтруктураОтветаПриЗагрузке.Вставить("Успешно", Ложь);
	СтруктураОтветаПриЗагрузке.Вставить("Описание", "");
	
	Возврат СтруктураОтветаПриЗагрузке;
	
КонецФункции

Процедура СформироватьОчередьСообщенийОбмена(ОфлайнОборудование, ИдентификаторПередачи, ПолныйПрайсЛист) Экспорт
	
	Попытка
		
		РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.ОчиститьОчередьСообщений(ОфлайнОборудование);
		
		ДанныеУстройства = МенеджерОфлайнОборудованияВызовСервера.ДанныеУстройства(ОфлайнОборудование);
		
		ПрайсЛистККМ = МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ();
		ЗаполнитьПрайсЛист(ОфлайнОборудование, ПрайсЛистККМ, ПолныйПрайсЛист);
		
		КоличествоЭлементовВПакете = ПолучитьКоличествоЭлементовВПакете(ОфлайнОборудование);
		
		МассивПакетов = ОфлайнОборудование1СККМВызовСервера.ПрайсЛистПоПакетам(ПрайсЛистККМ, КоличествоЭлементовВПакете);
		
		Если МассивПакетов.Количество() = 0 Тогда
			
			XMLТекстСообщения = ОфлайнОборудование1СККМВызовСервера.ТекстXMLПрайсЛиста(
				ПрайсЛистККМ,
				ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
			
			РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.ДобавитьПакетДанныхВОчередь(
				ОфлайнОборудование,
				ИдентификаторПередачи,
				XMLТекстСообщения);
			
		Иначе
			
			ВсегоПакетов = МассивПакетов.Количество();
			
			Для Каждого Пакет Из МассивПакетов Цикл
				
				XMLТекстСообщения = ОфлайнОборудование1СККМВызовСервера.ТекстXMLПрайсЛиста(
					Пакет,
					ДанныеУстройства.Параметры.ВерсияФорматаОбмена);
				
				РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.ДобавитьПакетДанныхВОчередь(
					ОфлайнОборудование, ИдентификаторПередачи, XMLТекстСообщения, Пакет.НомерПакета, ВсегоПакетов);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Обмен с офлайн-оборудованием'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()), 
			ТекстОшибки);
		РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.ДобавитьПакетОшибкуДанныхВОчередь(
			ОфлайнОборудование,
			ИдентификаторПередачи,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьКоличествоЭлементовВПакете(ОфлайнОборудование)
	
	ПараметрыУстройства = Справочники.ОфлайнОборудование.ПараметрыУстройства(ОфлайнОборудование);
	
	КоличествоЭлементовВПакете = 0;
	
	Если ПараметрыУстройства.Свойство("КоличествоЭлементовВПакете") Тогда
		
		КоличествоЭлементовВПакете = ПараметрыУстройства.КоличествоЭлементовВПакете;
	КонецЕсли;
	
	Возврат КоличествоЭлементовВПакете;
	
КонецФункции

Процедура ЗапуститьФормированиеОчередиСообщенийОбмена(ОфлайнОборудование, ИдентификаторПередачи, ПолныйПрайсЛист)
	
	ЭтоФайловаяБаза = ОбщегоНазначенияБПО.ИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяБаза Тогда
		
		// В файловом варианте сообщение готовится в момент вызова с клиента
		СформироватьОчередьСообщенийОбмена(ОфлайнОборудование, ИдентификаторПередачи, ПолныйПрайсЛист);
		
	Иначе
		// В клиент-серверном варианте сообщения готовятся в фоновом задании.
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ОфлайнОборудование);
		МассивПараметров.Добавить(ИдентификаторПередачи); 
		МассивПараметров.Добавить(ПолныйПрайсЛист);
		
		ИмяФункции = "МенеджерОфлайнОборудованияWebСервис.СформироватьОчередьСообщенийОбмена";
		
		ФоновыеЗадания.Выполнить(
			ИмяФункции,
			МассивПараметров,
			ИдентификаторПередачи,
			ОфлайнОборудование);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭкземплярОборудованияПоИдентификатору(ИДУстройства)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаОфлайнОбмена.WS)
	|	И ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторСервисОборудования";
	
	Запрос.УстановитьПараметр("ИдентификаторСервисОборудования", ИДУстройства);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПометитьСообщениеОбменаВОчередиКакОтправленное(СтруктураСообщения)
	
	МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийОбменаСОфлайнОборудованием.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОфлайнОборудование = СтруктураСообщения.ОфлайнОборудование;
	МенеджерЗаписи.ИдентификаторПередачи = СтруктураСообщения.ИдентификаторПередачи;
	
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураСообщения);
	
	МенеджерЗаписи.Отправлен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция СформироватьТекстСообщенияОтветаЗагрузкиДокумента(СтруктураОтвета, ВерсияФорматаОбмена)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен = ОфлайнОборудование1СККМВызовСервера.URIПространстваИмен(ВерсияФорматаОбмена);
	
	Если ВерсияФорматаОбмена >= 1006 Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "PostDocsResponse");
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "Response");
	КонецЕсли;
	
	ОбъектОбмена = ПолучитьОбъектОбмена(ФабрикаXDTO, ТипОбъекта);
	ОбъектОбмена.Успешно = СтруктураОтвета.Успешно;
	
	Если ЗначениеЗаполнено(СтруктураОтвета.Описание) Тогда
		
		ОбъектОбмена.Описание = СтруктураОтвета.Описание;
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СформироватьТекстСообщенияОтветаПолученияПакетаПрайсЛиста(СтруктураОтвета, ВерсияФорматаОбмена)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен = ОфлайнОборудование1СККМВызовСервера.URIПространстваИмен(ВерсияФорматаОбмена);
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "PriceListPackage");
	
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектОбмена.Успешно = СтруктураОтвета.Успешно;
	
	Если ЗначениеЗаполнено(СтруктураОтвета.ПакетПрайсЛиста) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтруктураОтвета.ПакетПрайсЛиста);
		ТипОбъектаПрайсЛист   = ФабрикаXDTO.Тип(URIИмен, "PriceList");
		ДанныеПрайсЛист = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаПрайсЛист);
		ЧтениеXML.Закрыть();
		ОбъектОбмена.ПрайсЛист = ДанныеПрайсЛист;
	КонецЕсли;
	
	Если НЕ ОбъектОбмена.Свойства().Получить("НомерПакета") = Неопределено Тогда //@NON-NLS-1
		ОбъектОбмена.НомерПакета = СтруктураОтвета.НомерПакета;
	КонецЕсли;
	
	Если НЕ ОбъектОбмена.Свойства().Получить("ПакетовВсего") = Неопределено Тогда //@NON-NLS-1
		ОбъектОбмена.ПакетовВсего = СтруктураОтвета.ПакетовВсего;
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ЗаполнитьНастройкиККМ(ОфлайнОборудование, Настройки)
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеНастроек(ОфлайнОборудование, Настройки);
	
	ПараметрыУстройства = Справочники.ОфлайнОборудование.ПараметрыУстройства(ОфлайнОборудование);
	
	Если ПараметрыУстройства.Свойство("ПараметрыДрайвераККМ") И НЕ ПараметрыУстройства.ПараметрыДрайвераККМ = Неопределено Тогда
		
		Настройки.Вставить("ПараметрыДрайвераККМ", ПараметрыУстройства.ПараметрыДрайвераККМ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛист(ОфлайнОборудование, ПрайсЛистККМ, ПолныйПрайсЛист)
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеПрайсЛиста(ОфлайнОборудование, ПрайсЛистККМ, ПолныйПрайсЛист);
	ПрайсЛистККМ.Вставить("ПолнаяВыгрузка", ПолныйПрайсЛист);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистПоШтрихкоду(ОфлайнОборудование, ПрайсЛистККМ, Штрихкод)
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеТовараПоШтрихкоду(ОфлайнОборудование, ПрайсЛистККМ, Штрихкод);
	ПрайсЛистККМ.Вставить("ПолнаяВыгрузка", Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьЗаказы(ОфлайнОборудование, ЗаказыККМ)
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеЗаказов(ОфлайнОборудование, ЗаказыККМ);
	
КонецПроцедуры

Процедура ЗагрузитьОтчетыОПродажах(ОфлайнОборудование, XMLТекст, ВерсияФорматаОбмена, Отказ, СообщениеОбОшибке)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Фабрика = ОфлайнОборудование1СККМВызовСервера.ФабрикаXDTO(ВерсияФорматаОбмена);
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ИмяТипа = "SaleReports";
	Иначе
		ИмяТипа = "SalesReports";
	КонецЕсли;
	
	ТипXDTO = Фабрика.Тип(ОфлайнОборудование1СККМВызовСервера.URIПространстваИмен(ВерсияФорматаОбмена), ИмяТипа);
	
	Попытка
		ДанныеXDTO = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		ЧтениеXML.Закрыть();
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = НСтр("ru='При чтении файла-отчета произошла ошибка. Формат отчета не соответствует версии формата обмена.'")
		+ Символы.ПС + ОписаниеОшибки;
		
		Отказ = Истина;
		СообщениеОбОшибке = ТекстСообщения;
		
		ЧтениеXML.Закрыть();
		Возврат;
	КонецПопытки;
	
	ЗагружаемыеДанныеИзККМ = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ОфлайнОборудование1СККМВызовСервера.ЗаполнитьОтчетыОПродажах(ДанныеXDTO, ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах, ВерсияФорматаОбмена);
	Иначе
		ОфлайнОборудование1СККМВызовСервера.ЗаполнитьОтчетыОПродажах1000(ДанныеXDTO, ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах, ВерсияФорматаОбмена);
	КонецЕсли;
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОПродажахИзККМ(
		ОфлайнОборудование,
		ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах,
		Отказ,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗагрузитьВскрытияАлкогольнойТары(ОфлайнОборудование, XMLТекст, ВерсияФорматаОбмена, Отказ, СообщениеОбОшибке)
	
	Если НЕ ВерсияФорматаОбмена > 2000 Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Формат %ВерсияФормата% не поддерживает загрузку вскрытий алкогольной тары'");
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Фабрика = ОфлайнОборудование1СККМВызовСервера.ФабрикаXDTO(ВерсияФорматаОбмена);
	
	ИмяТипа = "AlcoholTareOpenings";
	
	ТипXDTO = Фабрика.Тип(ОфлайнОборудование1СККМВызовСервера.URIПространстваИмен(ВерсияФорматаОбмена), ИмяТипа);
	
	Попытка
		ДанныеXDTO = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		ЧтениеXML.Закрыть();
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru='При чтении файла произошла ошибка'")
		+ Символы.ПС + ОписаниеОшибки;
		
		Отказ = Истина;
		СообщениеОбОшибке = ТекстСообщения;
		
		ЧтениеXML.Закрыть();
		Возврат;
	КонецПопытки;
	
	ЗагружаемыеДанныеИзККМ = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	
	ОфлайнОборудование1СККМВызовСервера.ЗаполнитьОтчетыВскрытияТары(ДанныеXDTO, ЗагружаемыеДанныеИзККМ.ВскрытияАлкогольнойТары, ВерсияФорматаОбмена);
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОВскрытияхАлкогольнойТарыИзККМ(
		ОфлайнОборудование,
		ЗагружаемыеДанныеИзККМ.ВскрытияАлкогольнойТары,
		Отказ,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗагрузитьОтчетПрайсЧекера(ОфлайнОборудование, XMLТекст, ВерсияФорматаОбмена, Отказ, СообщениеОбОшибке)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Фабрика = ОфлайнОборудование1СККМВызовСервера.ФабрикаXDTO(ВерсияФорматаОбмена);
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ИмяТипа = "PriceCheckerReports";
	Иначе
		ИмяТипа = "PriceCheckerReport";
	КонецЕсли;
	
	ТипXDTO = Фабрика.Тип(ОфлайнОборудование1СККМВызовСервера.URIПространстваИмен(ВерсияФорматаОбмена), ИмяТипа);
	
	Попытка
		ДанныеXDTO = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		ЧтениеXML.Закрыть();
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru='При чтении файла произошла ошибка'")
		+ Символы.ПС + ОписаниеОшибки;
		
		Отказ = Истина;
		СообщениеОбОшибке = ТекстСообщения;
		
		ЧтениеXML.Закрыть();
		Возврат;
	КонецПопытки;
	
	ЗагружаемыеДанные = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзПрайсЧекера();
	
	ОфлайнОборудование1СККМВызовСервера.ЗаполнитьОтчетОПроверкахЦен(ДанныеXDTO, ЗагружаемыеДанные.ОтчетыОПроверкахЦенников, ВерсияФорматаОбмена);
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОПроверкахЦенников(
		ОфлайнОборудование,
		ЗагружаемыеДанные.ОтчетыОПроверкахЦенников,
		Отказ,
		СообщениеОбОшибке);
	
КонецПроцедуры

Функция ПолучитьОтветПриВыгрузкеПакетаПрайсЛиста()
	
	СтруктураОтветаПриЗагрузке = Новый Структура;
	
	СтруктураОтветаПриЗагрузке.Вставить("Успешно", Ложь);
	СтруктураОтветаПриЗагрузке.Вставить("ПакетПрайсЛиста", "");
	СтруктураОтветаПриЗагрузке.Вставить("НомерПакета", 1);
	СтруктураОтветаПриЗагрузке.Вставить("ПакетовВсего", 1);
	
	Возврат СтруктураОтветаПриЗагрузке;
	
КонецФункции

// Пустая структура для заполнения массива Товары прайс-листа выгружаемого на оборудование,
// прайс-лист заполняется в МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеПрайсЛиста.
//
// Параметры:
// ФабрикаXDTO - ФабрикаXDTO - .
// ТипОбъекта - Тип - .
//
// Возвращаемое значение:
// Структура - Описание:
// * Описание - Строка - .
//
Функция ПолучитьОбъектОбмена(ФабрикаXDTO, ТипОбъекта)
	
	Возврат ФабрикаXDTO.Создать(ТипОбъекта); //ОбъектXDTO - 
	
КонецФункции

#КонецОбласти

