#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСоСловаремТерминов

Процедура УстановитьОписаниеТермина(Глоссарий, Знач Термин, Знач Значение,
	Знач Получение = Истина, Знач Отправка = Истина, НесколькоЗначений = Ложь) Экспорт
	
	ЗаписьПоЗначению = Глоссарий.НайтиСтроки(Новый Структура("Значение, Отправка", Значение, Отправка));
	ЗаписьПоТермину = Глоссарий.НайтиСтроки(Новый Структура("Термин, Получение", Значение, Получение));
	
	Если ЗначениеЗаполнено(ЗаписьПоЗначению) Тогда
		Запись = ЗаписьПоЗначению[0];
	ИначеЕсли ЗначениеЗаполнено(ЗаписьПоТермину) И Не НесколькоЗначений Тогда
		Запись = ЗаписьПоЗначению[0];
	Иначе
		Запись = Глоссарий.Добавить();
	КонецЕсли;
	
	Запись.Термин = Термин;
	Запись.Значение  = Значение;
	Запись.Отправка  = Отправка;
	Запись.Получение = Получение;
	
КонецПроцедуры

Функция НовыйГлоссарий() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Термин");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Отправка", Типы().Булево); // Запись используется для конвертации из значения информационной базы в термин сервиса
	Результат.Колонки.Добавить("Получение", Типы().Булево);// Запись используется для конвертации из термина сервиса в значение информационной базы
	
	Результат.Индексы.Добавить("Термин, Получение");
	Результат.Индексы.Добавить("Значение, Отправка");
	
	Возврат Результат
	
КонецФункции

Функция ТерминСервиса(Знач Глоссарий, Знач Значение) Экспорт
	
	Запись = Глоссарий.НайтиСтроки(Новый Структура("Значение, Отправка", Значение, Истина));
	Если Не ЗначениеЗаполнено(Запись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запись[0].Термин;
	
КонецФункции

Функция ЗначениеТермина(Знач Глоссарий, Знач Термин) Экспорт
	
	Запись = Глоссарий.НайтиСтроки(Новый Структура("Термин, Получение", Термин, Истина));
	Если Не ЗначениеЗаполнено(Запись) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запись[0].Значение;
	
КонецФункции

#КонецОбласти

#Область РаботаСМодельюДанныхСервиса

// Приводит объектную модель к каноническому виду
//
// Параметры:
//   Данные - Структура - обрабатываемый документ.
//   ОписаниеСтруктурыДанных - Структура - описание структуры данных, см. ОписаниеСтруктурыДанныхЗаказа()
//   ПолнаяМодельДанных - Булево - если Истина - в данные будут добавлены все свойства объектов, описанные с модели.
//                                               В противном случае - только обязательные к заполнению.
//
Процедура НормализоватьДанныеПоСхеме(Данные, Знач ОписаниеСтруктурыДанных, Знач ПолнаяМодельДанных = Истина) Экспорт
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Для Каждого СвойствоСвойстваСхемы Из ОписаниеСтруктурыДанных.Схема Цикл
		ИмяСвойства         = СвойствоСвойстваСхемы.Ключ;
		ОписаниеЗначения    = СвойствоСвойстваСхемы.Значение;
		СвойствоОбязательно = ОписаниеЗначения.Обязательно Или ПолнаяМодельДанных;
		
		ЗначениеСвойства = ОписаниеЗначения.Тип.ПривестиЗначение(
			ЗначениеКоллекцииПоАбсолютномуПути(Данные, ИмяСвойства));
			
		Если Не СвойствоОбязательно И Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Данные.Удалить(ИмяСвойства);
			
			Продолжить;
		КонецЕсли;
			
		Если ОписаниеЗначения.Тип = Типы.Массив Тогда
			Данные.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			Индекс = 0;
			Для Каждого ЭлементКоллекции Из ЗначениеСвойства Цикл
				Если Типы.Структура.СодержитТип(ТипЗнч(ОписаниеЗначения.Схема)) Тогда
					НормализоватьДанныеПоСхеме(ЭлементКоллекции, ОписаниеЗначения, ПолнаяМодельДанных);
				Иначе
					ЗначениеСвойства[Индекс] = ОписаниеЗначения.Схема.ПривестиЗначение(ЗначениеСвойства);
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		ИначеЕсли ОписаниеЗначения.Тип = Типы.Структура Тогда
			Если Не КоллекцияСодержитДанные(ЗначениеСвойства) Тогда
				Если СвойствоОбязательно Тогда
					Данные.Вставить(ИмяСвойства, ПустаяМодельПоСхеме(ОписаниеЗначения.Схема, ПолнаяМодельДанных));
				Иначе
					Данные.Удалить(ИмяСвойства);
				КонецЕсли;
					
				Продолжить;
			КонецЕсли;
			
			НормализоватьДанныеПоСхеме(Данные[ИмяСвойства], ОписаниеЗначения, ПолнаяМодельДанных);
		Иначе
			Данные.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяМодельПоСхеме(Знач Схема, Знач ПолнаяМодельДанных = Истина, Результат = Неопределено,
	Знач ЗаполнятьРекурсивно = Истина) Экспорт
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Для Каждого СвойствоСхемы Из Схема Цикл
		ИмяСвойства = СвойствоСхемы.Ключ;
		ОписаниеЗначения = СвойствоСхемы.Значение;
		
		Если Не ПолнаяМодельДанных И Не ОписаниеЗначения.Обязательно Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(ИмяСвойства, ОписаниеЗначения.Тип.ПривестиЗначение(Неопределено));
		
		Если ЗаполнятьРекурсивно И ОписаниеЗначения.Тип = Типы.Структура Тогда
			ПустаяМодельПоСхеме(ОписаниеЗначения.Схема, ПолнаяМодельДанных, Результат[ИмяСвойства]);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСтруктурыДанныхЗаказа() Экспорт
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Возврат НовыйСвойствоСхемы(Типы.Структура, Order());
	
КонецФункции

Процедура УстановитьЗначениеВМодели(Модель, Знач СхемаМодели, Знач СвойствоМодели, Знач ЗначениеСвойства,
	Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ПриведенноеЗначение = СхемаМодели[СвойствоМодели].Тип.ПривестиЗначение(ЗначениеСвойства);
	Если ПриведенноеЗначение = СхемаМодели[СвойствоМодели].Тип.ПривестиЗначение(Неопределено) Тогда
		ПриведенноеЗначение = СхемаМодели[СвойствоМодели].Тип.ПривестиЗначение(ЗначениеПоУмолчанию);
	КонецЕсли;
	
	Модель[СвойствоМодели] = ПриведенноеЗначение;
	
КонецПроцедуры

Функция ЗначениеКоллекцииПоАбсолютномуПути(Знач Значение, Знач Путь, ЕстьОшибки = Ложь) Экспорт
	
	СвойстваПути = СтрРазделить(Путь, ".", Ложь);
	
	Попытка
		Результат = ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	Исключение
		Результат = Неопределено;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкаВыводаСпискаЗаказов

Функция ВариантыСортировкиСпискаЗаказов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("МоментСозданияВозр", "createdTimeAsc");
	Результат.Вставить("МоментСозданияУбыв", "createdTimeDesc");
	Результат.Вставить("МоментИзмененияСтатусаВозр", "statusTimeAsc");
	Результат.Вставить("МоментИзмененияСтатусаУбыв", "statusTimeDesc");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровКоманд

#Область РеестрДокументов

Функция НовыйПараметрыПолученияРеестраДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагенты", Новый Массив);
	Результат.Вставить("ТипыДокументов", Новый Массив);
	Результат.Вставить("Менеджер");
	Результат.Вставить("МоментСозданияОт", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментСозданияДо", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментИзмененияСтатусаОт", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментИзмененияСтатусаДо", Дата(1,1,1,0,0,0));
	Результат.Вставить("Статус");
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	Результат.Вставить("ВариантСортировки");    // вариант сортировки записей при выборке см. ВариантыСортировкиСпискаЗаказов()
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказПоставщику

Функция НовыйПараметрыСравненияВерсийЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ИдентификаторВерсии1", "");
	Результат.Вставить("ИдентификаторВерсии2", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияПечатнойФормыЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ИдентификаторВерсии", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияСтатусаЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыИзмененияСтатусаЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Инструкция");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("НомерРевизии", "");
	Результат.Вставить("ИдентификаторПользователя");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияДанныхЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ИдентификаторВерсии", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияСпискаЗаказовПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагенты", Новый Массив);
	Результат.Вставить("МоментСозданияОт", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментСозданияДо", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментИзмененияСтатусаОт", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментИзмененияСтатусаДо", Дата(1,1,1,0,0,0));
	Результат.Вставить("Статус");
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	Результат.Вставить("ВариантСортировки");    // вариант сортировки записей при выборке см. ВариантыСортировкиСпискаЗаказов()
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыСозданияЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("КлючИдемпотентности");
	Результат.Вставить("ЭлектронныйДокумент");
	Результат.Вставить("ИдентификаторПользователя");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыОбновленияЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторПользователя");
	Результат.Вставить("ИдентификаторВСервисе");
	Результат.Вставить("ЭлектронныйДокумент");
	Результат.Вставить("НомерРевизии", "");
	Результат.Вставить("ХэшОтправленногоДокумента");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияПротоколаИзмененияЗаказаПоставщику() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказКлиента

Функция НовыйПараметрыПолученияПечатнойФормыЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ИдентификаторВерсии", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыСравненияВерсийЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ИдентификаторВерсии1", "");
	Результат.Вставить("ИдентификаторВерсии2", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияСтатусаЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыИзмененияСтатусаЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Инструкция");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("НомерРевизии", "");
	Результат.Вставить("ИдентификаторПользователя");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияДанныхЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ИдентификаторВерсии", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияСпискаЗаказовКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагенты", Новый Массив);
	Результат.Вставить("МоментСозданияОт", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментСозданияДо", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментИзмененияСтатусаОт", Дата(1,1,1,0,0,0));
	Результат.Вставить("МоментИзмененияСтатусаДо", Дата(1,1,1,0,0,0));
	Результат.Вставить("Статус");
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	Результат.Вставить("ВариантСортировки");    // вариант сортировки записей при выборке см. ВариантыСортировкиСпискаЗаказов()
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыОбновленияЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторПользователя");
	Результат.Вставить("ИдентификаторВСервисе");
	Результат.Вставить("ЭлектронныйДокумент");
	Результат.Вставить("НомерРевизии", "");
	Результат.Вставить("ХэшОтправленногоДокумента");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияПротоколаИзмененияЗаказаКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторВСервисе", "");
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

#Область ИнтерфейсПоставщика

Функция НовыйПараметрыПолученияНастроекОбменаОрганизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыОбновленияНастройкиОбменаОрганизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	
	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("Покупатель", Типы().КонтрагентБизнесСеть);
	Настройки.Колонки.Добавить("РежимРаботыСЗаказами", Типы().РежимыРаботыСЗаказами);
	
	Результат.Вставить("Настройки", Настройки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПокупателя

Функция НовыйПараметрыПолученияНастроекОбменаКонтрагентов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагенты", Новый Массив);
	Результат.Вставить("ДатаИзменения", Дата(1,1,1,0,0,0));
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиОрганизации

Функция НовыйПараметрыОбновленияНастроекОрганизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Префикс", "");
	Результат.Вставить("ОтветственныйЗаНовыеЗаказы", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияНастроекОрганизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЛентаСобытий

Функция НовыйПараметрыПолученияЛентыСобытийПоОрганизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("Менеджер");
	Результат.Вставить("НаправлениеСобытия");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ТипыДокументов", Новый Массив);
	Результат.Вставить("НачалоПериода", Дата(1,1,1,0,0,0));
	Результат.Вставить("КонецПериода", Дата(1,1,1,0,0,0));

	Результат.Вставить("ВозрастающаяСортировка", Истина);
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияСводнойИнформацииПоЛентеСобытийНаДату() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Период", Дата(1,1,1,0,0,0));
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПолученияСводнойИнформацииПоЛентеСобытийЗаПериод() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("КоличествоАктивныхДней", 0);
	
	Результат.Вставить("ПоложениеКурсора", ""); // начало страницы.
	Результат.Вставить("РазмерСтраницы", 0);    // количество записей для страничной загрузки.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеСотрудниками

Функция НовыйПараметрыДобавленияМенеджера() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Менеджер");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхроннаяОбработкаЗапросов

Функция НовыйПараметрыПолученияРезультатаАсинхроннойОбработкиЗапроса() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("ИдентификаторЗадания");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Команды

#Область УчастникиБизнесПроцесса

Функция ИдентификаторОрганизацииБизнесСети(Знач Организация, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	Если БизнесСеть.ОрганизацияПодключена(Организация) Тогда
		Результат = БизнесСеть.ИдентификаторОрганизации(Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru='Организация %1 не зарегистрирована в Бизнес Сети'"), Строка(Организация));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция КонтрагентыБизнесСети(Знач Контрагенты, ЕстьОшибки = Ложь, ТекстОшибки = "", ИспользоватьТолькоКэш = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Контрагенты) <> Тип("Массив") Тогда
		Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагенты);
	КонецЕсли;
	
	РезультатПоиска = БизнесСеть.ИдентификаторыКонтрагентов(Контрагенты, ИспользоватьТолькоКэш);
	Если РезультатПоиска.ЕстьОшибки Тогда
		ЕстьОшибки = Истина;
		ШаблонОшибки = НСтр("ru='Не получен идентификатор Бизнес Сети для контрагента %1 по причине: %2.'");
		ПодстрокиОшибок = Новый Массив;
		Для Каждого Ошибка Из РезультатПоиска.Ошибки Цикл
			ПодстрокиОшибок.Добавить(СтрШаблон(ШаблонОшибки, Строка(Ошибка.Ключ), Ошибка.Значение.ТекстОшибки));
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(ПодстрокиОшибок, Символы.ПС);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеКонтрагентов = РезультатПоиска.Данные;
	ДанныеКонтрагентов.Индексы.Добавить("Контрагент");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ОрганизацияБизнесСети(Знач ИдентификаторОрганизации, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Не указан идентификатор организация Бизнес Сети'");
		
		Возврат Неопределено
	КонецЕсли;
	
	Результат = ИнтеграцияССервисомEDIСлужебныйПовтИсп.ОрганизацияПоИдентификаторуБизнесСети(ИдентификаторОрганизации);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Не найдена организация Бизнес Сети по идентификатору %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИдентификаторОрганизации);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция КонтрагентБизнесСети(Знач ИдентификаторКонтрагента, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ИдентификаторКонтрагента) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Не указан идентификатор контрагента Бизнес Сети'");
		
		Возврат Неопределено
	КонецЕсли;
	
	Результат = ИнтеграцияССервисомEDIСлужебныйПовтИсп.КонтрагентПоИдентификаторуБизнесСети(ИдентификаторКонтрагента);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Не найден контрагент Бизнес Сети по идентификатору %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИдентификаторКонтрагента);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РеестрДокументов

Функция РеестрДокументов(Знач ПараметрыКоманды) Экспорт
	
	ЕстьОшибки     = Ложь;
	Результат = НовыйРезультатВыполненияКоманды();
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияРеестраДокументов(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса реестра документов из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка получения реестра документов в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = РеестрДокументовИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка преобразования данных реестра документов сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказПоставщику

Функция ПечатнаяФормаЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	Результат = НовыйРезультатВыполненияКоманды();
	
	ЗапросКСервису = ЗапросПолученияПечатнойФормыЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения печатной формы заказа поставщику из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка формирования печатной формы заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ПечатнаяФормаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки печатной формы заказа поставщику, полученной из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция ПечатнаяФормаСравненияВерсийЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	Результат = НовыйРезультатВыполненияКоманды();
	
	ЗапросКСервису = ЗапросПолученияПечатнойФормыСравненияВерсийЗаказаПоставщику(
		ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения печатной формы
				|сравнения версий заказа поставщику из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка формирования печатной формы сравнения версий заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = СравнениеВерсийЗаказаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки печатной формы сравнения версий заказа поставщику,
				|полученной из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция СписокЗаказовПоставщику(Знач ПараметрыКоманды) Экспорт
	
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	Результат = НовыйРезультатВыполненияКоманды();
	
	ЗапросКСервису = ЗапросПолученияСпискаЗаказовПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса списка заказов поставщику из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения списка заказов поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = СписокЗаказовПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных списка заказов поставщику, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция ПротоколИзмененийЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияПротоколаИзмененияЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения протокола взаимодействия по заказу поставщику из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения протокола взаимодействия по заказу поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ПротоколИзмененияЗаказаПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных протокола взаимодействия по заказу поставщику, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияДанныхЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения данных заказа поставщику из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения данных заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ДанныеЗаказаПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных заказа поставщику, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияСтатусаЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения статуса заказа поставщику из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения статуса заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = РасширеннаяИнформацияПоЗаказуПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки статуса заказа поставщику, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатСозданияЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	ЗапросОбрабатываетсяАсинхронно = Ложь;
	
	ЗапросКСервису = ЗапросСозданияЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса создания заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ЗапросОбрабатываетсяАсинхронно, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка создания заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.ХешДокументаСервиса = ЗапросКСервису.ХешТелаЗапроса;
	
	Если ЗапросОбрабатываетсяАсинхронно Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса;
	Иначе
		ОтветСервиса = РасширеннаяИнформацияПоЗаказуПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка обработки результата создания заказа поставщику в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
			
			Возврат Результат;
		КонецЕсли;
		
		Результат.Данные = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбновленияЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ЗапросОбрабатываетсяАсинхронно = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросОбновленияЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса обновления заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.ХешДокументаСервиса = ЗапросКСервису.ХешТелаЗапроса;
	
	// Если вычисленный хеш электронного документа совпадает с последним отправленным в сервис - подменяем запрос
	Если ПараметрыКоманды.ХэшОтправленногоДокумента = ЗапросКСервису.ХешТелаЗапроса Тогда
		ЗапросКСервису = ЗапросПолученияСтатусаЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка построения запроса обновления заказа поставщику в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ЗапросОбрабатываетсяАсинхронно, ПодробноеОписаниеОшибки);	
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обновления заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ЗапросОбрабатываетсяАсинхронно Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса;
	Иначе
		ОтветСервиса = РасширеннаяИнформацияПоЗаказуПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка обработки результата обновления заказа поставщику в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
			
			Возврат Результат;
		КонецЕсли;
	
		Результат.Данные = ОтветСервиса;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция РезультатИзмененияСтатусаЗаказаПоставщику(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ЗапросОбрабатываетсяАсинхронно = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросИзмененияСтатусаЗаказаПоставщику(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса изменения статуса заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ЗапросОбрабатываетсяАсинхронно, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка изменения статуса заказа поставщику в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ЗапросОбрабатываетсяАсинхронно Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса;
	Иначе
		ОтветСервиса = РасширеннаяИнформацияПоЗаказуПоставщикуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка обработки результата изменения статуса заказа поставщику в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
			
			Возврат Результат;
		КонецЕсли;
		
		Результат.Данные = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказКлиента

Функция ПечатнаяФормаЗаказаКлиента(Знач ПараметрыКоманды) Экспорт
	
	ЕстьОшибки     = Ложь;
	Результат = НовыйРезультатВыполненияКоманды();
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияПечатнойФормыЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения печатной формы заказа клиента из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,,ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка формирования печатной формы заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ПечатнаяФормаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки печатной формы заказа клиента, полученной из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция ПечатнаяФормаСравненияВерсийЗаказаКлиента(Знач ПараметрыКоманды) Экспорт
	
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	Результат = НовыйРезультатВыполненияКоманды();
	
	ЗапросКСервису = ЗапросПолученияПечатнойФормыСравненияВерсийЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения печатной формы
				|сравнения версий заказа клиента из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка формирования печатной формы сравнения версий заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = СравнениеВерсийЗаказаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки печатной формы сравнения версий заказа клиента,
				|полученной из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
			
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция СписокЗаказовКлиента(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияСпискаЗаказовКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса списка заказов клиента из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка получения списка заказов клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = СписокЗаказовКлиентаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка обработки данных списка заказов клиента, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция ПротоколИзмененийЗаказаКлиента(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияПротоколаИзмененияЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения протокола взаимодействия по заказу клиента из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения протокола взаимодействия по заказу клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ПротоколИзмененияЗаказаКлиентаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных протокола взаимодействия по заказу клиента, полученных от сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеЗаказаКлиента(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияДанныхЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения данных заказа клиента из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения данных заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ДанныеЗаказаКлиентаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных заказа клиента, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусЗаказаКлиента(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияСтатусаЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса получения статуса заказа клиента из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения статуса заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = РасширеннаяИнформацияПоЗаказуКлиентаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки статуса заказа клиента, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбновленияЗаказаКлиента(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ЗапросОбрабатываетсяАсинхронно = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросОбновленияЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса обновления заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.ХешДокументаСервиса = ЗапросКСервису.ХешТелаЗапроса;
	
	// Если вычисленный хеш электронного документа совпадает с последним отправленным в сервис - подменяем запрос
	Если ПараметрыКоманды.ХэшОтправленногоДокумента = ЗапросКСервису.ХешТелаЗапроса Тогда
		ЗапросКСервису = ЗапросПолученияСтатусаЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка построения запроса обновления заказа клиента в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ЗапросОбрабатываетсяАсинхронно, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обновления заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ЗапросОбрабатываетсяАсинхронно Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса;
	Иначе
		ОтветСервиса = РасширеннаяИнформацияПоЗаказуКлиентаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка обработки результата обновления заказа клиента в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
			
			Возврат Результат;
		КонецЕсли;
		
		Результат.Данные = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатИзмененияСтатусаЗаказаКлиента(Знач ПараметрыКоманды) Экспорт
	
	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ЗапросОбрабатываетсяАсинхронно = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросИзмененияСтатусаЗаказаКлиента(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса изменения статуса заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ЗапросОбрабатываетсяАсинхронно, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка изменения статуса заказа клиента в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ЗапросОбрабатываетсяАсинхронно Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса;
	Иначе
		ОтветСервиса = РасширеннаяИнформацияПоЗаказуКлиентаИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки =
				НСтр("ru = 'Ошибка обработки результата изменения статуса заказа клиента в сервисе 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
			
			Возврат Результат;
		КонецЕсли;
		
		Результат.Данные = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

#Область ИнтерфейсПоставщика

Функция НастройкиОбменаОрганизации(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияНастроекОбменаОрганизации(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса для получения настроек обмена в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения настроек обмена организации в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = НастройкиОбменаОрганизацииИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных настроек обмена организации, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбновленияНастроекОбменаОрганизации(Знач ПараметрыКоманды) Экспорт

	ЕстьОшибки = Ложь;
	ОжидатьОтветаСервиса = Ложь;
	Результат = НовыйРезультатВыполненияКоманды();
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросОбновленияНастроекОбмена(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса для обновления настроек обмена в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ОжидатьОтветаСервиса, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка обновления настроек в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ОжидатьОтветаСервиса Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса;
	Иначе
		Результат.Данные = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПокупателя

Функция НастройкиОбменаКонтрагентов(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияНастроекОбменаКонтрагентов(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса для получения настроек обмена контрагентов из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка получения настроек обмена контрагентов в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = НастройкиОбменаКонтрагентовИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка обработки данных настроек обмена контрагентов,
			|полученных от сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиОрганизацииВСервисе

Функция РезультатОбновленияНастроекОрганизацииВСервисе(Знач ПараметрыКоманды) Экспорт

	ЕстьОшибки = Ложь;
	Результат = НовыйРезультатВыполненияКоманды();
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросОбновленияНастроекОрганизации(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса для обновления настроек организации в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, Ложь, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка обновления настроек организации в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПолученияНастроекОрганизации(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияНастроекОрганизации(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса для получения настроек организации из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения настроек из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Данные = НастройкиОрганизацииИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка обработки данных настроек организации, полученных из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = Данные;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЛентаСобытий

Функция ЛентаСобытийПоОрганизации(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияЛентыСобытийПоОрганизации(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка построения запроса ленты событий в сервис 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка получения ленты событий из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;

	ОтветСервиса = ЛентаСобытийИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка обработки данных ленты событий, полученных от сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция СводнаяИнформацияПоЛентеСобытийНаДату(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияСводнойИнформацииПоЛентеСобытийНаДату(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = 
			НСтр("ru = 'Ошибка построения запроса сводной информации по ленте событий на дату в сервис 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = 
			НСтр("ru = 'Ошибка получения сводной информации по ленте событий на дату из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
		
	ОтветСервиса = СводнаяИнформацияПоЛентеСобытийНаДатуИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = 
			НСтр("ru = 'Ошибка преобразования данных сводной информации по ленте событий на дату,
				|полученных от сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

Функция СводнаяИнформацияПоЛентеСобытийЗаПериод(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияСводнойИнформацииПоЛентеСобытийЗаПериод(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка      = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка построения запроса сводной информации по ленте событий за период в сервис 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса   = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка      = Истина;
		Результат.ТекстОшибки =
			НСтр("ru = 'Ошибка получения сводной информации по ленте событий за период из сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = СводнаяИнформацияПоЛентеСобытийЗаПериодИзМоделиСервиса(ОтветСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка      = Истина;
		Результат.ТекстОшибки = НСтр(
			"ru = 'Ошибка преобразования данных сводной информации по ленте событий за период,
			|полученных от сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеСотрудниками

Функция РезультатДобавленияМенеджера(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросДобавленияНовогоМенеджера(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = 
			НСтр("ru = 'Ошибка построения запроса добавления менеджера в сервис 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка      = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка добавления менеджера в сервис 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Данные = ОтветСервиса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхроннаяОбработкаЗапросов

Функция РезультатАсинхроннойОбработкиКоманды(Знач ПараметрыКоманды) Экспорт

	Результат = НовыйРезультатВыполненияКоманды();
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	
	ЗапросКСервису = ЗапросПолученияРезультатаАсинхроннойОбработкиКоманды(ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = 
			НСтр("ru = 'Ошибка построения запроса результата асинхронной обработки задания в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОтветСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки,, ПодробноеОписаниеОшибки);
	Если ЕстьОшибки Тогда
		Результат.Ошибка      = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса результата асинхронной обработки задания в сервисе 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ОбработатьРезультатАсинхронногоВыполненияКоманды(Результат, ОтветСервиса, ПараметрыКоманды.ИдентификаторЗадания);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УстановкаСоединенияССервером

Функция ПараметрыСоединенияССервисом(Знач ИмяСервиса) Экспорт
	
	Если ИмяСервиса = ИмяСервисаEDI() Тогда
		Возврат ПараметрыСоединения(АдресСервисаEDI());
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru='Ошибка формирования параметров соединения с сервисом %1: имя сервиса не опознано.'"), ИмяСервиса);
	
	ВызватьИсключение ТекстОшибки;

КонецФункции

#КонецОбласти

#Область ФормализацияЗначений

Функция СобытиеЖурналаРегистрацииСервисEDI() Экспорт
	
	Возврат НСтр("ru = 'Сервис 1С:EDI.'", ОбщегоНазначения.КодОсновногоЯзыка())
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонструкторыПараметровПереопределяемыхПроцедур

Функция НовыйДанныеМенеджера()
	
	Результат = Новый Структура;
	Результат.Вставить("ФИО", "");
	Результат.Вставить("Идентификатор", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сервис

#Область Соединение

Функция НовоеСоединениеССервером(Знач ПараметрыСоединения, ЕстьОшибки, ТекстОшибки = "")

	Соединение = Неопределено;
	ЕстьОшибки = Ложь;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			ПараметрыСоединения.Сервер,
			ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси,
			ПараметрыСоединения.Таймаут,
			ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = СтрШаблон(НСтр("ru='не удалось установить соединение по причине: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// Формирует параметры соединения к сервисом.
//
// Параметры:
//  АдресРесурса - Строка - ссылка на ресурс в формате:
//                       <протокол обмена>://<сервер>:<порт>.
//
// Возвращаемое значение:
//  Структура - параметры соединения:
//   * Сервер - Строка - имя сервера.
//   * Порт - Число - порт соединения.
//   * ПутьНаСервере - Строка - относительный путь на сервере.
//   * Аутентификация - Булево - требуется аутентификация по токену.
//   * ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL.
//   * Прокси - ИнтернетПрокси - параметры прокси-сервера см. ПолучениеФайловИзИнтернета.ПолучитьПрокси()
//
Функция ПараметрыСоединения(Знач ПолныйАдресРесурса)
	
	ДанныеРесурса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдресРесурса);
	
	Результат = НовыйПараметрыСоединения();
	Результат.Сервер        = ДанныеРесурса.Хост;
	Результат.Порт          = ДанныеРесурса.Порт;
	Результат.Прокси        = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ДанныеРесурса.Схема);
	Результат.ПутьНаСервере = ДанныеРесурса.ПутьНаСервере;
	
	Если ДанныеРесурса.Схема = ЗащищенныйПротоколПередачиДанных() Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыСоединения()
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер",         "");
	Результат.Вставить("Порт",           0);
	Результат.Вставить("ПутьНаСервере",  "");
	Результат.Вставить("Аутентификация", Ложь);
	Результат.Вставить("Таймаут", 60);
	Результат.Вставить("Прокси",         Неопределено);
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	Результат.Вставить("ИдентификаторПрограммы", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Авторизация

Функция НовыйПараметрыАвторизации(Знач Организация)
	
	Возврат Новый Структура("Организация", Организация);
	
КонецФункции

Функция ТокенАвторизации(Знач ПараметрыАвторизации, ЕстьОшибки, ТекстОшибки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Токен = Неопределено;
	ЕстьОшибки = Ложь;
	Попытка
		Токен = БизнесСеть.ТокенДоступаОрганизации(ПараметрыАвторизации.Организация);
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Токен) Или ПустаяСтрока(Токен.ТокенДоступа) Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстОшибки = НСтр("ru='Ошибка получения токена авторизации.'")
			+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)+ ТекстОшибки;
		
		Возврат Неопределено;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат Токен;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗапроса

#Область РеестрДокументов

Функция ЗапросПолученияРеестраДокументов(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Получение реестра документов из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	Если ПараметрыКоманды.Свойство("Контрагенты") И ЗначениеЗаполнено(ПараметрыКоманды.Контрагенты) Тогда
		КонтрагентыБизнесСети = КонтрагентыБизнесСети(ПараметрыКоманды.Контрагенты, ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
		
		ИдентификаторыКонтрагентов = КонтрагентыБизнесСети.ВыгрузитьКолонку("Идентификатор");
		
		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "supplierIds", СтрСоединить(ИдентификаторыКонтрагентов, ","));
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("Менеджер") И ЗначениеЗаполнено(ПараметрыКоманды.Менеджер) Тогда
		ДанныеМенеджера = НовыйДанныеМенеджера();
		ИнтеграцияССервисомEDIПереопределяемый.ЗаполнитьДанныеПользователя(ДанныеМенеджера, ПараметрыКоманды.Менеджер);
		
		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "employeeId", ДанныеМенеджера.Идентификатор);
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("ТипыДокументов") И ЗначениеЗаполнено(ПараметрыКоманды.ТипыДокументов) Тогда
		documentTypes = Новый Массив;
		Для Каждого ТипДокумента Из ПараметрыКоманды.ТипыДокументов Цикл
			documentTypes.Добавить(ТерминСервиса(СловарьСервиса.ТипыДокументов, ТипДокумента));
		КонецЦикла;
		
		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "documentTypes", СтрСоединить(documentTypes, ","));
	КонецЕсли;
	
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "НаправлениеСобытия", "eventsDirection",
		СловарьСервиса.НаправленияСобытий);
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "Статус", "status", СловарьСервиса.СтатусыЗаказа);
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментСозданияОт", "createdFromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментСозданияДо", "createdToTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментИзмененияСтатусаОт", "statusFromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментИзмененияСтатусаДо", "statusToTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ВариантСортировки", "sortBy");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/documents%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-doc-list.v1+json";
	
	// определение параметров восстановления тела ответа из двоичных данных
	Результат.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	Результат.ПараметрыВосстановления.СвойстваТипаДата = 
		"date,created,currentStatusDate,supplierFulfilmentExtendedStatusDate";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказПоставщику

Функция ЗапросПолученияПечатнойФормыЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение печатной формы заказа поставщику из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация,ИдентификаторВСервисе";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии", "versionId");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ВозвратДвоичныхДанныхТела = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-ordrs-print-metadata+mxl.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияПечатнойФормыСравненияВерсийЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение печатной формы сравнения версий заказа поставщику из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация,ИдентификаторВСервисе,ИдентификаторВерсии1";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки= ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии1", "fromVersionId");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии2", "toVersionId");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2/comparison%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-ordrs-comparison-mxl+metadata.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияСтатусаЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение статуса заказа поставщику из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация,ИдентификаторВСервисе";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2/status",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());

	// определение параметров восстановления тела ответа из двоичных данных
	Результат.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	Результат.ПараметрыВосстановления.СвойстваТипаДата = 
		"created,currentStatusDate,supplierFulfilmentExtendedStatusDate";
		
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияДанныхЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение данных заказа поставщику из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация,ИдентификаторВСервисе";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии", "versionId");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());

	// определение параметров восстановления тела ответа из двоичных данных
	Результат.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	Результат.ПараметрыВосстановления.СвойстваТипаДата = 
		"date,created,currentStatusDate,supplierFulfilmentExtendedStatusDate,expectedDeliveryDate";
		
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияСпискаЗаказовПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Получение заказов поставщику из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	Если ПараметрыКоманды.Свойство("Контрагенты") И ЗначениеЗаполнено(ПараметрыКоманды.Контрагенты) Тогда
		КонтрагентыБизнесСети = КонтрагентыБизнесСети(ПараметрыКоманды.Контрагенты, ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
		
		ИдентификаторыКонтрагентов = КонтрагентыБизнесСети.ВыгрузитьКолонку("Идентификатор");

		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "supplierIds", СтрСоединить(ИдентификаторыКонтрагентов, ","));
	КонецЕсли;
	
	
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "Статус", "status", СловарьСервиса.СтатусыЗаказа);
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментСозданияОт", "createdFromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментСозданияДо", "createdToTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментИзмененияСтатусаОт", "statusFromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментИзмененияСтатусаДо", "statusToTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ВариантСортировки", "sortBy");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-cust-ordrs-list.v1+json";

	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияПротоколаИзмененияЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение протокола изменения заказа поставщику из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");

	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2/history%3",
		ИдентификаторОрганизации,
		ПараметрыКоманды.ИдентификаторВСервисе,
		СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-cust-ordrs-history-list.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСозданияЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Создание заказа поставщику в сервисе'");
	ОбязательныеПараметрыКоманды = "КлючИдемпотентности,ЭлектронныйДокумент,Организация,Контрагент";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	// запрос идентификатора Бизнес Сети
	КонтрагентыБизнесСети = КонтрагентыБизнесСети(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыКоманды.Контрагент), ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	ИдентификаторКонтрагента = КонтрагентыБизнесСети[0].Идентификатор;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "supplierId", ИдентификаторКонтрагента);
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// Формирование тела запроса
	ТелоЗапроса = ПараметрыКоманды.ЭлектронныйДокумент;
	
	НормализоватьДанныеПоСхеме(ТелоЗапроса, ОписаниеСтруктурыДанныхЗаказа(), Ложь);
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;

	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "POST";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	Результат.ТелоОтветаИгнорируется = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());

	Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторПользователя) Тогда
		Результат.Заголовки.Вставить(ИмяЗаголовкаИдентификаторМенеджера(), ПараметрыКоманды.ИдентификаторПользователя);
	КонецЕсли;
	
	// Ключем идемпотентности будет выступать уникальный идентификатор прикладного объекта
	Результат.Заголовки.Вставить(ИмяЗаголовкаКлючИдемпотентности(),
		ПараметрыКоманды.КлючИдемпотентности);
	
	Результат.ДопустимыеКодыСостояния.Добавить(202);
	Результат.ДопустимыеКодыСостояния.Добавить(201);
	
	Возврат Результат
	
КонецФункции

Функция ЗапросОбновленияЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Обновление заказа поставщику в сервисе'");
	ОбязательныеПараметрыКоманды = "ЭлектронныйДокумент,ИдентификаторВСервисе,Организация";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "rev", ПараметрыКоманды.НомерРевизии);
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
	ТелоЗапроса = ПараметрыКоманды.ЭлектронныйДокумент;
	
	НормализоватьДанныеПоСхеме(ТелоЗапроса, ОписаниеСтруктурыДанныхЗаказа(), Ложь);
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "PUT";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	Результат.ТелоОтветаИгнорируется = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторПользователя) Тогда
		Результат.Заголовки.Вставить(ИмяЗаголовкаИдентификаторМенеджера(), ПараметрыКоманды.ИдентификаторПользователя);
	КонецЕсли;
	
	Результат.ДопустимыеКодыСостояния.Добавить(202);
	
	Возврат Результат
	
КонецФункции

Функция ЗапросИзмененияСтатусаЗаказаПоставщику(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Изменение статуса заказа поставщику в сервисе'");
	ОбязательныеПараметрыКоманды = "ИдентификаторВСервисе,Организация,Инструкция";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "rev", ПараметрыКоманды.НомерРевизии);
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/customer/orders/%2/status%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "PATCH";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ТелоОтветаИгнорируется = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = ТерминСервиса(СловарьСервиса.КомандыСервиса, ПараметрыКоманды.Инструкция);
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-cust-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());

	Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторПользователя) Тогда
		Результат.Заголовки.Вставить(ИмяЗаголовкаИдентификаторМенеджера(), ПараметрыКоманды.ИдентификаторПользователя);
	КонецЕсли;
	
	Результат.ДопустимыеКодыСостояния.Добавить(202);
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ЗаказКлиента

Функция ЗапросПолученияПечатнойФормыЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение данных заказа клиента из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии", "versionId");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ВозвратДвоичныхДанныхТела = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-ordrs-print-metadata+mxl.v1+json";

	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияПечатнойФормыСравненияВерсийЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение печатной формы сравнения версий заказа клиента из сервиса'");
	ОбязательныеПараметрыКоманды = "Организация,ИдентификаторВСервисе,ИдентификаторВерсии1";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии1", "fromVersionId");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии2", "toVersionId");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2/comparison%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);;
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-ordrs-comparison-mxl+metadata.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияСтатусаЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение статуса заказа клиента из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2/status",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе);
		
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-suppl-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	
	// определение параметров восстановления тела ответа из двоичных данных
	Результат.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	Результат.ПараметрыВосстановления.СвойстваТипаДата = 
		"created,currentStatusDate,supplierFulfilmentExtendedStatusDate";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияДанныхЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение данных заказа клиента из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВерсии", "versionId");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-suppl-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());

	// определение параметров восстановления тела ответа из двоичных данных
	Результат.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	Результат.ПараметрыВосстановления.СвойстваТипаДата = 
		"date,created,currentStatusDate,supplierFulfilmentExtendedStatusDate,expectedDeliveryDate";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияСпискаЗаказовКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Получение заказов клиента из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	Если ПараметрыКоманды.Свойство("Контрагенты") И ЗначениеЗаполнено(ПараметрыКоманды.Контрагенты) Тогда
		КонтрагентыБизнесСети = КонтрагентыБизнесСети(ПараметрыКоманды.Контрагенты, ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
		
		ИдентификаторыКонтрагентов = КонтрагентыБизнесСети.ВыгрузитьКолонку("Идентификатор");

		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "supplierIds", СтрСоединить(ИдентификаторыКонтрагентов, ","));
	КонецЕсли;
	
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "Статус", "status", СловарьСервиса.СтатусыЗаказа);
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментСозданияОт", "createdFromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментСозданияДо", "createdToTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментИзмененияСтатусаОт", "statusFromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "МоментИзмененияСтатусаДо", "statusToTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ВариантСортировки", "sortBy");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-suppl-ordrs-list.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияПротоколаИзмененияЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение протокола изменения заказа поставщику из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2/history%3",
		ИдентификаторОрганизации,
		ПараметрыКоманды.ИдентификаторВСервисе,
		СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-suppl-ordrs-history-list.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросОбновленияЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	ИмяЗапроса = НСтр("ru = 'Обновление заказа клиента в сервисе'");
	ОбязательныеПараметрыКоманды = "ЭлектронныйДокумент,ИдентификаторВСервисе,Организация";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "rev", ПараметрыКоманды.НомерРевизии);

	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
	ТелоЗапроса = ПараметрыКоманды.ЭлектронныйДокумент;
	
	НормализоватьДанныеПоСхеме(ТелоЗапроса, ОписаниеСтруктурыДанныхЗаказа(), Ложь);
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "PUT";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	Результат.ТелоОтветаИгнорируется = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = СтрШаблон("application/vnd-1cbn-suppl-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-suppl-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторПользователя) Тогда
		Результат.Заголовки.Вставить(ИмяЗаголовкаИдентификаторМенеджера(), ПараметрыКоманды.ИдентификаторПользователя);
	КонецЕсли;
	
	Результат.ДопустимыеКодыСостояния.Добавить(202);
	
	Возврат Результат
	
КонецФункции

Функция ЗапросИзмененияСтатусаЗаказаКлиента(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Изменение статуса заказа клиента в сервисе'");
	ОбязательныеПараметрыКоманды = "ИдентификаторВСервисе,Организация,Инструкция";
	
	// Проверка на корректность входных параметров
	ПроверитьПараметрыКоманды(ПараметрыКоманды, ОбязательныеПараметрыКоманды, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "rev", ПараметрыКоманды.НомерРевизии);
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/supplier/orders/%2/status%3",
		ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторВСервисе, СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "PATCH";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ТелоОтветаИгнорируется = Ложь;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = ТерминСервиса(СловарьСервиса.КомандыСервиса, ПараметрыКоманды.Инструкция);
	Результат.ТипВозвращаемогоКонтента = СтрШаблон("application/vnd-1cbn-suppl-ordrs.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторПользователя) Тогда
		Результат.Заголовки.Вставить(ИмяЗаголовкаИдентификаторМенеджера(), ПараметрыКоманды.ИдентификаторПользователя);
	КонецЕсли;
	
	Результат.ДопустимыеКодыСостояния.Добавить(202);
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

#Область ИнтерфейсПоставщика

Функция ЗапросПолученияНастроекОбменаОрганизации(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение настроек обмена по организации'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/edi-settings%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-edi-settings.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросОбновленияНастроекОбмена(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Обновление настроек обмена'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/edi-settings", ИдентификаторОрганизации);
	
	// формирование тела запроса
	Покупатели = Новый Массив;
	Для Каждого Настройка Из ПараметрыКоманды.Настройки Цикл
		Если Не ЗначениеЗаполнено(Настройка.Покупатель) Тогда
			Продолжить;
		КонецЕсли;
		
		Покупатели.Добавить(Настройка.Покупатель);
	КонецЦикла;
	
	Покупатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Покупатели);
	
	КонтрагентыБизнесСети = КонтрагентыБизнесСети(Покупатели, ЕстьОшибки, ТекстОшибки);
	
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура("items", Новый Массив);
	Для Каждого Настройка Из ПараметрыКоманды.Настройки Цикл
		
		ИдентификаторБизнесСети = "";
		ДанныеБизнесСети = КонтрагентыБизнесСети.Найти(Настройка.Покупатель, "Контрагент");
		Если ДанныеБизнесСети <> Неопределено Тогда
			ИдентификаторБизнесСети = ДанныеБизнесСети.Идентификатор;
		КонецЕсли;
		
		Запись = Settings();
		Запись.buyer.bNetInternalID = ИдентификаторБизнесСети;
		Запись.settings.orderMode = ТерминСервиса(СловарьСервиса.РежимРаботыСЗаказами, Настройка.РежимРаботыСЗаказами);
		
		ТелоЗапроса.items.Добавить(Запись);
	КонецЦикла;
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = НСтр("ru = 'Обновление настроек обмена'");
	Результат.Метод = "PUT";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	Результат.ТелоОтветаИгнорируется = Истина;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = "application/vnd-1cbn-edi-settings-change.v1+json";
	
	Результат.ДопустимыеКодыСостояния.Добавить(204);
	Результат.ДопустимыеКодыСостояния.Добавить(202);
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПокупателя

Функция ЗапросПолученияНастроекОбменаКонтрагентов(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение настроек обмена контрагентов'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = "edi-settings/search";
	
	// формирование тела запроса
	КонтрагентыБизнесСети = КонтрагентыБизнесСети(ПараметрыКоманды.Контрагенты, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ТелоЗапроса = SettingsRequest();
	ТелоЗапроса.organizationId = ИдентификаторОрганизации;
	ТелоЗапроса.dateModified = XMLСтрока(ПараметрыКоманды.ДатаИзменения);
	Для Каждого КонтрагентБизнесСети Из КонтрагентыБизнесСети Цикл
		ТелоЗапроса.counterPartyIds.Добавить(КонтрагентБизнесСети.Идентификатор);
	КонецЦикла;
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "POST";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = "application/vnd-1cbn-edi-settings-request.v1+json";
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-edi-settings.v1+json";

	Возврат Результат
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиОрганизации

Функция ЗапросОбновленияНастроекОрганизации(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Обновление префикса номеров документов организации'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторПользователяСервиса = ИдентификаторПользователяСервиса(ПараметрыКоманды.ОтветственныйЗаНовыеЗаказы,
	                                                                    ПараметрыКоманды.Организация,
	                                                                    ЕстьОшибки,
	                                                                    ТекстОшибки);
	
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/settings", ИдентификаторОрганизации);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("documentNumberPrefix",                ПараметрыКоманды.Префикс);
	ТелоЗапроса.Вставить("defaultEmployeeForNewCustomerOrders", ИдентификаторПользователяСервиса);
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = НСтр("ru = 'Обновление настроек организации в сервисе'");
	Результат.Метод = "PUT";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	Результат.ТелоОтветаИгнорируется = Истина;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = "application/vnd-1cbn-settings.v1+json";
	
	Результат.ДопустимыеКодыСостояния.Добавить(204);
	
	Возврат Результат
	
КонецФункции

Функция ЗапросПолученияНастроекОрганизации(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Обновление настроек организации'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/settings", ИдентификаторОрганизации);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-settings.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторПользователяСервиса(Знач Менеджер, Знач Организация, ЕстьОшибки, ТекстОшибки) Экспорт
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ПараметрыЗапроса = НовыйПараметрыДобавленияМенеджера();
	
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.Менеджер    = Менеджер;
	
	ОтветСервиса = РезультатДобавленияМенеджера(ПараметрыЗапроса);
	
	Если ОтветСервиса.Ошибка Тогда
		ЕстьОшибки  = Истина;
		ТекстОшибки = ОтветСервиса.ТекстОшибки;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОтветСервиса.Данные;
	
КонецФункции

#КонецОбласти

#Область ЛентаСобытий

Функция ЗапросПолученияЛентыСобытийПоОрганизации(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	ИмяЗапроса = НСтр("ru = 'Получение ленты событий по организации из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	
	Если ПараметрыКоманды.Свойство("Менеджер") И ЗначениеЗаполнено(ПараметрыКоманды.Менеджер) Тогда
		
		ПараметрыЗапроса = НовыйПараметрыДобавленияМенеджера();
		ПараметрыЗапроса.Организация = ПараметрыКоманды.Организация;
		ПараметрыЗапроса.Менеджер    = ПараметрыКоманды.Менеджер;
		
		ИдентификаторМенеджера = РаботаСДаннымиEDIСлужебный.ИдентификаторПользователяСервиса(ПараметрыЗапроса);
				
		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "employeeId", ИдентификаторМенеджера);
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("Контрагент") И ЗначениеЗаполнено(ПараметрыКоманды.Контрагент) Тогда
		КонтрагентыБизнесСети = КонтрагентыБизнесСети(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыКоманды.Контрагент), ЕстьОшибки, ТекстОшибки);

		Если ЕстьОшибки Тогда
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
		
		Если КонтрагентыБизнесСети.Количество() = 0 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Контрагент %1 не зарегистрирован в Бизнес Сети'"),
				Строка(ПараметрыКоманды.Контрагент));
			
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
		
		ИдентификаторКонтрагента = КонтрагентыБизнесСети[0].Идентификатор;

		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "contractorId", ИдентификаторКонтрагента);
	КонецЕсли;
	
	Если ПараметрыКоманды.Свойство("ТипыДокументов") И ЗначениеЗаполнено(ПараметрыКоманды.ТипыДокументов) Тогда
		documentTypes = Новый Массив;
		Для Каждого ТипДокумента Из ПараметрыКоманды.ТипыДокументов Цикл
			documentTypes.Добавить(ТерминСервиса(СловарьСервиса.ТипыДокументов, ТипДокумента));
		КонецЦикла;
		
		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "documentTypes", СтрСоединить(documentTypes, ","));
	КонецЕсли;
	
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "НаправлениеСобытия", "eventsDirection",
		СловарьСервиса.НаправленияСобытий);
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "НачалоПериода", "fromTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "КонецПериода", "toTime");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ИдентификаторВСервисе", "documentId");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");
	
	УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, "sortBy", 
		Формат(ПараметрыКоманды.ВозрастающаяСортировка, "БЛ=dateDesc; БИ=dateAsc;"));
	
	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/eventslog%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Метод = "GET";
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-edi-events-log.v1+json";

	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияСводнойИнформацииПоЛентеСобытийНаДату(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение сводной информации по ленте событий на дату'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");

	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/eventslog/count/%2%3",
		ИдентификаторОрганизации,
		Формат(ПараметрыКоманды.Период, "ДФ=yyyy-MM-dd"),
		СтрокаЗапроса);
		
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-edi-events-log-count-date.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПолученияСводнойИнформацииПоЛентеСобытийЗаПериод(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение сводной информации по ленте событий за период'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = Новый Массив;
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "КоличествоАктивныхДней", "days-count");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "ПоложениеКурсора", "cursor");
	ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, ПараметрыКоманды, "РазмерСтраницы", "size");

	Если ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрШаблон("?%1", СтрСоединить(СтрокаЗапроса, "&"));
	Иначе
		СтрокаЗапроса = "";
	КонецЕсли;
	
	СтрокаЗапроса = СтрШаблон("%1/eventslog/count/last%2", ИдентификаторОрганизации, СтрокаЗапроса);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-edi-events-log-count-last.v1+json";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеСотрудниками

Функция ЗапросДобавленияНовогоМенеджера(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение заказов поставщику из сервиса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/employees", ИдентификаторОрганизации);
	
	// формирование тела запроса
	ДанныеМенеджера = НовыйДанныеМенеджера();
	ИнтеграцияССервисомEDIПереопределяемый.ЗаполнитьДанныеПользователя(ДанныеМенеджера, ПараметрыКоманды.Менеджер);
	
	ТелоЗапроса = Employee();
	ТелоЗапроса["name"]        = ДанныеМенеджера.ФИО;
	ТелоЗапроса["external-uid"] = ДанныеМенеджера.Идентификатор;
	
	Попытка
		ТелоЗапроса = СтрокаJSONИзСтруктуры(ТелоЗапроса);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "PUT";
	Результат.ПутьКДаннымВТеле = "employee-id";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.Тело = ТелоЗапроса;
	Результат.ХешТелаЗапроса = ХешЭлектронногоДокумента(ТелоЗапроса);
	
	// определение параметров восстановления тела ответа из двоичных данных
	Результат.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	Результат.ПараметрыВосстановления.ЧитатьВСоответствие = Истина;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипПередаваемогоКонтента = СтрШаблон("application/vnd-1cbn-employee.en-edi-v%1+json",
		АктуальныйВнутреннийФормат());

	Результат.ДопустимыеКодыСостояния.Добавить(202);
	Результат.ДопустимыеКодыСостояния.Добавить(204);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхроннаяОбработкаЗапросов

Функция РезультатОбработкиДанныхСервиса(Знач ИсходнаяКоманда, Знач ТипКонтента, Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	Результат = МодельСервиса;
	Если ТипКонтента = "application/vnd-1cbn-cust-ordrs.en-edi-v1.1+json" Тогда
		Результат = РасширеннаяИнформацияПоЗаказуПоставщикуИзМоделиСервиса(МодельСервиса, ЕстьОшибки, ТекстОшибки);
	ИначеЕсли ТипКонтента = "application/vnd-1cbn-suppl-ordrs.en-edi-v1.1+json" Тогда
		Результат = РасширеннаяИнформацияПоЗаказуКлиентаИзМоделиСервиса(МодельСервиса, ЕстьОшибки, ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ЗапросПолученияРезультатаАсинхроннойОбработкиКоманды(Знач ПараметрыКоманды, ЕстьОшибки, ПодробноеОписаниеОшибки = "")
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ИмяЗапроса = НСтр("ru = 'Получение результата асинхронной обработки запроса'");
	
	// запрос идентификатора Бизнес Сети
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыКоманды.Организация, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриПодготовкеЗапроса(ИмяЗапроса, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// формирование строки запроса
	СтрокаЗапроса = СтрШаблон("%1/jobs/%2", ИдентификаторОрганизации, ПараметрыКоманды.ИдентификаторЗадания);
	
	// заполнение настроек выполнения
	Результат = НовыйЗапросКСервису();
	Результат.Наименование = ИмяЗапроса;
	Результат.Метод = "GET";
	Результат.СтрокаЗапроса = СтрокаЗапроса;
	Результат.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыКоманды.Организация);
	Результат.ТипВозвращаемогоКонтента = "application/vnd-1cbn-job.v1+json";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетоды

Процедура ДобавитьПараметрСтрокиЗапроса(СтрокаЗапроса, Знач КоллекцияПараметров, Знач КлючПараметра, Знач ИмяПараметра,
		Знач ОбластьТерминов = Неопределено)
	
	ЗначениеПараметра = Неопределено;
	Если КоллекцияПараметров.Свойство(КлючПараметра, ЗначениеПараметра) Тогда
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Возврат;
		КонецЕсли;
		
		Если ОбластьТерминов <> Неопределено Тогда
			ЗначениеПараметра = ТерминСервиса(ОбластьТерминов, ЗначениеПараметра);
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
			ЗначениеПараметра = ДатаВСтрокуISO(ЗначениеПараметра);
		КонецЕсли;
		
		УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПараметраВСтрокуЗапроса(СтрокаЗапроса, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	СтрокаЗапроса.Добавить(СтрШаблон("%1=%2", ИмяПараметра, ЗначениеПараметра));
	
КонецПроцедуры

Процедура ПроверитьПараметрыКоманды(Знач ПараметрыКоманды, Знач ОбязательныеПараметры, ЕстьОшибки, ТекстОшибки)
	
	Ошибки = Новый Массив;
	ШаблонТекстаОшибки = НСтр("ru='Значение параметра запроса %1 не задано.'");
	Для Каждого ОбязательныйПараметр Из СтрРазделить(ОбязательныеПараметры, ",", Ложь) Цикл
		ЗначениеПараметра = Неопределено;
		Если Не ПараметрыКоманды.Свойство(ОбязательныйПараметр, ЗначениеПараметра)
			Или Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			
			Ошибки.Добавить(СтрШаблон(ШаблонТекстаОшибки, ОбязательныйПараметр));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Запрос

Функция НовыйЗапросКСервису()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяСервиса", ИмяСервисаEDI());                                  // Имя сервиса, к которому будет выполнен запрос.
	Результат.Вставить("Наименование", "");                                             // Полное наименование метода.
	Результат.Вставить("СтрокаЗапроса", "");                                            // Полный адрес URI метода с параметрами, задаваемыми как часть пути.
	Результат.Вставить("Метод",        "");                                             // Метод HTTP соединения, например POST. См. МетодыСоединения().
	Результат.Вставить("Заголовки", Новый Соответствие);                                // Заголовки запроса.
	Результат.Вставить("Таймаут");                                                      // Длительность ожидания ответа. Значение по умолчанию установлено в параметрах соединения,
	                                                                                    //   в этом параметре его можно переопределить для конкретного запроса.
	Результат.Вставить("ДопустимыеКодыСостояния", ДопустимыеКодыСостоянияПоУмолчанию());// Коды состояния, означающие успешное выполнение запроса.
	Результат.Вставить("Тело");                                                         // Двоичные данные или строка.
	Результат.Вставить("ХешТелаЗапроса");                                               // MD5 хеш сумма от тела запроса. Если тело не заполнено - неопределено.
	
	Результат.Вставить("ТелоОтветаИгнорируется", Ложь);                                // При чтении тела ответа вместо структур использовать соответствия.
	Результат.Вставить("ВозвратДвоичныхДанныхТела", Ложь);                              // Вернуть тело ответа в виде двоичных данных.
	Результат.Вставить("ПутьКДаннымВТеле");                                             // Путь к возвращаемым данным.
	Результат.Вставить("ПараметрыАвторизации");                                         // Параметры авторизации в сервисе 1C:EDI
	Результат.Вставить("ТипПередаваемогоКонтента");
	Результат.Вставить("ТипВозвращаемогоКонтента");
	
	Результат.Вставить("ПараметрыВосстановления");                                      // Параметры парсинга JSON тела ответа
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыВосстановления()
	
	Результат = Новый Структура;
	Результат.Вставить("СвойстваТипаДата", "");
	Результат.Вставить("ФорматДаты", ФорматДатыJSON.ISO);
	Результат.Вставить("ЧитатьВСоответствие", Ложь);
	Результат.Вставить("ОписаниеОбработчика", НовыйОбработчикВосстановления());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОбработчикВосстановления()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", Неопределено);
	Результат.Вставить("Менеджер", Неопределено);
	Результат.Вставить("ДополнительныеПараметры", Неопределено);

	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапрос(Знач ЗапросКСервису, ЕстьОшибки,
	ОжидатьОтвета = Ложь, ПодробноеОписаниеОшибки = "", КоличествоПопытокВыполнения = 0)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализация параметров соединения.
	ПараметрыСоединения = ИнтеграцияССервисомEDIСлужебныйПовтИсп.ПараметрыСоединенияССервисом(ЗапросКСервису.ИмяСервиса);
	
	
	// Если в запросе установлен таймаут, переопределяем значение в параметрах соединения
	Если ЗначениеЗаполнено(ЗапросКСервису.Таймаут) Тогда
		ПараметрыСоединения.Таймаут = ЗапросКСервису.Таймаут;
	КонецЕсли;
	
	
	// Инициализация соединения.
	Соединение = НовоеСоединениеССервером(ПараметрыСоединения, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	
	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ПолныйАдресЗапроса(ПараметрыСоединения, ЗапросКСервису),
		ЗапросКСервису.Заголовки);
		
		
	// Заполнение стандартных заголовков
	Если ЗначениеЗаполнено(ЗапросКСервису.ПараметрыАвторизации) Тогда
		ДанныеТокена = ТокенАвторизации(ЗапросКСервису.ПараметрыАвторизации, ЕстьОшибки, ТекстОшибки);
		Если ЕстьОшибки Тогда
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
	
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаСтрокаАвторизации(), ДанныеТокена.ТокенДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросКСервису.ТипПередаваемогоКонтента) И ЗапросКСервису.Метод <> "GET" Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипПередаваемогоКонтента(),
			ЗапросКСервису.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросКСервису.ТипВозвращаемогоКонтента) Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипВозвращаемогоКонтента(),
			ЗапросКСервису.ТипВозвращаемогоКонтента);
	КонецЕсли;
	
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросКСервису.Тело) Тогда
		Если ТипЗнч(ЗапросКСервису.Тело) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросКСервису.Тело);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросКСервису.Тело, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	
	// Выполнение запроса
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(ЗапросКСервису.Метод, HTTPЗапрос);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='не удалось выполнить HTTP запрос по причине: %1'",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// Разбор тела ответа
	Результат = ОбработатьДанныеОтвета(ЗапросКСервису, HTTPОтвет, ОжидатьОтвета,
		ЕстьОшибки, ТекстОшибки, КоличествоПопытокВыполнения);
		
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат;
	
КонецФункции

Функция ПолныйАдресЗапроса(Знач ПараметрыСоединения, Знач ЗапросКСервису)
	
	Если ПустаяСтрока(ПараметрыСоединения.ПутьНаСервере) Тогда
		Возврат ЗапросКСервису.СтрокаЗапроса;
	КонецЕсли;
	
	Возврат СтрШаблон("%1/%2", ПараметрыСоединения.ПутьНаСервере, ЗапросКСервису.СтрокаЗапроса);
	
КонецФункции

Функция ДопустимыеКодыСостоянияПоУмолчанию()
	
	Результат = Новый Массив;
	Результат.Добавить(200);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатаЗапроса

Функция НовыйРезультатВыполненияКоманды()
	
	Результат = Новый Структура;
	Результат.Вставить("Данные");
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("ОжидатьОтветаСервиса", Ложь);
	Результат.Вставить("ИдентификаторЗаданияСервиса", "");
	Результат.Вставить("ХешДокументаСервиса", "");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВыполненКорректно(Знач ЗапросКСервису, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросКСервису.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодстрокиОшибки = Новый Массив;
	Если ЕстьПодробноеОписаниеОшибки(HTTPОтвет) Тогда
		ОписаниеОшибки = СтруктураИзПотокаJSON(HTTPОтвет.ПолучитьТелоКакПоток());
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='код состояния %1 - %2'"), XMLСтрока(КодСостояния), ОписаниеОшибки.title));
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='компонента сервиса: %1'"), ОписаниеОшибки.type));
		
		ИдентификаторТрассировки = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "traceId");
		Если ЗначениеЗаполнено(ИдентификаторТрассировки) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='идентификатор трассировки: %1'"), ИдентификаторТрассировки));
		КонецЕсли;
		
		ПодробноеОписание = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "detail");
		Если ЗначениеЗаполнено(ПодробноеОписание) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='подробное описание: %1'"), ПодробноеОписание));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтандартныеТекстыОшибокHTTPЗапросов().Получить(КодСостояния);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КодСостояния >= 500 Тогда
				ТекстОшибки = НСтр("ru = 'внутренняя ошибка сервиса'");
			ИначеЕсли КодСостояния >= 400 Тогда
				ТекстОшибки = НСтр("ru = 'ошибка параметров запроса'");
			Иначе
				ТекстОшибки = НСтр("ru = 'неизвестная ошибка'");
			КонецЕсли;
		КонецЕсли;
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='код состояния %1 - %2'"), XMLСтрока(КодСостояния), ТекстОшибки));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПодстрокиОшибки, ", ");
	
	Возврат Ложь;
	
КонецФункции

Функция ОбработатьДанныеОтвета(Знач ЗапросКСервису, Знач HTTPОтвет, ОжидатьОтвета,
	ЕстьОшибки, ТекстОшибки = "", КоличествоПопытокВыполнения = 0)
	
	ЕстьОшибки = Ложь;
	ОжидатьОтвета = Ложь;
	Результат = Неопределено;
	
	Если ИстекСрокЖизниТокенаАвторизации(HTTPОтвет)
		И КоличествоПопытокВыполнения <= КоличествоПопытокВыполненияHTTPЗапроса() Тогда
	
		Возврат ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ОжидатьОтвета, ТекстОшибки, КоличествоПопытокВыполнения + 1);
	КонецЕсли;
	
	Если Не ЗапросВыполненКорректно(ЗапросКСервису, HTTPОтвет, ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
			
		Возврат Неопределено;
	КонецЕсли;
	
	Если АсинхронноеВыполнениеЗапроса(HTTPОтвет) Тогда
		ОжидатьОтвета = Истина;

		Возврат ИдентификаторАсинхронногоЗадания(HTTPОтвет, ЕстьОшибки, ТекстОшибки)
	КонецЕсли;
	
	Если ЗапросКСервису.ТелоОтветаИгнорируется Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Если ЗапросКСервису.ВозвратДвоичныхДанныхТела Тогда
			Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			ПотокДанных = HTTPОтвет.ПолучитьТелоКакПоток();
			Результат = СтруктураИзПотокаJSON(ПотокДанных, ЗапросКСервису.ПараметрыВосстановления);
		КонецЕсли;
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = СтрШаблон(НСтр("ru='не удалось прочитать тело сообщения: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
	КонецПопытки;
	
	Если Не ПустаяСтрока(ЗапросКСервису.ПутьКДаннымВТеле) Тогда
		Попытка
			Результат = ЗначениеКоллекцииПоАбсолютномуПути(Результат, ЗапросКСервису.ПутьКДаннымВТеле, ЕстьОшибки);
		Исключение
			ЕстьОшибки = Истина;
		КонецПопытки;
		
		Если ЕстьОшибки Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='в теле отсутствует ключ %1'"), ЗапросКСервису.ПутьКДаннымВТеле);
			
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИстекСрокЖизниТокенаАвторизации(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.КодСостояния = КодСостоянияПроблемыСАвторизацией();
	
КонецФункции

Функция АсинхронноеВыполнениеЗапроса(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.КодСостояния = КодСостоянияАсинхронноеВыполнениеЗапроса();
	
КонецФункции

Функция ИдентификаторАсинхронногоЗадания(Знач HTTPОтвет, ЕстьОшибки, ТекстОшибки = "")
	
	СсылкаСервиса = HTTPОтвет.Заголовки.Получить("Location");
	Если СсылкаСервиса = Неопределено Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='в заголовках ответа не найдена ссылка на асинхронных обработчик'");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(СсылкаСервиса, СтрНайти(СсылкаСервиса, "/", НаправлениеПоиска.СКонца) +1);
	
КонецФункции

#КонецОбласти

#Область РаботаСОшибками

Функция ЕстьПодробноеОписаниеОшибки(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаТипПередаваемогоКонтента()) = ТипКонтентаОшибка();
	
КонецФункции

Функция ЗафиксироватьОшибкуВЗапросе(Знач ПараметрыСоединения, Знач ЗапросКСервису,
	Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка взаимодействия с сервисом 1С:EDI'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Хост: %1'"), ПараметрыСоединения.Сервер));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1 %2.'"), ЗапросКСервису.Метод,
		ПолныйАдресЗапроса(ПараметрыСоединения, ЗапросКСервису)));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СобытиеЖурналаРегистрацииСервисEDI(), ЗапросКСервису.Наименование),УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки

КонецФункции

Функция ЗафиксироватьОшибкуПриПодготовкеЗапроса(Знач ИмяЗапроса, Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка формирования параметров запроса к сервису 1С:EDI'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1.'"), ИмяЗапроса));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СобытиеЖурналаРегистрацииСервисEDI(), ИмяЗапроса), УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки

КонецФункции

Функция ЗафиксироватьОшибкуПриОбработкеРезультатаЗапроса(Знач ИмяЗапроса, Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка обработки результата запроса к сервису 1С:EDI'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1.'"), ИмяЗапроса));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СобытиеЖурналаРегистрацииСервисEDI(), ИмяЗапроса), УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки

КонецФункции

Функция ЗафиксироватьПрочуюОшибку(Знач МестоВозникновения, Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка блока интеграции с сервисом 1С:EDI'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Место возникновения: %1.'"), МестоВозникновения));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СобытиеЖурналаРегистрацииСервисEDI(), МестоВозникновения), УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки

КонецФункции

Функция СтандартныеТекстыОшибокHTTPЗапросов()

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'ошибка в запросе.'", КодЯзыка));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'неверные данные аутентификации.'", КодЯзыка));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'у клиента нет доступа к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'на сервере нет ресурса по указанному URI.'", КодЯзыка));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'указанный метод нельзя применить к текущему ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'запрошенный URI не может удовлетворить переданным в заголовке
		|характеристикам.'", КодЯзыка));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'для доступа к серверу требуется аутентификация
		|для прокси-сервера'", КодЯзыка));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'время ожидания сервером передачи от клиента истекло.'", КодЯзыка));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'запрос не может быть выполнен из-за конфликтного
		|обращения к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'ресурс был удален и теперь недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'не указан объем передаваемых данных в заголовке.'", КодЯзыка));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'ни одно из условных полей заголовка запроса не было выполнено.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'слишком большой размер тела запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'слишком длинный URL.'", КодЯзыка));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'контент переданного типа не поддерживается.'", КодЯзыка));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'имеется логическая ошибка, из-за которой невозможно
		|произвести операцию.'", КодЯзыка));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'ресурс заблокирован.'", КодЯзыка));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'необходимо обновить протокол.'", КодЯзыка));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'слишком много запросов в единицу времени.'", КодЯзыка));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'превышена допустимая длина заголовков.'", КодЯзыка));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'запрашиваемый адрес недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'поступило недостаточно информации.'", КодЯзыка));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'внутренняя ошибка сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'сервер не поддерживает возможностей, необходимых
		|для обработки запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'сервер, выступая в роли шлюза или прокси-сервера,
		|получил недействительное ответное сообщение от вышестоящего сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'сервер временно не имеет возможности обрабатывать запросы
		|по техническим причинам.'", КодЯзыка));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'сервер в роли шлюза или прокси-сервера не дождался ответа
		|от вышестоящего сервера для завершения текущего запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'сервер не поддерживает указанную в запросе
		|версию протокола HTTP.'", КодЯзыка));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'не хватает места для выполнения текущего запроса.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'на сервере отсутствует расширение, которое желает
		|использовать клиент.'", КодЯзыка));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'необходимо авторизоваться в сети провайдера.'", КодЯзыка));
	
	Возврат СоответствиеКодов;
	
КонецФункции

#КонецОбласти

#Область ФормализацияЗначений

Функция АдресСервисаEDI()
	
	Возврат "https://edi.1cfresh.com:443/api"
	
КонецФункции

Функция ИмяСервисаEDI()
	
	Возврат "СервисEDI";
	
КонецФункции

Функция ИмяЗаголовкаСтрокаАвторизации()
	
	Возврат "Authorization"
	
КонецФункции

Функция ИмяЗаголовкаИдентификаторМенеджера()
	
	Возврат "vnd-1cbn-employee-id";
	
КонецФункции

Функция ЗащищенныйПротоколПередачиДанных()
	
	Возврат "https";
	
КонецФункции

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

Функция ИмяЗаголовкаКлючИдемпотентности()
	
	Возврат "vnd-1cbn-idempotency-key";
	
КонецФункции

Функция ТипКонтентаОшибка()
	
	Возврат "application/problem+json"
	
КонецФункции

Функция КодСостоянияУспешногоВыполненияАсинхронногоОбработчика()
	
	Возврат 10200;
	
КонецФункции

Функция КодСостоянияОжидатьВыполнениеАсинхронногоОбработчика()
	
	Возврат 10202;
	
КонецФункции

Функция АктуальныйВнутреннийФормат()
	
	Возврат "1.1"
	
КонецФункции

Функция КодСостоянияАсинхронноеВыполнениеЗапроса()
	
	Возврат 202
	
КонецФункции

Функция КодСостоянияПроблемыСАвторизацией()
	
	Возврат 401
	
КонецФункции

Функция КоличествоПопытокВыполненияHTTPЗапроса()
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область СхемыДанных

#Область КлючевыеСвойстваОбъектов

Функция Organization()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура; 
	Результат.Вставить("name", НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("inn",  НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("kpp",  НовыйСвойствоСхемы(Типы.Строка));
	
	Возврат Результат
	
КонецФункции

Функция SelfEmployed()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура; 
	Результат.Вставить("name",       НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("firstName",  НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	Результат.Вставить("lastName",   НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	Результат.Вставить("middleName", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	Результат.Вставить("inn",        НовыйСвойствоСхемы(Типы.Строка));
	
	Возврат Результат
	
КонецФункции

Функция ForeignOrganization()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("countryCode", НовыйСвойствоСхемы(Типы.КодОКСМ));
	Результат.Вставить("tin",         НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("name",        НовыйСвойствоСхемы(Типы.Строка));
	
	Возврат Результат
	
КонецФункции

Функция ContactPerson()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("name",      НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("telNumber", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	Результат.Вставить("email",     НовыйСвойствоСхемы(Типы.Строка));
	
	Возврат Результат
	
КонецФункции

Функция BankAccount()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("bik",    НовыйСвойствоСхемы(Типы.БИК));
	Результат.Вставить("number", НовыйСвойствоСхемы(Типы.НомерБанковскогоСчета));
	
	Возврат Результат;
	
КонецФункции

Функция Point()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("name",        НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("gln",         НовыйСвойствоСхемы(Типы.GLN,,Ложь));
	Результат.Вставить("fiasCode",    НовыйСвойствоСхемы(Типы.Идентификатор,,Ложь));
	Результат.Вставить("placement",   НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	Результат.Вставить("addressInfo", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	
	Возврат Результат
	
КонецФункции

Функция Package()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("description", НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("size",        НовыйСвойствоСхемы(Типы.ЦелоеПоложительноеЧисло));
	Результат.Вставить("gtin",        НовыйСвойствоСхемы(Типы.GTIN,,Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция Unit()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("name", НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("OKEI", НовыйСвойствоСхемы(Типы.КодОКЕИ,,Ложь));
	Результат.Вставить("gtin", НовыйСвойствоСхемы(Типы.GTIN,,Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция Ref1CNomenclature()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	НоменклатураСервиса = Новый Структура;
	НоменклатураСервиса.Вставить("id",               НовыйСвойствоСхемы(Типы.Строка));
	НоменклатураСервиса.Вставить("characteristicId", НовыйСвойствоСхемы(Типы.Строка,,Ложь));

	Возврат НоменклатураСервиса;
	
КонецФункции

Функция Manufacturer()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("name", НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("tradeMark", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	Результат.Вставить("partNumber", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция Currency()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("code", НовыйСвойствоСхемы(Типы.КодОКВ));
	Результат.Вставить("name", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Заказ

Функция PaymentScheduleLine()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("option",  НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("kind",    НовыйСвойствоСхемы(Типы.Строка));
	Результат.Вставить("date",    НовыйСвойствоСхемы(Типы.Дата));
	Результат.Вставить("percent", НовыйСвойствоСхемы(Типы.Процент));
	Результат.Вставить("amount",  НовыйСвойствоСхемы(Типы.Сумма));
	Результат.Вставить("delay",   НовыйСвойствоСхемы(Типы.ЦелоеПоложительноеЧисло,,Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция ItemLine()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	ОписаниеТовара = Новый Структура;
	ОписаниеТовара.Вставить("lineId",               НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	ОписаниеТовара.Вставить("description",          НовыйСвойствоСхемы(Типы.Строка));
	ОписаниеТовара.Вставить("extendedDescription",  НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	ОписаниеТовара.Вставить("itemType",             НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	ОписаниеТовара.Вставить("partNumber",           НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	ОписаниеТовара.Вставить("internalBuyerCode",    НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	ОписаниеТовара.Вставить("internalSellerCode",   НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	ОписаниеТовара.Вставить("unit",                 НовыйСвойствоСхемы(Типы.Структура, Unit()));
	ОписаниеТовара.Вставить("package",              НовыйСвойствоСхемы(Типы.Структура, Package(), Ложь));
	ОписаниеТовара.Вставить("quantity",             НовыйСвойствоСхемы(Типы.Количество));
	ОписаниеТовара.Вставить("price",                НовыйСвойствоСхемы(Типы.Сумма));
	ОписаниеТовара.Вставить("expectedDeliveryDate", НовыйСвойствоСхемы(Типы.Дата,,Ложь));
	ОписаниеТовара.Вставить("amount",               НовыйСвойствоСхемы(Типы.Сумма));
	ОписаниеТовара.Вставить("taxRate",              НовыйСвойствоСхемы(Типы.Строка));
	ОписаниеТовара.Вставить("taxAmount",            НовыйСвойствоСхемы(Типы.Сумма));
	ОписаниеТовара.Вставить("manufacturer",         НовыйСвойствоСхемы(Типы.Структура, Manufacturer(), Ложь));
	ОписаниеТовара.Вставить("ref1CNomenclature",    НовыйСвойствоСхемы(Типы.Структура, Ref1CNomenclature(), Ложь));
	ОписаниеТовара.Вставить("gtins",                НовыйСвойствоСхемы(Типы.Массив, Типы.GTIN, Ложь));

	Возврат ОписаниеТовара;
	
КонецФункции

Функция TermsAndConditions()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("itemsInTermsOf",         НовыйСвойствоСхемы(Типы.ЦелоеПоложительноеЧисло));
	Результат.Вставить("currency",               НовыйСвойствоСхемы(Типы.Структура, Currency()));
	Результат.Вставить("priceTaxIncluded",       НовыйСвойствоСхемы(Типы.Булево));
	Результат.Вставить("taxed",                  НовыйСвойствоСхемы(Типы.Булево));
	Результат.Вставить("expectedDeliveryDate",   НовыйСвойствоСхемы(Типы.Дата,,Ложь));
	Результат.Вставить("wholeOrderDeliveryOnly", НовыйСвойствоСхемы(Типы.Булево));
	
	Возврат Результат;
	
КонецФункции

Функция Summary()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("totalAmount", НовыйСвойствоСхемы(Типы.Сумма));
	Результат.Вставить("totalLines",  НовыйСвойствоСхемы(Типы.ЦелоеПоложительноеЧисло));
	
	Возврат Результат;
	
КонецФункции

Функция Delivery()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("point", НовыйСвойствоСхемы(Типы.Структура, Point()));
	Результат.Вставить("form", НовыйСвойствоСхемы(Типы.ЦелоеПоложительноеЧисло));
	Результат.Вставить("additionalInfo", НовыйСвойствоСхемы(Типы.Строка,,Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция Buyer()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("organization",        НовыйСвойствоСхемы(Типы.Структура, Organization(), Ложь));
	Результат.Вставить("selfEmployed",        НовыйСвойствоСхемы(Типы.Структура, SelfEmployed(), Ложь));
	Результат.Вставить("foreignOrganization", НовыйСвойствоСхемы(Типы.Структура, ForeignOrganization(), Ложь));
	Результат.Вставить("contactPerson",       НовыйСвойствоСхемы(Типы.Структура, ContactPerson(), Ложь));
	Результат.Вставить("gln",                 НовыйСвойствоСхемы(Типы.GLN,,Ложь));
	Результат.Вставить("bNetInternalID",      НовыйСвойствоСхемы(Типы.Идентификатор));
	
	Возврат Результат;
	
КонецФункции

Функция Seller()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("organization",        НовыйСвойствоСхемы(Типы.Структура, Organization(), Ложь));
	Результат.Вставить("selfEmployed",        НовыйСвойствоСхемы(Типы.Структура, SelfEmployed(), Ложь));
	Результат.Вставить("foreignOrganization", НовыйСвойствоСхемы(Типы.Структура, ForeignOrganization(), Ложь));
	Результат.Вставить("contactPerson",       НовыйСвойствоСхемы(Типы.Структура, ContactPerson(), Ложь));
	Результат.Вставить("gln",                 НовыйСвойствоСхемы(Типы.GLN,,Ложь));
	Результат.Вставить("bNetInternalID",      НовыйСвойствоСхемы(Типы.Идентификатор));
	Результат.Вставить("bankAccount",         НовыйСвойствоСхемы(Типы.Структура, BankAccount(), Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция Parties()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("buyer",  НовыйСвойствоСхемы(Типы.Структура, Buyer()));
	Результат.Вставить("seller", НовыйСвойствоСхемы(Типы.Структура, Seller()));
	Результат.Вставить("invoicee", НовыйСвойствоСхемы(Типы.Структура, Buyer()));
	
	Возврат Результат;
	
КонецФункции

Функция NumberDate()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("date", НовыйСвойствоСхемы(Типы.Дата));
	Результат.Вставить("number", НовыйСвойствоСхемы(Типы.НомерДокумента));
	
	Возврат Результат;
	
КонецФункции

Функция DocumentHeader()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("id", НовыйСвойствоСхемы(Типы.Идентификатор));
	Результат.Вставить("sellerNumberDate", НовыйСвойствоСхемы(Типы.Структура, NumberDate(), Ложь));
	Результат.Вставить("buyerNumberDate", НовыйСвойствоСхемы(Типы.Структура, NumberDate(), Ложь));
	
	Возврат Результат;
	
КонецФункции

Функция Order()
	
	Типы = ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
	Результат = Новый Структура;
	Результат.Вставить("documentHeader",     НовыйСвойствоСхемы(Типы.Структура, DocumentHeader(), Ложь));
	Результат.Вставить("sellerNumberDate",   НовыйСвойствоСхемы(Типы.Структура, NumberDate(), Ложь));
	Результат.Вставить("buyerNumberDate",    НовыйСвойствоСхемы(Типы.Структура, NumberDate(), Ложь));
	Результат.Вставить("parties",            НовыйСвойствоСхемы(Типы.Структура, Parties()));
	Результат.Вставить("delivery",           НовыйСвойствоСхемы(Типы.Структура, Delivery()));
	Результат.Вставить("itemLines",          НовыйСвойствоСхемы(Типы.Массив, ItemLine()));
	Результат.Вставить("termsAndConditions", НовыйСвойствоСхемы(Типы.Структура, TermsAndConditions()));
	Результат.Вставить("paymentSchedule",    НовыйСвойствоСхемы(Типы.Массив, PaymentScheduleLine(), Ложь));
	Результат.Вставить("summary",            НовыйСвойствоСхемы(Типы.Структура, Summary()));
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция Employee()
	
	Модель = Новый Соответствие;
	Модель.Вставить("name", "");
	Модель.Вставить("external-uid", "");
	
	Возврат Модель;
	
КонецФункции

#КонецОбласти

#Область Настройки

Функция Settings()
	
	Модель = Новый Структура;
	Модель.Вставить("buyer", Новый Структура("bNetInternalID", ""));
	Модель.Вставить("settings", Новый Структура("orderMode", 1));
	
	Возврат Модель;
	
КонецФункции

Функция SettingsRequest()

	Модель = Новый Структура;
	Модель.Вставить("organizationId", "");
	Модель.Вставить("dateModified", "");
	Модель.Вставить("counterPartyIds", Новый Массив);
	
	Возврат Модель;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция НовыйСвойствоСхемы(Знач ТипСвойства, Знач СхемаСвойства = Неопределено,
	Знач ОбязательноКЗаполнению = Истина)
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", СхемаСвойства);
	Результат.Вставить("Тип", ТипСвойства);
	Результат.Вставить("Обязательно", ОбязательноКЗаполнению);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПреобразованиеДанных

#Область Получение

#Область РеестрДокументов

Функция РеестрДокументовИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");
	
	СписокДокументов = Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("ТипДокумента",                    Типы().ТипДокумента);
	СписокДокументов.Колонки.Добавить("ИдентификаторВСервисе",           Типы().Идентификатор);
	СписокДокументов.Колонки.Добавить("НомерДокумента",                  Типы().НомерДокумента);
	СписокДокументов.Колонки.Добавить("ДатаДокумента",                   Типы().Дата);
	СписокДокументов.Колонки.Добавить("Организация",                     Типы().ОрганизацияБизнесСеть);
	СписокДокументов.Колонки.Добавить("ОрганизацияИдентификатор",        Типы().Идентификатор);
	СписокДокументов.Колонки.Добавить("Контрагент",                      Типы().КонтрагентБизнесСеть);
	СписокДокументов.Колонки.Добавить("КонтрагентИдентификатор",         Типы().Идентификатор);
	СписокДокументов.Колонки.Добавить("Валюта",                          Типы().Валюта);
	СписокДокументов.Колонки.Добавить("Сумма",                           Типы().Число);
	СписокДокументов.Колонки.Добавить("Менеджер",                        Типы().ПользовательEDI);
	СписокДокументов.Колонки.Добавить("ВариантУказанияНоменклатуры",     Типы().ВариантыУказанияНоменклатуры);
	СписокДокументов.Колонки.Добавить("ДатаПоследнегоИзменения",         Типы().Дата);
	
	СписокДокументов.Колонки.Добавить("ДатаСоздания",                    Типы().Дата);
	СписокДокументов.Колонки.Добавить("НомерАктуальнойВерсии",           Типы().Ревизия);
	СписокДокументов.Колонки.Добавить("ТекущийСтатус",                   Типы().СтатусЗаказа);
	СписокДокументов.Колонки.Добавить("ДатаТекущегоСтатуса",             Типы().Дата);
	СписокДокументов.Колонки.Добавить("ПредыдущийСтатус",                Типы().СтатусЗаказа);
	СписокДокументов.Колонки.Добавить("ПоследнееДействие",               Типы().ДействиеУчастника);
	СписокДокументов.Колонки.Добавить("СторонаВыполнившаяДействие",      Типы().СторонаУчастник);
	СписокДокументов.Колонки.Добавить("СогласованнаяВерсияПоставщика",   Типы().Идентификатор);
	СписокДокументов.Колонки.Добавить("СогласованнаяВерсияПокупателя",   Типы().Идентификатор);
	СписокДокументов.Колонки.Добавить("ПлановаяДатаВыполнения",          Типы().Дата);
	СписокДокументов.Колонки.Добавить("УточнениеСостоянияПоДаннымСтороныУчастника",     Типы().СтроковоеПредставление);
	СписокДокументов.Колонки.Добавить("ДатаУточнениеСостоянияПоДаннымСтороныУчастника", Типы().Дата);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = СписокДокументов.Добавить();
		НоваяЗапись.ТипДокумента = ЗначениеТермина(СловарьСервиса.ТипыДокументов,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "documentType"));
		НоваяЗапись.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "id");
		НоваяЗапись.НомерДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "number");
		НоваяЗапись.ДатаДокумента = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "date"));
		НоваяЗапись.ОрганизацияИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "organization.bNetInternalID");
		НоваяЗапись.Организация = ОрганизацияБизнесСети(НоваяЗапись.ОрганизацияИдентификатор);
		НоваяЗапись.КонтрагентИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "contractor.bNetInternalID");
		НоваяЗапись.Валюта = ВалютаИзМоделиСервиса(ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "currency.code"));
		НоваяЗапись.Сумма = ЧислоИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "amount"));
		НоваяЗапись.ДатаСоздания = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.created"));
		НоваяЗапись.НомерАктуальнойВерсии = ЗначениеКоллекцииПоАбсолютномуПути(
			ДокументСервиса, "status.revision");
		НоваяЗапись.ТекущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.currentStatus"));
		НоваяЗапись.ДатаТекущегоСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.currentStatusDate"));
		НоваяЗапись.ПредыдущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.previoustStatus"));
		НоваяЗапись.ПоследнееДействие = ЗначениеТермина(СловарьСервиса.ДействияУчастников,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.lastEvent"));
		НоваяЗапись.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.lastEventInitiator"));
		НоваяЗапись.СогласованнаяВерсияПокупателя =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.customerApprovedVersionId");
		НоваяЗапись.СогласованнаяВерсияПоставщика =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierApprovedVersionId");
		НоваяЗапись.УточнениеСостоянияПоДаннымСтороныУчастника =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierFulfilmentExtendedStatus");
		НоваяЗапись.ДатаУточнениеСостоянияПоДаннымСтороныУчастника = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierFulfilmentExtendedStatusDate"));
		НоваяЗапись.Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
		НоваяЗапись.ДатаПоследнегоИзменения = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.modified"));
		НоваяЗапись.ПлановаяДатаВыполнения = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "expectedDeliveryDate"));
			
		ВариантыУказанияНоменклатуры = СловарьСервиса.ВариантыУказанияНоменклатурыПоставщика;
		Если ОрганизацияЯвляетсяПокупателем(НоваяЗапись.ТипДокумента) Тогда
			ВариантыУказанияНоменклатуры = СловарьСервиса.ВариантыУказанияНоменклатурыПокупателя;
		КонецЕсли;
					
		НоваяЗапись.ВариантУказанияНоменклатуры = ЗначениеТермина(ВариантыУказанияНоменклатуры,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "itemsInTermsOf"));

	КонецЦикла;
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		СписокДокументов.ВыгрузитьКолонку("КонтрагентИдентификатор")));
		
	Если ДанныеКонтрагентов <> Неопределено Тогда
		Для Каждого ЗаписьСписка Из СписокДокументов Цикл
			ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСписка.КонтрагентИдентификатор, "Идентификатор");
			
			Если ДанныеКонтрагента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Контрагент = ДанныеКонтрагента.Контрагент;
		КонецЦикла;
	КонецЕсли;
		
	Результат.Список = СписокДокументов;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказПоставщику

Функция ДанныеЗаказаПоставщикуИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	ЕстьОшибки = Ложь;
	
	ДанныеДокумента = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "data", ЕстьОшибки);
	Если ЕстьОшибки Тогда
		ТекстОшибки = НСтр("ru='В ответе сервиса отсутствуют данные документа.'");
		
		Возврат Неопределено;
	КонецЕсли;
	
	НормализоватьДанныеПоСхеме(ДанныеДокумента, ОписаниеСтруктурыДанныхЗаказа(), Ложь);
	
	Результат = НовыйКраткаяИнформацияПоДокументуВСервисе();
	Результат.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику;
	Результат.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "data.documentHeader.id");
	ЗаполнитьКраткуюИнформациюПоДокументуВСервисе(Результат, МодельСервиса);
	
	Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
	Результат.Вставить("НоменклатураИдентифицирована",
		 ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "_meta.goodsIdentified"));
	
	
	Возврат Результат;
	
КонецФункции

Функция СписокЗаказовПоставщикуИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");
	
	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("ИдентификаторВСервисе",        Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("НомерДокумента",                Типы().НомерДокумента);
	СписокЗаказов.Колонки.Добавить("ДатаДокумента",                 Типы().Дата);
	СписокЗаказов.Колонки.Добавить("Организация",                   Типы().ОрганизацияБизнесСеть);
	СписокЗаказов.Колонки.Добавить("ОрганизацияИдентификатор",      Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("Контрагент",                    Типы().КонтрагентБизнесСеть);
	СписокЗаказов.Колонки.Добавить("КонтрагентИдентификатор",       Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("Валюта",                        Типы().Валюта);
	СписокЗаказов.Колонки.Добавить("Сумма",                         Типы().Число);
	СписокЗаказов.Колонки.Добавить("Менеджер",                      Типы().ПользовательEDI);
	
	СписокЗаказов.Колонки.Добавить("ДатаСоздания",                  Типы().Дата);
	СписокЗаказов.Колонки.Добавить("НомерАктуальнойВерсии",         Типы().Ревизия);
	СписокЗаказов.Колонки.Добавить("ТекущийСтатус",                 Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ДатаТекущегоСтатуса",           Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ПредыдущийСтатус",              Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ПоследнееДействие",             Типы().ДействиеУчастника);
	СписокЗаказов.Колонки.Добавить("СторонаВыполнившаяДействие",    Типы().СторонаУчастник);
	СписокЗаказов.Колонки.Добавить("СогласованнаяВерсияПоставщика", Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("СогласованнаяВерсияПокупателя", Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("ПлановаяДатаВыполнения",        Типы().Дата);
	СписокЗаказов.Колонки.Добавить("УточнениеСостоянияПоДаннымСтороныУчастника",     Типы().СтроковоеПредставление);
	СписокЗаказов.Колонки.Добавить("ДатаУточнениеСостоянияПоДаннымСтороныУчастника", Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ВариантУказанияНоменклатуры",   Типы().ВариантыУказанияНоменклатуры);
	СписокЗаказов.Колонки.Добавить("ДатаПоследнегоИзменения",       Типы().Дата);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = СписокЗаказов.Добавить();
		НоваяЗапись.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "id");
		НоваяЗапись.НомерДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "number");
		НоваяЗапись.ДатаДокумента = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "date"));
		НоваяЗапись.ОрганизацияИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "supplier.bNetInternalID");
		НоваяЗапись.Организация = ОрганизацияБизнесСети(НоваяЗапись.ОрганизацияИдентификатор);
		НоваяЗапись.КонтрагентИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "customer.bNetInternalID");

		НоваяЗапись.Валюта = ВалютаИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "currency.code"));
		НоваяЗапись.Сумма = ЧислоИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "amount"));
			
		НоваяЗапись.ДатаСоздания = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.created"));
		НоваяЗапись.НомерАктуальнойВерсии = ЗначениеКоллекцииПоАбсолютномуПути(
			ДокументСервиса, "status.revision");
		НоваяЗапись.ТекущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.currentStatus"));
		НоваяЗапись.ДатаТекущегоСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.currentStatusDate"));
		НоваяЗапись.ПредыдущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.previoustStatus"));
		НоваяЗапись.ПоследнееДействие = ЗначениеТермина(СловарьСервиса.ДействияУчастников,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.lastEvent"));
		НоваяЗапись.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.lastEventInitiator"));
		НоваяЗапись.СогласованнаяВерсияПокупателя =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.customerApprovedVersionId");
		НоваяЗапись.СогласованнаяВерсияПоставщика =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierApprovedVersionId");
		НоваяЗапись.УточнениеСостоянияПоДаннымСтороныУчастника =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierFulfilmentExtendedStatus");
		НоваяЗапись.ДатаУточнениеСостоянияПоДаннымСтороныУчастника = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierFulfilmentExtendedStatusDate"));
		НоваяЗапись.Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
		НоваяЗапись.ВариантУказанияНоменклатуры = ЗначениеТермина(СловарьСервиса.ВариантыУказанияНоменклатурыПокупателя,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "itemsInTermsOf"));
		НоваяЗапись.ДатаПоследнегоИзменения = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.modified"));
	КонецЦикла;
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		СписокЗаказов.ВыгрузитьКолонку("КонтрагентИдентификатор")));
		
	Если ДанныеКонтрагентов <> Неопределено Тогда
		Для Каждого ЗаписьСписка Из СписокЗаказов Цикл
			ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСписка.КонтрагентИдентификатор, "Идентификатор");
			
			Если ДанныеКонтрагента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Контрагент = ДанныеКонтрагента.Контрагент;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Список = СписокЗаказов;
	
	Возврат Результат;
	
КонецФункции

Функция ПротоколИзмененияЗаказаПоставщикуИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")

	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("Менеджер",                   Типы().ПользовательEDI);
	СписокЗаказов.Колонки.Добавить("Статус",                     Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ДатаСтатуса",                Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ПредыдущийСтатус",           Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ДатаПредыдущегоСтатуса",     Типы().Дата);
	СписокЗаказов.Колонки.Добавить("Действие",                   Типы().ДействиеУчастника);
	СписокЗаказов.Колонки.Добавить("СторонаВыполнившаяДействие", Типы().СторонаУчастник);
	СписокЗаказов.Колонки.Добавить("СтатусПоставщика",           Типы().СтроковоеПредставление);
	СписокЗаказов.Колонки.Добавить("ДатаСтатусаПоставщика",      Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ИдентификаторВерсии",        Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("ПредставлениеВерсии",        Типы().СтроковоеПредставление);
	
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = СписокЗаказов.Добавить();
		НоваяЗапись.Статус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status"));
		НоваяЗапись.ДатаСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "statusDate"));
		НоваяЗапись.ПредыдущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "previoustStatus"));
		НоваяЗапись.ДатаПредыдущегоСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "previoustStatusDate"));
		НоваяЗапись.Действие = ЗначениеТермина(СловарьСервиса.ДействияУчастников,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "event"));
		НоваяЗапись.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "eventInitiator"));
		НоваяЗапись.СтатусПоставщика = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "supplierFulfilmentExtendedStatus");
		НоваяЗапись.ДатаСтатусаПоставщика = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "supplierFulfilmentExtendedStatusDate"));
		НоваяЗапись.ИдентификаторВерсии = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "versionId");
		НоваяЗапись.ПредставлениеВерсии = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "versionDescription");
		
		НоваяЗапись.Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
	КонецЦикла;
	
	Результат.Список = СписокЗаказов;
	
	Возврат Результат;
	
КонецФункции

Функция РасширеннаяИнформацияПоЗаказуПоставщикуИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйРасширеннаяИнформацияПоДокументуВСервисе();
	
	ЗаполнитьКраткуюИнформациюПоДокументуВСервисе(Результат, МодельСервиса);
	
	Результат.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику;
	Результат.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "id");
	Результат.НомерДокумента = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "buyerNumberDate.number");
	Результат.ДатаДокумента = ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "buyerNumberDate.date"));
	Результат.ОрганизацияИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "customer.bNetInternalID");
	Результат.Организация = ОрганизацияБизнесСети(Результат.ОрганизацияИдентификатор);
	Результат.КонтрагентИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "supplier.bNetInternalID");
	Результат.Валюта = ВалютаИзМоделиСервиса(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "currency.code"));
	Результат.Сумма = ЧислоИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "amount"));
	Результат.ВариантУказанияНоменклатуры = ЗначениеТермина(СловарьСервиса.ВариантыУказанияНоменклатурыПокупателя,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "itemsInTermsOf"));
	Результат.ПлановаяДатаВыполнения = ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "expectedDeliveryDate"));
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.КонтрагентИдентификатор));
		
	Если ДанныеКонтрагентов <> Неопределено И ДанныеКонтрагентов.Количество() > 0 Тогда
		Результат.Контрагент = ДанныеКонтрагентов[0].Контрагент;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказКлиента

Функция ДанныеЗаказаКлиентаИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	ЕстьОшибки = Ложь;
	
	ДанныеДокумента = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "data", ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НормализоватьДанныеПоСхеме(ДанныеДокумента, ОписаниеСтруктурыДанныхЗаказа(), Ложь);
	
	Результат = НовыйКраткаяИнформацияПоДокументуВСервисе();
	Результат.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента;
	Результат.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "data.documentHeader.id");
	ЗаполнитьКраткуюИнформациюПоДокументуВСервисе(Результат, МодельСервиса);
	
	Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
	Результат.Вставить("НоменклатураИдентифицирована",
		 ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "_meta.goodsIdentified"));
	
	Возврат Результат;
	
КонецФункции

Функция СписокЗаказовКлиентаИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("ИдентификаторВСервисе",         Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("НомерДокумента",                Типы().НомерДокумента);
	СписокЗаказов.Колонки.Добавить("ДатаДокумента",                 Типы().Дата);
	СписокЗаказов.Колонки.Добавить("Организация",                   Типы().ОрганизацияБизнесСеть);
	СписокЗаказов.Колонки.Добавить("ОрганизацияИдентификатор",      Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("Контрагент",                    Типы().КонтрагентБизнесСеть);
	СписокЗаказов.Колонки.Добавить("КонтрагентИдентификатор",       Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("Валюта",                        Типы().Валюта);
	СписокЗаказов.Колонки.Добавить("Сумма",                         Типы().Число);
	СписокЗаказов.Колонки.Добавить("Менеджер",                      Типы().ПользовательEDI);
	
	СписокЗаказов.Колонки.Добавить("ДатаСоздания",                  Типы().Дата);
	СписокЗаказов.Колонки.Добавить("НомерАктуальнойВерсии",         Типы().Ревизия);
	СписокЗаказов.Колонки.Добавить("ТекущийСтатус",                 Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ДатаТекущегоСтатуса",           Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ПредыдущийСтатус",              Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ПоследнееДействие",             Типы().ДействиеУчастника);
	СписокЗаказов.Колонки.Добавить("СторонаВыполнившаяДействие",    Типы().СторонаУчастник);
	СписокЗаказов.Колонки.Добавить("СогласованнаяВерсияПоставщика", Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("СогласованнаяВерсияПокупателя", Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("ПлановаяДатаВыполнения",        Типы().Дата);
	СписокЗаказов.Колонки.Добавить("УточнениеСостоянияПоДаннымСтороныУчастника",     Типы().СтроковоеПредставление);
	СписокЗаказов.Колонки.Добавить("ДатаУточнениеСостоянияПоДаннымСтороныУчастника", Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ВариантУказанияНоменклатуры",   Типы().ВариантыУказанияНоменклатуры);
	СписокЗаказов.Колонки.Добавить("ДатаПоследнегоИзменения",       Типы().Дата);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = СписокЗаказов.Добавить();
		НоваяЗапись.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "id");
		НоваяЗапись.НомерДокумента = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "number");
		НоваяЗапись.ДатаДокумента = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "date"));
		НоваяЗапись.ОрганизацияИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "supplier.bNetInternalID");
		НоваяЗапись.Организация = ОрганизацияБизнесСети(НоваяЗапись.ОрганизацияИдентификатор);
		НоваяЗапись.КонтрагентИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "customer.bNetInternalID");
		НоваяЗапись.Валюта = ВалютаИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "currency.code"));
		НоваяЗапись.Сумма = ЧислоИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "amount"));
			
		НоваяЗапись.ДатаСоздания = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.created"));
		НоваяЗапись.НомерАктуальнойВерсии = ЗначениеКоллекцииПоАбсолютномуПути(
			ДокументСервиса, "status.revision");
		НоваяЗапись.ТекущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.currentStatus"));
		НоваяЗапись.ДатаТекущегоСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.currentStatusDate"));
		НоваяЗапись.ПредыдущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.previoustStatus"));
		НоваяЗапись.ПоследнееДействие = ЗначениеТермина(СловарьСервиса.ДействияУчастников,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.lastEvent"));
		НоваяЗапись.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.lastEventInitiator"));
		НоваяЗапись.СогласованнаяВерсияПокупателя =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.customerApprovedVersionId");
		НоваяЗапись.СогласованнаяВерсияПоставщика =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierApprovedVersionId");
		НоваяЗапись.УточнениеСостоянияПоДаннымСтороныУчастника =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierFulfilmentExtendedStatus");
		НоваяЗапись.ДатаУточнениеСостоянияПоДаннымСтороныУчастника = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.supplierFulfilmentExtendedStatusDate"));
		НоваяЗапись.Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
		НоваяЗапись.ВариантУказанияНоменклатуры = ЗначениеТермина(СловарьСервиса.ВариантыУказанияНоменклатурыПоставщика,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "itemsInTermsOf"));
		НоваяЗапись.ДатаПоследнегоИзменения = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status.modified"));
	КонецЦикла;
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		СписокЗаказов.ВыгрузитьКолонку("КонтрагентИдентификатор")));
		
	Если ДанныеКонтрагентов <> Неопределено Тогда
		Для Каждого ЗаписьСписка Из СписокЗаказов Цикл
			ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСписка.КонтрагентИдентификатор, "Идентификатор");
			
			Если ДанныеКонтрагента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Контрагент = ДанныеКонтрагента.Контрагент;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Список = СписокЗаказов;
	
	Возврат Результат;
	
КонецФункции

Функция ПротоколИзмененияЗаказаКлиентаИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")

	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	СписокЗаказов = Новый ТаблицаЗначений;
	СписокЗаказов.Колонки.Добавить("Менеджер",                   Типы().ПользовательEDI);
	СписокЗаказов.Колонки.Добавить("Статус",                     Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ДатаСтатуса",                Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ПредыдущийСтатус",           Типы().СтатусЗаказа);
	СписокЗаказов.Колонки.Добавить("ДатаПредыдущегоСтатуса",     Типы().Дата);
	СписокЗаказов.Колонки.Добавить("Действие",                   Типы().ДействиеУчастника);
	СписокЗаказов.Колонки.Добавить("СторонаВыполнившаяДействие", Типы().СторонаУчастник);
	СписокЗаказов.Колонки.Добавить("СтатусПоставщика",           Типы().СтроковоеПредставление);
	СписокЗаказов.Колонки.Добавить("ДатаСтатусаПоставщика",      Типы().Дата);
	СписокЗаказов.Колонки.Добавить("ИдентификаторВерсии",        Типы().Идентификатор);
	СписокЗаказов.Колонки.Добавить("ПредставлениеВерсии",        Типы().СтроковоеПредставление);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = СписокЗаказов.Добавить();
		НоваяЗапись.Статус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "status"));
		НоваяЗапись.ДатаСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "statusDate"));
		НоваяЗапись.ПредыдущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "previoustStatus"));
		НоваяЗапись.ДатаПредыдущегоСтатуса = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "previoustStatusDate"));
		НоваяЗапись.Действие = ЗначениеТермина(СловарьСервиса.ДействияУчастников,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "event"));
		НоваяЗапись.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "eventInitiator"));
		НоваяЗапись.СтатусПоставщика = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "supplierFulfilmentExtendedStatus"));
		НоваяЗапись.ДатаСтатусаПоставщика = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "supplierFulfilmentExtendedStatusDate"));
		НоваяЗапись.ИдентификаторВерсии = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "versionId");
		НоваяЗапись.ПредставлениеВерсии = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "versionDescription");
		
		НоваяЗапись.Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
	КонецЦикла;
	
	Результат.Список = СписокЗаказов;
	
	Возврат Результат;
	
КонецФункции

Функция РасширеннаяИнформацияПоЗаказуКлиентаИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйРасширеннаяИнформацияПоДокументуВСервисе();
	
	ЗаполнитьКраткуюИнформациюПоДокументуВСервисе(Результат, МодельСервиса);
	
	Результат.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента;
	Результат.ИдентификаторВСервисе = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "id");
	Результат.НомерДокумента = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "sellerNumberDate.number");
	Результат.ДатаДокумента = ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "sellerNumberDate.date"));
	Результат.ОрганизацияИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "supplier.bNetInternalID");
	Результат.Организация = ОрганизацияБизнесСети(Результат.ОрганизацияИдентификатор);
	Результат.КонтрагентИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "customer.bNetInternalID");
	Результат.Валюта = ВалютаИзМоделиСервиса(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "currency.code"));
	Результат.Сумма = ЧислоИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "amount"));
	Результат.ВариантУказанияНоменклатуры = ЗначениеТермина(СловарьСервиса.ВариантыУказанияНоменклатурыПоставщика,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "itemsInTermsOf"));
	Результат.ПлановаяДатаВыполнения = ЗначениеТермина(СловарьСервиса.ВариантыУказанияНоменклатурыПокупателя,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "expectedDeliveryDate"));

	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.КонтрагентИдентификатор));
		
	Если ДанныеКонтрагентов <> Неопределено И ДанныеКонтрагентов.Количество() > 0 Тогда
		Результат.Контрагент = ДанныеКонтрагентов[0].Контрагент;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЛентаСобытий

Функция ЛентаСобытийИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	ЛентаСобытий = Новый ТаблицаЗначений;
	ЛентаСобытий.Колонки.Добавить("Дата",                       Типы().Дата);
	ЛентаСобытий.Колонки.Добавить("Документ",                   Типы().Структура);
	ЛентаСобытий.Колонки.Добавить("Организация",                Типы().ОрганизацияБизнесСеть);
	ЛентаСобытий.Колонки.Добавить("ОрганизацияИдентификатор",   Типы().Идентификатор);
	ЛентаСобытий.Колонки.Добавить("Контрагент",                 Типы().КонтрагентБизнесСеть);
	ЛентаСобытий.Колонки.Добавить("КонтрагентИдентификатор",    Типы().Идентификатор);
	ЛентаСобытий.Колонки.Добавить("КонтрагентПредставление",    Типы().Строка);
	ЛентаСобытий.Колонки.Добавить("ТекущийСтатус",              Типы().СтатусЗаказа);
	ЛентаСобытий.Колонки.Добавить("ПредставлениеСобытия",       Типы().СтроковоеПредставление);
	ЛентаСобытий.Колонки.Добавить("НаправлениеДействия",        Типы().НаправлениеСобытия);
	ЛентаСобытий.Колонки.Добавить("СторонаВыполнившаяДействие", Типы().СторонаУчастник);
	ЛентаСобытий.Колонки.Добавить("ТипСобытия",                 Типы().ТипыСобытий);
	
	ИдентификаторыВСервисе = Новый Соответствие;
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = ЛентаСобытий.Добавить();
		НоваяЗапись.Дата  = ДатаИзСтроки(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "date"));
		НоваяЗапись.ТипСобытия = ЗначениеТермина(СловарьСервиса.ТипыСобытий,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "eventType"));
		НоваяЗапись.ТекущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "currentStatus"));
		НоваяЗапись.ПредставлениеСобытия = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "event");
		НоваяЗапись.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "party"));
		НоваяЗапись.НаправлениеДействия = ЗначениеТермина(СловарьСервиса.НаправленияСобытий,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "eventDirection"));
			
		НоваяЗапись.ОрганизацияИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "organization.bNetInternalID");
		НоваяЗапись.Организация = ОрганизацияБизнесСети(НоваяЗапись.ОрганизацияИдентификатор);
		
		НоваяЗапись.КонтрагентИдентификатор =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "contrparty.bNetInternalID");
		НоваяЗапись.КонтрагентПредставление =
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "contrparty.name");
			
		Документ = Новый Структура;
		Документ.Вставить("ПрикладнойОбъект");
		Документ.Вставить("ИдентификаторВСервисе", ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "document.id"));
		Документ.Вставить("Номер", ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "document.number"));
		Документ.Вставить("Дата", ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "document.date")));
		Документ.Вставить("Валюта",
			ВалютаИзМоделиСервиса(ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "document.currency.code")));
		Документ.Вставить("ТипДокумента", ЗначениеТермина(СловарьСервиса.ТипыДокументов,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "document.documentType")));
		Документ.Вставить("Менеджер",
			ПользовательИзМоделиСервиса(ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee")));
		Документ.Вставить("Сумма", ЧислоИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "document.amount")));
		
		НоваяЗапись.Документ = Документ;
		Если ИдентификаторыВСервисе.Получить(Документ.ТипДокумента) = Неопределено Тогда
			ИдентификаторыВСервисе[Документ.ТипДокумента] = Новый Массив;
		КонецЕсли;
		
		ИдентификаторыВСервисе[Документ.ТипДокумента].Добавить(Документ.ИдентификаторВСервисе);
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ИдентификаторыВСервисе Цикл
		ИдентификаторыВСервисе[КлючЗначение.Ключ] = РегистрыСведений.СостоянияДокументовEDI.ПрикладныеОбъекты(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ЛентаСобытий.ВыгрузитьКолонку("КонтрагентИдентификатор")));
		
	Для Каждого ЗаписьСписка Из ЛентаСобытий Цикл
		Если ДанныеКонтрагентов <> Неопределено Тогда
			ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСписка.КонтрагентИдентификатор, "Идентификатор");
			
			Если ДанныеКонтрагента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Контрагент = ДанныеКонтрагента.Контрагент;
		КонецЕсли;
		
		ПрикладныеОбъекты = ИдентификаторыВСервисе.Получить(ЗаписьСписка.Документ.ТипДокумента);
		Если ПрикладныеОбъекты <> Неопределено Тогда
			ЗаписьРеестра = ПрикладныеОбъекты.Найти(ЗаписьСписка.Документ.ИдентификаторВСервисе, "ИдентификаторВСервисе");
			Если ЗаписьРеестра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Документ.ПрикладнойОбъект = ЗаписьРеестра.ПрикладнойОбъект;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Список = ЛентаСобытий;
	
	Возврат Результат;
	
КонецФункции

Функция СводнаяИнформацияПоЛентеСобытийНаДатуИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	ЛентаСобытийСводная = Новый ТаблицаЗначений;
	ЛентаСобытийСводная.Колонки.Добавить("ТипДокумента",      Типы().ТипДокумента);
	ЛентаСобытийСводная.Колонки.Добавить("Менеджер",          Типы().ПользовательEDI);
	ЛентаСобытийСводная.Колонки.Добавить("КоличествоСобытий", Типы().Число);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded Цикл
		Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
			
		Для Каждого Событие Из ДокументСервиса.countByDocumentType Цикл
			НоваяЗапись = ЛентаСобытийСводная.Добавить();
			НоваяЗапись.Менеджер = Менеджер;
			НоваяЗапись.ТипДокумента = ЗначениеТермина(СловарьСервиса.ТипыДокументов,
				ЗначениеКоллекцииПоАбсолютномуПути(Событие, "documentType"));
			НоваяЗапись.КоличествоСобытий = ЧислоИзСтроки(
				ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "count"));
		КонецЦикла;
	КонецЦикла;
	
	Результат.Список = ЛентаСобытийСводная;
	
	Возврат Результат;
	
КонецФункции

Функция СводнаяИнформацияПоЛентеСобытийЗаПериодИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	ИсторияЛентыСобытий = Новый ТаблицаЗначений;
	ИсторияЛентыСобытий.Колонки.Добавить("Дата",              Типы().Дата);
	ИсторияЛентыСобытий.Колонки.Добавить("ТипДокумента",      Типы().ТипДокумента);
	ИсторияЛентыСобытий.Колонки.Добавить("Менеджер",          Типы().ПользовательEDI);
	ИсторияЛентыСобытий.Колонки.Добавить("КоличествоСобытий", Типы().Число);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded Цикл
		Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "employee"));
		Для Каждого Событие Из ДокументСервиса.lastActiveDays Цикл
			ДатаСобытия = ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(Событие, "date"));
			Для Каждого СобытиеПоТипуДокумента Из Событие.countByDocumentType Цикл
				НоваяЗапись = ИсторияЛентыСобытий.Добавить();
				НоваяЗапись.Менеджер = Менеджер;
				НоваяЗапись.Дата = ДатаСобытия;
				НоваяЗапись.ТипДокумента = ЗначениеТермина(СловарьСервиса.ТипыДокументов,
					ЗначениеКоллекцииПоАбсолютномуПути(СобытиеПоТипуДокумента, "documentType"));
				НоваяЗапись.КоличествоСобытий = ЧислоИзСтроки(
					ЗначениеКоллекцииПоАбсолютномуПути(СобытиеПоТипуДокумента, "count"));
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Результат.Список = ИсторияЛентыСобытий;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбмена

#Область ИнтерфейсПоставщика

Функция НастройкиОбменаОрганизацииИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("Поставщик",               Типы().ОрганизацияБизнесСеть);
	Настройки.Колонки.Добавить("ПоставщикИдентификатор",  Типы().Идентификатор);
	Настройки.Колонки.Добавить("Покупатель",              Типы().КонтрагентБизнесСеть);
	Настройки.Колонки.Добавить("ПокупательИдентификатор", Типы().Идентификатор);
	Настройки.Колонки.Добавить("РежимРаботыСЗаказами",    Типы().РежимыРаботыСЗаказами);
	Настройки.Колонки.Добавить("ДатаИзменения",           Типы().Дата);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = Настройки.Добавить();
		НоваяЗапись.ПокупательИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "buyer.bNetInternalID");
		НоваяЗапись.ПоставщикИдентификатор  = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "seller.bNetInternalID");
		НоваяЗапись.Поставщик = ОрганизацияБизнесСети(НоваяЗапись.ПоставщикИдентификатор);
		НоваяЗапись.РежимРаботыСЗаказами    = ЗначениеТермина(СловарьСервиса.РежимРаботыСЗаказами,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "settings.orderMode"));
		НоваяЗапись.ДатаИзменения           = ДатаИзСтрокиISO(
					ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "dateModified"));
	КонецЦикла;
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Настройки.ВыгрузитьКолонку("ПокупательИдентификатор")));
		
	Если ДанныеКонтрагентов <> Неопределено Тогда
		Для Каждого ЗаписьСписка Из Настройки Цикл
			ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСписка.ПокупательИдентификатор, "Идентификатор");
			
			Если ДанныеКонтрагента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Покупатель = ДанныеКонтрагента.Контрагент;
		КонецЦикла;
	КонецЕсли;
		
	Результат.Список = Настройки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПокупателя

Функция НастройкиОбменаКонтрагентовИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = НовыйСписокИзМоделиСервиса();
	Результат.Страницы = ПараметрыСтраницыДанныхИзМоделиСервиса(МодельСервиса, "page");

	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("Поставщик",               Типы().КонтрагентБизнесСеть);
	Настройки.Колонки.Добавить("ПоставщикИдентификатор",  Типы().Идентификатор);
	Настройки.Колонки.Добавить("Покупатель",              Типы().ОрганизацияБизнесСеть);
	Настройки.Колонки.Добавить("ПокупательИдентификатор", Типы().Идентификатор);
	Настройки.Колонки.Добавить("РежимРаботыСЗаказами",    Типы().РежимыРаботыСЗаказами);
	Настройки.Колонки.Добавить("ДатаИзменения",           Типы().Дата);
	
	Для Каждого ДокументСервиса Из МодельСервиса._embedded.items Цикл
		НоваяЗапись = Настройки.Добавить();
		НоваяЗапись.РежимРаботыСЗаказами = ЗначениеТермина(СловарьСервиса.РежимРаботыСЗаказами,
			ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "settings.orderMode"));
		НоваяЗапись.ПокупательИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "buyer.bNetInternalID");
		НоваяЗапись.Покупатель = ОрганизацияБизнесСети(НоваяЗапись.ПокупательИдентификатор);
		НоваяЗапись.ПоставщикИдентификатор = ЗначениеКоллекцииПоАбсолютномуПути(ДокументСервиса, "seller.bNetInternalID");
	КонецЦикла;
	
	ДанныеКонтрагентов = КонтрагентыИзМоделиСервиса(ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Настройки.ВыгрузитьКолонку("ПоставщикИдентификатор")));
		
	Если ДанныеКонтрагентов <> Неопределено Тогда
		Для Каждого ЗаписьСписка Из Настройки Цикл
			ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСписка.ПоставщикИдентификатор, "Идентификатор");
			
			Если ДанныеКонтрагента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьСписка.Поставщик = ДанныеКонтрагента.Контрагент;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Список = Настройки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиОрганизации

Функция НастройкиОрганизацииИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ПодробноеОписаниеОшибки)
	
	Если Не ТипЗнч(МодельСервиса) = Тип("Структура")
		Или Не МодельСервиса.Свойство("documentNumberPrefix") Тогда
		ЕстьОшибки = Истина;
		ПодробноеОписаниеОшибки = НСтр("ru = 'При обработке ответа сервиса 1С:EDI возникла ошибка. Неожиданный тип данных ответа.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = НовыйНастройкиОрганизации();
	Результат.ПрефиксДокументов = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "documentNumberPrefix");
	Результат.ОтветственныйЗаНовыеЗаказыКлиентовПоУмолчанию = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "defaultEmployeeForNewCustomerOrders"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйНастройкиОрганизации()
	
	Результат = Новый Структура;
	Результат.Вставить("ПрефиксДокументов");
	Результат.Вставить("ОтветственныйЗаНовыеЗаказыКлиентовПоУмолчанию", Метаданные.ОпределяемыеТипы.ПользовательEDI.Тип.ПривестиЗначение(Неопределено));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Справочники

Функция ПользовательИзМоделиСервиса(Знач ПользовательВМоделиСервиса)
	
	Результат = Неопределено;
	
	ИдентификаторыСервиса = ЗначениеКоллекцииПоАбсолютномуПути(ПользовательВМоделиСервиса, "externalUids");
	Если ЗначениеЗаполнено(ИдентификаторыСервиса) И ТипЗнч(ИдентификаторыСервиса) = Тип("Массив") Тогда
		Для Каждого ИдентификаторСервиса Из ИдентификаторыСервиса Цикл
			ИнтеграцияССервисомEDIПереопределяемый.НайтиПользователяПоИдентификатору(Результат, ИдентификаторСервиса);
			Если ЗначениеЗаполнено(Результат) И ОбщегоНазначения.СсылкаСуществует(Результат) Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗначениеКоллекцииПоАбсолютномуПути(ПользовательВМоделиСервиса, "name")) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	РезультатСозданияПользователя = РаботаСДаннымиEDIСлужебный.РезультатСозданияПользователяПоДаннымEDI(ПользовательВМоделиСервиса);
	Если РезультатСозданияПользователя.ЕстьОшибки Тогда
		ЗафиксироватьПрочуюОшибку(НСтр("ru='Создание пользователя по данным сервиса.'"),
			РезультатСозданияПользователя.ТекстОшибки);
	Иначе
		Результат = РезультатСозданияПользователя.Ссылка;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция КонтрагентыИзМоделиСервиса(Знач ИдентификаторыКонтрагентов, Знач СоздаватьКонтрагентов = Истина)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыКонтрагентов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторыКонтрагентов) <> Тип("Массив") Тогда
		ИдентификаторыКонтрагентов = СтрРазделить(ИдентификаторыКонтрагентов, ",", Ложь);
	КонецЕсли;
	
	ИдентификаторыКонтрагентов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыКонтрагентов);
	
	РезультатПоиска = БизнесСеть.КонтрагентыПоИдентификаторам(ИдентификаторыКонтрагентов);
	ДанныеКонтрагентов = РезультатПоиска.Данные;
	ДанныеКонтрагентов.Индексы.Добавить("Идентификатор");
	
	Если СоздаватьКонтрагентов И РезультатПоиска.ЕстьОшибки Тогда
		ОбъектКонфигурации = ПреобразованиеДанныхEDIСлужебныйПовтИсп.СправочникКонфигурации("Контрагенты");
		Если ОбъектКонфигурации = Неопределено Тогда
			ЗафиксироватьПрочуюОшибку(НСтр("ru='Поиск контрагентов Бизнес Сети.'"),
				НСтр("ru='Справочник конфигурации, соответствующий объекту электронного взаимодействия <Контрагенты>,
				| не определен в переопределяемой части подсистемы.'"));
			
			Возврат ДанныеКонтрагентов;
		КонецЕсли;
		
		НенайденныеИдентификаторы = Новый Массив;
		Для Каждого КлючЗначение Из РезультатПоиска.Ошибки Цикл
			НенайденныеИдентификаторы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
		
		ЕстьОшибки = Ложь;
		КонтрагентыБизнесСети = БизнесСеть.ДанныеОрганизацийПоИдентификаторам(НенайденныеИдентификаторы, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Возврат ДанныеКонтрагентов;
		КонецЕсли;
		
		Ошибки = Новый Соответствие;
		Для Каждого КонтрагентБизнесСети Из КонтрагентыБизнесСети Цикл
			ОбъектФормата = МенеджерКонвертацииДанныхEDI.ОбъектФорматаКонтрагентПоДаннымБизнесСети(КонтрагентБизнесСети);
			
			ЕстьОшибки = Ложь; ТекстОшибки = "";
			Ссылка = ПреобразованиеДанныхEDIСлужебный.РезультатРасширеннойЗаписиОбъектаФормата(
				ОбъектФормата, ОбъектКонфигурации,,ЕстьОшибки, ТекстОшибки);
				
			Если ЕстьОшибки Тогда
				Ошибки.Вставить(КонтрагентБизнесСети.Идентификатор, ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			Запись = ДанныеКонтрагентов.Добавить();
			Запись.Контрагент = Ссылка;
			Запись.Идентификатор = КонтрагентБизнесСети.Идентификатор;
		КонецЦикла;
	
		ЕстьОшибки = Ложь; ТекстОшибки = "";
		РегистрыСведений.КонтрагентыБизнесСеть.ОбновитьКэшДанныхКонтрагентаБизнесСети(
			ДанныеКонтрагентов, ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ЗафиксироватьПрочуюОшибку(НСтр("ru='Поиск контрагентов Бизнес Сети.'"), ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ВалютаИзМоделиСервиса(Знач КодВалюты)
	
	Если Не ЗначениеЗаполнено(КодВалюты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияССервисомEDIСлужебныйПовтИсп.ВалютаПоКоду(КодВалюты);
	
КонецФункции

#КонецОбласти

#Область ДоступныеКоманды

Функция НовыйКомандаПользовательскогоИнтерфейса()

	Результат = Новый Структура;
	Результат.Вставить("Представление");
	Результат.Вставить("Пояснение");
	Результат.Вставить("Картинка");
	Результат.Вставить("ИдентификаторКартинки");
	Результат.Вставить("ОсновнаяКоманда");
	Результат.Вставить("Порядок");
	Результат.Вставить("СценарийВыполнения");
	Результат.Вставить("КлиентскиеОбработчики");
	Результат.Вставить("URL");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеКомандИзМоделиСервиса(Знач МодельСервиса)
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(МодельСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Порядок = 1;
	Для Каждого ДоступныеКомандыМетода Из МодельСервиса Цикл
		ДоступныеТипыКонтента = Новый Массив;
		
		ДоступныеТипыПередаваемогоКонтента = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "types.content");
		
		Если ЗначениеЗаполнено(ДоступныеТипыПередаваемогоКонтента) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеТипыКонтента, ДоступныеТипыПередаваемогоКонтента);
		КонецЕсли;
		
		ДоступныеТипыВозвращаемогоКонтента = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "types.accept");
		
		Если ЗначениеЗаполнено(ДоступныеТипыВозвращаемогоКонтента) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеТипыКонтента, ДоступныеТипыВозвращаемогоКонтента);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДоступныеТипыКонтента) Тогда
			Продолжить;
		КонецЕсли;
		
		Команда = Неопределено;
		Для Каждого ТипКонтента Из ДоступныеТипыКонтента Цикл
			Команда = ЗначениеТермина(СловарьСервиса.КомандыСервиса, ТипКонтента);
			Если ЗначениеЗаполнено(Команда) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Картинка = Неопределено;
		ИдентификаторКартинки = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "icon");
		Если ЗначениеЗаполнено(ИдентификаторКартинки)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(БиблиотекаКартинок, ИдентификаторКартинки) Тогда
			Картинка = БиблиотекаКартинок[ИдентификаторКартинки];
		КонецЕсли;
		
		ОписаниеКоманды = НовыйКомандаПользовательскогоИнтерфейса();
		ОписаниеКоманды.Представление         = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "name");
		ОписаниеКоманды.Пояснение             = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "help");
		ОписаниеКоманды.ОсновнаяКоманда       = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "isMain");
		ОписаниеКоманды.Картинка              = Картинка;
		ОписаниеКоманды.ИдентификаторКартинки = ИдентификаторКартинки;
		ОписаниеКоманды.Порядок               = Порядок;
		ОписаниеКоманды.СценарийВыполнения    = ЗначениеТермина(СловарьСервиса.СценарийВыполнения,
			ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "scenario"));
		ОписаниеКоманды.КлиентскиеОбработчики = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "childScenarios");
		ОписаниеКоманды.URL                   = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "href");
		
		Результат.Вставить(Команда, ОписаниеКоманды);
		
		Порядок = Порядок + 1;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ОписаниеКомандСравненияИзМоделиСервиса(Знач МодельСервиса)
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Представление"                      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Пояснение"                          , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОсновнаяКоманда"                    , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Картинка"                           , Новый ОписаниеТипов("Картинка"));
	Результат.Колонки.Добавить("ИдентификаторКартинки"              , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СценарийВыполнения"                 , 
		Новый ОписаниеТипов("ПеречислениеСсылка.СценарииВыполненияКомандEDI"));
	Результат.Колонки.Добавить("Команда"                            , 
		Новый ОписаниеТипов("ПеречислениеСсылка.КомандыПроцессаЗаказаEDI"));
	Результат.Колонки.Добавить("КлиентскиеОбработчики"              , Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("URL"                                , Новый ОписаниеТипов("Строка"));
	
	Если Не ЗначениеЗаполнено(МодельСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДоступныеКомандыМетода Из МодельСервиса Цикл
		ДоступныеТипыКонтента = Новый Массив;
		
		ДоступныеТипыПередаваемогоКонтента = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "types.content");
		
		Если ЗначениеЗаполнено(ДоступныеТипыПередаваемогоКонтента) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеТипыКонтента, ДоступныеТипыПередаваемогоКонтента);
		КонецЕсли;
		
		ДоступныеТипыВозвращаемогоКонтента = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "types.accept");
		
		Если ЗначениеЗаполнено(ДоступныеТипыВозвращаемогоКонтента) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеТипыКонтента, ДоступныеТипыВозвращаемогоКонтента);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДоступныеТипыКонтента) Тогда
			Продолжить;
		КонецЕсли;
		
		Команда = Неопределено;
		Для Каждого ТипКонтента Из ДоступныеТипыКонтента Цикл
			Команда = ЗначениеТермина(СловарьСервиса.КомандыСервиса, ТипКонтента);
			Если ЗначениеЗаполнено(Команда) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Картинка = Неопределено;
		ИдентификаторКартинки = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "icon");
		Если ЗначениеЗаполнено(ИдентификаторКартинки)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(БиблиотекаКартинок, ИдентификаторКартинки) Тогда
			Картинка = БиблиотекаКартинок[ИдентификаторКартинки];
		КонецЕсли;
		
		ОписаниеКоманды = Результат.Добавить();
		ОписаниеКоманды.Представление         = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "name");
		ОписаниеКоманды.Пояснение             = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "help");
		ОписаниеКоманды.ОсновнаяКоманда       = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "isMain");
		ОписаниеКоманды.Картинка              = Картинка;
		ОписаниеКоманды.ИдентификаторКартинки = ИдентификаторКартинки;
		ОписаниеКоманды.СценарийВыполнения    = ЗначениеТермина(СловарьСервиса.СценарийВыполнения,
			ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "scenario"));
		ОписаниеКоманды.Команда              = Команда;
		ОписаниеКоманды.КлиентскиеОбработчики = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "childScenarios");
		ОписаниеКоманды.URL                   = ЗначениеКоллекцииПоАбсолютномуПути(ДоступныеКомандыМетода, "href");
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Списки

Функция НовыйСписокИзМоделиСервиса()
	
	Результат = Новый Структура;
	Результат.Вставить("Страницы");
	Результат.Вставить("Список");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСтраницыДанныхИзМоделиСервиса(Знач МодельСервиса, Знач ПутьКДанным)

	ПутьВМоделиСервиса = ?(ПустаяСтрока(ПутьКДанным), "", СтрШаблон("%1.", ПутьКДанным));
	
	Результат = Новый Структура;
	Результат.Вставить("ЭлементовНаСтранице",
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, СтрШаблон("%1size", ПутьВМоделиСервиса)));
	Результат.Вставить("СледующаяСтраница",
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, СтрШаблон("%1next", ПутьВМоделиСервиса)));

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнформацияПоДокументуВСервисе

#Область Кратко

Функция НовыйКраткаяИнформацияПоДокументуВСервисе()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("ТипДокумента", Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	Результат.Вставить("Команды", Новый Соответствие);
	Результат.Вставить("ДоступныеРеквизиты", Новый Массив);
	Результат.Вставить("Менеджер");
	Результат.Вставить("ДатаСоздания", ПустаяДата());
	Результат.Вставить("НомерАктуальнойВерсии","");
	Результат.Вставить("ТекущийСтатус");
	Результат.Вставить("ДатаТекущегоСтатуса", ПустаяДата());
	Результат.Вставить("ПредыдущийСтатус");
	Результат.Вставить("ПоследнееДействие");
	Результат.Вставить("СторонаВыполнившаяДействие");
	Результат.Вставить("СогласованнаяВерсияПокупателя", "");
	Результат.Вставить("СогласованнаяВерсияПоставщика", "");
	Результат.Вставить("УточнениеСостоянияПоДаннымСтороныУчастника", "");
	Результат.Вставить("ДатаУточнениеСостоянияПоДаннымСтороныУчастника", ПустаяДата());
	
	Результат.Вставить("ДатаПоследнегоИзменения");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКраткуюИнформациюПоДокументуВСервисе(Получатель, Знач МодельСервиса)
	
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();

	Получатель.ДатаСоздания = ДатаИзСтроки(
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.created"));
	Получатель.НомерАктуальнойВерсии = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.revision");
	Получатель.ТекущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.currentStatus"));
	Получатель.ДатаТекущегоСтатуса = ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса,
		"status.currentStatusDate"));
	Получатель.ПредыдущийСтатус = ЗначениеТермина(СловарьСервиса.СтатусыЗаказа,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.previoustStatus"));
	Получатель.ПоследнееДействие = ЗначениеТермина(СловарьСервиса.ДействияУчастников,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.lastEvent"));
	Получатель.СторонаВыполнившаяДействие = ЗначениеТермина(СловарьСервиса.СтороныУчастники,
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.lastEventInitiator"));
	Получатель.СогласованнаяВерсияПокупателя = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса,
		"status.customerApprovedVersionId");
	Получатель.СогласованнаяВерсияПоставщика = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса,
		"status.supplierApprovedVersionId");
	Получатель.УточнениеСостоянияПоДаннымСтороныУчастника = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса,
		"status.supplierFulfilmentExtendedStatus");
	Получатель.ДатаУточнениеСостоянияПоДаннымСтороныУчастника =
		ДатаИзСтроки(ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.supplierFulfilmentExtendedStatusDate"));
	Получатель.Менеджер = ПользовательИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "employee"));
	Получатель.Команды = ОписаниеКомандИзМоделиСервиса(
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "_meta.commands"));
	Получатель.ДатаПоследнегоИзменения = ДатаИзСтроки(
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "status.modified"));
	Получатель.ДоступныеРеквизиты = ДоступныеРеквизитыИзМоделиСервиса(
		ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "_meta.editableAttributes"));
		
КонецПроцедуры

#КонецОбласти

#Область Подробно

Функция НовыйРасширеннаяИнформацияПоДокументуВСервисе()
	
	Результат = НовыйКраткаяИнформацияПоДокументуВСервисе();
	
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("ИдентификаторВСервисе", "");
	Результат.Вставить("НомерДокумента", "");
	Результат.Вставить("ДатаДокумента", ПустаяДата());
	Результат.Вставить("ОрганизацияИдентификатор", "");
	Результат.Вставить("КонтрагентИдентификатор", "");
	Результат.Вставить("Валюта");
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("ВариантУказанияНоменклатуры");
	Результат.Вставить("ПлановаяДатаВыполнения", ПустаяДата());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДоступныеРеквизиты

Функция ДоступныеРеквизитыИзМоделиСервиса(Знач МодельСервиса)
	
	Словарь = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();

	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(МодельСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПутьВМоделиСервисе Из МодельСервиса Цикл
		КлючРеквизита = КлючДоступногоРеквизита(ПутьВМоделиСервисе);
		
		ДоступныеРеквизиты = ЗначенияТермина(Словарь.РедактируемыеРеквизиты, КлючРеквизита);
		Если ЗначениеЗаполнено(ДоступныеРеквизиты) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ДоступныеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Результат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция КлючДоступногоРеквизита(Знач ПутьВМоделиСервисе)
	
	ПутьВМоделиСервисе = СтрЗаменить(ПутьВМоделиСервисе, "[0]", "");
	
	ЧастиПути = СтрРазделить(ПутьВМоделиСервисе, ".", Ложь);
	
	КоличествоЭлементов = ЧастиПути.Количество();
	Пока КоличествоЭлементов > 2 Цикл
		ЧастиПути.Удалить(КоличествоЭлементов - 1);
		
		КоличествоЭлементов = КоличествоЭлементов - 1;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПути,".");
	
КонецФункции

#КонецОбласти

#Область АсинхроннаяОбработкаЗапросов

Процедура ОбработатьРезультатАсинхронногоВыполненияКоманды(Результат, Знач МодельСервиса, Знач ИдентификаторЗадания)
		
	ЕстьОшибки = Ложь;
	ПодробноеОписаниеОшибки = "";
	ИмяЗапроса = НСтр("ru='Обработка результата асинхронного выполнения запроса к сервису.'");
	
	ВнутреннийКодСостояния = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "general.response");
	Если ВнутреннийКодСостояния = КодСостоянияУспешногоВыполненияАсинхронногоОбработчика() Тогда
		ТипКонтента = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "result.headers.type");
		ИсходнаяКоманда = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "result.headers.operation");
		
		РезультатВыполненияЗадания = ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "result.body");
		Данные = РезультатОбработкиДанныхСервиса(ИсходнаяКоманда, ТипКонтента, РезультатВыполненияЗадания, ЕстьОшибки,
			ПодробноеОписаниеОшибки);
		Если ЕстьОшибки Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки = НСтр("ru='Ошибка распаковки результата выполнения асинхронного задания сервиса'");
			Результат.ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриОбработкеРезультатаЗапроса(ИмяЗапроса,
				ПодробноеОписаниеОшибки);
			
			Возврат;
		КонецЕсли;
			
		Результат.Данные = Данные;
	ИначеЕсли ВнутреннийКодСостояния = КодСостоянияОжидатьВыполнениеАсинхронногоОбработчика() Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.Вставить("ИдентификаторЗаданияСервиса", ИдентификаторЗадания);
	Иначе
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса на стороне сервиса 1С:EDI.'");
		Результат.ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуПриОбработкеРезультатаЗапроса(ИмяЗапроса,
			ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "general.message"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДвоичнымиДаннымиОтвета

Функция СравнениеВерсийЗаказаИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	ИмяЗапроса = НСтр("ru='Получение печатной формы сравнения версий из сервиса.'");
	Результат = Новый Структура;
	
	Попытка
		Результат.Вставить("ОтчетОСравненииПолный", ТабличныйДокументИзДвоичныхДанных(
			ПолучитьДвоичныеДанныеИзBase64Строки(МодельСервиса.report.full)));
		Результат.Вставить("ОтчетОСравненииТолькоОтличия", ТабличныйДокументИзДвоичныхДанных(
			ПолучитьДвоичныеДанныеИзBase64Строки(МодельСервиса.report.diff)));
		Результат.Вставить("Команды", ОписаниеКомандСравненияИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "_meta.commands")));
	Исключение
		ТекстОшибки = ЗафиксироватьОшибкуПриОбработкеРезультатаЗапроса(ИмяЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат Результат;

КонецФункции

Функция ПечатнаяФормаИзМоделиСервиса(Знач МодельСервиса, ЕстьОшибки, ТекстОшибки = "")
	
	ИмяЗапроса = НСтр("ru='Получение печатной формы документа из сервиса.'");
	Результат = Новый Структура;
	
	Попытка
		Результат.Вставить("ПечатнаяФорма", ТабличныйДокументИзДвоичныхДанных(
			ПолучитьДвоичныеДанныеИзBase64Строки(МодельСервиса.report)));
		Результат.Вставить("Команды", ОписаниеКомандСравненияИзМоделиСервиса(
			ЗначениеКоллекцииПоАбсолютномуПути(МодельСервиса, "_meta.commands")));
	Исключение
		ТекстОшибки = ЗафиксироватьОшибкуПриОбработкеРезультатаЗапроса(ИмяЗапроса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция ТабличныйДокументИзДвоичныхДанных(Знач ДанныеДокумента)
	
	Результат = Новый ТабличныйДокумент;
	Поток = ДанныеДокумента.ОткрытьПотокДляЧтения();
	Результат.Прочитать(Поток, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Поток.Закрыть();

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

#Область РолиОрганизации

Функция ОрганизацияЯвляетсяПокупателем(Знач ТипДокументаEDI)
	
	Возврат ТипДокументаEDI = Перечисления.ТипыДокументовEDI.ЗаказПоставщику;
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекцией

Функция КоллекцияСодержитДанные(Знач Коллекция)
	
	Результат = Ложь;
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Структура") Тогда
			Результат = КоллекцияСодержитДанные(ЭлементКоллекции.Значение);
			
			Если Результат = Истина Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			Результат = Истина;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получить значение данных коллекции в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  ЕстьОшибки - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваКоллекцииВРекурсии(Знач Значение, Знач СвойстваПути, ЕстьОшибки = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если Не ЭтоКоллекция(Значение) Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Структура") И Не Значение.Свойство(Свойство) 
		Или ТипЗнч(Значение) = Тип("Соответствие") И Значение.Получить(Свойство) = Неопределено Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

Функция НастройкиСериализацииJSON()
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	
	Возврат НастройкиСериализации
	
КонецФункции

Функция СтруктураИзПотокаJSON(Знач ПотокДанных, Знач ПараметрыВосстановления = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	
	Если ЗначениеЗаполнено(ПараметрыВосстановления) Тогда
		СвойстваТипаДата = СтрРазделить(ПараметрыВосстановления.СвойстваТипаДата, ",", Ложь);
		ФорматДаты = ПараметрыВосстановления.ФорматДаты;
		ЧитатьВСоответствие = ПараметрыВосстановления.ЧитатьВСоответствие;
		ИмяОбработчика = ЗначениеКоллекцииПоАбсолютномуПути(ПараметрыВосстановления, "ОписаниеОбработчика.Имя");
		МенеджерОбработчика = ЗначениеКоллекцииПоАбсолютномуПути(ПараметрыВосстановления, "ОписаниеОбработчика.Менеджер");
		ПараметрыОбработчика = ЗначениеКоллекцииПоАбсолютномуПути(ПараметрыВосстановления, "ОписаниеОбработчика.ДополнительныеПараметры");
		
		Результат = ПрочитатьJSON(ЧтениеJSON, ЧитатьВСоответствие, СвойстваТипаДата,
			ФорматДаты, ИмяОбработчика, МенеджерОбработчика, ПараметрыОбработчика);
	Иначе
		Результат = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	ПотокДанных.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаJSONИзСтруктуры(Знач Данные, ПереноситьСтроки = Ложь)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(
		?(ПереноситьСтроки, ПереносСтрокJSON.Авто, ПереносСтрокJSON.Нет)));
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON(),
		"ПреобразованиеЗначенийJSON", ИнтеграцияССервисомEDIСлужебный);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПреобразованиеЗначенийJSON(Свойство, Значение, ДополнительныеПараметры, ЕстьОшибки) Экспорт
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ХешЭлектронногоДокумента(Знач ЭлектронныйДокумент)
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(ЭлектронныйДокумент);
	
	Результат = ПолучитьHexСтрокуИзДвоичныхДанных(Хеширование.ХешСумма);
	
	Возврат Результат
	
КонецФункции

Функция Типы()
	
	Возврат ИнтеграцияССервисомEDIСлужебныйПовтИсп.Типы();
	
КонецФункции

Функция ЧислоИзСтроки(Знач Значение)
	
	Если Значение = Неопределено Тогда
		Значение = 0;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	
	Если Результат = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ДатаВСтрокуISO(Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = ЗаписатьДатуJSON(Значение, ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.УниверсальнаяДата);

	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтрокиISO(Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат ПустаяДата();
	КонецЕсли;
	
	Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);

	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтроки(Знач Значение)
	
	Если ПустаяСтрока(Значение) Тогда 
		Возврат ПустаяДата();
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат ?(Значение < Дата(1970, 1, 1, 0, 0, 0), ПустаяДата(), Значение);
	КонецЕсли;
	
	Результат = XMLЗначение(Тип("Дата"), Значение);
	
	Если Результат = Неопределено Тогда
		Возврат ПустаяДата();
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ЭтоКоллекция(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие");
	
КонецФункции

Функция ПустаяДата()
	
	Возврат Дата(1,1,1,0,0,0);
	
КонецФункции

Функция ЗначенияТермина(Знач Глоссарий, Знач Термин)
	
	Записи = Глоссарий.НайтиСтроки(Новый Структура("Термин, Получение", Термин, Истина));
	Если Не ЗначениеЗаполнено(Записи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого Запись Из Записи Цикл
		Результат.Добавить(Запись.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти