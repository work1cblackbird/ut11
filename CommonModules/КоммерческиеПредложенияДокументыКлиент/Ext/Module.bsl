////////////////////////////////////////////////////////////////////////////////
// Подсистема "Коммерческие предложения документы".
// ОбщийМодуль.КоммерческиеПредложенияДокументыКлиент
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выводит форму редактирования для строкового реквизита табличной части
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - Форма, в которой расположен реквизит.
//  ИмяПоляКомментарий       - Строка           - Наименование реквизита, хранящего строку которая будет отредактирована.
//  ИмяПоляЕстьКомментарий   - Строка           - Наименование реквизита хранящего признак того, что поле заполнено.
//  ИмяПоляРедактирования    - Строка           - Имя элемента формы, в котором происходит редактирование.
//  ИмяПоляДругойКомментарий - Строка           - Наименование реквизита, содержащего другой комментарий по строке.
//
Процедура КомментарийНачалоВыбора(Форма, ИмяПоляКомментарий, ИмяПоляЕстьКомментарий, ИмяПоляРедактирования, ИмяПоляДругойКомментарий) Экспорт

	ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные",               ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментарий",     ИмяПоляКомментарий);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаЕстьКомментарий", ИмяПоляЕстьКомментарий);
	ДополнительныеПараметры.Вставить("Форма",                       Форма);
	ДополнительныеПараметры.Вставить("ИмяПоляДругойКомментарий",    ИмяПоляДругойКомментарий);

	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеКомментарияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОписаниеОповещенияЗавершение, Форма.Элементы[ИмяПоляРедактирования].ТекстРедактирования);

КонецПроцедуры

// Обработчик события завершения редактирования комментария
//
// Параметры:
//  РезультатРедактирования - Строка    - результат редактирования комментария.
//  ДополнительныеПараметры - Структура - содержит данные о контексте редактирования.
//
Процедура РедактированиеКомментарияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если РезультатРедактирования <> ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаКомментарий] Тогда
		
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаКомментарий] = РезультатРедактирования;
		ОпределитьНаличиеКомментарияВСтроке(ДополнительныеПараметры.ТекущиеДанные, 
		                                    ДополнительныеПараметры.ИмяРеквизитаКомментарий,
		                                    ДополнительныеПараметры.ИмяПоляДругойКомментарий, 
		                                    ДополнительныеПараметры.ИмяРеквизитаЕстьКомментарий);
		
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет наличие комментария в строке табличной части.
//
// Параметры:
//  ТекущиеДанные               - ДанныеФормыЭлементКоллекции - строка, для которой определяется наличие комментария.
//  ИмяПоляКомментарий          - Строка           - имя реквизита, хранящего первый комментарий в строке.
//  ИмяПоляДругойКомментарий    - Строка           - имя реквизита, содержащего другой комментарий по строке.
//  ИмяРеквизитаЕстьКомментарий - Строка           - имя реквизита хранящего признак того, что поле заполнено.
//
Процедура ОпределитьНаличиеКомментарияВСтроке(ТекущиеДанные, ИмяПоляКомментарий, ИмяПоляДругойКомментарий, ИмяРеквизитаЕстьКомментарий) Экспорт
	
	ЕстьКомментарийВСтроке = Не ПустаяСтрока(ТекущиеДанные[ИмяПоляКомментарий])
		Или Не ПустаяСтрока(ТекущиеДанные[ИмяПоляДругойКомментарий]);
	
	ТекущиеДанные[ИмяРеквизитаЕстьКомментарий] = ЕстьКомментарийВСтроке;
	
КонецПроцедуры

// Открывает список присоединенных к объекту файлов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется команда
//
Процедура ОткрытьСписокПрисоединенныхФайлов(Форма) Экспорт

	ОбъектФормы = Форма.Объект; // ДокументОбъект	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  ОбъектФормы.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФиксированныеНастройки.Отбор,
	            "Ссылка",
	            Форма.ВложенияСНепустымCID,
	            ВидСравненияКомпоновкиДанных.НеВСписке);
	
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы);
	
КонецПроцедуры

#Область ОтборыСписков

// ЭлектронноеВзаимодействие

// Обработчик события начала выбора быстрого множественного отбора в списке.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - Форма, в которой выполняется действие.
//  Элемент            - ЭлементФормы - элемент, для которого обрабатывается событие.
//  Элемент            - СписокЗначений - содержит уже выбранные значения.
//  ТипПеречисления    - ТипЗначения - тип перечисления, по которому происходит отбор.
//  Заголовок - Строка - заголовок формы выбора.
//
Процедура МножественныйОтборСпискаНачалоВыбора(Форма, Элемент, Значения, ТипПеречисления, Заголовок) Экспорт

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокОтбор", Значения);
	ПараметрыОткрытия.Вставить("ТипПеречисления", ТипПеречисления);
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаМножественногоОтбораПослеЗакрытия", Форма, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ЭлектронноеВзаимодействие.Форма.МножественныйОтборСписка", ПараметрыОткрытия, Элемент,,,, ОповещениеОЗакрытии);

КонецПроцедуры

// Конец ЭлектронноеВзаимодействие

// Вызывается при выборе даты актуальности или даты события.
// Изменяет значение даты актуальности или даты события в зависимости от выбранного значения.
//
// Параметры:
//	ВыбранноеЗначение - Строка - выбранное значение отбора.
//	СтандартнаяОбработка - Булево - флаг стандартной обработки события.
//	Форма - ФормаКлиентскогоПриложения - форма списка документов.
//	Список - ДинамическийСписок - список документов.
//	ИмяРеквизитаАктуальность - Строка - имя реквизита строки отбора по актуальности.
//	ИмяРеквизитаДатаСобытия - Строка - имя реквизита даты, на которую документ будет просрочен.
//	ИмяЭлементаФормы - Строка - имя элемента формы содержащего отбор по актуальности.
//
Процедура ПриВыбореОтбораПоАктуальности(ВыбранноеЗначение, СтандартнаяОбработка, Форма, Список, ИмяРеквизитаАктуальность, ИмяРеквизитаДатаСобытия, ИмяЭлементаФормы) Экспорт
	
	Если ВыбранноеЗначение = "ИстекаетНаДату" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаАктуальность", ИмяРеквизитаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаДатаСобытия",  ИмяРеквизитаДатаСобытия);
		ДополнительныеПараметры.Вставить("ИмяЭлементаФормы",         ИмяЭлементаФормы);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПриВыбореОтбораПоАктуальностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		СтандартнаяОбработка = Истина;
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПоказатьВыборДаты(Форма.ДатаСобытия, ОписаниеОповещенияОЗакрытии, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			ПоказатьВводДаты(ОписаниеОповещенияОЗакрытии, Форма.ДатаСобытия, НСтр("ru = 'Выберите дату'"), ЧастиДаты.Дата);
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		ДатаСобытия = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура завершения для ПриВыбореОтбораПоАктуальности().
// Устанавливает в форме списка отбор по дате актуальности. Изменяет значение даты актуальности 
// в зависимости от строки актуальности.
//
// Параметры:
//	ДатаВыбора - Дата - введенное пользователем значение даты в результате диалога.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПриВыбореОтбораПоАктуальностиЗавершение(ДатаВыбора, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ЭлементФормы = Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаФормы];
	СписокВыбора = ЭлементФормы.СписокВыбора;
	
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		
		Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия] = ДатаВыбора;

		ЭлементСписка = СписокВыбора.НайтиПоЗначению("ИстекаетНаДатуВыбран");
		ПредставлениеВыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Истекает на дату %1'"), Формат(ДатаВыбора, "ДЛФ=D"));
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Представление = ПредставлениеВыбора;
		Иначе
			СписокВыбора.Добавить("ИстекаетНаДатуВыбран", ПредставлениеВыбора);
		КонецЕсли;
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность] = "ИстекаетНаДатуВыбран";
		
	Иначе
		
		КоммерческиеПредложенияДокументыКлиентСервер.УдалитьИзСпискаВыбраннуюДату(СписокВыбора);
		
	КонецЕсли;
	
	КоммерческиеПредложенияДокументыКлиентСервер.ПриИзмененииОтбораПоАктуальности(
		ДополнительныеПараметры.Список,
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность], 
		Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия], 
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		СписокВыбора);
	
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
