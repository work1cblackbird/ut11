////////////////////////////////////////////////////////////////////////////////
// Модуль "ОбеспечениеСервер", содержит процедуры и функции для
// работы с обеспечением потребностей и обновления соответствующих данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает текст запроса по датам графика
//
// Параметры:
//  Разделы      - Массив, Неопределено - разделы запроса.
//  ИскатьВперед - Булево               - если истина, то поиск вперед, иначе поиск назад.
//
// Возвращаемое значение:
//	Строка - текст запроса дат по календарю работы предприятия.
//
Функция ТекстЗапросаДатГрафика(Разделы = Неопределено, ИскатьВперед = Истина) Экспорт

	Если ИскатьВперед Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.Календарь   КАК Календарь,
			|	Т.ЧислоДней   КАК ЧислоДней,
			|	Т.ДатаОтсчета КАК ДатаОтсчета,
			|	ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВСледующемГоду.ДатаГрафика) КАК Дата
			|ПОМЕСТИТЬ ВтДатыГрафика
			|ИЗ
			|	ВтПараметрыПоиска КАК Т //шаблон
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
			|		ПО Т.Календарь = ТекущаяДата.Календарь
			|		 И ТекущаяДата.Год         = ГОД(Т.ДатаОтсчета)
			|		 И ТекущаяДата.ДатаГрафика = Т.ДатаОтсчета
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВТекущемГоду
			|		ПО Т.Календарь = ПоставкаВТекущемГоду.Календарь
			|		 И ПоставкаВТекущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВТекущемГоду.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоставкаВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
			|			+ Т.ЧислоДней
			|			+ ВЫБОР
			|				КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
			|					0
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоследняяДатаГода.Календарь
			|		 И ПоследняяДатаГода.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоследняяДатаГода.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Т.ДатаОтсчета, ГОД), ДЕНЬ)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВСледующемГоду
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоставкаВСледующемГоду.Календарь
			|		 И ПоставкаВСледующемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВСледующемГоду.Год = ГОД(Т.ДатаОтсчета) + 1
			|		 И ПоставкаВСледующемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= Т.ЧислоДней
			|			- (ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода
			|				- ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
			|			+ ВЫБОР
			|				КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
			|					0
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|
			|ГДЕ
			|	НЕ ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВСледующемГоду.ДатаГрафика) ЕСТЬ NULL
			|ИНДЕКСИРОВАТЬ ПО
			|	Календарь, ЧислоДней, ДатаОтсчета
			|;
			|
			|////////////////////////////////////////////////////////////
			|";
			
	Иначе
			
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.ЧислоДней   КАК ЧислоДней,
			|	Т.ДатаОтсчета КАК ДатаОтсчета,
			|	ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВПредыдущемГоду.ДатаГрафика) КАК Дата
			|ПОМЕСТИТЬ ВтДатыГрафика
			|ИЗ
			|	ВтПараметрыПоиска КАК Т //шаблон
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
			|		ПО Т.Календарь = ТекущаяДата.Календарь
			|		 И ТекущаяДата.Год         = ГОД(Т.ДатаОтсчета)
			|		 И ТекущаяДата.ДатаГрафика = Т.ДатаОтсчета
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВТекущемГоду
			|		ПО Т.Календарь = ПоставкаВТекущемГоду.Календарь
			|		 И ПоставкаВТекущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВТекущемГоду.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоставкаВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
			|			- Т.ЧислоДней
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоследняяДатаГода.Календарь
			|		 И ПоследняяДатаГода.Год = ГОД(Т.ДатаОтсчета) - 1
			|		 И ПоследняяДатаГода.ДатаГрафика = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Т.ДатаОтсчета, ГОД), СЕКУНДА, -1), ДЕНЬ)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВПредыдущемГоду
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоставкаВПредыдущемГоду.Календарь
			|		 И ПоставкаВПредыдущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВПредыдущемГоду.Год = ГОД(Т.ДатаОтсчета) - 1
			|		 И ПоставкаВПредыдущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода
			|				- (Т.ЧислоДней - ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
			|
			|ГДЕ
			|	НЕ ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВПредыдущемГоду.ДатаГрафика) ЕСТЬ NULL
			|ИНДЕКСИРОВАТЬ ПО
			|	ЧислоДней, ДатаОтсчета
			|;
			|
			|////////////////////////////////////////////////////////////
			|";
			
	КонецЕсли;
	
	Если Разделы <> Неопределено Тогда
		Разделы.Добавить("ТаблицаДатыГрафика");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

// Дополняет запрос параметрами необходимыми для выполнения запроса расчета статистики потребления,
//
// Параметры:
//   Запрос - Запрос - запрос содержащий текст расчета статистики потребления
//   ПериодКлассификации - СтандартныйПериод - период за который требуется рассчитать статистику.
//
Процедура УстановитьПараметрыЗапросаРасчетаСтатистики(Запрос, ПериодКлассификации = Неопределено) Экспорт
	
	Если ПериодКлассификации = Неопределено Тогда
		Периодичность = Константы.ПериодРасчетаТоварныхОграничений.Получить();
		КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
		ПериодКлассификации = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДатаСеанса(),
			Периодичность, - КоличествоПериодовКлассификации);
	Иначе
		Периодичность = Перечисления.Периодичность.День;
		КоличествоПериодовКлассификации = (ПериодКлассификации.ДатаОкончания - ПериодКлассификации.ДатаНачала + 1) / 86400;
	КонецЕсли;
	РасчетныйПериод = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДатаСеанса(), Периодичность);
	
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ПериодКлассификации.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", ПериодКлассификации.ДатаОкончания);
	Запрос.УстановитьПараметр("КоличествоПериодовКлассификации",  КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("РасчетныйПериодДатаНачала",        РасчетныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("РасчетныйПериодДатаОкончания",     РасчетныйПериод.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ОптимизироватьЗапасыРаспределительногоЦентра",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей")
			И Константы.ОптимизироватьЗапасыРаспределительногоЦентра.Получить());
	
КонецПроцедуры

// Возвращает временную таблицу со статистикой потребления (ВтСтатистикаПотребления).
//
// Параметры:
//  Запрос - Запрос - Запрос, содержащий параметры необходимые для расчета статистике. В этот же запрос добавляется результат расчета
//                    "ВтСтатистикаПотребления".
//  ИмяТаблицыТовары - Строка - Имя временной таблицы с товарами, по умолчанию: "ВтТовары".
//
Процедура ДобавитьВременнуюТаблицуСтатистикиПотребления(Запрос, ИмяТаблицыТовары) Экспорт
	
	РассчитыватьСезонностьПоТоварнымКатегориям =
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей")
			И Константы.ВариантУчетаСезонныхКолебаний.Получить()
				= Перечисления.УчетСезонныхКолебаний.ПоАналогичномуПериодуПрошлогоГода;
	
	Если Не РассчитыватьСезонностьПоТоварнымКатегориям Тогда
		
		СтатистикаПотребленияЯдро(Запрос, ИмяТаблицыТовары, "ВтСтатистикаПотребления");
		
	Иначе
		
		// Вход: <ИмяТаблицыТовары>
		// Выход:
		// ТоварныеКатегории: Склад,Номенклатура,Характеристика - ТоварнаяКатегория
		ДобавитьВременнуюТаблицуТоварныеКатегории(Запрос, ИмяТаблицыТовары);
		
		Текст =
			"ВЫБРАТЬ
			|	Товары.Склад          КАК Склад,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТоварыТекущийПериод
			|ИЗ
			|	ТоварыПереопределяемый КАК Товары
			|ГДЕ
			|	Товары.Номенклатура.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Товары.Склад          КАК Склад,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ИЗ
			|	ТоварныеКатегории КАК Товары
			|;
			|
			|///////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Склад          КАК Склад,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТоварыПрошлыйПериод
			|ИЗ
			|	ТоварыПереопределяемый КАК Товары
			|ГДЕ
			|	Товары.Номенклатура.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)";
		
		Запрос.Текст = СтрЗаменить(Текст, "ТоварыПереопределяемый", ИмяТаблицыТовары);
		Запрос.Выполнить();
		
		ПериодКлассификацииДатаНачала = Запрос.Параметры.ПериодКлассификацииДатаНачала;
		ПериодКлассификацииДатаОкончания = Запрос.Параметры.ПериодКлассификацииДатаОкончания;
		
		СтатистикаПотребленияЯдро(Запрос, "ТоварыТекущийПериод", "СтатистикаПотребленияТекущийПериод");
		
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ДобавитьМесяц(ПериодКлассификацииДатаНачала, - 12));
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", ДобавитьМесяц(ПериодКлассификацииДатаОкончания, - 12));
		
		СтатистикаПотребленияЯдро(Запрос, "ТоварныеКатегории", "СтатистикаПотребленияПрошлыйПериод");
		
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ДобавитьМесяц(Запрос.Параметры.РасчетныйПериодДатаНачала, - 12));
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", ДобавитьМесяц(Запрос.Параметры.РасчетныйПериодДатаОкончания, - 12));
		
		СтатистикаПотребленияЯдро(Запрос, "ТоварыПрошлыйПериод", "СтатистикаПотребленияПрошлыйРасчетныйПериод");
		
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ПериодКлассификацииДатаНачала);
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", ПериодКлассификацииДатаОкончания);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатистикаПотребления.Номенклатура.ТоварнаяКатегория  КАК ТоварнаяКатегория,
			|	СтатистикаПотребления.Склад                           КАК Склад,
			|	СУММА(СтатистикаПотребления.СреднедневноеПотребление) КАК СреднедневноеПотребление
			|ПОМЕСТИТЬ СтатистикаПоКатегорииТекущийПериод
			|ИЗ
			|	СтатистикаПотребленияТекущийПериод КАК СтатистикаПотребления
			|ГДЕ
			|	СтатистикаПотребления.Номенклатура.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
			|СГРУППИРОВАТЬ ПО
			|	СтатистикаПотребления.Номенклатура.ТоварнаяКатегория,
			|	СтатистикаПотребления.Склад
			|ИНДЕКСИРОВАТЬ ПО
			|	ТоварнаяКатегория, Склад
			|
			|;
			|/////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтатистикаПотребления.Номенклатура.ТоварнаяКатегория  КАК ТоварнаяКатегория,
			|	СтатистикаПотребления.Склад                           КАК Склад,
			|	СУММА(СтатистикаПотребления.СреднедневноеПотребление) КАК СреднедневноеПотребление
			|ПОМЕСТИТЬ СтатистикаПоКатегорииПрошлыйПериод
			|ИЗ
			|	СтатистикаПотребленияПрошлыйПериод КАК СтатистикаПотребления
			|ГДЕ
			|	СтатистикаПотребления.Номенклатура.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
			|СГРУППИРОВАТЬ ПО
			|	СтатистикаПотребления.Номенклатура.ТоварнаяКатегория,
			|	СтатистикаПотребления.Склад
			|ИНДЕКСИРОВАТЬ ПО
			|	ТоварнаяКатегория, Склад
			|
			|;
			|/////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура                                             КАК Номенклатура,
			|	Товары.Характеристика                                           КАК Характеристика,
			|	Товары.Склад                                                    КАК Склад,
			|	&ПериодКлассификацииДатаНачала                                  КАК ДатаНачалаПериода,
			|	&ПериодКлассификацииДатаОкончания                               КАК ДатаОкончанияПериода,
			|	СтатистикаПотребления.Потребление                               КАК Потребление,
			|	СтатистикаПотребления.СреднедневноеПотребление                  КАК СреднедневноеПотребление,
			|	СтатистикаПотребления.ДисперсияПотребления                      КАК ДисперсияПотребления,
			|	СтатистикаПотребления.ПотреблениеСтабильно                      КАК ПотреблениеСтабильно
			|ПОМЕСТИТЬ ВтСтатистикаПотребления
			|ИЗ
			|	ТоварыПереопределяемый КАК Товары
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПотребленияТекущийПериод КАК СтатистикаПотребления
			|		ПО Товары.Номенклатура   = СтатистикаПотребления.Номенклатура
			|		 И Товары.Характеристика = СтатистикаПотребления.Характеристика
			|		 И Товары.Склад          = СтатистикаПотребления.Склад
			|		 И СтатистикаПотребления.Номенклатура.ТоварнаяКатегория = ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
			|ГДЕ
			|	НЕ СтатистикаПотребления.Номенклатура ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Товары.Номенклатура                                                            КАК Номенклатура,
			|	Товары.Характеристика                                                          КАК Характеристика,
			|	Товары.Склад                                                                   КАК Склад,
			|	ДОБАВИТЬКДАТЕ(&РасчетныйПериодДатаНачала, МЕСЯЦ, -12)                          КАК ДатаНачалаПериода,
			|	ДОБАВИТЬКДАТЕ(&РасчетныйПериодДатаОкончания, МЕСЯЦ, -12)                       КАК ДатаОкончанияПериода,
			|	СтатистикаПотребления.Потребление                                              КАК Потребление,
			|	СтатистикаПотребления.СреднедневноеПотребление
			|		* ВЫБОР КОГДА ЕСТЬNULL(СтатистикаПоКатегорииПрошлыйПериод.СреднедневноеПотребление, 0) = 0 ТОГДА
			|					1
			|				ИНАЧЕ
			|					ЕСТЬNULL(СтатистикаПоКатегорииТекущийПериод.СреднедневноеПотребление, 0)
			|						/ СтатистикаПоКатегорииПрошлыйПериод.СреднедневноеПотребление
			|			КОНЕЦ                                                                  КАК СреднедневноеПотребление,
			|	СтатистикаПотребления.ДисперсияПотребления                                     КАК ДисперсияПотребления,
			|	СтатистикаПотребления.ПотреблениеСтабильно                                     КАК ПотреблениеСтабильно
			|ИЗ
			|	ТоварыПереопределяемый КАК Товары
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПотребленияПрошлыйРасчетныйПериод КАК СтатистикаПотребления
			|		ПО Товары.Номенклатура   = СтатистикаПотребления.Номенклатура
			|		 И Товары.Характеристика = СтатистикаПотребления.Характеристика
			|		 И Товары.Склад          = СтатистикаПотребления.Склад
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПоКатегорииТекущийПериод КАК СтатистикаПоКатегорииТекущийПериод
			|		ПО Товары.Номенклатура.ТоварнаяКатегория = СтатистикаПоКатегорииТекущийПериод.ТоварнаяКатегория
			|		 И Товары.Склад                          = СтатистикаПоКатегорииТекущийПериод.Склад
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПоКатегорииПрошлыйПериод КАК СтатистикаПоКатегорииПрошлыйПериод
			|		ПО Товары.Номенклатура.ТоварнаяКатегория = СтатистикаПоКатегорииПрошлыйПериод.ТоварнаяКатегория
			|		 И Товары.Склад                          = СтатистикаПоКатегорииПрошлыйПериод.Склад
			|ГДЕ
			|	НЕ СтатистикаПотребления.Номенклатура ЕСТЬ NULL
			|;
			|
			|///////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СтатистикаПотребленияТекущийПериод;
			|УНИЧТОЖИТЬ СтатистикаПотребленияПрошлыйПериод;
			|УНИЧТОЖИТЬ СтатистикаПоКатегорииТекущийПериод;
			|УНИЧТОЖИТЬ СтатистикаПоКатегорииПрошлыйПериод;
			|УНИЧТОЖИТЬ ТоварыТекущийПериод;
			|УНИЧТОЖИТЬ ТоварныеКатегории";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыПереопределяемый", ИмяТаблицыТовары);
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Объединяет данные из коллекции и таблицы и помещает их в коллекцию.
//
// Параметры:
//  Коллекция - ДанныеФормыКоллекция - Коллекция с данными отсортированная по полям ключа,
//  Таблица - ТаблицаЗначений - Содержит данные для дополнения коллекции, отсортированная по полям ключа,
//  СтрокаКлюча - Строка - Поля, по которым осуществляется поиск строки в коллекции,
//              для принятия решения об обновлении имеющейся строки коллекции либо добавлении новой,
//  Параметры - Структура - содержит параметры объединения.
//
Процедура ОбновитьКоллекциюДаннымиИзТаблицы(Коллекция, Таблица, СтрокаКлюча, Параметры = Неопределено) Экспорт

	Если Параметры = Неопределено Тогда
		Параметры = ОбеспечениеКлиентСервер.ПараметрыОбъединенияТаблиц();
	КонецЕсли;

	Если Параметры.ДобавлятьСтроки Тогда
		Параметры.НовыеСтроки      = Коллекция.СкопироватьКолонки();
		Параметры.ИзмененныеСтроки = Коллекция.СкопироватьКолонки();
	КонецЕсли;

	ПоляКлюча = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКлюча);
	ИндексПриемник = 0;
	Индекс = 0;
	СравнениеЗначений = Новый СравнениеЗначений();
	Пока Индекс < Таблица.Количество() Цикл

		Строка = Таблица[Индекс];

		Если ИндексПриемник < Коллекция.Количество() Тогда

			СтрокаПриемник = Коллекция[ИндексПриемник];

			РезультатСравненияКлюча = 0;
			Для Каждого Поле Из ПоляКлюча Цикл

				РезультатСравненияПоля = СравнениеЗначений.Сравнить(Строка[Поле], СтрокаПриемник[Поле]);
				Если РезультатСравненияПоля < 0 Тогда
					РезультатСравненияКлюча = -1;
					Прервать;
				ИначеЕсли РезультатСравненияПоля > 0 Тогда
					РезультатСравненияКлюча = 1;
					Прервать;
				КонецЕсли;

			КонецЦикла;

		Иначе
			РезультатСравненияКлюча = 1;
		КонецЕсли;

		Если РезультатСравненияКлюча < 0 Тогда

			Если Параметры.ДобавлятьСтроки Тогда
				НоваяСтрока = Параметры.НовыеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;

			Индекс = Индекс + 1;

		ИначеЕсли РезультатСравненияКлюча = 0 Тогда

			Если Параметры.ДобавлятьСтроки Тогда
				НоваяСтрока = Параметры.ИзмененныеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриемник);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ИначеЕсли Параметры.ОбновлятьСтроки Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПриемник, Строка);
				ИндексПриемник = ИндексПриемник + 1;
			КонецЕсли;

			Индекс = Индекс + 1;

		// РезультатСравненияКлюча > 0
		ИначеЕсли ИндексПриемник < Коллекция.Количество() Тогда

			Если Параметры.Умолчания <> Неопределено Тогда

				ЗаполнитьЗначенияСвойств(СтрокаПриемник, Параметры.Умолчания);

				Если Параметры.ДобавлятьСтроки Тогда
					НоваяСтрока = Параметры.ИзмененныеСтроки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;

			КонецЕсли;

			ИндексПриемник = ИндексПриемник + 1;

		Иначе

			Если Параметры.ДобавлятьСтроки Тогда
				НоваяСтрока = Параметры.НовыеСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;

			Индекс = Индекс + 1;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Предназначена для разбиения таблицы значений на несколько таблиц по комбинациям значений в ключевых полях таблицы.
//
// Параметры:
//   Таблица            - ТаблицаЗначений      - таблица, которую необходимо разбить на несколько таблиц.
//   ПоляКлюча          - Строка               - имена колонок таблицы, образующие ключ строки таблицы.
//   ПоляКлючаУдаляемые - Строка, Неопределено - имена колонок из состава ключа, которые необходимо удалить
//                                               из полученных в результате разбиения таблиц.
// Возвращаемое значение:
//  Массив из Структура:
//    * Ключ    - Структура       - структура, с полями, имена которых переданы в параметре "ПоляКлюча".
//                                  Содержит комбинацию значений полей, таблицы переданной параметром "Таблица".
//    * Таблица - ТаблицаЗначений - таблица, с полями совпадающими с полями таблицы переданной в параметре "Таблица",
//                                  не содержит полей, имена которых переданы в параметре "ПоляКлючаУдаляемые".
//                                  Содержит копию строк таблицы переданной параметром "Таблица", отобранных по
//                                  значениям полей, перечисленным в структуре "Ключ".
//
Функция РазбитьТаблицуПоЗначениюКлюча(Таблица, ПоляКлюча, ПоляКлючаУдаляемые = Неопределено) Экспорт

	Ключ = Новый Структура(ПоляКлюча);
	ПоляДляУдаления = Новый Структура(?(ПоляКлючаУдаляемые = Неопределено, ПоляКлюча, ПоляКлючаУдаляемые));

	ТаблицаБезКлюча = Таблица.СкопироватьКолонки();
	Для Каждого Свойство Из ПоляДляУдаления Цикл
		ТаблицаБезКлюча.Колонки.Удалить(Свойство.Ключ);
	КонецЦикла;

	МассивТаблиц = Новый Массив();

	Для Счетчик = 0 По Таблица.Количество() - 1 Цикл

		ДанныеЗаполнения = Таблица[Счетчик];
		Если ИзменилсяКлюч(Ключ, ДанныеЗаполнения) Тогда

			Ключ = Новый Структура(ПоляКлюча);
			ТаблицаБезКлюча = ТаблицаБезКлюча.СкопироватьКолонки();
			МассивТаблиц.Добавить(Новый Структура("Ключ, Таблица", Ключ, ТаблицаБезКлюча));
			ЗаполнитьЗначенияСвойств(Ключ, ДанныеЗаполнения);

		КонецЕсли;

		НоваяСтрока = ТаблицаБезКлюча.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);

	КонецЦикла;

	Возврат МассивТаблиц;

КонецФункции

// Проверяет ключ на изменение.
//
// Параметры:
//   Ключ              - Структура                                                     - содержит ранее установленные
//                                                                                       значения ключа.
//   ПроверяемаяСтрока - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений, Структура - данные содержащие текущие
//                                                                                       значения ключа.
// 
// Возвращаемое значение:
//   Булево - признак, что ключ изменился.
//
Функция ИзменилсяКлюч(Ключ, ПроверяемаяСтрока) Экспорт
	
	Для Каждого Свойство Из Ключ Цикл
	
		Если ПроверяемаяСтрока[Свойство.Ключ] <> Свойство.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИспользоватьУправлениеПеремещениемОбособленныхТоваровВычислитьИЗаписать() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.УчетЗатрат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Константа.РазрешитьОбособлениеТоваровСверхПотребности КАК РазрешитьОбособлениеТоваровСверхПотребности
		|ГДЕ
		|	РазрешитьОбособлениеТоваровСверхПотребности.Значение
		|
		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Константа.ИспользоватьПеремещениеТоваров КАК ИспользоватьПеремещениеТоваров
		|ГДЕ
		|	ИспользоватьПеремещениеТоваров.Значение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Константа.ИспользоватьУправлениеПроизводством2_2 КАК ИспользоватьУправлениеПроизводством2_2
		|ГДЕ
		|	ИспользоватьУправлениеПроизводством2_2.Значение";
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьУправлениеПеремещениемОбособленныхТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		УстанавливаемоеЗначение = Не ПакетРезультатов[0].Пустой() И Не ПакетРезультатов[1].Пустой();
		МенеджерКонстанты = Константы.ИспользоватьУправлениеПеремещениемОбособленныхТоваров.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Прочитать();
		Если МенеджерКонстанты.Значение <> УстанавливаемоеЗначение Тогда
			МенеджерКонстанты.Значение = УстанавливаемоеЗначение;
			МенеджерКонстанты.ДополнительныеСвойства.Вставить("КонстантаВычисленаПослеБлокировки", Истина);
			МенеджерКонстанты.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru = 'Не удалось записать значение константы ""Использовать управление перемещением обособленных товаров""'");
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция УсловияЗакупокПартнера(Партнер, Цена = 0) Экспорт

	Результат = Новый Структура();
	
	ВалютаУпрУчет = Константы.ВалютаУправленческогоУчета.Получить();
	Результат.Вставить("Соглашение",             Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	Результат.Вставить("Валюта",                 ВалютаУпрУчет);
	Результат.Вставить("Цена",                   Цена);
	Результат.Вставить("МинимальнаяСуммаЗаказа", 0);
	Результат.Вставить("ВидЦеныПоставщика",      Справочники.ВидыЦенПоставщиков.ПустаяСсылка());
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер);
	Если УсловияЗакупок <> Неопределено И ЗначениеЗаполнено(УсловияЗакупок.Соглашение) Тогда
		
		Результат.Соглашение             = УсловияЗакупок.Соглашение;
		Результат.Валюта                 = УсловияЗакупок.Валюта;
		Результат.ВидЦеныПоставщика      = УсловияЗакупок.ВидЦеныПоставщика;
		Результат.МинимальнаяСуммаЗаказа = УсловияЗакупок.МинимальнаяСуммаЗаказа;
		
		Если Цена <> 0 Тогда
			
			Коэффициент = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
				ВалютаУпрУчет, УсловияЗакупок.Валюта, ТекущаяДатаСеанса());
			Результат.Цена = Результат.Цена * Коэффициент;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция ПраваДоступаНаЗаписьСпособаИлиМетода. Получает право на изменение/добавление в логистические регистры.
// В частности используется при настройке форм работы с логистическими параметрами.
// 
// Возвращаемое значение:
//  Структура - структура со следующими полями:
//   * ВариантыОбеспечения - Булево - истина, если есть необходимые права на регистры "ВариантыОбеспеченияТоварами", "ВариантыОбеспеченияРаботами".
//	 * ТоварныеОграничения - Булево - истина, если есть необходимые права на регистр "ТоварныеОграничения".
//
Функция ПраваДоступаНаЗаписьСпособаИлиМетода() Экспорт
	
	Результат = Новый Структура("ВариантыОбеспечения, ТоварныеОграничения");
	Результат.ВариантыОбеспечения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыОбеспеченияТоварами)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыОбеспеченияРаботами);
	Результат.ТоварныеОграничения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ТоварныеОграничения);
	Возврат Результат;
	
КонецФункции

// Метод регламентного задания РасчетРекомендацийПоддержанияЗапасов.
// Производит расчет статистики потребления и рекомендаций по изменению поддержания запасов товаров на складах.
//
Процедура РасчетРекомендацийПоддержанияЗапасов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетРекомендацийПоддержанияЗапасов);
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДатаСеанса(), ПериодКлассификации, - КоличествоПериодовКлассификации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеОграничения.Номенклатура КАК Номенклатура,
		|	ТоварныеОграничения.Характеристика КАК Характеристика,
		|	ТоварныеОграничения.Склад КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|ГДЕ
		|	ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И (ТоварныеОграничения.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ИЛИ ТоварныеОграничения.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОбороты.Номенклатура,
		|	ТоварыНаСкладахОбороты.Характеристика,
		|	ТоварыНаСкладахОбороты.Склад
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ТоварыНаСкладахОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	УстановитьПривилегированныйРежим(Истина);
	ТоварыНаСкладах = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрыСведений.ТоварныеОграничения.РассчитатьСтатистикуПотребленияТоваров(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура РасчетРекомендацийПоддержанияЗапасовНаСкладе(Параметры, АдресХранилища) Экспорт
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДатаСеанса(), ПериодКлассификации, - КоличествоПериодовКлассификации);
		
	ДатаАктуальности = ?(Параметры.Свойство("ДатаАктуальности"), Параметры.ДатаАктуальности, Период.ДатаОкончания);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыДляРекомендаций.Номенклатура КАК Номенклатура,
		|	ТоварыДляРекомендаций.Характеристика КАК Характеристика,
		|	ТоварыДляРекомендаций.Склад КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеОграничения.Номенклатура КАК Номенклатура,
		|		ТоварныеОграничения.Характеристика КАК Характеристика,
		|		ТоварныеОграничения.Склад КАК Склад,
		|		ТоварныеОграничения.ДатаРасчетаРекомендаций КАК ДатаРасчетаРекомендаций
		|	ИЗ
		|		РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|	ГДЕ
		|		ТоварныеОграничения.Склад = &Склад
		|		И ТоварныеОграничения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И (ТоварныеОграничения.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ТоварныеОграничения.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыНаСкладахОбороты.Номенклатура,
		|		ТоварыНаСкладахОбороты.Характеристика,
		|		ТоварыНаСкладахОбороты.Склад,
		|		ДАТАВРЕМЯ(1, 1, 1)
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНачала, &ДатаОкончания, , Склад = &Склад) КАК ТоварыНаСкладахОбороты) КАК ТоварыДляРекомендаций
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыДляРекомендаций.Номенклатура,
		|	ТоварыДляРекомендаций.Склад,
		|	ТоварыДляРекомендаций.Характеристика
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ТоварыДляРекомендаций.ДатаРасчетаРекомендаций) < &ДатаАктуальности";
	
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("ДатаНачала",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	УстановитьПривилегированныйРежим(Истина);
	ТоварыНаСкладах = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрыСведений.ТоварныеОграничения.РассчитатьСтатистикуПотребленияТоваров(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИспользоватьНазначенияБезЗаказаВычислитьИЗаписать() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.УчетЗатрат
		|

		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Константа.ИспользоватьОбособленноеОбеспечениеЗаказов КАК ИспользоватьОбособленноеОбеспечениеЗаказов
		|ГДЕ
		|	ИспользоватьОбособленноеОбеспечениеЗаказов.Значение";
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьНазначенияБезЗаказа");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		УстанавливаемоеЗначение = Не ПакетРезультатов[0].Пустой() И Не ПакетРезультатов[1].Пустой();
		МенеджерКонстанты = Константы.ИспользоватьНазначенияБезЗаказа.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Прочитать();
		Если МенеджерКонстанты.Значение <> УстанавливаемоеЗначение Тогда
			МенеджерКонстанты.Значение = УстанавливаемоеЗначение;
			МенеджерКонстанты.ДополнительныеСвойства.Вставить("КонстантаВычисленаПослеБлокировки", Истина);
			МенеджерКонстанты.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru = 'Не удалось записать значение константы ""Использовать назначения без заказа""'");
	КонецПопытки;
	
КонецПроцедуры

Процедура НеИспользоватьНазначенияБезЗаказаВычислитьИЗаписать() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.УчетЗатрат
		|
		|;
		|/////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Константа.ИспользоватьОбособленноеОбеспечениеЗаказов КАК ИспользоватьОбособленноеОбеспечениеЗаказов
		|ГДЕ
		|	ИспользоватьОбособленноеОбеспечениеЗаказов.Значение";
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НеИспользоватьНазначенияБезЗаказа");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		УстанавливаемоеЗначение = ПакетРезультатов[0].Пустой() Или ПакетРезультатов[1].Пустой();
		МенеджерКонстанты = Константы.НеИспользоватьНазначенияБезЗаказа.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Прочитать();
		Если МенеджерКонстанты.Значение <> УстанавливаемоеЗначение Тогда
			МенеджерКонстанты.Значение = УстанавливаемоеЗначение;
			МенеджерКонстанты.ДополнительныеСвойства.Вставить("КонстантаВычисленаПослеБлокировки", Истина);
			МенеджерКонстанты.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru = 'Не удалось записать значение константы ""Не использовать назначения без заказа""'");
	КонецПопытки;
	
КонецПроцедуры

Процедура НеИспользоватьНазначенияБезЗаказаВычислитьИЗаписатьИнверсией() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НеИспользоватьНазначенияБезЗаказа");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		УстанавливаемоеЗначение = Не Константы.ИспользоватьНазначенияБезЗаказа.Получить();
		МенеджерКонстанты = Константы.НеИспользоватьНазначенияБезЗаказа.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Прочитать();
		Если МенеджерКонстанты.Значение <> УстанавливаемоеЗначение Тогда
			МенеджерКонстанты.Значение = УстанавливаемоеЗначение;
			МенеджерКонстанты.ДополнительныеСвойства.Вставить("КонстантаВычисленаПослеБлокировки", Истина);
			МенеджерКонстанты.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru = 'Не удалось записать значение константы ""Не использовать назначения без заказа""'");
	КонецПопытки;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВременныеТаблицыТопологииСкладов(Запрос, ИмяТаблицыТовары)
	
	ТекстыЗапросов = Новый Массив();
	
	ТекстыЗапросов.Добавить(Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь));
	Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ РазличнаяНоменклатура
		|ИЗ
		|	ТоварыПереопределяемый КАК Товары
		|ГДЕ
		|	&ОптимизироватьЗапасыРаспределительногоЦентра";
	Текст = СтрЗаменить(Текст, "ТоварыПереопределяемый", ИмяТаблицыТовары);
	ТекстыЗапросов.Добавить(Текст);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов);
	Запрос.Выполнить();
	
	РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаТопологияСкладов(Запрос, "РазличнаяНоменклатура");
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить("УНИЧТОЖИТЬ ВтФорматыСкладов");
	ТекстыЗапросов.Добавить("УНИЧТОЖИТЬ РазличнаяНоменклатура");
	
	ТекстыЗапросов.Добавить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаРазличныеТоварыИСклады(ИмяТаблицыТовары, Ложь));
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременныеТаблицыОстатковРасходаИВозвратов(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладах.Склад                             КАК Склад,
		|	ТоварыНаСкладах.Номенклатура                      КАК Номенклатура,
		|	ТоварыНаСкладах.Характеристика                    КАК Характеристика,
		|	НачалоПериода(ТоварыНаСкладах.Период, ДЕНЬ)       КАК Дата,
		|	ТоварыНаСкладах.ВНаличииКонечныйОстаток > 0       КАК ЕстьКонечныйОстаток,
		|	ТоварыНаСкладах.ВНаличииНачальныйОстаток > 0
		|		И ТоварыНаСкладах.ВНаличииКонечныйОстаток > 0 КАК ЕстьОстатки
		|ПОМЕСТИТЬ ПризнакиНаличияОстатковПоДатам
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
		|		&ПериодКлассификацииДатаНачала,
		|		&ПериодКлассификацииДатаОкончания,
		|		ДЕНЬ,
		|		ДвиженияИГраницыПериода,
		|		Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И (Номенклатура, Характеристика, Склад) В(
		|				ВЫБРАТЬ
		|					Товары.Номенклатура   КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика,
		|					Товары.Склад          КАК Склад
		|				ИЗ
		|					РазличныеТоварыИСклады КАК Товары)) КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.Период < &ПериодКлассификацииДатаОкончания
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отгрузка.Номенклатура     КАК Номенклатура,
		|	Отгрузка.Характеристика   КАК Характеристика,
		|	Отгрузка.Склад            КАК Отправитель,
		|	Отгрузка.Получатель       КАК Получатель,
		|	Отгрузка.Период           КАК Период,
		|	Отгрузка.КОтгрузкеРасход  КАК Отгружено
		|ПОМЕСТИТЬ ДвиженияПоПеремещению
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			&ПериодКлассификацииДатаНачала,
		|			&ПериодКлассификацииДатаОкончания,
		|			ДЕНЬ,
		|			Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И Получатель ССЫЛКА Справочник.Склады
		|				И (Номенклатура, Характеристика, Склад) В(
		|					ВЫБРАТЬ
		|						Товары.Номенклатура   КАК Номенклатура,
		|						Товары.Характеристика КАК Характеристика,
		|						Товары.Склад          КАК Склад
		|					ИЗ
		|						РазличныеТоварыИСклады КАК Товары)
		|				И Склад В(
		|					ВЫБРАТЬ
		|						Склады.Ссылка КАК Склад
		|					ИЗ
		|						Справочник.Склады КАК Склады)) КАК Отгрузка
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отгрузка.Номенклатура     КАК Номенклатура,
		|	Отгрузка.Характеристика   КАК Характеристика,
		|	Отгрузка.Отправитель      КАК Отправитель,
		|	Отгрузка.Получатель       КАК Получатель,
		|	СУММА(Отгрузка.Отгружено) КАК Отгружено
		|ПОМЕСТИТЬ ПеремещениеОтгрузкаБезДат
		|ИЗ
		|	ДвиженияПоПеремещению КАК Отгрузка
		|СГРУППИРОВАТЬ ПО
		|	Отгрузка.Номенклатура,
		|	Отгрузка.Характеристика,
		|	Отгрузка.Отправитель,
		|	Отгрузка.Получатель
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Номенклатура   КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Отправитель    КАК Отправитель,
		|	Набор.Получатель     КАК Получатель,
		|	СУММА(Набор.Принято) КАК Принято
		|ПОМЕСТИТЬ ПеремещениеПриемка
		|ИЗ(
		|	ВЫБРАТЬ
		|		Приемка.Номенклатура             КАК Номенклатура,
		|		Приемка.Характеристика           КАК Характеристика,
		|		Приемка.Отправитель              КАК Отправитель,
		|		Приемка.Склад                    КАК Получатель,
		|		Приемка.КОформлениюОрдеровРасход КАК Принято
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.Обороты(
		|				&ПериодКлассификацииДатаНачала,
		|				&ПериодКлассификацииДатаОкончания,
		|				,
		|				Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|					И Отправитель ССЫЛКА Справочник.Склады
		|					И (Номенклатура, Характеристика, Склад) В(
		|						ВЫБРАТЬ
		|							Товары.Номенклатура   КАК Номенклатура,
		|							Товары.Характеристика КАК Характеристика,
		|							Товары.Склад          КАК Склад
		|						ИЗ
		|							РазличныеТоварыИСклады КАК Товары)) КАК Приемка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Приемка.Номенклатура   КАК Номенклатура,
		|		Приемка.Характеристика КАК Характеристика,
		|		ВЫБОР КОГДА НЕ Перемещения.Ссылка ЕСТЬ NULL ТОГДА
		|					Перемещения.СкладОтправитель
		|			КОНЕЦ              КАК Отправитель,
		|		Приемка.Склад          КАК Получатель,
		|		Приемка.ВНаличии       КАК Принято
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах КАК Приемка
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Перемещения
		|			ПО Перемещения.Ссылка = Приемка.Регистратор
		|			
		|	ГДЕ
		|		Приемка.Активность
		|			И Приемка.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			И Приемка.Период МЕЖДУ &ПериодКлассификацииДатаНачала И &ПериодКлассификацииДатаОкончания
		|			И Приемка.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И (Приемка.Номенклатура, Приемка.Характеристика, Приемка.Склад) В(
		|				ВЫБРАТЬ
		|					Товары.Номенклатура   КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика,
		|					Товары.Склад          КАК Склад
		|				ИЗ
		|					РазличныеТоварыИСклады КАК Товары)
		|			И НЕ (Перемещения.Ссылка ЕСТЬ NULL
		|				)) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Отправитель,
		|	Набор.Получатель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Отправитель, Получатель
		|;
		|
		|//////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Склад             КАК Склад,
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	СУММА(Набор.Возврат)    КАК Количество
		|ПОМЕСТИТЬ ВозвратыДанныеИБ
		|ИЗ(
		|	ВЫБРАТЬ
		|		Перемещения.Номенклатура       КАК Номенклатура,
		|		Перемещения.Характеристика     КАК Характеристика,
		|		Перемещения.Отправитель        КАК Склад,
		|		ВЫБОР КОГДА СУММА(Приемка.Принято) > СУММА(Перемещения.Отгружено) ТОГДА
		|					СУММА(Перемещения.Отгружено)
		|				ИНАЧЕ
		|					СУММА(Приемка.Принято)
		|			КОНЕЦ КАК Возврат
		|	ИЗ
		|		ПеремещениеОтгрузкаБезДат КАК Перемещения
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПеремещениеПриемка КАК Приемка
		|			ПО Приемка.Номенклатура   = Перемещения.Номенклатура
		|			 И Приемка.Характеристика = Перемещения.Характеристика
		|			 И Приемка.Получатель     = Перемещения.Отправитель
		|			 И Приемка.Отправитель    = Перемещения.Получатель
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТопологияСкладов КАК ТопологияОтправитель
		|			ПО ТопологияОтправитель.Номенклатура   = Перемещения.Номенклатура
		|			 И ТопологияОтправитель.Характеристика = Перемещения.Характеристика
		|			 И ТопологияОтправитель.Склад          = Перемещения.Отправитель
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТопологияСкладов КАК ТопологияПолучатель
		|			ПО ТопологияПолучатель.Номенклатура   = Перемещения.Номенклатура
		|			 И ТопологияПолучатель.Характеристика = Перемещения.Характеристика
		|			 И ТопологияПолучатель.Склад          = Перемещения.Получатель
		|			 И ТопологияПолучатель.Центр          = ТопологияОтправитель.Центр
		|	ГДЕ
		|		НЕ Приемка.Номенклатура ЕСТЬ NULL
		|			И Перемещения.Отправитель.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.ОптовыйСклад)
		|			И ТопологияПолучатель.Номенклатура ЕСТЬ NULL
		|	СГРУППИРОВАТЬ ПО
		|		Перемещения.Номенклатура,
		|		Перемещения.Характеристика,
		|		Перемещения.Отправитель
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Возврат.Номенклатура             КАК Номенклатура,
		|		Возврат.Характеристика           КАК Характеристика,
		|		Возврат.Склад                    КАК Склад,
		|		Возврат.КОформлениюОрдеровРасход КАК Возврат
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.Обороты(
		|				&ПериодКлассификацииДатаНачала,
		|				&ПериодКлассификацииДатаОкончания,
		|				,
		|				Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|					И (Номенклатура, Характеристика, Склад) В(
		|						ВЫБРАТЬ
		|							Товары.Номенклатура   КАК Номенклатура,
		|							Товары.Характеристика КАК Характеристика,
		|							Товары.Склад          КАК Склад
		|						ИЗ
		|							РазличныеТоварыИСклады КАК Товары)
		|					И ХозяйственнаяОперация В(
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзПроизводства),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера),
		//++ Устарело_Переработка24
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПереработчика),
		//-- Устарело_Переработка24
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПереработчика2_5),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя),
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))) КАК Возврат
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Возврат.Номенклатура   КАК Номенклатура,
		|		Возврат.Характеристика КАК Характеристика,
		|		Возврат.Склад          КАК Склад,
		|		Возврат.ВНаличии       КАК Возврат
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах КАК Возврат
		|	ГДЕ
		|		Возврат.Активность
		|			И Возврат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			И Возврат.Период МЕЖДУ &ПериодКлассификацииДатаНачала И &ПериодКлассификацииДатаОкончания
		|			И Возврат.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И (Возврат.Номенклатура, Возврат.Характеристика, Возврат.Склад) В(
		|				ВЫБРАТЬ
		|					Товары.Номенклатура   КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика,
		|					Товары.Склад          КАК Склад
		|				ИЗ
		|					РазличныеТоварыИСклады КАК Товары)
		|				
		|			И ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Возврат.Регистратор) = ТИП(Документ.ПрочееОприходованиеТоваров) ТОГДА
		|						ВЫРАЗИТЬ(Возврат.Регистратор КАК Документ.ПрочееОприходованиеТоваров).ХозяйственнаяОперация
		|							= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации)

		|					ИНАЧЕ
		|						ТИПЗНАЧЕНИЯ(Возврат.Регистратор) В(
		|							ТИП(Документ.ПоступлениеТоваровОтХранителя),
		|							ТИП(Документ.ЧекККМВозврат),
		|							ТИП(Документ.ВозвратТоваровОтКлиента))
		|				КОНЕЦ
		|) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Склад,
		|	Набор.Номенклатура,
		|	Набор.Характеристика
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Склад             КАК Склад,
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Период            КАК Дата,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ РасходПоДнямДанныеИБ
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТоварыНаСкладах.Номенклатура   КАК Номенклатура,
		|		ТоварыНаСкладах.Характеристика КАК Характеристика,
		|		ТоварыНаСкладах.Склад          КАК Склад,
		|		ТоварыНаСкладах.Период         КАК Период,
		|		ТоварыНаСкладах.ВНаличииРасход КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Обороты(
		|			&ПериодКлассификацииДатаНачала,
		|			&ПериодКлассификацииДатаОкончания,
		|			ДЕНЬ,
		|			Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И (Номенклатура, Характеристика, Склад) В(
		|					ВЫБРАТЬ
		|						Товары.Номенклатура   КАК Номенклатура,
		|						Товары.Характеристика КАК Характеристика,
		|						Товары.Склад          КАК Склад
		|					ИЗ
		|						РазличныеТоварыИСклады КАК Товары)) КАК ТоварыНаСкладах
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыНаСкладах.Номенклатура   КАК Номенклатура,
		|		ТоварыНаСкладах.Характеристика КАК Характеристика,
		|		ТоварыНаСкладах.Склад          КАК Склад,
		|		НАЧАЛОПЕРИОДА(ТоварыНаСкладах.Период, ДЕНЬ) КАК Период,
		|		-ТоварыНаСкладах.ВНаличии      КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
		|	ГДЕ
		|		ТоварыНаСкладах.Активность
		|			И ТоварыНаСкладах.Период МЕЖДУ &ПериодКлассификацииДатаНачала И &ПериодКлассификацииДатаОкончания
		|			И ТоварыНаСкладах.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И ТИПЗНАЧЕНИЯ(ТоварыНаСкладах.Регистратор) = ТИП(Документ.ОрдерНаПеремещениеТоваров)
		|			И ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			И (Номенклатура, Характеристика, Склад) В(
		|				ВЫБРАТЬ
		|					Товары.Номенклатура   КАК Номенклатура,
		|					Товары.Характеристика КАК Характеристика,
		|					Товары.Склад          КАК Склад
		|				ИЗ
		|					РазличныеТоварыИСклады КАК Товары)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Перемещения.Номенклатура   КАК Номенклатура,
		|		Перемещения.Характеристика КАК Характеристика,
		|		Перемещения.Отправитель    КАК Склад,
		|		Перемещения.Период         КАК Период,
		|		-Перемещения.Отгружено     КАК Количество
		|	ИЗ
		|		ДвиженияПоПеремещению КАК Перемещения
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТопологияСкладов КАК ТопологияОтправитель
		|			ПО ТопологияОтправитель.Номенклатура   = Перемещения.Номенклатура
		|			 И ТопологияОтправитель.Характеристика = Перемещения.Характеристика
		|			 И ТопологияОтправитель.Склад          = Перемещения.Отправитель
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТопологияСкладов КАК ТопологияПолучатель
		|			ПО ТопологияПолучатель.Номенклатура   = Перемещения.Номенклатура
		|			 И ТопологияПолучатель.Характеристика = Перемещения.Характеристика
		|			 И ТопологияПолучатель.Склад          = Перемещения.Получатель
		|			 И ТопологияПолучатель.Центр          = ТопологияПолучатель.Центр
		|	ГДЕ
		|		НЕ ТопологияПолучатель.Номенклатура ЕСТЬ NULL
		|			ИЛИ Перемещения.Отправитель.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Склад,
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Период
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Дата
		|;
		|
		|//////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДвиженияПоПеремещению;
		|УНИЧТОЖИТЬ ПеремещениеОтгрузкаБезДат;
		|УНИЧТОЖИТЬ ПеремещениеПриемка";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременнуюТаблицуСреднедневноеПотребление(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Топология.Центр КАК Центр,
		|	Топология.Склад КАК Склад,
		|	ВЫБОР КОГДА Топология.Центр.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					ОсновнойКалендарь.Значение
		|				ИНАЧЕ
		|					Топология.Центр.Календарь
		|			КОНЕЦ КАК КалендарьЦентр,
		|	ВЫБОР КОГДА Топология.Центр.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					ОсновнойКалендарь.Значение
		|				ИНАЧЕ
		|					Топология.Центр.Календарь
		|			КОНЕЦ КАК КалендарьСклад
		|ПОМЕСТИТЬ РазличаетсяКалендарь
		|ИЗ
		|	ТопологияСкладов КАК Топология
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО ИСТИНА
		|ГДЕ
		|	Топология.Центр.Календарь <> Топология.Склад.Календарь
		|ИНДЕКСИРОВАТЬ ПО
		|	Центр, Склад
		|;
		|
		|///////////////////////////////////
		|ВЫБРАТЬ
		|	График.Календарь КАК Календарь,
		|	КОЛИЧЕСТВО(*)    КАК Количество
		|ПОМЕСТИТЬ КоличествоРабочихДнейГрафика
		|ИЗ
		|	ГрафикРаботыПоКалендарю КАК График
		|ГДЕ
		|	ИСТИНА В(
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РазличаетсяКалендарь КАК РазличаетсяКалендарь
		|		ГДЕ
		|			График.Календарь В(
		|				РазличаетсяКалендарь.КалендарьЦентр,
		|				РазличаетсяКалендарь.КалендарьСклад))
		|СГРУППИРОВАТЬ ПО
		|	График.Календарь
		|ИНДЕКСИРОВАТЬ ПО
		|	Календарь
		|;
		|
		|///////////////////////////////////
		|ВЫБРАТЬ
		|	Признаки.Склад КАК Склад,
		|	Признаки.Номенклатура КАК Номенклатура,
		|	Признаки.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР КОГДА Признаки.Учитывать ТОГДА
		|				1
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ) КАК КоличествоДней,
		|	СУММА(ВЫБОР КОГДА Признаки.УчитыватьВДняхПолныхПродаж ТОГДА
		|				1
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ) КАК КоличествоДнейПолныхПродаж
		|ПОМЕСТИТЬ УчитываемыеДни
		|ИЗ
		|	ПризнакиУчетаДней КАК Признаки
		|ГДЕ
		|	Признаки.Учитывать
		|		ИЛИ Признаки.УчитыватьВДняхПолныхПродаж
		|СГРУППИРОВАТЬ ПО
		|	Признаки.Склад,
		|	Признаки.Номенклатура,
		|	Признаки.Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад, Номенклатура, Характеристика
		|;
		|
		|//////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расход.Склад КАК Склад,
		|	Расход.Номенклатура КАК Номенклатура,
		|	Расход.Характеристика КАК Характеристика,
		|	Расход.Количество КАК Расход,
		|	
		|	ВЫБОР КОГДА УчитываемыеДни.КоличествоДнейПолныхПродаж = 0
		|					ИЛИ Расход.Количество / УчитываемыеДни.КоличествоДней >
		|							Расход.КоличествоВДниПолныхПродаж / УчитываемыеДни.КоличествоДнейПолныхПродаж ТОГДА
		|					
		|					(Расход.Количество - ЕСТЬNULL(Возвраты.Количество, 0)) / УчитываемыеДни.КоличествоДней
		|					
		|			ИНАЧЕ
		|					
		|					(Расход.КоличествоВДниПолныхПродаж - ЕСТЬNULL(Возвраты.Количество, 0)) / УчитываемыеДни.КоличествоДнейПолныхПродаж
		|					
		|		КОНЕЦ КАК Количество,
		|	
		|	ВЫБОР КОГДА УчитываемыеДни.КоличествоДнейПолныхПродаж = 0
		|					ИЛИ Расход.Количество / УчитываемыеДни.КоличествоДней >
		|							Расход.КоличествоВДниПолныхПродаж / УчитываемыеДни.КоличествоДнейПолныхПродаж ТОГДА
		|					
		|					Расход.КоличествоКвадрат / УчитываемыеДни.КоличествоДней
		|					
		|			ИНАЧЕ
		|					
		|					Расход.КоличествоВДниПолныхПродажКвадрат / УчитываемыеДни.КоличествоДнейПолныхПродаж
		|					
		|		КОНЕЦ КАК КоличествоКвадратДляДисперсии,
		|	
		|	ВЫБОР КОГДА УчитываемыеДни.КоличествоДнейПолныхПродаж = 0
		|					ИЛИ Расход.Количество / УчитываемыеДни.КоличествоДней >
		|							Расход.КоличествоВДниПолныхПродаж / УчитываемыеДни.КоличествоДнейПолныхПродаж ТОГДА
		|					
		|					Расход.Количество / УчитываемыеДни.КоличествоДней
		|					
		|			ИНАЧЕ
		|					
		|					Расход.КоличествоВДниПолныхПродаж / УчитываемыеДни.КоличествоДнейПолныхПродаж
		|					
		|		КОНЕЦ КАК КоличествоДляДисперсии,
		|	
		|	ВЫБОР КОГДА УчитываемыеДни.КоличествоДнейПолныхПродаж = 0
		|					ИЛИ Расход.Количество / УчитываемыеДни.КоличествоДней >
		|							Расход.КоличествоВДниПолныхПродаж / УчитываемыеДни.КоличествоДнейПолныхПродаж ТОГДА
		|					
		|					УчитываемыеДни.КоличествоДней
		|					
		|			ИНАЧЕ
		|					
		|					УчитываемыеДни.КоличествоДнейПолныхПродаж
		|					
		|		КОНЕЦ КАК КоличествоДнейДляДисперсии
		|	
		|ПОМЕСТИТЬ СреднедневноеПотреблениеБезУчетаРЦ
		|ИЗ
		|	Расходы КАК Расход
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчитываемыеДни КАК УчитываемыеДни
		|		ПО УчитываемыеДни.Склад          = Расход.Склад
		|		 И УчитываемыеДни.Номенклатура   = Расход.Номенклатура
		|		 И УчитываемыеДни.Характеристика = Расход.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Возвраты КАК Возвраты
		|		ПО Возвраты.Склад          = Расход.Склад
		|		 И Возвраты.Номенклатура   = Расход.Номенклатура
		|		 И Возвраты.Характеристика = Расход.Характеристика
		|ГДЕ
		|	НЕ УчитываемыеДни.Номенклатура ЕСТЬ NULL
		|;
		|
		|//////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Склад             КАК Склад,
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	СУММА(Набор.Расход)     КАК Расход,
		|	СУММА(Набор.Количество) КАК Количество,
		|	СУММА(Набор.Дисперсия)  КАК Дисперсия,
		|	ВЫБОР КОГДА СУММА(Набор.КоличествоДляДисперсии * Набор.КоличествоДляДисперсии) = 0 ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				СУММА(Набор.Дисперсия) / СУММА(Набор.КоличествоДляДисперсии * Набор.КоличествоДляДисперсии) < 0.0025
		|		КОНЕЦ КАК ПотреблениеСтабильно
		|ПОМЕСТИТЬ СреднедневноеПотребление
		|ИЗ(
		|	ВЫБРАТЬ
		|		Потребление.Склад          КАК Склад,
		|		Потребление.Номенклатура   КАК Номенклатура,
		|		Потребление.Характеристика КАК Характеристика,
		|		Потребление.Расход         КАК Расход,
		|		Потребление.Количество     КАК Количество,
		|		Потребление.КоличествоДляДисперсии КАК КоличествоДляДисперсии,
		|		ВЫБОР КОГДА Потребление.КоличествоДнейДляДисперсии = 1 ТОГДА
		|					0
		|				ИНАЧЕ
		|					Потребление.КоличествоДнейДляДисперсии
		|						/ (Потребление.КоличествоДнейДляДисперсии - 1)
		|							*(Потребление.КоличествоКвадратДляДисперсии
		|								- Потребление.КоличествоДляДисперсии * Потребление.КоличествоДляДисперсии)
		|			КОНЕЦ КАК Дисперсия
		|	ИЗ
		|		СреднедневноеПотреблениеБезУчетаРЦ КАК Потребление
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Топология.Центр                                                                  КАК Склад,
		|		Потребление.Номенклатура                                                         КАК Номенклатура,
		|		Потребление.Характеристика                                                       КАК Характеристика,
		|		Потребление.Расход                                                               КАК Расход,
		|		ВЫБОР КОГДА РазличаетсяКалендарь.Склад ЕСТЬ NULL ТОГДА
		|					Потребление.Количество
		|				ИНАЧЕ
		|					Потребление.Количество * ВсегоДнейСклада.Количество / ВсегоДнейЦентра.Количество
		|			КОНЕЦ КАК Количество,
		|		Потребление.КоличествоДляДисперсии КАК КоличествоДляДисперсии,
		|		ВЫБОР КОГДА Потребление.КоличествоДнейДляДисперсии = 1 ТОГДА
		|					0
		|				ИНАЧЕ
		|					Потребление.КоличествоДнейДляДисперсии
		|						/ (Потребление.КоличествоДнейДляДисперсии - 1)
		|							*(Потребление.КоличествоКвадратДляДисперсии
		|								- Потребление.КоличествоДляДисперсии * Потребление.КоличествоДляДисперсии)
		|			КОНЕЦ КАК Дисперсия
		|	ИЗ
		|		СреднедневноеПотреблениеБезУчетаРЦ КАК Потребление
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТопологияСкладов КАК Топология
		|			ПО Топология.Номенклатура   = Потребление.Номенклатура
		|			 И Топология.Характеристика = Потребление.Характеристика
		|			 И Топология.Склад          = Потребление.Склад
		|			 И Топология.Центр         <> Потребление.Склад
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РазличаетсяКалендарь КАК РазличаетсяКалендарь
		|			ПО РазличаетсяКалендарь.Центр = Топология.Центр
		|			 И РазличаетсяКалендарь.Склад = Топология.Склад
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоРабочихДнейГрафика КАК ВсегоДнейЦентра
		|			ПО ВсегоДнейЦентра.Календарь = РазличаетсяКалендарь.КалендарьЦентр
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоРабочихДнейГрафика КАК ВсегоДнейСклада
		|			ПО ВсегоДнейСклада.Календарь = РазличаетсяКалендарь.КалендарьСклад
		|	ГДЕ
		|		РазличаетсяКалендарь.Склад ЕСТЬ NULL ИЛИ ВсегоДнейЦентра.Количество > 0) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад
		|;
		|
		|///////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ РазличаетсяКалендарь;
		|УНИЧТОЖИТЬ КоличествоРабочихДнейГрафика;
		|УНИЧТОЖИТЬ УчитываемыеДни;
		|УНИЧТОЖИТЬ СреднедневноеПотреблениеБезУчетаРЦ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область РасчетСтатистикиПотребленияЯдро

Процедура СтатистикаПотребленияЯдро(Запрос, ИмяТаблицыТовары, ИмяТаблицыРезультат)
	
	// Вход: <ИмяТаблицыТовары>
	// Выход:
	// РазличныеТоварыИСклады: Склад,Номенклатура,Характеристика
	// ТопологияСкладов      : Склад,Номенклатура,Характеристика - Центр
	ДобавитьВременныеТаблицыТопологииСкладов(Запрос, ИмяТаблицыТовары);
	
	// Вход: РазличныеТоварыИСклады
	// Выход: СезонныеКоэффициенты : Склад,Номенклатура - Коэффициент
	ДобавитьВременнуюТаблицуСезонныеКоэффициенты(Запрос);
	
	// Вход: РазличныеТоварыИСклады
	// Выход: ГрафикРаботыПоКалендарю: Календарь - Дата
	ДобавитьВременнуюТаблицуГрафикРаботыПоКалендарю(Запрос);
	
	// Вход: РазличныеТоварыИСклады,ТопологияСкладов
	// Выход:
	// ПризнакиНаличияОстатковПоДатам : Склад,Номенклатура,Характеристика,Дата - ЕстьКонечныйОстаток,ЕстьОстатки
	// РасходПоДнямДанныеИБ           : Склад,Номенклатура,Характеристика,Дата - Количество
	// ВозвратыДанныеИБ               : Склад,Номенклатура,Характеристика      - Количество
	ДобавитьВременныеТаблицыОстатковРасходаИВозвратов(Запрос);
	
	// Вход: РасходПоДнямДанныеИБ,ВозвратыДанныеИБ,СезонныеКоэффициенты,ГрафикРаботыПоКалендарю,ПризнакиНаличияОстатковПоДатам.
	// Выход:
	// РасходПоДням : Склад,Номенклатура,Характеристика,Дата - Количество,КоличествоВДниПолныхПродаж
	// Расходы      : Склад,Номенклатура,Характеристика      - Количество,КоличествоВДниПолныхПродаж,КоличествоКвадрат,КоличествоВДниПолныхПродажКвадрат
	// Возвраты     : Склад,Номенклатура,Характеристика      - Количество
	УчестьКоэффициентыСезонностиРабочиеДниИДниНеполныхПродаж(Запрос);
	
	// Вход: ГрафикРаботыПоКалендарю,ПризнакиНаличияОстатковПоДатам,РасходПоДням
	// Выход: ПризнакиУчетаДней : Склад,Номенклатура,Характеристика,Дата - Учитывать,УчитыватьВДняхПолныхПродаж
	ДобавитьВременнуюТаблицуПризнакиУчетаДней(Запрос);
	
	// Вход: ПризнакиУчетаДней,Расходы,Возвраты,ГрафикРаботыПоКалендарю,ТопологияСкладов
	// Выход: СреднедневноеПотребление : Склад,Номенклатура,Характеристика - Количество, Расход, Дисперсия,ПотреблениеСтабильно
	ДобавитьВременнуюТаблицуСреднедневноеПотребление(Запрос);
	
	ТекстыЗапроса = Новый Массив();
	Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура                                                КАК Номенклатура,
		|	Товары.Характеристика                                              КАК Характеристика,
		|	Товары.Склад                                                       КАК Склад,
		|	&ПериодКлассификацииДатаНачала                                     КАК ДатаНачалаПериода,
		|	&ПериодКлассификацииДатаОкончания                                  КАК ДатаОкончанияПериода,
		|	ЕСТЬNULL(СреднедневноеПотреблениеТовара.Расход, 0)                 КАК Потребление,
		|	ЕСТЬNULL(СреднедневноеПотреблениеТовара.Количество, 0)             КАК СреднедневноеПотребление,
		|	ЕСТЬNULL(СреднедневноеПотреблениеТовара.Дисперсия, 0)              КАК ДисперсияПотребления,
		|	ЕСТЬNULL(СреднедневноеПотреблениеТовара.ПотреблениеСтабильно, ЛОЖЬ)КАК ПотреблениеСтабильно
		|ПОМЕСТИТЬ РезультатПереопределяемый
		|ИЗ
		|	ТоварыПереопределяемый КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СреднедневноеПотребление КАК СреднедневноеПотреблениеТовара
		|		ПО СреднедневноеПотреблениеТовара.Номенклатура   = Товары.Номенклатура
		|		 И СреднедневноеПотреблениеТовара.Характеристика = Товары.Характеристика
		|		 И СреднедневноеПотреблениеТовара.Склад          = Товары.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	
	Текст = СтрЗаменить(Текст, "ТоварыПереопределяемый", ИмяТаблицыТовары);
	Текст = СтрЗаменить(Текст, "РезультатПереопределяемый", ИмяТаблицыРезультат);
	ТекстыЗапроса.Добавить(Текст);
	
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ РазличныеТоварыИСклады");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ТопологияСкладов");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ГрафикРаботыПоКалендарю");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ПризнакиНаличияОстатковПоДатам");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ СезонныеКоэффициенты");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ РасходПоДнямДанныеИБ");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВозвратыДанныеИБ");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ РасходПоДням");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ Расходы");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ Возвраты");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ПризнакиУчетаДней");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ СреднедневноеПотребление");
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВтГрафик");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременнуюТаблицуТоварныеКатегории(Запрос, ИмяТаблицыТовары)
	
	Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад,
		|	Товары.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ СкладыКатегории
		|ИЗ
		|	ТоварыПереопределяемый КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка            КАК Номенклатура,
		|	СпрНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ НоменклатураКатегории
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|		И СпрНоменклатура.ТоварнаяКатегория <> ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
		|		И ИСТИНА В(
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ТоварыПереопределяемый КАК Товары
		|			ГДЕ
		|				Товары.Номенклатура.ТоварнаяКатегория = СпрНоменклатура.ТоварнаяКатегория)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыНаСкладах.Номенклатура   КАК Номенклатура,
		|	ТоварыНаСкладах.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ НоменклатураКатегорииВОборотах
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Обороты(
		|		ДОБАВИТЬКДАТЕ(&ПериодКлассификацииДатаНачала, МЕСЯЦ, -12),
		|		&ПериодКлассификацииДатаОкончания,
		|		,
		|		Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И Номенклатура В(
		|				ВЫБРАТЬ
		|					Фильтр.Номенклатура
		|				ИЗ
		|					НоменклатураКатегории КАК Фильтр)) КАК ТоварыНаСкладах
		|ГДЕ
		|	ТоварыНаСкладах.ВНаличииРасход > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|
		|//////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Склад                                  КАК Склад,
		|	НоменклатураКатегорииВОборотах.Номенклатура   КАК Номенклатура,
		|	НоменклатураКатегорииВОборотах.Характеристика КАК Характеристика,
		|	Склады.ТоварнаяКатегория                      КАК ТоварнаяКатегория
		|ПОМЕСТИТЬ ТоварныеКатегории
		|ИЗ
		|	СкладыКатегории КАК Склады
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураКатегорииВОборотах КАК НоменклатураКатегорииВОборотах
		|		ПО НоменклатураКатегорииВОборотах.Номенклатура.ТоварнаяКатегория = Склады.ТоварнаяКатегория
		|ГДЕ
		|	НЕ НоменклатураКатегорииВОборотах.Номенклатура ЕСТЬ NULL
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ СкладыКатегории;
		|УНИЧТОЖИТЬ НоменклатураКатегории;
		|УНИЧТОЖИТЬ НоменклатураКатегорииВОборотах";
		
	Запрос.Текст = СтрЗаменить(Текст, "ТоварыПереопределяемый", ИмяТаблицыТовары);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременнуюТаблицуСезонныеКоэффициенты(Запрос)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей")
		И Константы.ВариантУчетаСезонныхКолебаний.Получить() = Перечисления.УчетСезонныхКолебаний.ПоСезоннымКоэффициентам Тогда
		
		Тексты = Новый Массив();
		Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Склад КАК Склад,
			|	Товары.Номенклатура.СезоннаяГруппа КАК СезоннаяГруппа,
			|	ВЫБОР КОГДА Товары.Склад.БизнесРегион.СезоннаяГруппа <> ЗНАЧЕНИЕ(Справочник.СезонныеГруппыБизнесРегионов.ПустаяСсылка) ТОГДА
			|			Товары.Склад.БизнесРегион.СезоннаяГруппа
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.СезонныеГруппыБизнесРегионов.Прочие)
			|	КОНЕЦ КАК СезоннаяГруппаБизнесРегиона
			|ПОМЕСТИТЬ РазличныеТоварыИСкладыБезХарактеристик
			|ИЗ
			|	РазличныеТоварыИСклады КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	СезоннаяГруппа, СезоннаяГруппаБизнесРегиона
			|;
			|
			|///////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.СезоннаяГруппа КАК СезоннаяГруппа,
			|	Товары.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона
			|ПОМЕСТИТЬ СезонныеГруппы
			|ИЗ
			|	РазличныеТоварыИСкладыБезХарактеристик КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	СезоннаяГруппа, СезоннаяГруппаБизнесРегиона
			|;
			|
			|///////////////////////////////////////////////////////////////////
			// Полные года.
			|ВЫБРАТЬ
			|	Набор.СезоннаяГруппа КАК СезоннаяГруппа,
			|	Набор.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|	СУММА(Набор.Коэффициент) КАК Коэффициент,
			|	СУММА(Набор.ЧислоДней) КАК ЧислоДней,
			|	СУММА(Набор.КоэффициентРасчетный) КАК КоэффициентРасчетный,
			|	СУММА(Набор.ЧислоДнейРасчетный) КАК ЧислоДнейРасчетный
			|ПОМЕСТИТЬ СезонныеКоэффициентыПоГруппам
			|ИЗ(
			|	ВЫБРАТЬ
			|		Группы.СезоннаяГруппа КАК СезоннаяГруппа,
			|		Группы.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|		СезонныеКоэффициенты.Коэффициент * (ГОД(&ПериодКлассификацииДатаОкончания) - ГОД(&ПериодКлассификацииДатаНачала) - 1) КАК Коэффициент,
			|		(ГОД(&ПериодКлассификацииДатаОкончания) - ГОД(&ПериодКлассификацииДатаНачала) - 1) КАК ЧислоДней,
			|		0 КАК КоэффициентРасчетный,
			|		0 КАК ЧислоДнейРасчетный
			|	ИЗ
			|		СезонныеГруппы КАК Группы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
			|			ПО Группы.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
			|				И Группы.СезоннаяГруппаБизнесРегиона = СезонныеКоэффициенты.СезоннаяГруппаБизнесРегиона
			|				И СезонныеКоэффициенты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				И (ГОД(&ПериодКлассификацииДатаОкончания) - ГОД(&ПериодКлассификацииДатаНачала)) > 1
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			// Неполный год от начала периода.
			|	ВЫБРАТЬ
			|		Группы.СезоннаяГруппа КАК СезоннаяГруппа,
			|		Группы.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|		СезонныеКоэффициенты.Коэффициент КАК Коэффициент,
			|		1 КАК ЧислоДней,
			|		0 КАК КоэффициентРасчетный,
			|		0 КАК ЧислоДнейРасчетный
			|	ИЗ
			|		СезонныеГруппы КАК Группы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
			|			ПО Группы.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
			|				И Группы.СезоннаяГруппаБизнесРегиона = СезонныеКоэффициенты.СезоннаяГруппаБизнесРегиона
			|				И СезонныеКоэффициенты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				И ВЫБОР КОГДА (ГОД(&ПериодКлассификацииДатаОкончания) - ГОД(&ПериодКлассификацииДатаНачала)) > 0 ТОГДА
			|							СезонныеКоэффициенты.НомерПериода >= ДЕНЬГОДА(&ПериодКлассификацииДатаНачала)
			|						ИНАЧЕ
			|							СезонныеКоэффициенты.НомерПериода >= ДЕНЬГОДА(&ПериодКлассификацииДатаНачала)
			|								И СезонныеКоэффициенты.НомерПериода <= ДЕНЬГОДА(&ПериодКлассификацииДатаОкончания)
			|					КОНЕЦ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			// Неполный год до окончания периода.
			|	ВЫБРАТЬ
			|		Группы.СезоннаяГруппа КАК СезоннаяГруппа,
			|		Группы.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|		СезонныеКоэффициенты.Коэффициент КАК Коэффициент,
			|		1 КАК ЧислоДней,
			|		0 КАК КоэффициентРасчетный,
			|		0 КАК ЧислоДнейРасчетный
			|	ИЗ
			|		СезонныеГруппы КАК Группы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
			|			ПО Группы.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
			|				И Группы.СезоннаяГруппаБизнесРегиона = СезонныеКоэффициенты.СезоннаяГруппаБизнесРегиона
			|				И СезонныеКоэффициенты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				И (ГОД(&ПериодКлассификацииДатаОкончания) - ГОД(&ПериодКлассификацииДатаНачала)) > 0
			|				И СезонныеКоэффициенты.НомерПериода <= ДЕНЬГОДА(&ПериодКлассификацииДатаОкончания)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			// Полные года (расчетный период).
			|	ВЫБРАТЬ
			|		Группы.СезоннаяГруппа КАК СезоннаяГруппа,
			|		Группы.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|		0 КАК Коэффициент,
			|		0 КАК ЧислоДней,
			|		СезонныеКоэффициенты.Коэффициент * (ГОД(&РасчетныйПериодДатаОкончания) - ГОД(&РасчетныйПериодДатаНачала) - 1) КАК КоэффициентРасчетный,
			|		(ГОД(&РасчетныйПериодДатаОкончания) - ГОД(&РасчетныйПериодДатаНачала) - 1) КАК ЧислоДнейРасчетный
			|	ИЗ
			|		СезонныеГруппы КАК Группы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
			|			ПО Группы.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
			|				И Группы.СезоннаяГруппаБизнесРегиона = СезонныеКоэффициенты.СезоннаяГруппаБизнесРегиона
			|				И СезонныеКоэффициенты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				И (ГОД(&РасчетныйПериодДатаОкончания) - ГОД(&РасчетныйПериодДатаНачала)) > 1
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			// Неполный год от начала периода (расчетный период).
			|	ВЫБРАТЬ
			|		Группы.СезоннаяГруппа КАК СезоннаяГруппа,
			|		Группы.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|		0 КАК Коэффициент,
			|		0 КАК ЧислоДней,
			|		СезонныеКоэффициенты.Коэффициент КАК КоэффициентРасчетный,
			|		1 КАК ЧислоДнейРасчетный
			|	ИЗ
			|		СезонныеГруппы КАК Группы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
			|			ПО Группы.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
			|				И Группы.СезоннаяГруппаБизнесРегиона = СезонныеКоэффициенты.СезоннаяГруппаБизнесРегиона
			|				И СезонныеКоэффициенты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				И ВЫБОР КОГДА (ГОД(&РасчетныйПериодДатаОкончания) - ГОД(&РасчетныйПериодДатаНачала)) > 0 ТОГДА
			|							СезонныеКоэффициенты.НомерПериода >= ДЕНЬГОДА(&РасчетныйПериодДатаНачала)
			|						ИНАЧЕ
			|							СезонныеКоэффициенты.НомерПериода >= ДЕНЬГОДА(&РасчетныйПериодДатаНачала)
			|								И СезонныеКоэффициенты.НомерПериода <= ДЕНЬГОДА(&РасчетныйПериодДатаОкончания)
			|					КОНЕЦ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			// Неполный год до окончания периода (расчетный).
			|	ВЫБРАТЬ
			|		Группы.СезоннаяГруппа КАК СезоннаяГруппа,
			|		Группы.СезоннаяГруппаБизнесРегиона КАК СезоннаяГруппаБизнесРегиона,
			|		0 КАК Коэффициент,
			|		0 КАК ЧислоДней,
			|		СезонныеКоэффициенты.Коэффициент КАК КоэффициентРасчетный,
			|		1 КАК ЧислоДнейРасчетный
			|	ИЗ
			|		СезонныеГруппы КАК Группы
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СезонныеКоэффициенты КАК СезонныеКоэффициенты
			|			ПО Группы.СезоннаяГруппа = СезонныеКоэффициенты.СезоннаяГруппа
			|				И Группы.СезоннаяГруппаБизнесРегиона = СезонныеКоэффициенты.СезоннаяГруппаБизнесРегиона
			|				И СезонныеКоэффициенты.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			|				И (ГОД(&РасчетныйПериодДатаОкончания) - ГОД(&РасчетныйПериодДатаНачала)) > 0
			|				И СезонныеКоэффициенты.НомерПериода <= ДЕНЬГОДА(&РасчетныйПериодДатаОкончания)) КАК Набор
			|СГРУППИРОВАТЬ ПО
			|	Набор.СезоннаяГруппа,
			|	Набор.СезоннаяГруппаБизнесРегиона
			|ИНДЕКСИРОВАТЬ ПО
			|	СезоннаяГруппа, СезоннаяГруппаБизнесРегиона
			|;
			|
			|//////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура                       КАК Номенклатура,
			|	Товары.Склад                              КАК Склад,
			|	ВЫБОР КОГДА
			|		СезонныеКоэффициентыПоГруппам.Коэффициент = 0
			|			ИЛИ СезонныеКоэффициентыПоГруппам.ЧислоДней = 0
			|			ИЛИ СезонныеКоэффициентыПоГруппам.КоэффициентРасчетный = 0
			|			ИЛИ СезонныеКоэффициентыПоГруппам.ЧислоДнейРасчетный = 0 ТОГДА
			|		0
			|			ИНАЧЕ
			|				(СезонныеКоэффициентыПоГруппам.КоэффициентРасчетный * СезонныеКоэффициентыПоГруппам.ЧислоДней)
			|					/ (СезонныеКоэффициентыПоГруппам.Коэффициент * СезонныеКоэффициентыПоГруппам.ЧислоДнейРасчетный)
			|		Конец КАК Коэффициент
			|ПОМЕСТИТЬ СезонныеКоэффициенты
			|ИЗ
			|	РазличныеТоварыИСкладыБезХарактеристик КАК Товары
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ СезонныеКоэффициентыПоГруппам КАК СезонныеКоэффициентыПоГруппам
			|		ПО СезонныеКоэффициентыПоГруппам.СезоннаяГруппа = Товары.СезоннаяГруппа
			|		 И СезонныеКоэффициентыПоГруппам.СезоннаяГруппаБизнесРегиона = Товары.СезоннаяГруппаБизнесРегиона
			|ГДЕ
			|	СезонныеКоэффициентыПоГруппам.Коэффициент > 0
			|		И СезонныеКоэффициентыПоГруппам.ЧислоДней > 0
			|		И СезонныеКоэффициентыПоГруппам.КоэффициентРасчетный > 0
			|		И СезонныеКоэффициентыПоГруппам.ЧислоДнейРасчетный > 0
			
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Склад";
		Тексты.Добавить(Текст);
		
		ТекстУдаления =
			"УНИЧТОЖИТЬ СезонныеГруппы;
			|УНИЧТОЖИТЬ СезонныеКоэффициентыПоГруппам;
			|УНИЧТОЖИТЬ РазличныеТоварыИСкладыБезХарактеристик";
			
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			
			Запрос.Текст = Текст;
			Запрос.Выполнить();
			Запрос.Текст = ТекстУдаления;
			Запрос.Выполнить();
			
		Иначе
			
			Тексты.Добавить(ТекстУдаления);
			Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
			Запрос.Выполнить();
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	NULL КАК Номенклатура,
			|	NULL КАК Склад,
			|	0    КАК Коэффициент
			|ПОМЕСТИТЬ СезонныеКоэффициенты";
			
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВременнуюТаблицуГрафикРаботыПоКалендарю(Запрос)
	
	ГрафикБезКалендаря = СоздатьПустойГрафик(
		Запрос.Параметры.ПериодКлассификацииДатаНачала,
		Запрос.Параметры.ПериодКлассификацииДатаОкончания);
	
	Запрос.УстановитьПараметр("ГрафикБезКалендаря", ГрафикБезКалендаря);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикБезКалендаря.ДатаГрафика КАК ДатаГрафика
		|ПОМЕСТИТЬ ГрафикБезКалендаря
		|ИЗ
		|	&ГрафикБезКалендаря КАК ГрафикБезКалендаря
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.Календарь КАК Календарь,
		|	КалендарныеГрафики.Год КАК Год,
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
		|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик,
		|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода
		|ПОМЕСТИТЬ ВТГрафик
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.ДатаГрафика МЕЖДУ &ПериодКлассификацииДатаНачала И &ПериодКлассификацииДатаОкончания
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, СпрСклад.Календарь) КАК Календарь,
		|	График.ДатаГрафика                                                   КАК Дата
		|ПОМЕСТИТЬ ГрафикРаботыПоКалендарю
		|ИЗ
		|	РазличныеТоварыИСклады КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклад
		|		ПО Товары.Склад = СпрСклад.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО СпрСклад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафик КАК График
		|		ПО ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, СпрСклад.Календарь) = График.Календарь
		|			И График.ДеньВключенВГрафик
		|			И ГОД(&ПериодКлассификацииДатаНачала) <= График.Год
		|			И График.Год                     <= ГОД(&ПериодКлассификацииДатаОкончания)
		|			И &ПериодКлассификацииДатаНачала <= График.ДатаГрафика
		|			И График.ДатаГрафика             <= &ПериодКлассификацииДатаОкончания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) КАК Календарь,
		|	ГрафикБезКалендаря.ДатаГрафика              КАК Дата
		|ИЗ
		|	ГрафикБезКалендаря КАК ГрафикБезКалендаря
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Календарь,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ГрафикБезКалендаря";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УчестьКоэффициентыСезонностиРабочиеДниИДниНеполныхПродаж(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Возвраты.Склад                                                      КАК Склад,
		|	Возвраты.Номенклатура                                               КАК Номенклатура,
		|	Возвраты.Характеристика                                             КАК Характеристика,
		|	Возвраты.Количество * ЕСТЬNULL(СезонныеКоэффициенты.Коэффициент, 1) КАК Количество
		|ПОМЕСТИТЬ Возвраты
		|ИЗ
		|	ВозвратыДанныеИБ КАК Возвраты
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СезонныеКоэффициенты КАК СезонныеКоэффициенты
		|		ПО СезонныеКоэффициенты.Номенклатура = Возвраты.Номенклатура
		|		 И СезонныеКоэффициенты.Склад        = Возвраты.Склад
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расход.Номенклатура                                              КАК Номенклатура,
		|	Расход.Характеристика                                            КАК Характеристика,
		|	Расход.Склад                                                     КАК Склад,
		|	Расход.Дата                                                      КАК Дата,
		|	Расход.Количество * ЕСТЬNULL(СезонныеКоэффициенты.Коэффициент,1) КАК Количество,
		|	ВЫБОР КОГДА ПризнакиНаличия.ЕстьОстатки ТОГДА
		|				Расход.Количество * ЕСТЬNULL(СезонныеКоэффициенты.Коэффициент,1)
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ                                                        КАК КоличествоВДниПолныхПродаж
		|ПОМЕСТИТЬ РасходПоДням
		|ИЗ
		|	РасходПоДнямДанныеИБ КАК Расход
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО Расход.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикРаботыПоКалендарю КАК РабочиеДни
		|		ПО ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, Расход.Склад.Календарь) = РабочиеДни.Календарь
		|		 И Расход.Дата = РабочиеДни.Дата
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ СезонныеКоэффициенты КАК СезонныеКоэффициенты
		|		ПО СезонныеКоэффициенты.Номенклатура = Расход.Номенклатура
		|		 И СезонныеКоэффициенты.Склад        = Расход.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакиНаличияОстатковПоДатам КАК ПризнакиНаличия
		|		ПО ПризнакиНаличия.Дата              = Расход.Дата
		|			И ПризнакиНаличия.Номенклатура   = Расход.Номенклатура
		|			И ПризнакиНаличия.Характеристика = Расход.Характеристика
		|			И ПризнакиНаличия.Склад          = Расход.Склад
		|ГДЕ
		|	НЕ РабочиеДни.Календарь ЕСТЬ NULL
		|		И НЕ ПризнакиНаличия.Номенклатура ЕСТЬ NULL
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расход.Номенклатура                                                          КАК Номенклатура,
		|	Расход.Характеристика                                                        КАК Характеристика,
		|	Расход.Склад                                                                 КАК Склад,
		|	СУММА(Расход.Количество)                                                     КАК Количество,
		|	СУММА(Расход.КоличествоВДниПолныхПродаж)                                     КАК КоличествоВДниПолныхПродаж,
		|	СУММА(Расход.Количество * Расход.Количество)                                 КАК КоличествоКвадрат,
		|	СУММА(Расход.КоличествоВДниПолныхПродаж * Расход.КоличествоВДниПолныхПродаж) КАК КоличествоВДниПолныхПродажКвадрат
		|ПОМЕСТИТЬ Расходы
		|ИЗ
		|	РасходПоДням КАК Расход
		|СГРУППИРОВАТЬ ПО
		|	Расход.Номенклатура,
		|	Расход.Характеристика,
		|	Расход.Склад";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременнуюТаблицуПризнакиУчетаДней(Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПризнакиПоДатам.Номенклатура                     КАК Номенклатура,
		|	ПризнакиПоДатам.Характеристика                   КАК Характеристика,
		|	ПризнакиПоДатам.Склад                            КАК Склад,
		|	РабочиеДни.Дата                                  КАК Дата,
		|	МАКСИМУМ(ПризнакиПоДатам.Дата)                   КАК ДатаПризнака,
		|	МАКСИМУМ(ПризнакиПоДатам.Дата = РабочиеДни.Дата) КАК ИспользуетсяПризнакРассчитанныйДляТекущегоДня
		|ПОМЕСТИТЬ ДатыПризнаковНаличияОстатковДляДня
		|ИЗ
		|	ПризнакиНаличияОстатковПоДатам КАК ПризнакиПоДатам
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО ПризнакиПоДатам.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГрафикРаботыПоКалендарю КАК РабочиеДни
		|		ПО ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, ПризнакиПоДатам.Склад.Календарь) = РабочиеДни.Календарь
		|		 И ПризнакиПоДатам.Дата <= РабочиеДни.Дата
		|		
		|СГРУППИРОВАТЬ ПО
		|	ПризнакиПоДатам.Номенклатура,
		|	ПризнакиПоДатам.Характеристика,
		|	ПризнакиПоДатам.Склад,
		|	РабочиеДни.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПризнаков.Номенклатура   КАК Номенклатура,
		|	ДатыПризнаков.Характеристика КАК Характеристика,
		|	ДатыПризнаков.Склад          КАК Склад,
		|	ДатыПризнаков.Дата           КАК Дата,
		|	ДатыПризнаков.ИспользуетсяПризнакРассчитанныйДляТекущегоДня И ЕСТЬNULL(Расход.Количество, 0) <> 0
		|		ИЛИ ПризнакиПоДатам.ЕстьКонечныйОстаток КАК Учитывать, // есть расход в этот день или есть конечный остаток в этот день.
		|	ДатыПризнаков.ИспользуетсяПризнакРассчитанныйДляТекущегоДня И ПризнакиПоДатам.ЕстьОстатки
		|		ИЛИ НЕ ДатыПризнаков.ИспользуетсяПризнакРассчитанныйДляТекущегоДня
		|				И ПризнакиПоДатам.ЕстьКонечныйОстаток КАК УчитыватьВДняхПолныхПродаж // движения в этот день есть, и есть начальный и конечный остаток или движений в этот день нет, а в предыдущий день с движениями был конечный остаток.
		|ПОМЕСТИТЬ ПризнакиУчетаДней
		|ИЗ
		|	ДатыПризнаковНаличияОстатковДляДня КАК ДатыПризнаков
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПризнакиНаличияОстатковПоДатам КАК ПризнакиПоДатам
		|		ПО ПризнакиПоДатам.Дата              = ДатыПризнаков.ДатаПризнака
		|			И ПризнакиПоДатам.Номенклатура   = ДатыПризнаков.Номенклатура
		|			И ПризнакиПоДатам.Характеристика = ДатыПризнаков.Характеристика
		|			И ПризнакиПоДатам.Склад          = ДатыПризнаков.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасходПоДням КАК Расход
		|		ПО Расход.Дата              = ДатыПризнаков.Дата
		|			И Расход.Номенклатура   = ДатыПризнаков.Номенклатура
		|			И Расход.Характеристика = ДатыПризнаков.Характеристика
		|			И Расход.Склад          = ДатыПризнаков.Склад
		|ГДЕ
		// Учитывать или УчитыватьВДняхПолныхПродаж
		|	ДатыПризнаков.ИспользуетсяПризнакРассчитанныйДляТекущегоДня
		|			И ЕСТЬNULL(Расход.Количество, 0) <> 0
		|				ИЛИ ПризнакиПоДатам.ЕстьКонечныйОстаток
		|		ИЛИ ДатыПризнаков.ИспользуетсяПризнакРассчитанныйДляТекущегоДня
		|				И ПризнакиПоДатам.ЕстьОстатки
		|		ИЛИ НЕ ДатыПризнаков.ИспользуетсяПризнакРассчитанныйДляТекущегоДня
		|				И ПризнакиПоДатам.ЕстьКонечныйОстаток
		|;
		|
		|//////////////////////////////////////////
		|УНИЧТОЖИТЬ ДатыПризнаковНаличияОстатковДляДня";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СоздатьПустойГрафик(ПериодКлассификацииДатаНачала, ПериодКлассификацииДатаОкончания)
	
	ГрафикБезКалендаря = Новый ТаблицаЗначений();
	ГрафикБезКалендаря.Колонки.Добавить("ДатаГрафика", Новый ОписаниеТипов("Дата"));
	
	Если Не ЗначениеЗаполнено(Константы.ОсновнойКалендарьПредприятия.Получить())
		И ЗначениеЗаполнено(ПериодКлассификацииДатаНачала)
		И ЗначениеЗаполнено(ПериодКлассификацииДатаОкончания) Тогда
		
		ДатаГрафика = ПериодКлассификацииДатаНачала;
		Пока Истина Цикл
			
			Если ДатаГрафика > ПериодКлассификацииДатаОкончания Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТаблицы = ГрафикБезКалендаря.Добавить();
			СтрокаТаблицы.ДатаГрафика = ДатаГрафика;
			
			ДатаГрафика = ДатаГрафика + 86400;  //86400 - длительность суток в секундах.
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ГрафикБезКалендаря;
	
КонецФункции

#КонецОбласти

#КонецОбласти