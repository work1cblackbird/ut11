
#Область ПрограммныйИнтерфейс

// Определяет настройки учетной записи торговой площадки Яндекс Маркет.
//
// Параметры:
//   УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису; 
//   СлужебныеПараметры - Булево - признак необходимости возврата в результате дополнительных параметров.
// 
// Возвращаемое значение:
//   Структура - настройки учетной записи:
//     * УникальныйИдентификатор           - УникальныйИдентификатор - идентификатор учетной записи;
//     * УчетнаяЗапись                     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Наименование                      - Строка - наименование учетной записи (магазина);
//     * ПометкаУдаления                   - Булево - признак недействующего магазина;
//     * Организация                       - СправочникСсылка.Организации - организация, связанная с магазином;
//     * ИсточникКатегории                 - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории;
//     * ЦенаПродажи                       - СправочникСсылка.ВидыЦен - вид цены продажи;
//     * СхемаРаботы                       - ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок - схема работы магазина;
//     * ИдентификаторАккаунта             - Строка - идентификатор аккаунта;
//     * ИдентификаторКабинета             - Строка - идентификатор кабинета;
//     * ИдентификаторМагазина             - Строка - идентификатор кампании;
//     * ИдентификаторКлиента              - Строка - номер магазина;
//     * НеОбновлятьДанныеТорговойПлощадки - Булево - признак запрещенного обмена данными с торговой площадкой;
//     * ОбязательныеРеквизитыЗаполнены    - Булево - признак заполненности обязательных реквизитов учетной записи;
//     * ОбязательныеЗаданияВключены       - Булево - признак включенных обязательных регламентных заданий;
//     * Партнер                           - СправочникСсылка.Партнеры - партнер торговой площадки;
//     * Контрагент                        - СправочникСсылка.Контрагенты - контрагент торговой площадки;
//     * СоглашениеКомиссия                - СправочникСсылка.СоглашенияСКлиентами - соглашение с комиссионером;
//     * ДоговорКомиссия                   - СправочникСсылка.ДоговорыКонтрагентов - договор с комиссионером;
//     * ДополнительныеНастройки           - Структура Из КлючИЗначение - настройки из табличной части ДополнительныеНастройки.
//
Функция ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись, СлужебныеПараметры = Истина) Экспорт

	Возврат ИнтеграцияСЯндексМаркетСервер.ДанныеУчетнойЗаписиЯндексМаркет(УчетнаяЗапись, СлужебныеПараметры);

КонецФункции

// Определяет результат выполнения фонового задания.
// Если результат является структурой, дополнительно добавляет свойство КодОшибки (если оно отсутствует).
//
// Параметры:
//   АдресРезультата - Строка - адрес временного хранилища, в которое помещен результат работы фоновой процедуры.
// 
// Возвращаемое значение:
//   Произвольный - результат выполнения фонового задания.
//
Функция ПолучитьРезультатВыполненияФоновогоЗадания(АдресРезультата) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Не Результат.Свойство("КодОшибки") Тогда
		Результат.Вставить("КодОшибки", "");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Подготавливает данные о доступных хозяйственных операциях.
//
// Параметры:
//   ПостфиксЗаголовкаФормы - Строка - значение, однозначно идентифицирующее владельца формы использующей данные о 
//                              доступных хозяйственных операциях.
// 
// Возвращаемое значение:
//   Структура - используемые хозяйственные операции:
//     * Поставки - Соответствие Из КлючИЗначение - описание хозяйственных операций раздела "Поставки":
//       ** Ключ  - ПеречислениеСсылка.ХозяйственныеОперации - используемая хозяйственная операция;
//       ** Значение - Соответствие Из КлючИЗначение - описание документов:
//          *** Ключ     - Строка - полное имя документа, для которого используется текущая хозяйственная операция;
//          *** Значение - Строка - заголовок формы при выборе текущей хозяйственной операции и вида документа.
//     * Продажи  - Соответствие Из КлючИЗначение - описание хозяйственных операций раздела "Продажи":
//       ** Ключ  - ПеречислениеСсылка.ХозяйственныеОперации - используемая хозяйственная операция;
//       ** Значение - Соответствие Из КлючИЗначение - описание документов:
//          *** Ключ     - Строка - полное имя документа, для которого используется текущая хозяйственная операция;
//          *** Значение - Строка - заголовок формы при выборе текущей хозяйственной операции и вида документа.
//
Функция ИспользуемыеХозяйственныеОперации(ПостфиксЗаголовкаФормы = "все") Экспорт
	
	ИспользуемыеХозОперации = Новый Структура;
	
	// Поставки. Реализация с отложенным переходом права собственности
	ХозОперации = Новый Соответствие;
	ШаблонЗаголовка = НСтр("ru = 'Документы поставок <%1>'");
	
		// Хозяйственная операция Оприходование товаров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.ОприходованиеИзлишковТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров, 
			ДокументыХозОперации);
		
		// Хозяйственная операция ПеремещениеТоваров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ПеремещениеТоваров,
			ДокументыХозОперации);
		
		// Хозяйственная операция ПересортицаТоваров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ПересортицаТоваров, 
			ДокументыХозОперации);
		
		// Хозяйственная операция ПорчаТоваров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.ПорчаТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ПорчаТоваров, 
			ДокументыХозОперации);
		
		// Хозяйственная операция РазборкаТоваров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.СборкаТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.РазборкаТоваров, 
			ДокументыХозОперации);
		
		// Хозяйственная операция СборкаТоваров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.СборкаТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.СборкаТоваров, 
			ДокументыХозОперации);
		
		// Хозяйственная операция СписаниеТоваров
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, 
			ДокументыХозОперации);
		
	ИспользуемыеХозОперации.Вставить("ПоставкиРеализация", ХозОперации);
	
	// Поставки. Через комиссионера (агента)
	ХозОперации = Новый Соответствие;
	ШаблонЗаголовка = НСтр("ru = 'Документы поставок <%1>'");
	
		// Хозяйственная операция ВозвратОтКомиссионера
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(возвраты)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера, 
			ДокументыХозОперации);
		
		// Хозяйственная операция ПередачаНаКомиссию
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.ПередачаТоваровХранителю.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(передачи на комиссию)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию, 
			ДокументыХозОперации);
		
		// Хозяйственная операция СписаниеНедостачЗаСчетКомитента
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.ОтчетОСписанииТоваровУХранителя.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			 ШаблонЗаголовка + " " + НСтр("ru = '(списания у комиссионера)'"), ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.СписаниеНедостачЗаСчетКомитента, 
			ДокументыХозОперации);
		
	ИспользуемыеХозОперации.Вставить("ПоставкиКомиссия", ХозОперации);
	
	// Продажи. Реализация с отложенным переходом права собственности
	ХозОперации = Новый Соответствие;
	ШаблонЗаголовка = НСтр("ru = 'Документы продаж <%1>'");
	
		// Хозяйственная операция ВозвратТоваровОтКлиента
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(возвраты)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента, 
			ДокументыХозОперации);
		
		// Хозяйственная операция ВозвратНедопоставленногоТовара
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара, 
			ДокументыХозОперации);
		
		// Хозяйственная операция ИсправлениеОшибок
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ИсправлениеОшибок, 
			ДокументыХозОперации);
		
		// Хозяйственная операция КорректировкаПоСогласованиюСторон
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон, 
			ДокументыХозОперации);
		
		// Хозяйственная операция РеализацияКлиенту
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.СчетФактураВыданный.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту, 
			ДокументыХозОперации);
		
		// Хозяйственная операция РеализацияБезПереходаПраваСобственности
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(расхождения)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.СчетФактураВыданный.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности, 
			ДокументыХозОперации);
		
		// Хозяйственная операция РеализацияПерепоставленногоТовара
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара, 
			ДокументыХозОперации);
		
	ИспользуемыеХозОперации.Вставить("ПродажиРеализация", ХозОперации);
	
	// Продажи. Через комиссионера (агента)
	ХозОперации = Новый Соответствие;
	ШаблонЗаголовка = НСтр("ru = 'Документы продаж <%1>'");
	
		// Хозяйственная операция ВозвратТоваровЧерезКомиссионера
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(возвраты)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера, 
			ДокументыХозОперации);
		
		// Хозяйственная операция РеализацияЧерезКомиссионера
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.ОтчетКомиссионера.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(отчеты комиссионера)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера, 
			ДокументыХозОперации);
		
		// Хозяйственная операция РеализацияЧерезКомиссионераБезПереходаПраваСобственности
		ДокументыХозОперации = Новый Соответствие;
		ДокументыХозОперации.Вставить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(корректировки)'"), 
				ПостфиксЗаголовкаФормы));
		ДокументыХозОперации.Вставить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка + " " + НСтр("ru = '(накладные)'"), 
				ПостфиксЗаголовкаФормы));
		ХозОперации.Вставить(Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности, 
			ДокументыХозОперации);
		
	ИспользуемыеХозОперации.Вставить("ПродажиКомиссия", ХозОперации);
	
	Возврат ИспользуемыеХозОперации;
	
КонецФункции

#КонецОбласти
