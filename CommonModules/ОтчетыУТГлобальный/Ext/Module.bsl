
#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьФоновыеЗадания() Экспорт
	ПараметрыПроверкиФоновыхЗаданий = ОтчетыУТКлиентПереопределяемый.ПараметрыПроверкиФоновыхЗаданий();
	Если ПараметрыПроверкиФоновыхЗаданий.Интервал < 15 Тогда
		ПараметрыПроверкиФоновыхЗаданий.Интервал = ПараметрыПроверкиФоновыхЗаданий.Интервал + 2;
	КонецЕсли;
	
	КлючиКУдалению = Новый Массив;
	ОтключитьОбработчикОжидания("ПроверитьФоновыеЗадания");
	
	ИмяЗаданияРасчетовСКлиентами = РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами();
	ИмяЗаданияРасчетовСПоставщиками = РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками();
	
	Для Каждого Задание Из ПараметрыПроверкиФоновыхЗаданий.Задания Цикл 
		Результат = ОтчетыУТВызовСервераПереопределяемый.ПроверитьФоновоеЗадание(Задание.Ключ);
		Если Результат.УспешноВыполнено Тогда
			Если Задание.Ключ = "ПартионныйУчет" Тогда
				СписокФорм = Задание.Значение;
				ФормыКОповещению = ФормыКОповещению(Задание.Ключ, СписокФорм);
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Формы", ФормыКОповещению);
				ФормыКОбработке = ФормыКОбработке(ФормыКОповещению, СписокФорм);
				Если ФормыКОбработке.Количество() > 0 Тогда
					ПараметрыОбработчика.Вставить("НеобработанныеФормы", ФормыКОбработке);
				КонецЕсли;
				ТекстВопроса = НСтр("ru = 'Выполнен расчет партий. Переформировать отчет?'");
				ПоказатьВопросПользователю(ТекстВопроса, ПараметрыОбработчика);
			ИначеЕсли Задание.Ключ = ИмяЗаданияРасчетовСКлиентами ИЛИ Задание.Ключ = ИмяЗаданияРасчетовСПоставщиками
				ИЛИ Задание.Ключ = "Взаиморасчеты" Тогда
				СписокФорм = Задание.Значение;
				ФормыКОповещению = ФормыКОповещению(Задание.Ключ, Задание.Значение);
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Формы", ФормыКОповещению);
				ФормыКОбработке = ФормыКОбработке(ФормыКОповещению, СписокФорм);
				Если ФормыКОбработке.Количество() > 0 Тогда
					ПараметрыОбработчика.Вставить("НеобработанныеФормы", ФормыКОбработке);
				КонецЕсли;
				ТекстВопроса = НСтр("ru = 'Выполнено распределение расчетов. Переформировать отчет?'");
				ПоказатьВопросПользователю(ТекстВопроса, ПараметрыОбработчика);
			КонецЕсли;
			КлючиКУдалению.Добавить(Задание.Ключ);
		ИначеЕсли Результат.ЕщеВыполняется Тогда
			ПодключитьОбработчикОжидания("ПроверитьФоновыеЗадания", ПараметрыПроверкиФоновыхЗаданий.Интервал, Истина);
			ЕстьВыполняющиесяЗадания = Истина;
		ИначеЕсли Результат.ВыполненоСОшибками Тогда
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(Задание.Ключ, "Ошибка", Результат.ТекстОшибки,,Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ключ Из КлючиКУдалению Цикл
		ПараметрыПроверкиФоновыхЗаданий.Задания.Удалить(Ключ);
	КонецЦикла;
КонецПроцедуры

Процедура ПоказатьВопросПользователю(ТекстВопроса, ПараметрыОбработчика)
	Обработчик = Новый ОписаниеОповещения("ФормаОтчетаПослеПодтвержденияПереформирования", ОтчетыУТКлиентПереопределяемый, ПараметрыОбработчика);
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Переформировать'"));
	СписокОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Оставить как есть'"));
	ПоказатьВопрос(Обработчик, ТекстВопроса, СписокОтветов);
КонецПроцедуры

Функция ФормыКОбработке(ФормыКОповещению, СписокФорм)
	КОбработке = Новый Соответствие;
	Если ФормыКОповещению.Количество() <> СписокФорм.Количество() Тогда
		Для Каждого ДанныеФормы Из СписокФорм Цикл
			Если Не ДанныеФормы.Ключ.Открыта() Тогда
				Продолжить;
			КонецЕсли;
			Если ФормыКОповещению.Найти(ДанныеФормы.Ключ) = Неопределено Тогда
				КОбработке.Вставить(ДанныеФормы.Ключ, ДанныеФормы.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат КОбработке;
КонецФункции

Функция ФормыКОповещению(ИмяЗадания, СписокФорм)
	
	Если ИмяЗадания = "ПартионныйУчет" Тогда
		ФормыКОповещению = ФормыПартийКОповещению(СписокФорм);
	ИначеЕсли ИмяЗадания = "Взаиморасчеты"
	 ИЛИ ИмяЗадания = "ВзаиморасчетыСКлиентами"
	 ИЛИ ИмяЗадания = "ВзаиморасчетыСПоставщиками" Тогда
		ФормыКОповещению = ФормыВзаиморасчетовКОповещению(СписокФорм);
	ИначеЕсли ИмяЗадания = "ОтражениеДокументовВБюджетировании"
		Или ИмяЗадания = "УправляющийПоток_ЗаданияКОтражениюЛимитовПоДаннымБюджетирования" Тогда
		ФормыКОповещению = ФормыБюджетированияКОповещению(СписокФорм, ИмяЗадания);
	Иначе
		ФормыКОповещению = Новый Массив;
	КонецЕсли;
	
	Возврат ФормыКОповещению;
	
КонецФункции

Функция ФормыПартийКОповещению(СписокФорм)
	
	ФормыКОповещению = Новый Массив;
	
	Для Каждого Форма Из СписокФорм Цикл
		
		Если НЕ Форма.Ключ.Открыта() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтчетыУТВызовСервераПереопределяемый.ПартииДляОтчетовАктуализированы(Форма.Значение) Тогда
			
			ПараметрыРасчета = Форма.Ключ.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
			ПараметрыРасчета.Вставить("РасчетПартийИСебестоимости", Ложь);
			
			ФормыКОповещению.Добавить(Форма.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФормыКОповещению;
	
КонецФункции

Функция ФормыВзаиморасчетовКОповещению(СписокФорм)
	ФормыКОповещению = Новый Массив();
	Для Каждого Форма Из СписокФорм Цикл
		ПараметрыФормы = Форма.Значение;
		Если ТипЗнч(ПараметрыФормы.АналитикиКРасчету) = Тип("Массив") Тогда
			Аналитики = ПараметрыФормы.АналитикиКРасчету;
		Иначе
			Аналитики = ПараметрыФормы.АналитикиКРасчету.АналитикиУчетаПоПартнерам;
		КонецЕсли;
		
		НачалоРасчета = ОтчетыУТВызовСервераПереопределяемый.НачалоРаспределенияВзаиморасчетов(ПараметрыФормы.ГраницаВзаиморасчетов, 
			Аналитики,
			ПараметрыФормы.ИмяРасчета,
			ПараметрыФормы.НомерЗадания);
		Если НЕ ЗначениеЗаполнено(НачалоРасчета) Тогда
			ФормыКОповещению.Добавить(Форма.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат ФормыКОповещению;
КонецФункции


// Возвращает массив форм к оповещению.
// 
// Параметры:
// 	ПараметрыЗадания - Структура -:
// 	 *Формы - Массив из ФормаКлиентскогоПриложения - 
// 	 *Параметры - Структура -:
// 	  **НачалоПериода - Дата -
// 	  **КонецПериода - Дата -
// Возвращаемое значение:
// 	Массив - Описание
Функция ФормыБюджетированияКОповещению(ПараметрыЗадания, ИмяЗадания)
	
	СписокФорм = ПараметрыЗадания.Формы;
	ФормыКОповещению = Новый Массив();
	
	Для Каждого Форма Из СписокФорм Цикл
		Если Не Форма.Ключ.Открыта() Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяЗадания = "ОтражениеДокументовВБюджетировании" Тогда
			ФормаВходитВИнтервал = Ложь;
			Если ПараметрыЗадания.Параметры.НачалоПериода >= Форма.Значение.НачалоПериода
				И ПараметрыЗадания.Параметры.НачалоПериода <= Форма.Значение.КонецПериода Тогда
				ФормаВходитВИнтервал = Истина;
			КонецЕсли;
			Если ПараметрыЗадания.Параметры.КонецПериода >= Форма.Значение.НачалоПериода
				И ПараметрыЗадания.Параметры.КонецПериода <= Форма.Значение.КонецПериода Тогда
				ФормаВходитВИнтервал = Истина;
			КонецЕсли;
			Если ПараметрыЗадания.Параметры.НачалоПериода <= Форма.Значение.НачалоПериода
				И ПараметрыЗадания.Параметры.КонецПериода >= Форма.Значение.КонецПериода Тогда
				ФормаВходитВИнтервал = Истина;
			КонецЕсли;
		Иначе
			ФормаВходитВИнтервал = Истина;
		КонецЕсли;
		Если ФормаВходитВИнтервал Тогда
			ФормыКОповещению.Добавить(Форма.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФормыКОповещению;
	
КонецФункции

#КонецОбласти
