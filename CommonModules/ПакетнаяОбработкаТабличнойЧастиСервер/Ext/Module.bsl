#Область ПрограммныйИнтерфейс

// Выполняет обработку строк коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
// Вызов метода должен производиться в цикле обхода коллекции, предварительно нужно определить КэшированныеЗначения.
//
// Параметры:
//	ТекущаяСтрока - Структура, ДанныеФормыКоллекция - Приемник действий обработки строки. 
//	Действия - Структура - Действия, которые нужно произвести над строкой. В ключах хранится наименование действия, 
//					в значениях - произвольные данные, необходимые для обработки.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//	КоллекцияСтрок - ДанныеФормыКоллекция, Массив из Структура, ТаблицаЗначений - Коллекция, которая обходится в цикле
//					и является источником данных для обработки, на основании этой коллекция сформируется временная 
//					таблица втИсточникДанных. Данные полученной временной таблицы следует использовать, для описания
//					текстов запроса получения данных, необходимых для обработки всех обрабатываемых строк в методе
//					ДополнитьТекстыЗапросовИсточниковДанных.
//	ТекущаяСтрокаВКоллекции - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений, Структура - Итератор обхода коллекции
//					КоллекцияСтрок, этот параметр требуется для получения данных через метод ДанныеДляОбработкиСтроки.
//					ТекущаяСтрокаВКоллекции может не совпадать с параметром ТекущаяСтрока, например в тех случаях, когда
//					обходится массив добавляемых номенклатур в ТЧ Товары, в этом примере ТекущаяСтрока это новая строка 
//					табличной части, а ТекущаяСтрокаВКоллекции это элемент массива из элементов справочника Номенклатура.
//
// Пример:
//
//  1. Для обработки всех строк табличной части с дополнительной обработкой прикладным кодом без создания промежуточной
//  структуры:
//  
//  КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
//  
//  СтруктураДействий = Новый Структура();
//  СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС); 
//  
//  Для Каждого СтрокаТЧ Из Объект.Товары Цикл
//   
//  	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле(
//  		СтрокаТЧ,
//  		СтруктураДействий,
//  		КэшированныеЗначения,
//  		Объект.Товары,
//  		СтрокаТЧ);
//  	//Доп обработка строки
//  	СтрокаТЧ.ЗаполнятьВозвратнуюТару = Истина;
//  	
//  КонецЕсли;
//  
//  2. Для обработки всех строк табличной части с созданием промежуточной структуры:
//  
//  КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
//  
//  СтруктураДействий = Новый Структура();
//  СтруктураДействий.Вставить("ЗаполнитьКоэффициентПоНоменклатуре"); 
//  
//  Для Каждого СтрокаТЧ Из Объект.Товары Цикл
//   	
//   	ДанныеДляОбработки = Новый Структура();
//   	ДанныеДляОбработки.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
//   	ДанныеДляОбработки.Вставить("Коэффициент", Объект.Коэффициент);
//   	
//  	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле(
//  		ДанныеДляОбработки,
//  		СтруктураДействий,
//  		КэшированныеЗначения,
//  		Объект.Товары,
//  		СтрокаТЧ);
//  	
//  	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеДляОбработки);
//  	
//  КонецЕсли;
//
//  3. Для дополнения табличной части по входящей коллекции, примером может служить подбор товаров:
//  
//  ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
//  
//  КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
//  
//  СтруктураДействий = Новый Структура();
//  СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС"); 
//  
//  Для Каждого ПодобранныйТовар Из ТаблицаТоваров Цикл
//   	
//   	НоваяСтрокаТЧ = Объект.Товары.Добавить();
//  	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле(
//  		НоваяСтрокаТЧ,
//  		СтруктураДействий,
//  		КэшированныеЗначения,
//  		ТаблицаТоваров,
//  		ПодобранныйТовар);
//  	
//  КонецЕсли;
//
//  Случаи некорректного использования:
//   1. Для обработки одной строки табличной части, например при изменения номенклатуры в строке, следует использовать ОбработатьСтрокуТЧ
//   2. При наличии в структуре действий зависимых обработчиков, см . ПриОписанииЗависимостейОбработчиков, следует 
//   	использовать метод ОбработатьСтрокиТЧ. Если требуется обработать не все строки, то требуется сформировать массив
//   	строк табличной части, подлежащих обработки и передать его в параметр КоллекцияСтрок.
//
Процедура ОбработатьСтрокуТЧВЦикле(ТекущаяСтрока, Действия, КэшированныеЗначения, КоллекцияСтрок, ТекущаяСтрокаВКоллекции) Экспорт
	
	#Область ИнициализацияОбработкиСтрокКоллекции
	
	КэшированныеЗначения.Вставить("ТекущаяСтрокаВКоллекции", ТекущаяСтрокаВКоллекции);
	
	Если Не КэшированныеЗначения.Свойство("ИнициализацияЗавершена") Тогда
		
		КэшированныеЗначения.Вставить("ЕстьЗависимыеОбработчики", ЗависимыеОбработчикиСтрокТЧ(Действия).Количество());
		
		Если КэшированныеЗначения.ЕстьЗависимыеОбработчики
			И Не КэшированныеЗначения.Свойство("ОбработкаКоллекции") Тогда
				ИмяМетода = "ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокиТЧ";
				ТекстИсключения = СтрШаблон(НСтр("ru = 'Некорректно встроен механизм пакетной обработки строк табличных частей.
										|В структуре действий указаны зависимые друг от друга действия.
										|Для обработки строк коллекции в такой ситуации следует использовать метод 
										|%1, передав в параметры только строки, требующие обработки.'"), ИмяМетода);
				ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Действия.Вставить("МетодыКВыполнению", МетодыКВыполнению(Действия, КэшированныеЗначения));
		Действия.Вставить("КоличествоДействий", Действия.Количество());
		
		ОписаниеЗапроса = ОписаниеЗапроса();
		
		КэшированныеЗначения.Вставить("ОписаниеЗапроса", ОписаниеЗапроса);
		
		// Добавление запросов механизмами, обрабатывающими строки из общих модулей
		ДополнитьТекстыЗапросовИсточниковДанных(Действия, КэшированныеЗначения);
		
		// Добавление запросов механизмами, обрабатывающими строки из места встраивания
		Если КэшированныеЗначения.Свойство("ВнешнееОписаниеЗапроса") Тогда
				Для Каждого ТекстЗапроса Из КэшированныеЗначения.ВнешнееОписаниеЗапроса.ТекстыЗапросов Цикл
					КэшированныеЗначения.ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса.Значение, ТекстЗапроса.Представление);
				КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшированныеЗначения.ОписаниеЗапроса.ПараметрыЗапроса,
																КэшированныеЗначения.ВнешнееОписаниеЗапроса.ПараметрыЗапроса);
															КонецЕсли;
															
		Если ЭтоТабличнаяЧасть(КоллекцияСтрок)	Тогда
			КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
		КонецЕсли;
		
		// Формирование временной таблицы источника данных
		ДобавитьВременнуюТаблицуПоКоллекции(
			ОписаниеЗапроса, КоллекцияСтрок, КэшированныеЗначения);
		
		ЗаполнитьДополнительныеКолонки(Действия, КэшированныеЗначения);
		
		Запрос = Новый Запрос();
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ОписаниеЗапроса.ПараметрыЗапроса);
		
		Если ОписаниеЗапроса.ТекстыЗапросов.Количество() > 1 Тогда
			Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ОписаниеЗапроса.ТекстыЗапросов, ,Истина, Истина);
			
			Для Каждого Таблица Из Таблицы Цикл
				Если Таблица.Значение.Колонки.Найти("ИдентификаторСтрокиВТ") <> Неопределено Тогда
					Таблица.Значение.Индексы.Добавить("ИдентификаторСтрокиВТ");
				КонецЕсли;
			КонецЦикла;
			
			КэшированныеЗначения.Вставить("ДанныеДляОбработки", Таблицы);
		Иначе
			КэшированныеЗначения.Вставить("ДанныеДляОбработки", Неопределено);
		КонецЕсли;
		
		КэшированныеЗначения.Удалить("ОписаниеЗапроса");
		КэшированныеЗначения.Удалить("ВнешнееОписаниеЗапроса");
		
		КэшированныеЗначения.Вставить("ИнициализацияЗавершена");
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбработкаСтрокКоллекции
	
	Параметры = Новый Массив();
	Параметры.Добавить(ТекущаяСтрока);
	Параметры.Добавить(Действия);
	Параметры.Добавить(КэшированныеЗначения);
	
	Если Не КэшированныеЗначения.Свойство("ПропускаемыеДействия") Тогда
		Для каждого Метод Из Действия.МетодыКВыполнению Цикл
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Метод, Параметры);
		КонецЦикла;
	Иначе
		Для каждого ДействиеМетод Из Действия.МетодыКВыполнению Цикл
			Если Не КэшированныеЗначения.ПропускаемыеДействия.Свойство(ДействиеМетод.Обработка) Тогда
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(ДействиеМетод.Метод, Параметры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выполняет обработку нескольких строк коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
// Следует использовать когда требуется обработать некоторые строки табличной части, предварительно сформировать массив 
// строк табличной части и передавать его в параметр КоллекцияСтрок, 
// указав в параметре ТабЧасть табличную часть, к которой относятся элементы этого массива.
// Так же метод следует использовать, когда в структуре действий присутствуют зависимые обработчики.
//
// Параметры:
//	КоллекцияСтрок - см. ОбработатьСтрокуТЧВЦикле.КоллекцияСтрок.
//	СтруктураДействий - см. ОбработатьСтрокуТЧВЦикле.Действия.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//	ТабЧасть - ДанныеФормыКоллекция - Табличная часть, приемник действий над строками.
//
Процедура ОбработатьСтрокиТЧ(КоллекцияСтрок, СтруктураДействий, КэшированныеЗначения = Неопределено, ТабЧасть = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ОбработкаКоллекции");
	
	ЗависимыеОбработчики = ЗависимыеОбработчикиСтрокТЧ(СтруктураДействий);
	ЕстьЗависимыеОбработчики = ЗависимыеОбработчики.Количество();
	
	Если ТабЧасть = Неопределено
		Или ТабЧасть = КоллекцияСтрок Тогда
		ОбрабатываемаяКоллекция = КоллекцияСтрок;
		КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
	ИначеЕсли ЭтоТабличнаяЧасть(ТабЧасть)
		Или ТипЗнч(ТабЧасть) = Тип("ДанныеФормыКоллекция") Тогда
		КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
			
		Если ТипЗнч(КоллекцияСтрок[0]) = Тип("Структура") Тогда
			ОбрабатываемаяКоллекция = ТабЧасть.Выгрузить(Новый Массив);
			ОбрабатываемаяКоллекция.Колонки.Добавить(
				"ИдентификаторСтрокиВТ", Новый ОписаниеТипов(
					"Строка", Новый КвалификаторыСтроки(36)));
			
			Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
				НоваяСтрока = ОбрабатываемаяКоллекция.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
				НоваяСтрока.ИдентификаторСтрокиВТ = СтрокаКоллекции.НомерСтроки;
			КонецЦикла;
			
		Иначе
			ОбрабатываемаяКоллекция = ТабЧасть.Выгрузить(КоллекцияСтрок);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ТабЧасть) = Тип("ТаблицаЗначений")
		И ТабЧасть.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
			КэшированныеЗначения.Вставить("ОбрабатываетсяТабличнаяЧасть");
			ОбрабатываемаяКоллекция = ТабЧасть.Скопировать(КоллекцияСтрок);
	КонецЕсли;
	
	Если Не ЕстьЗависимыеОбработчики Тогда
		КэшированныеЗначения.Вставить("ЕстьЗависимыеОбработчики", Ложь);
		
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			ОбработатьСтрокуТЧВЦикле(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения, ОбрабатываемаяКоллекция, СтрокаКоллекции);
		КонецЦикла;
		
	Иначе
		КэшированныеЗначения.Вставить("ЕстьЗависимыеОбработчики", Истина);
		
		// Формирование очереди выполнения обработчиков в соответствии с описанными зависимостями
		СтруктураДействийПорядок = Новый Структура();
		Для Каждого Действие Из СтруктураДействий Цикл
			СтруктураДействийПорядок.Вставить(Действие.Ключ, 1);
		КонецЦикла;
		
		ПорядокРассчитан = Ложь;
		Пока Не ПорядокРассчитан Цикл
			ПорядокРассчитан = Истина;
			Для Каждого Обработчик Из ЗависимыеОбработчики Цикл
				
				МаксимальныйПорядок = 1;
				
				Для Каждого ВедомыйОбработчик Из Обработчик.Значение Цикл
					Если МаксимальныйПорядок < СтруктураДействийПорядок[ВедомыйОбработчик] Тогда
						МаксимальныйПорядок = СтруктураДействийПорядок[ВедомыйОбработчик]
					КонецЕсли;
				КонецЦикла;
				
				Если СтруктураДействийПорядок[Обработчик.Ключ] <= МаксимальныйПорядок Тогда
					СтруктураДействийПорядок.Вставить(Обработчик.Ключ, МаксимальныйПорядок + 1);
					ПорядокРассчитан = Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		// Пока не достигнута последняя очередь формируется список действий.
		// Выполняется запрос получения данных только для них.
		ТекущаяОчередь = 1;
		ОбработкаЗавершена = Ложь;
		
		Пока Не ОбработкаЗавершена Цикл
			
			ОбработкаЗавершена = Истина;
			ПропускаемыеДействия = Новый Структура();
			
			Для Каждого ДействиеСПорядком Из СтруктураДействийПорядок Цикл
				Если ДействиеСПорядком.Значение = ТекущаяОчередь Тогда
					ОбработкаЗавершена = Ложь;
				Иначе
					ПропускаемыеДействия.Вставить(ДействиеСПорядком.Ключ, СтруктураДействий[ДействиеСПорядком.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			ТекущаяОчередь = ТекущаяОчередь + 1;
			
			КэшированныеЗначенияТекущейОчереди = ОбщегоНазначения.СкопироватьРекурсивно(КэшированныеЗначения);
			КэшированныеЗначенияТекущейОчереди.Вставить("ПропускаемыеДействия", ПропускаемыеДействия);
			
			// Промежуточная таблица значений нужна чтобы получать данные в запросах только по обрабатываемым строкам ТЧ.
			Если ТипЗнч(ТабЧасть) = Тип("ДанныеФормыКоллекция") Тогда
				КоллекцияСтрокТЗ = ТабЧасть.Выгрузить(Новый Массив());
				КоллекцияСтрокТЗ.Колонки.Добавить("ИдентификаторСтрокиВТ", Новый ОписаниеТипов("Число"));
				
				Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
					НоваяСтрока = КоллекцияСтрокТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
					НоваяСтрока.ИдентификаторСтрокиВТ = СтрокаКоллекции.ПолучитьИдентификатор();
				КонецЦикла;
			КонецЕсли;
			
			Если ОбработкаЗавершена 
				И ПропускаемыеДействия.Количество() = СтруктураДействийПорядок.Количество() Тогда
					Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
				ОбработатьСтрокуТЧВЦикле(
					СтрокаКоллекции,
					СтруктураДействий,
					КэшированныеЗначенияТекущейОчереди,
					КоллекцияСтрокТЗ,
					СтрокаКоллекции);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку одной строки коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
// Следует применять в тех случаях, когда обработка происходит не в цикле, например при заполнении Ставки НДС при
// изменении номенклатуры в табличной части.
//
// Параметры:
//	СтрокаКоллекции - см. ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока.
//	СтруктураДействий - см. ОбработатьСтрокуТЧВЦикле.Действия.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//	Коллекция -см. ОбработатьСтрокиТЧ.ТабЧасть.
//
Процедура ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения, Коллекция = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ТЗСОднойСтрокой = ТаблицаЗначенийПоТекущейСтроке(СтрокаКоллекции, Коллекция);
	ОбработатьСтрокуТЧВЦикле(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения, ТЗСОднойСтрокой, ТЗСОднойСтрокой[0]);
	УдалитьНеподдерживаемыеТипыНаКлиенте(КэшированныеЗначения);
	КэшированныеЗначения.Удалить("ИнициализацияЗавершена");
	СтруктураДействий.Удалить("МетодыКВыполнению")

КонецПроцедуры

// Выполняет обработку всей коллекции в соответствии с операциями, перечисленными в структуре действий.
// При выполнении метода происходит предварительное получение данных, необходимых для обработки одним запросом.
//
// Параметры:
//	ТабличнаяЧасть - см. ОбработатьСтрокуТЧВЦикле.КоллекцияСтрок.
//	СтруктураДействий - см. ОбработатьСтрокуТЧВЦикле.Действия.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОбработатьТЧ(ТабличнаяЧасть, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ОбработатьСтрокиТЧ(ТабличнаяЧасть, СтруктураДействий, КэшированныеЗначения, ТабличнаяЧасть);
	
КонецПроцедуры

// Добавляет описание текста запросов для получения всех необходимых данных, нужных для обработки строк табличной части.
//
// Параметры:
//	ОписаниеЗапроса - см. ОписаниеЗапроса
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//	
Процедура ДобавитьИсточникДанных(ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если Не КэшированныеЗначения.Свойство("ВнешнееОписаниеЗапроса") Тогда
		КэшированныеЗначения.Вставить("ВнешнееОписаниеЗапроса", ОписаниеЗапроса());
	КонецЕсли;
	
	Для Каждого ТекстЗапроса Из ОписаниеЗапроса.ТекстыЗапросов Цикл
		КэшированныеЗначения.ВнешнееОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса.Значение, ТекстЗапроса.Представление);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КэшированныеЗначения.ВнешнееОписаниеЗапроса.ПараметрыЗапроса, ОписаниеЗапроса.ПараметрыЗапроса);
	
КонецПроцедуры

// Проверяет наличие колонки в обрабатываемой коллекции.
//
// Параметры:
//	ИмяКолонки - Строка - Имя колонки, наличие которой требуется проверить.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
// Возвращаемое значение:
//  Булево - Признак наличия колонки в обрабатываемой коллекции.
//
Функция ЕстьКолонкаВИсточникеДанных(ИмяКолонки, КэшированныеЗначения) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				КэшированныеЗначения.ТекущаяСтрокаВКоллекции,
				ИмяКолонки);
	
КонецФункции

// Возвращает тип колонки в обрабатываемой коллекции.
//
// Параметры:
//	ИмяКолонки - Строка - Имя колонки, которая будет добавлена в временную таблицу, построенную на основании всей коллекции.
//	ОписаниеЗапроса - см. ОписаниеЗапроса
//
// Возвращаемое значение:
//  ОписаниеТипов - ОписаниеТипов - Тип колонки в обрабатываемой коллекции.
//
Функция ТипКолонкиВИсточникеДанных(ИмяКолонки, ОписаниеЗапроса) Экспорт
	
	Если ЕстьКолонкаВИсточникеДанных(ИмяКолонки, ОписаниеЗапроса) Тогда
		ОбрабатываемаяТаблица = ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных; // ТаблицаЗначений
		Возврат ОбрабатываемаяТаблица.Колонки[ИмяКолонки].ТипЗначения;
	КонецЕсли;
	
КонецФункции

// Возвращает описание запроса, необходимое для получения необходимых данных для обработки строк коллекции. 
//
// Возвращаемое значение:
//	Структура:
//		* ТекстыЗапросов - СписокЗначений из Строка - Тексты запросов, результат выполнения которых вернет 
//				все необходимые данные для обработки строк. В значении следует поместить текст запроса.
//				В представлении наименование запроса, его следует передавать в параметр ИмяИсточника при использовании
//				метода ДанныеДляОбработкиСтроки.
//		* ПараметрыЗапроса - Структура - Параметры пакета запросов. В ключах структуры содержатся имена параметров,
//				которое используется в запросе, в значениях значения параметров, передаваемых в запрос.
//					* ИсточникДанных - ТаблицаЗначений - Обрабатываемая коллекция, преобразованная в таблицу значений. 
//		* ДопКолонки       - Структура - Описание дополнительных колонок.
//		* ПривилегированныйРежим - Булево - Признак необходимости установки привилегированного режима перед выполнением запроса.
//
Функция ОписаниеЗапроса() Экспорт
	
	ОписаниеЗапроса = Новый Структура();
	ОписаниеЗапроса.Вставить("ТекстыЗапросов", Новый СписокЗначений());
	ОписаниеЗапроса.Вставить("ПараметрыЗапроса", Новый Структура("ИсточникДанных"));
	ОписаниеЗапроса.Вставить("ДопКолонки", Новый Структура());
	ОписаниеЗапроса.Вставить("ПривилегированныйРежим", Ложь);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

// Возвращает данные, необходимые для обработки текущей строки табличной части.
//
// Параметры:
//	ИмяИсточника - Строка - Имя таблицы в запросе, которая описана в методе ДополнитьТекстыЗапросовИсточниковДанных
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
// Возвращаемое значение:
//	ТаблицаЗначений, Неопределено - Результат запроса с отбором по имени запроса и текущей обрабатываемой строке:
//
Функция ДанныеДляОбработкиСтроки(ИмяИсточника, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения.ДанныеДляОбработки <> Неопределено
		И КэшированныеЗначения.ДанныеДляОбработки.Свойство(ИмяИсточника) Тогда
		
		Если ТипЗнч(КэшированныеЗначения.ТекущаяСтрокаВКоллекции) = Тип("ДанныеФормыЭлементКоллекции")
			Или КэшированныеЗначения.Свойство("ОбрабатываетсяТабличнаяЧасть") Тогда
			
			ИдентификаторСтрокиВТ = КэшированныеЗначения.ТекущаяСтрокаВКоллекции.НомерСтроки;
			
		Иначе
			
			ИдентификаторСтрокиВТ = КэшированныеЗначения.ТекущаяСтрокаВКоллекции.ИдентификаторСтрокиВТ;
			
		КонецЕсли;
		
		ОтборПоСтроке = Новый Структура("ИдентификаторСтрокиВТ", Строка(ИдентификаторСтрокиВТ));
		НайденныеСтроки = КэшированныеЗначения.ДанныеДляОбработки[ИмяИсточника].Скопировать(ОтборПоСтроке);
		
		Возврат ?(НайденныеСтроки.Количество(), НайденныеСтроки, Неопределено);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет необходимость выполнения действия со строкой, исходя из наличия действия в структуре действий и зависимости
// обработчиков. Устанавливает значения переданных параметров из действия в переменную Параметр.
// 
// Параметры:
//  ИмяДействия - Строка - Имя действия, которое требуется выполнить над строкой, например "ЗаполнитьСтавкуНДС".
//  СтруктураДействий - см. ОбработатьСтрокуТЧВЦикле.Действия.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//  Параметры - Произвольный - Дополнительные параметры, необходимые для обработки строки текущим действием.
// 
// Возвращаемое значение:
//  Булево - Признак необходимости выполнения действия.
//
Функция ТребуетсяВыполнитьДействие(ИмяДействия, СтруктураДействий, КэшированныеЗначения, Параметры = Неопределено) Экспорт
	
	Действия = Новый Массив();
	Если ТипЗнч(ИмяДействия) = Тип("Строка") Тогда
		Действия = СтрРазделить(ИмяДействия, ",");
	КонецЕсли;
		
	Для Каждого Действие Из Действия Цикл
		Если СтруктураДействий.Свойство(Действие, Параметры) Тогда
			Если КэшированныеЗначения.Свойство("ПропускаемыеДействия") Тогда
				Если Не КэшированныеЗначения.ПропускаемыеДействия.Свойство(Действие) Тогда
					Возврат Истина;
				КонецЕсли;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции

// Описание дополнительных колонок, которые будут заполнены программно. Данные в колонках требуется для более удобной
// обработки строк, нежели переноса логики на сторону СУБД.
//
// Параметры:
//  ОписаниеЗапроса - см. ОписаниеЗапроса
//  ИмяКолонки - Строка - Имя колонки, которую требуется добавить в временную таблицу с обрабатываемой коллекцией.
//  ОписаниеТипа - ОписаниеТипов - Тип добавляемой колонки.
//
Процедура ДополнитьКолонкиИсточникаДанных(ОписаниеЗапроса, ИмяКолонки, ОписаниеТипа) Экспорт
	
	ОписаниеЗапроса.ДопКолонки.Вставить(ИмяКолонки, ОписаниеТипа);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСтрок

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Преобразует структуру действий для использования в ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(),
// чтобы рассчитывать нужные поля одним запросом по всей коллекции.
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получению служебных реквизитов.
//
Процедура НормализоватьДействия(СтруктураДействий) Экспорт
	
	Суффикс = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем", Суффикс)
		И ТипЗнч(Суффикс) <> Тип("Структура") Тогда
		КоличествоУпаковок = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс).КоличествоУпаковок;
		СтруктураДействий.Вставить("ПересчитатьВесОбъем",
									Новый Структура(КоличествоУпаковок + ",Номенклатура,Упаковка", "Вес,Объем"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с именами служебных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными.
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса.
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных, ПакетнаяОбработка = Ложь) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	Если ПакетнаяОбработка Тогда
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	Таблица.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ПОМЕСТИТЬ втТаблицаНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица;";
	Иначе
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ИСТИНА КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ПОМЕСТИТЬ втТаблицаНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица;";
	КонецЕсли;
	
	ШаблонВЫБРАТЬ = ",
	|	Таблица.%ИмяПоля% КАК %ИмяПоля%";
	ШаблонВЫБРАТЬНоменклатура = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		Если Поле.Ключ = "Упаковка" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка";
		ИначеЕсли Поле.Ключ = "Назначение" Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ",
			|	ВЫРАЗИТЬ(Таблица.Назначение КАК Справочник.Назначения) КАК Назначение";
		ИначеЕсли СтрНачинаетсяС(Поле.Ключ, "Номенклатура") Тогда
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬНоменклатура, "%ИмяПоля%", Поле.Ключ);
		Иначе
			ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	Если ПакетнаяОбработка Тогда
		ШаблонЗапроса = ШаблонЗапроса + "
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНоменклатуры.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ИЗ
		|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры";
	Иначе
		
		ШаблонЗапроса = ШаблонЗапроса + "
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки, 
		|	втТаблицаНоменклатуры.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ, &ТекстВЫБРАТЬ
		|ИЗ
		|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		Если Не ДействиеИсключение(Действие) Тогда
			ШаблонВЫБРАТЬ = ШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
			Если ШаблонВЫБРАТЬ <> Неопределено Тогда
				Для Каждого Поле Из Действие.Значение Цикл
					Если ЗначениеЗаполнено(Поле.Значение) Тогда
						ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%ЗначениеЗамены%", Поле.Значение), "%Ключ%", Поле.Ключ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		 КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, ", &ТекстВЫБРАТЬ", ТекстВЫБРАТЬ);
	
КонецФункции

// Возвращает структуру дополнительной информации получения служебных реквизитов
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов.
//
// Возвращаемое значение:
// 		Структура
//
Функция ОписаниеДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ЗначениеЗаполнено(Действие.Значение) 
				И Не ДействиеИсключение(Действие) Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
					СтруктураИсточников.Вставить(Поле.Ключ);
					СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
				КонецЕсли;
				Если ЗначениеЗаполнено(Поле.Значение) Тогда
					СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки);
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем НалогообложениеНДС;

	СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД", НалогообложениеНДС);
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт 
		ИЛИ НалогообложениеНДС = Неопределено Тогда
		ТекущаяСтрока.КодТНВЭД = ДанныеДляОбработкиСтроки(
									"КодТНВЭДПоНоменклатуре", КэшированныеЗначения)[0].КодТНВЭД;
	Иначе
		ТекущаяСтрока.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(Строка, Действия, КэшированныеЗначения) Экспорт
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("НоменклатураПродаваемаяСовместно", КэшированныеЗначения); 
	Если Не ДанныеДляОбработки = Неопределено Тогда
		Строка.ИндексСовместноПродаваемыеТовары = ?(ДанныеДляОбработки[0].НоменклатураПродаетсяСовместно, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия);
		
	Если СтруктураПараметровДействия.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураПараметровДействия.ХозяйственнаяОперация;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Если ПродажиСервер.ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Тогда
		ТекущаяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	Иначе
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;

		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложениюПакетно(
			Номенклатура, НалогообложениеНДС, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССуффикс", СтруктураПараметровДействия);
		
	Номенклатура = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
		Номенклатура = ТекущаяСтрока.Номенклатура;
	КонецЕсли;
	
	Суффикс = "";
	Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс) 
		И Не ЗначениеЗаполнено(Суффикс) Тогда
		Суффикс = "";
	КонецЕсли;
	СтавкаССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.СтавкаССуффиксом(Суффикс);
	
	НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
	
	ТекущаяСтрока[СтавкаССуффиксом.СтавкаНДС] = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложениюПакетно(
			Номенклатура, НалогообложениеНДС, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия);
		
	Если СтруктураПараметровДействия = Неопределено
	 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	КонецЕсли;
	
	ПроцентНДС = 0;
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки(
								"СтавкаПоСтавкеНДС", КэшированныеЗначения);

	Если ДанныеДляОбработки <> Неопределено Тогда
		ПроцентНДС = ДанныеДляОбработки[0].Ставка;
	КонецЕсли;
	
	ТекущаяСтрока.Цена = ТекущаяСтрока.Цена * (ПроцентНДС + 100)/100;
	
КонецПроцедуры

Процедура СкорректироватьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 
	
	Перем СтруктураПараметровДействия;
	Перем ВернутьМногооборотнуюТару;
	Перем ТипНоменклатуры;
	
	Если СтруктураДействий.Свойство("СкорректироватьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ИнициализацияВходящегоДокумента И ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметровДействия.Свойство("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		
		Номенклатура = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если ВернутьМногооборотнуюТару Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры") Тогда
				ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
			ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
				ТипыНоменклатуры = КэшированныеЗначения.ТипыНоменклатуры; //Соответствие
				ТипНоменклатуры = ТипыНоменклатуры.Получить(Номенклатура);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда			
			СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
		Иначе

			ПроверятьАктуальность = Истина;
			
			Если ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС")
				И НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС")
				И СтруктураПараметровДействия.ЗаполнениеНаОснованииКопирование = Ложь Тогда
					ПроверятьАктуальность = Ложь;
			КонецЕсли;
			
			Если ПроверятьАктуальность Тогда
				Если КэшированныеЗначения.АктуальныеСтавкиНДС = Неопределено Тогда
					ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураПараметровДействия, КэшированныеЗначения);
				КонецЕсли;
				
				АктуальныеСтавкиНДС = КэшированныеЗначения.АктуальныеСтавкиНДС; //Массив
				Если АктуальныеСтавкиНДС.Найти(ТекущаяСтрока.СтавкаНДС) <> Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложениюПакетно(
							Номенклатура, НалогообложениеНДС, КэшированныеЗначения);

		КонецЕсли;
		
		Если ТекущаяСтрока.СтавкаНДС <> СтавкаНДС Тогда
			
			ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
			
			ОбработанныеСтроки = КэшированныеЗначения.ОбработанныеСтроки; //Массив
			ОбработанныеСтроки.Добавить(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюАналитикуРасходовНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия);
		
	ДоходыИРасходыСервер.ЗаполнитьСтатьюИАналитикуРасходовНоменклатурыПакетно(
		ТекущаяСтрока, 
		СтруктураПараметровДействия,
		КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Погрешность = Неопределено;
	СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма + Погрешность;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия);
		
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	
	СтавкаНДС = Неопределено;
	Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	КонецЕсли;
	
	Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
		ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
	Иначе
		КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		ТекПроцентНДС = Неопределено;
	КонецЕсли;
	
	Если ТекПроцентНДС = Неопределено Тогда
		
		ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
		
	КонецЕсли;
	
	ДанныеСтавки = ДанныеДляОбработкиСтроки("СтавкаПоСтавкеНДС", КэшированныеЗначения);
	Если Не ДанныеСтавки = Неопределено Тогда
		СтавкаПоСтавкеНДС = ДанныеСтавки[0].Ставка;
	Иначе
		СтавкаПоСтавкеНДС = 0;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																	СтавкаПоСтавкеНДС,
																	СтруктураПараметровДействия.ЦенаВключаетНДС,
																	НалогообложениеНДС);
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
		
	СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия);
	
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	
	Суффикс = "";
	
	Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
		И Не ЗначениеЗаполнено(Суффикс) Тогда
		Суффикс = "";
	КонецЕсли;
	
	СуммаССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
	
	ДанныеСтавки = ДанныеДляОбработкиСтроки("СтавкаПоСтавкеНДССуффикс", КэшированныеЗначения);
	Если Не ДанныеСтавки = Неопределено Тогда
		СтавкаПоСтавкеНДС = ДанныеСтавки[0].Ставка;
	Иначе
		СтавкаПоСтавкеНДС = 0;
	КонецЕсли;
	
	ТекущаяСтрока[СуммаССуффиксом.СуммаНДС] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		ТекущаяСтрока[СуммаССуффиксом.Сумма],
		СтавкаПоСтавкеНДС,
		СтруктураПараметровДействия.ЦенаВключаетНДС,
		НалогообложениеНДС);

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;

КонецПроцедуры

Процедура ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия);
	ДоходыИРасходыСервер.ОчиститьСтатьюАналитикуРасходовПакетно(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия);
	ДоходыИРасходыСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтрокиПакетно(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

Процедура ПриИзмененииТипаНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры", ПараметрыДействия);
	
	Если ПараметрыДействия.Свойство("ЕстьОтменено") И ПараметрыДействия.ЕстьОтменено Тогда
		Отменено = ПараметрыДействия.ЕстьОтменено И ТекущаяСтрока.Отменено;
	Иначе
		Отменено = Ложь;
	КонецЕсли;
	
	ЭтоРабота = ПараметрыДействия.ЕстьРаботы
		И (ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
	ТекущаяСтрока.СкладОбязателен = ?(ЗначениеЗаполнено(ТекущаяСтрока.ТипНоменклатуры) И Не (ЭтоРабота Или Отменено), 1, 0);
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьОбеспечениеВДокументеПродажи(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Если Действия.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия) Тогда
		
		ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ОбеспечениеВДокументах", КэшированныеЗначения);
		ДанныеЗаполнения = ДанныеДляОбработки[0];
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		ВариантОбеспеченияИФлагОбособленно = ПараметрыДействия.ВариантОбеспеченияИФлагОбособленно;
		Если ВариантОбеспеченияИФлагОбособленно = Неопределено Тогда
			
			ВариантОбеспеченияИФлагОбособленно = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(
				ДанныеЗаполнения.ОбособленнаяЗакупкаПродажа);
			
		КонецЕсли;
		
		ТипНоменклатуры = ДанныеДляОбработки.ТипНоменклатуры;
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			ИмяСвойства = "Товар";
		ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ИмяСвойства = "Работа";
		ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ИмяСвойства = "Услуга";
		ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ИмяСвойства = "Тара";
		КонецЕсли;
		
		ВариантОбеспечения = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].ВариантОбеспечения;
		Обособленно = ВариантОбеспеченияИФлагОбособленно[ИмяСвойства].Обособленно;
		
		ТекущаяСтрока.ВариантОбеспечения = ВариантОбеспечения;
		ТекущаяСтрока.Обособленно = Обособленно;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ОбеспечениеВДокументах", КэшированныеЗначения); 
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеДляОбработки[0], "ДатаОтгрузкиОбязательна,СкладОбязателен");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуДоступно(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Действия.Свойство("ЗаполнитьКолонкуДоступно", ПараметрыДействия);
		
	Если Действия.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
			И Действия.ПроверитьНеобходимостьОбновленияКолонкиДоступно.ОбновитьКолонкуДоступно Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ОбеспечениеВДокументах", КэшированныеЗначения); 
	
	ОбеспечениеВДокументахСервер.ОбновитьКолонкуДоступноПриОбработкеСтрокиТабличнойЧастиПакетно(
		ТекущаяСтрока,
		ДанныеДляОбработки[0],
		ПараметрыДействия);
		
КонецПроцедуры

Процедура ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Действия.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно", ПараметрыДействия);
	ОбеспечениеВДокументахСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно(ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

Процедура ОбновитьКэшНоменклатура(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Действия.Свойство("ОбновитьКэшНоменклатура", ПараметрыДействия);
	ОбеспечениеВДокументахСервер.ОбновитьКэшНоменклатура(ТекущаяСтрока, ПараметрыДействия);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	Действия.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация", ПараметрыДействия);
		
	Если ПараметрыДействия = Истина 
			Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
			Или ТекущаяСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю Тогда
				ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоПоРНПВСтрокеТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	ИмяСвойства = "ПересчитатьКоличествоПоРНПТ";
	ПолучитьКоэффициентРНПТВнутренний(ТекущаяСтрока, Действия, КэшированныеЗначения, ИмяСвойства);
	
КонецПроцедуры

Процедура ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения) Экспорт
	
	ИмяСвойства = "ПересчитатьКоличествоПоРНПТСуффикс";
	ПолучитьКоэффициентРНПТВнутренний(ТекущаяСтрока, Действия, КэшированныеЗначения, ИмяСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураДействийЗаполнения = НоменклатураСервер.ДействияЗаполненияРеквизитовПоНоменклатуре(СтруктураДействий);
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуреПакетно(ТекущаяСтрока, СтруктураДействийЗаполнения, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОрдерногоСкладаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьПризнакОрдерногоСклада", ПараметрыДействия);
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ИмяПоляПризнака = "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляПризнака") Тогда
		ИмяПоляПризнака = ПараметрыДействия.ИмяПоляПризнака;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ДатаПроверки") Тогда
		ДатаПроверки = ПараметрыДействия.ДатаПроверки;
	КонецЕсли;
	
	РеквизитыСклада = ДанныеДляОбработкиСтроки("ПризнакОрдерногоСклада", КэшированныеЗначения)[0];
	
	ТекущаяСтрока[ИмяПоляПризнака] = ЗначениеЗаполнено(РеквизитыСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
								И РеквизитыСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
								И РеквизитыСклада.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <> Неопределено
								И РеквизитыСклада.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <= ДатаПроверки;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Результат = ДанныеДляОбработкиСтроки("СлужебныеРеквизитыПоНазначению", КэшированныеЗначения)[0];
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);

КонецПроцедуры

Процедура ЗаполнитьСтрануПроисхожденияНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Результат = ДанныеДляОбработкиСтроки("СтранаПроисхожденияНоменклатуры", КэшированныеЗначения)[0];
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСклад(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляСклад = "Склад";
	Если ТипЗнч(ПараметрыДействия) = Тип("Структура")
		И ПараметрыДействия.Свойство("ИмяПоляСклад") Тогда
		ИмяПоляСклад = ПараметрыДействия.ИмяПоляСклад;
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ПроверитьЗаполнитьСклад", КэшированныеЗначения);
	ТекущаяСтрока[ИмяПоляСклад] = ДанныеДляОбработки[0].Склад;
	
КонецПроцедуры

//++ Устарело_Переработка24


//-- Устарело_Переработка24


Процедура ЗаполнитьСтрануПроисхожденияДляНомераГТД(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.СтранаПроисхождения = ДанныеДляОбработкиСтроки("СтранаПроисхожденияПоНомеруГТД", КэшированныеЗначения)[0].СтранаПроисхождения;
	
КонецПроцедуры

Процедура ЗаполнитьТипНомераГТД(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.ТипНомераГТД = ДанныеДляОбработкиСтроки("ТипНомераГТД", КэшированныеЗначения)[0].ТипНомераГТД;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ИмяПоля;
	
	СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ИмяПоля);
	ДанныеДляОбработкиСтроки = ДанныеДляОбработкиСтроки("ПризнакДвиженияПоСкладскимРегистрам", КэшированныеЗначения)[0];
	ТекущаяСтрока[ИмяПоля] = ДанныеДляОбработкиСтроки.ДвиженияПоСкладскимРегистрам;
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеУслуги(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем СтруктураПараметровДействия;
	СтруктураДействий.Свойство("ЗаполнитьСодержание", СтруктураПараметровДействия);
		
	ЗаполнятьДляВсехУслуг = Неопределено;
	СтруктураПараметровДействия.Свойство("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
	
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗаполнятьДляВсехУслуг <> Неопределено Тогда
	
		ДанныеДляОбработкиСтроки = ДанныеДляОбработкиСтроки("СодержаниеУслуги", КэшированныеЗначения)[0];
			
		Если ЗаполнятьДляВсехУслуг
			И ДанныеДляОбработкиСтроки.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
			И ДанныеДляОбработкиСтроки.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ДанныеДляОбработкиСтроки.НоменклатураНаименованиеПолное, 
				ДанныеДляОбработкиСтроки.ХарактеристикаНаименованиеПолное);
			
		ИначеЕсли Не ЗаполнятьДляВсехУслуг
			И (ДанныеДляОбработкиСтроки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
			ИЛИ ДанныеДляОбработкиСтроки.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав) Тогда
			
			ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ДанныеДляОбработкиСтроки.НоменклатураНаименованиеПолное, 
				ДанныеДляОбработкиСтроки.ХарактеристикаНаименованиеПолное);
			
		Иначе
			ТекущаяСтрока.Содержание = "";
		КонецЕсли;
		
	Иначе
		ТекущаяСтрока.Содержание = "";
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		СтруктураРезультатаПринадлежность = ДанныеДляОбработкиСтроки(
													"ПринадлежностьВариантаКомплектацииНоменклатуреХарактеристике",
													КэшированныеЗначения)[0];
		
		Если Не СтруктураРезультатаПринадлежность.ПринадлежитНоменклатуреХарактеристике = Истина Тогда
			
			СтруктураРезультатаПринадлежность = ДанныеДляОбработкиСтроки("ОсновнойВариантКомплектации", КэшированныеЗначения)[0];
			
			ТекущаяСтрока.ВариантКомплектации = СтруктураРезультатаПринадлежность.ОсновнойВариантКомплектации;
		
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда 
		
		ТекущаяСтрока.ВариантКомплектации = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.Поставщик = Неопределено;
	ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов("Неопределено");
	
	Если Не ТекущаяСтрока.ДокументПриобретения = Неопределено Тогда
		
		ТекущаяСтрока.Поставщик = ДанныеДляОбработкиСтроки("ДанныеПоДокументуПриобретения", КэшированныеЗначения)[0].Контрагент;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ТекущаяСтрока.ДокументПриобретения));
		ТекущаяСтрока.ТипДокументаПриобретения = Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаполнитьЦенуПередачиПродукцииДавальцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьЦенуПередачиПродукцииДавальцу", ПараметрыДействия);
	
	ДанныеПоЦене = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуПередачиПродукцииДавальцу", КэшированныеЗначения);
	Если ДанныеПоЦене <> Неопределено Тогда
		
		ТекущаяСтрока.Цена 		= ДанныеПоЦене[0].Цена;
		ТекущаяСтрока.ВидЦены 	= ДанныеПоЦене[0].ВидЦены;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнитьЦенуВыпуска(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПроверитьЗаполнитьЦенуВыпуска", ПараметрыДействия);
	
	ДанныеПоЦене = ДанныеДляОбработкиСтроки("ПроверитьЗаполнитьЦенуВыпуска", КэшированныеЗначения);
	Если ДанныеПоЦене <> Неопределено Тогда
		
		Если Не ТекущаяСтрока.Произведено ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.Цена = 0;
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("ИспользоватьПлановуюСтоимость")
			И Не ТекущаяСтрока.ИспользоватьПлановуюСтоимость Тогда
			
			ТекущаяСтрока.Цена = 0;
			ТекущаяСтрока.Сумма = 0;
			Возврат;
			
		КонецЕсли;
	
		ТекущаяСтрока.Цена = ДанныеПоЦене[0].Цена;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПодразделениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТипов = ПродажиСервер.ТипыНоменклатурыСАналитикойПодразделение();
	Если СписокТипов.НайтиПоЗначению(ТекущаяСтрока.ТипНоменклатуры) = Неопределено Тогда
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПараметрыДействия.Подразделение;
	КонецЕсли;

КонецПроцедуры

// Заполняет служебный реквизит "РасхождениеЗаказ" в строке
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;

	ЗаказыСервер.ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, ПараметрыЗаполнения, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьПродавца(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", ПараметрСтруктурыДействий)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.Продавец) Тогда
		
			ТекущаяСтрока.Продавец = ПараметрСтруктурыДействий.Продавец;

	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакДляЗаполненияТекстовогоОписания(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.ДляЗаполненияТекстовогоОписания = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

Процедура ЗаполнитьАктуальныеСтавкиНДСКэшированныеЗначения(СтруктураДействия, КэшированныеЗначения) Экспорт
	
	НалогообложениеНДС = СтруктураДействия.НалогообложениеНДС;
	Дата = СтруктураДействия.Дата;
	Организация = СтруктураДействия.Организация;
	Если СтруктураДействия.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = СтруктураДействия.ХозяйственнаяОперация;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Если ПродажиСервер.ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Тогда
		
		АктуальныеСтавкиНДС = Новый Массив();
		АктуальныеСтавкиНДС.Добавить(Справочники.СтавкиНДС.БезНДС);
		КэшированныеЗначения.АктуальныеСтавкиНДС = АктуальныеСтавкиНДС;
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДСТипыНалогообложенияНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДСТипыНалогообложенияНДС
		|ГДЕ
		|	СтавкиНДСТипыНалогообложенияНДС.ТипНалогообложенияНДС = &ТипНалогообложенияНДС
		|	И (СтавкиНДСТипыНалогообложенияНДС.Ссылка.Страна = &Страна
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.Страна = &ПустаяСтрана)
		|	И (СтавкиНДСТипыНалогообложенияНДС.Ссылка.НачалоПериода <= &Дата
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|	И (КОНЕЦПЕРИОДА(СтавкиНДСТипыНалогообложенияНДС.Ссылка.КонецПериода, ДЕНЬ) >= &Дата
		|			ИЛИ СтавкиНДСТипыНалогообложенияНДС.Ссылка.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	СтавкиНДСТипыНалогообложенияНДС.Ссылка";
		
		Запрос.УстановитьПараметр("ТипНалогообложенияНДС", НалогообложениеНДС);
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("Страна", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
		Запрос.УстановитьПараметр("ПустаяСтрана", Справочники.СтраныМира.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			КэшированныеЗначения.АктуальныеСтавкиНДС = Новый Массив;
		КонецЕсли;
		
		КэшированныеЗначения.АктуальныеСтавкиНДС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("СтавкаНДС");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.ВидЦены = ДанныеДляОбработкиСтроки("ВидЦен", КэшированныеЗначения)[0].ВидЦены;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАдресногоХранения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.ИспользоватьАдресноеХранение = 
		ДанныеДляОбработкиСтроки("ПризнакАдресногоХранения", КэшированныеЗначения)[0].ИспользоватьАдресноеХранение;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакПринимаетсяКНУ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ТекущаяСтрока.ПринимаетсяКНУ = 
		ДанныеДляОбработкиСтроки("ПризнакПринимаетсяКНУ", КэшированныеЗначения)[0].ИспользоватьАдресноеХранение;
	
КонецПроцедуры

Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока, Действия, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ПараметрСтруктурыДействий;
	
	Действия.Свойство("ЗаполнитьGTINВСтроке", ПараметрСтруктурыДействий);
	ДобавлятьЛидирующиеНули = Ложь;
	Если ПараметрСтруктурыДействий <> Неопределено Тогда
		ДобавлятьЛидирующиеНули = ПараметрСтруктурыДействий.ДобавлятьЛидирующиеНули;
	КонецЕсли;
	
	ДанныеДляОбработки = ДанныеДляОбработкиСтроки("втТаблицаШтрихкодов",КэшированныеЗначения);
	Если ДанныеДляОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КорректныеGTIN = Новый Массив;
	
	Для Каждого Элемент Из ДанныеДляОбработки Цикл
		
		GTIN = Элемент.GTIN;
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN) Тогда
			Если ДобавлятьЛидирующиеНули Тогда
				GTIN = Прав("000000" + GTIN, 14);
			КонецЕсли;
			КорректныеGTIN.Добавить(GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорректныеGTIN.Найти(ТекущаяСтрока.GTIN) <> Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли КорректныеGTIN.Количество() = 1 Тогда
		
		ТекущаяСтрока.GTIN = КорректныеGTIN[0];
		
	ИначеЕсли КорректныеGTIN.Количество() > 1 Тогда
		
		ТекущаяСтрока.GTIN = "";
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаполнитьПризнакИспользованияПомещений(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	ТекущаяСтрока.ИспользоватьСкладскиеПомещения =
		ДанныеДляОбработкиСтроки("ПризнакИспользованияПомещений", КэшированныеЗначения)[0].ИспользоватьСкладскиеПомещения;
		
КонецПроцедуры

Процедура ЗаполнитьПомещение(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Помещение) Тогда
		ДанныеДляОбработки = ДанныеДляОбработкиСтроки("ЗаполнитьПомещение", КэшированныеЗначения);
		ТекущаяСтрока.Помещение = ДанныеДляОбработки[0].Помещение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаправлениеДеятельности(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;

	СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", ПараметрыДействия);

	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеДеятельностиПакетно(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ПараметрыДействия);

КонецПроцедуры

Процедура ЗаполнитьЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуПродажи", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ТекущаяСтрока.Цена = ДанныеПоСтроке[0].Цена;
		ТекущаяСтрока.ВидЦены = ДанныеПоСтроке[0].ВидЦены;
		
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуПродажиПоАссортименту(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуПродажиПоАссортименту", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ТекущаяСтрока.Цена = ДанныеПоСтроке[0].Цена;
		
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия; // см. АссортиментКлиентСервер.ПараметрыПроверкиАссортимента
	
	СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьАссортиментСтроки", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		Если Результат.КонтролироватьАссортимент
			И Не Результат[ПараметрыДействия.ИмяРесурсаАссортимента] Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыДействия.ТекстСообщения, Результат.Номенклатура);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ПараметрыДействия.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),,
				Ложь);
				
			Если Не ПараметрыДействия.РазрешатьДобавление Тогда
				ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияПродаж(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияПродаж", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		ТекущаяСтрока.Цена = Окр(Результат.Цена, 2);
		
		Если ЗначениеЗаполнено(Результат.ВидЦены) Тогда
			ТекущаяСтрока.ВидЦены = Результат.ВидЦены;
		Иначе
			ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
			
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		
	КонецЕсли;
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияПродаж", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		ТекущаяСтрока.Цена = Окр(Результат.Цена, 2);
		
		Если ЗначениеЗаполнено(Результат.ВидЦены) Тогда
			ТекущаяСтрока.ВидЦены = Результат.ВидЦены;
		Иначе
			ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияРозничныхПродаж(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияРозничныхПродаж", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		Если ЕстьКолонкаВИсточникеДанных("ВидЦены", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ВидЦены = Результат.ВидЦены;
		КонецЕсли;
		
		ТекущаяСтрока.Цена = Результат.Цена;
		
	Иначе
		
		Если ЕстьКолонкаВИсточникеДанных("ВидЦены", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
		
		ТекущаяСтрока.Цена = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПартнераПоНоменклатуре(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ТекущаяСтрока.НоменклатураПартнера = ДанныеПоСтроке[0].НоменклатураПартнера;
		
	Иначе
		
		ТекущаяСтрока.НоменклатураПартнера = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьНоменклатуруПоНоменклатуреПартнера", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		Если Результат.НеобходимоПерезаполнитьНоменклатуру Тогда
			ТекущаяСтрока.Номенклатура = Результат.Номенклатура;
		КонецЕсли;
		
		Если Результат.НеобходимоПерезаполнитьХарактеристики Тогда
			
			ТекущаяСтрока.Характеристика = Результат.Характеристика;
			
			Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Результат.Характеристика);
			КонецЕсли;
			
			ТекущаяСтрока.ХарактеристикиИспользуются = Результат.ХарактеристикиИспользуются;
			
		КонецЕсли;
		
		Если Результат.НеобходимоПерезаполнитьУпаковки Тогда
			
			ТекущаяСтрока.Упаковка = Результат.Упаковка;
			
			Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Результат.Упаковка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ТекущаяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСопоставленнуюНоменклатуруПартнера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьСопоставленнуюНоменклатуруПартнера", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		Если ЗначениеЗаполнено(Результат.Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru = 'Номенклатуре ""%Номенклатура%"" с характеристикой ""%Характеристика%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПартнера%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Результат.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Результат.Характеристика);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПартнера%", Результат.КоличествоНоменклатурыПартнера);
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПартнера%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Результат.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПартнера%", Результат.КоличествоНоменклатурыПартнера);
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ПараметрыДействия,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Товары",
				ТекущаяСтрока.НомерСтроки,
				"Номенклатура"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		
		ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьХарактеристикуПоВладельцу", КэшированныеЗначения);
		Если ДанныеПоСтроке <> Неопределено Тогда
			
			Результат = ДанныеПоСтроке[0];
			
			ТекущаяСтрока.Характеристика = Результат.Характеристика;
			
			Если ЕстьКолонкаВИсточникеДанных("ХарактеристикиИспользуются", КэшированныеЗначения) Тогда
				ТекущаяСтрока.ХарактеристикиИспользуются = Результат.ХарактеристикиИспользуются;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		
		ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПроверитьЗаполнитьУпаковкуПоВладельцу", КэшированныеЗначения);
		Если ДанныеПоСтроке = Неопределено Тогда
			
			ТекущаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуЗакупки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьЦенуЗакупки", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		ТекущаяСтрока.Цена = ДанныеПоСтроке[0].Цена;
		
	Иначе
		
		ТекущаяСтрока.Цена = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияЗакупок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУсловияЗакупок", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		
		Если ЕстьКолонкаВИсточникеДанных("ВидЦеныПоставщика", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ВидЦеныПоставщика = Результат.ВидЦеныПоставщика;
		КонецЕсли;
		
		ТекущаяСтрока.Цена = Результат.Цена;
		
	Иначе
		
		Если ЕстьКолонкаВИсточникеДанных("ВидЦеныПоставщика", КэшированныеЗначения) Тогда
			ТекущаяСтрока.ВидЦеныПоставщика = Справочники.ВидыЦенПоставщиков.ПустаяСсылка();
		КонецЕсли;
		
		ТекущаяСтрока.Цена = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ЗаполнитьУчетноеКоличествоНоменклатуры", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока.КоличествоУпаковокУчет = Результат.Количество;
		ТекущаяСтрока.КоличествоУпаковокФакт = Результат.Количество;
		
	Иначе
		
		ТекущаяСтрока.КоличествоУпаковокУчет = 0;
		ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковок(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковок", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.Количество;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
		
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокСуффикс(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковокСуффикс", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.Количество;
		
	Иначе
		
		ПараметрыПересчета = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", ТекущаяСтрока.Упаковка);
		
		ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
		ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		ТекущаяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоВесу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковокПоВесу", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличество] = Результат.Количество;
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.КоличествоУпаковок;
		
	Иначе
		
		ПараметрыПересчета = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = пакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
		ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоОбъему(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему", ПараметрыДействия);
	
	ДанныеПоСтроке = ДанныеДляОбработкиСтроки("ПересчитатьКоличествоУпаковокПоОбъему", КэшированныеЗначения);
	Если ДанныеПоСтроке <> Неопределено Тогда
		
		Результат = ДанныеПоСтроке[0];
		ТекущаяСтрока[Результат.ИмяПоляКоличество] = Результат.Количество;
		ТекущаяСтрока[Результат.ИмяПоляКоличествоУпаковок] = Результат.КоличествоУпаковок;
		
	Иначе
		
		ПараметрыПересчета = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиницСуффикс(Неопределено, ПараметрыДействия);
		КоличествоССуффиксом = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(ПараметрыПересчета.Суффикс);
		
		ТекущаяСтрока[КоличествоССуффиксом.Количество] = 0;
		ТекущаяСтрока[КоличествоССуффиксом.КоличествоУпаковок] = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные об упаковке.
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура, по которой требуется получить коэффициент упаковки.
//  Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка, по которой требуется получить коэффициент упаковки.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
// 
// Возвращаемое значение:
//  см. Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки
//
Функция ДанныеОбУпаковке(Номенклатура, Упаковка, КэшированныеЗначения) Экспорт 
	
	ДанныеОбУпаковке = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, , Ложь);
	
	КлючКоэффициента = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Номенклатура, Упаковка);
	
	КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента,	Новый Структура("Коэффициент, НужноОкруглятьКоличество",
																							ДанныеОбУпаковке.Коэффициент,
																							ДанныеОбУпаковке.НужноОкруглятьКоличество));
	КэшированныеЗначения.ОбъемУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Вес);
	КэшированныеЗначения.ВесУпаковок.Вставить(КлючКоэффициента, 			ДанныеОбУпаковке.Объем);
	
	Возврат ДанныеОбУпаковке;
	
КонецФункции

// Процедура, вызываемая из обработчика реквизита "Номенклатура" табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - текущая строка табличной части.
//	СтруктураДействий - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("НоменклатураПриИзмененииПереопределяемый", ПараметрыДействия);
	МодификацияКонфигурацииПереопределяемый.НоменклатураПриИзмененииПереопределяемый(ТекущаяСтрока,
		ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

// Процедура, вызываемая из обработчика реквизита "Характеристика" табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - текущая строка табличной части.
//	СтруктураДействий - Структура - допустимые действия для табличной части.
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	СтруктураДействий.Свойство("ХарактеристикаПриИзмененииПереопределяемый", ПараметрыДействия);
	МодификацияКонфигурацииПереопределяемый.ХарактеристикаПриИзмененииПереопределяемый(ТекущаяСтрока,ПараметрыДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описание обработчиков строк коллекции:
// 
// Параметры:
//  ОбработчикиСтрок - СписокЗначений из Строка - Наименование обработчика строки табличной части:
//  * Представление - Строка - экспортного метода к выполнению.
//
Процедура ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок) Экспорт
	
	// Обработчики будут выполнены в порядке строк ниже
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок);
	
	ТМЦВЭксплуатацииСервер.ДополнитьМетодыКВыполнениюПакетно(ОбработчикиСтрок);
	РетроБонусыСервер.ПриДобавленииОбработчиковСтрокКоллекции(ОбработчикиСтрок);
	
	ОбработчикиСтрок.Добавить("ПроверитьАссортиментСтроки",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьАссортиментСтроки");

	ОбработчикиСтрок.Добавить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПоНоменклатуреПартнераВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПроверитьСопоставленнуюНоменклатуруПартнера",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьСопоставленнуюНоменклатуруПартнераВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакТипНоменклатуры",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВидНоменклатуры",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакЕдиницаИзмерения",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакТипИзмеряемойВеличины",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьВесУпаковки",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьОбъемУпаковки",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьЕдиницуИзмеренияВеса",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьЕдиницуИзмеренияОбъема",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("КоличествоУпаковокВЕдиницеИзмеренияВеса",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакАртикул",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакКод",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакОписание",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакХарактеристикиИспользуются",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВедетсяУчетПоГТД",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВедетсяУчетПоРНПТ",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьЕдиницуИзмеренияТНВЭД",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакЭтоУслуга",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакВариантОформленияПродажи",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакСерииИспользуются",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьВесОбъем",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьТипНомераГТД",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьТипНомераГТД");

	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьСклад",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьСклад");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакОрдерногоСклада",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакОрдерногоСкладаВСтрокеТЧ");


	ОбработчикиСтрок.Добавить("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация");

	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоНеОтгружать",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьGTINВСтроке",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьGTINВСтроке");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоФакту",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоЕдиниц",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоЕдиницСуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоПоРНПТ",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоПоРНПТСуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковок",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокСуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоОтклонение",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоВесу",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоОбъему",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему");

	ОбработчикиСтрок.Добавить("ПересчитатьВесОбъем",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьВидЦены",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ");
 
	ОбработчикиСтрок.Добавить("ПересчитатьЦенуЗаУпаковку",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуЗаУпаковкуСуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуСуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуЗаказаЗаУпаковку",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьВидЦены",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьВидЦеныВСтрокеТЧ");
 
	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПродажи",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПродажиПоАссортименту",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуЗакупки",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуЗакупкиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияПродаж",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродажВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияПродажУслуги",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродажВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияРозничныхПродаж",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияЗакупок",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияЗакупокВСтрокеТЧ");


	ОбработчикиСтрок.Добавить("СкорректироватьСтавкуНДС",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.СкорректироватьСтавкуНДСВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьСтавкуНДС",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтавкуНДСВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьСтавкуНДССуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтавкуНДССуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьКодТНВЭД",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуСНДС",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьЦенуСНДС");

	ОбработчикиСтрок.Добавить("ЗаполнитьСтавкуНДСВозвратнойТары",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуРучнойСкидки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуАвтоматическойСкидки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьПроцентРучнойСкидки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСумму",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуРасхождения",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуПоСумме",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПродажиПоСуммеСНДС",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуПродажиПоСуммеСНДС");

	ОбработчикиСтрок.Добавить("ПересчитатьЦенуПродажиПоСуммеПродажи",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомРучнойСкидки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСУчетомПогрешностиОкругления",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуСУчетомПогрешностиОкругленияВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуНДС",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуНДСВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуНДССуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьСуммуНДССуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСНДС",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСНДССуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуБезНДС",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуРегл",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПР",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуНУ",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуВР",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьНДСРегл",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПродажи",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуПродажиНДС",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ОчиститьСуммуВознаграждения",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("УстановитьАктивность",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки");

	ОбработчикиСтрок.Добавить("ЗаполнитьТипМестаХраненияПоУмолчанию",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипМестаХраненияПоУмолчанию");

	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьПолучитьВариантКомплектации");

	ОбработчикиСтрок.Добавить("ЗаполнитьФлагРасхождение",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча");

	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокОтклонение",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча");

	ОбработчикиСтрок.Добавить("ЗаполнитьФлагИзлишекПорча",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча");

	ОбработчикиСтрок.Добавить("ОчиститьСуммуВзаиморасчетов",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ОчиститьСуммуВзаиморасчетовСуффикс",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовСуффиксВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ОчиститьАвтоматическуюСкидку",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьСодержание",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСодержаниеУслуги");

	ОбработчикиСтрок.Добавить("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтатьюАналитикуРасходовНоменклатуры");

	ОбработчикиСтрок.Добавить("ОчиститьСтатьюАналитикуРасходов",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ОчиститьСтатьюАналитикуРасходов");

	ОбработчикиСтрок.Добавить("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки");

	ОбработчикиСтрок.Добавить("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНастройкуСчетовУчетаПоУмолчанию");

	ОбработчикиСтрок.Добавить("ЗаполнитьПредставлениеНастройкиСчетовУчета",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПредставлениеНастройкиСчетовУчета");

	ОбработчикиСтрок.Добавить("ЗаполнитьПартнера",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера");

	ОбработчикиСтрок.Добавить("ЗаполнитьПомещение",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПомещение");

	ОбработчикиСтрок.Добавить("ЗаполнитьПродавца",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПродавца");

	ОбработчикиСтрок.Добавить("ЗаполнитьУчетноеКоличествоНоменклатуры",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУчетноеКоличествоНоменклатуры");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакБезВозвратнойТары",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакОтмененоБезВозвратнойТары",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакАктивностьБезВозвратнойТары",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары");

	ОбработчикиСтрок.Добавить("ЗаполнитьДубликатыЗависимыхРеквизитов",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов");

	ОбработчикиСтрок.Добавить("ПроверитьСериюРассчитатьСтатус",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьСериюРассчитатьСтатус");

	ОбработчикиСтрок.Добавить("ПересчитатьСуммуСверхЗаказа",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСверхЗаказаВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("УстановитьПризнакДляЗаполненияТекстовогоОписания",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.УстановитьПризнакДляЗаполненияТекстовогоОписания");

	ОбработчикиСтрок.Добавить("ЗаполнитьВариантОтраженияКорректировкиРеализации",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации");

	ОбработчикиСтрок.Добавить("НоменклатураПриИзмененииПереопределяемый",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.НоменклатураПриИзмененииПереопределяемый");

	ОбработчикиСтрок.Добавить("ХарактеристикаПриИзмененииПереопределяемый",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ХарактеристикаПриИзмененииПереопределяемый");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакПринимаетсяКНУ",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакПринимаетсяКНУ");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакАдресногоХранения",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакАдресногоХранения");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакИспользованияПомещений",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакИспользованияПомещений");

	ОбработчикиСтрок.Добавить("ПересчитатьРасхожденияПослеОтгрузки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки");

	ОбработчикиСтрок.Добавить("ПересчитатьРасхожденияПослеПриемки",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки");

	ОбработчикиСтрок.Добавить("ПересчитатьРасхождения",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения");

	ОбработчикиСтрок.Добавить("ПризнакНаличиеКомментарияПриемка",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка");

	ОбработчикиСтрок.Добавить("ПризнакНаличиеКомментарияОтгрузка",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка");

	ОбработчикиСтрок.Добавить("ПризнакНаличиеКомментарияПриемка",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакТовМестаТребуетсяОбработка",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакДвиженияПоСкладскимРегистрам");
	
	ОбработчикиСтрок.Добавить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения");

	ОбработчикиСтрок.Добавить("ПриИзмененииТипаНоменклатуры",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПриИзмененииТипаНоменклатуры");

	ОбработчикиСтрок.Добавить("ЗаполнитьСлужебныеРеквизитыПоНазначению",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНазначениюВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьНазначение",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьФлагОбособленноПоНазначению",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению");

	ОбработчикиСтрок.Добавить("ПриИзмененииНазначения",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ЗаполнитьСтрануПроисхожденияДляНомераГТД",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтрануПроисхожденияДляНомераГТД");

	ОбработчикиСтрок.Добавить("ЗаполнитьСтрануПроисхожденияНоменклатуры",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьСтрануПроисхожденияНоменклатуры");

	ОбработчикиСтрок.Добавить("ЗаполнитьСпособОпределенияСебестоимости",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости");

	ОбработчикиСтрок.Добавить("ЗаполнитьСпособОпределенияСебестоимостиСтрокой",
		 "ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой");

	ОбработчикиСтрок.Добавить("ЗаполнитьНаправлениеДеятельности",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНаправлениеДеятельности");

	ОбработчикиСтрок.Добавить("ЗаполнитьПодразделениеВСтрокеТЧ",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПодразделениеВСтрокеТЧ");

	ОбработчикиСтрок.Добавить("ПроверитьНеобходимостьОбновленияКолонкиДоступно",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьНеобходимостьОбновленияКолонкиДоступно");

	ОбработчикиСтрок.Добавить("ЗаполнитьКолонкуДоступно",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьКолонкуДоступно");

	ОбработчикиСтрок.Добавить("ОбновитьКэшНоменклатура",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ОбновитьКэшНоменклатура");

	ОбработчикиСтрок.Добавить("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках");

	ОбработчикиСтрок.Добавить("ЗаполнитьПризнакРасхождениеЗаказ",
		 "ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьПризнакРасхождениеЗаказ");
	
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьЗаполнитьОбеспечениеВДокументеПродажи");
		
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоПоРНПТ",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоПоРНПВСтрокеТЧ");
		
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоПоРНПТСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ");
	
	
	ОбработчикиСтрок.Добавить("ЗаполнитьGTINВСтроке",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьGTINВСтроке");

	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПередачиПродукцииДавальцу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПередачиПродукцииДавальцу");

	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПродажи",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажи");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуПродажиПоАссортименту",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуПродажиПоАссортименту");
	
	ОбработчикиСтрок.Добавить("ПроверитьАссортиментСтроки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьАссортиментСтроки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияПродаж",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродаж");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияПродажУслуги",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияПродаж");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияРозничныхПродаж",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияРозничныхПродаж");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуре");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	
	ОбработчикиСтрок.Добавить("ПроверитьСопоставленнуюНоменклатуруПартнера",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьСопоставленнуюНоменклатуруПартнера");
	
	ОбработчикиСтрок.Добавить("ПроверитьХарактеристикуПоВладельцу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки");
	
	ОбработчикиСтрок.Добавить("ПроверитьЗаполнитьУпаковкуПоВладельцу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьЦенуЗакупки",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьЦенуЗакупки");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУсловияЗакупок",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУсловияЗакупок");
	
	ОбработчикиСтрок.Добавить("ЗаполнитьУчетноеКоличествоНоменклатуры",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ЗаполнитьУчетноеКоличествоНоменклатуры");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковок",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковок");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокСуффикс",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокСуффикс");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоВесу",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокПоВесу");
	
	ОбработчикиСтрок.Добавить("ПересчитатьКоличествоУпаковокПоОбъему",
		"ПакетнаяОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокПоОбъему");
	
КонецПроцедуры

// Описание текстов запросов, которые требуется выполнить для получения всех необходимых данных, необходимых для 
// обработки строк.
// 
// Параметры:
//  Действия - см. ОбработатьСтрокуТЧВЦикле.Действия.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ДополнитьТекстыЗапросовИсточниковДанных(Действия, КэшированныеЗначения)
	
	ОписаниеЗапроса = КэшированныеЗначения.ОписаниеЗапроса;
	
	// Поставляемые тексты запросов для получения все необходимых данных для обработки строк за минимальное количество запросов.
	ДоходыИРасходыСервер.ДополнитьТекстЗапросаЗначенияРеквизитовСтатьи(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ДоходыИРасходыСервер.ДополнитьТекстЗапросаСтатьяАналитикаРасходовПоУмолчанию(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ДоходыИРасходыСервер.ДополнитьТекстЗапросаПризнакПринимаетсяКНУ(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ЗакупкиСервер.ДополнитьТекстЗапросаСтранаПроисхожденияПоНомеруГТД(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ЗакупкиСервер.ДополнитьТекстЗапросаТипНомераГТД(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	
	НоменклатураПродаваемаяСовместно.ДополнитьТекстЗапросаПолучитьДанныеОНоменклатуреПродаваемойСовместно(Действия, 
		ОписаниеЗапроса, КэшированныеЗначения);
	
	НоменклатураСервер.ДополнитьТекстЗапросаРеквизитыПоНоменклатуре(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаСодержаниеУслуги(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаСтранаПроисхожденияНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаШтрихкодыНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ПродажиСервер.ДополнитьТекстЗапросаДанныеПоДокументуПриобретения(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ПродажиСервер.ДополнитьТекстЗаполнениеВидаЦены(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	СкладыСервер.ДополнитьТекстЗапросаПроверитьЗаполнитьСклад(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаПризнакДвиженияПоСкладскимРегистрам(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаПризнакОрдерногоСклада(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаИспользоватьАдресноеХранение(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаИспользоватьСкладскиеПомещения(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	СкладыСервер.ДополнитьТекстЗапросаЗаполнитьПомещение(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ТМЦВЭксплуатацииСервер.ДополнитьОписаниеЗапросаПакетнойОбработкиТЧ(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	УчетНДСУП.ДополнитьТекстЗапросаСтавкаНДСПоСпискуНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	УчетНДСУП.ДополнитьТекстЗапросаСтавкаПоСтавкеНДС(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	УчетНДСУП.ДополнитьТекстЗапросаСтавкаПоСтавкеНДССуффикс(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ОбеспечениеВДокументахСервер.ПакетнаяОбработкаДополнитьИсточникомДанныхОбеспечениеВДокументах(
		Действия,
		ОписаниеЗапроса,
		КэшированныеЗначения);
	
	УчетПрослеживаемыхТоваровЛокализация.ДополнитьТекстыЗапросовИсточниковДанных(Действия,
		ОписаниеЗапроса,
		КэшированныеЗначения);
		
	Справочники.ВариантыКомплектацииНоменклатуры.ДополнитьТекстЗапросаВариантаКомплектацииНоменклатуры(
		Действия,
		ОписаниеЗапроса,
		КэшированныеЗначения);
	
	//++ Устарело_Переработка24
	
	
	//-- Устарело_Переработка24
	

	
	ЦеныПредприятияЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьЦенуПередачиПродукцииДавальцу(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ЦеныПредприятияЗаполнениеСервер.ДополнитьТекстЗапросаПроверитьЗаполнитьЦенуВыпуска(Действия, ОписаниеЗапроса, КэшированныеЗначения);

	ЦеныПредприятияЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьЦенуПродажи(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	АссортиментСервер.ДополнитьТекстЗапросаЗаполнитьЦенуПродажиПоАссортименту(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	АссортиментСервер.ДополнитьТекстЗапросаПроверитьАссортиментСтроки(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ПродажиСервер.ДополнитьТекстЗапросаЗаполнитьУсловияПродаж(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	РозничныеПродажи.ДополнитьТекстЗапросаЗаполнитьУсловияРозничныхПродаж(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	НоменклатураПартнеровСервер.ДополнитьТекстЗапросаЗаполнитьНоменклатуруПартнераПоНоменклатуре(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураПартнеровСервер.ДополнитьТекстЗапросаЗаполнитьНоменклатуруПоНоменклатуреПартнера(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураПартнеровСервер.ДополнитьТекстЗапросаПроверитьСопоставленнуюНоменклатуруПартнера(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	НоменклатураСервер.ДополнитьТекстЗапросаПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаЗаполнитьУчетноеКоличествоНоменклатуры(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковок(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокСуффикс(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокПоВесу(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	НоменклатураСервер.ДополнитьТекстЗапросаПересчитатьКоличествоУпаковокПоОбъему(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ЦеныПартнеровЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьЦенуЗакупки(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	ЦеныПартнеровЗаполнениеСервер.ДополнитьТекстЗапросаЗаполнитьУсловияЗакупок(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	РетроБонусыСервер.ДополнитьТекстЗапросаПризнакСоглашенияВСтрокеТЧ(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ДополнитьТекстыЗапросовИсточниковДанных(Действия, ОписаниеЗапроса, КэшированныеЗначения);
	
КонецПроцедуры

// Программное заполнение дополнительных колонок, используется когда данные получить в запросе более сложно, чем программно. 
Процедура ЗаполнитьДополнительныеКолонки(СтруктураДействий, КэшированныеЗначения)
	
	ОбрабатываемаяКоллекция = КэшированныеЗначения.ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных;
		
	УчетНДСУП.ЗаполнитьКолонкуДатаПолученияСтавки(ОбрабатываемаяКоллекция, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Функция ЗависимыеОбработчикиСтрокТЧ(СтруктураДействий)

	ЗависимыеОбработчики = Новый Структура();
	
	ОписаниеЗависимыхОбработчиков = Новый Структура();
	ПриОписанииЗависимостейОбработчиков(ОписаниеЗависимыхОбработчиков, СтруктураДействий);
	ЕстьЗависимыеОбработчики = Ложь;
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Если ОписаниеЗависимыхОбработчиков.Свойство(Действие.Ключ) Тогда
			ЕстьЗависимыеОбработчики = Истина;
				Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьЗависимыеОбработчики Тогда
		Возврат ЗависимыеОбработчики;
	КонецЕсли;
	
	// Убираем из описания зависимостей действия, которые не требуется выполнить в текущий момент
	Для Каждого Обработчик Из ОписаниеЗависимыхОбработчиков Цикл
		
		ВедомыеОбработчики = СтрРазделить(Обработчик.Значение, Символы.ПС);
		ВедомыеОбработчикиКопия = ОбщегоНазначения.СкопироватьРекурсивно(ВедомыеОбработчики);
		Для Каждого ВедомыйОбработчик Из ВедомыеОбработчикиКопия Цикл
			Если Не СтруктураДействий.Свойство(ВедомыйОбработчик) Тогда
				ВедомыеОбработчики.Удалить(ВедомыеОбработчики.Найти(ВедомыйОбработчик));
			КонецЕсли;
		КонецЦикла;
		
		Если ВедомыеОбработчики.Количество() Тогда
			ЗависимыеОбработчики.Вставить(
				Обработчик.Ключ, 
				ВедомыеОбработчики);
		КонецЕсли;
			
	КонецЦикла;
	
	// Контроль корректности описания зависимых обработчиков, недопустимо описывать циклические зависимости
	// такие как 1->2->1 или же вложенные зависимости 1->2->3->1
	
	Для Каждого ЗависимыйОбработчик Из ЗависимыеОбработчики Цикл
		Цепочка = Новый Массив;
		Для Каждого ВедомыйОбработчик Из ЗависимыйОбработчик.Значение Цикл
			
			ПроверитьЗависимостьОбработчиков(
				ВедомыйОбработчик,
				ЗависимыйОбработчик.Ключ,
				ЗависимыеОбработчики,
				Цепочка);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗависимыеОбработчики;
	
КонецФункции

Процедура ПриОписанииЗависимостейОбработчиков(ОписаниеЗависимыхОбработчиков, СтруктураДействий)
	
	ОписаниеЗависимыхОбработчиков.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", "ЗаполнитьПродукциюВЕТИС");
	ОписаниеЗависимыхОбработчиков.Вставить("ЗаполнитьПризнакНазначения", "ЗаполнитьПризнакДвиженияПоСкладскимРегистрам");

	ОписаниеЗависимыхОбработчиков.Вставить("ЗаполнитьПризнакНазначения", "ЗаполнитьПризнакДвиженияПоСкладскимРегистрам");
	ОписаниеЗависимыхОбработчиков.Вставить("ЗаполнитьПризнакЦеховаяКладовая", "ЗаполнитьПолучателяПоНаправлениюВыпуска,ПроверитьЗаполнитьСклад");

	ОписаниеЗависимыхОбработчиков.Вставить("ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу", "ЗаполнитьПризнакЦеховаяКладовая");
	
КонецПроцедуры

Функция ТаблицаЗначенийПоТекущейСтроке(СтрокаКоллекции, Коллекция)
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("Структура") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений();
		ОписаниеКолонок = Новый Структура();
		
		ТаблицаИсточник.Колонки.Добавить("ИдентификаторСтрокиВТ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
		ИдентификаторСтрокиВТ = Строка(Новый УникальныйИдентификатор());
		СтрокаКоллекции.Вставить("ИдентификаторСтрокиВТ", ИдентификаторСтрокиВТ);
		Для Каждого ЭлементСтруктуры Из СтрокаКоллекции Цикл
			Типы = Новый Массив();
			Типы.Добавить(ТипЗнч(ЭлементСтруктуры.Значение));
			ОписаниеКолонок.Вставить(ЭлементСтруктуры.Ключ, Типы);
		КонецЦикла;
		
		ОписаниеКолонок.Удалить("ИдентификаторСтрокиВТ");
	
		Для Каждого ОписаниеКолонки Из ОписаниеКолонок Цикл
			ТаблицаИсточник.Колонки.Добавить(ОписаниеКолонки.Ключ, Новый ОписаниеТипов(ОписаниеКолонки.Значение));
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ТаблицаИсточник.Добавить(), СтрокаКоллекции); 
		
	ИначеЕсли ТипЗнч(СтрокаКоллекции) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ТаблицаИсточник = Коллекция.Выгрузить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаКоллекции));
		Для Каждого Колонка Из ТаблицаИсточник.Колонки Цикл
			Если Колонка.ТипЗначения = ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("СписокЗначений")) Тогда
				ТаблицаИсточник.Колонки.Удалить(Колонка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаИсточник;
	
КонецФункции

Функция МетодыКВыполнению(СтруктураДействий, КэшированныеЗначения)

	СоответствиеТЗ = ПакетнаяОбработкаТабличнойЧастиПовтИсп.МетодыКВыполнению();
	СтруктураДействийТЗ = СоответствиеТЗ.Скопировать(Новый Массив()); 
	
	Для каждого Действие Из СтруктураДействий Цикл
		
		Если КэшированныеЗначения.Свойство("ПропускаемыеДействия")
			И КэшированныеЗначения.ПропускаемыеДействия.Свойство(Действие.Ключ) Тогда
				Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = СоответствиеТЗ.НайтиСтроки(Новый Структура("Обработка", Действие.Ключ));
		Для каждого Обработка Из НайденныеСтроки Цикл
			 ЗаполнитьЗначенияСвойств(СтруктураДействийТЗ.Добавить(), Обработка);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураДействийТЗ.Сортировать("Порядок");
	
	Если Не КэшированныеЗначения.Свойство("ПропускаемыеДействия") Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтруктураДействийТЗ.ВыгрузитьКолонку("Метод"));
	Иначе
		Возврат СтруктураДействийТЗ;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВременнуюТаблицуПоКоллекции(ОписаниеЗапроса, Коллекция, КэшированныеЗначения)
	
	КоллекцияБезСоставныхТипов = Истина;
	ТаблицаИсточник = Новый ТаблицаЗначений();
	
	// Формируем колонки для ТЗ, типы в массиве структур могут быть разные
	Если ТипЗнч(Коллекция) = Тип("Массив") Тогда
		ОписаниеКолонок = Новый Структура();
		
		ТаблицаИсточник.Колонки.Добавить("ИдентификаторСтрокиВТ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
		ПервыйЭлемент = Коллекция[0];
		
		Если ТипЗнч(ПервыйЭлемент) = Тип("Структура") Тогда
			Для Каждого Свойство Из ПервыйЭлемент Цикл
				Типы = Новый Массив();
				Типы.Добавить(ТипЗнч(Свойство.Значение));
				ОписаниеКолонок.Вставить(Свойство.Ключ, Типы);
			КонецЦикла;
			
			Если Не КоллекцияБезСоставныхТипов Тогда
				Для Каждого СтрокаКоллекции Из Коллекция Цикл
					Для Каждого ЭлементСтруктуры Из СтрокаКоллекции Цикл
						ТипыКолонки = ОписаниеКолонок[ЭлементСтруктуры.Ключ]; // Массив
						ТипыКолонки.Добавить(ТипЗнч(ЭлементСтруктуры.Значение));
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ОписаниеКолонки Из ОписаниеКолонок Цикл
			ТаблицаИсточник.Колонки.Добавить(ОписаниеКолонки.Ключ, Новый ОписаниеТипов(ОписаниеКолонки.Значение));
		КонецЦикла;
		
		Если ЭтоСтрокаТабличнойчасти(ПервыйЭлемент)
			Или КэшированныеЗначения.Свойство("ОбрабатываетсяТабличнаяЧасть") Тогда
				Для Каждого СтрокаКоллекции Из Коллекция Цикл
					НоваяСтрока = ТаблицаИсточник.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
					НоваяСтрока.ИдентификаторСтрокиВТ = СтрокаКоллекции.НомерСтроки;
				КонецЦикла;
		Иначе
			Для Каждого СтрокаКоллекции Из Коллекция Цикл
				СтрокаКоллекции.Вставить("ИдентификаторСтрокиВТ", Строка(Новый УникальныйИдентификатор()));
				ЗаполнитьЗначенияСвойств(ТаблицаИсточник.Добавить(), СтрокаКоллекции);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		
			Если Коллекция.Колонки.Найти("ИдентификаторСтрокиВТ") = Неопределено Тогда
				
				Коллекция.Колонки.Добавить("ИдентификаторСтрокиВТ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
				Если КэшированныеЗначения.Свойство("ОбрабатываетсяТабличнаяЧасть") Тогда
					Коллекция.ЗагрузитьКолонку(Коллекция.ВыгрузитьКолонку("НомерСтроки"), "ИдентификаторСтрокиВТ");
				Иначе
					Для Каждого СтрокаКоллекции Из Коллекция Цикл
						СтрокаКоллекции.ИдентификаторСтрокиВТ = Строка(Новый УникальныйИдентификатор());
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ТаблицаИсточник = Коллекция.Скопировать();
			
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция")
		Или ЭтоТабличнаяЧасть(Коллекция) Тогда
				
		ТаблицаИсточник = Коллекция.Выгрузить();
		ТаблицаИсточник.Колонки.Добавить("ИдентификаторСтрокиВТ", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
		ТаблицаИсточник.ЗагрузитьКолонку(ТаблицаИсточник.ВыгрузитьКолонку("НомерСтроки"), "ИдентификаторСтрокиВТ");

	КонецЕсли;
	
	Для Каждого ДопКолонка Из ОписаниеЗапроса.ДопКолонки Цикл
		ТаблицаИсточник.Колонки.Добавить(ДопКолонка.Ключ, ДопКолонка.Значение);
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	* 
		|ПОМЕСТИТЬ
		|	ВтИсточникДанных
		|ИЗ
		|	&ИсточникДанных КАК ВложенныйЗапрос
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтрокиВТ";
	ОписаниеЗапроса.ТекстыЗапросов.Вставить(0, ТекстЗапроса);
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ИсточникДанных", ТаблицаИсточник);
	
	УдалитьНеподдерживаемыеТипыВЗапросе(ОписаниеЗапроса);
	
КонецПроцедуры

Процедура УдалитьНеподдерживаемыеТипыНаКлиенте(КэшированныеЗначения)
	
	КэшированныеЗначения.Удалить("ДанныеДляОбработки");
	КэшированныеЗначения.Удалить("ОписаниеЗапроса");
	КэшированныеЗначения.Удалить("ВнешнееОписаниеЗапроса");
	КэшированныеЗначения.Удалить("ТекущаяСтрокаВКоллекции");
	
КонецПроцедуры

Процедура УдалитьНеподдерживаемыеТипыВЗапросе(ОписаниеЗапроса)
	
	УдаляемыеКолонки = Новый Массив();
	НеподдерживаемыеТипы = Новый Массив();
	НеподдерживаемыеТипы.Добавить(Тип("СписокЗначений"));
	НеподдерживаемыеТипы.Добавить(ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("ОписаниеТипов")));
	ОбрабатываемаяТаблица = ОписаниеЗапроса.ПараметрыЗапроса.ИсточникДанных; // ТаблицаЗначений
	Для каждого Колонка Из ОбрабатываемаяТаблица.Колонки Цикл
		Для Каждого НеподдерживаемыйТип Из НеподдерживаемыеТипы Цикл
			Если Колонка.ТипЗначения.Типы().Найти(НеподдерживаемыйТип) <> Неопределено 
				Или Не Колонка.ТипЗначения.Типы().Количество()
				Или Колонка.ТипЗначения = Неопределено 
				Или Колонка.ТипЗначения = Новый ОписаниеТипов() Тогда
					УдаляемыеКолонки.Добавить(Колонка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
		ОбрабатываемаяТаблица.Колонки.Удалить(УдаляемаяКолонка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗависимостьОбработчиков(ОбработчикЗависимый, ОбработчикВедомый, ОписанияЗависимостей, Цепочка)
	
	Если Не ОписанияЗависимостей.Свойство(ОбработчикЗависимый) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВЦепочке = Цепочка.Найти(ОбработчикВедомый);
	
	Если ИндексВЦепочке <> Неопределено Тогда
		
		ЦепочкаСЗацикливанием = Новый Массив();
		Для Счетчик = ИндексВЦепочке По Цепочка.Количество() - 1 Цикл
			ЦепочкаСЗацикливанием.Добавить(Цепочка[Счетчик]);
		КонецЦикла;
		
		ЦепочкаСЗацикливанием.Добавить(ОбработчикВедомый);
		ОписаниеЗацикливания = СтрСоединить(ЦепочкаСЗацикливанием, Символы.ПС + Символ(11107) + Символы.ПС);
		
		ТекстСообщения = НСтр("ru = 'Некорректно встроен механизм пакетной обработки строк табличных частей.
									|Обнаружена цикличность в описании зависимостей между обработчиками строк:
									|
									|%1'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							ОписаниеЗацикливания);
		
		ВызватьИсключение ОписаниеЗацикливания;
	КонецЕсли;
	
	Цепочка.Добавить(ОбработчикВедомый);
	
	Для Каждого ОписаниеЗависимостей Из ОписанияЗависимостей[ОбработчикЗависимый] Цикл
		ПроверитьЗависимостьОбработчиков(ОписаниеЗависимостей, ОбработчикЗависимый, ОписанияЗависимостей, Цепочка)
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоТабличнаяЧасть(Коллекция)
	
	ТипЗначения = ТипЗнч(Коллекция);
	
	ТипЗначенияСтрокой = ВРег(СтрЗаменить(Строка(ТипЗначения)," ",""));
	ТипЭталонДокумента = Тип("ДокументТабличнаяЧасть.КорректировкаРегистров.ТаблицаРегистров");
	ТипЭталонДокументаСтрокой = ВРег(СтрЗаменить(Строка(ТипЭталонДокумента)," ",""));
	ПозицияРазделителя = СтрНайти(ТипЭталонДокументаСтрокой,":")-1;
	ЭтоТабличнаяЧасть = Лев(ТипЗначенияСтрокой, ПозицияРазделителя) = Лев(ТипЭталонДокументаСтрокой, ПозицияРазделителя);
	
	Возврат ЭтоТабличнаяЧасть;
	
КонецФункции

Функция ЭтоСтрокаТабличнойчасти(ЭлементКоллекции)
	
	ТипЗначения = ТипЗнч(ЭлементКоллекции);
	
	ТипЗначенияСтрокой = ВРег(СтрЗаменить(Строка(ТипЗначения)," ",""));
	ТипЭталон = Тип("ДокументТабличнаяЧастьСтрока.КорректировкаРегистров.ТаблицаРегистров");
	ТипЭталонСтрокой = ВРег(СтрЗаменить(Строка(ТипЭталон)," ",""));
	ПозицияРазделителя = СтрНайти(ТипЭталонСтрокой,":")-1;
	ЭтоСтрокаТабличнойчасти = Лев(ТипЗначенияСтрокой, ПозицияРазделителя) = Лев(ТипЭталонСтрокой, ПозицияРазделителя);
	
	Возврат ЭтоСтрокаТабличнойчасти Или ТипЗначения = Тип("ДанныеФормыЭлементКоллекции");
	
КонецФункции


#Область ОбработчикиСтрок

Процедура ПолучитьКоэффициентРНПТВнутренний(ТекущаяСтрока, Действия, КэшированныеЗначения, ИмяСвойства)

	Перем ПараметрыПересчета;
	Если Действия.Свойство(ИмяСвойства, ПараметрыПересчета) Тогда
		
		ИмяПоляКоличество = "Количество";
		ИмяПоляКоличествоПоРНПТ = "КоличествоПоРНПТ";
		Если ПараметрыПересчета.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(ПараметрыПересчета.ИменаПолейССуффиксом) Тогда
			
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("Количество") Тогда
				ИмяПоляКоличество = ПараметрыПересчета.ИменаПолейССуффиксом.Количество;
			КонецЕсли;
			Если ПараметрыПересчета.ИменаПолейССуффиксом.Свойство("КоличествоПоРНПТ") Тогда
				ИмяПоляКоличествоПоРНПТ = ПараметрыПересчета.ИменаПолейССуффиксом.КоличествоПоРНПТ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВедетсяУчетПоРНПТ Тогда
			Если Действия.Свойство("ЗаполнитьТипНомераГТД") Тогда
				Если ТекущаяСтрока.ТипНомераГТД = ПредопределенноеЗначение("Перечисление.ТипыНомеровГТД.НомерРНПТКомплекта") Тогда
					ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество];
				КонецЕсли;
			Иначе
				ДанныеДляОбработки = ДанныеДляОбработкиСтроки("РасчетКоличестваПоРНПТ", КэшированныеЗначения); 
				Если Не ДанныеДляОбработки = Неопределено Тогда
					Коэффициент = ДанныеДляОбработки[0].Коэффициент;
					ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = ТекущаяСтрока[ИмяПоляКоличество] * Коэффициент;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекущаяСтрока[ИмяПоляКоличествоПоРНПТ] = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Возвращает шаблон поля выборки соответствующий для указанного ключа действия
//
// Параметры:
//  КлючДействия						 - Строка	 - Строка имени ключа действия
//  ТолькоПроверитьПоддерживаемыеКлючи	 - Булево - признак проверки поддержки ключа действия.
// 
// Возвращаемое значение:
//  Строка, Неопределено - Строка шаблон поля запроса.
//
Функция ШаблонПоляВыборкиПоКлючуДействия(КлючДействия, ТолькоПроверитьПоддерживаемыеКлючи = Ложь)
	
	ШаблонЛокализация = "";
	ПакетнаяОбработкаТабличнойЧастиСерверЛокализация.ПриОпределенииШаблонаПоляВыборкиПоКлючуДействия(КлючДействия, ШаблонЛокализация);
	Если ЗначениеЗаполнено(ШаблонЛокализация) Тогда
		Возврат ШаблонЛокализация;
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВидНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЕдиницаИзмерения" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакТипИзмеряемойВеличины" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьВесУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаВесУпаковки
		|	ИНАЧЕ &ТекстЗапросаВесНоменклатуры
		|	КОНЕЦ КАК ВесУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаВесНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьОбъемУпаковки" Тогда
		ТекстЗапроса = ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА &ТекстЗапросаОбъемУпаковки
		|	ИНАЧЕ &ТекстЗапросаОбъемНоменклатуры
		|	КОНЕЦ КАК ОбъемУпаковки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Упаковка","втТаблицаНоменклатуры.Номенклатура", Ложь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаОбъемНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("втТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения","втТаблицаНоменклатуры.Номенклатура", Ложь));
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияВеса" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ВесЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияВеса";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияОбъема" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.ОбъемЕдиницаИзмерения
		|	ИНАЧЕ втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияОбъема";
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьВесОбъем" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ%
		|	*(ВЫБОР
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		ТОГДА 1
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина) И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Вес
		|	КОГДА (втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|				ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		И втТаблицаНоменклатуры.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель
		|	ИНАЧЕ 0
		|	КОНЕЦ) КАК Вес,
		|
		|	втТаблицаНоменклатуры.%Ключ%
		|	*(ВЫБОР
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ВесЧислитель / втТаблицаНоменклатуры.Номенклатура.ВесЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		ТОГДА 1
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ПлощадьЧислитель / втТаблицаНоменклатуры.Номенклатура.ПлощадьЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина) И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель,0) <> 0 И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Числитель / втТаблицаНоменклатуры.Упаковка.Знаменатель / (втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) / (втТаблицаНоменклатуры.Номенклатура.ДлинаЧислитель / втТаблицаНоменклатуры.Номенклатура.ДлинаЗнаменатель) * (втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА втТаблицаНоменклатуры.Упаковка.Объем
		|	КОГДА (втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|				ИЛИ втТаблицаНоменклатуры.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(втТаблицаНоменклатуры.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		И втТаблицаНоменклатуры.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель,0) <> 0
		|		ТОГДА втТаблицаНоменклатуры.Номенклатура.ОбъемЧислитель / втТаблицаНоменклатуры.Номенклатура.ОбъемЗнаменатель
		|	ИНАЧЕ 0
		|	КОНЕЦ) КАК Объем";
		
		Возврат ТекстЗапроса
	КонецЕсли;
	
	Если КлючДействия = "ПересчитатьКоличествоУпаковок" Тогда
		ТекстЗапроса = ",
		|	втТаблицаНоменклатуры.%Ключ% / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК %ЗначениеЗамены%";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"втТаблицаНоменклатуры.Упаковка",
				"втТаблицаНоменклатуры.Номенклатура"));
		
		Возврат ТекстЗапроса;
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакАртикул" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Артикул КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакКод" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Код КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакОписание" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Описание КАК %ЗначениеЗамены%";
	КонецЕсли;

	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																			ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоРНПТ" Тогда
		Возврат ",
		|	ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ПрослеживаемыйТовар, ЛОЖЬ)
		|		И ЕСТЬNULL(втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД, ЛОЖЬ) КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьЕдиницуИзмеренияТНВЭД" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ЕдиницаИзмеренияТНВЭД КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакСерииИспользуются" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры.ИспользоватьСерии КАК %ЗначениеЗамены%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка")
		И Не ТолькоПроверитьПоддерживаемыеКлючи Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %ЗначениеЗамены%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДействиеИсключение(Действие)
	
	ИсключенияИзДействий = Новый Массив();
	ИсключенияИзДействий.Добавить("МетодыКВыполнению");
	ИсключенияИзДействий.Добавить("КоличествоДействий"); 
	
	Возврат Не ИсключенияИзДействий.Найти(Действие.Ключ) = Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
