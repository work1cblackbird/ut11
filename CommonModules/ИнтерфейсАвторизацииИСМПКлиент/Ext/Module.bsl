#Область ПрограммныйИнтерфейс

// Запросить новый ключ сессии для авторизации в ИС МП.
// 
// Параметры:
// 	ПараметрыЗапроса        - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
// 	ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения после получения результата.
Процедура ЗапроситьКлючСессии(ПараметрыЗапроса, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапроса);
	
	ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
	
	Если ПараметрыАвторизации = Неопределено Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВозвращаемоеЗначение = Новый Соответствие;
			ВозвращаемоеЗначение.Вставить(ПараметрыЗапроса.Организация, РезультатЗапроса.ТекстОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВозвращаемоеЗначение);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Описание = СтрШаблон(
		НСтр("ru = 'Авторизация в %1 для %2'"),
		ПараметрыЗапроса.ПредставлениеСервиса,
		ПараметрыЗапроса.Организация);
	
	Сообщения = Новый Массив;
	Сообщения.Добавить(
		ИнтерфейсАвторизацииИСМПСлужебныйКлиент.РезультатПодписания(
			ПараметрыЗапроса,
			Описание,
			ПараметрыАвторизации));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыЗапроса",        ПараметрыЗапроса);
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ИнтерфейсАвторизацииИСМПСлужебныйКлиент.Подписать(
		Сообщения,
		ПараметрыЗапроса,
		Новый ОписаниеОповещения("ПослеПодписания", ИнтерфейсАвторизацииИСМПСлужебныйКлиент, Контекст));
	
КонецПроцедуры

Процедура ЗапроситьКлючСессииСУчетомВидаТокена(ПараметрыСканирования, ВидПродукции, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
			ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
		
		ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыСканирования.Организация);
	Иначе
		ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ПараметрыСканирования.Организация);
	КонецЕсли;
	
	ЗапроситьКлючСессии(ПараметрыЗапроса, ОповещениеПриЗавершении);
	
КонецПроцедуры

//Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии.
//
//Параметры:
//   Организация - ОпределяемыйТип.Организация - Организация.
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции (для уточнения сервиса).
//   ТребуетсяПолучатьТокенРозничнойПродажи - Булево - признак, что требуется получать токен розничной продажи
//
//Возвращаемое значение:
//   (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ПараметрыЗапросаКлючаСессии(Организация = Неопределено, ВидПродукции = Неопределено, ТребуетсяПолучатьТокенРозничнойПродажи = Ложь) Экспорт
	
	Если ТребуетсяПолучатьТокенРозничнойПродажи Тогда
		Возврат ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(Организация);
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции) Тогда
		Возврат ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
	КонецЕсли;
	
	Возврат ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии();
	
КонецФункции

#Область ОтветственныеЗаАктуализациюТокеновАвторизации

// Подключает обработчик ожидания для показа напоминаний ответственному за актуализацию токенов авторизации.
//
Процедура ВыполнитьИнициализациюНастроекОтветственногоЗаАктуализациюТокеновАвторизации() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияИСВызовСервера.ИспользуетсяМаркируемаяПродукция() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбновлениеНастроекОтветственногоЗаАктуализациюТокеновАвторизации();
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВыполнитьОбновлениеНастроекОтветственногоЗаАктуализациюТокеновАвторизации", 3600);
	
КонецПроцедуры

// Выполняет обновление настроек ответственного за актуализацию токенов авторизации ИСМП.
// Настройки содержатся в глобальной переменной ПараметрыПриложения.
// 
// Параметры:
//  ДляПросмотра - Булево - определяет для чего нужно получить настройки:
//                          для просмотра списка токенов или для актуализации токенов.
//
Процедура ВыполнитьОбновлениеНастроекОтветственногоЗаАктуализациюТокеновАвторизации(ДляПросмотра = Ложь) Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ИнтерфейсАвторизацииИСМПВызовСервера.НастройкиОтветственногоЗаАктуализациюТокеновАвторизации(ДляПросмотра);
	
	ИмяПараметраНастроек = ИмяПараметраНастроекОтветственногоЗаАктуализациюТокеновАвторизации();
	
	ТекущиеНастройки = ПараметрыПриложения[ИмяПараметраНастроек];
	
	Если Настройки.Количество() = 0 Тогда
		Если ТекущиеНастройки <> Неопределено Тогда
			ПараметрыПриложения.Удалить(ИмяПараметраНастроек);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТребуетсяПроверкаНапоминаний = Ложь;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
		Для Каждого Настройка Из Настройки Цикл
			Если Настройка.ВремяОповещения > 0 Тогда
				ТребуетсяПроверкаНапоминаний = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПодключитьПроверкуНапоминаний = Ложь;
	Если ТекущиеНастройки = Неопределено Тогда
		ПодключитьПроверкуНапоминаний = ТребуетсяПроверкаНапоминаний;
		НастройкиОтветственного = Новый Структура;
		НастройкиОтветственного.Вставить("Настройки",                    Настройки);
		НастройкиОтветственного.Вставить("ОткрытаФормаПросмотра",        Ложь);
		НастройкиОтветственного.Вставить("ОткрытаФормаАктуализации",     Ложь);
		НастройкиОтветственного.Вставить("ТребуетсяПроверкаНапоминаний", ТребуетсяПроверкаНапоминаний);
		НастройкиОтветственного.Вставить("ВремяСледующейПроверки",       Дата(1,1,1));
		ПараметрыПриложения.Вставить(ИмяПараметраНастроек, НастройкиОтветственного);
	Иначе
		ПодключитьПроверкуНапоминаний = ТребуетсяПроверкаНапоминаний
			И Не ТекущиеНастройки.ТребуетсяПроверкаНапоминаний
			И Не ТекущиеНастройки.ОткрытаФормаПросмотра;
		ПараметрыПриложения[ИмяПараметраНастроек].Настройки                    = Настройки;
		ПараметрыПриложения[ИмяПараметраНастроек].ТребуетсяПроверкаНапоминаний = ТребуетсяПроверкаНапоминаний;
		ПараметрыПриложения[ИмяПараметраНастроек].ВремяСледующейПроверки       = Дата(1,1,1);
	КонецЕсли;
	
	Если ПодключитьПроверкуНапоминаний Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации", 60);
	КонецЕсли;
	
	Если ТекущиеНастройки <> Неопределено
		И ТребуетсяПроверкаНапоминаний Тогда
		ПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие напоминаний для ответственного за актуализацию токенов авторизации ИС МП.
// При необходимости, открывает форму актуализации токенов авторизации ИС МП.
//
Процедура ПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации() Экспорт

	ИмяПараметраНастроек    = ИмяПараметраНастроекОтветственногоЗаАктуализациюТокеновАвторизации();
	ИмяПараметраНапоминаний = ИмяПараметраНапоминанийОтветственногоЗаАктуализациюТокеновАвторизации();
	
	НастройкиОтветственного = ПараметрыПриложения[ИмяПараметраНастроек];
	ТекущиеНапоминания      = ПараметрыПриложения[ИмяПараметраНапоминаний];
	
	Если НастройкиОтветственного = Неопределено
		Или Не НастройкиОтветственного.ТребуетсяПроверкаНапоминаний
		И Не НастройкиОтветственного.ОткрытаФормаПросмотра Тогда
		
		ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации");
		
		Если ТекущиеНапоминания <> Неопределено Тогда
			ПараметрыПриложения.Удалить(ИмяПараметраНапоминаний);
		КонецЕсли;
		
		Если НастройкиОтветственного <> Неопределено
			И НастройкиОтветственного.ОткрытаФормаАктуализации Тогда
			ОткрытьФормуАктуализацииТокеновАвторизации();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если Не НастройкиОтветственного.ОткрытаФормаПросмотра
		И НастройкиОтветственного.ТребуетсяПроверкаНапоминаний
		И НастройкиОтветственного.ВремяСледующейПроверки > ДатаСеанса Тогда
		Возврат;
	КонецЕсли;
	
	Напоминания = ИнтерфейсАвторизацииИСМПВызовСервера.ПолучитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации(НастройкиОтветственного.Настройки);
	
	Если ТекущиеНапоминания = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметраНапоминаний, Напоминания);
	Иначе
		ПараметрыПриложения[ИмяПараметраНапоминаний] = Напоминания;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
		ПараметрыПроверкиНапоминаний = Новый Структура;
		ПараметрыПроверкиНапоминаний.Вставить("НастройкиОтветственного", НастройкиОтветственного);
		ПараметрыПроверкиНапоминаний.Вставить("ИмяПараметраНастроек", ИмяПараметраНастроек);
		ПараметрыПроверкиНапоминаний.Вставить("Напоминания", Напоминания);
		ПараметрыПроверкиНапоминаний.Вставить("ДатаСеанса", ДатаСеанса);
		
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
		Модуль.ПроверитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации(ПараметрыПроверкиНапоминаний);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму актуализации токенов авторизации ИС МП
//
Процедура ОткрытьФормуАктуализацииТокеновАвторизации() Экспорт
	
	ИмяПараметра = "ИнтеграцияИСМП.ФормаАктуализацииТокеновАвторизации";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		
		ИмяФормы = "РегистрСведений.ДанныеКлючаСессииИСМП.Форма.ФормаПросмотраИАктуализацииТокеновАвторизации";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Актуализация", Истина);
		
		ПараметрыПриложения.Вставить(ИмяПараметра,
			ПолучитьФорму(ИмяФормы, ПараметрыФормы, , "Актуализация"));
		
	КонецЕсли;
	
	Форма = ПараметрыПриложения[ИмяПараметра];
	Форма.Открыть();
	
КонецПроцедуры

// Возвращает имя параметра, хранящего настройки ответственного за актуализацию токенов авторизации ИС МП.
// 
// Возвращаемое значение:
//  Строка - имя параметра.
//
Функция ИмяПараметраНастроекОтветственногоЗаАктуализациюТокеновАвторизации() Экспорт
	
	Возврат "ИнтерфейсАвторизацииИСМПКлиент.НастройкиОтветственногоЗаАктуализациюТокеновАвторизации";
	
КонецФункции

// Возвращает имя параметра, хранящего настройки ответственного за актуализацию токенов авторизации ИС МП.
// 
// Возвращаемое значение:
//  Строка - имя параметра.
//
Функция ИмяПараметраНапоминанийОтветственногоЗаАктуализациюТокеновАвторизации() Экспорт
	
	Возврат "ИнтерфейсАвторизацииИСМПКлиент.НапоминанияОтветственногоЗаАктуализациюТокеновАвторизации";
	
КонецФункции

#КонецОбласти

#КонецОбласти