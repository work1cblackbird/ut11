#Область ПрограммныйИнтерфейс

#Область ФорматыВывода

// Возвращает формат для строки шаблона.
// 
// Параметры:
//  БазовыйФормат - см. НовыйФормат.
// 
// Возвращаемое значение:
//   Структура:
//     * Тип - Строка - тип строки шаблона: Строка, Разделитель, Штрихкод, XML.
//     * Выравнивание - ГоризонтальноеПоложение.
//     * ВыравниваниеЗаголовка - Булево - Истина - выравнивать заголовок вместе с текстом, иначе Ложь.
//     * ОбтеканиеСлева - Булево - Истина - выполнять обтекание слева.
//     * ОбтеканиеСправа - Булево - Истина - выполнять обтекание справа.
//     * Ширина - Строка - ширина колонки в символах или процентах: 
//                "10" - 10 символов;
//                "40%" - 40% от строки;
//                "*" - автоматически попытаться полностью поместить в колонку;
//                "0", "" - распределить поровну оставшееся место в строке.
//     * Заполнитель - Строка - символ заполнитель строки между заголовком и полем, по умолчанию " ".
//     * ВыводитьЗаголовок - Булево - принудительно выводить заголовок даже если значение не установлено.
//     * ПодавлятьПробелы - Булево - удалять пробелы в строке.
//     * ШтрихкодТип - Строка - тип штрихкода: "EAN13", "QR".
//     * ШтрихкодВысота - Число - высота штрихкода в строках.
//     * ЭлементXML - Структура.
//     * ИмяАтрибутаXML - Строка.
//
Функция НовыйФормат(БазовыйФормат = Неопределено) Экспорт
	
	Выравнивание = ГоризонтальноеПоложение.Лево; // ГоризонтальноеПоложение   
	Формат = Новый Структура();
	Формат.Вставить("Тип",                   "СТРОКА");
	Формат.Вставить("Выравнивание",          Выравнивание);
	Формат.Вставить("ВыравниваниеЗаголовка", Ложь);
	Формат.Вставить("ОбтеканиеСлева",        Ложь);
	Формат.Вставить("ОбтеканиеСправа",       Ложь);
	Формат.Вставить("Ширина",                "0");
	Формат.Вставить("Заполнитель",           " ");
	Формат.Вставить("ВыводитьЗаголовок",     Ложь);
	Формат.Вставить("ПодавлятьПробелы",      Истина);
	Формат.Вставить("ЭлементXML",            Новый Структура());
	Формат.Вставить("ИмяАтрибутаXML",        "");
	Формат.Вставить("ШтрихкодТип",           "");
	Формат.Вставить("ИспользоватьBase64",    Ложь);
	Формат.Вставить("ШтрихкодВысота",        0);
	
	Если БазовыйФормат <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Формат, БазовыйФормат);
	КонецЕсли;
	
	Возврат Формат;
	
КонецФункции

// Возвращает формат для строки разделителя.
// 
// Возвращаемое значение:
//   Структура - см. НовыйФормат.
//
Функция ФорматРазделитель() Экспорт
	
	Результат                   = НовыйФормат(); // НовыйФормат 
	Результат.Тип               = "Разделитель";
	Результат.ВыводитьЗаголовок = Истина;
	Возврат Результат;
	
КонецФункции

// Возвращает формат для штрихкода.
// 
// Параметры:
//   Выравнивание - ГоризонтальноеПоложение.
//   ШтрихкодТип - Строка.
//   ШтрихкодВысота - Число.
//   ИспользоватьBase64 - Булево.
// 
// Возвращаемое значение:
//   Структура - см. НовыйФормат.
Функция ФорматШтрихкод(Выравнивание = Неопределено, ШтрихкодТип = "EAN13", ШтрихкодВысота = 0, ИспользоватьBase64 = Истина) Экспорт
	
	Результат                = НовыйФормат();
	Результат.Тип            = "ШТРИХКОД";
	Результат.Выравнивание   = ?(Выравнивание = Неопределено, ГоризонтальноеПоложение.Лево, Выравнивание);
	Результат.ШтрихкодВысота = ШтрихкодВысота;
	Результат.ШтрихкодТип    = ШтрихкодТип;
	Результат.ИспользоватьBase64 = ИспользоватьBase64;
	Возврат Результат;
	
КонецФункции

// Возвращает формат для штрихкода.
// 
// Параметры:
//   Ширина - Строка - ширина штрихкода
//   Выравнивание - ГоризонтальноеПоложение
//   ШтрихкодТип - Строка
//   ШтрихкодВысота - Число - высота штрихкода
//   ИспользоватьBase64 - Булево.
// 
// Возвращаемое значение:
//   Структура - см. НовыйФормат
Функция ФорматШтрихкодШирина(Ширина, Выравнивание = Неопределено, ШтрихкодТип = "EAN13", ШтрихкодВысота = 0, ИспользоватьBase64 = Истина) Экспорт
	
	Результат                = НовыйФормат();
	Результат.Тип            = "ШТРИХКОД";
	Результат.Ширина         = Ширина;
	Результат.Выравнивание   = ?(Выравнивание = Неопределено, ГоризонтальноеПоложение.Лево, Выравнивание);
	Результат.ШтрихкодВысота = ШтрихкодВысота;
	Результат.ШтрихкодТип    = ШтрихкодТип;
	Результат.ИспользоватьBase64 = ИспользоватьBase64;
	Возврат Результат;
	
КонецФункции

// Возвращает формат для строки.
// 
// Параметры:
//   Выравнивание - ГоризонтальноеПоложение.
//   ВыравниваниеЗаголовка - Булево - Истина - выравнивать заголовок вместе с текстом, иначе Ложь.
//   Обтекание - Булево - использовать обтекание
// 
// Возвращаемое значение:
//   Структура - см. НовыйФормат
Функция ФорматСтрока(Выравнивание = Неопределено, ВыравниваниеЗаголовка = Ложь, Обтекание = Ложь) Экспорт
	
	Результат = НовыйФормат();
	Результат.Выравнивание          = ?(Выравнивание = Неопределено, ГоризонтальноеПоложение.Лево, Выравнивание);
	Результат.ВыравниваниеЗаголовка = ВыравниваниеЗаголовка;
	Результат.ОбтеканиеСлева        = Обтекание;
	Результат.ОбтеканиеСправа       = Обтекание;
	Возврат Результат;
	
КонецФункции

// Возвращает формат для строки.
// 
// Параметры:
//   Ширина - Строка - ширина штрихкода
//   Выравнивание - ГоризонтальноеПоложение
//   ВыравниваниеЗаголовка - Булево - Истина - выравнивать заголовок вместе с текстом, иначе Ложь.
//   Обтекание - Булево - использовать обтекание
// 
// Возвращаемое значение:
//   Структура - см. НовыйФормат
//
Функция ФорматСтрокаШирина(Ширина, Выравнивание = Неопределено, ВыравниваниеЗаголовка = Ложь, Обтекание = Ложь) Экспорт
	
	Результат = НовыйФормат();
	Результат.Тип                   = "Строка";
	Результат.Ширина                = Ширина;
	Результат.Выравнивание          = ?(Выравнивание = Неопределено, ГоризонтальноеПоложение.Лево, Выравнивание);
	Результат.ВыравниваниеЗаголовка = ВыравниваниеЗаголовка;
	Результат.ОбтеканиеСлева        = Обтекание;
	Результат.ОбтеканиеСправа       = Обтекание;
	Возврат Результат;
	
КонецФункции

// Возвращает формат для элемента XML.
// 
// Параметры:
//   ЭлементXML - Структура
//   ИмяАтрибутаXML - Строка
//   БазовыйФормат - см. НовыйФормат
// 
// Возвращаемое значение:
//   Структура - см. НовыйФормат
//
Функция ФорматXML(ЭлементXML, ИмяАтрибутаXML, БазовыйФормат = Неопределено) Экспорт
	
	Результат = НовыйФормат();
	Если ТипЗнч(БазовыйФормат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, БазовыйФормат);
	Иначе
		Результат.Тип = "XML";
	КонецЕсли;
	Результат.ЭлементXML     = ЭлементXML;
	Результат.ИмяАтрибутаXML = ИмяАтрибутаXML;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

// Создает объект шаблона.
//
// Параметры:
//  ШиринаСтроки - Число - ширина строки для расчета шаблона
//
// Возвращаемое значение:
//  Структура:
//   * ШиринаСтроки - Число
//   * Отладка - Булево
//   * СтрокиОшибок - Массив из Строка
//   * XML - Булево
//   * КореньXML - Структура
//   * ЭлементыXML - см. НовыйСоответствиеЭлементыXML
//   * Элементы - Массив из Структура
//   * Результат - Массив из структура
 //
Функция НовыйШаблон(ШиринаСтроки = 48) Экспорт
	
	Шаблон = Новый Структура();
	Шаблон.Вставить("ШиринаСтроки", ?(ЗначениеЗаполнено(ШиринаСтроки), ШиринаСтроки, 0));
	Шаблон.Вставить("Отладка",      Ложь);
	Шаблон.Вставить("СтрокиОшибок", Новый Массив());
	Шаблон.Вставить("XML",          Ложь);
	Шаблон.Вставить("КореньXML",    Новый Структура());
	Шаблон.Вставить("ЭлементыXML",  НовыйСоответствиеЭлементыXML());
	Шаблон.Вставить("Элементы",     Новый Массив());
	Шаблон.Вставить("Результат",    Новый Массив());
	Шаблон.Вставить("Сформирован",  Ложь);
	Возврат Шаблон;
	
КонецФункции

// Добавляет элемент XML в шаблон.
//
// Параметры:
//   Шаблон - см. НовыйШаблон
//   ИмяЭлемента - Строка
//   Родитель - см. НовыйЭлементXML
//   
// Возвращаемое значение:
//  Структура:
//   * Имя - Строка
//   * Дочерние - Массив из см. НовыйЭлементXML
//   * ВыводитьПоСтрокам - Булево
//   * ЭлементXML - см. НовыйЭлементXML
//   * АтрибутыXML - Соответствие из Структура
//
Функция НовыйЭлементXML(Шаблон, ИмяЭлемента, Родитель = Неопределено) Экспорт
	
	ЭлементXML = Новый Структура();
	ЭлементXML.Вставить("Имя", ИмяЭлемента);
	ЭлементXML.Вставить("Дочерние", Новый Массив());
	ЭлементXML.Вставить("ВыводитьПоСтрокам", Ложь);
	ЭлементXML.Вставить("ЭлементXML", Новый Структура());
	ЭлементXML.Вставить("АтрибутыXML", НовыйСоответствиеАтрибутыXML());
	
	Если Родитель = Неопределено Тогда
		
		Шаблон.КореньXML = ЭлементXML;
		Шаблон.ЭлементыXML.Вставить(ИмяЭлемента, ЭлементXML);
		
	ИначеЕсли ТипЗнч(Родитель) = Тип("Строка") Тогда
		
		ЭлементXMLРодитель = Шаблон.ЭлементыXML.Получить(Родитель);
		Если ЭлементXMLРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЭлементXMLРодитель.Дочерние.Добавить(ЭлементXML);
		Шаблон.ЭлементыXML.Вставить(ИмяЭлемента, ЭлементXML);
		
	ИначеЕсли ТипЗнч(Родитель) = Тип("Структура") Тогда
		
		ЭлементXMLРодитель = Шаблон.ЭлементыXML.Получить(Родитель);
		Если ЭлементXMLРодитель = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЭлементXMLРодитель.Дочерние.Добавить(ЭлементXML);
		
	КонецЕсли;
	
	Возврат ЭлементXML;
	
КонецФункции

#КонецОбласти

#Область ФормированиеИВывод

// Добавить строку в шаблон, перегруженная процедура:
// * ШаблонНоваяСтрока(Шаблон, Заголовок, Значение, Формат)
// * ШаблонНоваяСтрока(Шаблон, Заголовок, Значение)
// * ШаблонНоваяСтрока(Шаблон, Значение, Формат)
// * ШаблонНоваяСтрока(Шаблон, Значение)
//
// Параметры:
//   Шаблон - см. НовыйШаблон
//   Параметр1 - Строка, Произвольный - Заголовок, Значение которое будет добавлено в шаблон
//   Параметр2 - Структура, Произвольный - Значение или формат которое будет добавлено в шаблон
//   Параметр3 - Структура - Формат см. НовыйФормат
Процедура ДобавитьСтроку(Шаблон, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	Если ТипЗнч(Параметр3)=Тип("Структура") Тогда
		// параметр1 - заголовок, параметр2 - значение, параметр3 - формат
		ШаблоныФискальныхДокументовСлужебный.ДобавитьЭлементШаблона(Шаблон, Параметр1, Параметр2, Параметр3);
	ИначеЕсли Параметр3 = Неопределено Тогда
		Если ТипЗнч(Параметр2)=Тип("Структура") Тогда
			// параметр1 - значение, параметр2 - Формат, параметр3 - отсутствует
			ШаблоныФискальныхДокументовСлужебный.ДобавитьЭлементШаблона(Шаблон, "", Параметр1, Параметр2);
		ИначеЕсли Параметр2 = Неопределено Тогда
			// параметр1 - значение, параметр2 - отсутствует, параметр3 - отсутствует
			ШаблоныФискальныхДокументовСлужебный.ДобавитьЭлементШаблона(Шаблон, "", Параметр1, НовыйФормат());
		Иначе
			// параметр1 - заголовок, параметр2 - значение, параметр3 - отсутствует (формат)
			ШаблоныФискальныхДокументовСлужебный.ДобавитьЭлементШаблона(Шаблон, Параметр1, Параметр2, НовыйФормат());
		КонецЕсли;
	Иначе
		// параметр1 - заголовок, параметр2 - значение, параметр3 - непонятно что
		ШаблоныФискальныхДокументовСлужебный.ДобавитьЭлементШаблона(Шаблон, Параметр1, Параметр2, НовыйФормат());
	КонецЕсли;
	
КонецПроцедуры

// Добавить колонку в шаблон, перегруженная процедура:
// * ШаблонНоваяСтрока(Шаблон, Заголовок, Значение, Формат)
// * ШаблонНоваяСтрока(Шаблон, Заголовок, Значение)
// * ШаблонНоваяСтрока(Шаблон, Значение, Формат)
// * ШаблонНоваяСтрока(Шаблон, Значение)
//
// Параметры:
//   Шаблон - см. НовыйШаблон
//   Параметр1 - Строка, Произвольный - Заголовок, Значение которое будет добавлено в шаблон
//   Параметр2 - Структура, Произвольный - Значение или формат которое будет добавлено в шаблон
//   Параметр3 - см. НовыйФормат
Процедура ДобавитьКолонку(Шаблон, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт
	
	Если ТипЗнч(Параметр3)=Тип("Структура") Тогда
		// параметр1 - заголовок, параметр2 - значение, параметр3 - формат
		ШаблоныФискальныхДокументовСлужебный.ДобавитьКолонкуЭлементаШаблона(Шаблон, Параметр1, Параметр2, Параметр3);
	ИначеЕсли Параметр3 = Неопределено Тогда
		Если ТипЗнч(Параметр2)=Тип("Структура") Тогда
			// параметр1 - значение, параметр2 - Формат, параметр3 - отсутствует
			ШаблоныФискальныхДокументовСлужебный.ДобавитьКолонкуЭлементаШаблона(Шаблон, "", Параметр1, Параметр2);
		ИначеЕсли Параметр2 = Неопределено Тогда
			// параметр1 - значение, параметр2 - отсутствует, параметр3 - отсутствует
			ШаблоныФискальныхДокументовСлужебный.ДобавитьКолонкуЭлементаШаблона(Шаблон, "", Параметр1, НовыйФормат());
		Иначе
			// параметр1 - заголовок, параметр2 - значение, параметр3 - отсутствует (формат)
			ШаблоныФискальныхДокументовСлужебный.ДобавитьКолонкуЭлементаШаблона(Шаблон, Параметр1, Параметр2, НовыйФормат());
		КонецЕсли;
	Иначе
		// параметр1 - заголовок, параметр2 - значение, параметр3 - непонятно что
		ШаблоныФискальныхДокументовСлужебный.ДобавитьКолонкуЭлементаШаблона(Шаблон, Параметр1, Параметр2, НовыйФормат());
	КонецЕсли;
	
КонецПроцедуры

// Формирует документ по заданному шаблону.
//
// Параметры:
//   Шаблон - см. НовыйШаблон
//
Процедура СформироватьДокументПоШаблону(Шаблон) Экспорт
	
	Для Каждого Элемент Из Шаблон.Элементы Цикл
		
		Если Элемент.Колонки.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблоныФискальныхДокументовСлужебный.УстановитьШиринуКолонокЭлемента(Шаблон, Элемент.Колонки);
		ШаблоныФискальныхДокументовСлужебный.СформироватьСтрокуЭлементаШаблона(Шаблон, Элемент);
		
		Если ЗначениеЗаполнено(Элемент.ЭлементXML) Тогда
			Элемент.ЭлементXML.ВыводитьПоСтрокам = Элемент.ВыводитьПоСтрокам;
			Элемент.ЭлементXML.АтрибутыXML.Вставить(Элемент.ИмяАтрибутаXML, Элемент.Строки);
		КонецЕсли;
		
		Для Каждого Колонка Из Элемент.Колонки Цикл
			Если ВРег(Колонка.Тип) = "ШТРИХКОД" Тогда
				Элемент.Картинки.Добавить(Колонка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Шаблон.Сформирован = Истина;
	
КонецПроцедуры

// Выводит сформированный документ как текстовая строка.
//
// Параметры:
//  Шаблон - см. НовыйШаблон
//
// Возвращаемое значение:
//  Строка
//
Функция ВывестиКакТекст(Шаблон, ЗамещатьШтрихкоды = Ложь) Экспорт
	
	Если Не Шаблон.Сформирован Тогда
		СформироватьДокументПоШаблону(Шаблон);
	КонецЕсли;
	
	Строки       = Новый Массив(); // Массив из Строка
	ИндексСтроки = 0;
	
	Картинки = Новый Массив(); // Массив из Структура
	
	Для Каждого Элемент Из Шаблон.Элементы Цикл
		
		НачалоЭлемента = ИндексСтроки;
		Для Каждого Строка Из Элемент.Строки Цикл
			Строки.Добавить(Строка);
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
		Для Каждого Картинка Из Элемент.Картинки Цикл
			Картинка.НачальнаяСтрока = НачалоЭлемента;
			Картинки.Добавить(Картинка);
		КонецЦикла;
			
	КонецЦикла;
	
	Для Каждого Картинка Из Картинки Цикл // Структура
		СтрокаШтрихкода = "|"+НСтр("ru = 'Штрихкод'")+"|" + Картинка.ШтрихкодТип + "|";
		Для Индекс = Картинка.НачальнаяСтрока По Картинка.НачальнаяСтрока + Картинка.ШтрихкодВысота-1 Цикл
			Если Индекс = Строки.ВГраница() Тогда
				Строки.Добавить(СтрокаСимволов(Шаблон.ШиринаСтроки));
			КонецЕсли;
			Строка = Строки[Индекс];
			
			Позиция = Картинка.НачальнаяПозиция;
			Ширина  = Картинка.НачальнаяШирина;
			
			Если ЗамещатьШтрихкоды Тогда
				СтрокаВывода = СтрокаСимволов(Ширина, "#");
			Иначе
				СтрокаВывода    = Лев(СтрокаШтрихкода + СтрокаСимволов(Ширина), Ширина);
				СтрокаШтрихкода = Сред(СтрокаШтрихкода, Ширина+1);
			КонецЕсли;
			Строка = Лев(Строка, Позиция-1)+СтрокаВывода+Сред(Строка, Позиция+Ширина);
			Строки[Индекс] = Строка;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции

// Выводит сформированный документ как табличный документ.
//
// Параметры:
//  Шаблон - см. НовыйШаблон
//
// Возвращаемое значение:
//  ТабличныйДокумент
//
Функция ВывестиКакТабличныйДокумент(Шаблон) Экспорт
	
	Если Не Шаблон.Сформирован Тогда
		СформироватьДокументПоШаблону(Шаблон);
	КонецЕсли;
	
	ТабличныйДокумент               = Новый ТабличныйДокумент();

	Область                         = ТабличныйДокумент.Область();//"C1:C"+Шаблон.ШиринаСтроки);
	Область.ШиринаКолонки           = 1;
	Область.ВысотаСтроки            = 9;
	Область.АвтоВысотаСтроки        = Ложь;
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Область.Шрифт                   = Новый Шрифт("Courier new", 8);
	НомерСтроки                     = 1;
	
	Для Каждого Элемент Из Шаблон.Элементы Цикл
		
		НачалоЭлемента = НомерСтроки;
		Для Каждого Строка Из Элемент.Строки Цикл
			
			ДлинаСтроки = СтрДлина(Строка);
			
			Для НомерСимвола = 1 По ДлинаСтроки Цикл
				Область        = ТабличныйДокумент.Область(НомерСтроки, НомерСимвола);
				Область.Текст  = Сред(Строка, НомерСимвола, 1);
			КонецЦикла;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Для Каждого Картинка Из Элемент.Картинки Цикл // Структура
				
			Позиция         = Картинка.НачальнаяПозиция;
			ШиринаШтрихкода = Картинка.НачальнаяШирина;
			ШтрихкодВысота = Картинка.ШтрихкодВысота;
			
			ОбластьСтроки   = ТабличныйДокумент.Область(НачалоЭлемента, , НачалоЭлемента + ШтрихкодВысота, );
			ОбластьСтроки.ВместеСоСледующим = Истина;
			
			Область         = ТабличныйДокумент.Область(НачалоЭлемента, Позиция, 
				НачалоЭлемента + ШтрихкодВысота, Позиция + ШиринаШтрихкода);
			ШаблоныФискальныхДокументовСлужебный.ВывестиШтрихкод(ТабличныйДокумент, Область, Картинка.ШтрихкодТип, Картинка.Строка, Картинка.ИспользоватьBase64);
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Выводит сформированный документ как документ PDF.
//
// Параметры:
//  Шаблон - см. НовыйШаблон
//
// Возвращаемое значение:
//  ДокументPDF
//
Функция ВывестиКакPDF(Шаблон) Экспорт
	
	Поток             = Новый ПотокВПамяти();
	ТабличныйДокумент = ВывестиКакТабличныйДокумент(Шаблон);
	ТабличныйДокумент.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	
	ДокументPDF = Новый ДокументPDF();
	ДокументPDF.Прочитать(Поток);
	
	Возврат ДокументPDF;
	
КонецФункции

#КонецОбласти

#Область Шаблоны

// Возвращает структуру параметров для формирования шаблона фискального документа.
// 
// Возвращаемое значение:
//  Структура:
//   * ВерсияФФД - Строка - версия формата фискальных документов 
//   * Заголовок - Строка
//   * Подпись - Булево - формировать ли поле подписи в документе
//   * ДополнительныйТекст - Строка - дополнительный текст для вывода внизу документа
//
Функция ПараметрыШаблонаФискальногоДокумента() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияФФД", "1.2");
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подпись", Истина);
	Результат.Вставить("ДополнительныйТекст", "");
	Результат.Вставить("ВыводитьФискальнуюИнформацию", Истина);
	Возврат Результат;
	
КонецФункции

// Генерирует шаблон кассового чека, по данным операции фискализации чека.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
//   ФискальнаяОперация - Структура
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонКассовыйЧек(ШиринаСтроки, Данные, ФискальнаяОперация = Неопределено, Параметры = Неопределено) Экспорт
	
	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонКассовыйЧек(Шаблон, Данные, ФискальнаяОперация, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонКассовыйЧек(Шаблон, Данные, ФискальнаяОперация, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

// Генерирует шаблон отчета об открытии смены.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонОтчетОбОткрытииСмены(ШиринаСтроки, Данные, Параметры = Неопределено) Экспорт

	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонОтчетОбОткрытииСмены(Шаблон, Данные, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонОтчетОбОткрытииСмены(Шаблон, Данные, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

// Генерирует шаблон отчета о закрытии смены.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонОтчетОЗакрытииСмены(ШиринаСтроки, Данные, Параметры = Неопределено) Экспорт

	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонОтчетОЗакрытииСмены(Шаблон, Данные, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонОтчетОЗакрытииСмены(Шаблон, Данные, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

// Генерирует шаблон отчета о текущем состоянии.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыВыполненияОперации
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонОтчетОТекущемСостоянии(ШиринаСтроки, Данные, Параметры = Неопределено) Экспорт

	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонОтчетОТекущемСостоянии(Шаблон, Данные, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонОтчетОТекущемСостоянии(Шаблон, Данные, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

// Генерирует шаблон отчета о снятии наличных.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонСнятиеНаличных(ШиринаСтроки, Данные, Параметры = Неопределено) Экспорт

	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонСнятиеНаличных(Шаблон, Данные, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонСнятиеНаличных(Шаблон, Данные, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

// Генерирует шаблон отчета о внесении наличных.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыИнкассации
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонВнесениеНаличных(ШиринаСтроки, Данные, Параметры = Неопределено) Экспорт
	
	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонВнесениеНаличных(Шаблон, Данные, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонВнесениеНаличных(Шаблон, Данные, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

// Генерирует шаблон отчета о инфо квитанции.
// 
// Параметры:
//   ШиринаСтроки - Число
//   Данные - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыВыполненияОперации
//   Параметры - см. ПараметрыШаблонаФискальногоДокумента
//
// Возвращаемое значение:
//  см. НовыйШаблон
//
Функция ШаблонИнфоКвитанция(ШиринаСтроки, Данные, Параметры = Неопределено) Экспорт
	
	Шаблон = НовыйШаблон(ШиринаСтроки);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыШаблонаФискальногоДокумента();
	КонецЕсли;
	
	ШаблоныФискальныхДокументовЛокализация.ШаблонИнфоКвитанция(Шаблон, Данные, Параметры);
	
	Если Шаблон.Элементы.Количество() = 0 Тогда
		ШаблоныФискальныхДокументовСлужебный.ШаблонИнфоКвитанция(Шаблон, Данные, Параметры);
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает соответствие элементов XML
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка
//   * Значение - см. НовыйЭлементXML
//
Функция НовыйСоответствиеЭлементыXML()
	Возврат Новый Соответствие();
КонецФункции

// Возвращает соответствие атрибутов XML
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка
//   * Значение - Строка
//
Функция НовыйСоответствиеАтрибутыXML()
	Возврат Новый Соответствие();
КонецФункции

// Создает строку символов заданного размера.
//
// Параметры:
//  Размер - Число - размер строки которую нужно создать
//  Символ - Строка - символы которыми будет заполнен результат
//
// Возвращаемое значение:
//  Строка - строка символов заданного размера
//
Функция СтрокаСимволов(Размер, Символ = " ")
	Возврат ШаблоныФискальныхДокументовСлужебный.СтрокаСимволов(Размер, Символ);
КонецФункции

#КонецОбласти