///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП".
// ОбщийМодуль.СистемаБыстрыхПлатежейСлужебный.
//
// Серверные процедуры обмена данными с Системой быстрых платежей:
//  - инициализация параметров подключения;
//  - обработчики обновления;
//  - обработчики интеграции с Библиотекой стандартных подсистем;
//  - обработчики интеграции с Библиотекой технологии сервиса;
//  - настройка форм подключения к СБП;
//  - работа с настройками оплаты;
//  - обработка ошибок сервиса;
//  - алгоритмы настройки формы "Интернет-поддержка и сервисы".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаОбменаДанными(),
		443,
		НСтр("ru = 'Сервис интеграции с Системой быстрых платежей'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.1.3";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("50df7c1c-d88d-4293-bea2-ca4b97cd3d32");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбработатьНастройкиПлатежныхСистем";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек подключения к Системе быстрых платежей.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "СистемаБыстрыхПлатежейСлужебный.УстановитьДлительностьОпераций";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Заполнение настроек подключения к Системе быстрых платежей'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.2.53";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("1ff5b903-f14e-4d16-89c9-c46e6094b2dd");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбновитьНастройкиПодключения";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка пометки на удаление для настроек SWiP и обновление настроек СБП.'");
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия             = "2.6.2.63";
		Обработчик.Идентификатор      = Новый УникальныйИдентификатор("4af739e4-f403-4fb2-91ce-abe04ec46acd");
		Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ДобавитьЗаданиеОбновленияНастроек";
		Обработчик.РежимВыполнения    = "Отложенно";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.Комментарий        = НСтр("ru = 'Добавление задания загрузки настроек участников Системы быстрых платежей.'");
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.6.3.27";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("cedeea13-ddf7-472f-aa18-46e231259102");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ЗаменитьЗначениеПеречисленияУдалитьСБП_Промсвязьбанк";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек подключения с СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.1.13";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("347776dc-1c3d-460a-9c0d-7b17553e15dd");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.УстановитьИдентификаторУчастникаСБП";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка идентификатора участника СБП в настройках.'"); 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.1.66";
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбновитьНастройкиУчастниковСБП";
	Обработчик.РежимВыполнения    = "Монопольно";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.Комментарий        = НСтр("ru = 'Обновление настроек участников СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.1.71";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("2017dd4e-c40f-44be-9b47-a295db700b03");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.УстановитьНовоеИмя1ССБП";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Установка нового имени родительской настройки 1С:СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия             = "2.7.5.10";
	Обработчик.Идентификатор      = Новый УникальныйИдентификатор("3030d021-90b4-4b8d-8a4b-09a1504d5c45");
	Обработчик.Процедура          = "СистемаБыстрыхПлатежейСлужебный.ОбновитьДанныеАутентификации";
	Обработчик.РежимВыполнения    = "Отложенно";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий        = НСтр("ru = 'Обновление структуры хранимых данных аутентификации.'");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПрограммы

// Возвращает параметры окружения панели администрирования БИП.
//
// Возвращаемое значение:
//  Структура:
//    * НастройкаИнтеграцияДоступна - Булево
//    * ДлительностьОперацииСистемыБыстрыхПлатежей - Неопределено - настройка подключения не доступна.
//                                         - Число
//
Функция ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НастройкаИнтеграцияДоступна" , СистемаБыстрыхПлатежей.НастройкаПодключенияДоступна());
	Результат.Вставить("ДлительностьОперацииСистемыБыстрыхПлатежей", Неопределено);
	
	Если Не Результат.НастройкаИнтеграцияДоступна Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДлительностьОперацииСистемыБыстрыхПлатежей = Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Получить();

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область БТСРаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	СтрОбработчик = Обработчики.Добавить();
	СтрОбработчик.ВидДанных      = ВидПоставляемыхДанныхСБП();
	СтрОбработчик.КодОбработчика = ВидПоставляемыхДанныхСБП();
	СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("СистемаБыстрыхПлатежейСлужебный");
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ВидПоставляемыхДанныхСБП() Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> ВидПоставляемыхДанныхСБП() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	ЗаписатьНастройкиУчастниковСБП(
		Результат);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнена обработка поставляемых данных.
				|Поставляемые данные:
				|%1'"),
			ВидПоставляемыхДанныхСБП()),
		Ложь);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			ВидПоставляемыхДанныхСБП()),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

#Область БазоваяФункциональностьБИП

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП();
	Иначе
		УдалитьЗаданияОбновленияНастроек();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаОбменаДанными(),
		НСтр("ru = 'Система быстрых платежей'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Формирует новое описание параметров операции, используется в длительных операциях и переопределяемых методах.
//
// Возвращаемое значение:
//  Структура - содержит описание параметров операции:
//    * ДатаОперации - Дата - фактическая дата операции в UTC;
//    * СуммаОперации - Число - фактическая суммы возврата по документу;
//    * ИдентификаторОперации -  - Строка - ключ контроля загрузки.
//
Функция НовыйОписаниеПараметровОперации() Экспорт
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ДатаОперации",          Дата(1, 1, 1));
	ПараметрыОперации.Вставить("СуммаОперации",         Неопределено);
	ПараметрыОперации.Вставить("ИдентификаторОперации", "");
	ПараметрыОперации.Вставить("ИдентификаторОплаты",   ""); 
	ПараметрыОперации.Вставить("ДокументОснование",     Неопределено);
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Создает описание настроек длительного вызова. Настройки необходимо
// использовать для вызова функции СистемаБыстрыхПлатежейСлужебный.ВозможенВызовОперации.
//
// Параметры:
//  ДлительностьОперации - Число - количество секунд отведенных на выполнение операции.
//
// Возвращаемое значение:
//  Структура - результат итеративного вызова:
//    *Длительность - Число - длительность вызова операции;
//    *НачалоОперации  - Дата - период отчета длительности вызова;
//    *Ожидание - Число - частота выполнения операций;
//    *МаксимальноеКоличествоЗапросов - Число - ограничение на максимально возможное количество запросов;
//    *НакопленноеЗначениеВремени - Число - общее накопленное время за длительную операцию;
//    *КоличествоИтераций - Число - текущее количество выполненных запросов.
//
Функция НовыйИтеративныйВызовОперации(ДлительностьОперации = 0) Экспорт
	
	ДлительностьОперации = ?(
		ДлительностьОперации = 0,
		Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Получить(),
		ДлительностьОперации);
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("Длительность",                   ДлительностьОперации);
	НастройкиВызова.Вставить("НачалоОперации",                 ТекущаяДатаСеанса());
	НастройкиВызова.Вставить("Ожидание",                       3);
	НастройкиВызова.Вставить("МаксимальноеКоличествоЗапросов", 300);
	НастройкиВызова.Вставить("НакопленноеЗначениеВремени",     НастройкиВызова.НачалоОперации - НастройкиВызова.Ожидание);
	НастройкиВызова.Вставить("КоличествоИтераций",             0);
	
	// Для небольшого значения длительности будет выполнен единственный
	// вызов операции.
	Если НастройкиВызова.Длительность < 3 Тогда
		НастройкиВызова.МаксимальноеКоличествоЗапросов = 1;
	КонецЕсли;
	
	Возврат НастройкиВызова;
	
КонецФункции

// Проверяет доступность вызова операции в рамках длительного вызова.
//
// Параметры:
//  НастройкиВызова - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйИтеративныйВызовОперации
//
Функция ВозможенВызовОперации(НастройкиВызова) Экспорт
	
	// Прервать вызовы в случае превышения максимального
	// количества запросов.
	Если НастройкиВызова.МаксимальноеКоличествоЗапросов <= НастройкиВызова.КоличествоИтераций Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Прервать вызовы в случае превышения длительности.
	Если (НастройкиВызова.НачалоОперации + НастройкиВызова.Длительность) < ТекущаяДатаСеанса() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для первой итерации время ожидания необходимо увеличить
	// т.к. маловероятно, что при первом вызове будет получен
	// терминальный статус операции.
	Ожидание = НастройкиВызова.Ожидание;
	Если НастройкиВызова.КоличествоИтераций = 0 Тогда
		Ожидание = Ожидание + 1;
	КонецЕсли;
	
	// Ожидание истечения времени задержки между вызовами.
	// Если запросы выполнять без ограничения, возрастет нагрузка на сервис,
	// при этом пользователи не почувствуют существенного изменения времени
	// выполнения операции.
	ИнтернетПоддержкаПользователей.Пауза(Ожидание);
	
	НастройкиВызова.НакопленноеЗначениеВремени = ТекущаяДатаСеанса();
	НастройкиВызова.КоличествоИтераций         = НастройкиВызова.КоличествоИтераций + 1;
	
	Возврат Истина;
	
КонецФункции

// Создает описание результат длительной операции в сервисе.
//
// Возвращаемое значение:
//  Структура - результат длительной операции:
//    * СтатусОперации - Строка - текущее состояние операции оплаты:
//       - "Выполняется" - подтверждение оплаты не получено;
//       - "Отменена" - оплата по оплата по ранее сформированному QR-коду не возможна;
//       - "Выполнена" - участник СБП подтвердил оплату;
//       - "ТребуетсяПодтверждение" - необходимо подтвердить действие;
//       - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки.
//    * ПараметрыОперации - Структура - содержит дополнительные данные по операции:
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число - фактическая суммы оплаты по документу;
//        ** ИдентификаторОперации - Строка - ключ контроля загрузки.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатДлительнойОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("СтатусОперации", "");
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("ПараметрыОперации", НовыйОписаниеПараметровОперации());
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание результат операции в сервисе.
//
// Возвращаемое значение:
//  Структура - результат операции:
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты.
//
// Возвращаемое значение:
//  Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения.
//
Функция ПараметрыНастройкиПодключения(НастройкаПодключения) Экспорт
	
	// Заполнение настроек проведения оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторМерчанта КАК ИдентификаторМерчанта,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК НастройкаПодключения,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Используется КАК Используется,
		|	ЕСТЬNULL(НастройкиУчастниковСБП.ТипАутентификации, ""UNKNOW"") КАК ТипАутентификации,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкиУчастниковСБП.ПеренаправлениеПоСсылке, ЛОЖЬ)
		|			ТОГДА НастройкиПодключенияКСистемеБыстрыхПлатежей.СсылкаПеренаправления
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СсылкаПеренаправления
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ПО НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = НастройкиУчастниковСБП.Идентификатор
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка = &НастройкаПодключения";
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	Возврат НовыйПараметрыНастройкиПодключения(
		Запрос,
		"Справочник");
	
КонецФункции

// Определяет прикладные настройки подключения к сервису.
//
// Возвращаемое значение:
//  Настройки - Структура - настройки подключения:
//    * c2b Структура - настройки переводов c2b
//      ** ОбъектМетаданных - Метаданные.РегистрыСведений - объект метаданных регистр сведений,
//        в котором хранятся настройки выполнения оплат. Регистр определяет
//        связь мерчанта и аналитики ведения учета
//        в программах 1С. На основании данных регистра должен выполняется
//        поиск настройки подключения при выполнении оплат и возвратов;
//      ** ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//        необходимо скрыть на форме настройки подключения.
//      ** ИспользоватьЧастичныеОплаты - Булево - признак использования функциональности частичных оплат.
//      ** ИспользоватьНастройкуКассовыхСсылок - Булево - признак использования функциональности
//           добавления кассовых ссылок в мастере настройки подключения к СБП.
//      ** ШаблоныНазначений - ТаблицаЗначений - см. НовыйШаблоныНазначений.
//
Функция НастройкиПодключенияПрограммы() Экспорт
	
	НастройкиСБПc2b = Новый Структура;
	НастройкиСБПc2b.Вставить("ОбъектМетаданных",                    Неопределено);
	НастройкиСБПc2b.Вставить("ИсключаемыеПоля",                     Новый Массив);
	НастройкиСБПc2b.Вставить("ШаблоныНазначений",                   НовыйШаблоныНазначений());
	НастройкиСБПc2b.Вставить("ИспользоватьЧастичныеОплаты",         Ложь);
	НастройкиСБПc2b.Вставить("ИспользоватьНастройкуКассовыхСсылок", Ложь);
	
	Настройки = Новый Структура;
	Настройки.Вставить("c2b", НастройкиСБПc2b);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииНастроекПодключения(
		Настройки);
	СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииНастроекПодключения(
		Настройки);
	
	Если Настройки.c2b.ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан объект метаданных отвечающий за настройку параметров оплаты.'");
	КонецЕсли;
	
	Для Каждого ДанныеНазначения Из НастройкиСБПc2b.ШаблоныНазначений Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения.ОбъектМетаданных) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указан объект метаданных в шаблоне назначения %1.'"),
				ДанныеНазначения.Наименование);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения.Идентификатор) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указан идентификатор в шаблоне назначения %1.'"),
				ДанныеНазначения.Наименование);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения.Наименование) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указано наименование в шаблоне назначения %1.'"),
				ДанныеНазначения.ОбъектМетаданных);
		КонецЕсли;
		
		Для Каждого ДанныеПараметра Из ДанныеНазначения.Параметры Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеНазначения.Наименование) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не указано наименование параметра в шаблоне назначения %1.'"),
					ДанныеНазначения.ОбъектМетаданных);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеНазначения.Наименование) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не указан идентификатор параметра в шаблоне назначения %1.'"),
					ДанныеНазначения.ОбъектМетаданных);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

// Преобразует текущую локальную дату в UTC.
//
// Параметры:
//  Значение - Дата - исходная дата.
//
// Возвращаемое значение:
//  Дата - результат преобразования.
//
Функция ДатаВUTC(Значение) Экспорт
	
	Возврат Значение - СмещениеСтандартногоВремени(ЧасовойПоясСеанса(), Значение);
	
КонецФункции 

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Определяет идентификатор группы платежных систем СБП.
//
// Возвращаемое значение:
//  Строка - внутренний идентификатор СБП.
//
Функция ИдентификаторСБП() Экспорт
	
	Возврат "sbp";
	
КонецФункции

// Определяет идентификатор сценария Системы быстрых платежей c2b
//
// Возвращаемое значение:
//  Строка - идентификатор сценария.
//
Функция ИдентификаторСценарияСБПc2b() Экспорт
	
	Возврат "c2b"
	
КонецФункции

// Обрабатывает значение для отправки в службу тех поддержки.
//
// Параметры:
//  Значение - Строка, Дата - данные для обработки.
//
// Возвращаемое значение:
//  Строка - подготовленные данные.
//
Функция ОбработатьЗначениеДляТехническойПоддержки(Значение) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Значение), " " + Значение, " " + НСтр("ru = '<не заполнено>'"));
	
КонецФункции

// Переводит число в систему счисления hex.
//
// Параметры:
//  Значение - Число - исходное значения для преобразования;
//
// Возвращаемое значение:
//  Строка - результат преобразования
//
Функция ПреобразоватьЧислоВHEX(Знач Значение) Экспорт
	
	Если Значение <= 0 Тогда
		ЧислоHEX = "0";
	Иначе
		Значение = Цел(Значение);
		ЧислоHEX = "";
		Пока Значение > 0 Цикл
			ЧислоHEX = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + ЧислоHEX;
			Значение = Цел(Значение / 16);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЧислоHEX;
	
КонецФункции

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  Запрос - Запрос - запрос значений полей из соответсвтующих таблиц БД.
//
// Возвращаемое значение:
//  Структура - настройки выполнения запросов к платежным системам:
//   * ИдентификаторМерчанта    - Строка - идентификатор мерчанта в Системе быстрых платежей;
//   * ИдентификаторУчастника - Строка - идентификатор участника Системы быстрых платежей;
//   * СсылкаПеренаправления - Строка - ссылка перенаправления для настройки подключения;
//   * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//       настройка подключения к участнику СБП.
//   * Используется - Булево - признак активности настройки;
//   * ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП.
//
Функция НовыйПараметрыНастройкиПодключения(Запрос, РежимПоиска) Экспорт
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	// Проверка на пустое значение в тех случаях, когда обработчик обновления еще не успел выполниться.
	// При необходимсоти получаем параметры по настройке подключения.
	Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ИдентификаторУчастника)
		И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НастройкаПодключения) Тогда
		
		Если РежимПоиска = "Справочник" Тогда
			ВызватьИсключение НСтр(
				"ru = 'Не удалось определить идентификатор участника Системы быстрых платежей. Обработка прервана.'");
		Иначе
			Возврат ПараметрыНастройкиПодключения(ВыборкаДетальныеЗаписи.НастройкаПодключения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.ИдентификаторУчастника = СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторНеизвестногоУчастника() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен идентификатор участника Системы быстрых платежей для мерчанта %1.
				|Для продолжения работы необходимо перейти к настройкам подключения и выбрать участника Системы быстрых платежей.'"),
			ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторУчастника) Тогда
		УстановитьИдентификаторУчастникаСБП();
	КонецЕсли;
	
	ПараметрыНастройкиПодключения = Новый Структура;
	ПараметрыНастройкиПодключения.Вставить(
		"ИдентификаторМерчанта",
		ВыборкаДетальныеЗаписи.ИдентификаторМерчанта);
	ПараметрыНастройкиПодключения.Вставить(
		"ИдентификаторУчастника",
		ВыборкаДетальныеЗаписи.ИдентификаторУчастника);
	ПараметрыНастройкиПодключения.Вставить(
		"СсылкаПеренаправления",
		ВыборкаДетальныеЗаписи.СсылкаПеренаправления);
	ПараметрыНастройкиПодключения.Вставить(
		"НастройкаПодключения",
		ВыборкаДетальныеЗаписи.НастройкаПодключения);
	ПараметрыНастройкиПодключения.Вставить(
		"Используется",
		ВыборкаДетальныеЗаписи.Используется);
	ПараметрыНастройкиПодключения.Вставить(
		"ТипАутентификации",
		ВыборкаДетальныеЗаписи.ТипАутентификации);
	
	Возврат ПараметрыНастройкиПодключения;
	
КонецФункции

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения() Экспорт
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка() Экспорт
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "УжеОплачен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиУжеОплачен() Экспорт
	
	Возврат "УжеОплачен";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль() Экспорт
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен() Экспорт
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции
#КонецОбласти

#Область ИдентификаторыСтатусовСервиса

// Формирует идентификатор статуса отмененной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтменена() Экспорт
	
	Возврат "REJECTED";
	
КонецФункции

// Формирует идентификатор статуса в процессе.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВПроцессе() Экспорт
	
	Возврат "IN_PROGRESS";
	
КонецФункции

// Формирует идентификатор статуса выполненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаВыполнена() Экспорт
	
	Возврат "SUCCESS";
	
КонецФункции

// Формирует идентификатор статуса отклоненной операции.
//
// Возвращаемое значение:
//  Строка - идентификатор статуса.
//
Функция ИдентификаторСтатусаОтклонена() Экспорт
	
	Возврат "DECLINED";
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросовСервиса

// Определяет URL для вызова сервиса Системы быстрых платежей.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция) Экспорт
	
	Возврат "https://"
		+ ХостСервисаОбменаДанными()
		+ "/api/program1c/sbp/v1"
		+ Операция;
	
КонецФункции

// Добавляет в запись JSON параметры клиента.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации.
//
Процедура ЗаписатьПараметрыКлиента(ЗаписьДанныхСообщения) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientInfo");
	
	ИмяПрограммы = ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы();
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//    Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
		
	Иначе
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Добавляет в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения - ЗаписьJSON - запись, в которую необходимо
//    добавить данные аутентификации;
//  ДанныеАутентификации - Структура - параметры аутентификации мерчанта.
//  ИдентификаторМерчанта Строка - идентификатор торговой точки.
//
Процедура ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		Аутентификация,
		ИдентификаторМерчанта) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequestHeaders");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authorization");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Аутентификация);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("xmerchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Создает структуру настроек подключения к сервису Системы быстрых платежей.
//
Функция ИнициализироватьПараметрыПодключения() Экспорт
	
	Возврат СистемаБыстрыхПлатежейПовтИсп.ИнициализироватьПараметрыПодключения();
	
КонецФункции

// Определяет по коду состояния и коду ошибки сервиса тип ошибки для потребителей.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса;
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния) Экспорт
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 404
		Или КодСостояния = 422 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат "ТребуетсяОплата";
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат "ОтсутствуетДоступКСервису";
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию
//   ПереопределитьКодОшибкиСервиса.
//  ТелоJSON  - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(КодОшибки, ТелоJSON = "") Экспорт
	
	КодОшибкиСервиса = "";
	Если ЗначениеЗаполнено(ТелоJSON) Тогда
		КодОшибкиСервиса = ОпределитьКодОшибкиСервиса(ТелоJSON);
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису банка.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "LOW_AMOUNT_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма оплаты меньше допустимой.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "HIGH_AMOUNT_PAYMENT" Тогда
		Возврат НСтр("ru = 'Сумма оплаты превышает допустимую.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_PROGRAM" Тогда
		Возврат НСтр("ru = 'Неизвестный идентификатор программы. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "INTEGRATION_IS_NOT_SUPPORTED_1C" Тогда
		Возврат НСтр("ru = 'Интеграция с банком не поддерживается. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNKNOWN_MERCHANT" Тогда
		Возврат НСтр("ru = 'Идентификатор мерчанта не обнаружен. Проверьте настройки подключения.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса() Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
		И КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль()
		И КодОшибкиСервиса = "BAD_CREDENTIALS" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации в сервисе банка.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
			Возврат НСтр("ru = 'Ошибка авторизации. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "USER_AUTHORISATION_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "AUTHORIZATION_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису участника СБП.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "MERCHANT_NOT_ACTIVE" Тогда
		Возврат НСтр("ru = 'Настройка подключения  не активна или находится в процессе регистрации в Системе быстрых платежей. Статус подключения необходимо уточнить у банка или платежного агрегатора, с которым заключен договор.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису" Тогда
		Возврат НСтр("ru = 'Отсутствует доступ к сервису. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS_1C" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису 1С с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	ИначеЕсли КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису участника СБП с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	КонецЕсли;
	
	Если КодОшибки = "СервисВременноНеДоступен"
		И КодОшибкиСервиса = "SERVICE_UNAVAILABLE_PAYMENT" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису участника СБП.
			|Сервис временно недоступен. Повторите попытку подключения позже.'");
	ИначеЕсли КодОшибки = "СервисВременноНеДоступен" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Портала 1С:ИТС. Сервис временно недоступен.
			|Повторите попытку подключения позже.'");
	КонецЕсли;
	
	Если КодОшибки = "ТребуетсяОплата" 
		И КодОшибкиСервиса = "PAYMENT_REQUIRED" Тогда
		Возврат НСтр("ru = 'Требуется оплата сервиса. Обратитесь к обсуживающему партнеру.'");
	ИначеЕсли КодОшибки = "ТребуетсяОплата" Тогда
		Возврат НСтр("ru = 'Требуется оплата сервиса. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "UNKNOWN_EXCEPTION" Тогда
		Возврат НСтр("ru = 'Сервис банка вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "UNKNOWN_EXCEPTION_1С" Тогда
		Возврат НСтр("ru = 'Сервис вернул неизвестную ошибки при выполнении операции. Обратитесь к администратору.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса"
		И КодОшибкиСервиса = "BACKEND_CONNECTION_ERROR" Тогда
		Возврат НСтр("ru = 'Сервис банка не ответил в установленное время. Повторите операцию или обратитесь в техническую поддержку банка.'");
	ИначеЕсли КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Ошибка работы с сервисом Системы быстрых платежей.'");
	ИначеЕсли КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису Системы быстрых платежей.'");
	Иначе
		Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	КонецЕсли;
	
КонецФункции

// Формирует стандартные заголовки для вызова операции.
//
// Возвращаемое значение:
//  Соответствие - заголовки операции.
//
Функция НовыйЗаголовкиВызоваОперации() Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	Возврат Заголовки;
	
КонецФункции

// Восстанавливает значение даты из JSON, если значение не равно Неопределено.
//
// Параметры:
//  Свойство - Строка - имя свойства;
//  Значение - Строка, Неопределено - значение свойства;
//  ДополнительныеПараметры - Структура, Неопределено - параметры восстановления.
//
// Возвращаемое значение:
//  Дата, Неопределено - результат восстановления.
//
Функция ВосстановитьДатуJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
		// Свойство operationDate необходимо обрабатывать
		// и хранить в формате UTC, для того чтобы при
		// проведении сверки взаиморасчетов из разных
		// часовых поясов получать единые выборки операций.
		Если Свойство = "operationDate" Тогда
			Результат = ДатаВUTC(Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Производит преобразование число в формат JSON.
//
// Параметры
//  Значение - Число - значения для преобразования.
//
// Возвращаемое значение:
//   Строка - преобразованное число.
//
Функция ПреобразоватьЧислоВФорматJSON(Знач Значение) Экспорт
	
	Возврат СтрЗаменить(
		СтрЗаменить(
			"" + Значение,
			",",
			"."),
		Символы.НПП,
		"");
	
КонецФункции

// Удаляет служебные символы из идентификатора.
//
// Параметры
//  Идентификатор - Число - идентификатор операции.
//
// Возвращаемое значение:
//   Строка - обработанный идентификатор.
//
Функция ИдентификаторОперацииБезСлужебныхСимволов(Идентификатор) Экспорт
	
	Возврат СтрЗаменить("" + Идентификатор, Символы.НПП, "");
	
КонецФункции

// Определяет идентификатор валюты рубль РФ.
//
// Возвращаемое значение:
//  Строка - идентификатор валюты по ISO.
//
Функция ИдентификаторВалютыРоссийскийРубль() Экспорт
	
	Возврат "RUB";
	
КонецФункции

#КонецОбласти

#Область СверкаВзаиморасчетовСБПc2b

// Определяет список настроек подключения, для которых доступна сверка взаиморасчетов.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройки подключения, для которых доступна
//  сверка взаиморасчетов.
//
Функция НастройкиСверкиВзаиморасчетов() Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|		ПО НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = НастройкиУчастниковСБП.Идентификатор
		|			И (НастройкиУчастниковСБП.СверкаВзаиморасчетов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Устанавливает идентификатор с участника Системы быстрых платежей при переходе на версию 2.7.1.
//
Процедура УстановитьИдентификаторУчастникаСБП(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Заблокировать();
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.НастройкиУчастниковСБП");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель.УдалитьПлатежнаяСистема КАК УдалитьПлатежнаяСистема,
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель КАК Родитель
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
			|	И НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления
			|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника = """"
			|ИТОГИ
			|	МАКСИМУМ(УдалитьПлатежнаяСистема)
			|ПО
			|	Родитель";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРодитель.Следующий() Цикл
			
			НастройкаОбъектРодитель = ВыборкаРодитель.Родитель.ПолучитьОбъект();
			НастройкаОбъектРодитель.Заблокировать();
			
			ОбъектМетаданных = ВыборкаРодитель.УдалитьПлатежнаяСистема.Метаданные();
			Если ЗначениеЗаполнено(ВыборкаРодитель.УдалитьПлатежнаяСистема) Тогда
				Индекс = Перечисления[ОбъектМетаданных.Имя].Индекс(ВыборкаРодитель.УдалитьПлатежнаяСистема);
				НастройкаОбъектРодитель.Наименование = ОбъектМетаданных.ЗначенияПеречисления[Индекс].Синоним;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъектРодитель);
			
			ВыборкаДетальныеЗаписи = ВыборкаРодитель.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				НастройкаОбъект.Заблокировать();
				НастройкаОбъект.ИдентификаторУчастника = ИдентификаторУчастникаСБП(ВыборкаРодитель.УдалитьПлатежнаяСистема);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обновить идентификаторы участников СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обновление данных аутентификации по настройке подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ИдентификаторУчастника - Строка - идентификатор участника.
//  ДанныеХранилища - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Процедура ОбновитьВерсиюДанныхАутентификации(
	НастройкаПодключения,
	ИдентификаторУчастника,
	ВызыватьИсключение = Истина) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", НастройкаПодключения);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			НастройкаПодключения);
			
		Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
			
			ОбновленныеДанные = Новый Соответствие;
			ОбновленныеДанные.Вставить(ИдентификаторУчастника, ДанныеХранилища);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				НастройкаПодключения,
				ОбновленныеДанные);
			
		ИначеЕсли ВызыватьИсключение Тогда
			
			ОтменитьТранзакцию();
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить обновление данных аутентификации:
				|в безопасном хранилище тип данных не является структурой'");;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить обновление данных аутентификации:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкиПодключения

// Возвращает настройки подключения по переданной настройке.
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//                  настройка выполнения операции СБП.
//
// Возвращаемое значение:
//  Структура - общие настройки и информация о доступных операциях:
//    * ИдентификаторУчастника - Строка - строковый идентификатор или участника СБП;
//    * Используется - Булево - признак активности настройкии.
//
Функция НастройкиПодключения(НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ВызватьИсключение НСтр("ru = 'Параметр ""НастройкаПодключения"" не заполнен.'");
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаПодключения,
		"ИдентификаторУчастника, Используется");
	
КонецФункции

#КонецОбласти

#Область НастройкиУчастников

// Определяет необходимость расчета HAMC.
//
// Параметры:
//  ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП.
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо подготовить данные для расчета HMAC.
//
Функция УчастникСБПИспользуетHMAC(ТипАутентификации) Экспорт
	
	Возврат (ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256);
	
КонецФункции

// Определяет необходимость получения токена аутентификации.
//
// Параметры:
//  ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП.
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо получить токен аутентификации.
//
Функция УчастникСБПИспользуетPasswordCredentialsGrant(ТипАутентификации) Экспорт
	
	Возврат (ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT);
	
КонецФункции

// Формирует заголовок аутентификации для запроса в платежную систему.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - настройки аутентификации в сервисе;
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ТребуетсяОбновление - Булево - признак необходимости обновления устаревших данных.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокАвторизацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ДанныеДляПодписи,
		ТребуетсяОбновление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	Если ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		
		// Данные токена должны быть удалены из ИБ
		// в принудительном порядке, для получения
		// обновленной информации.
		Если ТребуетсяОбновление Тогда
			
			ДанныеАутентификации.accessToken = Неопределено;
			ДанныеАутентификации.tokenType = Неопределено;
			ДанныеАутентификации.expiresDate = Неопределено;
			
			ДанныеХранилища = ПрочитатьПараметрыАутентификации(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ПараметрыНастройкиПодключения.ИдентификаторУчастника);
			
			ДанныеХранилища.Вставить(
				ПараметрыНастройкиПодключения.ИдентификаторУчастника,
				ДанныеАутентификации);
			
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ДанныеХранилища);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ДатаТокена = ДанныеАутентификации.expiresDate;
		СформироватьЗаголовокАутентификацииPasswordCredentialsGrant(
			ДанныеАутентификации,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			Результат);
		
		// Обновление данных аутентификации.
		Если ЗначениеЗаполнено(ПараметрыНастройкиПодключения.НастройкаПодключения)
			И ДатаТокена <> ДанныеАутентификации.expiresDate Тогда
			
			ДанныеХранилища = ПрочитатьПараметрыАутентификации(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ПараметрыНастройкиПодключения.ИдентификаторУчастника);
			
			ДанныеХранилища.Вставить(
				ПараметрыНастройкиПодключения.ИдентификаторУчастника,
				ДанныеАутентификации);
			
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ПараметрыНастройкиПодключения.НастройкаПодключения,
				ДанныеХранилища);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокБазовойСхемыАутентификации(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password);
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		Результат.Аутентификация = ИнтернетПоддержкаПользователей.ЗаголовокBearerАутентификации(
			ДанныеАутентификации.token);
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		Результат.Аутентификация = ЗаголовокHMACАутентификации(
			ДанныеАутентификации.key,
			ДанныеДляПодписи,
			ХешФункция.SHA256); 
	ИначеЕсли ПараметрыНастройкиПодключения.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1 Тогда
		Результат.Аутентификация = ЗаголовокHMACАутентификации(
			ДанныеАутентификации.key,
			ДанныеДляПодписи,
			ХешФункция.SHA1);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает список участников, в которые возможно вернуть денежные средства
// в рамках оплаты. Метод следует вызывать только в том случае, если
// УчастникСБПВозврата имеет значение Истина,
// см. СистемаБыстрыхПлатежей.НастройкиПодключения.
//
// Возвращаемое значение:
//  Соответствие - идентификатор и наименование участника СБП:
//    *Ключ - Строка - идентификатор участника СБП, который необходимо
//            передать в метод д ПереводыСБПc2b.ВозвратОплаты
//            при выполнении возврата;
//    *Значение - Строка - наименование участника СБП для отображения в пользовательских
//                интерфейсах.
//
Функция УчастникиСБПДляВозврата() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор,
		|	НастройкиУчастниковСБП.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НЕ НастройкиУчастниковСБП.ЗапрещенВыборУчастника";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(
			ВыборкаДетальныеЗаписи.Идентификатор,
			ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет настройки возврата оплаты покупателю по идентфиикатору участника СБП.
//
// Параметры:
//  * ИдентификаторУчастника - Строка - идентификатор участника СБП.
//
// Возвращаемое значение:
//  Структура, Неопределено - настройки для возврата оплаты покупателю.
//  Неопределено если данные по документу не найдены:
//    * УчастникСБПВозврата - Булево - признак доступности возврата оплаты
//      на счет отличный отчета оплаты;
//    * УчастникиСБПДляВозврата - Соответствие - список участников, в которые возможно вернуть денежные средства
//      в рамках возврата.Заполняется только в случаях когда УчастникСБПВозврата имеет значение Истина:
//      ** Ключ - Строка - идентификатор участника СБП, который необходимо передать в метод ПереводыСБПc2b.ВозвратОплаты
//         при выполнении возврата;
//      **Значение - Строка - наименование участника СБП для отображения в пользовательских интерфейсах.
//
Функция НастройкиВозвратаОплаты(ИдентификаторУчастника) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УчастникСБПВозврата", Ложь);
	Результат.Вставить("УчастникиСБПДляВозврата", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.ЗапрещенВыборУчастника КАК ЗапрещенВыборУчастника
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторУчастника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.УчастникСБПВозврата = УчастникСБПВозврата(
		Выборка.ЗапрещенВыборУчастника,
		ИдентификаторУчастника);
	
	Если Результат.УчастникСБПВозврата Тогда
		Результат.УчастникиСБПДляВозврата = УчастникиСБПДляВозврата();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет признак доступности возврата оплаты на счет отличный отчета оплаты
//
// Параметры:
//  ЗапрещенВыборУчастника - Булево - признак запрета выбоа участника в сценариях возврата;
//  ИдентификаторУчастника - Строка - Идентификатор участника.
//
// Возвращаемое значение:
//  Булево - признак доступности возврата оплаты на счет отличный отчета оплаты.
//
Функция УчастникСБПВозврата(ЗапрещенВыборУчастника, ИдентификаторУчастника) Экспорт
	
	Если Не ЗапрещенВыборУчастника
		И (ИдентификаторУчастника <> "PayMaster"
		И ИдентификаторУчастника <> "1C-SBP"
		И ИдентификаторУчастника <> "SDEKFinance"
		И ИдентификаторУчастника <> "Raiffeisen"
		И ИдентификаторУчастника <> "Tinkoff") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Возвращает соответствие, содержащее сохраненные предопределенные шаблоны сообщений подсистемы по типу отправки.
//
// Возвращаемое значение:
//  Соответствие - определения шаблонов:
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки выполнения запросов к платежным системам:
//       ** Ключ - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Функция ШаблоныСообщенийДокументовОперации() Экспорт
	
	СоответствиеШаблонов = Константы.ПредопределенныеШаблоныСообщенийСБП.Получить().Получить();
	
	Если СоответствиеШаблонов = Неопределено Тогда
		СоответствиеШаблонов = Новый Соответствие;
		СоответствиеШаблонов.Вставить("Письмо", Новый Соответствие);
		СоответствиеШаблонов.Вставить("SMS", Новый Соответствие);
	КонецЕсли;
	
	Возврат СоответствиеШаблонов;
	
КонецФункции

// Возвращает перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//
// Возвращаемое значение:
//  Структура - перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//   * Ключ - Строка - тип назначения шаблона, может принимать значения - Письмо, SMS.
//   * Значение - Массив из СправочникСсылка.ШаблоныСообщений - перечень предопределенных шаблонов подсистемы по типу.
//
Функция ШаблоныСообщенийПоТипам() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить(
		"c2b",
		ПереводыСБПc2bСлужебный.ШаблоныСообщенийПоТипам());
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Определяет доступность использования функциональности подключения
// к СБП на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, настройка подключения к Системе быстрых платежей доступна.
//
Функция СлужебнаяНастройкаПодключенияДоступна() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей)
		И ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей)
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПодключениеКСБП)
		И ПравоДоступа("Использование", Метаданные.Обработки.ПодключениеКСБП);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Обработчик регламентного задания "ОбновлениеНастроекУчастниковСБП".
//
Процедура ОбновлениеНастроекУчастниковСБП() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Обновление настроек участников СБП в модели сервиса
			|выполняется через поставляемые данные'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП,
			,
			НСтр("ru = 'Обновление данные участников СБП при работе в автономном рабочем месте не предусмотрено.'"));
		Возврат;
	КонецЕсли;
	
	РезультатВызова = СервисСистемаБыстрыхПлатежей.ОперацияНастройкиУчастниковСБП();
	Если Не ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаписатьНастройкиУчастниковСБП(РезультатВызова.Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульСервисПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("СервисПереводыСБПc2b");
		МодульСервисПереводыСБПc2b.ОбновитьКэшМакетов();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания фонового задания обновления настроек СБП.
//
Процедура ОбновлениеНастроекУчастниковСБППриПодключении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Обновление настроек участников СБП в модели сервиса
			|выполняется через поставляемые данные'");
	КонецЕсли;
	
	РезультатВызова = СервисСистемаБыстрыхПлатежей.ОперацияНастройкиУчастниковСБП();
	Если Не ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаписатьНастройкиУчастниковСБП(РезультатВызова.Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Создает регламентное задание "ОбновлениеНастроекУчастниковСБП".
//
Процедура ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП()
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
		ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ЗаданияОбновления.Количество() = 0 Тогда
			
			// Чтобы не создавать пиковых нагрузок на сервис,
			// время обновления будет выбрано случайным образом
			// между 00:00 и 09:00.
			Генератор = Новый ГенераторСлучайныхЧисел;
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 32400);
			Расписание.ПериодПовтораДней = 1;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
			ПараметрыЗадания.Вставить("Расписание",    Расписание);
			ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление настроек участников СБП'"));
			
			Попытка
				РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			Исключение
				ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписатьИнформациюВЖурналРегистрации(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось создать регламентное задание Обновление настроек участников СБП по причине:
								|%1'"),
							ИнформацияОбОшибке),
						Истина);
				ВызватьИсключение ИнформацияОбОшибке;
			КонецПопытки;
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Создано регламентное задание Обновление платежных систем СБП.'"),
				Ложь);
			
			// Выполняется загрузка настроек, для корректного отображения
			// ссылок на подключение к СБП при заполнении нормативно справочной информации.
			Попытка
				ФоновыеЗадания.Выполнить(
					"СистемаБыстрыхПлатежейСлужебный.ОбновлениеНастроекУчастниковСБППриПодключении",
					,
					,
					НСтр("ru = 'Обновление настроек СБП.'"));
			Исключение
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					,
					Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось выполнить обновление настроек СБП.
							|%1'"),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ОбновлениеНастроекУчастниковСБП".
//
Процедура УдалитьЗаданияОбновленияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеНастроекУчастниковСБП);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет новые реквизиты справочника "НастройкиПодключенияКСистемеБыстрыхПлатежей"
// при переходе на версию 2.6.1.
//
Процедура ОбработатьНастройкиПлатежныхСистем(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Получить() = 0 Тогда
		УстановитьДлительностьОпераций();
	КонецЕсли;
	
	ИдентификаторSWiP = "swip";
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьИдентификатор = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторSWiP);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Если РезультатЗапроса[0].Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если РезультатЗапроса[1].Пустой() Тогда
			КореньОбъект = Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.СоздатьГруппу();
			КореньОбъект.Наименование = НСтр("ru = 'SWiP'");
			КореньОбъект.УдалитьИдентификатор = ИдентификаторSWiP;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				КореньОбъект,
				Ложь,
				Истина);
			КореньСсылка = КореньОбъект.Ссылка;
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			КореньСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			УчетнаяЗаписьВладелец = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			УчетнаяЗаписьВладелец.Заблокировать();
			УчетнаяЗаписьВладелец.Родитель = КореньСсылка;
			УчетнаяЗаписьВладелец.УдалитьПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.SWiP;
			УчетнаяЗаписьВладелец.УдалитьИдентификатор = ИдентификаторSWiP;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(
				УчетнаяЗаписьВладелец,
				Ложь,
				Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает значение константы ДлительностьОперацииСистемыБыстрыхПлатежей.
//
Процедура УстановитьДлительностьОпераций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьДлительностьОперации(60);
	
КонецПроцедуры

// Устанавливает пометки на удаления для элементов настроек SWiP
// при переходе на версию 2.6.2.
//
Процедура ОбновитьНастройкиПодключения(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// 1. Пометить на удаление настройки SWiP
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьИдентификатор = ""swip""
			|	ИЛИ НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.УдалитьПлатежныеСистемы.SWiP)
			|	ИЛИ НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель.УдалитьПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.УдалитьПлатежныеСистемы.SWiP)";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.УстановитьПометкуУдаления(Истина);
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		// 2. Заменить родителя в настройках СБП
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_ГруппаСБП
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель = ЗНАЧЕНИЕ(Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей.ПустаяСсылка)
			|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьИдентификатор = ""sbp"";
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_ГруппаСБП КАК ВТ_ГруппаСБП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|		ПО ВТ_ГруппаСБП.Ссылка = НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ГруппаСБП.Ссылка КАК Ссылка
			|ИЗ
			|	ВТ_ГруппаСБП КАК ВТ_ГруппаСБП";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.Родитель = Неопределено;
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.УстановитьПометкуУдаления(Истина);
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		// 3. Установить признак использования настроек СБП
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
			|	И НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.Используется = Истина;
			НастройкаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось установить пометки на удаление для настроек SWiP и обновить настройки СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Добавление регламентного задания обновления настроек участников СБП
// при переходе на версию 2.6.2.
//
Процедура ДобавитьЗаданиеОбновленияНастроек(Параметры) Экспорт
	
	УдалитьЗаданияОбновленияНастроек();
	ДобавитьЗаданиеОбновлениеНастроекУчастниковСБП();
	
	Попытка
		ОбновлениеНастроекУчастниковСБП();
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Не удалось загрузить настройки участников СБП.'"),
			Истина);
	КонецПопытки;
	
КонецПроцедуры

// Заменяет значение перечисления УдалитьСБП_Промсвязьбанк на СБП_Промсвязьбанк
// в настройках подключения с Системой быстрых платежей при переходе на версию 2.6.3.
//
Процедура ЗаменитьЗначениеПеречисленияУдалитьСБП_Промсвязьбанк(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
			|ГДЕ
			|	НастройкиПодключенияКСистемеБыстрыхПлатежей.УдалитьПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.УдалитьПлатежныеСистемы.УдалитьСБП_Промсвязьбанк)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НастройкаОбъект.Заблокировать();
			НастройкаОбъект.УдалитьПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Промсвязьбанк;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
		ВызватьИсключение НСтр("ru = 'Не удалось обновить настройки участников с СБП.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает тип аутентификации и обновляет настройки.
//
Процедура ОбновитьНастройкиУчастниковСБП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработанныеИдентификаторы = Новый Массив;
	НаборЗаписей = РегистрыСведений.НастройкиУчастниковСБП.СоздатьНаборЗаписей();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Otkrytie";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT;
	Запись.Наименование = "Банк ""Открытие""";
	Запись.КассовыеСсылки = Ложь;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SKB";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "ПАО Банк Синара";
	Запись.КассовыеСсылки = Ложь;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Ложь;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "YUMani";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "ЮKassa (ООО НКО «ЮМани»)";
	Запись.КассовыеСсылки = Ложь;
	Запись.ИНН = "7750005725";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RusskijStandart";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "Банк Русский Стандарт";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "PayMaster";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "PayMaster (ООО ""Пэймастер"")";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "7723887394";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Истина;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "1C-SBP";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "1С:СБП (Другие банки)";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "7706249306";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетов = Ложь;
	Запись.ПодключениеКассовойСсылки = Истина;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Raiffeisen";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Райффайзен Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Ложь;
	Запись.ПодключениеКассовойСсылки = Ложь;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "GENBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "ГЕНБАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Ложь;
	Запись.ПодключениеКассовойСсылки = Ложь;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Tinkoff";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Тинькофф";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Ложь;
	Запись.ПодключениеКассовойСсылки = Ложь;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "YUGInvestbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "ЮГ-Инвестбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Sovkombank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Совкомбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Ekspobank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Экспобанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AbsolyutBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Абсолют Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Levoberezhnyj";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Левобережный";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Blanc";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Бланк банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "KBHlynov";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "КБ Хлынов";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "VLADBIZNESBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "ВЛАДБИЗНЕСБАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NOKSSBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "НОКССБАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "ZemskijBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Земский банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NSBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "НС Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Forshtadt";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Форштадт";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Primsoczbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Примсоцбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "KBRostFinans";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "КБ РостФинанс";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "ABCBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Эс-Би-Ай Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKIBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКИБАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AlefBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Алеф-Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NIKOBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "НИКО-БАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AGROPROMKREDIT";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АГРОПРОМКРЕДИТ";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BANKORENBURG";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "БАНК ОРЕНБУРГ";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankSaratov";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Саратов";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "HakasskijMunicipalny";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Хакасский муниципальный банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Aresbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Аресбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Avtogradbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Автоградбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankAkcept";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Акцепт";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "TojotaBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Тойота Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Energotransbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Энерготрансбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankVenecz";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Венец";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "ITURUP";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк ИТУРУП";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Sibsocbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Сибсоцбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankMirPrivilegij";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Мир Привилегий";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankInteza";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Интеза";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MORSKOJBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МОРСКОЙ БАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankRazvitieStolica";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Развитие-Столица";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "TavricheskijBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Таврический Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "PervyjInvesticionnyjBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Первый Инвестиционный Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MOSKOMBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МОСКОМБАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "GTbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Газтрансбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Nacinvestprombank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Нацинвестпромбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RESOKredit";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "РЕСО Кредит";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RUSNARBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "РУСНАРБАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Kuzneckbiznesbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Кузнецкбизнесбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankKremlevski";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Кремлевский";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MezhdunarodnyFinansovyClub";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МЕЖДУНАРОДНЫЙ ФИНАНСОВЫЙ КЛУБ";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Tomskpromstrojbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Томскпромстройбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankAleksandrovskij";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк Александровский";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "JAndTBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Джей энд Ти Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Novobank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Новобанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKBPrimore";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКБ Приморье";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SolidBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Солид Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RealistBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Реалист Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKBDerzhava";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКБ Держава";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "NacionalnyjStandart";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Национальный стандарт";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "AKBLantaBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АКБ Ланта Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "RNBANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "РН БАНК";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "EnisejskijObdinennyjbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "АИКБ Енисейский объединенный банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankBZHF";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "КБ Долинск";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Altajkapitalbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Алтайкапиталбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BankSIAB";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Банк СИАБ";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "MTSBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "МТС-Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "BANKURALSIB";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "БАНК УРАЛСИБ";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Modulbank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Модульбанк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SDMBank";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "СДМ-Банк";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "PSB";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
	Запись.Наименование = "Промсвязьбанк";
	Запись.КассовыеСсылки = Ложь;
	Запись.ИНН = "";
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Ложь;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "SDEKFinance";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
	Запись.Наименование = "CDEK Pay";
	Запись.КассовыеСсылки = Истина;
	Запись.ИНН = "5406810975";
	Запись.ПлатежныйАгрегатор = Истина;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "Tochka";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
	Запись.Наименование = "Точка Банк";
	Запись.КассовыеСсылки = Ложь;
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	Запись.ЗапрещенВыборУчастника = Истина;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "KubanKredit";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "Кубань Кредит";
	Запись.КассовыеСсылки = Истина;
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Идентификатор = "FORABANK";
	Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
	Запись.Наименование = "АКБ ""ФОРА-БАНК"" (АО)";
	Запись.КассовыеСсылки = Истина;
	Запись.ПлатежныйАгрегатор = Ложь;
	Запись.СверкаВзаиморасчетов = Истина;
	Запись.ПодключениеКассовойСсылки = Ложь;
	ОбработанныеИдентификаторы.Добавить(Запись.Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор,
		|	НастройкиУчастниковСБП.Наименование КАК Наименование,
		|	НастройкиУчастниковСБП.КассовыеСсылки КАК КассовыеСсылки,
		|	НастройкиУчастниковСБП.ИНН КАК ИНН,
		|	НастройкиУчастниковСБП.ПлатежныйАгрегатор КАК ПлатежныйАгрегатор,
		|	НастройкиУчастниковСБП.СверкаВзаиморасчетов КАК СверкаВзаиморасчетов,
		|	НастройкиУчастниковСБП.ТипАутентификации КАК ТипАутентификации,
		|	НастройкиУчастниковСБП.ПодключениеКассовойСсылки КАК ПодключениеКассовойСсылки
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НЕ НастройкиУчастниковСБП.Идентификатор В (&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", ОбработанныеИдентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(
			НаборЗаписей.Добавить(),
			ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(
		НаборЗаписей);
	
КонецПроцедуры

// Устанавливает новое имя 1С:СБП.
//
Процедура УстановитьНовоеИмя1ССБП(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа
		|	И НастройкиПодключенияКСистемеБыстрыхПлатежей.Наименование = ""1С:СБП""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НастройкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НастройкаОбъект.Заблокировать();
		НастройкаОбъект.Наименование = "1С:СБП (Другие банки)";
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НастройкаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет струтуру даныых аутентифкации.
//
Процедура ОбновитьДанныеАутентификации(Параметры = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка КАК НастройкаПодключения,
		|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
		|ГДЕ
		|	НЕ НастройкиПодключенияКСистемеБыстрыхПлатежей.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбновитьВерсиюДанныхАутентификации(
			ВыборкаДетальныеЗаписи.НастройкаПодключения,
			ВыборкаДетальныеЗаписи.ИдентификаторУчастника,
			Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиАутентификацииНаФормах

// Добавляет настройки аутентификации на переданную форму.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения
//    к Системе быстрых платежей;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки.
//
Процедура ДобавитьНастройкиАутентификации(
		Форма,
		Группа,
		НастройкаПодключения,
		ИдентификаторУчастника,
		ПараметрыПодсказки) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	НастройкиУчастника = НастройкиУчастникаСБП(ИдентификаторУчастника);
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;

	Настройки = НовыйНастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		ПараметрыПодсказки);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(НастройкаПодключения)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	Форма.Настройки.Вставить("НастройкиАутентификации",  Настройки.Реквизиты);
	
	Если ПараметрыПодсказки.ОтобразитьПодсказку Тогда
		Форма.Элементы.ДекорацияПодсказка.Заголовок = Настройки.Подсказка;
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из Настройки.Реквизиты Цикл
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.РежимПароля = ОписаниеРеквизита.РежимПароля;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		НовыйЭлемент.Подсказка = ОписаниеРеквизита.Подсказка;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
		Если ОписаниеРеквизита.РежимПароля = Истина Тогда
			НовыйЭлемент.УстановитьДействие(
				"ПриИзменении",
				"Подключаемый_ПриИзмененииНастройкиАутентификации");
			НовыйЭлемент.УстановитьДействие(
				"НачалоВыбора",
				"Подключаемый_НачалоВыбораНастройкиАутентификации");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ЗначенияНастроек = ЗначениеНастроекАутентификации(
			НастройкаПодключения,
			ИдентификаторУчастника,
			НастройкиУчастника);
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Удаляет настройки аутентификации на переданной форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которой необходимо удалить настройки.
//
Процедура УдалитьНастройкиАутентификации(Форма) Экспорт
	
	// Если настройки не сформированы, удалять
	// ничего не нужно.
	Если Форма.Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Настройки.Свойство("НастройкиАутентификации") Тогда // АПК:1415 Реквизиты добавляются программно.
		Возврат;
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого НастройкиАутентификации Из Форма.Настройки.НастройкиАутентификации Цикл
		УдаляемыеРеквизиты.Добавить(НастройкиАутентификации.Имя);
		Форма.Элементы.Удалить(Форма.Элементы[НастройкиАутентификации.Имя]);
	КонецЦикла;
	Форма.ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
КонецПроцедуры

// Формирует декларативное описание настроек аутентификации.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  НастройкиУчастника - Структура - см. НастройкиУчастникаСБП;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки.
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		ПараметрыПодсказки)
	
	Реквизиты = Новый Массив;
	Подсказка = "";
	
	НастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		Реквизиты,
		Подсказка,
		ПараметрыПодсказки);
	
	Настройки = Новый Структура;
	Настройки.Вставить("Реквизиты", Реквизиты);
	Настройки.Вставить("Подсказка", Подсказка);
	
	Возврат Настройки;
	
КонецФункции

// Производит проверку заполнения данных аутентификации.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для проверки настроек;
//  Отказ - Булево - если Истина, запись данные не производится.
//
Процедура ПроверитьНастройкиАутентификации(Форма, Отказ) Экспорт
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит получение данных аутентификации из формы настройки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для получения настроек;
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция НастройкиАутентификацииПоДаннымФормы(Форма) Экспорт
	
	ПараметрыАутентификации = Новый Соответствие;
	Для Каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиАутентификации Цикл
		// Обработка ошибки ввода данных аутентификации пользователем.
		Если Форма[ОписаниеРеквизита.Имя] <> УдалитьНечитаемыеСимволы(Форма[ОписаниеРеквизита.Имя]) Тогда
			Форма[ОписаниеРеквизита.Имя] = УдалитьНечитаемыеСимволы(Форма[ОписаниеРеквизита.Имя]);
		КонецЕсли;
		ПараметрыАутентификации.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

#КонецОбласти

#Область НастройкаФормаПодключения

// Создает описание параметров подсказки настройки подключения.
//
// Возвращаемое значение:
//  Структура - результат создания параметров подсказки:
//   * ОтобразитьПодсказку - Булево - признак отображения подсказки;
//   * АдресЛичногоКабинета - Строка - ссылка для перехода в личный кабинет;
//   * ПартнерАгентаСБП - Строка - признак партнера Агента СБП;
//   * АдресСтраницыЗаявки - Строка - адрес страницы отправки заявки;
//   * ИдентификаторУчастника - Строка - идентификатор участника СБП.
//
Функция НовыйПараметрПодсказки() Экспорт
	
	ПараметрыПодсказки = Новый Структура;
	ПараметрыПодсказки.Вставить("ОтобразитьПодсказку", Ложь);
	ПараметрыПодсказки.Вставить("АдресЛичногоКабинета", "");
	ПараметрыПодсказки.Вставить("ПартнерАгентаСБП", Ложь);
	ПараметрыПодсказки.Вставить("АдресСтраницыЗаявки", Ложь);
	ПараметрыПодсказки.Вставить("ИдентификаторУчастника", "");
	
	Возврат ПараметрыПодсказки;
	
КонецФункции

// Определяет имя атрибута, в котором хранится настройка подключения.
//
// Возвращаемое значение:
//  Строка - имя атрибута.
//
Функция АтрибутНастройкаПодключения(ОбъектМетаданных) Экспорт
	
	ТипНастройка = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей");
	Для Каждого Изменение Из ОбъектМетаданных.Измерения Цикл
		Если Изменение.Тип = ТипНастройка Тогда
			Возврат Изменение.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		Если Ресурс.Тип = ТипНастройка Тогда
			Возврат Ресурс.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип = ТипНастройка Тогда
			Возврат Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции

// Формирует идентификатор для отображения скрытых символов на форме.
//
//
// Возвращаемое значение:
//  Строка - служебный идентификатор.
//
Функция СтрокаСекретныхДанныхПоУмолчанию()
	
	Возврат "be9a7ce7-5c24-413a-98aa-e0b370ca7e9d";
	
КонецФункции

// Формирует таблица шаблонов назначений платежей.
//
// Возвращаемое значение:
// ШаблоныНазначений - ТаблицаЗначений - настройки заполнения шаблонов платежей:
//  * ОбъектМетаданных - Строка - имя объекта метаднных операции.
//  * Идентификатор - Строка - идентификатор шаблона.
//  * Наименование - Строка - наименование шаблона для пользователя.
//  * Параметры - Структура - параметры заполнения шаблона:
//  * Параметры - Структура - параметры заполнения шаблона:
//    ** Наименование - Строка - наименование параметра для пользователя.
//    ** Идентификатор - Строка - идентификатор параметра для заполнения.
//
Функция НовыйШаблоныНазначений() Экспорт
	
	ШаблоныНазначений = Новый ТаблицаЗначений;
	ШаблоныНазначений.Колонки.Добавить("ОбъектМетаданных", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	ШаблоныНазначений.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ШаблоныНазначений.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ШаблоныНазначений.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Массив"));
	
	Возврат ШаблоныНазначений;
	
КонецФункции

#КонецОбласти

#Область НастройкиОплатыНаФормах

// Добавляет настройки оплат на переданную форму.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую необходимо добавить настройки;
//  Группа - ГруппаФормы - группа для добавления настроек;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//  Подключение - Булево - признак новой настройки подключения к сервису.
//
Процедура ДобавитьНастройкиОплаты(
		Форма,
		Группа,
		НастройкаПодключения,
		ДокументОперации = Неопределено,
		Подключение = Ложь) Экспорт
	
	Если Форма.Настройки = Неопределено Тогда
		Форма.Настройки = Новый Структура;
	КонецЕсли;
	
	НастройкиПодключения = НастройкиПодключенияПрограммы().c2b;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма,
			"ИспользоватьНастройкуКассовыхСсылок") Тогда
		
		Форма.ИспользоватьНастройкуКассовыхСсылок =
			НастройкиПодключения.ИспользоватьНастройкуКассовыхСсылок;
		
	КонецЕсли;
	
	Реквизиты = НовыйНастройкиОплаты(НастройкиПодключения);
	НовыеРеквизиты = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		НовыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ОписаниеРеквизита.Имя,
				ОписаниеРеквизита.Тип,
				,
				ОписаниеРеквизита.Синоним,
				ЗначениеЗаполнено(НастройкаПодключения)));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Форма.Элементы.Добавить(
			ОписаниеРеквизита.Имя,
			Тип("ПолеФормы"),
			Группа);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = ОписаниеРеквизита.Синоним;
		НовыйЭлемент.ПутьКДанным = ОписаниеРеквизита.Имя;
		НовыйЭлемент.АвтоОтметкаНезаполненного = ОписаниеРеквизита.ПроверкаЗаполнения;
		
		Попытка
			НовыйЭлемент.ПараметрыВыбора = ОписаниеРеквизита.ПараметрыВыбора;
		Исключение
			// Дополнительной обработки не требуется. Исключение может возникнуть, если настройка
			// функциональных опций конфликтует с настройкой параметров выбора.
		КонецПопытки;
		
		Попытка
			НовыйЭлемент.СвязиПараметровВыбора = ОписаниеРеквизита.СвязиПараметровВыбора;
		Исключение
			// Дополнительной обработки не требуется. Исключение может возникнуть, если настройка
			// функциональных опций конфликтует с настройкой связи параметров выбора.
		КонецПопытки;
		
		НовыйЭлемент.УстановитьДействие(
			"ПриИзменении",
			"Подключаемый_ПриИзмененииНастройкиОплаты");
		
		Если ЗначениеЗаполнено(ДокументОперации) Тогда
			УникальноеЗначение = Новый УникальныйИдентификатор;
			ДанныеРеквизита = Новый Структура(ОписаниеРеквизита.Имя, УникальноеЗначение);
			ЗаполнитьЗначенияСвойств(ДанныеРеквизита, ДокументОперации);
			Если ДанныеРеквизита[ОписаниеРеквизита.Имя] <> УникальноеЗначение
				И ОписаниеРеквизита.Тип.СодержитТип(ТипЗнч(ДанныеРеквизита[ОписаниеРеквизита.Имя]))
				И ЗначениеЗаполнено(ДанныеРеквизита[ОписаниеРеквизита.Имя]) Тогда
					Форма[ОписаниеРеквизита.Имя] = ДанныеРеквизита[ОписаниеРеквизита.Имя];
					НовыйЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Значения в структуре затираются, чтобы не провоцировать ошибку
		// сериализации значений формы.
		ПустойМассив = Новый Массив;
		ОписаниеРеквизита.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПустойМассив);
		ОписаниеРеквизита.ПараметрыВыбора = Новый ФиксированныйМассив(ПустойМассив);
		
	КонецЦикла;
	
	Форма.Настройки.Вставить("НастройкиОплаты", Реквизиты);
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ЗначенияНастроек = ЗначенияНастроекОплаты(
			Реквизиты,
			НастройкиПодключения.ОбъектМетаданных,
			НастройкаПодключения);
		Для Каждого КлючЗначение Из ЗначенияНастроек Цикл
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует декларативное описание настроек оплат.
//
// Параметры:
//  НастройкиПодключения - Структура - настройки подключения:
//    *ОбъектМетаданных - Метаданные.РегистрыСведений - объект метаданных регистр сведений,
//      в котором хранятся настройки выполнения оплат. Регистр определяет
//      связь мерчаната и аналитики ведения учета
//      в программах 1С. На основании данных регистра должен выполняется
//      поиск настройки подключения при выполнении оплат и возвратов;
//    *ИсключаемыеПоля - Массив Из Строка - наименования измерений, ресурсов или реквизитов, которые
//      необходимо скрыть на форме настройки подключения.
//
// Возвращаемое значение:
//  Структура - декларативное описание настроек.
//
Функция НовыйНастройкиОплаты(НастройкиПодключения)
	
	Настройки = Новый Массив;
	
	Для Каждого Изменение Из НастройкиПодключения.ОбъектМетаданных.Измерения Цикл
		Если Не СтрНачинаетсяС(Изменение.Имя, "Удалить")
			И НастройкиПодключения.ИсключаемыеПоля.Найти(Изменение.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Изменение.Имя,
					Изменение.Тип,
					Изменение.Синоним,
					(Изменение.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Изменение.ПараметрыВыбора,
					Изменение.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из НастройкиПодключения.ОбъектМетаданных.Ресурсы Цикл
		Если Не СтрНачинаетсяС(Ресурс.Имя, "Удалить")
			И НастройкиПодключения.ИсключаемыеПоля.Найти(Ресурс.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Ресурс.Имя,
					Ресурс.Тип,
					Ресурс.Синоним,
					(Ресурс.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Ресурс.ПараметрыВыбора,
					Ресурс.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из НастройкиПодключения.ОбъектМетаданных.Реквизиты Цикл
		Если Не СтрНачинаетсяС(Реквизит.Имя, "Удалить")
			И НастройкиПодключения.ИсключаемыеПоля.Найти(Реквизит.Имя) = Неопределено Тогда
			Настройки.Добавить(
				НовыйРасширенноеОписаниеРеквизита(
					Реквизит.Имя,
					Реквизит.Тип,
					Реквизит.Синоним,
					(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
					Реквизит.ПараметрыВыбора,
					Реквизит.СвязиПараметровВыбора));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  РежимПароля - Булево - признак использования режима пароля;
//  Подсказка - Строка - подсказка для поля формы.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		РежимПароля = Ложь,
		Подсказка = "")
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип",                Тип);
	ОписаниеПоля.Вставить("Имя",                Имя);
	ОписаниеПоля.Вставить("Синоним",            Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("РежимПароля",        РежимПароля);
	ОписаниеПоля.Вставить("Подсказка",          Подсказка);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		ОписаниеПоля.Вставить("НастройкаПодключения", Истина);
	Иначе
		ОписаниеПоля.Вставить("НастройкаПодключения", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

// Формирует декларативное описание реквизита настройки оплат.
//
// Параметры:
//  Имя - Строка - имя реквизита;
//  Тип - Строка - тип реквизита;
//  Синоним - Строка - синоним реквизита;
//  ПроверкаЗаполнения - Строка - режим проверки заполнения;
//  РежимПароля - Строка - признак использования режима пароля.
//
// Возвращаемое значение:
//  Структура - декларативное описание реквизита метаданных.
//
Функция НовыйРасширенноеОписаниеРеквизита(
		Имя,
		Тип,
		Синоним,
		ПроверкаЗаполнения,
		ПараметрыВыбора,
		СвязиПараметровВыбора,
		РежимПароля = Ложь)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("Тип",                   Тип);
	ОписаниеПоля.Вставить("Имя",                   Имя);
	ОписаниеПоля.Вставить("Синоним",               Синоним);
	ОписаниеПоля.Вставить("ПроверкаЗаполнения",    ПроверкаЗаполнения);
	ОписаниеПоля.Вставить("ПараметрыВыбора",       ПараметрыВыбора);
	ОписаниеПоля.Вставить("СвязиПараметровВыбора", СвязиПараметровВыбора);
	ОписаниеПоля.Вставить("РежимПароля",           РежимПароля);
	Если Тип = Новый ОписаниеТипов("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		ОписаниеПоля.Вставить("НастройкаПодключения", Истина);
	Иначе
		ОписаниеПоля.Вставить("НастройкаПодключения", Ложь);
	КонецЕсли;
	
	Возврат ОписаниеПоля;
	
КонецФункции

// Определяет настройки оплат для торговой точки.
//
// Параметры:
//  НастройкиОплаты - Структура - см. НовыйНастройкиОплаты;
//  ОбъектМетаданных - объект метаданных, который отвечает за хранение настроек;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//   настройка подключения к сервису.
//
// Возвращаемое значение:
//  Соответствие - содержит значения настроек оплат.
//
Функция ЗначенияНастроекОплаты(
		НастройкиОплаты,
		ОбъектМетаданных,
		НастройкаПодключения)
	
	Результат  = Новый Соответствие;
	ВыборПолей = "";
	Отбор      = "";
	
	Для Каждого ОписаниеПоля Из НастройкиОплаты Цикл
		
		Если Не ОписаниеПоля.НастройкаПодключения Тогда
			Если ВыборПолей <> "" Тогда
				ВыборПолей = ВыборПолей
					+ ","
					+ Символы.ПС;
			КонецЕсли;
			
			ВыборПолей = ВыборПолей
				+ ОбъектМетаданных.Имя
				+ "."
				+ ОписаниеПоля.Имя
				+ " КАК "
				+ ОписаниеПоля.Имя;
		Иначе
			Отбор = ОбъектМетаданных.Имя + "." + ОписаниеПоля.Имя + " = &НастройкаПодключения";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	РегистрСведений.%2 КАК %3 
		|ГДЕ
		|	%4";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ВыборПолей,
		ОбъектМетаданных.Имя,
		ОбъектМетаданных.Имя,
		Отбор);
	
	Запрос.УстановитьПараметр("НастройкаПодключения", НастройкаПодключения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для Каждого ОписаниеПоля Из НастройкиОплаты Цикл
			Если ОписаниеПоля.НастройкаПодключения Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(ОписаниеПоля.Имя, ВыборкаДетальныеЗаписи[ОписаниеПоля.Имя]);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обновляет настройки оплаты для торговой точки.
//
// Параметры:
//  ПараметрыОплатыСБПc2b - Структура - см. ЗначенияНастроекОплаты;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису.
//
// Возвращаемое значение:
//  Структура - результат обновления.
//
Функция ЗаписатьНастройкиОплаты(ПараметрыОплатыСБПc2b, НастройкаПодключения) Экспорт
	
	ОбъектМетаданных = НастройкиПодключенияПрограммы().c2b.ОбъектМетаданных;
	ИмяАтрибутаНастройкаПодключения = АтрибутНастройкаПодключения(ОбъектМетаданных);
	ПараметрыОплатыСБПc2b.Вставить(ИмяАтрибутаНастройкаПодключения, НастройкаПодключения);
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ",             Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ПараметрыОплаты = Новый Структура;
	ПараметрыОплаты.Вставить("c2b", ПараметрыОплатыСБПc2b);
	
	Попытка
		ИнтеграцияПодсистемБИП.ПриЗаписиНастроекПодключения(
			ПараметрыОплаты,
			Результат.Отказ,
			Результат.СообщениеОбОшибке);
		СистемаБыстрыхПлатежейПереопределяемый.ПриЗаписиНастроекПодключения(
			ПараметрыОплаты,
			Результат.Отказ,
			Результат.СообщениеОбОшибке);
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		Результат.Отказ             = Истина;
		Результат.СообщениеОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(
			ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнения настройки оплаты для торговой точки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, для которой необходимо выполнить проверку;
//  Отказ - Булево - если Истина, при проверке возникли ошибки.
//
Процедура ПроверитьНастройкиОплаты(Форма, Отказ) Экспорт
	
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиОплаты Цикл
		
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРеквизита.ПроверкаЗаполнения И Не ЗначениеЗаполнено(Форма[ОписаниеРеквизита.Имя]) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Поле %1 не заполнено.'"),
					ОписаниеРеквизита.Синоним),
				,
				,
				ОписаниеРеквизита.Имя,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает настройки оплат из формы торговой точки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для получения настроек оплат.
//
// Возвращаемое значение:
//  Структура - настройки оплат.
//
Функция НастройкиОплатыПоДаннымФормы(Форма) Экспорт
	
	ПараметрыОплаты = Новый Соответствие;
	Для каждого ОписаниеРеквизита Из Форма.Настройки.НастройкиОплаты Цикл
		Если ОписаниеРеквизита.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОплаты.Вставить(ОписаниеРеквизита.Имя, Форма[ОписаниеРеквизита.Имя]);
	КонецЦикла;
	
	Возврат ПараметрыОплаты;
	
КонецФункции

// Позволяет настроить элементы настройки приема оплат на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки подключения;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей, Неопределено - передается
//   ссылка на настройку подключения, в случае создания новой настройки передается Неопределено.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки подключения к
//    Системе быстрых платежей, которые передаются в методе СистемаБыстрыхПлатежейКлиент.ПодключитьСистемуБыстрыхПлатежей.
//
Процедура НастроитьЭлементыФормыПодключения(
		Форма,
		НастройкаПодключения = Неопределено,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщиеЭлементы = Новый Структура;
	ОбщиеЭлементы.Вставить("Наименование", Форма.Элементы["Наименование"]);
	ОбщиеЭлементы.Вставить("ДекорацияДополнительнаяИнформация", Форма.Элементы["ДекорацияДополнительнаяИнформация"]);
	
	ЭлементыНастроекОплаты = Новый Структура;
	ЗначенияНастроекОплаты = Новый Структура;
	Для Каждого ЭлементНастройки Из Форма.Настройки.НастройкиОплаты Цикл
		Если ЭлементНастройки.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		ЭлементыНастроекОплаты.Вставить(ЭлементНастройки.Имя, Форма.Элементы[ЭлементНастройки.Имя]);
		ЗначенияНастроекОплаты.Вставить(ЭлементНастройки.Имя, Форма[ЭлементНастройки.Имя]);
	КонецЦикла;
	
	НастройкиЭлементовСБПc2b = Новый Структура;
	НастройкиЭлементовСБПc2b.Вставить("ЭлементыНастроекОплаты", ЭлементыНастроекОплаты);
	НастройкиЭлементовСБПc2b.Вставить("ЗначенияНастроекОплаты", ЗначенияНастроекОплаты);
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ОбщиеЭлементы", ОбщиеЭлементы);
	НастройкиФормы.Вставить("c2b", НастройкиЭлементовСБПc2b);
	НастройкиФормы.Вставить("НастройкаПодключения", НастройкаПодключения);
	
	ИнтеграцияПодсистемБИП.ПриНастройкеЭлементовФормыПодключения(
		НастройкиФормы,
		ДополнительныеПараметры);
	СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения(
		НастройкиФормы,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Позволяет предзаполнить настройки приема платежей на формах подключения
// к Системе быстрых платежей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки подключения;
//  ИдентификаторУчастникаСБП - Строка - идентификатор участника СБП;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры настройки подключения с
//    Системой быстрых платежей, которые передаются в методе СистемаБыстрыхПлатежейКлиент.ПодключитьСистемуБыстрыхПлатежей.
//
Функция НастроитьПараметрыПодключения(
		Форма,
		ИдентификаторУчастника,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Наименование", Неопределено);
	
	НастройкиОплатыСБПc2b = Новый Структура;
	Для Каждого ЭлементНастройки Из Форма.Настройки.НастройкиОплаты Цикл
		Если ЭлементНастройки.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		НастройкиОплатыСБПc2b.Вставить(ЭлементНастройки.Имя, Неопределено);
	КонецЦикла;
	
	НастройкиУчастникаСБП = Новый Структура;
	НастройкиУчастникаСБП.Вставить("Наименование", "");
	НастройкиУчастникаСБП.Вставить("ИНН", "");
	НастройкиУчастникаСБП.Вставить("ПлатежныйАгрегатор", Ложь);
	
	ЗаполнитьЗначенияСвойств(
		НастройкиУчастникаСБП,
		НастройкиУчастникаСБП(ИдентификаторУчастника));
	
	НастройкиУчастникаСБП.Вставить(
		"БИК",
		БИКУчастникаСБП(ИдентификаторУчастника));
	
	НастройкиОплаты = Новый Структура;
	НастройкиОплаты.Вставить("c2b", НастройкиОплатыСБПc2b);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОбщиеНастройки", ОбщиеНастройки);
	Настройки.Вставить("НастройкиОплаты", НастройкиОплаты);
	Настройки.Вставить("НастройкиУчастникаСБП", НастройкиУчастникаСБП);
	
	ИнтеграцияПодсистемБИП.ПриЗаполненииФормыНастройкиПодключения(
		Настройки,
		ДополнительныеПараметры);
	СистемаБыстрыхПлатежейПереопределяемый.ПриЗаполненииФормыНастройкиПодключения(
		Настройки,
		ДополнительныеПараметры);
	
	Форма.Наименование = Настройки.ОбщиеНастройки.Наименование;
	Для Каждого КлючЗначение Из Настройки.НастройкиОплаты.c2b Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Форма[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Заполняет настройки отображения шаблонов назначений платежей.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, на которую необходимо добавить настройки;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису.
//  НастройкиПодключения - Структура - см. НастройкиПодключенияПрограммы.
//
Процедура ЗаполнитьДекорацияНастройкиШаблонов(
		Форма,
		НастройкаПодключения,
		НастройкиПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиПодключения.ШаблоныНазначений.Количество() = 0 Тогда
		Форма.Элементы.ДекорацияНастройкиШаблонов.Видимость = Ложь;
	КонецЕсли;
	
	Шаблоны = РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийПлатежей(
		НастройкаПодключения);
	
	Если Шаблоны.Количество() <> 0 Тогда
		ПредставлениеСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настроить (%1)'"),
			Шаблоны.Количество());
	Иначе
		ПредставлениеСсылки = НСтр("ru = 'Настроить'")
	КонецЕсли;
	
	Форма.Элементы.ДекорацияНастройкиШаблонов.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Шаблоны назначения: <a href = ""open:paymentPurpose"">%1</a>'"),
			ПредставлениеСсылки));
	
КонецПроцедуры

Процедура ЗаполнитьДекорацияКассовыеСсылки(Форма, НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("НастройкаПодключения", НастройкаПодключения);
	
	ДанныеКассовыхСсылок = Новый Структура;
	ДанныеКассовыхСсылок.Вставить("Количество", 0);
	
	ПереводыСБПc2bПереопределяемый.ПриОпределенииДанныхКассовыхСсылок(
		ПараметрыНастройки,
		ДанныеКассовыхСсылок);
	
	Если ДанныеКассовыхСсылок.Количество <> 0 Тогда
		ПредставлениеСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настроить (%1)'"),
			ДанныеКассовыхСсылок.Количество);
	Иначе
		ПредставлениеСсылки = НСтр("ru = 'Настроить'")
	КонецЕсли;
	
	Форма.Элементы.ДекорацияКассовыеСсылки.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Кассовые QR-коды: <a href = ""open:cashQrc"">%1</a>'"),
			ПредставлениеСсылки));
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПодключения

// Получает актуальный список участников Системы быстрых платежей.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для выполнения запроса;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПолучитьУчастниковСБПВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	РезультатОперации = ПолучитьУчастниковСБП();
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Получает актуальный список участников Системы быстрых платежей.
//
Функция ПолучитьУчастниковСБП() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("ДанныеУчастников", Новый Соответствие);
	
	РезультатВызова = СервисСистемаБыстрыхПлатежей.ОперацияНастройкиУчастниковСБП();
	Если ЗначениеЗаполнено(РезультатВызова.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатВызова,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Получение слияние настроек сервиса и программы.
	ИдентификаторыУчастников = Новый Массив;
	Для Каждого НастройкаСервис Из РезультатВызова.Настройки Цикл
		Если НастройкаСервис.c2bIntegrationSupported Тогда
			ИдентификаторыУчастников.Добавить(НастройкаСервис.memberId);
			РезультатОперации.ДанныеУчастников.Вставить(
				НастройкаСервис.memberId,
				Новый Структура("АдресСтраницыПодключения,
					|АдресСтраницыЗаявки,
					|ТекстПредупреждения,
					|ИНН,
					|БИК,
					|Представление,
					|ПартнерАгентаСБП,
					|ПорядокОтображения",
					НастройкаСервис.personalAccountPageUrl,
					АдресСтраницыПодключенияКСБП(НастройкаСервис.memberId),
					НастройкаСервис.attentionText,
					НастройкаСервис.inn,
					?(НастройкаСервис.biks = Неопределено,
						Новый Массив,
						НастройкаСервис.biks),
					НастройкаСервис.memberName,
					НастройкаСервис.c2bSbpAgentPartner,
					?(НастройкаСервис.sortingOrder <> Неопределено,
						НастройкаСервис.sortingOrder,
						0)));
		КонецЕсли;
	КонецЦикла;
	
	// Обработать настройки участников по которым еще не была выполнена загрузка настроек.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор В(&Идентификаторы)
		|	И НастройкиУчастниковСБП.ТипАутентификации <> ЗНАЧЕНИЕ(Перечисление.ТипыАутентификацииСБП.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыУчастников);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОбновитьНастройки = Ложь;
	Для Каждого Идентификатор Из ИдентификаторыУчастников Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Идентификатор);
		ВыборкаДетальныеЗаписи.Сбросить();
		Если Не ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				РезультатОперации.ДанныеУчастников.Удалить(Идентификатор);
			Иначе
				ЗаписатьНастройкиУчастниковСБП(РезультатВызова.Настройки);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит проверку настроек подключения к СБП для новой настройки подключения.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой настройки подключения;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключенияВФоне(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	РезультатОперации = ПроверитьПараметрыПодключения(
		ПараметрыПроцедуры.ИдентификаторУчастника,
		ПараметрыПроцедуры.ПараметрыАутентификации);
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Производит проверку настроек подключения к СБП для новой настройки подключения.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ПараметрыАутентификации - Соответствие - данные аутентификации.
//
Функция ПроверитьПараметрыПодключения(
		ИдентификаторУчастника,
		ПараметрыАутентификации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ДанныеАутентификации = ПреобразоватьНастройкиАутентификации(
		ИдентификаторУчастника,
		ПараметрыАутентификации);
	
	НастройкиУчастника = НастройкиУчастникаСБП(ИдентификаторУчастника);
	
	ПараметрыНастройкиПодключения = Новый Структура;
	ПараметрыНастройкиПодключения.Вставить("ИдентификаторМерчанта", ИдентификаторМерчантаПоДаннымАутентификации(ПараметрыАутентификации));
	ПараметрыНастройкиПодключения.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	ПараметрыНастройкиПодключения.Вставить("НастройкаПодключения", Неопределено);
	ПараметрыНастройкиПодключения.Вставить("Используется", Истина);
	ПараметрыНастройкиПодключения.Вставить("ТипАутентификации", НастройкиУчастника.ТипАутентификации);
	
	РезультатПроверки = СервисСистемаБыстрыхПлатежей.ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	
	Возврат Результат;
	
КонецФункции

// Производит проверку настроек подключения к СБП для существующей настройки подключения.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для регистрации новой настройки подключения;
//  АдресРезультата - Строка - адрес хранилища результат обновления.
//
Процедура ПроверитьПараметрыПодключенияОбъект(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	ПараметрыАутентификации = ПрочитатьПараметрыАутентификацииУчастника(
		ПараметрыПроцедуры.НастройкаПодключения,
		ПараметрыПроцедуры.ИдентификаторУчастника);
	
	РезультатПроверки = СервисСистемаБыстрыхПлатежей.ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения(
			ПараметрыПроцедуры.НастройкаПодключения),
		ПараметрыАутентификации);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Формирует представление подсказки для поля настроек Merchant Id.
//
// Возвращаемое значение:
//  Строка - подсказка поля формы.
//
Функция ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()
	
	Возврат НСтр("ru = 'Идентификатор торговой точки в Системе быстрых платежей.'");
	
КонецФункции

// Устанавливает значение константы ДлительностьОперацииСистемыБыстрыхПлатежей.
//
// Параметры:
//  Значение - Число - количество секунд.
//
Процедура УстановитьДлительностьОперации(Значение) Экспорт
	
	Константы.ДлительностьОперацииСистемыБыстрыхПлатежей.Установить(Значение);
	
КонецПроцедуры

// См. СистемаБыстрыхПлатежей.ПараметрыПодключенияПоУчастникуСБП
//
Функция ПараметрыПодключенияПоУчастникуСБП(ИдентификаторУчастника) Экспорт
	
	КоллекцияРеквизитов = Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.Реквизиты;
	ПараметрыНастройкиПодключения = Новый Массив;
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		
		Если Реквизит.Имя = "УдалитьИдентификатор"
			Или Реквизит.Имя = "УдалитьПлатежнаяСистема"
			Или Реквизит.Имя = "ИдентификаторМерчанта" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита = НовыйРасширенноеОписаниеРеквизита(
			Реквизит.Имя,
			Реквизит.Тип,
			Реквизит.Синоним,
			(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку),
			Реквизит.ПараметрыВыбора,
			Реквизит.СвязиПараметровВыбора);
		
		Если Реквизит.Имя = "ИдентификаторУчастника" Тогда
			ОписаниеРеквизита.Вставить("Значение", ИдентификаторУчастника);
		Иначе
			ОписаниеРеквизита.Вставить("Значение", Реквизит.Тип.ПривестиЗначение());
		КонецЕсли;
		
		ОписаниеРеквизита.Вставить(
			"ДляГруппы",
			?(Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы, Истина, Ложь));
		
		ПараметрыНастройкиПодключения.Добавить(ОписаниеРеквизита);
		
	КонецЦикла;
	
	РеквизитНаименование = НовыйРасширенноеОписаниеРеквизита(
		"Наименование",
		Новый ОписаниеТипов(
			"Строка",
			Новый КвалификаторыСтроки(Метаданные.Справочники.НастройкиПодключенияКСистемеБыстрыхПлатежей.ДлинаНаименования)),
		НСтр("ru = 'Наименование'"),
		Истина,
		Неопределено,
		Неопределено);
	РеквизитНаименование.Вставить("Значение", "");
	РеквизитНаименование.Вставить("ДляГруппы", Ложь);
	
	ПараметрыНастройкиПодключения.Добавить(РеквизитНаименование);
	
	// Параметры оплат
	НастройкиПодключения = НастройкиПодключенияПрограммы();
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиПодключения.c2b);
	
	ПараметрыОплаты = Новый Массив;
	
	Для Каждого АтрибутОплаты Из АтрибутыОплат Цикл
		Если АтрибутОплаты.НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		АтрибутОплаты.Вставить("Значение", АтрибутОплаты.Тип.ПривестиЗначение());
		
		// Значения в структуре затираются, чтобы не провоцировать ошибку
		// сериализации значений формы.
		ПустойМассив = Новый Массив;
		АтрибутОплаты.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПустойМассив);
		АтрибутОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПустойМассив);
		
		ПараметрыОплаты.Добавить(АтрибутОплаты);
		
	КонецЦикла;
	
	НастройкиУчастника = НастройкиУчастникаСБП(ИдентификаторУчастника);
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	// Параметры аутентификации
	ПараметрыАутентификации = Новый Массив;
	НастройкиАутентификации = НовыйНастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		НовыйПараметрПодсказки());
	
	Для Каждого Реквизит Из НастройкиАутентификации.Реквизиты Цикл
		
		ОписаниеРеквизита = НовыйОписаниеРеквизита(
			Реквизит.Имя,
			Реквизит.Тип,
			Реквизит.Синоним,
			Реквизит.ПроверкаЗаполнения,
			Реквизит.РежимПароля,
			Реквизит.Подсказка);
			
		ОписаниеРеквизита.Вставить("Значение", Реквизит.Тип.ПривестиЗначение());
		ПараметрыАутентификации.Добавить(ОписаниеРеквизита);
		
	КонецЦикла;
	
	Возврат Новый Структура(
		"ПараметрыНастройкиПодключения,
		|ПараметрыОплаты,
		|ПараметрыАутентификации",
		ПараметрыНастройкиПодключения,
		Новый Структура("c2b", ПараметрыОплаты),
		ПараметрыАутентификации)
	
КонецФункции

// См. СистемаБыстрыхПлатежей.ПараметрыПодключенияПоНастройке
//
Функция ПараметрыПодключенияПоНастройке(НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры подключения
	ЗапросЗначенийРеквизитов = Новый Запрос;
	ЗапросЗначенийРеквизитов.Текст = 
	"ВЫБРАТЬ
	|	*,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Родитель КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.НастройкиПодключенияКСистемеБыстрыхПлатежей КАК НастройкиПодключенияКСистемеБыстрыхПлатежей
	|ГДЕ
	|	НастройкиПодключенияКСистемеБыстрыхПлатежей.Ссылка = &Ссылка";
	
	ЗапросЗначенийРеквизитов.УстановитьПараметр("Ссылка", НастройкаПодключения);
	
	ВыборкаЗначенийРеквизитов = ЗапросЗначенийРеквизитов.Выполнить().Выбрать();
	
	Если ВыборкаЗначенийРеквизитов.Следующий() Тогда
		ПараметрыПодключения = ПараметрыПодключенияПоУчастникуСБП(
			ВыборкаЗначенийРеквизитов.ИдентификаторУчастника);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ПараметрПодключения Из ПараметрыПодключения.ПараметрыНастройкиПодключения Цикл
		ПараметрПодключения.Значение = ВыборкаЗначенийРеквизитов[ПараметрПодключения.Имя];
	КонецЦикла;
	
	// Параметры оплат.
	НастройкиОплаты = НастройкиПодключенияПрограммы().c2b;
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиОплаты);
	
	ЗначенияНастроек = ЗначенияНастроекОплаты(
		АтрибутыОплат,
		НастройкиОплаты.ОбъектМетаданных,
		НастройкаПодключения);
		
	Для Каждого ПараметрОплаты Из ПараметрыПодключения.ПараметрыОплаты.c2b Цикл
		ПараметрОплаты.Значение = ЗначенияНастроек[ПараметрОплаты.Имя];
	КонецЦикла;
	
	// Параметры аутентификации.
	НастройкиУчастника = НастройкиУчастникаСБП(ВыборкаЗначенийРеквизитов.ИдентификаторУчастника);
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	ЗначениеПараметровАутентификации = ЗначениеНастроекАутентификации(
		НастройкаПодключения,
		ВыборкаЗначенийРеквизитов.ИдентификаторУчастника,
		НастройкиУчастника);
		
	Если ЗначениеЗаполнено(ЗначениеПараметровАутентификации) Тогда
		Для Каждого ПараметрАутентификации Из ПараметрыПодключения.ПараметрыАутентификации Цикл
			ПараметрАутентификации.Значение = 
				ЗначениеПараметровАутентификации.Получить(ПараметрАутентификации.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Возвращает параметры оплаты переданного по ссылке элемента справочника
// "НастройкиПодключенияКСистемеБыстрыхПлатежей".
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - ссылка на элемент справочника 
//    для которого нужно получить параметры оплаты.
//
// Возвращаемое значение:
//  Соответствие - содержит имена и значения полей регистра сведений,
//      хранящего данные о настройках оплат.
//
Функция ПараметрыОплатыПоНастройке(НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметры оплат.
	НастройкиОплаты = НастройкиПодключенияПрограммы().c2b;
	АтрибутыОплат = НовыйНастройкиОплаты(НастройкиОплаты);
	
	Возврат ЗначенияНастроекОплаты(
		АтрибутыОплат,
		НастройкиОплаты.ОбъектМетаданных,
		НастройкаПодключения);
	
КонецФункции

#КонецОбласти

#Область НастройкиУчастниковСБП

// Определяет идентификатор мерчаната на основании данных
// аутентификации.
//
// Параметры:
//  НастройкиАутентификации - Соответствие - данные аутентификации.
//
// Возвращаемое значение:
//  Строка - идентификатор торговой точки.
//
Функция ИдентификаторМерчантаПоДаннымАутентификации(НастройкиАутентификации) Экспорт
	
	Возврат НастройкиАутентификации.Получить("ИдентификаторМерчанта");
	
КонецФункции

// Формирует декларативное описание настроек аутентификации.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  НастройкиУчастника - Структура - см. НастройкиУчастникаСБП;
//  Реквизиты - Массив из Структура - декларативное описание настройки;
//  Подсказка - Строка - инструкции по заполнению данных аутентификации;
//  ПараметрыПодсказки - Структура - см. НовыйПараметрПодсказки.
//
Процедура НастройкиАутентификации(
		ИдентификаторУчастника,
		НастройкиУчастника,
		Реквизиты,
		Подсказка,
		ПараметрыПодсказки)
	
	Если НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"ИдентификаторМерчанта",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Merchant Id'"),
				Истина,
				Ложь,
				ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Логин",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Логин'"),
				Истина));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Пароль",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Пароль'"),
				Истина,
				Истина));
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"ИдентификаторМерчанта",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Merchant Id'"),
				Истина,
				Ложь,
				ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Ключ",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Ключ'"),
				Истина,
				Истина));
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"ИдентификаторМерчанта",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				НСтр("ru = 'Merchant Id'"),
				Истина,
				Ложь,
				ПодсказкаПоляИдентификаторМерчантаПоУмолчанию()));
		Реквизиты.Добавить(
			НовыйОписаниеРеквизита(
				"Токен",
				ОбщегоНазначения.ОписаниеТипаСтрока(1000),
				НСтр("ru = 'Токен'"),
				Истина,
				Истина));
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации участника СБП.'");
	КонецЕсли;
	
	Подсказка = СтроковыеФункции.ФорматированнаяСтрока(
		СистемаБыстрыхПлатежейКлиентСервер.ТекстПодсказкиПодключенияБезФорматирования(
			НастройкиУчастника.Наименование,
			ПараметрыПодсказки));
	
КонецПроцедуры

// Определяет идентификатор в СБП.
//
// Параметры:
//  ПлатежнаяСистема - УдалитьПеречислениеСсылка.ПлатежныеСистемы - участник СБП,
//    для которой выполняется операция.
//
// Возвращаемое значение:
//  Строка - идентификатор участника СБП.
//
// Определяет идентификатор в СБП.
//
// Параметры:
//  ПлатежнаяСистема - ПеречислениеСсылка.УдалитьПлатежныеСистемы - участник СБП,
//    для которой выполняется операция.
//
// Возвращаемое значение:
//  Строка - идентификатор участника СБП.
//
Функция ИдентификаторУчастникаСБП(ПлатежнаяСистема)
	
	Если ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Открытие Тогда
		Возврат "Otkrytie";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СКБ Тогда
		Возврат "SKB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Webmoney Тогда
		Возврат "Webmoney";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_PayMaster Тогда
		Возврат "PayMaster";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_1ССБП Тогда
		Возврат "1C-SBP";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Промсвязьбанк
		Или ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.УдалитьСБП_Промсвязьбанк Тогда
		Возврат "PSB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РусскийСтандарт Тогда
		Возврат "RusskijStandart";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Райффайзенбанк Тогда
		Возврат "Raiffeisen";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ГЕНБАНК Тогда
		Возврат "GENBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Тинькофф Тогда
		Возврат "Tinkoff";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ТочкаБанк Тогда
		Возврат "Tochka";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КубаньКредит Тогда
		Возврат "KubanKredit";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ФОРАБАНК Тогда
		Возврат "FORABANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_CDEKPay Тогда
		Возврат "SDEKFinance";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЮгИнвестбанк Тогда
		Возврат "YUGInvestbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЮМани Тогда
		Возврат "YUMani";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Совкомбанк Тогда
		Возврат "Sovkombank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БАНКУРАЛСИБ Тогда
		Возврат "BANKURALSIB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Экспобанк Тогда
		Возврат "Ekspobank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АбсолютБанк Тогда
		Возврат "AbsolyutBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкЛевобережный Тогда
		Возврат "Levoberezhnyj";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БланкБанк Тогда
		Возврат "Blanc";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБХлынов Тогда
		Возврат "KBHlynov";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ВЛАДБИЗНЕСБАНК Тогда
		Возврат "VLADBIZNESBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_НОКССБАНК Тогда
		Возврат "NOKSSBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЗемскийБанк Тогда
		Возврат "ZemskijBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_НСБанк Тогда
		Возврат "NSBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Форштадт Тогда
		Возврат "Forshtadt";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СКБПримсоцбанк Тогда
		Возврат "Primsoczbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБРостФинанс Тогда
		Возврат "KBRostFinans";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ЭсБиАйБанк Тогда
		Возврат "ABCBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АКИБАНК Тогда
		Возврат "AKIBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АлефБанк Тогда
		Возврат "AlefBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_НИКОБАНК Тогда
		Возврат "NIKOBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБАГРОПРОМКРЕДИТ Тогда
		Возврат "AGROPROMKREDIT";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БАНКОРЕНБУРГ Тогда
		Возврат "BANKORENBURG";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкСаратов Тогда
		Возврат "BankSaratov";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ХакасскийМуниципальныйБанк Тогда
		Возврат "HakasskijMunicipalny";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБАРЕСБАНК Тогда
		Возврат "Aresbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Автоградбанк Тогда
		Возврат "Avtogradbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкАкцепт Тогда
		Возврат "BankAkcept";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ТойотаБанк Тогда
		Возврат "TojotaBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБЭНЕРГОТРАНСБАНК Тогда
		Возврат "Energotransbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкВенец Тогда
		Возврат "BankVenecz";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкИТУРУП Тогда
		Возврат "ITURUP";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СИБСОЦБАНК Тогда
		Возврат "Sibsocbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МирПривилегий Тогда
		Возврат "BankMirPrivilegij";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкИнтеза Тогда
		Возврат "BankInteza";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МОРСКОЙБАНК Тогда
		Возврат "MORSKOJBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкРазвитиеСтолица Тогда
		Возврат "BankRazvitieStolica";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ТаврическийБанк Тогда
		Возврат "TavricheskijBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ПервыйИнвестиционныйБанк Тогда
		Возврат "PervyjInvesticionnyjBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МОСКОМБАНК Тогда
		Возврат "MOSKOMBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБДолинск Тогда
		Возврат "GTbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Нацинвестпромбанк Тогда
		Возврат "Nacinvestprombank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкРЕСОКредит Тогда
		Возврат "RESOKredit";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РУСНАРБАНК Тогда
		Возврат "RUSNARBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Кузнецкбизнесбанк Тогда
		Возврат "Kuzneckbiznesbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкКремлевский Тогда
		Возврат "BankKremlevski";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МеждународныйФинансовыйКлуб Тогда
		Возврат "MezhdunarodnyFinansovyClub";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Томскпромстройбанк Тогда
		Возврат "Tomskpromstrojbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкАЛЕКСАНДРОВСКИЙ Тогда
		Возврат "BankAleksandrovskij";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_ДжейЭндТиБанк Тогда
		Возврат "JAndTBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Новобанк Тогда
		Возврат "Novobank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкПриморье Тогда
		Возврат "AKBPrimore";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СолидБанк Тогда
		Возврат "SolidBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РеалистБанк Тогда
		Возврат "RealistBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АКБДержава Тогда
		Возврат "AKBDerzhava";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкНациональныйСтандарт Тогда
		Возврат "NacionalnyjStandart";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АКБЛантаБанк Тогда
		Возврат "AKBLantaBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_РНБАНК Тогда
		Возврат "RNBANK";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_АИКБЕнисейскийОбъединенныйБанк Тогда
		Возврат "EnisejskijObdinennyjbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкБЖФ Тогда
		Возврат "BankBZHF";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_КБДолинск Тогда
		Возврат "KBDolinsk";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Алтайкапиталбанк Тогда
		Возврат "Altajkapitalbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_БанкСИАБ Тогда
		Возврат "BankSIAB";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_МТСБанк Тогда
		Возврат "MTSBank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_Модульбанк Тогда
		Возврат "Modulbank";
	ИначеЕсли ПлатежнаяСистема = Перечисления.УдалитьПлатежныеСистемы.СБП_СДМБанк Тогда
		Возврат "SDMBank";
	Иначе
		Возврат СистемаБыстрыхПлатежейКлиентСервер.ИдентификаторНеизвестногоУчастника();
	КонецЕсли;
	
КонецФункции

// Выполняет преобразование параметров аутентификации в формат
// хранения и выполнения запросов к сервису.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ПараметрыАутентификации - Соответствие - настройки аутентификации в сервисе;
//  Сохранение - Булево - признак обработки сохранения данных
//
// Возвращаемое значение:
//  Структура - преобразованные настройки аутентификации.
//
Функция ПреобразоватьНастройкиАутентификации(
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		Сохранение = Ложь)
	
	НастройкиУчастника = НастройкиУчастникаСБП(ИдентификаторУчастника);
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура;
	Если НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
		ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
		ДанныеАутентификации.Вставить("accessToken", Неопределено);
		ДанныеАутентификации.Вставить("tokenType", Неопределено);
		ДанныеАутентификации.Вставить("expiresDate", Неопределено);
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		ДанныеАутентификации.Вставить("login", ПараметрыАутентификации.Получить("Логин"));
		ДанныеАутентификации.Вставить("password", ПараметрыАутентификации.Получить("Пароль"));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		ДанныеАутентификации.Вставить("token", ПараметрыАутентификации.Получить("Токен"));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1 Тогда
		ДанныеАутентификации.Вставить("key", ?(Сохранение,
			ПараметрыАутентификации.Получить("Ключ"),
			ПолучитьДвоичныеДанныеИзHexСтроки(ПараметрыАутентификации.Получить("Ключ"))));
		ДанныеАутентификации.Вставить("merchantId", ПараметрыАутентификации.Получить("ИдентификаторМерчанта"));
		ДанныеАутентификации.Вставить("ХешФункция", ХешФункция.SHA256);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	Возврат ДанныеАутентификации;
	
КонецФункции

// Выполняет сохранение настроек аутентификации в безопасном хранилище.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения
//    к Системе быстрых платеже;
//  ПараметрыАутентификации - Соответствие - настройки аутентификации;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП.
//
Процедура СохранитьНастройкиАутентификации(
		НастройкаПодключения,
		Знач ПараметрыАутентификации,
		Знач ИдентификаторУчастника) Экспорт
		
	// Обработка ошибки ввода данных аутентификации пользователем.
	Для Каждого ПараметрАутентификации Из ПараметрыАутентификации Цикл
		ПараметрыАутентификации.Вставить(
			ПараметрАутентификации.Ключ,
			УдалитьНечитаемыеСимволы(
				ПараметрАутентификации.Значение));
	КонецЦикла;
	
	НастройкиУчастника = НастройкиУчастникаСБП(ИдентификаторУчастника);
	Если НастройкиУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не определенны настройки участника СБП.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		НастройкаПодключения);
	
	Если ДанныеХранилища = Неопределено Тогда
		ДанныеХранилища = Новый Соответствие;
	КонецЕсли;
	
	// Проверим необходимость обновления сохраненных данных аутентификации
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		
		ОбновитьВерсиюДанныхАутентификации(
			НастройкаПодключения,
			ИдентификаторУчастника);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			НастройкаПодключения);
		
	КонецЕсли;
	
	Если НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		
		Если ПараметрыАутентификации.Получить("Пароль") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			ДанныеУчастника = ДанныеХранилища.Получить(ИдентификаторУчастника);
			ПараметрыАутентификации.Вставить("Пароль", ДанныеУчастника.password);
		КонецЕсли;
	
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		
		Если ПараметрыАутентификации.Получить("Токен") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			ДанныеУчастника = ДанныеХранилища.Получить(ИдентификаторУчастника);
			ПараметрыАутентификации.Вставить("Токен", ДанныеУчастника.token);
		КонецЕсли;
		
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1 Тогда
		
		Если ПараметрыАутентификации.Получить("Ключ") = СтрокаСекретныхДанныхПоУмолчанию() Тогда
			ДанныеУчастника = ДанныеХранилища.Получить(ИдентификаторУчастника);
			ПараметрыАутентификации.Вставить("Ключ", ДанныеУчастника.key);
		Иначе
			ПараметрыАутентификации.Вставить("Ключ",
				ПолучитьДвоичныеДанныеИзHexСтроки(
					ПараметрыАутентификации.Получить("Ключ")));
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации.'");
	КонецЕсли;
	
	ПараметрыАутентификации = ПреобразоватьНастройкиАутентификации(
		ИдентификаторУчастника,
		ПараметрыАутентификации,
		Истина);
	
	ДанныеХранилища.Вставить(ИдентификаторУчастника, ПараметрыАутентификации);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		НастройкаПодключения,
		ДанныеХранилища);
	
КонецПроцедуры

// Производит получение данных аутентификации
// из безопасного хранилища.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения
//    к Системе быстрых платежей;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП.
//  НастройкиУчастника - Структура - см. НастройкиУчастникаСБП.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ЗначениеНастроекАутентификации(
		НастройкаПодключения,
		ИдентификаторУчастника,
		НастройкиУчастника)
	
	Результат = Новый Соответствие;
	
	ПараметрыАутентификации = ПрочитатьПараметрыАутентификацииУчастника(НастройкаПодключения, ИдентификаторУчастника);
	
	// При переходе в облако или в АРМ данные из безопасного хранилища не мигрируют.
	// Пользователь должен самостоятельно заполнить информацию в настройках.
	Если НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT Тогда
		Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
			Результат.Вставить("Логин", ПараметрыАутентификации.login);
			Результат.Вставить("Пароль", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
			Результат.Вставить("ИдентификаторМерчанта", ПараметрыАутентификации.merchantId);
		Иначе
			Результат.Вставить("Логин", "");
			Результат.Вставить("Пароль", "");
			Результат.Вставить("ИдентификаторМерчанта", "");
		КонецЕсли;
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
			Результат.Вставить("Ключ", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
			Результат.Вставить("ИдентификаторМерчанта", ПараметрыАутентификации.merchantId);
		Иначе
			Результат.Вставить("Ключ", "");
			Результат.Вставить("ИдентификаторМерчанта", "");
		КонецЕсли;
	ИначеЕсли НастройкиУчастника.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
			Результат.Вставить("Токен", СтрокаСекретныхДанныхПоУмолчанию()); // Забивание данных *.
			Результат.Вставить("ИдентификаторМерчанта", ПараметрыАутентификации.merchantId);
		Иначе
			Результат.Вставить("Токен", "");
			Результат.Вставить("ИдентификаторМерчанта", "");
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип авторизации участника СБП.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив участников СБП, которые поддерживают заданную функциональность.
//
// Параметры:
//  КлючиПоиска  - Структура, ФиксированнаяСтруктура, Соответствие, ФиксированноеСоответствие - Ключи поиска
//   по которым необходимо отобрать участников СБП, поиск работает по логическому "И".
//    * Ключ - Строка - имя реквизита настройки участников СБП.
//    * Значение - Произвольный - значение отбора.
//
// Возвращаемое значение:
//  Массив из Строка - список участников СБП с поддержкой функциональности.
//
Функция УчастникиСБППоНастройкам(КлючиПоиска) Экспорт
	
	УчастникиСБП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	&Условия";
	
	Если КлючиПоиска.Количество()>0 Тогда
		
		МассивУсловий = Новый Массив;
		Для Каждого КлючПоиска Из КлючиПоиска Цикл
			
			МассивУсловий.Добавить("НастройкиУчастниковСБП." + КлючПоиска.Ключ + " = &" +КлючПоиска.Ключ);
			Запрос.УстановитьПараметр(КлючПоиска.Ключ, КлючПоиска.Значение);
			
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Условия",
			СтрСоединить(МассивУсловий, Символы.ПС + "И" +" "));
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условия", "ИСТИНА");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УчастникиСБП.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Возврат УчастникиСБП;
	
КонецФункции

// Возвращает настройки участника СБП.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//
// Возвращаемое значение:
//  Структура, Неопределено - данные настроек участника СБП:
//    * Наименование - Строка - наименование участника СБП;
//    * ИНН - Строка - ИНН участника СБП;
//    * ПлатежныйАгрегатор - Булево - признак того, что данный участник является платежным агрегатором;
//    * КассовыеСсылки - Булево - признак поддержки участником кассовых ссылок;
//    * СверкаВзаиморасчетов - Булево - признак поддержки участником сверки взаиморасчетов;
//    * ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП;
//    * ПодключениеКассовойСсылки - Булево - определяет доступность подключения кассовой ссылки;
//    * ПеренаправлениеПоСсылке - Булево - определяет доступность использования перенаправления по ссылке
//
Функция НастройкиУчастникаСБП(ИдентификаторУчастника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Наименование КАК Наименование,
		|	НастройкиУчастниковСБП.КассовыеСсылки КАК КассовыеСсылки,
		|	НастройкиУчастниковСБП.ИНН КАК ИНН,
		|	НастройкиУчастниковСБП.ПлатежныйАгрегатор КАК ПлатежныйАгрегатор,
		|	НастройкиУчастниковСБП.СверкаВзаиморасчетов КАК СверкаВзаиморасчетов,
		|	НастройкиУчастниковСБП.ТипАутентификации КАК ТипАутентификации,
		|	НастройкиУчастниковСБП.ПодключениеКассовойСсылки КАК ПодключениеКассовойСсылки,
		|	НастройкиУчастниковСБП.ЗапрещенВыборУчастника КАК ЗапрещенВыборУчастника,
		|	НастройкиУчастниковСБП.ПеренаправлениеПоСсылке КАК ПеренаправлениеПоСсылке
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор = &ИдентификаторУчастника";
	
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Настройки = Новый Структура;
	Настройки.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	Настройки.Вставить("КассовыеСсылки", ВыборкаДетальныеЗаписи.КассовыеСсылки);
	Настройки.Вставить("ИНН", ВыборкаДетальныеЗаписи.ИНН);
	Настройки.Вставить("ПлатежныйАгрегатор", ВыборкаДетальныеЗаписи.ПлатежныйАгрегатор);
	Настройки.Вставить("СверкаВзаиморасчетов", ВыборкаДетальныеЗаписи.СверкаВзаиморасчетов);
	Настройки.Вставить("ТипАутентификации", ВыборкаДетальныеЗаписи.ТипАутентификации);
	Настройки.Вставить("ПодключениеКассовойСсылки", ВыборкаДетальныеЗаписи.ПодключениеКассовойСсылки);
	Настройки.Вставить("ЗапрещенВыборУчастника", ВыборкаДетальныеЗаписи.ЗапрещенВыборУчастника);
	Настройки.Вставить("ПеренаправлениеПоСсылке", ВыборкаДетальныеЗаписи.ПеренаправлениеПоСсылке);
	
	Возврат Настройки;
	
КонецФункции

// Определяет участника СБП по БИК банка.
//
// Параметры:
//  БИК - Строка - идентификатор банка.
//
// Возвращаемое значение:
//  Строка - интегрированный участник СБП.
//
Функция ИнтегрированныйУчастникСБППоБИК(БИК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БИКУчастниковСБП.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
		|ГДЕ
		|	БИКУчастниковСБП.БИК = &БИК";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Идентификатор;
	
КонецФункции

// Возвращает перечень БИК участника СБП.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника СБП.
//
// Возвращаемое значение:
//  Массив из Строка - перечень БИК участника СБП.
//
Функция БИКУчастникаСБП(Идентификатор)
	
	БИКУчастника = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БИКУчастниковСБП.БИК КАК БИК
	|ИЗ
	|	РегистрСведений.БИКУчастниковСБП КАК БИКУчастниковСБП
	|ГДЕ
	|	БИКУчастниковСБП.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		БИКУчастника.Добавить(Выборка.БИК);
	КонецЦикла;
	
	Возврат БИКУчастника;
	
КонецФункции

// Обновляет настройки участников СБП.
//
// Параметры:
//  Настройки - Массив из Структура - см. ОперацияНастройкиУчастниковСБП.
//
Процедура ЗаписатьНастройкиУчастниковСБП(Настройки)
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейНастройкиУчастниковСБП = РегистрыСведений.НастройкиУчастниковСБП.СоздатьНаборЗаписей();
	НаборЗаписейБИК = РегистрыСведений.БИКУчастниковСБП.СоздатьНаборЗаписей();
	Для Каждого Настройка Из Настройки Цикл
		
		Запись = НаборЗаписейНастройкиУчастниковСБП.Добавить();
		Запись.Идентификатор = Настройка.memberId;
		Запись.Наименование = Настройка.memberName;
		Запись.ИНН = Настройка.inn;
		Запись.ПлатежныйАгрегатор = Настройка.paymentAggregator;
		Запись.КассовыеСсылки = Настройка.c2bCashRegisterPaymentSupported;
		Запись.СверкаВзаиморасчетов = Настройка.reconciliationOfSettlementsSupported;
		Запись.ПодключениеКассовойСсылки = Настройка.c2bCashRegisterReservedQrIdSupported;
		Запись.ЗапрещенВыборУчастника = Настройка.b2cDisableChoosingOfRefundDestinationBank;
		Запись.ПеренаправлениеПоСсылке = Настройка.redirectUrlSupported;
		
		Если Настройка.authorizationType = "BASIC" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC;
		ИначеЕсли Настройка.authorizationType = "BEARER" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER;
		ИначеЕсли Настройка.authorizationType = "RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT;
		ИначеЕсли Настройка.authorizationType = "HMAC_SHA256" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256;
		ИначеЕсли Настройка.authorizationType = "HMAC_SHA1" Тогда
			Запись.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1;
		КонецЕсли;
		
		Если Настройка.biks <> Неопределено Тогда
			Для Каждого БИК Из Настройка.biks Цикл
				ЗаписьБИК = НаборЗаписейБИК.Добавить();
				ЗаписьБИК.БИК = БИК;
				ЗаписьБИК.Идентификатор = Настройка.memberId;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписейНастройкиУчастниковСБП.Записать();
		НаборЗаписейБИК.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина);
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПодключения

// Определяет хост для вызова сервиса Системы быстрых платежей.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаОбменаДанными()
	
	
	Возврат "payment-gateway.1c.ru";
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Формирует заголовок для способа аутентификации hmac.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ для выполнения аутентификации;
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ЗначениеХешФункция - Строка - способ вычисления хеш-суммы.
//
// Возвращаемое значение:
//  Строка - заголовок аутентификации.
//
Функция ЗаголовокHMACАутентификации(СекретныйКлюч, ДанныеДляПодписи, ЗначениеХешФункция)
	
	Данные = "";
	Для Каждого Значение Из ДанныеДляПодписи Цикл
		
		Если Не ЗначениеЗаполнено(Значение) И Значение <> 0 Тогда
			Данные = Данные + "-";
		ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
			ЗначениеДата = ЗаписатьДатуJSON(
				Значение,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.УниверсальнаяДата);
			Данные = Данные + СтрДлина(ЗначениеДата) + ЗначениеДата;
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			ЗначениеЧисло = СтрЗаменить("" + Значение, ",", ".");
			ЗначениеЧисло = СтрЗаменить(ЗначениеЧисло, Символы.НПП, "");
			Данные = Данные + СтрДлина(ЗначениеЧисло) + ЗначениеЧисло;
		Иначе
			Данные = Данные + СтрДлина("" + Значение) + Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	СлучайноеЧислоHex = ДлинноеСлучайноеЧислоHEX();
	Данные = Данные + СтрДлина(СлучайноеЧислоHex) + СлучайноеЧислоHex;
	
	Хеш = РассчитатьHmac(
		СекретныйКлюч,
		ПолучитьДвоичныеДанныеИзСтроки(
			Данные,
			КодировкаТекста.UTF8),
		ЗначениеХешФункция);
		
	Префикс = ?(ЗначениеХешФункция = ХешФункция.SHA256, "HMACSHA256", "HMACSHA1");
	Возврат Префикс + " " + СлучайноеЧислоHex + "." + НРег(Хеш);
	
КонецФункции

// Формирует заголовок для способа аутентификации
// Resource Owner Password Credentials Grant (https://tools.ietf.org/html/rfc6749#section-4.3).
//
// Параметры:
//  ДанныеАутентификации - Структура - данные аутентификации для получения заголовка;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  Результат - Структура - результат получения заголовка.
//
Процедура СформироватьЗаголовокАутентификацииPasswordCredentialsGrant(
		ДанныеАутентификации,
		ИдентификаторУчастника,
		Результат)
	
	Если ДанныеАутентификации.expiresDate = Неопределено
		Или ДанныеАутентификации.tokenType = Неопределено
		Или ДанныеАутентификации.accessToken = Неопределено
		Или ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеАутентификации.expiresDate Тогда
		РезультатОперации = СервисСистемаБыстрыхПлатежей.ОперацияПредоставлениеУчетныхДанных(
			ДанныеАутентификации.login,
			ДанныеАутентификации.password,
			ИдентификаторУчастника);
		Если Не ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			ДанныеАутентификации.accessToken = РезультатОперации.Токен;
			ДанныеАутентификации.tokenType   = РезультатОперации.ТипТокена;
			ДанныеАутентификации.expiresDate = ТекущаяУниверсальнаяДатаВМиллисекундах()
				+ РезультатОперации.ИстеченияСрока * 1000;
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Аутентификация = ""
		+ ДанныеАутентификации.tokenType
		+ " "
		+ ДанныеАутентификации.accessToken;
	
КонецПроцедуры

#КонецОбласти

#Область HMAC

// Формирование подписи для аутентификации (HMAC).
// См. RFC 2104 https://www.ietf.org/rfc/rfc2104.txt.
//
// Параметры:
//  СекретныйКлюч - ДвоичныеДанные - секретный ключ шифрования.
//  Данные - ДвоичныеДанные  - данные шифрования.
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
// 
// Возвращаемое значение:
//  Строка - сформированный hmac.
//
Функция РассчитатьHmac(Знач СекретныйКлюч, Знач Данные, Знач ХешФункция)
	
	РазмерБлока = 64;
	
	Если СекретныйКлюч.Размер() > РазмерБлока Тогда
		СекретныйКлюч = Хешировать(СекретныйКлюч, ХешФункция);
	КонецЕсли;
	
	ПустыеДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("");
	СекретныйКлюч = ОбрезатьДвоичныеДанныеСлева(СекретныйКлюч, РазмерБлока);
	
	КлючВБлоке1 = ЗабитьДвоичныеДанныеСправа(СекретныйКлюч, РазмерБлока, "00");
	
	Блок0x36 = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "36");
	КлючВБлоке2 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x36);
	
	Блок0x5C = ЗабитьДвоичныеДанныеСправа(ПустыеДвоичныеДанные, РазмерБлока, "5C");
	КлючВБлоке3 = ОбъединитьДвоичныеДанныеXOR(КлючВБлоке1, Блок0x5C);
	
	КлючИДанные = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке2, Данные);
	ДанныеХеш = СоединитьДвоичныеДанныеПоЗначениям(КлючВБлоке3, Хешировать(КлючИДанные, ХешФункция));
	Результат = Хешировать(ДанныеХеш, ХешФункция);
	
	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(Результат);
	
КонецФункции

// Применяет хеш функцию к переданным данным.
//
// Параметры:
//  Значение - ДвоичныеДанные  - данные хеширования;
//  ХешФункция - ХешФункция  - хеш функция, например ХешФункция.SHA256.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - хеш сумма;
//
Функция Хешировать(Знач Значение, Знач ХешФункция)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция);
	ХешированиеДанных.Добавить(Значение);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

// Объединяет несколько объектов типа ДвоичныеДанные в один.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат соединения.
//
Функция СоединитьДвоичныеДанныеПоЗначениям(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	Массив = Новый Массив;
	Массив.Добавить(ДвоичныеДанные1);
	Массив.Добавить(ДвоичныеДанные2);
	
	Возврат СоединитьДвоичныеДанные(Массив);
	
КонецФункции

// Дополняет двоичные данные переданным блоком.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  Длина - Число - длина дополнения;
//  Строка16 - Строка - строка дополнения;
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат обработки.
//
Функция ЗабитьДвоичныеДанныеСправа(Знач ДвоичныеДанные, Знач Длина, Знач Строка16)
	
	Значение = ПолучитьДвоичныеДанныеИзHexСтроки(Строка16);
	РазмерБлока = Длина - ДвоичныеДанные.Размер();
	
	Блок = Значение;
	МассивБлока = Новый Массив;
	МассивБлока.Добавить(Значение);
	Пока Блок.Размер() < РазмерБлока Цикл
		МассивБлока.Добавить(Блок);
		Блок = СоединитьДвоичныеДанные(МассивБлока);
	КонецЦикла;
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(ДвоичныеДанные);
	МассивБлоков = РазделитьДвоичныеДанные(Блок, РазмерБлока);
	Если МассивБлоков.Количество() > 0 Тогда
		МассивДанных.Добавить(МассивБлоков[0]);
	КонецЕсли;
	Результат = СоединитьДвоичныеДанные(МассивДанных);
	
	Возврат Результат;
	
КонецФункции

// Производит операцию исключающего ИЛИ для двоичных данных.
//
// Параметры:
//  ДвоичныеДанные1 - ДвоичныеДанные - первое значение;
//  ДвоичныеДанные2 - ДвоичныеДанные - второе значение.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбъединитьДвоичныеДанныеXOR(Знач ДвоичныеДанные1, Знач ДвоичныеДанные2)
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	ЧтениеДанных1 = Новый ЧтениеДанных(ДвоичныеДанные1);
	ЧтениеДанных2 = Новый ЧтениеДанных(ДвоичныеДанные2);
	
	Буфер1 = ЧтениеДанных1.ПрочитатьВБуферДвоичныхДанных();
	Буфер2 = ЧтениеДанных2.ПрочитатьВБуферДвоичныхДанных();
	
	Если Буфер1.Размер > Буфер2.Размер Тогда
		Буфер1.ЗаписатьПобитовоеИсключительноеИли(0, Буфер2, Буфер2.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер1);
	Иначе 
		Буфер2.ЗаписатьПобитовоеИсключительноеИли(0, Буфер1, Буфер1.Размер);
		ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер2);
	КонецЕсли;
	
	Результат = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

// Выполняет удаление заданного количества байт из двоичных данных.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - значение для обработки;
//  КоличествоБайт - Число - количество байт для удаления.
//
// Возвращаемое значение:
//  ДвоичныеДанные - результат операции.
//
Функция ОбрезатьДвоичныеДанныеСлева(Знач ДвоичныеДанные, Знач КоличествоБайт)
	
	ЧтениеДанных = Новый ЧтениеДанных(ДвоичныеДанные);
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	Буфер = ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(КоличествоБайт);
	ЗаписьДанных.ЗаписатьБуферДвоичныхДанных(Буфер);
	
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

// Создает случайное число длиной 16-32 разряда
// и переводит его в hex систему счисления.
//
// Возвращаемое значение:
//  Строка - случайное число в hex.
//
Функция ДлинноеСлучайноеЧислоHEX()
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	ДлинаЧисла = ГенераторСлучайныхЧисел.СлучайноеЧисло(16, 32);
	
	// Для инициализации первого разряда исключается 0.
	СлучайноеЧисло = "" + ГенераторСлучайныхЧисел.СлучайноеЧисло(1, 9);
	
	// Последовательное формирование случайного числа по разрядам.
	Сч = 1;
	Пока Сч < ДлинаЧисла Цикл
		СлучайноеЧисло = СлучайноеЧисло + ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 9);
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ПреобразоватьЧислоВHEX(Число(СлучайноеЧисло));
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Производит чтение кода ошибки сервиса из тела ответа.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ОпределитьКодОшибкиСервиса(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  {
	//  "type": "string",
	//  "title": "string",
	//  "status": "string",
	//  "detail": "string",
	//  "instance": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		Возврат Результат.type;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ТехническаяПоддержка

// Формирует информацию для тех. поддержки, которую можно
// использовать для оперативного расследования ошибок.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//
// Возвращаемое значение:
//  Строка - информация для технической поддержки.
//
Функция ИнформацияДляТехническойПоддержки(ДокументОплаты, НастройкаПодключения) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Настройки подключения'")
		+ Символы.ПС
		+ Символы.ПС;
	
	РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаПодключения,
		"ИдентификаторУчастника, ИдентификаторМерчанта, Родитель.Наименование");
	
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Участник СБП:'")
		+ РеквизитыНастройки.РодительНаименование
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор участника СБП:'")
		+ РеквизитыНастройки.ИдентификаторУчастника
		+ Символы.ПС;
	ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Идентификатор мерчанта:'")
		+ РеквизитыНастройки.ИдентификаторМерчанта
		+ Символы.ПС
		+ Символы.ПС;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2b");
		Если Не МодульПереводыСБПc2b.ПереводыСБПДоступны() Тогда
			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		МодульИдентификаторыОперацийСБПc2b = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.ИдентификаторыОперацийСБПc2b");
		ТекстСообщения = ТекстСообщения + МодульИдентификаторыОперацийСБПc2b.ИнформацияДляТехническойПоддержки(
			ДокументОплаты);
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет идентификатор поставляемых данных.
//
// Возвращаемое значение:
//  Строка - идентификатор поставляемых данных.
//
Функция ВидПоставляемыхДанныхСБП()
	
	Возврат "SBPMemebersSettings";
	
КонецФункции

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Переводы СБП'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Удаляет нечитаемые символы из строки.
//
// Параметры:
//  ИсходнаяСтрока - Строка - данные аутентификации, которые необходимо обработать.
//
Функция УдалитьНечитаемыеСимволы(Знач ИсходнаяСтрока) Экспорт
	
	НечитаемыеСимволы = Новый Массив();
	НечитаемыеСимволы.Добавить(Символы.ВК);
	НечитаемыеСимволы.Добавить(Символы.ВТаб);
	НечитаемыеСимволы.Добавить(Символы.НПП);
	НечитаемыеСимволы.Добавить(Символы.ПС);
	НечитаемыеСимволы.Добавить(Символы.ПФ);
	НечитаемыеСимволы.Добавить(Символы.Таб);
	НечитаемыеСимволы.Добавить(Символ(182)); // символ параграфа
	НечитаемыеСимволы.Добавить(Символ(176)); // символ градуса
	НечитаемыеСимволы.Добавить(" ");
	
	Для Каждого НечитаемыйСимвол Из НечитаемыеСимволы Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, НечитаемыйСимвол, "");
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Формирует URL страницы подключения к Системе быстрых платежей.
//
// Параметры:
//  Идентификатор - Строка - идентификатор участника.
//
// Возвращаемое значение:
//  Строка - адрес страницы подключения к СБП.
//
Функция АдресСтраницыПодключенияКСБП(Идентификатор)
	
	Возврат "https://its.1c.ru/sbp?memberId=" + Идентификатор;
	
КонецФункции

// Выполняет чтение (и при необходимости обновление) данных аутентификации по настройке подключения
// и идентификатору участника.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ИдентификаторУчастника - Строка - идентификатор участника.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ПрочитатьПараметрыАутентификацииУчастника(НастройкаПодключения, ИдентификаторУчастника)
	
	ДанныеХранилища = ПрочитатьПараметрыАутентификации(НастройкаПодключения, ИдентификаторУчастника);
	
	Возврат ДанныеХранилища.Получить(ИдентификаторУчастника);
	
КонецФункции

// Выполняет чтение (и при необходимости обновление) данных аутентификации по настройке подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ИдентификаторУчастника - Строка - идентификатор участника.
//
// Возвращаемое значение:
//  Структура - данные аутентификации.
//
Функция ПрочитатьПараметрыАутентификации(НастройкаПодключения, ИдентификаторУчастника)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		НастройкаПодключения);
	
	Если ДанныеХранилища = Неопределено Тогда
		ДанныеХранилища = Новый Соответствие;
	КонецЕсли;
	
	// Проверим необходимость обновления сохраненных данных аутентификации
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		
		ОбновитьВерсиюДанныхАутентификации(
			НастройкаПодключения,
			ИдентификаторУчастника);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			НастройкаПодключения);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеХранилища;
	
КонецФункции

#КонецОбласти

#КонецОбласти
