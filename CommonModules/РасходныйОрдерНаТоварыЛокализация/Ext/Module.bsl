#Область ПрограммныйИнтерфейс

// Обработка проверки заполнения. Проверка заполнения кодов маркировки  тольк осообщает о несоответсвии, 
// но НЕ блокирует обработку документа.
// 
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложения
//  Отказ - Булево
//  ПроверяемыеРеквизиты - Массив из Строка - Проверяемые реквизиты
Процедура ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт 
	
	//++ Локализация
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ОтказПроверки = Ложь;
	ПроверкаУникальностиМаркируемыхТоваров(ЭтотОбъект, ОтказПроверки);
	
	Если ОтказПроверки Тогда
		Возврат;
	КонецЕсли; 
	
	ПроверкаЗаполненияМаркируемойПродукции(ЭтотОбъект, ОтказПроверки);
	
	//-- Локализация
	
КонецПроцедуры

// Установить условное оформление.
// 
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения -
Процедура УстановитьУсловноеОформление(ФормаДокумента) Экспорт

	//++ Локализация
	ИмяРеквизитаПодбораМП = "КоманднаяПанельПроверкаИПодборПродукцииГосИС";
	ИмяРеквизитаКолонкиСтатусаМП = "ОтгружаемыеТоварыСтатусПроверкиГосИС";
	
	Если ФормаДокумента.Элементы.Найти(ИмяРеквизитаПодбораМП) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//
	
	ФормаДокумента.Элементы[ИмяРеквизитаПодбораМП].Видимость = 
		СкладскиеОперацииДляПодбораИСМП().НайтиПоЗначению(ФормаДокумента.Объект.СкладскаяОперация) <> Неопределено;
		
	// 
	
	Если ФормаДокумента.Элементы.Найти(ИмяРеквизитаКолонкиСтатусаМП) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Элемент = ФормаДокумента.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ФормаДокумента.Элементы[ИмяРеквизитаКолонкиСтатусаМП].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СкладскаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СкладскиеОперацииДляПодбораИСМП();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	//-- Локализация
	
КонецПроцедуры

#Область МаркируемаяПродукция

// Определяет ведение учета маркируемой продукции.
// 
// Возвращаемое значение:
//  Булево - Используется маркируемая продукция
Функция ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Возврат СкладыЛокализация.ИспользуетсяМаркируемаяПродукция();
	
КонецФункции

Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки = Неопределено, Инициализация = Ложь) Экспорт
	
	//++ Локализация
	Если Настройки = Неопределено Тогда
		Настройки = ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаРасходногоОрдера();
	КонецЕсли;
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки, Инициализация);
	//-- Локализация
	
КонецПроцедуры

// Установить признак использования маркируемой продукции.
// 
// Параметры:
//  Форма - см. СкладыЛокализация.УстановитьПризнакИспользованияМаркируемойПродукции.Форма
Процедура УстановитьПризнакИспользованияМаркируемойПродукции(Форма) Экспорт
	
	СкладыЛокализация.УстановитьПризнакИспользованияМаркируемойПродукции(Форма);
	
КонецПроцедуры

// Определение признака маркируемая продукция текста запроса.
// 
// Параметры:
//  ПутьКПолюНоменклатура -Строка -Путь к полю номенклатура
// 
// Возвращаемое значение:
//  Строка - Определение признака маркируемая продукция текста запроса
Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	Результат = "";
	//++ Локализация
	Результат = ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура);
	//-- Локализация
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область КонтрольЗаполнения

//++ Локализация

#Область КонтрольНоменклатурыПоРаспоряжениям

// Контроль товарного состава распоряжений. На текущий момент действует ограничение:
// одна номенклатурная позиция ордера может присутствовать только в одном распоряжении этого ордера.
// Параметры:
//	ЭтотОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//	Отказ - Булево - возвращаемый параметр
Процедура ПроверкаУникальностиМаркируемыхТоваров(ЭтотОбъект, Отказ)
	
	Ошибки = Неопределено;
	
	КонтрольныеТипыДокументов = ТипыДокументовБезПовторенияТоваров();
	
	ИмяТаблицыТовары = "ТоварыПоРаспоряжениям";
	
	ОсобенностьУчета = Новый Массив;
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСМП.ВидыПродукцииОбязательнойМаркировки() Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Если Не ОсобенностьУчета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросМаркируемыхТоваров = Новый Запрос;
	ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", ЭтотОбъект[ИмяТаблицыТовары].Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ЗапросМаркируемыхТоваров.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	ЗапросМаркируемыхТоваров.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)
	|	И Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)";
	ПроверяемыеТовары = ЗапросМаркируемыхТоваров.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПараметрыУказанияСерий = Документы[ЭтотОбъект.Ссылка.Метаданные().Имя].ПараметрыУказанияСерий(ЭтотОбъект)[ИмяТаблицыТовары];
	
	Для каждого ПроверяемыйТовар Из ПроверяемыеТовары Цикл
		
		ОтборПоТоварам = Новый Структура("Номенклатура",ПроверяемыйТовар);
		СтрокиТаблицы = ЭтотОбъект[ИмяТаблицыТовары].НайтиСтроки(ОтборПоТоварам);
		Для каждого СтрокаТовары Из СтрокиТаблицы Цикл
		
			ПроверитьСерии =
				Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий)
				И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрокаТовары, ПараметрыУказанияСерий);
			ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(ПроверитьСерии);
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
			
			СтрокиТоваров = ЭтотОбъект[ИмяТаблицыТовары].НайтиСтроки(ОтборПоПолям);	// массив из СтрокаТабличнойЧасти
			ЗначимыеРаспоряжения = Новый Массив;
			Для каждого Элем Из СтрокиТоваров Цикл
				
				ТекРаспоряжение = Элем.Распоряжение;
				Если КонтрольныеТипыДокументов.Найти(ТипЗнч(ТекРаспоряжение)) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ЗначимыеРаспоряжения.Найти(ТекРаспоряжение) = Неопределено Тогда
					ЗначимыеРаспоряжения.Добавить(ТекРаспоряжение);
				КонецЕсли; 
				
				Если ЗначимыеРаспоряжения.Количество() > 1 Тогда
					
					Шаблон = НСтр("ru = 'Одинаковый товар %1 в распоряжениях %2 и %3'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						Элем.Номенклатура,
						ЗначимыеРаспоряжения[0],
						ЗначимыеРаспоряжения[1]);
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						СтрШаблон("Объект.%1[%%1].Распоряжение",ИмяТаблицыТовары),
						ТекстОшибки,
						"",
						Элем.НомерСтроки-1);
						
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
					
					Возврат;
		
				КонецЕсли;
				
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЦикла; 
			
КонецПроцедуры

Функция ТипыДокументовБезПовторенияТоваров()

	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Возврат ТипыДокументов;
	

КонецФункции // ТипыДокументовБезПовторенияТоваров()

#КонецОбласти 


#Область СопоставлениеКоличестваМарок
	
// Параметры:
//	ЭтотОбъект - ДокументОбъект.РасходныйОрдерНаТовары
//	Отказ - Булево
Процедура ПроверкаЗаполненияМаркируемойПродукции(ЭтотОбъект, Отказ)
	
	СтатусыКонтроля = СтатусыКонтроляМаркировки();
	СкладскиеОперацииКонтроля = СкладскиеОперацииКонтроляМаркировки(); 
	Если ТипЗнч(ЭтотОбъект) <> Тип("ДокументОбъект.РасходныйОрдерНаТовары")
		ИЛИ СкладскиеОперацииКонтроля.Найти(ЭтотОбъект.СкладскаяОперация) = Неопределено
		ИЛИ СтатусыКонтроля.Найти(ЭтотОбъект.Статус) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияИСМП.ИспользуетсяМаркируемаяПродукция() Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыТоваров = Новый Структура;
	ПараметрыТоваров.Вставить("ИмяТаблицыТовары","ТоварыПоРаспоряжениям");
	ПараметрыТоваров.Вставить("ИмяПоляТовары","Номенклатура");
	ПараметрыТоваров.Вставить("ИмяПараметраУказанияСерий","ТоварыПоРаспоряжениям");
	ИнтеграцияИСУТ.ПроверитьЗаполнениеАкцизныхМарок(ЭтотОбъект,Отказ,,ПараметрыТоваров);
	
КонецПроцедуры

Функция СтатусыКонтроляМаркировки()
	
	СтатусыКонтроля = Новый Массив;
	СтатусыКонтроля.Добавить(Перечисления.СтатусыРасходныхОрдеров.Проверен);
	СтатусыКонтроля.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	СтатусыКонтроля.Добавить(Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	
	Возврат СтатусыКонтроля;
	
КонецФункции

Функция СкладскиеОперацииКонтроляМаркировки()

	СкладскиеОперацииКонтроля = Новый Массив;
	СкладскиеОперацииКонтроля.Добавить(Перечисления.СкладскиеОперации.КонтрольОтгрузки);
	СкладскиеОперацииКонтроля.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	СкладскиеОперацииКонтроля.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу);
	
	Возврат СкладскиеОперацииКонтроля;
	
КонецФункции

Функция СкладскиеОперацииДляПодбораИСМП()

	Результат = Новый СписокЗначений;
	
	Результат.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	Результат.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику);
	
	Возврат Результат;

КонецФункции // СкладскиеОперацииДляПодбораИСМП()
 
#КонецОбласти 

//-- Локализация

#КонецОбласти

#КонецОбласти
