
#Область ПрограммныйИнтерфейс

// Дополняет базовые данные по штрихкодам спецификой алкогольной продукции.
//
// Параметры:
//  ДанныеПоШтрихкодам - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ПараметрыДополнения   - Неопределено - Поддержка обратной совместимости.
//                        - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияВложенныхШтрихкодовУпаковок.
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения = Неопределено) Экспорт

	ШтрихкодыУпаковок = ШтрихкодыУпаковокДляФормированияСпецифики(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	Если ШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпецификаАкцизныхМарок = Неопределено;
	Если ШтрихкодыУпаковок.Количество() > 0 Тогда
		СпецификаАкцизныхМарок = СпецификаАкцизныхМарок(ШтрихкодыУпаковок, ПараметрыСканирования);
	КонецЕсли;

	ЗаполнитьТаблицуДанныеКодовМаркировкиСпецификой(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, СпецификаАкцизныхМарок);
	ЗаполнитьТаблицуДанныеКодовМаркировкиОписаниемНоменклатуры(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ЗаполнитьДанныеДереваУпаковокСпецификой(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	КонецЕсли;
	
	ДополнитьДанныеПоШтрихкодамПараметрамиДополнения(
		ДанныеПоШтрихкодам,
		ПараметрыСканирования,
		ПараметрыДополнения);
	
КонецПроцедуры

Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования = Неопределено, ДанныеКодовМаркировки = Неопределено, ТребуетсяЧастичноеВыбытие = Неопределено) Экспорт
	
	ОбязательныеКолонки = Новый Структура;
	// В отличии от ДереваУпаковок колонка АлкогольнаяПродукция имеет ссылочный тип
	ОбязательныеКолонки.Вставить("АлкогольнаяПродукция",    Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	// В отличии от ДереваУпаковок колонка КодАлкогольнойПродукции имеет строковый тип
	ОбязательныеКолонки.Вставить("КодАлкогольнойПродукции", Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("НомерМарки",              Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("СерияМарки",              Новый ОписаниеТипов("Строка"));
	// В отличии от ДереваУпаковок колонка Справка2 имеет ссылочный тип
	ОбязательныеКолонки.Вставить("Справка2",                Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ОбязательныеКолонки.Вставить("Справки2",                Новый ОписаниеТипов("Массив"));
	ОбязательныеКолонки.Вставить("ТипМарки",                Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("Статус",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыАкцизныхМарок"));
	ОбязательныеКолонки.Вставить("ТребуетсяУточнениеЧастичногоВыбытия", Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("КоличествоАкцизныхМарок",             Новый ОписаниеТипов("Число"));
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ТребуетсяЧастичноеВыбытие = Неопределено Тогда
		ТребуетсяЧастичноеВыбытие = ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам);
	КонецЕсли;
	
	Если ТребуетсяЧастичноеВыбытие Тогда
		
		ТипыЧислоИБулево = Новый Массив();
		ТипыЧислоИБулево.Добавить("Булево");
		ТипыЧислоИБулево.Добавить("Число");
		
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытие",                    Новый ОписаниеТипов("Булево"));
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытиеВариантУчета",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
		ОбязательныеКолонки.Вставить("ЕмкостьПотребительскойУпаковки",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытиеВыведено",            ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытиеОстаток",             Новый ОписаниеТипов(ТипыЧислоИБулево));
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Новый ОписаниеТипов("Булево"));
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ОбязательныеКолонки.Вставить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ОбязательныеКолонки.Вставить("ВыбытиеБутылки",                      Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИС.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДанныеКодовМаркировки, ОбязательныеКолонки);
	
КонецПроцедуры

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
// 
// Возвращаемое значение:
//  Массив Из Строка - Добавленные колонки
// 
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок"
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Функция НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("Количество",                                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоАкцизныхМарок",                     Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПотребительскихУпаковок",           Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоГрупповыхУпаковок",                 Новый ОписаниеТипов("Число"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", Новый ОписаниеТипов("Число"));
	
	ДобавленныеКолонки = ШтрихкодированиеОбщегоНазначенияИС.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияОбязательныхКолонок);
	
	Возврат ДобавленныеКолонки;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДанных, СтрокаДанныхДополнительно, ПараметрыСканирования) Экспорт
	
	Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
		
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаДанных.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции);
		Если ДанныеРазбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора);
		
		СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		
	КонецЕсли;
	
	Если СтрокаДанныхДополнительно <> Неопределено Тогда
		СтрокаДанныхДополнительно.GTIN = СтрокаДанных.GTIN;
		СтрокаДанныхДополнительно.EAN  = СтрокаДанных.EAN;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных)
	
	Если ТипЗнч(СтрокаДерева.ТипУпаковки) = Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаАлкогольнойПродукции") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Иначе
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = Неопределено Тогда
			СтрокаДерева.Номенклатура = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		КонецЕсли;
		
		Если СтрокаДерева.Характеристика = Неопределено Тогда
			СтрокаДерева.Характеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		Если СтрокаДерева.Серия = Неопределено Тогда
			СтрокаДерева.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
		
	Иначе
		
		ПроверятьНоменклатуру   = Истина;
		ПроверятьХарактеристику = Истина;
		ПроверятьСерию          = Истина;
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Серия          = Неопределено;
		
		ТребуетВзвешивания       = Неопределено;
		ПроизвольнаяЕдиницаУчета = Неопределено;
		МаркируемаяПродукция     = Неопределено;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если ПроверятьНоменклатуру Тогда
				Если Номенклатура = Неопределено Тогда
					Номенклатура = Строка.Номенклатура;
				ИначеЕсли Номенклатура <> Строка.Номенклатура Тогда
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьХарактеристику Тогда
				Если Характеристика = Неопределено Тогда
					Характеристика = Строка.Характеристика;
				ИначеЕсли Характеристика <> Строка.Характеристика Тогда
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьСерию Тогда
				Если Серия = Неопределено Тогда
					Серия = Строка.Серия;
				ИначеЕсли Серия <> Строка.Серия Тогда
					Серия = Неопределено;
					ПроверятьСерию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТребуетВзвешивания       = Строка.ТребуетВзвешивания;
			ПроизвольнаяЕдиницаУчета = Строка.ПроизвольнаяЕдиницаУчета;
			МаркируемаяПродукция     = Строка.МаркируемаяПродукция;
			
			Если Не ПроверятьНоменклатуру И Не ПроверятьХарактеристику И Не ПроверятьСерию Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПроверятьНоменклатуру Или Не ПроверятьХарактеристику Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		Иначе
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
				СтрокаДерева.Номенклатура   = Номенклатура;
				СтрокаДерева.Характеристика = Характеристика;
				СтрокаДерева.Серия          = Серия;
				
				СтрокаДерева.ТребуетВзвешивания       = ТребуетВзвешивания;
				СтрокаДерева.ПроизвольнаяЕдиницаУчета = ПроизвольнаяЕдиницаУчета;
				СтрокаДерева.МаркируемаяПродукция     = МаркируемаяПродукция;
				
			Иначе
				
				СтрокаДерева.Номенклатура   = Неопределено;
				СтрокаДерева.Характеристика = Неопределено;
				СтрокаДерева.Серия          = Неопределено;
				
				СтрокаДерева.ТребуетВзвешивания       = Ложь;
				СтрокаДерева.ПроизвольнаяЕдиницаУчета = Ложь;
				СтрокаДерева.МаркируемаяПродукция     = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		СтрокаДанных.ТипУпаковки = СтрокаДерева.ТипУпаковки;
		
		СтрокаДанных.Номенклатура   = СтрокаДерева.Номенклатура;
		СтрокаДанных.Характеристика = СтрокаДерева.Характеристика;
		СтрокаДанных.Серия          = СтрокаДерева.Серия;
		
		СтрокаДанных.ТребуетВзвешивания       = СтрокаДерева.ТребуетВзвешивания;
		СтрокаДанных.ПроизвольнаяЕдиницаУчета = СтрокаДерева.ПроизвольнаяЕдиницаУчета;
		СтрокаДанных.МаркируемаяПродукция     = СтрокаДерева.МаркируемаяПродукция;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	ЗаполняемыеКолонки   = ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки;
	ЕстьРодитель         = СтрокаДерева.Родитель <> Неопределено;
	НетДочернихЭлементов = СтрокаДерева.Строки.Количество() = 0;
	
	Если ЗаполняемыеКолонки.ЗаполнятьНоменклатуру И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Если ЕстьРодитель
			И ЗначениеЗаполнено(СтрокаДерева.Родитель.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Родитель, ЗаполняемыеКолонки.КолонкиНоменклатуры);
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДерева.Родитель, ЗаполняемыеКолонки.КолонкиНоменклатуры);
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеКолонки.ЗаполнятьКоличество И НетДочернихЭлементов Тогда
		Если ЗначениеЗаполнено(СтрокаДанных.КоличествоПотребительскихУпаковок)
			Или ЗначениеЗаполнено(СтрокаДанных.Количество) Тогда
			СтрокаДерева.Количество                                = СтрокаДанных.Количество;
			СтрокаДерева.КоличествоАкцизныхМарок                   = СтрокаДанных.КоличествоАкцизныхМарок;
			СтрокаДерева.КоличествоПотребительскихУпаковок         = СтрокаДанных.КоличествоПотребительскихУпаковок;
			СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			СтрокаДерева.Коэффициент                               = СтрокаДанных.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗаполняемыеКолонки.КолонкиСлужебные) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиСлужебные);
	КонецЕсли;
	
	ЗаполненныеКолонки = Новый Массив;
	Для Каждого ИмяКолонки Из ЗаполняемыеКолонки.Прочие Цикл
		
		ЗначениеКолонки = СтрокаДанных[ИмяКолонки];
		Если ЗначениеЗаполнено(ЗначениеКолонки)
			И ЗначениеКолонки <> СтрокаДерева[ИмяКолонки] Тогда
			СтрокаДерева[ИмяКолонки] = ЗначениеКолонки;
			ЗаполненныеКолонки.Добавить(ИмяКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ЗаполняемыеКолонки.КолонкиДанныеСервиса) Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.Статус)
			И Не ЗначениеЗаполнено(СтрокаДерева.Статус) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиДанныеСервиса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		СтрокаДерева.КоличествоАкцизныхМарок = 1;
		СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
		Если ЗначениеЗаполнено(СтрокаДерева.КоличествоПоДаннымИБ) Тогда
			ЗаполнятьКоличество = Истина;
			Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
					СтрокаДерева.ВидПродукции,
					ПараметрыЗаполнения.ПараметрыСканирования.Операция)
				И ПараметрыЗаполнения.ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ЧастичноеВыбытие")
				И СтрокаДерева.ЧастичноеВыбытие Тогда
				ЗаполнятьКоличество = Ложь;
			КонецЕсли;
			Если ЗаполнятьКоличество Тогда
				СтрокаДерева.Количество = СтрокаДерева.КоличествоПоДаннымИБ;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		// Количество загружено из справочника. Актуально для детализации: Короба с групповыми упаковками
		Если СтрокаДерева.Строки.Количество() = 0
			И ЗначениеЗаполнено(СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
			// Количество групповых упаковок можно расчитать по данным GTIN
			СтрокаДерева.КоличествоАкцизныхМарок           = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
			СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
			СтрокаДерева.Количество                        = СтрокаДерева.КоличествоПоДаннымИБ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоПотребительскихУпаковок = СтрокаДерева.Родитель.КоличествоПотребительскихУпаковок
		                                                        + СтрокаДерева.КоличествоПотребительскихУпаковок;
		
		СтрокаДерева.Родитель.КоличествоАкцизныхМарок = СтрокаДерева.Родитель.КоличествоАкцизныхМарок
		                                              + СтрокаДерева.КоличествоАкцизныхМарок;
		
		Если СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
			СтрокаДерева.Родитель.Количество = СтрокаДерева.Родитель.Количество
			                                 + СтрокаДерева.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		СтрокаДанных.КоличествоАкцизныхМарок           = СтрокаДерева.КоличествоАкцизныхМарок;
		СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковок;
		СтрокаДанных.Количество                        = СтрокаДерева.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

// Вынести в модуль
Процедура ПараметрыСлиянияДанных(ПараметрыЗаполнения, Приемник, Источник) Экспорт
	
	Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
		
		ИменаКолонокДляЗаполнения = ШтрихкодированиеОбщегоНазначенияИС.ИменаКолонокДляЗаполнения();
		
		ЗаполняемыеКолонки = Новый Структура;
		ЗаполняемыеКолонки.Вставить("ЗаполнятьНоменклатуру", Ложь);
		ЗаполняемыеКолонки.Вставить("ЗаполнятьКоличество",   Ложь);
		ЗаполняемыеКолонки.Вставить("КолонкиНоменклатуры",   "");
		ЗаполняемыеКолонки.Вставить("КолонкиДанныеСервиса",  "");
		ЗаполняемыеКолонки.Вставить("КолонкиСлужебные",      "");
		ЗаполняемыеКолонки.Вставить("Прочие",                Новый Массив);
		
		ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = ЗаполняемыеКолонки;
		
		КолонкиНоменклатуры  = Новый Массив;
		КолонкиСлужебные     = Новый Массив;
		КолонкиДанныеСервиса = Новый Массив;
		
		КолонкиДерева = Приемник.Колонки;
		Для Каждого Колонка Из Источник.Колонки Цикл
			
			ИмяКолонки = Колонка.Имя;
			
			Если КолонкиДерева.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Исключения[ИмяКолонки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоКолонкаНоменклатурыИКоличества = ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества[ИмяКолонки] <> Неопределено;
			ЭтоДобавленнаяКолонка = ПараметрыЗаполнения.Кэш.ДобавленныеКолонки[ИмяКолонки] <> Неопределено;
			Если ПараметрыЗаполнения.Кэш.ТолькоПересчетНоменклатурыИКоличества
				И Не ЭтоКолонкаНоменклатурыИКоличества И Не ЭтоДобавленнаяКолонка Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Номенклатура[ИмяКолонки] <> Неопределено Тогда
				ЗаполняемыеКолонки.ЗаполнятьНоменклатуру = Истина;
				КолонкиНоменклатуры.Добавить(ИмяКолонки);
			ИначеЕсли ИменаКолонокДляЗаполнения.Количество[ИмяКолонки] <> Неопределено Тогда
				ЗаполняемыеКолонки.ЗаполнятьКоличество = Истина;
			ИначеЕсли ИменаКолонокДляЗаполнения.Служебные[ИмяКолонки] <> Неопределено Тогда
				КолонкиСлужебные.Добавить(ИмяКолонки);
			ИначеЕсли ИменаКолонокДляЗаполнения.ДанныеСервиса[ИмяКолонки] <> Неопределено Тогда
				КолонкиДанныеСервиса.Добавить(ИмяКолонки);
			Иначе
				ЗаполняемыеКолонки.Прочие.Добавить(ИмяКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполняемыеКолонки.КолонкиНоменклатуры  = СтрСоединить(КолонкиНоменклатуры, ",");
		ЗаполняемыеКолонки.КолонкиСлужебные     = СтрСоединить(КолонкиСлужебные, ",");
		ЗаполняемыеКолонки.КолонкиДанныеСервиса = СтрСоединить(КолонкиДанныеСервиса, ",");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для обувной продукции.
//
// Параметры:
//  СтрокаВерхнегоУровня - СтрокаДереваЗначений - Строки дерева упаковок.
//  ПараметрыЗаполнения - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
//  ЭтоПервыйУровень - Булево - Истина, если это верхний уровень дерева.
Процедура ЗаполнитьСтрокиДерева(СтрокаВерхнегоУровня, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, ЭтоПервыйУровень = Истина)
	
	ОчиститьКоличествоГрупповыхУпаковокИПачек = Истина;
	
	Для Каждого СтрокаДерева Из СтрокаВерхнегоУровня.Строки Цикл
		
		Если ОчиститьКоличествоГрупповыхУпаковокИПачек Тогда
			Если ТипЗнч(СтрокаВерхнегоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаВерхнегоУровня.КоличествоАкцизныхМарок           = 0;
				СтрокаВерхнегоУровня.КоличествоПотребительскихУпаковок = 0;
				СтрокаВерхнегоУровня.КоличествоГрупповыхУпаковок       = 0;
				СтрокаВерхнегоУровня.Количество                        = 0;
				ОчиститьКоличествоГрупповыхУпаковокИПачек = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		
		СтрокаДанных = Неопределено;
		Если ПараметрыЗаполнения.ДанныеКодовМаркировки <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
				СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			Иначе
				СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено Тогда
				
				Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
					ПараметрыСлиянияДанных(ПараметрыЗаполнения, СтрокаДерева.Владелец(), ПараметрыЗаполнения.ДанныеКодовМаркировки);
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева = Неопределено
					И ПараметрыЗаполнения.Кэш.ЗаполнятьСтрокиДерева Тогда
					СтрокаДанных.СтрокаДерева = СтрокаДерева;
				КонецЕсли;
				
				ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(
			СтрокаДерева, СтрокаДанных,
			ПараметрыЗаполнения.ПараметрыСканирования);
		
		ЗаполнитьСтрокиДерева(
			СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровня, Ложь);
		
		ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных);
		
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ТолькоПересчетНоменклатурыИКоличества - Булево - 
//  ЗаполнятьСтрокиДерева                 - Булево - 
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено, ТолькоПересчетНоменклатурыИКоличества = Ложь, ЗаполнятьСтрокиДерева = Ложь) Экспорт
	
	ДобавленныеКолонки = НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок, ПараметрыСканирования);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДанныеКодовМаркировки",  ДанныеКодовМаркировки);
	ПараметрыЗаполнения.Вставить("Кэш",                    Новый Структура);
	ПараметрыЗаполнения.Вставить("ПараметрыСканирования",  ПараметрыСканирования);
	
	ПараметрыЗаполнения.Кэш.Вставить("ДобавленныеКолонки",                         ДобавленныеКолонки);
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполняемыеКолонки",                         Неопределено);
	ПараметрыЗаполнения.Кэш.Вставить("ТолькоПересчетНоменклатурыИКоличества",      ТолькоПересчетНоменклатурыИКоличества);
	ПараметрыЗаполнения.Кэш.Вставить("КолонкиДляПересчетаНоменклатурыИКоличества", Новый Соответствие);
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполнятьСтрокиДерева",                      ЗаполнятьСтрокиДерева);
	
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Номенклатура", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Характеристика", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Серия", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Количество", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("КоличествоАкцизныхМарок", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("КоличествоПотребительскихУпаковок", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("МаркированнаяПродукция", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ПроизвольнаяЕдиницаУчета", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ТребуетВзвешивания", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ТипУпаковки", Истина);
	
	ЗаполнитьСтрокиДерева(ДеревоУпаковок, ПараметрыЗаполнения);
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования = Неопределено)
	
	МаркированныеТовары.Очистить();
	ШтрихкодированиеИС.ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования)
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки).
// ТребуетсяЧастичноеВыбытие - Булево -
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено, ТребуетсяЧастичноеВыбытие = Неопределено) Экспорт
	
	ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ВложенныеШтрихкоды, ПараметрыСканирования, ВложенныеШтрихкоды.ДеревоУпаковок, ТребуетсяЧастичноеВыбытие);
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки);
	
	// В некоторых сценариях таблицы маркированных товаров нет и ее заполнение не требуется
	Если ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
		МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
		ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ВложенныеШтрихкоды, ПараметрыСканирования, ВложенныеШтрихкоды.МаркированныеТовары, ТребуетсяЧастичноеВыбытие);
		НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
// 	Штрихкод - Строка - Штрихкод строкой.
// 	ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// 	ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковоки.
// Возвращаемое значение:
// 	Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкода(Штрихкод, ТипШтрихкода, ВидУпаковки) Экспорт
	
	Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		Если ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			ПредставлениеШтрихкода = СтрШаблон(
				"%1 %2",
				Сред(Штрихкод, 4, 3),
				Сред(Штрихкод, 7, 8));
		ИначеЕсли ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417 Тогда
			ПредставлениеШтрихкода = СтрШаблон(
				"%1 %2",
				Сред(Штрихкод, 20, 12),
				Сред(Штрихкод, 32, 6));
		Иначе
			ПредставлениеШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод);
		КонецЕсли;
		
	ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией Тогда
		ПредставлениеШтрихкода = Штрихкод;
	ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ПредставлениеШтрихкода = Штрихкод;
	Иначе
		ПредставлениеШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод);
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

#Область ГенерацияЭлементовСправочникаШтрихкодыУпаковок

// Создает элементы справочника ШтрихкодыУпаковокТоваров.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  РассчитыватьДанные - Булево - выполнять расчет данных о товарах и справках 2 дерева упаковок.
//  Грузополучатель - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для записи статусов новых акцизных марок.
//  КэшСтатусовУказанияСерий - Соответствие из КлючИЗначение - кэш статусов указания серий номенклатуры
// Возвращаемое значение:
//   Структура - результат обработки:
//   * ВложенныеШтрихкодыУпаковок - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - вложенные в текущую упаковку штриховые коды.
//   * ХешСумма - Строка - расчитанная хеш-сумма упаковки.
//   Неопределено - создание упаковок не требуется.
Функция СоздатьШтрихкодыУпаковок(ДеревоУпаковок, ШтрихкодыУпаковок = Неопределено,
	РассчитыватьДанные = Ложь, Грузополучатель = Неопределено, КэшСтатусовУказанияСерий = Неопределено, КэшКоэффициентов = Неопределено) Экспорт

	КоличествоАкцизныхМарок = 0;

	Если ШтрихкодыУпаковок <> Неопределено Тогда
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
		ВозвращаемоеЗначение.Вставить("ХешСумма",                   "");
	Иначе
		ВозвращаемоеЗначение = Неопределено;
	КонецЕсли;

	Если РассчитыватьДанные Тогда

		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("АлкогольнаяПродукция",    NULL);
		ДанныеСтроки.Вставить("КодАлкогольнойПродукции", NULL);
		ДанныеСтроки.Вставить("Номенклатура",            NULL);
		ДанныеСтроки.Вставить("Характеристика",          NULL);
		ДанныеСтроки.Вставить("Серия",                   NULL);
		ДанныеСтроки.Вставить("Справка2",                NULL);
		ДанныеСтроки.Вставить("ВсеСправки2Указаны",      Истина);

	КонецЕсли;

	Если ШтрихкодыУпаковок <> Неопределено Тогда
		ДанныеДляРасчетаХешСуммы = Новый СписокЗначений;
	КонецЕсли;

	Если КэшКоэффициентов = Неопределено Тогда
		КэшКоэффициентов = Новый Соответствие;
	КонецЕсли;

	ПараметрыСоздания = Новый Структура("ОтключитьПоискСуществующего", Истина);
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Результат = Новый Структура;
			Результат.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
			Результат.Вставить("ХешСумма",                   "");
			Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
				И СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
				Если КэшКоэффициентов[СтрокаДерева.Номенклатура] = Неопределено Тогда
					КэшКоэффициентов.Вставить(СтрокаДерева.Номенклатура, СтрокаДерева.Коэффициент);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Результат = СоздатьШтрихкодыУпаковок(СтрокаДерева, ШтрихкодыУпаковок,
				РассчитыватьДанные, Грузополучатель, КэшСтатусовУказанияСерий, КэшКоэффициентов);
		КонецЕсли;

		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;

		Если ШтрихкодыУпаковок <> Неопределено Тогда

			Если Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда

				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
				ПараметрыОтбора.Вставить("ХешСумма", Результат.ХешСумма);
				НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда

					ШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0].Ссылка;

				Иначе

					ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
					ДанныеНовойУпаковки.Штрихкод     = СтрокаДерева.Штрихкод;
					ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
					ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;

					ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.Номенклатура;
					ДанныеНовойУпаковки.Характеристика = СтрокаДерева.Характеристика;
					ДанныеНовойУпаковки.Серия          = СтрокаДерева.Серия;

					Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

						Если СтрДлина(СтрокаДерева.Штрихкод) = 150 Тогда
							ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
						Иначе
							ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
						КонецЕсли;

						Если СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
							ДанныеНовойУпаковки.Количество = СтрокаДерева.Коэффициент;
							ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
						Иначе
							ДанныеНовойУпаковки.Количество = 1;
						КонецЕсли;

					ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда

						ДанныеНовойУпаковки.ХешСумма = Результат.ХешСумма;

						Коэффициент = КэшКоэффициентов[СтрокаДерева.Номенклатура];
						Если Коэффициент <> Неопределено И Коэффициент > 0 Тогда
							ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоАкцизныхМарок * Коэффициент;
							ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоАкцизныхМарок;
						Иначе
							ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоАкцизныхМарок;
						КонецЕсли;

					ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда

						ДанныеНовойУпаковки.ХешСумма = Результат.ХешСумма;

					КонецЕсли;

					ПараметрыЗаписи = Новый Структура;
					ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
					ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);

					ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(
						ДанныеНовойУпаковки,
						Результат.ВложенныеШтрихкодыУпаковок,
						ПараметрыЗаписи,
						КэшСтатусовУказанияСерий,
						ПараметрыСоздания);

					НоваяСтрока = ШтрихкодыУпаковок.Добавить();
					НоваяСтрока.Штрихкод = ДанныеНовойУпаковки.Штрихкод;
					НоваяСтрока.ХешСумма = ДанныеНовойУпаковки.ХешСумма;
					НоваяСтрока.Ссылка   = ШтрихкодУпаковки;

				КонецЕсли;

				СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;

			КонецЕсли;

			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ДанныеДляРасчетаХешСуммы.Добавить(СтрокаДерева.Штрихкод);
			Иначе
				ДанныеДляРасчетаХешСуммы.Добавить(Результат.ХешСумма);
			КонецЕсли;

			Если ЗначениеЗаполнено(Грузополучатель)
				И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

				ДанныеЗаписиСтатуса = РегистрыСведений.АкцизныеМаркиЕГАИС.ПоляЗаписиСтатусаУпаковки();
				ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = Грузополучатель;
				ДанныеЗаписиСтатуса.АкцизнаяМарка        = ШтрихкодУпаковки;
				ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.НеПодтверждена;
				ДанныеЗаписиСтатуса.Справка2             = СтрокаДерева.Справка2;
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаДерева.АлкогольнаяПродукция;

				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);

			КонецЕсли;

			ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);

		КонецЕсли;

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + 1;
		Иначе
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + СтрокаДерева.КоличествоАкцизныхМарок;
		КонецЕсли;

		Если РассчитыватьДанные Тогда

			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				СтрокаДерева.ВсеСправки2Указаны = ЗначениеЗаполнено(СтрокаДерева.Справка2);
			КонецЕсли;

			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "АлкогольнаяПродукция");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "КодАлкогольнойПродукции");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Номенклатура");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Характеристика");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Серия");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Справка2");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ВсеСправки2Указаны", Истина);

		КонецЕсли;

	КонецЦикла;

	Если ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений") Тогда

		ДеревоУпаковок.КоличествоАкцизныхМарок = КоличествоАкцизныхМарок;

		Если РассчитыватьДанные Тогда
			Если ДеревоУпаковок.Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ДеревоУпаковок, ДанныеСтроки);
			Иначе

				ДанныеСтроки.АлкогольнаяПродукция    = Неопределено;
				ДанныеСтроки.КодАлкогольнойПродукции = Неопределено;
				ДанныеСтроки.Номенклатура            = Неопределено;
				ДанныеСтроки.Характеристика          = Неопределено;
				ДанныеСтроки.Серия                   = Неопределено;
				ДанныеСтроки.Справка2                = Неопределено;
				ДанныеСтроки.ВсеСправки2Указаны      = Ложь;

				ЗаполнитьЗначенияСвойств(ДеревоУпаковок, ДанныеСтроки);

			КонецЕсли;
		КонецЕсли;

		Если ШтрихкодыУпаковок <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДеревоУпаковок, "ХешСумма") Тогда
				ВозвращаемоеЗначение.ХешСумма = ДеревоУпаковок.ХешСумма;
			ИначеЕсли ДанныеДляРасчетаХешСуммы.Количество() <> 0 Тогда
				ВозвращаемоеЗначение.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	//@skip-check constructor-function-return-section
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В данной функции выполняется поиск элемента справочника "ШтрихкодыУпаковокТоваров" по коду акцизной марки, если
//    элемент справочника найти не удалось - будет создан новый элемент.
// 
// Параметры:
//  КодАкцизнойМарки - Строка - Код марки алкогольной продукции.
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на элемент характеристики.
//  Серия - Неопределено, ОпределяемыйТип.СерияНоменклатуры - ссылка на элемент серия.
//  ЗаписьПриОбновленииИБ - Булево - Истина, если запись происходит при обновлении ИБ.
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - Описание
Функция ПолучитьСгенерироватьАкцизнуюМарку(КодАкцизнойМарки, Номенклатура, Характеристика, Серия = Неопределено, ЗаписьПриОбновленииИБ = ЛОЖЬ) Экспорт
	
	АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(КодАкцизнойМарки);
	
	Если АкцизнаяМарка = Неопределено Тогда
		АкцизнаяМарка = СгенерироватьАкцизнуюМарку(КодАкцизнойМарки, Номенклатура, Характеристика, Серия, ЗаписьПриОбновленииИБ);
	КонецЕсли;
	
	Возврат АкцизнаяМарка;
	
КонецФункции

// Создает элемент справочника "Штрихкоды упаковок" по данным акцизной марки.
// 
// Параметры:
//  КодАкцизнойМарки - Строка - Код марки алкогольной продукции.
//  Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на элемент номенклатуры.
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на элемент характеристики.
//  Серия - Неопределено, ОпределяемыйТип.СерияНоменклатуры - ссылка на элемент серия.
//  ЗаписьПриОбновленииИБ - Булево - Истина, если запись происходит при обновлении ИБ.
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на созданный элемент справочника.
Функция СгенерироватьАкцизнуюМарку(КодАкцизнойМарки, Номенклатура, Характеристика, Серия = Неопределено, ЗаписьПриОбновленииИБ = ЛОЖЬ) Экспорт
	
	СправочникОбъект = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	СправочникОбъект.Номенклатура = Номенклатура;
	СправочникОбъект.Характеристика = Характеристика;
	СправочникОбъект.Серия = Серия;
	СправочникОбъект.ЗначениеШтрихкода = КодАкцизнойМарки;
	
	Если СтрДлина(КодАкцизнойМарки) = 150 Тогда
		СправочникОбъект.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		СправочникОбъект.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	КонецЕсли;
	
	СправочникОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Если ЗаписьПриОбновленииИБ Тогда
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		СправочникОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание новой акцизной марки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			СправочникОбъект.Метаданные(),,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары».
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок».
//
// Параметры:
//  ВыборкаПерваяИтерация - ВыборкаИзРезультатаЗапроса - первая итерации выборки.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
// Возвращаемое значение:
//  Структура - Описание:
// * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке.
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц) Экспорт

	ДеревоУпаковок      = ИнициализироватьДеревоУпаковок();
	МаркированныеТовары = ИнициализироватьТаблицуМаркированныеТовары();

	МаркированныеТовары.Индексы.Добавить("ШтрихкодУпаковки");

	СоответствиеСтрокДереваУпаковок = Новый Соответствие;

	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);

	НуженПоискВложенныхШтрихкодов = Истина;
	НомерИтерации = 1;
	Пока НуженПоискВложенныхШтрихкодов Цикл

		Если НомерИтерации = 1 Тогда

			Выборка = ВыборкаПерваяИтерация;

		Иначе

			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные2";

			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
					|	ИсходныеДанные.Справка2                     КАК Справка2,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));

			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстыЗапроса.Добавить(
				ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса), "ВложенныеШтрихкоды");

			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(
					СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
			РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();

		КонецЕсли;

		ТаблицаШтрихкодов.Очистить();

		Пока Выборка.Следующий() Цикл
			
			Если СоответствиеСтрокДереваУпаковок[Выборка.Упаковка] = Неопределено Тогда
				
				//@skip-check wrong-string-literal-content
				ВидПродукции = Выборка["УпаковкаВидПродукции"];
				Если ЗначениеЗаполнено(ВидПродукции)
					И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРодитель = ДеревоУпаковок.Строки.Добавить();
				ЗаполнитьСтрокуДереваУпаковок(СтрокаРодитель, Выборка, 0, МаркированныеТовары, ДополнительныеПараметры);
				СоответствиеСтрокДереваУпаковок.Вставить(Выборка.Упаковка, СтрокаРодитель);
			Иначе
				СтрокаРодитель = СоответствиеСтрокДереваУпаковок[Выборка.Упаковка];
				Если СтрокаРодитель.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
					И ЗначениеЗаполнено(Выборка.ЧастичноеВыбытиеВариантУчета) Тогда
					ЗаполнитьСтрокуДереваУпаковок(СтрокаРодитель, Выборка, 0, МаркированныеТовары, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.УпаковкаУровень1) Тогда
				
				//@skip-check wrong-string-literal-content
				ВидПродукции = Выборка["УпаковкаУровень1ВидПродукции"];
				Если ЗначениеЗаполнено(ВидПродукции)
					И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
					Продолжить;
				КонецЕсли;
				
				Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень1] = Неопределено Тогда
					СтрокаУпаковкиУровень1 = СтрокаРодитель.Строки.Добавить();
					ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень1, Выборка, 1, МаркированныеТовары, ДополнительныеПараметры);
					СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень1, СтрокаУпаковкиУровень1);
				Иначе
					СтрокаУпаковкиУровень1 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень1];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.УпаковкаУровень2) Тогда
					
					//@skip-check wrong-string-literal-content
					ВидПродукции = Выборка["УпаковкаУровень2ВидПродукции"];
					Если ЗначениеЗаполнено(ВидПродукции)
						И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
						Продолжить;
					КонецЕсли;
					
					Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень2] = Неопределено Тогда
						СтрокаУпаковкиУровень2 = СтрокаУпаковкиУровень1.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень2, Выборка, 2, МаркированныеТовары, ДополнительныеПараметры);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень2, СтрокаУпаковкиУровень2);
					Иначе
						СтрокаУпаковкиУровень2 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень2];
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.УпаковкаУровень3) Тогда
						
						//@skip-check wrong-string-literal-content
						ВидПродукции = Выборка["УпаковкаУровень3ВидПродукции"];
						Если ЗначениеЗаполнено(ВидПродукции)
							И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
							Продолжить;
						КонецЕсли;
				
						Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень3] = Неопределено Тогда
							СтрокаУпаковкиУровень3 = СтрокаУпаковкиУровень2.Строки.Добавить();
							ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень3, Выборка, 3, МаркированныеТовары, ДополнительныеПараметры);
							СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень3, СтрокаУпаковкиУровень3);
						Иначе
							СтрокаУпаковкиУровень3 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень3];
						КонецЕсли;
						
						НоваяСтрока = ТаблицаШтрихкодов.Добавить();
						НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
						НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
						НоваяСтрока.АлкогольнаяПродукция = Выборка.УпаковкаУровень3АлкогольнаяПродукция;
						НоваяСтрока.Справка2             = Выборка.УпаковкаУровень3Справка2;
						НоваяСтрока.ОрганизацияЕГАИС     = Выборка.ОрганизацияЕГАИС;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

		НомерИтерации = НомерИтерации + 1;
		НуженПоискВложенныхШтрихкодов = ТаблицаШтрихкодов.Количество() > 0;

	КонецЦикла;

	КодыАлкогольнойПродукции = Новый Массив;
	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл

		Если Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции) Тогда

			КодыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАлкогольнойПродукции);

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции)
			И ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(СтрокаТЧ.Штрихкод) Тогда

			СтрокаТЧ.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаТЧ.Штрихкод);
			Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаДерева) Тогда
				СтрокаТЧ.СтрокаДерева.КодАлкогольнойПродукции = СтрокаТЧ.КодАлкогольнойПродукции;
			КонецЕсли;

			КодыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАлкогольнойПродукции);

		КонецЕсли;

	КонецЦикла;

	СоответствиеАлкогольнойПродукции = ИнтеграцияЕГАИС.СоответствиеАлкогольнойПродукции(КодыАлкогольнойПродукции);

	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл

		Если Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции) Тогда

			АлкогольнаяПродукция = СоответствиеАлкогольнойПродукции[СтрокаТЧ.КодАлкогольнойПродукции];
			Если ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
				СтрокаТЧ.АлкогольнаяПродукция = АлкогольнаяПродукция;
				Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаДерева) Тогда
					СтрокаТЧ.СтрокаДерева.АлкогольнаяПродукция = АлкогольнаяПродукция;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	СоздатьШтрихкодыУпаковок(ДеревоУпаковок, Неопределено, Истина);

	Результат = Новый Структура;
	Результат.Вставить("ДеревоУпаковок",      ДеревоУпаковок);
	Результат.Вставить("МаркированныеТовары", МаркированныеТовары);

	Возврат Результат;

КонецФункции

// Возвращает структуру параметров, на основании которых будет формироваться запрос получения вложенных штрихкодов.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИмяТабЧастиАкцизныхМарок - Строка - Наименование табличной части, где хранятся Акцизные марки.
// * ЗаполнитьСправки2ИзРегистра - Булево - Истина, если необходимо брать справки 2 из регистра сведений 
//  Акцизные марки ЕГАИС.
// * ИмяВременнойТаблицы - Строка - Имя временной таблицы, на основании которой будут получены данные.
// * ИмяПоляАлкогольнаяПродукция - Строка - Наименование реквизита табличной части, где хранится значение Алкогольная
//  продукция.
// * ИмяПоляОрганизацияЕГАИС - Строка - Наименование реквизита, где хранится значение Организация ЕГАИС.
// * ИспользоватьИдентификаторСтроки - Булево - Истина, в том случае, используется идентификатор строк для связи между 
//	 табличной частью с товарами и табличной частью с акцизными марками.
// * ДокументСсылка - Неопределено - Ссылка на документ, для которого необходимо получить данные по штрихкодам упаковок.
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС, Неопределено - организация ЕГАИС из классификатора
// * ИмяКолонкиСвязи - Строка - Если акцизные марки хранятся в отдельной табличной части и связь осуществляется по колонке-ключу -
//      требуется указать имя колонки, по которой осуществляется связь между табличными частями Товары и табличной частью, где хранятся
//      акцизные марки. По умолчанию "ИдентификаторСтроки".
Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяПоляОрганизацияЕГАИС",         "ОрганизацияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяПоляАлкогольнаяПродукция",     "АлкогольнаяПродукция");
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	ВозвращаемоеЗначение.Вставить("ЗаполнитьСправки2ИзРегистра",     Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяТабЧастиАкцизныхМарок",        "");
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИмяКолонкиСвязи",                 "ИдентификаторСтроки");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует текст запроса для получения вложенных штрихкодов по документу.
//
// Параметры:
//  ПараметрыФормированияТекстаЗапроса - (См. ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов).
//  
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса) Экспорт
	
	ДокументСсылка                  = ПараметрыФормированияТекстаЗапроса.ДокументСсылка;
	ИспользоватьИдентификаторСтроки = ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки;
	ИмяПоляОрганизацияЕГАИС         = ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС;
	ИмяПоляАлкогольнаяПродукция     = ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция;
	ИмяВременнойТаблицы             = ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы;
	ЗаполнитьСправки2ИзРегистра     = ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра;
	ОрганизацияЕГАИС                = ПараметрыФормированияТекстаЗапроса.ОрганизацияЕГАИС;
	ИмяТабЧастиАкцизныхМарок        = ?(ЗначениеЗаполнено(ПараметрыФормированияТекстаЗапроса.ИмяТабЧастиАкцизныхМарок), 
		ПараметрыФормированияТекстаЗапроса.ИмяТабЧастиАкцизныхМарок, "АкцизныеМарки");
	ИмяКолонкиСвязи                 = ПараметрыФормированияТекстаЗапроса.ИмяКолонкиСвязи;
	
	ТекстЗапроса = "";
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		ТабличнаяЧастьСАкцизнымиМарками =  МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиАкцизныхМарок);
		Если ТабличнаяЧастьСАкцизнымиМарками = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть %2.'");
			ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка, ИмяТабЧастиАкцизныхМарок);
		КонецЕсли;
		
		РеквизитыТабличнойЧастиАкцизныеМарки = ТабличнаяЧастьСАкцизнымиМарками.Реквизиты;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти(ИмяКолонкиСвязи) <> Неопределено
			И ИспользоватьИдентификаторСтроки Тогда
			ЗначениеРеквизитаИдентификаторСтроки  = "ТабличнаяЧасть."+ИмяКолонкиСвязи;
			ИспользоватьТабличнуюЧастьТовары      = Истина;
		Иначе
			ЗначениеРеквизитаИдентификаторСтроки  = "НЕОПРЕДЕЛЕНО";
			ИспользоватьТабличнуюЧастьТовары      = Ложь;
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("Справка2") <> Неопределено Тогда
			
			ЗначениеРеквизитаСправка2 = "ТабличнаяЧасть.Справка2";
			
			Если ИспользоватьТабличнуюЧастьТовары Тогда
				ЗначениеРеквизитаАлкогольнаяПродукция =
				"ВЫБОР КОГДА ТабличнаяЧасть.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) ТОГДА
				|	ЕСТЬNULL(Товары.%ИмяПоляАлкогольнаяПродукция%, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|ИНАЧЕ
				|	ЕСТЬNULL(ТабличнаяЧасть.Справка2.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|КОНЕЦ
				|";
			Иначе
				ЗначениеРеквизитаАлкогольнаяПродукция =
				"ВЫБОР КОГДА ТабличнаяЧасть.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) ТОГДА
				|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
				|ИНАЧЕ
				|	ЕСТЬNULL(ТабличнаяЧасть.Справка2.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|КОНЕЦ
				|";
			КонецЕсли;
			
		Иначе
			
			ЗначениеРеквизитаСправка2 = "ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
			
			Если ИспользоватьТабличнуюЧастьТовары Тогда
				ЗначениеРеквизитаАлкогольнаяПродукция = "ЕСТЬNULL(Товары.%ИмяПоляАлкогольнаяПродукция%, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))";
			Иначе
				ЗначениеРеквизитаАлкогольнаяПродукция = "ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)";
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("ЧастичноеВыбытиеВариантУчета") <> Неопределено Тогда
			ДанныеЧастичногоВыбытия =
			"ТабличнаяЧасть.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
			|ТабличнаяЧасть.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
			|ТабличнаяЧасть.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
			|ТабличнаяЧасть.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
			|ТабличнаяЧасть.ВыбытиеБутылки                 КАК ВыбытиеБутылки";
		Иначе
			ДанныеЧастичногоВыбытия =
			"НЕОПРЕДЕЛЕНО КАК ЧастичноеВыбытиеКоличество,
			|НЕОПРЕДЕЛЕНО КАК ЧастичноеВыбытиеВариантУчета,
			|НЕОПРЕДЕЛЕНО КАК ЧастичноеВыбытиеНоменклатура,
			|НЕОПРЕДЕЛЕНО КАК ЧастичноеВыбытиеХарактеристика,
			|НЕОПРЕДЕЛЕНО КАК ВыбытиеБутылки";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ЗначениеРеквизитаОрганизацияЕГАИС = "&ОрганизацияЕГАИС";
		Иначе
			ЗначениеРеквизитаОрганизацияЕГАИС = "ТабличнаяЧасть.Ссылка." + ИмяПоляОрганизацияЕГАИС;
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("ШтрихкодУпаковки") <> Неопределено Тогда
			ЗначениеРеквизитаШтрихкодРодительскойУпаковки = "ТабличнаяЧасть.ШтрихкодУпаковки";
		Иначе
			ЗначениеРеквизитаШтрихкодРодительскойУпаковки = "ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)";
		КонецЕсли;

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	%ОрганизацияЕГАИС%             КАК ОрганизацияЕГАИС,
		|	%ИдентификаторСтроки%          КАК ИдентификаторСтроки,
		|	%АлкогольнаяПродукция%         КАК АлкогольнаяПродукция,
		|	%Справка2%                     КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка   КАК ШтрихкодУпаковки,
		|	%ШтрихкодРодительскойУпаковки% КАК ШтрихкодРодительскойУпаковки,
		|	%ДанныеЧастичногоВыбытия%
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	%ИмяТабличнойЧасти% КАК ТабличнаяЧасть
		|		%Соединения%
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти%",            МетаданныеДокумента.ПолноеИмя() + "." +ИмяТабЧастиАкцизныхМарок);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОрганизацияЕГАИС%",             ЗначениеРеквизитаОрганизацияЕГАИС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИдентификаторСтроки%",          ЗначениеРеквизитаИдентификаторСтроки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%АлкогольнаяПродукция%",         СтрЗаменить(ЗначениеРеквизитаАлкогольнаяПродукция, "%ИмяПоляАлкогольнаяПродукция%", ИмяПоляАлкогольнаяПродукция));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Справка2%",                     ЗначениеРеквизитаСправка2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШтрихкодРодительскойУпаковки%", ЗначениеРеквизитаШтрихкодРодительскойУпаковки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДанныеЧастичногоВыбытия%",      ДанныеЧастичногоВыбытия);

		Если ИспользоватьТабличнуюЧастьТовары Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, "%Соединения%",
				СтрШаблон(
					"ЛЕВОЕ СОЕДИНЕНИЕ %1.Товары КАК Товары
					|ПО Товары.Ссылка = &Ссылка
					|И Товары.ИдентификаторСтроки = ТабличнаяЧасть.ИдентификаторСтроки
					|И Товары.ИдентификаторСтроки <> """"
					|",
					МетаданныеДокумента.ПолноеИмя()));
		Иначе
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, "%Соединения%", "");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ИсходныеДанные.ОрганизацияЕГАИС     КАК ОрганизацияЕГАИС,
	|	ИсходныеДанные.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2             КАК Справка2,
	|	ИсходныеДанные.ШтрихкодУпаковки     КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.АлкогольнаяПродукция
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.Справка2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2                     КАК Справка2,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ВложенныеШтрихкодыУпаковокУровень1.Справка2                     КАК Справка2,
	|	ВложенныеШтрихкодыУпаковокУровень1.Упаковка                     КАК Упаковка,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.Справка2Уровень1             КАК Справка2Уровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукцияУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.Справка2Уровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2                     КАК Справка2,
	|	ВложенныеШтрихкодыУпаковокУровень2.Упаковка                     КАК Упаковка,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень1             КАК Справка2Уровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень2 КАК АлкогольнаяПродукцияУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень2             КАК Справка2Уровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2                     КАК Справка2,
	|	ИсходныеДанные.Упаковка                     КАК Упаковка,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ИсходныеДанные.Справка2Уровень1             КАК Справка2Уровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень2 КАК АлкогольнаяПродукцияУровень2,
	|	ИсходныеДанные.Справка2Уровень2             КАК Справка2Уровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень3 КАК АлкогольнаяПродукцияУровень3,
	|	ИсходныеДанные.Справка2Уровень3             КАК Справка2Уровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.Упаковка ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.Упаковка ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.Упаковка ЕСТЬ NULL
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.Упаковка.Номенклатура   КАК Номенклатура,
	|	ДанныеУпаковок.Упаковка.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокДляГруппировки
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДляГруппировки.Номенклатура,
	|	ДанныеДляГруппировки.Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокДляГруппировки КАК ДанныеДляГруппировки
	|ГДЕ НЕ ДанныеДляГруппировки.Номенклатура В (&ПустыеЗначенияНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляГруппировки.Номенклатура,
	|	ДанныеДляГруппировки.Характеристика
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%ТекстЗапросаСвойстваМаркируемойПродукции%
	|
	|;
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.ОрганизацияЕГАИС                                                         КАК ОрганизацияЕГАИС,
	|	ДанныеУпаковок.Упаковка                                                                 КАК Упаковка,
	|	ДанныеУпаковок.ИдентификаторСтроки                                                      КАК УпаковкаИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковки.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2
	|	КОНЕЦ КАК УпаковкаСправка2,
	|	ДанныеУпаковок.Упаковка.ТипШтрихкода                                                    КАК УпаковкаТипШтрихкода,
	|	ДанныеУпаковок.Упаковка.ТипУпаковки                                                     КАК УпаковкаТипУпаковки,
	|	ДанныеУпаковок.Упаковка.ЗначениеШтрихкода                                               КАК УпаковкаШтрихкод,
	|	ДанныеУпаковок.Упаковка.Номенклатура                                                    КАК УпаковкаНоменклатура,
	|	ДанныеУпаковок.Упаковка.Характеристика                                                  КАК УпаковкаХарактеристика,
	|	ДанныеУпаковок.Упаковка.Серия                                                           КАК УпаковкаСерия,
	|	ДанныеУпаковок.Упаковка.ХешСумма                                                        КАК УпаковкаХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковки.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковки.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковки.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаСтатус,
	|	ЕСТЬNULL(СтатусыУпаковки.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукция) КАК УпаковкаАлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                                                         КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1                                              КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень1.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень1
	|	КОНЕЦ КАК УпаковкаУровень1Справка2,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода                                            КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки                                             КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода                                       КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура                                            КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика                                          КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия                                                   КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма                                                КАК УпаковкаУровень1ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень1.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень1.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень1 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень1.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень1Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень1.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень1) КАК УпаковкаУровень1АлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                                                         КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2                                              КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень2.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень2
	|	КОНЕЦ КАК УпаковкаУровень2Справка2,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода                                            КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки                                             КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода                                       КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура                                            КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика                                          КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия                                                   КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма                                                КАК УпаковкаУровень2ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень2.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень2.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень2 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень2.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень2Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень2.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень2) КАК УпаковкаУровень2АлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                                                         КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3                                              КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень3.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень3
	|	КОНЕЦ КАК УпаковкаУровень3Справка2,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода                                            КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки                                             КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода                                       КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура                                            КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика                                          КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия                                                   КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма                                                КАК УпаковкаУровень3ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень3.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень3.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень3 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень3.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень3Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень3.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень3) КАК УпаковкаУровень3АлкогольнаяПродукция,
	|	СвойстваПродукцииУровень0.ВидПродукции КАК УпаковкаВидПродукции,
	|	СвойстваПродукцииУровень1.ВидПродукции КАК УпаковкаУровень1ВидПродукции,
	|	СвойстваПродукцииУровень2.ВидПродукции КАК УпаковкаУровень2ВидПродукции,
	|	СвойстваПродукцииУровень3.ВидПродукции КАК УпаковкаУровень3ВидПродукции,
	|
	|	ТаблицаИдентификаторов.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаИдентификаторов.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаИдентификаторов.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаИдентификаторов.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаИдентификаторов.ВыбытиеБутылки                 КАК ВыбытиеБутылки,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0)     КАК ЕмкостьПотребительскойУпаковки,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 0) КАК Коэффициент
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковки
	|		ПО ДанныеУпаковок.Упаковка = СтатусыУпаковки.АкцизнаяМарка
	|			И (СтатусыУпаковки.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1 = СтатусыУпаковкиУровень1.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень1.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2 = СтатусыУпаковкиУровень2.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень2.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3 = СтатусыУпаковкиУровень3.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень3.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень0
	|		ПО ДанныеУпаковок.Упаковка.Номенклатура = СвойстваПродукцииУровень0.Номенклатура
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваПродукцииУровень1.Номенклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваПродукцииУровень2.Номенклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваПродукцииУровень3.Номенклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ДанныеУпаковок.Упаковка = ТаблицаИдентификаторов.ШтрихкодУпаковки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ДанныеУпаковок.Упаковка.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвойстваМаркируемойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковокДляГруппировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТВложенныеШтрихкодыИсходныеДанные",        ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаполнитьСправки2ИзРегистра",               Формат(ЗаполнитьСправки2ИзРегистра, "БЛ=ЛОЖЬ; БИ=ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустойСтатус",                              "ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОшибкаЧтенияСтатуса",                       "ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустаяСправка2",                            "ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстЗапросаСвойстваМаркируемойПродукции%", ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получает массив штрихкодов по переданному отбору.
//
// Параметры:
//  Отбор - Структура - структура с ключами:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   * Упаковка - ОпределяемыйТип.Упаковка - ссылка на упаковку.
//
// Возвращаемое значение:
//  Массив из Строка - массив штрихкодов.
Функция ПолучитьШтрихкодыНоменклатуры(Отбор) Экспорт
	
	Результат = Новый Массив;
	ШтрихкодированиеНоменклатурыЕГАИСПереопределяемый.ПриПолученииШтрихкодовНоменклатуры(Результат, Отбор);
	
	Возврат Результат;
	
КонецФункции

// Реализует обработку действий пользователя. Возвращает результат обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  См. ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода.
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт

	Если Действие = "ОбработатьВыборСправки2" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборСправки2(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
	Если Действие = "ОбработатьВыборНоменклатуры" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;

КонецФункции

// Дополняет базовые данные по штрихкодам спецификой алкогольной продукции.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеШтрихкодовРасширеннойСпецификойЕГАИС(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ШтрихкодыУпаковок = ШтрихкодыУпаковокДляФормированияСпецифики(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	Если ШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	СпецификаАкцизныхМарок = Неопределено;
	Если ШтрихкодыУпаковок.Количество() > 0 Тогда
		СпецификаАкцизныхМарок = СпецификаАкцизныхМарок(ШтрихкодыУпаковок, ПараметрыСканирования);
	КонецЕсли;
	
	ЗаполнитьТаблицуДанныеКодовМаркировкиСпецификой(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, СпецификаАкцизныхМарок);
	ЗаполнитьТаблицуДанныеКодовМаркировкиОписаниемНоменклатуры(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);

	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ЗаполнитьДанныеДереваУпаковокСпецификой(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	Если Не ЕстьОшибки Тогда
		ВыполнитьПроверкуНаОшибкиКонтрольАкцизныхМарок(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	СтрокиДанныхСАкцизнымиМарками       = Новый Массив;
	СтрокиДанныхСМаркамиСНомеромИСерией = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.Идентифицирован
			Или (ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
				И СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная)
			Или Не ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетАлкогольнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокиДанныхСАкцизнымиМарками.Добавить(СтрокаДанных);
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией Тогда
			СтрокиДанныхСМаркамиСНомеромИСерией.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДанныхСАкцизнымиМарками.Количество() = 0
		И СтрокиДанныхСМаркамиСНомеромИСерией.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестныхШтрихкодовАкцизныхМарок(СтрокиДанныхСАкцизнымиМарками, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестныхШтрихкодовСНомеромИСерией(СтрокиДанныхСМаркамиСНомеромИСерией, ПараметрыСканирования);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДанныхСАкцизнымиМарками, СтрокиДанныхСМаркамиСНомеромИСерией);
	ЗаполнитьТаблицуДанныеКодовМаркировкиОписаниемНоменклатуры(СтрокиДанныхСАкцизнымиМарками, ПараметрыСканирования);

КонецПроцедуры

// Дополнение свойств Данные штрихкода свойствами специфичными для алкогольной продукции. Базовая структура -
// (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//
// Параметры:
//  ДанныеШтрихкода - Структура - в которой проверяется наличие и при необходимости добавляются ключи:
//   * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Алкогольная продукция.
//   * КодАлкогольнойПродукции - Число - Код продукции.
//   * НомерМарки - Строка - Номер акцизной марки.
//   * СерияМарки - Строка - Серия акцизной марки.
//   * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
//   * Справки2 - Массив из Структура:
//   * Статус - ПеречислениеСсылка.СтатусыАкцизныхМарок - Статус, в котором находится акцизная марка.
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт
	
	КоллекцияДанныеШтрихкодаДляДополнения = Новый Структура;
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("АлкогольнаяПродукция",    Неопределено);
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("КодАлкогольнойПродукции", "");
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("НомерМарки",              "");
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("СерияМарки",              "");
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("Справка2",                Неопределено);
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("Справки2",                Новый Массив);
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("ТипМарки",                "");
	КоллекцияДанныеШтрихкодаДляДополнения.Вставить("Статус",                  Перечисления.СтатусыАкцизныхМарок.ПустаяСсылка());
	
	Для Каждого КлючЗначение Из КоллекцияДанныеШтрихкодаДляДополнения Цикл
		
		Если Не ДанныеШтрихкода.Свойство(КлючЗначение.Ключ) Тогда
			ДанныеШтрихкода.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Заполняет структуру - "ДанныеШтрихкода" данными, которые удалось получить по Справке2.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
Процедура ЗаполнитьДанныеШтрихкодаПоСправке2(ДанныеШтрихкода, Справка2) Экспорт
	
	ДанныеШтрихкода.Справка2 = Справка2;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справки2ЕГАИС.АлкогольнаяПродукция           КАК АлкогольнаяПродукция,
	|	Справки2ЕГАИС.АлкогольнаяПродукция.Код       КАК КодАлкогольнойПродукции,
	|	Справки2ЕГАИС.ДокументОснование              КАК ДокументОснование,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура   КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.Серия          КАК Серия
	|ПОМЕСТИТЬ ВтДанные
	|ИЗ
	|	Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.Справка2 = Справки2ЕГАИС.Ссылка
	|ГДЕ
	|	Справки2ЕГАИС.Ссылка = &Справка2
	|
	|;
	|ВЫБРАТЬ
	|	1                               КАК Приоритет,
	|	Товары.Справка2                 КАК Справка2,
	|	Товары.АлкогольнаяПродукция     КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Код КАК КодАлкогольнойПродукции,
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.Характеристика           КАК Характеристика,
	|	Товары.Серия                    КАК Серия
	|ПОМЕСТИТЬ ВтСопоставлениеНоменклатуры
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанные КАК ВтДанные
	|		ПО ВтДанные.ДокументОснование = Товары.Ссылка
	|ГДЕ
	|	Товары.Справка2 = &Справка2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1                               КАК Приоритет,
	|	Товары.Справка2                 КАК Справка2,
	|	Товары.АлкогольнаяПродукция     КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Код КАК КодАлкогольнойПродукции,
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.Характеристика           КАК Характеристика,
	|	Товары.Серия                    КАК Серия
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанные КАК ВтДанные
	|		ПО ВтДанные.ДокументОснование = Товары.Ссылка
	|ГДЕ
	|	Товары.Справка2 = &Справка2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                КАК Приоритет,
	|	ВтДанные.АлкогольнаяПродукция    КАК АлкогольнаяПродукция,
	|	ВтДанные.КодАлкогольнойПродукции КАК КодАлкогольнойПродукции,
	|	ВтДанные.ДокументОснование       КАК ДокументОснование,
	|	ВтДанные.Номенклатура            КАК Номенклатура,
	|	ВтДанные.Характеристика          КАК Характеристика,
	|	ВтДанные.Серия                   КАК Серия
	|ИЗ
	|	ВтДанные КАК ВтДанные
	|
	|;
	|ВЫБРАТЬ
	|	ВтСопоставлениеНоменклатуры.Приоритет               КАК Приоритет,
	|	ВтСопоставлениеНоменклатуры.АлкогольнаяПродукция    КАК АлкогольнаяПродукция,
	|	ВтСопоставлениеНоменклатуры.КодАлкогольнойПродукции КАК КодАлкогольнойПродукции,
	|	ВтСопоставлениеНоменклатуры.Номенклатура            КАК Номенклатура,
	|	ВтСопоставлениеНоменклатуры.Характеристика          КАК Характеристика,
	|	ВтСопоставлениеНоменклатуры.Серия                   КАК Серия
	|ИЗ
	|	ВтСопоставлениеНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР
	|");
	
	Запрос.УстановитьПараметр("Справка2", Справка2);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеШтрихкода.АлкогольнаяПродукция    = Выборка.АлкогольнаяПродукция;
		ДанныеШтрихкода.КодАлкогольнойПродукции = Выборка.КодАлкогольнойПродукции;
		
		Если Выборка.Количество() = 1
			Или Выборка.Приоритет = 1 Тогда
			ДанныеШтрихкода.Номенклатура   = Выборка.Номенклатура;
			ДанныеШтрихкода.Характеристика = Выборка.Характеристика;
			ДанныеШтрихкода.Серия          = Выборка.Серия;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку выбора номенклатуры пользователем.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется выполнить обработку штрихкодов.
//  РезультатВыбора - Произвольный - результат выбора номенклатуры пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные значения формы.
// Возвращаемое значение:
//  См. ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = ОбработатьДанныеШтрихкодаПослеВыбораНоменклатуры(РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования);
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеЕГАИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоАлкогольнойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	ТипУпаковки = РезультатОбработкиШтрихкода.ПараметрыВыбораНоменклатуры.ТипУпаковки;
	ВложенныеШтрихкоды = Неопределено;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТипУпаковки) Тогда
		
		ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработкиШтрихкода.АдресДереваУпаковок);
		
	КонецЕсли;
	
	РезультатДобавленияШтрихкодаВДокумент = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(
		Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	//@skip-check constructor-function-return-section
	Возврат РезультатДобавленияШтрихкодаВДокумент;
	
КонецФункции

// Дополняет данные штрихкодов данными, которые указал пользователь в форме уточнения.
//
// Параметры:
//  РезультатВыбора - Произвольный - результат выбора пользователем номенклатуры, соответствующей акцизной марке.
//  РезультатОбработкиШтрихкода - См. ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
Функция ОбработатьДанныеШтрихкодаПослеВыбораНоменклатуры(РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция) Тогда
		ДанныеШтрихкода.АлкогольнаяПродукция    = РезультатВыбора.АлкогольнаяПродукция;
		ДанныеШтрихкода.КодАлкогольнойПродукции = РезультатВыбора.КодАлкогольнойПродукции;
	КонецЕсли;
	
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора.ДополнительныеПараметры;
	
	Если ДанныеШтрихкода.Номенклатура <> РезультатВыбора.Номенклатура
		Или ДанныеШтрихкода.Характеристика <> РезультатВыбора.Характеристика
		Или ДанныеШтрихкода.Серия <> РезультатВыбора.Серия Тогда
		
		ДанныеШтрихкода.Номенклатура   = РезультатВыбора.Номенклатура;
		ДанныеШтрихкода.Характеристика = РезультатВыбора.Характеристика;
		ДанныеШтрихкода.Серия          = РезультатВыбора.Серия;
		
		Если ДанныеШтрихкода.МаркируемаяПродукция = Неопределено Тогда // Если флаг еще не заполнен
			СвойстваМаркируемойПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(
				ДанныеШтрихкода.Номенклатура);
			ДанныеШтрихкода.МаркируемаяПродукция = СвойстваМаркируемойПродукции.МаркируемаяПродукция;
		КонецЕсли;
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
				
				НовыеРеквизиты = Новый Структура;
				НовыеРеквизиты.Вставить("Номенклатура",   РезультатВыбора.Номенклатура);
				НовыеРеквизиты.Вставить("Характеристика", РезультатВыбора.Характеристика);
				НовыеРеквизиты.Вставить("Серия",          РезультатВыбора.Серия);
				
				Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
					ДанныеШтрихкода.ШтрихкодУпаковки, НовыеРеквизиты);
				
			Иначе
				
				СоздатьШтрихкодУпаковкиПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция) Тогда
				СоответствиеНоменклатурыЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
				СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
				СоответствиеНоменклатурыЕГАИС.Номенклатура         = ДанныеШтрихкода.Номенклатура;
				СоответствиеНоменклатурыЕГАИС.Характеристика       = ДанныеШтрихкода.Характеристика;
				СоответствиеНоменклатурыЕГАИС.Серия                = ДанныеШтрихкода.Серия;
				СоответствиеНоменклатурыЕГАИС.Справка2             = ДанныеШтрихкода.Справка2;
				СоответствиеНоменклатурыЕГАИС.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» по ссылке на документ.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок».
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ЗаполнитьСправки2ИзРегистра - Булево - Истина, если требуется заполнять справки 2 из регистра.
// Возвращаемое значение:
//  Структура - Описание:
//   * МаркированныеТовары - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка              = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра = ЗаполнитьСправки2ИзРегистра;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекЕГАИС") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
		ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "ОрганизацияЕГАИС";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
	
		ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
		ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "Грузополучатель";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
		ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "Грузоотправитель";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОбИмпортеЕГАИС") Тогда
		
		ПараметрыФормированияТекстаЗапроса.ИмяТабЧастиАкцизныхМарок = "ШтрихкодыУпаковок";
		
	Иначе
		
		ШтрихкодированиеЕГАИСПереопределяемый.ЗаполнитьПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов(
			ПараметрыФормированияТекстаЗапроса, ДокументСсылка);
		
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковокПоДокументу(ПараметрыФормированияТекстаЗапроса);
	
КонецФункции

Процедура ДополнитьПараметрыЗаполненияТабличнойЧастиТовары(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗаполнения.Вставить("ЗаполнитьАлкогольнуюПродукцию",  Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьИндексАкцизнойМарки",   Ложь);
	ПараметрыЗаполнения.Вставить("ПерезаполнитьНоменклатуруЕГАИС", Ложь);
	
КонецПроцедуры

Процедура РасширенныйРезультатОбработкиШтрихкодаАкцизнойМарки(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, МодульШтрихкодированиеЕГАИС) Экспорт

	УчитыватьДанныеВыбора = Ложь;
	ДанныеВыбора          = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;

	Если ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix
		И ДанныеШтрихкода.Справки2.Количество() > 0
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.Справка2) Тогда

		РезультатОбработки.ТребуетсяВыборСправки2 = Истина;

		Для Каждого ДанныеСправки2 Из ДанныеШтрихкода.Справки2 Цикл
			РезультатОбработки.Справки2.Добавить(ДанныеСправки2.Справка2);
		КонецЦикла;

	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			И ПараметрыСканирования.ЗапрашиватьНоменклатуру
			И (ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix
			Или ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417) Тогда

		Если ДанныеВыбора <> Неопределено Тогда

			Если ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417
				И ДанныеВыбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417
				И ЗначениеЗаполнено(ДанныеВыбора.АлкогольнаяПродукция)
				И ДанныеВыбора.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция
				И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда

				УчитыватьДанныеВыбора = Истина;

			ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix
					И ДанныеВыбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда

				УчитыватьДанныеВыбора = Истина;

			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)
			И ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix
			И ПараметрыСканирования.ЗапрашиватьНоменклатуру Тогда

		Если ДанныеВыбора <> Неопределено
				И ДанныеВыбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда

			УчитыватьДанныеВыбора = Истина;

		КонецЕсли;

	КонецЕсли;

	Если УчитыватьДанныеВыбора Тогда

		ДанныеШтрихкода.АлкогольнаяПродукция = ДанныеВыбора.АлкогольнаяПродукция;
		ДанныеШтрихкода.Номенклатура         = ДанныеВыбора.Номенклатура;
		ДанныеШтрихкода.Характеристика       = ДанныеВыбора.Характеристика;
		ДанныеШтрихкода.Серия                = ДанныеВыбора.Серия;

		Если МодульШтрихкодированиеЕГАИС <> Неопределено
			И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда

			МодульШтрихкодированиеЕГАИС.ЗаписатьДанныеВыбораПоАкцизнойМарке(ДанныеШтрихкода, ДанныеВыбора);

		КонецЕсли;

	КонецЕсли;

	Если Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихКода.ТипУпаковки)
		И ПараметрыСканирования.ЗапрашиватьНоменклатуру
		И (Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			Или Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)) Тогда

		РезультатОбработки.ТребуетсяВыборНоменклатуры = Истина;

	КонецЕсли;

	Если Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихКода.ТипУпаковки)
		И ПараметрыСканирования.ЗапрашиватьНоменклатуру
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
		И Не РезультатОбработки.ТребуетсяВыборНоменклатуры
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);

		ДанныеДокументаОснования = ШтрихкодированиеИС.ДанныеДокументаОснования(ПараметрыСканирования);
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0
			И ЗначениеЗаполнено(НайденныеСтроки[0].Серия) Тогда

			ДанныеВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;

			Если ДанныеВыбора <> Неопределено
				И ДанныеВыбора.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция
				И ДанныеВыбора.Номенклатура = ДанныеШтрихкода.Номенклатура
				И ДанныеВыбора.Характеристика = ДанныеШтрихкода.Характеристика
				И ЗначениеЗаполнено(ДанныеВыбора.Серия) Тогда

				ДанныеШтрихкода.Серия = ДанныеВыбора.Серия;

				Если МодульШтрихкодированиеЕГАИС <> Неопределено
					И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда

					МодульШтрихкодированиеЕГАИС.ЗаписатьДанныеВыбораПоАкцизнойМарке(ДанныеШтрихкода, ДанныеВыбора);

				КонецЕсли

			Иначе

				РезультатОбработки.ТребуетсяВыборНоменклатуры = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если РезультатОбработки.ТребуетсяВыборНоменклатуры Тогда

		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("АлкогольнаяПродукция",          ДанныеШтрихкода.АлкогольнаяПродукция);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("КодАлкогольнойПродукции",       ДанныеШтрихкода.КодАлкогольнойПродукции);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("АкцизнаяМарка",                 ДанныеШтрихкода.ШтрихкодУпаковки);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("ТипШтрихкода",                  ДанныеШтрихкода.ТипШтрихкода);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("ТипУпаковки",                   ДанныеШтрихкода.ТипУпаковки);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("Штрихкод",                      ДанныеШтрихкода.Штрихкод);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("Номенклатура",                  ДанныеШтрихкода.Номенклатура);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("Характеристика",                ДанныеШтрихкода.Характеристика);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("АдресДанныхДокументаОснования", ПараметрыСканирования.АдресДанныхДокументаОснования);
		РезультатОбработки.ПараметрыВыбораНоменклатуры.Вставить("ДокументОснование",             ПараметрыСканирования.ДокументОснование);

	КонецЕсли;
	
	ЗаполнитьРезультатОбработкиШтрихкодаЧастичноеВыбытие(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);
	
КонецПроцедуры

// Создает элемент справочника "Штрихкоды упаковок товаров" по данным штрихкода.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура СоздатьШтрихкодУпаковкиПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования) Экспорт

	Если ПараметрыСканирования.СоздаватьШтрихкодУпаковки
		И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		И ПустаяСтрока(ДанныеШтрихкода.ТекстОшибки) Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			И ДанныеШтрихкода.Коэффициент = Неопределено Тогда
			ОписаниеНоменклатурыИС = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ДанныеШтрихкода.Номенклатура);
			ДанныеШтрихкода.Коэффициент = ОписаниеНоменклатурыИС[ДанныеШтрихкода.Номенклатура].КоличествоВПотребительскойУпаковке;
		КонецЕсли;
		
		ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
		ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеШтрихкода);
		
		ДанныеНовойУпаковки.Штрихкод    = ДанныеШтрихкода.Штрихкод;
		ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Если ДанныеШтрихкода.Коэффициент <> Неопределено И ДанныеШтрихкода.Коэффициент > 0 Тогда
			ДанныеНовойУпаковки.Количество = ДанныеШтрихкода.Коэффициент;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
		Иначе
			ДанныеНовойУпаковки.Количество = 1;
		КонецЕсли;
		
		ДанныеШтрихкода.ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
		
	КонецЕсли;

КонецПроцедуры

// Результат обработки данных штрихкода акцизной марки с номером и серией.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой происходит обработка штрихкодов.
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиШтрихкодаСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт

	Если ПараметрыСканирования.КонтрольЗаполненияМарокСНомеромИСерией
		И ДанныеШтрихкода.Справки2.Количество() = 0 Тогда

		РезультатДобавленияШтрихкодаВДокумент = ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
		РезультатДобавленияШтрихкодаВДокумент.ТекстОшибки = СтрШаблон(НСтр("ru='По штрихкоду %1 справок 2 не обнаружено.'"), ДанныеШтрихкода.Штрихкод);

	ИначеЕсли ДанныеШтрихкода.Справки2.Количество() > 0
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.Справка2) Тогда

		РезультатДобавленияШтрихкодаВДокумент = ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
		РезультатДобавленияШтрихкодаВДокумент.ТребуетсяВыборСправки2 = Истина;
		РезультатДобавленияШтрихкодаВДокумент.ДанныеШтрихкода = ДанныеШтрихкода;

		Для Каждого ДанныеСправки2 Из ДанныеШтрихкода.Справки2 Цикл
			РезультатДобавленияШтрихкодаВДокумент.Справки2.Добавить(ДанныеСправки2.Справка2);
		КонецЦикла;

	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Справка2)
			И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда

		РезультатДобавленияШтрихкодаВДокумент = ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
		РезультатДобавленияШтрихкодаВДокумент.ТребуетсяВыборНоменклатуры = Истина;
		РезультатДобавленияШтрихкодаВДокумент.ДанныеШтрихкода = ДанныеШтрихкода;

		РезультатДобавленияШтрихкодаВДокумент.ПараметрыВыбораНоменклатуры.Вставить("АлкогольнаяПродукция", ДанныеШтрихкода.АлкогольнаяПродукция);
		РезультатДобавленияШтрихкодаВДокумент.ПараметрыВыбораНоменклатуры.Вставить("ТипШтрихкода", Перечисления.ТипыШтрихкодов.DataMatrix);

	Иначе

		РезультатДобавленияШтрихкодаВДокумент = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования); // ШК с номером и серией

	КонецЕсли;

	Возврат РезультатДобавленияШтрихкодаВДокумент;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары» на основании структуры параметров.
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок».
//
// Параметры:
//  ПараметрыФормированияТекстаЗапроса - См. ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов.
// Возвращаемое значение:
//  Структура - Описание:
// * МаркированныеТовары - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ШтрихкодыУпаковокПоДокументу(ПараметрыФормированияТекстаЗапроса)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыФормированияТекстаЗапроса.ДокументСсылка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ПараметрыФормированияТекстаЗапроса.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ВложенныеШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременныхТаблиц);
	
	Возврат ВложенныеШтрихкодыУпаковок;
	
КонецФункции

// Заполняет строку дерева упаковок данными выборки запроса. Добавляет данные в таблицу маркированные товары.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - (См. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок) и дополнения его специфичными колонками. 
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка запроса, для заполнения строки дерева упаковок.
//  Уровень - Число - Уровень дерева упаковок.
//  МаркированныеТовары - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//  ДополнительныеПараметры - Структура - Описание:
// * УпаковкиВерхнегоУровня - Соответствие из КлючИЗначение - Строки верхнего уровня дерева.
Процедура ЗаполнитьСтрокуДереваУпаковок(СтрокаДерева, Выборка, Уровень, МаркированныеТовары, ДополнительныеПараметры)
	
	ТекстУровень = ?(Уровень = 0, "", "Уровень" + Уровень);
	
	СтрокаДерева.ОрганизацияЕГАИС     = Выборка.ОрганизацияЕГАИС;
	СтрокаДерева.ШтрихкодУпаковки     = Выборка["Упаковка" + ТекстУровень];
	СтрокаДерева.ИдентификаторСтроки  = Выборка["Упаковка" + ТекстУровень + "ИдентификаторСтроки"];
	СтрокаДерева.ТипУпаковки          = Выборка["Упаковка" + ТекстУровень + "ТипУпаковки"];
	СтрокаДерева.ТипШтрихкода         = Выборка["Упаковка" + ТекстУровень + "ТипШтрихкода"];
	СтрокаДерева.Штрихкод             = Выборка["Упаковка" + ТекстУровень + "Штрихкод"];
	СтрокаДерева.Номенклатура         = Выборка["Упаковка" + ТекстУровень + "Номенклатура"];
	СтрокаДерева.Характеристика       = Выборка["Упаковка" + ТекстУровень + "Характеристика"];
	СтрокаДерева.Серия                = Выборка["Упаковка" + ТекстУровень + "Серия"];
	СтрокаДерева.ХешСумма             = Выборка["Упаковка" + ТекстУровень + "ХешСумма"];
	СтрокаДерева.Статус               = Выборка["Упаковка" + ТекстУровень + "Статус"];
	СтрокаДерева.Справка2             = Выборка["Упаковка" + ТекстУровень + "Справка2"];
	СтрокаДерева.АлкогольнаяПродукция = Выборка["Упаковка" + ТекстУровень + "АлкогольнаяПродукция"];
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаДерева.КодАлкогольнойПродукции)
			И ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(СтрокаДерева.Штрихкод) Тогда
			СтрокаДерева.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
		СтрокаДерева.Коэффициент = Выборка.Коэффициент;
		СтрокаДерева.ЕмкостьПотребительскойУпаковки = Выборка.ЕмкостьПотребительскойУпаковки;
		
		Если ЗначениеЗаполнено(Выборка.ЧастичноеВыбытиеВариантУчета) Тогда
			СтрокаДерева.ЧастичноеВыбытие               = Истина;
			СтрокаДерева.ЧастичноеВыбытиеВариантУчета   = Выборка.ЧастичноеВыбытиеВариантУчета;
			СтрокаДерева.ЧастичноеВыбытиеКоличество     = СтрокаДерева.ЧастичноеВыбытиеКоличество + Выборка.ЧастичноеВыбытиеКоличество;
			СтрокаДерева.ЧастичноеВыбытиеНоменклатура   = Выборка.ЧастичноеВыбытиеНоменклатура;
			СтрокаДерева.ЧастичноеВыбытиеХарактеристика = Выборка.ЧастичноеВыбытиеХарактеристика;
			Если Выборка.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				СтрокаДерева.Номенклатура   = Выборка.ЧастичноеВыбытиеНоменклатура;
				СтрокаДерева.Характеристика = Выборка.ЧастичноеВыбытиеХарактеристика;
				СтрокаДерева.Коэффициент    = СтрокаДерева.ЕмкостьПотребительскойУпаковки;
			КонецЕсли;
			СтрокаДерева.Количество      = СтрокаДерева.Количество + Выборка.ЧастичноеВыбытиеКоличество;
			СтрокаДерева.ВыбытиеБутылки  = Выборка.ВыбытиеБутылки;
			Количество = Выборка.ЧастичноеВыбытиеКоличество;
		ИначеЕсли СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
			СтрокаДерева.Количество = СтрокаДерева.Коэффициент;
			Количество = СтрокаДерева.Количество;
		Иначе
			Количество = 0;
		КонецЕсли;
 		
		СтрокаТаблицы = МаркированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева, , "Количество");
		СтрокаТаблицы.Количество = Количество;
		
		СтрокаТаблицы.СтрокаДерева           = СтрокаДерева;
		СтрокаТаблицы.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева, ДополнительныеПараметры.УпаковкиВерхнегоУровня);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает самую верхнюю строку в иерархии.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  УпаковкиВерхнегоУровня - Соответствие из КлючИЗначение:
//   * Ключ - СтрокаДереваЗначений - Строка дерева
//   * Значение - СтрокаДереваЗначений - Строка дерева верхнего уровня.
// Возвращаемое значение:
//  СтрокаДереваЗначений, Произвольный - Описание:
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Алкогольная продукция.
// * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
// * ВсеСправки2Указаны - Булево - Истина, если указаны все справки 2.
// * Статус - ПеречислениеСсылка.СтатусыАкцизныхМарок - Статус акцизной марки.
// * КодАлкогольнойПродукции - Число - Код продукции по классификатору.
// * КоличествоАкцизныхМарок - Число - Количество марок.
Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, УпаковкиВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = УпаковкиВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, УпаковкиВерхнегоУровня);
		
		УпаковкиВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;

КонецФункции

// Получает данные из справочника Справки 2 по разобранному штрихкоду акцизной марки, который содержит номер и серию.
//
// Параметры:
//  СтруктураШтрихкода - Структура - Описание:
// * НомерМарки - Строка - Номер марки.
// * СерияМарки - Строка - Серия марки.
// * ТипМарки - Строка - Тип Марки.
// Возвращаемое значение:
//  Массив из Структура - Описание:
//   * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
//   * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Алкогольная продукция.
//   * КодАлкогольнойПродукции - Число - Код алкогольной продукции.
//   * НомерТТН - Строка - Номер ТТН.
//   * ДатаТТН - Дата - Дата ТТН.
//   * ДатаРозлива - Дата - Дата розлива алкогольной продукции.
//   * КоличествоПоСправке1 - Число - Количество бутылок по справке 1.
//   * НомерПодтвержденияЕГАИС - Строка - Номер подтверждения ЕГАИС.
//   * ДатаПодтвержденияЕГАИС - Дата - Дата подтверждения ЕГАИС.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры.
//   * Упаковка - ОпределяемыйТип.Упаковка - Упаковка.
Функция Справки2ПоШтрихкодуСНомеромИСерией(СтруктураШтрихкода)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипМарки", СтруктураШтрихкода.ТипМарки);
	Запрос.УстановитьПараметр("СерияМарки", СтруктураШтрихкода.СерияМарки);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка                                  КАК Ссылка,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.НачальныйНомер                          КАК НачальныйНомер,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.КонечныйНомер                           КАК КонечныйНомер,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.АлкогольнаяПродукция             КАК АлкогольнаяПродукция,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.АлкогольнаяПродукция.Код         КАК КодАлкогольнойПродукции,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.Справка1.НомерТТН                КАК НомерТТН,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.Справка1.ДатаТТН                 КАК ДатаТТН,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.Справка1.ДатаРозлива             КАК ДатаРозлива,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.Справка1.Количество              КАК КоличествоПоСправке1,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.Справка1.НомерПодтвержденияЕГАИС КАК НомерПодтвержденияЕГАИС,
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.Ссылка.Справка1.ДатаПодтвержденияЕГАИС  КАК ДатаПодтвержденияЕГАИС
	|ИЗ
	|	Справочник.Справки2ЕГАИС.ДиапазоныНомеровАкцизныхМарок КАК Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок
	|ГДЕ
	|	Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.ТипМарки = &ТипМарки
	|	И Справки2ЕГАИСДиапазоныНомеровАкцизныхМарок.СерияМарки = &СерияМарки";
	
	НомерМарки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтруктураШтрихкода.НомерМарки);
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	
	ДобавленныеСправки2 = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачальныйНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.НачальныйНомер);
		КонечныйНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.КонечныйНомер);
		
		Если НомерМарки >= НачальныйНомер И НомерМарки <= КонечныйНомер Тогда
			Если ДобавленныеСправки2.Найти(Выборка.Ссылка) = Неопределено Тогда
				ДанныеСправки2 = Новый Структура;
				ДанныеСправки2.Вставить("Справка2",                Выборка.Ссылка);
				ДанныеСправки2.Вставить("АлкогольнаяПродукция",    Выборка.АлкогольнаяПродукция);
				ДанныеСправки2.Вставить("КодАлкогольнойПродукции", Выборка.КодАлкогольнойПродукции);
				ДанныеСправки2.Вставить("НомерТТН",                Выборка.НомерТТН);
				ДанныеСправки2.Вставить("ДатаТТН",                 Выборка.ДатаТТН);
				ДанныеСправки2.Вставить("ДатаРозлива",             Выборка.ДатаРозлива);
				ДанныеСправки2.Вставить("КоличествоПоСправке1",    Выборка.КоличествоПоСправке1);
				ДанныеСправки2.Вставить("НомерПодтвержденияЕГАИС", Выборка.НомерПодтвержденияЕГАИС);
				ДанныеСправки2.Вставить("ДатаПодтвержденияЕГАИС",  Выборка.ДатаПодтвержденияЕГАИС);
				ДанныеСправки2.Вставить("Номенклатура");
				ДанныеСправки2.Вставить("Характеристика");
				ДанныеСправки2.Вставить("Упаковка");
				
				СтрокаТаблицы = ТаблицаСопоставления.Найти(Выборка.АлкогольнаяПродукция, "АлкогольнаяПродукция");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаСопоставления.Добавить();
					СтрокаТаблицы.АлкогольнаяПродукция = Выборка.АлкогольнаяПродукция;
				КонецЕсли;
				
				Результат.Добавить(ДанныеСправки2);
				ДобавленныеСправки2.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияЕГАИС.ЗаполнитьСопоставленнуюПродукцию(ТаблицаСопоставления);
	
	Для Каждого ДанныеСправки2 Из Результат Цикл
		СтрокаТаблицы = ТаблицаСопоставления.Найти(ДанныеСправки2.АлкогольнаяПродукция, "АлкогольнаяПродукция");
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСправки2, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обработку данных после уточнения информации по справкам 2 у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется выполнить обработку штрихкодов.
//  РезультатВыбора - Произвольный - результат выбора пользователем справки 2.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные значения формы.
// Возвращаемое значение:
//  См. ШтрихкодированиеОбщегоНазначенияЕГАИС.ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьВыборСправки2(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = ОбработатьДанныеШтрихкодаПослеВыбораСправки2(РезультатВыбора, РезультатОбработкиШтрихкода);
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает текст запроса для получения специфичных данных по штрихкодам.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаПолученияСпецификиДанныхШтрихкодов()
	
	Возврат
	"ВЫБРАТЬ
	|	&ОрганизацияЕГАИС                          КАК ОрганизацияЕГАИС,
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК АкцизнаяМарка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыУпаковок
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&ШтрихкодыУпаковок)
	|ИНДЕКСИРОВАТЬ ПО
	|	АкцизнаяМарка,
	|	ОрганизацияЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.АкцизнаяМарка                                                                                             КАК АкцизнаяМарка,
	|	ШтрихкодыУпаковок.Штрихкод                                                                                                  КАК Штрихкод,
	|	ШтрихкодыУпаковок.ОрганизацияЕГАИС                                                                                          КАК ОрганизацияЕГАИС,
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.Статус,             ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка))                   КАК Статус,
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.Справка2,           ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка))                            КАК Справка2,
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.АлкогольнаяПродукция.Код, """")                                                                 КАК КодАлкогольнойПродукции,
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия, 0)                                                                 КАК КоличествоЧастичногоВыбытия,
	|	1                                                                                                                           КАК Приоритет
	|ИЗ
	|	ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ШтрихкодыУпаковок.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|		И ШтрихкодыУпаковок.ОрганизацияЕГАИС = АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.АкцизнаяМарка,
	|	ШтрихкодыУпаковок.Штрихкод,
	|	ШтрихкодыУпаковок.ОрганизацияЕГАИС,
	|	ВЫБОР
	|		КОГДА &Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ВскрытиеПотребительскойУпаковки)
	|		ТОГДА АкцизныеМаркиЕГАИС.Статус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка),
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)),
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.АлкогольнаяПродукция.Код, """"),
	|	ЕСТЬNULL(АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия, 0),
	|	2
	|ИЗ
	|	ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ШтрихкодыУпаковок.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|		И ШтрихкодыУпаковок.ОрганизацияЕГАИС <> АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ВскрытиеПотребительскойУпаковки)
	|		ТОГДА АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии) ИЛИ АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВскрытаяБутылка)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|";
	
КонецФункции

// Добавляет колонки для общей таблицы "Маркированные товары"
//
// Параметры:
//  Коллекция - ТаблицаЗначений:
//     * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     * Статус - ПеречислениеСсылка.СтатусыАкцизныхМарок - статус акцизной марки.
//     * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
//     * АлкогольнаяПродукция - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Алкогольная продукция.
//     * КодАлкогольнойПродукции - Число - Код продукции по классификатору.
Процедура НормализироватьКолонкиТаблицыМаркированныеТовары(Коллекция)
	
	КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	
	КоллекцияОбязательныхКолонок.Вставить("ОрганизацияЕГАИС",        Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	КоллекцияОбязательныхКолонок.Вставить("КодАлкогольнойПродукции", Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("АлкогольнаяПродукция",    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Справка2",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Статус",                  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЧастичноеВыбытие",        Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("Коэффициент",             Новый ОписаниеТипов("Булево, Число",,,Новый КвалификаторыЧисла(18, 8, ДопустимыйЗнак.Неотрицательный)));
	КоллекцияОбязательныхКолонок.Вставить("ЕмкостьПотребительскойУпаковки", ОбщегоНазначения.ОписаниеТипаЧисло(12, 3));
	КоллекцияОбязательныхКолонок.Вставить("ВыбытиеБутылки",          Новый ОписаниеТипов("Булево"));

	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в базовую коллекцию "Дерево упаковок" колонки, необходимую для алкогольной продукции.
//
// Параметры:
//  Коллекция - ДеревоЗначений - Дерево упаковок с обязательными колонками:
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Алкогольная продукция.
// * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
// * ВсеСправки2Указаны - Булево - Истина, если для каждой марки указана справка 2.
// * Статус - ПеречислениеСсылка.СтатусыАкцизныхМарок -
// * КодАлкогольнойПродукции - Число - Код продукции по классификатору.
// * КоличествоАкцизныхМарок - Число - количество марок с одним кодом маркировки.
Процедура НормализоватьКолонкиДереваУпаковок(Коллекция) Экспорт
	
	КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
	
	КоллекцияОбязательныхКолонок.Вставить("ОрганизацияЕГАИС",        Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	// Неопределено должно быть заполнено для упаковки если в дочерних строках поле КодАлкогольнойПродукции имеет разные значения
	КоллекцияОбязательныхКолонок.Вставить("КодАлкогольнойПродукции", Неопределено);
	// Неопределено должно быть заполнено для упаковки если в дочерних строках поле АлкогольнаяПродукция имеет разные значения
	КоллекцияОбязательныхКолонок.Вставить("АлкогольнаяПродукция",    Неопределено);
	// Неопределено должно быть заполнено для упаковки если в дочерних строках поле Справка2 имеет разные значения
	КоллекцияОбязательныхКолонок.Вставить("Справка2",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Статус",                  Неопределено);
	
	КоллекцияОбязательныхКолонок.Вставить("ВсеСправки2Указаны",      Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоАкцизныхМарок", Новый ОписаниеТипов("Число"));
	
	КоллекцияОбязательныхКолонок.Вставить("ЕмкостьПотребительскойУпаковки", ОбщегоНазначения.ОписаниеТипаЧисло(12, 3));
	КоллекцияОбязательныхКолонок.Вставить("ЧастичноеВыбытие",               Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ЧастичноеВыбытиеВариантУчета",   Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
	КоллекцияОбязательныхКолонок.Вставить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ЧастичноеВыбытиеКоличество",     ОбщегоНазначения.ОписаниеТипаЧисло(10,3));
	КоллекцияОбязательныхКолонок.Вставить("ВыбытиеБутылки",                 Новый ОписаниеТипов("Булево"));

	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкода Данными выбора, которые указал пользователь.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ДанныеВыбора - Произвольный - уточняющие данные.
Процедура ЗаписатьДанныеВыбораПоАкцизнойМарке(ДанныеШтрихкода, ДанныеВыбора) Экспорт

	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		НовыеРеквизиты = Новый Структура;
		НовыеРеквизиты.Вставить("Номенклатура",   ДанныеВыбора.Номенклатура);
		НовыеРеквизиты.Вставить("Характеристика", ДанныеВыбора.Характеристика);
		НовыеРеквизиты.Вставить("Серия",          ДанныеВыбора.Серия);
		
		Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
			ДанныеШтрихкода.ШтрихкодУпаковки, НовыеРеквизиты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция) Тогда
		
		СоответствиеНоменклатурыЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
		СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		СоответствиеНоменклатурыЕГАИС.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СоответствиеНоменклатурыЕГАИС.Характеристика       = ДанныеШтрихкода.Характеристика;
		СоответствиеНоменклатурыЕГАИС.Серия                = ДанныеШтрихкода.Серия;
		СоответствиеНоменклатурыЕГАИС.Справка2             = ДанныеШтрихкода.Справка2;
		СоответствиеНоменклатурыЕГАИС.Записать();
		
	КонецЕсли;

КонецПроцедуры

#Область ПроверкаНаОшибки

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибкиКонтрольАкцизныхМарок(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ПараметрыСканирования.КонтрольАкцизныхМарок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
				Продолжить;
			ИначеЕсли Не ПараметрыСканирования.ТолькоЕГАИС
				И СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверитьМаркуПоСтатусу(
				СтрокаДанных.Штрихкод, СтрокаДанных.ШтрихкодУпаковки,
				СтрокаДанных.ВидУпаковки, СтрокаДанных.Статус,
				ПараметрыСканирования, СтрокаДанных.ТекстОшибки);
			
			Если Не ПустаяСтрока(СтрокаДанных.ТекстОшибки) Тогда
				
				ЕстьОшибки = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Статус) Тогда
				
				АкцизныеМаркиЕГАИСПереопределяемый.ПроверитьУникальностьАкцизнойМарки(
					ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок,
					СтрокаДанных.Штрихкод,
					СтрокаДанных.ТекстОшибки);
				
				ЕстьОшибки = Не ПустаяСтрока(СтрокаДанных.ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не ПараметрыСканирования.ТолькоЕГАИС
				И СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = "";
			ПроверитьМаркуПоСтатусу(
				СтрокаДанных.Штрихкод, СтрокаДанных.ШтрихкодУпаковки,
				СтрокаДанных.ВидУпаковки, СтрокаДанных.Статус,
				ПараметрыСканирования, ТекстОшибки);
			
			Если ПустаяСтрока(ТекстОшибки) И Не ЗначениеЗаполнено(СтрокаДанных.Статус) Тогда
				
				АкцизныеМаркиЕГАИСПереопределяемый.ПроверитьУникальностьАкцизнойМарки(
					ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок,
					СтрокаДанных.Штрихкод,
					ТекстОшибки);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстОшибки)
				И СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева)
				И Не ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева.АлкогольнаяПродукция) Тогда
				ЕстьОшибки = Истина;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки = НСтр("ru = 'Не сопоставлена алкогольная продукция'");
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку кода акцизной марки по статусу.
// 
// Параметры:
//  Штрихкод - Строка - Код акцизной марки.
//  ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//  ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковки
//  СтатусМарки - ПеречислениеСсылка.СтатусыАкцизныхМарок - текущий статус марки.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ТекстОшибки - Строка - Описание ошибки в случае неуспешной проверки.
Процедура ПроверитьМаркуПоСтатусу(Штрихкод, ШтрихкодУпаковки, ВидУпаковки, СтатусМарки, ПараметрыСканирования, ТекстОшибки)
	
	Если ПараметрыСканирования.ДоступныеСтатусы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМарка150Символов = (ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская И СтрДлина(Штрихкод) = 150);
	Если ЭтоМарка150Символов И Не ПараметрыСканирования.КонтрольПустогоСтатуса150СимвольныхМарок
		И Не ЗначениеЗаполнено(СтатусМарки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШтрихкодУпаковки) И Не ЭтоМарка150Символов Тогда
		Возврат;
	КонецЕсли;
	
	ПустойСтатус = Перечисления.СтатусыАкцизныхМарок.ПустаяСсылка();
	Если    (   ЗначениеЗаполнено(СтатусМарки) И ПараметрыСканирования.ДоступныеСтатусы.Найти(СтатусМарки) = Неопределено)
		Или (Не ЗначениеЗаполнено(СтатусМарки) И ПараметрыСканирования.ДоступныеСтатусы.Найти(ПустойСтатус) = Неопределено)
		Или (Не ЗначениеЗаполнено(СтатусМарки) И ЭтоМарка150Символов) Тогда
		
		ПредставлениеСтатуса = НСтр("ru = '<Нет статуса>'");
		Если ЗначениеЗаполнено(СтатусМарки) Тогда
			ПредставлениеСтатуса = СтатусМарки;
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Статус: %1'"), ПредставлениеСтатуса);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОписаниеНоменклатурыИЧастичноеВыбытие

Процедура ЗаполнитьТаблицуДанныеКодовМаркировкиОписаниемНоменклатуры(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт

	Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив") Тогда
		ЧастичноеВыбытиеИспользуется = ДанныеКодовМаркировки.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеКодовМаркировки[0], "ЧастичноеВыбытие");
	Иначе
		ЧастичноеВыбытиеИспользуется = ДанныеКодовМаркировки.Колонки.Найти("ЧастичноеВыбытие") <> Неопределено;
	КонецЕсли;

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИндексСтроки",   ОбщегоНазначения.ОписаниеТипаЧисло(6));
	Таблица.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Таблица.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);

	ИндексСтроки = 0;
	АлкогольнаяПродукция = Новый Массив;
	Для Каждого Строка Из ДанныеКодовМаркировки Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
			СтрокаТаблицы.ИндексСтроки = ИндексСтроки;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
		АлкогольнаяПродукция.Добавить(Строка.Номенклатура);
	КонецЦикла;

	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияНоменклатуры  = ОбщегоНазначенияИС.ОписаниеНоменклатуры(АлкогольнаяПродукция);
	Если ЧастичноеВыбытиеИспользуется Тогда
		ОписаниеЧастичногоВыбытия = РегистрыСведений.НастройкиЧастичногоВыбытияПродукцииИС.НастроеннаяНоменклатураЧастичногоВыбытия(
			АлкогольнаяПродукция);
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеНоменклатуры      = ОписанияНоменклатуры[СтрокаТаблицы.Номенклатура];
		СтрокаТаблицы.Коэффициент = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
		Если СтрокаТаблицы.Количество = 0
			И СтрокаТаблицы.СтрокаДерева <> Неопределено
			И СтрокаТаблицы.СтрокаДерева.КоличествоПоДаннымИБ = 0 Тогда
			Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаТаблицы.ПлановоеКоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
			СтрокаТаблицы.Количество = СтрокаТаблицы.Коэффициент * СтрокаТаблицы.ПлановоеКоличествоПотребительскихУпаковок;
			СтрокаТаблицы.СтрокаДерева.Количество                                = СтрокаТаблицы.Количество;
			СтрокаТаблицы.СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Если ЧастичноеВыбытиеИспользуется Тогда
			
			СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета   = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
			СтрокаТаблицы.ЕмкостьПотребительскойУпаковки = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
			СтрокаТаблицы.ЧастичноеВыбытие               = СтрокаТаблицы.ЧастичноеВыбытиеВыведено > 0;
			СтрокаТаблицы.ЧастичноеВыбытиеОстаток        = Макс(ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки - СтрокаТаблицы.ЧастичноеВыбытиеВыведено, 0);
			
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
			ПоискСтрок = ОписаниеЧастичногоВыбытия.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из ПоискСтрок Цикл
				СтрокаТаблицы.ЧастичноеВыбытиеНоменклатура   = НайденнаяСтрока.НоменклатураЧастичногоВыбытия;
				СтрокаТаблицы.ЧастичноеВыбытиеХарактеристика = НайденнаяСтрока.ХарактеристикаЧастичногоВыбытия;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатОбработкиШтрихкодаЧастичноеВыбытие(ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования) Экспорт

	Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			ДанныеШтрихкода.ВидПродукции,
			ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, ДанныеШтрихкода.ВидПродукции))
		И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		И ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования)
		И (ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура
			Или ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
				И ЗначениеЗаполнено(ДанныеШтрихкода.ЧастичноеВыбытиеНоменклатура)) Тогда
		
		Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И (ДанныеШтрихкода.ЧастичноеВыбытиеОстаток = Неопределено
				Или ДанныеШтрихкода.ЧастичноеВыбытиеОстаток = ДанныеШтрихкода.ЕмкостьПотребительскойУпаковки) Тогда
			
			РезультатОбработки.ТребуетсяВскрытиеПотребительскойУпаковки = Истина;
			РезультатОбработки.ТребуетсяУточнениеДанных                 = Истина;
			
		Иначе
			
			ДанныеШтрихкода.ТребуетсяУточнениеЧастичногоВыбытия = Истина;
			РезультатОбработки.ТребуетсяУточнениеДанных         = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает данные штрихкода после выбора справки 2 пользователем.
//
// Параметры:
//  РезультатВыбора - Произвольный - результат выбора пользователем справки 2.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
// Возвращаемое значение:
//  (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
Функция ОбработатьДанныеШтрихкодаПослеВыбораСправки2(РезультатВыбора, РезультатОбработкиШтрихкода)
	
	ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	
	ЗаполнитьДанныеШтрихкодаПоСправке2(ДанныеШтрихкода, РезультатВыбора);
	
	//@skip-check constructor-function-return-section
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Инициализирует таблицу значений - "Маркированные товары" путем получения базовой структуры таблицы значений -
// (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары) и дополнения ее специфичными колонками.
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары) и
//    (См. НормализироватьКолонкиТаблицыМаркированныеТовары).
Функция ИнициализироватьТаблицуМаркированныеТовары()
	
	МаркированныеТовары = ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары();
	НормализироватьКолонкиТаблицыМаркированныеТовары(МаркированныеТовары);
	
	Возврат МаркированныеТовары;
	
КонецФункции

// Инициализирует дерево значений - "Дерево упаковок" путем получения базовой структуры дерева -
// (См. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок) и дополнения его специфичными колонками.
//
// Возвращаемое значение:
//  ДеревоЗначений - (См. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок)
//            и (См. НормализоватьКолонкиДереваУпаковок).
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьКолонкиДереваУпаковок(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Процедура ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь)

	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];

	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;

	ДанныеСтроки[ИмяПоля] = Значение;

КонецПроцедуры

Процедура ЗаполнитьДанныеНеизвестныхШтрихкодовСНомеромИСерией(СтрокиДанных, ПараметрыСканирования)

	Если СтрокиДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика");
	ТаблицаНоменклатуры.Колонки.Добавить("Упаковка");

	ТаблицаАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("АлкогольнаяПродукция");
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("КодАлкогольнойПродукции");

	Для Каждого СтрокаДанных Из СтрокиДанных Цикл

		СтрокаДанных.Количество   = 1;
		СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная;

		СтруктураШтрихкода = РазборКодаМаркировкиЕГАИСОбщегоНазначенияКлиентСервер.РазложитьШтрихкодСНомеромИСерией(СтрокаДанных.Штрихкод, СтрокаДанных.ТекстОшибки);

		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДанных.ТипМарки   = СтруктураШтрихкода.ТипМарки;
		СтрокаДанных.СерияМарки = СтруктураШтрихкода.СерияМарки;
		СтрокаДанных.НомерМарки = СтруктураШтрихкода.НомерМарки;

		//@skip-check query-in-loop
		СтрокаДанных.Справки2 = Справки2ПоШтрихкодуСНомеромИСерией(СтруктураШтрихкода);

		ТаблицаНоменклатуры.Очистить();
		ТаблицаАлкогольнойПродукции.Очистить();

		Для Каждого ДанныеСправки2 Из СтрокаДанных.Справки2 Цикл

			СтрокаТаблицыНоменклатуры = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыНоменклатуры, ДанныеСправки2);

			СтрокаТаблицыАлкогольнойПродукции = ТаблицаАлкогольнойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыАлкогольнойПродукции, ДанныеСправки2);

		КонецЦикла;

		ТаблицаНоменклатуры.Свернуть("Номенклатура, Характеристика, Упаковка");
		ТаблицаАлкогольнойПродукции.Свернуть("АлкогольнаяПродукция, КодАлкогольнойПродукции");

		Если ТаблицаНоменклатуры.Количество() = 1 Тогда
			СтрокаДанных.Номенклатура   = ТаблицаНоменклатуры[0].Номенклатура;
			СтрокаДанных.Характеристика = ТаблицаНоменклатуры[0].Характеристика;
			СтрокаДанных.Упаковка       = ТаблицаНоменклатуры[0].Упаковка;
		КонецЕсли;

		Если ТаблицаАлкогольнойПродукции.Количество() = 1 Тогда
			СтрокаДанных.КодАлкогольнойПродукции = ТаблицаАлкогольнойПродукции[0].КодАлкогольнойПродукции;
			СтрокаДанных.АлкогольнаяПродукция    = ТаблицаАлкогольнойПродукции[0].АлкогольнаяПродукция;
		КонецЕсли;

		Если СтрокаДанных.Справки2.Количество() = 1 Тогда
			СтрокаДанных.Справка2 = СтрокаДанных.Справки2[0].Справка2;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеНеизвестныхШтрихкодовАкцизныхМарок(СтрокиДанных, ПараметрыСканирования)

	Для Каждого СтрокаДанных Из СтрокиДанных Цикл

		СтрокаДанных.Количество   = 1;
		СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная;

		Если СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417 Тогда
			АкцизныеМаркиВызовСервера.ЗаполнитьСопоставленнуюНоменклатуруПоАкцизнойМарке(СтрокаДанных.Штрихкод, СтрокаДанных);
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.Номенклатура) Тогда
			СтрокаДанных.Номенклатура   = ПараметрыСканирования.Номенклатура;
			СтрокаДанных.Характеристика = ПараметрыСканирования.Характеристика;
		КонецЕсли;

		Если ПараметрыСканирования.КонтрольАкцизныхМарок Тогда
			АкцизныеМаркиЕГАИСПереопределяемый.ПроверитьУникальностьАкцизнойМарки(
				ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок,
				СтрокаДанных.Штрихкод,
				СтрокаДанных.ТекстОшибки);
		КонецЕсли;

		СтрокаДанных.Идентифицирован = Истина;

		Если Не ЗначениеЗаполнено(СтрокаДанных.КодАлкогольнойПродукции)
			И СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417 Тогда
			Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных.СоставКодаМаркировки, "КодАлкогольнойПродукции") Тогда
				СтрокаДанных.КодАлкогольнойПродукции = СтрокаДанных.СоставКодаМаркировки.КодАлкогольнойПродукции;
			Иначе
				СтрокаДанных.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаДанных.Штрихкод);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Массив из Строка, Неопределено - Коды маркировки.
Функция ШтрихкодыУпаковокДляФормированияСпецифики(ДанныеКодовМаркировки)
	
	ШтрихкодыУпаковок = Неопределено;

	ВидыПродукцииЕГАИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС();

	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидыПродукцииЕГАИС.Найти(СтрокаДанных.ВидПродукции) <> Неопределено
			Или ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетАлкогольнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда

			Если ШтрихкодыУпаковок = Неопределено Тогда
				ШтрихкодыУпаковок = Новый Массив;
			КонецЕсли;

			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
				И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
				ШтрихкодыУпаковок.Добавить(СтрокаДанных.ШтрихкодУпаковки);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ШтрихкодыУпаковок;

КонецФункции

// Дополняет данные по штрихкодам переданными данными, например, из сохраненных данных в документе.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ПараметрыДополнения   - см. ШтрихкодированиеИС.ПараметрыДополненияВложенныхШтрихкодовУпаковок.
Процедура ДополнитьДанныеПоШтрихкодамПараметрамиДополнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения) Экспорт
	
	Если ПараметрыДополнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляЗаполнения = Новый Соответствие();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ШтрихкодУпаковки = Неопределено
			Или СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияПоЧастичномуВыбытию = ПараметрыДополнения.ДанныеЧастичногоВыбытия.Получить(СтрокаДанных.ШтрихкодУпаковки);
		
		Если ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхПоСтроке = Новый Структура("ДанныеЧастичногоВыбытия");
		
		Если Не ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено Тогда
			СтруктураДанныхПоСтроке.ДанныеЧастичногоВыбытия = ДанныеЗаполненияПоЧастичномуВыбытию;
		КонецЕсли;
		
		СтрокиДляЗаполнения.Вставить(СтрокаДанных, СтруктураДанныхПоСтроке);
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
		
			Если СтрокаДанных.ШтрихкодУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеЗаполненияПоЧастичномуВыбытию = ПараметрыДополнения.ДанныеЧастичногоВыбытия.Получить(СтрокаДанных.ШтрихкодУпаковки);
			
			Если ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхПоСтроке = Новый Структура("ДанныеЧастичногоВыбытия");
		
			Если Не ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено Тогда
				СтруктураДанныхПоСтроке.ДанныеЧастичногоВыбытия = ДанныеЗаполненияПоЧастичномуВыбытию;
			КонецЕсли;
			
			СтрокиДляЗаполнения.Вставить(СтрокаДанных, СтруктураДанныхПоСтроке);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокиДляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия = ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие();
	
	Для Каждого КлючИЗначение Из ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия Цикл
		ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтрокиДляЗаполнения Цикл
		
		СтрокаДанных     = КлючИЗначение.Ключ;
		ДанныеЗаполнения = КлючИЗначение.Значение;
		
		ДанныеЗаполненияПоЧастичномуВыбытию = ДанныеЗаполнения.ДанныеЧастичногоВыбытия;
		
		Если ДанныеЗаполненияПоЧастичномуВыбытию <> Неопределено
			И СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда

			Если ЗначениеЗаполнено(ДанныеЗаполненияПоЧастичномуВыбытию[ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия.Количество]) Тогда
				СтрокаДанных.ЧастичноеВыбытие = Истина;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.ЧастичноеВыбытие = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия Цикл
				
				Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ДанныеЗаполненияПоЧастичномуВыбытию, КлючИЗначение.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева[КлючИЗначение.Значение] = ДанныеЗаполненияПоЧастичномуВыбытию[КлючИЗначение.Ключ];
				КонецЕсли;
				
				СтрокаДанных[КлючИЗначение.Значение] = ДанныеЗаполненияПоЧастичномуВыбытию[КлючИЗначение.Ключ];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДанныеКодовМаркировкиСпецификой(ДанныеКодовМаркировки, СпецификаАкцизныхМарок)

	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);

	КодыАлкогольнойПродукции                                          = Новый Массив;
	СтрокиДляЗаполненияАлкогольнойПродукцииПоКодуАлкогольнойПродукции = Новый Массив;
	СтрокиДляЗаполненияАлкогольнойПродукцииПоТаблицеСопоставления     = Новый Массив;

	ВидыПродукцииЕГАИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС();
	ЗаполнятьДанныеЧастичногоВыбытия = ДанныеКодовМаркировки.Колонки.Найти("ЧастичноеВыбытие") <> Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл

		Если ВидыПродукцииЕГАИС.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СпецификаАкцизныхМарок <> Неопределено Тогда

			Отбор = Новый Структура("АкцизнаяМарка", СтрокаДанных.ШтрихкодУпаковки);

			НайденныеСтроки = СпецификаАкцизныхМарок.НайтиСтроки(Отбор);
			ДанныеСоСпецификой = Неопределено;
			Для Каждого СтрокаПоиска Из НайденныеСтроки Цикл

				Если ДанныеСоСпецификой = Неопределено Тогда
					ДанныеСоСпецификой = СтрокаПоиска;
				КонецЕсли;

				Если СтрокаПоиска.Приоритет < ДанныеСоСпецификой.Приоритет Тогда
					ДанныеСоСпецификой = СтрокаПоиска;
				КонецЕсли;

				Если СтрокаПоиска.Приоритет = 1 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Если ДанныеСоСпецификой <> Неопределено Тогда

				Если ЗначениеЗаполнено(ДанныеСоСпецификой.Статус) Тогда
					СтрокаДанных.Статус = ДанныеСоСпецификой.Статус;
				КонецЕсли;

				Если ЗначениеЗаполнено(ДанныеСоСпецификой.Справка2) Тогда
					СтрокаДанных.Справка2 = ДанныеСоСпецификой.Справка2;
				КонецЕсли;

				Если ЗначениеЗаполнено(ДанныеСоСпецификой.АлкогольнаяПродукция) Тогда
					СтрокаДанных.АлкогольнаяПродукция    = ДанныеСоСпецификой.АлкогольнаяПродукция;
					СтрокаДанных.КодАлкогольнойПродукции = ДанныеСоСпецификой.КодАлкогольнойПродукции;
				КонецЕсли;
				
				Если ЗаполнятьДанныеЧастичногоВыбытия Тогда
					СтрокаДанных.ЧастичноеВыбытиеВыведено = ДанныеСоСпецификой.КоличествоЧастичногоВыбытия;
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаДанных.АлкогольнаяПродукция) Тогда

			Если СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417 Тогда

				СтрокаДанных.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаДанных.Штрихкод);
				КодыАлкогольнойПродукции.Добавить(СтрокаДанных.КодАлкогольнойПродукции);

				СтрокиДляЗаполненияАлкогольнойПродукцииПоКодуАлкогольнойПродукции.Добавить(СтрокаДанных);

			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда

				СтрокиДляЗаполненияАлкогольнойПродукцииПоТаблицеСопоставления.Добавить(СтрокаДанных);

				НоваяСтрока = ТаблицаНоменклатуры.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаДанных.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаДанных.Характеристика;
				НоваяСтрока.Серия          = СтрокаДанных.Серия;

			КонецЕсли;

		КонецЕсли;

		Если СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417
				Или СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			СтрокаДанных.МаркируемаяПродукция = Истина;
		КонецЕсли;

	КонецЦикла;

	Если КодыАлкогольнойПродукции.Количество() > 0 Тогда

		СоответствиеАлкогольнойПродукции = ИнтеграцияЕГАИС.СоответствиеАлкогольнойПродукции(КодыАлкогольнойПродукции);
		Для Каждого СтрокаДанных Из СтрокиДляЗаполненияАлкогольнойПродукцииПоКодуАлкогольнойПродукции Цикл
			СтрокаДанных.АлкогольнаяПродукция = СоответствиеАлкогольнойПродукции[СтрокаДанных.КодАлкогольнойПродукции];
		КонецЦикла;

	КонецЕсли;

	Если ТаблицаНоменклатуры.Количество() > 0 Тогда

		ТаблицаНоменклатуры.Свернуть(
			"Номенклатура, Характеристика, Серия");

		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
			|	ТаблицаНоменклатуры.Серия          КАК Серия
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Серия          КАК Серия,
			|	ВЫБОР КОГДА СоответствиеСерии.АлкогольнаяПродукция ЕСТЬ NULL
			|		И СоответствиеНоменклатура.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
			|	КОГДА НЕ СоответствиеСерии.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
			|		СоответствиеСерии.АлкогольнаяПродукция
			|	ИНАЧЕ
			|		СоответствиеНоменклатура.АлкогольнаяПродукция
			|	КОНЕЦ КАК АлкогольнаяПродукция,
			|
			|	ВЫБОР КОГДА СоответствиеСерии.АлкогольнаяПродукция ЕСТЬ NULL
			|		И СоответствиеНоменклатура.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
			|		""""
			|	КОГДА НЕ СоответствиеСерии.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
			|		СоответствиеСерии.АлкогольнаяПродукция.Код
			|	ИНАЧЕ
			|		СоответствиеНоменклатура.АлкогольнаяПродукция.Код
			|	КОНЕЦ КАК КодАлкогольнойПродукции
			|ИЗ
			|	ТаблицаНоменклатуры КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеСерии
			|		ПО СоответствиеСерии.Номенклатура   = Т.Номенклатура
			|		 И СоответствиеСерии.Характеристика = Т.Характеристика
			|		 И СоответствиеСерии.Серия          = Т.Серия
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатура
			|		ПО СоответствиеНоменклатура.Номенклатура   = Т.Номенклатура
			|		 И СоответствиеНоменклатура.Характеристика = Т.Характеристика
			|		 И СоответствиеНоменклатура.Серия В (&ПустыеЗначенияСерий)
			|ГДЕ
			|	ВЫБОР КОГДА СоответствиеСерии.АлкогольнаяПродукция ЕСТЬ NULL
			|		И СоответствиеНоменклатура.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
			|	КОГДА НЕ СоответствиеСерии.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
			|		СоответствиеСерии.АлкогольнаяПродукция
			|	ИНАЧЕ
			|		СоответствиеНоменклатура.АлкогольнаяПродукция
			|	КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
			|");

		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
		Запрос.УстановитьПараметр("ПустыеЗначенияСерий", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));

		ТаблицаСопоставления = Запрос.Выполнить().Выгрузить();
		ТаблицаСопоставления.Индексы.Добавить("Номенклатура, Характеристика");

		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура");
		Отбор.Вставить("Характеристика");
		Отбор.Вставить("Серия");

		Для Каждого СтрокаДанных Из СтрокиДляЗаполненияАлкогольнойПродукцииПоТаблицеСопоставления Цикл

			Отбор.Номенклатура   = СтрокаДанных.Номенклатура;
			Отбор.Характеристика = СтрокаДанных.Характеристика;
			Отбор.Серия          = СтрокаДанных.Серия;

			НайденныеСтроки = ТаблицаСопоставления.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаДанных.АлкогольнаяПродукция = НайденныеСтроки[0].АлкогольнаяПродукция;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДереваУпаковокСпецификой(ДеревоУпаковок, ДанныеКодовМаркировки)

	НормализоватьКолонкиДереваУпаковок(ДеревоУпаковок);

	ЧастичноеВыбытиеИспользуется = ДанныеКодовМаркировки.Колонки.Найти("ЧастичноеВыбытие") <> Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл

		Если СтрокаДанных.СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтрокаДанных.СтрокаДерева.АлкогольнаяПродукция    = СтрокаДанных.АлкогольнаяПродукция;
		СтрокаДанных.СтрокаДерева.Справка2                = СтрокаДанных.Справка2;
		СтрокаДанных.СтрокаДерева.Статус                  = СтрокаДанных.Статус;
		СтрокаДанных.СтрокаДерева.КодАлкогольнойПродукции = СтрокаДанных.КодАлкогольнойПродукции;
		СтрокаДанных.СтрокаДерева.Коэффициент             = СтрокаДанных.Коэффициент;
		
		Если ЧастичноеВыбытиеИспользуется Тогда
			СтрокаДанных.СтрокаДерева.ЧастичноеВыбытие               = СтрокаДанных.ЧастичноеВыбытие;
			СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеВариантУчета   = СтрокаДанных.ЧастичноеВыбытиеВариантУчета;
			СтрокаДанных.СтрокаДерева.Количество                     = СтрокаДанных.Количество;
			СтрокаДанных.СтрокаДерева.ЕмкостьПотребительскойУпаковки = СтрокаДанных.ЕмкостьПотребительскойУпаковки;
			СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.ЧастичноеВыбытиеНоменклатура;
			СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеХарактеристика = СтрокаДанных.ЧастичноеВыбытиеХарактеристика;
		КонецЕсли;
		
	КонецЦикла;

	// Выполнить иерархический расчет колонок Алкогольная продукция, Справка 2, ВсеСправки2Указаны, КоличествоАкцизныхМарок
	СоздатьШтрихкодыУпаковок(ДеревоУпаковок, Неопределено, Истина);

КонецПроцедуры

Функция СпецификаАкцизныхМарок(ШтрихкодыУпаковок, ПараметрыСканирования) Экспорт

	Запрос = Новый Запрос(ТекстЗапросаПолученияСпецификиДанныхШтрихкодов());
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",  ПараметрыСканирования.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Операция",          ПараметрыСканирования.Операция);

	ДанныеСпецифики = Запрос.Выполнить().Выгрузить();
	ДанныеСпецифики.Индексы.Добавить("АкцизнаяМарка");

	Возврат ДанныеСпецифики;

КонецФункции

#КонецОбласти
