////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета УТ (клиент, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	МенюОтчетов  = Новый Массив;
	МенюДействий = Новый Массив;
		
	Если ПолноеИмяОтчета = "Отчет.ВедомостьПоПереданнойВозвратнойТаре"
		ИЛИ ПолноеИмяОтчета = "Отчет.ВедомостьПоПринятойВозвратнойТаре" Тогда
		СтандартнаяОбработка = Ложь;
		
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		ЭтаФорма.ОтчетДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма.Отчет));
		
		ВыполненноеДействие = Неопределено;
		ПараметрВыполненногоДействия = Неопределено;
		
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
		
		ПараметрыДействия = Новый Структура("ЭтаФорма", ЭтаФорма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗавершение", 
			ОтчетыУТКлиентПереопределяемый, 
			ПараметрыДействия);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ТоварыСИстекающимиСертификатами" Тогда
		
		СтандартнаяОбработка = Ложь;
			
		СтруктураРасшифровки = ОтчетыУТВызовСервераПереопределяемый.СформироватьДанныеРасшифровки(Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ЗначениеЗаполнено(СтруктураРасшифровки.Номенклатура) Тогда
			ОткрытьОтчетСертификатыНоменклатуры(ЭтаФорма.Отчет, СтруктураРасшифровки);	
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализИсполненияАссортимента" Тогда
		
		АссортиментКлиент.ОбработкаРасшифровкиИсполненияАссортимента(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СравнительныйАнализДинамикиАссортиментаИПродаж" Тогда
		
		АссортиментКлиент.ОбработкаРасшифровкиСравнительногоАнализаАссортимента(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализОстатковТоваровОрганизаций" Тогда	
		
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуАнализОстатковТоваровОрганизаций(ЭтаФорма, Расшифровка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ОстаткиТоваровОрганизаций" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуАнализОстатковТоваровОрганизаций(ЭтаФорма, Расшифровка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СтруктураСерииНоменклатуры" Тогда
		
		ОбработатьРасшифровкуСтруктураСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПрименениеСерииНоменклатуры" Тогда
		
		ОбработатьРасшифровкуПрименениеСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВедомостьПоСериямНоменклатуры"
		И (КлючТекущегоВарианта = "ВедомостьПоСериямНоменклатуры" 
			ИЛИ КлючТекущегоВарианта = "ВедомостьПоСериямНоменклатурыКонтекст") Тогда
			
		ОбработатьРасшифровкуВедомостьПоСериямНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.УправленческийБаланс" Тогда
		
		ОбработатьРасшифровкуУправленческогоБаланса(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ТоварыСхемыОбеспечения" Тогда
		
		ПоляРасшифровки = Новый Массив;
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Склад");
		
		СтруктураРасшифровки = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки, Новый Массив, ПоляРасшифровки);
		
		Если СтруктураРасшифровки.Свойство("Номенклатура") И СтруктураРасшифровки.Свойство("Склад") Тогда
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Источник",		"ТоварыСхемыОбеспечения");
			ПараметрыФормы.Вставить("Номенклатура",	СтруктураРасшифровки.Номенклатура);
			ПараметрыФормы.Вставить("Склад",		СтруктураРасшифровки.Склад);
			Если СтруктураРасшифровки.Свойство("Характеристика") Тогда
				ПараметрыФормы.Вставить("Характеристика",	СтруктураРасшифровки.Характеристика);
			КонецЕсли;
			ОткрытьФорму("Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма", ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВедомостьРасчетовСКлиентами" Тогда
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя", "Карточка");
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Карточка расчетов с клиентами'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.КарточкаРасчетовСКлиентами24");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Организация");
		ПоляРасшифровки.Добавить("Валюта");
		ПоляРасшифровки.Добавить("Партнер");
		ПоляРасшифровки.Добавить("Договор");
		ПоляРасшифровки.Добавить("ОбъектРасчетов");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("НачалоПериода");
		СписокПараметров.Добавить("КонецПериода");
		СписокПараметров.Добавить("ДанныеОтчета");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВедомостьРасчетовСПоставщиками" Тогда
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя", "Карточка");
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Карточка расчетов с поставщиками'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.КарточкаРасчетовСПоставщиками24");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Организация");
		ПоляРасшифровки.Добавить("Валюта");
		ПоляРасшифровки.Добавить("Партнер");
		ПоляРасшифровки.Добавить("Договор");
		ПоляРасшифровки.Добавить("ОбъектРасчетов");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("НачалоПериода");
		СписокПараметров.Добавить("КонецПериода");
		СписокПараметров.Добавить("ДанныеОтчета");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.КонтрольОформленияДокументовТовародвижений" 
		И ТипЗнч(Расшифровка) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуКонтрольОформленияДокументовТовародвижения(ЭтаФорма, Расшифровка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СправкаРасчетСписанияПроцентныхРасходовДисконтирования" Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		СтруктураРасшифровки = ОтчетыУТВызовСервераПереопределяемый.СформироватьДанныеРасшифровки(Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если СтруктураРасшифровки.Свойство("РасчетныйДокумент") И ЗначениеЗаполнено(СтруктураРасшифровки.РасчетныйДокумент) Тогда
			
			КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных - 
			ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
			ПараметрыФормы.СформироватьПриОткрытии = Истина;
			ПараметрыФормы.КлючВарианта = "РасшифровкаПоДокументу";
			
			ПараметрПериод = ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
			ИдентификаторПараметраПериод = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ПараметрПериод);
			НастройкаПериод = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
			ПараметрДанныеОтчета = ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеОтчета"));
			ИдентификаторПараметраДанныеОтчета = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ПараметрДанныеОтчета);
			НастройкаДанныеОтчета = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраДанныеОтчета);
			
			Отбор = Новый Структура();
			
			Если ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВарианта = "КонтекстныйВариант" Тогда
				Если ПараметрПериод.Использование Тогда
					Отбор.Вставить("ПериодОтчета", ПараметрПериод.Значение);
				КонецЕсли;
				Если ПараметрДанныеОтчета.Использование Тогда
					Отбор.Вставить("ДанныеОтчета", ПараметрДанныеОтчета.Значение);
				КонецЕсли;
			Иначе
				Если НастройкаПериод.Использование Тогда
					Отбор.Вставить("ПериодОтчета", НастройкаПериод.Значение);
				КонецЕсли;
				Если НастройкаДанныеОтчета.Использование Тогда
					Отбор.Вставить("ДанныеОтчета", НастройкаДанныеОтчета.Значение);
				КонецЕсли;
			КонецЕсли;
			Если СтруктураРасшифровки.Свойство("ОбъектРасчетов") И ЗначениеЗаполнено(СтруктураРасшифровки.ОбъектРасчетов) Тогда
				Отбор.Вставить("ОбъектРасчетов", СтруктураРасшифровки.ОбъектРасчетов);
			КонецЕсли;
			ПараметрыФормы.Отбор = Отбор;
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(СтруктураРасшифровки.РасчетныйДокумент);
			ПараметрыФормы.Вставить("ПараметрКоманды", МассивДокументов);
			
			ОткрытьФорму("Отчет.СправкаРасчетСписанияПроцентныхРасходовДисконтирования.Форма.ФормаРасшифровки", ПараметрыФормы);
			
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ОшибкиВыполненияОтложенныхЗаданий" Тогда
		
		ОтложенныеЗаданияКлиент.ОбработатьРасшифровкуОшибкиВыполненияОтложенныхЗаданий(
			ЭтаФорма,
			Расшифровка,
			СтандартнаяОбработка);
		
	
	ИначеЕсли ПолноеИмяОтчета = "Отчет.РасчетРетроБонусовКлиентов" Тогда
		
		РетроБонусыКлиент.ОбработатьРасшифровкуРасчетРетроБонусовКлиентов(
			ЭтаФорма, МенюОтчетов, КлючТекущегоВарианта);
		
	КонецЕсли;
	
	Если МенюОтчетов.Количество() > 0 Или МенюДействий.Количество() > 0 Тогда
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	КонецЕсли;
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	МенюОтчетов  = Новый Массив;
	МенюДействий = Новый Массив;
	
	Если ПолноеИмяОтчета = "Отчет.УправленческийБаланс" Тогда
		Если КлючТекущегоВарианта = "УправленческийБаланс"
			ИЛИ КлючТекущегоВарианта = "ФинансовоеСостояниеБазовая" Тогда
			
			// Расшифровать отчетом -> Себестоимость продаж
			#Область СебестоимостьТоваров
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СебестоимостьТоваров");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Себестоимость товаров'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.СебестоимостьТоваров");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Показатель");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			ЗаменаПараметров = Новый Структура;
			ЗаменяющиеПараметры = Новый Соответствие;
			
			ЗаменаПараметров.Вставить("Показатель", Неопределено);
			ЗаменаПараметров.Вставить("Показатель_Родитель", Неопределено);
			ЗаменаПараметров.Вставить("ДинамическаяГруппировкаПоТипуАнализа", "СтруктураПредприятия_Организация");
			ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);

			НеобходимыеЗначенияПараметра = Новый Массив;
			НеобходимыеЗначенияПараметра.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиАктивовПассивов.Товары"));
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("Показатель", НеобходимыеЗначенияПараметра);
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);		
			#КонецОбласти
		КонецЕсли;
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ВыручкаИСебестоимостьПродаж" Тогда
		// Расшифровать отчетом -> Себестоимость продаж
		#Область СебестоимостьТоваров
		ПараметрыОтчета = Новый Структура;
		Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") <> 0
		 ИЛИ КлючТекущегоВарианта = "ПродажиСводно" Тогда
			ПараметрыОтчета.Вставить("Имя", "СебестоимостьТоваровПоПредприятию");
		Иначе
			ПараметрыОтчета.Вставить("Имя", "СебестоимостьТоваровПоОрганизациям");
		КонецЕсли;
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Себестоимость товаров'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.СебестоимостьТоваров");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Организация");
		ПоляРасшифровки.Добавить("Подразделение");
		ПоляРасшифровки.Добавить("Менеджер");
		ПоляРасшифровки.Добавить("Склад");
		ПоляРасшифровки.Добавить("Партнер");
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Серия");
		ПоляРасшифровки.Добавить("ХозяйственнаяОперация");
		ПоляРасшифровки.Добавить("СебестоимостьИтого");
		ПоляРасшифровки.Добавить("Себестоимость");
		ПоляРасшифровки.Добавить("ДопРасходы");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		ДостаточныеПараметры = Новый Структура;
		ДостаточныеПараметры.Вставить("СебестоимостьИтого");
		ДостаточныеПараметры.Вставить("Себестоимость");
		ДостаточныеПараметры.Вставить("ДопРасходы");
		ПараметрыОтчета.Вставить("ДостаточныеПараметры", ДостаточныеПараметры);
		
		ЗаменаПараметров = Новый Структура;
		ЗаменяющиеПараметры = Новый Соответствие;
		
		ЗаменаПараметров.Вставить("Организация",		"СтруктураПредприятия_Организация");
		ЗаменаПараметров.Вставить("Подразделение",		"АналитикаОборотов_Подразделение");
		ЗаменаПараметров.Вставить("Менеджер",			"АналитикаОборотов_Менеджер");
		ЗаменаПараметров.Вставить("Склад",				"СтруктураПредприятия_Склад");
		ЗаменаПараметров.Вставить("Партнер",			"АналитикаОборотов_Партнер");
		ЗаменаПараметров.Вставить("Номенклатура",		"АналитикаНоменклатуры_Номенклатура");
		ЗаменаПараметров.Вставить("Характеристика",		"АналитикаНоменклатуры_Характеристика");
		ЗаменаПараметров.Вставить("Серия",				"АналитикаНоменклатуры_Серия");
		ЗаменаПараметров.Вставить("СебестоимостьИтого", Неопределено);
		ЗаменаПараметров.Вставить("Себестоимость",		Неопределено);
		ЗаменаПараметров.Вставить("ДопРасходы",			Неопределено);
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("АналитикаОборотов_ХозяйственнаяОперация", ХозяйственныеОперацииПродаж());
		ЗаменяющиеПараметры.Вставить(0, ЗначенияПараметров); // Все продажи
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("АналитикаОборотов_ХозяйственнаяОперация", ХозяйственныеОперацииПродаж(Истина));
		ЗаменяющиеПараметры.Вставить(1, ЗначенияПараметров); // Кроме продаж между собственными юр. лицами
		
		ЗначенияПараметров = Новый Соответствие;
		ЗначенияПараметров.Вставить("АналитикаОборотов_ХозяйственнаяОперация", ПредопределенноеЗначение("Справочник.НастройкиХозяйственныхОпераций.РеализацияТоваровВДругуюОрганизацию"));
		ЗаменяющиеПараметры.Вставить(2, ЗначенияПараметров); // Только продажи между собственными юр. лицами
		
		ЗаменаПараметров.Вставить("ПоказыватьПродажи", ЗаменяющиеПараметры);
		
		ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);
		
		ФиксированныеПараметры = Новый Структура;
		ФиксированныеПараметры.Вставить("АналитикаОборотов_ХозяйственнаяОперация_ИсточникДанных", "ВыручкаИСебестоимостьПродаж");
		ПараметрыОтчета.Вставить("ФиксированныеПараметры", ФиксированныеПараметры);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("ДанныеОтчета");
		СписокПараметров.Добавить("ЕдиницыКоличества");
		СписокПараметров.Добавить("ПоказыватьПродажи");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		#КонецОбласти
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СебестоимостьТоваров" Тогда
		// Расшифровать отчетом -> Ведомость по партиям товаров
		#Область ВедомостьПоПартиямТоваров
		ПараметрыОтчета = Новый Структура;
		Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") <> 0 Тогда
			ПараметрыОтчета.Вставить("Имя", "ВедомостьПоПартиямТоваровПредприятия");
		Иначе
			ПараметрыОтчета.Вставить("Имя", "ВедомостьПоПартиямТоваровОрганизаций");
		КонецЕсли;
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Ведомость по партиям товаров - только при ФИФО(скользящая оценка)'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.ВедомостьПоПартиямТоваров");
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("СтруктураПредприятия_Организация");
		ПоляРасшифровки.Добавить("АналитикаОборотов_Подразделение");
		ПоляРасшифровки.Добавить("АналитикаНоменклатуры_Номенклатура");
		ПоляРасшифровки.Добавить("АналитикаНоменклатуры_Характеристика");
		ПоляРасшифровки.Добавить("АналитикаНоменклатуры_Серия");
		ПоляРасшифровки.Добавить("СтруктураПредприятия_Склад");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		ЗаменаПараметров = Новый Структура;
		ЗаменяющиеПараметры = Новый Соответствие;
		
		ЗаменаПараметров.Вставить("СтруктураПредприятия_Организация", "Организация");
		ЗаменаПараметров.Вставить("АналитикаОборотов_Подразделение", "Подразделение");
		ЗаменаПараметров.Вставить("АналитикаНоменклатуры_Номенклатура", "Номенклатура");
		ЗаменаПараметров.Вставить("АналитикаНоменклатуры_Характеристика", "Характеристика");
		ЗаменаПараметров.Вставить("АналитикаНоменклатуры_Серия", "Серия");
		ЗаменаПараметров.Вставить("СтруктураПредприятия_Склад", "Склад");
		ПараметрыОтчета.Вставить("ЗаменаПараметров", ЗаменаПараметров);
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("ДанныеОтчета");
		СписокПараметров.Добавить("ЕдиницыКоличества");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);		
		#КонецОбласти
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ТоварыСхемыОбеспечения" Тогда
		#Область ИзменениеСпособаОбеспеченияПотребностей
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Имя", "ИзменениеСпособаОбеспеченияПотребностей");
		ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Изменить способ обеспечения потребностей'"));
		ПараметрыДействия.Вставить("Действие", "ОткрытьФорму");
		ПараметрыДействия.Вставить("ИмяФормы", "Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма");
		
		ПоляРасшифровки = Новый Массив;
		ПоляРасшифровки.Добавить("Номенклатура");
		ПоляРасшифровки.Добавить("Характеристика");
		ПоляРасшифровки.Добавить("Склад");
		ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		НеобходимыеПараметры = Новый Структура;
		НеобходимыеПараметры.Вставить("Номенклатура");
		НеобходимыеПараметры.Вставить("Склад");
		ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", "ТоварыСхемыОбеспечения");
		ПараметрыФормы.Вставить("Номенклатура");
		ПараметрыФормы.Вставить("Характеристика");
		ПараметрыФормы.Вставить("Склад");
		ПараметрыДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		МенюДействий.Добавить(ПараметрыДействия);
		#КонецОбласти
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СверкаРасчетовСПартнерами" Тогда
		СтандартнаяОбработка  = Ложь;
	КонецЕсли;
	
	Если МенюОтчетов.Количество() > 0 
		ИЛИ МенюДействий.Количество() > 0 Тогда
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
			ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
			ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
			
			КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   Команда     - КомандаФормы     - команда, которая была вызвана.
//   Результат   - Булево           - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
//
// Параметры:
//   ЭтаФорма       - ФормаКлиентскогоПриложения - форма отчета.
//   ВыбранноеЗначение - Произвольный     - результат выбора в подчиненной форме.
//   ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, где осуществлен выбор.
//   Результат         - Булево           - Истина, если результат выбора обработан.
//
Процедура ОбработкаВыбора(ЭтаФорма,ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

// Обработчик оповещения формы отчета.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   ИмяСобытия  - Строка           - идентификатор события для принимающих форм.
//   Параметр    - Произвольный     - расширенная информация о событии.
//   Источник    - ФормаКлиентскогоПриложения
//               - Произвольный - источник события.
//   ОповещениеОбработано - Булево - признак того, что событие обработано.
//
Процедура ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	
КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
//	Параметры:
//		ФормаОтчета - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура ПослеФормированияНаКлиенте(ФормаОтчета) Экспорт
	ВосстановитьОффлайновыеРасчеты(ФормаОтчета)
КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
//	Параметры:
//		Ответ - КодВозвратаДиалога - При варианте "Да" будут выполнено переформирование форм
//		ПараметрыВыполнения - Структура - Содержит в себе перечень форм, которые необходимо переформировать.
//
Процедура ФормаОтчетаПослеПодтвержденияПереформирования(Ответ, ПараметрыВыполнения) Экспорт
	Перем НеобработанныеФормы;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ФормаОтчета Из ПараметрыВыполнения.Формы Цикл
		ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 1, Истина);
	КонецЦикла;
	Если ПараметрыВыполнения.Свойство("НеобработанныеФормы", НеобработанныеФормы) Тогда
		Для Каждого КлючИЗначение Из НеобработанныеФормы Цикл
			ПослеФормированияНаКлиенте(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Метод возвращает обработчик ожидания "ПараметрыПроверкиФоновыхЗаданий".
// 
// Возвращаемое значение:
//   ОписаниеОповещения - ПараметрыПроверкиФоновыхЗаданий 
//
Функция ПараметрыПроверкиФоновыхЗаданий() Экспорт
	Возврат ПараметрыПриложения["УправлениеТорговлей.ПараметрыПроверкиФоновыхЗаданий"];
КонецФункции

#Область ОткрытиеОтчетов
	
// Открывает указанный вариант отчета КарточкаРасчетовСКлиентами контекстно из документов.
//
// Параметры:
//   КлючВарианта - Строка - Имя открываемой настройки отчета
//   Документ - ДокументСсылка - Ссылка на документ, для установки контекста.
//
Процедура ОткрытьОтчетКарточкаРасчетовСКлиентами(КлючВарианта, Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ОчиститьСообщения();
		Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Договор не записан. Переход к отчету возможен только после записи договора.'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен. Переход к отчету возможен только после проведения документа.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ПараметрыФормы = Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
		ПараметрыФормы.Вставить("ПараметрКоманды",					Документ);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
		
		ОткрытьФорму("Отчет.КарточкаРасчетовСКлиентами24.Форма", ПараметрыФормы);
		
	Иначе
	
		СтрокаБазовая = ?(ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("БазоваяВерсия"), "Базовая", "");
		
		ПараметрыФормы = Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
		ПараметрыФормы.Вставить("КлючВарианта",						КлючВарианта + СтрокаБазовая);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено); 
		Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ПараметрыФормы.Вставить("Отбор",						Новый Структура("Договор", Документ));
		Иначе
			ПараметрыФормы.Вставить("Отбор",						Новый Структура("ЗаказКлиентаОтбор, ТекущийДокумент", Документ, Документ));
		КонецЕсли;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
		
		ОткрытьФорму("Отчет.КарточкаРасчетовСКлиентами.Форма", ПараметрыФормы);
		
	КонецЕсли;
КонецПроцедуры

// Открывает указанный вариант отчета КарточкаРасчетовСПоставщиками контекстно из документов.
//
// Параметры:
//   КлючВарианта - Строка - Имя открываемой настройки отчета
//   Документ - ДокументСсылка - Ссылка на документ, для установки контекста.
//
Процедура ОткрытьОтчетКарточкаРасчетовСПоставщиками(КлючВарианта, Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ОчиститьСообщения();
		Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Договор не записан. Переход к отчету возможен только после записи договора.'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен. Переход к отчету возможен только после проведения документа.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ПараметрыФормы = Новый Структура("КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
		ПараметрыФормы.Вставить("ПараметрКоманды",					Документ);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
		
		ОткрытьФорму("Отчет.КарточкаРасчетовСПоставщиками24.Форма", ПараметрыФормы);
		
	Иначе
	
		СтрокаБазовая = ?(ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("БазоваяВерсия"), "Базовая", "");
		
		ПараметрыФормы = Новый Структура("КлючВарианта, КлючНазначенияИспользования, Отбор, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
		ПараметрыФормы.Вставить("КлючВарианта",						КлючВарианта + СтрокаБазовая);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",		Неопределено);
		Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ПараметрыФормы.Вставить("Отбор",						Новый Структура("Договор", Документ));
		Иначе
			ПараметрыФормы.Вставить("Отбор",						Новый Структура("ЗаказПоставщикуОтбор, ТекущийДокумент", Документ, Документ));
		КонецЕсли;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",			Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",	Ложь);
		
		ОткрытьФорму("Отчет.КарточкаРасчетовСПоставщиками.Форма", ПараметрыФормы);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//   ОтчетСформирован - Булево - Истина если отчет был успешно сформирован.
//
Процедура ПослеФормирования(ФормаОтчета, ОтчетСформирован) Экспорт
	ВосстановитьОффлайновыеРасчеты(ФормаОтчета);
	РетроБонусыКлиент.ПослеФормированияОтчета(ФормаОтчета);
КонецПроцедуры

// Вызывается для отчета "КонтрольОформленияДокументовТовародвижения".
//
// Параметры:
//  ЭтаФорма							 - ФормаКлиентскогоПриложения	 - форма, на которой происходит обработка расшифровки.
//  Расшифровка							 - см. Отчеты.КонтрольОформленияДокументовТовародвижений.СтруктураОтборовРаспоряженийСтрокаXML.
//  ИмяПроцедурыОписанияОповещения		 - Строка			 - имя процедуры обработчика описания оповещения закрытия формы, которая будет открыта во время обработки расшифровки.
//  ДатаОформления						 - Дата				 - дата окончания оформления складских актов, если потребуется оформлять складские акты.
//  ОтборыДляФормированияОтчетаКонтроля	 - ТабличнаяЧасть	 - см. табличную часть Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.ОтборыДляФормированияОтчетаКонтроля.
//
Процедура ОбработатьРасшифровкуКонтрольОформленияДокументовТовародвижения(
	ЭтаФорма, Расшифровка, ИмяПроцедурыОписанияОповещения = Неопределено, 
	ДатаОформления = Неопределено, ОтборыДляФормированияОтчетаКонтроля = Неопределено) Экспорт
	
	ПараметрыОбработкиРасшифровки = 
		ОтчетыУТВызовСервераПереопределяемый.ПараметрыОбработкиРасшифровкиКонтрольОформленияДокументовТовародвижения(Расшифровка);
	СтруктураРекомендаций = ПараметрыОбработкиРасшифровки.СтруктураРекомендаций;
	Если ЗначениеЗаполнено(ИмяПроцедурыОписанияОповещения) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОписанияОповещения, ЭтаФорма);
	Иначе
		ОписаниеОповещения = Неопределено;
	КонецЕсли;
	Если СтруктураРекомендаций.ОформитеПриобретениеТоваровИУслуг 
		Или СтруктураРекомендаций.ОформитеПриемкиТоваровНаХранение 
		Или СтруктураРекомендаций.ОформитеПоступлениеТоваров Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Ссылка", ПараметрыОбработкиРасшифровки.Распоряжения);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Склад", ПараметрыОбработкиРасшифровки.Склад);
		ПараметрыОткрытияФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаПриемку");
		ОткрытьФорму("Обработка.ЖурналДокументовЗакупки.Форма.СписокНакладныеКОформлению",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеРеализацииТоваровИУслуг Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Ссылка", ПараметрыОбработкиРасшифровки.Распоряжения);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Склад", ПараметрыОбработкиРасшифровки.Склад);
		ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеПеремещениеТоваровВСтатусеПринято 
		Или СтруктураРекомендаций.ОформитеДокументРазборкиВСтатусеСобраноРазобрано
		Или СтруктураРекомендаций.ОформитеДокументСборкиВСтатусеСобраноРазобрано Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Распоряжения", ПараметрыОбработкиРасшифровки.Распоряжения.ВыгрузитьЗначения());
		ПараметрыОткрытияФормы.Вставить("Склад", ПараметрыОбработкиРасшифровки.Склад);
		ОткрытьФорму("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеПрочееОприходованиеТоваров Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", Новый Структура);
		ПараметрыОткрытияФормы.Отбор.Вставить("Ссылка", ПараметрыОбработкиРасшифровки.Распоряжения);
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("ОтборТипыДокументов");
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("ОтборХозяйственныеОперации");
		ОткрытьФорму("Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументов",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеВозвратТоваровОтКлиента Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Ссылка", ПараметрыОбработкиРасшифровки.Распоряжения);
		ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеСкладскиеАктыДляОтраженияИзлишков 
		Или СтруктураРекомендаций.ОформитеСкладскиеАктыДляОтраженияНедостач Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "НоменклатураИХарактеристики", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Склад", ПараметрыОбработкиРасшифровки.Склад);
		ПараметрыОткрытияФормы.Вставить("ИнвентаризационныйПериод", Новый СтандартныйПериод);
		Если ЗначениеЗаполнено(ДатаОформления) Тогда
			ПараметрыОткрытияФормы.ИнвентаризационныйПериод.ДатаНачала = Дата("20010101");
			ПараметрыОткрытияФормы.ИнвентаризационныйПериод.ДатаОкончания = КонецМесяца(ДатаОформления);
		КонецЕсли;
		ПараметрыОткрытияФормы.Вставить("ОтборНоменклатуры", Новый Структура);
		ПараметрыОткрытияФормы.ОтборНоменклатуры.Вставить("Номенклатура", ПараметрыОбработкиРасшифровки.СписокНоменклатуры);
		ПараметрыОткрытияФормы.ОтборНоменклатуры.Вставить("Характеристика", ПараметрыОбработкиРасшифровки.СписокХарактеристик);
		ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма.ФормаОсновная", 
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтруктураРекомендаций.ОформитеВозвратМатериаловИзПроизводства Тогда
	ИначеЕсли СтруктураРекомендаций.ОформитеВыпускПродукции Тогда
	ИначеЕсли СтруктураРекомендаций.ОформитеВозвратСырьяОтПереработчика Тогда
	ИначеЕсли СтруктураРекомендаций.ОформитеПоступлениеОтПереработчика Тогда
	ИначеЕсли СтруктураРекомендаций.ОформитеПоступлениеСырьяОтДавальца Тогда
	ИначеЕсли СтруктураРекомендаций.ЗавершитеОформлениеРасходныхОрдеровНаТовары 
		Или СтруктураРекомендаций.ОформитеРасходныеОрдераНаТовары Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Склад", ПараметрыОбработкиРасшифровки.Склад);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("ОтборРаспоряжений", ПараметрыОбработкиРасшифровки.Распоряжения);
		ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.Форма",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеПриходныеОрдераНаТовары Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("Склад", ПараметрыОбработкиРасшифровки.Склад);
		ПараметрыОткрытияФормы.СтруктураБыстрогоОтбора.Вставить("ОтборРаспоряжений", ПараметрыОбработкиРасшифровки.Распоряжения);
		ОткрытьФорму("Обработка.УправлениеПоступлением.Форма.Форма",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	ИначеЕсли СтруктураРекомендаций.ОформитеПередачуМатериаловВПроизводствоВСтатусеПринято Тогда
	ИначеЕсли СтруктураРекомендаций.ОформитеОтгрузкиТоваровСХранения Тогда
		ОтчетыУТВызовСервераПереопределяемый.ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
			ПараметрыОбработкиРасшифровки, "Распоряжения", ОтборыДляФормированияОтчетаКонтроля);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", Новый Структура);
		ПараметрыОткрытияФормы.Отбор.Вставить("Ссылка", ПараметрыОбработкиРасшифровки.Распоряжения);
		ОткрытьФорму("Документ.ОтгрузкаТоваровСХранения.Форма.ФормаСписка",
			ПараметрыОткрытияФормы, ЭтаФорма,,,, ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

// Обработчик двойного щелчка мыши, нажатия клавиши Enter или гиперссылки в табличном документе формы отчета.
// См. "Расширение поля формы для поля табличного документа.Выбор" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Область     - ОбластьЯчеекТабличногоДокумента - выбранное значение.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ОбработкаВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
	ПолноеИмяОтчета = ФормаОтчета.НастройкиОтчета.ПолноеИмя;
	
	Если ПолноеИмяОтчета = "Отчет.ВедомостьРасчетовСКлиентами"
		ИЛИ ПолноеИмяОтчета = "Отчет.ЗадолженностьКлиентов"
		ИЛИ ПолноеИмяОтчета = "Отчет.КарточкаРасчетовСКлиентами24"
		ИЛИ ПолноеИмяОтчета = "Отчет.ВедомостьРасчетовСПоставщиками"
		ИЛИ ПолноеИмяОтчета = "Отчет.КарточкаРасчетовСПоставщиками24"
		ИЛИ ПолноеИмяОтчета = "Отчет.ВедомостьРасчетовСПартнерами" Тогда
		
		Если Область.Текст = "Запустить" Тогда
			
			ВзаиморасчетыВызовСервера.ВключитьРаспределениеВзаиморасчетов();
			Область.Текст = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт 
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		Если ТипЗнч(ПараметрВыполненногоДействия) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ОткрытьОтчетКарточкаРасчетовПоПереданнойВозвратнойТаре(ДополнительныеПараметры.ЭтаФорма.Отчет, ПараметрВыполненногоДействия);
		ИначеЕсли ТипЗнч(ПараметрВыполненногоДействия) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			ОткрытьОтчетКарточкаРасчетовПоПринятойВозвратнойТаре(ДополнительныеПараметры.ЭтаФорма.Отчет, ПараметрВыполненногоДействия);
		Иначе
			ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

// Вызывается для отчета "ВедомостьПоПереданнойВозвратнойТаре"
//
Процедура ОткрытьОтчетКарточкаРасчетовПоПереданнойВозвратнойТаре(Отчет, Документ)
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных - 
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючВарианта = "КарточкаРасчетовПоПринятойВозвратнойТаре";
	
	ИдентификаторПараметраПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")));
	НастройкаПериод = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
	
	Отбор = Новый Структура();
	
	Если НастройкаПериод.Использование Тогда
		Отбор.Вставить("Период", НастройкаПериод.Значение);
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	ПараметрыФормы.Вставить("ПараметрКоманды", Документ);
	
	ОткрытьФорму("Отчет.КарточкаРасчетовПоПереданнойВозвратнойТаре.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Вызывается для отчета "ВедомостьПоПринятойВозвратнойТаре"
//
Процедура ОткрытьОтчетКарточкаРасчетовПоПринятойВозвратнойТаре(Отчет, Документ)
	
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек; // КомпоновщикНастроекКомпоновкиДанных - 
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючВарианта = "КарточкаРасчетовПоПринятойВозвратнойТаре";
	
	ИдентификаторПараметраПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")));
	НастройкаПериод = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
	
	Отбор = Новый Структура();
	
	Если НастройкаПериод.Использование Тогда
		Отбор.Вставить("Период", НастройкаПериод.Значение);
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	ПараметрыФормы.Вставить("ПараметрКоманды", Документ);
	
	ОткрытьФорму("Отчет.КарточкаРасчетовПоПринятойВозвратнойТаре.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Вызывается для отчета "Анализ остатков товаров организаций" и "Остатки товаров организаций".
//
Процедура ОбработатьРасшифровкуАнализОстатковТоваровОрганизаций(ЭтаФорма, Расшифровка)
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		ЭтаФорма.ОтчетДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма.Отчет));
	
	ВыполненноеДействие = Неопределено;
	ПараметрВыполненногоДействия = Неопределено;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыполненноеДействие", ВыполненноеДействие);
	ДопПараметры.Вставить("ПараметрВыполненногоДействия", ПараметрВыполненногоДействия);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРасшифровкуАнализОстатковТоваровОрганизацийЗавершение",
			ЭтотОбъект, ДопПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения,
		Расшифровка, 
		ДоступныеДействия);
		
КонецПроцедуры

Процедура ОбработатьРасшифровкуАнализОстатковТоваровОрганизацийЗавершение(ВыполненноеДействие,
					ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
	КонецЕсли;

КонецПроцедуры

// Вызывается для отчета "Структура серии номенклатуры"
//
Процедура ОбработатьРасшифровкуСтруктураСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка = Неопределено ИЛИ ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокОтчетов = Новый СписокЗначений;
	
	ПредставлениеНастройки = НСтр("ru = 'Движение серии номенклатуры'");
	СписокОтчетов.Добавить("ДвижениеСерииНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ПредставлениеНастройки = НСтр("ru = 'Ведомость по сериям номенклатуры'");
	СписокОтчетов.Добавить("ВедомостьПоСериямНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ПредставлениеНастройки = НСтр("ru = 'Применение серии номенклатуры'");
	СписокОтчетов.Добавить("ПрименениеСерииНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ПредставлениеНастройки = НСтр("ru = 'Структура серии номенклатуры'");
	СписокОтчетов.Добавить("СтруктураСерииНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтчетаПоСериямЗавершение", ЭтотОбъект, Расшифровка);
	ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОтчетов);
	
КонецПроцедуры

// Вызывается для отчета "Применение серии номенклатуры"
//
Процедура ОбработатьРасшифровкуПрименениеСерииНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка = Неопределено ИЛИ ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	СписокОтчетов = Новый СписокЗначений;
	
	ПредставлениеНастройки = НСтр("ru = 'Движение серии номенклатуры'");
	СписокОтчетов.Добавить("ДвижениеСерииНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ПредставлениеНастройки = НСтр("ru = 'Ведомость по сериям номенклатуры'");
	СписокОтчетов.Добавить("ВедомостьПоСериямНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ПредставлениеНастройки = НСтр("ru = 'Структура серии номенклатуры'");
	СписокОтчетов.Добавить("СтруктураСерииНоменклатуры", ПредставлениеНастройки,, БиблиотекаКартинок.Отчет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтчетаПоСериямЗавершение", ЭтотОбъект, Расшифровка);
	ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОтчетов);
		
КонецПроцедуры

// Вызывается для отчета "Ведомость по сериям номенклатуры"
//
Процедура ОбработатьРасшифровкуВедомостьПоСериямНоменклатуры(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	ПараметрыРасшифровки = НоменклатураКлиент.ПараметрыРасшифровкиОтчетВедомостьПоСериямНоменклатуры();
	ПараметрыРасшифровки.Вставить("Расшифровка", Расшифровка);
	
	КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыборОтчетаПоСериямЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "ДвижениеСерииНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ДвижениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДвижениеСерииНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта", "ДвижениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.ДвижениеСерииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ВедомостьПоСериямНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ВедомостьПоСериямНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ВедомостьПоСериямНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьПоСериямНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.ВедомостьПоСериямНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "СтруктураСерииНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "СтруктураСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СтруктураСерииНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта", "СтруктураСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.СтруктураСерииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПрименениеСерииНоменклатуры" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Серия",  ДополнительныеПараметры.Серия);
		ПараметрыОтбора.Вставить("Номенклатура", ДополнительныеПараметры.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ПрименениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПрименениеСерииНоменклатурыКонтекст" + Строка(Новый УникальныйИдентификатор));
		ПараметрыФормы.Вставить("КлючВарианта", "ПрименениеСерииНоменклатурыКонтекст");
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		ОткрытьФорму("Отчет.ПрименениеСерииНоменклатуры.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ОткрытьОтчетСертификатыНоменклатуры(ЭтаФорма, СтруктураРасшифровки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидНоменклатуры", СтруктураРасшифровки.ВидНоменклатуры);
	Отбор.Вставить("Номенклатура", СтруктураРасшифровки.Номенклатура);
	
	Если ЗначениеЗаполнено(СтруктураРасшифровки.Характеристика) Тогда
		Отбор.Вставить("Характеристика", СтруктураРасшифровки.Характеристика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРасшифровки.Серия) Тогда
		Отбор.Вставить("Серия", СтруктураРасшифровки.Серия);
	КонецЕсли;

	Форма = ПолучитьФорму("Отчет.СертификатыНоменклатурыСИстекающимСрокомДействия.Форма");
	
	КомпоновщикНастроекКомпоновкиДанных = Форма.Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройки = КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;
	
	Параметр = ПолучитьПараметрПользовательскойНастройки(ЭтаФорма.КомпоновщикНастроек.ПользовательскиеНастройки,
														"НедействительныеНаДату");
	УстановитьПараметрПользовательскойНастройки(ПользовательскиеНастройки,
												"НедействительныеНаДату",
												Параметр);

	Параметр = ПолучитьПараметрПользовательскойНастройки(ЭтаФорма.КомпоновщикНастроек.ПользовательскиеНастройки,
														"ДатаСкрыватьСертификаты");
	УстановитьПараметрПользовательскойНастройки(ПользовательскиеНастройки,
												"ДатаСкрыватьСертификаты",
												Параметр);
	
	НастройкаТипСертификата = Новый Структура;
	НастройкаТипСертификата.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
	НастройкаТипСертификата.Вставить("ПравоеЗначение",	СтруктураРасшифровки.ТипСертификата);
	НастройкаТипСертификата.Вставить("Использование",	Не ПустаяСтрока(СтруктураРасшифровки.ТипСертификата));
	
	УстановитьПользовательскуюНастройку(КомпоновщикНастроекКомпоновкиДанных,
										ПользовательскиеНастройки,
										"ПользовательскиеПоля.Поле1",
										НастройкаТипСертификата);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",		Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",	ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("Отбор",						Отбор);
	
	ОткрытьФорму("Отчет.СертификатыНоменклатурыСИстекающимСрокомДействия.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Устанавливает пользовательскую настройку по переданным значениям.
// 
// Параметры:
// 	КомпоновщикНастроекКомпоновкиДанных - КомпоновщикНастроекКомпоновкиДанных - 
// 	ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - 
// 	ИмяНастройки - Строка - Имя поля компоновки отбора.
// 	Настройка - Структура - значения для установки в пользовательскую настройку:
// * ПравоеЗначение - Произвольный - 
// * ВидСравнения - ВидСравненияКомпоновкиДанных - 
// * Использование - Булево -
Процедура УстановитьПользовательскуюНастройку(КомпоновщикНастроекКомпоновкиДанных, ПользовательскиеНастройки, ИмяНастройки, Настройка)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяНастройки);
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки
			И Элемент.ВидСравнения = Настройка.ВидСравнения Тогда
			ЭлементОтбора = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
	
	Элемент.ВидСравнения = Настройка.ВидСравнения;
	Элемент.ПравоеЗначение = Настройка.ПравоеЗначение;
	Элемент.Использование = Настройка.Использование;
	
КонецПроцедуры	


// Описание
// 
// Параметры:
// 	ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - 
// 	ИмяНастройки - Строка - Имя параметра пользовательской настройки.
// Возвращаемое значение:
// 	Структура - Описание:
// * Использование - Булево - Флаг использования параметра.
// * Значение - Неопределено - Значение параметра пользовательской настройки.
Функция ПолучитьПараметрПользовательскойНастройки(ПользовательскиеНастройки, ИмяНастройки)
	
	Результат = Новый Структура;
	Результат.Вставить("Значение", Неопределено);
	Результат.Вставить("Использование", Ложь);
	
	ПолеКомпоновкиПараметр = Новый ПараметрКомпоновкиДанных(ИмяНастройки);
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если Элемент.Параметр = ПолеКомпоновкиПараметр Тогда
			Результат.Значение = Элемент.Значение;
			Результат.Использование = Элемент.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


// Описание
// 
// Параметры:
// 	ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - 
// 	ИмяНастройки - Строка - 
// 	Параметр - Структура - Описание:
// * Значение - Произвольный - Значение пользовательского параметра.
// * Использование - Булево - Флаг использования параметра.
Процедура УстановитьПараметрПользовательскойНастройки(ПользовательскиеНастройки, ИмяНастройки, Параметр)
	
	ПолеКомпоновкиПараметр = Новый ПараметрКомпоновкиДанных(ИмяНастройки);
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если Элемент.Параметр = ПолеКомпоновкиПараметр Тогда
			Элемент.Значение = Параметр.Значение;
			Элемент.Использование = Параметр.Использование; 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьОффлайновыеРасчеты(ФормаОтчета)
	
	ДопСвойства = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ТребуетсяОбработчикОжидания = Ложь;
	
	ИмяПараметра = "УправлениеТорговлей.ПараметрыПроверкиФоновыхЗаданий";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
		ПараметрыПриложения[ИмяПараметра].Вставить("Задания", Новый Структура());
		ПараметрыПриложения[ИмяПараметра].Вставить("Интервал", 7);
	КонецЕсли;
	
	Если ДопСвойства.Свойство("РасчетПартийИСебестоимости") И ДопСвойства.РасчетПартийИСебестоимости Тогда
		
		ТребуетсяОбработчикОжидания = Истина;
		
		Если НЕ ПараметрыПриложения[ИмяПараметра].Задания.Свойство("ПартионныйУчет") Тогда
			ПараметрыПриложения[ИмяПараметра].Задания.Вставить("ПартионныйУчет", Новый Соответствие);
		КонецЕсли;
		
		ПараметрыЗадания = ПараметрыПриложения[ИмяПараметра].Задания.ПартионныйУчет;
		
		ПараметрыФормы = Новый Структура("НачалоПериодаРасчета, КонецПериодаРасчета, МассивОрганизаций, НомерЗадания");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДопСвойства);
		
		ПараметрыЗадания.Вставить(ФормаОтчета, ПараметрыФормы);
		
	ИначеЕсли ДопСвойства.Свойство("ГраницаВзаиморасчетов") Тогда
		
		Если НЕ ДопСвойства.Свойство("ИмяРасчета") Тогда
			Возврат;
		КонецЕсли;
		
		ТребуетсяОбработчикОжидания = Истина;
		
		Если НЕ ПараметрыПриложения[ИмяПараметра].Задания.Свойство(ДопСвойства.ИмяРасчета) Тогда
			ПараметрыПриложения[ИмяПараметра].Задания.Вставить(ДопСвойства.ИмяРасчета, Новый Соответствие());
		КонецЕсли;
		
		ПараметрыЗадания = ПараметрыПриложения[ИмяПараметра].Задания[ДопСвойства.ИмяРасчета];
		
		ПараметрыФормы = Новый Структура("ГраницаВзаиморасчетов, НомерЗадания, АналитикиКРасчету, ИмяРасчета");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДопСвойства);
		
		ПараметрыЗадания.Вставить(ФормаОтчета, ПараметрыФормы);
		
	КонецЕсли;
	
	Если ТребуетсяОбработчикОжидания Тогда
		ФормаОтчета.ПодключитьОбработчикОжидания("ПроверитьФоновыеЗадания", ПараметрыПриложения[ИмяПараметра].Интервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ХозяйственныеОперацииПродаж(ИсключитьОперацииПродажСобственнымОрганизациям = Ложь)
	ХозяйственныеОперацииПродаж = ОтчетыУТВызовСервераПереопределяемый.ХозяйственныеОперацииАналитическихРегистров("ВыручкаИСебестоимостьПродаж");
	Если ИсключитьОперацииПродажСобственнымОрганизациям Тогда
		ИндексУдаляемогоЭлемента = ХозяйственныеОперацииПродаж.Найти(ПредопределенноеЗначение("Справочник.НастройкиХозяйственныхОпераций.РеализацияТоваровВДругуюОрганизацию"));
		ХозяйственныеОперацииПродаж.Удалить(ИндексУдаляемогоЭлемента);
	КонецЕсли;
	
	СписокХозяйственныхОпераций = Новый СписокЗначений;
	СписокХозяйственныхОпераций.ЗагрузитьЗначения(ХозяйственныеОперацииПродаж);
	
	Возврат СписокХозяйственныхОпераций;
КонецФункции

Процедура ОбработатьРасшифровкуУправленческогоБаланса(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	ОтчетыРасшифровки = ОтчетыУТВызовСервераПереопределяемый.НастройкиРасшифровкиСтатьиАктиваПассива(КомпоновщикНастроек, Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
	
	МенюОтчетов = ОтчетыРасшифровки.МенюОтчетов;
	Если МенюОтчетов.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтчетаРасшифровкиАктиваПассива", ЭтотОбъект, ОтчетыРасшифровки);
		ЭтаФорма.ПоказатьВыборИзМеню(ОписаниеОповещения, МенюОтчетов);
	ИначеЕсли МенюОтчетов.Количество() = 1 Тогда
		ВыборОтчетаРасшифровкиАктиваПассива(МенюОтчетов[0], ОтчетыРасшифровки)
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборОтчетаРасшифровкиАктиваПассива(ВыбранныйЭлемент, НастройкиРасшифровки) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	
	ИначеЕсли ВыбранныйЭлемент.Значение = "ОткрытьЗначение" Тогда
		ПоказатьЗначение(Неопределено, НастройкиРасшифровки.Показатель);
		
	Иначе
		Отчет = НастройкиРасшифровки[ВыбранныйЭлемент.Значение];
		ОткрытьФорму("Отчет."+Отчет.ИмяОтчета+".Форма", Отчет.ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
