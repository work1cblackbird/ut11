#Область ПрограммныйИнтерфейс

// Копирует элементы из одной коллекции в другую
//
// Параметры:
//	ПриемникЗначения	- коллекция элементов КД, куда копируются параметры
//	ИсточникЗначения	- коллекция элементов КД, откуда копируются параметры
//	ОчищатьПриемник		- признак необходимости очистки приемника (Булево, по умолчанию: истина)
//
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных")
			    И ТипЗнч(ЭлементПриемник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет одну коллекцию элементов на основании другой
//
// Параметры:
//	ПриемникЗначения	- коллекция элементов КД, куда копируются параметры
//	ИсточникЗначения	- коллекция элементов КД, откуда копируются параметры
//	ПервыйУровень		- уровень структуры коллекции элементов КД для копирования параметров
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//	КоллекцияОформляемыхПолей 	- ОформляемыеПоляКомпоновкиДанных - коллекция оформляемых полей КД
//	ИмяПоля						- Строка - имя поля
//
// Возвращаемое значение:
//	ОформляемоеПолеКомпоновкиДанных - созданное поле
//
// Пример:
// 	Форма.УсловноеОформление.Элементы[0].Поля
//
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат ПолеЭлемента;
	
КонецФункции

// Добавляет в коллекцию отбора новую группу указанного типа.
//
// Параметры:
//	КоллекцияЭлементовОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных 
//	ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - ГруппаИ или ГруппаИли
//
// Возвращаемое значение:
//	ГруппаЭлементовОтбораКомпоновкиДанных - добавленная группа
//
Функция ДобавитьГруппуОтбора(КоллекцияЭлементовОтбора, ТипГруппы) Экспорт

	ГруппаЭлементовОтбора			 = КоллекцияЭлементовОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппы;
	
	Возврат ГруппаЭлементовОтбора;

КонецФункции

// Добавляет выбранное поле компоновки данных
//
// Параметры:
//	Куда - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных - назначение, куда нужно добавить поле
//	ИмяИлиПолеКД - Строка, ПолеКомпоновкиДанных - имя добавляемого поля
//	Заголовок - Строка - заголовок поля в результате компоновки.
//
// Возвращаемое значение:
//	ВыбранноеПолеКомпоновкиДанных - выбранное поле.
//
Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не указано - детальные поля.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД.
//	Поле - Строка, ПолеКомпоновкиДанных - имя или поле КД
//	Строки - Булево - признак для получения последний группировки строк (Серий) или колонок (точек)
//	ПараметрыГруппировки - Структура - Структура со свойствами:
//		*НачалоПериода - Дата - начало периода группировки по полю периода.
//		*КонецПериода - Дата - конец периода группировки по полю периода.
//		*ТипГруппировки - ТипГруппировкиКомпоновкиДанных - тип группировки.
//		*ТипДополнения - ТипДополненияПериодаКомпоновкиДанных - тип дополнения.
//
// Возвращаемое значение:
//	ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных, ГруппировкаКомпоновкиДанных - новая группировка.
//
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина, ПараметрыГруппировки = Неопределено) Экспорт
	
	Если ПараметрыГруппировки = Неопределено Тогда
		ПараметрыГруппировки = Новый Структура("НачалоПериода, КонецПериода, ТипГруппировки, ТипДополнения");
	КонецЕсли;
	
	ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
	Если ЭлементСтруктуры = Неопределено 
		ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
		И Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
		
		Если ПараметрыГруппировки.НачалоПериода <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.НачалоПериода) = Тип("Дата") Тогда
			ПолеГруппировки.НачалоПериода = ПараметрыГруппировки.НачалоПериода;
		КонецЕсли;
		Если ПараметрыГруппировки.КонецПериода <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.КонецПериода) = Тип("Дата") Тогда
			ПолеГруппировки.КонецПериода = ПараметрыГруппировки.КонецПериода;
		КонецЕсли;
		Если ПараметрыГруппировки.ТипГруппировки <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.ТипГруппировки) = Тип("ТипГруппировкиКомпоновкиДанных") Тогда
			ПолеГруппировки.ТипГруппировки = ПараметрыГруппировки.ТипГруппировки;
		КонецЕсли;
		Если ПараметрыГруппировки.ТипДополнения <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.ТипДополнения) = Тип("ТипДополненияПериодаКомпоновкиДанных") Тогда
			ПолеГруппировки.ТипДополнения = ПараметрыГруппировки.ТипДополнения;
		КонецЕсли;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Добавляет группировку в компоновщик настроек в корневой уровень структуры настроек, если поле не указано - детальные поля.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД
//	Поле - Строка, ПолеКомпоновкиДанных - имя или поле компоновки данных.
//	ПараметрыГруппировки - Структура - Структура со свойствами:
//		*НачалоПериода - Дата - начало периода группировки по полю периода.
//		*КонецПериода - Дата - конец периода группировки по полю периода.
//		*ТипГруппировки - ТипГруппировкиКомпоновкиДанных - тип группировки.
//		*ТипДополнения - ТипДополненияПериодаКомпоновкиДанных - тип дополнения.
//
// Возвращаемое значение:
//	ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаДиаграммыКомпоновкиДанных, ГруппировкаКомпоновкиДанных - новая группировка в корне структуры.
//
Функция ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, Знач Поле = Неопределено, ПараметрыГруппировки = Неопределено) Экспорт
	
	Если ПараметрыГруппировки = Неопределено Тогда
		ПараметрыГруппировки = Новый Структура("НачалоПериода, КонецПериода, ТипГруппировки, ТипДополнения");
	КонецЕсли;
	
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
		
		Если ПараметрыГруппировки.НачалоПериода <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.НачалоПериода) = Тип("Дата") Тогда
			ПолеГруппировки.НачалоПериода = ПараметрыГруппировки.НачалоПериода;
		КонецЕсли;
		Если ПараметрыГруппировки.КонецПериода <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.КонецПериода) = Тип("Дата") Тогда
			ПолеГруппировки.КонецПериода = ПараметрыГруппировки.КонецПериода;
		КонецЕсли;
		Если ПараметрыГруппировки.ТипГруппировки <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.ТипГруппировки) = Тип("ТипГруппировкиКомпоновкиДанных") Тогда
			ПолеГруппировки.ТипГруппировки = ПараметрыГруппировки.ТипГруппировки;
		КонецЕсли;
		Если ПараметрыГруппировки.ТипДополнения <> Неопределено 
			И ТипЗнч(ПараметрыГруппировки.ТипДополнения) = Тип("ТипДополненияПериодаКомпоновкиДанных") Тогда
			ПолеГруппировки.ТипДополнения = ПараметрыГруппировки.ТипДополнения;
		КонецЕсли;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры компоновки данных.
//	Поле - Строка - имя поля, по которому добавляется отбор.
//	Значение - Произвольный - значение отбора компоновки данных.
//	ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнений КД (по умолчанию: Неопределено).
//	Использование - Булево - признак использования отбора (по умолчанию: Истина).
//	ДополнительныеПараметры - Структура - Структура со свойствами:
//		*ВПользовательскиеНастройки - Булево - признак добавления в пользовательские настройки компоновки данных (по умолчанию: ложь).
//		*ЗаменятьСуществующий - Булево - признак полной замены существующего отбора по полю (по умолчанию: истина).
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - добавленный отбор.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ВПользовательскиеНастройки, ЗаменятьСуществующий", Ложь, Истина); 
	Иначе
		Если Не ДополнительныеПараметры.Свойство("ВПользовательскиеНастройки") Тогда
			ДополнительныеПараметры.Вставить("ВПользовательскиеНастройки", Ложь);
		КонецЕсли;
		Если Не ДополнительныеПараметры.Свойство("ЗаменятьСуществующий") Тогда
			ДополнительныеПараметры.Вставить("ЗаменятьСуществующий", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ДополнительныеПараметры.ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	Если ДополнительныеПараметры.ЗаменятьСуществующий Тогда
		Для каждого Элемент Из Отбор.Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.ЛевоеЗначение = Поле Тогда
				ЭлементОтбора = Элемент;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование		= Использование;
	ЭлементОтбора.ЛевоеЗначение		= Поле;
	ЭлементОтбора.ВидСравнения		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение	= Значение;
	
	Возврат ЭлементОтбора;
	
КонецФункции

// Очищает все элементы настройки компоновки данных из объекта
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - очищаемые настройки.
//
Процедура ОчиститьНастройкиКомпоновкиДанных(Настройки) Экспорт
	
	Если Настройки = Неопределено ИЛИ ТипЗнч(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Значение = Неопределено;
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Для каждого Параметр Из Настройки.ПараметрыВывода.Элементы Цикл
		Параметр.Использование = ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	Настройки.Структура.Очистить();
	
КонецПроцедуры

// Отключает в корневом элементе вывод общих итогов по вертикали и горизонтали
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - изменяемые настройки.
//
Процедура ОтключитьВыводОбщихИтогов(Настройки) Экспорт
	
	УстановитьПараметрВывода(Настройки, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	УстановитьПараметрВывода(Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
КонецПроцедуры

// Возвращает признак используется ли поле в настройке СКД
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД
//	Поле - Строка, ПолеКомпоновкиДанных - имя или поле компоновки данных.
//	ВключаяВложенныеПоля - Булево - Если Истина, то будут проверятся вложенные поля. Например, "Регистратор.Дата".
//					По умолчанию Ложь.
//
// Возвращаемое значение:
//	Булево - Истина, если поле найдено в какой-либо из настроек.
//
Функция ПолеИспользуется(ЭлементСтруктуры, Поле, ВключаяВложенныеПоля = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктуры.ПолучитьНастройки();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктуры;
	КонецЕсли;
	
	ЕстьГруппировка = ложь;
	
	ЕстьГруппировка = НайтиПоле(Настройки.Структура, Поле, ВключаяВложенныеПоля);
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
		ИмяПоляКомпоновкиСТочкой = Поле + ".";
	Иначе
		ПолеКомпоновки = Поле;
		ИмяПоляКомпоновкиСТочкой = Строка(Поле) + ".";
	КонецЕсли;
	
	Если НЕ ЕстьГруппировка Тогда
		// найти поле группировки в отборе
		Для каждого ОтборПоле Из Настройки.Отбор.Элементы Цикл
			
			Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеКомпоновки, ВключаяВложенныеПоля);
				Если ЕстьГруппировка Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если ОтборПоле.Использование И ТипЗнч(ОтборПоле.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
					Если ВключаяВложенныеПоля
						И (ОтборПоле.ЛевоеЗначение = ПолеКомпоновки
						ИЛИ СтрНачинаетсяС(Строка(ОтборПоле.ЛевоеЗначение), ИмяПоляКомпоновкиСТочкой)) Тогда
						ЕстьГруппировка = Истина;
						Прервать;
					ИначеЕсли НЕ ВключаяВложенныеПоля И ОтборПоле.ЛевоеЗначение = ПолеКомпоновки Тогда
						ЕстьГруппировка = Истина;
						Прервать;
					КонецЕсли;
				ИначеЕсли ОтборПоле.Использование И ТипЗнч(ОтборПоле.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
					Если ВключаяВложенныеПоля
						И (ОтборПоле.ПравоеЗначение = ПолеКомпоновки
						ИЛИ СтрНачинаетсяС(Строка(ОтборПоле.ПравоеЗначение), ИмяПоляКомпоновкиСТочкой)) Тогда
						ЕстьГруппировка = Истина;
						Прервать;
					ИначеЕсли НЕ ВключаяВложенныеПоля И ОтборПоле.ПравоеЗначение = ПолеКомпоновки Тогда
						ЕстьГруппировка = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЕстьГруппировка Тогда
		ВыбранныеПоля = ПолучитьВыбранныеПоля(Настройки);
		
		Для Каждого ПолеВыбора Из ВыбранныеПоля Цикл
			
			Если ТипЗНЧ(ПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных")
				И ПолеВыбора.Использование Тогда
				Если ВключаяВложенныеПоля
					И (ПолеВыбора.Поле = ПолеКомпоновки
					ИЛИ СтрНачинаетсяС(Строка(ПолеВыбора.Поле), ИмяПоляКомпоновкиСТочкой)) Тогда
					ЕстьГруппировка = Истина;
					Прервать;
				ИначеЕсли НЕ ВключаяВложенныеПоля И ПолеВыбора.Поле = ПолеКомпоновки Тогда
					ЕстьГруппировка = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьГруппировка;
	
КонецФункции 

// Возвращает список всех группировок компоновщика настроек
// 
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД
//	ПоказыватьГруппировкиТаблиц - Булево - признак добавления в список группировки колонок (по умолчанию Истина).
//
// Возвращаемое значение:
// 	СписокЗначений - Список группировок:
// 	 *Значение - ГруппировкаТаблицыКомпоновкиДанных -
// 	 *Значение - ГруппировкаДиаграммыКомпоновкиДанных -
// 	 *Значение- ГруппировкаКомпоновкиДанных - найденная группировка.
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = Истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	Возврат СписокПолей;
	
КонецФункции

// Возвращает значение параметра компоновки данных
//
// Параметры:
//	ОбъектНастройки - НастройкиКомпоновкиДанных - объект настройки.
//					- ПользовательскиеНастройкиКомпоновкиДанных -
//					- КомпоновщикНастроекКомпоновкиДанных -
//					- НастройкиВложенногоОбъектаКомпоновкиДанных -
//					- ДанныеРасшифровкиКомпоновкиДанных -
//					- КоллекцияЗначенийПараметровКомпоновкиДанных -
//					- ОформлениеКомпоновкиДанных -
//	Параметр		- Строка, ПараметрКомпоновкиДанных - поле или имя поля, для которого нужно вернуть параметр.
//
// Возвращаемое значение:
//	ЗначениеПараметраНастроекКомпоновкиДанных - Неопределено, если параметр не найден.
//
Функция ПолучитьПараметр(ОбъектНастройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(ОбъектНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из ОбъектНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			   И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из ОбъектНастройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = ОбъектНастройки.ФиксированныеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
//
// Параметры:
//	ЭлементСтруктурыНастроек - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД
//	Строки - Булево - признак для получения последний группировки строк (серий) или колонок (точек).
//
// Возвращаемое значение:
//	КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных, КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - Неопределено, если ничего не найдено.
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных")
			И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")
			И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - элемент структуры КД.
//
// Возвращаемое значение:
//	См. КомпоновкаДанныхКлиентСервер.ПолучитьПоследнийЭлементСтруктуры
//
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Копирует настройки компоновки данных
//
// Параметры:
//	НастройкиПриемник	- НастройкиКомпоновкиДанных -
//						- НастройкиВложенногоОбъектаКомпоновкиДанных -
//						- ГруппировкаКомпоновкиДанных -
//						- ГруппировкаТаблицыКомпоновкиДанных -
//						- ГруппировкаДиаграммыКомпоновкиДанных -
//						- ТаблицаКомпоновкиДанных -
//						- ДиаграммаКомпоновкиДанных - коллекция настроек КД, куда копируются настройки.
//	НастройкиИсточник	- НастройкиКомпоновкиДанных -
//						- НастройкиВложенногоОбъектаКомпоновкиДанных -
//						- ГруппировкаКомпоновкиДанных -
//						- ГруппировкаТаблицыКомпоновкиДанных -
//						- ГруппировкаДиаграммыКомпоновкиДанных -
//						- ТаблицаКомпоновкиДанных -
//						- ДиаграммаКомпоновкиДанных - коллекция настроек КД, откуда копируются настройки.
//
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных,		НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля,	НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,				НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,				НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор, НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок, НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор, НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода, НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		НастройкиПриемникСтруктура = НастройкиПриемник.Структура; // КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных, КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных  -
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемникСтруктура.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует отбор из одних настроек компоновки данных в другие настройки
//
// Параметры:
//	СхемаПриемник		- СхемаКомпоновкиДанных - схема КД, в чьи настройки копируется отбор
//	НастройкиПриемник	- НастройкиКомпоновкиДанных - настройки КД, в которое копируется отбор
//	НастройкиИсточник	- НастройкиКомпоновкиДанных - настройки КД, из которых копируется отбор
//	ПоляИсключения		- Строка, Массив, Неопределено - имена полей, которые следует пропустить при копировании.
//
Процедура СкопироватьОтборКомпоновкиДанных(СхемаПриемник, НастройкиПриемник, НастройкиИсточник, Знач ПоляИсключения = Неопределено) Экспорт
	
	ЕстьПоляИсключения = Ложь;
	
	Если ТипЗнч(ПоляИсключения) = Тип("Строка") Тогда
		ПоляИсключения = СтрРазделить(ПоляИсключения, ",");
		Для Каждого ПолеИсключение Из ПоляИсключения Цикл 
			ПолеИсключение = СокрЛП(ПолеИсключение);
		КонецЦикла;
	КонецЕсли;
	
	ЕстьПоляИсключения = ТипЗнч(ПоляИсключения) = Тип("Массив") И ПоляИсключения.Количество() > 0;
	
	Для Каждого ЭлементОтбора Из НастройкиИсточник.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЕстьПоляИсключения Тогда
				ДобавитьВОтборЭлементОтбораСПроверкой(НастройкиПриемник.Отбор, ЭлементОтбора, ПоляИсключения);
			Иначе
				ДобавитьВОтборЭлементОтбора(НастройкиПриемник.Отбор, ЭлементОтбора);
			КонецЕсли;
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НастройкиПриемник.Отбор,ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	// Нужно исправить настройки приемника, т.к. в отборе источника могут быть поля, которые недоступны в приемнике.
	КомпоновщикНастроекЗапроса = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекЗапроса.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПриемник));
	КомпоновщикНастроекЗапроса.ЗагрузитьНастройки(НастройкиПриемник);
	КомпоновщикНастроекЗапроса.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	НастройкиПриемник = КомпоновщикНастроекЗапроса.ПолучитьНастройки();
	
КонецПроцедуры

Процедура ДобавитьВОтборЭлементОтбораСПроверкой(ОтборПриемник, ЭлементОтбора, ПоляИсключения)
	
	ДобавлятьПолеВОтбор = Истина;
	
	ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
	Для Каждого ПолеИсключение Из ПоляИсключения Цикл 
		Если СтрНачинаетсяС(ИмяПоля, ПолеИсключение) Тогда
			ДобавлятьПолеВОтбор = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавлятьПолеВОтбор Тогда
		ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора);
	КонецЕсли;

КонецПроцедуры

// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, ОтборКомпоновкиДанных - элемент структуры компоновки
//	Поле - Строка, ПолеКомпоновкиДанных - имя или поле компоновки.
//
// Возвращаемое значение:
//	Булево - признак успешного удаления/очистки.
//
Функция УдалитьОтбор(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если Поле = Неопределено Тогда
		Отбор.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Элементы = ПолучитьЭлементыОтбора(Отбор);
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ЛевоеЗначение = Поле Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУдаляемыхЭлементов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Устанавливает параметр настроек компоновки данных
//
// Параметры:
//	Настройки - НастройкиКомпоновкиДанных -
//				- ПользовательскиеНастройкиКомпоновкиДанных -
//				- КомпоновщикНастроекКомпоновкиДанных - настройки КД, для которых требуется установить параметры.
//	Параметр - Строка, ПараметрКомпоновкиДанных - параметр, который требуется установить
//	Значение - Произвольный - значение, которое требуется установить.
//	Использование - Булево - признак использования параметра КД.
//	Недоступный - Булево - Истина, если элемент настройки не предназначен для изменения в составе пользовательской настройки.
//
// Возвращаемое значение:
//	ЗначениеПараметраНастроекКомпоновкиДанных - установленный параметр настроек КД. Неопределено, если параметр на найден.
//
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина, Недоступный = Ложь) Экспорт
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Значение		= Значение;
		ЗначениеПараметра.Использование	= Использование;
		Если Недоступный Тогда
			ЗначениеПараметра.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
КонецФункции

// Устанавливает параметры настроек компоновки данных
//
// Параметры:
//	Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных - настройки СКД, для которых требуется установить параметры
//	УстанавливаемыеПараметры - Соответствие - в котором:
//		*Ключ - Строка - имя параметра компоновки данных, как оно задано в схеме
//		*Значение - Произвольный - устанавливаемое значение.
//
Процедура УстановитьКоллекциюПараметров(Настройки, УстанавливаемыеПараметры) Экспорт
	
	Если НЕ Настройки = Неопределено Тогда
		Для Каждого УстанавливаемыйПараметр Из УстанавливаемыеПараметры Цикл
			КлючПараметра =  УстанавливаемыйПараметр.Ключ;
			ЗначениеПараметра = УстанавливаемыйПараметр.Значение;
			
			ЗначениеПараметраНастроек = ПолучитьПараметр(Настройки, КлючПараметра);
			Если НЕ ЗначениеПараметраНастроек = Неопределено Тогда
				
				УстановитьПараметр(Настройки, КлючПараметра, ЗначениеПараметра, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр вывода компоновщика настроек или настройки КД
//
// Параметры:
//	КомпоновщикНастроекГруппировка - ГруппировкаКомпоновкиДанных -
//									- ГруппировкаТаблицыКомпоновкиДанных -
//									- ГруппировкаДиаграммыКомпоновкиДанных - компоновщик настроек или настройка/группировка КД.
//	ИмяПараметра - Строка - имя параметра КД.
//	Значение - Произвольный - значение параметра вывода КД.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных - установленный параметр настроек КД. Неопределено, если параметр на найден.
//
Функция УстановитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра, Значение) Экспорт
	
	Если ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Устанавливает параметры настройки компоновки данных. При этом, если параметр включен в пользовательские настройки,
// то редактируется пользовательская настройка с соответствующим идентификатором. Применяется в случаях, когда
// когда требуется программно установить пользовательские параметры.
//
// Параметры:
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - элемент структуры КД
//	МассивПараметров - Массив - Массив параметров.
//
Процедура ДобавитьПараметрыВПользовательскиеНастройки(КомпоновщикНастроек, МассивПараметров) Экспорт
	
	Для Каждого ЭлементКДобавлению Из МассивПараметров Цикл
		
		// поиск подходящего пользовательского параметра
		ИдентификаторПользовательскойНастройки = "";
		ЭлементыПараметровКомпоновщика = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
		Для Каждого ЭлементКомпоновщика Из ЭлементыПараметровКомпоновщика Цикл
			Если ЭлементКомпоновщика.Параметр = Новый ПараметрКомпоновкиДанных(ЭлементКДобавлению.Имя) Тогда
				ИдентификаторПользовательскойНастройки = ЭлементКомпоновщика.ИдентификаторПользовательскойНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// если пользовательский параметр найден, то редактируем его
		Если ЗначениеЗаполнено(ИдентификаторПользовательскойНастройки) Тогда
			Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
					ЭлементПараметра = ЭлементНастройки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЭлементПараметра.Значение = ЭлементКДобавлению.Значение;
			ЭлементПараметра.Использование = Истина;
			
		Иначе
			// если пользовательский параметр не найден,то добавляем
			УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,
				ЭлементКДобавлению.Имя,
				ЭлементКДобавлению.Значение,
				Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя поля и его дочерних реквизитов, указанных через точку
//
// Параметры:
//	ИмяПоля - Строка - имя поля в формате "ИмяПоля" или "ИмяПоля.Реквизит.Реквизит..."
//
// Возвращаемое значение:
//	Структура - имя и реквизит в строковом виде:
//		*Имя - Строка - Имя поля
//		*Реквизит - Строка - Имя реквизита в формате "Реквизит.Реквизит..."
//
Функция РазделитьИмяПоляИРеквизита(ИмяПоля) Экспорт
	
	Результат = Новый Структура("Имя,Реквизит", "", "");
	МассивИмен = СтрРазделить(ИмяПоля, ".");
	Если МассивИмен.Количество() > 0 Тогда
		Результат.Имя = МассивИмен[0];
	КонецЕсли;
	
	Если МассивИмен.Количество() > 1 Тогда
		МассивИмен.Удалить(0);
		Результат.Реквизит = СтрСоединить(МассивИмен,".");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на равенство два переданных отбора схемы компоновки данных
//
// Параметры:
//  ИсточникОтбор - НастройкиКомпоновкиДанных - первый элемент сравнения
//  ЭлементСравненияОтбор - НастройкиКомпоновкиДанных - второй элемент сравнения.
//
// Возвращаемое значение:
//   Булево - Истина, если переданные отборы равны, в противном случае ложь.
//
Функция ИспользуемыеОтборыРавны(ИсточникОтбор, ЭлементСравненияОтбор) Экспорт
	
	ИсточникОтборЭлементы = ЭлементыОтбора(ИсточникОтбор);
	ЭлементСравненияОтборЭлементы = ЭлементыОтбора(ЭлементСравненияОтбор);
	
	Если ИсточникОтборЭлементы = Неопределено И ЭлементСравненияОтборЭлементы = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИсточникОтборЭлементы = Неопределено Тогда
		Возврат НЕ ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтборЭлементы);
	КонецЕсли;
	
	Если ЭлементСравненияОтборЭлементы = Неопределено Тогда
		Возврат НЕ ЕстьЗначимыеЭлементыОтбора(ИсточникОтборЭлементы);
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из ИсточникОтборЭлементы Цикл
		НайденныйЭлемент = Неопределено;
		Если НЕ ЕстьТакойЖеОтбор(ЭлементОтбора, ЭлементСравненияОтборЭлементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если НЕ ИспользуемыеОтборыРавны(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из ЭлементСравненияОтборЭлементы Цикл
		НайденныйЭлемент = Неопределено;
		Если НЕ ЕстьТакойЖеОтбор(ЭлементОтбора, ИсточникОтборЭлементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если НЕ ИспользуемыеОтборыРавны(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник,ЭлементОтбора)
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент,ЭлементОтбора);
КонецПроцедуры


// Добавляет группу элементов отбора.
// 
// Параметры:
// 	ОтборПриемник - ГруппаЭлементовОтбораКомпоновкиДанных, ОтборКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных - коллекция, куда добавляется группа.
// 	ГруппаЭлементов - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - непоследственное место, куда вставляется группа.
// 	ПоляИсключения - Неопределено, Массив - Описание
Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов, Знач ПоляИсключения = Неопределено)
	
	ЕстьПоляИсключения = Ложь;
	
	Если ТипЗнч(ПоляИсключения) = Тип("Строка") Тогда
		ПоляИсключения = СтрРазделить(ПоляИсключения, ",");
		Для Каждого ПолеИсключение Из ПоляИсключения Цикл 
			ПолеИсключение = СокрЛП(ПолеИсключение);
		КонецЦикла;
	КонецЕсли;
	
	ЕстьПоляИсключения = ТипЗнч(ПоляИсключения) = Тип("Массив") И ПоляИсключения.Количество() > 0;
	
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа,ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора Из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЕстьПоляИсключения Тогда
				ДобавитьВОтборЭлементОтбораСПроверкой(НоваяГруппа, ЭлементОтбора, ПоляИсключения);
			Иначе
				ДобавитьВОтборЭлементОтбора(НоваяГруппа, ЭлементОтбора);
			КонецЕсли;
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа, ЭлементОтбора, ПоляИсключения);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВыбранныеПоляВМассив(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьВыбранныеПоляВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет вложенные группировки элемента структуры.
//
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = Истина)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет используется ли отбор по заданному полю.
//
// Параметры:
//	Элементы - КоллекцияЭлементовОтбораКомпоновкиДанных - коллекция элементов отбора.
//	ПолеКомпоновки - Строка, ПолеКомпоновкиДанных - имя поля отбор по которому требуется найти.
//	ВключаяВложенныеПоля - Булево - Признак поиска во вложенных элементах.
//
// Возвращаемое значение:
//  Булево - Истина, если по заданному полю установлен действующий отбор
//
Функция ИспользуетсяОтбор(Элементы, Знач ПолеКомпоновки, ВключаяВложенныеПоля = Ложь) Экспорт
	
	ЕстьГруппировка = Ложь;
	ИмяПоляКомпоновкиСТочкой = Строка(ПолеКомпоновки) + ".";
	Если ТипЗнч(ПолеКомпоновки) = Тип("Строка") Тогда
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ПолеКомпоновки);
	КонецЕсли;
	
	Для Каждого ОтборПоле Из Элементы Цикл
		
		Если ТипЗнч(ОтборПоле) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЕстьГруппировка = ИспользуетсяОтбор(ОтборПоле.Элементы, ПолеКомпоновки, ВключаяВложенныеПоля);
			Если ЕстьГруппировка Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Если ОтборПоле.Использование И ТипЗнч(ОтборПоле.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
				Если ВключаяВложенныеПоля
					И (ОтборПоле.ЛевоеЗначение = ПолеКомпоновки
					ИЛИ СтрНачинаетсяС(Строка(ОтборПоле.ЛевоеЗначение), ИмяПоляКомпоновкиСТочкой)) Тогда
					ЕстьГруппировка = Истина;
					Прервать;
				ИначеЕсли НЕ ВключаяВложенныеПоля И ОтборПоле.ЛевоеЗначение = ПолеКомпоновки Тогда
					ЕстьГруппировка = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли ОтборПоле.Использование И ТипЗнч(ОтборПоле.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
				Если ВключаяВложенныеПоля
					И (ОтборПоле.ПравоеЗначение = ПолеКомпоновки
					ИЛИ СтрНачинаетсяС(Строка(ОтборПоле.ПравоеЗначение), ИмяПоляКомпоновкиСТочкой)) Тогда
					ЕстьГруппировка = Истина;
					Прервать;
				ИначеЕсли НЕ ВключаяВложенныеПоля И ОтборПоле.ПравоеЗначение = ПолеКомпоновки Тогда
					ЕстьГруппировка = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции

// Возвращает значение истина, если в группировках элементов структуры присутствует Поле.
//
// Параметры:
//	Структура - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - Элемент структуры настроек отчета.
//				- КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных - Элемент структуры настроек отчета.
//				- КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных - Элемент структуры настроек отчета.
//				- ТаблицаКомпоновкиДанных - Элемент структуры настроек отчета.
//				- ГруппировкаКомпоновкиДанных - Элемент структуры настроек отчета.
//				- ГруппировкаДиаграммыКомпоновкиДанных - Элемент структуры настроек отчета.
//				- ГруппировкаТаблицыКомпоновкиДанных - Элемент структуры настроек отчета.
//				- ДиаграммаКомпоновкиДанных - Элемент структуры настроек отчета.
//	Поле - Строка - Имя поля компоновки.
//			- ПолеКомпоновкиДанных - поле компоновки данных.
//	ВключаяВложенныеПоля - Булево - Если Истина, то будут проверятся вложенные поля. Например, "Регистратор.Дата".
//						По умолчанию Ложь.
//
// Возвращаемое значение:
//	Булево - Истина, если в группировках элементов структуры присутствует Поле.
//
Функция НайтиПоле(Структура, Поле, ВключаяВложенныеПоля = Ложь)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных")
		И ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		И ТипЗнч(Структура) <> Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Поле);
	Иначе
		ПолеКомпоновки = Поле;
	КонецЕсли;
	ИмяПоляКомпоновкиСТочкой = Строка(Поле) + ".";
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		
		Если Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки.Использование Тогда
					Если ВключаяВложенныеПоля
						И (ПолеГруппировки.Поле = ПолеКомпоновки
						ИЛИ СтрНачинаетсяС(Строка(ПолеГруппировки.Поле), ИмяПоляКомпоновкиСТочкой)) Тогда
						ЕстьПоле = Истина;
						Прервать;
					ИначеЕсли НЕ ВключаяВложенныеПоля И ПолеГруппировки.Поле = ПолеКомпоновки Тогда
						ЕстьПоле = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПоле Тогда
			Прервать;
		КонецЕсли;
		Если Тип(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Строки, Поле, ВключаяВложенныеПоля)
					ИЛИ НайтиПоле(ЭлементСтруктуры.Колонки, Поле, ВключаяВложенныеПоля);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ Тип(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Структура, Поле, ВключаяВложенныеПоля);
		ИначеЕсли Тип(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Точки.Количество() <> 0 Тогда
				ЕстьПоле = НайтиПоле(ЭлементСтруктуры.Точки, Поле, ВключаяВложенныеПоля)
						ИЛИ НайтиПоле(ЭлементСтруктуры.Серии, Поле, ВключаяВложенныеПоля);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПоле()

// Возвращает массив выбранных полей или групп выбранных полей
//
// Параметры:
//		ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных -
//							- НастройкиВложенногоОбъектаКомпоновкиДанных -
//							- НастройкиКомпоновкиДанных - элемент структуры, настройка компоновщика настроек, компоновщик настроек.
//		ТолькоГруппы - Булево - признак, того что процедура будет возвращать только группы.
//
// Возвращаемое значение:
//		Массив из ВыбранноеПолеКомпоновкиДанных, ГруппаВыбранныхПолейКомпоновкиДанных - массив выбранных полей.
//
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь)
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Выбор;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассив(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции


// Возвращаем массив элементов отбора.
// 
// Параметры:
// 	ЭлементСтруктуры - ОтборКомпоновкиДанных - коллекция элементов отбора.
// 	ТолькоГруппы - Булево - Возвращать только группы.
// Возвращаемое значение:
// 	Массив из ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - Массив элементов отбора.
//
Функция ПолучитьЭлементыОтбора(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	МассивПолей = Новый Массив;
	
	ДобавитьЭлементыОтбораВМассив(ЭлементСтруктуры.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

// Возвращает значение параметра фиксированных настроек компоновки данных
//
// Параметры:
//	Настройки - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - фиксированные настройки КД, Настройки КД, Компоновщик настроек КД.
//	Параметр - Строка - имя параметра КД для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ЗначениеПараметраКомпоновкиДанных, Неопределено - Значение параметра.
//
Функция ПолучитьПараметрФиксированныхНастроек(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ФиксированныеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Процедура возвращает отбор по имени.
// Процедура не рекурсивная, т.к. вызывается из ИспользуемыеОтборыРавны,
// в которой уже обработан обход групп.
//
// Параметры:
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - искомый отбор.
//  ЭлементыОтбора - ОтборКомпоновкиДанных - отбор, где ищем.
//  НайденныйЭлемент - ЭлементОтбораКомпоновкиДанных - найденный элемент отбора.
//
// Возвращаемое значение:
//  Булево - Истина, если есть такой же элемент отбора.
//
Функция ЕстьТакойЖеОтбор(ЭлементОтбора, ЭлементыОтбора, НайденныйЭлемент)
	
	Для Каждого ЭлементОтбораСравнения Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораСравнения) <> Тип(ЭлементОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбораСравнения) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПравыеЗначенияРавны = ЭлементОтбораСравнения.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			Если ТипЗнч(ЭлементОтбораСравнения.ПравоеЗначение) = Тип("СписокЗначений")
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ПравыеЗначенияРавны = ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(
					ЭлементОтбораСравнения.ПравоеЗначение, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ПравыеЗначенияРавны
				И ЭлементОтбораСравнения.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение
				И ЭлементОтбораСравнения.ВидСравнения = ЭлементОтбора.ВидСравнения
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		Иначе
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ТипГруппы = ЭлементОтбора.ТипГруппы
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗначимыеЭлементыОтбора(ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЕстьЗначимыеЭлементыОтбора(ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭлементыОтбора(НастройкаОтбора)
	
	Если ТипЗнч(НастройкаОтбора) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкаОтбора) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЭлементыОтбора = НастройкаОтбора.Отбор.Элементы;
	
	Иначе
		ЭлементыОтбора = НастройкаОтбора;
		
	КонецЕсли;
	
	Возврат ЭлементыОтбора;
	
КонецФункции

#КонецОбласти
