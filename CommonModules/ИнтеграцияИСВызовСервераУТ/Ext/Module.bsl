// Общие механизмы интеграции ГосИС-ERP

#Область ПрограммныйИнтерфейс

// Получает массив GTIN для переданного товара и характеристики
//
// Параметры:
//  Номенклатура   - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
// 
// Возвращаемое значение:
//  Массив - массив GTIN
//
Функция МассивGTINМаркированногоТовара(Номенклатура, Характеристика) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	МассивШтрихкодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	СписокGTIN =  Новый Массив;
	
	Для Каждого Штрихкод Из МассивШтрихкодов Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод) Тогда
			СписокGTIN.Добавить(Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокGTIN;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВидыПродукцииВТоварах(Знач Товары) Экспорт
	
	Возврат ИнтеграцияИСУТ.ВидыПродукцииВТоварах(Товары);
	
КонецФункции

// ГИСМ. Получение доступных пользователю вариантов списков документов возврата.
// Возвращаемое значение:
//  СписокЗначений - варианты форм (и их настроек) которые могут быть открыты
Функция ВозвратыТоваровОтРозничныхКлиентов(СтруктураВозврата) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента)
			И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		
		Элемент = Результат.Добавить();
		Элемент.Представление = НСтр("ru = 'Возвраты товаров от клиента'");
		Элемент.Значение = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураВозврата);
		Элемент.Значение.ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаСпискаДокументовГИСМ";
		Элемент.Значение.ИмяПоляОтветственный = "Менеджер";
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетОРозничныхВозвратах) Тогда
		
		Элемент = Результат.Добавить();
		Элемент.Представление = НСтр("ru = 'Отчеты о розничных возвратах'");
		Элемент.Значение = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураВозврата);
		Элемент.Значение.ИмяФормы = "Документ.ОтчетОРозничныхВозвратах.Форма.ФормаСпискаГИСМ";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак: партнер это розничный клиент, для торгового документа (реализация товаров, возврат от клиента).
// 
// Параметры:
//  ДокументСсылка  - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ВозвратТоваровОтКлиента, ДокументСсылка.КорректировкаРеализации - Документ
// 
// Возвращаемое значение:
//  Булево - Партнер это розничный клиент в документе
Функция ПартнерЭтоРозничныйКлиентВДокументе(ДокументСсылка) Экспорт
	
	Возврат РозничныеПродажиВызовСервера.ПартнерЭтоРозничныйКлиент(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Партнер"));
	
КонецФункции

// Возвращает признак: контрагент это розничный клиент, для торгового документа (реализация товаров, возврат от клиента).
// 
// Параметры:
//  ДокументСсылка  - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ВозвратТоваровОтКлиента, ДокументСсылка.КорректировкаРеализации - Документ
// 
// Возвращаемое значение:
//  Булево - Контрагент - это физическое лицо в документе
Функция КонтрагентЭтоФизическоеЛицоВДокументе(ДокументСсылка) Экспорт
	
	Возврат РозничныеПродажиВызовСервера.КонтрагентЭтоФизическоеЛицо(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Контрагент"));
	
КонецФункции

// Возвращает признак: расчеты по документу ведутся с розничным клиентом по ПКО
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПриходныйКассовыйОрдер - Документ
// 
// Возвращаемое значение:
//  Булево - расчеты с розничным клиентом
Функция РасчетыПоДокументуСРозничнымКлиентом(ДокументСсылка) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ХозяйственнаяОперация") = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		
		Возврат РозничныеПродажиВызовСервера.ПартнерЭтоРозничныйКлиент(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Партнер"));
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Определяет, требуется ли обновление списка CDN-площадок при открытии смены
// 
// Возвращаемое значение:
//  Булево - Истина - если требуется запустить процедуру обновления
Функция ТребуетсяОбновлениеСпискаCDNПлощадок() Экспорт
	
	Возврат ОбщегоНазначенияИСМП.ТребуетсяОбновлениеСпискаCDNПлощадок();
	
КонецФункции

Функция ЭтоМернаяЕдиницаХранения(ЕдиницаИзмерения) Экспорт
	Возврат Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(ЕдиницаИзмерения)
КонецФункции

Функция ДанныеУпаковкиНоменклатурыЧастичногоВыбытия(Номенклатура, ПотребительскаяУпаковка, КоэффициентУпаковкиИСМП) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Упаковка",           Неопределено);
	ВозвращаемоеЗначение.Вставить("Числитель",          1);
	ВозвращаемоеЗначение.Вставить("Знаменатель",        КоэффициентУпаковкиИСМП);
	ВозвращаемоеЗначение.Вставить("ТипУпаковки",        Перечисления.ТипыУпаковокНоменклатуры.Разупаковка);
	ВозвращаемоеЗначение.Вставить("КоличествоУпаковок", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка                    КАК Ссылка,
	|	Таблица.Числитель                 КАК Числитель,
	|	Таблица.Знаменатель               КАК Знаменатель,
	|	Таблица.ТипУпаковки               КАК ТипУпаковки,
	|	Таблица.КоличествоУпаковок        КАК КоличествоУпаковок,
	|	&ТекстЗапросаКоэффициентаУпаковки КАК КоэффициентУпаковки
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК Таблица
	|ГДЕ
	|	Таблица.Владелец = &Владелец";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентаУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Таблица.Ссылка"));
	
	ЕдиницаХранения = Справочники.УпаковкиЕдиницыИзмерения.ЕдиницаХраненияНоменклатуры(Номенклатура);
	
	Если ЗначениеЗаполнено(ПотребительскаяУпаковка)
		И ПотребительскаяУпаковка <> ЕдиницаХранения Тогда
		ВозвращаемоеЗначение.ТипУпаковки        = Перечисления.ТипыУпаковокНоменклатуры.Составная;
		КоэффициентПотребительской              = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ПотребительскаяУпаковка, Номенклатура);
		ВозвращаемоеЗначение.Знаменатель        = 1;
		ВозвращаемоеЗначение.Числитель          = КоэффициентУпаковкиИСМП * КоэффициентПотребительской;
		ВозвращаемоеЗначение.КоличествоУпаковок = КоэффициентПотребительской;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ВозвращаемоеЗначение.ТипУпаковки <> Выборка.ТипУпаковки Тогда
			Продолжить
		КонецЕсли;
		
		Если ВозвращаемоеЗначение.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
			Если Выборка.Знаменатель <> КоэффициентУпаковкиИСМП
				Или Выборка.Числитель <> 1 Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ВозвращаемоеЗначение.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная Тогда
			Если Выборка.КоличествоУпаковок <> ВозвращаемоеЗначение.КоличествоУпаковок
				Или Выборка.Знаменатель <> 1
				Или Выборка.Числитель <> ВозвращаемоеЗначение.Числитель Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Упаковка = Выборка.Ссылка;
		Прервать;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция - Коэффициент упаковки
//
// Параметры:
//  Упаковка	 - 	СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка, коэффициент которой нужно получить
//  Номенклатура - 	СправочникСсылка.Номенклатура - обязательно для указания, если упаковка НЕ типа "Упаковка".
// 
// Возвращаемое значение:
//  Число - коэффициент упаковки
//
Функция КоэффициентУпаковки(Упаковка, Номенклатура) Экспорт
	Возврат Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка, Номенклатура);
КонецФункции

Функция ДокументыСОшибкамиПроверкиЗаполненияКодовМаркировки(ДокументыМассив, СообщатьОбОшибках = Истина) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Для Каждого ПроверяемыйДокумент Из ДокументыМассив Цикл
		
		Источники = Новый Массив();
		
		ТипДокумента = ТипЗнч(ПроверяемыйДокумент);
		Если ТипДокументаПоддерживаетПроверкуНаличияКодовМаркировки(ТипДокумента) Тогда
			Источники.Добавить(ПроверяемыйДокумент);
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ДокументыОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйДокумент, "ДокументыОснования").Выгрузить();
			Для Каждого СтрокаТаблицы Из ДокументыОснования Цикл
				Если ТипДокументаПоддерживаетПроверкуНаличияКодовМаркировки(ТипЗнч(СтрокаТаблицы.ДокументОснование)) Тогда
					Источники.Добавить(СтрокаТаблицы.ДокументОснование);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ДокументПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйДокумент, "ДокументПродажи");
			Если ЗначениеЗаполнено(ДокументПродажи)
				И ТипДокументаПоддерживаетПроверкуНаличияКодовМаркировки(ТипЗнч(ДокументПродажи)) Тогда
				Источники.Добавить(ДокументПродажи);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибкиПроверкиДокумента = Ложь;
		ИнтеграцияИСУТ.ПроверитьЗаполнениеАкцизныхМарокПоСсылкам(Источники, ЕстьОшибкиПроверкиДокумента,, СообщатьОбОшибках);
		Если ЕстьОшибкиПроверкиДокумента Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДокументыМассив, ПроверяемыйДокумент);
			ВозвращаемоеЗначение.Добавить(ПроверяемыйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультатПроверкиПроведенностиДокументовИЗаполненияКодовМаркировки(ДокументыМассив) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДокументыСОшибкамиПроверкиЗаполненияКодовМаркировки", Новый Массив);
	ВозвращаемоеЗначение.Вставить(
		"ДокументыТребующиеПроведение",
		ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(ДокументыМассив));
	
	Если ВозвращаемоеЗначение.ДокументыТребующиеПроведение.Количество() = 0 Тогда
		ВозвращаемоеЗначение.ДокументыСОшибкамиПроверкиЗаполненияКодовМаркировки = ДокументыСОшибкамиПроверкиЗаполненияКодовМаркировки(ДокументыМассив);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипДокументаПоддерживаетПроверкуНаличияКодовМаркировки(ТипДокумента)
	Возврат (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"));
КонецФункции

#КонецОбласти