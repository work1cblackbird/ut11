#Область СлужебныеПроцедурыИФункции

// Процедура запуска регламентного задания ОбработкаОтветовЕГАИС.
//
Процедура ЗапуститьОбработкуОтветовЕГАИС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Найти("ОбработкаОтветовЕГАИС"));
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиЕГАИСВызовСервера.ВыполнитьОбмен();
	
КонецПроцедуры

// Формирует пустую структуру сообщения XML
// 
// Параметры:
//  ДляКлиента - Булево - Для клиента
// 
// Возвращаемое значение:
//  Структура -- Структура со свойствами:
// * ТекстОшибки - Строка - Текст ошибки.
// * Ошибки - Соответствие из Строка - Описание ошибок.
// * Описание - Строка - Описание для отображения в форме подписания.
// * ТекстСообщенияXML - Строка - Текст сообщения XML.
// * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// * Документ - ДокументСсылка, Неопределено - Документ.
// * Версия - Число - Версия сообщения.
// * ДокументОснование - ДокументСсылка - Документ основание.
// * Операция - ПеречислениеСсылка - Операция
// * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - формат обмена
Функция СтруктураСообщенияXML(ДляКлиента = Ложь) Экспорт
	
	СообщениеXML = Новый Структура;
	
	СообщениеXML.Вставить("ТекстСообщенияXML", "");
	СообщениеXML.Вставить("ОрганизацияЕГАИС", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Если ДляКлиента Тогда
		
		СообщениеXML.Вставить("Ссылка");
		СообщениеXML.Вставить("АдресЗапроса");
		
	Иначе
		
		СообщениеXML.Вставить("ТекстОшибки", "");
		СообщениеXML.Вставить("Ошибки", Новый Соответствие);
		
		// Для отображения в сообщениях пользователям
		СообщениеXML.Вставить("Описание", "");
		
		СообщениеXML.Вставить("Операция");
		СообщениеXML.Вставить("ФорматОбмена", Перечисления.ФорматыОбменаЕГАИС.ПустаяСсылка());
		
		// Для сохранения в Протокол обмена
		СообщениеXML.Вставить("ТипСообщения", Перечисления.ТипыЗапросовИС.ПустаяСсылка());
		СообщениеXML.Вставить("Документ");
		СообщениеXML.Вставить("Версия", 0);
		
		// Для обновления в формах
		СообщениеXML.Вставить("ДокументОснование");
		
	КонецЕсли;
	
	Возврат СообщениеXML;
	
КонецФункции

// Возвращает доступные параметры обновления статуса:
//   * ОбновлятьДвижения- Булево - Признак необходимости обновления движений документа.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ДокументОбъект - ДокументОбъект - Документ-объект.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена.
//
// Возвращаемое значение:
//  Структура - структура параметров обновления статуса.
//
Функция ПараметрыОбновленияСтатуса() Экспорт
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Истина);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ТекущееСостояние");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ДокументОбъект");
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторЗапроса");
	ПараметрыОбновленияСтатуса.Вставить("ФорматОбмена");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

// Подготавливает сообщение к передаче в сервис ЕГАИС.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст исходящего сообщения.
//  Реквизиты - Структура - Реквизиты передаваемого сообщения:
//   * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * Документ - ДокументСсылка - Документ.
//   * СообщениеОснование - СправочникСсылка.ЕГАИСПрисоединенныеФайлы - Сообщение-основание
//   * Описание - Строка - Описание сообщения.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена.
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * Версия - Число - Номер версии.
//  Немедленно - Булево - Признак немедленной передачи сообщения в УТМ, без очереди сообщений.
// 
// Возвращаемое значение:
//  Массив из Структура - содержит коллекцию структур:
//    * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа
//    * ИсходящееСообщение - Строка - подготовленное сообщение.
//    * ИсходящееСообщение - Строка - подготовленное сообщение.
//
Функция ПодготовитьСообщениеКПередаче(ТекстСообщенияXML, Реквизиты, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус");
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	// Используется для проверка соединения с УТМ
	Если Реквизиты.ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" И Немедленно Тогда
		ВозвращаемоеЗначение.ИсходящееСообщение = ТекстСообщенияXML;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ИсходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
			ТекстСообщенияXML,
			Реквизиты).Ссылка;
		
		Если Не Немедленно Тогда
			ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, Реквизиты.ОрганизацияЕГАИС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.Документ) Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Истина;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = Реквизиты.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена      = Реквизиты.ФорматОбмена;
			
			ПолноеИмя = Реквизиты.Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(
				Реквизиты.Документ,
				Реквизиты.Операция,
				ПараметрыОбновленияСтатуса);
			
		Иначе
			НовыйСтатус = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		ВозвращаемоеЗначение.НовыйСтатус        = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Реквизиты.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить сообщение в регистра сведений ОчередьПередачиДанныхЕГАИС.
//
// Параметры:
//  Сообщение - СправочникСсылка.ЕГАИСПрисоединенныеФайлы - сообщение, которое добавляется в очередь.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС
//
Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, ОрганизацияЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьПередачиДанныхЕГАИС.СоздатьМенеджерЗаписи();
	НоваяЗапись.Сообщение = Сообщение;
	НоваяЗапись.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Удалить сообщение из регистра сведений ОчередьПередачиДанныхЕГАИС.
//
// Параметры:
//  Сообщение - СправочникСсылка.ЕГАИСПрисоединенныеФайлы - сообщение, которое удаляется из очереди.
//
Процедура УдалитьСообщениеИзОчередиПередачиДанных(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьПередачиДанныхЕГАИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовоеСообщение - Булево - Это новое сообщение.
//   * Ссылка - СправочникСсылка.ЕГАИСПрисоединенныеФайлы - Ссылка на присоединенный файл.
//
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияXML, Реквизиты, ПроверятьХешБезСсылки = Ложь) Экспорт
	
	Реквизиты.Вставить("ВладелецФайлов", Реквизиты.ОрганизацияЕГАИС);
	Возврат ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.ЕГАИСПрисоединенныеФайлы,
		ТекстСообщенияXML,
		Реквизиты,
		ПроверятьХешБезСсылки);
	
КонецФункции

// Устанавливает видимость команды "Выполнить обмен" в формах документов, протокола и панели обмена с ЕГАИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ИмяЭлемента - Строка - Имя элемента формы
Процедура УстановитьВидимостьКомандыВыполнитьОбмен(Форма, ИмяЭлемента) Экспорт
	
	Если НЕ ОбщегоНазначенияИС.ПравоОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ДокументыЕГАИС, "Изменение") Тогда
		Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует объект XDTO чека в XML.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ПространствоИмен - Строка - Имя пространства имен.
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML.
//
Функция ЧекXDTOВXML(ОбъектXDTO, ПространствоИмен, ИмяТипа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""" + ПространствоИмен + """ ", "");
	
	Возврат ТекстXML;
	
КонецФункции

#Область ОперацииОбменаДанными

// Сформировать описание операции для документа.
//
// Параметры:
//  Описание - Строка - Описание операции.
//  ДокументСсылка - ДокументСсылка - Документ.
//  НомерВерсии - Число - Номер версии.
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		Возврат Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		Возврат СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии);
	
КонецФункции

//Сформировать описание операции для документа
//
//Параметры:
//   ОперацияПередачиДанных - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС
//
//Возвращаемое значение:
//   Строка - Описание операции
//
Функция ОписаниеОперацииПолученияДанных(ОперацияПередачиДанных) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПолучениеДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, Неопределено, Неопределено);
	
КонецФункции

// Возвращает операции обмена с ЕГАИС, разбитые на категории
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПередачаДанных - Соответствие Из ПеречислениеСсылка.ВидыДокументовЕГАИС - Операции передачи данных.
//    * ПолучениеДанных - Соответствие Из ПеречислениеСсылка.ВидыДокументовЕГАИС - Операции получения данных.
//
Функция КатегорииОпераций() Экспорт
	
	ПередачаДанных = Новый Соответствие;
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЧекККМ,
		НСтр("ru = 'Передача сведений о розничной продаже маркируемой алкогольной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи,
		НСтр("ru = 'Отмена передачи сведений о розничной продаже маркируемой алкогольной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ТТН,
		НСтр("ru = 'Передача сведений об оптовой продаже алкогольной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН,
		НСтр("ru = 'Подтверждение или отказ от отмены проведения ТТН по запросу клиента'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
		НСтр("ru = 'Подтверждение отмены проведения ТТН по запросу клиента'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
		НСтр("ru = 'Отказ отмены проведения ТТН по запросу клиента'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
		НСтр("ru = 'Передача запроса на отмену проведения ТТН'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
		НСтр("ru = 'Передача запроса на отмену проведения акта списания'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
		НСтр("ru = 'Передача запроса на отмену проведения акта постановки на баланс'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений,
		НСтр("ru = 'Подтверждение акта расхождений (или отказ)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
		НСтр("ru = 'Отказ от акта расхождений ТТН'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
		НСтр("ru = 'Подтверждение акта расхождений ТТН'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2,
		НСтр("ru = 'Передача сведений о возврате алкогольной продукции из регистра №2'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2,
		НСтр("ru = 'Передача сведений о перемещении алкогольной продукции в регистр №2'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1,
		НСтр("ru = 'Передача сведений о списании алкогольной продукции из регистра №1'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2,
		НСтр("ru = 'Передача сведений о списании алкогольной продукции из регистра №2'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра3,
		НСтр("ru = 'Передача сведений об отвязывании акцизной марки от партии алкогольной продукции'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1,
		НСтр("ru = 'Передача сведений о постановке на баланс в регистр №1'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2,
		НСтр("ru = 'Передача сведений о постановке на баланс в регистр №2'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр3,
		НСтр("ru = 'Передача сведений о привязке акцизной марки к партии алкогольной продукции'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТН,
		НСтр("ru = 'Передача акта подтверждения ТТН или акта отказ от ТТН'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
		НСтр("ru = 'Передача акта расхождений по ТТН'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
		НСтр("ru = 'Передача акта подтверждения ТТН'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
		НСтр("ru = 'Передача акта отказа от ТТН'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросТТН,
		НСтр("ru = 'Запрос данных ТТН'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросСправки1,
		НСтр("ru = 'Запрос данных справки 1'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросСправки2,
		НСтр("ru = 'Запрос данных справки 2'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1,
		НСтр("ru = 'Запрос остатков в регистре №1'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2,
		НСтр("ru = 'Запрос остатков в регистре №2'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации,
		НСтр("ru = 'Запрос сведений об организации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции,
		НСтр("ru = 'Запрос сведений об алкогольной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена,
		НСтр("ru = 'Передача сведений об используемом формате обмена с ЕГАИС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена,
		НСтр("ru = 'Передача сведений об используемом формате обмена с ЕГАИС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросАкцизныхМарок,
		НСтр("ru = 'Запрос новых штрихкодов акцизных марок (PDF-417)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияМеждуРегистрами,
		НСтр("ru = 'Запрос отчета ""Движения между регистрами""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияПоСправке2,
		НСтр("ru = 'Запрос отчета ""Движения по справке 2""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИнформацияОбОрганизации,
		НСтр("ru = 'Запрос отчета ""Информация об организации""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаНеобработанныеТТН,
		НСтр("ru = 'Запрос отчета ""Необработанные ТТН""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОбработанныеЧеки,
		НСтр("ru = 'Запрос отчета ""Обработанные чеки""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре1,
		НСтр("ru = 'Запрос отчета ""Остатки в регистре №1""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре2,
		НСтр("ru = 'Запрос отчета ""Остатки в регистре №2""'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3,
		НСтр("ru = 'Запрос отчета ""Остатки в регистре №3""'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИсторияСправок2,
		НСтр("ru = 'Запрос отчета ""История справок 2""'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации,
		НСтр("ru = 'Запрос проверки акцизных марок на остатках организации'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ТранспортнаяНакладная,
		НСтр("ru = 'Передача сведений о перегрузке алкогольной продукции при доставке'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТранспортнойНакладной,
		НСтр("ru = 'Передача сведений об отмене перегрузки алкогольной продукции при доставке'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.УведомлениеОПланируемомИмпорте,
		НСтр("ru = 'Передача уведомления о планируемом импорте'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияУведомленияОПланируемомИмпорте,
		НСтр("ru = 'Запрос на отмену проведения уведомления о планируемом импорте'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтчетОбИмпорте,
		НСтр("ru = 'Передача отчета об импорте'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияОтчетаОбИмпорте,
		НСтр("ru = 'Запрос на отмену проведения отчета об импорте'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтчетОПроизводствеПроизводство,
		НСтр("ru = 'Передача отчета о производстве'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтчетОПроизводствеПереработка,
		НСтр("ru = 'Передача отчета о производстве (переработке)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтчетОПроизводствеСырья,
		НСтр("ru = 'Передача отчета о производстве сырья'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияОтчетаОПроизводстве,
		НСтр("ru = 'Запрос на отмену проведения отчета о производстве'"));
	
	ПолучениеДанных = Новый Соответствие;
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ТТН,
		НСтр("ru = 'Получение документа ТТН ЕГАИС (входящая)'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
		НСтр("ru = 'Получение запроса на отмену проведения ТТН'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс,
		НСтр("ru = 'Получение уведомления о регистрации движения акта постановки на баланс'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН,
		НСтр("ru = 'Получение уведомления о регистрации движения ТТН'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ИсторияСправок2ПоТТН,
		НСтр("ru = 'Получение истории справок 2 по ТТН'"));
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТН,
		НСтр("ru = 'Получение акта подтверждения ТТН или акта отказа от ТТН'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
		НСтр("ru = 'Получение акта расхождений по ТТН'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
		НСтр("ru = 'Получение акта подтверждения ТТН'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
		НСтр("ru = 'Получение акта отказа от ТТН'"));
		
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений,
		НСтр("ru = 'Получение квитанции подтверждения акта расхождений или отказа от акта расхождений'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
		НСтр("ru = 'Получение квитанции отказа от акта расхождений ТТН'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
		НСтр("ru = 'Получение квитанции подтверждения акта расхождений ТТН'"));
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС,
		НСтр("ru = 'Квитанция о получении документа в ЕГАИС'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС,
		НСтр("ru = 'Квитанция о проведении документа в ЕГАИС'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2,
		НСтр("ru = 'Получение справки 2'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1,
		НСтр("ru = 'Получение справки 1'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре2,
		НСтр("ru = 'Получение остатков в регистре №2'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре1,
		НСтр("ru = 'Получение остатков в регистре №1'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросДанныхОрганизации,
		НСтр("ru = 'Получение сведений об организации'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАлкогольнойПродукции,
		НСтр("ru = 'Получение алкогольной продукции'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАкцизныхМарок,
		НСтр("ru = 'Получение новых акцизных марок (PDF-417)'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияМеждуРегистрами,
		НСтр("ru = 'Получение отчета ""Движения между регистрами""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияПоСправке2,
		НСтр("ru = 'Получение отчета ""Движения по справке 2""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИнформацияОбОрганизации,
		НСтр("ru = 'Получение отчета ""Информация об организации""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаНеобработанныеТТН,
		НСтр("ru = 'Получение отчета ""Необработанные ТТН""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОбработанныеЧеки,
		НСтр("ru = 'Получение отчета ""Обработанные чеки""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре1,
		НСтр("ru = 'Получение отчета ""Остатки в регистре №1""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре2,
		НСтр("ru = 'Получение отчета ""Остатки в регистре №2""'"));
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3,
		НСтр("ru = 'Получение отчета ""Остатки в регистре №3""'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИсторияСправок2,
		НСтр("ru = 'Получение отчета ""История справок 2""'"));
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации,
		НСтр("ru = 'Получение ответа на запрос проверки акцизных марок на остатках организации'"));
	
	ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве,
		НСтр("ru = 'Получение уведомления о регистрации движения документа импорта/производства'"));
	
	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных",  ПередачаДанных);
	Категории.Вставить("ПолучениеДанных", ПолучениеДанных);
	
	Возврат Категории;
	
КонецФункции

// Создает таблицу последовательности операций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * Индекс - Число - Индекс операции в последовательности.
//   * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * КвитанцияУТМ - Булево - Признак наличия у операции квитанции УТМ.
//   * КвитанцияПолученЕГАИС - Булево - Признак наличия у операции квитанции Получен ЕГАИС.
//   * КвитанцияПроведенЕГАИС - Булево - Признак наличия у операции квитанции Проведен ЕГАИС.
//   * ДальнейшиеДействия - Массив Из ПеречислениеСсылка - Дальнейшие действия при операции.
//
Функция ПустаяТаблицаПоследовательностьОпераций() Экспорт
	
	ПоследовательностьОпераций = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	ПоследовательностьОпераций.Колонки.Добавить("КвитанцияУТМ");
	ПоследовательностьОпераций.Колонки.Добавить("КвитанцияПолученЕГАИС");
	ПоследовательностьОпераций.Колонки.Добавить("КвитанцияПроведенЕГАИС");
	
	Возврат ПоследовательностьОпераций;
	
КонецФункции

// Добавляет операцию в последовательность операций.
//
// Параметры:
//  ПоследовательностьОпераций - ТаблицаЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//  Индекс - Число - Индекс добавляемой операции.
//  ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//  РассчитатьДействияДляДокумента - ДокументСсылка - Документ, для которого нужно вычислить дальнейшие действия.
//  КвитанцияПолученЕГАИС - Булево - Признак наличия у операции квитанции Получен ЕГАИС.
//  КвитанцияПроведенЕГАИС - Булево - Признак наличия у операции квитанции Проведен ЕГАИС.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - см. функцию ПустаяТаблицаПоследовательностьОпераций().
//
Функция ДобавитьОперациюВПоследовательность(ПоследовательностьОпераций,
                                            Индекс,
                                            ТипСообщения,
                                            Операция,
                                            РассчитатьДействияДляДокумента = Неопределено,
                                            КвитанцияПолученЕГАИС = Истина,
                                            КвитанцияПроведенЕГАИС = Истина) Экспорт

	НоваяСтрока = ПоследовательностьОпераций.Добавить();
	НоваяСтрока.Операция     = Операция;
	НоваяСтрока.Индекс       = Индекс;
	НоваяСтрока.ТипСообщения = ТипСообщения;
	
	НоваяСтрока.КвитанцияУТМ           = Истина;
	НоваяСтрока.КвитанцияПолученЕГАИС  = КвитанцияПолученЕГАИС;
	НоваяСтрока.КвитанцияПроведенЕГАИС = КвитанцияПроведенЕГАИС;
	
	НоваяСтрока.ДальнейшиеДействия = Новый Массив;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.АктТТН
		Или Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений
		Или Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ИсторияСправок2ПоТТН Тогда
		НоваяСтрока.АбстрактнаяОперация = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РассчитатьДействияДляДокумента) Тогда
		
		ПолноеИмя = РассчитатьДействияДляДокумента.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Если ПоследовательностьОпераций.Количество() = 1 Тогда
			
			НоваяСтрока.ДальнейшиеДействия.Добавить(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
			
		Иначе
			
			ПредыдущаяОперация = ПротоколОбменаИС.ПредыдущаяОперация(ПоследовательностьОпераций, НоваяСтрока);
			Если ПредыдущаяОперация = Неопределено Тогда
				
				НоваяСтрока.ДальнейшиеДействия.Добавить(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
				
			Иначе
				
				Если ПредыдущаяОперация.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
					Статусы = МенеджерОбъекта.СтатусПослеПередачиДанных(
						РассчитатьДействияДляДокумента,
						ПредыдущаяОперация.Операция, Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ);
				Иначе
					Статусы = МенеджерОбъекта.СтатусПослеПолученияДанных(
						РассчитатьДействияДляДокумента,
						ПредыдущаяОперация.Операция);
				КонецЕсли;
				
				НоваяСтрока.ДальнейшиеДействия = РегистрыСведений.СтатусыДокументовЕГАИС.ДальнейшиеДействия(Статусы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Обрабатывает ответ ЕГАИС на запрос о получении документа.
//
// Параметры:
//  ВходящиеДанные - (См. ОбменДаннымиЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента).
//  ТаблицаСоответствияДокументовТипамЕГАИС - ТаблицаЗначений - см. функцию Перечисления.ВидыДокументовЕГАИС.ТаблицаСоответствияДокументовТипамЕГАИС().
// 
// Возвращаемое значение:
//  Структура:
//   * Результат         - Неопределено, Структура - результат выполнения запроса.
//   * ТекстОшибки       - Строка - текст ошибки, в случае ее возникновения.
//   * ТекстСообщенияXML - Строка - содержит ответ, полученный на запрос.
//   * СтатусОбработки   - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
Функция ОбработатьОтветНаЗапросПолученияДокумента(ВходящиеДанные, ТаблицаСоответствияДокументовТипамЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", ВходящиеДанные.ТекстXML);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ВходящиеДанные.ТекстXML);
	
	Попытка
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(РаботаСXMLЕГАИС.КорневоеПространствоИмен(), "Documents").Тип());
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВходящиеДанные.АдресЗапроса);
		
		ПредставлениеОшибки = РаботаСXMLЕГАИС.ПредставлениеОшибкиXDTO(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Попытка
			
			ОбъектXDTO = РаботаСXMLЕГАИС.ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				РаботаСXMLИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ВходящиеДанные.ТекстXML),
				РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(РаботаСXMLЕГАИС.КорневоеПространствоИмен(), "Documents", Неопределено));
			
		Исключение
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения документа из ЕГАИС возникла ошибка.
				           |Текст ошибки: %ТекстОшибки%'"),
				РасширеннаяИнформацияОбОшибке(ПредставлениеОшибки, ПодробноеПредставлениеОшибки),
				ВозвращаемоеЗначение);
			
		КонецПопытки;
		
	КонецПопытки;
	
	Попытка
		
		Операция              = Неопределено;
		ФорматОбмена          = Неопределено;
		ТипЕГАИС              = Неопределено;
		ДокументыПоТипамЕГАИС = РаботаСXMLИС.ОбъектXDTOВСтруктуру(ОбъектXDTO.Document);
		Объект                = Неопределено;
		
		Для Каждого КлючИЗначение Из ДокументыПоТипамЕГАИС Цикл
			Если КлючИЗначение.Значение <> Неопределено Тогда
				ТипЕГАИС                  = КлючИЗначение.Ключ;
				Объект                    = ДокументыПоТипамЕГАИС[ТипЕГАИС];
				ВидДокументаИФорматОбмена = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(
					ТипЕГАИС, ТаблицаСоответствияДокументовТипамЕГАИС);
				Операция                  = ВидДокументаИФорматОбмена.ВидДокументаЕГАИС;
				ФорматОбмена              = ВидДокументаИФорматОбмена.ФорматОбмена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("ИдентификаторЗапроса", ВходящиеДанные.ИдентификаторЗапроса);
		СтруктураРезультата.Вставить("АдресЗапроса",         ВходящиеДанные.АдресЗапроса);
		СтруктураРезультата.Вставить("ТекстXML",             ВходящиеДанные.ТекстXML);
		
		СтруктураРезультата.Вставить("ТипЕГАИС",     ТипЕГАИС);
		СтруктураРезультата.Вставить("Операция",     Операция);
		СтруктураРезультата.Вставить("ФорматОбмена", ФорматОбмена);
		СтруктураРезультата.Вставить("Объект",       Объект);
		
		ВозвращаемоеЗначение.Результат = СтруктураРезультата;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения документа из ЕГАИС возникла ошибка:
			           |Текст ошибки: %ТекстОшибки%'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает объект XDTO организации, которую требуется загрузить.
// 
// Параметры:
//  ДанныеОрганизации - ОбъектXDTO - Данные организации
// 
// Возвращаемое значение:
//  ОбъектXDTO - Данные организации
Функция ДанныеОрганизации(ДанныеОрганизации) Экспорт
	
	Объект = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "UL") И ДанныеОрганизации.UL <> Неопределено Тогда
		Объект = ДанныеОрганизации.UL;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FL") И ДанныеОрганизации.FL <> Неопределено Тогда
		Объект = ДанныеОрганизации.FL;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FO") И ДанныеОрганизации.FO <> Неопределено Тогда
		Объект = ДанныеОрганизации.FO;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "TS") И ДанныеОрганизации.TS <> Неопределено Тогда
		Объект = ДанныеОрганизации.TS;
	Иначе
		Объект = ДанныеОрганизации;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

//Загружает организацию ЕГАИС в базу.
//  * При загрузке запросом из классификатора - безусловно.
//  * При загрузке в составе пакета (например ТТН) - создание новых элементов и обновление контрагентов
//    (флаг "Соответствует организации" установлен в Ложь).
//
//Параметры:
//   ДанныеОрганизацииXDTO - ОбъектXDTO - данные классификатора организаций ЕГАИС
//   ЗагрузкаИзКлассификатора - Булево - признак запроса данных из классификатора
//
//Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС - найденный или загруженный элемент классификатора.
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ЗагрузкаИзКлассификатора = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизацииXDTO, "OrgInfoV2") Тогда
		ТипОрганизации = ТипОрганизации(ДанныеОрганизацииXDTO.OrgInfoV2);
		ЗагружаемаяОрганизацияXDTO = ДанныеОрганизации(ДанныеОрганизацииXDTO.OrgInfoV2);
	Иначе
		ТипОрганизации = ТипОрганизации(ДанныеОрганизацииXDTO);
		ЗагружаемаяОрганизацияXDTO = ДанныеОрганизации(ДанныеОрганизацииXDTO);
	КонецЕсли;
	
	НайденнаяОрганизация = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ЗагружаемаяОрганизацияXDTO.ClientRegId);
	
	Если Не ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
		СправочникОбъект = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
		СправочникОбъект.Код = ЗагружаемаяОрганизацияXDTO.ClientRegId;
	Иначе
		СправочникОбъект = НайденнаяОрганизация.ПолучитьОбъект();
	КонецЕсли;
	
	ТребуетсяОбновлениеЭлемента = ЗагрузкаИзКлассификатора
		Или СправочникОбъект.ЭтоНовый()
		Или Не СправочникОбъект.СоответствуетОрганизации;
	Если Не ТребуетсяОбновлениеЭлемента Тогда
		Возврат СправочникОбъект.Ссылка;
	КонецЕсли;
	
	СправочникОбъект.Наименование = ?(ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.ShortName), ЗагружаемаяОрганизацияXDTO.FullName, ЗагружаемаяОрганизацияXDTO.ShortName);
	
	Если ЗначениеЗаполнено(ЗагружаемаяОрганизацияXDTO.FullName) Тогда
		СправочникОбъект.НаименованиеПолное = ЗагружаемаяОрганизацияXDTO.FullName;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипОрганизации) Тогда
		СправочникОбъект.ТипОрганизации = ТипОрганизации;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "INN") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.INN) Тогда
			СправочникОбъект.ИНН = СокрЛП(ЗагружаемаяОрганизацияXDTO.INN);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "KPP") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.KPP) Тогда
			СправочникОбъект.КПП = СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "TSNUM") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.TSNUM) Тогда
			СправочникОбъект.ИдентификаторОрганизацииТС = СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM);
		КонецЕсли;
	КонецЕсли;
	
	КодСтраны = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Country);
	Если КодСтраны <> 0 Тогда
		СправочникОбъект.КодСтраны = КодСтраны;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO.address, "RegionCode") Тогда
		КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.RegionCode);
		Если КодРегиона <> 0 Тогда
			СправочникОбъект.КодРегиона = КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO.address, "Index") Тогда
		ПочтовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Index);
		Если ПочтовыйИндекс <> 0 Тогда
			СправочникОбъект.ПочтовыйИндекс = ПочтовыйИндекс;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемаяОрганизацияXDTO.address.description) Тогда
		СправочникОбъект.ПредставлениеАдреса = СокрЛП(ЗагружаемаяОрганизацияXDTO.address.description);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизацииXDTO, "VersionWB") Тогда
		Если ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill_v4") Тогда
			СправочникОбъект.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4;
		Иначе
			СправочникОбъект.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
		КонецЕсли;
	КонецЕсли;
	
	СправочникОбъект.Адрес = "";
	
	Если Не ЗначениеЗаполнено(СправочникОбъект.ТипОрганизации) Тогда
		Если НЕ ПустаяСтрока(СправочникОбъект.ИдентификаторОрганизацииТС) Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		ИначеЕсли ПустаяСтрока(СправочникОбъект.ИНН) И ПустаяСтрока(СправочникОбъект.КПП) Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ПустаяСтрока(СправочникОбъект.КПП) И СтрДлина(СокрЛП(СправочникОбъект.ИНН)) = 12 Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		Иначе
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		КонецЕсли;
	КонецЕсли;
	
	Если СправочникОбъект.Модифицированность() Тогда
		СопоставлениеОбъектовЕГАИСПереопределяемый.ПриЗагрузкеОрганизации(СправочникОбъект);
		СправочникОбъект.Записать();
	КонецЕсли;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Возвращает данные последнего исходящего запроса по идентификатору.
//
// Параметры:
//  ИдентификаторЗапроса - Строка - идентификатор исходящего запроса.
//
// Возвращаемое значение:
//   Структура - данные последнего исходящего запроса. Неопределено - если запрос не найден.
//
Функция НайтиОбъектПоИдентификаторуЗапроса(ИдентификаторЗапроса, ИскатьДокументОснование = Истина) Экспорт
	
	ПараметрыИдентификатораЗапросаV4 = ПараметрыИдентификатораЗапросаV4(ИдентификаторЗапроса);
	
	ИдентификаторыЗапроса = Новый Массив;
	ИдентификаторыЗапроса.Добавить(ИдентификаторЗапроса);
	Если ПараметрыИдентификатораЗапросаV4 <> Неопределено Тогда
		ИдентификаторыЗапроса.Добавить(ПараметрыИдентификатораЗапросаV4.Идентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколОбмена.Документ     КАК Ссылка,
	|	ПротоколОбмена.Операция     КАК Операция,
	|	ПротоколОбмена.Ссылка       КАК ИсходящееСообщение,
	|	ПротоколОбмена.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
	|ГДЕ
	|	ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ПротоколОбмена.ИдентификаторЗапроса В (&ИдентификаторыЗапроса)");
	
	Запрос.УстановитьПараметр("ИдентификаторыЗапроса", ИдентификаторыЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДокументОснование = Неопределено;
		Если ИскатьДокументОснование
			И ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МетаданныеДокумента = Выборка.Ссылка.Метаданные();
			Если Метаданные.Документы.Содержит(МетаданныеДокумента)
				И МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ДокументОснование");
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",             Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("ДокументОснование",  ДокументОснование);
		ВозвращаемоеЗначение.Вставить("Операция",           Выборка.Операция);
		ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Выборка.ИсходящееСообщение);
		ВозвращаемоеЗначение.Вставить("ФорматОбмена",       Выборка.ФорматОбмена);
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПараметрыИдентификатораЗапросаV4(ИдентификаторЗапроса) Экспорт
	
	Если СтрНайти(ИдентификаторЗапроса, "-") = 13 И СтрДлина(Сред(ИдентификаторЗапроса, 14)) = 36 Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("КодФСРАР",      Лев(ИдентификаторЗапроса, 12));
		ВозвращаемоеЗначение.Вставить("Идентификатор", Сред(ИдентификаторЗапроса, 14));
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИсходящееСообщение(ИдентификаторЗапроса) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколОбмена.СообщениеОснование КАК Ссылка
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
	|ГДЕ
	|	ПротоколОбмена.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)");
	
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Загружает список организаций ЕГАИС в базу.
//
// Параметры:
//  ДанныеДокумента - см. ОбработатьОтветНаЗапросПолученияДокумента
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация ЕГАИС
//  ДополнительныеПараметры - Неопределено, Произвольный - дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросДанныхОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	
	Если ИсходящееСообщение = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке ответа на запрос данных организации:
			           |Не найден исходящий запрос с идентификатором %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Для Каждого ДанныеОрганизацииXDTO Из ДанныеДокумента.Объект.Clients.Client Цикл
		Организация = ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, Истина);
	КонецЦикла;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             Неопределено);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные организации ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Организация;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = Неопределено;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Рассчитать статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЕГАИС.
//  ЕстьЗаписиВПротоколеОбмена - Булево - Признак наличия записей в протоколе обмена (Возвращаемый параметр).
// 
// Возвращаемое значение:
//  РегистрСведенийНаборЗаписей.СтатусыДокументовЕГАИС - Набор записей регистра сведений СтатусыДокументовЕГАИС.
//
Функция РассчитатьСтатус(ДокументСсылка, ЕстьЗаписиВПротоколеОбмена = Неопределено, ЭтоОбновлениеИБ = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЕГАИСПрисоединенныеФайлы.Операция КАК Операция,
	|	ЕГАИСПрисоединенныеФайлы.ТипСообщения КАК ТипСообщения,
	|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ЕГАИСПрисоединенныеФайлы.ОперацияКвитанции КАК ОперацияКвитанции,
	|	ВЫБОР
	|		КОГДА ОчередьПередачиДанныхЕГАИС.Сообщение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР
	|		КОГДА ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|				И ОтветНаПередачуДанных.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПереданВУТМ,
	|	ВЫБОР
	|		КОГДА ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|			ТОГДА ОтветНаПередачуДанных.СтатусОбработки
	|		ИНАЧЕ ЕГАИСПрисоединенныеФайлы.СтатусОбработки
	|	КОНЕЦ КАК СтатусОбработки,
	|	ВЫБОР
	|		КОГДА ЕГАИСПрисоединенныеФайлы.Операция В (&Квитанции)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКвитанция
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ОтветНаПередачуДанных
	|		ПО ЕГАИСПрисоединенныеФайлы.Ссылка = ОтветНаПередачуДанных.СообщениеОснование
	|			И ЕГАИСПрисоединенныеФайлы.Операция = ОтветНаПередачуДанных.Операция
	|			И (ОтветНаПередачуДанных.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК ОчередьПередачиДанныхЕГАИС
	|		ПО (ОчередьПередачиДанныхЕГАИС.Сообщение = ЕГАИСПрисоединенныеФайлы.Ссылка)
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &ДокументСсылка
	|	И ВЫБОР
	|			КОГДА ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
	|					И ЕГАИСПрисоединенныеФайлы.СообщениеОснование <> ЗНАЧЕНИЕ(Справочник.ЕГАИСПрисоединенныеФайлы.ПустаяСсылка)
	|					И НЕ ЕГАИСПрисоединенныеФайлы.Операция В (&Квитанции)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания ВОЗР,
	|	ВЫБОР
	|		КОГДА ЕГАИСПрисоединенныеФайлы.Операция В (ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС))
	|			ТОГДА 3
	|		КОГДА ЕГАИСПрисоединенныеФайлы.Операция В (ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС))
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ УБЫВ
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Квитанции = Новый Массив;
	Квитанции.Добавить(Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС);
	Квитанции.Добавить(Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС);
	Запрос.УстановитьПараметр("Квитанции", Квитанции);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументовЕГАИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыДокументовЕГАИС.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ЕстьОшибки = Ложь;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					Если Не ЭтоОбновлениеИБ Тогда
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
							ДокументСсылка,
							Выборка.Операция);
					Иначе
						Попытка
							ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
								ДокументСсылка,
								Выборка.Операция);
						Исключение
							ЕстьОшибки = Истина;
							Прервать;
						КонецПопытки;
					КонецЕсли;
					
				ИначеЕсли Выборка.ПереданВУТМ Тогда
					
					Если Не ЭтоОбновлениеИБ Тогда
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
							ДокументСсылка,
							Выборка.Операция, Выборка.СтатусОбработки);
					Иначе
						Попытка
							ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
								ДокументСсылка,
								Выборка.Операция, Выборка.СтатусОбработки);
						Исключение
							ЕстьОшибки = Истина;
							Прервать;
						КонецПопытки;
					КонецЕсли;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Не ЭтоОбновлениеИБ Тогда
					ПараметрыОбновления = ПараметрыОбновленияПослеПолученияДанных(
						ЗаписьНабора, МенеджерОбъекта, ДокументСсылка, Выборка.Операция,
						Выборка.ЭтоКвитанция, Выборка.ОперацияКвитанции, Выборка.СтатусОбработки);
				Иначе
					Попытка
						ПараметрыОбновления = ПараметрыОбновленияПослеПолученияДанных(
							ЗаписьНабора, МенеджерОбъекта, ДокументСсылка, Выборка.Операция,
							Выборка.ЭтоКвитанция, Выборка.ОперацияКвитанции, Выборка.СтатусОбработки);
					Исключение
						ЕстьОшибки = Истина;
						Прервать;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыОбновления <> Неопределено Тогда
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
			КонецЕсли;
			
		КонецЦикла;
		
		ЕстьЗаписиВПротоколеОбмена = Не ЕстьОшибки;
		
		Если ЕстьОшибки Тогда
			
			НаборЗаписей.Очистить();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
			
		КонецЕсли;
		
	Иначе
		
		ЕстьЗаписиВПротоколеОбмена = Ложь;
		
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Возвращает параметры обновления после получения данных.
//
// Параметры:
//  ЗаписьНабора - Структура - Запись набора.
//  МенеджерОбъекта - ДокументМенеджер - Менеджер документа.
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//  ЭтоКвитанция - Булево - Признак квитанции.
//  ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция квитанции.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция ПараметрыОбновленияПослеПолученияДанных(ЗаписьНабора, МенеджерОбъекта, ДокументСсылка, Операция,
	ЭтоКвитанция = Ложь, ОперацияКвитанции = Неопределено, СтатусОбработки = Неопределено) Экспорт
	
	ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ЗначенияПоУмолчанию(ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ТекущееСостояние, ЗаписьНабора);
	
	Если ЭтоКвитанция Тогда
		ДополнительныеПараметры = ПараметрыОбновленияСтатуса();
		ДополнительныеПараметры.ОперацияКвитанции = ОперацияКвитанции;
		ДополнительныеПараметры.СтатусОбработки   = СтатусОбработки;
		ДополнительныеПараметры.ТекущееСостояние  = ТекущееСостояние;
	Иначе
		ДополнительныеПараметры = ПараметрыОбновленияСтатуса();
		ДополнительныеПараметры.ТекущееСостояние  = ТекущееСостояние;
	КонецЕсли;
	
	ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
		ДокументСсылка,
		Операция, ДополнительныеПараметры);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Возвращает тип организации ЕГАИС.
//
// Параметры:
//  ДанныеОрганизации - ОбъектXDTO - Данные организации ЕГАИС.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОрганизацийЕГАИС - Тип организации ЕГАИС.
//
Функция ТипОрганизации(ДанныеОрганизации)
	
	ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "UL") И ДанныеОрганизации.UL <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FL") И ДанныеОрганизации.FL <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FO") И ДанныеОрганизации.FO <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "TS") И ДанныеОрганизации.TS <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
	КонецЕсли;
	
	Возврат ТипОрганизации;
	
КонецФункции

// Дополнить параметры обновления статуса.
//
// Параметры:
//  ПараметрыОбновленияСтатуса - см. ПараметрыОбновленияСтатуса
// 
// Возвращаемое значение:
//  Структура - см. ПараметрыОбновленияСтатуса
//
Функция ДополнитьПараметрыОбновленияСтатуса(ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Если ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОбновленияСтатуса.ИдентификаторЗапроса)
			И Не ЗначениеЗаполнено(ПараметрыОбновленияСтатуса.ФорматОбмена) Тогда
			РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(ПараметрыОбновленияСтатуса.ИдентификаторЗапроса);
			ПараметрыОбновленияСтатуса.ФорматОбмена = РезультатПоиска.ФорматОбмена;
		КонецЕсли;
		
	Иначе
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		
	КонецЕсли;
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

#Область РаботаСОшибками

Функция РасширеннаяИнформацияОбОшибке(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки) Экспорт
	
	РасширеннаяИнформацияОбОшибке = Новый Структура;
	РасширеннаяИнформацияОбОшибке.Вставить("КраткоеПредставлениеОшибки",  КраткоеПредставлениеОшибки);
	РасширеннаяИнформацияОбОшибке.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	
	Возврат РасширеннаяИнформацияОбОшибке;
	
КонецФункции

Процедура ОбработатьОшибку(ТекстОшибки, ИнформацияОбОшибке, ВозвращаемоеЗначение) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда
		КраткоеПредставлениеОшибки   = ИнформацияОбОшибке.КраткоеПредставлениеОшибки;
		ПодробноеПредставлениеОшибки = ИнформацияОбОшибке.ПодробноеПредставлениеОшибки;
	Иначе
		КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", ПодробноеПредставлениеОшибки));
	
	ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
	
	ПодготовленныйТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", КраткоеПредставлениеОшибки);
	
	Если Не ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = ПодготовленныйТекстОшибки;
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
		                                 + Символы.ПС
		                                 + ПодготовленныйТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Сообщать об ошибках при загрузке данных.
// 
// Возвращаемое значение:
//  Булево - Необходимость сообщения об ошибках при загрузке данных.
//
Функция СообщатьОбОшибкахПриЗагрузкеДанных() Экспорт
	
	СообщатьОбОшибкахПриЗагрузкеДанных = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РежимОтладкиЕГАИС", "СообщатьОбОшибкахПриЗагрузкеДанных", Истина);
		
	Если СообщатьОбОшибкахПриЗагрузкеДанных = Ложь Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает структура данных для удаления запросов из УТМ.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//  АдресЗапроса - Строка - Адрес запроса.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * АдресЗапроса - Строка - Адрес запроса.
//
Функция СлужебныеДанные(ОрганизацияЕГАИС, Операция, АдресЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	ВозвращаемоеЗначение.Вставить("Операция",         Операция);
	ВозвращаемоеЗначение.Вставить("АдресЗапроса",     АдресЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти