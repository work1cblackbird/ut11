// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Открывает настройку отражения в учете.
//
// Параметры:
//  ПараметрыФормы - см. НовыеПараметрыФормыНастройкиОтраженияВУчете
//  ПараметрыОткрытияФормы - см. ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД.ПараметрыОткрытияФормы
//
Процедура ОткрытьНастройкуОтраженияВУчете(ПараметрыФормы, ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		ПараметрыОткрытияФормы = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	КонецЕсли;
	Если ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура") Тогда
		ПараметрыОткрытияФормы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ОбщегоНазначенияБЭДКлиент.ОткрытьФормуБЭД(
		"РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.НастройкиОтраженияДокументовВУчете",
		ПараметрыФормы, ПараметрыОткрытияФормы, Истина);
	
КонецПроцедуры

// Возвращает параметры формы настройки отражения в учете.
// 
// Возвращаемое значение:
// 	Структура:
// * Организация - Неопределено,ОпределяемыйТип.Организация
// * Контрагент - Неопределено,ОпределяемыйТип.КонтрагентБЭД
// * ИдентификаторОрганизации - Строка
// * ИдентификаторКонтрагента - Строка
// * СоздатьНовыйПоИдентификаторам - Неопределено,Булево
// * Создание - Булево
Функция НовыеПараметрыФормыНастройкиОтраженияВУчете() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Неопределено);
	ПараметрыОткрытия.Вставить("Контрагент", Неопределено);
	ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента", "");
	ПараметрыОткрытия.Вставить("ИдентификаторОрганизации", "");
	ПараметрыОткрытия.Вставить("СоздатьНовыйПоИдентификаторам", Неопределено);
	ПараметрыОткрытия.Вставить("Создание", Ложь);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Открывает форму списка настроек отражения в учете.
// 
// Параметры:
// 	Контрагент - ОпределяемыйТип.КонтрагентБЭД
Процедура ОткрытьНастройкиОтраженияВУчете(Контрагент) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	
	ОткрытьФорму("РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Форма.НастройкиОтраженияВходящихДокументов",
		ПараметрыФормы,, Контрагент,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Отражение

// Возвращаемое значение:
//  См. ОтражениеВУчетеЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Функция НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете() Экспорт
	Возврат ОтражениеВУчетеЭДОКлиентСервер.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
КонецФункции

// Выполняет отражение в учете документа.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете.
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  СпособОбработки - Строка - Способ обработки.
//
Процедура НачатьОтражениеДокументаВУчете(ОповещениеОЗавершении, ДанныеЭлектронногоДокумента, ОбъектыУчета, СпособОбработки = Неопределено) Экспорт
	
	НоменклатураБезСопоставления = ОтражениеВУчетеЭДОВызовСервера.НоменклатураЭлектронногоДокументаБезСопоставления(
		ДанныеЭлектронногоДокумента);
	
	Если ЗначениеЗаполнено(НоменклатураБезСопоставления) Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ДанныеЭлектронногоДокумента", ДанныеЭлектронногоДокумента);
		ПараметрыОповещения.Вставить("ОбъектыУчета", ОбъектыУчета);
		ПараметрыОповещения.Вставить("СпособОбработки", СпособОбработки);
		
		ОповещениеОкончанияСопоставления = Новый ОписаниеОповещения("ПослеЗавершенияСопоставленияНоменклатуры",
			ЭтотОбъект, ПараметрыОповещения);
		
		Настройки = Новый Структура("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(
			НоменклатураБезСопоставления, Настройки, ОповещениеОкончанияСопоставления);
	Иначе
		ОтразитьВУчетеЭлектронныйДокумент(ОповещениеОЗавершении, ДанныеЭлектронногоДокумента, ОбъектыУчета, СпособОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  СпособОбработки - Строка
Процедура ПерезаполнитьДокумент(ОбъектУчета, ЭлектронныйДокумент = Неопределено, СпособОбработки = "") Экспорт	
	
	ОчиститьСообщения();
	
	МассивСсылок = ОбщегоНазначенияБЭДКлиент.МассивПараметров(ОбъектУчета);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПараметрыЗаполнения.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыЗаполнения.Вставить("СпособОбработки", СпособОбработки);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	Результат = ОтражениеВУчетеЭДОВызовСервера.ПерезаполнитьДокумент(ПараметрыЗаполнения, КонтекстДиагностики);
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	
	Если Результат.Отказ Тогда
		
		Если Результат.НетПраваОбработкиЭД Тогда
			ОбработкаНеисправностейБЭДКлиент.СообщитьПользователюОНарушенииПравДоступа();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Результат.МассивДокументов.Количество() > 0 Тогда
		
		Оповестить("ОбновитьДокументИБПослеЗаполнения", Результат.МассивДокументов);
		
		Если Результат.МассивДокументов.Количество() = 1 Тогда
			ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		Иначе
			ТекстСостоянияВывод = НСтр("ru = 'Документы перезаполнены (%1).'");
			ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, 
				Строка(Результат.МассивДокументов.Количество()));
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

// Параметры:
//  Получатель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Получатель
//  Отправитель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Отправитель
//  ИдентификаторПолучателя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
//  ИдентификаторОтправителя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
//  Форма - ФормаКлиентскогоПриложения
//  Оповещение - ОписаниеОповещения
Процедура УдалитьНастройкуОтраженияВУчете(Получатель, Отправитель, ИдентификаторПолучателя,
	ИдентификаторОтправителя, Форма, Оповещение) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Получатель", Получатель);
	Контекст.Вставить("Отправитель", Отправитель);
	Контекст.Вставить("ИдентификаторПолучателя", ИдентификаторПолучателя);
	Контекст.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("Оповещение", Оповещение);
	Описание = Новый ОписаниеОповещения("УдалитьНастройкуОтраженияВУчетеПослеВопроса", ЭтотОбъект, Контекст);
	
	ТекстВопроса = НСтр("ru = 'Сейчас будет удалена настройка отражения в учете.
                         |Продолжить?'");
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Параметры:
//  Ответ - Неопределено
//        - КодВозвратаДиалога
//  Контекст - Структура:
//  * Получатель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Получатель
//  * Отправитель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Отправитель
//  * ИдентификаторПолучателя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
//  * ИдентификаторОтправителя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
//  * Форма - ФормаКлиентскогоПриложения
//  * Оповещение - ОписаниеОповещения
//
Процедура УдалитьНастройкуОтраженияВУчетеПослеВопроса(Ответ, Контекст) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ОповеститьОЗавершенииУдаленияНастройкиОтраженияВУчете(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ОтражениеВУчетеЭДОВызовСервера.НачатьУдалениеНастроекОтраженияВУчете(
		Контекст.Форма.УникальныйИдентификатор, Контекст.Получатель, Контекст.Отправитель,
		Контекст.ИдентификаторПолучателя, Контекст.ИдентификаторОтправителя);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Контекст.Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьУдалениеНастройкиОтраженияВУчете", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
		
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - Неопределено
//                     - см. ОтражениеВУчетеЭДОВызовСервера.НачатьУдалениеНастроекОтраженияВУчете
//  Контекст - см. УдалитьНастройкуОтраженияВУчетеПослеВопроса.Контекст
Процедура ЗавершитьУдалениеНастройкиОтраженияВУчете(ДлительнаяОперация, Контекст) Экспорт
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отражения в учете произошла ошибка.'");
		
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(НСтр("ru = 'Удаление настройки отражения в учете ЭДО'"), 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ДлительнаяОперация.ПодробноеПредставлениеОшибки, ТекстСообщения);
		
		ОповеститьОЗавершенииУдаленияНастройкиОтраженияВУчете(Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	РезультатУдаления = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	Если Не РезультатУдаления Тогда
		ТекстСообщения = НСтр("ru = 'Во время удаления настройки отражения в учете произошла ошибка.
                               |Подробнее см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ОповеститьОЗавершенииУдаленияНастройкиОтраженияВУчете(РезультатУдаления, Контекст);
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено
//            - Булево
//  Контекст - см. УдалитьНастройкуОтраженияВУчетеПослеВопроса.Контекст
Процедура ОповеститьОЗавершенииУдаленияНастройкиОтраженияВУчете(Результат, Контекст)
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Отражение

// Параметры:
//  Результат - Неопределено
//            - Массив из Структура:
//  * НоменклатураКонтрагента - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//  * НоменклатураИБ - см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы
//  * КоличествоВариантовНоменклатуры - Число
//  * ПоискВариантовНеТребуется - Булево
//  * ПодсказкаНайденныхВариантовХарактеристики - Строка
//  * ПодсказкаНайденныхВариантовУпаковки - Строка
//  * ПодсказкаНайденныхВариантовНоменклатуры - Строка
//  * ИспользоватьХарактеристики - Булево
//  ДополнительныеПараметры - Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете.
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * СпособОбработки - Строка - Способ обработки.
//
Процедура ПослеЗавершенияСопоставленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	НоменклатураБезСопоставления = ОтражениеВУчетеЭДОВызовСервера.НоменклатураЭлектронногоДокументаБезСопоставления(
		ДополнительныеПараметры.ДанныеЭлектронногоДокумента);
	
	Если ЗначениеЗаполнено(НоменклатураБезСопоставления) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru='Не сопоставлена номенклатура. Документ загружен не будет.'"));
	Иначе
		ОтразитьВУчетеЭлектронныйДокумент(ДополнительныеПараметры.ОповещениеОЗавершении,
			ДополнительныеПараметры.ДанныеЭлектронногоДокумента, ДополнительныеПараметры.ОбъектыУчета,
			ДополнительныеПараметры.СпособОбработки);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ДанныеЭлектронногоДокумента - см. НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете.
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  СпособОбработки - Строка - Способ обработки.
Процедура ОтразитьВУчетеЭлектронныйДокумент(ОповещениеОЗавершении, ДанныеЭлектронногоДокумента, ОбъектыУчета, СпособОбработки = Неопределено) Экспорт
	
	ОтражениеВУчетеЭДОВызовСервера.ЗаполнитьДокументУчета(ДанныеЭлектронногоДокумента, СпособОбработки, ОбъектыУчета);
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ОбъектыУчета);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
