// @strict-types

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегламентныхЗаданий

// Выполняет обработку запросов в очереди.
//
Процедура ОбработатьОчередьЗапросовВРеестрМЧД() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПометкаНаУдалениеТранспортныхКонтейнеровЭДО);
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьЗапросовВРеестрМЧД.Доверенность КАК Доверенность,
		|	ОчередьЗапросовВРеестрМЧД.ВидЗапроса КАК ВидЗапроса,
		|	ОчередьЗапросовВРеестрМЧД.ДатаСоздания КАК ДатаСоздания,
		|	ОчередьЗапросовВРеестрМЧД.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки,
		|	ОчередьЗапросовВРеестрМЧД.НомерПопытки КАК НомерПопытки
		|ПОМЕСТИТЬ ОчередьЗапросов
		|ИЗ
		|	РегистрСведений.ОчередьЗапросовВРеестрМЧДЭДО КАК ОчередьЗапросовВРеестрМЧД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОчередьЗапросов.Доверенность КАК Доверенность,
		|	ОчередьЗапросов.ВидЗапроса КАК ВидЗапроса,
		|	ОчередьЗапросов.ДатаСоздания КАК ДатаСоздания,
		|	ОчередьЗапросов.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки,
		|	ОчередьЗапросов.НомерПопытки КАК НомерПопытки,
		|	МЧД003.ДатаВыдачи КАК ДатаВыдачи,
		|	МЧД003.СрокДействия КАК ДатаОкончания,
		|	МЧД003.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1) КАК Отозвана,
		|	МЧД003.ДатаПрекращения КАК ДатаОтзыва,
		|	МЧД003.Верна КАК Верна,
		|	МЧД003.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МЧД003.НомерДоверенности КАК НомерДоверенности
		|ИЗ
		|	ОчередьЗапросов КАК ОчередьЗапросов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003 КАК МЧД003
		|		ПО ОчередьЗапросов.Доверенность = МЧД003.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьЗапросов.Доверенность КАК Доверенность,
		|	ОчередьЗапросов.ВидЗапроса КАК ВидЗапроса,
		|	ОчередьЗапросов.ДатаСоздания КАК ДатаСоздания,
		|	ОчередьЗапросов.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки,
		|	ОчередьЗапросов.НомерПопытки КАК НомерПопытки,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиОрганизаций.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва КАК ДатаОтзыва,
		|	МашиночитаемыеДоверенностиОрганизаций.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности
		|ИЗ
		|	ОчередьЗапросов КАК ОчередьЗапросов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|		ПО ОчередьЗапросов.Доверенность = МашиночитаемыеДоверенностиОрганизаций.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьЗапросов.Доверенность КАК Доверенность,
		|	ОчередьЗапросов.ВидЗапроса КАК ВидЗапроса,
		|	ОчередьЗапросов.ДатаСоздания КАК ДатаСоздания,
		|	ОчередьЗапросов.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки,
		|	ОчередьЗапросов.НомерПопытки КАК НомерПопытки,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва КАК ДатаОтзыва,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности КАК НомерДоверенности
		|ИЗ
		|	ОчередьЗапросов КАК ОчередьЗапросов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|		ПО ОчередьЗапросов.Доверенность = МашиночитаемыеДоверенностиКонтрагентов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МЧД = ВыборкаДетальныеЗаписи.Доверенность;
		
		СвойстваДоверенности = МашиночитаемыеДоверенности.НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, ВыборкаДетальныеЗаписи);
		
		Действует = 
			МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ТекущаяДатаСеанса());
		
		Если Не Действует
			И Не СвойстваДоверенности.СтатусВРеестреФНС = 
				Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв Тогда
			МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
			Продолжить;
		КонецЕсли;
		
		ДанныеФайлаДоверенностиИПодписи = МашиночитаемыеДоверенности.ДанныеФайлаДоверенностиИПодписи(
			ВыборкаДетальныеЗаписи.Доверенность);

		ПодписанныеДанные = ДанныеФайлаДоверенностиИПодписи.ДанныеФайла;
		Подпись = ДанныеФайлаДоверенностиИПодписи.ДанныеПодписи;
		
		Если ВыборкаДетальныеЗаписи.ВидЗапроса = 
			МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Регистрация Тогда
				
			Если ЗначениеЗаполнено(СвойстваДоверенности.СтатусВРеестреФНС) 
				И Не СвойстваДоверенности.СтатусВРеестреФНС = 
					Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации Тогда
				МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
				Продолжить;
			КонецЕсли;
			
			РезультатРегистрации = 
				МашиночитаемыеДоверенности.ЗарегистрироватьМЧД(ПодписанныеДанные, Подпись, "", "", МЧД);
			
			Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда // Успешная регистрация
				МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
			Иначе
				
				Если ЗначениеЗаполнено(РезультатРегистрации.ОписаниеОшибкиРегистрации) Тогда
					
					МЧДОбъект = МЧД.ПолучитьОбъект();
					МЧДОбъект.ОписаниеОшибкиРегистрации = РезультатРегистрации.ОписаниеОшибкиРегистрации;
					МЧДОбъект.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации;
					МЧДОбъект.Записать();
					
					МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
				Иначе
					МашиночитаемыеДоверенности.ДобавитьВОчередьЗапросовВРеестрМЧД(МЧД, ВыборкаДетальныеЗаписи.ВидЗапроса);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.ВидЗапроса = 
			МашиночитаемыеДоверенностиКлиентСервер.ВидыЗапросовКРеестру().Отзыв Тогда
			
			Если МашиночитаемыеДоверенности.ЭтоМЧД003(МЧД) Тогда
				СведенияДляОтзываМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД,
					"ПодписиЗаявленияНаОтзыв, ФайлЗаявленияНаОтзыв");
					
				ФайлЗаявленияНаОтзыв = СведенияДляОтзываМЧД.ФайлЗаявленияНаОтзыв.Получить();
				
				ПодписиЗаявленияНаОтзыв = СведенияДляОтзываМЧД.ПодписиЗаявленияНаОтзыв.Выбрать();
				Если ПодписиЗаявленияНаОтзыв.Следующий() Тогда
					СертификатНаОтзыв = ПодписиЗаявленияНаОтзыв.Сертификат.Получить();
					ПодписьНаОтзыв = ПодписиЗаявленияНаОтзыв.Подпись.Получить();
				КонецЕсли;
			Иначе
				СведенияДляОтзываМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД,
					"ЭлектроннаяПодписьЗаявленияНаОтзыв, ФайлЗаявленияНаОтзыв");
				
				СертификатНаОтзыв = Неопределено;
				ФайлЗаявленияНаОтзыв = СведенияДляОтзываМЧД.ФайлЗаявленияНаОтзыв.Получить();
				ПодписьНаОтзыв = СведенияДляОтзываМЧД.ЭлектроннаяПодписьЗаявленияНаОтзыв.Получить();
			КонецЕсли;
			
			ИмяФайлаЗаявленияНаОтзыв = "revoke.xml";
			РезультатРегистрации = МашиночитаемыеДоверенности.ОтменитьМЧД(
				ИмяФайлаЗаявленияНаОтзыв, ФайлЗаявленияНаОтзыв, ПодписьНаОтзыв, СертификатНаОтзыв, , , МЧД);
				
			Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) Тогда // Успешный отзыв
				
				СтатусВРеестреФНС = МашиночитаемыеДоверенности.НовыйСтатусВРеестреФНС();
				СтатусВРеестреФНС.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано;
				СтатусВРеестреФНС.ДатаОтзыва = ЭлектроннаяПодпись.ДатаПодписания(ПодписьНаОтзыв);
				МашиночитаемыеДоверенности.СправочникМЧД(МЧД).УстановитьСтатус(МЧД, СтатусВРеестреФНС);
				
				МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
			ИначеЕсли МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьУжеИстекла(
				РезультатРегистрации.ОписаниеОшибкиРегистрации) Тогда
					
				ДанныеДляПроверкиВРеестреФНС = МашиночитаемыеДоверенностиКлиентСервер.ДанныеДляПроверкиВРеестреФНС();
				ДанныеДляПроверкиВРеестреФНС.ДатаОтзыва = ВыборкаДетальныеЗаписи.ДатаОтзыва;
				ДанныеДляПроверкиВРеестреФНС.НомерДоверенности = ВыборкаДетальныеЗаписи.НомерДоверенности;
				ДанныеДляПроверкиВРеестреФНС.СтатусВРеестреФНС = ВыборкаДетальныеЗаписи.СтатусВРеестреФНС;
				
				РезультатОбновленияСтатуса = 
					МашиночитаемыеДоверенности.ОбновитьСтатусМЧДИзРеестраФНС(ДанныеДляПроверкиВРеестреФНС);
				Если ЗначениеЗаполнено(РезультатОбновленияСтатуса) Тогда
					СтатусВРеестреФНС = МашиночитаемыеДоверенности.НовыйСтатусВРеестреФНС();
					СтатусВРеестреФНС.СтатусВРеестреФНС = РезультатОбновленияСтатуса.СтатусВРеестреФНС;
					СтатусВРеестреФНС.ДатаОтзыва = РезультатОбновленияСтатуса.ДатаОтзыва;
					
					МашиночитаемыеДоверенности.СправочникМЧД(МЧД).УстановитьСтатус(МЧД, СтатусВРеестреФНС);
					МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
				КонецЕсли;
			
			Иначе
				Если ЗначениеЗаполнено(РезультатРегистрации.ОписаниеОшибкиРегистрации) Тогда
					МЧДОбъект = МЧД.ПолучитьОбъект();
					МЧДОбъект.ОписаниеОшибкиРегистрации = РезультатРегистрации.ОписаниеОшибкиРегистрации;
					МЧДОбъект.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва;
					МЧДОбъект.Записать();
					МашиночитаемыеДоверенности.УдалитьИзОчередиНаРегистрацию(МЧД);
				Иначе
					МашиночитаемыеДоверенности.ДобавитьВОчередьЗапросовВРеестрМЧД(МЧД,
						ВыборкаДетальныеЗаписи.ВидЗапроса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	НачатьТранзакцию();

	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.ОчередьЗапросовВРеестрМЧДЭДО");
		Блокировка.Заблокировать();

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВыполняемоеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОчередиЗапросовВРеестрМЧДЭДО;
			ОбщегоНазначенияБЭД.УстановитьАктивностьРегламентногоЗадания(ВыполняемоеЗадание, Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
