
#Область ПрограммныйИнтерфейс

#Область РаботаСExcel

// Читает файл excel и добавляет дополнительную таблицу.
//
// Параметры:
//  ДополнительныеПараметры - Структура - набор дополнительных параметров
//  ИмяВременногоФайла - Строка - путь к временному файлу
//
// Возвращаемое значение:
//  ПакетОтображаемыхДокументов - Таблица с двумя листам:
//
Функция ДобавитьДополнительныеДанные(ДополнительныеПараметры, ИмяВременногоФайла) Экспорт

	ПараметрыПечати = ДополнительныеПараметры.ПараметрыПечати;
	ОсновнойТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВыводитьКоды = ?(ЗначениеЗаполнено(ДополнительныеПараметры.ИмяДополнительнойКолонки), Истина, Ложь);
	ИспользуетсяЦенообразование25 = ДополнительныеПараметры.ИспользуетсяЦенообразование25;

	ПакетДокументов = Новый ПакетОтображаемыхДокументов;
	
	ИмяФайла = ИмяВременногоФайла;
	
	Попытка
		
		НомерКолонки = ?(ИспользуетсяЦенообразование25, 7, 5) + ?(ВыводитьКоды,1,0);
		НомерСтроки  = 1;
		
		ОсновнойТабличныйДокумент.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик
		ВидимостьКолонкиТД(ОсновнойТабличныйДокумент, 2 + ?(ВыводитьКоды,1,0), Ложь);
		ВидимостьКолонкиТД(ОсновнойТабличныйДокумент, 3 + ?(ВыводитьКоды,1,0), Ложь);
		
		Если ИспользуетсяЦенообразование25 Тогда
			ВидимостьКолонкиТД(ОсновнойТабличныйДокумент, 4 + ?(ВыводитьКоды,1,0), Ложь);
			ВидимостьКолонкиТД(ОсновнойТабличныйДокумент, 5 + ?(ВыводитьКоды,1,0), Ложь);
		КонецЕсли;
		
		// Создание служебной таблицы для обратной загрузки
		ДополнительныйТабличныйДокумент = Новый ТабличныйДокумент;  
		
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 1, НСтр("ru = 'Уникальный идентификатор'"));
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 2, НСтр("ru = 'Вид цены'"));
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 3, НСтр("ru = 'Номер колонки ""Старая цена""'"));
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 4, НСтр("ru = 'Номер колонки ""Процент изменения""'"));
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 5, НСтр("ru = 'Номер колонки ""Цена""'"));
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 6, НСтр("ru = 'Номер колонки ""Единица измерения""'"));
		УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 7, НСтр("ru = 'Номер колонки ""Уникальный идентификатор""'"));
		
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 1, Ложь);
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 2, Ложь);
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 3, Ложь);
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 4, Ложь);
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 5, Ложь);
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 6, Ложь);
		ВидимостьКолонкиТД(ДополнительныйТабличныйДокумент, 7, Ложь);
				
		НомерСтроки = НомерСтроки + 1;
		ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроекДляКлиента);
		Для Каждого ВидЦены Из ДеревоНастроек.Строки Цикл
			Если ВидЦены.ВыводитьНаПечать Тогда
				
				ВыводитьСтаруюЦену       = Ложь;
				ВыводитьПроцентИзменения = Ложь;
				ВыводитьСуммуИзменения   = Ложь;
				Для Каждого Колонка Из ВидЦены.Строки Цикл
					Если Колонка.Параметр = "СтараяЦена" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСтаруюЦену = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "ПроцентИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьПроцентИзменения = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "СуммаИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСуммуИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 1, Строка(ВидЦены.Параметр.УникальныйИдентификатор()));
				УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 2, Строка(ВидЦены.Параметр)); // Наименование вида цены
				
				Если ВыводитьСтаруюЦену Тогда
					УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 3, НомерКолонки); // Старая цена
					НомерКолонки = НомерКолонки + 1;
				Иначе
					УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 3, 0);
				КонецЕсли;
				
				Если ВыводитьСуммуИзменения Тогда
					УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 4, НомерКолонки); // Сумма изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 4, 0);
				КонецЕсли;
				
				Если ВыводитьПроцентИзменения Тогда
					УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 4, НомерКолонки); // Процент изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 4, 0);
				КонецЕсли;
				
				УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 5, НомерКолонки); // Цена
				НомерКолонки = НомерКолонки + 1;
				
				УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 6, НомерКолонки); // Единица измерения
				НомерКолонки = НомерКолонки + 1;
				
				ВидимостьКолонкиТД(ОсновнойТабличныйДокумент, НомерКолонки, Ложь);
				УстановитьТекстЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 7, НомерКолонки); // Уникальный идентификатор упаковки
				НомерКолонки = НомерКолонки + 1;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		ВидыЦен = Новый Массив;
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 1)) Цикл
			
			НоваяСтрока = Новый Структура("НомерКолонкиСтараяЦена, НомерКолонкиПроцентИзменения, НомерКолонкиЦена");
			НоваяСтрока.НомерКолонкиСтараяЦена       = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 3);
			НоваяСтрока.НомерКолонкиПроцентИзменения = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 4);
			НоваяСтрока.НомерКолонкиЦена             = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 5);
			ВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;

		Если ВидыЦен.Количество() > 0 Тогда
			
			НомерСтроки = 3;
			Пока ЗначениеЗаполнено(СодержаниеЯчейки(ОсновнойТабличныйДокумент, НомерСтроки, 3)) Цикл
				
				Для Каждого СтрокаТЧ Из ВидыЦен Цикл
					
					Если СтрокаТЧ.НомерКолонкиСтараяЦена <> 0
						И СтрокаТЧ.НомерКолонкиПроцентИзменения <> 0
						И СтрокаТЧ.НомерКолонкиЦена <> 0 Тогда
						
						СтараяЦена = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, СтрокаТЧ.НомерКолонкиСтараяЦена);
						Цена = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, СтрокаТЧ.НомерКолонкиЦена);
						
						СтараяЦена = ?(СтараяЦена = "", 0, Число(СтараяЦена)); 
						Цена 	   = ?(Цена = "", 0, Число(Цена)); 
						
						Если СтараяЦена <> 0 Тогда
							
							ЗначениеЯчейки = Окр(((Цена-СтараяЦена)/СтараяЦена)*100 ,2);
							УстановитьЗначениеЯчейки(ОсновнойТабличныйДокумент,НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения, ЗначениеЯчейки);
						Иначе
							
							УстановитьЗначениеЯчейки(ОсновнойТабличныйДокумент,НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения, 0);
						КонецЕсли;	
						
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;

		НовыйЛист = ПакетДокументов.Состав.Добавить();
		НовыйЛист.Наименование = НСтр("ru='Прайс-лист'");
		НовыйЛист.Данные = ПоместитьВоВременноеХранилище(ОсновнойТабличныйДокумент);   

		НовыйЛист = ПакетДокументов.Состав.Добавить();
		НовыйЛист.Наименование = " ";
		НовыйЛист.Данные = ПоместитьВоВременноеХранилище(ДополнительныйТабличныйДокумент);   
		
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось записать данные в файл. Подробности:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	Возврат ПакетДокументов;
	
КонецФункции

// Обрабатывает загрузку из файла excel.
//
// Параметры:
//  АдреcДвоичныхДанных - Строка - Адрес двоичных данных
//  ДополнительныеПараметры - Структура - набор параметров
//
// Возвращаемое значение:
//  Структура - Набор отработанных данных:
//		* ФормаВладелец - Строка- Владелец
//		* ВидыЦен - Строка -  Вид цен
//		* Товары - Строка - Товары
Функция ОбработатьЗагрузкуИзПрайсЛистЭксельНаСервере(АдреcДвоичныхДанных, ДополнительныеПараметры) Экспорт
	
	ИспользуетсяЦенообразование25 = ДополнительныеПараметры.ИспользуетсяЦенообразование25;
    ТабличныйДокументСЛистами = Новый ТабличныйДокумент;
    ДополнительныйТабличныйДокумент = Новый ТабличныйДокумент;
    ОсновнойТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xls");
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдреcДвоичныхДанных);
	ДвоичныеДанныеФайла.Записать(ИмяФайла);
	
	Попытка

	ТабличныйДокументСЛистами.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

	Если ТабличныйДокументСЛистами.Области.Количество() = 0 Тогда
		ВызватьИсключение(НСтр("ru = 'Файл пустой!'")) ;
	КонецЕсли;	
	
		ОсновнойТабличныйДокумент = ТабличныйДокументСЛистами.ПолучитьОбласть(
													ТабличныйДокументСЛистами.Области.Прайс_лист.Имя);
													
		ДополнительныйТабличныйДокумент = ТабличныйДокументСЛистами.ПолучитьОбласть(
													ТабличныйДокументСЛистами.Области._.Имя);

	Исключение
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Файл не может быть загружен.
			           |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
			           |Подробности: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;      
		Пока ЗначениеЗаполнено(СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 1)) Цикл
			
			НоваяСтрока = Новый Структура("ИдентификаторВидЦены, НомерКолонкиЦена, НомерКолонкиУпаковка");
			НоваяСтрока.ИдентификаторВидЦены = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 1);
			НоваяСтрока.НомерКолонкиЦена     = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 5);
			НоваяСтрока.НомерКолонкиУпаковка = СодержаниеЯчейки(ДополнительныйТабличныйДокумент, НомерСтроки, 7);
			МассивСтруктурВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если МассивСтруктурВидыЦен.Количество() > 0 Тогда
			
			// Загрузка цен номенклатуры
			НомерСтроки = 3;              
			ЕстьДополнительнаяКолонка = (СтрДлина(СодержаниеЯчейки(ОсновнойТабличныйДокумент, НомерСтроки, 2)) <> 36);
			Пока ЗначениеЗаполнено(СодержаниеЯчейки(ОсновнойТабличныйДокумент, 
								НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0))) Цикл
				
				Для Каждого СтрокаТЧ Из МассивСтруктурВидыЦен Цикл
					
					НоваяСтрока = Новый Структура(
						"ИдентификаторНоменклатура,
						|ИдентификаторХарактеристика,
						|ИдентификаторСерияЦО,
						|ИдентификаторУпаковкаЦО,
						|ИдентификаторУпаковка,
						|ИдентификаторВидЦены,
						|Цена");          
					
					НоваяСтрока.ИдентификаторНоменклатура   = СодержаниеЯчейки(ОсновнойТабличныйДокумент, 
																				НомерСтроки,  2 + ?(ЕстьДополнительнаяКолонка,1,0));
					НоваяСтрока.ИдентификаторХарактеристика = СодержаниеЯчейки(ОсновнойТабличныйДокумент, 
																				НомерСтроки,  3 + ?(ЕстьДополнительнаяКолонка,1,0));
					Если ИспользуетсяЦенообразование25 Тогда
						НоваяСтрока.ИдентификаторСерияЦО        = СодержаниеЯчейки(ОсновнойТабличныйДокумент, 
																			НомерСтроки,  4 + ?(ЕстьДополнительнаяКолонка,1,0));
						НоваяСтрока.ИдентификаторУпаковкаЦО     = СодержаниеЯчейки(ОсновнойТабличныйДокумент, 
																			НомерСтроки,  5 + ?(ЕстьДополнительнаяКолонка,1,0));
					КонецЕсли;                            
					
					НоваяСтрока.ИдентификаторУпаковка       = СодержаниеЯчейки(ОсновнойТабличныйДокумент, 
																			НомерСтроки, СтрокаТЧ.НомерКолонкиУпаковка);
					НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;    
					НоваяСтрока.Цена                        = СодержаниеЯчейкиЗначение(ОсновнойТабличныйДокумент, 
																			НомерСтроки, СтрокаТЧ.НомерКолонкиЦена);
					МассивСтруктурТовары.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение 
	
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Файл не может быть загружен.
			           |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
			           |Подробности: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;
	
	Данные = Новый Структура(
		"ФормаВладелец, ВидыЦен, Товары", 
		ДополнительныеПараметры.УникальныйИдентификатор, МассивСтруктурВидыЦен, МассивСтруктурТовары);
		
	Возврат Данные;  
	
КонецФункции 

#КонецОбласти

// Формирует таблицу цен на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма. Может содержать:
//    * Объект - ОбработкаОбъект.ПрайсЛист, ДокументОбъект.УстановкаЦенНоменклатуры - ДанныеФормыСтруктура
//    * ВыбранныеЦены - ТаблицаЗначений - с колонками:
//      ** Ссылка - СправочникСсылка.ВидыЦен, СправочникСсылка.ВидыЦенПоставщиков - Виды цен
//      ** Идентификатор - Строка - Идентификатор для формул
//      ** Наименование - Строка - Наименование видов цен
//    * СохраненныеДокументы - ТаблицаЗначений - (необязательное) с колонками:
//      ** Ссылка - ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика -
//    * Элементы - ЭлементыФормы - Могут содержать:
//      ** ДеревоЦен - ДеревоЗначений, ТаблицаФормы, ДанныеФормыЭлементДерева, ДанныеФормыДерево - основной элемент формы с деревом цен
//    * ДеревоЦен - ДеревоЗначений, ТаблицаФормы, ДанныеФормыЭлементДерева, ДанныеФормыДерево - основной элемент формы с деревом цен
//    * КомпоновщикНастроекОтбор - КомпоновщикНастроекКомпоновкиДанных
//  ИмяТаблицы - Строка - Имя таблицы
//
Процедура ПостроитьДеревоЦен(Форма) Экспорт
	
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма);
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	ВариантГруппировки = Форма.ВариантГруппировки;
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ДеревоЗначений = Новый ТаблицаЗначений;
	Иначе
		ДеревоЗначений = Новый ДеревоЗначений;
	КонецЕсли;
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	
	Если ЗначениеЗаполнено(ВариантГруппировки) Тогда
		ДеревоЗначений.Колонки.Добавить("ИерархияЭтоГруппа", Новый ОписаниеТипов("Булево"));
		ДеревоЗначений.Колонки.Добавить("ЭтоИерархия", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	
	Если ЭтоРегистрацияЦенПоставщика Тогда
		
		ДеревоЗначений.Колонки.Добавить("НоменклатураПартнера",     Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
		
		Если ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
			ДеревоЗначений.Колонки.Добавить("Код",                                   Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименование",              Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("ХарактеристикаНаименование",            Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("СерияНаименование",                     Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("УпаковкаНаименование",                  Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураСопоставленаАвтоматически", Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЭтоДубль",                              Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("СтрокаСопоставлена",                    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("КоличествоНоменклатурыДляВыбора",       Новый ОписаниеТипов("Число"));
			ДеревоЗначений.Колонки.Добавить("КодОтличается",                         Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("АртикулОтличается",                     Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименованиеОтличается",    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЦенаНеРаспознана",                      Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЦеныИзменены",                          Новый ОписаниеТипов("Булево"));
			
			ДеревоЗначений.Колонки.Добавить("Серия",                                 Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
			ДеревоЗначений.Колонки.Добавить("Упаковка",                              Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		КонецЕсли;
		
	Иначе
		ДеревоЗначений.Колонки.Добавить("ВидНоменклатуры",            Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
		ДеревоЗначений.Колонки.Добавить("ХарактеристикаЦО",           Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ДеревоЗначений.Колонки.Добавить("СерияЦО",                    Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		ДеревоЗначений.Колонки.Добавить("УпаковкаЦО",                 Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ДеревоЗначений.Колонки.Добавить("СерииИспользуются",          Новый ОписаниеТипов("Булево"));
		ДеревоЗначений.Колонки.Добавить("УпаковкиИспользуются",       Новый ОписаниеТипов("Булево"));
		
		ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",              Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ДеревоЗначений.Колонки.Добавить("РеквизитСортировки",         Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			Если ЭтоРегистрацияЦенПоставщика Тогда
				ДеревоЗначений.Колонки.Добавить(                          ИмяКолонки, ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("СтараяЦена"              + ИмяКолонки, ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ПроцентИзменения"        + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),            ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("СуммаИзменения"          + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),            ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"         + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                  ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ИзмененаАвтоматически"   + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                  ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ЗапретРедактирования"    + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                  ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("КартинкаИзмененаВручную" + ИмяКолонки, Новый ОписаниеТипов("Число"),                                                                   ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("МинимальнаяПартияПоставки"+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("УстановкаУсловий"        + ИмяКолонки, Новый ОписаниеТипов("Булево"), НСтр("ru='Установка условий'"));
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "Упаковка");
					ДеревоЗначений.Колонки.Добавить("УпаковкаЗаказа"   + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), НСтр("ru='Упаковка заказа'"));
					Если Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов" Тогда
						ДеревоЗначений.Колонки.Добавить("УпаковкаЗаполнена" + ИмяКолонки, Новый ОписаниеТипов("Булево"), НСтр("ru='Упаковка заполнена'"));
						ДеревоЗначений.Колонки.Добавить("УпаковкаИмя" + ИмяКолонки, Новый ОписаниеТипов("Строка"), НСтр("ru='Упаковка наименование'"));
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДеревоЗначений.Колонки.Добавить(                          ИмяКолонки, ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("Валюта"                  + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("СтараяЦена"              + ИмяКолонки, ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("Формула"                 + ИмяКолонки, Новый ОписаниеТипов("Строка"), ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ПроцентИзменения"        + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("СуммаИзменения"          + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"         + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ФормулаИзмененаВручную"  + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ИзмененаАвтоматически"   + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("КартинкаИзмененаВручную" + ИмяКолонки, Новый ОписаниеТипов("Число"),                                                                  ВидЦены.Наименование);
				ДеревоЗначений.Колонки.Добавить("ЗапретРедактирования"    + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "Упаковка");
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаОтступ = ДеревоЗначений.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Отступ'"));
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево") Или ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
			
		РеквизитыТаблицыЦен = Форма.ПолучитьРеквизиты("ДеревоЦен");
		Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
			Если СтрНайти(Реквизит.Имя, "ВидЦены")
				Или СтрНайти(Реквизит.Имя, "Отступ") Тогда
				УдаляемыеКолонкиТаблицыЦен.Добавить("ДеревоЦен." + Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
			Если СтрНайти(Колонка.Имя, "ВидЦены") Тогда
				УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти("ДеревоЦен." + Колонка.Имя);
				Если УдаляемаяКолонка <> Неопределено Тогда
					УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
				Иначе
					ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоЦен", Колонка.Заголовок, Истина));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(КолонкаОтступ.Имя, КолонкаОтступ.ТипЗначения, "ДеревоЦен", КолонкаОтступ.Заголовок, Истина));
		
		Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
		КонецЕсли;
		
		ПодчиненныеЭлементыТаблицы = Форма.Элементы["ДеревоЦен"].ПодчиненныеЭлементы; // ЭлементыФормы
		Для Каждого ТекЭлемент Из ПодчиненныеЭлементыТаблицы Цикл
			Если СтрНайти(ТекЭлемент.Имя, "ВидЦены")
				Или СтрНайти(ТекЭлемент.Имя, "Отступ") Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			Форма.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
		
		Для Каждого Оформление Из Форма.УсловноеОформление.Элементы Цикл
			Если Оформление.Представление = "СозданоПрограммно" Тогда
				УсловныеОформления.Добавить(Оформление);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Оформление Из УсловныеОформления Цикл
			Форма.УсловноеОформление.Элементы.Удалить(Оформление);
		КонецЦикла;
		
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ПоказыватьВлияющуюЦену = Форма.ОтображатьВлияющиеЦены 
										И ВидЦены.Влияет
										И НЕ ВидЦены.ЗапрещенныйВидЦены;
			
			Если ВидЦены.Выбрана
				Или ПоказыватьВлияющуюЦену Тогда
				
				ЦветЗаголовка = Неопределено;
				ЦветФона      = Неопределено;
				КартинкаШапки = Неопределено;
				
				Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную 
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков Тогда
					
					КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
					
				ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости Тогда
					
					КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
					
				ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
					Или ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда

					КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;
					
				КонецЕсли;
				
				Если ЭтоРегистрацияЦенПоставщика Тогда
		
					НоваяГруппа = ДобавитьГруппуФормы(Форма, "ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);
					
				Иначе
					
					НоваяГруппа = ДобавитьГруппуФормы(Форма, "ГруппаЦены" + ИмяКолонки, ?(Строка(ВидЦены.Идентификатор)=Строка(ВидЦены.Ссылка), Строка(ВидЦены.Ссылка), Строка(ВидЦены.Ссылка) + " ["+ Строка(ВидЦены.Идентификатор) +"]") + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);
					
				КонецЕсли;		
				
				Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Или
					ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
					
					Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
						ДатаДействующихЦен = КонецДня(Форма.ДатаДействующихЦен);
					Иначе
						ДатаДействующихЦен = НачалоДня(Форма.Дата)-1;
					КонецЕсли;
					ЗаголовокКолонкиСтараяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена на %1'"), Формат(ДатаДействующихЦен, "ДЛФ=D"));
					
				Иначе
					
					ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Действующая цена'"), НСтр("ru='Цена'"));
					
				КонецЕсли;
				
				Если ВидЦены.Выбрана Тогда
					НоваяГруппаТехническая = ДобавитьГруппуФормы(Форма, "ГруппаТехническая" + ИмяКолонки, НСтр("ru='Группа'"), Ложь, Неопределено, ГруппировкаКолонок.Горизонтальная, НоваяГруппа);
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
					СтруктураПараметров.Вставить("ШиринаПоля",             12);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппаТехническая);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
					
					НовоеПоле = ДобавитьПолеФормы(Форма, "СтараяЦена" + ИмяКолонки, СтруктураПараметров);
					НовоеПоле.Подсказка = НСтр("ru = 'Текущая установленная цена'");
					НовоеПоле.ЦветТекста = WebЦвета.Серый;
					
					Если Не ЭтоРегистрацияЦенПоставщика Тогда
						НоваяГруппаФормула = ДобавитьГруппуФормы(Форма, "ГруппаТехническаяФормула" + ИмяКолонки, НСтр("ru='Группа формула'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппаТехническая);
						
						НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + "Формула" + "Картинка" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаФормула);
						НовоеПоле.ПутьКДанным         = "ДеревоЦен.ФормулаИзмененаВручную" + ИмяКолонки;
						НовоеПоле.Заголовок           = "";
						НовоеПоле.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
						НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
						НовоеПоле.ТолькоПросмотр      = Истина;
						НовоеПоле.Ширина              = 2;
						НовоеПоле.ОтображатьВШапке    = Ложь;
						НовоеПоле.КартинкаЗначений    = БиблиотекаКартинок.Внимание16;
						НовоеПоле.Видимость           = ВидЦены.ФормулаРедактируется;
						НовоеПоле.РастягиватьПоГоризонтали = Ложь;
						
						НовоеПоле.Подсказка = НСтр("ru = 'Формула изменена'");

						СтруктураПараметров = Новый Структура();
						СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Формула'"));
						СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенФормулаПриИзменении");
						СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "Подключаемый_ДеревоЦенФормулаНачалоВыбора");
						СтруктураПараметров.Вставить("ШиринаПоля",             12);
						СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
						СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
						СтруктураПараметров.Вставить("Родитель",               НоваяГруппаФормула);
						СтруктураПараметров.Вставить("Видимость",              ВидЦены.ФормулаРедактируется);
						СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     НЕ ВидЦены.Редактировать);
						СтруктураПараметров.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Право);
						
						НовоеПоле = ДобавитьПолеФормы(Форма, "Формула" + ИмяКолонки, СтруктураПараметров);
						НовоеПоле.Подсказка = НСтр("ru = 'Формула для расчета цены'");
						НовоеПоле.ЦветТекста = WebЦвета.Серый;
					КонецЕсли;
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Изменение'"));
					СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
					СтруктураПараметров.Вставить("ШиринаПоля",             12);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппаТехническая);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     ?(ЭтоРегистрацияЦенПоставщика, Ложь, НЕ ВидЦены.Редактировать));
					
					НовоеПоле = ДобавитьПолеФормы(Форма, "СуммаИзменения" + ИмяКолонки, СтруктураПараметров);
					
					НовоеПоле.ЦветТекста = WebЦвета.Серый;
					НовоеПоле.ВыделятьОтрицательные = Истина;
					НовоеПоле.Подсказка = НСтр("ru = 'Изменение цены'");
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              "%");
					СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
					СтруктураПараметров.Вставить("ШиринаПоля",             6);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппаТехническая);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     ?(ЭтоРегистрацияЦенПоставщика, Ложь, НЕ ВидЦены.Редактировать));
					
					НовоеПоле = ДобавитьПолеФормы(Форма, "ПроцентИзменения" + ИмяКолонки, СтруктураПараметров);
					НовоеПоле.ЦветТекста = WebЦвета.Серый;
					НовоеПоле.ВыделятьОтрицательные = Истина;
					НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения цены'");
					
					НоваяГруппаЦена = ДобавитьГруппуФормы(Форма, "ГруппаЦена" + ИмяКолонки, НСтр("ru='Группа цена'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
					
					НовоеПоле                     = Форма.Элементы.Добавить("ЗапретРедактирования" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаЦена);
					НовоеПоле.ПутьКДанным         = "ДеревоЦен.ЗапретРедактирования" + ИмяКолонки;
					НовоеПоле.Заголовок           = "Запрет редактирования";
					НовоеПоле.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
					НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
					НовоеПоле.ТолькоПросмотр      = Истина;
					НовоеПоле.Ширина              = 2;
					НовоеПоле.ОтображатьВШапке    = Ложь;
					НовоеПоле.КартинкаЗначений    = БиблиотекаКартинок.ВидыЦенТолькоПросмотр;
					НовоеПоле.КартинкаШапки       = БиблиотекаКартинок.ВидыЦенТолькоПросмотр;
					НовоеПоле.Видимость           = ?(ЭтоРегистрацияЦенПоставщика, Ложь, НЕ ВидЦены.Редактировать);
					НовоеПоле.РастягиватьПоГоризонтали = Ложь;
					НовоеПоле.Подсказка = НСтр("ru = 'Запрет редактирования цены'");
					
					НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + "Картинка" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаЦена);
					НовоеПоле.ПутьКДанным         = "ДеревоЦен.ИзмененаВручную" + ИмяКолонки;
					НовоеПоле.Заголовок           = "";
					НовоеПоле.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
					НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
					НовоеПоле.ТолькоПросмотр      = Истина;
					НовоеПоле.Ширина              = 2;
					НовоеПоле.ОтображатьВШапке    = Ложь;
					НовоеПоле.КартинкаЗначений    = БиблиотекаКартинок.УстановитьЦены;
					НовоеПоле.КартинкаШапки       = БиблиотекаКартинок.УстановитьЦены;
					НовоеПоле.Видимость           = ?(ЭтоРегистрацияЦенПоставщика, Истина, ВидЦены.Редактировать);
					НовоеПоле.РастягиватьПоГоризонтали = Ложь;
					НовоеПоле.Подсказка = НСтр("ru = 'Цена изменена вручную'");

					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Цена'"));
					СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
					СтруктураПараметров.Вставить("ШиринаПоля",             12);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппаЦена);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     ?(ЭтоРегистрацияЦенПоставщика, Ложь, НЕ ВидЦены.Редактировать));
					НовоеПоле = ДобавитьПолеФормы(Форма, ИмяКолонки, СтруктураПараметров);
					НовоеПоле.Подсказка = НСтр("ru = 'Устанавливаемая цена'");
					
					Если Не ЭтоРегистрацияЦенПоставщика Тогда
						НоваяГруппаВалюта = ДобавитьГруппуФормы(Форма, "ГруппаВалюта" + ИмяКолонки, НСтр("ru='Группа валюта'"), Ложь, Неопределено, ГруппировкаКолонок.Горизонтальная, НоваяГруппаТехническая);
	
						СтруктураПараметров = Новый Структура();
						СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Валюта'"));
						СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенВалютаПриИзменении");
						СтруктураПараметров.Вставить("ШиринаПоля",             6);
						СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
						СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
						СтруктураПараметров.Вставить("Родитель",               НоваяГруппаВалюта);
						СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     ?(ЭтоРегистрацияЦенПоставщика, Ложь, НЕ ВидЦены.Редактировать));
						
						НовоеПоле = ДобавитьПолеФормы(Форма, "Валюта" + ИмяКолонки, СтруктураПараметров);
						НовоеПоле.Подсказка = НСтр("ru = 'Валюта цены'");
						НовоеПоле.БыстрыйВыбор = Ложь;
					КонецЕсли;
					
				Иначе
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
					СтруктураПараметров.Вставить("ШиринаПоля",             12);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
					
					НовоеПоле = ДобавитьПолеФормы(Форма, "СтараяЦена" + ИмяКолонки, СтруктураПараметров);
					
					НовоеПоле.ЦветТекста = WebЦвета.Серый;
					
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяГруппаУпаковка = ДобавитьГруппуФормы(Форма, "ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Ед. изм.'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
					
					НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы.ДеревоЦен.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НоваяСвязь);
					НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Упаковка'"));
					СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенУпаковкаПриИзменении");
					СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "Подключаемый_ДеревоЦенУпаковкаНачалоВыбора");
					СтруктураПараметров.Вставить("ШиринаПоля",             3);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
					СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
					СтруктураПараметров.Вставить("ОтображатьВШапке",       Ложь);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     ?(ЭтоРегистрацияЦенПоставщика, Ложь, НЕ ВидЦены.Редактировать));
					
					ДобавитьПолеФормы(Форма, "Упаковка" + ИмяКолонки, СтруктураПараметров);
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
					СтруктураПараметров.Вставить("ШиринаПоля",             3);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
					СтруктураПараметров.Вставить("ПутьКДанным",            "ДеревоЦен.Номенклатура.ЕдиницаИзмерения");
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
					ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);

					Если ЭтоРегистрацияЦенПоставщика Тогда
						
						СтруктураПараметров = Новый Структура();
						СтруктураПараметров.Вставить("Заголовок",              НСтр("ru = 'Упаковка заказа'"));
						СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенУпаковкаЗаказаПриИзменении");
						СтруктураПараметров.Вставить("ШиринаПоля",             9);
						СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
						СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
						СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
						СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
						СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
						
						ДобавитьПолеФормы(Форма,"УпаковкаЗаказа" + ИмяКолонки, СтруктураПараметров);
						
						Если Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов" Тогда
							СтруктураПараметров = Новый Структура();
							СтруктураПараметров.Вставить("Заголовок",              НСтр("ru = 'Упаковка заполнена'"));
							СтруктураПараметров.Вставить("ШиринаПоля",             9);
							СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
							СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
							СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
							СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
							СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
							СтруктураПараметров.Вставить("Видимость",              Ложь);
							
							ДобавитьПолеФормы(Форма,"УпаковкаЗаполнена" + ИмяКолонки, СтруктураПараметров);
							
							СтруктураПараметров = Новый Структура();
							СтруктураПараметров.Вставить("Заголовок",              НСтр("ru = 'Наименование упак.'"));
							СтруктураПараметров.Вставить("ШиринаПоля",             9);
							СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
							СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
							СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
							СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
							СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
							СтруктураПараметров.Вставить("Видимость",              Истина);
							СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
							
							ДобавитьПолеФормы(Форма,"УпаковкаИмя" + ИмяКолонки, СтруктураПараметров);
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
					СтруктураПараметров.Вставить("ШиринаПоля",             3);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
					СтруктураПараметров.Вставить("ПутьКДанным",            "ДеревоЦен.Номенклатура.ЕдиницаИзмерения");
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
					
					ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
				КонецЕсли;
				
				Если ЭтоРегистрацияЦенПоставщика Тогда
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru = 'Мин. партия поставки'"));
					СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенМинимальнаяПартияПриИзменении");
					СтруктураПараметров.Вставить("ШиринаПоля",             8);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
					СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
				
					НовоеПоле = ДобавитьПолеФормы(Форма, "МинимальнаяПартияПоставки" + ИмяКолонки, СтруктураПараметров);
				
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("Заголовок",              НСтр("ru = 'Условия'"));
					СтруктураПараметров.Вставить("ШиринаПоля",             8);
					СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
					СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
					СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
					СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
					СтруктураПараметров.Вставить("Вид",                    ВидПоляФормы.ПолеКартинки);
					СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Ложь);
					СтруктураПараметров.Вставить("КартинкаЗначений",       БиблиотекаКартинок.Изменить);
					СтруктураПараметров.Вставить("КартинкаШапки",          БиблиотекаКартинок.Изменить);
					СтруктураПараметров.Вставить("Видимость",              Ложь);
					
					ДобавитьПолеФормы(Форма,"УстановкаУсловий" + ИмяКолонки, СтруктураПараметров);
				КонецЕсли;
				
				Если Не ЭтоРегистрацияЦенПоставщика Тогда
					Если ВидЦены.ФормулаРедактируется Тогда
							
						// Условное изменения формулы
						НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
						НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Формула"+ ИмяКолонки;
						НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
						НовыйЭлементУсловногоОформления.Использование = Истина;
						
						ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.Использование = Истина;
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ФормулаИзмененаВручную"+ ИмяКолонки);
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ЭлементОтбора.ПравоеЗначение = Истина;
						
						НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
						НовоеПоле.Использование = Истина;
						НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Формула"+ ИмяКолонки);
						
						НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
			
						// Условное изменения формулы
						НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
						НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Формула"+ ИмяКолонки;
						НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
						НовыйЭлементУсловногоОформления.Использование = Истина;
						
						ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.Использование = Истина;
						ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ФормулаИзмененаВручную"+ ИмяКолонки);
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ЭлементОтбора.ПравоеЗначение = Ложь;
						
						НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
						НовоеПоле.Использование = Истина;
						НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Формула"+ ИмяКолонки);
						
						НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
						
					Иначе
						// Условное изменения формулы
						НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
						НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Формула"+ ИмяКолонки;
						НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
						НовыйЭлементУсловногоОформления.Использование = Истина;
						
						НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
						НовоеПоле.Использование = Истина;
						НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Формула"+ ИмяКолонки);
						
						НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<формулы не используются>'"));
						НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
						НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
						
					КонецЕсли;
				КонецЕсли;

				// Условное оформление увеличившихся цен
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.СтараяЦена" + ИмяКолонки);
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
				
				// Условное оформление уменьшившихся цен
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.СтараяЦена" + ИмяКолонки);
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноЗеленый);
				
				// Условное оформление единиц измерения
				ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
				ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "ДеревоЦен" + "ЕдиницаИзмерения" + ИмяКолонки;
				ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "ДеревоЦен.Упаковка" + ИмяКолонки;
				НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
				
				Если НЕ ЭтоРегистрацияЦенПоставщика и ИспользуетсяЦенообразование25 Тогда
					
					НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
					НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
					НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
					НовыйЭлементУсловногоОформления.Использование = Истина;
					
					ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.УпаковкиИспользуются");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = Истина;
					
					НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
					НовоеПоле.Использование = Истина;
					НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Упаковка" + ИмяКолонки);
					
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
					
				КонецЕсли;
				
				// Условное оформление запрета редактирования
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ЗапретРедактирования" + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Истина;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Формула" + ИмяКолонки);
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "СуммаИзменения" + ИмяКолонки);
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "ПроцентИзменения" + ИмяКолонки);
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Валюта" + ИмяКолонки);

				Если НЕ ЭтоРегистрацияЦенПоставщика Тогда
					НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
					НовоеПоле.Использование = Истина;
					НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "Упаковка" + ИмяКолонки);
				КонецЕсли;
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Запрет редактирования>'"));

				Если ЭтоРегистрацияЦенПоставщика Тогда
					
					// В регистрации цен поставщика - пустая цена не регистрируется при проведении
					НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
					НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
					НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
					НовыйЭлементУсловногоОформления.Использование = Истина;
					
					ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен." + ИмяКолонки);
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = 0;
					
					ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ХарактеристикиИспользуются");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = Ложь;
					
					НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
					НовоеПоле.Использование = Истина;
					НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
					
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
					
					//
					
					НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
					НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
					НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
					НовыйЭлементУсловногоОформления.Использование = Истина;
					
					ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен." + ИмяКолонки);
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = 0;
					
					ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Характеристика");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
					
					НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
					НовоеПоле.Использование = Истина;
					НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
					
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
					
					// В регистрации цен поставщика - пустая цена не регистрируется при проведении
					НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
					НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
					НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
					НовыйЭлементУсловногоОформления.Использование = Истина;
					
					ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен." + ИмяКолонки);
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = 0;
					
					НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
					НовоеПоле.Использование = Истина;
					НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + "ПроцентИзменения" + ИмяКолонки);
					
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
					НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВариантГруппировки) Тогда
			
				СписокИндексовКартинкиЭлемента = Новый СписокЗначений;
				СписокИндексовКартинкиЭлемента.Добавить(0);
				СписокИндексовКартинкиЭлемента.Добавить(2);
				//
				
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "СтрокиТолькоПросмотр";
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИндексКартинки");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
				ЭлементОтбора.ПравоеЗначение = СписокИндексовКартинкиЭлемента;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен");
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			КонецЕсли; 
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ШиринаПоля",             30);
		СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
		
		НовоеПоле = ДобавитьПолеФормы(Форма, "Отступ", СтруктураПараметров);
		НовоеПоле.ЦветТекста = WebЦвета.Серый;
		НовоеПоле.Видимость  = Истина;
		НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовоеПоле.РастягиватьПоГоризонтали = Истина;
	
		ДеревоЦенЗначение = Форма.РеквизитФормыВЗначение("ДеревоЦен"); // ДеревоЗначений
		ДеревоЦенЗначение.Колонки.Очистить();
		
		Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
			ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Форма.ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ВыбранныеЦеныИзменены") Тогда
			Форма.ВыбранныеЦеныИзменены = Ложь;
		КонецЕсли;

		Если Не ЭтоРегистрацияЦенПоставщика Тогда
			УстановитьПометкуИзмененныхФормул(Форма, ДеревоЦенЗначение);
		КонецЕсли;
		
	Иначе
		
		Форма["ДеревоЦен"] = ДеревоЗначений.Скопировать();
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию структуры кэша данных
//
// Параметры:
//  КэшДанных - Структура - кэш данных.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров - ТаблицаЗначений, Неопределено - Соответствие номенклатуры.
//   * КурсыВалют - ТаблицаЗначений, Неопределено, Соответствие - Курсы валют.
//   * СоответствиеВидовЦенИменамКолонокТаблицыТоваров - Соответствие - Соответствие видов цен именам колонок.
//
Функция ИнициализироватьСтруктуруКэшаДанных(КэшДанных = Неопределено) Экспорт
	
	Если КэшДанных = Неопределено Тогда
		КэшДанных = Новый Структура;
		// Кэш, используемый для быстрого поиска строки дерева по номенклатуре
		КэшДанных.Вставить("ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров");
		// Кэш курсов валют
		КэшДанных.Вставить("КурсыВалют");
		// Кэш имен колонок видов цен
		КэшДанных.Вставить("СоответствиеВидовЦенИменамКолонокТаблицыТоваров", Новый Соответствие);
		// Кэш флажка регистрации цен поставщика
		КэшДанных.Вставить("ЭтоРегистрацияЦенПоставщика");
	КонецЕсли;
	
	Возврат КэшДанных;
	
КонецФункции

// Копирует в таблицу значений номенклатуру с характеристиками из дерева цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ДобавлятьВсеСтроки - Булево 
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * НоменклатураПартнера - СправочникСсылка.НоменклатураКонтрагентов - Номенклатура поставщика.
//   * Номенклатура           - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика         - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//
Функция СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма, ДобавлятьВсеСтроки = Истина) Экспорт
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	
	Параметры = Новый Структура();
	Параметры.Вставить("Операция", "ДобавитьСтрокуВТаблицуНоменклатуры");
	Параметры.Вставить("ДеревоЦенЭтоДанныеФормыДерево", (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево")));
	Параметры.Вставить("ИспользуетсяЦенообразование25", Форма.ИспользуетсяЦенообразование25);
	Параметры.Вставить("ДобавлятьВсеСтроки", ДобавлятьВсеСтроки);
	
	ПрименитьИзмененияВДереве(Параметры, Форма.ДеревоЦен, ТаблицаНоменклатуры);

	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Возвращает пустую таблицу для товаров (Без цен и упаковок).
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * НоменклатураПартнера - СправочникСсылка.НоменклатураКонтрагентов - Номенклатура поставщика.
//   * Номенклатура           - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика         - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//
Функция СоздатьТаблицуНоменклатуры(Форма) Экспорт
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("НоменклатураПартнера",   Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Если Форма.ИспользуетсяЦенообразование25 Тогда
		ТаблицаЗначений.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаЗначений.Колонки.Добавить("ХарактеристикаЦО",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаЗначений.Колонки.Добавить("СерияЦО",            Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		ТаблицаЗначений.Колонки.Добавить("СерияЦОДляСвязи",    Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		ТаблицаЗначений.Колонки.Добавить("УпаковкаЦО",         Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаЗначений.Колонки.Добавить("УпаковкаЦОДляСвязи", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Иначе	
		ТаблицаЗначений.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает пустую таблицу для товаров (С ценами и упаковками).
//
// Параметры:
//  ЭтоРегистрацияЦенПоставщика - Булево - Признак, что таблица создается для регистрации цен поставщика.
//  ИспользуетсяЦенообразование25 - Булево - Истина, используется новое ценообразование.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * НоменклатураПартнера - СправочникСсылка.НоменклатураКонтрагентов - Номенклатура поставщика.
//   * Номенклатура           - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика         - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//   * ВидЦены                - СправочникСсылка.ВидыЦенПоставщиков,СправочникСсылка.ВидыЦен - Вид цены.
//   * Цена                   - Число - Цена.
//   * Упаковка               - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка.
//
Функция СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика, ИспользуетсяЦенообразование25 = Ложь) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("НоменклатураПартнера", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Если ИспользуетсяЦенообразование25 Тогда 
		ТаблицаЗначений.Колонки.Добавить("ХарактеристикаЦО",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));		
		ТаблицаЗначений.Колонки.Добавить("СерияЦО",            Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));		
		ТаблицаЗначений.Колонки.Добавить("СерияЦОДляСвязи",    Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));		
		ТаблицаЗначений.Колонки.Добавить("УпаковкаЦО",         Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаЗначений.Колонки.Добавить("УпаковкаЦОДляСвязи", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Иначе			
		ТаблицаЗначений.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	Если ЭтоРегистрацияЦенПоставщика Тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
		ТаблицаЗначений.Колонки.Добавить("УпаковкаЗаказа", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаЗначений.Колонки.Добавить("УпаковкаИмя", Новый ОписаниеТипов("Строка"));
		ТаблицаЗначений.Колонки.Добавить("МинимальнаяПартияПоставки", Новый ОписаниеТипов("Число"));
		ТаблицаЗначений.Колонки.Добавить("УстановкаУсловий", Новый ОписаниеТипов("Булево"));
	Иначе
		ТаблицаЗначений.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТаблицаЗначений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	ТаблицаЗначений.Колонки.Добавить("Цена",                   Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка",               Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаЗначений.Колонки.Добавить("Формула",                Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Инициализирует реквизит КомпоновщикНастроекОтбор, используемый в механизмах отбора товаров.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию(Форма) Экспорт
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("МакетНоменклатураПартнера");
	Иначе
		СхемаКомпоновкиДанных = Обработки.ПодборТоваровПоОтбору.ПолучитьМакет("Макет");
	КонецЕсли;
	
	Форма.КомпоновщикНастроекОтбор.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор)));
	Форма.КомпоновщикНастроекОтбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Форма.КомпоновщикНастроекОтбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.КомпоновщикНастроекОтбор.Настройки, "АссортиментНаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные о видах цен, правилах расчета и отборах, пользовательские настройки для расчета.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  НастройкиКомпоновкиДанных - ТаблицаЗначений - Таблица значений, пользовательские настройки компоновки данных,
//                                                сохраненные в документе.
//  МассивВидовЦен - Массив из СправочникСсылка.ВидыЦен - 
//                 - Массив из СправочникСсылка.ВидыЦенПоставщиков -  
//  ТаблицаНастроекВидовЦен - ТаблицаЗначений - описание см. ИнициализироватьТаблицуВыбранныхЦен
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с колонками:
//   * Ссылка - СправочникСсылка.ВидыЦен - Вид цены
//   * Наименование - Строка - Наименование вида цен
//   * Статус - ПеречислениеСсылка.СтатусыДействияВидовЦен - Статус вида цен
//   * ПометкаУдаления - Булево - Признак пометки на удаление вида цен
//   * РеквизитДопУпорядочивания - Число - Реквизит доп упорядочивания
//   * УстанавливатьЦенуПриВводеНаОсновании - Булево - Устанавливать цену при вводе на основании
//   * СпособЗаданияЦены - ПеречислениеСсылка.СпособыЗаданияЦен - Способ задания цены
//   * Идентификатор - Строка - Идентификатор для формул
//   * ПорогСрабатывания - Число - Порог срабатывания
//   * ВалютаЦены - СправочникСсылка.Валюты - Валюта цены
//   * Формула - Строка - Формула
//   * БазовыйВидЦены - Строка - Идентификатор базового вида цены
//   * Наценка - Число - Наценка
//   * СхемаКомпоновкиДанных - Строка - Имя предопределенного макета схемы компоновки данных
//   * ЗапрещенныйВидЦены - Булево - Признак того, что вид цены запрещен
//   * ЦеновыеГруппы - ТаблицаЗначений - с колонками:
//     ** ЦеноваяГруппа - СправочникСсылка.ЦеновыеГруппы - Ценовая группа, для которой определяется алгоритм расчета цены
//     ** Формула - Строка - Определяет правила расчета цены для ценовой группы
//     ** БазовыйВидЦены - Строка - Идентификатор базового вида цены
//     ** Наценка - Число - Наценка
//   * ПорогиСрабатывания - ТаблицаЗначений - с колонками:
//     ** ЦеноваяГруппа - СправочникСсылка.ЦеновыеГруппы - Ценовая группа, для которой определяется алгоритм расчета цены
//     ** ПорогСрабатывания - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная - Определяет правила расчета цены для ценовой группы
//   * ВлияющиеВидыЦен - ТаблицаЗначений - с колонками:
//     ** ВлияющийВидЦен - СправочникСсылка.ВидыЦен - Влияющий вид цен
//   * ПравилаОкругленияЦены - ТаблицаЗначений - с колонками:
//     ** НижняяГраницаДиапазонаЦен - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная - Минимальное значение цены, начиная с которого применяется правило округления
//     ** ТочностьОкругления - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная - Определяет точность округления цены
//     ** ПсихологическоеОкругление - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная - Вычитать из результата
//   * ВариантОкругления - ПеречислениеСсылка.ВариантыОкругления - Вариант округления
//   * Уровень - Число - Уровень
//   * ВлияющиеЦены - СписокЗначений - Влияющие цены.
//   * ЗависимыеЦены - СписокЗначений - Зависимые цены.
//   * ИмяКолонки - Строка - Имя колонки.
//   * АдресСхемыКомпоновкиДанных - Строка - Адрес схемы компоновки данных.
//   * АдресНастроекСхемыКомпоновкиДанных - Строка - Адрес настроек схемы компоновки данных.
//   * НайденыОбязательныеПараметры - Булево - Найдены обязательные параметры.
//   * Параметры - Строка - Описание параметров.
//
Функция ЗагрузитьСправочникВидовЦен(Форма, НастройкиКомпоновкиДанных, МассивВидовЦен = Неопределено, ТаблицаНастроекВидовЦен = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК Ссылка,
	|	ВидыЦен.Наименование КАК Наименование,
	|	ВидыЦен.Статус КАК Статус,
	|	ВидыЦен.ПометкаУдаления КАК ПометкаУдаления,
	|	&ДанныеСправочника1,
	|	&ДанныеТаблицыНастроек1,
	|	ВидыЦен.УстанавливатьЦенуПриВводеНаОсновании КАК УстанавливатьЦенуПриВводеНаОсновании,
	|	ВидыЦен.СпособЗаданияЦены КАК СпособЗаданияЦены,
	|	ВидыЦен.Идентификатор КАК Идентификатор,
	|	ВидыЦен.ПорогСрабатывания КАК ПорогСрабатывания,
	|	ВидыЦен.ПорогСрабатыванияПриУменьшении КАК ПорогСрабатыванияПриУменьшении,
	|	ВидыЦен.ВалютаЦены КАК Валюта,
	|	ВидыЦен.Формула КАК Формула,
	|	ВидыЦен.БазовыйВидЦены.Идентификатор КАК БазовыйВидЦены,
	|	ВидыЦен.Наценка КАК Наценка,
	|	ВидыЦен.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
	|	ВЫБОР
	|		КОГДА НЕ ВидыЦен.Ссылка В (&РазрешенныеВидыЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещенныйВидЦены,
	|	ИСТИНА КАК ВидЦеныВМассиве,
	|	ВидыЦен.ЦеновыеГруппы.(
	|		ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		Формула КАК Формула,
	|		БазовыйВидЦены.Идентификатор КАК БазовыйВидЦены,
	|		Наценка КАК Наценка),
	|	ВидыЦен.ПорогиСрабатывания.(
	|		ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		ПорогСрабатывания КАК ПорогСрабатывания,
	|		ПорогСрабатыванияПриУменьшении КАК ПорогСрабатыванияПриУменьшении),
	|	ВидыЦен.Валюты.(
	|		ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		ВалютаЦены КАК Валюта),
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВлияющийВидЦен КАК ВлияющийВидЦен),
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		НижняяГраницаДиапазонаЦен КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления КАК ТочностьОкругления,
	|		ПсихологическоеОкругление КАК ПсихологическоеОкругление),
	|	ВидыЦен.ВариантОкругления КАК ВариантОкругления,
	|	ВидыЦен.ЗапретитьРедактированиеЦеныЗаПределамиОтбора КАК ЗапретитьРедактированиеЦеныЗаПределамиОтбора,
	|	ВидыЦен.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ВидыЦен.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	ВидыЦен.ХранилищеНастроекКомпоновкиДанныхОтбораПоНоменклатуре КАК ХранилищеНастроекКомпоновкиДанныхОтбораПоНоменклатуре,
	|	ДатыУстановкиЦен.Период КАК ДатаПоследнейУстановкиЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены,
	|		МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|	ИЗ
	|		&РегистрСведенийЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены) КАК ДатыУстановкиЦен
	|			ПО ДатыУстановкиЦен.ВидЦены = ВидыЦен.Ссылка
	|				,&ДанныеТаблицыНастроек2
	|			
	|ГДЕ
	|	НЕ ВидыЦен.ЭтоГруппа
	|УПОРЯДОЧИТЬ ПО
	|	&ДанныеТаблицыНастроек3,
	|	&ДанныеСправочника2,
	|	НижняяГраницаДиапазонаЦен ВОЗР");
	
	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистрСведенийЦеныНоменклатурыСрезПоследних", 
		"РегистрСведений.ЦеныНоменклатуры25.СрезПоследних");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистрСведенийЦеныНоменклатурыСрезПоследних", 
		"РегистрСведений.ЦеныНоменклатуры.СрезПоследних");
	КонецЕсли;
	
	Если МассивВидовЦен <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА КАК ВидЦеныВМассиве,", 
			"	ВЫБОР
			|		КОГДА ВидыЦен.Ссылка В (&МассивВидовЦен)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	 КОНЕЦ КАК ВидЦеныВМассиве,");
		Запрос.Параметры.Вставить("МассивВидовЦен", МассивВидовЦен);
	КонецЕсли;

	Если ТаблицаНастроекВидовЦен <> Неопределено Тогда
		Запрос.Параметры.Вставить("ТаблицаНастроекВидовЦен", ТаблицаНастроекВидовЦен);
		ТекстЗапросаОтборПоТаблице = "ВЫБРАТЬ
		|	ТаблицаНастроекВидовЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаНастроекВидовЦен.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ТаблицаНастроекВидовЦен
		|ИЗ &ТаблицаНастроекВидовЦен КАК ТаблицаНастроекВидовЦен 
		|;
		|";	
		Запрос.Текст = ТекстЗапросаОтборПоТаблице + Запрос.Текст;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеТаблицыНастроек1,", 
			"	ВЫБОР КОГДА ТаблицаНастроекВидовЦен.ВидЦены is not null
			|		ТОГДА ТаблицаНастроекВидовЦен.РеквизитДопУпорядочивания 
			|		ИНАЧЕ ВидыЦен.РеквизитДопУпорядочивания
			|	КОНЕЦ КАК РеквизитДопУпорядочивания,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ДанныеТаблицыНастроек2", 
			"ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНастроекВидовЦен
			|				ПО ВидыЦен.Ссылка = ТаблицаНастроекВидовЦен.ВидЦены");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеТаблицыНастроек3,", 
			"ТаблицаНастроекВидовЦен.РеквизитДопУпорядочивания,");

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеСправочника1,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеСправочника2,", "");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеТаблицыНастроек1,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ДанныеТаблицыНастроек2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеТаблицыНастроек3,", "");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеСправочника1,", 
			"ВидыЦен.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеСправочника2,", 
			"ВидыЦен.РеквизитДопУпорядочивания,");
		
	КонецЕсли;
		
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить(); // см. ЗагрузитьСправочникВидовЦен
	
	ТаблицаВидовЦен.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число"));
	ТаблицаВидовЦен.Колонки.Добавить("ВлияющиеЦены",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ЗависимыеЦены", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки",    Новый ОписаниеТипов("Строка"));
	// Служебные колонки для работы с настройками СКД
	ТаблицаВидовЦен.Колонки.Добавить("АдресСхемыКомпоновкиДанных",         Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("АдресНастроекСхемыКомпоновкиДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("НайденыОбязательныеПараметры", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЦен.Колонки.Добавить("Параметры",                    Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = Новый ТаблицаЗначений;
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Использование");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ВидЦены");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Имя");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Заголовок");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Значение");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ДоступныеЗначения");
	
	МассивУдаляемыхВидовЦен = Новый Массив();
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
		
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка, КэшДанных);
		
		ПараметрыМакета = Справочники.ВидыЦен.ИнициализироватьСтруктуруПарметровДляПолученияОписанияСхемКомпоновкиПоИмени();
		ПараметрыМакета.Ссылка 				= СтрокаВидаЦен.Ссылка;
		ПараметрыМакета.ИмяМакета 			= СтрокаВидаЦен.СхемаКомпоновкиДанных;
		ПараметрыМакета.ПолучитьНастройки 	= Ложь;
		ПараметрыМакета.ХранилищеСхемыКомпоновкиДанных 	= СтрокаВидаЦен.ХранилищеСхемыКомпоновкиДанных;
		ПараметрыМакета.ХранилищеНастроекКомпоновкиДанных 	= СтрокаВидаЦен.ХранилищеНастроекКомпоновкиДанных;
		ПараметрыМакета.ХранилищеНастроекКомпоновкиДанныхОтбораПоНоменклатуре 	= СтрокаВидаЦен.ХранилищеНастроекКомпоновкиДанныхОтбораПоНоменклатуре;
		ПараметрыМакета.ИспользуетсяЦенообразование25 	= ИспользуетсяЦенообразование25;
				
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ПараметрыМакета);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		
		Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре)
			И ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда

			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(
				СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор,
				СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре.Отбор,
				Ложь
			);
			
		КонецЕсли;
		
		// Параметры схема компоновки данных
		РазрешенныеИмена = УстановкаЦенВызовСервера.ИменаРазрешенныхПараметровСхемКомпоновкиДанных();
		Для Каждого ПараметрДанных Из СхемаКомпоновкиДанных.Параметры Цикл
			
			Если РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
				Если СтрНайти(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"&"+ПараметрДанных.Имя) Тогда
					СтрокаВидаЦен.НайденыОбязательныеПараметры = Истина;
				КонецЕсли;
			Иначе
				ПараметрДанных.ОграничениеИспользования = Истина;
				ПараметрДанных.ВключатьВДоступныеПоля   = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(
				Новый Структура("Имя, ВидЦены",ПараметрДанных.Имя, СтрокаВидаЦен.Ссылка));
			Если НайденныеСтроки.Количество() = 0
				И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено
				И Не ПараметрДанных.ОграничениеИспользования Тогда
				
				НовыйПараметр = ПараметрыСхемКомпоновкиДанныхВидовЦен.Добавить();
				НовыйПараметр.ВидЦены           = СтрокаВидаЦен.Ссылка;
				НовыйПараметр.Имя               = ПараметрДанных.Имя;
				НовыйПараметр.Заголовок         = ПараметрДанных.Заголовок;
				НовыйПараметр.Значение          = ПараметрДанных.Значение;
				НовыйПараметр.ДоступныеЗначения = ПараметрДанных.ПолучитьДоступныеЗначения();
				НовыйПараметр.Использование     = ПараметрДанных.Использование;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Настройки компоновки данных
		ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Найти(СтрокаВидаЦен.Ссылка, "ВидЦены");
		Если ПользовательскаяНастройка = Неопределено
			И СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
			
			ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Добавить();
			ПользовательскаяНастройка.ВидЦены                   = СтрокаВидаЦен.Ссылка;
			
			Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				УстановитьПривилегированныйРежим(Истина);
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				УстановитьПривилегированныйРежим(Ложь);
				
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				
				НастройкиПоУмолчанию = КомпоновщикНастроек.ПолучитьНастройки();
				СхемаИНастройки.НастройкиКомпоновкиДанных = НастройкиПоУмолчанию;
				Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре) Тогда
					КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных,СхемаИНастройки.НастройкиКомпоновкиДанных, СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре); 
				КонецЕсли;
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
			Иначе
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
			КонецЕсли;
			
			СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(
				СтрокаВидаЦен.Ссылка,
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен);
			
		ИначеЕсли ПользовательскаяНастройка = Неопределено
			И Не СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
			
			Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
				
				НастройкиПоУмолчанию = Новый НастройкиКомпоновкиДанных;
				КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(НастройкиПоУмолчанию, СхемаКомпоновкиДанных.НастройкиПоУмолчанию); 
				
				СхемаИНастройки.НастройкиКомпоновкиДанных = НастройкиПоУмолчанию;
				Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре) Тогда
					КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных,СхемаИНастройки.НастройкиКомпоновкиДанных, СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре); 
				КонецЕсли;
					
			КонецЕсли;
			
			СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(
				СтрокаВидаЦен.Ссылка,
				СхемаИНастройки.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен);
			
		Иначе
			
			СтруктураДанных = УстановкаЦенВызовСервера.ОписаниеПараметровСхемыКомпоновкиДанных(СтрокаВидаЦен.Ссылка,
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен);
			
		КонецЕсли;
		
		СтрокаВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
		Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
			СтрокаВидаЦен.АдресНастроекСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(
				СхемаИНастройки.НастройкиКомпоновкиДанных,
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре) Тогда
			СтрокаВидаЦен.АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре = ПоместитьВоВременноеХранилище(
				СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре,
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
		СтрокаВидаЦен.Параметры = СтруктураДанных.ОписаниеПараметров;
		
	КонецЦикла;
	
	Форма.АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен = ПоместитьВоВременноеХранилище(
		ПараметрыСхемКомпоновкиДанныхВидовЦен,
		Форма.УникальныйИдентификатор);
		
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		УдалитьВидЦен = Истина;
		Если СтрокаВидаЦен.ПометкаУдаления
			Или СтрокаВидаЦен.ЗапрещенныйВидЦены
			Или Не СтрокаВидаЦен.ВидЦеныВМассиве Тогда
			
			Если СтрокаВидаЦен.ЗависимыеЦены.Количество() <> 0 Тогда
				Для Каждого ВидЦены Из СтрокаВидаЦен.ЗависимыеЦены Цикл
					НайденноеЗначение = ТаблицаВидовЦен.Найти(ВидЦены.Значение, "Ссылка");
					Если НайденноеЗначение <> Неопределено Тогда
						Если Не НайденноеЗначение.ПометкаУдаления
							Или СтрокаВидаЦен.ВидЦеныВМассиве Тогда
							УдалитьВидЦен = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если УдалитьВидЦен
				И МассивУдаляемыхВидовЦен.Найти(СтрокаВидаЦен) = Неопределено
				И ((ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен")
					И Форма.Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены" , СтрокаВидаЦен.Ссылка)).Количество() = 0)
					Или Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен")) Тогда
				МассивУдаляемыхВидовЦен.Добавить(СтрокаВидаЦен);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ВидЦены Из СтрокаВидаЦен.ЗависимыеЦены Цикл
			Если МассивУдаляемыхВидовЦен.Найти(ТаблицаВидовЦен.Найти(ВидЦены.Значение, "Ссылка")) <> Неопределено Тогда
				УдаляемыеСтроки.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из УдаляемыеСтроки Цикл
			СтрокаВидаЦен.ЗависимыеЦены.Удалить(ЭлементМассива);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаляемыхВидовЦен Цикл
		ТаблицаВидовЦен.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

// Возвращает данные о видах цен поставщика.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица видов цен поставщика:
//   * Ссылка - СправочникСсылка.ВидыЦенПоставщиков - Вид цены поставщика
//   * Наименование - Строка - Наименование вида цен
//   * ПометкаУдаления - Булево - Признак пометки на удаление вида цен
//   * Валюта - СправочникСсылка.Валюты - Валюта цены
//   * ЦенаВключаетНДС - Булево - Цена включает НДС
//   * ЗапрещенныйВидЦены - Булево - Признак того, что вид цены запрещен
//   * ИмяКолонки - см. ИмяКолонкиПоВидуЦены
//
Функция ЗагрузитьСправочникВидовЦенПоставщика(Форма) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦен");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК Ссылка,
	|	ВидыЦен.Наименование КАК Наименование,
	|	ВидыЦен.ПометкаУдаления КАК ПометкаУдаления,
	|	ВидыЦен.Валюта КАК Валюта,
	|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ ВидыЦен.Ссылка В (&РазрешенныеВидыЦен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещенныйВидЦены
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.РеквизитДопУпорядочивания");
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Партнер") Тогда
		Запрос.Параметры.Вставить("Владелец", Форма.Объект.Партнер);
	Иначе
		Запрос.Параметры.Вставить("Владелец", Форма.Партнер);
	КонецЕсли;
	
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить(); // см. ЗагрузитьСправочникВидовЦенПоставщика
	
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка, КэшДанных);
	КонецЦикла;
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки компоновки данных:
//  * ВидЦены - СправочникСсылка.ВидыЦен - Виды цен
//  * НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных
//  * ПараметрыКомпоновкиДанных - ПараметрыКомпоновкиДанныхТаблицыСхемыЗапроса
//
Функция ЗагрузитьТаблицуНастройкиКомпоновкиДанных(Форма) Экспорт
	
	ТаблицаНастройкиКомпоновкиДанных = Новый ТаблицаЗначений;
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("НастройкиКомпоновкиДанных");
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ПараметрыКомпоновкиДанных");
	
	// Для существующего документа - загрузить настройки схем компоновки.
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка")
		И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатурыВидыЦен.ВидЦены                   КАК ВидЦены,
		|	УстановкаЦенНоменклатурыВидыЦен.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатурыВидыЦен
		|ГДЕ
		|	УстановкаЦенНоменклатурыВидыЦен.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ХранилищеНастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных;//ХранилищеЗначения
			НастройкиКомпоновкиДанных = ХранилищеНастройкиКомпоновкиДанных.Получить();
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				НоваяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
				НоваяСтрока.ВидЦены                   = Выборка.ВидЦены;
				НоваяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНастройкиКомпоновкиДанных;
	
КонецФункции

// Инициализирует на форма таблицу "Выбранные цены"
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  МассивВидовЦен - Массив из СправочникСсылка.ВидыЦен
//                 - Массив из СправочникСсылка.ВидыЦенПоставщиков
//  ТаблицаВидовЦен - ТаблицаЗначений - таблица видов цен
//
Процедура ИнициализироватьВыбранныеЦены(Форма, МассивВидовЦен = Неопределено, ТаблицаВидовЦен = Неопределено) Экспорт
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		ИнициализироватьВыбранныеЦеныПоставщика(Форма);
	Иначе
		ИнициализироватьВыбранныеЦеныНоменклатуры(Форма, МассивВидовЦен, ТаблицаВидовЦен);
	КонецЕсли;
	
КонецПроцедуры

// Перечитать выбранные цены
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
// 
Процедура ПеречитатьВыбранныеЦены(Форма) Экспорт
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
	
	ИнициализироватьВыбранныеЦены(Форма);
	
	Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = (ВидыЦен.Найти(СтрокаТЧ.Ссылка) <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаТовары - ТаблицаЗначений - таблица с добавляемыми товарами
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристики с добавленной строкой дерева цен.
//
Функция ДобавитьТоварыПоставщика(Форма, Знач ТаблицаТовары, КэшДанных) Экспорт
	
	ИспользоватьТаблицуЗначенийВместоДереваЗначений = ИспользоватьТаблицуЗначенийВместоДереваЗначений(Форма);
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Индекс                 КАК Индекс,
	|	Таблица.НоменклатураПартнера КАК НоменклатураПартнера,
	|	Таблица.Номенклатура           КАК Номенклатура,
	|	Таблица.Характеристика         КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&УсловиеПоНоменклатуре
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.НоменклатураПартнера              КАК НоменклатураПартнера,
	|	ТаблицаНоменклатура.НоменклатураПартнера.Наименование КАК Наименование,
	|	ТаблицаНоменклатура.Номенклатура                        КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.Артикул                КАК Артикул,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа          КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Характеристика                      КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс";
	
	Если Не ИспользоватьТаблицуЗначенийВместоДереваЗначений Тогда
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА МИНИМУМ(НоменклатураПартнера) <> МАКСИМУМ(НоменклатураПартнера)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ТОГДА NULL
		|		ИНАЧЕ МАКСИМУМ(НоменклатураПартнера)
		|	КОНЕЦ КАК НоменклатураПартнера,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
		|ПО
		|	Номенклатура
		|";
	КонецЕсли;
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура      КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика    КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка          КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента(Форма)));
	
	Если ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуре", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуре", "Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[2].Выгрузить(); // ТаблицаЗначений
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	ТаблицаНоменклатуры.Колонки.Добавить("СтрокаДереваЦен");
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен;
	Иначе
		ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
	КонецЕсли;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ЭлементНоменклатура = Неопределено;
		
		НоменклатураНеЗаполнена = Ложь;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
		
			ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, НоменклатураПартнера");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаНоменклатура);
			
			НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ЭлементНоменклатура = НайденнаяСтрока;
			Иначе
				
				ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
				УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
				
				НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
				НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
				НоваяСтрокаТЗ.ИдентификаторСтроки = ЭлементНоменклатура.ПолучитьИдентификатор();
				
				ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("Номенклатура", ВыборкаНоменклатура.Номенклатура);
					Если ИспользоватьТаблицуЗначенийВместоДереваЗначений Тогда
						ПараметрыПоиска.Вставить("Характеристика", ВыборкаНоменклатура.Характеристика);
					Иначе
						ПараметрыПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					КонецЕсли;
					
					НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
					Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
						ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		
		Иначе
			НоменклатураНеЗаполнена = Истина;
		КонецЕсли;
		
		Если НоменклатураНеЗаполнена
			Или (Не ИспользоватьТаблицуЗначенийВместоДереваЗначений
		     И Форма.ИспользоватьХарактеристикиНоменклатуры) Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если Не НоменклатураНеЗаполнена Тогда
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			КонецЕсли;
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Или НоменклатураНеЗаполнена Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, НоменклатураПартнера");
					ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаХарактеристики);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						Если Не НоменклатураНеЗаполнена Тогда
							ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
						Иначе
							ЭлементХарактеристика = ЭлементыНоменклатура.Добавить();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						НоваяСтрокаТЗ.ИдентификаторСтроки = ЭлементХарактеристика.ПолучитьИдентификатор();
						
						ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
						
						Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура;
							ПараметрыПоиска.Вставить("Номенклатура", ЭлементХарактеристика.Номенклатура);
							ПараметрыПоиска.Вставить("Характеристика", ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаТовары - ТаблицаЗначений - таблица с добавляемыми товарами
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристики с добавленной строкой дерева цен.
//
Функция ДобавитьТовары(Форма, Знач ТаблицаТовары, КэшДанных) Экспорт
	
	Если ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных) Тогда
		Возврат ДобавитьТоварыПоставщика(Форма, ТаблицаТовары, КэшДанных);
	Иначе
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			Возврат ДобавитьТоварыПредприятия2_5(Форма, ТаблицаТовары, КэшДанных);
		Иначе
			Возврат ДобавитьТоварыПредприятия(Форма, ТаблицаТовары, КэшДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  АдресВоВременномХранилище - Строка - Адрес таблицы товаров во временном хранилище
//  ТаблицаТовары - ТаблицаЗначений - Добавляемые товары
//  ЗаполняемыйВидЦен - СправочникСсылка.ВидыЦен - К ценам по данному виду цен будет добавлен признак ручного изменения
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  ОбновлятьСтарыеЦены - Булево - Истина, вызывать обновление старых цен
Процедура ДобавитьТоварыПоОтбору(Форма,
	                           АдресВоВременномХранилище,
	                           Знач ТаблицаТовары = Неопределено,
	                           ЗаполняемыйВидЦен = Неопределено,
	                           КэшДанных = Неопределено,
	                           ОбновлятьСтарыеЦены = Истина) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных);
	
	Если ТаблицаТовары = Неопределено Тогда
		ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНоменклатуры = ДобавитьТовары(Форма, ТаблицаТовары, КэшДанных);
	
	Если ОбновлятьСтарыеЦены Тогда
		ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных, ТаблицаНоменклатуры);
	КонецЕсли;
	
	МассивСтрокВидовЦен = Неопределено;
	
	// Заполним цены по выбранному виду цен
	Если ЗначениеЗаполнено(ЗаполняемыйВидЦен) Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(Форма, СтрокаТаблицы, КэшДанных);
			
			НоваяЦена = СтрокаТаблицы.Цена;
			ИмяКолонкиВидаЦены = ИмяКолонкиПоВидуЦены(ЗаполняемыйВидЦен, КэшДанных);
			
			ОбновитьДанныеВСтрокеПоЦенамУпаковкам(СтрокаДереваЦен, Новый Структура("ИспользоватьУпаковкиНоменклатуры, НоваяЦена, Упаковка, ИмяКолонкиВидаЦены", Форма.ИспользоватьУпаковкиНоменклатуры, НоваяЦена, СтрокаТаблицы.Упаковка, ИмяКолонкиВидаЦены));
		КонецЦикла;
		
		// исключим устанавливаемый вид цен из последующего автоматического расчета
		МассивСтрокВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
		
		ИндексЗаполняемогоВидаЦен = 0;
		Для Каждого Элемент Из МассивСтрокВидовЦен Цикл
			Если Элемент.Ссылка = ЗаполняемыйВидЦен Тогда
				МассивСтрокВидовЦен.Удалить(ИндексЗаполняемогоВидаЦен);
				Прервать;
			КонецЕсли; 
			ИндексЗаполняемогоВидаЦен = ИндексЗаполняемогоВидаЦен + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	// Автоматический расчет цен
	Если НЕ ЭтоРегистрацияЦенПоставщика
		И Форма.РассчитыватьАвтоматически Тогда
		
		СтруктураПараметров = Новый Структура();
		Если ЗначениеЗаполнено(ЗаполняемыйВидЦен) и МассивСтрокВидовЦен <> Неопределено Тогда
			СтруктураПараметров.Вставить("МассивСтрокВидовЦен", МассивСтрокВидовЦен);
		Иначе
			СтруктураПараметров.Вставить("МассивСтрокВидовЦен", УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма));
		КонецЕсли;
		
		ЗагрузитьЗначенияБазовыхЦен(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			СтруктураПараметров);
			
		ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры, МассивСтрокВидовЦен,, КэшДанных);
		
		РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных, МассивСтрокВидовЦен);
		
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
	
		// Установим последнюю добавленную строку текущей
		Если ТаблицаНоменклатуры.Количество() > 0 Тогда
			Форма.Элементы.ДеревоЦен.ТекущаяСтрока = ТаблицаНоменклатуры[ТаблицаНоменклатуры.Количество()-1].СтрокаДереваЦен.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если НЕ ЭтоРегистрацияЦенПоставщика Тогда
			УстановитьПометкуИзмененныхФормул(Форма);
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

Процедура ОбновитьДанныеВСтрокеПоЦенамУпаковкам(СтрокаДереваЦен, ПараметрыЗаполнения)
	ИмяКолонкиВидаЦены = ПараметрыЗаполнения.ИмяКолонкиВидаЦены;
	
	Если СтрокаДереваЦен[ИмяКолонкиВидаЦены] <> ПараметрыЗаполнения.НоваяЦена Тогда
		
		СтрокаДереваЦен[ИмяКолонкиВидаЦены] = ПараметрыЗаполнения.НоваяЦена;
		СтрокаДереваЦен["ИзмененаВручную"       + ИмяКолонкиВидаЦены] = Истина;
		СтрокаДереваЦен["ИзмененаАвтоматически" + ИмяКолонкиВидаЦены] = Ложь;
		
		Если СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены] <> 0 Тогда
			СтрокаДереваЦен["ПроцентИзменения"+ИмяКолонкиВидаЦены] = Окр(100*(СтрокаДереваЦен[ИмяКолонкиВидаЦены] - СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены])/СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены],5,2);
			СтрокаДереваЦен["СуммаИзменения"+ИмяКолонкиВидаЦены] = СтрокаДереваЦен[ИмяКолонкиВидаЦены] - СтрокаДереваЦен["СтараяЦена"+ИмяКолонкиВидаЦены];
		Иначе
			СтрокаДереваЦен["ПроцентИзменения"+ИмяКолонкиВидаЦены] = 0;
			СтрокаДереваЦен["СуммаИзменения"+ИмяКолонкиВидаЦены] = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ИспользоватьУпаковкиНоменклатуры Тогда
		
		СтрокаДереваЦен["Упаковка" + ИмяКолонкиВидаЦены] = ПараметрыЗаполнения.Упаковка;
		
	КонецЕсли;
КонецПроцедуры

// Осуществляет расчет цен в строке по идентификатору
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ИдентификаторСтроки - Число - Идентификатор строки
//  ЗагружатьЦеныИзИБ - Булево - Указывает на необходимость загрузки цен из информационной базы
//  ИзмененноеПоле - Строка - поле, в котором изменена цена
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
Процедура РассчитатьЦеныПоИдентификаторуСтроки(Форма,
	                                         ИдентификаторСтроки,
	                                         ЗагружатьЦеныИзИБ = Ложь,
	                                         ИзмененноеПоле = Неопределено,
                                             КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	
	ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), СтрокаТаблицыЦен, "Номенклатура, Характеристика");
	
	ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры И ЭлементыХарактеристики.Количество() > 0 Тогда
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), ЭлементХарактеристика, "Номенклатура, Характеристика");
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокВидовЦен", УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма));
			
			ЗагрузитьЗначенияБазовыхЦен(
				Форма,
				ТаблицаНоменклатуры,
				КэшДанных,
				СтруктураПараметров);
			ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
			
		КонецЕсли;
		
		РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных,,,ИзмененноеПоле);
		
	Иначе
		
		УстановитьПризнакРучногоИзмененияВычисляемыхЦен(Форма, ТаблицаНоменклатуры, ИзмененноеПоле, КэшДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет цен в строке по идентификатору
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ИдентификаторСтроки - Число - 
//  ЗагружатьЦеныИзИБ - Булево - Указывает на необходимость загрузки цен из информационной базы
//  ИзмененноеПоле - Строка - поле, в котором изменена цена.
//  КэшДанных - см. УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных
//
Процедура РассчитатьЦеныПоИдентификаторуСтроки2_5(Форма,
	                                         ИдентификаторСтроки,
	                                         ЗагружатьЦеныИзИБ = Ложь,
	                                         ИзмененноеПоле = Неопределено,
                                             КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	
	ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), СтрокаТаблицыЦен, "Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");
	
	ДобавитьПодчиненныеЭлементы(ТаблицаНоменклатуры, СтрокаТаблицыЦен);
	
	Если Форма.РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокВидовЦен", УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма));
			
			ЗагрузитьЗначенияБазовыхЦен(
				Форма,
				ТаблицаНоменклатуры,
				КэшДанных,
				СтруктураПараметров);
			
			ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
			
		КонецЕсли;
		
		РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных,,,ИзмененноеПоле);
		
	Иначе
		
		УстановитьПризнакРучногоИзмененияВычисляемыхЦен(Форма, ТаблицаНоменклатуры, ИзмененноеПоле, КэшДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает цены в таблице цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ПараметрыРасчета - Структура - Параметры расчета
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура РассчитатьЦены(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		Если ТипЗнч(ВидЦены) = Тип("Структура") Тогда
			МассивВидовЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены.ВидЦены));
		Иначе
			МассивВидовЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма, Ложь);
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
		Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			СтрокаТаблицыЦен           = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЦен);
			Если Форма.ИспользуетсяЦенообразование25 Тогда
				НоваяСтрока.УпаковкаЦОДляСвязи = ?(СтрокаТаблицыЦен.УпаковкаЦО = СтрокаТаблицыЦен.ЕдиницаИзмерения, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаТаблицыЦен.УпаковкаЦО);
				НоваяСтрока.СерияЦОДляСвязи    = ?(СтрокаТаблицыЦен.СерияЦО.Предопределенный, Справочники.СерииНоменклатурыДляЦенообразования.ПустаяСсылка(), СтрокаТаблицыЦен.СерияЦО);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыРасчета.ЗагрузкаСтарыхЦен Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивСтрокВидовЦен",  МассивВидовЦен);
		СтруктураПараметров.Вставить("ДатаДокумента",        ПараметрыРасчета.ДатаСтарыхЦен);
		СтруктураПараметров.Вставить("ПроцентИзмененияЦены", ПараметрыРасчета.ПроцентИзмененияЦены);
		СтруктураПараметров.Вставить("ПрименятьОкругление",  ПараметрыРасчета.ПрименятьОкругление);
		СтруктураПараметров.Вставить("ТолькоНезаполненные",  ПараметрыРасчета.ТолькоНезаполненные);
	
		ЗагрузитьЗначенияБазовыхЦен(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			СтруктураПараметров);
			
	КонецЕсли;
	
	Если ПараметрыРасчета.ОкруглениеРучныхЦен Тогда
		ПрименитьОкруглениеКРучнымЦенам(Форма, ТаблицаНоменклатуры, МассивВидовЦен, КэшДанных);
	КонецЕсли;
	
	Если ПараметрыРасчета.РасчетПоФормулам Тогда
		
		Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен Тогда 
			ЗагрузитьЗначенияБазовыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
		КонецЕсли;

		ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры, МассивВидовЦен, ПараметрыРасчета.ТолькоНезаполненные, КэшДанных);
		
		РассчитатьВычисляемыеЦены(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			?(Не ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено),
			ПараметрыРасчета.ТолькоНезаполненные,
			,
			ПараметрыРасчета.ВидыЦен);
		
	КонецЕсли;
	
	Если Форма.РассчитыватьАвтоматически Тогда

		// Список видов цен, которые, которые зависят от изменяемых
		ЗависимыеЦены = ПолучитьСтрокиНастроекЗависимыхВидовЦен(Форма, МассивВидовЦен);
	
		РассчитатьВычисляемыеЦены(
			Форма,
			ТаблицаНоменклатуры,
			КэшДанных,
			ЗависимыеЦены,
			ПараметрыРасчета.ТолькоНезаполненные);
			
	КонецЕсли;
		
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево") И ПараметрыРасчета.РасчетПоФормулам Тогда
		Для Каждого ВидЦеныДляОбработки Из МассивВидовЦен Цикл //ДанныеФормыЭлементКоллекции
			УстановитьПометкуИзмененныхФормул(Форма,,ВидЦеныДляОбработки.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Рассчитывает цены в таблице цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ПараметрыРасчета - Структура
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ЗаполнитьЦеныИзДокументов(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		МассивВидовЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены));
	КонецЦикла;
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
	
	ЗагрузитьЗначенияЦенИзДокументов(
			Форма,
			ТаблицаНоменклатуры,
			МассивВидовЦен,
			ПараметрыРасчета.Документы,
			КэшДанных);
	
КонецПроцедуры

// Загружает значения базовых цен в таблицу
//
// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен
//  МассивСтрокВидовЦен - Массив из СправочникСсылка.ВидыЦен - 
//                      - Массив из СправочникСсылка.ВидыЦенПоставщиков - 
//  ДокументыУстановкиЦен - Массив из ДокументСсылка.УстановкаЦенНоменклатуры - 
// 	КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ЗагрузитьЗначенияЦенИзДокументов(Форма,
	                                       ТаблицаНоменклатуры,
	                                       МассивСтрокВидовЦен = Неопределено,
	                                       ДокументыУстановкиЦен,
	                                       КэшДанных = Неопределено) Экспорт
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		МассивСтрокВидовЦен = Новый Массив();
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЦены(Форма, ТаблицаНоменклатуры, МассивСтрокВидовЦен, КэшДанных);
	
	Если МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка       КАК Упаковка,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	МАКСИМУМ(Товары.Цена) КАК Цена
			|ИЗ
			|	Документ.УстановкаЦенНоменклатуры.Товары КАК Товары
			|ГДЕ
			|	(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|					ИЗ
			|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
			|	И ВидЦены В (&ВидыЦен)
			|	И Товары.Ссылка В (&Документы)
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Упаковка,
			|	ВидЦены
			|");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",  ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен",   ВидыЦен);
		Запрос.УстановитьПараметр("Документы", ДокументыУстановкиЦен);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
		Иначе
			СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
		КонецЕсли;
		
		ЗагрузитьЦеныИзТаблицыЗначений(Форма, Выгрузка, СоответствиеКоэффициентовУпаковокНоменклатуры, КэшДанных);
		
		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет базовых, заполняемых по данным информационной базы и рассчитываемых цен.
// 
// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
Процедура РассчитатьВсеЦены(Форма, КэшДанных) Экспорт
	
	Форма.Модифицированность = Истина;
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
	
	ЗагрузитьЗначенияБазовыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
	ВычислитьЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры,,,КэшДанных);
	
	РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных);
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  ВидыЦен - Массив из СправочникСсылка.ВидыЦен - 
//          - Массив из СправочникСсылка.ВидыЦенПоставщиков -  
//  ТолькоНезаполненные - Булево - Указывает на необходимость расчета ранее заполненных цен
//  ИзмененноеПоле - Строка - Наименование измененного поля
//  МассивФормул - Массив - Данные по формулам
//
Процедура РассчитатьВычисляемыеЦены(Форма,
									ТаблицаНоменклатуры,
									КэшДанных,
									ВидыЦен = Неопределено,
									ТолькоНезаполненные = Ложь,
									ИзмененноеПоле = Неопределено,
									МассивФормул  = Неопределено) Экспорт

	Форма.Модифицированность = Истина;
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма,ТаблицаНоменклатуры,КэшДанных);
	Иначе
		ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
		Иначе
			СтрокаИзмененныйВидЦены = УстановкаЦенКлиентСервер.СтрокаВидаЦеныПоИмениПоля(Форма.ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КурсыВалют(Форма, КэшДанных);

	ФормулыДляРасчета = НоваяТаблицаФормулДляРасчета();

	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, ПозицияНоменклатуры, КэшДанных);
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		Для Каждого ВидЦены Из ВидыЦен Цикл
			
			Если Не ВидЦены.ФормулаРедактируется Тогда
				Продолжить;
			КонецЕсли;

			Если Не ТолькоНезаполненные Тогда
				СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
			КонецЕсли;
			
			Если СтрокаТаблицыЦен["ЗапретРедактирования" + ВидЦены.ИмяКолонки] Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
			Если ТекущаяЦена = 0 Или Не ТолькоНезаполненные Тогда
				
				Формула = "";
				ФормулаПоУмолчанию = "";
				
				Если МассивФормул <> Неопределено И ТипЗнч(МассивФормул[0]) = Тип("Структура") Тогда
					Для Каждого Эл Из МассивФормул Цикл
						Если Эл.ВидЦены = ВидЦены.Ссылка Тогда
							Формула = Эл.Формула;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Формула = СтрокаТаблицыЦен["Формула" + ВидЦены.ИмяКолонки];
				КонецЕсли;
				
				ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
				Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
					ФормулаПоУмолчанию = ЦеновыеГруппыАлгоритмов[0].Формула;
				Иначе
					ФормулаПоУмолчанию = ВидЦены.Формула;
				КонецЕсли;
				
				ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
				Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
					ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					ПорогСрабатыванияПриУменьшении = ЦеновыеГруппыПорогов[0].ПорогСрабатыванияПриУменьшении;
				Иначе
					ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					ПорогСрабатыванияПриУменьшении = ВидЦены.ПорогСрабатыванияПриУменьшении;
				КонецЕсли;
				
				Формула = ?(Формула = "", ФормулаПоУмолчанию, Формула);
				ПредставлениеФормулы = Формула;
				ПредставлениеФормулыПоУмолчанию = ФормулаПоУмолчанию;
				
				Если Формула = "" Тогда
					Продолжить;
				КонецЕсли;

				ЗаполнятьФормулуПоУмолчанию = ФормулаПоУмолчанию <> Формула;
				Для Каждого БазоваяЦена Из ВидЦены.ВлияющиеЦены Цикл
					
					СтрокаБазовойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, БазоваяЦена.Значение);
					ВалютаБазовойЦены     =  ?(Значениезаполнено(СтрокаТаблицыЦен["Валюта" + СтрокаБазовойЦены.ИмяКолонки]), СтрокаТаблицыЦен["Валюта" + СтрокаБазовойЦены.ИмяКолонки], СтрокаБазовойЦены.Валюта);
					Если ЗначениеЗаполнено(СтрокаТаблицыЦен["Валюта" + ВидЦены.ИмяКолонки]) Тогда
						ВалютаЦены = СтрокаТаблицыЦен["Валюта" + ВидЦены.ИмяКолонки];
					Иначе
						ЦеновыеГруппыВалют = ВидЦены.Валюты.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
						Если ЦеновыеГруппыВалют.Количество() > 0 Тогда
							ВалютаЦены = ЦеновыеГруппыВалют[0].Валюта;
						Иначе
							ВалютаЦены = ВидЦены.Валюта;
						КонецЕсли;
						СтрокаТаблицыЦен["Валюта" + ВидЦены.ИмяКолонки] = ВалютаЦены;
					КонецЕсли;					
					СтрокаПересчетаВалюты   = УстановкаЦенКлиентСервер.СтрокаПересчетаВалюты(ВалютаБазовойЦены, ВалютаЦены, КэшДанных.КурсыВалют);
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						СтрокаПересчетаУпаковок = УстановкаЦенКлиентСервер.СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, СтрокаБазовойЦены, ВидЦены, ТаблицаКоэффициентовУпаковокНоменклатуры);
					Иначе
						СтрокаПересчетаУпаковок = "";
					КонецЕсли;
					СтрокаЗамены = " Параметры.СтрокаТаблицыЦен." + СтрокаБазовойЦены.ИмяКолонки + " " + СтрокаПересчетаУпаковок + СтрокаПересчетаВалюты;
					Формула = СтрЗаменить(Формула, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
					
					Если ЗаполнятьФормулуПоУмолчанию Тогда
						ФормулаПоУмолчанию = СтрЗаменить(ФормулаПоУмолчанию, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗаполнятьФормулуПоУмолчанию И ПредставлениеФормулы = Формула Тогда
					Формула = ФормулаПоУмолчанию;
					ПредставлениеФормулы = ПредставлениеФормулыПоУмолчанию;
				КонецЕсли;

				НоваяСтрокаФормулы = ФормулыДляРасчета.Добавить();
				НоваяСтрокаФормулы.СтрокаТаблицыЦен = СтрокаТаблицыЦен;
				НоваяСтрокаФормулы.ВидЦены = ВидЦены;
				НоваяСтрокаФормулы.Формула = Формула;
				НоваяСтрокаФормулы.ПредставлениеФормулы = ПредставлениеФормулы;
				НоваяСтрокаФормулы.ПредставлениеФормулыПоУмолчанию = ПредставлениеФормулыПоУмолчанию;
				НоваяСтрокаФормулы.ПорогСрабатывания = ПорогСрабатывания;
				НоваяСтрокаФормулы.ПорогСрабатыванияПриУменьшении = ПорогСрабатыванияПриУменьшении;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Параметры = Новый Структура();
	Параметры.Вставить("ФормулыДляРасчета", ФормулыДляРасчета);
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
		Параметры.Вставить("СсылкаНаОбъект", Форма.Объект.Ссылка);
	Иначе
		Параметры.Вставить("СсылкаНаОбъект", Неопределено);
	КонецЕсли;
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме("УстановкаЦенСервер.РассчитатьФормулыВБезопасномРежиме(Параметры)", Параметры);

КонецПроцедуры

// Процедура - Рассчитать формулы в безопасном режиме
// Рассчитывает формулы построчно для переданной таблицы. Вызывается с предварительной установкой безопасного режима.
// Параметры:
//  Параметры	 - Структура - Структура параметров с обязательными реквизитами:
//	* ФормулыДляРасчета - ТаблицаЗначений
//	* СсылкаНаОбъект    - ДокументСсылка, Неопределено - (в случае, если ссылка отсутствует).
//
Процедура РассчитатьФормулыВБезопасномРежиме(Параметры) Экспорт

	СсылкаНаОбъект = Параметры.СсылкаНаОбъект;
	ФормулыДляРасчета = Параметры.ФормулыДляРасчета;

	Для Каждого ФормулаДляРасчета Из ФормулыДляРасчета Цикл

		СтрокаТаблицыЦен = ФормулаДляРасчета.СтрокаТаблицыЦен;
		ВидЦены = ФормулаДляРасчета.ВидЦены;

		Попытка

			Параметры = Новый Структура("СтрокаТаблицыЦен", СтрокаТаблицыЦен);
			ЗначениеЦены = Вычислить(ФормулаДляРасчета.Формула);
			ЗначениеЦены = УстановкаЦенКлиентСервер.ОкруглитьЦену(ЗначениеЦены, ВидЦены);
			
			Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
				ПроцентИзменения = Окр(100*(ЗначениеЦены - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки])/СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки],5,2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если (ФормулаДляРасчета.ПорогСрабатывания = 0 И ФормулаДляРасчета.ПорогСрабатыванияПриУменьшении = 0) 
				Или СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
				Или ?(ПроцентИзменения > 0, ПроцентИзменения >= ФормулаДляРасчета.ПорогСрабатывания, -ПроцентИзменения >= ФормулаДляРасчета.ПорогСрабатыванияПриУменьшении) Тогда
				
				СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
				Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
					СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
				Иначе
					СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
				СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
			КонецЕсли;
			
			СтрокаТаблицыЦен["СуммаИзменения" + ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
			СтрокаТаблицыЦен["Формула" + ВидЦены.ИмяКолонки] = ФормулаДляРасчета.ПредставлениеФормулы;
			
			СтрокаТаблицыЦен["ФормулаИзмененаВручную" + ВидЦены.ИмяКолонки] = (ФормулаДляРасчета.ПредставлениеФормулы <> ФормулаДляРасчета.ПредставлениеФормулыПоУмолчанию);
			СтрокаТаблицыЦен["ИзмененаВручную"        + ВидЦены.ИмяКолонки] = Ложь;
			СтрокаТаблицыЦен["ИзмененаАвтоматически"  + ВидЦены.ИмяКолонки] = Истина;
			
		Исключение
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
				ТекстСообщения = НСтр("ru = 'Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%. Проверьте корректность формулы.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Для номенклатуры ""%Номенклатура%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%. Проверьте корректность формулы.'");
			КонецЕсли;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦены%"       , ВидЦены.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%"  , СтрокаТаблицыЦен.Номенклатура);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", СтрокаТаблицыЦен.Характеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если СсылкаНаОбъект <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					СсылкаНаОбъект,
					"ДеревоЦен");
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"ДеревоЦен");
			КонецЕсли;
			
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Вычисляет цены, рассчитываемые по данным информационной базы
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо заполнить цены
//  МассивСтрокВидовЦен - Массив из СправочникСсылка.ВидыЦен - 
//                      - Массив из СправочникСсылка.ВидыЦенПоставщиков -  
//  ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен.
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ВычислитьЦеныПоДаннымИБ(Форма,
	                              ТаблицаНоменклатуры,
	                              МассивСтрокВидовЦен = Неопределено,
	                              ТолькоНезаполненные = Ложь,
	                              КэшДанных) Экспорт
	
	Форма.Модифицированность = Истина;
	
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
			Если СтрокаВидЦены.Выбрана 
				И СтрокаВидЦены.Редактировать
				И (СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам 
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам 
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости) Тогда
				ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВидыЦенПоДаннымИБ = Новый Массив(); // Массив из СправочникСсылка.ВидыЦен, Массив из СправочникСсылка.ВидыЦенПоставщиков
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			
			НайденнаяСтрока = Неопределено;
			Для Каждого ТекСтрока Из Форма.ВыбранныеЦены Цикл
				НайденнаяСтрока = ТекСтрока;
				Если ТекСтрока.Ссылка = СтрокаВидЦены.Ссылка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					Или НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
					Или НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления 
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков
					Или НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам
					Или НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам
					Или НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости Тогда
					ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ТолькоНезаполненные Тогда
		ОчиститьЦены(Форма, ТаблицаНоменклатуры, ВидыЦенПоДаннымИБ, КэшДанных);
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
	
		ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаНастройкиКомпоновкиДанных);		
	
	ИначеЕсли ТипЗнч(Форма) = Тип("Структура") Тогда
	
		ТаблицаНастройкиКомпоновкиДанных = Форма.ТаблицаНастройкиКомпоновкиДанных;
	
	КонецЕсли; 
		
	Для Каждого ВидЦеныПоДаннымИБ Из ВидыЦенПоДаннымИБ Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦеныПоДаннымИБ.Ссылка);
		Если ИспользуетсяЦенообразование25 Тогда
			ВычислитьЗначенияЦеныПоДаннымИБ2_5(Форма, ТаблицаНоменклатуры, ВидЦеныПоДаннымИБ, ТолькоНезаполненные, ?(НайденнаяСтрока <> Неопределено,НайденнаяСтрока.НастройкиКомпоновкиДанных,Неопределено), КэшДанных);
		Иначе
			ВычислитьЗначенияЦеныПоДаннымИБ(Форма, ТаблицаНоменклатуры, ВидЦеныПоДаннымИБ, ТолькоНезаполненные, ?(НайденнаяСтрока <> Неопределено,НайденнаяСтрока.НастройкиКомпоновкиДанных,Неопределено), КэшДанных);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет товары без измененных цен из дерева цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ПоИзменениямЗаДень - Булево
//
Процедура УдалитьТоварыБезИзмененныхЦен(Форма, ПоИзменениямЗаДень = Ложь) Экспорт
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	УдаляемыеЭлементыНоменклатура = Новый Массив;
	УдаляемыеЭлементыХарактеристики = Новый Массив;
	
	ВыборкаНоменклатуры = Форма.ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ЭлементНоменклатура Из ВыборкаНоменклатуры Цикл
		
		УдаляемыеЭлементыХарактеристики.Очистить();
		
		ВыборкаХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ВыборкаХарактеристика Цикл
			
			ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ЭлементХарактеристика, ВидыЦен, ПоИзменениямЗаДень);
			Если НЕ ЦеныИзменены Тогда
				УдаляемыеЭлементыХарактеристики.Добавить(ЭлементХарактеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементХарактеристика Из УдаляемыеЭлементыХарактеристики Цикл
			ВыборкаХарактеристика.Удалить(ЭлементХарактеристика);
		КонецЦикла;
		
		ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ЭлементНоменклатура, ВидыЦен, ПоИзменениямЗаДень);
		Если НЕ ЦеныИзменены И ВыборкаХарактеристика.Количество() = 0 Тогда
			УдаляемыеЭлементыНоменклатура.Добавить(ЭлементНоменклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементНоменклатура Из УдаляемыеЭлементыНоменклатура Цикл
		ВыборкаНоменклатуры.Удалить(ЭлементНоменклатура);
	КонецЦикла;
	
	УстановитьПометкуИзмененныхФормул(Форма);
	
КонецПроцедуры

// Изменяет цены на процент
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ПараметрыРасчета - Структура - Структура параметров расчета
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ИзменитьЦеныНаПроцент(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	
	Параметры = Новый Структура();
	Параметры.Вставить("Операция", 							"ИзменитьЦеныНаПроцент");
	Параметры.Вставить("ДеревоЦенЭтоДанныеФормыДерево", 	(ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево")));
	Параметры.Вставить("ИспользуетсяЦенообразование25", 	Форма.ИспользуетсяЦенообразование25);
	Параметры.Вставить("ДобавлятьВсеСтроки", 				Ложь);
	Параметры.Вставить("ИзменятьПоОтношениюКСтаройЦене", 	ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене);
	Параметры.Вставить("ВидыЦен", 							ПараметрыРасчета.ВидыЦен);
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ПрименитьИзмененияВДереве(Параметры, Форма.ДеревоЦен, ТаблицаНоменклатуры,,КэшДанных);
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			
			СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			ПрименитьИзмененияВДереве(Параметры, СтрокаТаблицыЦен, ТаблицаНоменклатуры,,КэшДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
		ВидыЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаМассива.ВидЦены));
	КонецЦикла;	
	
	Если ПараметрыРасчета.ПрименятьОкругление Тогда
		ПрименитьОкруглениеКРучнымЦенам(Форма, ТаблицаНоменклатуры, ВидыЦен, КэшДанных);
	КонецЕсли;
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = ПолучитьСтрокиНастроекЗависимыхВидовЦен(Форма, ВидыЦен);
	
	Если Форма.РассчитыватьАвтоматически Тогда
		РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных, ЗависимыеЦены, Ложь);
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма, ТаблицаНоменклатуры, ЗависимыеЦены, КэшДанных);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает для выделенных строк заданные цены 
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ПараметрыРасчета - Структура - Структура параметров расчета
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ИзменитьЦены(Форма, ПараметрыРасчета, КэшДанных = Неопределено) Экспорт
	
	Форма.Модифицированность = Истина;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	
	Параметры = Новый Структура();
	Параметры.Вставить("Операция", 							"ИзменитьЦены");
	Параметры.Вставить("ДеревоЦенЭтоДанныеФормыДерево", 	(ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево")));
	Параметры.Вставить("ИспользуетсяЦенообразование25", 	Форма.ИспользуетсяЦенообразование25);
	Параметры.Вставить("ДобавлятьВсеСтроки", 				Ложь);
	Параметры.Вставить("ИзменятьПоОтношениюКСтаройЦене", 	ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене);
	Параметры.Вставить("ВидыЦен", 							ПараметрыРасчета.ВидыЦен);
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ПрименитьИзмененияВДереве(Параметры, Форма.ДеревоЦен, ТаблицаНоменклатуры,,КэшДанных);
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из Форма.Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			
			СтрокаТаблицыЦен = Форма.ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			ПрименитьИзмененияВДереве(Параметры, СтрокаТаблицыЦен, ТаблицаНоменклатуры,,КэшДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
		ВидыЦен.Добавить(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаМассива.ВидЦены));
	КонецЦикла;
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = ПолучитьСтрокиНастроекЗависимыхВидовЦен(Форма, ВидыЦен);
	
	Если Форма.РассчитыватьАвтоматически Тогда
		РассчитатьВычисляемыеЦены(Форма, ТаблицаНоменклатуры, КэшДанных, ЗависимыеЦены, Ложь);
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма, ТаблицаНоменклатуры, ЗависимыеЦены, КэшДанных);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет загрузку базовых цен в таблицу цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 
Процедура ЗагрузитьБазовыеЦены(Форма, КэшДанных) Экспорт
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен(Форма);
	ЗагрузитьЗначенияБазовыхЦен(Форма, ТаблицаНоменклатуры, КэшДанных);
	
КонецПроцедуры

// Загружает значения базовых цен в таблицу
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
// 	ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен
// 	КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 	ДополнительныеПараметры - Структура - содержит:
// 	* МассивСтрокВидовЦен - Массив из СправочникСсылка.ВидыЦен - Массив видов цен
//                        - Массив из СправочникСсылка.ВидыЦенПоставщиков -  
// 	* ДатаДокумента - Дата - Дата загрузки цен
// 	* ПроцентИзмененияЦены - Число - Процент, на который необходимо изменить цену
// 	* ПрименятьОкругление - Булево - Указывает на необходимость применения округления.
//
Процедура ЗагрузитьЗначенияБазовыхЦен(Форма,
	                                  ТаблицаНоменклатуры,
	                                  КэшДанных,
	                                  ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура(); // см. ЗагрузитьЗначенияБазовыхЦен.ДополнительныеПараметры
	СтруктураПараметров.Вставить("МассивСтрокВидовЦен",  Неопределено);
	СтруктураПараметров.Вставить("ДатаДокумента",        Неопределено);
	СтруктураПараметров.Вставить("ПроцентИзмененияЦены", 0);
	СтруктураПараметров.Вставить("ПрименятьОкругление",  Ложь);
	СтруктураПараметров.Вставить("ТолькоНезаполненные",  Ложь);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров , ДополнительныеПараметры);
	КонецЕсли;
	
	Если СтруктураПараметров.МассивСтрокВидовЦен = Неопределено Тогда
		
		СтруктураПараметров.МассивСтрокВидовЦен = Новый Массив(); // Массив из СправочникСсылка.ВидыЦен, Массив из СправочникСсылка.ВидыЦенПоставщиков -
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				СтруктураПараметров.МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураПараметров.МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		Если Не СтруктураПараметров.ТолькоНезаполненные Тогда
			ОчиститьЦены(Форма, ТаблицаНоменклатуры, СтруктураПараметров.МассивСтрокВидовЦен, КэшДанных);
		КонецЕсли;
	
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
			|	ТаблицаНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ТаблицаНоменклатуры.СерияЦО КАК СерияЦО,
			|	ТаблицаНоменклатуры.СерияЦОДляСвязи КАК СерияЦОДляСвязи,
			|	ТаблицаНоменклатуры.УпаковкаЦО КАК УпаковкаЦО,
			|	ТаблицаНоменклатуры.УпаковкаЦОДляСвязи КАК УпаковкаЦОДляСвязи
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	ХарактеристикаЦО,
			|	СерияЦОДляСвязи,
			|	УпаковкаЦОДляСвязи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ТаблицаНоменклатуры.СерияЦО КАК СерияЦО,
			|	ТаблицаНоменклатуры.УпаковкаЦО КАК УпаковкаЦО,
			|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|	ЦеныНоменклатурыСрезПоследних.Цена + ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентИзмененияЦены / 100.00 КАК Цена,
			|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ДатаДокумента, (Номенклатура, ХарактеристикаЦО, СерияЦО,
			|		УпаковкаЦО) В
			|		(ВЫБРАТЬ
			|			ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
			|			ТаблицаНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|			ТаблицаНоменклатуры.СерияЦОДляСвязи КАК СерияЦОДляСвязи,
			|			ТаблицаНоменклатуры.УпаковкаЦОДляСвязи КАК УпаковкаЦОДляСвязи
			|		ИЗ
			|			ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
			|	И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаНоменклатуры.Номенклатура
			|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаНоменклатуры.ХарактеристикаЦО
			|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаНоменклатуры.СерияЦОДляСвязи
			|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаНоменклатуры.УпаковкаЦОДляСвязи");
		
		Иначе	
		
			Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
				|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
				|ПОМЕСТИТЬ ТаблицаНоменклатуры
				|ИЗ
				|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
				|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
				|;
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЦеныНоменклатурыСрезПоследних.Номенклатура    КАК Номенклатура,
				|	ЦеныНоменклатурыСрезПоследних.Характеристика  КАК Характеристика,
				|	ЦеныНоменклатурыСрезПоследних.Упаковка        КАК Упаковка,
				|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
				|	ЦеныНоменклатурыСрезПоследних.ВидЦены         КАК ВидЦены,
				|	ЦеныНоменклатурыСрезПоследних.Цена + ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентИзмененияЦены / 100.00 КАК Цена,
				|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
				|ИЗ
				|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|			&ДатаДокумента,
				|			(Номенклатура, Характеристика) В
				|					(ВЫБРАТЬ
				|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
				|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
				|					ИЗ
				|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
				|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних");
			
		КонецЕсли;
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из СтруктураПараметров.МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены["Ссылка"]);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен",              ВидыЦен);
		Запрос.УстановитьПараметр("ПроцентИзмененияЦены", СтруктураПараметров.ПроцентИзмененияЦены);
		Запрос.УстановитьПараметр("ДатаДокумента",        ?(СтруктураПараметров.ДатаДокумента = Неопределено, ДатаДляЗапросаЦенНоменклатуры(Форма), СтруктураПараметров.ДатаДокумента));
		
		УстановитьПривилегированныйРежим(Истина);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма,ТаблицаНоменклатуры,КэшДанных);
		Иначе
			СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
		КонецЕсли;
		
		Параметры = Новый Структура();
		Параметры.Вставить("ПрименитьОкругление", СтруктураПараметров.ПрименятьОкругление);
		Параметры.Вставить("ТолькоНезаполненные", СтруктураПараметров.ТолькоНезаполненные);
		
		ЗагрузитьЦеныИзТаблицыЗначений(Форма, Выгрузка, СоответствиеКоэффициентовУпаковокНоменклатуры, КэшДанных,,Параметры);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет старые цены номенклатуры в дереве цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  ТаблицаНоменклатуры - ТаблицаЗначений, Неопределено - Данные по добавляемым строкам
//
Процедура ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных = Неопределено, ТаблицаНоменклатуры = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	Если Форма.ВыбранныеЦеныИзменены Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Форма", Форма);
		Данные.Вставить("Документы", Новый Массив);
		Данные.Вставить("СохранятьБазовые", Ложь);
		Данные.Документы.Добавить(Форма.Объект);
		
		ПоместитьЦеныВТабличнуюЧасть(Данные);
		
		ПостроитьДеревоЦен(Форма);
		ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных);
	КонецЕсли;
	
	ТаблицаЗначений = ТаблицаТовары(Форма, КэшДанных, ,ТаблицаНоменклатуры);
	
	ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаЗначений, КэшДанных);
	
КонецПроцедуры

// Получает таблицу товаров (Номенклатура, Характеристика, ВидЦены, Упаковка, Цена) из дерева цен.
//
// Параметры:
//  ТаблицаТоваров - см. СоздатьТаблицуТовары
//
// Возвращаемое значение:
//  ТаблицаЗначений - Дополненная таблица товаров
//
Функция ДополнитьТаблицуТоваров(ТаблицаТоваров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.ХарактеристикаЦО КАК Справочник.ХарактеристикиНоменклатурыДляЦенообразования) КАК ХарактеристикаЦО,
	|	ВЫРАЗИТЬ(Товары.СерияЦО КАК Справочник.СерииНоменклатурыДляЦенообразования) КАК СерияЦО,
	|	ВЫРАЗИТЬ(Товары.УпаковкаЦО КАК Справочник.УпаковкиЕдиницыИзмерения) КАК УпаковкаЦО,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Цена КАК Цена,
	|	Товары.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоХарактеристике,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоСерии,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоУпаковке,
	|	ВЫБОР
	|		КОГДА
	|			НоменклатураСпр.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА НоменклатураСпр.Ссылка
	|		КОГДА
	|			НоменклатураСпр.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА НоменклатураСпр.ВидНоменклатуры
	|		КОГДА
	|			НоменклатураСпр.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА НоменклатураСпр.ВладелецХарактеристик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВладелецХарактеристик
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ТаблицаДанных.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	|		ПО ТаблицаДанных.Номенклатура = НоменклатураСпр.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЕСТЬNULL(ХарактеристикиНоменклатуры1.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК Характеристика,
	|	ТаблицаДанных.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаДанных.СерияЦО КАК СерияЦО,
	|	ТаблицаДанных.УпаковкаЦО КАК УпаковкаЦО,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|	ТаблицаДанных.Упаковка КАК Упаковка,
	|	ТаблицаДанных.Цена КАК Цена,
	|	ТаблицаДанных.ВидЦены КАК ВидЦены,
	|	ТаблицаНоменклатуры.ПоУпаковке КАК ПоУпаковке,
	|	ТаблицаНоменклатуры.ПоХарактеристике КАК ПоХарактеристике,
	|	ТаблицаНоменклатуры.ПоСерии КАК ПоСерии
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ПО ТаблицаДанных.Номенклатура = ТаблицаНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ТаблицаНоменклатуры.ПоХарактеристике
	|		И ТаблицаДанных.ХарактеристикаЦО = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
	|		И ТаблицаДанных.ХарактеристикаЦО <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры1
	|		ПО НЕ ТаблицаНоменклатуры.ПоХарактеристике
	|		И ТаблицаНоменклатуры.ВладелецХарактеристик = ХарактеристикиНоменклатуры1.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ТаблицаНоменклатуры.ПоСерии
	|		И ТаблицаДанных.СерияЦО = СерииНоменклатуры.СерияНоменклатурыДляЦенообразования
	|		И ТаблицаДанных.СерияЦО <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДанных.Номенклатура,
	|	ХарактеристикаЦО,
	|	Характеристика,
	|	СерияЦО,
	|	УпаковкаЦО";
		
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаТоваровДополненная = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаТоваровДополненная;
	
КонецФункции

// Получает таблицу товаров (Номенклатура, Характеристика, ВидЦены, Упаковка, Цена) из дерева цен.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  Параметры - Структура - дополнительных параметров:
//  * ТолькоИзмененные - Булево - только по измененным ценам.
//  * ПоИзменениямЗаДень - Булево - по измененным ценам за день.
//  ТаблицаНоменклатуры - ТаблицаЗначений, Неопределено - данные по загржаемым товарам
//
// Возвращаемое значение:
//  см. СоздатьТаблицуТовары
//
Функция ТаблицаТовары(Форма, КэшДанных = Неопределено, Параметры = Неопределено, ТаблицаНоменклатуры = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	Если КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствия(Форма, КэшДанных);
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		ТолькоИзмененные = Ложь;
		ПоИзменениямЗаДень = Ложь;
	Иначе
		ТолькоИзмененные = Параметры.ТолькоИзмененные;
		ПоИзменениямЗаДень = Параметры.ПоИзменениямЗаДень;
	КонецЕсли;
	
	ИерархическийСписок = Истина;
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ИерархическийСписок = Ложь;
	Иначе
		ДеревоЦенЭтоДанныеФормыДерево = (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"));
	КонецЕсли;	
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных), Форма.ИспользуетсяЦенообразование25);
	ТаблицаЗначений.Колонки.Добавить("ЦенаИзмененаВручную");
	
	ВыбранныеЦены = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	ВыбранныеиВлияющиеЦены = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма, Истина);
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		ТаблицаДанных = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров;
	Иначе
		ТаблицаДанных = ТаблицаНоменклатуры;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если ИерархическийСписок Тогда
			Если ДеревоЦенЭтоДанныеФормыДерево Тогда
				ЕстьПодСтроки = (СтрокаТЗ.СтрокаДереваЦен.ПолучитьЭлементы().Количество() > 0);
			Иначе
				ЕстьПодСтроки = (СтрокаТЗ.СтрокаДереваЦен.Строки.Количество() > 0);
			КонецЕсли;	
			
			Если ЕстьПодСтроки Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоИзмененные Тогда
			Если НЕ ЕстьИзмененияЦенВСтроке(СтрокаТЗ.СтрокаДереваЦен, ВыбранныеЦены, ПоИзменениямЗаДень) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаВидЦены Из ВыбранныеиВлияющиеЦены Цикл
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковкаЗаказа = "УпаковкаЗаказа" + СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковкаИмя = "УпаковкаИмя" + СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиМинимальнаяПартияПоставки = "МинимальнаяПартияПоставки" +  СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУстановкаУсловий = "УстановкаУсловий" +  СтрокаВидЦены.ИмяКолонки;
			
			СтрокаДереваЦен = СтрокаТЗ.СтрокаДереваЦен;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДереваЦен);
			Если Форма.ИспользуетсяЦенообразование25 Тогда
				НоваяСтрока.УпаковкаЦОДляСвязи   = ?(СтрокаДереваЦен.УпаковкаЦО = СтрокаДереваЦен.ЕдиницаИзмерения, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаДереваЦен.УпаковкаЦО);
				НоваяСтрока.СерияЦОДляСвязи   = ?(СтрокаДереваЦен.СерияЦО.Предопределенный, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), СтрокаДереваЦен.СерияЦО);
			КонецЕсли;	
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = СтрокаДереваЦен[ИмяКолонки];
			Если Форма.ИспользоватьУпаковкиНоменклатуры И НЕ ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
				НоваяСтрока.Упаковка   = СтрокаДереваЦен[ИмяКолонкиУпаковка];
				Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
					НоваяСтрока.УпаковкаЗаказа        = СтрокаДереваЦен[ИмяКолонкиУпаковкаЗаказа];
					Если СтрокаДереваЦен.Свойство(ИмяКолонкиУпаковкаИмя) Тогда
						НоваяСтрока.УпаковкаИмя        = СтрокаДереваЦен[ИмяКолонкиУпаковкаИмя];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
				НоваяСтрока.МинимальнаяПартияПоставки = СтрокаДереваЦен[ИмяКолонкиМинимальнаяПартияПоставки];
				НоваяСтрока.УстановкаУсловий          = СтрокаДереваЦен[ИмяКолонкиУстановкаУсловий];
			КонецЕсли;
			НоваяСтрока.ЦенаИзмененаВручную = СтрокаДереваЦен["ИзмененаВручную" + ИмяКолонки];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Осуществляет загрузку старых цен для строк таблицы
// 
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - см. СоздатьТаблицуТовары
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  ТаблицаНоменклатурыЗапрещеннойКРедактированию - ТаблицаЗначений - Таблица запрещенной к редактированию номенлатуры
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПредприятия(Форма, ТаблицаНоменклатуры, КэшДанных, ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено) Экспорт

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Валюта КАК ВалютаИзменения
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапрещенныеКРедактированиюТовары.Номенклатура КАК Номенклатура,
	|	ЗапрещенныеКРедактированиюТовары.Характеристика КАК Характеристика,
	|	ЗапрещенныеКРедактированиюТовары.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|ИЗ
	|	&ТоварыЗапрещенныеКРедактированию КАК ЗапрещенныеКРедактированиюТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) <> 0
	|				ТОГДА 100 * (ВременнаяТаблицаТовары.Цена - ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(25, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.ВалютаИзменения КАК ВалютаИзменения,
	|	ЦеныНоменклатуры.Валюта КАК ДействующаяВалюта,
	|	НЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура ЕСТЬ NULL КАК ЗапретРедактирования
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаДокумента,
	|				(Номенклатура, Характеристика, ВидЦены) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ЦеныНоменклатуры.ВидЦены = ВременнаяТаблицаТовары.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию КАК ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|		ПО (ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены = ВременнаяТаблицаТовары.ВидЦены)
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);

	Если ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено Тогда
		ТаблицаНоменклатурыЗапрещеннойКРедактированию = Новый ТаблицаЗначений();
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));		
	КонецЕсли;	
	Запрос.УстановитьПараметр("ТоварыЗапрещенныеКРедактированию", ТаблицаНоменклатурыЗапрещеннойКРедактированию);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					
					Если Не ВыборкаВидыЦен.ВалютаИзменения.Пустая() И ВыборкаВидыЦен.ВалютаИзменения <> ВыборкаВидыЦен.ДействующаяВалюта Тогда
						
						ДействующаяЦена = ПересчитатьВалюту(ВыборкаВидыЦен.ДействующаяВалюта, 
															ВыборкаВидыЦен.ВалютаИзменения, 
															ВыборкаВидыЦен.ДействующаяЦена, 
															КэшДанных.КурсыВалют);
					Иначе
						ДействующаяЦена = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["Валюта" + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяВалюта;
					КонецЕсли;
					
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ДействующаяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					ЭлементХарактеристика["ЗапретРедактирования" + ИмяКолонки] = ВыборкаВидыЦен.ЗапретРедактирования;
					
					Если ВыборкаВидыЦен.ЗапретРедактирования И ДействующаяЦена <> 0 Тогда
						ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяКолонки] = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
				
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					
					Если Не ВыборкаВидыЦен.ВалютаИзменения.Пустая() И ВыборкаВидыЦен.ВалютаИзменения <> ВыборкаВидыЦен.ДействующаяВалюта Тогда
						
						ДействующаяЦена = ПересчитатьВалюту(ВыборкаВидыЦен.ДействующаяВалюта, 
															ВыборкаВидыЦен.ВалютаИзменения, 
															ВыборкаВидыЦен.ДействующаяЦена, 
															КэшДанных.КурсыВалют);
					Иначе
						ДействующаяЦена = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["Валюта" + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяВалюта;
					КонецЕсли;
					
					ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ДействующаяЦена;
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					ЭлементНоменклатура["ЗапретРедактирования" + ИмяКолонки] = ВыборкаВидыЦен.ЗапретРедактирования;
					
					Если ВыборкаВидыЦен.ЗапретРедактирования И ВыборкаВидыЦен.ДействующаяЦена <> 0 Тогда
						ЭлементНоменклатура["ИзмененаАвтоматически" + ИмяКолонки] = Истина;
					КонецЕсли;

				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПредприятия2_5(Форма, ТаблицаНоменклатуры, КэшДанных, ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено) Экспорт

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ВременнаяТаблицаТовары.СерияЦО КАК СерияЦО,
	|	ВременнаяТаблицаТовары.СерияЦОДляСвязи КАК СерияЦОДляСвязи,
	|	ВременнаяТаблицаТовары.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи КАК УпаковкаЦОДляСвязи,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Валюта КАК ВалютаИзменения
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦОДляСвязи,
	|	УпаковкаЦОДляСвязи,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапрещенныеКРедактированиюТовары.Номенклатура КАК Номенклатура,
	|	ЗапрещенныеКРедактированиюТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЗапрещенныеКРедактированиюТовары.СерияЦО КАК СерияЦО,
	|	ЗапрещенныеКРедактированиюТовары.УпаковкаЦО КАК УпаковкаЦО,
	|	ЗапрещенныеКРедактированиюТовары.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|ИЗ
	|	&ТоварыЗапрещенныеКРедактированию КАК ЗапрещенныеКРедактированиюТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ВременнаяТаблицаТовары.СерияЦО КАК СерияЦО,
	|	ВременнаяТаблицаТовары.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) <> 0
	|				ТОГДА 100 * (ВременнаяТаблицаТовары.Цена - ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(25, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.ВалютаИзменения КАК ВалютаИзменения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ДействующаяВалюта,
	|	НЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура ЕСТЬ NULL КАК ЗапретРедактирования
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|				&ДатаДокумента,
	|				(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО, ВидЦены) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.ХарактеристикаЦО,
	|						Т.СерияЦОДляСвязи,
	|						Т.УпаковкаЦОДляСвязи,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ЦеныНоменклатуры.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО)
	|			И (ЦеныНоменклатуры.СерияЦО = ВременнаяТаблицаТовары.СерияЦОДляСвязи)
	|			И (ЦеныНоменклатуры.УпаковкаЦО = ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи)
	|			И (ЦеныНоменклатуры.ВидЦены = ВременнаяТаблицаТовары.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию КАК ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|		ПО (ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО)
	|			И (ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены = ВременнаяТаблицаТовары.ВидЦены)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);

	Если ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено Тогда
		ТаблицаНоменклатурыЗапрещеннойКРедактированию = Новый ТаблицаЗначений();
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("СерияЦО",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("УпаковкаЦО",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ВидЦены",          Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));		
	КонецЕсли;	
	Запрос.УстановитьПараметр("ТоварыЗапрещенныеКРедактированию", ТаблицаНоменклатурыЗапрещеннойКРедактированию);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

	ТекущиеДанные = Новый Структура("ВидЦен, Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидЦен <> Выборка.ВидЦены Тогда
			ТекущиеДанные.ВидЦен = Выборка.ВидЦены;
			ИмяКолонки = ИмяКолонкиПоВидуЦены(Выборка.ВидЦены, КэшДанных);
		КонецЕсли;
		
		Если ТекущиеДанные.Номенклатура <> Выборка.Номенклатура
			Или ТекущиеДанные.ХарактеристикаЦО <> Выборка.ХарактеристикаЦО 
			Или ТекущиеДанные.СерияЦО <> Выборка.СерияЦО 
			Или ТекущиеДанные.УпаковкаЦО <> Выборка.УпаковкаЦО Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка, "Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");
			НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, Выборка, КэшДанных);
			
		КонецЕсли;
		
		Если Не Выборка.ВалютаИзменения.Пустая() И Выборка.ВалютаИзменения <> Выборка.ДействующаяВалюта Тогда
			
			ДействующаяЦена = ПересчитатьВалюту(Выборка.ДействующаяВалюта, 
												Выборка.ВалютаИзменения, 
												Выборка.ДействующаяЦена, 
												КэшДанных.КурсыВалют);
		Иначе
			ДействующаяЦена = Выборка.ДействующаяЦена;
			НайденнаяСтрока["Валюта" + ИмяКолонки] = Выборка.ДействующаяВалюта;
		КонецЕсли;
		
		НайденнаяСтрока["СтараяЦена"           + ИмяКолонки] = ДействующаяЦена;
		НайденнаяСтрока["ПроцентИзменения"     + ИмяКолонки] = Выборка.Процент;
		НайденнаяСтрока["ЗапретРедактирования" + ИмяКолонки] = Выборка.ЗапретРедактирования;
		
		Если Выборка.ЗапретРедактирования И ДействующаяЦена <> 0 Тогда
			НайденнаяСтрока["ИзмененаАвтоматически" + ИмяКолонки] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
// 
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - см. СоздатьТаблицуТовары
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ВидЦены КАК Справочник.ВидыЦенПоставщиков) КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка               КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТоварыПред
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураПартнера  КАК НоменклатураПартнера,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.Цена                  КАК Цена,
	|	Таблица.Упаковка              КАК Упаковка,
	|	Таблица.ВидЦены               КАК ВидЦены,
	|	Таблица.ВидЦены.Владелец      КАК Партнер
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТоварыПред КАК Таблица
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураПартнера,
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены,
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияЗакупокСрезПоследних.Номенклатура КАК Номенклатура,
	|	УсловияЗакупокСрезПоследних.Характеристика КАК Характеристика,
	|	УсловияЗакупокСрезПоследних.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	УсловияЗакупокСрезПоследних.УпаковкаЗаказа КАК УпаковкаЗаказа,
	|	УсловияЗакупокСрезПоследних.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки
	|ПОМЕСТИТЬ ВТУсловияЗакупок
	|ИЗ
	|	РегистрСведений.УсловияЗакупок.СрезПоследних(
	|	&ДатаДокумента, 
	|	(Номенклатура, Характеристика, ВидЦеныПоставщика) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК УсловияЗакупокСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦеныПоставщика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.Номенклатура              КАК Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Характеристика            КАК Характеристика,
	|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика         КАК ВидЦеныПоставщика,
	|	ЦеныНоменклатурыПоставщиков.Валюта                    КАК Валюта,
	|	ЦеныНоменклатурыПоставщиков.Упаковка                  КАК Упаковка,
	|	ЦеныНоменклатурыПоставщиков.Цена                      КАК Цена
	|ПОМЕСТИТЬ ЦеныНоменклатурыПоставщиковСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ДатаДокумента,
	|				(Номенклатура, Характеристика, ВидЦеныПоставщика, Партнер) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены,
	|						Т.Партнер
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)
	|) КАК ЦеныНоменклатурыПоставщиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦеныПоставщика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЦеныНоменклатуры.Цена <> 0
	|				ТОГДА 100 * (ВременнаяТаблицаТовары.Цена - ВЫБОР
	|						КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЦеныНоменклатуры.Цена
	|						ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЦеныНоменклатуры.Цена
	|						ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВТУсловияЗакупок.УпаковкаЗаказа КАК УпаковкаЗаказа,
	|	ВТУсловияЗакупок.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыПоставщиковСрезПоследних КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ЦеныНоменклатуры.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияЗакупок КАК ВТУсловияЗакупок
	|			ПО (ВТУсловияЗакупок.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ВТУсловияЗакупок.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ВТУсловияЗакупок.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА МАКСИМУМ(ХарактеристикиИспользуются)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(НоменклатураПартнера)
	|	КОНЕЦ КАК НоменклатураПартнера
	|ПО
	|	Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары", ТаблицаНоменклатуры);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
		Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаВидыЦен = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыЦен.Следующий() Цикл
			
			ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаВидыЦен, КэшДанных);
			
			Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены)
				Или ЭлементНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
			
			Если Не ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
				ЭлементНоменклатура[ИмяКолонки] = ВыборкаВидыЦен.Цена;
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ЭлементНоменклатура["УпаковкаЗаказа" + ИмяКолонки] = ВыборкаВидыЦен.УпаковкаЗаказа;
				КонецЕсли;
				ЭлементНоменклатура["МинимальнаяПартияПоставки" + ИмяКолонки] = ВыборкаВидыЦен.МинимальнаяПартияПоставки;
			Иначе
				Если ЭлементНоменклатура[ИмяКолонки] <> ЭлементНоменклатура["СтараяЦена" + ИмяКолонки] Тогда
					ЭлементНоменклатура["ЦеныИзменены"]	= Истина;
				КонецЕсли;	
			КонецЕсли;
			
			ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
			ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - см. СоздатьТаблицуТовары
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 
Процедура ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	Если ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных) Тогда
		ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(Форма, ТаблицаНоменклатуры, КэшДанных);
	Иначе
		КурсыВалют(Форма, КэшДанных);
		ТаблицаНоменклатурыЗапрещеннойКРедактированию = ПолучитьЗапрещеннуюКРедактированиюНоменклатуру(Форма, ТаблицаНоменклатуры);
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			ЗагрузитьСтарыеЦеныНоменклатурыПредприятия2_5(Форма, ТаблицаНоменклатуры, КэшДанных, ТаблицаНоменклатурыЗапрещеннойКРедактированию);
		Иначе
			ЗагрузитьСтарыеЦеныНоменклатурыПредприятия(Форма, ТаблицаНоменклатуры, КэшДанных, ТаблицаНоменклатурыЗапрещеннойКРедактированию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - см. СоздатьТаблицуТовары
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  ТаблицаНоменклатурыЗапрещеннойКРедактированию - ТаблицаЗначений - Таблица запрещенной к редактированию номенлатуры
// 
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПрайсЛист(Форма, ТаблицаНоменклатуры, КэшДанных, ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено) Экспорт

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены КАК ВидЦены,
	|	ИСТИНА КАК ЗапретРедактирования
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|ИЗ
	|	&ТоварыЗапрещенныеКРедактированию КАК ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЕСТЬNULL(ДействующиеЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДействующиеЦены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) *
	|			ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЕСТЬNULL(СтарыеЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(СтарыеЦены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|			ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК СтараяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА СтарыеЦены.Цена <> 0
	|			ТОГДА 100 * (ВЫБОР
	|				КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|					ТОГДА ДействующиеЦены.Цена
	|				ИНАЧЕ ДействующиеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) *
	|					ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ - ВЫБОР
	|				КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|					ТОГДА СтарыеЦены.Цена
	|				ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|					ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ) / ВЫБОР
	|				КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|					ТОГДА СтарыеЦены.Цена
	|				ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|					ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ
	|		ИНАЧЕ 0.00
	|	КОНЕЦ КАК Число(25, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.Формула, ВидыЦен.Формула) КАК Формула,
	|	ВидыЦен.СпособЗаданияЦены,
	|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.БазовыйВидЦены, ВидыЦен.БазовыйВидЦены) КАК БазовыйВидЦены,
	|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.Наценка, ВидыЦен.Наценка) КАК Наценка,
	|	ДействующиеЦены.Формула КАК ФормулаДействующая,
	|	ЕСТЬNULL(ВидыЦенВалюты.ВалютаЦены, ВидыЦен.ВалютаЦены) КАК Валюта,
	|	ДействующиеЦены.Валюта КАК ВалютаДействующая,
	|	ЕСТЬNULL(ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ЗапретРедактирования, ЛОЖЬ) КАК ЗапретРедактирования
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаВПрошлом, (Номенклатура, Характеристика,
	|			ВидЦены) В
	|			(Выбрать
	|				Т.Номенклатура,
	|				Т.Характеристика,
	|				Т.ВидЦены
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Т)) КАК СтарыеЦены
	|		ПО СтарыеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И СтарыеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|		И СтарыеЦены.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, (Номенклатура, Характеристика,
	|			ВидЦены) В
	|			(Выбрать
	|				Т.Номенклатура,
	|				Т.Характеристика,
	|				Т.ВидЦены
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
	|		ПО ДействующиеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И ДействующиеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|		И ДействующиеЦены.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО ВременнаяТаблицаТовары.ВидЦены = ВидыЦен.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию КАК
	|			ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|		ПО ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенЦеновыеГруппы
	|		ПО (ВременнаяТаблицаТовары.ВидЦены = ВидыЦенЦеновыеГруппы.Ссылка)
	|		И (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВидыЦенЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.Валюты КАК ВидыЦенВалюты
	|		ПО (ВременнаяТаблицаТовары.ВидЦены = ВидыЦенВалюты.Ссылка)
	|		И (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВидыЦенВалюты.ЦеноваяГруппа)
	|ИТОГИ
	|ПО
	|	Номенклатура,
	|	Характеристика");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДействующиеЦены.Упаковка",
		"ДействующиеЦены.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СтарыеЦены.Упаковка",
		"СтарыеЦены.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",       ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата",  КонецДня(Форма.Дата));
	Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
		Запрос.УстановитьПараметр("ДатаВПрошлом", КонецДня(Форма.ДатаДействующихЦен));
	Иначе
		Запрос.УстановитьПараметр("ДатаВПрошлом", НачалоДня(Форма.Дата) - 1);
	КонецЕсли;
	
	Если ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено Тогда
		ТаблицаНоменклатурыЗапрещеннойКРедактированию = Новый ТаблицаЗначений();
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));		
	КонецЕсли;	
	Запрос.УстановитьПараметр("ТоварыЗапрещенныеКРедактированию", ТаблицаНоменклатурыЗапрещеннойКРедактированию);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					ЭлементХарактеристика[ИмяКолонки]                      = ?(ВыборкаВидыЦен.ЗапретРедактирования, 0, ВыборкаВидыЦен.Цена);
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.СтараяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					ЭлементХарактеристика["СуммаИзменения"   + ИмяКолонки] = ВыборкаВидыЦен.Цена - ВыборкаВидыЦен.СтараяЦена;

					ЭлементХарактеристика["ЗапретРедактирования"   + ИмяКолонки] = ВыборкаВидыЦен.ЗапретРедактирования;
					
					Если ЗначениеЗаполнено(ВыборкаВидыЦен.ВалютаДействующая) Тогда
						ЭлементХарактеристика["Валюта"   + ИмяКолонки] = ВыборкаВидыЦен.ВалютаДействующая;
					Иначе
						ЭлементХарактеристика["Валюта"   + ИмяКолонки] = ВыборкаВидыЦен.Валюта;
					КонецЕсли;
						
					Если Справочники.ВидыЦен.РазрешитьИзменятьФормулы(ВыборкаВидыЦен.СпособЗаданияЦены) Тогда
						Формула = ?(ЗначениеЗаполнено(ВыборкаВидыЦен.ФормулаДействующая),ВыборкаВидыЦен.ФормулаДействующая,ВыборкаВидыЦен.Формула);
						ЭлементХарактеристика["Формула"                + ИмяКолонки] = Формула;
						ЭлементХарактеристика["ФормулаИзмененаВручную" + ИмяКолонки] = (Формула <> ВыборкаВидыЦен.Формула);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаХарактеристики, КэшДанных);
				
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
					
					ЭлементНоменклатура[ИмяКолонки]                      = ?(ВыборкаВидыЦен.ЗапретРедактирования, 0, ВыборкаВидыЦен.Цена);
					ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.СтараяЦена;
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					ЭлементНоменклатура["СуммаИзменения"   + ИмяКолонки] = ВыборкаВидыЦен.Цена - ВыборкаВидыЦен.СтараяЦена;

					ЭлементНоменклатура["ЗапретРедактирования"   + ИмяКолонки] = ВыборкаВидыЦен.ЗапретРедактирования;
					
					Если ЗначениеЗаполнено(ВыборкаВидыЦен.ВалютаДействующая) Тогда
						ЭлементНоменклатура["Валюта"   + ИмяКолонки] = ВыборкаВидыЦен.ВалютаДействующая;
					Иначе
						ЭлементНоменклатура["Валюта"   + ИмяКолонки] = ВыборкаВидыЦен.Валюта;
					КонецЕсли;
						
					Если Справочники.ВидыЦен.РазрешитьИзменятьФормулы(ВыборкаВидыЦен.СпособЗаданияЦены) Тогда
						Формула = ?(ЗначениеЗаполнено(ВыборкаВидыЦен.ФормулаДействующая),ВыборкаВидыЦен.ФормулаДействующая,ВыборкаВидыЦен.Формула);
						ЭлементНоменклатура["Формула"                + ИмяКолонки] = Формула;
						ЭлементНоменклатура["ФормулаИзмененаВручную" + ИмяКолонки] = (Формула <> ВыборкаВидыЦен.Формула);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПрайсЛист2_5(Форма, ТаблицаНоменклатуры, КэшДанных, ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено) Экспорт

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ВременнаяТаблицаТовары.СерияЦО КАК СерияЦО,
	|	ВременнаяТаблицаТовары.СерияЦОДляСвязи КАК СерияЦОДляСвязи,
	|	ВременнаяТаблицаТовары.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи КАК УпаковкаЦОДляСвязи,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.СерияЦО КАК СерияЦО,
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены КАК ВидЦены,
	|	ИСТИНА КАК ЗапретРедактирования
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|ИЗ
	|	&ТоварыЗапрещенныеКРедактированию КАК ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ВременнаяТаблицаТовары.СерияЦО КАК СерияЦО,
	|	ВременнаяТаблицаТовары.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЕСТЬNULL(ДействующиеЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДействующиеЦены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) *
	|			ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЕСТЬNULL(СтарыеЦены.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(СтарыеЦены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|			ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК СтараяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА СтарыеЦены.Цена <> 0
	|			ТОГДА 100 * (ВЫБОР
	|				КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|					ТОГДА ДействующиеЦены.Цена
	|				ИНАЧЕ ДействующиеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) *
	|					ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ - ВЫБОР
	|				КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|					ТОГДА СтарыеЦены.Цена
	|				ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|					ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ) / ВЫБОР
	|				КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|					ТОГДА СтарыеЦены.Цена
	|				ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|					ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			КОНЕЦ
	|		ИНАЧЕ 0.00
	|	КОНЕЦ КАК ЧИСЛО(25, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.Формула, ВидыЦен.Формула) КАК Формула,
	|	ВидыЦен.СпособЗаданияЦены,
	|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.БазовыйВидЦены, ВидыЦен.БазовыйВидЦены) КАК БазовыйВидЦены,
	|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.Наценка, ВидыЦен.Наценка) КАК Наценка,
	|	ДействующиеЦены.Формула КАК ФормулаДействующая,
	|	ЕСТЬNULL(ВидыЦенВалюты.ВалютаЦены, ВидыЦен.ВалютаЦены) КАК Валюта,
	|	ДействующиеЦены.Валюта КАК ВалютаДействующая,
	|	ЕСТЬNULL(ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ЗапретРедактирования, ЛОЖЬ) КАК ЗапретРедактирования
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ДатаВПрошлом, (Номенклатура, ХарактеристикаЦО,
	|			СерияЦО, УпаковкаЦО, ВидЦены) В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура,
	|				Т.ХарактеристикаЦО,
	|				Т.СерияЦОДляСвязи,
	|				Т.УпаковкаЦОДляСвязи,
	|				Т.ВидЦены
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Т)) КАК СтарыеЦены
	|		ПО СтарыеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И СтарыеЦены.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
	|		И СтарыеЦены.СерияЦО = ВременнаяТаблицаТовары.СерияЦОДляСвязи
	|		И СтарыеЦены.УпаковкаЦО = ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи
	|		И СтарыеЦены.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекущаяДата, (Номенклатура, ХарактеристикаЦО,
	|			СерияЦО, УпаковкаЦО, ВидЦены) В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура,
	|				Т.ХарактеристикаЦО,
	|				Т.СерияЦОДляСвязи,
	|				Т.УпаковкаЦОДляСвязи,
	|				Т.ВидЦены
	|			ИЗ
	|				ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
	|		ПО ДействующиеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И ДействующиеЦены.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
	|		И ДействующиеЦены.СерияЦО = ВременнаяТаблицаТовары.СерияЦОДляСвязи
	|		И ДействующиеЦены.УпаковкаЦО = ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи
	|		И ДействующиеЦены.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО ВременнаяТаблицаТовары.ВидЦены = ВидыЦен.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию КАК
	|			ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
	|		ПО ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
	|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенЦеновыеГруппы
	|		ПО ВременнаяТаблицаТовары.ВидЦены = ВидыЦенЦеновыеГруппы.Ссылка
	|		И ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВидыЦенЦеновыеГруппы.ЦеноваяГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.Валюты КАК ВидыЦенВалюты
	|		ПО ВременнаяТаблицаТовары.ВидЦены = ВидыЦенВалюты.Ссылка
	|		И ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВидыЦенВалюты.ЦеноваяГруппа
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДействующиеЦены.Упаковка",
		"ДействующиеЦены.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СтарыеЦены.Упаковка",
		"СтарыеЦены.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",       ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата",  КонецДня(ДатаДокумента(Форма)));
	Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
		Запрос.УстановитьПараметр("ДатаВПрошлом", КонецДня(Форма.ДатаДействующихЦен));
	Иначе
		Запрос.УстановитьПараметр("ДатаВПрошлом", НачалоДня(ДатаДокумента(Форма)) - 1);
	КонецЕсли;
	
	Если ТаблицаНоменклатурыЗапрещеннойКРедактированию = Неопределено Тогда
		ТаблицаНоменклатурыЗапрещеннойКРедактированию = Новый ТаблицаЗначений();
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Номенклатура",     Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("СерияЦО",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("УпаковкаЦО",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ВидЦены",          Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));		
	КонецЕсли;	
	Запрос.УстановитьПараметр("ТоварыЗапрещенныеКРедактированию", ТаблицаНоменклатурыЗапрещеннойКРедактированию);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

	ТекущиеДанные = Новый Структура("ВидЦен, Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидЦен <> Выборка.ВидЦены Тогда
			ТекущиеДанные.ВидЦен = Выборка.ВидЦены;
		КонецЕсли;
		
		Если ТекущиеДанные.Номенклатура <> Выборка.Номенклатура
			Или ТекущиеДанные.ХарактеристикаЦО <> Выборка.ХарактеристикаЦО 
			Или ТекущиеДанные.СерияЦО <> Выборка.СерияЦО 
			Или ТекущиеДанные.УпаковкаЦО <> Выборка.УпаковкаЦО Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка, "Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");			
			НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, Выборка, КэшДанных);
			
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ИмяКолонкиПоВидуЦены(Выборка.ВидЦены, КэшДанных);
		НайденнаяСтрока[ИмяКолонки]                          = ?(Выборка.ЗапретРедактирования, 0, Выборка.Цена);
		НайденнаяСтрока["СтараяЦена"           + ИмяКолонки] = Выборка.СтараяЦена;
		НайденнаяСтрока["ПроцентИзменения"     + ИмяКолонки] = Выборка.Процент;
		НайденнаяСтрока["СуммаИзменения"       + ИмяКолонки] = Выборка.Цена - Выборка.СтараяЦена;
		НайденнаяСтрока["ЗапретРедактирования" + ИмяКолонки] = Выборка.ЗапретРедактирования;
		
		Если ЗначениеЗаполнено(Выборка.ВалютаДействующая) Тогда
			НайденнаяСтрока["Валюта" + ИмяКолонки] = Выборка.ВалютаДействующая;
		Иначе
			НайденнаяСтрока["Валюта" + ИмяКолонки] = Выборка.Валюта;
		КонецЕсли;
			
		Если Справочники.ВидыЦен.РазрешитьИзменятьФормулы(Выборка.СпособЗаданияЦены) Тогда
			Формула = ?(ЗначениеЗаполнено(Выборка.ФормулаДействующая),Выборка.ФормулаДействующая,Выборка.Формула);
			НайденнаяСтрока["Формула"                + ИмяКолонки] = Формула;
			НайденнаяСтрока["ФормулаИзмененаВручную" + ИмяКолонки] = (Формула <> Выборка.Формула);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры - см. СоздатьТаблицуТовары
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 
Процедура ЗагрузитьСтарыеЦеныНоменклатурыПоставщикаПрайсЛист(Форма, ТаблицаНоменклатуры, КэшДанных) Экспорт
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ВидЦены КАК Справочник.ВидыЦенПоставщиков) КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Упаковка               КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТоварыПред
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураПартнера  КАК НоменклатураПартнера,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.Упаковка              КАК Упаковка,
	|	Таблица.ВидЦены               КАК ВидЦены,
	|	Таблица.ВидЦены.Владелец      КАК Партнер
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТоварыПред КАК Таблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦены,
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияЗакупокСрезПоследних.Номенклатура КАК Номенклатура,
	|	УсловияЗакупокСрезПоследних.Характеристика КАК Характеристика,
	|	УсловияЗакупокСрезПоследних.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	УсловияЗакупокСрезПоследних.УпаковкаЗаказа КАК УпаковкаЗаказа,
	|	УсловияЗакупокСрезПоследних.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки
	|ПОМЕСТИТЬ ВТУсловияЗакупок
	|ИЗ
	|	РегистрСведений.УсловияЗакупок.СрезПоследних(
	|	&ТекущаяДата, 
	|	(Номенклатура, Характеристика, ВидЦеныПоставщика) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)) КАК УсловияЗакупокСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦеныПоставщика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.Номенклатура              КАК Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Характеристика            КАК Характеристика,
	|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика         КАК ВидЦеныПоставщика,
	|	ЦеныНоменклатурыПоставщиков.Валюта                    КАК Валюта,
	|	ЦеныНоменклатурыПоставщиков.Упаковка                  КАК Упаковка,
	|	ЦеныНоменклатурыПоставщиков.Цена                      КАК Цена
	|ПОМЕСТИТЬ СтарыеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ДатаВПрошлом,
	|				(Номенклатура, Характеристика, ВидЦеныПоставщика, Партнер) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены,
	|						Т.Партнер
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)
	|) КАК ЦеныНоменклатурыПоставщиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦеныПоставщика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.Номенклатура              КАК Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Характеристика            КАК Характеристика,
	|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика         КАК ВидЦеныПоставщика,
	|	ЦеныНоменклатурыПоставщиков.Валюта                    КАК Валюта,
	|	ЦеныНоменклатурыПоставщиков.Упаковка                  КАК Упаковка,
	|	ЦеныНоменклатурыПоставщиков.Цена                      КАК Цена
	|ПОМЕСТИТЬ ДействующиеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ТекущаяДата,
	|				(Номенклатура, Характеристика, ВидЦеныПоставщика, Партнер) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика,
	|						Т.ВидЦены,
	|						Т.Партнер
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Т)
	|) КАК ЦеныНоменклатурыПоставщиков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦеныПоставщика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ДействующиеЦены.Цена
	|		ИНАЧЕ ДействующиеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА СтарыеЦены.Цена
	|		ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	КОНЕЦ КАК СтараяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СтарыеЦены.Цена <> 0
	|				ТОГДА 100 * (ВЫБОР
	|						КОГДА ДействующиеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ДействующиеЦены.Цена
	|						ИНАЧЕ ДействующиеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ - ВЫБОР
	|						КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА СтарыеЦены.Цена
	|						ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА СтарыеЦены.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА СтарыеЦены.Цена
	|						ИНАЧЕ СтарыеЦены.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК Процент,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ЛОЖЬ КАК УстановкаУсловий,
	|	ВТУсловияЗакупок.УпаковкаЗаказа КАК УпаковкаЗаказа,
	|	ВТУсловияЗакупок.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЦены КАК СтарыеЦены
	|		ПО (СтарыеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (СтарыеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (СтарыеЦены.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеЦены КАК ДействующиеЦены
	|		ПО (ДействующиеЦены.Номенклатура = ВременнаяТаблицаТовары.Номенклатура)
	|			И (ДействующиеЦены.Характеристика = ВременнаяТаблицаТовары.Характеристика)
	|			И (ДействующиеЦены.ВидЦеныПоставщика = ВременнаяТаблицаТовары.ВидЦены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияЗакупок КАК ВТУсловияЗакупок
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ВТУсловияЗакупок.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ВТУсловияЗакупок.Характеристика
	|			И ВременнаяТаблицаТовары.ВидЦены = ВТУсловияЗакупок.ВидЦеныПоставщика
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА МАКСИМУМ(ХарактеристикиИспользуются)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА NULL
	|		ИНАЧЕ МАКСИМУМ(НоменклатураПартнера)
	|	КОНЕЦ КАК НоменклатураПартнера
	|ПО
	|	Номенклатура");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ДействующиеЦены.Упаковка",
		"ДействующиеЦены.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СтарыеЦены.Упаковка",
		"СтарыеЦены.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары",      ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(Форма.Дата));
	Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
		Запрос.УстановитьПараметр("ДатаВПрошлом", КонецДня(Форма.ДатаДействующихЦен));
	Иначе
		Запрос.УстановитьПараметр("ДатаВПрошлом", НачалоДня(Форма.Дата) - 1);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаВидыЦен = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыЦен.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
				Продолжить;
			КонецЕсли;

			ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаВидыЦен, КэшДанных);
			
			Если ЭлементНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены, КэшДанных);
			
			ЭлементНоменклатура[ИмяКолонки]                      = ВыборкаВидыЦен.Цена;
			ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.СтараяЦена;
			ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
			ЭлементНоменклатура["МинимальнаяПартияПоставки" + ИмяКолонки] = ВыборкаВидыЦен.МинимальнаяПартияПоставки;
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ЭлементНоменклатура["УпаковкаЗаказа" + ИмяКолонки]            = ВыборкаВидыЦен.УпаковкаЗаказа;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует таблицу цен на форме
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ПересчитатьЦены - Булево - Указывает на необходимость перерасчета цен.
//
Процедура ПереформироватьТаблицуЦен(Форма, ПересчитатьЦены = Ложь) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	Данные = Новый Структура;
	Данные.Вставить("Форма", Форма);
	Данные.Вставить("Документы", Новый Массив);
	Данные.Вставить("СохранятьБазовые", Истина);
	Данные.Документы.Добавить(Форма.Объект);
	
	Форма.АдресХранилищаКэшаДанных = "";
	
	ПоместитьЦеныВТабличнуюЧасть(Данные);
	ПостроитьДеревоЦен(Форма);
	ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		Если ПересчитатьЦены Тогда
			РассчитатьВсеЦены(Форма, КэшДанных);
		Иначе
			ЗагрузитьБазовыеЦены(Форма, КэшДанных);
		КонецЕсли;
		ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных);
	КонецЕсли;

КонецПроцедуры

// Копирует цены по всем видам из таблицы формы ДеревоЦен в строку табличной части Товары объекта.
//
// Параметры:
//  Параметры - Структура - Параметры помещения строки в табличную часть, включает:
//     * Форма - см. ПостроитьДеревоЦен.Форма
//     * ТабличныеЧасти - Массив из ТабличнаяЧасть
//  СтрокаЦен - ДанныеФормыЭлементКоллекции - Строка дерева цен, которую необходимо поместить в табличную часть.
//
Процедура ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, СтрокаЦен) Экспорт
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Параметры.Форма);
	
	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			ЕстьКолонкаЦены = ЕстьКолонка(СтрокаЦен, ИмяКолонки);
			
			Если ЕстьКолонкаЦены Тогда
				Цена = СтрокаЦен[ИмяКолонки];
			КонецЕсли;
			
			Если ЭтоРегистрацияЦенПоставщика Тогда
				Если Цена = 0
					Или Не ЕстьКолонкаЦены Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока                = Параметры.ТабличныеЧасти[0].Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			Если Параметры.Форма.ИспользуетсяЦенообразование25 Тогда
				НоваяСтрока.ХарактеристикаЦО = СтрокаЦен.ХарактеристикаЦО;
				НоваяСтрока.СерияЦО          = СтрокаЦен.СерияЦО;
				НоваяСтрока.УпаковкаЦО       = СтрокаЦен.УпаковкаЦО;
			Иначе
				НоваяСтрока.Характеристика   = СтрокаЦен.Характеристика;
			КонецЕсли; 
			Если ЭтоРегистрацияЦенПоставщика Тогда
				НоваяСтрока.НоменклатураПартнера = СтрокаЦен.НоменклатураПартнера;
				НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;

				ИмяКолонкиУпаковкаЗаказа = "МинимальнаяПартияПоставки" + ВидЦены.ИмяКолонки;
				ИмяКолонкиУстановкаУсловий = "УстановкаУсловий" + ВидЦены.ИмяКолонки;
				Если ЕстьКолонка(СтрокаЦен, ИмяКолонкиУпаковкаЗаказа) И ЕстьКолонка(СтрокаЦен, ИмяКолонкиУстановкаУсловий) Тогда
					Если СтрокаЦен[ИмяКолонкиУстановкаУсловий] Тогда
						НоваяСтрока.МинимальнаяПартияПоставки   = СтрокаЦен[ИмяКолонкиУпаковкаЗаказа];
						НоваяСтрока.УстановкаУсловий   = СтрокаЦен[ИмяКолонкиУстановкаУсловий];
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока.ВидЦены = ВидЦены.Ссылка;
			КонецЕсли;
			
			Если ЕстьКолонкаЦены Тогда
				НоваяСтрока.Цена = Цена;
				Если Не ЭтоРегистрацияЦенПоставщика Тогда
					НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
			Если Параметры.Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				Если ЕстьКолонка(СтрокаЦен, "Упаковка" + ИмяКолонки) Тогда
					НоваяСтрока.Упаковка = СтрокаЦен["Упаковка" + ИмяКолонки];
				ИначеЕсли Параметры.Форма.ИспользуетсяЦенообразование25 
					И СтрокаЦен.ЕдиницаИзмерения <> СтрокаЦен.УпаковкаЦО Тогда
						НоваяСтрока.Упаковка = СтрокаЦен.УпаковкаЦО;
				КонецЕсли;
				
				Если ЭтоРегистрацияЦенПоставщика Тогда
					ИмяКолонкиУпаковкаЗаказа = "УпаковкаЗаказа" + ВидЦены.ИмяКолонки;
					ИмяКолонкиУпаковкаИмя = "УпаковкаИмя" + ВидЦены.ИмяКолонки;
					Если ЕстьКолонка(СтрокаЦен, ИмяКолонкиУпаковкаЗаказа) И ЕстьКолонка(СтрокаЦен, ИмяКолонкиУстановкаУсловий) Тогда
						Если СтрокаЦен[ИмяКолонкиУстановкаУсловий] Тогда
							НоваяСтрока.УпаковкаЗаказа = СтрокаЦен[ИмяКолонкиУпаковкаЗаказа];
							НоваяСтрока.УстановкаУсловий = СтрокаЦен[ИмяКолонкиУстановкаУсловий];
							Если СтрокаЦен.Свойство(ИмяКолонкиУпаковкаИмя) Тогда
								НоваяСтрока.УпаковкаИмя = СтрокаЦен[ИмяКолонкиУпаковкаИмя];
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭтоРегистрацияЦенПоставщика Тогда
				Если ЕстьКолонка(СтрокаЦен, "Формула" + ИмяКолонки) Тогда
					НоваяСтрока.Формула = СтрокаЦен["Формула" + ИмяКолонки];
				КонецЕсли;
				Если ЕстьКолонка(СтрокаЦен, "Валюта" + ИмяКолонки) Тогда
					НоваяСтрока.Валюта  = СтрокаЦен["Валюта" + ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует виды цен из таблицы формы ВыбранныеЦены в табличную часть ВидыЦен объекта.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
// * Объект - ОбработкаОбъект.ПрайсЛист, ДокументОбъект.УстановкаЦенНоменклатуры -
// * ВыбранныеЦены - ТаблицаЗначений -:
// ** Ссылка - СправочникСсылка.ВидыЦен, СправочникСсылка.ВидыЦенПоставщиков -
// ** Идентификатор - Строка -
// ** Наименование - Строка -
// * СохраненныеДокументы - ТаблицаЗначений -:
// ** Ссылка - ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика -
// * Элементы - ЭлементыФормы -:
// ** ДеревоЦен - ДеревоЗначений, ТаблицаФормы, ДанныеФормыЭлементДерева, ДанныеФормыДерево -
// * ДеревоЦен - ДеревоЗначений, ТаблицаФормы, ДанныеФормыЭлементДерева, ДанныеФормыДерево -
// * КомпоновщикНастроекОтбор - КомпоновщикНастроекКомпоновкиДанных -
//  ТабличнаяЧасть - ДокументТабличнаяЧасть.УстановкаЦенНоменклатуры.ВидыЦен - Табличная часть
//  СохранятьНастройкиКомпоновкиДанных - Булево - Сохранять настройки компоновки данных
Процедура ПоместитьВидыЦенВТабличнуюЧасть(Форма,
											ТабличнаяЧасть,
											СохранятьНастройкиКомпоновкиДанных = Ложь) Экспорт
	
	ТабличнаяЧасть.Очистить();
	
	Если ТипЗнч(Форма) = Тип("Структура") И НЕ Форма.Свойство("АдресХранилищаНастройкиКомпоновкиДанных") Тогда
		СохранятьНастройкиКомпоновкиДанных = Ложь;
	КонецЕсли;
	
	Если СохранятьНастройкиКомпоновкиДанных Тогда
		ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаНастройкиКомпоновкиДанных);
	КонецЕсли;
	
	МассивВыбранныхВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	Для Каждого СтрокаВидЦены Из МассивВыбранныхВидовЦен Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ВидЦены = СтрокаВидЦены.Ссылка;
		
		Если СохранятьНастройкиКомпоновкиДанных Тогда
			НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(СтрокаВидЦены.Ссылка, "ВидЦены");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(НайденнаяСтрока.НастройкиКомпоновкиДанных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загрузить из excel
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  МассивСтруктурВидыЦен	 - Массив - Виды цен
//  МассивСтруктурТовары	 - Массив - Товары
// 
// Возвращаемое значение:
//  Структура - Результат загрузки.
//
Функция ЗагрузитьИзExcel(Форма, МассивСтруктурВидыЦен, МассивСтруктурТовары) Экспорт
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Выполнено",      Истина);
	РезультатЗагрузки.Вставить("ОписаниеОшибки", "");
	
	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТаблицаТовары = СоздатьТаблицуТовары(Ложь, ИспользуетсяЦенообразование25);
	Иначе
		ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	// Определение видов цен
	ВидыЦен = Новый ТаблицаЗначений;
	ВидыЦен.Колонки.Добавить("ВидЦены");
	ВидыЦен.Колонки.Добавить("ИдентификаторВидЦены");
	ВидыЦен.Колонки.Добавить("ИмяКолонки");
	ВидыЦен.Колонки.Добавить("НомерКолонкиЦена");
	ВидыЦен.Колонки.Добавить("НомерКолонкиУпаковка");
	
	Для Каждого СтруктураВидЦены Из МассивСтруктурВидыЦен Цикл
		
		Попытка
			
			ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураВидЦены.ИдентификаторВидЦены));
			
			Если Не ЗначениеЗаполнено(ВидЦены) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены);
			Если СтрокаВидЦены.Выбрана Тогда
				
				НоваяСтрока = ВидыЦен.Добавить();
				НоваяСтрока.ВидЦены              = ВидЦены;
				НоваяСтрока.ИдентификаторВидЦены = СтруктураВидЦены.ИдентификаторВидЦены;
				НоваяСтрока.НомерКолонкиЦена     = СтруктураВидЦены.НомерКолонкиЦена;
				НоваяСтрока.НомерКолонкиУпаковка = СтруктураВидЦены.НомерКолонкиУпаковка;
				НоваяСтрока.ИмяКолонки           = СтрокаВидЦены.ИмяКолонки;
				
			КонецЕсли;
			
		Исключение
			РезультатЗагрузки.Выполнено = Ложь;
			РезультатЗагрузки.ОписаниеОшибки =
				НСтр("ru = 'Файл не может быть загружен.
				            |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".'");
			Возврат РезультатЗагрузки;
		КонецПопытки;
		
	КонецЦикла;
	ВидыЦен.Индексы.Добавить("ИдентификаторВидЦены");
	
	Если ВидыЦен.Количество() = 0 Тогда
		РезультатЗагрузки.Выполнено = Ложь;
		РезультатЗагрузки.ОписаниеОшибки =
			НСтр("ru = 'Файл не может быть загружен.
			            |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".'");
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
			СтрокаТЧ.Выбрана = Ложь;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ВидыЦен Цикл
			СтрокаВидаЦен = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены);
			СтрокаВидаЦен.Выбрана = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Загрузка цен в ДеревоЦен
	Для Каждого СтруктураТовар Из МассивСтруктурТовары Цикл
		
		СтрокаВидЦены = ВидыЦен.Найти(СтруктураТовар.ИдентификаторВидЦены);
		Если СтрокаВидЦены = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторНоменклатура));
			Если ИспользуетсяЦенообразование25 Тогда
				Если Не ЗначениеЗаполнено(Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаТовары.Добавить();
				НоваяСтрока.Номенклатура   = Номенклатура;
				НоваяСтрока.ХарактеристикаЦО = Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторХарактеристика));
				НоваяСтрока.СерияЦО        = Справочники.СерииНоменклатурыДляЦенообразования.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторСерияЦО));
				НоваяСтрока.УпаковкаЦО     = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторУпаковкаЦО));
				НоваяСтрока.Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторУпаковка));
				НоваяСтрока.УпаковкаЦОДляСвязи = ?(НоваяСтрока.УпаковкаЦО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения"), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), НоваяСтрока.УпаковкаЦО);
				СерияЦОПредопределенный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.СерияЦО, "Предопределенный");
				НоваяСтрока.СерияЦОДляСвязи    = ?((ЗначениеЗаполнено(СерияЦОПредопределенный) И СерияЦОПредопределенный), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), НоваяСтрока.СерияЦО);
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.ВидЦены;
				НоваяСтрока.Цена           = СтруктураТовар.Цена;
			Иначе
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторХарактеристика));
				Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторУпаковка));
			КонецЕсли;
		Исключение
			РезультатЗагрузки.Выполнено = Ложь;
			РезультатЗагрузки.ОписаниеОшибки =
				НСтр("ru = 'Файл не может быть загружен.
				            |Возможно, что структура колонок файла была повреждена.'");
			Возврат РезультатЗагрузки;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИспользуетсяЦенообразование25 Тогда
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(
				Форма,
				Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика),
				КэшДанных);
			Если СтрокаДереваЦен = Неопределено Тогда
				
				СтрокаДереваЦен = НайтиСтрокуДереваЦен(
					Форма,
					Новый Структура("Номенклатура, Характеристика", Номенклатура, ПустаяХарактеристика),
					КэшДанных);
				Если СтрокаДереваЦен = Неопределено Тогда
					
					СтрокаДереваЦен = Форма.ДеревоЦен.ПолучитьЭлементы().Добавить();
					СтрокаДереваЦен.Номенклатура = Номенклатура;
					
					НоваяСтрока = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
					НоваяСтрока.СтрокаДереваЦен = СтрокаДереваЦен;
					НоваяСтрока.ИдентификаторСтроки = СтрокаДереваЦен.ПолучитьИдентификатор();
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Характеристика) Тогда
					
					СтрокаДереваЦен = СтрокаДереваЦен.ПолучитьЭлементы().Добавить();
					СтрокаДереваЦен.Номенклатура   = Номенклатура;
					СтрокаДереваЦен.Характеристика = Характеристика;
					
					НоваяСтрока = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрока.Номенклатура    = Номенклатура;
					НоваяСтрока.Характеристика  = Характеристика;
					НоваяСтрока.СтрокаДереваЦен = СтрокаДереваЦен;
					НоваяСтрока.ИдентификаторСтроки = СтрокаДереваЦен.ПолучитьИдентификатор();
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = СтруктураТовар.Цена;
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				СтрокаДереваЦен["Упаковка"+СтрокаВидЦены.ИмяКолонки] = Упаковка;
			КонецЕсли;
			СтрокаДереваЦен["ИзмененаВручную"+СтрокаВидЦены.ИмяКолонки] = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТаблицаНоменклатуры = ДобавитьТовары(Форма, ТаблицаТовары, КэшДанных);

		Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
			
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(Форма, СтрокаТаблицы, КэшДанных);
			
			НоваяЦена = СтрокаТаблицы.Цена;
			ИмяКолонкиВидаЦены = ИмяКолонкиПоВидуЦены(СтрокаТаблицы.ВидЦены, КэшДанных);
			
			ОбновитьДанныеВСтрокеПоЦенамУпаковкам(СтрокаДереваЦен, Новый Структура("ИспользоватьУпаковкиНоменклатуры, НоваяЦена, Упаковка, ИмяКолонкиВидаЦены", Форма.ИспользоватьУпаковкиНоменклатуры, НоваяЦена, СтрокаТаблицы.Упаковка, ИмяКолонкиВидаЦены));
		КонецЦикла;

	КонецЕсли;
	
	ОбновитьСтарыеЦеныНоменклатуры(Форма, КэшДанных, ТаблицаНоменклатуры);
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = Новый Массив;
	Для Каждого СтрокаТЧ Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(
			Форма,
			УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены));
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены.Ссылка) = Неопределено Тогда
					ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Форма.РассчитыватьАвтоматически Тогда
		РассчитатьВычисляемыеЦены(
			Форма,
			КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,
			КэшДанных,
			ЗависимыеЦены,
			Ложь);
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(
			Форма,
			КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,
			ЗависимыеЦены,
			КэшДанных);
	КонецЕсли;
	
	ПереформироватьТаблицуЦен(Форма, Ложь);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Установить признак ручного изменения вычисляемых цен
//
// Параметры:
//  Форма 				- см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры	 - ТаблицаЗначений - Номенклатура, по которой изменены цены
//  ИзмененноеПоле		 - Строка - Имя измененного поля
//  КэшДанных					 - Соответствие - Кэш данных.
//
Процедура УстановитьПризнакРучногоИзмененияВычисляемыхЦен(Форма,
	                                                      ТаблицаНоменклатуры,
	                                                      ИзмененноеПоле = Неопределено,
	                                                      КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	СтрокаИзмененныйВидЦены = УстановкаЦенКлиентСервер.СтрокаВидаЦеныПоИмениПоля(Форма.ВыбранныеЦены, ИзмененноеПоле);
	Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
	
		МассивСтрокЗависимыхВидовЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаИзмененныйВидЦены);
		УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма, ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен, КэшДанных);
	
	КонецЕсли;
	
КонецПроцедуры

// Установить признак ручного изменения для видов цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаНоменклатуры	 - ТаблицаЗначений - Номенклатура, по которой изменены цены
//  МассивСтрокЗависимыхВидовЦен - Массив - Зависимые виды цен
//  КэшДанных					 - Соответствие - Кэш данных.
//
Процедура УстановитьПризнакРучногоИзмененияДляВидовЦен(Форма,
	                                                   ТаблицаНоменклатуры,
	                                                   МассивСтрокЗависимыхВидовЦен,
	                                                   КэшДанных = Неопределено) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных(КэшДанных);
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, ПозицияНоменклатуры, КэшДанных);
		
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхВидовЦен Цикл
			
			Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;
				СтрокаТаблицыЦен["ИзмененаАвтоматически" + СтрокаВидЦены.ИмяКолонки] = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает последние курсы валют во временное хранилище.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура КурсыВалют(Форма, КэшДанных) Экспорт
	
	Если КэшДанных.КурсыВалют = Неопределено Тогда
		СоответствиеКурсовВалют(Форма, КэшДанных);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу с колонками Упаковка и Коэффициент.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма.
//  ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
//  КэшДанных - Структура - Кэш данных.
//
// Возвращаемое значение:
//  Соответствие - соответствие номенклатуры и коэффициентов упаковок.
//
Функция КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма, ТаблицаНоменклатуры = Неопределено, КэшДанных = Неопределено) Экспорт
	
	МассивВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	ТаблицаУпаковокНоменклатуры = СоздатьТаблицуУпаковокНоменклатуры();
	
	ДеревоЦенЭтоДанныеФормыДерево = (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"));

	Если ДеревоЦенЭтоДанныеФормыДерево Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	Иначе
		ЭлементыНоменклатура = Форма.ДеревоЦен.Строки;		
	КонецЕсли;	
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(ЭлементНоменклатура, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);
			
			Если ДеревоЦенЭтоДанныеФормыДерево Тогда
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Иначе
				ЭлементыХарактеристики = ЭлементНоменклатура.Строки;		
			КонецЕсли;
			
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(ЭлементХарактеристика, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);
			КонецЦикла;
			
		КонецЦикла;
		
	иначе
		Если КэшДанных = Неопределено Тогда 
		
			КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
		
		КонецЕсли;

		Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл		
			
			СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, ПозицияНоменклатуры, КэшДанных);
			
			ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(СтрокаТаблицыЦен, МассивВидовЦен, ТаблицаУпаковокНоменклатуры);		
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
	
КонецФункции

// Возвращает таблицу с колонками Номенклатура, Упаковка и Коэффициент.
//
// Параметры:
//  ТаблицаУпаковокНоменклатуры - ТаблицаЗначений - содержит номенклатуры и упаковки, для которых необходимо получить коэффициенты.
//
// Возвращаемое значение:
//  Соответствие - соответствие номенклатуры и коэффициентов упаковок.
//
Функция КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаУпаковок
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковок.Упаковка КАК Упаковка,
	|	ТаблицаУпаковок.Номенклатура КАК Номенклатура,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент
	|ИЗ
	|	ТаблицаУпаковок КАК ТаблицаУпаковок";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаКоэффициентУпаковки", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ТаблицаУпаковок.Упаковка", "ТаблицаУпаковок.Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаУпаковокНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеКоэффициентовУпаковокНоменклатуры = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеКоэффициентовУпаковокНоменклатуры.Вставить(Строка(Выборка.Номенклатура.УникальныйИдентификатор()) + Строка(Выборка.Упаковка.УникальныйИдентификатор()), Выборка.Коэффициент);
		
	КонецЦикла;
		
	Возврат СоответствиеКоэффициентовУпаковокНоменклатуры;	
	
КонецФункции

// Осуществляет загрузку цен для всех строк табличной части товары
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 
Процедура ЗагрузитьТабличнуюЧастьТовары(Форма, КэшДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика Тогда
		
		Если Форма.ИспользуетсяЦенообразование25 Тогда
		
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Индекс              КАК Индекс,
			|	ВременнаяТаблицаТовары.Номенклатура        КАК Номенклатура,
			|	ВременнаяТаблицаТовары.ХарактеристикаЦО    КАК ХарактеристикаЦО,
			|	ВременнаяТаблицаТовары.СерияЦО             КАК СерияЦО,
			|	ВременнаяТаблицаТовары.СерияЦОДляСвязи     КАК СерияЦОДляСвязи,
			|	ВременнаяТаблицаТовары.УпаковкаЦО          КАК УпаковкаЦО,
			|	ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи  КАК УпаковкаЦОДляСвязи,
			|	ВременнаяТаблицаТовары.ВидЦены             КАК ВидЦены,
			|	ВременнаяТаблицаТовары.Цена                КАК Цена,
			|	ВременнаяТаблицаТовары.Упаковка            КАК Упаковка,
			|	ВременнаяТаблицаТовары.Формула             КАК Формула,
			|	ВременнаяТаблицаТовары.Валюта              КАК Валюта,
			|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную КАК ЦенаИзмененаВручную
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК ВременнаяТаблицаТовары
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, ХарактеристикаЦО, СерияЦО,СерияЦОДляСвязи, УпаковкаЦО, УпаковкаЦОДляСвязи, ВидЦены
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура     КАК Номенклатура,
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.СерияЦО          КАК СерияЦО,
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.УпаковкаЦО       КАК УпаковкаЦО,
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены          КАК ВидЦены,
			|	ИСТИНА КАК ЗапретРедактирования
			|ПОМЕСТИТЬ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
			|ИЗ
			|	&ТоварыЗапрещенныеКРедактированию КАК ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	ХарактеристикаЦО,
			|	СерияЦО,
			|	УпаковкаЦО,
			|	ВидЦены
			|;
			|ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Индекс              КАК Индекс,
			|	ВременнаяТаблицаТовары.Номенклатура        КАК Номенклатура,
			|	ВременнаяТаблицаТовары.ХарактеристикаЦО    КАК ХарактеристикаЦО,
			|	ВременнаяТаблицаТовары.СерияЦО             КАК СерияЦО,
			|	ВременнаяТаблицаТовары.УпаковкаЦО          КАК УпаковкаЦО,
			|	ВременнаяТаблицаТовары.ВидЦены             КАК ВидЦены,
			|	ВременнаяТаблицаТовары.Цена                КАК Цена,
			|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную КАК ЦенаИзмененаВручную,
			|	
			|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
			|		ЦеныНоменклатуры.Цена
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|	КОНЕЦ КАК ДействующаяЦена,
			|	
			|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 ТОГДА 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
			|		ЦеныНоменклатуры.Цена
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|	КОНЕЦ)/ 
			|	
			|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
			|		ЦеныНоменклатуры.Цена
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
			|	
			|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
			|	ЕСТЬNULL(ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ЗапретРедактирования, ЛОЖЬ) КАК ЗапретРедактирования,
			|	ВременнаяТаблицаТовары.Формула                        КАК Формула,
			|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.Формула, ВидыЦен.Формула) КАК ФормулаПоУмолчанию,
			|	ВременнаяТаблицаТовары.Валюта                         КАК Валюта
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Дата, (Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО, ВидЦены) В (Выбрать Номенклатура, ХарактеристикаЦО, СерияЦОДляСвязи, УпаковкаЦОДляСвязи, ВидЦены ИЗ ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
			|			ПО ЦеныНоменклатуры.Номенклатура     = ВременнаяТаблицаТовары.Номенклатура
			|			 И ЦеныНоменклатуры.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
			|			 И ЦеныНоменклатуры.СерияЦО          = ВременнаяТаблицаТовары.СерияЦОДляСвязи
			|			 И ЦеныНоменклатуры.УпаковкаЦО       = ВременнаяТаблицаТовары.УпаковкаЦОДляСвязи
			|			 И ЦеныНоменклатуры.ВидЦены          = ВременнаяТаблицаТовары.ВидЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию КАК
			|			ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
			|		ПО ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура    = ВременнаяТаблицаТовары.Номенклатура
			|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ХарактеристикаЦО = ВременнаяТаблицаТовары.ХарактеристикаЦО
			|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены          = ВременнаяТаблицаТовары.ВидЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
			|		ПО ВременнаяТаблицаТовары.ВидЦены = ВидыЦен.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенЦеновыеГруппы
			|		ПО (ВременнаяТаблицаТовары.ВидЦены = ВидыЦенЦеновыеГруппы.Ссылка)
			|		И (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВидыЦенЦеновыеГруппы.ЦеноваяГруппа)
			|	
			|УПОРЯДОЧИТЬ ПО
			|	Индекс
			|");
			
			ТаблицаТоваров = Форма.Объект.Товары2_5.Выгрузить();
			
			ТаблицаТоваров.Колонки.Добавить("СерияЦОДляСвязи",    Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
			ТаблицаТоваров.Колонки.Добавить("УпаковкаЦОДляСвязи", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			
			МассивСерийЦО = ТаблицаТоваров.ВыгрузитьКолонку("СерияЦО"); // Массив Из СправочникСсылка.СерииНоменклатурыДляЦенообразования 
			СерияЦОПредопределенный = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСерийЦО, "Предопределенный");
			
			Для Каждого Строка Из ТаблицаТоваров Цикл
				СтрокаСерияЦОПредопределенный = СерияЦОПредопределенный.Получить(Строка.СерияЦО);
				Строка.СерияЦОДляСвязи   = ?((ЗначениеЗаполнено(СтрокаСерияЦОПредопределенный) И СтрокаСерияЦОПредопределенный), Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), Строка.СерияЦО);
				Строка.УпаковкаЦОДляСвязи   = Строка.Упаковка;
			КонецЦикла;
			
		Иначе
		
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
			|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
			|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
			|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
			|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
			|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
			|	ВременнаяТаблицаТовары.Формула                        КАК Формула,
			|	ВременнаяТаблицаТовары.Валюта                         КАК Валюта,
			|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК ВременнаяТаблицаТовары
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура КАК Номенклатура,
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Характеристика КАК Характеристика,
			|	ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены КАК ВидЦены,
			|	ИСТИНА КАК ЗапретРедактирования
			|ПОМЕСТИТЬ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
			|ИЗ
			|	&ТоварыЗапрещенныеКРедактированию КАК ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	ВидЦены
			|;
			|ВЫБРАТЬ
			|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
			|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
			|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
			|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
			|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
			|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную,
			|	
			|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
			|		ЦеныНоменклатуры.Цена
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|	КОНЕЦ КАК ДействующаяЦена,
			|	
			|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 ТОГДА 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
			|		ЦеныНоменклатуры.Цена
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|	КОНЕЦ)/ 
			|	
			|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
			|		ЦеныНоменклатуры.Цена
			|	ИНАЧЕ
			|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
			|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
			|	
			|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
			|	ЕСТЬNULL(ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ЗапретРедактирования, ЛОЖЬ) КАК ЗапретРедактирования,
			|	ВременнаяТаблицаТовары.Формула                        КАК Формула,
			|	ЕСТЬNULL(ВидыЦенЦеновыеГруппы.Формула, ВидыЦен.Формула) КАК ФормулаПоУмолчанию,
			|	ВременнаяТаблицаТовары.Валюта                         КАК Валюта
			|ИЗ
			|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, (Номенклатура, Характеристика, ВидЦены) В (Выбрать Номенклатура, Характеристика, ВидЦены ИЗ ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
			|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
			|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
			|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыЗапрещенныеКРедактированию КАК
			|			ВременнаяТаблицаТоварыЗапрещенныеКРедактированию
			|		ПО ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
			|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.Характеристика = ВременнаяТаблицаТовары.Характеристика
			|		И ВременнаяТаблицаТоварыЗапрещенныеКРедактированию.ВидЦены = ВременнаяТаблицаТовары.ВидЦены
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
			|		ПО ВременнаяТаблицаТовары.ВидЦены = ВидыЦен.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенЦеновыеГруппы
			|		ПО (ВременнаяТаблицаТовары.ВидЦены = ВидыЦенЦеновыеГруппы.Ссылка)
			|		И (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВидыЦенЦеновыеГруппы.ЦеноваяГруппа)
			|	
			|УПОРЯДОЧИТЬ ПО
			|	Индекс
			|");
			
			ТаблицаТоваров = Форма.Объект.Товары.Выгрузить(); // ТаблицаЗначений
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.НоменклатураПартнера           КАК НоменклатураПартнера,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.ВидЦеныПоставщика КАК Справочник.ВидыЦенПоставщиков) КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ВременнаяТаблицаТовары.УпаковкаЗаказа                 КАК УпаковкаЗаказа,
		|	ВременнаяТаблицаТовары.МинимальнаяПартияПоставки      КАК МинимальнаяПартияПоставки,
		|	ВременнаяТаблицаТовары.УстановкаУсловий               КАК УстановкаУсловий
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТоварыПред
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
		|;
		|
		|/////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Индекс                КАК Индекс,
		|	Таблица.НоменклатураПартнера  КАК НоменклатураПартнера,
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.Цена                  КАК Цена,
		|	Таблица.Упаковка              КАК Упаковка,
		|	Таблица.УпаковкаЗаказа        КАК УпаковкаЗаказа,
		|	Таблица.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки,
		|	Таблица.УстановкаУсловий      КАК УстановкаУсловий,
		|	Таблица.ВидЦены               КАК ВидЦены,
		|	Таблица.ВидЦены.Владелец      КАК Партнер
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	ВременнаяТаблицаТоварыПред КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦены,
		|	Партнер
		|;
		|
		|/////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыПоставщиков.Номенклатура              КАК Номенклатура,
		|	ЦеныНоменклатурыПоставщиков.Характеристика            КАК Характеристика,
		|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика         КАК ВидЦеныПоставщика,
		|	ЦеныНоменклатурыПоставщиков.Валюта                    КАК Валюта,
		|	ЦеныНоменклатурыПоставщиков.Упаковка                  КАК Упаковка,
		|	ЦеныНоменклатурыПоставщиков.Цена                      КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатурыПоставщиковСрезПоследних
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&Дата, 
		|			(Номенклатура, Характеристика, ВидЦеныПоставщика, Партнер) В
		|			(Выбрать
		|				Т.Номенклатура,
		|				Т.Характеристика,
		|				Т.ВидЦены,
		|				Т.Партнер
		|			ИЗ
		|				ВременнаяТаблицаТовары КАК Т)
		|) КАК ЦеныНоменклатурыПоставщиков
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦеныПоставщика
		|;
		|
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
		|	ВременнаяТаблицаТовары.НоменклатураПартнера         КАК НоменклатураПартнера,
		|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
		|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
		|	ЛОЖЬ                                                  КАК ЦенаИзмененаВручную,
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ КАК ДействующаяЦена,
		|	
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 ТОГДА 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ)/ 
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
		|		ЦеныНоменклатуры.Цена
		|	ИНАЧЕ
		|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2,1)
		|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(25,2)) КАК Процент,
		|	
		|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
		|	ВременнаяТаблицаТовары.УпаковкаЗаказа                 КАК УпаковкаЗаказа,
		|	ВременнаяТаблицаТовары.МинимальнаяПартияПоставки      КАК МинимальнаяПартияПоставки,
		|	ВременнаяТаблицаТовары.УстановкаУсловий               КАК УстановкаУсловий
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ЦеныНоменклатурыПоставщиковСрезПоследних КАК ЦеныНоменклатуры
		|			ПО ЦеныНоменклатуры.Номенклатура           = ВременнаяТаблицаТовары.Номенклатура
		|			 И ЦеныНоменклатуры.Характеристика         = ВременнаяТаблицаТовары.Характеристика
		|			 И ЦеныНоменклатуры.ВидЦеныПоставщика      = ВременнаяТаблицаТовары.ВидЦены
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");
		
		ТаблицаТоваров = Форма.Объект.Товары.Выгрузить(); // ТаблицаЗначений
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ДобавитьТовары(Форма, ТаблицаТоваров, КэшДанных);

	Если ТаблицаТоваров.Колонки.Найти("Индекс") = Неопределено Тогда
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Форма.Дата) - 1);
	Иначе
		Запрос.УстановитьПараметр("Дата", ДатаДляЗапросаЦенНоменклатуры(Форма));
	КонецЕсли;

	Если Не ЭтоРегистрацияЦенПоставщика Тогда
		ТаблицаНоменклатурыЗапрещеннойКРедактированию = ПолучитьЗапрещеннуюКРедактированиюНоменклатуру(Форма, ТаблицаТоваров);
		Запрос.УстановитьПараметр("ТоварыЗапрещенныеКРедактированию", ТаблицаНоменклатурыЗапрещеннойКРедактированию);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика Тогда
		УстановитьПометкуИзмененныхФормул(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Копирует цены из таблицы формы ДеревоЦен в табличную часть Товары объекта
//
// Параметры:
// Параметры - Структура - где:
//  * Форма    - см. ПостроитьДеревоЦен.Форма.
//  * СохранятьБазовые - Булево - указывает на необходимость помещения в табличную часть базовых видов цен.
//
Процедура ПоместитьЦеныВТабличнуюЧасть(Параметры) Экспорт
	
	ИспользуетсяЦенообразование25 = Параметры.Форма.ИспользуетсяЦенообразование25;
	
	ТабличныеЧасти = Новый Массив;
	
	Если НЕ Параметры.Свойство("ТолькоИзмененные") Тогда
		Параметры.Вставить("ТолькоИзмененные", Ложь);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Документы) = Тип("Массив") Тогда
		Для Каждого Документ Из Параметры.Документы Цикл
			Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
				ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
				Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
					ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
				КонецЕсли;
			КонецЕсли;
			Если ИспользуетсяЦенообразование25 Тогда
				ТабличныеЧасти.Добавить(Документ.Товары2_5);
			Иначе
				ТабличныеЧасти.Добавить(Документ.Товары);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
			ЗаполнитьЗначенияСвойств(Параметры.Документы, Параметры.РеквизитыНовыхДокументов);
			Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
				ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Параметры.Документы.ВидыЦен, Истина);
			КонецЕсли;
		КонецЕсли;
		Если ИспользуетсяЦенообразование25 Тогда
			ТабличныеЧасти.Добавить(Параметры.Документы.Товары2_5);
		Иначе
			ТабличныеЧасти.Добавить(Параметры.Документы.Товары);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	ВидыЦен = Новый Массив;
	Для Каждого ВидЦены Из Параметры.Форма.ВыбранныеЦены Цикл
		Если ВидЦены.Выбрана Или Параметры.СохранятьБазовые И ВидЦены.Влияет Тогда
			ВидыЦен.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("КоличествоВидовЦен", ВидыЦен.Количество());
	Параметры.Вставить("ВидыЦен",            ВидыЦен);
	
	Если ТабличныеЧасти.Количество() = 0 И Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
		
		Если ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
			Документ = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		Иначе
			Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
		
		Если Не ЭтоРегистрацияЦенПоставщика(Параметры.Форма) Тогда
			ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
		КонецЕсли;
		
		Параметры.Документы.Добавить(Документ);
		Если ИспользуетсяЦенообразование25 Тогда
			ТабличныеЧасти.Добавить(Документ.Товары2_5);
		Иначе
			ТабличныеЧасти.Добавить(Документ.Товары);
		КонецЕсли;
		
	КонецЕсли;
	Параметры.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	Параметры.Вставить("КоличествоСтрок", 0);

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.Форма,"ТаблицаЦен") 
		И ТипЗнч(Параметры.Форма.ТаблицаЦен) = Тип("ТаблицаЗначений") Тогда
		
		Параметры.ТабличныеЧасти[0].Загрузить(Параметры.Форма.ТаблицаЦен);
		
	Иначе
		
		ДеревоЦенЭтоДанныеФормыДерево = (ТипЗнч(Параметры.Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"));
		
		Если Параметры.Форма.ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии
			Или Параметры.Форма.ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			
			ЭлементыНоменклатура = Новый Массив;
			Если ДеревоЦенЭтоДанныеФормыДерево Тогда
				НоменклатураБезИерархии(Параметры.Форма.ДеревоЦен.ПолучитьЭлементы(),ЭлементыНоменклатура);
			Иначе
				НоменклатураБезИерархии(Параметры.Форма.ДеревоЦен.Строки,ЭлементыНоменклатура);
			КонецЕсли;
				
		КонецЕсли; 
		
		ДобавитьСтрокуВТабличнуюЧасть(ДеревоЦенЭтоДанныеФормыДерево, 1, Параметры.Форма.ДеревоЦен, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НоменклатураБезИерархии(СтрокиИерархии,МассивСтрок)
	
	Для Каждого СтрокаИерархии Из СтрокиИерархии Цикл
		Если СтрокаИерархии.ЭтоИерархия Тогда
			Если ТипЗнч(СтрокаИерархии) = Тип("ДанныеФормыЭлементДерева") Тогда
				НоменклатураБезИерархии(СтрокаИерархии.ПолучитьЭлементы(),МассивСтрок)
			ИначеЕсли ТипЗнч(СтрокаИерархии) = Тип("СтрокаДереваЗначений") Тогда
				НоменклатураБезИерархии(СтрокаИерархии.Строки,МассивСтрок)
			КонецЕсли;
		Иначе
			МассивСтрок.Добавить(СтрокаИерархии);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Возвращает уникальное имя колонки дерева цен по ссылке на вид цены
//
// Параметры:
//  ВидЦены - СправочникСсылка.ВидыЦен - Ссылка на вид цены
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
// Возвращаемое значение:
//  Строка - Имя колонки вида цены.
//
Функция ИмяКолонкиПоВидуЦены(ВидЦены, КэшДанных) Экспорт
	
	Значение = КэшДанных.СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Получить(ВидЦены);
	Если Значение = Неопределено Тогда
		Значение = "ВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
		КэшДанных.СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Вставить(ВидЦены, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Осуществляет поиск строки дерева цен по полям (Номенклатура, Характеристика).
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ВходящиеДанныеПоиска - Структура, ВыборкаИзРезультатаЗапроса - входящие параметры для поиска
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  ОбновитьТаблицуСоответвия - Булево - Истина, если строчку не нашли, возможно Таблица устарела, необходимо поробовать ее обновить
//
// Возвращаемое значение:
//  СтрокаДереваЗначений, ДанныеФормыЭлементКоллекции - найденная строка дерева цен.
//
Функция НайтиСтрокуДереваЦен(Форма, ВходящиеДанныеПоиска, КэшДанных, ОбновитьТаблицуСоответвия = Истина) Экспорт
	
	ДанныеПоиска = Новый Структура;
	ДанныеПоиска.Вставить("ВидНоменклатуры");
	ДанныеПоиска.Вставить("Номенклатура");
	ДанныеПоиска.Вставить("Характеристика");
	ДанныеПоиска.Вставить("НоменклатураПартнера");
	ДанныеПоиска.Вставить("ХарактеристикаЦО");
	ДанныеПоиска.Вставить("СерияЦО");
	ДанныеПоиска.Вставить("УпаковкаЦО");
	ДанныеПоиска.Вставить("ВидНоменклатуры");

	ЗаполнитьЗначенияСвойств(ДанныеПоиска, ВходящиеДанныеПоиска);
	
	Если КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствия(Форма, КэшДанных);
	КонецЕсли;
	
	Если ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ДанныеПоиска.Номенклатура);
		Отбор.Вставить("Характеристика", ДанныеПоиска.Характеристика);
		Если Форма.ИспользоватьНоменклатуруПартнеров Тогда
			Отбор.Вставить("НоменклатураПартнера", ДанныеПоиска.НоменклатураПартнера);
		КонецЕсли;
		
	Иначе
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			Отбор = Новый Структура(
				"Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО",
				ДанныеПоиска.Номенклатура, 
				?(Форма.ИспользоватьХарактеристикиНоменклатуры И ЗначениеЗаполнено(ДанныеПоиска.ХарактеристикаЦО), ДанныеПоиска.ХарактеристикаЦО, Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка()),
				?(Форма.ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(ДанныеПоиска.СерияЦО), ДанныеПоиска.СерияЦО, Справочники.СерииНоменклатурыДляЦенообразования.ПустаяСсылка()),
				?(Форма.ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ДанныеПоиска.УпаковкаЦО), ДанныеПоиска.УпаковкаЦО, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка())
				);
			
		Иначе
			Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
				Отбор = Новый Структура(
					"Номенклатура, Характеристика",
					ДанныеПоиска.Номенклатура, ДанныеПоиска.Характеристика);
			Иначе
				Отбор = Новый Структура(
					"Номенклатура, Характеристика",
					ДанныеПоиска.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;

		Если Форма.ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам
			И ЗначениеЗаполнено(ДанныеПоиска.ВидНоменклатуры) Тогда
			
			Отбор.Вставить("ВидНоменклатуры", ДанныеПоиска.ВидНоменклатуры);
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ВернутьНайденнуюСтрокуДереваЦен(Форма, КэшДанных, Отбор, ОбновитьТаблицуСоответвия);
	
КонецФункции

Функция ВернутьНайденнуюСтрокуДереваЦен(Форма, КэшДанных, Отбор, Знач ОбновитьТаблицуСоответвия)

	НайденнаяСтрока = Неопределено;
	
	МассивСтрок = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Если (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево")) Тогда
			НайденнаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(МассивСтрок[0].ИдентификаторСтроки);
		Иначе
			НайденнаяСтрока = МассивСтрок[0].СтрокаДереваЦен;
		КонецЕсли;
	КонецЕсли;

	Если НайденнаяСтрока = Неопределено И ОбновитьТаблицуСоответвия Тогда
		ТаблицаСоответствия(Форма, КэшДанных, Истина);
		Возврат ВернутьНайденнуюСтрокуДереваЦен(Форма, КэшДанных, Отбор, Ложь);
	Иначе
		Возврат НайденнаяСтрока;
	КонецЕсли;
КонецФункции

//Сохраняет выбранные виды цен в таблицу значений
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ДляРедактирования - Булево
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. ИнициализироватьТаблицуВыбранныхЦен
//
Функция ВыбранныеВидыЦенВТаблицу(Форма, ДляРедактирования = Ложь) Экспорт
	
	ВидыЦен = ИнициализироватьТаблицуВыбранныхЦен();
	
	Для Каждого ТекСтрока Из Форма.ВыбранныеЦены Цикл
		Если (НЕ ДляРедактирования И ТекСтрока.Выбрана)
			Или (ДляРедактирования и ТекСтрока.Редактировать) Тогда
			СтрНов = ВидыЦен.Добавить();
			СтрНов.ВидЦены = ТекСтрока.Ссылка;
			СтрНов.РеквизитДопУпорядочивания = ТекСтрока.РеквизитДопУпорядочивания;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

//Инициализирует таблицу значений выбранных цен
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица для хранения выбранных цен
//
Функция ИнициализироватьТаблицуВыбранныхЦен() Экспорт
	
	ТаблицаВыбранныхВидовЦен = Новый ТаблицаЗначений();
	ТаблицаВыбранныхВидовЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаВыбранныхВидовЦен.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаВыбранныхВидовЦен;
КонецФункции

// Возвращает виды цен, зависимые от заданного вида цены
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  СтрокаВидЦены - ДанныеФормыЭлементКоллекции - Строка таблицы Выбранные Цены.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыЦен - Зависимые виды цен
//
Функция ЗависимыеОтВидаЦеныВидыЦен(Форма, СтрокаВидЦены) Экспорт
	
	ЗависимыеВидыЦен = Новый ТаблицаЗначений;
	ЗависимыеВидыЦен.Колонки.Добавить("ВидЦены");
	ЗависимыеВидыЦен.Колонки.Добавить("РеквизитДопУпорядочивания");
	
	Для Каждого ЗависимаяЦена Из СтрокаВидЦены.ЗависимыеЦены Цикл
		СтрокаЗависимойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
		Если СтрокаЗависимойЦены <> Неопределено 
			И СтрокаЗависимойЦены.Выбрана 
			И СтрокаЗависимойЦены.Редактировать Тогда
			НоваяСтрока = ЗависимыеВидыЦен.Добавить();
			НоваяСтрока.ВидЦены = СтрокаЗависимойЦены;
			НоваяСтрока.РеквизитДопУпорядочивания = Форма.ВыбранныеЦены.Индекс(СтрокаЗависимойЦены);
		КонецЕсли;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ЗависимыеВидыЦен Цикл
			
			Для Каждого ЗависимаяЦена Из ТекСтрока.ВидЦены.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
				Если СтрокаЗависимойЦены <> Неопределено 
					И СтрокаЗависимойЦены.Выбрана 
					И СтрокаЗависимойЦены.Редактировать 
					И ЗависимыеВидыЦен.Найти(СтрокаЗависимойЦены, "ВидЦены") = Неопределено Тогда
					
					НоваяСтрока = ЗависимыеВидыЦен.Добавить();
					НоваяСтрока.ВидЦены = СтрокаЗависимойЦены;
					НоваяСтрока.РеквизитДопУпорядочивания = Форма.ВыбранныеЦены.Индекс(СтрокаЗависимойЦены);
					
					Заполнять = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗависимыеВидыЦен.Сортировать("РеквизитДопУпорядочивания Возр");
	
	Возврат ЗависимыеВидыЦен.ВыгрузитьКолонку("ВидЦены");
	
КонецФункции

// Обработчик ПриИзменении дерева цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ИдентификаторСтроки - Число
//  ИмяТекущейКолонки - Строка
//  СтрокаПроверки - Строка - Упаковка или Валюта
//
Процедура ДеревоЦенУпаковкаВалютаПриИзменении(Форма, ИдентификаторСтроки, ИмяТекущейКолонки, СтрокаПроверки = "Упаковка") Экспорт
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма);
	ТекущаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаПроверки = "Упаковка" 
		И ЭтоРегистрацияЦенПоставщика
		И Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПартнера) Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("НоменклатураПартнера", ТекущаяСтрока.НоменклатураПартнера);
		Данные.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		Данные.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		Данные.Вставить("Упаковка", ТекущаяСтрока[ИмяТекущейКолонки]);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Форма.Объект.Партнер);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Данные, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Данные, "НоменклатураПартнера");
		
	КонецЕсли;
	
	ДобавлятьТекущуюСтроку = Ложь;
	ЕстьПодчиненныеСтроки = Ложь;
	Если Не ЭтоРегистрацияЦенПоставщика Тогда
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		ЕстьПодчиненныеСтроки = ПодчиненныеСтроки.Количество() > 0;
	КонецЕсли;
	
	ДобавлятьТекущуюСтроку = ЭтоРегистрацияЦенПоставщика 
								Или ТекущаяСтрока.ИндексКартинки = 2
								Или (ТекущаяСтрока.ИндексКартинки = 0 И Не ЕстьПодчиненныеСтроки);

	Если ДобавлятьТекущуюСтроку И СтрНайти(ИмяТекущейКолонки, СтрокаПроверки) > 0 Тогда
		
		ИмяКолонкиВидЦены = СтрЗаменить(ИмяТекущейКолонки, СтрокаПроверки, "");
		
		ТекущаяСтрока["ИзмененаВручную"       + ИмяКолонкиВидЦены] = Истина;
		ТекущаяСтрока["ИзмененаАвтоматически" + ИмяКолонкиВидЦены] = Ложь;
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика, Форма.ИспользуетсяЦенообразование25);
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана
			Или СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			ИмяКолонкиВалюта = "Валюта" + ИмяКолонки;
			ИмяКолонкиЗапретаРедактирования = "ЗапретРедактирования" + ИмяКолонки;
			
			Если Не ЭтоРегистрацияЦенПоставщика И ТекущаяСтрока[ИмяКолонкиЗапретаРедактирования] Тогда
				Продолжить
			КонецЕсли;
			
			Если ДобавлятьТекущуюСтроку Тогда
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				Если СтрокаПроверки = "Валюта" Тогда
					НоваяСтрока.Валюта     = ТекущаяСтрока[ИмяКолонкиВалюта];
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьПодчиненныеСтроки Тогда
				Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
					Если ПодчиненнаяСтрока[ИмяКолонкиЗапретаРедактирования] Тогда
						Продолжить
					КонецЕсли;
					
					НоваяСтрока = ТаблицаЗначений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
					НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
					НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
					КонецЕсли;
					Если СтрокаПроверки = "Валюта" Тогда
						НоваяСтрока.Валюта     = ТекущаяСтрока[ИмяКолонкиВалюта];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаЗначений, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика Тогда
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			РассчитатьЦеныПоИдентификаторуСтроки2_5(Форма, ИдентификаторСтроки, , ИмяТекущейКолонки, КэшДанных);
		Иначе	
			РассчитатьЦеныПоИдентификаторуСтроки(Форма, ИдентификаторСтроки,, ИмяТекущейКолонки, КэшДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриИзменении дерева цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ИдентификаторСтроки - Число
//  ИмяТекущейКолонки - Строка
//
Процедура ДеревоЦенУпаковкаЗаказаПриИзменении(Форма, ИдентификаторСтроки, ИмяТекущейКолонки) Экспорт
	
	ТекущаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаУпаковка = "УпаковкаЗаказа";
	Если СтрНайти(ИмяТекущейКолонки, СтрокаУпаковка) > 0 Тогда
		
		ИмяКолонкиВидЦены    = СтрЗаменить(ИмяТекущейКолонки, СтрокаУпаковка, "");
		
		ТекущаяСтрока["ИзмененаВручную"       + ИмяКолонкиВидЦены] = Истина;
		ТекущаяСтрока["ИзмененаАвтоматически" + ИмяКолонкиВидЦены] = Ложь;
		ТекущаяСтрока["УстановкаУсловий"      + ИмяКолонкиВидЦены] = Истина;
		
		Если ТекущаяСтрока[ИмяКолонкиВидЦены] = 0 Тогда
			ТекущаяСтрока[ИмяКолонкиВидЦены] = ТекущаяСтрока["СтараяЦена" + ИмяКолонкиВидЦены];
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока[ИмяТекущейКолонки] <> ТекущаяСтрока[ИмяТекущейКолонки] Тогда
			
			ПодчиненнаяСтрока[ИмяТекущейКолонки] = ТекущаяСтрока[ИмяТекущейКолонки];
			ПодчиненнаяСтрока["ИзмененаВручную"       + ИмяКолонкиВидЦены] = Истина;
			ПодчиненнаяСтрока["ИзмененаАвтоматически" + ИмяКолонкиВидЦены] = Ложь;
			ПодчиненнаяСтрока["УстановкаУсловий"      + ИмяКолонкиВидЦены] = Истина;
			
			Если ПодчиненнаяСтрока[ИмяКолонкиВидЦены] = 0 Тогда
				ПодчиненнаяСтрока[ИмяКолонкиВидЦены] = ПодчиненнаяСтрока["СтараяЦена" + ИмяКолонкиВидЦены];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик ПриИзменении дерева цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ИдентификаторСтроки - Число
//  ИмяТекущейКолонки - Строка
//
Процедура ДеревоЦенМинимальнаяПартияПриИзменении(Форма, ИдентификаторСтроки, ИмяТекущейКолонки) Экспорт
	
	ТекущаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаУпаковка = "МинимальнаяПартияПоставки";
	Если СтрНайти(ИмяТекущейКолонки, СтрокаУпаковка) > 0 Тогда
		
		ИмяКолонкиВидЦены    = СтрЗаменить(ИмяТекущейКолонки, СтрокаУпаковка, "");
		
		ТекущаяСтрока["ИзмененаВручную"       + ИмяКолонкиВидЦены] = Истина;
		ТекущаяСтрока["ИзмененаАвтоматически" + ИмяКолонкиВидЦены] = Ложь;
		ТекущаяСтрока["УстановкаУсловий"      + ИмяКолонкиВидЦены] = Истина;
		
		Если ТекущаяСтрока[ИмяКолонкиВидЦены] = 0 Тогда
			ТекущаяСтрока[ИмяКолонкиВидЦены] = ТекущаяСтрока["СтараяЦена" + ИмяКолонкиВидЦены];
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока[ИмяТекущейКолонки] <> ТекущаяСтрока[ИмяТекущейКолонки] Тогда
			
			ПодчиненнаяСтрока[ИмяТекущейКолонки] = ТекущаяСтрока[ИмяТекущейКолонки];
			ПодчиненнаяСтрока["ИзмененаВручную"       + ИмяКолонкиВидЦены] = Истина;
			ПодчиненнаяСтрока["ИзмененаАвтоматически" + ИмяКолонкиВидЦены] = Ложь;
			ПодчиненнаяСтрока["УстановкаУсловий"      + ИмяКолонкиВидЦены] = Истина;
			
			Если ПодчиненнаяСтрока[ИмяКолонкиВидЦены] = 0 Тогда
				ПодчиненнаяСтрока[ИмяКолонкиВидЦены] = ПодчиненнаяСтрока["СтараяЦена" + ИмяКолонкиВидЦены];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполнение обязательных параметров схем компоновки данных для выбранных видов цен.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  СообщатьПользователюОбОшибках - Булево - Выдавать сообщение пользователю о каждой найденной ошибке.
//
// Возвращаемое значение:
//  Булево - Найдены ошибки заполнения обязательных параметров.
//
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(Форма, СообщатьПользователюОбОшибках = Истина) Экспорт
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Ошибки = УстановкаЦенВызовСервера.ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
		ВидыЦен,
		Форма.АдресХранилищаНастройкиКомпоновкиДанных,
		Форма.АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Если СообщатьПользователюОбОшибках Тогда
		Для Каждого СтруктураОшибки Из Ошибки Цикл
			СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтруктураОшибки.ВидЦены);
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтруктураОшибки.Описание,
					Форма.Объект.Ссылка,
					"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтруктураОшибки.Описание,
					,
					"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

// Проверяет корректность заполнения документа установки цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  Отказ - Булево - признак отказа от записи документа
//
Процедура ПроверитьКорректностьЗаполненияДокумента(Форма, Отказ) Экспорт
	
	// Для корректного построения таблицы цен по тч Товары не должно быть дублей товаров и пустых строк.
	ДеревоЦенДляПроверки = СоздатьТаблицуНоменклатуры(Форма);
	ДеревоЦенДляПроверки.Колонки.Добавить("НомерСтроки",    Новый ОписаниеТипов("Число"));
	ДеревоЦенДляПроверки.Колонки.Добавить("ЭтоГруппа",      Новый ОписаниеТипов("Булево"));
	
	ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы();
	НомерСтроки = 1;
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементНоменклатура);
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.ЭтоГруппа   = Истина;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекЭлементНоменклатура.ХарактеристикиИспользуются Тогда
			
			ДобавленыХарактеристики = Ложь;
			
			ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				СтрокаТаблицыХарактеристика = ДеревоЦенДляПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыХарактеристика, ТекЭлементХарактеристика);
				СтрокаТаблицыХарактеристика.НомерСтроки = НомерСтроки;
				СтрокаТаблицыХарактеристика.ЭтоГруппа   = Ложь;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДобавленыХарактеристики = Истина;
				
			КонецЦикла;
			
			Если Не ДобавленыХарактеристики Тогда
				ТекстОшибки = НСтр("ru='Для номенклатуры ""%1"" в строке ""%2"" списка ""Таблица цен"" включено использование характеристик,
				                       |Но ни одной характеристики не указано. Добавьте характеристики и укажите их цены или удалите данную номенклатуру из списка.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НомерСтроки);
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Форма.Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
						,
						Отказ);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
						,
						Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДеревоЦенДляПроверки.Количество() > 0 Тогда
		Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
			
			КэшДанных = Неопределено;
			ТаблицаТовары = ТаблицаТовары(Форма, КэшДанных);
			ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "НомерСтроки");
			
			Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(
				Форма.Объект, ТаблицаТовары, Отказ);
			
		Иначе
			Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(
				Форма.Объект, ДеревоЦенДляПроверки, УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма), Форма.ИспользуетсяЦенообразование25, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет настройку порядка видов цен поставщика.
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
// Возвращаемое значение:
// 	Булево - Истина - элементы заблокированы
Функция СохранитьНастройкуПорядкаВидовЦенПоставщика(Форма) Экспорт
	
	Индекс = 1;
	ЭлементыЗаблокированы = Истина;
	Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
		Если СтрокаТЧ.РеквизитДопУпорядочивания <> Индекс Тогда
			Попытка
				ЗаблокироватьДанныеДляРедактирования(СтрокаТЧ.Ссылка,,Форма.УникальныйИдентификатор);
			Исключение
				ЭлементыЗаблокированы = Ложь;
				Прервать;
			КонецПопытки;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ЭлементыЗаблокированы Тогда
		Для Каждого СтрокаТЧ Из Форма.ВыбранныеЦены Цикл
			Если СтрокаТЧ.РеквизитДопУпорядочивания <> Индекс Тогда
				ВидЦеныОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
				ВидЦеныОбъект.РеквизитДопУпорядочивания = Индекс;
				ВидЦеныОбъект.Записать();
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭлементыЗаблокированы;
	
КонецФункции

// Очистить массив сохраненные документы.
//
// Параметры:
//  СохраненныеДокументы - ТаблицаЗначений - Сохраненные документы:
//     							* Ссылка - ДокументСсылка
//  					 - Массив из ДокументСсылка - Сохраненные документы
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
//  УдалитьДокументы - Булево - Если истина, то удалить документы. Если Ложь, то разблокировать для редактирования.
//
Процедура ОчиститьСохраненныеДокументы(СохраненныеДокументы, ИдентификаторФормы, УдалитьДокументы = Ложь) Экспорт
	
	Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
		Если Не УдалитьДокументы Тогда
			РазблокироватьДанныеДляРедактирования(СтрокаТЧ.Ссылка, ИдентификаторФормы);
		Иначе
			ДокументОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	СохраненныеДокументы.Очистить();
	
КонецПроцедуры

// Осуществляет поиск строки с определенным видом цен в дереве
//
// Параметры:
//  Дерево - ДеревоЗначений - Дерево, в котором осуществляется поиск
//  ВидЦены - СправочникСсылка.ВидыЦен - Ссылка на вид цен, который необходимо найти.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - найденный вид цены
//
Функция НайтиСтрокуВидаЦенВДереве(Дерево, ВидЦены) Экспорт
	
	СтрокаДерева = Неопределено;
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Ссылка", ВидЦены),Истина);
	
	Если НайденныеСтроки.Количество()>0 Тогда
		СтрокаДерева = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции

Процедура ДобавитьТоварыПоОтборамСКД(Форма, ЭтоАвтообновлениеЦен = Ложь) Экспорт
	
	Форма.АдресХранилищаКэшаДанных = "";
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();

	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаНастройкиКомпоновкиДанных);

	ИспользуетсяЦенообразование25 = Форма.ИспользуетсяЦенообразование25;
	
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма) Цикл
	
		// Копирование схемы компоновки данных
		Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
		СхемаКомпоновкиДанных = Схема.Получить();
	
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(СтрокаВидЦены.Ссылка);
		Если НайденнаяСтрока <> Неопределено Тогда
			НастройкиКомпоновкиДанных = НайденнаяСтрока.НастройкиКомпоновкиДанных;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
				НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
			Иначе
				НастройкиКомпоновкиДанных = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользуетсяЦенообразование25 И ЭтоАвтообновлениеЦен Тогда
			
			ПроверкаСКДПройдена2_5 = Ценообразование.ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(
				СхемаКомпоновкиДанных,
				УстановкаЦенВызовСервера.ПолучитьОбязательныеПоляСхемыКомпоновкиДанных(Истина),,
				Ложь
			);
			
		Иначе
			ПроверкаСКДПройдена2_5 = Ложь;
		КонецЕсли;
		
		Если Ценообразование.ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(
			СхемаКомпоновкиДанных,
			УстановкаЦенВызовСервера.ПолучитьОбязательныеПоляСхемыКомпоновкиДанных(),
			СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
			
			// Подготовка компоновщика макета компоновки данных, загрузка настроек
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			
			// Заполнение структуры отчета и выбранных полей.
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			
			ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаДетальныеЗаписи.Использование = Истина;
			
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
			
			Если ИспользуетсяЦенообразование25 И ПроверкаСКДПройдена2_5 Тогда

				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ХарактеристикаЦО");
				КонецЕсли;
				
				Если Форма.ИспользоватьСерииНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦО");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦОДляСвязи");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦО");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦОДляСвязи");
				КонецЕсли;
				
			Иначе
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
			КонецЕсли;
			
			РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
			ТекстЗапроса = РабочийНаборДанных.Запрос;
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки1", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки2", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ТоварыДокумента.Упаковка", 
					"ТоварыДокумента.Номенклатура"));
					
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки3", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ТоварыДокументаВводНаОсновании.Упаковка", 
					"ТоварыДокументаВводНаОсновании.Номенклатура"));
				
			РабочийНаборДанных.Запрос = ТекстЗапроса;
			
			ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;

			Параметр = ПараметрыКомпоновки.Найти("Основание");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Форма.Объект.ДокументОснование;
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			
			Параметр = ПараметрыКомпоновки.Найти("ДатаДокумента");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры(Форма);
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			
			Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = СтрокаВидЦены.Ссылка;
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			
			Параметр = ПараметрыКомпоновки.Найти("ЭтоВводНаОсновании");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			
			Параметр = ПараметрыКомпоновки.Найти("ИсключаемыеХозОперации");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = РасчетСебестоимостиПрикладныеАлгоритмы.ХозяйственныеОперацииПеремещений();
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;

			// Компоновка макета и исполнение запроса.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

			ДанныеОтчета = Новый ТаблицаЗначений();
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если ИспользуетсяЦенообразование25 Тогда
				
				Если ПроверкаСКДПройдена2_5 Тогда
					
					ТаблицаНоменклатуры = УстановкаЦенСервер.СоздатьТаблицуНоменклатуры(Форма);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеОтчета, ТаблицаНоменклатуры);
					УстановкаЦенСервер.ДобавитьТоварыПоОтбору(Форма, Неопределено, ТаблицаНоменклатуры,, КэшДанных);
					
				Иначе
					
					ЗначенияОтбора = Новый Структура();
					ЗначенияОтбора.Вставить("ПоМассивуНоменклатуры", ДанныеОтчета.ВыгрузитьКолонку("Номенклатура"));
					
					НастройкиОтбора = УстановкаЦенСервер.ПолучитьСтруктуруОтбораДанныхПоНоменклатуре();
					НастройкиОтбора.Вставить("ЗначенияОтбора", ЗначенияОтбора);
					НастройкиОтбора.Вставить("Значение", );
					НастройкиОтбора.Вставить("Дата", ТекущаяДатаСеанса());
					
					ЗаполнитьЗначенияСвойств(НастройкиОтбора, Форма,"ИспользуетсяЦенообразование25, ИспользоватьХарактеристикиНоменклатуры, ИспользоватьСерииНоменклатуры, ИспользоватьУпаковкиНоменклатуры");
					
					ТаблицаНоменклатуры = УстановкаЦенСервер.СоздатьТаблицуНоменклатуры(Форма);
					УстановкаЦенСервер.ПолучитьДанныеПоНоменклатуре(НастройкиОтбора, ТаблицаНоменклатуры); // дополнение данных по номенклатуре данными по разрезам ценообразования
					УстановкаЦенСервер.ДобавитьТоварыПоОтбору(Форма, Неопределено, ТаблицаНоменклатуры,, КэшДанных);
					
				КонецЕсли;
				
			Иначе
				
				Если ДанныеОтчета.Колонки.Найти("Характеристика") = Неопределено Тогда
					ДанныеОтчета.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
				КонецЕсли;
				
				УстановкаЦенСервер.ДобавитьТоварыПоОтбору(Форма, Неопределено, ДанныеОтчета,, КэшДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьТоварыДляОбнуленияЦенПоОтборамСКД(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма) Цикл
		Если Не ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре) Тогда
			продолжить;
		КонецЕсли;
	
		// Копирование схемы компоновки данных
		ПараметрыМакета = Справочники.ВидыЦен.ИнициализироватьСтруктуруПарметровДляПолученияОписанияСхемКомпоновкиПоИмени();
		ПараметрыМакета.Ссылка 		= СтрокаВидЦены.Ссылка;
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			ПараметрыМакета.ИмяМакета 	= "ТекущиеЦеныПредприятияПредопределенный2_5";
		Иначе
			ПараметрыМакета.ИмяМакета 	= "ТекущиеЦеныПредприятияПредопределенный";
		КонецЕсли;
		
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ПараметрыМакета);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных; 
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре);//НастройкиКомпоновкиДанных
		
		Если НастройкиКомпоновкиДанных.Отбор.Элементы.Количество() > 0 Тогда
			
			// Подготовка компоновщика макета компоновки данных, загрузка настроек
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			// добавим группировку "НЕ", т.к. нам необходимо отобрать не входящие в отбор
			ИнвертироватьОтбор(НастройкиКомпоновкиДанных, КомпоновщикНастроек);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			
			// Заполнение структуры отчета и выбранных полей.
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			
			ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаДетальныеЗаписи.Использование = Истина;
			
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			УстановкаЦенСервер.ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");

			Если Форма.ИспользуетсяЦенообразование25 Тогда
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ХарактеристикаЦО");
				КонецЕсли;
				
				Если Форма.ИспользоватьСерииНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦО");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦО");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
				КонецЕсли;
				
			Иначе
					
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
					УстановкаЦенСервер.ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
			КонецЕсли;
			
			РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
			ТекстЗапроса = РабочийНаборДанных.Запрос;
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки1", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
					"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
			
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки2", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ТоварыДокумента.Упаковка", 
					"ТоварыДокумента.Номенклатура"));
					
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"&ТекстЗапросаКоэффициентУпаковки3", 
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
					"ТоварыДокументаВводНаОсновании.Упаковка", 
					"ТоварыДокументаВводНаОсновании.Номенклатура"));
				
			РабочийНаборДанных.Запрос = ТекстЗапроса;
			
			ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
			
			Параметр = ПараметрыКомпоновки.Найти("ДатаДокумента");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры(Форма);
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = СтрокаВидЦены.Ссылка;
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;

			// Компоновка макета и исполнение запроса.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

			ДанныеОтчета = Новый ТаблицаЗначений();
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			Если Форма.ИспользуетсяЦенообразование25 Тогда
				
				Если ДанныеОтчета.Колонки.Найти("ХарактеристикаЦО") = Неопределено Тогда
					ДанныеОтчета.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
				КонецЕсли;
				
				Если ДанныеОтчета.Колонки.Найти("СерияЦО") = Неопределено Тогда
					ДанныеОтчета.Колонки.Добавить("СерияЦО", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
				КонецЕсли;
				
				Если ДанныеОтчета.Колонки.Найти("УпаковкаЦО") = Неопределено Тогда
					ДанныеОтчета.Колонки.Добавить("УпаковкаЦО", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
				КонецЕсли;
				
			Иначе
					
				Если ДанныеОтчета.Колонки.Найти("Характеристика") = Неопределено Тогда
					ДанныеОтчета.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
				КонецЕсли;
				
			КонецЕсли;
			
			УстановкаЦенСервер.ДобавитьТоварыПоОтбору(Форма, Неопределено, ДанныеОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные по запрещенной к редактированию номенклатуры во видам цен
// 
// Параметры:
//  СтруктураФормы - Структура - дополнительные параметры
//  ТаблицаНоменклатуры - ТаблицаЗначений - данные по номенклатуре
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные по номенклатуре по которой запрещено редактировать данные:
// * Номенклатура - СправочникСсылка.Номенклатура -
// * ХарактеристикаЦО - СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования -
// * СерияЦО - СправочникСсылка.СерииНоменклатурыДляЦенообразования -
// * УпаковкаЦО - СправочникСсылка.УпаковкиЕдиницыИзмерения -
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// * ВидЦены - СправочникСсылка.ВидыЦен -
Функция ПолучитьЗапрещеннуюКРедактированиюНоменклатуру(
										 СтруктураФормы,
										 ТаблицаНоменклатуры
										) Экспорт
	
	ТаблицаНоменклатурыЗапрещеннойКРедактированию = Новый ТаблицаЗначений();
	ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Если СтруктураФормы.ИспользуетсяЦенообразование25 Тогда	
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ХарактеристикаЦО", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("СерияЦО", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатурыДляЦенообразования"));
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("УпаковкаЦО", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Иначе			
		ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	ТаблицаНоменклатурыЗапрещеннойКРедактированию.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	
	Для Каждого СтрокаВидЦены Из СтруктураФормы.ВыбранныеЦены Цикл
		Если (СтрокаВидЦены.Выбрана Или СтрокаВидЦены.Влияет)
			И СтрокаВидЦены.ЗапретитьРедактированиеЦеныЗаПределамиОтбора Тогда
	
			Если СтруктураФормы.ИспользуетсяЦенообразование25 Тогда	
				ТаблицаЗапрещенныхКРедактированиюПоВидуЦен = ПолучитьТаблицуЗапрещеннойКРедактированиюНоменклатуры2_5(СтруктураФормы, ТаблицаНоменклатуры, СтрокаВидЦены);
			Иначе
				ТаблицаЗапрещенныхКРедактированиюПоВидуЦен = ПолучитьТаблицуЗапрещеннойКРедактированиюНоменклатуры(СтруктураФормы, ТаблицаНоменклатуры, СтрокаВидЦены);
			КонецЕсли;
			Если ТаблицаЗапрещенныхКРедактированиюПоВидуЦен <> Неопределено Тогда
				Для Каждого СтрокаИсточник Из ТаблицаЗапрещенныхКРедактированиюПоВидуЦен Цикл
					СтрокаПриемник = ТаблицаНоменклатурыЗапрещеннойКРедактированию.Добавить();
					СтрокаПриемник.ВидЦены	= СтрокаВидЦены.Ссылка;
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНоменклатурыЗапрещеннойКРедактированию;
	
КонецФункции

// Получить структуру отбора данных по номенклатуре.
// 
// Возвращаемое значение:
//  Структура - Получить структуру отбора данных по номенклатуре:
// * ЗначенияОтбора 
// * Дата 
// * ИспользуетсяЦенообразование25 
// * ИспользоватьХарактеристикиНоменклатуры 
// * ИспользоватьСерииНоменклатуры 
// * ИспользоватьУпаковкиНоменклатуры 
Функция ПолучитьСтруктуруОтбораДанныхПоНоменклатуре() Экспорт
	НастройкиОтбора = Новый Структура();
	НастройкиОтбора.Вставить("ЗначенияОтбора");
	НастройкиОтбора.Вставить("Дата");
	НастройкиОтбора.Вставить("ИспользуетсяЦенообразование25");
	НастройкиОтбора.Вставить("ИспользоватьХарактеристикиНоменклатуры");
	НастройкиОтбора.Вставить("ИспользоватьСерииНоменклатуры");
	НастройкиОтбора.Вставить("ИспользоватьУпаковкиНоменклатуры");
	
	Возврат НастройкиОтбора;
КонецФункции

Процедура ПолучитьДанныеПоНоменклатуре(НастройкиОтбора, ТаблицаНоменклатуры) Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив);
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	СтруктураНастроек.Вставить("ВестиУчетСертификатовНоменклатуры" , Ложь);
	СтруктураНастроек.Вставить("ЦеныНаДату",          КонецДня(НастройкиОтбора.Дата));
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если НастройкиОтбора.ИспользуетсяЦенообразование25 Тогда
		Если НастройкиОтбора.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("ХарактеристикаЦО");
		КонецЕсли;
		Если НастройкиОтбора.ИспользоватьСерииНоменклатуры Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("СерияЦО");
		КонецЕсли;
		Если НастройкиОтбора.ИспользоватьУпаковкиНоменклатуры Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("УпаковкаЦО");
		КонецЕсли;
	Иначе	
		Если НастройкиОтбора.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикНастроекОтбор = Новый КомпоновщикНастроекКомпоновкиДанных();
	
	ЗначениеОтбора = Неопределено;
		
	Если НастройкиОтбора.ЗначенияОтбора.Свойство("ПоНоменклатуре", ЗначениеОтбора) Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			КомпоновщикНастроекОтбор.Настройки.Отбор,
			"Номенклатура",
			ВидСравненияКомпоновкиДанных.Равно,
			ЗначениеОтбора,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	
	Если НастройкиОтбора.ЗначенияОтбора.Свойство("ПоМассивуНоменклатуры", ЗначениеОтбора) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			КомпоновщикНастроекОтбор.Настройки.Отбор,
			"Номенклатура",
			ВидСравненияКомпоновкиДанных.ВСписке,
			ЗначениеОтбора,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	КонецЕсли;
	
	Если НастройкиОтбора.ЗначенияОтбора.Свойство("ПоМассивуХарактеристик", ЗначениеОтбора) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			КомпоновщикНастроекОтбор.Настройки.Отбор,
			"Характеристика",
			ВидСравненияКомпоновкиДанных.ВСписке,
			ЗначениеОтбора,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	КонецЕсли;
		
	Если НастройкиОтбора.ЗначенияОтбора.Свойство("ПоМассивуСерий", ЗначениеОтбора) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			КомпоновщикНастроекОтбор.Настройки.Отбор,
			"Серия",
			ВидСравненияКомпоновкиДанных.ВСписке,
			ЗначениеОтбора,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	КонецЕсли;
		
	Если НастройкиОтбора.ЗначенияОтбора.Свойство("ПоЦеновымГруппам", ЗначениеОтбора) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			КомпоновщикНастроекОтбор.Настройки.Отбор,
			"Номенклатура.ЦеноваяГруппа",
			ВидСравненияКомпоновкиДанных.ВСписке,
			ЗначениеОтбора,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
	СтруктураНастроек.КомпоновщикНастроек = Новый Структура("Настройки", КомпоновщикНастроекОтбор.Настройки);
	Если НастройкиОтбора.ИспользуетсяЦенообразование25 Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "Макет2_5";
	Иначе	
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "Макет";
	КонецЕсли;
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПодборТоваровПоОтбору.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		
		Если НастройкиОтбора.ИспользуетсяЦенообразование25 Тогда
			Если НастройкиОтбора.ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.ХарактеристикаЦО = СтрокаТЧ.ХарактеристикаЦО;
			КонецЕсли;
			 
			Если НастройкиОтбора.ИспользоватьСерииНоменклатуры Тогда
				НоваяСтрока.СерияЦО = СтрокаТЧ.СерияЦО;
			КонецЕсли;
			 
			Если НастройкиОтбора.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.УпаковкаЦО = СтрокаТЧ.УпаковкаЦО;
			КонецЕсли;
		Иначе
			Если НастройкиОтбора.ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Установить пометку измененных формул.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  ДеревоЦен - ДеревоЗначений - Дерево значений цен
//  ВидЦены - СправочникСсылка.ВидыЦен, Неопределено - Вид цены
Процедура УстановитьПометкуИзмененныхФормул(Форма, ДеревоЦен = Неопределено, ВидЦены = Неопределено) Экспорт
	
	Если ДеревоЦен = Неопределено Тогда
		
		Если ТипЗнч(Форма) = Тип("Структура") Тогда
			ДеревоЦен = Форма.ДеревоЦен;
		ИначеЕсли ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
			ДеревоЦен = Форма.РеквизитФормыВЗначение("ДеревоЦен");
		КонецЕсли;	

	КонецЕсли;
	
	Если Не ВидЦены = Неопределено Тогда
		ИмяКолонки = "ВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
		УстановитьПометкуИзмененныхФормулВКолонке(Форма, ДеревоЦен, ИмяКолонки);
	Иначе
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			Если ВидЦены.Выбрана И ВидЦены.ФормулаРедактируется Тогда
				ИмяКолонки = ВидЦены.ИмяКолонки;
				УстановитьПометкуИзмененныхФормулВКолонке(Форма, ДеревоЦен, ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПометкуИзмененныхФормулВКолонке(Форма, ДеревоЦен, Знач ИмяКолонки)
	
	ЕстьИзмененияФормул = (ДеревоЦен.Строки.Итог("ФормулаИзмененаВручную" + ИмяКолонки, Истина) > 0);
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		Форма.Элементы["ДеревоЦен" + "Формула" + "Картинка" + ИмяКолонки].КартинкаШапки = 
			?(ЕстьИзмененияФормул,БиблиотекаКартинок.Внимание16, Новый Картинка()
		);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВидимостьКолонкиТД(ТабличныйДокументЕксель, Колонка, ВидимостьКолонки)	
	Если Колонка = 0 Тогда
		Возврат ;
	КонецЕсли;	
	
	ТабличныйДокументЕксель.Область(,Колонка,,Колонка).Видимость = ВидимостьКолонки;
	
КонецПроцедуры

Процедура УстановитьТекстЯчейки(ТекущийТабличныйДокумент, Строка, Колонка, Текст)	
	
	Если Колонка = 0 Тогда
		Возврат ;
	КонецЕсли;	
	
	ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст = Текст;	 
	
КонецПроцедуры

Процедура УстановитьЗначениеЯчейки(ТекущийТабличныйДокумент, Строка, Колонка, ЗначениеЯчейки)	
	
	Если Колонка = 0 Тогда
		Возврат ;
	КонецЕсли;	    
	
	Если ЗначениеЗаполнено(ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст) Тогда
		ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Значение = ЗначениеЯчейки;	 
	Иначе
		ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст = ЗначениеЯчейки;	 
	КонецЕсли;	
	
КонецПроцедуры

Функция СодержаниеЯчейки(ТекущийТабличныйДокумент, Строка, Колонка)	
	Если Колонка = 0 Тогда
		Возврат "";
	КонецЕсли;	
	ЗначениеТекста = ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст;	
	Возврат СокрЛП(ЗначениеТекста);
КонецФункции

Функция СодержаниеЯчейкиЗначение(ТекущийТабличныйДокумент, Строка, Колонка)	
	Если Колонка = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЗначениеЯчейки = 0;
	Если ЗначениеЗаполнено(ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Текст) Тогда
		Попытка
			ЗначениеЯчейки = ТекущийТабличныйДокумент.Область(Строка, Колонка, Строка, Колонка).Значение;	
		Исключение   
			ЗначениеЯчейки = 0;	
		КонецПопытки	
	КонецЕсли;
	
	Возврат СокрЛП(ЗначениеЯчейки);
КонецФункции

#Область РегламентныеЗадания

// Запускает обновление цен по видам цен
// 
// Параметры:
//   ВидыЦен - массив - элементов типа СправочникСсылка.ВидыЦен - виды цен, по которым необходимо обновить цены.
//   ПараметрыОбновленияЦен - Структура - со свойствами. Может содержать:
//    * ВариантОбновленияЦен - Число - вариант формирования видов цен (0 - все, 1- Только выбранные, 2 - Выбранные и зависисмые, 3 - Все кроме выбранных).
//
Процедура ВыполнитьОбновлениеЦен(ВидыЦен, ПараметрыОбновленияЦен) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеЦен);

	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ВариантОбновленияЦен = ПараметрыОбновленияЦен.ВариантОбновленияЦен;
	
	Если ВариантОбновленияЦен <> 0 И Не ЗначениеЗаполнено(ВидыЦен) Тогда
		Возврат;
	КонецЕсли;

	МассивВидовЦен = ВидыЦен.ВыгрузитьКолонку("ВидЦены");   
	
	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.ВыполнитьОбновлениеЦен(МассивВидовЦен);
	//-- Локализация
		
	// инициализация структур для рассчета
 	СтруктураФормы = ИнициализироватьСтруктуруФормы();
	
	Для Каждого ЭлементКоллекции Из МассивВидовЦен Цикл
		СтрокаТаблицыЗначений = СтруктураФормы.Объект.ВидыЦен.Добавить();
		СтрокаТаблицыЗначений.ВидЦены = ЭлементКоллекции;
	КонецЦикла;
 	
	ДокументУстановкиЦен = Документы.УстановкаЦенНоменклатуры.ПустаяСсылка();
	СтруктураФормы.Объект.Вставить("Товары", ДокументУстановкиЦен["Товары"]);
	СтруктураФормы.Объект.Вставить("Товары2_5", ДокументУстановкиЦен["Товары2_5"]);
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(СтруктураФормы);
	СтруктураФормы.ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтруктураФормы.АдресХранилищаНастройкиКомпоновкиДанных);	

	СтруктураФормы.ВыбранныеЦены.Колонки.Добавить("СхемаКомпоновкиДанных");

	Для Каждого СтрокаВидЦен Из СтруктураФормы.ВыбранныеЦены Цикл
		Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦен.АдресСхемыКомпоновкиДанных));
		СтрокаВидЦен.СхемаКомпоновкиДанных	= Схема.Получить();
	КонецЦикла; 
	
	// применить настройки варианта обновления цен (0 - все цены; 1 - выбранные; 2 - выбранные и зависимые; 3 - все кроме выбранных)
	Если ВариантОбновленияЦен = 0 Тогда
		// все цены
		УстановкаЦенКлиентСервер.ИнвертироватьВыбранныеЦены(СтруктураФормы);
	ИначеЕсли ВариантОбновленияЦен = 1 Тогда 	
		// Только выбранные цены
		// Ничего дополнительно не делаем
	ИначеЕсли ВариантОбновленияЦен = 2 Тогда 	
		// Выбранные и зависимые цены
		УстановкаЦенКлиентСервер.ВыбратьВсеЗависимыеЦены(СтруктураФормы);
	ИначеЕсли ВариантОбновленияЦен = 3 Тогда 	
		// Все кроме выбранных цен
		УстановкаЦенКлиентСервер.ИнвертироватьВыбранныеЦены(СтруктураФормы);
		УстановкаЦенКлиентСервер.ВыбратьВсеВлияющиеЦеныБезРасчета(СтруктураФормы);
	КонецЕсли;	
	
	// 	заполнить товары по отборам номенклатуры
	УстановкаЦенСервер.ПостроитьДеревоЦен(СтруктураФормы);

	МассивВидовЦен.Очистить();
	Для Каждого СтрокаТЧ Из СтруктураФормы.ВыбранныеЦены Цикл

		Если СтрокаТЧ.Выбрана
			И МассивВидовЦен.Найти(СтрокаТЧ.Ссылка) = Неопределено Тогда
			МассивВидовЦен.Добавить(СтрокаТЧ.Ссылка);
		КонецЕсли;
		
	КонецЦикла;

	Для Индекс = 1 По 2 Цикл
		СтруктураФормы.ДеревоЦен.Строки.Очистить();
		СтруктураФормы.АдресХранилищаКэшаДанных = "";
		УстановитьЦены(МассивВидовЦен, СтруктураФормы, ?(Индекс = 1, "Обновление", "Обнуление"));
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЦены(Знач МассивВидовЦен, Знач СтруктураФормы, Знач ВидОбновленияЦен = "Обновление")
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ТекстГруппаСобытий = НСтр("ru = '%ВидОбновленияЦен% цен. Запуск по расписанию'", ОбщегоНазначения.КодОсновногоЯзыка());	
	ТекстГруппаСобытий = СтрЗаменить(ТекстГруппаСобытий, "%ВидОбновленияЦен%", ВидОбновленияЦен);
	
	ПараметрыЖурнала.ГруппаСобытий = ТекстГруппаСобытий;
	ПараметрыЖурнала.Метаданные    = Метаданные.Документы.УстановкаЦенНоменклатуры;	
	ПараметрыЖурнала.Данные        = МассивВидовЦен;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "", НСтр("ru = 'Запуск'", ОбщегоНазначения.КодОсновногоЯзыка()));

	Если ВидОбновленияЦен = "Обновление" Тогда
		
		УстановкаЦенСервер.ДобавитьТоварыПоОтборамСКД(СтруктураФормы, Истина);
	
		//	рассчитать цены
		ПараметрыРасчета = Новый Структура();
		ПараметрыРасчета.Вставить("ВидыЦен",				МассивВидовЦен);
		ПараметрыРасчета.Вставить("ТолькоВыделенныеСтроки",	Ложь);
		ПараметрыРасчета.Вставить("ТолькоНезаполненные",	Ложь);
		ПараметрыРасчета.Вставить("ЗагрузкаСтарыхЦен",		Ложь);
		ПараметрыРасчета.Вставить("ОкруглениеРучныхЦен",	Ложь);
		ПараметрыРасчета.Вставить("РасчетПоФормулам",		Истина);
	
		УстановкаЦенСервер.РассчитатьЦены(СтруктураФормы, ПараметрыРасчета);
		
	Иначе
		
		СтруктураФормы.РассчитыватьАвтоматически = Ложь;
		ДобавитьТоварыДляОбнуленияЦенПоОтборамСКД(СтруктураФормы);
		
	КонецЕсли;

	Попытка
		//	заполняем и записываем документ
		ТекстКомментария = НСтр("ru = '%ВидОбновленияЦен% цен (автоматическое по расписанию)'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%ВидОбновленияЦен%", ВидОбновленияЦен);
		
		Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(СтруктураФормы, ТекстКомментария, 1);
	Исключение
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              НСтр("ru = 'Ошибка обновления цен'", ОбщегоНазначения.КодОсновногоЯзыка()) + " '"+ МассивВидовЦен +"'",
		              ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание, "",НСтр("ru = 'Завершение'", ОбщегоНазначения.КодОсновногоЯзыка()));
КонецПроцедуры

// Инициализировать структуру формы.
// 
// Возвращаемое значение:
//  Структура - Инициализировать структуру формы:
// * Дата - Дата -
// * Модифицированность - Булево -
// * Объект - Структура -:
// ** ВидыЦен - ТаблицаЗначений -
// ** ДокументОснование - ДокументСсылка -
// * КодФормы - Строка -
// * ВыбранныеЦены - ТаблицаЗначений -:
// ** Ссылка - СправочникСсылка.ВидыЦен -
// ** СпособЗаданияЦены - ПеречислениеСсылка.СпособыЗаданияЦен -
// ** Выбрана - Булево -
// ** Редактировать - Булево -
// ** Зависит - Булево -
// ** Влияет - Булево -
// ** Формула - Строка -
// ** Валюта - СправочникСсылка.Валюты -
// ** Идентификатор - Строка -
// ** ИмяКолонки - Строка -
// ** Наименование - Строка -
// ** ВариантОкругления - ПеречислениеСсылка.ВариантыОкругления -
// ** ПорогСрабатывания - Число
// ** Уровень - Число -
// ** ЗапрещенныйВидЦены - Булево -
// ** БазовыйВидЦены - Строка -
// ** Наценка - Число -
// ** ПометкаУдаления - Булево -
// ** Параметры - Строка -
// ** ВлияющиеВидыЦен - ТаблицаЗначений -
// ** ВлияющиеЦены - СписокЗначений -
// ** ЗависимыеЦены - СписокЗначений -
// ** УстанавливатьЦенуПриВводеНаОсновании - Булево -
// ** ПорогСрабатыванияПриУменьшении - Число -
// ** РеквизитДопУпорядочивания - Число -
// ** ДатаПоследнейУстановкиЦены - Дата -
// ** АдресСхемыКомпоновкиДанных - Строка -
// ** АдресНастроекСхемыКомпоновкиДанных - Строка -
// ** АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре - Строка -
// ** НайденыОбязательныеПараметры - Булево -
// ** ПорогиСрабатывания - ТаблицаЗначений -
// ** ПравилаОкругленияЦены - ТаблицаЗначений -
// ** ЦеновыеГруппы - ТаблицаЗначений -
// ** ЗапретитьРедактированиеЦеныЗаПределамиОтбора - Булево -
// * ДеревоЦен - ДеревоЗначений -
// * ИспользоватьЦеновыеГруппы - Булево -
// * ИспользоватьХарактеристикиНоменклатуры - Булево -
// * ИспользоватьУпаковкиНоменклатуры - Булево -
// * ИспользоватьСерииНоменклатуры - Произвольный -
// * ИспользоватьНесколькоВидовЦен - Булево -
// * ИспользуетсяЦенообразование25 - Булево -
// * ВыбранныеЦеныИзменены - Булево -
// * РассчитыватьАвтоматически - Булево -
// * УникальныйИдентификатор - УникальныйИдентификатор -
// * АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен - Строка -
// * АдресХранилищаНастройкиКомпоновкиДанных - Строка -
// * ТаблицаНастройкиКомпоновкиДанных - ТаблицаЗначений
Функция ИнициализироватьСтруктуруФормы()
	
	СтруктураФормы = Новый Структура();
	СтруктураФормы.Вставить("Дата",				КонецДня(ТекущаяДатаСеанса()));
	СтруктураФормы.Вставить("Модифицированность",			Ложь);
	СтруктураФормы.Вставить("Объект",			ИнициализироватьОбъект());
	СтруктураФормы.Вставить("КодФормы",			"ОбработкаЗаполненияЦен_тест");
	СтруктураФормы.Вставить("ВыбранныеЦены",	ИнициализироватьТаблицуВыбранныеЦены());
	СтруктураФормы.Вставить("ДеревоЦен",		Новый ДеревоЗначений());
	СтруктураФормы.Вставить("ИспользоватьЦеновыеГруппы", 				ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы"));
	СтруктураФормы.Вставить("ИспользоватьХарактеристикиНоменклатуры", 	ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	СтруктураФормы.Вставить("ИспользоватьУпаковкиНоменклатуры", 		ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры"));
	СтруктураФормы.Вставить("ИспользоватьСерииНоменклатуры", 			ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"));
	СтруктураФормы.Вставить("ИспользоватьНесколькоВидовЦен", 			ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен"));
	СтруктураФормы.Вставить("ИспользуетсяЦенообразование25", 			ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(КонецДня(ТекущаяДатаСеанса())));
	СтруктураФормы.Вставить("АдресХранилищаКэшаДанных", 				"");

	СтруктураФормы.Вставить("ВариантГруппировки",			Неопределено);
	СтруктураФормы.Вставить("ВыбранныеЦеныИзменены",		Ложь);
	СтруктураФормы.Вставить("РассчитыватьАвтоматически",	Истина);
	СтруктураФормы.Вставить("УникальныйИдентификатор", 		Новый УникальныйИдентификатор());
	СтруктураФормы.Вставить("АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен",	"");
	СтруктураФормы.Вставить("АдресХранилищаНастройкиКомпоновкиДанных",	"");
	СтруктураФормы.Вставить("ТаблицаНастройкиКомпоновкиДанных");
	
	Возврат СтруктураФормы
	
КонецФункции

// Инициализировать таблицу выбранные цены.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу выбранные цены:
// * Ссылка - СправочникСсылка.ВидыЦен -
// * СпособЗаданияЦены - ПеречислениеСсылка.СпособыЗаданияЦен -
// * Выбрана - Булево -
// * Редактировать - Булево -
// * Зависит - Булево -
// * Влияет - Булево -
// * Формула - Строка -
// * Валюта - СправочникСсылка.Валюты -
// * Идентификатор - Строка -
// * ИмяКолонки - Строка -
// * Наименование - Строка -
// * ВариантОкругления - ПеречислениеСсылка.ВариантыОкругления -
// * ПорогСрабатывания - Число
// * Уровень - Число -
// * ЗапрещенныйВидЦены - Булево -
// * БазовыйВидЦены - Строка -
// * Наценка - Число -
// * ПометкаУдаления - Булево -
// * Параметры - Строка -
// * ВлияющиеВидыЦен - ТаблицаЗначений -
// * ВлияющиеЦены - СписокЗначений -
// * ЗависимыеЦены - СписокЗначений -
// * УстанавливатьЦенуПриВводеНаОсновании - Булево -
// * ПорогСрабатыванияПриУменьшении - Число -
// * РеквизитДопУпорядочивания - Число -
// * ДатаПоследнейУстановкиЦены - Дата -
// * АдресСхемыКомпоновкиДанных - Строка -
// * АдресНастроекСхемыКомпоновкиДанных - Строка -
// * АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре - Строка -
// * НайденыОбязательныеПараметры - Булево -
// * ПорогиСрабатывания - ТаблицаЗначений -
// * ПравилаОкругленияЦены - ТаблицаЗначений -
// * ЦеновыеГруппы - ТаблицаЗначений -
// * Валюты - ТаблицаЗначений -
// * ЗапретитьРедактированиеЦеныЗаПределамиОтбора - Булево -
Функция ИнициализироватьТаблицуВыбранныеЦены()

	ТаблицаВыбранныеЦены = Новый ТаблицаЗначений();
	ТаблицаВыбранныеЦены.Колонки.Добавить("Ссылка",				Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("СпособЗаданияЦены",	Новый ОписаниеТипов("ПеречислениеСсылка.СпособыЗаданияЦен"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Выбрана", 			Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Редактировать", 		Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Зависит",			Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Влияет", 			Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Формула",			Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ФормулаРедактируется", Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Валюта",				Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Идентификатор",		Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ИмяКолонки",			Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Наименование",		Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ВариантОкругления",	Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОкругления"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ПорогСрабатывания",	Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Уровень",			Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ЗапрещенныйВидЦены",	Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("БазовыйВидЦены",		Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Наценка",			Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ПометкаУдаления",	Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Параметры",			Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ВлияющиеВидыЦен",	Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ВлияющиеЦены",		Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ЗависимыеЦены",		Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("УстанавливатьЦенуПриВводеНаОсновании",	Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ПорогСрабатыванияПриУменьшении",			Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("РеквизитДопУпорядочивания",				Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ДатаПоследнейУстановкиЦены",				Новый ОписаниеТипов("Дата"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("АдресСхемыКомпоновкиДанных",				Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("АдресНастроекСхемыКомпоновкиДанных",		Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре",		Новый ОписаниеТипов("Строка"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("НайденыОбязательныеПараметры",			Новый ОписаниеТипов("Булево"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ПорогиСрабатывания",						Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ПравилаОкругленияЦены",					Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ЦеновыеГруппы",							Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("Валюты",									Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ЗапретитьРедактированиеЦеныЗаПределамиОтбора", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаВыбранныеЦены;
	
КонецФункции

// Инициализировать объект.
// 
// Возвращаемое значение:
//  Структура - Инициализировать объект:
// * ВидыЦен - ТаблицаЗначений -
// * ДокументОснование - ДокументСсылка
Функция ИнициализироватьОбъект()
	
	СтруктураОбъекта = Новый Структура();
	СтруктураОбъекта.Вставить("ВидыЦен", Новый ТаблицаЗначений());
	СтруктураОбъекта.Вставить("ДокументОснование");
	
	СтруктураОбъекта.ВидыЦен.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	СтруктураОбъекта.ВидыЦен.Колонки.Добавить("НастройкиКомпоновкиДанных", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Возврат СтруктураОбъекта;
КонецФункции
#КонецОбласти

#Область МастерПерехода

Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПереходНаЦенообразованиеВерсии25.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеЦен.ИмяМетода);
	
КонецПроцедуры

Процедура ВыключитьЗаданиеПереходаНаЦенообразованиеВерсии25()
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ПереходНаЦенообразованиеВерсии25");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого РегЗадание Из Задания Цикл
		Если РегЗадание.Параметры.Количество() > 0 Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует переход на ценообразование версии 2.5.
//
// Параметры:
// ПараметрыПерехода - см. ИнициализироватьСтруктуруСостоянияПерехода
//
Процедура НачатьПереходНаЦенообразованиеВерсии2_5(ПараметрыПерехода) Экспорт

	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ПереходНаЦенообразованиеВерсии25");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);

	ТребуетсяСоздатьЗадание = Истина;
	
	Если Задания.Количество() > 0 Тогда
		Для Каждого РегЗадание Из Задания Цикл
			Если РегЗадание.Параметры.Количество() > 0 Тогда
				Если НЕ РегЗадание.Использование Тогда
					ТребуетсяСоздатьЗадание = Ложь;
					ПараметрыЗадания = Новый Структура();
					ПараметрыЗадания.Вставить("Использование", Истина);
					РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыЗадания);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запись = РегистрыСведений.СостояниеПереходаНаЦенообразованиеВерсии25.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		ВызватьИсключение НСтр("ru = 'Переход уже начался.'");
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		
		Запись = РегистрыСведений.СостояниеПереходаНаЦенообразованиеВерсии25.СоздатьМенеджерЗаписи();
		Запись.ДатаПереходаНаЦенообразование25 = ПараметрыПерехода.ДатаПереходаНаЦенообразование25;
		Запись.ДатаНачала = ТекущаяДатаСеанса();
		Запись.Шаг = 1;
		Запись.Состояние = Перечисления.СостоянияЗаданий.Запланировано;
		
		Запись.ПараметрыШага1 = Новый ХранилищеЗначения(ПараметрыПерехода.ПараметрыШага1);
		Запись.ПараметрыШага2 = Новый ХранилищеЗначения(ПараметрыПерехода.ПараметрыШага2);
		Запись.ПараметрыШага3 = Новый ХранилищеЗначения(ПараметрыПерехода.ПараметрыШага3);
	
		Запись.Инициатор = Пользователи.ТекущийПользователь();
		Запись.Записать();
		
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", "ПереходНаЦенообразованиеВерсии25");
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ТребуетсяСоздатьЗадание Тогда
			
			ЗначенияПоУмолчанию = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ПереходНаЦенообразованиеВерсии25);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПереходНаЦенообразованиеВерсии25);
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Расписание", ЗначенияПоУмолчанию.Расписание);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", ЗначенияПоУмолчанию.КоличествоПовторовПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", ЗначенияПоУмолчанию.ИнтервалПовтораПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("Ключ", ЗначенияПоУмолчанию.Ключ);
			
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;


КонецПроцедуры

// Возвращает состояние перехода на ценообразование версии 2.5.
//
// Возвращаемое значение:
//   Структура - см. ИнициализироватьСтруктуруСостоянияПерехода
//
Функция СостояниеПереходаНаЦенообразованиеВерсии2_5() Экспорт 
	
	СостояниеПерехода = ИнициализироватьСтруктуруСостоянияПерехода();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеПереходаНаЦенообразованиеВерсии25.ДатаПереходаНаЦенообразование25,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.ДатаНачала,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.ДатаЗавершения,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.Шаг,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.Состояние,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.ПараметрыШага1,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.ПараметрыШага2,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.ПараметрыШага3,
	|	СостояниеПереходаНаЦенообразованиеВерсии25.Инициатор
	|ИЗ
	|	РегистрСведений.СостояниеПереходаНаЦенообразованиеВерсии25 КАК СостояниеПереходаНаЦенообразованиеВерсии25";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат СостояниеПерехода;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СостояниеПерехода, Выборка, , "ПараметрыШага1, ПараметрыШага2, ПараметрыШага3");
	
	ПараметрыШага = Выборка.ПараметрыШага1; // ХранилищеЗначения
	Для Каждого КлючИЗначение Из ПараметрыШага.Получить() Цикл
		СостояниеПерехода.ПараметрыШага1.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПараметрыШага = Выборка.ПараметрыШага2; // ХранилищеЗначения
	Для Каждого КлючИЗначение Из ПараметрыШага.Получить() Цикл
		СостояниеПерехода.ПараметрыШага2.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПараметрыШага = Выборка.ПараметрыШага3; // ХранилищеЗначения
	Для Каждого КлючИЗначение Из ПараметрыШага.Получить() Цикл
		СостояниеПерехода.ПараметрыШага3.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	Возврат СостояниеПерехода;
КонецФункции

Процедура ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода) 
	
	Запись = РегистрыСведений.СостояниеПереходаНаЦенообразованиеВерсии25.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
		
	Запись.ДатаНачала = ТекущаяУниверсальнаяДата();
	ЗаполнитьЗначенияСвойств(Запись, СостояниеПерехода, , "ПараметрыШага1, ПараметрыШага2, ПараметрыШага3");
	
	Запись.ПараметрыШага1 = Новый ХранилищеЗначения(СостояниеПерехода.ПараметрыШага1);
	Запись.ПараметрыШага2 = Новый ХранилищеЗначения(СостояниеПерехода.ПараметрыШага2);
	Запись.ПараметрыШага3 = Новый ХранилищеЗначения(СостояниеПерехода.ПараметрыШага3);

	Запись.Записать();
		
КонецПроцедуры


// Процедура перехода на ценообразование версии 2.5
//
Процедура ВыполнитьПереходНаЦенообразованиеВерсии2_5() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПереходНаЦенообразованиеВерсии25);

// 1. Получим текущее состояние перехода
	СостояниеПерехода = СостояниеПереходаНаЦенообразованиеВерсии2_5();
	Если Не ЗначениеЗаполнено(СостояниеПерехода.Состояние) Или СостояниеПерехода.Шаг = 4 Тогда
		ВыключитьЗаданиеПереходаНаЦенообразованиеВерсии25();
		Возврат;
	КонецЕсли;
// 2. Установим необходимые переменные
// 3. Выполним шаг 1 - создание ИПЛ

	Если СостояниеПерехода.Шаг = 1 Тогда
		
		ПараметрыШага = СостояниеПерехода.ПараметрыШага1;
		СостояниеПерехода.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
		
		Если ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Запланировано Тогда
			
			ПараметрыШага.ДатаНачала = ТекущаяДатаСеанса();
			
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
		КонецЕсли;
		
		// инициализация структур для рассчета
	 	СтруктураФормы = ИнициализироватьСтруктуруФормы();
		СтруктураФормы.ИспользуетсяЦенообразование25 = Истина;
	
		Для Каждого Строка Из ПараметрыШага.ТаблицаДляОбработки Цикл
			// проверить возможность переноса
			Если Не (Строка.Состояние = Перечисления.СостоянияЗаданий.Запланировано 
				Или Строка.Состояние = Перечисления.СостоянияЗаданий.Выполняется) Тогда
				
				Продолжить;
					
			КонецЕсли;
			
			Строка.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
			РезультатПереноса = СоздатьИПЛ(Строка.Ссылка, НачалоДня(СостояниеПерехода.ДатаПереходаНаЦенообразование25-1));
			
			// зафиксировать результат переноса
			Если РезультатПереноса.Результат Тогда
				Строка.Состояние = Перечисления.СостоянияЗаданий.Завершено;
				ПараметрыШага.КоличествоОбработано = ПараметрыШага.КоличествоОбработано + 1;
				
				НоваяСтрокаПереносаЦен = СостояниеПерехода.ПараметрыШага3.ТаблицаДляОбработки.Добавить();
				НоваяСтрокаПереносаЦен.Ссылка = РезультатПереноса.Ссылка;
				НоваяСтрокаПереносаЦен.Состояние = Перечисления.СостоянияЗаданий.Запланировано;
				СостояниеПерехода.ПараметрыШага3.КоличествоВсего = СостояниеПерехода.ПараметрыШага3.ТаблицаДляОбработки.Количество(); 
				
			Иначе
				
				Строка.Состояние = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
				Строка.ОписаниеОшибки = РезультатПереноса.ОписаниеОшибки;
				ПараметрыШага.КоличествоОшибок = ПараметрыШага.КоличествоОшибок + 1;
				
			КонецЕсли;
	
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
		КонецЦикла;

		ПараметрыШага.ДатаЗавершения = ТекущаяДатаСеанса();
		Если ПараметрыШага.КоличествоОшибок = 0 Тогда
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Завершено;
		Иначе	
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
		КонецЕсли;
		
		СостояниеПерехода.Шаг = 2;
		ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
		
	КонецЕсли;

// 4. Выполним шаг 2 - создание разрезов ценообразования

	Если СостояниеПерехода.Шаг = 2 Тогда
		
		ПараметрыШага = СостояниеПерехода.ПараметрыШага2;
		
		Если ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Запланировано Тогда
			
			ПараметрыШага.ДатаНачала = ТекущаяУниверсальнаяДата();
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
		КонецЕсли;
		
		Для Каждого Строка Из ПараметрыШага.ТаблицаДляОбработки Цикл
			// проверить возможность переноса
			Если Не (Строка.Состояние = Перечисления.СостоянияЗаданий.Запланировано 
				Или Строка.Состояние = Перечисления.СостоянияЗаданий.Выполняется) Тогда
				
				Продолжить;
					
			КонецЕсли;
			
			Строка.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
			РезультатПереноса = ОбновитьХарактеристикииСерииЦенообразования(Строка.Ссылка);
			
			// зафиксировать результат переноса
			Если РезультатПереноса.Результат Тогда
				
				Строка.Состояние = Перечисления.СостоянияЗаданий.Завершено;
				ПараметрыШага.КоличествоОбработано = ПараметрыШага.КоличествоОбработано + 1;
				
			Иначе
				
				Строка.Состояние = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
				Строка.ОписаниеОшибки = РезультатПереноса.ОписаниеОшибки;
				ПараметрыШага.КоличествоОшибок = ПараметрыШага.КоличествоОшибок + 1;
				
			КонецЕсли;
	
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
		КонецЦикла;
	 
		ПараметрыШага.ДатаЗавершения = ТекущаяДатаСеанса();
		Если ПараметрыШага.КоличествоОшибок = 0 Тогда
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Завершено;
		Иначе	
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
		КонецЕсли;

		СостояниеПерехода.Шаг = 3;
		ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
		
	КонецЕсли;

// 5. Выполним шаг 3 - перенос видов цен
	Если СостояниеПерехода.Шаг = 3 Тогда
		
		ПараметрыШага = СостояниеПерехода.ПараметрыШага3;
		Если ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Запланировано Тогда
			
			ПараметрыШага.ДатаНачала = ТекущаяДатаСеанса();
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
		КонецЕсли;
		
		// инициализация структур для рассчета
	 	СтруктураФормы = ИнициализироватьСтруктуруФормы();
		СтруктураФормы.ИспользуетсяЦенообразование25 = Истина;
		СтруктураФормы.Дата = СостояниеПерехода.ДатаПереходаНаЦенообразование25;
		
		Для Каждого Строка Из ПараметрыШага.ТаблицаДляОбработки Цикл
			// проверить возможность переноса
			Если Не (Строка.Состояние = Перечисления.СостоянияЗаданий.Запланировано 
				Или Строка.Состояние = Перечисления.СостоянияЗаданий.Выполняется) Тогда
				
				Продолжить;
					
			КонецЕсли;
			
			Строка.Состояние = Перечисления.СостоянияЗаданий.Выполняется;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
			// перенести вид цен
			СтруктураФормы.Объект.ВидыЦен.Очистить();
			СтрокаВидЦен = СтруктураФормы.Объект.ВидыЦен.Добавить();
			СтрокаВидЦен.ВидЦены = Строка.Ссылка;
	
			УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(СтруктураФормы);
			СтруктураФормы.ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтруктураФормы.АдресХранилищаНастройкиКомпоновкиДанных);
			Если СтруктураФормы.ВыбранныеЦены.Колонки.Найти("СхемаКомпоновкиДанных") = Неопределено Тогда
				СтруктураФормы.ВыбранныеЦены.Колонки.Добавить("СхемаКомпоновкиДанных");
			КонецЕсли;
					
			Для Каждого СтрокаВидЦен Из СтруктураФормы.ВыбранныеЦены Цикл		
				Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦен.АдресСхемыКомпоновкиДанных));
				СтрокаВидЦен.СхемаКомпоновкиДанных	= Схема.Получить();
			КонецЦикла;
	
			// 	заполнить товары по отборам номенклатуры
			СтруктураФормы.ДеревоЦен.Строки.Очистить();
			УстановкаЦенСервер.ПостроитьДеревоЦен(СтруктураФормы);
			
			РезультатПереноса = ПеренестиВидЦенНаЦенообразованиеВерсии2_5(СтруктураФормы, Строка.Ссылка);
			
			// зафиксировать результат переноса
			Если РезультатПереноса.Результат Тогда
				Строка.Состояние = Перечисления.СостоянияЗаданий.Завершено;
				ПараметрыШага.КоличествоОбработано = ПараметрыШага.КоличествоОбработано + 1;
			Иначе
				Строка.Состояние = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
				Строка.ОписаниеОшибки = РезультатПереноса.ОписаниеОшибки;
				ПараметрыШага.КоличествоОшибок = ПараметрыШага.КоличествоОшибок + 1;
			КонецЕсли;
	
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
			
		КонецЦикла;
	 
	 	ОшибкаУстановкиКонстант = Ложь;
		СостояниеПерехода.Шаг = 4;
		ПараметрыШага.ДатаЗавершения = ТекущаяДатаСеанса();
		Если ПараметрыШага.КоличествоОшибок = 0 Тогда
			
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.Завершено;
			
		Иначе	
			ПараметрыШага.Состояние = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
		КонецЕсли;
		
		Попытка
			НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ИспользуетсяЦенообразование25, Истина);
			НастройкиСистемы.УстановитьЗначениеКонстанты(Константы.ДатаПереходаНаЦенообразование25, СостояниеПерехода.ДатаПереходаНаЦенообразование25);
		Исключение
			ОшибкаУстановкиКонстант = Истина;
		КонецПопытки;

		Если Не ОшибкаУстановкиКонстант Тогда
			ВыключитьЗаданиеПереходаНаЦенообразованиеВерсии25();
			
			СостояниеПерехода.ДатаЗавершения = ТекущаяДатаСеанса();
			СостояниеПерехода.Состояние = Перечисления.СостоянияЗаданий.Завершено;
			ЗафиксироватьСостояниеПереходаНаЦенообразованиеВерсии2_5(СостояниеПерехода);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПеренестиВидЦенНаЦенообразованиеВерсии2_5(Форма, ВидЦен)

	РезультатПереноса = ИнициализироватьСтруктуруРезультата();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных 	= Обработки.ПомощникПереходаНаЦенообразованиеВерсии25.ПолучитьМакет("ПереносЦенНаЦенообразовавание25Предопределенный");
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Заполнение структуры отчета и выбранных полей.
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура", Истина);
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ВидЦены", Истина);

	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ХарактеристикаЦО", Истина);
	КонецЕсли;
	
	Если Форма.ИспользоватьСерииНоменклатуры Тогда
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦО", Истина);
	КонецЕсли;
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦО", Истина);
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка", Истина);
	КонецЕсли;
	
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
	ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта", Истина);
	
	ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	
	Параметр = ПараметрыКомпоновки.Найти("ДатаДокумента");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры(Форма);
		Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
	КонецЕсли;
	Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ВидЦен;
		Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
	КонецЕсли;

	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ДанныеОтчета.Количество() = 0 Тогда
		
		ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
		ТекстГруппаСобытий = НСтр("ru = 'Перенос цен на ценообразование 2.5.'", ОбщегоНазначения.КодОсновногоЯзыка());	
		
		ПараметрыЖурнала.ГруппаСобытий = ТекстГруппаСобытий;
		ПараметрыЖурнала.Метаданные    = Метаданные.Справочники.ВидыЦен;
		ПараметрыЖурнала.Данные        = ВидЦен;

		ТекстОшибки = НСтр("ru = 'Ошибка обновления цен. Цены не найдены'", ОбщегоНазначения.КодОсновногоЯзыка()) + " '"+ ВидЦен +"'";
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              ТекстОшибки,
		              ИнформацияОбОшибке());

		РезультатПереноса.Результат = Ложь;
		РезультатПереноса.ОписаниеОшибки = ТекстОшибки;
		
	Иначе
			
		//	заполняем и записываем документ
		ТекстКомментария = НСтр("ru = 'Автоматический перенос цен на ценообразование 2.5 по виду цен << %ВидЦен% >>'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%ВидЦен%", ВидЦен);
		
		Форма.Вставить("ТаблицаЦен", ДанныеОтчета);
		
		РезультатУстановкиЦен = Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(Форма, ТекстКомментария, 1);
		Если РезультатУстановкиЦен = Неопределено Тогда
			
			ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
			ТекстГруппаСобытий = НСтр("ru = 'Перенос цен на ценообразование 2.5.'", ОбщегоНазначения.КодОсновногоЯзыка());	
			
			ПараметрыЖурнала.ГруппаСобытий = "Перенос цен";
			ПараметрыЖурнала.Метаданные    = Метаданные.Справочники.ВидыЦен;
			ПараметрыЖурнала.Данные        = ВидЦен;
							
			ТекстОшибки = НСтр("ru = 'Ошибка обновления цен'", ОбщегоНазначения.КодОсновногоЯзыка()) + " '"+ ВидЦен +"'";
			
			ЗаписьЖурнала(ПараметрыЖурнала, 
			              УровеньЖурналаРегистрации.Ошибка,
			              "",
			              ТекстОшибки,
			              "Ошибка записи документа установка цен");
			
			РезультатПереноса.Результат = Ложь;
			РезультатПереноса.ОписаниеОшибки = ТекстОшибки;
			
		КонецЕсли;
			
	КонецЕсли;
			
	Возврат РезультатПереноса;
	
КонецФункции

// Создание нового индивидуального вида цен и заполнение его данными соглашения с клиентами
// 
// Параметры:
// 	ВладелецИПЛ - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.Партнеры, СправочникСсылка.Склады, СправочникСсылка.ФорматыМагазинов, - Владелец ИПЛ
// 	Дата - Дата - Дата для создания документа установка цен
// Возвращаемое значение:
// 	Структура - см. УстановкаЦенСервер.ИнициализироватьСтруктуруРезультата
//
Функция СоздатьИПЛ(ВладелецИПЛ, Дата) Экспорт

	РезультатПереноса = ИнициализироватьСтруктуруРезультата();
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИндивидуальныйВидЦены");

	Если ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда 
		СтруктураРеквизитов.Вставить("ВидЦен");
		СтруктураРеквизитов.Вставить("Товары");
		СтруктураРеквизитов.Вставить("ЦеновыеГруппы");
		СтруктураРеквизитов.Вставить("Валюта");
		СтруктураРеквизитов.Вставить("ЦенаВключаетНДС");
	ИначеЕсли ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.Партнеры") Тогда 
		СтруктураРеквизитов.Вставить("ВидЦен");
	ИначеЕсли ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.Склады")
			Или ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.ФорматыМагазинов") Тогда
		СтруктураРеквизитов.Вставить("РозничныйВидЦены");
	КонецЕсли;

	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецИПЛ, СтруктураРеквизитов);
	
	ИндивидуальныйВидЦены = РеквизитыОбъекта.ИндивидуальныйВидЦены;
	
	Если ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		 
		ЦеновыеГруппы = РеквизитыОбъекта.ЦеновыеГруппы.Выгрузить();
		Товары = РеквизитыОбъекта.Товары.Выгрузить();
		
	Иначе
		
		ЦеновыеГруппы = Новый ТаблицаЗначений();
		Товары = Новый ТаблицаЗначений();
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ИндивидуальныйВидЦены) Тогда
		// создаем индивидуальный вид цен
		ПараметрыДляСозданияНовогоВидаЦен = Справочники.ВидыЦен.ИнициализироватьПараметрыДляСозданияВидаЦен();
		ПараметрыДляСозданияНовогоВидаЦен.Наименование = РеквизитыОбъекта.Наименование;
		ПараметрыДляСозданияНовогоВидаЦен.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
		ПараметрыДляСозданияНовогоВидаЦен.ИспользоватьПриОптовойПродаже = Истина;
		ПараметрыДляСозданияНовогоВидаЦен.ИспользоватьПриПродаже = Истина;
		
		Если ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		
			ЗаполнитьЗначенияСвойств(ПараметрыДляСозданияНовогоВидаЦен, РеквизитыОбъекта, "ЦенаВключаетНДС");
			ПараметрыДляСозданияНовогоВидаЦен.ВалютаЦены = РеквизитыОбъекта.Валюта;
			ПараметрыДляСозданияНовогоВидаЦен.Назначение = Перечисления.НазначенияВидовЦен.ИндивидуальныйДляСоглашения;
			
		ИначеЕсли ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.Партнеры") Тогда 
			ПараметрыДляСозданияНовогоВидаЦен.Назначение = Перечисления.НазначенияВидовЦен.ИндивидуальныйДляПартнера;
		ИначеЕсли ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.Склады") Тогда
			ПараметрыДляСозданияНовогоВидаЦен.Назначение = Перечисления.НазначенияВидовЦен.ИндивидуальныйДляСклада;
		ИначеЕсли  ТипЗнч(ВладелецИПЛ) = Тип("СправочникСсылка.ФорматыМагазинов") Тогда
			ПараметрыДляСозданияНовогоВидаЦен.Назначение = Перечисления.НазначенияВидовЦен.ИндивидуальныйДляФорматаМагазинов;
		КонецЕсли;
		
		ПараметрыДляСозданияНовогоВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен;
		Если РеквизитыОбъекта.Свойство("ВидЦен") И ЗначениеЗаполнено(РеквизитыОбъекта.ВидЦен) Тогда
			ИдентификаторВидаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.ВидЦен, "Идентификатор");
			ПараметрыДляСозданияНовогоВидаЦен.Формула = "[" + ИдентификаторВидаЦен + "]";
		ИначеЕсли РеквизитыОбъекта.Свойство("РозничныйВидЦены") И ЗначениеЗаполнено(РеквизитыОбъекта.РозничныйВидЦены) Тогда
			ИдентификаторВидаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.РозничныйВидЦены, "Идентификатор");
			ПараметрыДляСозданияНовогоВидаЦен.Формула = "[" + ИдентификаторВидаЦен + "]";
		Иначе
			ПараметрыДляСозданияНовогоВидаЦен.Формула = "0";
		КонецЕсли;
		
		Если ЦеновыеГруппы.Количество() Тогда
			
			Для Каждого Строка Из ЦеновыеГруппы Цикл
				
				Если ЗначениеЗаполнено(Строка.ВидЦен) Тогда
					
					НоваяСтрока = ПараметрыДляСозданияНовогоВидаЦен.ЦеновыеГруппы.Добавить();
					НоваяСтрока.ЦеноваяГруппа = Строка.ЦеноваяГруппа;
					ИдентификаторВидаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ВидЦен, "Идентификатор");
					НоваяСтрока.Формула = "[" + ИдентификаторВидаЦен + "]";
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;

		НачатьТранзакцию();
		Попытка
			РезультатСоздания = Справочники.ВидыЦен.СоздатьНовыйВидЦен(ПараметрыДляСозданияНовогоВидаЦен);
	
			Если РезультатСоздания.Результат Тогда
				ИндивидуальныйВидЦены = РезультатСоздания.Ссылка;
	
				Справочники.СоглашенияСКлиентами.УстановитьИПЛ(ВладелецИПЛ, ИндивидуальныйВидЦены);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
			ТекстГруппаСобытий = НСтр("ru = 'Создание ИПЛ.'", ОбщегоНазначения.КодОсновногоЯзыка());	
			
			ПараметрыЖурнала.ГруппаСобытий = ТекстГруппаСобытий;
			ПараметрыЖурнала.Метаданные    = Метаданные.Справочники.СоглашенияСКлиентами;
			ПараметрыЖурнала.Данные        = ВладелецИПЛ;
	
			ТекстОшибки = НСтр("ru = 'Ошибка создания ИПЛ. По владельцу'", ОбщегоНазначения.КодОсновногоЯзыка()) + " '"+ ВладелецИПЛ +"'";
			
			ЗаписьЖурнала(ПараметрыЖурнала, 
			              УровеньЖурналаРегистрации.Ошибка,
			              "",
			              ТекстОшибки,
			              РезультатПереноса.ОписаниеОшибки);
	
			РезультатПереноса.Результат = Ложь;
			РезультатПереноса.ОписаниеОшибки = ТекстОшибки;

			Возврат РезультатПереноса;
				
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндивидуальныйВидЦены) Тогда
		
		// инициализация структур для рассчета
	 	СтруктураФормы = ИнициализироватьСтруктуруФормы();
		СтруктураФормы.ИспользуетсяЦенообразование25 = Ложь;
		СтруктураФормы.Дата = Дата;
	
		СтрокаВидЦен = СтруктураФормы.Объект.ВидыЦен.Добавить();
		СтрокаВидЦен.ВидЦены = ИндивидуальныйВидЦены;

		УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(СтруктураФормы);
		СтруктураФормы.ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтруктураФормы.АдресХранилищаНастройкиКомпоновкиДанных);
		Если СтруктураФормы.ВыбранныеЦены.Колонки.Найти("СхемаКомпоновкиДанных") = Неопределено Тогда
			СтруктураФормы.ВыбранныеЦены.Колонки.Добавить("СхемаКомпоновкиДанных");
		КонецЕсли;
				
		Для Каждого СтрокаВидЦен Из СтруктураФормы.ВыбранныеЦены Цикл
			Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦен.АдресСхемыКомпоновкиДанных));
			СтрокаВидЦен.СхемаКомпоновкиДанных	= Схема.Получить();
		КонецЦикла;

		// 	заполнить товары по отборам номенклатуры
		СтруктураФормы.ДеревоЦен.Строки.Очистить();
		УстановкаЦенСервер.ПостроитьДеревоЦен(СтруктураФормы);

		ДобавитьНоменклатуруПоЦеновымГруппамИТоварам(СтруктураФормы, ИндивидуальныйВидЦены, ЦеновыеГруппы, Товары);
	
		//	заполняем и записываем документ
		ТекстКомментария = НСтр("ru = 'Создание ИПЛ на основании соглашений с клиентами. Владелец << %ВладелецИПЛ% >>'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%ВладелецИПЛ%", ВладелецИПЛ);
		
		РезультатУстановкиЦен = Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(СтруктураФормы, ТекстКомментария, 1);
		
		Если РезультатУстановкиЦен = Неопределено Тогда
			
			ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
			ТекстГруппаСобытий = НСтр("ru = 'Создание ИПЛ.'", ОбщегоНазначения.КодОсновногоЯзыка());	
			
			ПараметрыЖурнала.ГруппаСобытий = ТекстГруппаСобытий;
			ПараметрыЖурнала.Метаданные    = Метаданные.Справочники.ВидыЦен;
			ПараметрыЖурнала.Данные        = ВладелецИПЛ;
							
			ТекстОшибки = НСтр("ru = 'Ошибка обновления цен'", ОбщегоНазначения.КодОсновногоЯзыка()) + " '"+ ИндивидуальныйВидЦены +"'";
			
			ЗаписьЖурнала(ПараметрыЖурнала, 
			              УровеньЖурналаРегистрации.Ошибка,
			              "",
			              ТекстОшибки,
			              "Ошибка записи документа установка цен");
			
			РезультатПереноса.Результат = Ложь;
			РезультатПереноса.ОписаниеОшибки = ТекстОшибки;
		
		Иначе
			
			РезультатПереноса.Вставить("Ссылка", ИндивидуальныйВидЦены);
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(РезультатПереноса, РезультатСоздания);
		
		ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
		ТекстГруппаСобытий = НСтр("ru = 'Создание ИПЛ.'", ОбщегоНазначения.КодОсновногоЯзыка());	
		
		ПараметрыЖурнала.ГруппаСобытий = ТекстГруппаСобытий;
		ПараметрыЖурнала.Метаданные    = Метаданные.Справочники.СоглашенияСКлиентами;
		ПараметрыЖурнала.Данные        = ВладелецИПЛ;

		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка создания ИПЛ. По владельцу ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()), ВладелецИПЛ);
		
		ЗаписьЖурнала(ПараметрыЖурнала, 
		              УровеньЖурналаРегистрации.Ошибка,
		              "",
		              ТекстОшибки,
		              РезультатПереноса.ОписаниеОшибки);

		Возврат РезультатПереноса;
		
	КонецЕсли;
	
	Возврат РезультатПереноса;
	
КонецФункции

// Описание Обновление Характеристик и / или серий ценообразования
// 
// Параметры:
// 	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - Вид номенклатуры по котрому необходимо произвести перезаполннгтн
// 	ДополнительныеПараметры - Структура - праметры для указания что перезаполнять
// Возвращаемое значение:
// 	Структура - см. ИнициализироватьСтруктуруРезультата
//
Функция ОбновитьХарактеристикииСерииЦенообразования(ВидНоменклатуры, ДополнительныеПараметры = Неопределено) Экспорт

	РезультатОбновления = ИнициализироватьСтруктуруРезультата();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("НастройкиКлючаЦенПоХарактеристике");
		СтруктураРеквизитов.Вставить("НастройкиКлючаЦенПоСерии");
		СтруктураРеквизитов.Вставить("ВладелецХарактеристик");
		СтруктураРеквизитов.Вставить("ВладелецСерий");
	
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры, СтруктураРеквизитов);
		
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта.НастройкиКлючаЦенПоХарактеристике) Тогда
			
			спрОбъект = ВидНоменклатуры.ПолучитьОбъект();
			спрОбъект.НастройкиКлючаЦенПоХарактеристике = Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать;
			Попытка
				спрОбъект.Записать();
			Исключение
				РезультатОбновления.Результат = Ложь;
				РезультатОбновления.ОписаниеОшибки = НСтр("ru = 'Ошибка при обновлении вида номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецПопытки;
			
		ИначеЕсли РеквизитыОбъекта.НастройкиКлючаЦенПоХарактеристике <> Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать
			И Не ЗначениеЗаполнено(РеквизитыОбъекта.ВладелецХарактеристик) Тогда
			
			Если Не ОбновитьХарактеристкиЦенообразования(ВидНоменклатуры) Тогда
	
				РезультатОбновления.Результат = Ложь;
				РезультатОбновления.ОписаниеОшибки = НСтр("ru = 'Ошибка при обновлении характеристик ценообразования'", ОбщегоНазначения.КодОсновногоЯзыка());
					
			КонецЕсли;
			
		КонецЕсли;
	
		Если РеквизитыОбъекта.НастройкиКлючаЦенПоСерии <> Перечисления.ВариантОтбораДляКлючаЦен.НеИспользовать 
			И Не ЗначениеЗаполнено(РеквизитыОбъекта.ВладелецСерий) Тогда
			
			Если Не ОбновитьСерииЦенообразования(ВидНоменклатуры) Тогда
				
				РезультатОбновления.Результат = Ложь;
				РезультатОбновления.ОписаниеОшибки = РезультатОбновления.ОписаниеОшибки + НСтр("ru = 'Ошибка при обновлении серий ценообразования'", ОбщегоНазначения.КодОсновногоЯзыка());
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДополнительныеПараметры.ПерезаполнитьХарактеристики И Не ОбновитьХарактеристкиЦенообразования(ВидНоменклатуры) Тогда

			РезультатОбновления.Результат = Ложь;
			РезультатОбновления.ОписаниеОшибки = НСтр("ru = 'Ошибка при обновлении характеристик ценообразования'", ОбщегоНазначения.КодОсновногоЯзыка());
				
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПерезаполнитьСерии И Не ОбновитьСерииЦенообразования(ВидНоменклатуры) Тогда
			
			РезультатОбновления.Результат = Ложь;
			РезультатОбновления.ОписаниеОшибки = РезультатОбновления.ОписаниеОшибки + НСтр("ru = 'Ошибка при обновлении серий ценообразования'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат РезультатОбновления;
	
КонецФункции

Функция ОбновитьСерииЦенообразования(ВидНоменклатуры)

	Результат = Истина;
	
	Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";

	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		спрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		спрОбъект.ДополнительныеСвойства.Вставить("ИспользуетсяЦенообразование25", Истина);
		спрОбъект.ДополнительныеСвойства.Вставить("ОбновлениеНастроекЦенообразованияВидыНоменклатуры", Истина);
		
		Попытка
			спрОбъект.Записать();
		Исключение
			Результат = Ложь;
		КонецПопытки;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ОбновитьХарактеристкиЦенообразования(ВидНоменклатуры)
	
	Результат = Истина;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		спрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		спрОбъект.ДополнительныеСвойства.Вставить("ИспользуетсяЦенообразование25", Истина);
		спрОбъект.ДополнительныеСвойства.Вставить("ОбновлениеНастроекЦенообразованияВидыНоменклатуры", Истина);
		
		Попытка
			спрОбъект.Записать();
		Исключение
			Результат = Ложь;
		КонецПопытки;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Процедура ДобавитьНоменклатуруПоЦеновымГруппамИТоварам(Форма, ВидЦены, ЦеновыеГруппы, Товары)
	
	Если ЦеновыеГруппы.количество() Тогда
		
		ДобавитьТоварыПоОтборамСКД(Форма);
	
	КонецЕсли;

	Если Товары.Количество() Тогда
		
		Форма.АдресХранилищаКэшаДанных = "";
		КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
		
		СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦены);
		
		Для Каждого Строка Из Товары Цикл

			СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, Строка, КэшДанных);

			Если СтрокаТаблицыЦен = Неопределено Тогда
				
				НастройкиОтбора = УстановкаЦенСервер.ПолучитьСтруктуруОтбораДанныхПоНоменклатуре();
				НастройкиОтбора.Вставить("ВариантЗаполнения", "ПоНоменклатуре");
				НастройкиОтбора.Вставить("Значение", Строка);
				ЗначенияОтбора = Новый Структура();
				ЗначенияОтбора.Вставить("ПоНоменклатуре", Строка.Номенклатура);
		
				Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
					
					МассивХарактеристик = Новый Массив();
					МассивХарактеристик.Добавить(Строка.Характеристика);
					ЗначенияОтбора.Вставить("ПоМассивуХарактеристик", МассивХарактеристик);
					
				КонецЕсли;
				
				НастройкиОтбора.Вставить("ЗначенияОтбора", ЗначенияОтбора);
				НастройкиОтбора.Вставить("Дата", Форма.Дата);
				НастройкиОтбора.Вставить("ИспользуетсяЦенообразование25", Форма.ИспользуетсяЦенообразование25);
				НастройкиОтбора.Вставить("ИспользоватьХарактеристикиНоменклатуры", Форма.ИспользоватьХарактеристикиНоменклатуры);
				НастройкиОтбора.Вставить("ИспользоватьСерииНоменклатуры", Форма.ИспользоватьСерииНоменклатуры);
				НастройкиОтбора.Вставить("ИспользоватьУпаковкиНоменклатуры", Форма.ИспользоватьУпаковкиНоменклатуры);
				
				ТаблицаНоменклатуры = УстановкаЦенСервер.СоздатьТаблицуНоменклатуры(Форма);
				УстановкаЦенСервер.ПолучитьДанныеПоНоменклатуре(НастройкиОтбора, ТаблицаНоменклатуры);
				УстановкаЦенСервер.ДобавитьТоварыПоОтбору(Форма, Неопределено, ТаблицаНоменклатуры,, КэшДанных);
				
				СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, Строка, КэшДанных);
				
			КонецЕсли;

			// Установим Формулу или цену
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЦен) Тогда
				
				Если ЗначениеЗаполнено(Строка.ВидЦены) Тогда
									
					СтрокаТаблицыЦен["Формула" + СтрокаВидЦены.ИмяКолонки] = "[" + Строка.ВидЦены + "]";
					СтрокаТаблицыЦен["ФормулаИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;
					СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;
					
				Иначе
					
					СтрокаТаблицыЦен[СтрокаВидЦены.ИмяКолонки] = Строка.Цена;
					СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	//	рассчитать цены
	МассивВидовЦен = Новый Массив();
	МассивВидовЦен.Добавить(ВидЦены);
	
	ПараметрыРасчета = Новый Структура();
	ПараметрыРасчета.Вставить("ВидыЦен",				МассивВидовЦен);
	ПараметрыРасчета.Вставить("ТолькоВыделенныеСтроки",	Ложь);
	ПараметрыРасчета.Вставить("ТолькоНезаполненные",	Истина);
	ПараметрыРасчета.Вставить("ЗагрузкаСтарыхЦен",		Ложь);
	ПараметрыРасчета.Вставить("ОкруглениеРучныхЦен",	Ложь);
	ПараметрыРасчета.Вставить("РасчетПоФормулам",       Ложь);

	УстановкаЦенСервер.РассчитатьЦены(Форма, ПараметрыРасчета);
	
КонецПроцедуры

#Область ПроцедурыИнициализации

// Выполняет инициализацию структуры состояния перехода
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//  * ДатаПереходаНаЦенообразование25 - Дата - Дата старта ценообразования версии 2.5
//  * ДатаНачала - Дата - Дата и время начала перехода
//  * ДатаЗавершения - Дата - Дата и время окончания перехода
//  * Шаг - Число - Номер шага перехода
//  * Состояние - ПеречислениеСсылка.СостоянияЗаданий - Состояние перехода
//  * ПараметрыШага1 - см. ИнициализироватьСтруктуруПараметровПерехода
//  * ПараметрыШага2 - см. ИнициализироватьСтруктуруПараметровПерехода
//  * ПараметрыШага3 - см. ИнициализироватьСтруктуруПараметровПерехода
//  * Инициатор - СправочникСсылка.Пользователи - Пользователь инициатор перехода
//
Функция ИнициализироватьСтруктуруСостоянияПерехода() Экспорт
	
	СостояниеПерехода = Новый Структура;
	СостояниеПерехода.Вставить("ДатаПереходаНаЦенообразование25", 		Дата(1, 1, 1));
	СостояниеПерехода.Вставить("ДатаНачала", 		Дата(1, 1, 1));
	СостояниеПерехода.Вставить("ДатаЗавершения", 	Дата(1, 1, 1));
	СостояниеПерехода.Вставить("Шаг", 				0); // 0 - не выполнялось; 1 - Создание ИПЛ; 2 - Создание разрезов; 3 - Перенос цен;
	СостояниеПерехода.Вставить("Состояние", 		Перечисления.СостоянияЗаданий.ПустаяСсылка());

	СостояниеПерехода.Вставить("ПараметрыШага1", 	ИнициализироватьСтруктуруПараметровПерехода(1));
	СостояниеПерехода.Вставить("ПараметрыШага2", 	ИнициализироватьСтруктуруПараметровПерехода(2));
	СостояниеПерехода.Вставить("ПараметрыШага3", 	ИнициализироватьСтруктуруПараметровПерехода(3));
	
	СостояниеПерехода.Вставить("Инициатор", 		Справочники.Пользователи.ПустаяСсылка());
	
	Возврат СостояниеПерехода
	
КонецФункции

// Выполняет инициализацию структуры результата выпоненния функций
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//  * Результат - Булево - результат выполнения функции
//  * ОписаниеОшибки - Строка - описание ошибки
//  * Ссылка - Неопределено - Ссылка при неоходимости
//
Функция ИнициализироватьСтруктуруРезультата() Экспорт
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("Результат", Истина);
	СтруктураРезультата.Вставить("ОписаниеОшибки", "");
	СтруктураРезультата.Вставить("Ссылка", Неопределено);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Выполняет инициализацию структуры состояния шага перехода на ценообразование 2.5
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//  * Состояние - ПеречислениеСсылка.СостоянияЗаданий - Состояние перехода шага
//  * ДатаНачала - Дата - Дата и время начала перехода шага
//  * ДатаЗавершения - Дата - Дата и время окончания перехода шага
//  * КоличествоВсего - Число - Количество объектов для обработки
//  * КоличествоОбработано - Число - Количество объектов обработанных
//  * КоличествоОшибок - Число - Количество объектов обработанных с ошибкой
//  * ТаблицаДляОбработки - см. ИнициализироватьТаблицуДляОбработки
//
Функция ИнициализироватьСтруктуруПараметровПерехода(НомерШага)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Состояние",			Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗаданий"));
	СтруктураПараметров.Вставить("ДатаНачала", 			Дата(1, 1, 1));
	СтруктураПараметров.Вставить("ДатаЗавершения", 		Дата(1, 1, 1));
	
	СтруктураПараметров.Вставить("КоличествоВсего", 	0);
	СтруктураПараметров.Вставить("КоличествоОбработано",0);
	СтруктураПараметров.Вставить("КоличествоОшибок", 	0);
	
	СтруктураПараметров.Вставить("ТаблицаДляОбработки", ИнициализироватьТаблицуДляОбработки(НомерШага));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Выполняет инициализацию таблицы для данных перехода на ценообразование 2.5
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//  * Ссылка - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.ВидыЦен - Ссылка на обрабатываемый объект
//  * Состояние - ПеречислениеСсылка.СостоянияЗаданий - Состояние обработки объекта
//  * ОписаниеОшибки - Строка - описание ошибки
//
Функция ИнициализироватьТаблицуДляОбработки(НомерШага)

	ТаблицаВыбранныеЦены = Новый ТаблицаЗначений();
	Если НомерШага = 1 Тогда
		
		ТаблицаВыбранныеЦены.Колонки.Добавить("Ссылка",	Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
		
	ИначеЕсли НомерШага = 2 Тогда
		 
		ТаблицаВыбранныеЦены.Колонки.Добавить("Ссылка",	Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
		
	ИначеЕсли НомерШага = 3 Тогда
		 
		ТаблицаВыбранныеЦены.Колонки.Добавить("Ссылка",	Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		
	КонецЕсли;
	
	ТаблицаВыбранныеЦены.Колонки.Добавить("Состояние",	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗаданий"));
	ТаблицаВыбранныеЦены.Колонки.Добавить("ОписаниеОшибки",	Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаВыбранныеЦены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Возвращает дату для выполнения запроса по ценам номенклатуры
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаДляЗапросаЦенНоменклатуры(Форма)
	
	Возврат ДатаДокумента(Форма) - 1;
	
КонецФункции

// Возвращает дату установки цен
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаДокумента(Форма)
	
	Дата = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Дата") Тогда
		Дата = Форма.Объект.Дата;
	Иначе
		Дата = Форма.Дата;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	МассивВидовЦен - Массив из СправочникСсылка.ВидыЦенПоставщиков.
Процедура ИнициализироватьВыбранныеЦеныНоменклатуры(Форма, МассивВидоВЦен = Неопределено,ТаблицаВидовЦен = Неопределено)
	
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	НастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных(Форма);
	
	Форма.ВыбранныеЦены.Очистить();
	
	Таблица = ЗагрузитьСправочникВидовЦен(Форма, НастройкиКомпоновкиДанных, МассивВидоВЦен, ТаблицаВидовЦен);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.Статус = Перечисления.СтатусыДействияВидовЦен.Действует Или
			(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен") И
			Форма.Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены", СтрокаТЧ.Ссылка)).Количество()>0) Тогда
		
			НоваяСтрока = Форма.ВыбранныеЦены.Добавить();
			
			НоваяСтрока.УстанавливатьЦенуПриВводеНаОсновании = СтрокаТЧ.УстанавливатьЦенуПриВводеНаОсновании;
			НоваяСтрока.Формула                              = СтрокаТЧ.Формула;
			НоваяСтрока.Валюта                               = СтрокаТЧ.Валюта;
			НоваяСтрока.Идентификатор                        = СтрокаТЧ.Идентификатор;
			НоваяСтрока.ИмяКолонки                           = СтрокаТЧ.ИмяКолонки;
			НоваяСтрока.Наименование                         = СтрокаТЧ.Наименование;
			НоваяСтрока.ВариантОкругления                    = СтрокаТЧ.ВариантОкругления;
			НоваяСтрока.ПорогСрабатывания                    = СтрокаТЧ.ПорогСрабатывания;
			НоваяСтрока.ПорогСрабатыванияПриУменьшении       = СтрокаТЧ.ПорогСрабатыванияПриУменьшении;
			НоваяСтрока.РеквизитДопУпорядочивания            = СтрокаТЧ.РеквизитДопУпорядочивания;
			НоваяСтрока.СпособЗаданияЦены                    = СтрокаТЧ.СпособЗаданияЦены;
			НоваяСтрока.Ссылка                               = СтрокаТЧ.Ссылка;
			НоваяСтрока.Уровень                              = СтрокаТЧ.Уровень;
			НоваяСтрока.ЗапрещенныйВидЦены                   = СтрокаТЧ.ЗапрещенныйВидЦены;
			НоваяСтрока.БазовыйВидЦены                       = СтрокаТЧ.БазовыйВидЦены;
			НоваяСтрока.Наценка                              = СтрокаТЧ.Наценка;
			НоваяСтрока.ПометкаУдаления                      = СтрокаТЧ.ПометкаУдаления;
			НоваяСтрока.ДатаПоследнейУстановкиЦены           = СтрокаТЧ.ДатаПоследнейУстановкиЦены;
			НоваяСтрока.ЗапретитьРедактированиеЦеныЗаПределамиОтбора = СтрокаТЧ.ЗапретитьРедактированиеЦеныЗаПределамиОтбора;
			
			// Служебные поля для работы с настройками СКД
			НоваяСтрока.АдресСхемыКомпоновкиДанных         = СтрокаТЧ.АдресСхемыКомпоновкиДанных;
			НоваяСтрока.АдресНастроекСхемыКомпоновкиДанных = СтрокаТЧ.АдресНастроекСхемыКомпоновкиДанных;
			НоваяСтрока.АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре = СтрокаТЧ.АдресНастроекСхемыКомпоновкиДанныхОтбораПоНоменклатуре;
			НоваяСтрока.НайденыОбязательныеПараметры       = СтрокаТЧ.НайденыОбязательныеПараметры;
			НоваяСтрока.Параметры                          = СтрокаТЧ.Параметры;
			
			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
				
				НоваяСтрока.ПорогиСрабатывания.Загрузить(СтрокаТЧ.ПорогиСрабатывания);
				НоваяСтрока.ПравилаОкругленияЦены.Загрузить(СтрокаТЧ.ПравилаОкругленияЦены);
				НоваяСтрока.ЦеновыеГруппы.Загрузить(СтрокаТЧ.ЦеновыеГруппы);
				НоваяСтрока.ВлияющиеВидыЦен.Загрузить(СтрокаТЧ.ВлияющиеВидыЦен);
				НоваяСтрока.Валюты.Загрузить(СтрокаТЧ.Валюты);
				
			Иначе
					
				НоваяСтрока.ПорогиСрабатывания		= СтрокаТЧ.ПорогиСрабатывания.Скопировать();
				НоваяСтрока.ПравилаОкругленияЦены	= СтрокаТЧ.ПравилаОкругленияЦены.Скопировать();
				НоваяСтрока.ЦеновыеГруппы			= СтрокаТЧ.ЦеновыеГруппы.Скопировать();
				НоваяСтрока.ВлияющиеВидыЦен			= СтрокаТЧ.ВлияющиеВидыЦен.Скопировать();
				НоваяСтрока.Валюты					= СтрокаТЧ.Валюты.Скопировать();
				
			КонецЕсли;
			
			НоваяСтрока.ВлияющиеЦены.ЗагрузитьЗначения(СтрокаТЧ.ВлияющиеЦены.ВыгрузитьЗначения());
			НоваяСтрока.ЗависимыеЦены.ЗагрузитьЗначения(СтрокаТЧ.ЗависимыеЦены.ВыгрузитьЗначения());
			
		КонецЕсли;
		
	КонецЦикла;
	Форма.ВыбранныеЦены.Сортировать("Уровень");
	
	ЕстьВидыЦенСКД = Ложь;
	ЕстьВидыЦенФормулы = Ложь;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "ВидыЦен") Тогда
		Для Каждого СтрокаТЧ Из Форма.Объект.ВидыЦен Цикл
			СтрокаВидаЦен = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаТЧ.ВидЦены);
			Если СтрокаВидаЦен <> Неопределено Тогда
				СтрокаВидаЦен.Выбрана = Истина;
				СтрокаВидаЦен.Редактировать = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаВидаЦен Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			Или СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении 
			Или СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам 
			Или СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам 
			Или СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости	Тогда
			ЕстьВидыЦенСКД = Истина;
		КонецЕсли;
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен
			Или СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
			
			ЕстьВидыЦенФормулы = Истина;
			СтрокаВидаЦен.ФормулаРедактируется = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВидыЦенФормулы Тогда
		// Заполнить флаги "Влияет" и "Зависит"
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			ВидЦены.Зависит = Ложь;
			ВидЦены.Влияет  = Ложь;
		КонецЦикла;
		
		Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
			
			Если ВидЦены.Выбрана Тогда
				
				Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены         = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ЗависимаяЦена.Значение);
					Если СтрокаЗависимойЦены <> Неопределено Тогда
						СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ВлияющаяЦена Из ВидЦены.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены        = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВлияющаяЦена.Значение);
					Если СтрокаВыбраннойЦены <> Неопределено Тогда
						СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВыбратьВсеВлияющие",  "Видимость", ЕстьВидыЦенФормулы);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВыбратьВсеЗависимые", "Видимость", ЕстьВидыЦенФормулы);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныЗависимыеЦены",       "Видимость", ЕстьВидыЦенФормулы);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВлияющиеЦены",        "Видимость", ЕстьВидыЦенФормулы);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДеревоЦенПереключательОтображатьВлияющиеЦены", "Видимость", ЕстьВидыЦенФормулы);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныГруппаПараметры",                  "Видимость", ЕстьВидыЦенСКД);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныВосстановитьНастройкиПоУмолчанию", "Видимость", ЕстьВидыЦенСКД);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыбранныеЦеныРедактироватьНастройки",           "Видимость", ЕстьВидыЦенСКД);
	
	КонецЕсли;
	
	Форма.АдресХранилищаНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ИнициализироватьВыбранныеЦеныПоставщика(Форма)
	
	Форма.ВыбранныеЦены.Очистить();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ = Форма.Объект.Товары.Выгрузить();
	ТЧ.Свернуть("ВидЦеныПоставщика");
	
	Количество = ТЧ.Количество();
	
	Таблица = ЗагрузитьСправочникВидовЦенПоставщика(Форма);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Форма.ВыбранныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Выбрана = ТЧ.Найти(СтрокаТЧ.Ссылка, "ВидЦеныПоставщика") <> Неопределено Или Количество = 0;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения цен, рассчитываемым по данным информационной базы
//
// Параметры:
//  ТаблицаНоменклатуры - см. СоздатьТаблицуНоменклатуры
//  СтрокаВидЦены - СправочникСсылка.ВидыЦен - Вид цены
//  ТолькоНезаполненные - Булево - Указывает на необходимость вычисления только незаполненных цен.
//
Процедура ВычислитьЗначенияЦеныПоДаннымИБ(Форма,
	                                      ТаблицаНоменклатуры,
	                                      СтрокаВидЦены,
	                                      ТолькоНезаполненные,
	                                      НастройкиКомпоновкиДанных,
	                                      КэшДанных)
	
	Форма.Модифицированность = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления 
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам 
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам 
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости Тогда
			
			// Копирование схемы компоновки данных
			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
				
				Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
				СхемаКомпоновкиДанных = Схема.Получить();
				
			ИначеЕсли ТипЗнч(Форма) = Тип("Структура") Тогда
				
				Схема = Новый ХранилищеЗначения(СтрокаВидЦены.СхемаКомпоновкиДанных);
				СхемаКомпоновкиДанных = Схема.Получить();
				
			КонецЕсли; 
			
			Если Ценообразование.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
				
				// Заполнение набора данных ТаблицаНоменклатуры
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				ТекстЗапроса = РабочийНаборДанных.Запрос;
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки1", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
				
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки2", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокумента.Упаковка", 
						"ТоварыДокумента.Номенклатура"));
						
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки3", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокументаВводНаОсновании.Упаковка", 
						"ТоварыДокументаВводНаОсновании.Номенклатура"));
					
				РабочийНаборДанных.Запрос = ТекстЗапроса;
				
				НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
				КонецЕсли;
				
				// Подготовка компоновщика макета компоновки данных, загрузка настроек
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
						НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
						КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
						КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
					Иначе
						КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент");
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта");
				
				ПараметрыКомпоновки = КомпоновщикНастроек.настройки.параметрыДанных.Элементы;
				Если ЭтоУстановкаЦенНоменклатуры(Форма) Тогда
					Параметр = ПараметрыКомпоновки.Найти("Основание");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = Форма.Объект.ДокументОснование;
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
					Параметр = ПараметрыКомпоновки.Найти("ЭтоВводНаОсновании");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ИсключаемыеХозОперации");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = РасчетСебестоимостиПрикладныеАлгоритмы.ХозяйственныеОперацииПеремещений();
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДокумента(Форма);
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("Валюта");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Валюта;
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Скопировать(, "Номенклатура, Характеристика"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
				Иначе
					ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("ТолькоНезаполненные",  ТолькоНезаполненные);
				СтруктураПараметров.Вставить("ПрименитьОкругление",  Истина);
				СтруктураПараметров.Вставить("ЗагружатьУпаковку",    Ложь);
				СтруктураПараметров.Вставить("АвтоматическийРасчет", Истина);

				Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления 
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам 
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам 
					Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости Тогда
					
					СтруктураПараметров.Вставить("Наценивать", Истина);
					ЗагрузитьЦеныИзТаблицыЗначений(
						Форма,
						ДанныеОтчета,
						ТаблицаКоэффициентовУпаковокНоменклатуры,
						КэшДанных,
						СтрокаВидЦены,
						СтруктураПараметров);
					
				Иначе
					
					СтруктураПараметров.Вставить("Наценивать", Ложь);
					ЗагрузитьЦеныИзТаблицыЗначений(Форма,
						ДанныеОтчета,
						ТаблицаКоэффициентовУпаковокНоменклатуры,
						КэшДанных,
						СтрокаВидЦены,
						СтруктураПараметров);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет значения цен, рассчитываемым по данным информационной базы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ТаблицаНоменклатуры - ТаблицаЗначений - таблица данных по номенклатуре.
//  СтрокаВидЦены - ДанныеФормыЭлементКоллекции - Строка вида цен
//  ТолькоНезаполненные - Булево- Указывает на необходимость вычисления только незаполненных цен.
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - 
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
Процедура ВычислитьЗначенияЦеныПоДаннымИБ2_5(Форма,
	                                      ТаблицаНоменклатуры,
	                                      СтрокаВидЦены,
	                                      ТолькоНезаполненные,
	                                      НастройкиКомпоновкиДанных,
	                                      КэшДанных)
	
	Форма.Модифицированность = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления 
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам 
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам 
			Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости Тогда
			
			// Копирование схемы компоновки данных
			Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
				
				Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
				СхемаКомпоновкиДанных = Схема.Получить();
				
			ИначеЕсли ТипЗнч(Форма) = Тип("Структура") Тогда
				
				Схема = Новый ХранилищеЗначения(СтрокаВидЦены.СхемаКомпоновкиДанных);
				СхемаКомпоновкиДанных = Схема.Получить();
				
			КонецЕсли; 
			
			ПроверкаСКДПройдена = Ценообразование.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка), Ложь);
			ПроверкаСКДПройдена2_5 = Ценообразование.ПроверитьСхемуКомпоновкиДанных2_5(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка), Ложь);
			Если ПроверкаСКДПройдена2_5 Тогда
				
				// Заполнение набора данных ТаблицаНоменклатуры
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				ТекстЗапроса = РабочийНаборДанных.Запрос;
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки1", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
				
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки2", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокумента.Упаковка", 
						"ТоварыДокумента.Номенклатура"));
						
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки3", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокументаВводНаОсновании.Упаковка", 
						"ТоварыДокументаВводНаОсновании.Номенклатура"));
					
				РабочийНаборДанных.Запрос = ТекстЗапроса;
				
				НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ХарактеристикаЦО", "СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования");
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "ХарактеристикаЦО");
				КонецЕсли;
				
				Если Форма.ИспользоватьСерииНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "СерияЦО",         "СправочникСсылка.СерииНоменклатурыДляЦенообразования");
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "СерияЦОДляСвязи", "СправочникСсылка.СерииНоменклатурыДляЦенообразования");
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "СерияЦОДляСвязи");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "УпаковкаЦО", "СправочникСсылка.УпаковкиЕдиницыИзмерения");
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "УпаковкаЦОДляСвязи", "СправочникСсылка.УпаковкиЕдиницыИзмерения");
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "УпаковкаЦОДляСвязи");
				КонецЕсли;
				
				// Подготовка компоновщика макета компоновки данных, загрузка настроек
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
						НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
						КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
						КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
					Иначе
						КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ХарактеристикаЦО");
				КонецЕсли;
				
				Если Форма.ИспользоватьСерииНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦО");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦОДляСвязи");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦО");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦОДляСвязи");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент");
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта");
				
				ПараметрыКомпоновки = КомпоновщикНастроек.настройки.параметрыДанных.Элементы;
				Если ЭтоУстановкаЦенНоменклатуры(Форма) Тогда
					Параметр = ПараметрыКомпоновки.Найти("Основание");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = Форма.Объект.ДокументОснование;
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
					Параметр = ПараметрыКомпоновки.Найти("ЭтоВводНаОсновании");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ИсключаемыеХозОперации");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = РасчетСебестоимостиПрикладныеАлгоритмы.ХозяйственныеОперацииПеремещений();
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДокумента(Форма);
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("Валюта");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Валюта;
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Скопировать(, "Номенклатура, ХарактеристикаЦО, СерияЦО, СерияЦОДляСвязи, УпаковкаЦО, УпаковкаЦОДляСвязи"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
			ИначеЕсли ПроверкаСКДПройдена Тогда 
								
				// Заполнение набора данных ТаблицаНоменклатуры
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				ТекстЗапроса = РабочийНаборДанных.Запрос;
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки1", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка", 
						"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
				
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки2", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокумента.Упаковка", 
						"ТоварыДокумента.Номенклатура"));
						
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&ТекстЗапросаКоэффициентУпаковки3", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыДокументаВводНаОсновании.Упаковка", 
						"ТоварыДокументаВводНаОсновании.Номенклатура"));
					
				РабочийНаборДанных.Запрос = ТекстЗапроса;
				
				НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				НаборДанныхТрансформация                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
				НаборДанныхТрансформация.Имя            = "ДанныеДляТрансформации";
				НаборДанныхТрансформация.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				НаборДанныхТрансформация.Запрос = ПолучитьТекстЗапросаДляТрансформации();
			
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");

				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура,  НаборДанныхТрансформация, "Номенклатура");
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхТрансформация, РабочийНаборДанных,       "Номенклатура");
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ХарактеристикаЦО", "СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования");

					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура,  НаборДанныхТрансформация, "ХарактеристикаЦО", "ХарактеристикаЦО");
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхТрансформация, РабочийНаборДанных,       "Характеристика",   "Характеристика");
				КонецЕсли;
				
				Если Форма.ИспользоватьСерииНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "СерияЦО",         "СправочникСсылка.СерииНоменклатурыДляЦенообразования");
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "УпаковкаЦО", "СправочникСсылка.УпаковкиЕдиницыИзмерения");
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "УпаковкаЦОДляСвязи", "СправочникСсылка.УпаковкиЕдиницыИзмерения");
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "УпаковкаЦОДляСвязи", "Упаковка");
				КонецЕсли;
				
				Итог             = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
				Итог.ПутьКДанным = "Цена";
				Итог.Выражение   = "Максимум(Цена)";

				// Подготовка компоновщика макета компоновки данных, загрузка настроек
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
						НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
						КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
						КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
					Иначе
						КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;
				
				// запрещаем вывод общих итогов
				КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура", Истина);
				
				Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ХарактеристикаЦО", Истина);
				КонецЕсли;
				
				Если Форма.ИспользоватьСерииНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "СерияЦО", Истина);
				КонецЕсли;
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "УпаковкаЦО", Истина);
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка", Истина);
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент", Истина);
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта", Истина);
				
				ПараметрыКомпоновки = КомпоновщикНастроек.настройки.параметрыДанных.Элементы;
				Если ЭтоУстановкаЦенНоменклатуры(Форма) Тогда
					Параметр = ПараметрыКомпоновки.Найти("Основание");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = Форма.Объект.ДокументОснование;
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
					Параметр = ПараметрыКомпоновки.Найти("ЭтоВводНаОсновании");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
					Параметр = ПараметрыКомпоновки.Найти("ИсключаемыеХозОперации");
					Если Параметр <> Неопределено Тогда
						Параметр.Значение = РасчетСебестоимостиПрикладныеАлгоритмы.ХозяйственныеОперацииПеремещений();
						Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
					КонецЕсли;
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДокумента(Форма);
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				Параметр = ПараметрыКомпоновки.Найти("Валюта");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Валюта;
					Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
				КонецЕсли;
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Скопировать(, "Номенклатура, ХарактеристикаЦО, СерияЦО, СерияЦОДляСвязи, УпаковкаЦО, УпаковкаЦОДляСвязи"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
			КонецЕсли;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатурыДереваТоваров(Форма);
			Иначе
				ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ТолькоНезаполненные",  ТолькоНезаполненные);
			СтруктураПараметров.Вставить("ПрименитьОкругление",  Истина);
			СтруктураПараметров.Вставить("ЗагружатьУпаковку",    Ложь);
			СтруктураПараметров.Вставить("АвтоматическийРасчет", Истина);

			Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления 
				Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуВводаОстатков
				Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоКонкурентам 
				Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоПоставщикам 
				Или СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПоСебестоимости Тогда
				
				СтруктураПараметров.Вставить("Наценивать", Истина);
				ЗагрузитьЦеныИзТаблицыЗначений(
					Форма,
					ДанныеОтчета,
					ТаблицаКоэффициентовУпаковокНоменклатуры,
					КэшДанных,
					СтрокаВидЦены,
					СтруктураПараметров);
				
			Иначе
				
				СтруктураПараметров.Вставить("Наценивать", Ложь);
				ЗагрузитьЦеныИзТаблицыЗначений(Форма,
					ДанныеОтчета,
					ТаблицаКоэффициентовУпаковокНоменклатуры,
					КэшДанных,
					СтрокаВидЦены,
					СтруктураПараметров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Округляет ручные цены в таблице
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой применяется округление
//  ВидыЦен - Массив - виды цен, для которых необходимо применить округление.
//
Процедура ПрименитьОкруглениеКРучнымЦенам(Форма, ТаблицаНоменклатуры, ВидыЦен, КэшДанных)
	
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, СтрокаТаблицыНоменклатуры, КэшДанных);
		
		Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			СтрокаТаблицыЦен[ИмяКолонки] = УстановкаЦенКлиентСервер.ОкруглитьЦену(СтрокаТаблицыЦен[ИмяКолонки], СтрокаВидЦены);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает цены в таблицу цен из переданной таблицы
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  Таблица - ТаблицаЗначений - Таблица, из которой необходимо загрузить цены
//  СоответствиеКоэффициентовУпаковокНоменклатуры - Соответствие - содержит номенклатуру, упаковки и их коэффициенты
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//  СтрокаЗагружаемыйВидЦены - Неопределено, ДанныеФормыЭлементКоллекции -
//  ДополнительныеПараметры - Структура - содержит:
//  * ТолькоНезаполненные  - Булево - указывает на необходимость вычисления только незаполненных цен.
//  * ПрименитьОкругление  - Булево - указывает на необходимость применения округления к ценам.
//  * ЗагружатьУпаковку    - Булево - указывает на необходимость загрузки упаковки.
//  * Наценивать           - Булево - указывает на необходимость наценки.
//  * АвтоматическийРасчет - Булево - указывает на необходимость автоматического пересчета цен.
//
Процедура ЗагрузитьЦеныИзТаблицыЗначений(Форма,
	                                     Таблица,
	                                     СоответствиеКоэффициентовУпаковокНоменклатуры,
	                                     КэшДанных,
	                                     СтрокаЗагружаемыйВидЦены = Неопределено,
	                                     ДополнительныеПараметры  = Неопределено)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТолькоНезаполненные",  Ложь);
	СтруктураПараметров.Вставить("ПрименитьОкругление",  Ложь);
	СтруктураПараметров.Вставить("ЗагружатьУпаковку",    Ложь);
	СтруктураПараметров.Вставить("Наценивать",           Ложь);
	СтруктураПараметров.Вставить("АвтоматическийРасчет", Ложь);

	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры);
	КонецЕсли;
	
	КурсыВалют(Форма, КэшДанных);
	
	Если СтрокаЗагружаемыйВидЦены <> Неопределено Тогда
		СтрокаВидЦены = СтрокаЗагружаемыйВидЦены;
	КонецЕсли;
	
	ТекущийВидЦены = Неопределено;
	
	Для Каждого СтрокаИсточник Из Таблица Цикл
	
		ЕстьПодчиненныеСтроки = Неопределено;
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(Форма, СтрокаИсточник, КэшДанных);
		
		Если СтрокаЗагружаемыйВидЦены = Неопределено И ТекущийВидЦены <> СтрокаИсточник.ВидЦены Тогда
			ТекущийВидЦены = СтрокаИсточник.ВидЦены;
			СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтрокаИсточник.ВидЦены);
		КонецЕсли;
		
		ЦеновыеГруппыПорогов = СтрокаВидЦены.ПорогиСрабатывания.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
		Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
			ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
			ПорогСрабатыванияПриУменьшении = ЦеновыеГруппыПорогов[0].ПорогСрабатыванияПриУменьшении;
		Иначе
			ПорогСрабатывания = СтрокаВидЦены.ПорогСрабатывания;
			ПорогСрабатыванияПриУменьшении = СтрокаВидЦены.ПорогСрабатыванияПриУменьшении;
		КонецЕсли;
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЦен["Валюта" + ИмяКолонки]) Тогда
			ВалютаЦены = СтрокаТаблицыЦен["Валюта" + ИмяКолонки];
		Иначе
			ЦеновыеГруппыВалют = СтрокаВидЦены.Валюты.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
			Если ЦеновыеГруппыВалют.Количество() > 0 Тогда
				ВалютаЦены = ЦеновыеГруппыВалют[0].Валюта;
			Иначе
				ВалютаЦены = СтрокаВидЦены.Валюта;
			КонецЕсли;
			
			Если ЕстьПодчиненныеСтроки = Неопределено Тогда
				Если ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных) Тогда
					ЕстьПодчиненныеСтроки = Ложь;
				Иначе
					Если (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево")) Тогда
						ПодчиненныеСтроки = СтрокаТаблицыЦен.ПолучитьЭлементы();
					Иначе
						ПодчиненныеСтроки = СтрокаТаблицыЦен.Строки;
					КонецЕсли;
					
					ЕстьПодчиненныеСтроки = ПодчиненныеСтроки.Количество() > 0;
				КонецЕсли;
			КонецЕсли;
			Если Не ЕстьПодчиненныеСтроки Тогда
				СтрокаТаблицыЦен["Валюта" + ИмяКолонки] = ВалютаЦены;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Наценивать Тогда
			ЦеновыеГруппыНаценок = СтрокаВидЦены.ЦеновыеГруппы.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
			Если ЦеновыеГруппыНаценок.Количество() > 0 Тогда
				Наценка = ЦеновыеГруппыНаценок[0].Наценка;
			Иначе
				Наценка = СтрокаВидЦены.Наценка;
			КонецЕсли;
		КонецЕсли;
		
		Если (СтрокаТаблицыЦен[ИмяКолонки] = 0 Или Не СтруктураПараметров.ТолькоНезаполненные) 
			И СтрокаИсточник.Цена <> Null И Не СтрокаТаблицыЦен["ЗапретРедактирования" + ИмяКолонки] Тогда
			
			Цена = СтрокаИсточник.Цена;
			Если СтруктураПараметров.Наценивать Тогда
				Цена = Цена * (Наценка / 100 + 1);
			КонецЕсли;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				
				Если СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
					
					ТекущаяУпаковка = СтрокаТаблицыЦен["Упаковка" + ИмяКолонки];
					ТекущийКоэффициент = 1;
					
					Если ЗначениеЗаполнено(СтрокаИсточник.Коэффициент)
						И (ЗначениеЗаполнено(СтрокаИсточник.Упаковка) Или ЗначениеЗаполнено(ТекущаяУпаковка)) Тогда
						
						Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
														
							РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
																												СтрокаИсточник.Номенклатура, 
																												ТекущаяУпаковка);
							
							Если ЗначениеЗаполнено(РезультатПоиска) Тогда
								ТекущийКоэффициент = РезультатПоиска;
							КонецЕсли;
							
						КонецЕсли;
						
						Цена = Цена / СтрокаИсточник.Коэффициент * ТекущийКоэффициент;
						
					КонецЕсли;
					
				ИначеЕсли СтруктураПараметров.ЗагружатьУпаковку Тогда
					СтрокаТаблицыЦен["Упаковка" + ИмяКолонки] = СтрокаИсточник.Упаковка;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВалютаЦены <> Неопределено И СтрокаИсточник.Валюта <> Null И ВалютаЦены <> СтрокаИсточник.Валюта Тогда
				Цена = ПересчитатьВалюту(СтрокаИсточник.Валюта, ВалютаЦены, Цена, КэшДанных.КурсыВалют);
			КонецЕсли;
			
			Если СтруктураПараметров.ПрименитьОкругление Тогда
				Цена = УстановкаЦенКлиентСервер.ОкруглитьЦену(Цена, СтрокаВидЦены);
			КонецЕсли;
			
			Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
				ПроцентИзменения = Окр(100 * (Цена - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки]) / СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки], 10, 2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если (ПорогСрабатывания = 0 И ПорогСрабатыванияПриУменьшении = 0)
				Или СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] = 0
				Или ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатыванияПриУменьшении) Тогда
				
				СтрокаТаблицыЦен[ИмяКолонки] = Цена;
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				Иначе
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыЦен[ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
				СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
			КонецЕсли;
			
			СтрокаТаблицыЦен["СуммаИзменения" + ИмяКолонки] = СтрокаТаблицыЦен[ИмяКолонки] - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
			
			СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Ложь;
			СтрокаТаблицыЦен["ИзмененаАвтоматически" + ИмяКолонки] = СтруктураПараметров.АвтоматическийРасчет;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет упаковки элемента дерева в массив упаковок
//
// Параметры:
//  ЭлементДерева       - ДанныеФормыКоллекцияЭлементовДерева - элемент дерева значений
//  МассивВидовЦен      - Массив - массив видов цен для поиска колонок в дереве значений
//  МассивУпаковок      - Массив - массив, в который необходимо добавить упаковки.
//
Процедура ДобавитьУпаковкиНоменклатурыСтрокиТаблицыЦенВТаблицу(Знач ЭлементДерева,
	                                              Знач МассивВидовЦен,
	                                              ТаблицаУпаковокНоменклатуры)
	
	Для Каждого ВидЦен Из МассивВидовЦен Цикл
		ИмяКолонки = "Упаковка" + ВидЦен.ИмяКолонки;
		Упаковка = ЭлементДерева[ИмяКолонки];//СправочникСсылка.УпаковкиЕдиницыИзмерения
		
		ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ЭлементДерева.Номенклатура, Упаковка);
		
		Если ЗначениеЗаполнено(Упаковка) И ТаблицаУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = ЭлементДерева.Номенклатура;
			НоваяСтрока.Упаковка = Упаковка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает последние курсы валют во временное хранилище
// 
// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 
Процедура СоответствиеКурсовВалют(Форма, КэшДанных)
	
	КэшДанных.КурсыВалют = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтносительныеКурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", ДатаДокумента(Форма));
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВалюты = Новый Структура;
		СтруктураВалюты.Вставить("Валюта", Выборка.Валюта);
		СтруктураВалюты.Вставить("КурсЧислитель", Выборка.КурсЧислитель);
		СтруктураВалюты.Вставить("КурсЗнаменатель", Выборка.КурсЗнаменатель);
		
		КэшДанных.КурсыВалют.Вставить(Выборка.Валюта, СтруктураВалюты);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает виды цен, зависимые от заданного вида цены
//
// Параметры:
//  ТаблицаВидовЦен - см. ЗагрузитьСправочникВидовЦен
//  ВидЦены - СправочникСсылка.ВидыЦен - ВидЦены, от которого нужно найти зависимые и влияющие цены
//  Стек - Массив из СтрокаТаблицыЗначений - Служебный массив для рекурсивного вызова. Содержит в том числе:
//  * Ссылка - СправочникСсылка.ВидыЦен, СправочникСсылка.ВидыЦенПоставщиков - Вид цены
//
// Возвращаемое значение:
//  Массив - Зависимые виды цен
//
Функция НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, ВидЦены, Стек = Неопределено)
	
	СтрокаСправочника = ТаблицаВидовЦен.Найти(ВидЦены, "Ссылка");
	Уровень           = 0;
	
	Для Каждого БазоваяЦена Из СтрокаСправочника.ВлияющиеВидыЦен Цикл
		
		СтрокаБазовойЦены  = ТаблицаВидовЦен.Найти(БазоваяЦена.ВлияющийВидЦен, "Ссылка");
		Если СтрокаБазовойЦены = Неопределено Тогда
			Возврат Уровень;
		КонецЕсли;
		УровеньБазовойЦены = СтрокаБазовойЦены.Уровень;
		
		Если Стек = Неопределено Тогда
			Стек = Новый Массив();
		КонецЕсли;
		
		Стек.Добавить(СтрокаСправочника);
		УровеньБазовойЦены = НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, БазоваяЦена.ВлияющийВидЦен, Стек);
		
		Если УровеньБазовойЦены > Уровень Тогда
			Уровень = УровеньБазовойЦены;
		КонецЕсли;
		
		Для Каждого ЭлементСтека Из Стек Цикл
			
			Если ЭлементСтека.ВлияющиеЦены.НайтиПоЗначению(СтрокаБазовойЦены.Ссылка) = Неопределено Тогда
				ЭлементСтека.ВлияющиеЦены.Добавить(СтрокаБазовойЦены.Ссылка);
			КонецЕсли;
			
			Если СтрокаБазовойЦены.ЗависимыеЦены.НайтиПоЗначению(ЭлементСтека.Ссылка) = Неопределено Тогда
				СтрокаБазовойЦены.ЗависимыеЦены.Добавить(ЭлементСтека.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Стек.Удалить(Стек.Количество() - 1);
		
	КонецЦикла;
	
	Уровень                   = Уровень + 1;
	СтрокаСправочника.Уровень = Уровень;
	
	Возврат Уровень;
	
КонецФункции

Функция ПолучитьСтрокиНастроекЗависимыхВидовЦен(Форма, МассивВидовЦен)

	ЗависимыеЦены = Новый Массив;

	Для Каждого ВидЦены Из МассивВидовЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(Форма, ВидЦены);
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И МассивВидовЦен.Найти(СтрокаВидЦены) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗависимыеЦены;
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	ВыборкаНоменклатура - ВыборкаИзРезультатаЗапроса - 
// 	КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
// 
Процедура ЗагрузитьТоварыВДеревоЦен(Форма, ВыборкаНоменклатура, КэшДанных)
	
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ЭлементНоменклатура = НайтиСтрокуДереваЦен(Форма, ВыборкаНоменклатура, КэшДанных);
		
		Если Не ЗначениеЗаполнено(ВыборкаНоменклатура.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНоменклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаНоменклатура.ВидЦены, КэшДанных);
		
		ЭлементНоменклатура[ИмяКолонки] = ВыборкаНоменклатура.Цена;
		ЭлементНоменклатура["СтараяЦена" + ИмяКолонки] = ВыборкаНоменклатура.ДействующаяЦена;
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.ДействующаяЦена) Тогда
			ЭлементНоменклатура["СуммаИзменения" + ИмяКолонки] = ВыборкаНоменклатура.Цена - ВыборкаНоменклатура.ДействующаяЦена;
		КонецЕсли;
		ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаНоменклатура.Процент;
		ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаНоменклатура.ЦенаИзмененаВручную;
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			ЭлементНоменклатура["Упаковка" + ИмяКолонки] = ВыборкаНоменклатура.Упаковка;
		КонецЕсли;
		
		Если ЭтоРегистрацияЦенПоставщика Тогда
			
			УстановкаУсловий = Ложь;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				
				Если ТипЗнч(ЭлементНоменклатура) = Тип("Структура")
						И ЭлементНоменклатура.Свойство("УпаковкаЗаказа" + ИмяКолонки)
						Или ТипЗнч(ЭлементНоменклатура) = Тип("ДанныеФормыЭлементДерева") Тогда
							
							ЭлементНоменклатура["УпаковкаЗаказа" + ИмяКолонки] = ВыборкаНоменклатура.УпаковкаЗаказа;
							УстановкаУсловий = ЗначениеЗаполнено(ВыборкаНоменклатура.УпаковкаЗаказа);
							
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ЭлементНоменклатура) = Тип("Структура")
					И ЭлементНоменклатура.Свойство("МинимальнаяПартияПоставки" + ИмяКолонки)
					Или ТипЗнч(ЭлементНоменклатура) = Тип("ДанныеФормыЭлементДерева") Тогда

						ЭлементНоменклатура["МинимальнаяПартияПоставки"  + ИмяКолонки] = ВыборкаНоменклатура.МинимальнаяПартияПоставки;
						УстановкаУсловий = УстановкаУсловий Или ЗначениеЗаполнено(ВыборкаНоменклатура.МинимальнаяПартияПоставки);
						
			КонецЕсли;
			
			Если ТипЗнч(ЭлементНоменклатура) = Тип("Структура")
					И ЭлементНоменклатура.Свойство("УстановкаУсловий" + ИмяКолонки)
					Или ТипЗнч(ЭлементНоменклатура) = Тип("ДанныеФормыЭлементДерева") Тогда
						
				ЭлементНоменклатура["УстановкаУсловий"  + ИмяКолонки] = УстановкаУсловий;
				
			КонецЕсли;
			
		Иначе
			
			Формула = ?(ВыборкаНоменклатура.Формула = "", ВыборкаНоменклатура.ФормулаПоУмолчанию, ВыборкаНоменклатура.Формула);
			
			ЭлементНоменклатура["ЗапретРедактирования"   + ИмяКолонки] = ВыборкаНоменклатура.ЗапретРедактирования;
			ЭлементНоменклатура["Формула"                + ИмяКолонки] = Формула;
			ЭлементНоменклатура["ФормулаИзмененаВручную" + ИмяКолонки] = (Формула <> ВыборкаНоменклатура.ФормулаПоУмолчанию);
			ЭлементНоменклатура["Валюта"                 + ИмяКолонки] = ВыборкаНоменклатура.Валюта;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольКоличестваСтрок(Параметры)
	
	Параметры.КоличествоСтрок = Параметры.КоличествоСтрок + Параметры.КоличествоВидовЦен;
	Если Параметры.КоличествоСтрок > 99999 Тогда
		
		Параметры.ТабличныеЧасти.Удалить(Параметры.ТабличныеЧасти.Найти(Параметры.ТабличныеЧасти[0]));
		Если Параметры.ТабличныеЧасти.Количество() > 0 Тогда
			Параметры.КоличествоСтрок = Параметры.КоличествоВидовЦен;
		Иначе
			Если Параметры.Свойство("РеквизитыНовыхДокументов") Тогда
				Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(Документ, Параметры.РеквизитыНовыхДокументов);
				ПоместитьВидыЦенВТабличнуюЧасть(Параметры.Форма, Документ.ВидыЦен, Истина);
				Параметры.Документы.Добавить(Документ);
				Если Параметры.Форма.ИспользуетсяЦенообразование25 Тогда
					Параметры.ТабличныеЧасти.Добавить(Документ.Товары2_5);
				Иначе
					Параметры.ТабличныеЧасти.Добавить(Документ.Товары);
				КонецЕсли;
			Иначе
				ВызватьИсключение НСтр("ru = 'В документ введено слишком много товаров.
										|Попробуйте разбить данный документ на несколько отдельных документов.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьЦены(Форма, ТаблицаНоменклатуры, МассивСтрокВидовЦен, КэшДанных)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаДереваЦен = НайтиСтрокуДереваЦен(Форма, СтрокаНоменклатуры, КэшДанных);
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = 0;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПересчитатьВалюту(ВалютаИсточник, ВалютаНазначение, Цена, СоответствиеВалют)
	
	Если ВалютаИсточник <> ВалютаНазначение Тогда
		
		СтрокаВалютыИсточника  = УстановкаЦенКлиентСервер.НайтиСтрокуВалюты(СоответствиеВалют, ВалютаИсточник);
		СтрокаВалютыНазначения = УстановкаЦенКлиентСервер.НайтиСтрокуВалюты(СоответствиеВалют, ВалютаНазначение);
		
		Если СтрокаВалютыИсточника <> Неопределено И СтрокаВалютыНазначения <> Неопределено Тогда
			Возврат Окр((Цена * СтрокаВалютыИсточника.КурсЧислитель * СтрокаВалютыНазначения.КурсЗнаменатель) / (СтрокаВалютыНазначения.КурсЧислитель * СтрокаВалютыИсточника.КурсЗнаменатель), 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	Имя - Строка - Имя нового поля
// 	ДополнительныеПараметры - Структура - состав:
// 	* СвязиПараметровВыбора - ФиксированныйМассив - Связи параметров выбора
// 	* ЦветФонаЗаголовка - Цвет - Цвет фона заголовка
// 	* ЦветФона - Рамка, Цвет, Шрифт, Неопределено - Цвет фона
// 	* ШиринаПоля - Число - Ширина поля
// 	* ОбработчикНачалоВыбора - Строка - Имя обработчика
// 	* ОбработчикПриИзменении - Строка - Имя обработчика
// 	* Заголовок - Строка - Заголовок
// Возвращаемое значение:
// 	  ПолеФормы - Созданное поле формы
Функция ДобавитьПолеФормы(Форма, Имя, ДополнительныеПараметры)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Заголовок",              Неопределено);
	СтруктураПараметров.Вставить("ОбработчикПриИзменении", "");
	СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "");
	СтруктураПараметров.Вставить("ШиринаПоля",             0);
	СтруктураПараметров.Вставить("ЦветФона",               Неопределено);
	СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      Неопределено);
	СтруктураПараметров.Вставить("Родитель",               Неопределено);
	СтруктураПараметров.Вставить("КартинкаШапки",          Неопределено);
	СтруктураПараметров.Вставить("ПутьКДанным",            Неопределено);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Ложь);
	СтруктураПараметров.Вставить("СвязиПараметровВыбора",  Неопределено);
	СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
	СтруктураПараметров.Вставить("Вид",                    ВидПоляФормы.ПолеВвода);
	СтруктураПараметров.Вставить("КартинкаЗначений",       Неопределено);
	СтруктураПараметров.Вставить("Подсказка",              "");
	СтруктураПараметров.Вставить("Видимость",              Истина);
	СтруктураПараметров.Вставить("ГоризонтальноеПоложение",ГоризонтальноеПоложениеЭлемента.Авто);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры);
	
	НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + Имя, Тип("ПолеФормы"), ?(СтруктураПараметров.Родитель = Неопределено, Форма.Элементы["ДеревоЦен"], СтруктураПараметров.Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(СтруктураПараметров.ПутьКДанным), СтруктураПараметров.ПутьКДанным, "ДеревоЦен." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(СтруктураПараметров.Заголовок), СтруктураПараметров.Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = СтруктураПараметров.Вид;
	НовоеПоле.ТолькоПросмотр      = СтруктураПараметров.ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = СтруктураПараметров.ШиринаПоля;
	НовоеПоле.ОтображатьВШапке    = СтруктураПараметров.ОтображатьВШапке;
	НовоеПоле.Подсказка           = СтруктураПараметров.Подсказка;
	НовоеПоле.Видимость           = СтруктураПараметров.Видимость;
	НовоеПоле.ГоризонтальноеПоложение = СтруктураПараметров.ГоризонтальноеПоложение;
	Если СтруктураПараметров.КартинкаЗначений <> Неопределено Тогда
		НовоеПоле.КартинкаЗначений    = СтруктураПараметров.КартинкаЗначений;
	КонецЕсли;
	
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	
	Если СтруктураПараметров.СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СтруктураПараметров.СвязиПараметровВыбора;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = СтруктураПараметров.ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = СтруктураПараметров.ЦветФона;
	КонецЕсли;
		
	Если СтруктураПараметров.КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = СтруктураПараметров.КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", СтруктураПараметров.ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", СтруктураПараметров.ОбработчикНачалоВыбора);
		НовоеПоле.КнопкаОчистки = истина;
		НовоеПоле.КнопкаВыбора 	= истина;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

Функция ДобавитьГруппуФормы(Форма,
	                        Имя,
	                        Заголовок,
	                        ОтображатьВШапке,
	                        КартинкаШапки,
	                        ГруппировкаКолонок,
	                        Родитель)
	
	НоваяГруппа                  = Форма.Элементы.Добавить("ДеревоЦен" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма.Элементы["ДеревоЦен"], Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле, ДобавлятьВгруппировку = Ложь) Экспорт
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
	Если ДобавлятьВгруппировку Тогда
		ПолеГруппировки               = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле          = Новый ПолеКомпоновкиДанных(Поле);
		ПолеГруппировки.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	СКД - СхемаКомпоновкиДанных - Изменяемая схема компоновки данных
// 	НаборДанныхНоменклатура - НаборДанныхОбъектСхемыКомпоновкиДанных - Набор данных
// 	РабочийНаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных - Набор данных
// 	Поле - Строка - Поле для выражения-источника и выражения-приемника
// 
Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле, ПолеРабочегоНабора = Неопределено)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = ?(ПолеРабочегоНабора = Неопределено, Поле, ПолеРабочегоНабора);
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

// Параметры:
// 	НаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных - Набор данных
// 	ИмяПоля - Строка - Имя поля
// 	ТипЗначения - Строка - Тип значения
// 
Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
КонецПроцедуры

Процедура ТаблицаСоответствия(Форма, КэшДанных, Переформировать = Ложь)
	
	Если Не Переформировать И ЗначениеЗаполнено(Форма.АдресХранилищаКэшаДанных) Тогда
		КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаКэшаДанных);
		Если Не КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьТаблицуНоменклатуры(Форма);
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("ИдентификаторСтроки");
	
	ВариантГруппировки = Форма.ВариантГруппировки;
	
	Если ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
		КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить(
			"ВидНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	КонецЕсли; 
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен;
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
		КонецЦикла;
		
	Иначе
		
		ДеревоЦенЭтоДанныеФормыДерево = (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"));
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Операция", "ДобавитьСтрокуВТаблицуСоответствия");
		ПараметрыВызова.Вставить("ДеревоЦенЭтоДанныеФормыДерево", ДеревоЦенЭтоДанныеФормыДерево);
		ПараметрыВызова.Вставить("ДобавлятьВсеСтроки", Истина);
		
		ПрименитьИзмененияВДереве(ПараметрыВызова, Форма.ДеревоЦен, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров,,КэшДанных);
	
		СохранитьТаблицуСоответвияНоменклатуры(Форма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		
	КонецЕсли;
	
	Если Форма.ИспользуетсяЦенообразование25 Тогда
		КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");	
	Иначе	
		КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");	
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьТаблицуСоответвияНоменклатуры(Форма, ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров)
	Форма.АдресХранилищаКэшаДанных = ПоместитьВоВременноеХранилище(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров, Форма.УникальныйИдентификатор);
КонецПроцедуры

Функция ЕстьИзмененияЦенВСтроке(СтрокаДереваЦен, ВыбранныеЦены, ПоИзменениямЗаДень = Ложь)
	
	ЦеныИзменены = Ложь;
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если ПоИзменениямЗаДень Тогда
			Если (СтрокаДереваЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] <> 0
				И СтрокаДереваЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0)
				Или (СтрокаДереваЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
				И СтрокаДереваЦен[ВидЦены.ИмяКолонки] <> 0) Тогда
				ЦеныИзменены = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если (СтрокаДереваЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки]
				Или СтрокаДереваЦен["ИзмененаАвтоматически" + ВидЦены.ИмяКолонки]) Тогда
				ЦеныИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЦеныИзменены;
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Функция ЭтоРегистрацияЦенПоставщика(Форма, КэшДанных = Неопределено)
	
	ЭтоРегистрацияЦенПоставщика = Ложь;
	
	Если КэшДанных = Неопределено Тогда
		ЭтоРегистрацияЦенПоставщика = (ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
			Или ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма)
			Или ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма));
	Иначе
		Если КэшДанных.ЭтоРегистрацияЦенПоставщика = Неопределено Тогда
			
			КэшДанных.ЭтоРегистрацияЦенПоставщика = (ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
				Или ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма)
				Или ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма)
			);
				
		КонецЕсли;
		ЭтоРегистрацияЦенПоставщика = КэшДанных.ЭтоРегистрацияЦенПоставщика;
	КонецЕсли;
	
	Возврат ЭтоРегистрацияЦенПоставщика;
		
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Функция ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
	
	Возврат (Форма.КодФормы = "РегистрацияЦенНоменклатурыПоставщика");
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Функция ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма)
	
	Возврат (Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов");
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Функция ЭтоУстановкаЦенНоменклатуры(Форма)
	
	Возврат (Форма.КодФормы = "УстановкаЦенНоменклатуры");
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Функция ИспользоватьТаблицуЗначенийВместоДереваЗначений(Форма)
	
	Возврат (Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов"
		Или ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма)
	);
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Функция ПоследниеУпаковкиЦен(Форма, Номенклатура, Характеристика, ВидыЦен)
	
	Запрос = Новый Запрос;
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены,
		|	ЦеныНоменклатуры.Упаковка          КАК Упаковка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|		&Дата, Номенклатура = &Номенклатура
		|			И Характеристика = &Характеристика И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦены  КАК ВидЦены,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|		&Дата, Номенклатура = &Номенклатура
		|			И Характеристика = &Характеристика И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен",        ВидыЦен);
	Запрос.УстановитьПараметр("Дата",           ТекущаяДатаСеанса());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	ИдентификаторСтроки - Число
// 	РассчитатьЦены - Булево - Истина - рассчитывать цены по идентификатору строки
// 
Процедура ДеревоЦенХарактеристикаПриИзменении(Форма, ИдентификаторСтроки, РассчитатьЦены = Истина) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	
	ТекущаяСтрока = Форма.ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			
			ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
			ТаблицаУпаковок = ПоследниеУпаковкиЦен(Форма, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ВидыЦен);
			
			Для Каждого ТекСтрока Из ТаблицаУпаковок Цикл
				ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонкиПоВидуЦены(ТекСтрока.ВидЦены, КэшДанных);
				Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
					ТекущаяСтрока[ИмяКолонкиУпаковка] = ТекСтрока.Упаковка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = СоздатьТаблицуТовары(ЭтоРегистрацияЦенПоставщика(Форма));
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана
			Или СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Если ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(Форма, ТаблицаЗначений, КэшДанных);
	
	Если Не ЭтоРегистрацияЦенПоставщика(Форма) И РассчитатьЦены Тогда
		РассчитатьЦеныПоИдентификаторуСтроки(Форма, ИдентификаторСтроки, Истина,,КэшДанных);
	КонецЕсли;
	
КонецПроцедуры

// Получает все характеристики номенклатуры
//
// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 	ТекущаяСтрока - СтрокаТаблицыЗначений - содержит в том числе:
// 		* Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить характеристики.
// 	СкопироватьЦеныИзТекущейСтроки - Булево - Истина - цены будут скопированы из переданной строки
//
Процедура ЗаполнитьХарактеристикиНоменклатуры(Форма, ТекущаяСтрока, СкопироватьЦеныИзТекущейСтроки = Ложь) Экспорт
	
	КэшДанных = ИнициализироватьСтруктуруКэшаДанных();
	ЭтоРегистрацияЦенПоставщика = ЭтоРегистрацияЦенПоставщика(Форма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка";
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры И НЕ ЭтоРегистрацияЦенПоставщика Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, Номенклатура = &Номенклатура И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
		
	КонецЕсли;
	
	Если ЭтоРегистрацияЦенПоставщика Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатурыПоставщиков.Характеристика            КАК Характеристика,
			|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика         КАК ВидЦены,
			|	ЦеныНоменклатурыПоставщиков.Упаковка                  КАК Упаковка,
			|	ЦеныНоменклатурыПоставщиков.Цена                      КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаДокумента, Номенклатура = &Номенклатура И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатурыПоставщиков
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	УсловияЗакупок.Характеристика            КАК Характеристика,
			|	УсловияЗакупок.ВидЦеныПоставщика         КАК ВидЦены,
			|	УсловияЗакупок.УпаковкаЗаказа            КАК УпаковкаЗаказа,
			|	УсловияЗакупок.МинимальнаяПартияПоставки КАК МинимальнаяПартияПоставки
			|ИЗ
			|	РегистрСведений.УсловияЗакупок.СрезПоследних(&ДатаДокумента, Номенклатура = &Номенклатура И ВидЦеныПоставщика В (&ВидыЦен)) КАК УсловияЗакупок
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма));
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры(Форма));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры и НЕ ЭтоРегистрацияЦенПоставщика Тогда
		Упаковки = МассивРезультатов[1].Выгрузить(); // ТаблицаЗначений
		Упаковки.Индексы.Добавить("Характеристика");
	КонецЕсли;
	
	Если ЭтоРегистрацияЦенПоставщика Тогда
		ЦеныИУпаковкиПоставщиков = МассивРезультатов[1].Выгрузить();
		ЦеныИУпаковкиПоставщиков.Индексы.Добавить("Характеристика");
		
		УсловияЗакупок = МассивРезультатов[2].Выгрузить();
		УсловияЗакупок.Индексы.Добавить("Характеристика");
	КонецЕсли;
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
	
	ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
	ЭлементыХарактеристики.Очистить();
	ВыборкаХарактеристики = МассивРезультатов[0].Выбрать();
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
		УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры и НЕ ЭтоРегистрацияЦенПоставщика Тогда
			
			ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
			
			НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
				ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоРегистрацияЦенПоставщика Тогда
			
				ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
				
				НайденныеСтроки = ЦеныИУпаковкиПоставщиков.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковкииЦены Из НайденныеСтроки Цикл
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковкииЦены.ВидЦены, КэшДанных)] = ВыборкаУпаковкииЦены.Упаковка;
					КонецЕсли;
					ЭлементХарактеристика["СтараяЦена" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковкииЦены.ВидЦены, КэшДанных)] = ВыборкаУпаковкииЦены.Цена;
				КонецЦикла;
				
				ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
				
				НайденныеСтроки = УсловияЗакупок.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУсловияЗакупок Из НайденныеСтроки Цикл
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						ЭлементХарактеристика["УпаковкаЗаказа" + ИмяКолонкиПоВидуЦены(ВыборкаУсловияЗакупок.ВидЦены, КэшДанных)] = ВыборкаУсловияЗакупок.УпаковкаЗаказа;
					КонецЕсли;
					ЭлементХарактеристика["МинимальнаяПартияПоставки" + ИмяКолонкиПоВидуЦены(ВыборкаУсловияЗакупок.ВидЦены, КэшДанных)] = ВыборкаУсловияЗакупок.МинимальнаяПартияПоставки;
				КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкопироватьЦеныИзТекущейСтроки Тогда
		
		ТаблицаУпаковокНоменклатуры = СоздатьТаблицуУпаковокНоменклатуры();
		ТаблицаКоэффициентовУпаковокНоменклатуры = Неопределено;
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
			
			Для Каждого ВидЦены Из ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены, КэшДанных);
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ТекущаяСтрока.Номенклатура, ТекущаяСтрока["Упаковка" + ИмяКолонки]);
				
				Если ЗначениеЗаполнено(ТекущаяСтрока["Упаковка" + ИмяКолонки]) И ТаблицаУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
					НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
					НоваяСтрока.Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
					НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
				КонецЕсли;
				
				ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
					
					ПараметрыПоиска = Новый Структура("Номенклатура, Упаковка", ЭлементХарактеристика.Номенклатура, Упаковка);
					
					Если ЗначениеЗаполнено(Упаковка) И ТаблицаУпаковокНоменклатуры.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
						НоваяСтрока = ТаблицаУпаковокНоменклатуры.Добавить();
						НоваяСтрока.Упаковка = Упаковка;
						НоваяСтрока.Номенклатура = ЭлементХарактеристика.Номенклатура;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ТаблицаУпаковокНоменклатуры.Количество() > 0 Тогда
				ТаблицаКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены, КэшДанных);
			
			Если ТекущаяСтрока["ИзмененаВручную" + ИмяКолонки] Тогда
				
				Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
					
					// Определим коэффициент упаковки текущей цены
					КоэффициентУпаковкиЦеныИсточника = 1;
					Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
						Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И ТаблицаКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
							РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(ТаблицаКоэффициентовУпаковокНоменклатуры, 
																					ТекущаяСтрока.Номенклатура, 
																					Упаковка);
							Если ЗначениеЗаполнено(РезультатПоиска) Тогда
								КоэффициентУпаковкиЦеныИсточника = РезультатПоиска;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					
					Если Не Форма.ИспользоватьУпаковкиНоменклатуры
						Или ТекущаяСтрока["Упаковка" + ИмяКолонки] = ЭлементХарактеристика["Упаковка" + ИмяКолонки] Тогда
						ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
					Иначе
						
						// Определим коэффициент упаковки влияющей цены
						КоэффициентУпаковкиЦеныНазначения = 1;
						
						Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И ТаблицаКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
							РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(ТаблицаКоэффициентовУпаковокНоменклатуры, 
																					ЭлементХарактеристика.Номенклатура, 
																					Упаковка);
							Если ЗначениеЗаполнено(РезультатПоиска) Тогда
								КоэффициентУпаковкиЦеныНазначения = РезультатПоиска;
							КонецЕсли;
						КонецЕсли;
						
						Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки] / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Отображение строки отбора в формах Цены номенклатуры (прайс-лист) и Цены поставщиков.
// 
// Параметры:
// 	Форма - см. ПостроитьДеревоЦен.Форма
// 
Процедура НастроитьЗаголовокОтбора(Форма) Экспорт
	
	Если Форма.КомпоновщикНастроекОтбор.Настройки.Отбор.Элементы.Количество() > 0
		И СтрДлина(СокрЛП(Строка(Форма.КомпоновщикНастроекОтбор.Настройки.Отбор))) > 0 Тогда
		Форма.ГиперссылкаУстановленОтбор = НСтр("ru = 'Установлен отбор:'")
		                           + " " + Строка(Форма.КомпоновщикНастроекОтбор.Настройки.Отбор);
		Форма.Элементы.ГиперссылкаУстановленОтбор.Видимость = Истина;
	Иначе
		Форма.ГиперссылкаУстановленОтбор = "";
		Форма.Элементы.ГиперссылкаУстановленОтбор.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Создать таблицу упаковок номенклатуры
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//  * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//  * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка
//
Функция СоздатьТаблицуУпаковокНоменклатуры() 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Упаковка", 		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Возврат Таблица;
	
КонецФункции

// Функция - Таблица  упаковок номенклатуры по массиву коллекций
//
// Параметры:
//  Массив - Массив - массив структур с ключами Номенклатура и Упаковка.
// 
// Возвращаемое значение:
//  см. СоздатьТаблицуУпаковокНоменклатуры
//
Функция ТаблицаУпаковокНоменклатурыПоМассивуКоллекций(Массив) Экспорт 
	
	Таблица = СоздатьТаблицуУпаковокНоменклатуры();	
	
	Для Каждого Структура Из Массив Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Функция - Новая таблица формул для расчета
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//  * СтрокаТаблицыЦен - СтрокаДереваЗначений - Строка номенклатуры
//  * ВидЦены - СтрокаТаблицыЗначений - Строка вида цены
//  * Формула - Строка - Текст формулы
//  * ПредставлениеФормулы - Строка - Представление формулы
//  * ПорогСрабатывания - Число - Порог срабатывания
//  * ПорогСрабатыванияПриУменьшении - Число - Порог срабатывания при уменьшении
//
Функция НоваяТаблицаФормулДляРасчета()

	ФормулыДляРасчета = Новый ТаблицаЗначений;
	ФормулыДляРасчета.Колонки.Добавить("СтрокаТаблицыЦен");
	ФормулыДляРасчета.Колонки.Добавить("ВидЦены");
	ФормулыДляРасчета.Колонки.Добавить("Формула", Новый ОписаниеТипов("Строка"));
	ФормулыДляРасчета.Колонки.Добавить("ПредставлениеФормулы", Новый ОписаниеТипов("Строка"));
	ФормулыДляРасчета.Колонки.Добавить("ПредставлениеФормулыПоУмолчанию", Новый ОписаниеТипов("Строка"));
	ФормулыДляРасчета.Колонки.Добавить("ПорогСрабатывания", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ФормулыДляРасчета.Колонки.Добавить("ПорогСрабатыванияПриУменьшении", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Любой)));

	Возврат ФормулыДляРасчета;

КонецФункции

// Параметры:
// 	МассивСтруктурУпаковокНоменклатуры - см. ТаблицаУпаковокНоменклатурыПоМассивуКоллекций.Массив
// 	
// Возвращаемое значение:
// 	см. КоэффициентыУпаковокНоменклатуры
// 
Функция СоответствиеКоэффициентовКоллекцииУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры) Экспорт 
	
	ТаблицаУпаковокНоменклатуры = ТаблицаУпаковокНоменклатурыПоМассивуКоллекций(МассивСтруктурУпаковокНоменклатуры); 
	Возврат КоэффициентыУпаковокНоменклатуры(ТаблицаУпаковокНоменклатуры);
	
КонецФункции

// Функция - Получить массив установленных ранее видов цен по номенклатуре
//
// Параметры:
//  Параметры	 - Структура - параметры для установки в запрос
// 
// Возвращаемое значение:
//  Массив - с перечислением видов цен по которым установлены цены
//
Функция ПолучитьМассивУстановленныхРанееВидовЦенПоНоменклатуре(Параметры) Экспорт 
	
	МассивВидовЦен = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Цена > 0";
	
	Если Параметры.ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ЦеныНоменклатуры", "РегистрСведений.ЦеныНоменклатуры25");
	КонецЕсли;

	Запрос.УстановитьПараметр("Дата", 		  Параметры.Дата);
	Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда		
	 	МассивВидовЦен = Результат.Выгрузить().ВыгрузитьКолонку("ВидЦены");	
	КонецЕсли; 
	                                                    	
	Возврат МассивВидовЦен;
	
КонецФункции

Функция ЕстьКолонка(СтрокаЦен, ИмяКолонки)
	
	ЕстьКолонка = Ложь;
	
	Если ТипЗнч(СтрокаЦен) = Тип("СтрокаДереваЗначений") Тогда
		ЕстьКолонка = (СтрокаЦен.Владелец().Колонки.найти(ИмяКолонки) <> Неопределено);
	Иначе
		ЕстьКолонка = СтрокаЦен.Свойство(ИмяКолонки);
	КонецЕсли;
	
	Возврат ЕстьКолонка;
КонецФункции

// Возвращает таблицу с данными по номенклатуре, запрещенной к редактированию (по виду цен)  
//
// Параметры:
//  ДополонительныеНастройки - Структура - дополнительные параметры (может быть структурой формы).
//  ТаблицаНоменклатуры - ТаблицаЗначений - данные по номенклатуре.
//  СтрокаВидЦены - ДанныеФормыЭлементКоллекции - Строка таблицы "Виды цен"
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - настройки компоновок данных
//
Функция ПолучитьТаблицуЗапрещеннойКРедактированиюНоменклатуры(
										 ДополонительныеНастройки,
										 ТаблицаНоменклатуры,
										 СтрокаВидЦены,
										 НастройкиКомпоновкиДанных = Неопределено)
	
	ДанныеОтчета = Неопределено;

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.ЗапретитьРедактированиеЦеныЗаПределамиОтбора Тогда
			
			// Копирование схемы компоновки данных
			ПараметрыМакета = Справочники.ВидыЦен.ИнициализироватьСтруктуруПарметровДляПолученияОписанияСхемКомпоновкиПоИмени();
			ПараметрыМакета.Ссылка 							= СтрокаВидЦены.Ссылка;
			ПараметрыМакета.ИмяМакета 						= "Типовой";
			ПараметрыМакета.ИспользуетсяЦенообразование25 	= Ложь;
			
			СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ПараметрыМакета, Истина);
			СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных; 
			НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре;

			Если НастройкиКомпоновкиДанных = Неопределено Тогда
				Возврат ДанныеОтчета;
			КонецЕсли;
			
			// Заполнение набора данных ТаблицаНоменклатуры
			РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
			
			ТекстЗапроса = РабочийНаборДанных.Запрос;
				
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)",
				""
			);
				
			РабочийНаборДанных.Запрос = ТекстЗапроса;
			
			НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
			
			ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "НоменклатураОгр", "СправочникСсылка.Номенклатура");
			Если ДополонительныеНастройки.ИспользоватьХарактеристикиНоменклатуры Тогда
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ХарактеристикаОгр", "СправочникСсылка.ХарактеристикиНоменклатуры");
			КонецЕсли;
			
			СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
			ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "НоменклатураОгр", "Номенклатура");
			
			Если ДополонительныеНастройки.ИспользоватьХарактеристикиНоменклатуры Тогда
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "ХарактеристикаОгр", "Характеристика");
			КонецЕсли;
			
			// Подготовка компоновщика макета компоновки данных, загрузка настроек
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			// добавим группировку "НЕ", т.к. нам необходимо отобрать не входящие в отбор
			ИнвертироватьОтбор(НастройкиКомпоновкиДанных, КомпоновщикНастроек);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			
			// Заполнение структуры отчета и выбранных полей.
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			
			ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаДетальныеЗаписи.Использование = Истина;
			
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
			
			Если ДополонительныеНастройки.ИспользоватьХарактеристикиНоменклатуры Тогда
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
			КонецЕсли;
			
			ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;

			Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = СтрокаВидЦены.Ссылка;
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			
			// Компоновка макета и исполнение запроса.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
			
			ВнешниеНаборыДанных = Новый Структура;
			ТаблицаНоменклатурыСвернутая = ТаблицаНоменклатуры.Скопировать(, "Номенклатура, Характеристика");
			ТаблицаНоменклатурыСвернутая.Свернуть("Номенклатура, Характеристика");
			ТаблицаНоменклатурыСвернутая.Колонки.Номенклатура.Имя = "НоменклатураОгр";
			ТаблицаНоменклатурыСвернутая.Колонки.Характеристика.Имя = "ХарактеристикаОгр";
			ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатурыСвернутая);
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

			ДанныеОтчета = Новый ТаблицаЗначений();
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеОтчета;
КонецФункции

// Возвращает таблицу с данными по номенклатуре, запрещенной к редактированию (по виду цен)  
//
// Параметры:
//  ДополонительныеНастройки - Структура - дополнительные параметры (может быть структурой формы).
//  ТаблицаНоменклатуры - ТаблицаЗначений - данные по номенклатуре.
//  СтрокаВидЦены - ДанныеФормыЭлементКоллекции - Строка таблицы "виды цен"
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - настройки компоновок данных
//
Функция ПолучитьТаблицуЗапрещеннойКРедактированиюНоменклатуры2_5(
										 ДополонительныеНастройки,
	                                     ТаблицаНоменклатуры,
	                                     СтрокаВидЦены,
	                                     НастройкиКомпоновкиДанных = Неопределено
										)
	
	ДанныеОтчета = Неопределено;

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.ЗапретитьРедактированиеЦеныЗаПределамиОтбора Тогда
			
			// Копирование схемы компоновки данных
			ПараметрыМакета = Справочники.ВидыЦен.ИнициализироватьСтруктуруПарметровДляПолученияОписанияСхемКомпоновкиПоИмени();
			ПараметрыМакета.Ссылка 							= СтрокаВидЦены.Ссылка;
			ПараметрыМакета.ИмяМакета 						= "Типовой2_5";
			ПараметрыМакета.ИспользуетсяЦенообразование25 	= Истина;
			
			СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(ПараметрыМакета, Истина);
			СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных; 
			НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанныхОтбораПоНоменклатуре;

			Если НастройкиКомпоновкиДанных = Неопределено Тогда
				Возврат ДанныеОтчета;
			КонецЕсли;
			
			// Заполнение набора данных ТаблицаНоменклатуры
			РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
			
			ТекстЗапроса = РабочийНаборДанных.Запрос;
				
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, 
				"И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)",
				""
			);
				
			РабочийНаборДанных.Запрос = ТекстЗапроса;
			
			НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
			НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
			
			ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "НоменклатураОгр", "СправочникСсылка.Номенклатура");
			Если ДополонительныеНастройки.ИспользоватьХарактеристикиНоменклатуры Тогда
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ХарактеристикаЦООгр", "СправочникСсылка.ХарактеристикиНоменклатурыДляЦенообразования");
			КонецЕсли;
			
			СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
			ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "НоменклатураОгр", "Номенклатура");
			
			Если ДополонительныеНастройки.ИспользоватьХарактеристикиНоменклатуры Тогда
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "ХарактеристикаЦООгр", "ХарактеристикаЦО");
			КонецЕсли;
			
			// Подготовка компоновщика макета компоновки данных, загрузка настроек
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			 // добавим группировку "НЕ", т.к. нам необходимо отобрать не входящие в отбор
			ИнвертироватьОтбор(НастройкиКомпоновкиДанных, КомпоновщикНастроек);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			
			// Заполнение структуры отчета и выбранных полей.
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			
			ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаДетальныеЗаписи.Использование = Истина;
			
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
			
			Если ДополонительныеНастройки.ИспользоватьХарактеристикиНоменклатуры Тогда
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ХарактеристикаЦО");
			КонецЕсли;
			
			ПараметрыКомпоновки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
			Параметр = ПараметрыКомпоновки.Найти("ВидЦены");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = СтрокаВидЦены.Ссылка;
				Параметр.Использование = ЗначениеЗаполнено(Параметр.Значение);
			КонецЕсли;
			
			// Компоновка макета и исполнение запроса.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
			
			ВнешниеНаборыДанных = Новый Структура;
			ТаблицаНоменклатурыСвернутая = ТаблицаНоменклатуры.Скопировать(, "Номенклатура, ХарактеристикаЦО");
			ТаблицаНоменклатурыСвернутая.Свернуть("Номенклатура, ХарактеристикаЦО");
			ТаблицаНоменклатурыСвернутая.Колонки.Номенклатура.Имя = "НоменклатураОгр";
			ТаблицаНоменклатурыСвернутая.Колонки.ХарактеристикаЦО.Имя = "ХарактеристикаЦООгр";
			ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатурыСвернутая);
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

			ДанныеОтчета = Новый ТаблицаЗначений();
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеОтчета;
КонецФункции

// Инвертировать отбор.
// 
// Параметры:
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных -  Настройки компоновки данных
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных -  Компоновщик настроек
Процедура ИнвертироватьОтбор(НастройкиКомпоновкиДанных, КомпоновщикНастроек)

	ВидыСравнения = Неопределено;

	НеобходимаПолнаяОбработка = Истина;
	ГруппаЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор;
	// если есть отбор по сегментам, то инвертируем только их, т.к. в этом случае отборы по товарам работают тоже в сегментах
	ЭлементыОтбораПоСегментам = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ГруппаЭлементовОтбора, "СегментНоменклатуры");
	Если ЭлементыОтбораПоСегментам.Количество() Тогда
		Для Каждого ЭлементОтбора Из ЭлементыОтбораПоСегментам Цикл
			Если ЭлементОтбора.Использование Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияИнвертировать(ЭлементОтбора.ВидСравнения, ВидыСравнения);
				НеобходимаПолнаяОбработка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НеобходимаПолнаяОбработка Тогда
		Если НастройкиКомпоновкиДанных.Отбор.Элементы.Количество() > 1 Тогда
			КомпоновкаДанныхКлиентСервер.УдалитьОтбор(КомпоновщикНастроек);
			ГруппаЭлементовОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(КомпоновщикНастроек.Настройки.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ГруппаЭлементовОтбора, НастройкиКомпоновкиДанных.Отбор);
		КонецЕсли;
		ИнвертироватьЭлементыОтбора(ГруппаЭлементовОтбора, ВидыСравнения);
	КонецЕсли;
КонецПроцедуры

Процедура ИнвертироватьЭлементыОтбора(ГруппаЭлементовОтбора, ВидыСравнения)
	Для Каждого ЭлементОтбора Из ГруппаЭлементовОтбора.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ 
				Или ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ИнвертироватьЭлементыОтбора(ЭлементОтбора, ВидыСравнения);
			ИначеЕсли ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ИнвертироватьЭлементыОтбора(ЭлементОтбора, ВидыСравнения);
			КонецЕсли;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияИнвертировать(ЭлементОтбора.ВидСравнения, ВидыСравнения);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВидСравненияИнвертировать(ВидСравнения, ВидыСравнения = Неопределено)
	
	Если ВидыСравнения = Неопределено Тогда
		ВидыСравнения = Новый Соответствие();
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.НеВИерархии);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСписке,ВидСравненияКомпоновкиДанных.НеВСписке);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.Заполнено,ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НачинаетсяС,ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.Подобно,ВидСравненияКомпоновкиДанных.НеПодобно);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.Равно,ВидСравненияКомпоновкиДанных.НеРавно);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.Содержит,ВидСравненияКомпоновкиДанных.НеСодержит);
	
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВИерархии, ВидСравненияКомпоновкиДанных.ВИерархии);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке,ВидСравненияКомпоновкиДанных.ВСписке);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии,ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеЗаполнено,ВидСравненияКомпоновкиДанных.Заполнено);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС,ВидСравненияКомпоновкиДанных.НачинаетсяС);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеПодобно,ВидСравненияКомпоновкиДанных.Подобно);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеРавно,ВидСравненияКомпоновкиДанных.Равно);
		ВидыСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеСодержит,ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	
	ВидСравненияНайденный = ВидыСравнения.Получить(ВидСравнения);

	Если ВидСравненияНайденный = Неопределено Тогда
		ВидСравненияНайденный = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Возврат ВидСравненияНайденный;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляТрансформации()
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка) КАК ХарактеристикаЦО
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И
	|		Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры,
	|	Номенклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры,
	|	Номенклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры,
	|	Номенклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА
	|			Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО Номенклатура.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходныеДанныеПоследнийЗапрос.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ИсходныеДанныеПоследнийЗапрос.Номенклатура КАК Номенклатура,
	|	ИсходныеДанныеПоследнийЗапрос.Характеристика КАК Характеристика,
	|	ИсходныеДанныеПоследнийЗапрос.ХарактеристикаЦО КАК ХарактеристикаЦО
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанныеПоследнийЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанныеПоследнийЗапрос.ВидНоменклатуры,
	|	ИсходныеДанныеПоследнийЗапрос.Номенклатура,
	|	ИсходныеДанныеПоследнийЗапрос.Характеристика,
	|	ИсходныеДанныеПоследнийЗапрос.ХарактеристикаЦО";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПрименитьИзмененияВДереве(Знач Параметры, ЭлементДереваЦенИсточник, Таблица, СтрокиОбработаны = Ложь, КэшДанных = Неопределено)

	Если Параметры.ДеревоЦенЭтоДанныеФормыДерево Тогда
		ЭлементыДереваЦенТекущие = ЭлементДереваЦенИсточник.ПолучитьЭлементы();
	Иначе
		ЭлементыДереваЦенТекущие = ЭлементДереваЦенИсточник.Строки;
	КонецЕсли;
	
	УровнемНижеОбработалиСтроки = Ложь;
	Для Каждого ЭлементДереваЦенТекущий Из ЭлементыДереваЦенТекущие Цикл
		
		ПрименитьИзмененияВДереве(Параметры, ЭлементДереваЦенТекущий, Таблица, УровнемНижеОбработалиСтроки, КэшДанных);
		
	КонецЦикла;
	
	Если ТипЗнч(ЭлементДереваЦенИсточник) = Тип("СтрокаДереваЗначений") 
		Или ТипЗнч(ЭлементДереваЦенИсточник) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПрименитьИзмененияВДеревеОбработкаОперации(Параметры, ЭлементДереваЦенИсточник, Таблица, УровнемНижеОбработалиСтроки, КэшДанных);
		
		СтрокиОбработаны = УровнемНижеОбработалиСтроки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьИзмененияВДеревеОбработкаОперации(Знач Параметры, ЭлементДереваЦенИсточник, Таблица, СтрокиОбработаны = Ложь, КэшДанных = Неопределено)
	Если Параметры.ДобавлятьВсеСтроки Или Не СтрокиОбработаны Тогда
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДереваЦенИсточник);
		Если Параметры.Операция = "ДобавитьСтрокуВТаблицуНоменклатуры" Тогда
			Если Параметры.ИспользуетсяЦенообразование25 Тогда
				НоваяСтрока.УпаковкаЦОДляСвязи = ?(ЭлементДереваЦенИсточник.УпаковкаЦО = ЭлементДереваЦенИсточник.ЕдиницаИзмерения, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), ЭлементДереваЦенИсточник.УпаковкаЦО);
				НоваяСтрока.СерияЦОДляСвязи    = ?(ЭлементДереваЦенИсточник.СерияЦО.Предопределенный, Справочники.СерииНоменклатурыДляЦенообразования.ПустаяСсылка(), ЭлементДереваЦенИсточник.СерияЦО);
			КонецЕсли;
		ИначеЕсли Параметры.Операция = "ДобавитьСтрокуВТаблицуСоответствия" Тогда
			НоваяСтрока.СтрокаДереваЦен = ЭлементДереваЦенИсточник;
			Если Параметры.ДеревоЦенЭтоДанныеФормыДерево Тогда 
				НоваяСтрока.ИдентификаторСтроки = ЭлементДереваЦенИсточник.ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Параметры.Операция = "ИзменитьЦены" Тогда
			Для Каждого ВидЦен Из Параметры.ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦен.ВидЦены, КэшДанных);
				
				Если ВидЦен.Свойство("ВалютаЦены") И ЭлементДереваЦенИсточник["Валюта" + ИмяКолонки] <> ВидЦен.ВалютаЦены Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементДереваЦенИсточник["ЗапретРедактирования" + ИмяКолонки] Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВидЦен.Свойство("Цена") Тогда
					НоваяЦена = ВидЦен.Цена;
				ИначеЕсли ВидЦен.Свойство("СуммаИзменения") Тогда
					Если Параметры.ИзменятьПоОтношениюКСтаройЦене Тогда
						НоваяЦена = ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки] + ВидЦен.СуммаИзменения;
					Иначе
						НоваяЦена = ЭлементДереваЦенИсточник[ИмяКолонки] + ВидЦен.СуммаИзменения;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				
				ЭлементДереваЦенИсточник[ИмяКолонки] = НоваяЦена; 
				
				Если ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					ПроцентИзменения = Окр(100 * (НоваяЦена - ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки]) 
										/ ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки], 10, 2);
				Иначе
					ПроцентИзменения = 0;
				КонецЕсли;
					
				ЭлементДереваЦенИсточник["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				ЭлементДереваЦенИсточник["СуммаИзменения"   + ИмяКолонки] = 
							ЭлементДереваЦенИсточник[ИмяКолонки] - ЭлементДереваЦенИсточник["СтараяЦена"+ИмяКолонки];
				
				ЭлементДереваЦенИсточник["ИзмененаВручную" + ИмяКолонки] = 
					(ЭлементДереваЦенИсточник[ИмяКолонки] - ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки] <> 0);
				ЭлементДереваЦенИсточник["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
			КонецЦикла;
		ИначеЕсли Параметры.Операция = "ИзменитьЦеныНаПроцент" Тогда
			Для Каждого ВидЦен Из Параметры.ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦен.ВидЦены, КэшДанных);
				
				Если ЭлементДереваЦенИсточник["ЗапретРедактирования" + ИмяКолонки] Тогда
					Продолжить;
				КонецЕсли;
					
				Если ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					
					Если Параметры.ИзменятьПоОтношениюКСтаройЦене Тогда
						ЭлементДереваЦенИсточник["ПроцентИзменения" + ИмяКолонки] = ВидЦен.ПроцентИзменения;
						ЭлементДереваЦенИсточник[ИмяКолонки] = Окр(ЭлементДереваЦенИсточник["СтараяЦена"+ИмяКолонки]
												*((ЭлементДереваЦенИсточник["ПроцентИзменения"+ИмяКолонки]/100)+1), 2);
						ЭлементДереваЦенИсточник["СуммаИзменения"   + ИмяКолонки] = 
							ЭлементДереваЦенИсточник[ИмяКолонки] - ЭлементДереваЦенИсточник["СтараяЦена"+ИмяКолонки];
					Иначе
						ЭлементДереваЦенИсточник[ИмяКолонки] = 
										Окр(ЭлементДереваЦенИсточник[ИмяКолонки]*((ВидЦен.ПроцентИзменения/100)+1), 2);
						ЭлементДереваЦенИсточник["ПроцентИзменения" + ИмяКолонки] = (ЭлементДереваЦенИсточник[ИмяКолонки] 
													/ ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки] - 1) * 100; 
						ЭлементДереваЦенИсточник["СуммаИзменения"   + ИмяКолонки] = 
							ЭлементДереваЦенИсточник[ИмяКолонки] - ЭлементДереваЦенИсточник["СтараяЦена"+ИмяКолонки];
					КонецЕсли;
					
				Иначе
					
					ЭлементДереваЦенИсточник["ПроцентИзменения" + ИмяКолонки] = 0;
					ЭлементДереваЦенИсточник["СуммаИзменения" + ИмяКолонки] = 0;
					Если Параметры.ИзменятьПоОтношениюКСтаройЦене Тогда
						ЭлементДереваЦенИсточник[ИмяКолонки] = 0;
					Иначе
						ЭлементДереваЦенИсточник[ИмяКолонки] = 
										Окр(ЭлементДереваЦенИсточник[ИмяКолонки]*((ВидЦен.ПроцентИзменения/100)+1), 2);
					КонецЕсли;
					
				КонецЕсли;
				
				ЭлементДереваЦенИсточник["ИзмененаВручную" + ИмяКолонки] = 
					(ЭлементДереваЦенИсточник[ИмяКолонки] - ЭлементДереваЦенИсточник["СтараяЦена" + ИмяКолонки] <> 0);
				ЭлементДереваЦенИсточник["ИзмененаАвтоматически" + ИмяКолонки] = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		СтрокиОбработаны = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТабличнуюЧасть(Знач ДеревоЦенЭтоДанныеФормыДерево, Знач Уровень, ЭлементДереваЦенИсточник, Параметры, ДобавилиСтроки = Ложь)
	
	Если ДеревоЦенЭтоДанныеФормыДерево Тогда
		ЭлементыДереваЦенТекущие = ЭлементДереваЦенИсточник.ПолучитьЭлементы();
	Иначе
		ЭлементыДереваЦенТекущие = ЭлементДереваЦенИсточник.Строки;
	КонецЕсли;
	
	Для Каждого ЭлементДереваЦенТекущий Из ЭлементыДереваЦенТекущие Цикл
		УровнемНижеДобавилиСтроки = Ложь;
		
		ДобавитьСтрокуВТабличнуюЧасть(ДеревоЦенЭтоДанныеФормыДерево, (Уровень + 1), ЭлементДереваЦенТекущий, Параметры, УровнемНижеДобавилиСтроки);
		
		Если Не УровнемНижеДобавилиСтроки Тогда
			Если Параметры.ТолькоИзмененные Тогда
				ЦеныИзменены = ЕстьИзмененияЦенВСтроке(ЭлементДереваЦенТекущий, Параметры.ВидыЦен);
				Если ЦеныИзменены Тогда
					КонтрольКоличестваСтрок(Параметры);
					ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ЭлементДереваЦенТекущий);
				КонецЕсли;
			Иначе
				КонтрольКоличестваСтрок(Параметры);
				ПоместитьСтрокуЦенВТабличнуюЧасть(Параметры, ЭлементДереваЦенТекущий);
			КонецЕсли;
			
			ДобавилиСтроки = Истина;
		иначе
			ДобавилиСтроки = УровнемНижеДобавилиСтроки;
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаТовары - ТаблицаЗначений - Таблица с добавляемыми товарами.
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристики с добавленной строкой дерева цен.
//
Функция ДобавитьТоварыПредприятия(Форма, Знач ТаблицаТовары, КэшДанных)
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	ВариантГруппировки = Форма.ВариантГруппировки;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Индекс КАК Индекс,
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаНоменклатура.Номенклатура.Наименование КАК Наименование,
	|	&ПолеСвязиИерархии,
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатура.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс
	|ИТОГИ ПО
	|	Номенклатура";
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	ИерархическоеДерево = Истина;
	Если ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		
		ПолеСвязиИерархии = "ТаблицаНоменклатура.Номенклатура.Родитель КАК Родитель,";
		ЗапросИерархии = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатура.Номенклатура.Родитель КАК Номенклатура,
		|	ТаблицаНоменклатура.Номенклатура.Родитель.Наименование КАК Наименование,
		|	ТаблицаНоменклатура.Номенклатура.Родитель.ЭтоГруппа КАК ИерархияЭтоГруппа,
		|	ТаблицаНоменклатура.Номенклатура.Родитель.ЭтоГруппа КАК ЭтоИерархия
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.Номенклатура.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ ПО
		|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
		
		ПолеСвязиИерархии = "";
		ЗапросИерархии = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.Наименование КАК Наименование,
		|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.ЭтоГруппа КАК ИерархияЭтоГруппа,
		|	ИСТИНА КАК ЭтоИерархия
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ
		|	МАКСИМУМ(ЭтоИерархия)
		|ПО
		|	ВидНоменклатуры ТОЛЬКО ИЕРАРХИЯ";
		
	Иначе
		
		ИерархическоеДерево = Ложь;
		ПолеСвязиИерархии = "";
		ЗапросИерархии = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ПолеСвязиИерархии,",ПолеСвязиИерархии);
	
	ВыбранныеВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
	ВыбранныеСтрокиВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	Запрос.УстановитьПараметр("Таблица",       ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен);
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента(Форма)));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[2].Выгрузить(); // ТаблицаЗначений
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	ТаблицаНоменклатуры.Колонки.Добавить("СтрокаДереваЦен");
	
	// проверяем откуда вызов 
	// если из управляемой формы значит ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"), получения набора строк через *.ПолучитьЭлементы()
	// если из структуры значит ТипЗнч(Форма.ДеревоЦен) = Тип("Структура"), получения набора строк через *.Строки
	ДеревоЦенЭтоДанныеФормыДерево = (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"));

	Параметры = Новый Структура();
	Параметры.Вставить("ДеревоЦенЭтоДанныеФормыДерево", (ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево")));
	
	Если ИерархическоеДерево Тогда
		Запрос.Текст = ЗапросИерархии;
		ДеревоИерархия = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		СкопироватьСтрокиДереваИерархии(Параметры, Форма.ДеревоЦен, ДеревоИерархия);
	КонецЕсли; 
	
	Если ДеревоЦенЭтоДанныеФормыДерево Тогда
		ЭлементыНоменклатура = Форма.ДеревоЦен.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
	Иначе
		ЭлементыНоменклатура = Форма.ДеревоЦен.Строки;
	КонецЕсли;	
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаНоменклатура.Номенклатура, ПустаяХарактеристика);
		НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементНоменклатура = НайденнаяСтрока;
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
		Иначе
			
			Если ИерархическоеДерево Тогда
				Если ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
					ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,ВидНоменклатуры", 
						ПустаяНоменклатура,ПустаяХарактеристика, ВыборкаНоменклатура.ВидНоменклатуры);
				Иначе
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", 
						ВыборкаНоменклатура.Родитель, ПустаяХарактеристика);
				КонецЕсли; 
				
				НайденнаяИерархия = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
				
				Если НайденнаяИерархия = Неопределено Тогда
					ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
				Иначе
					Если ТипЗнч(НайденнаяИерархия) = Тип("ДанныеФормыЭлементДерева") Тогда
						ЭлементНоменклатура = НайденнаяИерархия.ПолучитьЭлементы().Добавить();
					Иначе
						ЭлементНоменклатура = НайденнаяИерархия.Строки.Добавить();
					КонецЕсли; 
				КонецЕсли; 
			Иначе
				ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементНоменклатура);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			Если ДеревоЦенЭтоДанныеФормыДерево Тогда
				НоваяСтрокаТЗ.ИдентификаторСтроки = ЭлементНоменклатура.ПолучитьИдентификатор();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", ЭлементНоменклатура.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
					ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ДеревоЦенЭтоДанныеФормыДерево Тогда
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Иначе
				ЭлементыХарактеристики = ЭлементНоменклатура.Строки;
			КонецЕсли;
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементХарактеристика);
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						Если ДеревоЦенЭтоДанныеФормыДерево Тогда
							НоваяСтрокаТЗ.ИдентификаторСтроки = ЭлементХарактеристика.ПолучитьИдентификатор();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), НоваяСтрокаТЗ);
						
						Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
						ЗаполнитьФормулу(ВыбранныеСтрокиВидовЦен, ЭлементХарактеристика);
						ЗаполнитьВалюту(ВыбранныеСтрокиВидовЦен, ЭлементХарактеристика);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьТаблицуСоответвияНоменклатуры(Форма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Возвращает таблицу настроек компоновки данных из документа
//
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  ТаблицаТовары - ТаблицаЗначений - Таблица с добавляемыми товарами.
//  КэшДанных - Структура - Структура кеша данных.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствие номенклатуры и характеристики с добавленной строкой дерева цен.
//
Функция ДобавитьТоварыПредприятия2_5(Форма, Знач ТаблицаТовары, КэшДанных)
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	ВариантГруппировки = Форма.ВариантГруппировки;
	ВыбранныеВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(Форма);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен", ВыбранныеВидыЦен);
	Запрос.УстановитьПараметр("ДатаДокумента", КонецДня(ДатаДокумента(Форма)));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Индекс КАК Индекс,
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Таблица.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ВЫРАЗИТЬ(Таблица.СерияЦО КАК Справочник.СерииНоменклатурыДляЦенообразования) КАК СерияЦО,
	|	ВЫРАЗИТЬ(Таблица.УпаковкаЦО КАК Справочник.УпаковкиЕдиницыИзмерения) КАК УпаковкаЦО
	|ПОМЕСТИТЬ ТаблицаНоменклатураДоп
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Индекс КАК Индекс,
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаНоменклатура.СерияЦО КАК СерияЦО,
	|	ТаблицаНоменклатура.УпаковкаЦО КАК УпаковкаЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				ИЛИ СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВидыНоменклатуры.НастройкиКлючаЦенПоСерии <> ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать) КАК СерииИспользуются,
	|	ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке <> ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать) КАК УпаковкиИспользуются
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	ТаблицаНоменклатураДоп КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаНоменклатура.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике КАК НастройкиКлючаЦенПоХарактеристике,
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоСерии КАК НастройкиКлючаЦенПоСерии,
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке КАК НастройкиКлючаЦенПоУпаковке
	|		ИЗ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры) КАК ВидыНоменклатуры
	|		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.ВидНоменклатуры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаНоменклатура.Номенклатура,
	|	ТаблицаНоменклатура.ХарактеристикаЦО,
	|	ТаблицаНоменклатура.СерияЦО,
	|	ТаблицаНоменклатура.УпаковкаЦО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПолеСвязиИерархии,
	|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаНоменклатура.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаНоменклатура.Номенклатура.Наименование КАК Наименование,
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаНоменклатура.СерияЦО КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.СерияЦО.Предопределенный
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаНоменклатура.СерияЦО
	|	КОНЕЦ КАК СерияЦОДляСвязи,
	|	ТаблицаНоменклатура.УпаковкаЦО КАК УпаковкаЦО,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.УпаковкаЦО = ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаНоменклатура.УпаковкаЦО
	|	КОНЕЦ КАК УпаковкаЦОДляСвязи,
	|	ТаблицаНоменклатура.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ТаблицаНоменклатура.СерииИспользуются КАК СерииИспользуются,
	|	ТаблицаНоменклатура.УпаковкиИспользуются КАК УпаковкиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс
	|ИТОГИ
	|	МИНИМУМ(СерияЦОДляСвязи),
	|	МИНИМУМ(УпаковкаЦОДляСвязи),
	|	МИНИМУМ(ХарактеристикиИспользуются),
	|	МИНИМУМ(СерииИспользуются),
	|	МИНИМУМ(УпаковкиИспользуются)
	|ПО
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатуры.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатуры.УпаковкаЦО КАК УпаковкаЦО,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ЦеныНоменклатуры.Формула КАК Формула,
	|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			&ДатаДокумента,
	|			(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.ХарактеристикаЦО,
	|						Т.СерияЦО,
	|						Т.УпаковкаЦО
	|					ИЗ
	|						ТаблицаНоменклатура КАК Т)
	|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры";
	
	ИерархическоеДерево = Истина;
	Если ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		
		ПолеСвязиИерархии = "ТаблицаНоменклатура.Номенклатура.Родитель КАК Родитель,";
		ЗапросИерархии =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатура.Номенклатура.Родитель КАК Номенклатура,
		|	ТаблицаНоменклатура.Номенклатура.Родитель.Наименование КАК Наименование,
		|	ТаблицаНоменклатура.Номенклатура.Родитель.ЭтоГруппа КАК ИерархияЭтоГруппа,
		|	ТаблицаНоменклатура.Номенклатура.Родитель.ЭтоГруппа КАК ЭтоИерархия
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.Номенклатура.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ ПО
		|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
		
		ПолеСвязиИерархии = "ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры КАК Родитель,";
		ЗапросИерархии =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.Наименование КАК Наименование,
		|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.ЭтоГруппа КАК ИерархияЭтоГруппа,
		|	ИСТИНА КАК ЭтоИерархия
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ
		|	МАКСИМУМ(ЭтоИерархия)
		|ПО
		|	ВидНоменклатуры ТОЛЬКО ИЕРАРХИЯ";
		
	Иначе
		
		ИерархическоеДерево = Ложь;
		ПолеСвязиИерархии = "";
		ЗапросИерархии = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ГДЕ
		|	ЛОЖЬ";
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСвязиИерархии,", ПолеСвязиИерархии);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Упаковки = РезультатЗапроса[3].Выгрузить();
	Упаковки.Индексы.Добавить("Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатуры(Форма);
	ТаблицаНоменклатуры.Колонки.Добавить("СтрокаДереваЦен");
	
	Параметры = Новый Структура();
	Параметры.Вставить("ДеревоЦенЭтоДанныеФормыДерево", ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыДерево"));
	Параметры.Вставить("ИерархическоеДерево", ИерархическоеДерево);
	Параметры.Вставить("ВариантГруппировки", ВариантГруппировки);
	
	Если ИерархическоеДерево Тогда
		
		Запрос.Текст = ЗапросИерархии;
		ДеревоИерархия = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		СкопироватьСтрокиДереваИерархии(Параметры, Форма.ДеревоЦен, ДеревоИерархия);
		
	КонецЕсли;
	
	ВыбранныеСтрокиВидовЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(Форма);
	
	Параметры.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Параметры.Вставить("Упаковки", Упаковки);
	Параметры.Вставить("ВыбранныеВидыЦен", ВыбранныеСтрокиВидовЦен);
	
	ДобавитьТоварПредприятия(Форма, КэшДанных, ВыборкаНоменклатура, Форма.ДеревоЦен, Параметры, 1);
	СохранитьТаблицуСоответвияНоменклатуры(Форма, КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Добавление новых строк в дерево цен
// 
// Параметры:
//  Форма - см. ПостроитьДеревоЦен.Форма
//  КэшДанных - см. ИнициализироватьСтруктуруКэшаДанных 
// 	ВыборкаСтрок - ВыборкаИзРезультатаЗапроса - выборка строк
// 	ЭлементДереваЦен - ДанныеФормыДерево, ДеревоЗначений - дерево цен
// 	Параметры - Структура - параметров:
//    * ДеревоЦенЭтоДанныеФормыДерево - Булево - признак формы дерева цен.
//    * ИерархическоеДерево - Булево - признак иерархического дерева.
//    * ВариантГруппировки - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - 
//    * ТаблицаНоменклатуры - ТаблицаЗначений - данные по добавояемым товарам.
//    * Упаковки - ТаблицаЗначений - упаковок.
//    * ВыбранныеВидыЦен - Массив из ДанныеФормыЭлементКоллекции- выбранных цен.
// 	Уровень - Число - текущий уровень дерева цен
Процедура ДобавитьТоварПредприятия(Форма, КэшДанных, ВыборкаСтрок, ЭлементДереваЦен, Параметры, Знач Уровень)

	ПустыеСсылки = Неопределено;
	
	Если Параметры.ДеревоЦенЭтоДанныеФормыДерево Тогда
		ЭлементыДереваЦен = ЭлементДереваЦен.ПолучитьЭлементы();
	Иначе
		ЭлементыДереваЦен = ЭлементДереваЦен.Строки;
	КонецЕсли;
	
	Пока ВыборкаСтрок.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО", 
											ВыборкаСтрок.Номенклатура, 
											ВыборкаСтрок.ХарактеристикаЦО, 
											ВыборкаСтрок.СерияЦО, 
											ВыборкаСтрок.УпаковкаЦО);
		НайденнаяСтрока = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ТекущийЭлемент = НайденнаяСтрока;
			ЗаполнитьЗначенияСвойств(ТекущийЭлемент, ВыборкаСтрок);
			
		Иначе
			
			Если Параметры.ИерархическоеДерево и Уровень = 1 Тогда
				Если ПустыеСсылки = Неопределено Тогда
					ПустыеСсылки = Новый Структура("Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО", 
						Справочники.Номенклатура.ПустаяСсылка(),
						Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка(),
						Справочники.СерииНоменклатурыДляЦенообразования.ПустаяСсылка(),
						Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				КонецЕсли;
				
				Если Параметры.ВариантГруппировки = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
					ПараметрыОтбора = Новый Структура("Номенклатура,ХарактеристикаЦО, СерияЦО, УпаковкаЦО,ВидНоменклатуры", 
						ПустыеСсылки.Номенклатура, 
						ПустыеСсылки.ХарактеристикаЦО, 
						ПустыеСсылки.СерияЦО, 
						ПустыеСсылки.УпаковкаЦО, 
						ВыборкаСтрок.ВидНоменклатуры);
				Иначе
					ПараметрыОтбора = Новый Структура("Номенклатура,ХарактеристикаЦО, СерияЦО, УпаковкаЦО", 
						ВыборкаСтрок.Родитель, 
						ПустыеСсылки.ХарактеристикаЦО, 
						ПустыеСсылки.СерияЦО, 
						ПустыеСсылки.УпаковкаЦО);
				КонецЕсли; 
				
				НайденнаяИерархия = НайтиСтрокуДереваЦен(Форма, ПараметрыОтбора, КэшДанных, Ложь);
				
				Если НайденнаяИерархия = Неопределено Тогда
					ТекущийЭлемент = ЭлементыДереваЦен.Добавить();
				Иначе
					Если Параметры.ДеревоЦенЭтоДанныеФормыДерево Тогда
						ТекущийЭлемент = НайденнаяИерархия.ПолучитьЭлементы().Добавить();
					Иначе
						ТекущийЭлемент = НайденнаяИерархия.Строки.Добавить();
					КонецЕсли; 
				КонецЕсли; 
			Иначе
				ТекущийЭлемент = ЭлементыДереваЦен.Добавить();
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ТекущийЭлемент, ВыборкаСтрок);
			УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(ТекущийЭлемент);
			
			НоваяСтрокаТЗ = КэшДанных.ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ТекущийЭлемент);
			НоваяСтрокаТЗ.СтрокаДереваЦен = ТекущийЭлемент;
			Если Параметры.ДеревоЦенЭтоДанныеФормыДерево Тогда
				НоваяСтрокаТЗ.ИдентификаторСтроки = ТекущийЭлемент.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;

		Если (Уровень > 3) Тогда
			Если НоваяСтрокаТЗ <> Неопределено Тогда
				
				НоваяСтрокаТаблицыНоменклатуры = Параметры.ТаблицаНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНоменклатуры, ВыборкаСтрок);
				НоваяСтрокаТаблицыНоменклатуры.СтрокаДереваЦен = ТекущийЭлемент;
				
			КонецЕсли;

			ДобавитьТоварПредприятияФрагмент(Форма, КэшДанных, ТекущийЭлемент, ВыборкаСтрок, Параметры);
			
			Продолжить;
		КонецЕсли;
		
		СледующаяГруппировка = ПолучитьСледующуюГруппировку(Уровень, ВыборкаСтрок);
		
		Если СледующаяГруппировка.Группировка = Неопределено Тогда
			Если НоваяСтрокаТЗ <> Неопределено Тогда
	
				НоваяСтрокаТаблицыНоменклатуры = Параметры.ТаблицаНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНоменклатуры, ВыборкаСтрок);
				НоваяСтрокаТаблицыНоменклатуры.СтрокаДереваЦен = ТекущийЭлемент;
				
			КонецЕсли;
			
			ДобавитьТоварПредприятияФрагмент(Форма, КэшДанных, ТекущийЭлемент, ВыборкаСтрок, Параметры);
				
			Продолжить;
		КонецЕсли;

		ВыборкаПодчиненныхСтрок = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, СледующаяГруппировка.Группировка);
		ДобавитьТоварПредприятия(Форма, КэшДанных, ВыборкаПодчиненныхСтрок, ТекущийЭлемент, Параметры, СледующаяГруппировка.Уровень);
				
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТоварПредприятияФрагмент(Форма, КэшДанных, ТекущийЭлемент, ВыборкаСтрок, Параметры)

	ПараметрыОтбора = Новый Структура(
		"Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО", 
		ВыборкаСтрок.Номенклатура, 
		?(Форма.ИспользоватьХарактеристикиНоменклатуры И ЗначениеЗаполнено(ВыборкаСтрок.ХарактеристикаЦО), ВыборкаСтрок.ХарактеристикаЦО, Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка()),
		?(Форма.ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(ВыборкаСтрок.СерияЦО), ВыборкаСтрок.СерияЦО, Справочники.СерииНоменклатурыДляЦенообразования.ПустаяСсылка()),
		?(Форма.ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ВыборкаСтрок.УпаковкаЦО), ВыборкаСтрок.УпаковкаЦО, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка())
		);
	НайденныеСтроки = Параметры.Упаковки.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
		ТекущийЭлемент["Формула" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Формула;
		
		Если Форма.ИспользоватьУпаковкиНоменклатуры И Не ТекущийЭлемент.УпаковкиИспользуются Тогда
			ТекущийЭлемент["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
		КонецЕсли;
	КонецЦикла;

	Если Форма.ИспользоватьУпаковкиНоменклатуры 
		И ВыборкаСтрок.УпаковкиИспользуются 
		И НЕ ВыборкаСтрок.УпаковкаЦоДляСвязи.Пустая() Тогда
			
		Для Каждого ВидЦены Из Параметры.ВыбранныеВидыЦен Цикл
			ИмяКолонки = ВидЦены.ИмяКолонки;
			ТекущийЭлемент["Упаковка" + ИмяКолонки] = ВыборкаСтрок.УпаковкаЦоДляСвязи;
		КонецЦикла;
		
	КонецЕсли;

	ЗаполнитьФормулу(Параметры.ВыбранныеВидыЦен, ТекущийЭлемент);
	ЗаполнитьВалюту(Параметры.ВыбранныеВидыЦен, ТекущийЭлемент);
	
КонецПроцедуры

Процедура СкопироватьСтрокиДереваИерархии(Параметры, Приемник, Источник)
	
	СтрокиИсточника = Источник.Строки;
	
	Если Параметры.ДеревоЦенЭтоДанныеФормыДерево Тогда
		СтрокиПриемника = Приемник.ПолучитьЭлементы(); 
	Иначе
		СтрокиПриемника = Приемник.Строки; 
	КонецЕсли;	
		
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		СтрокаПриемника = СтрокиПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника,СтрокаИсточника);
		УстановкаЦенКлиентСервер.ЗаполнитьИндексКартинкиСтрокиДереваЦен(СтрокаПриемника);
	
		СкопироватьСтрокиДереваИерархии(Параметры, СтрокаПриемника, СтрокаИсточника);
	КонецЦикла; 
	
КонецПроцедуры
 
Функция ПолучитьСледующуюГруппировку(Знач Уровень, ВыборкаСтрок)
	
	Уровень = Уровень + 1;
	СледующаяГруппировка = Новый Структура("Уровень, Группировка", 0, Неопределено);
	
	Если Уровень = 2 Тогда
		Если ВыборкаСтрок.ХарактеристикиИспользуются Тогда
			СледующаяГруппировка.Уровень     = Уровень;
			СледующаяГруппировка.Группировка = "ХарактеристикаЦО";
		Иначе	
			СледующаяГруппировка = ПолучитьСледующуюГруппировку(Уровень, ВыборкаСтрок);
		КонецЕсли;
	ИначеЕсли Уровень = 3 Тогда
		Если ВыборкаСтрок.СерииИспользуются Тогда
			СледующаяГруппировка.Уровень     = Уровень;
			СледующаяГруппировка.Группировка = "СерияЦО";
		Иначе	
			СледующаяГруппировка = ПолучитьСледующуюГруппировку(Уровень, ВыборкаСтрок);
		КонецЕсли;
	ИначеЕсли Уровень = 4 Тогда		
		Если ВыборкаСтрок.УпаковкиИспользуются Тогда
			СледующаяГруппировка.Уровень     = Уровень;
			СледующаяГруппировка.Группировка = "УпаковкаЦО";
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СледующаяГруппировка;
	
КонецФункции

Процедура ЗаполнитьФормулу(Знач ВыбранныеВидыЦен, Элемент)
	
	Для Каждого ВидЦены Из ВыбранныеВидыЦен Цикл

		Если Не ВидЦены.ФормулаРедактируется Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		Формула = Элемент["Формула" + ИмяКолонки];
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", Элемент.ЦеноваяГруппа);
		
		ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
		Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
			ФормулаПоУмолчанию = ЦеновыеГруппыАлгоритмов[0].Формула;
		Иначе
			ФормулаПоУмолчанию = ВидЦены.Формула;
		КонецЕсли;
		
		Формула = ?(Формула = "", ФормулаПоУмолчанию, Формула);
		Элемент["Формула" + ИмяКолонки] = Формула;
		Элемент["ФормулаИзмененаВручную" + ИмяКолонки] = (Формула <> ФормулаПоУмолчанию);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВалюту(Знач ВыбранныеВидыЦен, Элемент)
	
	Для Каждого ВидЦены Из ВыбранныеВидыЦен Цикл

		ИмяКолонки = ВидЦены.ИмяКолонки;
		Валюта = Элемент["Валюта" + ИмяКолонки];
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", Элемент.ЦеноваяГруппа);
		
		ЦеновыеГруппыВалют = ВидЦены.Валюты.НайтиСтроки(СтруктураЦеноваяГруппа);
		Если ЦеновыеГруппыВалют.Количество() > 0 Тогда
			ВалютаПоУмолчанию = ЦеновыеГруппыВалют[0].Валюта;
		Иначе
			ВалютаПоУмолчанию = ВидЦены.Валюта;
		КонецЕсли;
		
		Валюта = ?(Валюта.Пустая(), ВалютаПоУмолчанию, Валюта);
		Элемент["Валюта" + ИмяКолонки] = Валюта;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодчиненныеЭлементы(ТаблицаНоменклатуры, СтрокаТаблицыЦен)
	Элементы = СтрокаТаблицыЦен.ПолучитьЭлементы();
	Если Элементы.Количество() > 0 Тогда
		Для Каждого Элемент Из Элементы Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), Элемент, "Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО");
			ДобавитьПодчиненныеЭлементы(ТаблицаНоменклатуры, Элемент);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Создает запись в журнале регистрации и сообщениях пользователю, 
//  Поддерживает до 4х параметров в комментарии при помощи функции 
//    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку
//  Поддерживает передачу информации об ошибке, подробное представление 
//    ошибки добавляется в комментарий записи в журнал регистрации.
// 
// Параметры:
//   ПараметрыЖурнала  - Структура - Параметры записи в журнал регистрации:
//    * Префикс    - Строка           - Префикс для имени события журнала регистрации.
//    * Метаданные - ОбъектМетаданных - Метаданные для записи в журнал регистрации.
//    * Данные     - Произвольный     - Данные для записи в журнал регистрации.
//   УровеньЖурнала - Число - Соответствует уровням журнала регистрации.
//   ИмяСобытия     - Строка - Суффикс для имени события журнала регистрации.
//   КомментарийСПараметрами -Строка - Комментарий, возможно с параметрами %1 .. %4.
//   ИнформацияОбОшибке - ИнформацияОбОшибке, Строка - Информация об ошибке, которую так же необходимо
//                                                     задокументировать в комментарии журнала регистрации.
//
Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала , ИмяСобытия, 
		Знач КомментарийСПараметрами , ИнформацияОбОшибке = "") Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке.
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если КомментарийСПараметрами = "" Тогда
			ТекстСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТекстСообщенияПользователю = КомментарийСПараметрами + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") И ИнформацияОбОшибке <> "" Тогда
			КомментарийСПараметрами = КомментарийСПараметрами + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТекстСообщенияПользователю = КомментарийСПараметрами;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ГруппаСобытий = ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", "."+ ИмяСобытия);
	ЗаписьЖурналаРегистрации(
		ГруппаСобытий, 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		КомментарийСПараметрами);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка
		Или УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СокрЛП(ТекстСообщенияПользователю); //  + Символы.ПС + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'")
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти