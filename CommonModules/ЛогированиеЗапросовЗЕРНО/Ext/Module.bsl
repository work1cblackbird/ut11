#Область СлужебныеПроцедурыИФункции

// Отключает режим записи логов.
// 
Процедура ОтключитьЛогированиеЗапросов() Экспорт
	
	ПараметрыЛогирования                 = ПараметрыЛогированияЗапросов();
	ПараметрыЛогирования.Включено        = Ложь;
	
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
КонецПроцедуры

// Возвращает текствое описание текущего окружения и параметров.
// 
// Возвращаемое значение:
// 	Строка - Текстовое описание текущего окружения.
Функция ИнформацияОбОкружении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОкружения = Новый Массив();
	
	ЛогированиеЗапросовИС.ДополнитьИнформациюОбОкруженииШапка(ДанныеОкружения);
	
	ДанныеОкружения.Добавить(
		СтрШаблон(
			"%1: %2",
			Метаданные.Константы.РежимРаботыСТестовымКонтуромЗЕРНО.Синоним,
			ИнтеграцияЗЕРНОКлиентСерверПовтИсп.РежимРаботыСТестовымКонтуромЗЕРНО()));
	
	ДанныеОкружения.Добавить(
		СтрШаблон(
			"%1: %2",
			Метаданные.Константы.ЕдиницаИзмеренияКилограммИС.Синоним,
			Константы.ЕдиницаИзмеренияКилограммИС.Получить()));
	
	ПараметрыОптимизации = ИнтеграцияЗЕРНО.ПараметрыОптимизации();
	
	СинонимыПараметровОптимизации = ИнтеграцияЗЕРНОПовтИсп.ПредставленияНастроекОптимизации();
	
	Для Каждого КлючИЗначение Из ПараметрыОптимизации Цикл
		
		ПредставлениеПараметра = СинонимыПараметровОптимизации.Получить(КлючИЗначение.Ключ);
		Если ПредставлениеПараметра = Неопределено Тогда
			ПредставлениеПараметра = ОбщегоНазначенияИСКлиентСервер.ПредставлениеВстроенногоИмени(КлючИЗначение.Ключ);
		КонецЕсли;
		
		ЗначениеВывода = КлючИЗначение.Значение;
		
		Если КлючИЗначение.Ключ = "УчитываемыеВидыПродукции" Тогда
			
			Продолжить; // Временно не используется
			
			Если Не ЭтоАдресВременногоХранилища(ЗначениеВывода) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляВывода = Новый Массив();
			ДанныеХранилища = ПолучитьИзВременногоХранилища(ЗначениеВывода);
			
			Для Каждого СтрокаТаблцицы Из ДанныеХранилища Цикл
				Если Не СтрокаТаблцицы.УчетЗерна
					И Не СтрокаТаблцицы.УчетПродуктовПереработкиЗерна Тогда
					Продолжить;
				КонецЕсли;
				ДанныеСтроки = Новый Массив();
				ДанныеСтроки.Добавить(СтрокаТаблцицы.Организация);
				ДанныеСтроки.Добавить(": ");
				Если СтрокаТаблцицы.УчетЗерна Тогда
					ДанныеСтроки.Добавить(НСтр("ru = 'Зерно'"));
					Если СтрокаТаблцицы.ОрганизацияЯвляетсяЭлеватором Тогда
						ДанныеСтроки.Добавить(" ");
						ДанныеСтроки.Добавить(НСтр("ru = '(элеватор)'"));
					КонецЕсли;
				КонецЕсли;
				Если СтрокаТаблцицы.УчетПродуктовПереработкиЗерна Тогда
					Если СтрокаТаблцицы.УчетЗерна Тогда
						ДанныеСтроки.Добавить(", ");
					КонецЕсли;
					ДанныеСтроки.Добавить(НСтр("ru = 'Продукты переработки зерна'"));
				КонецЕсли;
				ДанныеДляВывода.Добавить(СтрСоединить(ДанныеСтроки));
			КонецЦикла;
			
			Если ДанныеДляВывода.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеВывода = СтрСоединить(ДанныеДляВывода, ",");
			
		КонецЕсли;
		
		ДанныеОкружения.Добавить(
			СтрШаблон(
				"%1: %2%3",
				ПредставлениеПараметра,
				Формат(ЗначениеВывода, "ДФ=dd.MM.yyyy; БЛ=Нет; БИ=Да;")));
		
	КонецЦикла;
	
	ДополнитьПодвалЛогаЗапросовДаннымиПоКлассификаторам(ДанныеОкружения);
	
	ЛогированиеЗапросовИС.ДополнитьИнформациюОбОкруженииПодвал(ДанныеОкружения);
	
	Возврат СтрСоединить(ДанныеОкружения, Символы.ПС);
	
КонецФункции

// Получает текущие параметры логирования.
// 
// Возвращаемое значение:
// 	см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов
Функция ПараметрыЛогированияЗапросов() Экспорт
	
	Возврат ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов("ПараметрыЛогированияЗапросовЗЕРНО");
	
КонецФункции

// Выполняет запись HTTP запроса / ответа в файл логирования в формат протокола обмена, если запись лога включена.
// 
// Параметры:
// 	РезультатЗапроса - см. ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи.
Процедура ВывестиДанныеДляПротоколаОбмена(РезультатЗапроса) Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	Если Не ЛогированиеЗапросовИС.ВыполняетсяЛогированиеЗапросовДляПротоколаОбмена(ПараметрыЛогирования) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПротоколОбмена", Неопределено);
	
	ПротоколОбмена = ИнтеграцияЗЕРНОСлужебный.ИнициализироватьТаблицуПротоколОбмена();
	Результат.ПротоколОбмена = ПротоколОбмена;
	
	ПараметрыОтправкиHTTPЗапросов = РезультатЗапроса.ПараметрыОтправкиHTTPЗапросов;
	HTTPМетод                     = РезультатЗапроса.HTTPМетод;
	HTTPЗапрос                    = РезультатЗапроса.HTTPЗапрос;
	HTTPОтвет                     = РезультатЗапроса.HTTPОтвет;
	
	ЗапросЗаголовки = Новый Массив;
	Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
		ЗапросЗаголовки.Добавить(
			СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	ЗаписьПротокола = ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Запрос            = ИнтеграцияЗЕРНОСлужебный.URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
	ЗаписьПротокола.ЗапросЗаголовки   = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.ЗапросТело        = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет <> Неопределено Тогда
		
		ЗаписьПротокола.ОтветЗаголовки = ИнтеграцияЗЕРНОСлужебный.ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
			ЗаписьПротокола.ОтветТело = HTTPОтвет.Тело;
		Иначе
			ЗаписьПротокола.ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		ЗаписьПротокола.КодСостояния = Строка(HTTPОтвет.КодСостояния);
		
		Если РезультатЗапроса.Свойство("ТекстОшибки")
			И Не ЗначениеЗаполнено(ЗаписьПротокола.ОтветТело) Тогда
			ЗаписьПротокола.ОтветТело = РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		
	Иначе
		ЗаписьПротокола.ОтветТело = РезультатЗапроса.ТекстОшибки;
	КонецЕсли;
	
	ТекущийИдентификатор = ПараметрыЛогирования.ТекущийИдентификаторПротоколОбмена;
	ФайлыПротокола = ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена.Получить(ТекущийИдентификатор);
	Если ФайлыПротокола = Неопределено Тогда
		ФайлыПротокола = Новый Массив;
	КонецЕсли;
	//@skip-check missing-temporary-file-deletion
	ИмяФайла = ПолучитьИмяВременногоФайла(".log");
	ФайлыПротокола.Добавить(ИмяФайла);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8,, Ложь);
	ЗаписьТекста.ЗаписатьСтроку(ОбщегоНазначения.ЗначениеВСтрокуXML(Результат));
	ЗаписьТекста.Закрыть();
	
	ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена[ТекущийИдентификатор] = ФайлыПротокола;
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
КонецПроцедуры

// Сохраняет параметры логирования в параметр сеанса.
// 
// Параметры:
// 	ПараметрыЛогирования - см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов
Процедура УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования) Экспорт
	
	ПараметрыСеанса.ПараметрыЛогированияЗапросовЗЕРНО = ОбщегоНазначения.ФиксированныеДанные(ПараметрыЛогирования);
	
КонецПроцедуры

// Дописывает полученные данные лога запросов в текущий уровень логирования.
// 
// Параметры:
// 	ДанныеДокумента - Структура:
// 	* ДанныеЛогаЗапросов - Строка - Данные для записи в лог запросов
Процедура ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ДанныеДокумента) Экспорт
	
	ЛогированиеЗапросовИС.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ДанныеДокумента, ПараметрыЛогированияЗапросов());
	
КонецПроцедуры

Процедура ДополнитьПодвалЛогаЗапросовДаннымиПоКлассификаторам(ДанныеОкружения)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВерсийКлассификаторов   = Новый Массив();
	ИдентификаторыКлассификаторов = ИнтеграцияЗЕРНО.ИдентификаторыКлассификаторов();
	ПроверитьНаличиеОбновлений    = Новый Массив();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		
		ВидКлассификатора           = КлючИЗначение.Значение.ВидКлассификатора;
		ИдентификаторКлассификатора = КлючИЗначение.Ключ;
		Версия                      = РаботаСКлассификаторами.ВерсияКлассификатора(ИдентификаторКлассификатора);
		
		ДанныеВерсийКлассификаторов.Добавить(
			СтрШаблон("%1 (%2) версия %3",
			ВидКлассификатора,
			ИдентификаторКлассификатора,
			Формат(Версия, "ЧН=0;")));
		
		ПроверитьНаличиеОбновлений.Добавить(ИдентификаторКлассификатора);
		
	КонецЦикла;
	
	ДанныеОкружения.Добавить(
		СтрШаблон(
			НСтр("ru = 'Версии классификаторов: %1'"),
			СтрСоединить(ДанныеВерсийКлассификаторов, ", ")));
	
	ДоступныеОбновления = РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов(ПроверитьНаличиеОбновлений);
	
	Если ЗначениеЗаполнено(ДоступныеОбновления.КодОшибки)
		И ДоступныеОбновления.КодОшибки <> "ОбновлениеНеТребуется" Тогда
		
		ДанныеОкружения.Добавить(
			СтрШаблон(
				НСтр("ru = 'Обновление классификаторов: %1'"),
				ДоступныеОбновления.СообщениеОбОшибке));
		
	Иначе
		
		ДанныеДоступныхОбновлений = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из ДоступныеОбновления.ДоступныеВерсии Цикл
			
			СтрокаКлассификатора = ИдентификаторыКлассификаторов[СтрокаТаблицы.Идентификатор];
			Если СтрокаКлассификатора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВидКлассификатора           = СтрокаКлассификатора.ВидКлассификатора;
			ИдентификаторКлассификатора = СтрокаТаблицы.Идентификатор;
			Версия                      = СтрокаТаблицы.Версия;
			
			ДанныеДоступныхОбновлений.Добавить(
				СтрШаблон("%1 (%2) версия %3",
					ВидКлассификатора,
					ИдентификаторКлассификатора,
					Версия));
			
		КонецЦикла;
		
		Если ДанныеДоступныхОбновлений.Количество() Тогда
			ДанныеОкружения.Добавить(
				СтрШаблон(
					НСтр("ru = 'Доступно обновление классификаторов: %1'"),
					СтрСоединить(ДанныеДоступныхОбновлений, ", ")));
		КонецЕсли;
		
	КонецЕсли;
	
	ПроблемыКлассификаторовОбмена = ИнтеграцияЗЕРНО.ПроблемыКлассификаторовВПанелиОбмена(Истина);
	Если ЗначениеЗаполнено(ПроблемыКлассификаторовОбмена.ТребуетсяЗагрузкаТекстПодсказки) Тогда
		ДанныеОкружения.Добавить(Строка(ПроблемыКлассификаторовОбмена.ТребуетсяЗагрузкаТекстПодсказки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
