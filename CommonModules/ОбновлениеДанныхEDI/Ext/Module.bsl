
#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

Процедура ОбновлениеРеестраДокументовEDI() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеРеестраДокументовEDI);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления реестра документов EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Результат = РегистрыСведений.СостоянияДокументовEDI.РезультатОбновленияДанныхИзСервисаПоОрганизациям(ОрганизацииПодключенныеКEDI());
	
	ШаблонСообщения = НСтр("ru = 'Окончание обновления реестра документов EDI. Обновлено записей - %1. %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = ?(Результат.Ошибки.Количество() > 0, НСтр("ru = 'Выполнено с ошибками.'",ОбщегоНазначения.КодОсновногоЯзыка()),"");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.КоличествоЗаписей, ТекстОшибки);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		ТекстСообщения);
	
КонецПроцедуры

Процедура ОбновлениеНастроекОрганизацийEDI() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеНастроекОрганизацийEDI);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления настроек организаций EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Результат = РегистрыСведений.НастройкиПоставщикаEDI.РезультатОбновленияНастроекОрганизацийИзСервиса(ОрганизацииПодключенныеКEDI());
	
	ШаблонСообщения = НСтр("ru = 'Окончание обновления настроек организаций EDI. Обновлено записей - %1. %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = ?(Результат.Ошибки.Количество() > 0, НСтр("ru = 'Выполнено с ошибками.'",ОбщегоНазначения.КодОсновногоЯзыка()),"");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.КоличествоЗаписей, ТекстОшибки);
		
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		ТекстСообщения);
	
КонецПроцедуры

Процедура ОбновлениеНастроекПоставщиковEDI() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеНастроекПоставщиковEDI);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления настроек поставщиков EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Организации = ОрганизацииПодключенныеКEDI();
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат; // Отсутствуют организации, подключенные к сервису 1С:Бизнес-сеть
	КонецЕсли;
	
	Результат = РегистрыСведений.НастройкиПоставщикаEDI.РезультатОбновленияНастроекКонтрагентовПоОрганизациямИзСервиса(Организации);
	
	ШаблонСообщения = НСтр("ru = 'Окончание обновления настроек поставщиков EDI. Обновлено записей - %1. %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = ?(Результат.Ошибки.Количество() > 0, НСтр("ru = 'Выполнено с ошибками.'",ОбщегоНазначения.КодОсновногоЯзыка()),"");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.КоличествоЗаписей, ТекстОшибки);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		ТекстСообщения);
	
КонецПроцедуры

Процедура ОбновлениеИтоговЛентыСобытийEDI() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеИтоговЛентыСобытийEDI);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления итогов ленты событий EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Результат = РегистрыСведений.ИтогиПоследнихСобытийEDI.РезультатОбновленияДанныхИзСервиса(ОрганизацииПодключенныеКEDI());
	
	ШаблонСообщения = НСтр("ru = 'Окончание обновления итогов ленты событий EDI. Обновлено записей - %1. %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = ?(Результат.Ошибки.Количество() > 0, НСтр("ru = 'Выполнено с ошибками.'",ОбщегоНазначения.КодОсновногоЯзыка()),"");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.КоличествоЗаписей, ТекстОшибки);
		
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		ТекстСообщения);
	
КонецПроцедуры

Процедура УдалениеУстаревшихИтоговЛентыСобытийEDI() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеУстаревшихИтоговЛентыСобытийEDI);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало удаления устаревших итогов ленты событий EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	РегистрыСведений.ИтогиПоследнихСобытийEDI.УдалитьЛишниеЗаписи();

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Окончание удаления устаревших итогов ленты событий EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура ОбновлениеЗагрузкаДокументовИзСервиса() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеЗагрузкаДокументовEDI);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления и загрузки документов из сервиса 1С:EDI'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Результат = ДокументыEDIИнтеграция.РезультатОбновленияИЗагрузкиДокументовИзСервиса();
	
	ШаблонСообщения = НСтр("ru = 'Окончание обновления и загрузки документов из сервиса 1С:EDI. Обновлено записей - %1 из %2. %3'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = ?(Не Результат.Успешно, Результат.ТекстОшибки, "");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.КоличествоЗагруженных, Результат.КоличествоОбработанных, ТекстОшибки);
	
	УровеньЖурнала = ?(Результат.Успешно, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурнала, , ,
		ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти 

#Область ИнтеграцияБСП

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	
	#Область ОбновлениеРеестраДокументовEDI
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеРеестраДокументовEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеРеестраДокументовEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	#КонецОбласти	
	
	#Область ОбновлениеНастроекEDI
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеНастроекОрганизацийEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеНастроекОрганизацийEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеНастроекПоставщиковEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеНастроекПоставщиковEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	#КонецОбласти	
	
	#Область ОбновлениеЛентыСобытийEDI
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеИтоговЛентыСобытийEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеИтоговЛентыСобытийEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеУстаревшихИтоговЛентыСобытийEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеУстаревшихИтоговЛентыСобытийEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.ЗависимостьПоИ = Истина;
	
	#КонецОбласти
	
	#Область ОбновлениеПрикладныхОбъектовEDI
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеЗагрузкаДокументовEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеЗагрузкаДокументовEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияССервисомEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменEDI;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияССервисомEDI;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменБизнесСеть;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	Зависимость.ЗависимостьПоИ = Истина;
	
	#КонецОбласти

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеРеестраДокументовEDI.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеНастроекОрганизацийEDI.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеНастроекПоставщиковEDI.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеИтоговЛентыСобытийEDI.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.УдалениеУстаревшихИтоговЛентыСобытийEDI.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеЗагрузкаДокументовEDI.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.СинхронизацияССервисомEDI.Имя);
	
КонецПроцедуры

#КонецОбласти

// Возвращает имя события журнала регистрации подсистемы EDI.
//
// Возвращаемое значение:
//   Строка   - имя события.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'EDI'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОрганизацииПодключенныеКEDI() Экспорт
	
	Результат = БизнесСеть.ПодключенныеОрганизации();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.ВыгрузитьКолонку("Организация");
	
КонецФункции

#КонецОбласти 