#Область СлужебныйПрограммныйИнтерфейс

//Проверяет необходимость уточнения кода маркировки в составе упаковки, специфика ИС МП
//  * Маркировка молочной продукции, подконтрольной ВЕТИС: требуется заполнение данных ВетИС.
//  * Маркировка молочной продукции, в том числе неподконтрольной ВЕТИС: требуется заполнение срока годности.
//
// Параметры:
//   СтрокаДерева - СтрокаДереваЗначений - строка в которой проверяется специфика
//   ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
// Возвращаемое значение:
//   Булево - для упаковки требуется уточнение данных
Функция ПроверитьНеобходимостьУточнения(СтрокаДерева, ПараметрыСканирования) Экспорт
	
	// Проверка параметров ИС МП требуется для работоспособности штрихкодирования
	// при выполнении сканирования штрихкодов ИС МП в документах с табачной продукцией.
	
	Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
		И Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторПроисхожденияВЕТИС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И Не ЗначениеЗаполнено(СтрокаДерева.ГоденДо) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет поля данных штрихкода, используемые подсистемой ИСМП, после уточнения данных:
//  * Для кода маркировки остатков (без номенклатуры) указать Количество вложенных единиц = 1.
//
// Параметры:
//  ДанныеШтрихкода - Структура - текущие данные штрихкода
//  ДанныеВыбора    - Структура - данные уточнения номенклатуры
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  РезультатОбработки    - Структура - Результат обработки штрихкода.
Процедура ОбработатьУточнениеДанных(ДанныеШтрихкода, ДанныеВыбора, ПараметрыСканирования, РезультатОбработки) Экспорт
	
	Описание = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ДанныеШтрихкода.Номенклатура).Получить(ДанныеШтрихкода.Номенклатура);
	Если Описание = Неопределено Тогда
		КоличествоВПотребительскойУпаковке = 0;
	Иначе
		КоличествоВПотребительскойУпаковке = Описание.КоличествоВПотребительскойУпаковке;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.КоличествоПотребительскихУпаковок) Тогда
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ДанныеШтрихкода.КоличествоПотребительскихУпаковок = 1;
			ДанныеШтрихкода.Коэффициент = КоличествоВПотребительскойУпаковке;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьУточнениеДанныхЧастичноеВыбытие(ДанныеВыбора, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

//Заполняет данные кода маркировки, специфика ИС МП:
//  * Только в случае если присутствует документ-основание.
//  Этап 1. Если документа-основания или подходящих строк в нем нет, заполнение не производится.
//  Этап 2. Единственной подходящей строкой из документа-основания.
//  Этап 3. Если подходит несколько строк основания - то единственной подходящей строкой,
//  по которой не завершент подбор маркируемой продукции, из текущего документа.
//
// Параметры:
//   СтрокаДанных - СтрокаТаблицыЗначений - строка в которой заполняется специфика
//   ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//   ДанныеДокументаОснования - ТаблицаЗначений - данные документа основания
//   ДанныеДокумента - ТаблицаЗначений - данные табличной части документа Маркировка товаров
// Возвращаемое значение:
//   Булево - для кода маркировки выполнено заполнение данных
Функция ЗаполнитьПоДокументуИОснованию(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования, ДанныеДокумента) Экспорт
	
	ТребуетсяЗаполнитьИдентификаторВЕТИС = ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
		И Не ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	ТребуетсяЗаполнитьСрокГодности = ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыСканирования.ЗаполнятьСрокГодности
		И Не ЗначениеЗаполнено(СтрокаДанных.ГоденДо);
	Если Не (ТребуетсяЗаполнитьИдентификаторВЕТИС Или ТребуетсяЗаполнитьСрокГодности) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокументаОснования = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокументаОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполняемыеПоля = Новый Структура;
	Отбор = Новый Структура("Номенклатура,Характеристика");
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
	
	Если ЗначениеЗаполнено(СтрокаДанных.Серия) Тогда
		Отбор.Вставить("Серия", СтрокаДанных.Серия);
	Иначе 
		ЗаполняемыеПоля.Вставить("Серия");
	КонецЕсли;
	
	НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(Отбор);
	ЕстьДанныеВЕТИС = ЗначениеЗаполнено(ДанныеДокументаОснования[0].ДанныеИдентификатораПроисхожденияВЕТИС);
	
	Если ЕстьДанныеВЕТИС Тогда
		
		Если ТребуетсяЗаполнитьСрокГодности Тогда
			ЗаполняемыеПоля.Вставить("ГоденДо");
		КонецЕсли;
		
		Если ТребуетсяЗаполнитьИдентификаторВЕТИС Тогда
			ЗаполняемыеПоля.Вставить("ИдентификаторПроисхожденияВЕТИС");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполняемыеПоля.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодходитСтрок = 0;
	// Заполнение единственным вариантом документа-основания
	Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
		// Заполнение данных ВетИС (маркировка молочной продукции)
		Если ЕстьДанныеВЕТИС Тогда 
			ДанныеВЕТИС = ВариантВыбора.ДанныеИдентификатораПроисхожденияВЕТИС;
			Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС)
					И СтрокаДанных.ИдентификаторПроисхожденияВЕТИС <> ДанныеВЕТИС.ИдентификаторПроисхожденияВЕТИС Тогда
				Продолжить;
			ИначеЕсли ТребуетсяЗаполнитьСрокГодности И ЗначениеЗаполнено(СтрокаДанных.ГоденДо)
				И (СтрокаДанных.ГоденДо < ДанныеВЕТИС.НачалоПериода
					Или СтрокаДанных.ГоденДо > Макс(ДанныеВЕТИС.НачалоПериода, ДанныеВЕТИС.КонецПериода)) Тогда
				Продолжить;
			КонецЕсли;
			Если ПодходитСтрок = 0 Тогда
				Если ЗаполняемыеПоля.Свойство("Серия") Тогда
					ЗаполняемыеПоля.Серия = ВариантВыбора.Серия;
				КонецЕсли;
				Если ТребуетсяЗаполнитьИдентификаторВЕТИС Тогда
					ЗаполняемыеПоля.ИдентификаторПроисхожденияВЕТИС = ДанныеВЕТИС.ИдентификаторПроисхожденияВЕТИС;
				КонецЕсли;
				Если ТребуетсяЗаполнитьСрокГодности Тогда
					Если ДанныеВЕТИС.НачалоПериода = Макс(ДанныеВЕТИС.НачалоПериода, ДанныеВЕТИС.КонецПериода) Тогда
						ЗаполняемыеПоля.ГоденДо = ДанныеВЕТИС.НачалоПериода;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (ЗаполняемыеПоля.Свойство("Серия")
						И ЗаполняемыеПоля.Серия <> ВариантВыбора.Серия)
					Или (ТребуетсяЗаполнитьИдентификаторВЕТИС
						И ЗаполняемыеПоля.ИдентификаторПроисхожденияВЕТИС <> ДанныеВЕТИС.ИдентификаторПроисхожденияВЕТИС)
					Или (ТребуетсяЗаполнитьСрокГодности
						И ЗаполняемыеПоля.ГоденДо <> ?(ДанныеВЕТИС.НачалоПериода <> Макс(ДанныеВЕТИС.НачалоПериода, ДанныеВЕТИС.КонецПериода), Неопределено, ДанныеВЕТИС.НачалоПериода)) Тогда 
				ПодходитСтрок = ПодходитСтрок + 1;
			КонецЕсли;
		// Простое заполнение серии по основанию
		Иначе
			Если ПодходитСтрок = 0 Тогда
				ЗаполняемыеПоля.Серия = ВариантВыбора.Серия;
				ПодходитСтрок = 1;
			ИначеЕсли ЗаполняемыеПоля.Серия <> ВариантВыбора.Серия Тогда
				ПодходитСтрок = ПодходитСтрок + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодходитСтрок = 0 Тогда
		Возврат Ложь;
	ИначеЕсли ПодходитСтрок = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЗаполняемыеПоля);
		Возврат Истина;
	ИначеЕсли ДанныеДокумента = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеДокумента.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
		ПолеСрокГодности = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента[0], "СрокГодности"),"СрокГодности", "ГоденДо");
		Если ЗначениеЗаполнено(СтрокаДанных.ГоденДо) Тогда
			Отбор.Вставить(ПолеСрокГодности, НачалоДня(СтрокаДанных.ГоденДо));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
			И ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		Отбор.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// Заполнение серией для которой проверка не завершена (единственный вариант из текущего документа)
	ПроверятьИзКолонкиСтатусПроверки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "СтатусПроверкиГосИС");
	ПроверятьИзКолонкиКоличествоПодобрано = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденныеСтроки[0], "КоличествоПодобрано");
	Если Не (ПроверятьИзКолонкиСтатусПроверки Или ПроверятьИзКолонкиКоличествоПодобрано) Тогда
		Возврат Ложь;
	КонецЕсли;
	ПодходитСтрок = 0;
	Для Каждого ВариантВыбора Из НайденныеСтроки Цикл
		Если ПроверятьИзКолонкиСтатусПроверки И ВариантВыбора.СтатусПроверкиГосИС = 1 Тогда
			Продолжить;
		ИначеЕсли ПроверятьИзКолонкиКоличествоПодобрано И ВариантВыбора.Количество <= ВариантВыбора.КоличествоПодобрано Тогда
			Продолжить;
		ИначеЕсли ПараметрыСканирования.ЗаполнятьДанныеВЕТИС
				И Не ЗначениеЗаполнено(ВариантВыбора.ИдентификаторПроисхожденияВЕТИС) Тогда
			Продолжить;
		ИначеЕсли ПараметрыСканирования.ЗаполнятьСрокГодности
				И Не ЗначениеЗаполнено(ВариантВыбора[ПолеСрокГодности]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодходитСтрок = 0 Тогда
			ПодходитСтрок = 1;
			ЗаполнитьЗначенияСвойств(ЗаполняемыеПоля, ВариантВыбора);
			Если ТребуетсяЗаполнитьСрокГодности Тогда
				ЗаполняемыеПоля.ГоденДо = ВариантВыбора[ПолеСрокГодности];
			КонецЕсли;
		ИначеЕсли (ЗаполняемыеПоля.Свойство("Серия")
				И ЗаполняемыеПоля.Серия <> ВариантВыбора.Серия)
			Или (ТребуетсяЗаполнитьИдентификаторВЕТИС
				И ЗаполняемыеПоля.ИдентификаторПроисхожденияВЕТИС <> ВариантВыбора.ИдентификаторПроисхожденияВЕТИС)
			Или (ТребуетсяЗаполнитьСрокГодности
				И ЗаполняемыеПоля.ГоденДо <> ВариантВыбора[ПолеСрокГодности]) Тогда 
				ПодходитСтрок = ПодходитСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	Если ПодходитСтрок = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЗаполняемыеПоля);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьПоСтрокуПоДаннымШтрихкодовДокумента(ДанныеПоШтрихкодам, СтрокаДанных, ПараметрыСканирования, ДанныеШтрихкодовДокумента) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ДанныеШтрихкодовДокумента = Неопределено
		Или Не ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования) Тогда
		
		ДанныеДокументаПоШтрихкоду = ДанныеШтрихкодовДокумента.Получить(СтрокаДанных.ШтрихкодУпаковки);
		
		Если ДанныеДокументаПоШтрихкоду <> Неопределено
			И ЗначениеЗаполнено(ДанныеДокументаПоШтрихкоду.Количество) Тогда
			
			СтрокаДанных.Количество       = ДанныеДокументаПоШтрихкоду.Количество;
			СтрокаДанных.ЧастичноеВыбытие = Истина;
			ВозвращаемоеЗначение          = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Дополняет дерево упаковок структуры "ДанныеПоШтрихкодам", специфика ИСМП.
// * Маркировка молочной продукции: для логистических упаковок возможно заполнение общих идентификаторов ВетИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам)
//  ОбновленныеКодыМаркировки - Массив - коды маркировки, в которых обновлялись реквизиты
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования)
Процедура ОбновитьДеревоУпаковок(ДанныеПоШтрихкодам, Знач ОбновленныеКодыМаркировки, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновляемыеГруппы = Новый Массив;
	Для Каждого СтрокаТаблицыКоды Из ОбновленныеКодыМаркировки Цикл
		Если СтрокаТаблицыКоды.СтрокаДерева <> Неопределено Тогда
			СтрокаТаблицыКоды.СтрокаДерева.ИдентификаторПроисхожденияВЕТИС = СтрокаТаблицыКоды.ИдентификаторПроисхожденияВЕТИС;
			Если ПараметрыСканирования.ЗаполнятьСрокГодности Или ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности Тогда
				СтрокаТаблицыКоды.СтрокаДерева.ГоденДо = СтрокаТаблицыКоды.ГоденДо;
			КонецЕсли;
			ОбновитьГруппу = СтрокаТаблицыКоды.СтрокаДерева.Родитель;
			Если ОбновитьГруппу <> Неопределено И ОбновляемыеГруппы.Найти(ОбновитьГруппу) = Неопределено Тогда
				ОбновляемыеГруппы.Добавить(ОбновитьГруппу);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пока ОбновляемыеГруппы.Количество() Цикл
		НоваяИтерация = Новый Массив;
		Для Каждого Группа Из ОбновляемыеГруппы Цикл
			Результат = Новый Структура("ОбщаяСпецифика, ИдентификаторПроисхожденияВЕТИС, ГоденДо");
			Для Каждого ВложенныйЭлемент Из Группа.Строки Цикл
				Если Результат.ОбщаяСпецифика = Ложь Тогда
				ИначеЕсли ПараметрыСканирования.ЗаполнятьСрокГодности И Не ЗначениеЗаполнено(ВложенныйЭлемент.ГоденДо) Тогда
					Результат.ОбщаяСпецифика = Ложь;
				ИначеЕсли Результат.ОбщаяСпецифика = Неопределено Тогда
					Результат.ОбщаяСпецифика = Истина;
					Результат.ИдентификаторПроисхожденияВЕТИС = ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС;
					Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
						Результат.ГоденДо = ВложенныйЭлемент.ГоденДо;
					КонецЕсли;
				ИначеЕсли Результат.ИдентификаторПроисхожденияВЕТИС <> ВложенныйЭлемент.ИдентификаторПроисхожденияВЕТИС
					Или (ПараметрыСканирования.ЗаполнятьСрокГодности И Результат.ГоденДо <> ВложенныйЭлемент.ГоденДо) Тогда
					Результат.ОбщаяСпецифика = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если Результат.ОбщаяСпецифика Тогда
				Группа.ИдентификаторПроисхожденияВЕТИС = Результат.ИдентификаторПроисхожденияВЕТИС;
				Если ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
					Группа.ГоденДо = Результат.ГоденДо;
				КонецЕсли;
				ОбновитьГруппу = Группа.Родитель;
				Если ОбновитьГруппу <> Неопределено И НоваяИтерация.Найти(ОбновитьГруппу) = Неопределено Тогда
					НоваяИтерация.Добавить(ОбновитьГруппу);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбновляемыеГруппы = НоваяИтерация;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИСМП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииСЗапросомСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

КонецПроцедуры

// Дополняет данные, полученные по штрихкодам спецификой, характерной для продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ПараметрыДополнения   - Неопределено - Поддержка обратной совместимости.
//                        - см. ШтрихкодированиеИС.ПараметрыДополненияВложенныхШтрихкодовУпаковок.
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения = Неопределено) Экспорт
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ДанныеПоШтрихкодам, "ТекстОшибки, ЕстьОшибки, ТребуетсяОбновлениеКлючаСессии");
		КонецЕсли;
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	ДополнитьДанныеПоШтрихкодамПараметрамиДополнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения);
	ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	// Заполнение количества вложенных единиц по коэффициентам упаковок и коэффициентам из таблицы Описание GTIN
	СтрокиДляЗаполнения = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если (ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
			// Определение вида упаковки для кодов ОСУ с GTIN, несопоставленных с номенклатурой
			Или (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаДанных.ДополнительныеПараметры = Неопределено) Тогда
			СтрокиДляЗаполнения.Добавить(СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
		// Заполнить только коэффициенты упаковок, если не заполнены ранее
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиДляЗаполнения, ПараметрыСканирования, Ложь);
	Иначе
		// Заполнить коэффициенты упаковок и количество вложенных пачек
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиДляЗаполнения, ПараметрыСканирования);
	КонецЕсли;
	
	ДополнитьДанныеПоШтрихкодамСпецификойЧастичногоВыбытия(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Дополняет данные по штрихкодам переданными данными, например, из сохраненных данных в документе.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ПараметрыДополнения   - см. ШтрихкодированиеИС.ПараметрыДополненияВложенныхШтрихкодовУпаковок.
Процедура ДополнитьДанныеПоШтрихкодамПараметрамиДополнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения) Экспорт
	
	Если ПараметрыДополнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляЗаполнения = Новый Соответствие();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ШтрихкодУпаковки = Неопределено
			Или Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполненияПоГИСМТ             = ПараметрыДополнения.ДанныеЗапросаГИСМТ.Получить(СтрокаДанных.ШтрихкодУпаковки);
		ДанныеЗаполненияПоЧастичномуВыбытию = ПараметрыДополнения.ДанныеЧастичногоВыбытия.Получить(СтрокаДанных.ШтрихкодУпаковки);
		
		Если ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено И ДанныеЗаполненияПоГИСМТ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхПоСтроке = Новый Структура("ДанныеЧастичногоВыбытия, ДанныеЗапросаГИСМТ");
		
		Если Не ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено Тогда
			СтруктураДанныхПоСтроке.ДанныеЧастичногоВыбытия = ДанныеЗаполненияПоЧастичномуВыбытию;
		КонецЕсли;
		
		Если Не ДанныеЗаполненияПоГИСМТ = Неопределено Тогда
			СтруктураДанныхПоСтроке.ДанныеЗапросаГИСМТ = ДанныеЗаполненияПоГИСМТ;
		КонецЕсли;
		
		СтрокиДляЗаполнения.Вставить(СтрокаДанных, СтруктураДанныхПоСтроке);
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
		
			Если СтрокаДанных.ШтрихкодУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеЗаполненияПоГИСМТ             = ПараметрыДополнения.ДанныеЗапросаГИСМТ.Получить(СтрокаДанных.ШтрихкодУпаковки);
			ДанныеЗаполненияПоЧастичномуВыбытию = ПараметрыДополнения.ДанныеЧастичногоВыбытия.Получить(СтрокаДанных.ШтрихкодУпаковки);
			
			Если ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено И ДанныеЗаполненияПоГИСМТ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхПоСтроке = Новый Структура("ДанныеЧастичногоВыбытия, ДанныеЗапросаГИСМТ");
		
			Если Не ДанныеЗаполненияПоЧастичномуВыбытию = Неопределено Тогда
				СтруктураДанныхПоСтроке.ДанныеЧастичногоВыбытия = ДанныеЗаполненияПоЧастичномуВыбытию;
			КонецЕсли;
			
			Если Не ДанныеЗаполненияПоГИСМТ = Неопределено Тогда
				СтруктураДанныхПоСтроке.ДанныеЗапросаГИСМТ = ДанныеЗаполненияПоГИСМТ;
			КонецЕсли;
			
			СтрокиДляЗаполнения.Вставить(СтрокаДанных, СтруктураДанныхПоСтроке);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокиДляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия = ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие();
	ШаблонныйЭлементДляЗаполненияДанныхГИСМТ       = ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокДанныеГИСМТ();
	
	Для Каждого КлючИЗначение Из ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия Цикл
		ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ШаблонныйЭлементДляЗаполненияДанныхГИСМТ Цикл
		ШаблонныйЭлементДляЗаполненияДанныхГИСМТ[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтрокиДляЗаполнения Цикл
		
		СтрокаДанных     = КлючИЗначение.Ключ;
		ДанныеЗаполнения = КлючИЗначение.Значение;
		
		ДанныеЗаполненияПоЧастичномуВыбытию = ДанныеЗаполнения.ДанныеЧастичногоВыбытия;
		ДанныеЗапросаГИСМТ                  = ДанныеЗаполнения.ДанныеЗапросаГИСМТ;
		
		Если ДанныеЗаполненияПоЧастичномуВыбытию <> Неопределено
			И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина) Тогда

			Если ЗначениеЗаполнено(ДанныеЗаполненияПоЧастичномуВыбытию[ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия.Количество]) Тогда
				СтрокаДанных.ЧастичноеВыбытие = Истина;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.ЧастичноеВыбытие = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из ШаблонныйЭлементДляЗаполненияЧастичногоВыбытия Цикл
				
				Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ДанныеЗаполненияПоЧастичномуВыбытию, КлючИЗначение.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева[КлючИЗначение.Значение] = ДанныеЗаполненияПоЧастичномуВыбытию[КлючИЗначение.Ключ];
				КонецЕсли;
				
				СтрокаДанных[КлючИЗначение.Значение] = ДанныеЗаполненияПоЧастичномуВыбытию[КлючИЗначение.Ключ];
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДанныеЗапросаГИСМТ <> Неопределено
			И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина) Тогда
		
			Для Каждого КлючИЗначение Из ШаблонныйЭлементДляЗаполненияДанныхГИСМТ Цикл
				
				Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ДанныеЗапросаГИСМТ, КлючИЗначение.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					СтрокаДанных, КлючИЗначение.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева[КлючИЗначение.Значение] = ДанныеЗапросаГИСМТ[КлючИЗначение.Ключ];
				КонецЕсли;
				
				СтрокаДанных[КлючИЗначение.Значение] = ДанныеЗапросаГИСМТ[КлючИЗначение.Ключ];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Режим работы с групповыми потребительскими упаковками без индивидуальных.
//  * Заполнение количества в групповых товарных упаковках.
// 
// Параметры:
//  ДанныеКодовМаркировки - Массив из СтрокаТаблицыЗначений - Строки таблицы "ДанныеКодовМаркировки",
//                                                          которые будут заполненые спецификой.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ЗаполнятьКоличествоПотребительскихУпаковок - Булево - заполнение количества в строке по данным групповых упаковок.
Процедура ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеКодовМаркировки, ПараметрыСканирования, ЗаполнятьКоличествоПотребительскихУпаковок = Истина) Экспорт
	
	ПодозрительныеУпаковки = Новый Массив;
	НетКоэффициента        = Новый Массив;
	НетКоличества          = Новый Массив;
	
	СписокGTIN     = Новый Массив;
	УникальныеGTIN = Новый Соответствие;
	
	НоменклатураКПолучениюОписания = Новый Массив;
	УникальнаяНоменклатура = Новый Соответствие;
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
			
			Если (Не ЗначениеЗаполнено(СтрокаДанных.Коэффициент) И Не СтрокаДанных.ТребуетВзвешивания)
				Или СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 0 Тогда
				
				НетКоэффициента.Добавить(СтрокаДанных);
				
				Если УникальныеGTIN[СтрокаДанных.GTIN] = Неопределено Тогда
					СписокGTIN.Добавить(СтрокаДанных.GTIN);
					УникальныеGTIN.Вставить(СтрокаДанных.GTIN, Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
					И УникальнаяНоменклатура[СтрокаДанных.Номенклатура] = Неопределено Тогда
					НоменклатураКПолучениюОписания.Добавить(СтрокаДанных.Номенклатура);
					УникальнаяНоменклатура.Вставить(СтрокаДанных.Номенклатура, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтоМультитоварныйНабор = (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
			
			// Кандидаты - это пустые упаковки или упаковки с сомнительным количеством
			// Для ОСУ количество потребительских упаковок не запрашивается, поэтому заполняется плановым количеством
			Если ЗаполнятьКоличествоПотребительскихУпаковок
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				
				Если СтрокаДанных.КоличествоПотребительскихУпаковок < 2
					И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
					И Не ЭтоМультитоварныйНабор Тогда
					
					ПодозрительныеУпаковки.Добавить(СтрокаДанных);
					
					Если УникальныеGTIN[СтрокаДанных.GTIN] = Неопределено Тогда
						СписокGTIN.Добавить(СтрокаДанных.GTIN);
						УникальныеGTIN.Вставить(СтрокаДанных.GTIN, Истина);
					КонецЕсли;
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.КоличествоПотребительскихУпаковок)
					И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или ЭтоМультитоварныйНабор Тогда
					
					ПодозрительныеУпаковки.Добавить(СтрокаДанных);
					
					Если УникальныеGTIN[СтрокаДанных.GTIN] = Неопределено Тогда
						СписокGTIN.Добавить(СтрокаДанных.GTIN);
						УникальныеGTIN.Вставить(СтрокаДанных.GTIN, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.Количество = 0 Тогда
				
				Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
					И УникальнаяНоменклатура[СтрокаДанных.Номенклатура] = Неопределено Тогда
					НоменклатураКПолучениюОписания.Добавить(СтрокаДанных.Номенклатура);
					УникальнаяНоменклатура.Вставить(СтрокаДанных.Номенклатура, Истина);
				КонецЕсли;
				
				НетКоличества.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокGTIN.Количество() > 0 Или ПодозрительныеУпаковки.Количество() > 0 Тогда
		Коэффициенты = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(СписокGTIN);
	КонецЕсли;
	
	Если НоменклатураКПолучениюОписания.Количество() > 0 Тогда
		ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(НоменклатураКПолучениюОписания);
	КонецЕсли;
	
	// Заполнение коэффициента
	Для Каждого СтрокаДанных Из НетКоэффициента Цикл
		
		ОписаниеGTIN = Коэффициенты.Получить(СтрокаДанных.GTIN);
		
		ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок(
			СтрокаДанных, ОписаниеGTIN, СозданиеНаборов);
		
		Если ПлановоеКоличествоПотребительскихУпаковок <> Неопределено Тогда
			
			СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок;
			
			КоэффициентУстановлен = Ложь;
			Если ОписанияНоменклатуры <> Неопределено
				И ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				
				ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(СтрокаДанных.Номенклатура);
				Если ОписаниеНоменклатуры = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				КоэффициентПересчета = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
				СтрокаДанных.ТребуетВзвешивания = (КоэффициентПересчета = 0);
				СтрокаДанных.ПроизвольнаяЕдиницаУчета = (КоэффициентПересчета <> 1);
				
				Если СтрокаДанных.ТребуетВзвешивания Тогда
					СтрокаДанных.Коэффициент = 0;
				Иначе
					СтрокаДанных.Коэффициент = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
				КонецЕсли;
				
				КоэффициентУстановлен = Истина;
				
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				
				Если КоэффициентУстановлен Тогда
					СтрокаДанных.СтрокаДерева.Коэффициент = СтрокаДанных.Коэффициент;
				КонецЕсли;
				
				СтрокаДанных.СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение количества потребительских упаковок
	Для Каждого СтрокаДанных Из ПодозрительныеУпаковки Цикл
		
		ОписаниеGTIN = Коэффициенты.Получить(СтрокаДанных.GTIN);
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок) Тогда
			ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок(СтрокаДанных, ОписаниеGTIN, СозданиеНаборов);
		Иначе
			ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		Если ПлановоеКоличествоПотребительскихУпаковок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И ПлановоеКоличествоПотребительскихУпаковок < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляКоличества = Новый Структура(
			"КоличествоПотребительскихУпаковок, ПлановоеКоличествоПотребительскихУпаковок",
			ПлановоеКоличествоПотребительскихУпаковок, ПлановоеКоличествоПотребительскихУпаковок);
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			ПоляКоличества.Вставить("КоличествоГрупповыхУпаковок", 1);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ПоляКоличества);
		Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, ПоляКоличества);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанных Из НетКоличества Цикл
		
		Если ОписанияНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(СтрокаДанных.Номенклатура);
		Если ОписаниеНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентПересчета = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
		СтрокаДанных.ТребуетВзвешивания = (КоэффициентПересчета = 0);
		СтрокаДанных.ПроизвольнаяЕдиницаУчета = (КоэффициентПересчета <> 1);
		
		Если Не СтрокаДанных.ТребуетВзвешивания Тогда
			СтрокаДанных.Количество = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.Количество = СтрокаДанных.Количество;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПлановоеКоличествоПотребительскихУпаковок(СтрокаДанных, ОписаниеGTIN, СозданиеНаборов)
	
	ПлановоеКоличествоПотребительскихУпаковок = Неопределено;
	
	КоличествоПотребительскихУпаковокGTIN02 = Неопределено;
	Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
		И СтрокаДанных.СоставКодаМаркировки <> Неопределено Тогда
		СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц", КоличествоПотребительскихУпаковокGTIN02);
	КонецЕсли;
	
	Если ОписаниеGTIN <> Неопределено Тогда

		ПлановоеКоличествоПотребительскихУпаковок = ОписаниеGTIN.КоличествоПотребительскихУпаковок;
		Если КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда
			ПлановоеКоличествоПотребительскихУпаковок = ОписаниеGTIN.КоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) И ЗначениеЗаполнено(ОписаниеGTIN.ВидУпаковки) Тогда
			Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
					СтрокаДанных.ВидПродукции, ОписаниеGTIN.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
				СтрокаДанных.ВидУпаковки = ОписаниеGTIN.ВидУпаковки;
			КонецЕсли;
		КонецЕсли;

		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			И ЗначениеЗаполнено(ОписаниеGTIN.ВидУпаковки) Тогда
			Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
				СтрокаДанных.ДополнительныеПараметры = Новый Структура;
			КонецЕсли;
			СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", ОписаниеGTIN.ВидУпаковки);
		КонецЕсли;

	ИначеЕсли КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда
		ПлановоеКоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковокGTIN02;
	КонецЕсли;
	
	Если ПлановоеКоличествоПотребительскихУпаковок = Неопределено
		И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		ПлановоеКоличествоПотребительскихУпаковок = 1;
	ИначеЕсли Не ЗначениеЗаполнено(ПлановоеКоличествоПотребительскихУпаковок) // 0 или Неопределено
		И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И Не СозданиеНаборов
		И СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		ПлановоеКоличествоПотребительскихУпаковок = 1;
	ИначеЕсли Не ЗначениеЗаполнено(ПлановоеКоличествоПотребительскихУпаковок) // 0 или Неопределено
		И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И Не СозданиеНаборов
		И СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		
		// Выполняется создание упаковок при завершении проверки
		Если ТипЗнч(СтрокаДанных) = Тип("СтрокаДереваЗначений") Тогда
			Если СтрокаДанных.Строки.Количество()
				И СтрокаДанных.Номенклатура <> СтрокаДанных.Строки[0].Номенклатура Тогда
				ПлановоеКоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
		ИначеЕсли СтрокаДанных.СтрокаДерева <> Неопределено
			И СтрокаДанных.СтрокаДерева.Строки.Количество()
			И СтрокаДанных.СтрокаДерева.Номенклатура <> СтрокаДанных.СтрокаДерева.Строки[0].Номенклатура Тогда
			ПлановоеКоличествоПотребительскихУпаковок = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПлановоеКоличествоПотребительскихУпаковок;
	
КонецФункции

// Заполняет в таблице ДанныеКодовМаркировки GTIN потребительских упаковок для заполнения группы ОСУ
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьGTINПотребительскихУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ЗаполнятьGTINПотребительскихУпаковок = ПараметрыСканирования.Свойство("ЗаполнятьGTINПотребительскихУпаковок")
		И ПараметрыСканирования.ЗаполнятьGTINПотребительскихУпаковок;
	Если Не ЗаполнятьGTINПотребительскихУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляЗаполнения = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.GTINПотребительскойУпаковки)
			И ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			СтрокаДанных.GTINПотребительскойУпаковки = GTINПотребительскойУпаковкиРекурсивно(СтрокаДанных.СтрокаДерева);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.GTINПотребительскойУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДляЗаполнения.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	ДанныеДляУточнения = ИнтеграцияИСМП.ДанныеДляУточненияКоэффициентовУпаковок(СтрокиДляЗаполнения);
	
	ДопустимыеВидыУпаковок = Новый Массив;
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Потребительская);
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Набор);
	
	Для Каждого СтрокаДанных Из СтрокиДляЗаполнения Цикл
		
		Потребительские = Новый Массив;
		Неопределенные  = Новый Массив;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаДанных.Характеристика);
		
		НайденныеСтроки = ДанныеДляУточнения.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если ЗначениеЗаполнено(НайденнаяСтрока.ВидУпаковки)
				И ДопустимыеВидыУпаковок.Найти(НайденнаяСтрока.ВидУпаковки) = Неопределено Тогда
				Продолжить;
			ИначеЕсли НайденнаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или НайденнаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				Потребительские.Добавить(НайденнаяСтрока.GTIN);
			ИначеЕсли Не ЗначениеЗаполнено(НайденнаяСтрока.ВидУпаковки) И Не ЗначениеЗаполнено(НайденнаяСтрока.Упаковка) Тогда
				Неопределенные.Добавить(НайденнаяСтрока.GTIN);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = "";
		Если Потребительские.Количество() = 1 Тогда
			СтрокаДанных.GTINПотребительскойУпаковки = Потребительские[0];
		ИначеЕсли Потребительские.Количество() > 1 Тогда
			ТекстОшибки = НСтр("ru = 'Для номенклатуры определено несколько GTIN потребительских упаковок.
			                         |Выполните настройку видов упаковок в карточке номенклатуры.'");
		ИначеЕсли Неопределенные.Количество() = 1 Тогда
			СтрокаДанных.GTINПотребительскойУпаковки = Неопределенные[0];
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось определить GTIN потребительской упаковки.
			                         |Выберите GTIN потребительской упаковки в карточке номенклатуры.'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки)
			И Не ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция GTINПотребительскойУпаковкиРекурсивно(СтрокаДереваВерхнегоУровня)
	
	Если СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или СтрокаДереваВерхнегоУровня.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		Возврат СтрокаДереваВерхнегоУровня.GTIN;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаДереваВерхнегоУровня.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			Возврат СтрокаДерева.GTIN;
		Иначе
			Возврат GTINПотребительскойУпаковкиРекурсивно(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивИНН = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ИННВладельца");
	МассивИНН = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИНН);
	Если МассивИНН.Количество() > 0 Тогда
		
		КонтрагентыПоИНН = ИнтеграцияИСМП.КонтрагентыПоСпискуИНН(МассивИНН);
		ОрганизацииПоИНН = ИнтеграцияИСМП.ОрганизацииПоСпискуИНН(МассивИНН);
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец)
				И ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				СтрокаДанных.Владелец = КонтрагентыПоИНН.Получить(СтрокаДанных.ИННВладельца);
				Если Не ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
					СтрокаДанных.Владелец = ОрганизацииПоИНН.Получить(СтрокаДанных.ИННВладельца);
				КонецЕсли;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Владелец = СтрокаДанных.Владелец;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнить представления номенклатуры для продукции из натурального меха.
	Если ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ
		Или ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
		ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, Истина);
	КонецЕсли;

КонецПроцедуры

// Дополняет свойства структуры Данные штрихкода свойствами, которые используются только для продукции ИС МП.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт
	
	ДанныеШтрихкода.Вставить("ИННВладельца"                       "");
	ДанныеШтрихкода.Вставить("Владелец",                          Неопределено);
	ДанныеШтрихкода.Вставить("Статус",                            Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"               "");
	ДанныеШтрихкода.Вставить("КоличествоПотребительскихУпаковок", 1);
	ДанныеШтрихкода.Вставить("ИННПроизводителя",                  "");
	ДанныеШтрихкода.Вставить("Производитель",                     Неопределено);
	ДанныеШтрихкода.Вставить("НаименованиеПроизводителя",         "");
	ДанныеШтрихкода.Вставить("ДатаЭмиссии",                       Неопределено);
	ДанныеШтрихкода.Вставить("ИдентификатоДокумента",             Неопределено);
	ДанныеШтрихкода.Вставить("ГоденДо",                           Неопределено);
	ДанныеШтрихкода.Вставить("GTIN",                              "");
	ДанныеШтрихкода.Вставить("СпособВводаВОборот",                Неопределено);
	ДанныеШтрихкода.Вставить("ОсобоеСостояние",                   Неопределено);
	ДанныеШтрихкода.Вставить("ДатаВводаВОборот",                  Неопределено);
	ДанныеШтрихкода.Вставить("ДатаСписания",                      Неопределено);
	
КонецПроцедуры

// Сохраняет коды маркировки из дерева упаковок в пул.
// 
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура СохранениеКодовМаркировкиВПул(ДеревоУпаковок, ПараметрыСканирования) Экспорт 
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода();
	Для Каждого ДанныеШтрихкода Из ДеревоУпаковок.Строки Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
			СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
		КонецЕсли;
		СохранениеКодовМаркировкиВПул(ДанныеШтрихкода, ПараметрыСканирования);
	КонецЦикла;
КонецПроцедуры

// Сохраняет код маркировки в ПулКодовМаркировкиСУЗ с проверкой необходимости.
// 
// Параметры:
// 	РезультатОбработки    - Структура - результа обработки штрихкода.
// 	ДанныеШтрихкода       - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
		И Не ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	ПропускатьПоНаличиюВПуле          = ДанныеШтрихкода.ЕстьВПулеКодовМаркировки;
	ДанныеРазбора                     = ДанныеШтрихкода.ДанныеРазбора;
	
	Если ПропускатьПоНаличиюВПуле
		И (ПроверятьСтруктуруКодовМаркировки
		   Или ДанныеРазбора <> Неопределено // Для пересохранения восстановленных разделителей GS
		   И ДанныеРазбора.Свойство("Детализация")
		   И ДанныеРазбора.Свойство("СоставКодаМаркировки")
		   И ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
		   И ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост
		   И Не ДанныеРазбора.Детализация.СодержитРазделительGS)
		И ЗначениеЗаполнено(ДанныеШтрихкода.ПолныйКодМаркировки)
		И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64)
		И ДанныеШтрихкода.ШтрихкодBase64 <> ДанныеШтрихкода.ПолныйКодМаркировки Тогда
		
		ПропускатьПоНаличиюВПуле = Ложь;
		
	КонецЕсли;
	
	ВидУпаковки                             = ДанныеШтрихкода.ВидУпаковки;
	ВидУпаковкиТребуетСохраненияПолногоКода = Ложь;
	
	Если ЗначениеЗаполнено(ВидУпаковки) Тогда
		
		ВидУпаковкиТребуетСохраненияПолногоКода = (
			    ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор);
		
	ИначеЕсли ДанныеРазбора <> Неопределено
		И ДанныеРазбора.Свойство("ВидыУпаковокПоВидамПродукции") Тогда
		
		ВидыУпаковокПоВидуПродукции = ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ДанныеШтрихкода.ВидПродукции];
		Если ВидыУпаковокПоВидуПродукции <> Неопределено
			И (ВидыУпаковокПоВидуПродукции.Найти(Перечисления.ВидыУпаковокИС.Потребительская) <> Неопределено
				Или ВидыУпаковокПоВидуПродукции.Найти(Перечисления.ВидыУпаковокИС.Групповая) <> Неопределено
				Или ВидыУпаковокПоВидуПродукции.Найти(Перечисления.ВидыУпаковокИС.Набор) <> Неопределено) Тогда
			ВидУпаковкиТребуетСохраненияПолногоКода = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ШтрихкодированиеОбщегоНазначенияИС.ОбработкаДанныхПоШтрихкодамУспешноЗавершена(РезультатОбработки)
		Или Не ВидУпаковкиТребуетСохраненияПолногоКода
		Или ПропускатьПоНаличиюВПуле
		Или ДанныеШтрихкода.ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		ДанныеРазбора = ДанныеШтрихкода.ДанныеРазбора;
		
		ВключаетКриптоХвост = ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
			И ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост;
		ВключаетМРЦ = ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ;
		
		Если ПроверятьСтруктуруКодовМаркировки И Не ВключаетКриптоХвост Тогда
			Возврат;
		Иначе
			Если Не ВключаетКриптоХвост И ВключаетМРЦ И ДанныеШтрихкода.ЕстьВПулеКодовМаркировки Тогда
				Возврат;
			ИначеЕсли Не (ВключаетМРЦ Или ВключаетКриптоХвост) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
		
		НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора,
			ДанныеШтрихкода.ВидПродукции,
			ПараметрыНормализацииКМ);
		
		Если НормализованныйКод <> ДанныеРазбора.КодМаркировки Тогда
			
			ДанныеЗаписи = Новый Структура();
			ДанныеЗаписи.Вставить("КодМаркировки", НормализованныйКод);
			
			РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаписатьДанныеКодаМаркировки(
				ДанныеШтрихкода,
				ПараметрыСканирования,
				ДанныеЗаписи);
			
			Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ПолныйКодМаркировки) Тогда
				ДанныеШтрихкода.ПолныйКодМаркировки = ДанныеШтрихкода.ШтрихкодBase64;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
			Возврат;
		КонецЕсли;
		
		РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаписатьДанныеКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Реализует обработку действий пользователя. Возвращает результат обработки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеОбщегоНазначенияИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьВыборСерии" Или Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Получает данные из государственных информационных систем и заполняет данные для упаковок, о которых нет никакой
// информации в справочнике Штрихкоды упаковок.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	МассивСтрокТаблицы = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДанных.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.Идентифицирован Тогда
			Если Не СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаДанных, ПараметрыСканирования) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПрисутствуетПродукцияИСМП = ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки);
		ЭтоЛогистическаяИлиГрупповаяУпаковка = ОбщегоНазначенияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки,, Ложь)
			Или (Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И СтрокаДанных.ДанныеРазбора <> Неопределено
				И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
					СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора));
		
		// Сканирование весовой молочной продукции в форме проверки проходит через штрихкодирования
		// для активации уточнения веса.
		ЭтоЗаполненнаяУпаковкаСокращеннойДетализации = СтрокаДанных.КоличествоПотребительскихУпаковок > 0
			И ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И (ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами
				Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
				Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки);
		
		// В каких случаях требуется выдавать сообщение об ошибке, если ЗапрашиватьДанныеНеизвестныхУпаковок = Ложь
		// - если в упаковке нет GTIN
		// - В зависимости от детализации:
		//     * Полная                                          - сканируем короб или групповую упаковку (блок)
		//     * Индивидуальные потребительские упаковки (пачки) - сканируем короб или групповую упаковку (блок)
		//     * Блоки с потребительскими упаковками (пачками)   - сканируем короб или групповую упаковку (блок)
		//     * Короба с групповыми упаковками (блоками)        - сканируем короб
		//     * Потребительские упаковки                        - сканируем короб
		Если ПрисутствуетПродукцияИСМП
			И Не ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования)
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок
			И Не ЭтоЗаполненнаяУпаковкаСокращеннойДетализации
			И Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДанных.Штрихкод) Тогда
			
			ТекстОшибки = Неопределено;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И Не ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В коде упаковки не содержится GTIN, невозможно определить
					      |количество вложенных потребительских упаковок.
					      |Включите опцию ""Запрашивать данные сервиса ГИС МТ""
					      |в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте содержимое упаковки.'");
				
			КонецЕсли;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И (ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная
				Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДетализацияСтруктурыХранения))
				И ПараметрыСканирования.ВидОперацииИСМП <> Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Полная"" обработка логистических упаковок и групповых упаковок
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные пачки
					      |или измените режим детализации на ""Коробки с групповыми упаковками"".'");
				
			КонецЕсли;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Потребительские упаковки"" обработка логистических упаковок и групповых упаковок
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные потребительские упаковки
					      |или измените режим детализации на ""Коробки с групповыми упаковками"".'");
				
			КонецЕсли;
			
			Если ЭтоЛогистическаяИлиГрупповаяУпаковка
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Групповые упаковки с потребительскими"" обработка логистических упаковок
					      |и групповых упаковок невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные потребительские упаковки
					      |или измените режим детализации на ""Коробки с групповыми упаковками"".'");
				
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
				
				ТекстОшибки = НСтр(
					"ru = 'В режиме детализации: ""Коробки с групповыми упаковками"" обработка логистических упаковок
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки""
					      |или отсканируйте вложенные групповые упаковки
					      |или измените режим детализации на ""Палеты с коробками"".'");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) ТОгда
				Если ПустаяСтрока(СтрокаДанных.ТекстОшибки) Тогда
					СтрокаДанных.ТекстОшибки = ТекстОшибки;
				Иначе
					СтрокаДанных.ТекстОшибки = СтрШаблон(
						"%1
						|%2", СтрокаДанных.ТекстОшибки, ТекстОшибки);
				КонецЕсли;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтрокаДанных.Идентифицирован
			И ПрисутствуетПродукцияИСМП
			И Не ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки)
			И ЭтоЛогистическаяИлиГрупповаяУпаковка
			И Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДанных.Штрихкод) Тогда

			МассивСтрокТаблицы.Добавить(СтрокаДанных);
			СтрокаДанных.Идентифицирован = ЗначениеЗаполнено(СтрокаДанных.GTIN);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В маркировке товаров разрешено добавлять пустые упаковки при выключенном запросе статусов
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
		
		Результат = ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования);
		
		Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		КонецЕсли;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Истина);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Ложь);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Истина);
		ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Ложь);
		ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Ложь);
		
		ОбработатьДеревоПолученноеИзИСМП(
			Результат.ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования,
			ПараметрыОбработки);
		
	Иначе
		
		// Заполнить коэффициенты упаковок и количество вложенных пачек
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(МассивСтрокТаблицы, ПараметрыСканирования);
		
	КонецЕсли;
	
	ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Получает дерево упаковок по данным ИС МП.
// 
// Параметры:
//  МассивСтрокТаблицы - Массив из СтрокаТаблицыЗначений - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ТребуемаяДетализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Требуемая детализация.
// Возвращаемое значение:
//  Структура - Описание:
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация пользователя.
// * ТекстОшибки - Строка - Описание ошибки при попытке получения дерева упаковок из сервиса.
// * ДеревоУпаковок - ДеревоЗначений - иерархия паковок.
// * GTIN - ТаблицаЗначений -:
// ** GTIN - Строка - GTIN кода маркировки.
Функция ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования, ТребуемаяДетализация = Неопределено) Экспорт
	
	Если ТребуемаяДетализация = Неопределено Тогда
		Детализация = ПараметрыСканирования.ДетализацияСтруктурыХранения;
		
		ПравилаДетализацииДереваУпаковок = ШтрихкодированиеМОТП.ПравилаДетализацииДереваУпаковок();
		ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
		
		// Полная детализация требуется для того, что бы в ДанныхКодовМаркировки можно
		// было найти информацию о вложенных единицах. В противном случае разрывается связь
		// между кодами из сервиса и считанными штрихкодами.
		Если ЗначениеЗаполнено(ПравилоДетализации) И ПравилоДетализации.РазрешеныПачки Тогда
			Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
		КонецЕсли;
	Иначе
		Детализация = ТребуемаяДетализация;
	КонецЕсли;
	
	РезультатПолученияДерева = ИнтерфейсИСМП.ДеревоУпаковок(
		МассивСтрокТаблицы, Детализация, ПараметрыСканирования);
	
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		РезультатПолученияДерева.ТекстОшибки = 
			НСтр("ru = 'Не удалось получить данные из ИС МП.
			           |По причине: Требуется обновление ключа сессии.'");
	КонецЕсли;

	Возврат РезультатПолученияДерева;

КонецФункции

Функция ШтрихкодыУпаковокИзДокумента(Знач ДокументСсылка, Знач ПараметрыСканирования) Экспорт
	
	ИмяТабличнойЧасти = ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок;
	ИмяКолонки        = ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки;
	
	МетаданныеДокумента           = ДокументСсылка.Метаданные();
	ЕстьКолонкаЗначениеШтрихкода  = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("ЗначениеШтрихкода") <> Неопределено;
	ИмяДокумента                  = МетаданныеДокумента.Имя;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	%3
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументСсылка";
	
	ВыбираемыеПоля = Новый Массив();
	ВыбираемыеПоля.Добавить(СтрШаблон("Штрихкоды.%1 КАК ШтрихкодУпаковки", ИмяКолонки));
	Если ЕстьКолонкаЗначениеШтрихкода Тогда
		ВыбираемыеПоля.Добавить("Штрихкоды.ЗначениеШтрихкода КАК Штрихкод");
	Иначе
		ВыбираемыеПоля.Добавить(СтрШаблон("ЕСТЬNULL(Штрихкоды.%1.ЗначениеШтрихкода, """") КАК Штрихкод", ИмяКолонки));
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования) Тогда
		Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
			ОперацияИС = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, ВидПродукции);
			Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции, ОперацияИС) Тогда
				Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество) Тогда
					ВыбираемыеПоля.Добавить(
						СтрШаблон("Штрихкоды.%1 КАК Количество",
						ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество));
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета) Тогда
					ВыбираемыеПоля.Добавить(
						СтрШаблон("Штрихкоды.%1 КАК ЧастичноеВыбытиеВариантУчета",
						ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета));
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура) Тогда
					ВыбираемыеПоля.Добавить(
						СтрШаблон("Штрихкоды.%1 КАК ЧастичноеВыбытиеНоменклатура",
						ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура));
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика) Тогда
					ВыбираемыеПоля.Добавить(
						СтрШаблон("Штрихкоды.%1 КАК ИмяКолонкиЧастичноеВыбытиеХарактеристика",
						ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика));
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина)
			И ОбщегоНазначенияИСМП.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
			Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
				ВыбираемыеПоля.Добавить(
					СтрШаблон("Штрихкоды.%1 КАК РазрешительныйРежимИдентификаторЗапросаГИСМТ",
					ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ));
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ) Тогда
				ВыбираемыеПоля.Добавить(
					СтрШаблон("Штрихкоды.%1 КАК РазрешительныйРежимДатаЗапросаГИСМТ",
					ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ));
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрШаблон(
		ТекстЗапроса,
		ИмяДокумента,
		ИмяТабличнойЧасти,
		СтрСоединить(ВыбираемыеПоля, ", " + Символы.ПС));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ШтрихкодыУпаковок - Массив из Структура - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
// * Штрихкод - Строка - Код маркировки.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация, с которой
//                           требуется сформировать вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева.
// Возвращаемое значение:
//  (См. ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок, ПараметрыСканирования, СортироватьДанные = Ложь) Экспорт
	
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	ПараметрыДополнения = Неопределено;
	Результат           = Неопределено;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		ИначеЕсли ЗначениеЗаполнено(Строка.Штрихкод) Тогда
			НеизвестныеУпаковки.Добавить(Новый Структура("Штрихкод, Количество", Строка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПараметрыДополненияВложенныхШтрихкодов(ПараметрыДополнения, ШтрихкодыУпаковок, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам();
	
	ДопустимаТабачнаяПродукция = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП     = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования);
		
		ШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкодыИзвестныхУпаковок, ПараметрыСканирования);
		
		Если ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок.Строки.Количество() = 0 Тогда
			Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
			Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(,, ПараметрыСканирования);
			Возврат Результат;
		КонецЕсли;
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
		
		ДобавленныеСтроки = Новый Массив;
		ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
		
		// Заполнение массива видов продукции штрихкодов. При выполнении проверок
		// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		ШтрихкодированиеИС.ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		ШтрихкодированиеОбщегоНазначенияИСМП.УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);
		
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыДополнения);
		
		НормализоватьДанныеДереваУпаковок(
			ВложенныеШтрихкодыИзвестныхУпаковок.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		Если ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ
			Или ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
			ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, Истина);
		КонецЕсли;
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды    = ВложенныеШтрихкодыИзвестныхУпаковок;
			Результат.ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
		КонецЕсли;
		
	ИначеЕсли НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Если ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ Тогда
			
			Результат = ВложенныеШтрихкоды(НеизвестныеУпаковки, ПараметрыСканирования);
			
		Иначе
			
			Результат = ВложенныеШтрихкодыПоДаннымИСМП(НеизвестныеУпаковки, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП();
		Результат.ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов();
	КонецЕсли;
	
	Если СортироватьДанные
		И Результат.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
			Результат.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "МаркированныеТовары") Тогда
			Результат.ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обрабатывает выбор серии.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		НовыеРеквизиты = Новый Структура;
		НовыеРеквизиты.Вставить("Номенклатура",   Номенклатура);
		НовыеРеквизиты.Вставить("Характеристика", Характеристика);
		НовыеРеквизиты.Вставить("Серия",          Серия);
		
		Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(
			ДанныеШтрихкода.ШтрихкодУпаковки, НовыеРеквизиты);
		
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТипУпаковки)
		И ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДереваУпаковок) Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(,, ПараметрыСканирования);
		ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Инициализирует дерево упаковок для обувной продукции.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Возвращает структуру "ВложенныеШтрихкоды" по коллекции кодов марок. Для марок табачных пачек так же формируется дерево
// упаковок. Неизвестные марки будут созданы в базе.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура:
//   * Штрихкод - Строка - Штрихкод
//   * Количество - Число - Количество
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования.
//  ДляУпаковокТребоватьПодключениеМОТП - Булево - Требовать подключение МОТП для упаковок, если ранее не было проверено
//                                                 наличие данных для построения структуры без обращения к сервису.
//  СортироватьДанные - Булево - Необходимость сортировки данных дерева.
// Возвращаемое значение:
//  См. ИнициализацияРезультатаФормированияВложенныхШтрихкодов
Функция ВложенныеШтрихкоды(ДанныеШтрихкодовСписок, ПараметрыСканирования, ДляУпаковокТребоватьПодключениеМОТП = Истина, СортироватьДанные = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования) Тогда
		
		Результат = ВложенныеШтрихкодыПоДаннымИСМП(ДанныеШтрихкодовСписок, ПараметрыСканирования);
		
	Иначе
		
		Результат = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
		
		Если ДляУпаковокТребоватьПодключениеМОТП Тогда
			
			Для Каждого СтрокаШтрихкода Из ДанныеШтрихкодовСписок Цикл
				
				ПримечаниеКРезультатуРазбора = Неопределено;
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					СтрокаШтрихкода.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции, ПримечаниеКРезультатуРазбора);
				
				Если ДанныеРазбора = Неопределено
					Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда
					
					ТекстОшибки = НСтр(
					"ru = 'Обработка логистических упаковок, групповых упаковок и наборов
					      |невозможна, так как выключена опция
					      |""Запрашивать данные сервиса ГИС МТ"".
					      |Включите опцию в панели администрирования ""Интеграция с ИС МП (обувь, одежда, табак...)""
					      |в разделе ""Настройки сканирования кодов маркировки"".'");
					
					Если ДанныеРазбора = Неопределено Тогда
						
						ТекстОшибки = СтрШаблон(
							НСтр("ru ='%1
							          |
							          |Не удалось разобрать код маркировки: %2
							          |%3'"),
							ТекстОшибки,
							СтрЗаменить(СтрокаШтрихкода.Штрихкод, Символ(29), "<GS>"),
							ПримечаниеКРезультатуРазбора.ТекстОшибки);
							
					КонецЕсли;
					
					Результат.ЕстьОшибки  = Истина;
					Результат.ТекстОшибки = ТекстОшибки;
					
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		ШтрихкодированиеОбщегоНазначенияИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам, ДанныеШтрихкодовСписок, ПараметрыСканирования);
		ШтрихкодированиеОбщегоНазначенияИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			НоваяСтрокаДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДанных);
			
			НоваяСтрокаТаблицы = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДанных);
			НоваяСтрокаТаблицы.СтрокаДерева = НоваяСтрокаДерева;
			СтрокаДанных.СтрокаДерева = НоваяСтрокаДерева;

		КонецЦикла;
		
		Результат.ВложенныеШтрихкоды    = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		Результат.ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
		
		ДополнитьДанныеПоШтрихкодамУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если СортироватьДанные
		И Результат.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
			Результат.ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Сортировать("Штрихкод", Истина);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат.ВложенныеШтрихкоды, "МаркированныеТовары") Тогда
			Результат.ВложенныеШтрихкоды.МаркированныеТовары.Сортировать("Штрихкод");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запрос в систему ИС МП и возвращет ответ в виде дерева.
// 
// Параметры:
//  ДанныеШтрихкодовСписок - Массив из Структура - Описание:
//  * Штрихкод - Строка - Значение штрихкода,
//  * Количество - Число - количество штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  НормализоватьВложенныеШтрихкоды - Булево - Если требуется дополнить вложенные штрихкоды данными, специфичными для табачной продукции.
//  ДляУпаковокТребоватьПодключениеМОТП - Булево - Требовать подключение МОТП для упаковок, если ранее не было проверено
//                                                 наличие данных для построения структуры без обращения к сервису.
//  КешДанныхРазбора - Неопределено, Соответствие - Известный кешированный результат разбора кодов маркировки.
// Возвращаемое значение:
//  (См. ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП).
Функция ВложенныеШтрихкодыПоДаннымИСМП(ДанныеШтрихкодовСписок, ПараметрыСканирования, НормализоватьВложенныеШтрихкоды = Истина,
	ДляУпаковокТребоватьПодключениеМОТП = Ложь, КешДаныхРазбора = Неопределено) Экспорт
	
	РезультатФормированияВложенныхШтрихкодов = ИнициализацияРезультатаФормированияВложенныхШтрихкодов();
	РезультатФормированияВложенныхШтрихкодов.Вставить("СоответствиеСтрокДерева", Новый Соответствие);
	
	ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
	ШтрихкодированиеОбщегоНазначенияИС.ПодготовитьДанныеКодовМаркировкиДляОбработки(
		ДанныеПоШтрихкодам, ДанныеШтрихкодовСписок, ПараметрыСканирования, КешДаныхРазбора);
	
	Если ДляУпаковокТребоватьПодключениеМОТП Тогда
		
		Для Каждого СтрокаШтрихкода Из ДанныеШтрихкодовСписок Цикл
			
			ВидПродукции = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаШтрихкода, "ВидПродукции") Тогда
				ВидПродукции = СтрокаШтрихкода.ВидПродукции;
			КонецЕсли;
			ДанныеРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(СтрокаШтрихкода.Штрихкод, ВидПродукции);
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				
				РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки  = Истина;
				РезультатФормированияВложенныхШтрихкодов.ТекстОшибки = ШтрихкодированиеМОТП.ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП();
				
				Возврат РезультатФормированияВложенныхШтрихкодов;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции)
		Или ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Истина);
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = ДанныеПоШтрихкодам.ЕстьОшибки;
			РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
			РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = ДанныеПоШтрихкодам.ТекстОшибки;
			Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
				Возврат РезультатФормированияВложенныхШтрихкодов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИС.ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
	
	// При получении вложенных штрихкодов в сценариях загрузки дерева документа поступления
	// требуется в точности обеспечить требуемую детализацию.
	// Однако, при сканировании кодов логистических упаковок в случае детализации
	// Пачки или Блоки с пачками требуется детализация более высокого порядка.
	ТребуемаяДетализация = ПараметрыСканирования.ДетализацияСтруктурыХранения;

	РезультатПолученияДерева = ДеревоУпаковокПоДаннымИСМП(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования, ТребуемаяДетализация);
	
	РезультатФормированияВложенныхШтрихкодов.СоответствиеСтрокДерева        = РезультатПолученияДерева.СоответствиеСтрокДерева;
	РезультатФормированияВложенныхШтрихкодов.ТекстОшибки                    = РезультатПолученияДерева.ТекстОшибки;
	РезультатФормированияВложенныхШтрихкодов.ТребуетсяОбновлениеКлючаСессии = РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии;
	РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки                     = Не ПустаяСтрока(РезультатПолученияДерева.ТекстОшибки);
	
	Если РезультатФормированияВложенныхШтрихкодов.ЕстьОшибки Тогда
		Возврат РезультатФормированияВложенныхШтрихкодов;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Не (ПараметрыСканирования.ОтборПоВидуПродукции И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП));
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Ложь);
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Ложь);
	ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Истина);
	ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Ложь);
	
	ОбработатьДеревоПолученноеИзИСМП(РезультатПолученияДерева.ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки);
	
	ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	// Заполнить только коэффициенты упаковок, если не заполнены ранее
	ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования, Ложь);
	
	РезультатФормированияВложенныхШтрихкодов.ВложенныеШтрихкоды    = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	РезультатФормированияВложенныхШтрихкодов.ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

Процедура ДобавитьКолонкиТаблицыДанныхДокумента(ТаблицаДанныхДокумента) Экспорт
	
	ТаблицаДанныхДокумента.Колонки.Добавить("ДанныеИдентификатораПроисхожденияВЕТИС", Новый ОписаниеТипов("Структура"));
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования) Экспорт
	
	ТребуетсяЗаполнениеКолонокДерева = Неопределено;
	
	ПредставлениеОстаточныхШтрихкодов = ПредставлениеОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования);
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		
		ПредставлениеНоменклатуры = ПредставлениеОстаточныхШтрихкодов.Получить(СтрокаДанных.Штрихкод);
		Если Не ЗначениеЗаполнено(ПредставлениеНоменклатуры)
			Или ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
		Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
			Если ТребуетсяЗаполнениеКолонокДерева = Неопределено Тогда
				ТребуетсяЗаполнениеКолонокДерева = (СтрокаДанных.СтрокаДерева.Владелец().Колонки.Найти("ПредставлениеНоменклатуры") <> Неопределено);
			КонецЕсли;
			Если ТребуетсяЗаполнениеКолонокДерева
				И Не ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева.ПредставлениеНоменклатуры) Тогда
				СтрокаДанных.СтрокаДерева.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования) Экспорт
	
	ТаблицаПредставлениеОстаточныхШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("КодМаркировки",            Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("ПредставлениеGTINОстатки", Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхШтрихкодов.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
			// Код маркировки не удалось разобрать и возможно он содержит ошибки
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеНоменклатуры) Тогда
			// Представление уже заполнено из сервиса
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.GTIN)
			И РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТаблицы.GTIN) Тогда
			НоваяСтрока               = ТаблицаПредставлениеОстаточныхШтрихкодов.Добавить();
			НоваяСтрока.КодМаркировки = СтрокаТаблицы.Штрихкод;
			НоваяСтрока.GTIN          = СтрокаТаблицы.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
	ВидПродукции = Неопределено;
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
	КонецЕсли;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ТаблицаПредставлениеОстаточныхШтрихкодов,,ВидПродукции);
	
	ПредставлениеОстаточныхШтрихкодов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаПредставлениеОстаточныхШтрихкодов Цикл
		ПредставлениеОстаточныхШтрихкодов.Вставить(СтрокаТаблицы.КодМаркировки, СтрокаТаблицы.ПредставлениеGTINОстатки);
	КонецЦикла;
	
	Возврат ПредставлениеОстаточныхШтрихкодов;
	
КонецФункции

Функция РасширеннаяПроверкаТребуетсяВыборСерииПоВидуУпаковки(ПараметрыСканирования, ДанныеШтрихкода) Экспорт

	ВидУпаковкиПодходит = Ложь;

	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда

		ЭтоФормаПроверкиИПодбораВДокументаМаркировка = ПараметрыСканирования.ЭтоМаркировкаТоваровИСМП
			И ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;

		Если ЭтоФормаПроверкиИПодбораВДокументаМаркировка Тогда
			ВидУпаковкиПодходит = Ложь;
		Иначе
			ВидУпаковкиПодходит = Истина;
		КонецЕсли;

	ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ВидУпаковкиПодходит = (ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами) И ЗначениеЗаполнено(ДанныеШтрихкода.GTIN);
	КонецЕсли;

	Возврат ВидУпаковкиПодходит;

КонецФункции

#Область РасширенноеПредставлениеОшибок

// см. ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки
Функция ВидДополненияПредставленияОшибки() Экспорт
	
	Возврат ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки();
	
КонецФункции

// Дополняет представление ошибки расширенные данными
// 
// Параметры:
// 	СтрокаДанных  - СтрокаТаблицыЗначений, СтрокаДереваЗначений - данные для оформирование и сохранения результата.
// 	ВидДополнения - См. ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки.
Процедура ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения) Экспорт
	
	Если СтрокаДанных.ПараметрыОшибки = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		Для Каждого КлючИЗначение Из ВидДополненияПредставленияОшибки() Цикл
			СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		СтрокаДанных.ПараметрыОшибки = СтруктураПараметров;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ВидДополнения Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			СтрокаДанных.ПараметрыОшибки[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасширенноеПредставлениеОшибки(ПредставлениеОшибки, ПараметрыДополнения, Форма) Экспорт
	
	Если ПараметрыДополнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроверкаИПодборПродукцииИСМП = СтрНачинаетсяС(Форма.Параметры.ИмяФормыИсточник, "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор");
	ЭтоПроверкаИПодборПродукцииМОТП = СтрНачинаетсяС(Форма.Параметры.ИмяФормыИсточник, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор");
	
	ДобавляемыеЧасти       = Новый Массив;
	ВыводОбщегоСообщения   = Ложь;
	ВыведеноОтключение     = Ложь;
	ВыведенаСсылкаНаПанель = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыДополнения.ЗаголовокПродолжить) Тогда
		Форма.Элементы.ДеревоОтсканированнойУпаковкиИгнорироватьОшибку.Заголовок = ПараметрыДополнения.ЗаголовокПродолжить;
		Форма.Элементы.ИгнорироватьОшибку.Заголовок                              = ПараметрыДополнения.ЗаголовокПродолжить;
	КонецЕсли;
	
	Если ПараметрыДополнения.ДанныеПроверкиНаККТ <> Неопределено Тогда
		
		ОтображениеИгнорирования = Ложь;
		Если ПараметрыДополнения.ВозможноИгнорировать
			И (Пользователи.ЭтоПолноправныйПользователь()
				Или РольДоступна(Метаданные.Роли.РазрешитьКодыМаркировкиСОшибкамиПроверкиНаККТ)) Тогда
			ОтображениеИгнорирования = Истина;
		КонецЕсли;
		
		Форма.Элементы.ИгнорироватьОшибку.Видимость                              = ОтображениеИгнорирования;
		Форма.Элементы.ДеревоОтсканированнойУпаковкиИгнорироватьОшибку.Видимость = ОтображениеИгнорирования;
		Форма.Элементы.ГруппаКоманднаяПанельСКнопками.Видимость                  = ОтображениеИгнорирования;
		Форма.Элементы.ГруппаКоманднаяПанель.Видимость                           = Не ОтображениеИгнорирования;
		Форма.Элементы.ДеревоОтсканированнойУпаковкиЗакрыть.Заголовок            = НСтр("ru = 'Отмена'");
		
		СтрокиСОшибками = Новый Массив;
		ВидыПродукции   = Новый СписокЗначений();
		Форма.Заголовок = НСтр("ru = 'Результат проверки кода маркировки'");
		
		Если ЗначениеЗаполнено(ПараметрыДополнения.ДанныеПроверкиНаККТ.ТекстОшибки) Тогда
			
			Форма.Префикс = НСтр("ru = 'Произошла ошибка проверки средствами ККТ'");
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыДополнения.ДанныеПроверкиНаККТ.ТекстОшибкиГИСМТ) Тогда
			
			Форма.Префикс = НСтр("ru = 'Произошла ошибка при получении идентификаторов ГИС МТ'");
			ДобавляемыеЧасти.Добавить(ПараметрыДополнения.ДанныеПроверкиНаККТ.ТекстОшибкиГИСМТ);
			
		Иначе
			
			ДанныеПроверки   = ПараметрыДополнения.ДанныеПроверкиНаККТ.ДанныеПроверки;
			ЭлементыПроверки = ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭлементыПроверки;
			
			Для Каждого СтрокаПроверки Из ЭлементыПроверки Цикл
				
				РезультатПроверки = ПараметрыДополнения.ДанныеПроверкиНаККТ.ДанныеПроверки[СтрокаПроверки.ИдентификаторЭлемента];
				Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки)
					Или ЗначениеЗаполнено(РезультатПроверки.ТекстОшибкиГИСМТ) Тогда
					СтрокиСОшибками.Добавить(СтрокаПроверки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокиСОшибками.Количество() = 1 Тогда
				
				Форма.Префикс     = НСтр("ru = 'Найдена ошибка при проверке кода'");
				ПроверямаяСтрока  = СтрокиСОшибками.Получить(0);
				РезультатПроверки = ДанныеПроверки[ПроверямаяСтрока.ИдентификаторЭлемента];
				
				ВидыПродукции.Добавить(ПроверямаяСтрока.ВидПродукции, СокрЛП(ПроверямаяСтрока.ВидПродукции));
				
				Если ЗначениеЗаполнено(ПроверямаяСтрока.ПредставлениеНоменклатуры) Тогда
					Форма.ПредставлениеНоменклатуры = ПроверямаяСтрока.ПредставлениеНоменклатуры;
				ИначеЕсли ЗначениеЗаполнено(ПроверямаяСтрока.ШтрихкодУпаковки) Тогда
					РеквизитыЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ПроверямаяСтрока.ШтрихкодУпаковки,
						"Номенклатура, Характеристика, Серия, Упаковка");
					Форма.ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						РеквизитыЭлемента.Номенклатура,
						РеквизитыЭлемента.Характеристика,
						РеквизитыЭлемента.Упаковка,
						РеквизитыЭлемента);
				КонецЕсли;
				
				Форма.ВидПродукции = ПроверямаяСтрока.ВидПродукции;
				Форма.Штрихкод     = ПроверямаяСтрока.КодМаркировки;
				
				Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
					ДобавляемыеЧасти.Добавить(РезультатПроверки.ТекстОшибки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибкиГИСМТ) Тогда
					ДобавляемыеЧасти.Добавить(РезультатПроверки.ТекстОшибкиГИСМТ);
				КонецЕсли;
				
				Если ОтображениеИгнорирования
					И ЗначениеЗаполнено(РезультатПроверки.ПредставлениеВЧеке) Тогда
					
					СтрокиПредупрежденияКлиента = Новый Массив;
					Если ОтрицательныйРезультатПроверкиСредствамиККТ(РезультатПроверки.ПредставлениеВЧеке) Тогда
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя об отрицательном результате проверки кода маркировки.'"));
					Иначе
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя о результате проверки кода маркировки.'"));
					КонецЕсли;
					ЭтоОперацияВыводаИзОборота = ЭтоОперацияВыводаИзОборота(ПараметрыДополнения.ВидОперацииИСМП)
						Или ЭтоОперацияОтгрузки(ПараметрыДополнения.ВидОперацииИСМП);
					СтрокиПредупрежденияКлиента.Добавить(
						СтрШаблон(
							НСтр("ru = 'Нажмите ""%1"", если покупатель согласен %2 товар.'"),
							ПараметрыДополнения.ЗаголовокПродолжить,
							?(ЭтоОперацияВыводаИзОборота, НСтр("ru = 'приобрести'"), НСтр("ru = 'вернуть'"))));
					СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'В чеке будет зафиксирован результат проверки: %1'"));
					ШаблонПредупрежденияКлиента = СтрСоединить(СтрокиПредупрежденияКлиента, Символы.ПС);
					
					ДобавляемыеЧасти.Добавить(Символы.ПС);
					ДобавляемыеЧасти.Добавить(
						СтрШаблон(
							ШаблонПредупрежденияКлиента,
							РезультатПроверки.ПредставлениеВЧеке));
					
				КонецЕсли;
				
				Если РезультатПроверки.ТребуетсяПолныйКодМаркировки
					И Не ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭтоСканирование Тогда
					
					СоставСтроки = Новый Массив();
					
					Если ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭтоДокументОплаты Тогда
						
						СоставСтроки.Добавить(
							НСтр("ru = 'Для сканирования полного кода маркировки перейдите форму документа основания платежа.'"));
						
					ИначеЕсли ЗначениеЗаполнено(Форма.СсылкаНаОбъект) Тогда
					
						СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
						СоставСтроки.Добавить(" ");
						СоставСтроки.Добавить(
							Новый ФорматированнаяСтрока(
								НСтр("ru = 'форму проверки'"),,
								ЦветаСтиля.ПоясняющийТекстГосИС,,
								"ОткрытьФормуПроверкиПоВидуПродукции"));
						СоставСтроки.Добавить(" ");
						СоставСтроки.Добавить(
							НСтр("ru = 'для сканирования полного кода маркировки.'"));
					
					КонецЕсли;
					
					ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
					
				КонецЕсли;
				
			Иначе
				
				Форма.ПоказатьДерево  = Истина;
				Форма.Штрихкод        = "";
				Форма.Заголовок       = НСтр("ru = 'Результаты проверки кодов маркировки'");
				Форма.ШаблонСообщения = НСтр("ru = 'Предупреждения при проверке кодов маркировки %1 из %2.'");
				ИсточникПредставления = Новый Массив();
				КэшПоУпаковке         = Новый Соответствие();
				
				ВозможныеПредставления     = Новый Массив();
				КоличествоСтрокСПроблемами = 0;
				ЕстьОтрицательныйРезультат = Ложь;
				
				Для Каждого СтрокаОшибки Из ЭлементыПроверки Цикл
					
					РезультатПроверки = ДанныеПроверки[СтрокаОшибки.ИдентификаторЭлемента];
					
					Если Не ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки)
						И Не ЗначениеЗаполнено(РезультатПроверки.ТекстОшибкиГИСМТ) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВидыПродукции.НайтиПоЗначению(СтрокаОшибки.ВидПродукции) = Неопределено Тогда
						ВидыПродукции.Добавить(СтрокаОшибки.ВидПродукции, СокрЛП(СтрокаОшибки.ВидПродукции));
					КонецЕсли;
					
					Если ОтрицательныйРезультатПроверкиСредствамиККТ(РезультатПроверки.ПредставлениеВЧеке) Тогда
						ЕстьОтрицательныйРезультат = Истина;
					КонецЕсли;
					
					НоваяСтрокаОшибки = Форма.ДеревоОтсканированнойУпаковки.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибки, СтрокаОшибки);
					
					Если ЗначениеЗаполнено(РезультатПроверки.ПредставлениеВЧеке)
						И ВозможныеПредставления.Найти(РезультатПроверки.ПредставлениеВЧеке) = Неопределено Тогда
						ВозможныеПредставления.Добавить(РезультатПроверки.ПредставлениеВЧеке);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаОшибки.ШтрихкодУпаковки)
						И Не ЗначениеЗаполнено(СтрокаОшибки.ПредставлениеНоменклатуры) Тогда
						
						ИсточникПредставления.Добавить(СтрокаОшибки.ШтрихкодУпаковки);
						КэшПоУпаковке.Вставить(СтрокаОшибки.ШтрихкодУпаковки, НоваяСтрокаОшибки);
						
					КонецЕсли;
					
					НоваяСтрокаОшибки.Штрихкод   = СтрокаОшибки.КодМаркировки;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОшибки, РезультатПроверки);
					НоваяСтрокаОшибки.ЕстьОшибки = Истина;
					
					Если ЗначениеЗаполнено(РезультатПроверки.ПредставлениеВЧеке) Тогда
						НоваяСтрокаОшибки.ТекстОшибки = СтрШаблон(
							"%1, %2",
							РезультатПроверки.ПредставлениеВЧеке,
							НоваяСтрокаОшибки.ТекстОшибки);
					КонецЕсли;
					
					Если НоваяСтрокаОшибки.ЕстьОшибки Тогда
						КоличествоСтрокСПроблемами = КоличествоСтрокСПроблемами + 1;
					КонецЕсли;
					НоваяСтрокаОшибки.ИндексКартинкиТипУпаковки = ИнтеграцияИСМПСлужебный.ИндексКартинкиПоВидуУпаковкиИВидуПродукции(
						НоваяСтрокаОшибки.ВидУпаковки,
						НоваяСтрокаОшибки.ВидПродукции);
					
				КонецЦикла;
				
				ДанныеПоНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					ИсточникПредставления,
					"Номенклатура, Характеристика, Серия, Упаковка");
				
				Если ОтображениеИгнорирования
					И ВозможныеПредставления.Количество() Тогда
					
					СтрокиПредупрежденияКлиента = Новый Массив;
					Если ЕстьОтрицательныйРезультат Тогда
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя об отрицательном результате проверки кода маркировки.'"));
					Иначе
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'Предупредите покупателя о результате проверки кода маркировки.'"));
					КонецЕсли;
					ЭтоОперацияВыводаИзОборота = ЭтоОперацияВыводаИзОборота(ПараметрыДополнения.ВидОперацииИСМП)
						Или ЭтоОперацияОтгрузки(ПараметрыДополнения.ВидОперацииИСМП);
					СтрокиПредупрежденияКлиента.Добавить(
						СтрШаблон(
							НСтр("ru = 'Нажмите ""%1"", если покупатель согласен %2 товар.'"),
							ПараметрыДополнения.ЗаголовокПродолжить,
							?(ЭтоОперацияВыводаИзОборота, НСтр("ru = 'приобрести'"), НСтр("ru = 'вернуть'"))));
					Если ВозможныеПредставления.Количество() > 1 Тогда
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'В чеке будут зафиксированы результаты проверки: %1'"));
					Иначе
						СтрокиПредупрежденияКлиента.Добавить(НСтр("ru = 'В чеке будет зафиксирован результат проверки: %1'"));
					КонецЕсли;
					ШаблонПредупрежденияКлиента = СтрСоединить(СтрокиПредупрежденияКлиента, Символы.ПС);
					
					ТекстПодсказки = СтрШаблон(
						ШаблонПредупрежденияКлиента,
						СтрСоединить(ВозможныеПредставления, ", "));
					
					Форма.Элементы.ДеревоОтсканированнойУпаковки.Подсказка = ТекстПодсказки;
					
				КонецЕсли;
				
				Для Каждого КлючИЗначение Из ДанныеПоНоменклатуре Цикл
					
					СтрокаДанных = КэшПоУпаковке.Получить(КлючИЗначение.Ключ);
					Если СтрокаДанных = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеПредставления  = КлючИЗначение.Значение;
					ТекущееПредставление = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						ДанныеПредставления.Номенклатура,
						ДанныеПредставления.Характеристика,
						ДанныеПредставления.Упаковка,
						ДанныеПредставления.Серия);
					
					СтрокаДанных.ПредставлениеНоменклатуры = ТекущееПредставление;
					
				КонецЦикла;
				
				Форма.КоличествоСтрокСМаркируемойПродукцией = ДанныеПроверки.Количество();
				Форма.КоличествоСтрокСПроблемами            = КоличествоСтрокСПроблемами;
				Форма.СкрытьБезПроблем                      = Истина;
				
			КонецЕсли;
		
		КонецЕсли;
		
		// Отрисовка кнопок открытия проверок и подбора
		
		ВидыПродукции.СортироватьПоПредставлению();
		
		Если Не ПараметрыДополнения.ДанныеПроверкиНаККТ.ЭтоДокументОплаты
			И Не ПараметрыДополнения.ДанныеПроверкиНаККТ.ОтсутствуетФормаПроверки Тогда
			
			ПодменюПроверкаИПодбор = Форма.Элементы.ДеревоОтсканированнойУпаковкиПодменюПроверкаИПодбор;
			Для Каждого ЭлементВидПродукции Из ВидыПродукции Цикл
				
				Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
					Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ЭлементВидПродукции.Значение)
							И Не ПравоДоступа("Использование", Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП)
						Или ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ЭлементВидПродукции.Значение)
							И Не ПравоДоступа("Использование", Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП)
						Или ЭлементВидПродукции.Значение = Перечисления.ВидыПродукцииИС.Алкогольная
							И Не ПравоДоступа("Использование", Метаданные.Обработки["ПроверкаИПодборАлкогольнойПродукцииЕГАИС"]) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ТекущееИмяПоВидуПродукции = СтрШаблон(
					"ОткрытьФормуПроверкиИПодбора_%1",
					Формат(XMLСтрока(ЭлементВидПродукции.Значение), "ЧГ=0;"));
				
				ПараметрыИнтеграции = ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(
					Форма,
					ЭлементВидПродукции.Значение);
				
				Команда          = Форма.Команды.Добавить(ТекущееИмяПоВидуПродукции);
				Команда.Действие = "Подключаемый_ОткрытьФормуПроверкиИПодбора";
				Если ВидыПродукции.Количество() = 1 Тогда
					Команда.Заголовок = НСтр("ru = 'Проверка и подбор'");
				Иначе
					Команда.Заголовок = ПараметрыИнтеграции.Заголовки[4];
				КонецЕсли;
				
				НовыйЭлемент = Форма.Элементы.Добавить(
					ТекущееИмяПоВидуПродукции,
					Тип("КнопкаФормы"),
					ПодменюПроверкаИПодбор);
				НовыйЭлемент.ИмяКоманды = ТекущееИмяПоВидуПродукции;
				
			КонецЦикла;
			
			Если ВидыПродукции.Количество() > 1 Тогда
				
				ПодменюПроверкаИПодбор.Вид                 = ВидГруппыФормы.Подменю;
				ПодменюПроверкаИПодбор.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылкиГосИС;
				ПодменюПроверкаИПодбор.ОтображениеФигуры   = ОтображениеФигурыКнопки.Нет;
				ПодменюПроверкаИПодбор.Отображение         = ОтображениеКнопки.Текст;
				ПодменюПроверкаИПодбор.ШрифтЗаголовка      = Новый Шрифт(ПодменюПроверкаИПодбор.ШрифтЗаголовка, , , , , Истина, , );
				
			ИначеЕсли ВидыПродукции.Количество() = 1 Тогда
				
				ПодменюПроверкаИПодбор.Заголовок = НСтр("ru = 'Проверка и подбор'");
				ПодменюПроверкаИПодбор.Вид       = ВидГруппыФормы.ГруппаКнопок;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыДополнения.ОбщаяОшибка Тогда
		
		СоставСтроки = Новый Массив();
		СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'рабочее место проверки кода маркировки'"),,
				ЦветаСтиля.ПоясняющийТекстГосИС,,
				"ОткрытьПроверкуКодаМаркировкиИСМП"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			НСтр("ru = 'для просмотра расширенной информации.'"));
		
		ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыДополнения.Статус) Тогда
		
		Если ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
			Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
			
			СоставСтроки = Новый Массив();
			СоставСтроки.Добавить(НСтр("ru = 'Не удалось определить статус кода маркировки.'"));
			СоставСтроки.Добавить(" ");
			СоставСтроки.Добавить(
				НСтр("ru = 'Код отсутствует в ГИС МТ или устройство считывания кодов (сканер штрихкодов, ТСД)
				           |модифицирует регистр или значения символов.'"));
			СоставСтроки.Добавить(Символы.ПС);
			ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
			
			Если ЛогированиеЗапросовИС.ВыполняетсяЛогированиеЗапросов(ПараметрыЛогирования) Тогда
				
				СоставСтроки.Добавить(НСтр("ru = 'Передайте'"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'информацию'"),,
						ЦветаСтиля.ПоясняющийТекстГосИС,,
						"ОткрытьЛогЗапросов"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(НСтр("ru = 'об ошибке в службу технической поддержки.'"));
				
			Иначе
				
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Включите логирование'"),,
						ЦветаСтиля.ПоясняющийТекстГосИС,,
						"ВключитьЛогированиеЗапросов"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(НСтр("ru = 'для сбора сведений об ошибке и повторите действие.'"));
				
			КонецЕсли;
			
			ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
			
		Иначе
			
			СоставСтроки = Новый Массив;
			Если ЭтоОперацияВыводаИзОборота(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					Если ТребуетсяВыполнитьПеремаркировку(ПараметрыДополнения) Тогда
						СоставСтроки.Добавить(
							НСтр("ru = 'Код маркировки предназначен для перемаркировки, но перемаркировка еще не выполнена.
							           |Перед совершением операции выполните перемаркировку товара
							           |с помощью документа Перемаркировка товаров ИС МП.'"));
					Иначе
						СоставСтроки.Добавить(
							НСтр("ru = 'Код маркировки еще не введен в оборот.
							           |Перед совершением операции необходимо ввести товар в оборот
							           |с помощью документа Маркировка товаров ИС МП.'"));
					КонецЕсли;
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее уже был выведен из оборота.
						     |Причину, дату и ссылку на документ вывода из оборота можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияВводаВОборот(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее уже был выведен из оборота.
						     |Причину, дату и ссылку на документ вывода из оборота можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				ИначеЕсли КодМаркировкиВОбороте(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее уже был введен в оборот.
						     |Ссылку на документ ввода в оборот можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияВозвратаВОборот(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиВОбороте(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки уже находится в обороте.
						     |Ссылку на последний документ с кодом маркировки можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияОтгрузки(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					Если ТребуетсяВыполнитьПеремаркировку(ПараметрыДополнения) Тогда
						СоставСтроки.Добавить(
							НСтр("ru = 'Код маркировки предназначен для перемаркировки, но перемаркировка еще не выполнена.
							           |Перед совершением операции выполните перемаркировку товара
							           |с помощью документа Перемаркировка товаров ИС МП.'"));
					Иначе
						СоставСтроки.Добавить(
							НСтр("ru = 'Код маркировки еще не введен в оборот.
							           |Перед совершением операции необходимо ввести товар в оборот
							           |с помощью документа Маркировка товаров ИС МП.'"));
					КонецЕсли;
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки ранее был выведен из оборота.
						     |Причину, дату и ссылку на документ вывода из оборота можно найти
						     |в рабочем месте проверки кода маркировки или в личном кабинете ГИС МТ.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияПриемки(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Товар не введен в оборот.
						           |Свяжитесь с поставщиком или производителем с вопросом о вводе товара в оборот.'"));
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки выведен из оборота.
						     |Свяжитесь с поставщиком.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияАгрегации(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если КодМаркировкиЕщеНеВведенВОборот(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Товар не введен в оборот.
						           |Свяжитесь с поставщиком или производителем с вопросом о вводе товара в оборот.'"));
				ИначеЕсли КодМаркировкиВыведенИзОборота(ПараметрыДополнения.Статус) Тогда
					СоставСтроки.Добавить(
						НСтр("ru = 'Код маркировки выведен из оборота.
						     |Свяжитесь с поставщиком или производителем.'"));
				КонецЕсли;
			ИначеЕсли ЭтоОперацияУточненияСведенийОКодахМаркировки(ПараметрыДополнения.ВидОперацииИСМП) Тогда
				Если ЗначениеЗаполнено(ПараметрыДополнения.ОсобоеСостояние) Тогда
					СоставСтроки.Добавить(
						СтрШаблон(
							НСтр("ru = 'Код маркировки имеет особое состояние %1.
							           |Убедитесь в завершении обработки предыдущих операций перед корректировкой сведний о кодах.'"),
							ПараметрыДополнения.ОсобоеСостояние));
				КонецЕсли;
			КонецЕсли;
			
			Если СоставСтроки.Количество() Тогда
				СоставСтроки.Добавить(Символы.ПС);
			КонецЕсли;
			СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
			СоставСтроки.Добавить(" ");
			СоставСтроки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'рабочее место проверки кода маркировки'"),,
					ЦветаСтиля.ПоясняющийТекстГосИС,,
					"ОткрытьПроверкуКодаМаркировкиИСМП"));
			СоставСтроки.Добавить(" ");
			СоставСтроки.Добавить(НСтр("ru = 'для просмотра расширенной информации о коде маркировки.'"));
			ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
			
		КонецЕсли;
		
		Если Не ВыведеноОтключение И Не ПараметрыДополнения.ЗапретитьОтключениеКонтроляСтатусов Тогда
			
			Если ЭтоПроверкаИПодборПродукцииМОТП Или ЭтоПроверкаИПодборПродукцииИСМП Тогда
			
				СоставСтроки = Новый Массив;
				СоставСтроки.Добавить(Символы.ПС);
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
							НСтр("ru = 'Отключите контроль статусов'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОтключитьКонтрольСтатусов"));
				СоставСтроки.Добавить(", ");
				СоставСтроки.Добавить(
					НСтр("ru = 'если требуется выполнить операцию, не учитывая статус ГИС МТ.'"));
				
				ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
				
				ВыведеноОтключение = Истина;
			
			ИначеЕсли ПравоДоступа("Использование", Метаданные.Обработки.ПанельАдминистрированияИСМП) Тогда
				
				Если Не ВыведенаСсылкаНаПанель Тогда
					
					ВыведенаСсылкаНаПанель = Истина;
					
					СоставСтроки = Новый Массив;
					СоставСтроки.Добавить(Символы.ПС);
					СоставСтроки.Добавить(НСтр("ru = 'Отключите контроль статусов в'"));
					СоставСтроки.Добавить(" ");
					СоставСтроки.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'панели администрирования'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОткрытьПанельАдминистрирования"));
					СоставСтроки.Добавить(", ");
					СоставСтроки.Добавить(
						НСтр("ru = 'если не требуется выполнять контроль статусов для типа операции или товарной группы.'"));
					
					ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
				
				КонецЕсли;
				
				ВыводОбщегоСообщения = Истина;
				
			Иначе
				
				ВыводОбщегоСообщения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыДополнения.Владелец Тогда
		
		СоставСтроки = Новый Массив;
		СоставСтроки.Добавить(НСтр("ru = 'Владелец кода по данным ГИС МТ отличается от текущей организации.'"));
		СоставСтроки.Добавить(Символы.ПС);
		СоставСтроки.Добавить(НСтр("ru = 'Перейти в'"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
					НСтр("ru = 'рабочее место проверки кода маркировки'"),,
					ЦветаСтиля.ПоясняющийТекстГосИС,,
					"ОткрытьПроверкуКодаМаркировкиИСМП"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(НСтр("ru = 'для просмотра расширенной информации о коде маркировки.'"));
		СоставСтроки.Добавить(Символы.ПС);
		
		Если Не ВыведеноОтключение Тогда
			
			Если ЭтоПроверкаИПодборПродукцииМОТП Или ЭтоПроверкаИПодборПродукцииИСМП Тогда
			
				СоставСтроки.Добавить(Символы.ПС);
				СоставСтроки.Добавить(
					НСтр("ru = 'Для выполнения операции без учета владельца ГИС МТ нажмите на гиперссылку'"));
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
							НСтр("ru = 'Отключить контроль владельцев'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОтключитьКонтрольВладельцев"));
				
				ВыведеноОтключение = Истина;
				
			ИначеЕсли ПравоДоступа("Использование", Метаданные.Обработки.ПанельАдминистрированияИСМП) Тогда
				
				Если Не ВыведенаСсылкаНаПанель Тогда
					
					ВыведенаСсылкаНаПанель = Истина;
					
					СоставСтроки.Добавить(Символы.ПС);
					СоставСтроки.Добавить(НСтр("ru = 'Отключите контроль владельцев в'"));
					СоставСтроки.Добавить(" ");
					СоставСтроки.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'панели администрирования'"),,
							ЦветаСтиля.ПоясняющийТекстГосИС,,
							"ОткрытьПанельАдминистрирования"));
					СоставСтроки.Добавить(", ");
					СоставСтроки.Добавить(
						НСтр("ru = 'если не требуется выполнять контроль владельцев для типа операции или товарной группы.'"));
					
				КонецЕсли;
				
				ВыводОбщегоСообщения = Истина;
				
			Иначе
				
				ВыводОбщегоСообщения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		
	КонецЕсли;
	
	Если ПараметрыДополнения.ЧастичноеВыбытиеНастроитьКарточкуНоменклатуры Тогда
		
		СоставСтроки = Новый Массив;
		СоставСтроки.Добавить(Символы.ПС);
		
		Если ЗначениеЗаполнено(ПараметрыДополнения.ЧастичноеВыбытиеНоменклатура) Тогда
			
			СоставСтроки.Добавить(НСтр("ru = 'Настройте в'"));
			СоставСтроки.Добавить(" ");
		
			СоставСтроки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'карточке номенклатуры'"),,,,
					ПолучитьНавигационнуюСсылку(ПараметрыДополнения.ЧастичноеВыбытиеНоменклатура)));
			
			СоставСтроки.Добавить(" ");
			Если Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				СоставСтроки.Добавить(НСтр("ru = 'поштучную продажу сигар (сигарилл, ..).'"));
			ИначеЕсли Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
				Или Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				СоставСтроки.Добавить(НСтр("ru = 'продажу на разлив.'"));
			Иначе
				СоставСтроки.Добавить(НСтр("ru = 'параметры частичного выбытия.'"));
			КонецЕсли;
			
		Иначе
			
			СоставСтроки.Добавить(НСтр("ru = 'Для настройки'"));
			
			СоставСтроки.Добавить(" ");
			Если Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				СоставСтроки.Добавить(НСтр("ru = 'поштучной продажи сигар (сигарилл, ..)'"));
			ИначеЕсли Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
				Или Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или Форма.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				СоставСтроки.Добавить(НСтр("ru = 'продажи на разлив'"));
			Иначе
				СоставСтроки.Добавить(НСтр("ru = 'параметров частичного выбытия'"));
			КонецЕсли;
			СоставСтроки.Добавить(" ");
			
			СоставСтроки.Добавить(НСтр("ru = 'в карточке номенклатуры обратитесь к администратору.'"));
			
		КонецЕсли;
		
		ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		
	КонецЕсли;
	
	Если ПараметрыДополнения.ЗагрузитьCDNПлощадки Тогда
		
		СоставСтроки = Новый Массив;
		СоставСтроки.Добавить(Символы.ПС);
		
		СоставСтроки.Добавить(НСтр("ru = 'Для корректного получения списка CDN-площадок проверьте наличие'"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'токена розничной продажи'"),,
				ЦветаСтиля.ПоясняющийТекстГосИС,,
				"ОткрытьСписокТокеновИСМП"));
		
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(НСтр("ru = 'и запустите обновление CDN-площадок по кнопке Актуализировать из'"));
		СоставСтроки.Добавить(" ");
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'списка'"),,
				ЦветаСтиля.ПоясняющийТекстГосИС,,
				"ОткрытьСписокCDNПлощадокИСМП"));
		СоставСтроки.Добавить(".");
		
		ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		
	КонецЕсли;
	
	Если ВыводОбщегоСообщения И Не ВыведеноОтключение Тогда
		
		СоставСтроки = Новый Массив;
		СоставСтроки.Добавить(Символы.ПС);
		
		СоставСтроки.Добавить(
			НСтр("ru = 'Также в форме проверки и подбора доступна возможность
			           |временно отключить контроль статусов и владельцев кодов маркировки.'"));
		
		Если СоставСтроки.Количество() Тогда
			ДобавляемыеЧасти.Добавить(Новый ФорматированнаяСтрока(СоставСтроки));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДобавляемыеЧасти.Количество() > 0 Тогда
		ИтоговыйМассивСтрок = Новый Массив;
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			ИтоговыйМассивСтрок.Добавить(ПредставлениеОшибки);
		КонецЕсли;
		Для Каждого ЧастьСтроки Из ДобавляемыеЧасти Цикл
			Если ИтоговыйМассивСтрок.Количество()
				И ЧастьСтроки <> Символы.ПС Тогда
				ИтоговыйМассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;
			ИтоговыйМассивСтрок.Добавить(ЧастьСтроки);
		КонецЦикла;
		ПредставлениеОшибки = Новый ФорматированнаяСтрока(ИтоговыйМассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОперацияВыводаИзОборота(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборота);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияВводаВОборот(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ);

	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияВозвратаВОборот(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриПродажеЧерезВендинговыйАппарат);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляСобственныхНужд);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляПроизводственныхЦелей);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборот);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияОтгрузки(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);

	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияПриемки(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.Приемка);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаПродажа);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаАгент);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ);

	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияАгрегации(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция ЭтоОперацияУточненияСведенийОКодахМаркировки(Операция)
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД);
	Операции.Добавить(Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес);
	
	Возврат Операции.Найти(Операция) <> Неопределено;
	
КонецФункции

Функция КодМаркировкиВыведенИзОборота(Статус) Экспорт
	
	СтатусыКодМаркировкиВыведенИзОборота = Новый Массив;
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриПеремаркировке);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Экспортирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Утилизирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Списан);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки);
	
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборота);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборотаПоДоговоруРассрочки);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборотаПриПеремаркировке);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Списан);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Продан);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Разагрегирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Экспортирован);
	СтатусыКодМаркировкиВыведенИзОборота.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Утилизирован);
	
	Возврат СтатусыКодМаркировкиВыведенИзОборота.Найти(Статус) <> Неопределено;
	
КонецФункции

Функция КодМаркировкиЕщеНеВведенВОборот(Статус)
	
	СтатусыКодМаркировкиНеВведенВОборот = Новый Массив;
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.НаКонтролеФТС);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОтрицательноеРешениеФТС);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС);
	
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Эмитирован);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен);
	СтатусыКодМаркировкиНеВведенВОборот.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.НанесенОплачен);
	
	Возврат СтатусыКодМаркировкиНеВведенВОборот.Найти(Статус) <> Неопределено;
	
КонецФункции

Функция КодМаркировкиВОбороте(Статус) Экспорт
	
	СтатусыКодМаркировкиВОбороте = Новый Массив;
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику);
	
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборот);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен);
	СтатусыКодМаркировкиВОбороте.Добавить(Перечисления.СтатусыКодовМаркировкиМОТП.ОжидаетДоставки);
	
	Возврат СтатусыКодМаркировкиВОбороте.Найти(Статус) <> Неопределено;
	
КонецФункции

Функция ТребуетсяВыполнитьПеремаркировку(ПараметрыДополнения)
	
	ВозвращаемоеЗначение = Ложь;
	Если ПараметрыДополнения.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.Перемаркировка
		И (ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен
		Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен
		Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.НанесенОплачен
		Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Эмитирован
		Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен
		Или ПараметрыДополнения.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован) Тогда
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Процедура ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, Принудительно = Ложь) Экспорт
	
	Если Не ПараметрыСканирования.ОпределениеВидаПродукцииИСМП И Не Принудительно Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроверкаКодовМаркировкиИСМП = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ЭтоПроверкаКодовМаркировкиИСМП = Истина;
	КонецЕсли;
	
	ДанныеДляЗапроса = Новый Массив;
	ВидыПродукции    = Новый Массив;
	ОбщиеМодули      = Неопределено;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции)
			И Не ЭтоПроверкаКодовМаркировкиИСМП
			И Не ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии
			Или СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ДанныеРазбора = Неопределено
			И (СтрокаТаблицы.ПримечаниеКРазборуШтрихкода = Неопределено
				Или СтрокаТаблицы.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки <> ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляЗапроса.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ДанныеДляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
		ДанныеДляЗапроса,
		ПараметрыСканирования.Организация,
		ШтрихкодированиеИСМПКлиентСервер.РазрешеноЗапрашиватьСтатусыКодовЕАЭС(ПараметрыСканирования));
		
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии;
		ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из РезультатЗапроса.СтатусыКодовМаркировки Цикл
		
		СтрокаТаблицыДанных = КлючИЗначение.Ключ;
		СпецификаСтроки     = КлючИЗначение.Значение;
		
		Если СпецификаСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидПродукции = СпецификаСтроки.ВидПродукции;
		ВидУпаковки  = СпецификаСтроки.ВидУпаковки;
		
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			СтрокаТаблицыДанных.ВидПродукции = ВидПродукции;
			ВидыПродукции.Добавить(ВидПродукции);
			Если СтрокаТаблицыДанных.ДанныеРазбора = Неопределено Тогда
				ШтрихкодированиеОбщегоНазначенияИС.УточнитьДанныеРазбораПоВидуПродукции(СтрокаТаблицыДанных, СтрокаТаблицыДанных.ВидПродукции, ПараметрыСканирования, ОбщиеМодули);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидУпаковки) Тогда
			СтрокаТаблицыДанных.ВидУпаковки = ВидУпаковки;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукции, Истина);
	
КонецПроцедуры

Функция ТребуетсяЗагрузкаВложенныхКодовМаркировки(СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Экспорт
	
	Если Не СтрокаТаблицыДанных.Идентифицирован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(СпецификаСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если СпецификаСтроки.Строки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если СпецификаСтроки.ВложенныеУпаковки = Неопределено
			Или СпецификаСтроки.ВложенныеУпаковки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования);
	
КонецФункции

Функция СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаТаблицыДанных, ПараметрыСканирования) Экспорт
	
	Если СтрокаТаблицыДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
		И СтрокаТаблицыДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая
		И СтрокаТаблицыДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор
		И СтрокаТаблицыДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.СтрокаДерева.Строки.Количество() <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
		И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ЗначениеЗаполнено(СтрокаТаблицыДанных.GTIN)
		И ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Дополняет данные по штрихкодам спецификой по данным пула.
//
// Параметры:
//  ДанныеПоШтрихкодам    - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ВыполнитьПринудительно - Булево - Выполнить принудительно
Процедура ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ВыполнитьПринудительно = Ложь) Экспорт
	
	Если Не ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП
		И Не ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП
		И Не ВыполнитьПринудительно Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ЗаполнениеПолногоКодаМаркировкиПоДаннымСоставаКодаМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкивПуле();
	
	СтрокиТаблицыПоКодамМаркировки = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ЕстьВПулеКодовМаркировки
			И Не ВыполнитьПринудительно Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
			Продолжить;
		КонецЕсли;
		
		ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
			СтрокаДанных,
			КодыМаркировки);
		
		СтрокиТаблицыПоКодамМаркировки.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных);
		
	КонецЦикла;
	
	КэшДанныеОрганизаций = Новый Соответствие();
	
	Если КодыМаркировки.Количество() > 0 Тогда
		
		КодыМаркировкиВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
			КодыМаркировки, "Организация, ВидПродукции, ПолныйКодМаркировки, Номенклатура, Характеристика, GTIN, СпособВводаВОборот, ВидКИЗ, РазмерКИЗ");
		
		Для Каждого СтрокаТаблицы Из КодыМаркировкиВПуле Цикл
			
			СтрокаДанных                          = СтрокиТаблицыПоКодамМаркировки.Получить(СтрокаТаблицы.КодМаркировки);
			СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаДанных.ПолныйКодМаркировки      = СтрокаТаблицы.ПолныйКодМаркировки;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
				СтрокаДанных.ВидПродукции = СтрокаТаблицы.ВидПродукции;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаТаблицы.GTIN) Тогда
				СтрокаДанных.GTIN = СтрокаТаблицы.GTIN;
				СтрокаДанных.EAN  = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаТаблицы.GTIN);
			КонецЕсли;

			Если СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = РегистрыСведений.ПулКодовМаркировкиСУЗ.ПредставлениеКИЗ(СтрокаТаблицы);
			КонецЕсли;

			Если ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП Или ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
				
				Организация = ПараметрыСканирования.Владелец;
				Если Не ЗначениеЗаполнено(Организация) Тогда
					Организация = СтрокаТаблицы.Организация;
				КонецЕсли;
				
				СведенияОбОрганизации = КэшДанныеОрганизаций.Получить(Организация);
				
				Если СведенияОбОрганизации = Неопределено
					И ДанныеПоШтрихкодам.СведенияОбОрганизациях <> Неопределено Тогда
					СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[Организация];
					КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
				КонецЕсли;
				
				Если СведенияОбОрганизации = Неопределено Тогда
					СведенияОбОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация);
					КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
				КонецЕсли;
				
				Если СведенияОбОрганизации <> Неопределено Тогда
					
					СтрокаДанных.ИННВладельца = СведенияОбОрганизации.ИНН;
					СтрокаДанных.Владелец     = Организация;
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						
						СтрокаДанных.СтрокаДерева.ИННВладельца = СведенияОбОрганизации.ИНН;
						СтрокаДанных.СтрокаДерева.Владелец     = Организация;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДанных.СпособВводаВОборот = СтрокаТаблицы.СпособВводаВОборот;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				
				СтрокаДанных.СтрокаДерева.ЕстьВПулеКодовМаркировки  = Истина;
				СтрокаДанных.СтрокаДерева.ПолныйКодМаркировки       = СтрокаДанных.ПолныйКодМаркировки;
				СтрокаДанных.СтрокаДерева.ПредставлениеНоменклатуры = СтрокаДанных.ПредставлениеНоменклатуры;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ПараметрыСканирования);
	
КонецПроцедуры

Функция ПроверитьНаОшибкиГрупповуюУпаковку(СтрокаДанных, СтрокаДерева, ПравилаПроверки) Экспорт
	
	ЕстьОшибки = Ложь;
	
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		
		КонтрольПоТипуШтрихкода = Ложь;
		Если ПравилаПроверки.Свойство("КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок")
			И ИнтеграцияИСМПКлиентСерверПовтИсп.ДоступноНесколькоПотребительскихШаблоновКодовДляВидаПродукции(СтрокаДанных.ВидПродукции) Тогда
			КонтрольПоТипуШтрихкода = Истина;
		КонецЕсли;
		
		НоменклатураГрупповойУпаковки   = Новый Соответствие;
		ХарактеристикиГрупповойУпаковки = Новый Соответствие;
		ТипыШтрихкодаВложений           = Новый Соответствие;
		
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			НоменклатураГрупповойУпаковки.Вставить(ВложеннаяСтрока.Номенклатура, Истина);
			ХарактеристикиГрупповойУпаковки.Вставить(ВложеннаяСтрока.Характеристика, Истина);
			ТипыШтрихкодаВложений.Вставить(ВложеннаяСтрока.ТипШтрихкода, Истина);
		КонецЦикла;
		
		Если НоменклатураГрупповойУпаковки.Количество() > 1 Или ХарактеристикиГрупповойУпаковки.Количество() > 1 Тогда
			ПравилаПроверки.КонтролироватьСоставГрупповыхУпаковок.Добавить(СтрокаДерева);
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЕстьОшибки И КонтрольПоТипуШтрихкода И ТипыШтрихкодаВложений.Количество() > 1 Тогда
			ПравилаПроверки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок.Добавить(СтрокаДерева);
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ПроверитьНаОшибкиЛогистическуюУпаковку(СтрокаДанных, СтрокаДерева, ПравилаПроверки) Экспорт
	
	ЕстьОшибки = Ложь;
	
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		ТипыУпаковокВложений = Новый Соответствие;
		
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			ТипыУпаковокВложений.Вставить(ВложеннаяСтрока.ВидУпаковки, Истина);
		КонецЦикла;
		
		Если ТипыУпаковокВложений.Количество() > 1 Тогда
			ПравилаПроверки.КонтролироватьСоставЛогистическихУпаковок.Добавить(СтрокаДерева);
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ДанныеКОпределениюВидаУпаковки(ПараметрыОбмена) Экспорт
	
	АдресКОпределениюВидаУпаковки = "";
	
	Если ПараметрыОбмена.КОпределениюВидаУпаковки = Неопределено Тогда
		Возврат АдресКОпределениюВидаУпаковки;
	КонецЕсли;
	
	СписокДанныхШтрихкодов = Новый Массив;
	Для Каждого КлючИЗначение Из ПараметрыОбмена.КОпределениюВидаУпаковки.GTIN Цикл
		СписокДанныхШтрихкодов.Добавить(
			Новый Структура(
				"Штрихкод, Количество", КлючИЗначение.Значение, 1));
	КонецЦикла;
	
	РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(
		СписокДанныхШтрихкодов, ПараметрыОбмена.КОпределениюВидаУпаковки.ПараметрыСканирования, Неопределено, Новый УникальныйИдентификатор());
	
	Если Не РезультатОбработкиШтрихкодов.ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ДанныеУточнения = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьТаблицуУточненияКоэффициентовУпаковок();
		ДанныеОписания  = ДанныеУточнения.Скопировать(, "GTIN, КоличествоПотребительскихУпаковок, ВидУпаковки");
		
		Отбор = Новый Структура("GTIN");
		
		Для Каждого СтрокаДанных Из РезультатОбработкиШтрихкодов.ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			
			Если Не СтрокаДанных.Входящий Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.GTIN = СтрокаДанных.GTIN;
			Если ДанныеУточнения.НайтиСтроки(Отбор).Количество() > 0
				Или ДанныеОписания.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				
				СтрокаДанныеОписания = ДанныеОписания.Добавить();
				СтрокаДанныеОписания.GTIN                              = СтрокаДанных.GTIN;
				СтрокаДанныеОписания.КоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
				СтрокаДанныеОписания.ВидУпаковки                       = СтрокаДанных.ВидУпаковки;
				
			Иначе
				
				ЭлементУточнения = ДанныеУточнения.Добавить();
				ЭлементУточнения.GTIN                              = СтрокаДанных.GTIN;
				ЭлементУточнения.ВидУпаковки                       = СтрокаДанных.ВидУпаковки;
				ЭлементУточнения.ВидПродукции                      = СтрокаДанных.ВидПродукции;
				ЭлементУточнения.КоличествоПотребительскихУпаковок = СтрокаДанных.КоличествоПотребительскихУпаковок;
				
				ЭлементУточнения.Номенклатура   = СтрокаДанных.Номенклатура;
				ЭлементУточнения.Характеристика = СтрокаДанных.Характеристика;
				ЭлементУточнения.Серия          = СтрокаДанных.Серия;
				ЭлементУточнения.Упаковка       = СтрокаДанных.Упаковка;
				
				ЭлементУточнения.ПредставлениеСодержимоеУпаковки = СтрокаДанных.ПредставлениеНоменклатуры;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеУточнения.Количество() Тогда
			АдресКОпределениюВидаУпаковки = ПоместитьВоВременноеХранилище(ДанныеУточнения, ПараметрыОбмена.АдресКОпределениюВидаУпаковки);
		ИначеЕсли ДанныеОписания.Количество() Тогда
			Отказ = Не РегистрыСведений.ОписаниеGTINИС.УстановитьОписаниеПоТаблице(ДанныеОписания);
			Если Отказ Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось записать набор записей регистра сведений ОписаниеGTIN ИС.
				                             |Подробности см. в журнале регистрации.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АдресКОпределениюВидаУпаковки;
	
КонецФункции

#Область ПроверкаСредствамиККТ

Процедура СинхронизироватьРезультатПроверкиСредствамиККТ(ДеревоМаркированнойПродукции, ВидПродукции, СсылкаНаДокумент) Экспорт
	
	НаборЗаписей = РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
	НаборЗаписей.Прочитать();
	
	ИсходноеКоличество = НаборЗаписей.Количество();
	
	Если ИсходноеКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеСтроки  = Новый Массив();
	КодыМаркировки   = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле();
	КлючиПоискаСтрок = Новый Соответствие();
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		
		Если СтрокаНабора.ВидПродукции <> ВидПродукции Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.ТребуетсяПолныйКодМаркировки Тогда
			
			КодМаркировки = СокрЛП(СтрокаНабора.ШтрихкодУпаковки);
			ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
				КодМаркировки,
				КодыМаркировки);
			
			КлючиПоискаСтрок.Вставить(КодМаркировки, СтрокаНабора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	КодыМаркировкиВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
		КодыМаркировки,
		"ПолныйКодМаркировки");
	
	Для Каждого СтрокаПоискаВПуле Из КодыМаркировкиВПуле Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаПоискаВПуле.ПолныйКодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНабораУдаления = КлючиПоискаСтрок.Получить(СтрокаПоискаВПуле.КодМаркировки);
		
		Если СтрокаНабораУдаления <> Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаНабораУдаления);
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		НаборЗаписей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыПроверкиСредствамиККТИСМП");
	ЭлементБлокировки.УстановитьЗначение(
		Метаданные.РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.Измерения.Документ.Имя,
		СсылкаНаДокумент);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиСредствамиККТПоОтсутствующимКодам(СсылкаНаДокумент, Отказ = Ложь) Экспорт
	
	Если Не ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыПроверкиСредствамиККТИСМП");
	ЭлементБлокировки.УстановитьЗначение(
		Метаданные.РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.Измерения.Документ.Имя,
		СсылкаНаДокумент);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(СсылкаНаДокумент);
		НаборЗаписей.Прочитать();
		
		ИсходноеКоличество = НаборЗаписей.Количество();
		
		Если ИсходноеКоличество > 0 Тогда
			
			УдаляемыеСтроки             = Новый Массив;
			АктуальныеШтрихкодыУпаковок = Новый Массив;
			ДанныеШапки                 = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(СсылкаНаДокумент);
			ПараметрыСканирования       = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки);
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
			
			ДанныеШтрихкодов            = ШтрихкодированиеИСМП.ВложенныеШтрихкодыУпаковокПоДокументу(СсылкаНаДокумент, ПараметрыСканирования);
			
			ВложенныеПотребительскиеИГрупповыеУпаковки(
				ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок,
				АктуальныеШтрихкодыУпаковок);
			
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				
				Если АктуальныеШтрихкодыУпаковок.Найти(СтрокаНабора.ШтрихкодУпаковки) = Неопределено Тогда
				
					УдаляемыеСтроки.Добавить(СтрокаНабора);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если УдаляемыеСтроки.Количество() Тогда

				Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					НаборЗаписей.Удалить(УдаляемаяСтрока);
				КонецЦикла;

				НаборЗаписей.Записать();

			КонецЕсли;

		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьДанныеРазрешительногоРежимаПриИзмененииОрганизации(ДокументОбъект) Экспорт
	
	СсылкаНаДокумент                = ДокументОбъект.Ссылка;
	ДанныеШапкиЗаписываемогоОбъекта = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументОбъект);
	ДанныеШапкиОбъектаВБазе         = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(СсылкаНаДокумент);
	
	// запись нового документа
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапкиОбъектаВБазе, "Организация")
		Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШапкиЗаписываемогоОбъекта, "Организация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканированияЗаписываемогоОбъекта = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапкиЗаписываемогоОбъекта);
	ПараметрыСканированияОбъектаВБазе         = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапкиОбъектаВБазе);
	
	Если Не ЗначениеЗаполнено(ПараметрыСканированияЗаписываемогоОбъекта.ИмяТабличнойЧастиШтрихкодыУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканированияЗаписываемогоОбъекта, "ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ")
		Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканированияЗаписываемогоОбъекта, "ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканированияОбъектаВБазе, "ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ")
		Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканированияОбъектаВБазе, "ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ") Тогда
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияКолонокКОчистке = Новый Соответствие;
	
	Если Не ДанныеШапкиЗаписываемогоОбъекта.Организация = ДанныеШапкиОбъектаВБазе.Организация Тогда
	
		Если ЗначениеЗаполнено(ПараметрыСканированияЗаписываемогоОбъекта.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
			ПустыеЗначенияКолонокКОчистке.Вставить(ПараметрыСканированияЗаписываемогоОбъекта.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ, ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("УникальныйИдентификаторИС"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСканированияЗаписываемогоОбъекта.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ) Тогда
			ПустыеЗначенияКолонокКОчистке.Вставить(ПараметрыСканированияЗаписываемогоОбъекта.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ, "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПараметрыСканированияОбъектаВБазе.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ = ПараметрыСканированияЗаписываемогоОбъекта.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ
		И Не ПараметрыСканированияОбъектаВБазе.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ = ПараметрыСканированияЗаписываемогоОбъекта.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСканированияОбъектаВБазе.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
			ПустыеЗначенияКолонокКОчистке.Вставить(ПараметрыСканированияОбъектаВБазе.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ, ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("УникальныйИдентификаторИС"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСканированияОбъектаВБазе.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ) Тогда
			ПустыеЗначенияКолонокКОчистке.Вставить(ПараметрыСканированияОбъектаВБазе.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ, "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустыеЗначенияКолонокКОчистке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧастиШтрихкодыУпаковок Из ДокументОбъект[ПараметрыСканированияЗаписываемогоОбъекта.ИмяТабличнойЧастиШтрихкодыУпаковок] Цикл
		
		Для Каждого ИмяКолонкиКОчистке Из ПустыеЗначенияКолонокКОчистке Цикл
			
			СтрокаТабличнойЧастиШтрихкодыУпаковок[ИмяКолонкиКОчистке.Ключ] = ИмяКолонкиКОчистке.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЧастичноеВыбытие

Процедура ЗаполнитьПараметрыДополненияВложенныхШтрихкодов(ПараметрыДополнения, ШтрихкодыУпаковок, ПараметрыСканирования) Экспорт
	
	ЕстьВидПродукцииВСтроке = Неопределено;
	ЭтоРозничнаяОперация    = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковок Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ШтрихкодУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьВидПродукцииВСтроке = Неопределено Тогда
			ЕстьВидПродукцииВСтроке = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ВидПродукции");
		КонецЕсли;
		
		СтрокаЧастичногоВыбытия     = Ложь;
		СтрокаРазрешительногоРежима = Ложь;
		
		Если ЕстьВидПродукцииВСтроке Тогда
			
			СтрокаЧастичногоВыбытия     = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(СтрокаТаблицы, ПараметрыСканирования,, Истина);
			СтрокаРазрешительногоРежима = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
				СтрокаТаблицы.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
			
			Если Не СтрокаЧастичногоВыбытия
				И Не СтрокаРазрешительногоРежима Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			Если ЭтоРозничнаяОперация = Неопределено Тогда
				РозничныеОперации    = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ОперацииРозничнойТорговли();
				ЭтоРозничнаяОперация = (РозничныеОперации.Найти(ПараметрыСканирования.ВидОперацииИСМП) <> Неопределено);
			КонецЕсли;
			Если Не ЭтоРозничнаяОперация Тогда
				Продолжить;
			Иначе
				СтрокаЧастичногоВыбытия = Истина;
				СтрокаРазрешительногоРежима = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыДополнения = Неопределено Тогда
			ПараметрыДополнения = ШтрихкодированиеИС.ПараметрыДополненияВложенныхШтрихкодовУпаковок();
		КонецЕсли;
		
		ЭлементДополнения = ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокДанныеГИСМТ();
		ЗаполнитьЗначенияСвойств(ЭлементДополнения, СтрокаТаблицы);
		
		Если СтрокаРазрешительногоРежима И ЗначениеЗаполнено(ЭлементДополнения.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
		
			ПараметрыДополнения.ДанныеЗапросаГИСМТ.Вставить(
				СтрокаТаблицы.ШтрихкодУпаковки,
				ЭлементДополнения);
				
		КонецЕсли;
		
		ЭлементДополнения = ШтрихкодированиеИС.НовыйЭлементДополненияВложенныхШтрихкодовУпаковокЧастичноеВыбытие();
		ЗаполнитьЗначенияСвойств(ЭлементДополнения, СтрокаТаблицы);
		
		Если СтрокаЧастичногоВыбытия И ЗначениеЗаполнено(ЭлементДополнения.Количество) Тогда
		
			ПараметрыДополнения.ДанныеЧастичногоВыбытия.Вставить(
				СтрокаТаблицы.ШтрихкодУпаковки,
				ЭлементДополнения);
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьУточнениеДанныхЧастичноеВыбытие(ДанныеВыбора, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(ДанныеШтрихкода, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеВыбора.Свойство("ЧастичноеВыбытиеСохранитьНовуюЕмкость")
		Или Не ДанныеВыбора.ЧастичноеВыбытиеСохранитьНовуюЕмкость
		Или Не ЗначениеЗаполнено(ДанныеВыбора.ЕмкостьПотребительскойУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОписания =  Новый Структура;
	ДанныеОписания.Вставить("Номенклатура",                   ДанныеВыбора.Номенклатура);
	ДанныеОписания.Вставить("ЕмкостьПотребительскойУпаковки", ДанныеВыбора.ЕмкостьПотребительскойУпаковки);
	
	РегистрыСведений.ОписаниеНоменклатурыИС.УстановитьОписание(ДанныеОписания);
	
КонецПроцедуры

// Заполняет строки данными частичного выбытия упаковки.
// 
// Параметры:
//  ДанныеПоШтрихкодам      - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
//  ДанныеЗаполнения        - ТаблицаЗначений - строки таблицы "ДанныеКодовМаркировки" для заполнения
//  ПараметрыСканирования   - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования.
Процедура ЗаполнитьСтрокиТаблицыДанныхДаннымиЧастичногоВыбытия(ДанныеПоШтрихкодам, ДанныеЗаполнения, ПараметрыСканирования) Экспорт
	
	Если Не ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено
		Или ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Настройки                    = НастройкиЧастичногоВыбытияПоТаблицеНоменклатуры(ДанныеЗаполнения.ЗаполнениеПоНоменклатуре);
	ЗаполнениеЕмкостиУпаковкиГИС = Новый Соответствие();
	
	Для Каждого СтрокаНастройки Из Настройки Цикл
		
		ИсходнаяСтрока = ДанныеЗаполнения.ЗаполнениеПоНоменклатуре[СтрокаНастройки.ИндексИсходнойСтроки];
		Для Каждого СтрокаТаблицы Из ИсходнаяСтрока.СтрокиПоНоменклатуре Цикл
			
			СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета = СтрокаНастройки.ЧастичноеВыбытияВариантУчета;
			Если СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				СтрокаТаблицы.ЧастичноеВыбытиеНоменклатура   = СтрокаНастройки.НастроеннаяНоменклатура;
				СтрокаТаблицы.ЧастичноеВыбытиеХарактеристика = СтрокаНастройки.НастроеннаяХарактеристика;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕмкостьПотребительскойУпаковки) Тогда
				СтрокаТаблицы.ЕмкостьПотребительскойУпаковки = СтрокаНастройки.ЕмкостьПотребительскойУпаковки;
			КонецЕсли;
			
			Если СтрокаТаблицы.СтрокаДерева <> Неопределено Тогда
				СтрокаТаблицы.СтрокаДерева.ЧастичноеВыбытиеВариантУчета   = СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета;
				СтрокаТаблицы.СтрокаДерева.ЕмкостьПотребительскойУпаковки = СтрокаТаблицы.ЕмкостьПотребительскойУпаковки;
				СтрокаТаблицы.СтрокаДерева.ЧастичноеВыбытиеНоменклатура   = СтрокаТаблицы.ЧастичноеВыбытиеНоменклатура;
				СтрокаТаблицы.СтрокаДерева.ЧастичноеВыбытиеХарактеристика = СтрокаТаблицы.ЧастичноеВыбытиеХарактеристика;
			КонецЕсли;
			
			Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
				СтрокиДляЗаполненияЕмкостиУпаковки = ЗаполнениеЕмкостиУпаковкиГИС.Получить(СтрокаТаблицы.GTIN);
				Если СтрокиДляЗаполненияЕмкостиУпаковки = Неопределено Тогда
					СтрокиДляЗаполненияЕмкостиУпаковки = Новый Массив();
					ЗаполнениеЕмкостиУпаковкиГИС.Вставить(СтрокаТаблицы.GTIN, СтрокиДляЗаполненияЕмкостиУпаковки);
				КонецЕсли;
				СтрокиДляЗаполненияЕмкостиУпаковки.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗаполнениеЕмкостиУпаковкиГИС.Количество() Тогда
		
		МассивGTIN = Новый Массив();
		Для Каждого КлючИЗначение Из ЗаполнениеЕмкостиУпаковкиГИС Цикл
			МассивGTIN.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		Результат = ИнтерфейсИСМПОбщегоНазначения.ДанныеПродукцииПоШтрихкодуEAN(МассивGTIN);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			Возврат;
		
		ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			
			Если Не ДанныеПоШтрихкодам.ЕстьОшибки Тогда
				ДанныеПоШтрихкодам.ЕстьОшибки   = Истина;
				ДанныеПоШтрихкодам.ТекстОшибки  = Результат.ТекстОшибки;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Результат.ДанныеПродукцииПоШтрихкодуEAN Цикл
			
			GTIN                 = КлючИЗначение.Ключ;
			ДанныеОписанияТовара = КлючИЗначение.Значение;
			
			Если Не ЗначениеЗаполнено(ДанныеОписанияТовара.ЕмкостьУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПоGTIN = ЗаполнениеЕмкостиУпаковкиГИС.Получить(GTIN);
			
			Для Каждого СтрокаДанных Из СтрокиПоGTIN Цикл
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = ДанныеОписанияТовара.ЕмкостьУпаковки;
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.ЕмкостьПотребительскойУпаковки = СтрокаДанных.ЕмкостьПотребительскойУпаковки;
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивGTIN, GTIN);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДляЗаполненияДаннымиЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования, ДанныеЗаполнения) Экспорт
	
	Если Не ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			СтрокаДанных.ВидПродукции,
			ПараметрыСканирования.ВидОперацииИСМП)
		Или Не ЗначениеЗаполнено(СтрокаДанных.GTIN)
		Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или СтрокаДанных.ЧастичноеВыбытиеВариантУчета <> Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
			И ЗначениеЗаполнено(СтрокаДанных.ЕмкостьПотребительскойУпаковки) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если ДанныеЗаполнения = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ЗаполнениеПоНоменклатуре", СтрокаДанных.Владелец().СкопироватьКолонки("Номенклатура, Характеристика"));
		ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.Колонки.Добавить("СтрокиПоНоменклатуре");
		ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.Индексы.Добавить("Номенклатура, Характеристика");
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
	
	ПоискСтрок = ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.НайтиСтроки(СтруктураПоиска);
	
	Если ПоискСтрок.Количество() Тогда
		ПоискСтрок[0].СтрокиПоНоменклатуре.Добавить(СтрокаДанных);
	Иначе
		НоваяСтрока = ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		НоваяСтрока.ИндексИсходнойСтроки = ДанныеЗаполнения.ЗаполнениеПоНоменклатуре.Индекс(НоваяСтрока);
		НоваяСтрока.СтрокиПоНоменклатуре = Новый Массив();
		НоваяСтрока.СтрокиПоНоменклатуре.Добавить(СтрокаДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВложенныеПотребительскиеИГрупповыеУпаковки(Узел, АктуальныеШтрихкодыУпаковок)
	
	Для Каждого СтрокаДерева Из Узел.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			
			АктуальныеШтрихкодыУпаковок.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			
		КонецЕсли;
		
		ВложенныеПотребительскиеИГрупповыеУпаковки(СтрокаДерева, АктуальныеШтрихкодыУпаковок);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует результат формирования вложенных штрихкодов по кодам маркировки ИСМП.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ВложенныеШтрихкоды - Структура - Описание:
// * ЕстьОшибки - Булево - Истина, если есть ошибки.
// * ТекстОшибки - Строка - Описание ошибки.
// * ТребуетсяОбновлениеКлючаСессии - Булево - Истина, если требуется авторизация.
Функция ИнициализацияРезультатаФормированияВложенныхШтрихкодов()
	
	РезультатФормированияВложенныхШтрихкодов = Новый Структура;
	
	РезультатФормированияВложенныхШтрихкодов.Вставить("ДанныеКодовМаркировки",          Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ВложенныеШтрихкоды",             Неопределено);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ЕстьОшибки",                     Ложь);
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТекстОшибки",                    "");
	РезультатФормированияВложенныхШтрихкодов.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);

	Возврат РезультатФормированияВложенныхШтрихкодов;
	
КонецФункции

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования)
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки);
	
	// В некоторых сценариях таблицы маркированных товаров нет и ее заполнение не требуется
	Если ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
		МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары, ПараметрыСканирования = Неопределено)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
	ШтрихкодированиеИС.ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

// Формирует элементы справочника Штрихкоды упаковок на основании данных полученных из ИС МП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДеревоУпаковок, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаДерева.Строки.Количество() = 0
			И СтрокаДерева.Количество = 0 Тогда // Проверка на пустую упаковку.
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(
			ДеревоУпаковок, ПараметрыСканирования);
		ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОшибки = ИнформацияОбОшибке();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОшибки);
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'Создание элементов справочника штрихкоды упаковок.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок Или ЕстьОшибки;
		
		// Приоритет 1.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
			И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда
			
			Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл
				
				Если ЭлементДанных.СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДанных.СтрокаДерева.ТекстОшибки = ЭлементДанных.ТекстОшибки;
				ЭлементДанных.СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();
			
		КонецЕсли;
		
		// Приоритет 2.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
			
			ПредставленияСтатусов = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ПредставлениеСтатусов;
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Статус)
					И ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние)
					И СтрокаДерева.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
					И СтрокаДерева.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Статус: %1 (%2)'"),
						ПредставленияСтатусов.Получить(СтрокаДерева.Статус),
						ПредставленияСтатусов.Получить(СтрокаДерева.ОсобоеСостояние));
				Иначе
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставленияСтатусов.Получить(СтрокаДерева.Статус));
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
				ЗапретитьОтключениеКонтроляСтатусов = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
					СтрокаДерева.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП,
					ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
				
				ВидДополнения = ВидДополненияПредставленияОшибки();
				ВидДополнения.Статус                              = СтрокаДерева.Статус;
				ВидДополнения.ВидОперацииИСМП                     = ПараметрыСканирования.ВидОперацииИСМП;
				ВидДополнения.СпособВводаВОборот                  = СтрокаДерева.СпособВводаВОборот;
				ВидДополнения.ЗапретитьОтключениеКонтроляСтатусов = ЗапретитьОтключениеКонтроляСтатусов;
				ДополнитьПредставлениеОшибки(СтрокаДерева, ВидДополнения);
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();
			
		КонецЕсли;
		
		// Приоритет 3.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДерева.Коэффициент = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки  = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Очистить();
			
		КонецЕсли;
		
		// Приоритет 4.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Тогда
					ИННВладельцаПредставление = НСтр("ru = 'Отсутствует'");
				Иначе
					ИННВладельцаПредставление = СтрокаДерева.ИННВладельца;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДерева.Владелец) Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Владелец: %1 (%2)'"),
						СтрокаДерева.Владелец,
						ИННВладельцаПредставление);
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'ИНН владельца: %1'"),
						ИННВладельцаПредставление);
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				
				ВидДополнения = ВидДополненияПредставленияОшибки();
				ВидДополнения.Владелец                            = Истина;
				ВидДополнения.ВидОперацииИСМП                     = ПараметрыСканирования.ВидОперацииИСМП;
				ДополнитьПредставлениеОшибки(СтрокаДерева, ВидДополнения);
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();
			
		КонецЕсли;
		
		// Приоритет 5.
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП") Тогда
			
			ЕстьРасхождения = Ложь;
			ШтрихкодированиеИС.ВыявитьРасхожденияВСоставахДеревьев(
				ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса,
				ЕстьРасхождения, ПараметрыСканирования);
			
			Если ЕстьРасхождения Тогда
				// Правило является исключением, проверка выполняется после завершения всех остальных проверок.
				// Установка флага обязательна.
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
			И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Способ ввода в оборот: %1'"),
					СтрокаДерева.СпособВводаВОборот);
				
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Очистить();
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн")
			И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Способ ввода в оборот: маркировка остатков'");
				СтрокаДерева.ЕстьОшибки = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Очистить();
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКоличестваМерногоТовара")
			И ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара.Количество() > 0 Тогда
			
			ЭтоЕдинственныйКодМаркировкиМерногоТовара = ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара.Количество() = 1;
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоЕдинственныйКодМаркировкиМерногоТовара
					И СтрокаДерева.Родитель = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = ШтрихкодированиеОбщегоНазначенияИС.ТекстОшибкиТребуетсяУточнениеКоличества();
				СтрокаДерева.ЕстьОшибки = Истина;
				
				// Правило является исключением, проверка выполняется после завершения всех остальных проверок.
				// Установка флага обязательна.
				ЕстьОшибки = Истина;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара.Очистить();
			
		КонецЕсли;
		
		ШтрихкодированиеОбщегоНазначенияИСМП.ОписаниеОшибокКонтроляЧастичногоВыбытия(ПравилаПроверкиНаОшибки, ПараметрыСканирования);
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставЛогистическихУпаковок")
			И ПравилаПроверкиНаОшибки.КонтролироватьСоставЛогистическихУпаковок.Количество() Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтролироватьСоставЛогистическихУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Логистическая упаковка может содержать только один вид упаковок (логистические, групповые или потребительские)'");
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					
					Если ВложеннаяСтрокаДерева.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					ВложеннаяСтрокаДерева.ЕстьОшибки  = Истина;
					ВложеннаяСтрокаДерева.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Вид упаковки %1 отличается от вложенных упаковок'"),
						ВложеннаяСтрокаДерева.ВидУпаковки);
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтролироватьСоставЛогистическихУпаковок.Очистить();
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставГрупповыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтролироватьСоставГрупповыхУпаковок.Количество() Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтролироватьСоставГрупповыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Групповая упаковка не может содержать разные наименования продукции'");
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					
					Если ВложеннаяСтрокаДерева.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					ВложеннаяСтрокаДерева.ЕстьОшибки  = Истина;
					ВложеннаяСтрокаДерева.ТекстОшибки = НСтр("ru = 'Номенклатура отличается от номенклатуры вложенных упаковок'");
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтролироватьСоставГрупповыхУпаковок.Очистить();
				
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок")
			И ПравилаПроверкиНаОшибки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок.Количество() Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Групповая упаковка не может содержать разные шаблоны кодов маркировки.'");
				
				Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
					
					Если ВложеннаяСтрокаДерева.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					ВложеннаяСтрокаДерева.ЕстьОшибки  = Истина;
					ВложеннаяСтрокаДерева.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Тип штрихкода %1 отличается от типа штрихкода вложенных упаковок'"),
						ВложеннаяСтрокаДерева.ТипШтрихкода);
					
				КонецЦикла;
				
			КонецЦикла;
			
			ПравилаПроверкиНаОшибки.КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков")
		И ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Количество() > 0 Тогда
		
		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков Цикл
			
			Если ЭлементДанных.СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.СтрокаДерева.ТекстОшибки = ЭлементДанных.ТекстОшибки;
			ЭлементДанных.СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности")
		И ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности Цикл
			
			Если СтрокаДерева.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Истек срок годности продукции. Товар годен до: %1'"),
				СтрокаДерева.ГоденДо);
			СтрокаДерева.ЕстьОшибки = Истина;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Количество() > 0 Тогда

		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн Цикл

			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
				ПредставлениеСпособаВводаВОборот = СтрСоединить(
					ПараметрыСканирования.ДопустимыйСпособВводаВОборот,
					НСтр("ru = ','") + " ");
			Иначе
				ПредставлениеСпособаВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
			КонецЕсли;

			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: маркировка остатков.
				           |Ожидаемый способ ввода в оборот: %1'"),
				ПредставлениеСпособаВводаВОборот);

		КонецЦикла;

		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Очистить();

	КонецЕсли;
	
КонецПроцедуры

Процедура РасширенныеПроверкиПоСтрокеДанныхИСМП(СтрокаДанных, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки) Экспорт

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСрокаГодности") Тогда
		ПроверитьДанныеСтрокиПоСрокуГодности(СтрокаДанных, ПравилаПроверкиНаОшибки.КонтрольСрокаГодности, ПараметрыСканирования);
	КонецЕсли;

	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда

		Если СтрокаДанных <> Неопределено
			И СтрокаДанных.МаркируемаяПродукция = Истина
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
			И (Не СтрокаДанных.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков
				Или СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков) Тогда

				ТекстОшибки = ПроизвестиКонтрольСпособаВводаВОборотОстатки(
				СтрокаДанных, ПараметрыСканирования);

			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(
					Новый Структура(
						"СтрокаДанных, ТекстОшибки",
						СтрокаДанных, ТекстОшибки));
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;
	
	ДопустимыеСпособыВвода = Новый Массив();
	
	Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
	
		ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
	
		ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
	
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) // Агрегация, новые упаковки.
			И ДопустимыеСпособыВвода.Найти(СтрокаДанных.СпособВводаВОборот) = Неопределено Тогда
		
			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДанных);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн") Тогда
	
		Если ПараметрыСканирования.ВидОперацииИСМП <> Перечисления.ВидыОперацийИСМП.Перемаркировка
			И СтрокаДанных.ЭтоКодВводаОстатков
			И ДопустимыеСпособыВвода.Найти(Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков) = Неопределено Тогда
			
			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Добавить(СтрокаДанных);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#Область ОбъемноСортовойУчет

Процедура ЗаменитьЗначенияШтрихкодаНаОбъемноСортовойУчет(Коллекция, ИмяКолонкиШтрихкод, ИмяКолонкиКоличество) Экспорт

	ИдентификаторыПоПорядку = Новый Массив();
	ИдентификаторыПоПорядку.Добавить("02");
	ИдентификаторыПоПорядку.Добавить("37");

	СвойстваИдентификаторовПрименения = ШтрихкодыУпаковокКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();

	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		ДанныеПоИдентификаторам = Новый Соответствие();
		ДанныеПоИдентификаторам.Вставить("02", СтрокаКоллекции[ИмяКолонкиШтрихкод]);
		ДанныеПоИдентификаторам.Вставить("37", СтрокаКоллекции[ИмяКолонкиКоличество]);
		ИспользуемыеИдентификаторы = Новый Массив();
		Для Каждого КлючИдентификатора Из ИдентификаторыПоПорядку Цикл
			СвойстваИдентификатора = СвойстваИдентификаторовПрименения[КлючИдентификатора];
			ДанныеИдентификатора = Новый Структура;
			ДанныеИдентификатора.Вставить("ИмяИдентификатора",      СвойстваИдентификатора.ИмяИдентификатора);
			ДанныеИдентификатора.Вставить("КлючИдентификатора",     КлючИдентификатора);
			ДанныеИдентификатора.Вставить("ДополнительныйПараметр", 0);
			ДанныеИдентификатора.Вставить("Значение",               ДанныеПоИдентификаторам[КлючИдентификатора]);
			ИспользуемыеИдентификаторы.Добавить(ДанныеИдентификатора);
		КонецЦикла;
		СтрокаКоллекции[ИмяКолонкиШтрихкод] = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ИспользуемыеИдентификаторы);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаСредствамиККТ

Процедура ЗаполнитьВложенныеШтрихкодыДляПроверкиККТ(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "АдресДереваУпаковок")
		Или Не ЭтоАдресВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок)
		Или РезультатОбработкиШтрихкода.ВложенныеШтрихкодыДляПроверкиККТ.Количество()
		Или ДанныеШтрихкода.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.АдресДереваУпаковок);

	ЗаполнитьВложенныеШтрихкодыПоДеревуПроверкиНаККТРекурсивно(
		ДеревоУпаковок,
		РезультатОбработкиШтрихкода.ВложенныеШтрихкодыДляПроверкиККТ,
		ПараметрыСканирования);

КонецПроцедуры

Процедура ЗаполнитьВложенныеШтрихкодыПоДеревуПроверкиНаККТРекурсивно(УзелДерева, ВложенныеШтрихкодыПроверки, ПараметрыСканирования)

	ДанныеЗаполненияСвойствПриПроверкеККТ = Новый Массив();

	Для Каждого СтрокаДерева Из УзелДерева.Строки Цикл

		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьВложенныеШтрихкодыПоДеревуПроверкиНаККТРекурсивно(СтрокаДерева, ВложенныеШтрихкодыПроверки, ПараметрыСканирования);
			Продолжить;
		КонецЕсли;

		ЭлементПроверки = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементПроверкиСредствамиККТПоДаннымШтрихкода(
			СтрокаДерева);

		ВложенныеШтрихкодыПроверки.Добавить(ЭлементПроверки);
		ЭлементОбработки = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НоваяСтруктураУстановкиДополнительныхСвойствПриПроверкеККТ();
		ЭлементОбработки.СтрокаТовары        = СтрокаДерева;
		ЭлементОбработки.СтрокаНазначения    = ЭлементПроверки;
		Если ЗначениеЗаполнено(ЭлементПроверки.ЧастичноеВыбытиеКоличество) Тогда
			ЭлементОбработки.ЭтоЧастичноеВыбытие = Истина;
		КонецЕсли;
		ДанныеЗаполненияСвойствПриПроверкеККТ.Добавить(ЭлементОбработки);

	КонецЦикла;

	ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ПриУстановкеДополнительныхСвойствЭлеметовПроверкиСредствамиККТ(ДанныеЗаполненияСвойствПриПроверкеККТ);
	
КонецПроцедуры

Функция ОтрицательныйРезультатПроверкиСредствамиККТ(ПредставлениеВЧеке)

	Если ПредставлениеВЧеке = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ПредставлениеКодаМаркировкиВЧеке().ММинус Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ЧастичноеВыбытие

Процедура ДополнитьДанныеПоШтрихкодамСпецификойЧастичногоВыбытия(ДанныеПоШтрихкодам, ПараметрыСканирования)

	Если Не ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Неопределено;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
			ДобавитьСтрокуДляЗаполненияДаннымиЧастичногоВыбытия(
				СтрокаДанных,
				ПараметрыСканирования,
				ДанныеЗаполнения);
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСтрокиТаблицыДанныхДаннымиЧастичногоВыбытия(
		ДанныеПоШтрихкодам,
		ДанныеЗаполнения,
		ПараметрыСканирования);

	Если Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл

			Если СтрокаДанных.СтрокаДерева <> Неопределено
				И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции)
				И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
					СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП) Тогда

				СтрокаДанных.ЧастичноеВыбытие               = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытие;
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета   = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеВариантУчета;
				СтрокаДанных.Количество                     = СтрокаДанных.СтрокаДерева.Количество;
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = СтрокаДанных.СтрокаДерева.ЕмкостьПотребительскойУпаковки;
				СтрокаДанных.ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
				СтрокаДанных.ЧастичноеВыбытиеХарактеристика = СтрокаДанных.СтрокаДерева.ЧастичноеВыбытиеХарактеристика;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция НастройкиЧастичногоВыбытияПоТаблицеНоменклатуры(ТаблицаНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.Номенклатура         КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика       КАК Характеристика,
		|	ИсходнаяТаблица.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки
		|ПОМЕСТИТЬ ИсходнаяТаблицаВременная
		|ИЗ
		|	&ИсходнаяТаблица КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблицаВременная.ИндексИсходнойСтроки                         КАК ИндексИсходнойСтроки,
		|	ИсходнаяТаблицаВременная.Номенклатура                                 КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО                                                          КАК ЧастичноеВыбытияВариантУчета,
		|	НастройкиЧастичногоВыбытияПродукцииИСМП.НоменклатураЧастичногоВыбытия   КАК НастроеннаяНоменклатура,
		|	НастройкиЧастичногоВыбытияПродукцииИСМП.ХарактеристикаЧастичногоВыбытия КАК НастроеннаяХарактеристика,
		|	0                                                                     КАК ЕмкостьПотребительскойУпаковки
		|ИЗ
		|	ИсходнаяТаблицаВременная КАК ИсходнаяТаблицаВременная
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИСМП
		|		ПО ИсходнаяТаблицаВременная.Номенклатура = НастройкиЧастичногоВыбытияПродукцииИСМП.Номенклатура
		|		И ИсходнаяТаблицаВременная.Характеристика = НастройкиЧастичногоВыбытияПродукцииИСМП.Характеристика";

	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТаблицаНоменклатуры);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	ОписанияНоменклатур = ОбщегоНазначенияИС.ОписаниеНоменклатуры(РезультатЗапроса.ВыгрузитьКолонку("Номенклатура"));

	Для Каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		ОписаниеНоменклатуры = ОписанияНоменклатур.Получить(СтрокаТаблицы.Номенклатура);
		Если ОписаниеНоменклатуры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ЕмкостьПотребительскойУпаковки = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
		СтрокаТаблицы.ЧастичноеВыбытияВариантУчета   = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
	КонецЦикла;

	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#Область РаботаСОшибками

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка:
//    * КонтрольСерий - Массив - для дерева заполнение серий не контролируется.
//    * КонтрольСтатусов - Массив - список строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		
		ВладелецМожетБытьПустым = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
		
	КонецЕсли;
	
	КэшМаркируемойПродукции           = Неопределено;
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	
	ЭтоФормаДокументаМаркировкаТоваров = Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Продолжить;
		КонецЕсли;
		
		ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = (ЗначениеЗаполнено(СтрокаДерева.РазрешительныйРежимДатаЗапросаГИСМТ)
			И Не ЗначениеЗаполнено(СтрокаДерева.РазрешительныйРежимИдентификаторЗапросаГИСМТ));
		
		СтрокаДанных = Неопределено;
		
		Если ШтрихкодированиеОбщегоНазначенияИСМП.ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДерева.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки Тогда
			
			Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыУпаковок;
			ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов <> Неопределено Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов;
			ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов <> Неопределено Тогда
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыНаборов;
			Иначе
				ДопустимыеСтатусыИСМП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусы;
			КонецЕсли;
			
			ОтсутствуетДопустимыйСтатус = (ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.Статус) = Неопределено);
			Если Не ОтсутствуетДопустимыйСтатус
				И ЗначениеЗаполнено(СтрокаДерева.ОсобоеСостояние)
				И СтрокаДерева.ОсобоеСостояние <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И ДопустимыеСтатусыИСМП.Найти(СтрокаДерева.ОсобоеСостояние) = Неопределено Тогда
				ОтсутствуетДопустимыйСтатус = Истина;
			КонецЕсли;
			
			// В форме документа Маркировка товаров можно обрабатывать коды логистических упаковок только
			// если агрегация была выполнена ранее (созданы элементы справочника штрихкодов упаковок),
			// например с помощью виртуальной агрегации.
			Если ОтсутствуетДопустимыйСтатус
				И ЭтоФормаДокументаМаркировкаТоваров
				И СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.Строки.Количество() > 0 Тогда
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;
			
			Если ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус
				И Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДерева.Штрихкод)
				И Не ШтрихкодированиеОбщегоНазначенияИСМП.ЭтоПродажаВыбывшегоЧастично(
					СтрокаДерева,
					ПараметрыСканирования,
					ДопустимыеСтатусыИСМП) Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
			И ШтрихкодированиеОбщегоНазначенияИСМП.СтрокаСодержитОшибкиЧастичногоВыбытия(
				СтрокаДерева,
				ПараметрыСканирования,
				ПравилаПроверкиНаОшибки,
				КэшМаркируемойПродукции) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьНастройкуЧастичногоВыбытия")
			И Не ЗначениеЗаполнено(СтрокаДерева.ЧастичноеВыбытиеВариантУчета) Тогда
			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.КонтролироватьНастройкуЧастичногоВыбытия.Добавить(СтрокаДерева);
		КонецЕсли;

		ДопустимыеСпособыВвода = Новый Массив();
		
		Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
			ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
			ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот") Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И ДопустимыеСпособыВвода.Найти(СтрокаДерева.СпособВводаВОборот) = Неопределено
				И Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДерева.Штрихкод) Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн") Тогда
			
			Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДерева.Штрихкод, Истина)
				И ДопустимыеСпособыВвода.Количество() > 0
				И ДопустимыеСпособыВвода.Найти(Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеОбщегоНазначенияИСМП.ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
			КонтролироватьВладельцевКодовМаркировкиИСМП = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировкиИСМП = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДерева.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП);
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировкиИСМП Тогда
			
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен
				И СтрокаДерева.Статус <> Неопределено
				И Не ШтрихкодированиеОбщегоНазначенияИСМП.ИННСоответствуетОперации(СтрокаДерева.ИННВладельца, ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
				
				Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДерева.ИННВладельца) Или ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
				Иначе
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьНастройкуЧастичногоВыбытия")
			И Не ЗначениеЗаполнено(СтрокаДерева.ЧастичноеВыбытиеВариантУчета) Тогда
			ЕстьОшибки = Истина;
			ПравилаПроверкиНаОшибки.КонтролироватьНастройкуЧастичногоВыбытия.Добавить(СтрокаДерева);
		КонецЕсли;

		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКодовВводаОстатков") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено
				И СтрокаДанных.МаркируемаяПродукция = Истина
				И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
				И (Не СтрокаДанных.ЭтоКодВводаОстатков И ПараметрыСканирования.ЭтоМаркировкаОстатков
					Или СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.ЭтоМаркировкаОстатков) Тогда
				
				ТекстОшибки = ПроизвестиКонтрольСпособаВводаВОборотОстатки(
					СтрокаДанных, ПараметрыСканирования);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольКодовВводаОстатков.Добавить(
						Новый Структура(
							"СтрокаДерева, ТекстОшибки",
							СтрокаДерева, ТекстОшибки));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхУпаковок") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
				И СтрокаДерева.Строки.Количество() = 0
				И СтрокаДерева.КоличествоПотребительскихУпаковок = 0
				И Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДерева.Штрихкод) Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхУпаковок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольОкончанияСрокаГодности") Тогда
			
			ДатаКонтроляСрокаГодности = ПараметрыСканирования.ДатаДокумента;
			
			Если ПараметрыСканирования.ВидОперацииИСМП = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа Тогда
				ДатаКонтроляСрокаГодности = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(СтрокаДерева.ВидПродукции)
				И ЗначениеЗаполнено(СтрокаДерева.ГоденДо)
				И СтрокаДерева.ГоденДо < ДатаКонтроляСрокаГодности Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольОкончанияСрокаГодности.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки") Тогда
		
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено Тогда
				
				ВыполнятьКонтроль = (ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов
					И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
						Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая))
					Или Не ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов;

				ПропуститьВложенныеУпаковкиГрупповойУпаковки = Ложь;

				Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП,
					ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда

					ПропуститьВложенныеУпаковкиГрупповойУпаковки = СтрокаДанных.СтрокаДерева <> Неопределено
						И СтрокаДанных.СтрокаДерева.Родитель <> Неопределено
						И СтрокаДанных.СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;

				КонецЕсли;

				ПродукцияПодлежащаяРозничномуКонтролю =
					ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП,
					ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) И Не ПропуститьВложенныеУпаковкиГрупповойУпаковки;
				
				ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
				Если ВыполнятьКонтроль
					И ДанныеРазбора <> Неопределено
					И СтрокаДанных.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
					И (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
						Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
							ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
					
					СоставКодаМаркировки   = ДанныеРазбора.СоставКодаМаркировки;
					КодВключаетКриптоХвост = Ложь;
					
					Если СоставКодаМаркировки <> Неопределено Тогда
						Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
							КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
						КонецЕсли;
					КонецЕсли;
					
					Если ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП
						Или КодВключаетКриптоХвост
						Или ПродукцияПодлежащаяРозничномуКонтролю Тогда
						
						Если Не КодВключаетКриптоХвост
							И Не СтрокаДерева.ЕстьВПулеКодовМаркировки Тогда
							
							ЕстьОшибки = Истина;
							ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
								Новый Структура(
									"СтрокаДерева, ТекстОшибки",
									СтрокаДерева,
									НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
									|Отсканируйте полный код маркировки.'")));
							
						ИначеЕсли Не КодВключаетКриптоХвост
							И ПроверятьСтруктуруКодовМаркировки Тогда
							
							ЕстьОшибки = Истина;
							ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
								Новый Структура(
									"СтрокаДерева, ТекстОшибки",
									СтрокаДерева,
									НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
									|Отсканируйте полный код маркировки или в настройках сканирования отключите опцию ""Проверять структуру кодов маркировки"".'")));
							
						ИначеЕсли ПроверятьСтруктуруКодовМаркировки
							И КодВключаетКриптоХвост
							И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
							И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда
							
							ЕстьОшибки = Истина;
							ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
								Новый Структура(
									"СтрокаДерева, ТекстОшибки",
									СтрокаДерева, НСтр("ru = 'В структуре кода маркировки отсутствуют разделители GS'")));
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольКоличестваМерногоТовара") Тогда
			
			Если СтрокаДерева.ТребуетВзвешивания
				И СтрокаДерева.Строки.Количество() = 0
				И СтрокаДерева.Количество = 0 Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольКоличестваМерногоТовара.Добавить(СтрокаДерева);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставГрупповыхУпаковок") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено
				И ПроверитьНаОшибкиГрупповуюУпаковку(СтрокаДанных, СтрокаДерева, ПравилаПроверкиНаОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтролироватьСоставЛогистическихУпаковок") Тогда
			
			Если СтрокаДанных = Неопределено Тогда
				СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(
					СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено
				И Не ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(СтрокаДерева.Штрихкод)
				И ПроверитьНаОшибкиЛогистическуюУпаковку(СтрокаДанных, СтрокаДерева, ПравилаПроверкиНаОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Вставить(СтрокаДерева.Штрихкод, Истина);
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	ИнтеграцияИСМПВЕТИС.ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);

КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодностиДокумента(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если ПравилоПроверки.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыТовары = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
	
	ГоденДо = '00010101';
	Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
		И СтрокаДанных.СоставКодаМаркировки.Свойство("ГоденДо")
		И ЗначениеЗаполнено(СтрокаДанных.СоставКодаМаркировки.ГоденДо) Тогда
		ГоденДо = СтрокаДанных.СоставКодаМаркировки.ГоденДо;
		СтруктураПоиска.Вставить("СрокГодности", ГоденДо);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(СтруктураПоиска);
	СтруктураПоиска.Удалить("Номенклатура");
	СтруктураПоиска.Удалить("Характеристика");
	
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = Новый Массив;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПодходящиеИдентификаторыПроисхожденияВЕТИС.Добавить(НайденнаяСтрока.ИдентификаторПроисхожденияВЕТИС);
	КонецЦикла;
	ПодходящиеИдентификаторыПроисхожденияВЕТИС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодходящиеИдентификаторыПроисхожденияВЕТИС);
	
	ИдентификаторыПоДокументуОснованию = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС) Тогда
		ИдентификаторыПоДокументуОснованию.Добавить(СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС) Тогда
		ИдентификаторыПоДокументуОснованию = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаДанных.ИдентификаторыПроисхожденияВЕТИС, Ложь);
	КонецЕсли;
	
	// Ограничим данными документа, если ввод по документу-основанию
	Если ИдентификаторыПоДокументуОснованию.Количество() Тогда
		ПодходящиеИдентификаторыПроисхожденияВЕТИС = ОбщегоНазначенияИСКлиентСервер.ПересечениеМассивов(ПодходящиеИдентификаторыПроисхожденияВЕТИС, ИдентификаторыПоДокументуОснованию)
	КонецЕсли;
	
	Если ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() > 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС;
	ИначеЕсли ПодходящиеИдентификаторыПроисхожденияВЕТИС.Количество() = 1 Тогда
		СтрокаДанных.ИдентификаторПроисхожденияВЕТИС = ПодходящиеИдентификаторыПроисхожденияВЕТИС[0];
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			СтрокаДанных.ГоденДо = ГоденДо;
			СтрокаДанных.ТребуетсяВыборВСД = Ложь;
		Иначе
			СтруктураПоиска.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаДанных.ИдентификаторПроисхожденияВЕТИС);
			НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				СтрокаДанных.ГоденДо = НайденныеСтроки[0].СрокГодности;
				СтрокаДанных.ТребуетсяВыборВСД = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ИдентификаторПроисхожденияВЕТИС, ГоденДо");
		КонецЕсли;
	ИначеЕсли ИдентификаторыПоДокументуОснованию.Количество() Тогда
		ПравилоПроверки.ЕстьОшибка     = Истина;
		СтрокаДанных.ТребуетсяВыборВСД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиПоСрокуГодности(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования)
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПроверитьДанныеСтрокиПоСрокуГодностиДокументаОснования(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	КонецЕсли;
	
	ПроверитьДанныеСтрокиПоСрокуГодностиДокумента(СтрокаДанных, ПравилоПроверки, ПараметрыСканирования);
	
КонецПроцедуры

Функция ПроизвестиКонтрольСпособаВводаВОборотОстатки(СтрокаДанных, ПараметрыСканирования)

	МаркировкаОстатков = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	ШаблонОшибки       = НСтр("ru = 'Способ ввода в оборот: %1
	                                |Ожидаемый способ ввода в оборот: %2'");
	
	СообщитьОбОшибке            = Истина;
	СпособВводаВОборот          = Неопределено;
	ОжидаемыйСпособВводаВОборот = Неопределено;
	ДопустимыеСпособыВвода      = Новый Массив();

	Если ТипЗнч(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) = Тип("Массив") Тогда
		ДопустимыеСпособыВвода = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
		ДопустимыеСпособыВвода.Добавить(ПараметрыСканирования.ДопустимыйСпособВводаВОборот);
	КонецЕсли;
	
	Если ДопустимыеСпособыВвода.Найти(МаркировкаОстатков) <> Неопределено
		Или ПараметрыСканирования.ЭтоМаркировкаОстатков = Истина Тогда

		СпособВводаВОборот          = СтрокаДанных.СпособВводаВОборот;
		ОжидаемыйСпособВводаВОборот = МаркировкаОстатков;

		Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		ИначеЕсли СтрокаДанных.СпособВводаВОборот = МаркировкаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		КонецЕсли;

	ИначеЕсли (ДопустимыеСпособыВвода.Количество() > 0
		И ДопустимыеСпособыВвода.Найти(МаркировкаОстатков) = Неопределено)
		Или ПараметрыСканирования.ЭтоМаркировкаОстатков = Ложь Тогда

		СпособВводаВОборот          = СтрокаДанных.СпособВводаВОборот;
		ОжидаемыйСпособВводаВОборот = СтрСоединить(
					ДопустимыеСпособыВвода,
					НСтр("ru = ','") + " ");

		Если СтрокаДанных.СпособВводаВОборот <> МаркировкаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		ИначеЕсли Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
			СообщитьОбОшибке = Ложь;
		КонецЕсли;

	Иначе
		СообщитьОбОшибке = Ложь;
	КонецЕсли;
	
	Если СообщитьОбОшибке Тогда
		Возврат СтрШаблон(
			ШаблонОшибки,
			СпособВводаВОборот,
			ОжидаемыйСпособВводаВОборот);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ЗаполнениеДанных

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИС МП. Сведения формируются на основании
//  данных, полученных из сервиса ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииСЗапросомСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	МассивСтрокТаблицы = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ОбработанСОшибками
			Или ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаТаблицы.ЭтоКодВводаОстатков
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.КоличествоПотребительскихУпаковок = 1;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.Идентифицирован
			И ВозможнаПродукцияИСМП(СтрокаТаблицы)
			И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(СтрокаТаблицы.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ)
			И (СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.ПустаяСсылка()) Тогда
			МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ДеревоУпаковокПоДаннымИСМП(МассивСтрокТаблицы, ПараметрыСканирования);
	
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Истина);
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Истина);
	ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Ложь);
	ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Ложь);
	ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Ложь);
	
	ОбработатьДеревоПолученноеИзИСМП(Результат.ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки);
	
КонецПроцедуры

// Заполняет структуру "ДанныеПоШтрихкодам" сведениями, необходимыми для продукции ИС МП. Сведения формируются без запроса
// данных в сервисе ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСведенийИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаТаблицы.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Идентифицирован Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоКодВводаОстатков
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.КоличествоПотребительскихУпаковок = 1;
		КонецЕсли;
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаТаблицы.ВидПродукции)
			И СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаТаблицы.ШтрихкодУпаковки = ШтрихкодированиеИС.СоздатьМаркированныйТоварПоДаннымШтрихкода(СтрокаТаблицы, ПараметрыСканирования);
			СтрокаТаблицы.КоличествоПотребительскихУпаковок = 1;
			СтрокаТаблицы.Идентифицирован           = Истина;
			Если СтрокаТаблицы.СтрокаДерева <> Неопределено Тогда
				СтрокаТаблицы.СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
				СтрокаТаблицы.СтрокаДерева.ШтрихкодУпаковки = СтрокаТаблицы.ШтрихкодУпаковки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьДанныеПоШтрихкодамДаннымиПулаКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Дополняет данные по штрихкодам спецификой, исключая информацию без обращения в систему ИС МП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = Новый Соответствие;
	СтрокиТаблицыДанных = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ПараметрыСканирования);
	
	Для Каждого СтрокаДанных Из СтрокиТаблицыДанных Цикл
		
		Если СтруктураДанныхТребуетЗагрузкиВложенныхКодовМаркировки(СтрокаДанных, ПараметрыСканирования) Тогда
			СтрокаДанных.Идентифицирован = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(СтрокиТаблицыДанных, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		НормализоватьДанныеДереваУпаковок(
			ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
			МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
			НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
			ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары);
		КонецЕсли;
		
		ДополнитьВложенныеШтрихкодыДаннымиМолочнойПродукции(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(СтрокиТаблицыДанных, ПараметрыСканирования);
	
КонецПроцедуры

// Возвращает все коды маркировки, находящиеся в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам                                 - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок - Соответствие
//  ПараметрыСканирования                              - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  Массив из Строка - Коды маркировки.
Функция СтрокиТаблицыДанныхДляПолученияСпецифики(ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования)
	
	СтрокиТаблицыДанных = Новый Массив;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ВозможнаПродукцияИСМП(СтрокаДанных)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И (СтрокаДанных.Входящий Или Не ЗначениеЗаполнено(СтрокаДанных.Статус))
			И СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			СтрокиТаблицыДанных.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиТаблицыДанных;
	
КонецФункции

// Возвращает признак, что обрабатываемый код маркировки относится либо может относиться к ИСМП (без табака)
// 
// Параметры:
//   СтрокаДанных - Произвольный - элемент коллекции "ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки"
//     либо совместимый по полям (строка дерева значений, структура).
// Возвращаемое значение:
//   Булево - в текущей строке продукция ИСМП явно присутствует либо возможна
Функция ВозможнаПродукцияИСМП(СтрокаДанных)
	
	Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
		Возврат Ложь;
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции) Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
		Возврат Ложь;
	ИначеЕсли Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из СтрокаДанных.ВидыПродукцииКодаМаркировки Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет связанные строки таблицы Маркированные товары данными строк дерева упаковок.
// 
// Параметры:
//  МаркированныеТовары - ТаблицаЗначений - Таблица маркируемой продукции.
Процедура ПривестиДанныеМаркированныхТоваровВСоответствиеДеревуУпаковок(МаркированныеТовары)
	
	Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТовары.СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет заполнение данных по штрихкодам спецификой продукции ИС МП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовИСМП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок = СформироватьДеревоУпаковокПоДаннымСервиса(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
			МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
			НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
		Неопределено,
		СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок,
		ДанныеПоШтрихкодам,
		ПараметрыСканирования);
	
	ПотребительскиеУпаковки = СтрокиТаблицыДанныхДляПолученияСпецифики(
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ПараметрыСканирования);

	Если ПотребительскиеУпаковки.Количество() > 0 Тогда
		
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(ПотребительскиеУпаковки, ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки                    = Результат.ТекстОшибки;
			ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Результат.ТребуетсяОбновлениеКлючаСессии;
			
			Возврат;
			
		Иначе
			СпецификаШтрихкодовПотребительскихУпаковок = Результат.СпецификаШтрихкодов;
		КонецЕсли;
		
		ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
			СпецификаШтрихкодовПотребительскихУпаковок,
			Неопределено,
			ДанныеПоШтрихкодам,
			ПараметрыСканирования);

	КонецЕсли;
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(ПотребительскиеУпаковки, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ДополнитьВложенныеШтрихкодыДаннымиМолочнойПродукции(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДеревоУпаковокПоДаннымСервиса(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.Свойство("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП")
		И Не ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	СтрокиТаблицыДляЗапроса = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки,, Ложь)
			И ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки)
			И ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки)
			И СтрокаДанных.Входящий
			И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП,
					ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ)
				Или Не СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
			
			СтрокиТаблицыДляЗапроса.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиТаблицыДляЗапроса.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	РезультатПолученияДанных = ДеревоУпаковокПоДаннымИСМП(СтрокиТаблицыДляЗапроса, ПараметрыСканирования); 
	Если ЗначениеЗаполнено(РезультатПолученияДанных.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = РезультатПолученияДанных.ТекстОшибки;
	Иначе
		ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса = РезультатПолученияДанных.ДеревоУпаковок;
	КонецЕсли;
	
	Возврат РезультатПолученияДанных.СоответствиеСтрокДерева;
	
КонецФункции

Процедура ДополнитьТаблицуДанныеКодовМаркировкиСпецификой(
	СпецификаШтрихкодовПотребительскихУпаковок, СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ПредставленияСтатусов = ШтрихкодированиеОбщегоНазначенияИСМП.ПредставленияСтатусов();
	НаличиеКолонокВДанных = Новый Соответствие;
	КодыМаркировкиДляЗаполненияВводаВОборот = Новый Массив;
	СтрокиТаблицыДляЗаполненияВводаВОборот  = Новый Массив;
	
	Если СпецификаШтрихкодовПотребительскихУпаковок <> Неопределено Тогда
		
		Для Каждого КлючЗначение Из СпецификаШтрихкодовПотребительскихУпаковок Цикл
			
			СтрокаТаблицыДанных = КлючЗначение.Ключ;
			СпецификаСтроки     = КлючЗначение.Значение;
			
			ПоляДляЗаполнения = Новый Массив;
			Для Каждого КлючИЗначение Из СпецификаСтроки Цикл
				
				ИмяСвойства  = КлючИЗначение.Ключ;
				ЕстьСвойство = НаличиеКолонокВДанных.Получить(ИмяСвойства);
				Если ЕстьСвойство = Неопределено Тогда
					ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных, ИмяСвойства);
					НаличиеКолонокВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КлючИЗначение.Значение)
					И ЕстьСвойство Тогда
					ПоляДляЗаполнения.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПоляДляЗаполнения.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанных, СпецификаСтроки, СтрСоединить(ПоляДляЗаполнения, ","));
			КонецЕсли;
			
			Если СтрокаТаблицыДанных.СтрокаДерева = Неопределено Тогда
				Если СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
					КоличествоПотребительскихУпаковок = 0;
					Если СпецификаСтроки <> Неопределено
						И СпецификаСтроки.ВложенныеУпаковки <> Неопределено Тогда
						КоличествоПотребительскихУпаковок = СпецификаСтроки.ВложенныеУпаковки.Количество();
					КонецЕсли;
					Если КоличествоПотребительскихУпаковок > 0 Тогда
						СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицыДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = 1;
				ИначеЕсли СпецификаСтроки.ВложенныеУпаковки <> Неопределено Тогда
					
					ВсеВложенныеУпаковкиПотребительские = Истина;
					Для Каждого КлючИЗначение Из СпецификаСтроки.ВложенныеУпаковки Цикл
						Если КлючИЗначение.Значение.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
							ВсеВложенныеУпаковкиПотребительские = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ВсеВложенныеУпаковкиПотребительские Тогда
						СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = СпецификаСтроки.ВложенныеУпаковки.Количество();
					Иначе
						СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = СтрокаТаблицыДанных.ПлановоеКоличествоПотребительскихУпаковок;
					КонецЕсли;
					
				КонецЕсли;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицыДанных.СтрокаДерева, "КоличествоПотребительскихУпаковок") Тогда
				СтрокаТаблицыДанных.КоличествоПотребительскихУпаковок = СтрокаТаблицыДанных.СтрокаДерева.КоличествоПотребительскихУпаковок;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус)
				И ЗначениеЗаполнено(СтрокаТаблицыДанных.ОсобоеСостояние) Тогда
				ПредставлениеСтатуса = СтрШаблон(
					НСтр("ru = '%1 (%2)'"),
					ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус),
					ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.ОсобоеСостояние));
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыДанных.Статус) Тогда
				ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаТаблицыДанных.Статус);
			Иначе
				ПредставлениеСтатуса = "";
			КонецЕсли;
			
			СтрокаТаблицыДанных.ПредставлениеСтатуса = ПредставлениеСтатуса;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицыДанных.СпособВводаВОборот) Тогда
				КодыМаркировкиДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных.Штрихкод);
				СтрокиТаблицыДляЗаполненияВводаВОборот.Добавить(СтрокаТаблицыДанных);
			КонецЕсли;
			
			ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(
				СтрокаТаблицыДанных, Неопределено,
				ПараметрыСканирования);
			
			Если ТребуетсяЗагрузкаВложенныхКодовМаркировки(
				СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Тогда
				СтрокаТаблицыДанных.Идентифицирован = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодыМаркировкиДляЗаполненияВводаВОборот.Количество() > 0 Тогда
			ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(
				СтрокиТаблицыДляЗаполненияВводаВОборот, КодыМаркировкиДляЗаполненияВводаВОборот, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок <> Неопределено
		И СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок.Количество() Тогда
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ОтключитьОтборПоВидуПродукции",                                  Истина);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойПотребительскихУпаковок",                 Ложь);
		ПараметрыОбработки.Вставить("ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок", Истина);
		ПараметрыОбработки.Вставить("ЭтоЗаполнениеВложенныхШтрихкодов",                               Ложь);
		ПараметрыОбработки.Вставить("СвязыватьСтрокиДереваСДаннымиКодовМаркировки",                   Истина);
		
		ОбработатьДеревоПолученноеИзИСМП(
			ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки);
		
		Для Каждого КлючЗначение Из СпецификаШтрихкодовГрупповыхИЛогистическихУпаковок Цикл
			
			СтрокаТаблицыДанных = КлючЗначение.Ключ;
			СпецификаСтроки     = КлючЗначение.Значение;
			
			Если ЗначениеЗаполнено(СпецификаСтроки) Тогда
				
				Если ТребуетсяЗагрузкаВложенныхКодовМаркировки(
					СпецификаСтроки, СтрокаТаблицыДанных, ПараметрыСканирования) Тогда
					СтрокаТаблицыДанных.Идентифицирован = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет способ ввода в оборот специфики кодов маркировки. Сначала выполянется заполнение на основании данных регистра
//    сведений "Пул кодов маркировки СУЗ", если получить способа ввода в оборот не удается выполняется обращение в сервис ИС МП.
// 
// Параметры:
//  СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//  КодыМаркировки - Массив из Строка - Список кодов маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(СтрокиТаблицыДанных, КодыМаркировки, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПулаПоКодамМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(КодыМаркировки);
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыДанных Цикл
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(СтрокаТаблицы.Штрихкод, "КодМаркировки");
		КонецЕсли;
		
		Если ДанныеПулаПоКоду <> Неопределено
			И Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
			
			Если ДанныеПулаПоКоду.МаркировкаОстатков Тогда
				СтрокаТаблицы.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
			Иначе
				СтрокаТаблицы.СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
			КонецЕсли;
			
			СтрокаТаблицы.ЭтоКодВводаОстатков      = ДанныеПулаПоКоду.МаркировкаОстатков;
			СтрокаТаблицы.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаТаблицы.ПолныйКодМаркировки      = ДанныеПулаПоКоду.ПолныйКодМаркировки;
			
		ИначеЕсли СтрокаТаблицы.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
			
			СтрокаТаблицы.ЭтоКодВводаОстатков = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получение специфичных данных, используемых только для табачной продукции.
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив Из СтрокаТаблицыЗначений: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам - Коды маркировки
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из ИС МП.
//   * ЕстьОшибки - Булево - Истина, если при попытке получения данных из ИСМП возникла ошибка.
//   * ТекстОшибки - Строка - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(СтрокиТаблицыДанныхДляПолученияСпецифики, ПараметрыСканирования)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамИСМП = ИнтерфейсИСМП.СтатусыКодовМаркировки(
		СтрокиТаблицыДанныхДляПолученияСпецифики,
		ПараметрыСканирования.Организация,
		ШтрихкодированиеИСМПКлиентСервер.РазрешеноЗапрашиватьСтатусыКодовЕАЭС(ПараметрыСканирования));
	
	Если ДанныеПоШтрихкодамИСМП.ТребуетсяОбновлениеКлючаСессии Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамИСМП.ТекстОшибки) Тогда
		
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МП.
			           |По причине: %1'"), ДанныеПоШтрихкодамИСМП.ТекстОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.СпецификаШтрихкодов = ДанныеПоШтрихкодамИСМП.СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ДанныеКодовМаркировки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки).
//  ТолькоПересчетНоменклатурыИКоличества - Булево - 
//  ЗаполнятьСтрокиДерева                 - Булево - 
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено, ТолькоПересчетНоменклатурыИКоличества = Ложь, ЗаполнятьСтрокиДерева = Ложь) Экспорт
	
	ДобавленныеКолонки = НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок, ПараметрыСканирования);
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		КоллекцияДополнительныхКолонок = ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки();
		ШтрихкодированиеОбщегоНазначенияМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДеревоУпаковок, КоллекцияДополнительныхКолонок, ДобавленныеКолонки);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДанныеКодовМаркировки",  ДанныеКодовМаркировки);
	ПараметрыЗаполнения.Вставить("Кэш",                    Новый Структура);
	ПараметрыЗаполнения.Вставить("ПараметрыСканирования",  ПараметрыСканирования);
	
	ПараметрыЗаполнения.Кэш.Вставить("ДобавленныеКолонки",                         ДобавленныеКолонки);
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполняемыеКолонки",                         Неопределено);
	ПараметрыЗаполнения.Кэш.Вставить("ТолькоПересчетНоменклатурыИКоличества",      ТолькоПересчетНоменклатурыИКоличества);
	ПараметрыЗаполнения.Кэш.Вставить("КолонкиДляПересчетаНоменклатурыИКоличества", Новый Соответствие);
	ПараметрыЗаполнения.Кэш.Вставить("ЗаполнятьСтрокиДерева",                      ЗаполнятьСтрокиДерева);
	
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Номенклатура", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Характеристика", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Серия", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("Количество", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("КоличествоПотребительскихУпаковок", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("КоличествоГрупповыхУпаковок", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("МаркированнаяПродукция", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ПроизвольнаяЕдиницаУчета", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ТребуетВзвешивания", Истина);
	ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества.Вставить("ТипУпаковки", Истина);
	
	ЗаполнитьСтрокиДерева(ДеревоУпаковок, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ПараметрыСлиянияДанных(ПараметрыЗаполнения, Приемник, Источник) Экспорт
	
	Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
		
		ИменаКолонокДляЗаполнения = ШтрихкодированиеОбщегоНазначенияИС.ИменаКолонокДляЗаполнения();
		
		ЗаполняемыеКолонки = Новый Структура;
		ЗаполняемыеКолонки.Вставить("ЗаполнятьНоменклатуру", Ложь);
		ЗаполняемыеКолонки.Вставить("ЗаполнятьКоличество",   Ложь);
		ЗаполняемыеКолонки.Вставить("КолонкиНоменклатуры",   "");
		ЗаполняемыеКолонки.Вставить("КолонкиДанныеСервиса",  "");
		ЗаполняемыеКолонки.Вставить("КолонкиСлужебные",      "");
		ЗаполняемыеКолонки.Вставить("Прочие",                Новый Массив);
		
		ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = ЗаполняемыеКолонки;
		
		КолонкиНоменклатуры  = Новый Массив;
		КолонкиСлужебные     = Новый Массив;
		КолонкиДанныеСервиса = Новый Массив;
		
		КолонкиДерева = Приемник.Колонки;
		Для Каждого Колонка Из Источник.Колонки Цикл
			
			ИмяКолонки = Колонка.Имя;
			
			Если КолонкиДерева.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Исключения[ИмяКолонки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоКолонкаНоменклатурыИКоличества = ПараметрыЗаполнения.Кэш.КолонкиДляПересчетаНоменклатурыИКоличества[ИмяКолонки] <> Неопределено;
			ЭтоДобавленнаяКолонка = ПараметрыЗаполнения.Кэш.ДобавленныеКолонки[ИмяКолонки] <> Неопределено;
			Если ПараметрыЗаполнения.Кэш.ТолькоПересчетНоменклатурыИКоличества
				И Не ЭтоКолонкаНоменклатурыИКоличества И Не ЭтоДобавленнаяКолонка Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Номенклатура[ИмяКолонки] <> Неопределено Тогда
				ЗаполняемыеКолонки.ЗаполнятьНоменклатуру = Истина;
				КолонкиНоменклатуры.Добавить(ИмяКолонки);
			ИначеЕсли ИменаКолонокДляЗаполнения.Количество[ИмяКолонки] <> Неопределено Тогда
				ЗаполняемыеКолонки.ЗаполнятьКоличество = Истина;
			ИначеЕсли ИменаКолонокДляЗаполнения.Служебные[ИмяКолонки] <> Неопределено Тогда
				КолонкиСлужебные.Добавить(ИмяКолонки);
			ИначеЕсли ИменаКолонокДляЗаполнения.ДанныеСервиса[ИмяКолонки] <> Неопределено Тогда
				КолонкиДанныеСервиса.Добавить(ИмяКолонки);
			Иначе
				ЗаполняемыеКолонки.Прочие.Добавить(ИмяКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполняемыеКолонки.КолонкиНоменклатуры  = СтрСоединить(КолонкиНоменклатуры, ",");
		ЗаполняемыеКолонки.КолонкиСлужебные     = СтрСоединить(КолонкиСлужебные, ",");
		ЗаполняемыеКолонки.КолонкиДанныеСервиса = СтрСоединить(КолонкиДанныеСервиса, ",");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для обувной продукции.
//
// Параметры:
//  СтрокаВерхнегоУровня - СтрокаДереваЗначений - Строки дерева упаковок.
//  ПараметрыЗаполнения - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
//  ЭтоПервыйУровень - Булево - Истина, если это верхний уровень дерева.
Процедура ЗаполнитьСтрокиДерева(СтрокаВерхнегоУровня, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, ЭтоПервыйУровень = Истина)
	
	ОчиститьКоличествоГрупповыхУпаковокИПачек = Истина;
	
	Для Каждого СтрокаДерева Из СтрокаВерхнегоУровня.Строки Цикл
		
		Если ОчиститьКоличествоГрупповыхУпаковокИПачек Тогда
			Если ТипЗнч(СтрокаВерхнегоУровня) = Тип("СтрокаДереваЗначений") Тогда
				СтрокаВерхнегоУровня.КоличествоПотребительскихУпаковок = 0;
				СтрокаВерхнегоУровня.КоличествоГрупповыхУпаковок       = 0;
				СтрокаВерхнегоУровня.Количество                        = 0;
				ОчиститьКоличествоГрупповыхУпаковокИПачек = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		
		СтрокаДанных = Неопределено;
		Если ПараметрыЗаполнения.ДанныеКодовМаркировки <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СтрокаДерева.НормализованныйШтрихкод) Тогда
				СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
			Иначе
				СтрокаДанных = ПараметрыЗаполнения.ДанныеКодовМаркировки.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			КонецЕсли;
			
			Если СтрокаДанных <> Неопределено Тогда
				
				Если ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки = Неопределено Тогда
					ПараметрыСлиянияДанных(ПараметрыЗаполнения, СтрокаДерева.Владелец(), ПараметрыЗаполнения.ДанныеКодовМаркировки);
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева = Неопределено
					И ПараметрыЗаполнения.Кэш.ЗаполнятьСтрокиДерева Тогда
					СтрокаДанных.СтрокаДерева = СтрокаДерева;
				КонецЕсли;
				
				ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(
			СтрокаДерева, СтрокаДанных,
			ПараметрыЗаполнения.ПараметрыСканирования);
		
		ЗаполнитьСтрокиДерева(
			СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровня, Ложь);
		
		ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных);
		
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПоДаннымРазбораКодаМаркировки(СтрокаДанных, СтрокаДанныхДополнительно, ПараметрыСканирования) Экспорт
	
	Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
		
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаДанных.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции);
		Если ДанныеРазбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора);
		
		СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
		
	КонецЕсли;
	
	ПроверятьНаличиеПолейСоставаКодаМаркировки = Ложь;
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод
		Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		ПроверятьНаличиеПолейСоставаКодаМаркировки = Истина;
	КонецЕсли;
	
	СоставКодаМаркировки = СтрокаДанных.СоставКодаМаркировки;
	
	Если ПроверятьНаличиеПолейСоставаКодаМаркировки Тогда
		Если СоставКодаМаркировки.Свойство("GTIN") Тогда
			СтрокаДанных.GTIN = СоставКодаМаркировки.GTIN;
			СтрокаДанных.EAN  = СоставКодаМаркировки.EAN;
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
			СтрокаДанных.GTIN = Неопределено;
			СтрокаДанных.EAN  = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаДанных.GTIN = СоставКодаМаркировки.GTIN;
		СтрокаДанных.EAN  = СоставКодаМаркировки.EAN;
	КонецЕсли;
	
	Если СтрокаДанныхДополнительно <> Неопределено Тогда
		СтрокаДанныхДополнительно.GTIN = СтрокаДанных.GTIN;
		СтрокаДанныхДополнительно.EAN  = СтрокаДанных.EAN;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтрокаДанных.ВидПродукции)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ГоденДо")
		И СоставКодаМаркировки.Свойство("ГоденДо") И ЗначениеЗаполнено(СоставКодаМаркировки.ГоденДо) Тогда
		
		СтрокаДанных.ГоденДо                  = СоставКодаМаркировки.ГоденДо;
		СтрокаДанных.СкоропортящаясяПродукция = СоставКодаМаркировки.СкоропортящаясяПродукция;
		
		Если СтрокаДанныхДополнительно <> Неопределено Тогда
			СтрокаДанныхДополнительно.ГоденДо                  = СтрокаДанных.ГоденДо;
			СтрокаДанныхДополнительно.СкоропортящаясяПродукция = СтрокаДанных.СкоропортящаясяПродукция;
		КонецЕсли;
		
	ИначеЕсли СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "МРЦ")
		И СоставКодаМаркировки.Свойство("МРЦ") И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
		
		СтрокаДанных.МРЦ = СоставКодаМаркировки.МРЦ;
		
		Если СтрокаДанныхДополнительно <> Неопределено Тогда
			СтрокаДанныхДополнительно.МРЦ = СтрокаДанных.МРЦ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьХарактеристикиСтрокиДереваПоПодчиненнымСтрокам(СтрокаДерева, СтрокаДанных)
	
	Если ТипЗнч(СтрокаДерева.ТипУпаковки) = Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		Иначе
			// Набор или Логистическая упаковка
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = Неопределено Тогда
			СтрокаДерева.Номенклатура = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		КонецЕсли;
		
		Если СтрокаДерева.Характеристика = Неопределено Тогда
			СтрокаДерева.Характеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		КонецЕсли;
		
		Если СтрокаДерева.Серия = Неопределено Тогда
			СтрокаДерева.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
		
	Иначе
		
		ПроверятьНоменклатуру   = Истина;
		ПроверятьХарактеристику = Истина;
		ПроверятьСерию          = Истина;
		
		Номенклатура   = Неопределено;
		Характеристика = Неопределено;
		Серия          = Неопределено;
		
		ТребуетВзвешивания       = Неопределено;
		ПроизвольнаяЕдиницаУчета = Неопределено;
		МаркируемаяПродукция     = Неопределено;
		
		Для Каждого Строка Из СтрокаДерева.Строки Цикл
			
			Если ПроверятьНоменклатуру Тогда
				Если Номенклатура = Неопределено Тогда
					Номенклатура = Строка.Номенклатура;
				ИначеЕсли Номенклатура <> Строка.Номенклатура Тогда
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьХарактеристику Тогда
				Если Характеристика = Неопределено Тогда
					Характеристика = Строка.Характеристика;
				ИначеЕсли Характеристика <> Строка.Характеристика Тогда
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
					Серия          = Неопределено;
					ПроверятьНоменклатуру   = Ложь;
					ПроверятьХарактеристику = Ложь;
					ПроверятьСерию          = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьСерию Тогда
				Если Серия = Неопределено Тогда
					Серия = Строка.Серия;
				ИначеЕсли Серия <> Строка.Серия Тогда
					Серия = Неопределено;
					ПроверятьСерию = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТребуетВзвешивания       = Строка.ТребуетВзвешивания;
			ПроизвольнаяЕдиницаУчета = Строка.ПроизвольнаяЕдиницаУчета;
			МаркируемаяПродукция     = Строка.МаркируемаяПродукция;
			
			Если Не ПроверятьНоменклатуру И Не ПроверятьХарактеристику И Не ПроверятьСерию Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПроверятьНоменклатуру Или Не ПроверятьХарактеристику Тогда
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		Иначе
			СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
				СтрокаДерева.Номенклатура   = Номенклатура;
				СтрокаДерева.Характеристика = Характеристика;
				СтрокаДерева.Серия          = Серия;
				
				СтрокаДерева.ТребуетВзвешивания       = ТребуетВзвешивания;
				СтрокаДерева.ПроизвольнаяЕдиницаУчета = ПроизвольнаяЕдиницаУчета;
				СтрокаДерева.МаркируемаяПродукция     = МаркируемаяПродукция;
				
			Иначе
				
				СтрокаДерева.Номенклатура   = Неопределено;
				СтрокаДерева.Характеристика = Неопределено;
				СтрокаДерева.Серия          = Неопределено;
				
				СтрокаДерева.ТребуетВзвешивания       = Ложь;
				СтрокаДерева.ПроизвольнаяЕдиницаУчета = Ложь;
				СтрокаДерева.МаркируемаяПродукция     = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		СтрокаДанных.ТипУпаковки = СтрокаДерева.ТипУпаковки;
		
		СтрокаДанных.Номенклатура   = СтрокаДерева.Номенклатура;
		СтрокаДанных.Характеристика = СтрокаДерева.Характеристика;
		СтрокаДанных.Серия          = СтрокаДерева.Серия;
		
		СтрокаДанных.ТребуетВзвешивания       = СтрокаДерева.ТребуетВзвешивания;
		СтрокаДанных.ПроизвольнаяЕдиницаУчета = СтрокаДерева.ПроизвольнаяЕдиницаУчета;
		СтрокаДанных.МаркируемаяПродукция     = СтрокаДерева.МаркируемаяПродукция;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДереваПоДаннымТаблицыКодыМаркировок(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	ЗаполняемыеКолонки   = ПараметрыЗаполнения.Кэш.ЗаполняемыеКолонки;
	ЕстьРодитель         = СтрокаДерева.Родитель <> Неопределено;
	НетДочернихЭлементов = СтрокаДерева.Строки.Количество() = 0;
	
	Если ЗаполняемыеКолонки.ЗаполнятьНоменклатуру И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Если ЕстьРодитель
			И ЗначениеЗаполнено(СтрокаДерева.Родитель.Номенклатура)
			И СтрокаДерева.Родитель.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Родитель, ЗаполняемыеКолонки.КолонкиНоменклатуры);
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаДерева.Родитель, ЗаполняемыеКолонки.КолонкиНоменклатуры);
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеКолонки.ЗаполнятьКоличество И НетДочернихЭлементов Тогда
		Если ЗначениеЗаполнено(СтрокаДанных.КоличествоПотребительскихУпаковок)
			Или ЗначениеЗаполнено(СтрокаДанных.Количество) Тогда
			СтрокаДерева.Количество                                = СтрокаДанных.Количество;
			СтрокаДерева.КоличествоПотребительскихУпаковок         = СтрокаДанных.КоличествоПотребительскихУпаковок;
			СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			СтрокаДерева.Коэффициент                               = СтрокаДанных.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗаполняемыеКолонки.КолонкиСлужебные) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиСлужебные);
	КонецЕсли;
	
	ЗаполненныеКолонки = Новый Массив;
	Для Каждого ИмяКолонки Из ЗаполняемыеКолонки.Прочие Цикл
		
		ЗначениеКолонки = СтрокаДанных[ИмяКолонки];
		Если ЗначениеЗаполнено(ЗначениеКолонки)
			И ЗначениеКолонки <> СтрокаДерева[ИмяКолонки] Тогда
			СтрокаДерева[ИмяКолонки] = ЗначениеКолонки;
			ЗаполненныеКолонки.Добавить(ИмяКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ЗаполняемыеКолонки.КолонкиДанныеСервиса) Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.Статус)
			И Не ЗначениеЗаполнено(СтрокаДерева.Статус) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДанных, ЗаполняемыеКолонки.КолонкиДанныеСервиса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева, СтрокаДанных, ПараметрыЗаполнения)
	
	НоменклатураНабораИКомплектующихОтличается = СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		И СтрокаДерева.Строки.Количество()
		И Не ПроверкаИПодборПродукцииИСМПКлиентСервер.НоменклатурыСтрокСовпадают(СтрокаДерева, СтрокаДерева.Строки[0]);
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		// Мультитоварный набор ведет себя как потребительская упаковка
		Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка)
		// Монотоварный набор (с отдельной номенклатурой для набора) ведет себя как потребительская упаковка
		Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
			И НоменклатураНабораИКомплектующихОтличается) Тогда
		
		СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
		Если ЗначениеЗаполнено(СтрокаДерева.КоличествоПоДаннымИБ) Тогда
			ЗаполнятьКоличество = Истина;
			Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
					СтрокаДерева.ВидПродукции,
					ПараметрыЗаполнения.ПараметрыСканирования.ВидОперацииИСМП)
				И ПараметрыЗаполнения.ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ЧастичноеВыбытие")
				И СтрокаДерева.ЧастичноеВыбытие Тогда
				ЗаполнятьКоличество = Ложь;
			КонецЕсли;
			Если ЗаполнятьКоличество Тогда
				СтрокаДерева.Количество = СтрокаДерева.КоличествоПоДаннымИБ;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		// Монотоварный набор ведет себя как групповая упаковка
		Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
			И Не НоменклатураНабораИКомплектующихОтличается) Тогда
		
		СтрокаДерева.КоличествоГрупповыхУпаковок = 1;
		// Количество пачек загружено из справочника. Актуально для детализации: Короба с блоками
		Если СтрокаДерева.Строки.Количество() = 0
			И ЗначениеЗаполнено(СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
			СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
			СтрокаДерева.Количество                        = СтрокаДерева.КоличествоПоДаннымИБ;
		КонецЕсли;
		
	ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
		
		// Количество загружено из справочника. Актуально для детализации: Короба с групповыми упаковками
		Если СтрокаДерева.Строки.Количество() = 0
			И ЗначениеЗаполнено(СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
			// Количество групповых упаковок можно расчитать по данным GTIN
			СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ;
			СтрокаДерева.Количество                        = СтрокаДерева.КоличествоПоДаннымИБ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		РодительНаборКакПотребительскаяУпаковка = Ложь;
		Если СтрокаДерева.Родитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			Если СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
				РодительНаборКакПотребительскаяУпаковка = Истина;
			ИначеЕсли СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И СтрокаДерева.Родитель.Строки.Количество()
				И Не ПроверкаИПодборПродукцииИСМПКлиентСервер.НоменклатурыСтрокСовпадают(СтрокаДерева.Родитель, СтрокаДерева) Тогда
				РодительНаборКакПотребительскаяУпаковка = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не РодительНаборКакПотребительскаяУпаковка Тогда
			СтрокаДерева.Родитель.КоличествоПотребительскихУпаковок = СтрокаДерева.Родитель.КоличествоПотребительскихУпаковок
			                                                        + СтрокаДерева.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
			И Не РодительНаборКакПотребительскаяУпаковка Тогда
			СтрокаДерева.Родитель.Количество = СтрокаДерева.Родитель.Количество
			                                 + СтрокаДерева.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДанных <> Неопределено Тогда
		
		СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковок;
		СтрокаДанных.Количество                        = СтрокаДерева.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДеревоПолученноеИзИСМП(ДеревоУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования, ПараметрыОбработки)
	
	ОтключитьОтборПоВидуПродукции = ПараметрыОбработки.ОтключитьОтборПоВидуПродукции;
	
	Если ПараметрыСканирования <> Неопределено
		И (ПараметрыСканирования.ОтборПоВидуПродукции И Не ОтключитьОтборПоВидуПродукции)
		И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		ШтрихкодированиеОбщегоНазначенияИС.ОтобратьСтрокиДереваИСМППоВидуПродукции(
			ДеревоУпаковок,
			ПараметрыСканирования.ДопустимыеВидыПродукции[0]);
	КонецЕсли;
	
	// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
	ИнициализироватьМаркированныеТовары = Не ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева;
	
	Если ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов Тогда
		ВложенныеШтрихкоды = ИнициализацияВложенныхШтрихкодов(
			ДеревоУпаковок, ИнициализироватьМаркированныеТовары, ПараметрыСканирования);
		НормализоватьДанныеДереваУпаковок(
			ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	Иначе
		ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(
			ДеревоУпаковок, ИнициализироватьМаркированныеТовары);
	КонецЕсли;
	
	ДополнительныеКолонки = Новый Структура;
	ПараметрыДерева = ШтрихкодированиеОбщегоНазначенияМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ШтрихкодированиеОбщегоНазначенияМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, ДополнительныеКолонки);
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ШтрихкодированиеМОТП.КоллекцияДополнительныхКолонокДереваУпаковокДляФормыПроверкиКодовМаркировки(ДополнительныеКолонки);
	КонецЕсли;
	ДополнительныеКолонки.Вставить("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДополнительныеКолонки.Вставить("ВидУпаковки",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ИменаКолонокДляКопированияСвойств = Новый Массив;
	Для Каждого КлючИЗначение Из ДополнительныеКолонки Цикл
		ИменаКолонокДляКопированияСвойств.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок, ИменаКолонокДляКопированияСвойств);
	
	Изменения = Новый Структура(
		"ДобавленныеСтроки, ИзмененныеСтроки, ЗаполненGTIN",
		Новый Массив, Новый Массив, Новый Массив);
	ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
		ДанныеПоШтрихкодам, ВложенныеШтрихкоды.ДеревоУпаковок,
		Изменения, ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
	
	Если ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
		Или Изменения.ДобавленныеСтроки.Количество() Тогда
		
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьСведенияПоШтрихкодамEANСУчетомВерсии(
			ДанныеПоШтрихкодам, ПараметрыСканирования, Изменения.ДобавленныеСтроки);
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьВидыПродукцииДанныхКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, Изменения.ДобавленныеСтроки);
		
		Если Не ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
			И Не ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
			// Если форма проверки и подбора загружается по данным сервиса из
			// документа приемки или поступления товаров - то нужно поискать сопоставленные товары в штрихкодах упаковок
			
			Если ПараметрыОбработки.ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок
				Или ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
				Или ВложенныеШтрихкоды.ДеревоУпаковок.Колонки.Найти("ТипУпаковки") = Неопределено Тогда
				НормализоватьДанныеДереваУпаковок(
					ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
					Истина, ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов);
			КонецЕсли;
			
			ПараметрыСозданияШтрихкодов = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(
				ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
			ПараметрыСозданияШтрихкодов.ИмяКолонкиКоличествоПотребительскихУпаковок = "КоличествоПотребительскихУпаковок";
			
			СтрокиДереваСНайденнымиШтрихкодамиУпаковок = Новый Массив;
			Справочники.ШтрихкодыУпаковокТоваров.ЗаполнитьШтрихкодыУпаковокИКоличествоПоДеревуМаркируемойПродукции(
				ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСозданияШтрихкодов, СтрокиДереваСНайденнымиШтрихкодамиУпаковок);
			
			ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьДанныеИзвестнойМаркируемойПродукции(
				ДанныеПоШтрихкодам, СтрокиДереваСНайденнымиШтрихкодамиУпаковок, ПараметрыСканирования, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Изменения.ЗаполненGTIN.Количество() Тогда
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьСведенияПоШтрихкодамEANСУчетомВерсии(
			ДанныеПоШтрихкодам, ПараметрыСканирования, Изменения.ЗаполненGTIN);
	КонецЕсли;
	
	// Заполнить только коэффициенты упаковок и количество, если они не заполнены ранее
	ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(Изменения.ИзмененныеСтроки, ПараметрыСканирования, Ложь);
	
	ЗаполнитьПредставлениеНоменклатурыОстаточныхШтрихкодов(Изменения.ИзмененныеСтроки, ПараметрыСканирования);
	
	Если Изменения.ДобавленныеСтроки.Количество() Тогда
		
		ТребуетсяСопоставление                             = Ложь;
		МассивНеизвестныхEAN                               = Новый Массив;
		СтрокиДанныхДляЗаполненияПредставленияНоменклатуры = Новый Массив;
		Для Каждого СтрокаДанных Из Изменения.ДобавленныеСтроки Цикл
			
			Если СтрокаДанных.ТребуетсяСопоставление Тогда
				ТребуетсяСопоставление = Истина;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетсяСопоставление
				И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
				МассивНеизвестныхEAN.Добавить(СтрокаДанных.EAN);
				СтрокиДанныхДляЗаполненияПредставленияНоменклатуры.Добавить(СтрокаДанных);
			КонецЕсли;
			
		КонецЦикла;
		МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНеизвестныхEAN);
		
		Если ТребуетсяСопоставление И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
			
			НормализоватьДанныеВложенныхШтрихкодов(
				ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
			
			ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
				ДанныеПоШтрихкодам, ВложенныеШтрихкоды, ПараметрыСканирования);
			
			Возврат;
			
		ИначеЕсли ТребуетсяСопоставление Тогда
			
			ЗаполнитьДобавленныеСтрокиПоНоменклатуреСопоставленнойПоУПД(
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Изменения.ДобавленныеСтроки, ПараметрыСканирования);
			
		КонецЕсли;
		
		Если СтрокиДанныхДляЗаполненияПредставленияНоменклатуры.Количество() > 0 Тогда
			ЗаполнитьПредставлениеНоменклатурыПоДаннымИСМП(
				ДанныеПоШтрихкодам, СтрокиДанныхДляЗаполненияПредставленияНоменклатуры, МассивНеизвестныхEAN);
		КонецЕсли;
		
		ТребуетсяПриведение = Ложь;
		ГрупповыеУпаковки = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки;
		КоробаСГрупповымиУпаковками = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
		Для Каждого СтрокаДерева Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
			
			Если ПараметрыСканирования.ДетализацияСтруктурыХранения = ГрупповыеУпаковки
				И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ТребуетсяПриведение = Истина;
				Прервать;
			КонецЕсли;
			Если ПараметрыСканирования.ДетализацияСтруктурыХранения = КоробаСГрупповымиУпаковками
				И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
				ТребуетсяПриведение = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяПриведение Тогда
			ШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(
				ВложенныеШтрихкоды, ПараметрыСканирования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии
		Или ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
		Или (ПараметрыОбработки.ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок
			И Изменения.ДобавленныеСтроки.Количество()) Тогда
		
		ШтрихкодированиеИС.ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(
			ДанныеПоШтрихкодам, ВложенныеШтрихкоды, ПараметрыСканирования,,
			"Номенклатура,Характеристика,Серия,ПроизвольнаяЕдиницаУчета,ТребуетВзвешивания");
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		НормализоватьДанныеДереваУпаковок(
			ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования, ДанныеПоШтрихкодам.ДанныеКодовМаркировки, Истина, Истина);
	КонецЕсли;
	
	Если ПараметрыОбработки.ЭтоЗаполнениеВложенныхШтрихкодов
		Или (ПараметрыОбработки.ЭтоДополнениеСпецификойГрупповыхУпаковокИЛогистическихУпаковок
			И Изменения.ДобавленныеСтроки.Количество()) Тогда
		
		СоздатьЭлементыШтрихкодовУпаковокПоДереву(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
		
		Для Каждого ДанныеКодаМаркировки Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если ДанныеКодаМаркировки.СтрокаДерева <> Неопределено Тогда
				ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеКодаМаркировки.СтрокаДерева.ШтрихкодУпаковки;
			КонецЕсли;
		КонецЦикла;
		
		// В некоторых сценариях таблицы маркированных товаров нет и ее заполнение не требуется
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
			НормализоватьДанныеТаблицыМаркированныеТовары(
				ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
		КонецЕсли;
		
		ВидыПродукцииНоменклатуры = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.ВыгрузитьКолонку("ВидПродукции");
		ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииНоменклатуры);
		
	КонецЕсли;
	
	ПредставленияСтатусов = ШтрихкодированиеОбщегоНазначенияИСМП.ПредставленияСтатусов();
	КодыМаркировкиДляЗаполненияВводаВОборот = Новый Массив;
	СтрокиТаблицыДляЗаполненияВводаВОборот  = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Статус)
			И ЗначениеЗаполнено(СтрокаДанных.ОсобоеСостояние) Тогда
			ПредставлениеСтатуса = СтрШаблон(
				НСтр("ru = '%1 (%2)'"),
				ПредставленияСтатусов.Получить(СтрокаДанных.Статус),
				ПредставленияСтатусов.Получить(СтрокаДанных.ОсобоеСостояние));
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Статус) Тогда
			ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДанных.Статус);
		Иначе
			ПредставлениеСтатуса = "";
		КонецЕсли;
		
		СтрокаДанных.ПредставлениеСтатуса = ПредставлениеСтатуса;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) Тогда
			КодыМаркировкиДляЗаполненияВводаВОборот.Добавить(СтрокаДанных.Штрихкод);
			СтрокиТаблицыДляЗаполненияВводаВОборот.Добавить(СтрокаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыМаркировкиДляЗаполненияВводаВОборот.Количество() > 0 Тогда
		ЗаполнитьСпособВводаВОборотСтрокТаблицыДанныеКодовМаркировки(
			СтрокиТаблицыДляЗаполненияВводаВОборот, КодыМаркировкиДляЗаполненияВводаВОборот, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение представления номенклатуры по данным, полученным из сервиса ИСМП.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  СтрокиДанныхДляСопоставления - ТаблицаЗначений, Массив из СтрокаТаблицыЗначений - Описание
//  СписокEAN - Массив из Строка - Список штрихкодов формата EAN.
Процедура ЗаполнитьПредставлениеНоменклатурыПоДаннымИСМП(ДанныеПоШтрихкодам, СтрокиДанныхДляСопоставления, СписокEAN)
	
	РезультатЗапроса = ИнтерфейсИСМПОбщегоНазначения.ДанныеПродукцииПоШтрихкодуEAN(СписокEAN);
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии;
		ДанныеПоШтрихкодам.ТекстОшибки                    = РезультатЗапроса.ТекстОшибки;
		ДанныеПоШтрихкодам.ЕстьОшибки                     = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		
		Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
			СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных Из СтрокиДанныхДляСопоставления Цикл
			
			СведенияПоEAN = РезультатЗапроса.ДанныеПродукцииПоШтрихкодуEAN.Получить(СтрокаДанных.EAN);
			Если СведенияПоEAN = Неопределено Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
			Иначе
				СтрокаДанных.ПредставлениеНоменклатуры = СведенияПоEAN.Наименование;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(ДанныеКодовМаркировки, ПараметрыСканирования, ЭлектронныйДокумент = Неопределено, ТипЭД = "УПД") Экспорт
	
	Если Не ПараметрыСканирования.ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект, ЭлектронныйДокумент, ТипЭД);
	
	// Штрихкод в УПД может храниться в не нормализованном виде,
	// в ДанныеКодовМаркировки штрихкод уже нормализован.
	Для Каждого КлючЗначение Из ДанныеНоменклатурыПоДаннымУПД Цикл

		ШтрихкодУпаковки = КлючЗначение.Ключ;
		ВидПродукции = КлючЗначение.Значение.ВидПродукции;

		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ШтрихкодУпаковки, ВидПродукции);
		Если ДанныеРазбора = Неопределено Или ШтрихкодУпаковки = ДанныеРазбора.НормализованныйКодМаркировки Тогда
			Продолжить;
		КонецЕсли;
		ДанныеНоменклатурыПоДаннымУПД[ДанныеРазбора.НормализованныйКодМаркировки] = ДанныеНоменклатурыПоДаннымУПД[ШтрихкодУпаковки];

	КонецЦикла;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДанных.Штрихкод);
		Если СведенияПоEAN = Неопределено Тогда
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено
				И СтрокаДанных.СтрокаДерева.Родитель <> Неопределено Тогда
				СтрокаДереваПоиска = СтрокаДанных.СтрокаДерева.Родитель;
				Пока СведенияПоEAN = Неопределено Цикл
					СведенияПоEAN = ДанныеНоменклатурыПоДаннымУПД.Получить(СтрокаДереваПоиска.Штрихкод);
					Если СтрокаДереваПоиска.Родитель = Неопределено Тогда
						Прервать;
					Иначе
						СтрокаДереваПоиска = СтрокаДереваПоиска.Родитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СведенияПоEAN = Неопределено Или СведенияПоEAN.МультитоварнаяУпаковка Тогда
				Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
					СтрокаДанных.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>'");
				КонецЕсли;
			Иначе
				СтрокаДанных.Номенклатура              = СведенияПоEAN.Номенклатура;
				СтрокаДанных.Характеристика            = СведенияПоEAN.Характеристика;
				СтрокаДанных.ПредставлениеНоменклатуры = Строка(СведенияПоEAN.Номенклатура);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НоменклатураСопоставленаПоУПД") Тогда
					СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтрокаДанных.Номенклатура              = СведенияПоEAN.Номенклатура;
			СтрокаДанных.Характеристика            = СведенияПоEAN.Характеристика;
			СтрокаДанных.ПредставлениеНоменклатуры = Строка(СведенияПоEAN.Номенклатура);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НоменклатураСопоставленаПоУПД") Тогда
				СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
			КонецЕсли;
			Если СведенияПоEAN.МультитоварнаяУпаковка
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ТипУпаковки") Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			Если СведенияПоEAN.МультитоварнаяУпаковка
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ТипУпаковки") Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
				И ЗначениеЗаполнено(СведенияПоEAN.ВидПродукции) Тогда
				СтрокаДанных.ВидПродукции = СведенияПоEAN.ВидПродукции;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ВидУпаковки")
				И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
				И ЗначениеЗаполнено(СведенияПоEAN.ВидУпаковки) Тогда
				
				Если СтрокаДанных.ДанныеРазбора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДопустимыеВидыУпаковок = СтрокаДанных.ДанныеРазбора.ВидыУпаковокПоВидамПродукции[СтрокаДанных.ВидПродукции];
				Если ДопустимыеВидыУпаковок = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если СведенияПоEAN.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					И ДопустимыеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Групповая) <> Неопределено
					И ДопустимыеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Набор) = Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
					СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Истина;
				ИначеЕсли СведенияПоEAN.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					И ДопустимыеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Набор) <> Неопределено
					И ДопустимыеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Групповая) = Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
					СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Истина;
				ИначеЕсли СведенияПоEAN.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					И ДопустимыеВидыУпаковок.Найти(Перечисления.ВидыУпаковокИС.Потребительская) <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет номенклатуру кодов маркировки по данным УПД
// 
// Параметры:
//  ДанныеКодовМаркировки - Массив, ТаблицаЗначений - .
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Процедура ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеКодовМаркировки, ПараметрыСканирования) Экспорт
	
	СсылкаНаОбъект = ПараметрыСканирования.СсылкаНаОбъект;
	Если ЗначениеЗаполнено(СсылкаНаОбъект)
			И ТипЗнч(СсылкаНаОбъект) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(СсылкаНаОбъект);
		ЭтоАктОРасхождениях     = СверкаКодовМаркировкиИСМПКлиентСервер.ЭтоАктОРасхождениях(СсылкаНаОбъект);
		
		Если ЭтоДокументПриобретения Или ЭтоАктОРасхождениях Тогда
			
			ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(СсылкаНаОбъект).ЭлектронныйДокумент;
			
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) И ДанныеКодовМаркировки.Количество() > 0 Тогда
				
				Если ЭтоАктОРасхождениях Тогда
					СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(
						ДанныеКодовМаркировки,
						ПараметрыСканирования,
						ЭлектронныйДокумент,
						"ТОРГ2");
				Иначе
					СопоставитьКодыМаркировкиНоменклатуреПоДаннымУПД(
						ДанныеКодовМаркировки,
						ПараметрыСканирования,
						ЭлектронныйДокумент);
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеСтрокиПоНоменклатуреСопоставленнойПоУПД(ДанныеКодовМаркировки, ДобавленныеСтроки, ПараметрыСканирования) Экспорт
	
	Если ДанныеКодовМаркировки.Количество() = 0
		Или ДобавленныеСтроки.Количество() = 0
		Или ДобавленныеСтроки.Количество() >= ДанныеКодовМаркировки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ПараметрыСканирования.СсылкаНаОбъект;
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДокументПриобретения = ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(СсылкаНаОбъект);
	Если Не ЭтоДокументПриобретения Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ОбменСКонтрагентами.СтатусДокументооборота(СсылкаНаОбъект).ЭлектронныйДокумент;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиЗаполнения = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		Если СтрокаДанных.НоменклатураСопоставленаПоУПД
			И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДанных.ТипУпаковки)
			И СтрокаДанных.СтрокаДерева <> Неопределено Тогда
			СтрокиЗаполнения[СтрокаДанных.СтрокаДерева] = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или СтрокаДанных.СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаполнения = Неопределено;
		СтрокаПоиска     = СтрокаДанных.СтрокаДерева.Родитель;
		
		ДополнитьСоответствиеУпаковок = Ложь;
		
		Пока СтрокаЗаполнения = Неопределено И СтрокаПоиска <> Неопределено Цикл
			СтрокаЗаполнения = СтрокиЗаполнения[СтрокаПоиска];
			Если СтрокаЗаполнения = Неопределено Тогда
				СтрокаПоиска = СтрокаПоиска.Родитель;
				ДополнитьСоответствиеУпаковок = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДополнитьСоответствиеУпаковок Тогда
			СтрокиЗаполнения[СтрокаПоиска] = СтрокаЗаполнения;
		КонецЕсли;
		
		СтрокаДанных.Номенклатура                  = СтрокаЗаполнения.Номенклатура;
		СтрокаДанных.Характеристика                = СтрокаЗаполнения.Характеристика;
		СтрокаДанных.ПредставлениеНоменклатуры     = Строка(СтрокаЗаполнения.Номенклатура);
		СтрокаДанных.НоменклатураСопоставленаПоУПД = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьВложенныеШтрихкодыДаннымиМолочнойПродукции(ВложенныеШтрихкоды, ПараметрыСканирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС") И ПараметрыСканирования.ЗаполнятьДанныеВЕТИС Тогда
		ИнтеграцияИСМПВЕТИС.ДополнитьВложенныеШтрихкодыДаннымиВЕТИС(ВложенныеШтрихкоды, ПараметрыСканирования);
	ИначеЕсли ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности") И ПараметрыСканирования.ЗаполнятьСрокГодности
		И ПараметрыСканирования.СсылкаНаОбъект <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки,
		|	ШтрихкодыУпаковок.СрокГодности КАК ГоденДо
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка
		|	И ШтрихкодыУпаковок.СрокГодности <> ДАТАВРЕМЯ(1, 1, 1)");
		
		МетаданныеДокумента = ПараметрыСканирования.СсылкаНаОбъект.Метаданные();
		ИмяДокумента        = МетаданныеДокумента.Имя;
		
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяДокумента);
		
		Запрос.УстановитьПараметр("Ссылка", ПараметрыСканирования.СсылкаНаОбъект);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		УпаковкиСоСрокамиГодности = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			
			УпаковкиСоСрокамиГодности.Вставить(Выборка.ШтрихкодУпаковки, Выборка.ГоденДо);
			
		КонецЦикла;
		
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
		ДополнитьВложенныеШтрихкодыДереваСрокомГодности(ДеревоУпаковок, УпаковкиСоСрокамиГодности);
		
		// Если сканирование выполняется в форме проверки и подбора, то заполнение таблицы маркированных товаров не требуется
		Если ВложенныеШтрихкоды.Свойство("МаркированныеТовары") Тогда
			МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
			Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл
				СтрокаТЧ.ГоденДо = СтрокаТЧ.СтрокаДерева.ГоденДо;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьВложенныеШтрихкодыДереваСрокомГодности(ДеревоУпаковок, УпаковкиСоСрокамиГодности, Знач ГоденДо = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СрокГодности = ?(ГоденДо = Неопределено, УпаковкиСоСрокамиГодности[СтрокаДерева.ШтрихкодУпаковки], ГоденДо); 
		
		Если СрокГодности <> Неопределено Тогда
			СтрокаДерева.ГоденДо = СрокГодности;
		КонецЕсли;
		
		ДополнитьВложенныеШтрихкодыДереваСрокомГодности(СтрокаДерева, УпаковкиСоСрокамиГодности, СрокГодности);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
//  ДеревоУпаковок - См. ИнициализироватьДеревоУпаковок
//  ИнициализироватьМаркированныеТовары - Булево - Признак инициализации таблицы МаркированныеТовары
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов)
//   и (См. ШтрихкодированиеИСМП.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов(ДеревоУпаковок = Неопределено, ИнициализироватьМаркированныеТовары = Истина, ПараметрыСканирования = Неопределено)
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов(
		ДеревоУпаковок, ИнициализироватьМаркированныеТовары);
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыСканирования);
	
	Если ИнициализироватьМаркированныеТовары Тогда
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
// 
// Возвращаемое значение:
//  Массив Из Строка - Добавленные колонки
// 
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок"
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
Функция НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиДереваУпаковок();
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		КоллекцияОбязательныхКолонок = ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары();
	КонецЕсли;
	
	ПараметрыДерева = ШтрихкодированиеОбщегоНазначенияМОТП.ПараметрыПостроенияДерева(ПараметрыСканирования);
	
	ШтрихкодированиеОбщегоНазначенияМОТП.КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, КоллекцияОбязательныхКолонок);
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		Если КоллекцияОбязательныхКолонок.Свойство("ОсобоеСостояние") Тогда
			КоллекцияОбязательныхКолонок.Удалить("ОсобоеСостояние");
		КонецЕсли;
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("Владелец",                        Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("EAN",                             Метаданные.ОпределяемыеТипы.GTIN.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",            Новый ОписаниеТипов("Строка"));
	
	КоллекцияОбязательныхКолонок.Вставить("НоменклатураСопоставленаПоУПД",   Новый ОписаниеТипов("Булево"));
	
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	КоллекцияОбязательныхКолонок.Вставить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	КоллекцияОбязательныхКолонок.Вставить("СкоропортящаясяПродукция",        Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("Количество",                      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", Новый ОписаниеТипов("Число"));
	
	КоллекцияОбязательныхКолонок.Вставить("ЕстьВПулеКодовМаркировки", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ПолныйКодМаркировки",      Новый ОписаниеТипов("Строка"));
	
	ДобавленныеКолонки = ШтрихкодированиеОбщегоНазначенияМОТП.НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияОбязательныхКолонок);
	
	Возврат ДобавленныеКолонки;
	
КонецФункции

// Инициаилизирует структуру, описывающую результат получения вложенных штрихкродов по данным ИС МП.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из ИС МП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДаннымИСМП()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеКодовМаркировки",          Неопределено);
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СборИнформацииПоДаннымУПД

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа.
// 
// Параметры:
//  УчетныйДокумент     - ЛюбаяСсылка                       - Документ, формируемый на основании УПД.
//  ЭлектронныйДокумент - ДокументСсылка - Если в параметре "Документ" передан учетный документ, возвращается актуальный
//               для него электронный.
//                      - Неопределено - возвращается пустой электронный документ.
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - возвращается та жк ссылка.
//                      - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - возвращается та же ссылка.
//  ТипЭД - Строка - тип проверяемого электронного документа
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ПредставлениеНоменклатуры - Строка - представление номенклатуры.
//   * МультитоварнаяУпаковка - Булево - Истина, если агрегат содержит разные позиции номенклатуры.
//   * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС, Неопределено - вид упаковки.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции.
Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент, ЭлектронныйДокумент = Неопределено, ТипЭД = "УПД") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		// Получаем электронный документ и присоединенный файл титула продавца
		ЭлектронныйДокумент = МодульОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		СсылкаНаФайл = МодульОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
		
		Если СсылкаНаФайл = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		// Сохраняем файл на диск
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		// Формируем дерево документа
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
		ОписаниеЭД = МодульОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
		ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
		
		// Заполняем номенклатуру информационной базы в дереве.
		МодульОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ЭлектронныйДокумент, ДеревоДокумента);
		
		ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО. Удаление временного файла.'");
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			
			ИнформацияОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОшибки));
			
		КонецПопытки;
	Иначе
		ДанныеОтправителя = МодульОбменСКонтрагентами.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент).ДанныеОтправителя;
		Если ДанныеОтправителя = Неопределено Тогда 
			Возврат Новый Соответствие;
		Иначе
			ДеревоДокумента = ДанныеОтправителя.Содержание;  
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭД = "ТОРГ2" Тогда
		ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваТОРГ2(ДеревоДокумента);
	ИначеЕсли ЭлектронныйДокумент.ФорматОсновногоТитула = ЭлектронноеВзаимодействиеИСМП.ПространствоИмен_УПД_5_02_ИнформацияПродавца() Тогда
		ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД_5_02(ДеревоДокумента);
	Иначе
		ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД_2019(ДеревоДокумента);
	КонецЕсли;
	
	ЗаполнитьВидПродукцииДанныхЭДО(ДанныеНоменклатурыПоДаннымЭДО);

	Возврат ДанныеНоменклатурыПоДаннымЭДО;

КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД в формате 2019.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД_2019(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	ПутьКИЗ = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки";
	ПутьТранспортныеУпаковки = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки";
	
	ПустаяХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = ИнициализацияДанныхНоменклатурыДляУПД();
		ДанныеНоменклатуры.Номенклатура              = Номенклатура;
		ДанныеНоменклатуры.Характеристика            = Характеристика;
		ДанныеНоменклатуры.ПредставлениеНоменклатуры = Строка(Номенклатура);
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		КИЗ = СтрокаТовары.Строки.Найти(ПутьКИЗ, "ПолныйПуть", Истина);
		Если КИЗ <> Неопределено Тогда
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			ДополнитьСоответствиеКодовМаркировкиНоменклатуре_2019(
				СоответствиеКодаМаркировкиНоменклатуре, КИЗ, ДанныеНоменклатуры);
		КонецЕсли;
		
		Если ИндивидуальныеУпаковки <> Неопределено Тогда
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			ДополнитьСоответствиеКодовМаркировкиНоменклатуре_2019(
				СоответствиеКодаМаркировкиНоменклатуре, ИндивидуальныеУпаковки, ДанныеНоменклатуры);
		КонецЕсли;
		
		ТранспортныеУпаковки = СтрокаТовары.Строки.Найти(ПутьТранспортныеУпаковки, "ПолныйПуть", Истина);
		Если ТранспортныеУпаковки <> Неопределено Тогда
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
			ДополнитьСоответствиеКодовМаркировкиНоменклатуре_2019(
				СоответствиеКодаМаркировкиНоменклатуре, ТранспортныеУпаковки, ДанныеНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД в формате 5_02.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД_5_02(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях", "ПолныйПуть", Истина);
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;
	
	ПутьКДаннымУпаковок = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке";
	ПутьКДаннымГТИН     = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.ГТИН";
	ПутьКНоменклатуре   = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	ПустаяХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = ИнициализацияДанныхНоменклатурыДляУПД();
		ДанныеНоменклатуры.Номенклатура              = Номенклатура;
		ДанныеНоменклатуры.Характеристика            = Характеристика;
		ДанныеНоменклатуры.ПредставлениеНоменклатуры = Строка(Номенклатура);
		
		ДанныеУпаковок = СтрокаТовары.Строки.Найти(ПутьКДаннымУпаковок, "ПолныйПуть", Истина);
		Если Не ДанныеУпаковок = Неопределено Тогда
			
			ГТИН = СтрокаТовары.Строки.Найти(ПутьКДаннымГТИН, "ПолныйПуть", Истина).Значение;
			ДополнитьСоответствиеКодовМаркировкиНоменклатуре_5_02(СоответствиеКодаМаркировкиНоменклатуре, ДанныеУпаковок, ДанныеНоменклатуры, ГТИН);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по ТОРГ-2.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным ТОРГ-2.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваТОРГ2(ДеревоДокумента)
	
	СоответствиеКодаМаркировкиНоменклатуре = Новый Соответствие;
		
	ПутьСведенияОТоварах = "РезультатыПриемки";
	СведенияОТоварах = ДеревоДокумента.Строки.Найти(ПутьСведенияОТоварах, "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеКодаМаркировкиНоменклатуре;
	КонецЕсли;

	ПутьКНоменклатуре    = "РезультатыПриемки.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике  = "РезультатыПриемки.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамВидУпаковкиТОРГ2();

	ПустаяХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = ИнициализацияДанныхНоменклатурыДляУПД();
		ДанныеНоменклатуры.Номенклатура              = Номенклатура;
		ДанныеНоменклатуры.Характеристика            = Характеристика;
		ДанныеНоменклатуры.ПредставлениеНоменклатуры = Строка(Номенклатура);
		
		Для Каждого ЭлементДанных Из ПутьКУпаковкам Цикл
			УпаковкиДляОбработки = СтрокаТовары.Строки.Найти(ЭлементДанных.Ключ, "ПолныйПуть", Истина);
			Если УпаковкиДляОбработки <> Неопределено Тогда
				ДанныеНоменклатуры.ВидУпаковки = ЭлементДанных.Значение;
				ДополнитьСоответствиеКодовМаркировкиНоменклатуре_2019(
					СоответствиеКодаМаркировкиНоменклатуре, УпаковкиДляОбработки, ДанныеНоменклатуры);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеКодаМаркировкиНоменклатуре;
	
КонецФункции

// Заполняет вид продукции в структуре входящих данных, полученных по данным ЭДО.
//
// Параметры:
//   ДанныеНоменклатурыПоДаннымЭДО - Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ПредставлениеНоменклатуры - Строка - представление номенклатуры.
//   * МультитоварнаяУпаковка - Булево - Истина, если агрегат содержит разные позиции номенклатуры.
//   * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС, Неопределено - вид упаковки.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции, значение для заполнения.
Процедура ЗаполнитьВидПродукцииДанныхЭДО(ДанныеНоменклатурыПоДаннымЭДО)

	Если ДанныеНоменклатурыПоДаннымЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыПоУПД = Новый ТаблицаЗначений;
	ТоварыПоУПД.Колонки.Добавить("Штрихкод",               ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТоварыПоУПД.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТоварыПоУПД.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТоварыПоУПД.Колонки.Добавить("МаркируемаяПродукция",   Новый ОписаниеТипов("Булево"));
	ТоварыПоУПД.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Если ТипЗнч(ДанныеНоменклатурыПоДаннымЭДО) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ДанныеНоменклатурыПоДаннымЭДО Цикл
			
			Штрихкод     = КлючИЗначение.Ключ;
			СтрокаТовары = КлючИЗначение.Значение;
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = Штрихкод;
			НоваяСтрока.Номенклатура           = СтрокаТовары.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТовары.Характеристика;
			
		КонецЦикла;
		
	Иначе // ТаблицаЗначений
		
		Для Каждого СтрокаТаблицы Из ДанныеНоменклатурыПоДаннымЭДО Цикл
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = СтрокаТаблицы.ЗначениеШтрихкода;
			НоваяСтрока.Номенклатура           = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТаблицы.Характеристика;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод               КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура           КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика         КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТоварыПоУПД КАК ШтрихкодыУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.МаркируемаяПродукция, ЛОЖЬ) КАК МаркируемаяПродукция,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.ВидПродукции,         ЛОЖЬ) КАК ВидПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
	|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыПоУПД", ТоварыПоУПД);
	ТоварыПоУПД = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(ДанныеНоменклатурыПоДаннымЭДО) = Тип("Соответствие") Тогда
		
		Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
			
			Если СтрокаПоУПД.МаркируемаяПродукция Тогда
				
				СтрокаТовары = ДанныеНоменклатурыПоДаннымЭДО[СтрокаПоУПД.Штрихкод];
				Если СтрокаТовары <> Неопределено Тогда
					СтрокаТовары.ВидПродукции = СтрокаПоУПД.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("ЗначениеШтрихкода");
		Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
			
			Если СтрокаПоУПД.МаркируемаяПродукция Тогда
				
				ПараметрыОтбора.ЗначениеШтрихкода = СтрокаПоУПД.Штрихкод;
				НайденныеСтроки = ДанныеНоменклатурыПоДаннымЭДО.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.ВидПродукции = СтрокаПоУПД.ВидПродукции;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСоответствиеКодовМаркировкиНоменклатуре_2019(СоответствиеКодаМаркировкиНоменклатуре,
														ИндивидуальныеУпаковки,
														ДанныеНоменклатуры)
	
	Для Каждого ИндивидуальнаяУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
		
		Если ИндивидуальнаяУпаковка.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодМаркировки = ИндивидуальнаяУпаковка.Строки[0].Значение;
		
		Если ПустаяСтрока(КодМаркировки) 
			Или КодМаркировки = "-" Тогда // Товар без маркировки.
			Продолжить;
		КонецЕсли;
		
		НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(КодМаркировки);
		
		Если НайденноеСоответствие = Неопределено Тогда
			
			ДанныеНоменклатурыКМ = ИнициализацияДанныхНоменклатурыДляУПД();
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКМ, ДанныеНоменклатуры);
			СоответствиеКодаМаркировкиНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатурыКМ);
			
		ИначеЕсли НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура
			Или НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
			
			НайденноеСоответствие.Вставить("МультитоварнаяУпаковка", Истина);
			НайденноеСоответствие.Номенклатура   = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
			НайденноеСоответствие.Характеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
			НайденноеСоответствие.ПредставлениеНоменклатуры = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСоответствиеКодовМаркировкиНоменклатуре_5_02(СоответствиеКодаМаркировкиНоменклатуре, ДанныеУпаковок, ДанныеНоменклатуры, ГТИН = Неопределено)
	
	ПутьКДаннымЛогистическойУпаковки  = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.ИдентификаторУпаковки";
	ПутьКДаннымИндивидуальныхУпаковок = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.Идентификатор.КонтрольныеЗнаки";
	ПутьКДаннымГрупповыхУпаковок      = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.Идентификатор.ИдентификаторыУпаковок";
	
	ПутьКоличествоОСУ  = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.Количество";
	
	Для Каждого ДанныеУпаковки Из ДанныеУпаковок.Строки Цикл
		
		КодМаркировки = ДанныеУпаковки.Строки.Найти(ПутьКДаннымЛогистическойУпаковки, "ПолныйПуть", Истина).Значение;
		
		Если НЕ ПустаяСтрока(КодМаркировки) 
			И НЕ КодМаркировки = "-" Тогда // Товар без маркировки.
			
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая;
			НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(КодМаркировки);
		
			Если НайденноеСоответствие = Неопределено Тогда
				
				ДанныеНоменклатурыКМ = ИнициализацияДанныхНоменклатурыДляУПД();
				ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКМ, ДанныеНоменклатуры);
				СоответствиеКодаМаркировкиНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатурыКМ);
				
			ИначеЕсли НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура
				Или НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
				
				НайденноеСоответствие.Вставить("МультитоварнаяУпаковка", Истина);
				НайденноеСоответствие.Номенклатура   = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
				НайденноеСоответствие.Характеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
				НайденноеСоответствие.ПредставлениеНоменклатуры = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоПоОСУ = ДанныеУпаковки.Строки.Найти(ПутьКоличествоОСУ, "ПолныйПуть", Истина).Значение;
		
		Если Не КоличествоПоОСУ = Неопределено И ЗначениеЗаполнено(КоличествоПоОСУ) И Не ГТИН = Неопределено Тогда
			
			КодОСУ = ЭлектронноеВзаимодействиеИСМП.СформироватьКодОСУПоКоличествуИGTIN(ГТИН, КоличествоПоОСУ);
			ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(КодОСУ);
		
			Если НайденноеСоответствие = Неопределено Тогда
				
				ДанныеНоменклатурыКМ = ИнициализацияДанныхНоменклатурыДляУПД();
				ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКМ, ДанныеНоменклатуры);
				СоответствиеКодаМаркировкиНоменклатуре.Вставить(КодОСУ, ДанныеНоменклатурыКМ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеИндивидуальныхУпаковок = ДанныеУпаковки.Строки.Найти(ПутьКДаннымИндивидуальныхУпаковок, "ПолныйПуть", Истина);
		ДанныеГрупповыхУпаковок      = ДанныеУпаковки.Строки.Найти(ПутьКДаннымГрупповыхУпаковок, "ПолныйПуть", Истина);
		
		Если Не ДанныеИндивидуальныхУпаковок = Неопределено Тогда
			
			Для Каждого СтрокаИндивидуальныхУпаковок Из ДанныеИндивидуальныхУпаковок.Строки Цикл
				
				КонтрольныйЗнак = СтрокаИндивидуальныхУпаковок.Строки.Найти(ПутьКДаннымИндивидуальныхУпаковок + ".НомерСтроки.КонтрольныйЗнак", "ПолныйПуть", Истина).Значение;
				Если Не ПустаяСтрока(КонтрольныйЗнак)
					И Не КонтрольныйЗнак = "-" Тогда
					
					ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
					НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(КонтрольныйЗнак);
		
					Если НайденноеСоответствие = Неопределено Тогда
						
						ДанныеНоменклатурыКМ = ИнициализацияДанныхНоменклатурыДляУПД();
						ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКМ, ДанныеНоменклатуры);
						СоответствиеКодаМаркировкиНоменклатуре.Вставить(КонтрольныйЗнак, ДанныеНоменклатурыКМ);
						
					ИначеЕсли НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура
						Или НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
						
						НайденноеСоответствие.Вставить("МультитоварнаяУпаковка", Истина);
						НайденноеСоответствие.Номенклатура   = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
						НайденноеСоответствие.Характеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
						НайденноеСоответствие.ПредставлениеНоменклатуры = "";
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ДанныеГрупповыхУпаковок = Неопределено Тогда
		
			Для Каждого СтрокаГрупповыхУпаковок Из ДанныеГрупповыхУпаковок.Строки Цикл
				
				ИдентификаторУпаковки = СтрокаГрупповыхУпаковок.Строки.Найти(ПутьКДаннымГрупповыхУпаковок + ".НомерСтроки.ИдентификаторУпаковки", "ПолныйПуть", Истина).Значение;
				Если Не ПустаяСтрока(ИдентификаторУпаковки)
					И Не ИдентификаторУпаковки = "-" Тогда
					
					ДанныеНоменклатуры.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
					НайденноеСоответствие = СоответствиеКодаМаркировкиНоменклатуре.Получить(ИдентификаторУпаковки);
		
					Если НайденноеСоответствие = Неопределено Тогда
						
						ДанныеНоменклатурыКМ = ИнициализацияДанныхНоменклатурыДляУПД();
						ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыКМ, ДанныеНоменклатуры);
						СоответствиеКодаМаркировкиНоменклатуре.Вставить(ИдентификаторУпаковки, ДанныеНоменклатурыКМ);
						
					ИначеЕсли НайденноеСоответствие.Номенклатура <> ДанныеНоменклатуры.Номенклатура
						Или НайденноеСоответствие.Характеристика <> ДанныеНоменклатуры.Характеристика Тогда
						
						НайденноеСоответствие.Вставить("МультитоварнаяУпаковка", Истина);
						НайденноеСоответствие.Номенклатура   = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
						НайденноеСоответствие.Характеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
						НайденноеСоответствие.ПредставлениеНоменклатуры = "";
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа (или УКД, ТОРГ2). Тип документа определяется в параметре.
// 
// Параметры:
//  УчетныйДокумент - ЛюбаяСсылка - Документ, формируемый на основании УПД.
//  ТипДокумента - Строка - "УПД", "УКД", "ТОРГ2".
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ЗначениеШтрихкода - Строка - значение штрихкода.
//   * Брак - Булево - используется при загрузке из торг2.
//   * Недостача - Булево - используется при загрузке из торг2.
Функция ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(УчетныйДокумент, ТипДокумента = "УПД") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	
	// Получаем электронный документ и присоединенный файл титула продавца
	ЭлектронныйДокумент = МодульОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Если ТипДокумента = "ТОРГ2" Тогда
			Возврат ИнициализироватьТаблицуТоваровТОРГ2();
		Иначе
			Возврат ИнициализироватьТаблицуТоваровУПДУКД(ТипДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		СсылкаНаФайл = МодульОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
		Если СсылкаНаФайл = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		// Сохраняем файл на диск
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		// Формируем дерево документа
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
		ОписаниеЭД = МодульОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
		ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
		
		// Заполняем номенклатуру информационной базы в дереве.
		МодульОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ЭлектронныйДокумент, ДеревоДокумента);
		
		ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО. Удаление временного файла.'");
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			
			ИнформацияОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОшибки));
			
		КонецПопытки;
		
	Иначе
		ДанныеОтправителя = МодульОбменСКонтрагентами.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент).ДанныеОтправителя;
		Если ДанныеОтправителя = Неопределено Тогда 
			Возврат Новый Соответствие;
		Иначе
			ДеревоДокумента = ДанныеОтправителя.Содержание;  
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокумента = "УПД"
		И ЭлектронныйДокумент.ФорматОсновногоТитула = ЭлектронноеВзаимодействиеИСМП.ПространствоИмен_УПД_5_02_ИнформацияПродавца() Тогда
		Возврат ТаблицаТоваровКодовМаркировкиПоДаннымДереваЭДО_5_02(ДеревоДокумента, ТипДокумента);
	Иначе
		Возврат ТаблицаТоваровКодовМаркировкиПоДаннымДереваЭДО(ДеревоДокумента, ТипДокумента);
	КонецЕсли;
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
//  ТипЭлектронногоДокумента - Строка - "УПД", "УКД", "ТОРГ2".
// Возвращаемое значение:
//  ТаблицаЗначений - Колонки:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ЗначениеШтрихкода - Строка - значение штрихкода.
//   * Брак - Булево - используется при загрузке из торг2.
//   * Недостача - Булево - используется при загрузке из торг2.
Функция ТаблицаТоваровКодовМаркировкиПоДаннымДереваЭДО(ДеревоДокумента, ТипЭлектронногоДокумента)
	
	Если ТипЭлектронногоДокумента = "ТОРГ2" Тогда
		
		ТаблицаТовары = ИнициализироватьТаблицуТоваровТОРГ2();
		
		ПутьКНоменклатуре    = "РезультатыПриемки.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутьКХарактеристике  = "РезультатыПриемки.НомерСтроки.Сопоставление.ХарактеристикаИБ";
		ПутьСведенияОТоварах = "РезультатыПриемки";
		ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамТОРГ2();
		
	Иначе
		
		ТаблицаТовары = ИнициализироватьТаблицуТоваровУПДУКД(ТипЭлектронногоДокумента);
		
		ПутьКНоменклатуре    = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутьКХарактеристике  = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
		ПутьСведенияОТоварах = "СведенияОТоварах";
		Если ТипЭлектронногоДокумента = "УПД" Тогда
			ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамУПД();
		Иначе //УКД
			ПутьКУпаковкам = ИнициализироватьЗаполнитьПутьКУпаковкамУКД();
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОТоварах = ДеревоДокумента.Строки.Найти(ПутьСведенияОТоварах, "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат ТаблицаТовары;
	КонецЕсли;
	
	ПустаяХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
		
		Для Каждого ЭлементДанных Из ПутьКУпаковкам Цикл
			УпаковкиДляОбработки = СтрокаТовары.Строки.Найти(ЭлементДанных.Ключ, "ПолныйПуть", Истина);
			ИспользоватьПоискПоЗагруженнымДанным = ЗначениеЗаполнено(ЭлементДанных.Значение)
				И ТипЭлектронногоДокумента = "ТОРГ2"; 
			Если УпаковкиДляОбработки <> Неопределено Тогда
				КодыМаркировкиНоменклатурыПоДаннымДереваЭДО(
					ДанныеНоменклатуры,
					УпаковкиДляОбработки,
					ТаблицаТовары,
					ЭлементДанных.Значение,
					ИспользоватьПоискПоЗагруженнымДанным);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТовары.Индексы.Добавить("ЗначениеШтрихкода");
	ЗаполнитьВидПродукцииДанныхЭДО(ТаблицаТовары);
	
	Возврат ТаблицаТовары;
	
КонецФункции

Функция ТаблицаТоваровКодовМаркировкиПоДаннымДереваЭДО_5_02(ДеревоДокумента, ТипЭлектронногоДокумента)
	
	ТаблицаТовары = ИнициализироватьТаблицуТоваровУПДУКД(ТипЭлектронногоДокумента);
	
	ПутьКДаннымУпаковок = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке";
	ПутьКНоменклатуре   = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	ПутьСведенияОТоварах = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
	
	ПутьКДаннымЛогистическойУпаковки  = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.ИдентификаторУпаковки";
	ПутьКДаннымИндивидуальныхУпаковок = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.Идентификатор.КонтрольныеЗнаки";
	ПутьКДаннымГрупповыхУпаковок      = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.Идентификатор.ИдентификаторыУпаковок";
	
	ПутьКоличествоОСУ = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке.НомерСтроки.Количество";
	ПутьКДаннымГТИН   = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.ГТИН";
	
	СведенияОТоварах = ДеревоДокумента.Строки.Найти(ПутьСведенияОТоварах, "ПолныйПуть", Истина);
	Если СведенияОТоварах = Неопределено Тогда
		Возврат ТаблицаТовары;
	КонецЕсли;
	
	ПустаяХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ПустаяХарактеристика;
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
		
		УпаковкиДляОбработки = СтрокаТовары.Строки.Найти(ПутьКДаннымУпаковок, "ПолныйПуть", Истина);
		
		Если УпаковкиДляОбработки <> Неопределено Тогда
			
			ГТИН = СтрокаТовары.Строки.Найти(ПутьКДаннымГТИН, "ПолныйПуть", Истина).Значение;
			
			Для Каждого СтрокаУпаковки Из УпаковкиДляОбработки.Строки Цикл
				
				КодМаркировки = СтрокаУпаковки.Строки.Найти(ПутьКДаннымЛогистическойУпаковки, "ПолныйПуть", Истина).Значение;
				
				Если Не ПустаяСтрока(КодМаркировки)
					И Не КодМаркировки = "-" Тогда // Товар без маркировки.
					
					СтрокаТаблицыТовары = ТаблицаТовары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ДанныеНоменклатуры);
					СтрокаТаблицыТовары.ЗначениеШтрихкода = КодМаркировки;
				КонецЕсли;
				
				ДанныеИндивидуальныхУпаковок = СтрокаУпаковки.Строки.Найти(ПутьКДаннымИндивидуальныхУпаковок, "ПолныйПуть", Истина);
				
				Для Каждого СтрокаИндивидуальныхУпаковок Из ДанныеИндивидуальныхУпаковок.Строки Цикл
					
					КонтрольныйЗнак = СтрокаИндивидуальныхУпаковок.Строки.Найти(ПутьКДаннымИндивидуальныхУпаковок + ".НомерСтроки.КонтрольныйЗнак", "ПолныйПуть", Истина).Значение;
					
					Если ПустаяСтрока(КонтрольныйЗнак)
						Или КонтрольныйЗнак = "-" Тогда // Товар без маркировки.
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыТовары = ТаблицаТовары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ДанныеНоменклатуры);
					СтрокаТаблицыТовары.ЗначениеШтрихкода = КонтрольныйЗнак;
					
				КонецЦикла;
				
				ДанныеГрупповыхУпаковок = СтрокаУпаковки.Строки.Найти(ПутьКДаннымГрупповыхУпаковок, "ПолныйПуть", Истина);
				
				Для Каждого СтрокаГрупповыхУпаковок Из ДанныеГрупповыхУпаковок.Строки Цикл
					
					ИдентификаторУпаковки = СтрокаГрупповыхУпаковок.Строки.Найти(ПутьКДаннымГрупповыхУпаковок + ".НомерСтроки.ИдентификаторУпаковки", "ПолныйПуть", Истина).Значение;
					
					Если ПустаяСтрока(ИдентификаторУпаковки)
						Или ИдентификаторУпаковки = "-" Тогда // Товар без маркировки.
						Продолжить;
					КонецЕсли;
					
					СтрокаТаблицыТовары = ТаблицаТовары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ДанныеНоменклатуры);
					СтрокаТаблицыТовары.ЗначениеШтрихкода = ИдентификаторУпаковки;
					
				КонецЦикла;
				
				КоличествоПоОСУ = СтрокаУпаковки.Строки.Найти(ПутьКоличествоОСУ, "ПолныйПуть", Истина).Значение;
		
				Если Не КоличествоПоОСУ = Неопределено И ЗначениеЗаполнено(КоличествоПоОСУ) И Не ГТИН = Неопределено Тогда
					
					КодОСУ = ЭлектронноеВзаимодействиеИСМП.СформироватьКодОСУПоКоличествуИGTIN(ГТИН, КоличествоПоОСУ);
					СтрокаТаблицыТовары = ТаблицаТовары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ДанныеНоменклатуры);
					СтрокаТаблицыТовары.ЗначениеШтрихкода = КодОСУ;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТовары.Индексы.Добавить("ЗначениеШтрихкода");
	ЗаполнитьВидПродукцииДанныхЭДО(ТаблицаТовары);
	
	Возврат ТаблицаТовары;
	
КонецФункции

Процедура КодыМаркировкиНоменклатурыПоДаннымДереваЭДО(ДанныеНоменклатуры, СтрокиУпаковок, ТаблицаТовары,
	ИмяКолонки = "", ИспользоватьПоиск = Истина)
	
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок.Строки Цикл
		
		Если СтрокаУпаковки.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодМаркировки = СтрокаУпаковки.Строки[0].Значение;
		
		Если ПустаяСтрока(КодМаркировки)
			Или КодМаркировки = "-" Тогда // Товар без маркировки.
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "" Тогда
			
			СтрокаТовары = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеНоменклатуры);
			СтрокаТовары.ЗначениеШтрихкода = КодМаркировки;
			
		Иначе
			
			Если ИспользоватьПоиск Тогда
				НайденнаяСтрока = ТаблицаТовары.Найти(КодМаркировки);
			КонецЕсли;
			
			Если НайденнаяСтрока = Неопределено Тогда
				СтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеНоменклатуры);
				СтрокаТовары.ЗначениеШтрихкода = КодМаркировки;
				СтрокаТовары[ИмяКолонки] = Истина;
			Иначе
				НайденнаяСтрока[ИмяКолонки] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИнициализацияНастроекЧтенияДокументовЭДО

Функция ИнициализироватьТаблицуТоваровУПДУКД(ТипЭлектронногоДокумента = "УПД")
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаТовары.Колонки.Добавить("ВидПродукции",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Если ТипЭлектронногоДокумента = "УКД" Тогда
		ТаблицаТовары.Колонки.Добавить("СведенияДо", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Возврат ТаблицаТовары;
	
Конецфункции

Функция ИнициализироватьТаблицуТоваровТОРГ2()
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаТовары.Колонки.Добавить("Брак",              Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("Недостача",         Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("ВидПродукции",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Возврат ТаблицаТовары;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамТОРГ2()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ИндивидуальныеУпаковки", "");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.КонтрольныеИдентификационныеЗнаки", "");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ТранспортныеУпаковки", "");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ИндивидуальныеУпаковки", "Брак");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.КонтрольныеИдентификационныеЗнаки", "Брак");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ТранспортныеУпаковки", "Брак");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ИндивидуальныеУпаковки", "Недостача");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.КонтрольныеИдентификационныеЗнаки", "Недостача");
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ТранспортныеУпаковки", "Недостача");
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамВидУпаковкиТОРГ2()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ИндивидуальныеУпаковки", Перечисления.ВидыУпаковокИС.Групповая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.КонтрольныеИдентификационныеЗнаки", Перечисления.ВидыУпаковокИС.Потребительская);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.ПоФакту.Маркировка.ТранспортныеУпаковки", Перечисления.ВидыУпаковокИС.Логистическая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ИндивидуальныеУпаковки", Перечисления.ВидыУпаковокИС.Групповая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.КонтрольныеИдентификационныеЗнаки", Перечисления.ВидыУпаковокИС.Потребительская);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Брак.Маркировка.ТранспортныеУпаковки", Перечисления.ВидыУпаковокИС.Логистическая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ИндивидуальныеУпаковки", Перечисления.ВидыУпаковокИС.Групповая);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.КонтрольныеИдентификационныеЗнаки", Перечисления.ВидыУпаковокИС.Потребительская);
	ПутьКУпаковкам.Вставить("РезультатыПриемки.НомерСтроки.Недостача.Маркировка.ТранспортныеУпаковки", Перечисления.ВидыУпаковокИС.Логистическая);
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамУПД()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки","");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки","");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки","");
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

Функция ИнициализироватьЗаполнитьПутьКУпаковкамУКД()
	
	ПутьКУпаковкам = Новый Соответствие;
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ТранспортныеУпаковки","");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки", "");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ИндивидуальныеУпаковки", ""); 
	
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо.ТранспортныеУпаковки","СведенияДо");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо.КонтрольныеИдентификационныеЗнаки", "СведенияДо");
	ПутьКУпаковкам.Вставить("СведенияОТоварах.НомерСтроки.СведенияОМаркировкеДо.ИндивидуальныеУпаковки", "СведенияДо");
	
	Возврат ПутьКУпаковкам;
	
Конецфункции

#КонецОбласти

Функция ИнициализацияДанныхНоменклатурыДляУПД()
	ДанныеНоменклатуры = Новый Структура;
	ДанныеНоменклатуры.Вставить("Номенклатура",              Неопределено);
	ДанныеНоменклатуры.Вставить("Характеристика",            Неопределено);
	ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", "");
	ДанныеНоменклатуры.Вставить("МультитоварнаяУпаковка",    Ложь);
	ДанныеНоменклатуры.Вставить("ВидУпаковки",               Неопределено);
	ДанныеНоменклатуры.Вставить("ВидПродукции",              Неопределено);
	Возврат ДанныеНоменклатуры;
КонецФункции

#КонецОбласти

Процедура ДополнитьДанныеПоШтрихкодамУпаковок(ДанныеКодовМаркировки, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ВыполняетсяЗагрузкаДанныхВФормуПроверкиИПодбораИСМП
		И ЗначениеЗаполнено(ПараметрыСканирования.СсылкаНаОбъект)
		И ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП")
		И ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект)
		И ЗначениеЗаполнено(ОбменСКонтрагентами.СтатусДокументооборота(ПараметрыСканирования.СсылкаНаОбъект).ЭлектронныйДокумент) Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыУпаковок = Новый Массив;
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ДанныеШтрихкодовУпаковок(ДанныеКодовМаркировки, ТипыУпаковок, Истина);
	
	Для Каждого СтрокаТаблицы Из ШтрихкодыУпаковок Цикл
		
		СтрокаДанныхКодаМаркировки = ДанныеКодовМаркировки.Найти(СтрокаТаблицы.Штрихкод, "Штрихкод");
		
		Если СтрокаДанныхКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныхКодаМаркировки.ШтрихкодУпаковки = СтрокаТаблицы.ШтрихкодУпаковки;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			СтрокаДанныхКодаМаркировки.Идентифицирован        = Истина;
			СтрокаДанныхКодаМаркировки.ТребуетсяСопоставление = Ложь;
			
			Если СтрокаДанныхКодаМаркировки.Номенклатура <> СтрокаТаблицы.Номенклатура Тогда
				СтрокаДанныхКодаМаркировки.ВидПродукции   = СтрокаТаблицы.ВидПродукции;
				СтрокаДанныхКодаМаркировки.Номенклатура   = СтрокаТаблицы.Номенклатура;
				СтрокаДанныхКодаМаркировки.Характеристика = СтрокаТаблицы.Характеристика;
				СтрокаДанныхКодаМаркировки.Серия          = СтрокаТаблицы.Серия;
			ИначеЕсли СтрокаДанныхКодаМаркировки.Характеристика <> СтрокаТаблицы.Характеристика Тогда
				СтрокаДанныхКодаМаркировки.Характеристика = СтрокаТаблицы.Характеристика;
				СтрокаДанныхКодаМаркировки.Серия          = СтрокаТаблицы.Серия;
			ИначеЕсли СтрокаДанныхКодаМаркировки.Серия <> СтрокаТаблицы.Серия Тогда
				СтрокаДанныхКодаМаркировки.Серия = СтрокаТаблицы.Серия;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДанныхКодаМаркировки.МаркируемаяПродукция     = СтрокаТаблицы.МаркируемаяПродукция;
		СтрокаДанныхКодаМаркировки.ТребуетВзвешивания       = СтрокаТаблицы.ТребуетВзвешивания;
		СтрокаДанныхКодаМаркировки.ПроизвольнаяЕдиницаУчета = СтрокаТаблицы.ПроизвольнаяЕдиницаУчета;
		
		СтрокаДанныхКодаМаркировки.КоличествоПотребительскихУпаковок =
			?(СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0, СтрокаТаблицы.Количество, СтрокаТаблицы.КоличествоПотребительскихУпаковок);
		СтрокаДанныхКодаМаркировки.Количество = СтрокаТаблицы.Количество;
		
	КонецЦикла;
	
	Если ВложенныеШтрихкоды <> Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВложенныеШтрихкоды, "ДеревоУпаковок") Тогда
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонечныеСтрокиДерева(СтрокаДерева, КонечныеСтрокиДерева)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если ПодчиненнаяСтрока.Строки.Количество() = 0 И ЗначениеЗаполнено(ПодчиненнаяСтрока.GTIN) Тогда
			КонечныеСтрокиДерева.Добавить(ПодчиненнаяСтрока);
		Иначе
			ЗаполнитьКонечныеСтрокиДерева(ПодчиненнаяСтрока, КонечныеСтрокиДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
