
#Область ПрограммныйИнтерфейс

#Область КлиентскаяБиблиотека

#Область ОбработчикиСобытийФормы

// Обработчик открытия формы документа, подключенного к сервису EDI
// 
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ПриОткрытии(ФормаДокумента) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСведений = ИдентификаторПолныеДанныеДокумента();
	
	ДанныеРезультата = Новый Структура(ИдентификаторыСведений);
	ЗаполнитьЗначенияСвойств(ДанныеРезультата, ФормаДокумента.СвойстваEDI);
	
	УдалитьНезаполненныеСвойства(ДанныеРезультата);
	
	ПриИзмененииСведенийДокумента(ФормаДокумента, ДанныеРезультата, Истина);
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	
	Если ФормаДокумента.СвойстваEDI.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
		Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента());
	КонецЕсли;
	
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторСостояниеСинхронизации());
	
	СтрокаИдентификаторов = СтрСоединить(Идентификаторы, ", ");
	
	ОбновитьСведенияДокумента(ФормаДокумента, СтрокаИдентификаторов, Истина);
	
КонецПроцедуры

// Обработчик оповещения формы документа, подключенного к сервису EDI
// 
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма документа.
// 	ИмяСобытия     - Строка                     - идентификатор события.
// 	Параметр       - Произвольный               - параметр оповещения формы.
// 	Источник       - ФормаКлиентскогоПриложения - форма-источник события.
//
Процедура ОбработкаОповещения(ФормаДокумента, ИмяСобытия, Параметр, Источник) Экспорт
	
	ФормаИнициализирована = ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента);
	
	Если Не ФормаИнициализирована И ИмяСобытия = "Запись_НаборКонстант" 
		И (Источник = "ИспользоватьОбменБизнесСеть" Или Источник = "ИспользоватьОбменEDI")
		И ДокументыEDIИнтеграцияВызовСервера.ИспользоватьПодсистему(ФормаДокумента.СвойстваEDI.ТипДокумента) Тогда
		
		ВыполнитьСервернуюКоманду(ФормаДокумента, 
			ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторКомандыИнициализироватьФорму());
		ФормаИнициализирована = ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента);
		
		ПриОткрытии(ФормаДокумента);
		
	КонецЕсли;
	
	Если Не ФормаИнициализирована Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		
		ДокументыEDIИнтеграцияКлиентСервер.ЗаполнитьНастройкиОрганизации(ФормаДокумента);
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик записи формы документа, подключенного к сервису EDI
// 
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма документа
// 	ПараметрыЗаписи      - Структура                  - структура, содержащая параметры записи:
//   * РежимЗаписи     - РежимЗаписиДокумента     - режим записи записываемого документа.
//   * РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура ПослеЗаписи(ФормаДокумента, ПараметрыЗаписи) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента.СвойстваEDI.СостояниеСинхронизации.ДанныеСопоставленияНоменклатуры = Неопределено;
	ДокументыEDIИнтеграцияКлиентСервер.ПрочитатьДанныеДокумента(ФормаДокумента);
	
	Если Не ЗначениеЗаполнено(ФормаДокумента.СвойстваEDI.ДанныеСтатусаДокумента.ТекущийСтатус) Тогда
		
		ОбновитьСведенияДокумента(
			ФормаДокумента,
			РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента(),
			Истина);
			
	Иначе
		
		ВыполнитьДействиеДокумента(
			ФормаДокумента, 
			ПредопределенноеЗначение("Перечисление.КомандыПроцессаЗаказаEDI.ОтправитьВерсиюВСервис"),
			ПредопределенноеЗначение("Перечисление.СценарииВыполненияКомандEDI.ОтправитьВерсиюВСервис"));
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФормыСписковПрикладныхДокументов

// Обрабатывает оповещения в форме списка прикладных документов
// 
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма, в которой возникло событие.
// 	ИмяСобытия     - Строка - имя события.
// 	Параметр       - Произвольный - параметр события.
// 	Источник       - Произвольный - источник события.
//
Процедура ОбработкаОповещенияФормаСписка(ФормаДокумента, ИмяСобытия, Параметр, Источник) Экспорт

	Если ИмяСобытия = "ИзменениеОтборСтатусыEDI" 
		И ФормаДокумента = Источник Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени(ФормаДокумента.ИмяФормы + ".ИзменениеОтбораEDI");
		
		ДокументыEDIИнтеграцияКлиентСервер.ИзменитьОтборыСписокСтатусыEDI(ФормаДокумента);
		
	ИначеЕсли ИмяСобытия = "Запись_СостоянияДокументовEDI" Тогда
		
		ВыполнитьОбновлениеИнформацииСпискаДокументов(ФормаДокумента, ФормаДокумента.ТипДокумента);
		
	КонецЕсли;

КонецПроцедуры

// Обработчик открытия формы списка документов, подключенной к сервису EDI
// 
// Параметры:
//   ФормаДокумента - ФормаКлиентскогоПриложения - форма документа.
//   Отказ          - Булево                     - признак отказа от открытия формы.
//
Процедура ФормаСпискаПриОткрытии(ФормаДокумента, Отказ) Экспорт
	
	Если Не ФормаДокумента.ИспользоватьОбменEDI Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОрганизацииТребующиеПовторногоПодключения(ФормаДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик изменения ключевых сведений документа. 
// 
// Параметры:
// 	ФормаДокумента - ФормаКлиентскогоПриложения - форма, в которой возникло событие.
//
Процедура ПриИзмененииКлючевыхРеквизитовДокумента(ФормаДокумента) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанныеДокумента = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ФормаДокумента.СвойстваEDI.ДанныеДокумента);
	
	ДокументыEDIИнтеграцияКлиентСервер.ПрочитатьДанныеДокумента(ФормаДокумента);
	
	СвойстваEDI     = ФормаДокумента.СвойстваEDI;
	ДанныеДокумента = СвойстваEDI.ДанныеДокумента;
	
	РазличныеРеквизиты = СравнитьСтруктуры(ИсходныеДанныеДокумента, ДанныеДокумента);
	
	ПолучаемыеСведения = Новый Массив;
	
	Если РазличныеРеквизиты.Свойство("Организация") Тогда
		
		ДокументыEDIИнтеграцияКлиентСервер.ЗаполнитьНастройкиОрганизации(ФормаДокумента);

		ПолучаемыеСведения.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников());
	КонецЕсли;
	
	Если РазличныеРеквизиты.Свойство("Контрагент") Тогда
		ПолучаемыеСведения.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента());
		ПолучаемыеСведения.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников());
	КонецЕсли;
	
	Если РазличныеРеквизиты.Свойство("Ссылка") Тогда
		ПолучаемыеСведения.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента());
	КонецЕсли;
	
	ПолучаемыеСведения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучаемыеСведения);
	
	Если Не ПолучаемыеСведения.Количество() = 0 Тогда
		ОбновитьСведенияДокумента(ФормаДокумента,
			СтрСоединить(ПолучаемыеСведения, ","), Истина);
	КонецЕсли;
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
КонецПроцедуры

// Обработчик нажатия на навигационную ссылку
//
// Параметры:
//  ФормаДокумента                           - ФормаКлиентскогоПриложения - форма документа.
//  Элемент                                  - ЭлементФормы               - текущий элемент формы.
//  НавигационнаяСсылкаФорматированнойСтроки - Строка                     - адрес навигационной ссылки.
//  СтандартнаяОбработка                     - Булево                     - признак стандартной обработки события.
//
Процедура ОбработкаНавигационнойСсылки(ФормаДокумента, Элемент, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПодключенияОрганизации" Тогда
		
		Организация = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Организация;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("БизнесСетьПриПодключенииОрганизации", ЭтотОбъект, ДополнительныеПараметры);
		
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(Организация, ФормаДокумента, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОсновноеДействиеДокумента" Тогда
		
		ВыполнитьДействиеДокумента(ФормаДокумента, 
			ФормаДокумента.СвойстваEDI.ДанныеОсновногоДействия.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуСопоставленияНоменклатуры" Тогда
		
		СопоставлениеНоменклатурыКонтрагентовСлужебныйКлиент.ОбработатьРезультатСопоставленияНоменклатурыКонтрагентовВДокументах(
			ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка);
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "СвернутьПояснениеНедоступности_") Тогда
		
		Порядок = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "СвернутьПояснениеНедоступности_", "");
		УстановитьПодсказкуКоманды(ФормаДокумента, Порядок, Ложь);
		ФормаДокумента.ТекущийЭлемент = Элемент;
		
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "РазвернутьПояснениеНедоступности_") Тогда
		
		Порядок = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "РазвернутьПояснениеНедоступности_", "");
		УстановитьПодсказкуКоманды(ФормаДокумента, Порядок, Истина);
		ФормаДокумента.ТекущийЭлемент = Элемент;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СопоставитьНоменклатуруПриОтправке" Тогда
		
		СопоставитьНоменклатуруПриОтправке(ФормаДокумента)
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СопоставитьНоменклатуруПриПолучении" Тогда
		
		СопоставитьНоменклатуруПриПолучении(ФормаДокумента);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПовторитьВыполнениеСценария" Тогда
		
		Документ       = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
		
		РезультатВыполнения = РаботаСДаннымиEDIСлужебныйВызовСервера.ПродолжитьВыполнениеКомандыПерехода(Документ);
		
		УдалитьНезаполненныеСвойства(РезультатВыполнения);
		
		ПриИзмененииСведенийДокумента(ФормаДокумента, РезультатВыполнения);
		
		ЗаполнитьЗначенияСвойств(ФормаДокумента.СвойстваEDI, РезультатВыполнения);
		
		Если РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется")
			Или РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Требуется") Тогда
			
			ОжидатьЗавершенияСинхронизации(ФормаДокумента);
			
		Иначе
			
			ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СостояниеСинхронизации = ФормаДокумента.СвойстваEDI.СостояниеСинхронизации;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Уровень"       , "Ошибка");
		Отбор.Вставить("ДатаНачала"    , СостояниеСинхронизации.НачалоВыполнения);
		Отбор.Вставить("ДатаОкончания" , СостояниеСинхронизации.ОкончаниеВыполнения);
		
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодключениеОрганизации" Тогда
		
		Организация = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Организация;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("БизнесСетьПриПодключенииОрганизации", ЭтотОбъект, ДополнительныеПараметры);
		
		БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(Организация, ФормаДокумента, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик событий протокола взаимодействия
//
// Параметры:
//  ФормаДокумента       - ФормаКлиентскогоПриложения - форма документа.
//  ДанныеСобытия        - ФиксированнаяСтруктура     - данные события HTML.
//  СтандартнаяОбработка - Булево                     - признак стандартной обработки события.
//
Процедура ПротоколВзаимодействияПриНажатии(ФормаДокумента, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия                    = ДанныеСобытия.Event.propertyName;
	ПараметрСобытия               = ДанныеСобытия.Event.data;
	ДанныеПротоколаВзаимодействия = ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия;
	
	Если ИмяСобытия = ИдентификаторСобытияСоединениеУстановлено() Тогда
		
		ДанныеПротоколаВзаимодействия.КоличествоПопытокПодключения = 0;
		ДанныеПротоколаВзаимодействия.СоединениеУстановлено = Истина;
		ВыполнитьПоискПротоколаВзаимодействияWSS(ФормаДокумента);
		
	ИначеЕсли (ИмяСобытия = ИдентификаторСобытияСоединениеРазорвано()
	 		Или ИмяСобытия = ИдентификаторСобытияСоединениеОшибка() И ПараметрСобытия = ИдентификаторПараметраОшибкаПодключения())
		И ДанныеПротоколаВзаимодействия.КоличествоПопытокПодключения < МаксимальноеКоличествоПопытокПодключения() Тогда
		
		ДанныеПротоколаВзаимодействия.СоединениеУстановлено = Ложь;
		ДанныеПротоколаВзаимодействия.КоличествоПопытокПодключения = ДанныеПротоколаВзаимодействия.КоличествоПопытокПодключения + 1;
		
	ИначеЕсли ИмяСобытия = ИдентификаторСобытияСообщение() Тогда
		
		ПрочитатьСообщениеWSS(ФормаДокумента, ПараметрСобытия);
		
	ИначеЕсли ДанныеСобытия.Element.id = ИдентификаторКнопкиОтправкиСообщения() Тогда
		
		ПолеВвода = ДокументHTML(ФормаДокумента).ownerDocument.getElementById("composer__textarea");
		ТекстСообщения = ПолеВвода.value;
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			
			ОтправитьСообщениеWSS(ФормаДокумента, "", ТекстСообщения);
			ПолеВвода.value = "";
			
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(ДанныеСобытия.Href) Тогда
		
		СтандартнаяОбработка = Ложь;
		НавигационнаяСсылка = СтрЗаменить(ДанныеСобытия.Href, ДанныеСобытия.Document.baseURI, "");
		
		ОбработатьПереходПоСсылке(ФормаДокумента, НавигационнаяСсылка);
		
	ИначеЕсли (ИмяСобытия = ИдентификаторСобытияСоединениеРазорвано() 
			Или ИмяСобытия = ИдентификаторСобытияСоединениеОшибка() И ПараметрСобытия = ИдентификаторПараметраОшибкаПодключения())
		И Не ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений
		И ДанныеПротоколаВзаимодействия.КоличествоПопытокПодключения = МаксимальноеКоличествоПопытокПодключения() Тогда
		
		ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений = Истина;
		ДокументWSS(ФормаДокумента).disconnect();
		ВывестиСтатичныеСообщенияПротоколаВзаимодействия(ФормаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события загрузки HTML-документа
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения - форма документа.
//  Элемент        - ЭлементФормы               - Поле HTML-документа.
//
Процедура ПротоколВзаимодействияДокументСформирован(ФормаДокумента, Элемент) Экспорт
	
	Если Не ДокументыEDIИнтеграцияКлиентСервер.ФормаИнициализирована(ФормаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПолеHTML(ФормаДокумента, Элемент);
	
	Если Элемент.Имя = "ПротоколВзаимодействияHTML" Тогда
		
		ВывестиСообщенияHTML(ФормаДокумента);
		
	ИначеЕсли Элемент.Имя = "БуферОбменаEDI" И Не ПустаяСтрока(ФормаДокумента.БуферОбменаEDI) Тогда
		
		ФормаДокумента.БуферОбменаEDI = "";
		ПоказатьОповещениеПользователя(НСтр("ru = 'Буфер обмена'"), , НСтр("ru = 'Текст информации для технической поддержки скопирован в буфер обмена'"), 
			БиблиотекаКартинок.КопированиеТекстаEDI, СтатусОповещенияПользователя.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФормыСписковПрикладныхДокументов

// Выполняет обработку выбора отбора по статусам EDI в форме списков прикладных документов
// 
// Параметры:
// 	ФормаДокумента       - ФормаКлиентскогоПриложения - форма в которой обрабатывается выбор.
//	Элемент              - ПолеФормы - элемент формы, в котором находится отбор по статусу EDI.
// 	ВыбранноеЗначение    - ПеречислениеСсылка.ВариантыОтбораПоСтатусамEDI - выбранное значение отбора.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОтборСтатусEDIОбработкаВыбора(ФормаДокумента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоСтатусамEDI.ДетальнаяНастройка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
		ОписаниеОповещенияОкончаниеДетальнойНастройкиEDI = Новый ОписаниеОповещения("ДетальнаяНастройкаСтатусовEDIПриОкончании",
		                                                                            ЭтотОбъект,
		                                                                            ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.СервисEDI.Форма.НастройкаОтбораПоСтатусам", 
		             ПараметрыОтбораПоСтатусамEDIПоДаннымФормы(ФормаДокумента), 
		             ФормаДокумента, ,,,ОписаниеОповещенияОкончаниеДетальнойНастройкиEDI, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоСтатусамEDI.ТребуетВнимания") Тогда
		
		ФормаДокумента.ИспользоватьОтборПоСтатусамEDI           = Истина;
		ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI = Истина;
		ФормаДокумента.ВариантОтбораПоАктуальностиВерсииEDI     = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоНеактуальнойВерсииEDI.НеУчитыватьОтборПоСтатусам");
		
		ДокументыEDIКлиентСервер.УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(
					ФормаДокумента.ДеревоСтатусовEDI,
					ДокументыEDIКлиент.МассивСтатусовТребуетВнимания(ФормаДокумента.КатегорияДокументовEDI));
					
		Оповестить("ИзменениеОтборСтатусыEDI",, ФормаДокумента);
		
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоСтатусамEDI.НаСторонеКонтрагента") Тогда
		
		ФормаДокумента.ИспользоватьОтборПоСтатусамEDI           = Истина;
		ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI = Ложь;
		
		ДокументыEDIКлиентСервер.УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(
					ФормаДокумента.ДеревоСтатусовEDI,
					ДокументыEDIКлиентСервер.МассивСтатусовНаСторонеКонтрагента(ФормаДокумента.КатегорияДокументовEDI));
		
		Оповестить("ИзменениеОтборСтатусыEDI",, ФормаДокумента);
		
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоСтатусамEDI.Архив") Тогда
		
		ФормаДокумента.ИспользоватьОтборПоСтатусамEDI           = Истина;
		ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI = Ложь;
		
		ДокументыEDIКлиентСервер.УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(
					ФормаДокумента.ДеревоСтатусовEDI,
					ДокументыEDIКлиентСервер.МассивСтатусовАрхив());
					
		Оповестить("ИзменениеОтборСтатусыEDI",, ФормаДокумента);
		
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоСтатусамEDI.Выполняется") Тогда
		
		ФормаДокумента.ИспользоватьОтборПоСтатусамEDI           = Истина;
		ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI = Ложь;
		
		ДокументыEDIКлиентСервер.УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(
					ФормаДокумента.ДеревоСтатусовEDI,
					ДокументыEDIКлиентСервер.МассивСтатусовВыполняетсяБезОтклонений());
		
		Оповестить("ИзменениеОтборСтатусыEDI",, ФормаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет информацию сервиса EDI в форме списка прикладных документов
// 
// Параметры:
// 	Форма        - ФормаКлиентскогоПриложения - форма, в которой требуется обновить информацию.
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовEDI - тип документа EDI
//
Процедура ВыполнитьОбновлениеИнформацииСпискаДокументов(Форма, ТипДокумента) Экспорт
	
	Если Не Форма.ИспользоватьОбменEDI Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ДокументыКЗагрузкеEDIОтображается Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбновления =  ДокументыEDIИнтеграцияВызовСервера.ДанныеДляОбновленияИнформацииСписокПрикладныхДокументов(ТипДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыКЗагрузкеEDI", "Заголовок", ДанныеДляОбновления.НадписьДокументыКЗагрузке);
	
КонецПроцедуры

// Обрабатывает очистку элемента быстрого отбора по состоянию EDI в форме списка прикладных документов.
// 
// Параметры:
// 	ФормаДокумента       - ФормаКлиентскогоПриложения - форма, в которой возникло событие.
// 	Элемент              - ПолеФормы - элемент быстрого отбора по состоянию EDI.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОтборСтатусEDIОчистка(ФормаДокумента, Элемент, СтандартнаяОбработка) Экспорт
	
	ФормаДокумента.ИспользоватьОтборПоСтатусамEDI             = Ложь;
	ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI   = Ложь;
	
	Оповестить("ИзменениеОтборСтатусыEDI",, ФормаДокумента);
	
КонецПроцедуры

// Обрабатывает переход в список оформляемых документов из списка документов EDI
// 
// Параметры:
// 	ФормаДокумента                           - ФормаКлиентскогоПриложения - форма, в которой выполнена команда
// 	НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка, по которой выполняется команда   
// 	СтандартнаяОбработка                     - Булево - признак стандартной обработки.
//
Процедура ОформляемыеДокументыEDIОбработкаНавигационнойСсылки(ФормаДокумента, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТипДокумента       = ФормаДокумента.ТипДокументаEDI;
	КатегорияДокумента = ДокументыEDIКлиентСервер.КатегорияДокументаПоТипу(ТипДокумента);
	
	Если КатегорияДокумента = ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Закупка") Тогда
		ВидЖурнала = "Закупки";
	Иначе
		ВидЖурнала = "Продажи";
	КонецЕсли;
	
	ПараметрыОткрытия = ТекущиеДелаEDIИнтеграцияКлиент.ПараметрыОткрытияЖурналаДокументов();
	
	ПараметрыОткрытия.СтатусСоответствия = ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НетПрикладногоОбъекта");
	ПараметрыОткрытия.ВыбранныеСтатусы   = ДокументыEDIКлиентСервер.ВсеСтатусы();
	ПараметрыОткрытия.ВидЖурнала         = ВидЖурнала;
	
	ТекущиеДелаEDIИнтеграцияКлиент.ОткрытьФормуЖурналаДокументов(ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик выполнения команды EDI.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения - форма документа.
//  Команда        - КомандаФормы               - команда для выполнения.
//  Источник       - ДанныеФормыСтруктура       - документ для которого выполняется команда.
//
Процедура ВыполнитьКоманду(ФормаДокумента, Команда, Знач Источник) Экспорт 
	
	ИмяКоманды = Команда.Имя;
	
	СвойстваEDI = ФормаДокумента.СвойстваEDI;
	
	ВыполнитьКомандуПодменюEDI(ФормаДокумента, Команда, Источник);
	
	Если ИмяКоманды = "ОбновитьНастройкиКонтрагента" Тогда
		
		ОбновитьСведенияДокумента(ФормаДокумента,
			РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента(), Ложь);
			
	ИначеЕсли ИмяКоманды = "ОткрытьПротоколВзаимодействия" Тогда
		
		СвойстваEDI.ДанныеПротоколаВзаимодействия.ПоследнийБлокСообщенийСообщений = Неопределено;
		
		ДанныеПротоколаВзаимодействия = ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия;
		ДанныеПротоколаВзаимодействия.ТребуетсяОтображатьПанель = Не ДанныеПротоколаВзаимодействия.ТребуетсяОтображатьПанель;
		
		ОтправитьСтатусыСообщенийWSS(ФормаДокумента);
		
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = "ПринятьИзмененияКонфликтВерсий" Тогда
		
		КонфликтВерсийСкачатьВерсиюИзСервиса(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = "ОтклонитьИзмененияКонфликтВерсий" Тогда
		
		КонфликтВерсийОтправитьВерсиюВСервис(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = "СохранитьИзмененияКонфликтВерсий" Тогда
		
		КонфликтВерсийОтправитьВерсиюВСервис(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = "ЗагрузитьИзмененияКонфликтВерсий" Тогда
		
		КонфликтВерсийСкачатьВерсиюИзСервиса(ФормаДокумента);
		
	ИначеЕсли ИмяКоманды = "ПодсказкаКонфликтВерсий" Тогда
		
		ОткрытьСправку("Обработка.СервисEDI");
		
	ИначеЕсли ИмяКоманды = "ПодсказкаКонфликтВерсийПриЗаписи" Тогда
		
		ОткрытьСправку("Обработка.СервисEDI");
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ДействиеДокумента_") Тогда
		
		ВыполнитьДействиеДокумента(ФормаДокумента, СвойстваEDI.ДанныеОтображенияФормы.КомандыЭлементовФормы[ИмяКоманды]);
		
	ИначеЕсли ИмяКоманды = "СкопироватьТекстОшибки" Тогда
		
		ФормаДокумента.БуферОбменаEDI = СтрШаблон(
			"<<!DOCTYPE html>
			|<html>
			|    <body onload='copy()'>
			|        <textarea id='input'></textarea>
			|        <script>
			|            function copy() {
			|                var text = '%1';
			|                var ua = navigator.userAgent;
			|                if (ua.search(/MSIE/) > 0  || ua.search(/Trident/) > 0) {
			|                    window.clipboardData.setData('text/plain', text);
			|                } else {
			|                    var copyText = document.getElementById('input');
			|                    copyText.value = text;
			|                    copyText.select();
			|                    document.execCommand('copy');
			|                }
			|            }
			|        </script>
			|    </body>
			|</html>", 
			СтрЗаменить(ФормаДокумента.ПодробнаяИнформацияОбОшибке, Символы.ПС, "\n"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик команды "Изменить"
//
// Параметры:
//  Список - ТаблицаФормы - таблица формы, текущие данные которой содержат поле "Ссылка" - ссылку на изменяемый объект.
//
Процедура ИзменитьЭлемент(Список) Экспорт
		
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПрикладнойОбъект) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ПрикладнойОбъект);
	Иначе
		
		ПараметрыОткрытияФормы = ДокументыEDIКлиент.НовыйПараметрыОткрытияФормыДокументаСервиса();
		ПараметрыОткрытияФормы.ТипДокумента           = ТекущиеДанные.ТипДокумента;
		ПараметрыОткрытияФормы.ИдентификаторВСервисе  = ТекущиеДанные.ИдентификаторВСервисе;
		ПараметрыОткрытияФормы.Организация            = ТекущиеДанные.Организация;
		
		ДокументыEDIКлиент.ОткрытьФормуДокументаСервиса(ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#Область КлиентскаяБиблиотека

#Область ОбработчикиКомандФормы

Функция РезультатПодготовкиЗагрузкиДокументовИзСервиса(Форма) Экспорт
	
	Элементы          = Форма.Элементы;
	ВыделенныеСтроки  = Элементы.Список.ВыделенныеСтроки;
	
	Результат = ДокументыEDIИнтеграцияКлиентСервер.ПараметрыЗагрузкиОбновленияДокументов();
	Результат.КоличествоВыбранных                 = ВыделенныеСтроки.Количество();
	Результат.УникальныйИдентификатор             = Форма.УникальныйИдентификатор;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.СтатусСоответствия <> ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТребуетсяСопоставлениеНоменклатуры")
			И ТекущиеДанные.СтатусСоответствия <> ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеСоздавался")
			И ТекущиеДанные.СтатусСоответствия <> ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия") Тогда
			
			ДокументыEDIИнтеграцияКлиентСервер.ДобавитьДанныеНезагруженныхДокументовСОшибкой(Результат.ДанныеНеЗагруженныхДокументовОшибка,
			                                                                                 ТекущиеДанные, 
			                                                                                 НСтр("ru = 'Загрузка не требуется'"),
			                                                                                 0);
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументКЗагрузке = ДокументыEDIИнтеграцияКлиентСервер.ПараметрыЗагрузкиОбновленияДокумента();
		ДокументКЗагрузке.ИдентификаторВСервисе = ТекущиеДанные.ИдентификаторВСервисе;
		ДокументКЗагрузке.ТипДокумента          = ТекущиеДанные.ТипДокумента;
		ДокументКЗагрузке.Организация           = ТекущиеДанные.Организация;
		ДокументКЗагрузке.ПрикладнойОбъект      = ТекущиеДанные.ПрикладнойОбъект;
		ДокументКЗагрузке.Менеджер              = ТекущиеДанные.Менеджер;
		ДокументКЗагрузке.ДатаДокумента         = ТекущиеДанные.ДатаДокумента;
		ДокументКЗагрузке.НомерДокумента        = ТекущиеДанные.НомерДокумента;

		Результат.ДокументыКЗагрузке.Добавить(ДокументКЗагрузке);
		Результат.КоличествоКЗагрузке = Результат.КоличествоКЗагрузке + 1;
		
	КонецЦикла;

	Если Результат.ДокументыКЗагрузке.Количество() = 0 Тогда
		
		Заголовок = НСтр("ru = 'Загрузка и обновление документов из ""1С: EDI""'");
		Если Результат.КоличествоВыбранных = 0 Тогда
			Пояснение = НСтр("ru = 'Не выбран ни один документ для загрузки или обновления.'");
		Иначе
			Пояснение = НСтр("ru = 'Ни один из выбранных документов не требует загрузки или обновления.'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(Заголовок, , Пояснение, , СтатусОповещенияПользователя.Информация);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область КомандыПодменюEDI

Процедура ПерезаполнитьДокументАктуальнойВерсией(ПараметрыКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если ПустаяСтрока(ПараметрыВыполненияКоманды.Источник.СвойстваEDI.ДанныеСтатусаДокумента.ИдентификаторВСервисе) Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Документ не отправлен в сервис. Заполнение документа из сервиса недоступно.'"), , 
			НСтр("ru = 'Заполнение по данным электронного документа'"));
		Возврат;
	КонецЕсли;
	
	
	ВыполнитьДействиеДокумента(ПараметрыВыполненияКоманды.Источник, 
		ПредопределенноеЗначение("Перечисление.КомандыПроцессаЗаказаEDI.СкачатьВерсиюИзСервиса"),
		ПредопределенноеЗначение("Перечисление.СценарииВыполненияКомандEDI.СкачатьВерсиюИзСервиса"));
	
КонецПроцедуры

Процедура ИзменитьВариантУказанияНоменклатурыВладельца(ПараметрыКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОчиститьСообщения();
	
	ФормаДокумента = ПараметрыВыполненияКоманды.Источник;
	СвойстваEDI    = ФормаДокумента.СвойстваEDI;
	
	ПараметрыНоменклатурыКонтрагентаБЭД    = ФормаДокумента.ПараметрыНоменклатурыКонтрагентаБЭД;
	КомандаУчитыватьНоменклатуруВладельца  = ФормаДокумента.Элементы[ПараметрыВыполненияКоманды.ИмяКомандыНаФорме];
	ДокументИспользуетсяВОбменеEDI         = ПараметрыНоменклатурыКонтрагентаБЭД.ДокументИспользуетсяВОбменеEDI;
	РежимНастройкиКонтрагента              = СвойстваEDI.НастройкиКонтрагента.ЗначениеНастройки;

	РазрешеноПриниматьВТерминахПоставщика            = РежимРаботыСЗаказамиВТерминахПоставщика();
	РазрешеноПриниматьВТерминахПоставщикаИПокупателя = РежимРаботыСЗаказамиВТерминахПоставщикаИПокупателя();
	
	ВариантУказанияНоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента();
	ВариантУказанияНоменклатураОрганизации = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации();
	
	ТекстПользователю = "";
	Если ДокументИспользуетсяВОбменеEDI Тогда
		ТекстПользователю = НСтр("ru = 'Документ используется в сервисе EDI. Изменение в чьих терминах учитывать номенклатуру недоступно.'");
	ИначеЕсли РежимНастройкиКонтрагента = РазрешеноПриниматьВТерминахПоставщика Тогда
		ТекстПользователю = НСтр("ru = 'Контрагент установил ограничение на прием документов с номенклатурой только в его терминах.'");
	ИначеЕсли РежимНастройкиКонтрагента = РазрешеноПриниматьВТерминахПоставщикаИПокупателя Тогда
		
		Если ФормаДокумента.ВариантУказанияНоменклатурыБЭД = ВариантУказанияНоменклатураОрганизации Тогда
			
			ФормаДокумента.ВариантУказанияНоменклатурыБЭД = ВариантУказанияНоменклатураКонтрагента;
			КомандаУчитыватьНоменклатуруВладельца.Пометка = Истина;
			ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
			
		Иначе
			
			ФормаДокумента.ВариантУказанияНоменклатурыБЭД = ВариантУказанияНоменклатураОрганизации;
			КомандаУчитыватьНоменклатуруВладельца.Пометка = Ложь;
			ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПользователю) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПользователю);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьРедактированиеДокументаВФинальномСтатусе(ПараметрыКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОчиститьСообщения();
	
	ПрикладнойОбъект = ПараметрыКоманды;
	ФормаДокумента   = ПараметрыВыполненияКоманды.Источник;
	
	Если Не ДокументыEDIИнтеграцияВызовСервера.ПрикладнойОбъектВEDIНаходитсяВФинальномСтатусе(ПрикладнойОбъект) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Разблокировка не требуется или невозможна'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Документ достиг финального статуса в сервисе ""1С:EDI"". 
	                          |Его редактирование не рекомендуется. Продолжить?'");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);
	ДополнительныеПараметры.Вставить("ФормаДокумента",   ФормаДокумента);
	
	ОповещениеПослеВопросаРазрешитьРедактированиеДокумента = Новый ОписаниеОповещения("ПослеВопросаРазрешитьРедактированиеДокумента",
	                                                                                   ЭтотОбъект, 
	                                                                                   ДополнительныеПараметры);
	
	ПоказатьВопрос(ОповещениеПослеВопросаРазрешитьРедактированиеДокумента, ТекстВопроса , РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

Процедура ПослеВопросаРазрешитьРедактированиеДокумента(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		
		ФормаДокумента   = ДополнительныеПараметры.ФормаДокумента;
		СвойстваEDI      = ФормаДокумента.СвойстваEDI;
		
		ДокументУчаствуетВОбменеEDI = Не ПустаяСтрока(СвойстваEDI.ДанныеСтатусаДокумента.ИдентификаторВСервисе);
		СвойстваEDI.БлокироватьРеквизитыДокумента  = Ложь; // Отключить блокировку реквизитов
		РедактированиеРеквизитовEDIКлиент.ЗаблокироватьЭлементы(ФормаДокумента, 
		                                                              СвойстваEDI.ДанныеСтатусаДокумента.ДоступныеРеквизиты,
		                                                              ДокументУчаствуетВОбменеEDI);
		                                                              
		ЗаголовокОповещения = НСтр("ru = 'Сервис 1C:EDI'");
		ТекстОповещения     = НСтр("ru = 'Документ разблокирован для редактирования.'");
		
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОповещения

Процедура БизнесСетьПриПодключенииОрганизации(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	ДокументыEDIИнтеграцияКлиентСервер.ЗаполнитьНастройкиОрганизации(ФормаДокумента);
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
	Идентификаторы = Новый Массив;
	
	Если ФормаДокумента.СвойстваEDI.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
		Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента());
	КонецЕсли;
	
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторСостояниеСинхронизации());
	
	СтрокаИдентификаторов = СтрСоединить(Идентификаторы, ", ");
	
	ОбновитьСведенияДокумента(ФормаДокумента, СтрокаИдентификаторов, Истина);
	
	ОбновитьСведенияДокумента(ФормаДокумента, Идентификаторы, Истина);
	
КонецПроцедуры

Процедура ПриПолученииСведенийДокумента(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	СвойстваEDI    = ФормаДокумента.СвойстваEDI;
	
	Индекс = СвойстваEDI.ДлительныеОперации.Найти(ДополнительныеПараметры.УникальныйИдентификаторЗадания);
	
	Если Не Индекс = Неопределено Тогда
		СвойстваEDI.ДлительныеОперации.Удалить(Индекс);
	КонецЕсли; 
	
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Статус = "Выполнено" Тогда
		СвойстваEDI.ДанныеОтображенияФормы.ОшибкаПолученияДанныхСервиса = Истина;
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		Возврат;
	КонецЕсли;
	
	ДанныеРезультата = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	
	Если ДанныеРезультата.ОшибкаРаботыССервисом Тогда
		СвойстваEDI.ДанныеОтображенияФормы.ОшибкаПолученияДанныхСервиса = Истина;
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		Возврат;
	КонецЕсли;
	
	УдалитьНезаполненныеСвойства(ДанныеРезультата);
	
	СвойстваEDI.ДанныеОтображенияФормы.ОшибкаПолученияДанныхСервиса = Ложь;
	
	ПриИзмененииСведенийДокумента(ФормаДокумента, ДанныеРезультата);
	
	ЗаполнитьЗначенияСвойств(СвойстваEDI, ДанныеРезультата);
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
	Если Не ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияКомандыПерехода(ДанныеРезультата, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	СвойстваEDI                = ФормаДокумента.СвойстваEDI;
	
	Индекс = СвойстваEDI.ДлительныеОперации.Найти(ДополнительныеПараметры.УникальныйИдентификаторЗадания);
	
	Если Не Индекс = Неопределено Тогда
		СвойстваEDI.ДлительныеОперации.Удалить(Индекс);
	КонецЕсли; 
	
	Если Не ДанныеРезультата.ДействиеВыполнено Тогда
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		Возврат;
	КонецЕсли;
	
	Данные = Новый Структура(ИдентификаторПолныеДанныеДокумента());
	ЗаполнитьЗначенияСвойств(Данные, ДанныеРезультата);
	
	УдалитьНезаполненныеСвойства(Данные);
	
	ПриИзмененииСведенийДокумента(ФормаДокумента, Данные);
	
	ЗаполнитьЗначенияСвойств(СвойстваEDI, ДанныеРезультата);
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВВебКлиенте

Функция ФормыПротоколаВзаимодействия() Экспорт 
	
	ИмяПараметра = "ЭлектронноеВзаимодействие.ФормыПротоколаВзаимодействия";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		Операции = Новый Структура("Обработка,Список", Ложь, Новый Соответствие);
		ПараметрыПриложения.Вставить(ИмяПараметра, Операции);
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра];
	
КонецФункции

Процедура ВыполнитьКонтрольОтображенияПротоколаВзаимодействия(СписокФорм) Экспорт
	
	УдаляемыеФормы = Новый Массив;
	
	Для каждого ДанныеФормы Из СписокФорм Цикл
		
		ФормаДокумента = ДанныеФормы.Значение;
		
		Если ФормаДокумента = Неопределено Или Не ФормаДокумента.Открыта() Тогда
			УдаляемыеФормы.Добавить(ДанныеФормы.Ключ);
			Продолжить;
		КонецЕсли;
		
		НовыеСообщения = ДокументWSS(ФормаДокумента).getNewData();
		
		Для НомерСообщения = 1 По НовыеСообщения.length Цикл
			
			НовоеСообщение = НовыеСообщения[НомерСообщения - 1];
			
			ДанныеСобытия = Новый Структура;
			ДанныеСобытия.Вставить("Event"   , НовоеСообщение);
			ДанныеСобытия.Вставить("Element" , Новый Структура("id", ""));
			ДанныеСобытия.Вставить("Href"    , "");
			
			ПротоколВзаимодействияПриНажатии(ФормаДокумента, ДанныеСобытия, Ложь);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ИдентификаторФормы Из УдаляемыеФормы Цикл
		СписокФорм.Удалить(ИдентификаторФормы);
	КонецЦикла;
	
	Если СписокФорм.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("КонтрольОтображенияПротоколаВзаимодействия", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПротоколомВзаимодействия

Функция ПараметрыПодключенияWSS() Экспорт 
	
	ПараметрыПодключения = Новый Структура;
	
	ПараметрыПодключения.Вставить("Адрес"            , "ws://edi.1cfresh.com/wsapi");
	ПараметрыПодключения.Вставить("Хост"             , "ChatRMQ");
	ПараметрыПодключения.Вставить("Пользователь"     , "WebApplication");
	ПараметрыПодключения.Вставить("ОчередьСообщений" , "rpc_queue");
	ПараметрыПодключения.Вставить("ИмяОбмена"        , "client");
	
	Возврат ПараметрыПодключения;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПовторногоПодключенияОрганизации

Процедура ПроверитьОрганизацииТребующиеПовторногоПодключения(Форма) Экспорт
	
	Если Форма.ОрганизацииТребующиеПовторногоПодключения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Организации             = Форма.ОрганизацииТребующиеПовторногоПодключения.ВыгрузитьЗначения();
	
	ПоказатьОповещениеОНеобходимостиПодключенияОрганизаций(Форма, Организации);
	
КонецПроцедуры

#КонецОбласти

Процедура ДекорацияСмотриТакжеОбработкаНавигационнойСсылки(ФормаДокумента,
	                                                       Элемент,
	                                                       НавигационнаяСсылкаФорматированнойСтроки,
	                                                       СтандартнаяОбработка,
	                                                       КатегорияДокументов) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьТекущиеДелаEDI" Тогда
		
		ОткрытьФорму("Обработка.СервисEDI.Форма.ТекущиеДела");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЛентуСобытийEDI" Тогда
		
		ПараметрыОткрытияФормы = РаботаСЛентойСобытийEDIКлиент.НовыйПараметрыОткрытияФормыЛентыСобытий();
		ПараметрыОткрытияФормы.КатегорияДокументов = КатегорияДокументов;
		
		РаботаСЛентойСобытийEDIКлиент.ОткрытьФормуЛентыСобытий(ПараметрыОткрытияФормы);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументыЗакупкиEDI" Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.СервисEDI.Форма.ДокументыЗакупки.Открыть");
		
		ОткрытьФорму("Обработка.СервисEDI.Форма.ДокументыЗакупки");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументыПродажиEDI" Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.СервисEDI.Форма.ДокументыПродажи.Открыть");
		
		ОткрытьФорму("Обработка.СервисEDI.Форма.ДокументыПродажи");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументыГотовыеКОтправкеEDI" Тогда
		
		СтруктураБыстрогоОтбора = Новый Структура;
		Если ЗначениеЗаполнено(ФормаДокумента.Организация) Тогда
			СтруктураБыстрогоОтбора.Вставить("Организация", ФормаДокумента.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФормаДокумента.Менеджер) Тогда
			СтруктураБыстрогоОтбора.Вставить("Менеджер", ФормаДокумента.Менеджер);
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Количество() > 0 Тогда
			СтруктураБыстрогоОтбора.Вставить("ПоказатьСкрытые", Ложь);
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		Если СтруктураБыстрогоОтбора.Количество() > 0 Тогда
			ПараметрыОткрытия.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.СервисEDI.Форма.ДокументыКОтправке", ПараметрыОткрытия,, ФормаДокумента.УникальныйИдентификатор,
		             ,,,РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОтбораПоСтатусамEDI() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьОтборПоСтатусамEDI",           Ложь);
	Параметры.Вставить("МассивВыбранныхСтатусовEDI",               Новый Массив);
	Параметры.Вставить("ИспользоватьОтборПоНеактуальнойВерсииEDI", Ложь);
	Параметры.Вставить("ВариантОтбораПоАктуальностиВерсииEDI",     Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыОтбораПоСтатусамEDIПоДаннымФормы(ФормаДокумента) Экспорт
	
	Параметры = ПараметрыОтбораПоСтатусамEDI();
	Параметры.ИспользоватьОтборПоСтатусамEDI           = ФормаДокумента.ИспользоватьОтборПоСтатусамEDI;
	Параметры.МассивВыбранныхСтатусовEDI               = ДокументыEDIКлиентСервер.ВыбранныеВДеревеСтатусыДокументов(ФормаДокумента.ДеревоСтатусовEDI);
	Параметры.ИспользоватьОтборПоНеактуальнойВерсииEDI = ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI;
	Параметры.ВариантОтбораПоАктуальностиВерсииEDI     = ФормаДокумента.ВариантОтбораПоАктуальностиВерсииEDI;
	
	Возврат Параметры;
	
КонецФункции

Процедура ДетальнаяНастройкаСтатусовEDIПриОкончании(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ФормаДокумента.ОтборСтатусыEDI = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоСтатусамEDI.ДетальнаяНастройка");
		ФормаДокумента.ИспользоватьОтборПоСтатусамEDI           = Результат.ИспользоватьОтборПоСтатусамEDI;
		ДокументыEDIКлиентСервер.УстановитьПометкиДеревоСтатусовСогласноВыбраннымСтатусам(ФормаДокумента.ДеревоСтатусовEDI, Результат.МассивВыбранныхСтатусовEDI);
		ФормаДокумента.ВариантОтбораПоАктуальностиВерсииEDI     = Результат.ВариантОтбораПоАктуальностиВерсииEDI;
		ФормаДокумента.ИспользоватьОтборПоНеактуальнойВерсииEDI = Результат.ИспользоватьОтборПоНеактуальнойВерсииEDI;
		
		Оповестить("ИзменениеОтборСтатусыEDI",, ФормаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыURL(URL) Экспорт
	
	ПараметрыURL = Новый Структура;
	
	ПоложениеРазделителя = СтрНайти(URL, "?");
	
	Если ПоложениеРазделителя = 0 Тогда
		Возврат ПараметрыURL;
	КонецЕсли;
	
	СтрокаПараметров = Сред(URL, ПоложениеРазделителя + 1);
	
	СтрокиПараметров = СтрРазделить(СтрокаПараметров, "&");
	
	Для каждого СтрокаПараметра Из СтрокиПараметров Цикл
		ПоложениеРазделителя = СтрНайти(СтрокаПараметра, "=");
		
		Если ПоложениеРазделителя = 0 Тогда
			ИмяПараметра      = СтрокаПараметра;
			ЗначениеПараметра = "";
		Иначе
			ИмяПараметра      = Лев(СтрокаПараметра, ПоложениеРазделителя - 1);
			ЗначениеПараметра = Сред(СтрокаПараметра, ПоложениеРазделителя + 1);
		КонецЕсли;
		
		ПараметрыURL.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	Возврат ПараметрыURL;
	
КонецФункции

#Область ЗагрузкаДокумента

Функция ПараметрыЗагрузкиДокумента(ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыЗагрузки = Новый Структура;
	
	ПараметрыЗагрузки.Вставить("ФормаВладелец"                 , ФормаВладелец);
	ПараметрыЗагрузки.Вставить("ОписаниеОповещенияОЗавершении" , Неопределено);
	ПараметрыЗагрузки.Вставить("Организация"                   , Неопределено);
	ПараметрыЗагрузки.Вставить("ТипДокумента"                  , Неопределено);
	ПараметрыЗагрузки.Вставить("ИдентификаторДокумента"        , Неопределено);
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

Процедура ЗагрузитьДокументИзСервиса(ПараметрыЗагрузки) Экспорт
	
	ОчиститьСообщения();
	
	ИдентификаторФормы = ?(ПараметрыЗагрузки.ФормаВладелец = Неопределено, Неопределено,
		ПараметрыЗагрузки.ФормаВладелец.УникальныйИдентификатор);
		
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Организация"            , ПараметрыЗагрузки.Организация);
	ПараметрыВыполнения.Вставить("ТипДокумента"           , ПараметрыЗагрузки.ТипДокумента);
	ПараметрыВыполнения.Вставить("ИдентификаторДокумента" , ПараметрыЗагрузки.ИдентификаторДокумента);
	ПараметрыВыполнения.Вставить("ИдентификаторФормы"     , ИдентификаторФормы);
	
	ДлительнаяОперация = ДокументыEDIИнтеграцияВызовСервера.ЗагрузитьДокументИзСервиса(ПараметрыВыполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗагрузкиДокументаИзСервиса", ЭтотОбъект, ПараметрыЗагрузки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ПараметрыЗагрузки.ФормаВладелец);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РежимыРаботыСЗаказамиКлиентаEDI

// Возвращает режим работы с заказами в терминах поставщика.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - режим работы в терминах поставщика.
//
Функция РежимРаботыСЗаказамиВТерминахПоставщика() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика");

КонецФункции

// Возвращает режим работы с заказами в терминах поставщика и покупателя.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - режим работы в терминах поставщика и покупателя.
//
Функция РежимРаботыСЗаказамиВТерминахПоставщикаИПокупателя() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя");

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлиентскаяБиблиотека

#Область РаботаСФормой

Процедура ВыполнитьСервернуюКоманду(ФормаДокумента, ИмяКоманды, ДополнительныеПараметры = Неопределено)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьСервернуюКоманду", 
		ФормаДокумента, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяКоманды);
	
КонецПроцедуры

#Область РаботаСПодменюEDI

Процедура ВыполнитьКомандуПодменюEDI(Знач Форма, Знач Команда, Знач Источник)
	
	ОписаниеКоманды = Неопределено;
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		АдресКомандВоВременномХранилище = Форма.Команды.Найти("АдресКомандEDIВоВременномХранилище").Действие;
		ОписаниеКоманды = ОписаниеКомандыEDI(Команда.Имя, АдресКомандВоВременномХранилище);
	КонецЕсли;
	
	Если ОписаниеКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Источник", Источник);
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура")
		И (Источник.Ссылка.Пустая() Или Форма.Модифицированность)
		И Не ОписаниеКоманды.НеТребуетсяЗаписьДокумента Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			ОписаниеКоманды.Представление);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуEDIПодтверждениеЗаписи",
			ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПодключаемуюКомандуEDIПодтверждениеЗаписи(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

// Получение структуры команды их сохраненной настройки.
//  ИмяКоманды                      - Строка - имя команды.
//  АдресКомандВоВременномХранилище - Строка - адрес во временном хранилище.
//
Функция ОписаниеКомандыEDI(ИмяКоманды, АдресКомандВоВременномХранилище)
	
	Возврат ДокументыEDIИнтеграцияВызовСервера.ОписаниеКомандыEDI(
		ИмяКоманды, АдресКомандВоВременномХранилище);
	
КонецФункции

// Выполнение команды после подтверждения записи.
//
// Параметры:
//  РезультатВопроса        - КодВозвратаДиалога - результат вопроса.
//  ДополнительныеПараметры - Структура          - параметры выполняемой команды.
//
Процедура ВыполнитьПодключаемуюКомандуEDIПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеКоманды = ДополнительныеПараметры.ОписаниеКоманды;
	Форма = ДополнительныеПараметры.Форма;
	Источник = ДополнительныеПараметры.Источник;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Форма.Записать();
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыОснований = ДополнительныеПараметры.Источник;
	Если ТипЗнч(ОбъектыОснований) <> Тип("Массив") Тогда
		ОбъектыОснований = ОбъектыОснований(ОбъектыОснований);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОбъектыОснований", ОбъектыОснований);
	
	ОписаниеКоманды = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ОписаниеКоманды, Ложь);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОбъектыОснований;
		ОписаниеКоманды.Вставить("ПараметрКоманды", ОбъектыОснований);
	Иначе
		Если ОбъектыОснований.Количество() Тогда
			ПараметрКоманды = ОбъектыОснований[0];
		Иначе
			ПараметрКоманды = Неопределено;
		КонецЕсли;
		ОписаниеКоманды.Вставить("ПараметрКоманды", ПараметрКоманды);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеКоманды.Обработчик) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКоманды.Вставить("Источник", Форма);
	ОписаниеКоманды.Вставить("Уникальность", Ложь);
	
	МассивИмениОбработчика = СтрРазделить(ОписаниеКоманды.Обработчик, ".");
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивИмениОбработчика[0]);
	Обработчик = Новый ОписаниеОповещения(МассивИмениОбработчика[1], МодульОбработки, ОписаниеКоманды);
	ВыполнитьОбработкуОповещения(Обработчик, ПараметрКоманды);
	
КонецПроцедуры

// Получение ссылок объектов из формы
//
// Параметры:
//  Источник - ТаблицаФормы, ДокументОбъект - данные формы.
//
// Возвращаемое значение:
//  Массив - ссылки на объекты.
//
Функция ОбъектыОснований(Источник)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаФормы") Тогда
		ВыделенныеСтроки = Источник.ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСтрока = Источник.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущаяСтрока <> Неопределено Тогда
				Результат.Добавить(ТекущаяСтрока.Ссылка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат.Добавить(Источник.Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаССервисом

Процедура ОбновитьСведенияДокумента(ФормаДокумента, Знач ЗапрашиваемыеСвойства, 
		ИспользоватьЛокальныеНастройки = Ложь, ОписаниеОповещения = Неопределено)
		
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор;
	
	СвойстваEDI                    = ФормаДокумента.СвойстваEDI;
	ДанныеДокумента                = СвойстваEDI.ДанныеДокумента;
	
	СвойстваEDI.ДлительныеОперации.Добавить(УникальныйИдентификаторЗадания);
	
	Если СвойстваEDI.ДанныеОтображенияФормы.ОшибкаПолученияДанныхСервиса Тогда
		ЗапрашиваемыеСвойства = ИдентификаторПолныеДанныеДокумента();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента"     , ФормаДокумента);
	ДополнительныеПараметры.Вставить("УникальныйИдентификаторЗадания" , УникальныйИдентификаторЗадания);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения"             , ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриПолученииСведенийДокумента", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыПолученияДанныхДокумента = РаботаСДаннымиEDIСлужебныйКлиент.ПараметрыПолученияДанныхДокумента(
		ФормаДокумента, ОписаниеОповещения, Ложь);
	ПараметрыПолученияДанныхДокумента.Документ                       = ДанныеДокумента.Ссылка;
	ПараметрыПолученияДанныхДокумента.Контрагент                     = ДанныеДокумента.Контрагент;
	ПараметрыПолученияДанныхДокумента.Организация                    = ДанныеДокумента.Организация;
	ПараметрыПолученияДанныхДокумента.ОписаниеОповещения             = ОписаниеОповещения;
	ПараметрыПолученияДанныхДокумента.ИспользоватьЛокальныеНастройки = ИспользоватьЛокальныеНастройки;
	
	РаботаСДаннымиEDIСлужебныйКлиент.ПолучитьСведенияДокумента(ЗапрашиваемыеСвойства, ПараметрыПолученияДанныхДокумента);
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента, Истина);
	
КонецПроцедуры

Процедура ПриИзмененииСведенийДокумента(ФормаДокумента, ДанныеРезультата, НачальноеЗаполнение = Ложь)
	Перем ДанныеСвойства;
	
	ЭлементыФормы                       = ФормаДокумента.Элементы;
	СвойстваEDI                         = ФормаДокумента.СвойстваEDI;
	ПараметрыНоменклатурыКонтрагентаБЭД = ФормаДокумента.ПараметрыНоменклатурыКонтрагентаБЭД;
	
	// Требуется реализовать обработку изменения свойств документа
	
	Если ДанныеРезультата.Свойство(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента()) Тогда
		
		СвойстваEDI.ДанныеОсновногоДействия.Заголовок = "";
		СвойстваEDI.ДанныеОсновногоДействия.Ссылка    = ПредопределенноеЗначение("Перечисление.КомандыПроцессаЗаказаEDI.ПустаяСсылка");
		
		ДокументУчаствуетВОбменеEDI = Не ПустаяСтрока(ДанныеРезультата.ДанныеСтатусаДокумента.ИдентификаторВСервисе);
		
		ЕстьДоступныеДействия = Ложь;
		
		ИспользуемыеКоманды = Новый Массив;
		
		СвойстваEDI.ДанныеКомандДокумента = ДанныеРезультата.ДанныеСтатусаДокумента.Команды;
		СвойстваEDI.ДанныеОтображенияФормы.КомандыЭлементовФормы.Очистить();
		
		Для каждого КомандаПроцесса Из СвойстваEDI.ДанныеКомандДокумента Цикл
			
			КомандаПроцессаСсылка = КомандаПроцесса.Ключ;
			ДанныеКоманды         = КомандаПроцесса.Значение;
			
			ИспользуемыеКоманды.Добавить(ДанныеКоманды.Порядок);
			
			ИмяЭлемента = СтрШаблон("ДействиеДокумента_%1", ДанныеКоманды.Порядок);
			
			СвойстваEDI.ДанныеОтображенияФормы.КомандыЭлементовФормы.Вставить(ИмяЭлемента, КомандаПроцессаСсылка);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлемента,
				"Заголовок", ДанныеКоманды.Представление);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлемента,
				"Картинка", ?(ДанныеКоманды.Картинка = Неопределено, Новый Картинка, ДанныеКоманды.Картинка));
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлемента,
				"Доступность", ДанныеКоманды.Доступно);
			УстановитьПодсказкуКоманды(ФормаДокумента, ДанныеКоманды.Порядок, Ложь);
			
			ИмяЭлементаПодсказки = СтрШаблон("ТекстПоясненияНедоступности_%1", ДанныеКоманды.Порядок);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлементаПодсказки,
				"Заголовок", ДанныеКоманды.ПояснениеНедоступности);
			
			Если ДанныеКоманды.ОсновнаяКоманда И ДанныеКоманды.Доступно Тогда
				СвойстваEDI.ДанныеОсновногоДействия.Заголовок     = ДанныеКоманды.Представление;
				СвойстваEDI.ДанныеОсновногоДействия.Ссылка        = КомандаПроцессаСсылка;
			Иначе
				ЕстьДоступныеДействия = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоКоманд = СвойстваEDI.ДанныеОтображенияФормы.КомандыПроцесса.Количество();
		
		Для Счетчик = 1 По КоличествоКоманд Цикл
			КомандаДоступна = Не ИспользуемыеКоманды.Найти(Счетчик) = Неопределено;
			ИмяЭлемента = СтрШаблон("ДействиеДокумента_%1", Счетчик);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлемента,
				"Видимость", КомандаДоступна);
			
			ИмяЭлементаПодсказки = СтрШаблон("ТекстПоясненияНедоступности_%1", Счетчик);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлементаПодсказки,
				"Видимость", Ложь);
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, 
			"ГруппаДоступныеДействияДокумента", "Видимость", ЕстьДоступныеДействия);
		
		ТекстЗаголовка = СтроковыеФункцииКлиент.ФорматированнаяСтрока(СтрШаблон(
			НСтр("ru = '<a href = ""ОсновноеДействиеДокумента"">%1</a>'"), 
			СвойстваEDI.ДанныеОсновногоДействия.Заголовок));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "НадписьОсновноеДействиеДокумента",
			"Видимость", ЗначениеЗаполнено(СвойстваEDI.ДанныеОсновногоДействия.Ссылка));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "НадписьОсновноеДействиеДокумента",
			"Заголовок", ТекстЗаголовка);
		
		СвойстваEDI.ДанныеОтображенияФормы.КонфликтВерсий = Не ДанныеРезультата.ДанныеСтатусаДокумента.НомерТекущейВерсии = 
			ДанныеРезультата.ДанныеСтатусаДокумента.НомерАктуальнойВерсии;
		
		Если ДанныеРезультата.ДанныеСтатусаДокумента.ТребуетсяОтправкаДокумента
			И Не СвойстваEDI.ДанныеОтображенияФормы.КонфликтВерсий Тогда
			
			ОтправитьТекущуюРевизиюДокументаВСервис(ФормаДокумента);
			
		КонецЕсли;
		
		Если СвойстваEDI.ДанныеОтображенияФормы.КонфликтВерсий Тогда
			ПолучитьСведенияКонфликтующихВерсий(ФормаДокумента);
		КонецЕсли;
		
		СторонаВыполнившаяДействие = ДанныеРезультата.ДанныеСтатусаДокумента.СторонаВыполнившаяДействие;
		
		Если ДанныеРезультата.ДанныеСтатусаДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
			СторонаОрганизации = ПредопределенноеЗначение("Перечисление.СтороныУчастникиСервисаEDI.Покупатель");
		ИначеЕсли ДанныеРезультата.ДанныеСтатусаДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказКлиента") Тогда
			СторонаОрганизации = ПредопределенноеЗначение("Перечисление.СтороныУчастникиСервисаEDI.Поставщик");
		КонецЕсли;
		
		ПоказыватьСравнениеВерсий = ЗначениеЗаполнено(ДанныеРезультата.ДанныеСтатусаДокумента.СогласованнаяВерсияПокупателя)
			И ЗначениеЗаполнено(ДанныеРезультата.ДанныеСтатусаДокумента.СогласованнаяВерсияПоставщика)
			И Не ДанныеРезультата.ДанныеСтатусаДокумента.СогласованнаяВерсияПокупателя = ДанныеРезультата.ДанныеСтатусаДокумента.СогласованнаяВерсияПоставщика
			И Не СторонаВыполнившаяДействие = СторонаОрганизации;
		
		РедактированиеРеквизитовEDIКлиент.ЗаблокироватьЭлементы(ФормаДокумента, 
			ДанныеРезультата.ДанныеСтатусаДокумента.ДоступныеРеквизиты, ДокументУчаствуетВОбменеEDI);
		
		Если Не ДанныеРезультата.ДанныеСтатусаДокумента.ИдентификаторВСервисе = СвойстваEDI.ДанныеСтатусаДокумента.ИдентификаторВСервисе 
			Или Не ПустаяСтрока(ДанныеРезультата.ДанныеСтатусаДокумента.ИдентификаторВСервисе) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПриИзмененииДоступностиРеквизитовEDI", ФормаДокумента);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДокументУчаствуетВОбменеEDI);
			
		КонецЕсли;
		
		Если Не ДанныеРезультата.ДанныеСтатусаДокумента.ИдентификаторВСервисе = СвойстваEDI.ДанныеСтатусаДокумента.ИдентификаторВСервисе Тогда
			
			СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторДокумента = ДанныеРезультата.ДанныеСтатусаДокумента.ИдентификаторВСервисе;
			ВыполнитьПоискПротоколаВзаимодействияWSS(ФормаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьПометкуУчитыватьНоменклатуруВладельца(ФормаДокумента, ДанныеРезультата, ПараметрыНоменклатурыКонтрагентаБЭД, НачальноеЗаполнение);
	
	Если ДанныеРезультата.Свойство(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов()) Тогда
		
		ДанныеПротоколаВзаимодействия = СвойстваEDI.ДанныеПротоколаВзаимодействия;
		ЗаполнитьЗначенияСвойств(СвойстваEDI.ИдентификаторыОбъектов, ДанныеРезультата.ИдентификаторыОбъектов);
		
		Если ДанныеПротоколаВзаимодействия.СоединениеУстановлено 
			И Не ДанныеПротоколаВзаимодействия.ПротоколВзаимодействияПодключен Тогда
			
			ВыполнитьПоискПротоколаВзаимодействияWSS(ФормаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеРезультата.Свойство(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторСостояниеСинхронизации(), ДанныеСвойства) Тогда
		
		ФормаДокумента.ПодробнаяИнформацияОбОшибке = ДанныеРезультата.СостояниеСинхронизации.ТекстОшибки;
		
		Если ДанныеСвойства.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка") Тогда
			
			ИдентификаторСвойства = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента();
			
			ОбновитьСведенияДокумента(ФормаДокумента, ИдентификаторСвойства, Ложь);
			
		ИначеЕсли ДанныеСвойства.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется")
			Или ДанныеСвойства.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Требуется") Тогда
			
			ОжидатьЗавершенияСинхронизации(ФормаДокумента);
			
		ИначеЕсли ДанныеСвойства.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление") Тогда
			
			
			
		ИначеЕсли ДанныеСвойства.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления") Тогда
			
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ФормаДокумента.СвойстваEDI, ДанныеРезультата);

	Если ДанныеРезультата.Свойство(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента())
		И Не НачальноеЗаполнение И ДокументУчаствуетВОбменеEDI Тогда
		
		СвойстваEDI.ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений = Истина;
		ВывестиСтатичныеСообщенияПротоколаВзаимодействияПродолжение(Неопределено, Новый Структура("ФормаДокумента", ФормаДокумента));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПометкуУчитыватьНоменклатуруВладельца(ФормаДокумента, ДанныеРезультата, ПараметрыНоменклатурыКонтрагентаБЭД, НачальноеЗаполнение = Ложь)
	Перем ЗначениеСвойства;
	
	// Данные о документе EDI еще не получены, выполняется длительная операция получения сведений документа, требуется 
	//  установить изначальное отображение формы
	Если НачальноеЗаполнение Тогда
		СопоставлениеНоменклатурыКонтрагентовСлужебныйКлиент.ИзменитьНаФормеДокументаПометкуКомандыУчитыватьНоменклатуруВладельца(ФормаДокумента);
		Возврат;
	КонецЕсли;
	
	// Данные о документе EDI получены требуется проанализировать изменения документа для принятия решения
	//  о новом отображении формы
	НовыеПараметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыНоменклатурыКонтрагентаБЭД);
	
	ИдентификаторСтатус               = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента();
	ИдентификаторНастройкиКонтрагента = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента();
	
	// Прочитаны данные статуса документа в сервисе
	Если ДанныеРезультата.Свойство(ИдентификаторСтатус, ЗначениеСвойства) Тогда
		
		НовыеПараметры.ДокументИспользуетсяВОбменеEDI = ЗначениеЗаполнено(ЗначениеСвойства.ТекущийСтатус);
		
		// В случае, если документ участвует в обмене EDI использование номенклатуры контрагента устанавливается
		//  из данных сервиса и недоступно для изменения
		Если НовыеПараметры.ДокументИспользуетсяВОбменеEDI Тогда
			НовыеПараметры.ВариантУказанияНоменклатурыВОбменеEDI = ЗначениеСвойства.ВариантУказанияНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	// Прочитаны настройки поставщика
	Если ДанныеРезультата.Свойство(ИдентификаторНастройкиКонтрагента, ЗначениеСвойства) Тогда
		
		НовыеПараметры.ЗначениеНастройкиКонтрагентаEDI = ЗначениеСвойства.ЗначениеНастройки;
		
	КонецЕсли;
	
	Если Не СтруктурыИдентичны(НовыеПараметры, ПараметрыНоменклатурыКонтрагентаБЭД) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНоменклатурыКонтрагентаБЭД, НовыеПараметры);
		СопоставлениеНоменклатурыКонтрагентовСлужебныйКлиент.ИзменитьНаФормеДокументаПометкуКомандыУчитыватьНоменклатуруВладельца(ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействиеДокумента(ФормаДокумента, КомандаПроцесса, СценарийВыполнения = Неопределено, Версия = "")
	
	ДокументыEDIИнтеграцияКлиентСервер.СкрытьВсплывающуюГруппуФормы(
		ФормаДокумента.Элементы, "ГруппаДоступныеДействияДокумента");
	
	СвойстваEDI                    = ФормаДокумента.СвойстваEDI;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента"     , ФормаДокумента); 
	ДополнительныеПараметры.Вставить("КомандаПроцесса"    , КомандаПроцесса); 
	ДополнительныеПараметры.Вставить("СценарийВыполнения" , СценарийВыполнения); 
	ДополнительныеПараметры.Вставить("Версия"             , Версия); 
	
	ОписаниеОповещения           = Новый ОписаниеОповещения("ВыполнитьДействиеДокументаПослеЗаписи", ЭтотОбъект,
		ДополнительныеПараметры);
	
	Если ФормаДокумента.Модифицированность Или Не ЗначениеЗаполнено(СвойстваEDI.ДанныеДокумента.Ссылка) Тогда
		
		СервисEDIКлиентПереопределяемый.ЗаписатьДокумент(ФормаДокумента, ОписаниеОповещения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействиеДокументаПослеЗаписи(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыEDIИнтеграцияКлиентСервер.ПрочитатьДанныеДокумента(ДополнительныеПараметры.ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияКлиентскихОбработчиков", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьКлиентскиеОбработчики(ДополнительныеПараметры.ФормаДокумента, ДополнительныеПараметры.КомандаПроцесса, 
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВыполнитьКлиентскиеОбработчики(ФормаДокумента, КомандаПроцесса, ОписаниеОповещенияВыполнения, 
	Знач ВыполненныеОбработчики = Неопределено)
	
	Если ВыполненныеОбработчики = Неопределено Тогда
		ВыполненныеОбработчики = Новый Массив;
	КонецЕсли;
	
	ДанныеКоманды         = ФормаДокумента.СвойстваEDI.ДанныеКомандДокумента[КомандаПроцесса];
	
	Если ДанныеКоманды = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияВыполнения, Истина);
		Возврат;
	КонецЕсли;
	
	КлиентскиеОбработчики = ДанныеКоманды.КлиентскиеОбработчики;
	
	Для каждого КлиентскийОбработчик Из КлиентскиеОбработчики Цикл
		Если ВыполненныеОбработчики.Найти(КлиентскийОбработчик) = Неопределено Тогда
			ВыполняемыйОбработчик = КлиентскийОбработчик;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыполняемыйОбработчик = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияВыполнения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента"               , ФормаДокумента);
	ДополнительныеПараметры.Вставить("КомандаПроцесса"              , КомандаПроцесса);
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияВыполнения" , ОписаниеОповещенияВыполнения);
	ДополнительныеПараметры.Вставить("ВыполненныеОбработчики"       , ВыполненныеОбработчики);
	ДополнительныеПараметры.Вставить("ВыполняемыйОбработчик"        , ВыполняемыйОбработчик);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияКлиентскогоОбработчика", ЭтотОбъект,
		ДополнительныеПараметры);
	
	Если ВыполняемыйОбработчик = ИдентификаторКлиентскогоОбработчикаПодтвердитьИзменения() Тогда
		
		КлиентскийОбработчикПодтвердитьИзменения(ФормаДокумента, ОписаниеОповещения);
		
	Иначе
		
		// Неподдерживаемые обработчики
		ВыполненныеОбработчики.Добавить(ВыполняемыйОбработчик);
		ВыполнитьКлиентскиеОбработчики(ФормаДокумента, КомандаПроцесса, ОписаниеОповещенияВыполнения, 
			ВыполненныеОбработчики);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияКлиентскогоОбработчика(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения = Истина Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияВыполнения, Ложь);
		Возврат;
	КонецЕсли;
	
	ФормаДокумента               = ДополнительныеПараметры.ФормаДокумента;
	КомандаПроцесса              = ДополнительныеПараметры.КомандаПроцесса;
	ОписаниеОповещенияВыполнения = ДополнительныеПараметры.ОписаниеОповещенияВыполнения;
	ВыполненныеОбработчики       = ДополнительныеПараметры.ВыполненныеОбработчики;
	ВыполняемыйОбработчик        = ДополнительныеПараметры.ВыполняемыйОбработчик;
	
	ВыполненныеОбработчики.Добавить(ВыполняемыйОбработчик);
	
	ВыполнитьКлиентскиеОбработчики(ФормаДокумента, КомандаПроцесса, ОписаниеОповещенияВыполнения, ВыполненныеОбработчики);
	
КонецПроцедуры

Процедура ПослеВыполненияКлиентскихОбработчиков(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если Не РезультатВыполнения = Истина Тогда
		Возврат;
	КонецЕсли;

	КомандаПроцесса = ДополнительныеПараметры.КомандаПроцесса;
	ФормаДокумента  = ДополнительныеПараметры.ФормаДокумента;
	СвойстваEDI     = ФормаДокумента.СвойстваEDI;
	
	ВариантУказанияНоменклатуры = ВариантУказанияНоменклатуры(ФормаДокумента);
	
	ДанныеДействияДокумента = РаботаСДаннымиEDIСлужебныйКлиентСервер.НовыйДанныеДокумента();
	ДанныеДействияДокумента.Организация                 = СвойстваEDI.ДанныеДокумента.Организация;
	ДанныеДействияДокумента.Контрагент                  = СвойстваEDI.ДанныеДокумента.Контрагент;
	ДанныеДействияДокумента.Документ                    = СвойстваEDI.ДанныеДокумента.Ссылка;
	ДанныеДействияДокумента.НомерРевизии                = СвойстваEDI.ДанныеСтатусаДокумента.НомерАктуальнойВерсии;
	ДанныеДействияДокумента.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатуры;
	ДанныеДействияДокумента.Менеджер                    = СвойстваEDI.ДанныеДокумента.Менеджер;
	ДанныеДействияДокумента.Версия                      = ДополнительныеПараметры.Версия;
	
	СценарийВыполнения = ДополнительныеПараметры.СценарийВыполнения;
	
	Если СценарийВыполнения = Неопределено Тогда
		ДанныеКоманды = СвойстваEDI.ДанныеКомандДокумента[КомандаПроцесса];
		
		Если ДанныеКоманды = Неопределено Тогда
			ОбновитьСведенияДокумента(ФормаДокумента, 
				РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента(), Истина);
			Возврат;
		КонецЕсли;
		
		СценарийВыполнения = ДанныеКоманды.СценарийВыполнения;
		
	КонецЕсли;
	
	Если СценарийВыполнения = ПредопределенноеЗначение("Перечисление.СценарииВыполненияКомандEDI.ПерейтиКСравнениюВерсий") Тогда
		ОткрытьСравнениеВерсийДокумента(ФормаДокумента, ДанныеКоманды.URL);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = РаботаСДаннымиEDIСлужебныйВызовСервера.ВыполнитьКомандуПерехода(ДанныеДействияДокумента, КомандаПроцесса, 
		СценарийВыполнения);
		
	УдалитьНезаполненныеСвойства(РезультатВыполнения);
	
	ПриИзмененииСведенийДокумента(ФормаДокумента, РезультатВыполнения);
	
	ЗаполнитьЗначенияСвойств(ФормаДокумента.СвойстваEDI, РезультатВыполнения);
	
	Если РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется")
		Или РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Требуется") Тогда
		
		ОжидатьЗавершенияСинхронизации(ФормаДокумента);
		
	Иначе
		
		ПослеВыполненияДействийДокумента(ФормаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияДействийДокумента(ФормаДокумента)
	
	ФормаДокумента.Прочитать();
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
КонецПроцедуры

Процедура ОтправитьТекущуюРевизиюДокументаВСервис(ФормаДокумента)
	
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор;
	
	СвойстваEDI                    = ФормаДокумента.СвойстваEDI;
	
	СвойстваEDI.ДлительныеОперации.Добавить(УникальныйИдентификаторЗадания);
	
	ВариантУказанияНоменклатуры = ВариантУказанияНоменклатуры(ФормаДокумента);
	
	ДанныеДействияДокумента = Новый Структура;
	ДанныеДействияДокумента.Вставить("Документ"                      , СвойстваEDI.ДанныеДокумента.Ссылка);
	ДанныеДействияДокумента.Вставить("Организация"                   , СвойстваEDI.ДанныеДокумента.Организация);
	ДанныеДействияДокумента.Вставить("Контрагент"                    , СвойстваEDI.ДанныеДокумента.Контрагент);
	ДанныеДействияДокумента.Вставить("ВариантУказанияНоменклатуры"   , ВариантУказанияНоменклатуры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента"     , ФормаДокумента);
	ДополнительныеПараметры.Вставить("УникальныйИдентификаторЗадания" , УникальныйИдентификаторЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияКомандыПерехода", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	РаботаСДаннымиEDIСлужебныйКлиент.ОтправитьТекущуюРевизиюДокументаВСервис(ДанныеДействияДокумента, ОписаниеОповещения,
		ФормаДокумента);
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПротоколомВзаимодействия

Функция ПолеДокумента(ФормаДокумента, ИмяЭлементаФормы)
	Перем Результат;
	
	ИдентификаторКлючаПоляHTML = ИдентификаторКлючаПоляHTML();
	
	ДанныеФорм = ПараметрыПриложения[ИдентификаторКлючаПоляHTML];
	
	Если ДанныеФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПолейФормы = ДанныеФорм[ФормаДокумента.УникальныйИдентификатор];
	
	Если ДанныеПолейФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ДанныеПолейФормы.Свойство(ИмяЭлементаФормы, Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументHTML(ФормаДокумента)
	
	Возврат ПолеДокумента(ФормаДокумента, "ПротоколВзаимодействияHTML");
	
КонецФункции

Функция ДокументWSS(ФормаДокумента)
	
	Возврат ПолеДокумента(ФормаДокумента, "ПротоколВзаимодействияWSS");
	
КонецФункции

Функция ИдентификаторКлючаПоляHTML()
	
	Возврат "ЭлектронноеВзаимодействие.ПоляHTML";
	
КонецФункции

Процедура УстановитьПолеHTML(ФормаДокумента, ЭлементФормы)
	
	ИдентификаторКлючаПоляHTML = ИдентификаторКлючаПоляHTML();
	
	ДанныеФорм = ПараметрыПриложения[ИдентификаторКлючаПоляHTML];
	
	Если ДанныеФорм = Неопределено Тогда
		ДанныеФорм = Новый Соответствие;
		ПараметрыПриложения.Вставить(ИдентификаторКлючаПоляHTML, ДанныеФорм);
	КонецЕсли;
	
	ДанныеПолейФормы = ДанныеФорм[ФормаДокумента.УникальныйИдентификатор];
	
	Если ДанныеПолейФормы = Неопределено Тогда
		ДанныеПолейФормы = Новый Структура;
		ДанныеФорм.Вставить(ФормаДокумента.УникальныйИдентификатор, ДанныеПолейФормы);
	КонецЕсли;
	
	ДанныеПолейФормы.Вставить(ЭлементФормы.Имя, ЭлементФормы.Документ.body);
	
КонецПроцедуры

Функция МаксимальноеКоличествоПопытокПодключения() Экспорт
	
	Возврат 5;
	
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

Функция ДатаUnix()
	Возврат Дата(1970, 1, 1);
КонецФункции

Функция ТекущаяДатаJSON() Экспорт
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() - ((ДатаUnix() - '00010101') * 1000);
КонецФункции

Функция ДатаИзJSON(ДатаЧисло) Экспорт
	Возврат МестноеВремя(ДатаUnix() + (ДатаЧисло / 1000));
КонецФункции

#КонецОбласти

#Область РаботаСWSS

Процедура УстановитьПодключениеWSSПослеПолученияТокена(Токен, ДополнительныеПараметры) Экспорт
	
	Если Токен = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось получить токен авторизации для протокола взаимодействия'"));
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	ДокументWSS = ДокументWSS(ФормаДокумента);
	
	Если ДокументWSS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПодключениеWSS(ДокументWSS, Токен);
	
КонецПроцедуры

Процедура ВыполнитьПодключениеWSS(Документ, Токен) Экспорт
	
	ПараметрыПодключенияWSS = ПараметрыПодключенияWSS();
	
	Документ.connect(ПараметрыПодключенияWSS.Адрес, ПараметрыПодключенияWSS.Хост, ПараметрыПодключенияWSS.Пользователь,
		Токен);
	
КонецПроцедуры

Процедура ВыполнитьПоискПротоколаВзаимодействияWSS(ФормаДокумента)
	
	ИдентификаторыОбъектов  = ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов;
	
	ИдентификаторДокумента   = ИдентификаторыОбъектов.ИдентификаторДокумента;
	ИдентификаторОрганизации = ИдентификаторыОбъектов.ИдентификаторОрганизации;
	
	Если ПустаяСтрока(ИдентификаторДокумента)
		Или ПустаяСтрока(ИдентификаторОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросHTTP = НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "GET";
	ЗапросHTTP.Адрес      = "/protocol";
	ЗапросHTTP.ТипЗапроса = ИдентификаторЗапросаНайтиПротокол();
	
	ЗапросHTTP.ПараметрыЗапроса.Вставить("DocumentID"     , ИдентификаторДокумента);
	ЗапросHTTP.ПараметрыЗапроса.Вставить("OrganizationID" , ИдентификаторОрганизации);
	
	ОтправитьСообщениеHTTP(ФормаДокумента, ЗапросHTTP);
	
КонецПроцедуры

Процедура ПолучитьСообщенияWSS(ФормаДокумента, ДанныеОтвета)
	
	ЗапросHTTP = НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "GET";
	ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages";
	ЗапросHTTP.ТипЗапроса = ИдентификаторЗапросаПолучитьСообщения();
	
	ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации);
	
	ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID"  , ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИдентификаторПротокола);
	
	ОтправитьСообщениеHTTP(ФормаДокумента, ЗапросHTTP);
	
КонецПроцедуры

Процедура ПодписатьсяНаИзмененияWSS(ФормаДокумента)
	
	
	ДанныеПротоколаВзаимодействия = ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия;
	
	ДокументWSS(ФормаДокумента).subscribeByRoutingKey(ПараметрыПодключенияWSS().ИмяОбмена, 
		ДанныеПротоколаВзаимодействия.ИдентификаторПротокола);
	
КонецПроцедуры

Процедура ПолучитьНовыеСообщенияWSS(ФормаДокумента, ИдентификаторыСообщений)
	
	Для каждого ИдентификаторСообщения Из ИдентификаторыСообщений Цикл
		
		ЗапросHTTP = НовыйЗапросHTTP();
		
		ЗапросHTTP.МетодHTTP  = "GET";
		ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages/{MessageID}";
		ЗапросHTTP.ТипЗапроса = ИдентификаторЗапросаПолучитьНовоеСообщение();
		
		ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации);
		
		ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID" , ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИдентификаторПротокола);
		ЗапросHTTP.ПараметрыURL.Вставить("MessageID"  , ИдентификаторСообщения);
		
		ОтправитьСообщениеHTTP(ФормаДокумента, ЗапросHTTP);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусСообщенияWSS(ФормаДокумента, ИдентификаторыСообщений, Статус)
	
	ЗапросHTTP = НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "PATCH";
	ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages";
	ЗапросHTTP.ТипЗапроса = ИдентификаторЗапросаУстановитьСтатусСообщения();
	
	ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации);
	
	ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID"  , ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИдентификаторПротокола);
	
	ИдентификаторыСообщений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыСообщений);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("Status", Статус);
	ДанныеЗапроса.Вставить("Messages", ИдентификаторыСообщений);
	
	ЗапросHTTP.ТекстЗапроса = ДанныеВJSON(ДанныеЗапроса);
	
	ОтправитьСообщениеHTTP(ФормаДокумента, ЗапросHTTP);
	
КонецПроцедуры

Функция ДанныеСообщения(ФормаДокумента, ТекстСообщения)
	
	Данные = ДанныеИзJSON(ТекстСообщения);
	
	ДанныеСообщения = Новый Структура;
	
	ДанныеСообщения.Вставить("ContentType"          , Данные["Headers"]["Content-Type"]);
	ДанныеСообщения.Вставить("КодСостояния"         , Данные["Code"]);
	ДанныеСообщения.Вставить("ЯвляетсяОшибкой"      , Данные["Headers"]["Content-Type"] = "application/problem+json");
	ДанныеСообщения.Вставить("ИдентификаторЗапроса" , Данные["Headers"]["RequestID"]);
	ДанныеСообщения.Вставить("АдресЗапроса"         , Данные["Headers"]["RequestURL"]);
	ДанныеСообщения.Вставить("ТипЗапроса"           , "");
	
	Если ПустаяСтрока(Данные["ResponseBody"]) Тогда
		ДанныеСообщения.Вставить("ДанныеОтвета"     , Неопределено);
	Иначе
		ДанныеСообщения.Вставить("ДанныеОтвета"     , ДанныеИзJSON(Данные["ResponseBody"]));
	КонецЕсли;
	
	ДанныеСообщения.ТипЗапроса = ФормаДокумента.СвойстваEDI.ОтправленныеЗапросы[ДанныеСообщения.ИдентификаторЗапроса];
	
	Возврат ДанныеСообщения;
	
КонецФункции

Процедура ОтправитьСтатусыСообщенийWSS(ФормаДокумента)
	
	Если Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений Тогда
		ИнициализироватьТабличнуюЧастьСообщений(ФормаДокумента);
	КонецЕсли;
	
	СтатусыСообщений = Новый Массив;
	СтатусыСообщений.Добавить(ИдентификаторСтатусаДоставкиОжидает());
	СтатусыСообщений.Добавить(ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторСтатусаДоставкиОтправлен());
	СтатусыСообщений.Добавить(ИдентификаторСтатусаДоставкиПолучен());
	СтатусыСообщений.Добавить(ИдентификаторСтатусаДоставкиПрочитан());
	
	ЦелевойСтатус = ?(ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ТребуетсяОтображатьПанель, 
		ИдентификаторСтатусаДоставкиПрочитан(),
		ИдентификаторСтатусаДоставкиПолучен());
	
	СообщенияКИзменениюСтатуса = Новый Массив;
	ИндексЦелевогоСтатуса = СтатусыСообщений.Найти(ЦелевойСтатус);
	ИдентификаторОрганизации = ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации;
	
	КоличествоНепрочитанныхСообщений = ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений;
	ИдентификаторыНепрочитанныхСообщений = Новый Массив;
	ТребуетсяОбновитьСтатусДокумента = Ложь;
	
	ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений = 0;
	
	Для каждого СведенияОСообщении Из ФормаДокумента.ТабличнаяЧастьСообщений Цикл
		
		Если СведенияОСообщении.СистемноеСообщение 
			И Не СведенияОСообщении.ИдентификаторОтправителя = ИдентификаторОрганизации
			И Не СведенияОСообщении.Статус = ИдентификаторСтатусаДоставкиПрочитан() Тогда
			
			ТребуетсяОбновитьСтатусДокумента = Истина;
			
		КонецЕсли;
		
		ИдентификаторСообщения = СтрРазделить(СведенияОСообщении.ИдентификаторСообщения, "#")[0];
		
		Если СтатусыСообщений.Найти(СведенияОСообщении.Статус) < ИндексЦелевогоСтатуса 
				И Не СведенияОСообщении.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
			СообщенияКИзменениюСтатуса.Добавить(ИдентификаторСообщения);
			СведенияОСообщении.Статус = ЦелевойСтатус;
		КонецЕсли;
		
		Если Не СведенияОСообщении.Статус = ИдентификаторСтатусаДоставкиПрочитан()
				И Не СведенияОСообщении.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
			
			ИдентификаторыНепрочитанныхСообщений.Добавить(ИдентификаторСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщенияКИзменениюСтатуса.Количество() > 0 Тогда
		УстановитьСтатусСообщенияWSS(ФормаДокумента, СообщенияКИзменениюСтатуса, ЦелевойСтатус);
	КонецЕсли;
	
	ИдентификаторыНепрочитанныхСообщений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыНепрочитанныхСообщений);
	НовоеКоличествоНепрочитанныхСообщений = ИдентификаторыНепрочитанныхСообщений.Количество(); 
	
	Если Не КоличествоНепрочитанныхСообщений = НовоеКоличествоНепрочитанныхСообщений Тогда
		ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений = НовоеКоличествоНепрочитанныхСообщений;
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	КонецЕсли;
	
	Если ТребуетсяОбновитьСтатусДокумента Тогда
		ОбновитьСведенияДокумента(ФормаДокумента, РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьСообщенияWSS(ФормаДокумента, ДанныеОтвета)
	
	Если Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений Тогда
		ИнициализироватьТабличнуюЧастьСообщений(ФормаДокумента);
	КонецЕсли;
	
	ТабличнаяЧастьСообщений = ФормаДокумента.ТабличнаяЧастьСообщений;
	
	Для каждого ДанныеСообщения Из ДанныеОтвета Цикл
		
		ИдентификаторСообщения   = ДанныеСообщения["MessageID"];
		
		НайденныеСтроки = ТабличнаяЧастьСообщений.НайтиСтроки(Новый Структура("ИдентификаторСообщения", ИдентификаторСообщения));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СведенияОСообщении = ТабличнаяЧастьСообщений.Добавить();
			СведенияОСообщении.ИдентификаторСообщения = ИдентификаторСообщения;
		Иначе
			СведенияОСообщении = НайденныеСтроки[0];
		КонецЕсли;
		
		СведенияОСообщении.ИдентификаторОтправителя = ДанныеСообщения["SenderID"];
		СведенияОСообщении.Дата                     = ДатаИзJSON(ДанныеСообщения["Date"]);
		СведенияОСообщении.Заголовок                = ДанныеСообщения["Header"];
		СведенияОСообщении.Текст                    = ДанныеСообщения["Text"];
		СведенияОСообщении.Гиперссылка              = ДанныеСообщения["Link"];
		СведенияОСообщении.Статус                   = ДанныеСообщения["Status"];
		СведенияОСообщении.ДатаИзмерения            = ДатаИзJSON(ДанныеСообщения["EditDate"]);
		СведенияОСообщении.СистемноеСообщение       = ДанныеСообщения["SystemMessage"];
		СведенияОСообщении.НомерСистемногоСообщения = НомерСистемногоСообщения(СведенияОСообщении);
		ВывестиСообщениеHTML(ФормаДокумента, СведенияОСообщении);
	КонецЦикла;
	
	ОтправитьСтатусыСообщенийWSS(ФормаДокумента);
	
КонецПроцедуры

Процедура ПрочитатьСообщениеWSS(ФормаДокумента, ДанныеСобытия)
	
	ДанныеСообщения               = ДанныеСообщения(ФормаДокумента, ДанныеСобытия);
	
	ДанныеПротоколаВзаимодействия = ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия;
	
	Если ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаНайтиПротокол() И ДанныеСообщения.КодСостояния = 200 Тогда
		
		ДанныеПротоколаВзаимодействия.ПротоколВзаимодействияПодключен = Истина;
		ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений   = Ложь;
		ДанныеПротоколаВзаимодействия.ИдентификаторПротокола          = ДанныеСообщения.ДанныеОтвета["id"];
		
		Если ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений Тогда
			ФормаДокумента.ТабличнаяЧастьСообщений.Очистить();
		КонецЕсли;
		
		ПолучитьСообщенияWSS(ФормаДокумента, ДанныеСообщения.ДанныеОтвета);
		ПодписатьсяНаИзмененияWSS(ФормаДокумента);
		
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаНайтиПротокол() И ДанныеСообщения.КодСостояния = 404 Тогда
		
		ВыполнитьПоискПротоколаВзаимодействияWSS(ФормаДокумента);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаНайтиПротокол() Тогда
		
		ДанныеПротоколаВзаимодействия.ПротоколВзаимодействияПодключен = Ложь;
		ДанныеПротоколаВзаимодействия.ИдентификаторПротокола          = "";
		
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаПолучитьСообщения() И ДанныеСообщения.КодСостояния = 200 Тогда
		
		ПрочитатьСообщенияWSS(ФормаДокумента, ДанныеСообщения.ДанныеОтвета);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаОтправитьСообщение() И ДанныеСообщения.КодСостояния = 200 Тогда
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаОтправитьСообщение() Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось отправить сообщение'"));
		
	ИначеЕсли ДанныеСообщения.АдресЗапроса = АдресЗапросаНовыеСообщения() Тогда
		
		ПолучитьНовыеСообщенияWSS(ФормаДокумента, ДанныеСообщения.ДанныеОтвета);
		
	ИначеЕсли ДанныеСообщения.ТипЗапроса = ИдентификаторЗапросаПолучитьНовоеСообщение() И ДанныеСообщения.КодСостояния = 200 Тогда
		ПрочитатьСообщенияWSS(ФормаДокумента, ДанныеСообщения.ДанныеОтвета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщениеWSS(ФормаДокумента, ТекстЗаголовкаСообщения, ТекстСообщения)
	
	Если Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений Тогда
		ИнициализироватьТабличнуюЧастьСообщений(ФормаДокумента);
	КонецЕсли;
	
	ЗапросHTTP = НовыйЗапросHTTP();
	
	ЗапросHTTP.МетодHTTP  = "POST";
	ЗапросHTTP.Адрес      = "/protocol/{ProtocolID}/messages";
	ЗапросHTTP.ТипЗапроса = ИдентификаторЗапросаОтправитьСообщение();
	
	ЗапросHTTP.ПараметрыURL.Вставить("ProtocolID"  , ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИдентификаторПротокола);
	
	ЗапросHTTP.Заголовки.Вставить("OrganizationID" , ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации);
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("MessageID" , Строка(Новый УникальныйИдентификатор));
	ДанныеЗапроса.Вставить("Date"      , ТекущаяДатаJSON());
	ДанныеЗапроса.Вставить("Header"    , ТекстЗаголовкаСообщения);
	ДанныеЗапроса.Вставить("Text"      , ТекстСообщения);
	
	ЗапросHTTP.ТекстЗапроса = ДанныеВJSON(ДанныеЗапроса);
	
	ОтправитьСообщениеHTTP(ФормаДокумента, ЗапросHTTP);
	
	СтрокаСообщения = Новый Структура;
	
	СтрокаСообщения = ФормаДокумента.ТабличнаяЧастьСообщений.Добавить();
	СтрокаСообщения.ИдентификаторСообщения   = ДанныеЗапроса.MessageID;
	СтрокаСообщения.ИдентификаторОтправителя = ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации;
	СтрокаСообщения.Дата                     = ТекущаяДата();
	СтрокаСообщения.Заголовок                = ДанныеЗапроса.Header;
	СтрокаСообщения.Текст                    = ДанныеЗапроса.Text;
	СтрокаСообщения.Статус                   = ИдентификаторСтатусаДоставкиОжидает();
	
	ВывестиСообщениеHTML(ФормаДокумента, СтрокаСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСообщений

Функция НовыйЗапросHTTP() Экспорт
	
	ЗапросHTTP = Новый Структура;
	
	ЗапросHTTP.Вставить("МетодHTTP"            , "");
	ЗапросHTTP.Вставить("Адрес"                , "");
	ЗапросHTTP.Вставить("ПараметрыURL"         , Новый Соответствие);
	ЗапросHTTP.Вставить("ПараметрыЗапроса"     , Новый Соответствие);
	ЗапросHTTP.Вставить("Заголовки"            , Новый Соответствие);
	ЗапросHTTP.Вставить("ТекстЗапроса"         , "");
	ЗапросHTTP.Вставить("ИдентификаторЗапроса" , Строка(Новый УникальныйИдентификатор));
	ЗапросHTTP.Вставить("ТипЗапроса"           , "");
	
	Возврат ЗапросHTTP;
	
КонецФункции

Процедура ЗаписатьСоответствие(Результат, Соответствие)
	
	Для каждого КлючИЗначение Из Соответствие Цикл
		
		ЗаголовокЗапроса = ЗаголовокЗапроса();
		ЗаголовокЗапроса.Key   = КлючИЗначение.Ключ;
		ЗаголовокЗапроса.Value = КлючИЗначение.Значение;
		
		Результат.Добавить(ЗаголовокЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПакетЗапроса()
	
	ПакетЗапроса = Новый Структура;
	
	ПакетЗапроса.Вставить("URL"             , "");
	ПакетЗапроса.Вставить("Method"          , "");
	ПакетЗапроса.Вставить("ParametersQuery" , Новый Массив);
	ПакетЗапроса.Вставить("ParametersURL"   , Новый Массив);
	ПакетЗапроса.Вставить("Headers"         , Новый Массив);
	ПакетЗапроса.Вставить("Data"            , "");
	ПакетЗапроса.Вставить("RequestID"       , "");
	
	Возврат ПакетЗапроса;
	
КонецФункции

Функция ЗаголовокЗапроса()
	
	ЗаголовокЗапроса = Новый Структура;
	
	ЗаголовокЗапроса.Вставить("Key"   , "");
	ЗаголовокЗапроса.Вставить("Value" , "");
	
	Возврат ЗаголовокЗапроса;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Шаблон, Параметры)
	
	Результат = Шаблон;
	
	Для каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, СтрШаблон("{%1}", Параметр.Ключ), Параметр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВJSON(Данные)
	
	#Если ВебКлиент Тогда
		
		Возврат ЗначениеВСтрокуJSON(Данные);
		
	#Иначе
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		
		ЗаписатьJSON(ЗаписьJSON, Данные);
		
		Возврат ЗаписьJSON.Закрыть();
		
	#КонецЕсли
	
КонецФункции

Функция ДанныеИзJSON(Текст)
	
	#Если ВебКлиент Тогда
		
		Возврат ЗначениеИзСтрокиJSON(Текст);
		
	#Иначе
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Текст);
		
		Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		ЧтениеJSON.Закрыть();
		
		Возврат Данные;
		
	#КонецЕсли
	
КонецФункции

Функция КонвертироватьЗапрос(ЗапросHTTP)
	
	ПакетЗапроса = ПакетЗапроса();
	
	ПакетЗапроса.URL       = ПодставитьПараметрыВСтроку(ЗапросHTTP.Адрес, ЗапросHTTP.ПараметрыURL);
	ПакетЗапроса.Method    = ЗапросHTTP.МетодHTTP;
	ПакетЗапроса.Data      = ЗапросHTTP.ТекстЗапроса;
	ПакетЗапроса.RequestID = ЗапросHTTP.ИдентификаторЗапроса;
	ЗаписатьСоответствие(ПакетЗапроса.ParametersQuery, ЗапросHTTP.ПараметрыЗапроса);
	ЗаписатьСоответствие(ПакетЗапроса.ParametersURL  , ЗапросHTTP.ПараметрыURL);
	ЗаписатьСоответствие(ПакетЗапроса.Headers        , ЗапросHTTP.Заголовки);
	
	Возврат ДанныеВJSON(ПакетЗапроса);
	
КонецФункции

Процедура ОтправитьСообщениеHTTP(ФормаДокумента, ЗапросHTTP)
	
	Если Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.СоединениеУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента" , ФормаДокумента);
	ДополнительныеПараметры.Вставить("ЗапросHTTP"                 , ЗапросHTTP);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСообщениеHTTPПослеПолученияТокена", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПолучениеТокена(ФормаДокумента, ФормаДокумента.СвойстваEDI.ДанныеДокумента.Организация, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьСообщениеHTTPПослеПолученияТокена(Токен, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	Если Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.СоединениеУстановлено Тогда
		Возврат;
	ИначеЕсли Токен = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось получить токен авторизации для протокола взаимодействия'"));
		Возврат;
	КонецЕсли;
	
	ЗапросHTTP     = ДополнительныеПараметры.ЗапросHTTP;
	
	Для каждого ПараметрURL Из ЗапросHTTP.ПараметрыURL Цикл
		ИмяПараметра = СтрШаблон("{%1}", ПараметрURL.Ключ);
		ЗапросHTTP.Адрес = СтрЗаменить(ЗапросHTTP.Адрес, ИмяПараметра, ПараметрURL.Значение);
	КонецЦикла;
	
	ЗапросHTTP.Заголовки.Вставить("Authorization"  , Токен);
	
	ТекстСообщения = КонвертироватьЗапрос(ЗапросHTTP);
	
	ФормаДокумента.СвойстваEDI.ОтправленныеЗапросы.Вставить(ЗапросHTTP.ИдентификаторЗапроса, ЗапросHTTP.ТипЗапроса);
	
	ПараметрыПодключенияWSS = ПараметрыПодключенияWSS();
	
	ДокументWSS(ФормаДокумента).publishMessage(ПараметрыПодключенияWSS.ОчередьСообщений, ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ВизуализацияСообщений

Процедура ИнициализироватьТабличнуюЧастьСообщений(ФормаДокумента)
	
	ВыполнитьСервернуюКоманду(ФормаДокумента, 
		ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторКомандыИнициализироватьТабличнуюЧастьСообщений());
	
КонецПроцедуры

Функция ЗаполнитьЭлемент(ДокументHTML, Префикс, Имя, Тип, Родитель, Класс = "", Текст = "") Экспорт
	
	ИдентификаторЭлемента = СтрШаблон("%1_%2", Префикс, Имя);
	
	Элемент = ДокументHTML.ownerDocument.getElementById(ИдентификаторЭлемента);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = ДокументHTML.ownerDocument.createElement(Тип);
		Элемент.id = ИдентификаторЭлемента;
		Родитель.append(Элемент)
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Класс) Тогда
		Если ТипЗнч(Класс) = Тип("Строка") Тогда
			Элемент.className = Класс;
		ИначеЕсли ТипЗнч(Класс) = Тип("Массив") Тогда
			Элемент.className = СтрСоединить(Класс, " ");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Текст) Тогда
		Элемент.innerText = Текст;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция НомерСистемногоСообщения(Строка) Экспорт
	
	Если Не Строка.СистемноеСообщение Тогда
		Возврат 0;
	КонецЕсли;
	
	ЧастиСообщения = СтрРазделить(Строка.ИдентификаторСообщения, "#");
	
	Если Не ЧастиСообщения.Количество() = 2 Тогда
		Возврат 0
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеТипа.ПривестиЗначение(ЧастиСообщения[1]);
	
КонецФункции

Процедура ВывестиСообщениеHTML(ФормаДокумента, Строка)
	
	ПолеHTML = ДокументHTML(ФормаДокумента);
	
	Если ПолеHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульВзаимодействия = ПолеHTML.ownerDocument;
	
	ПоследнийБлокСообщений = ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ПоследнийБлокСообщенийСообщений;
	ИдентификаторОрганизации = ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторОрганизации;
	
	НомерСистемногоСообщения = 0;
	
	Если Не ПоследнийБлокСообщений = Неопределено Тогда
		БлокСообщений            = МодульВзаимодействия.getElementById(ПоследнийБлокСообщений.БлокСообщений);
		НомерСистемногоСообщения = ПоследнийБлокСообщений.НомерСистемногоСообщения;
	КонецЕсли;
	
	ОсновнойЭлементФормы = МодульВзаимодействия.getElementById("main");
	
	Если Не БлокСообщений = Неопределено Тогда
		ПредставлениеПредыдущегоОтправителя = ?(Строка.ИдентификаторОтправителя = ИдентификаторОрганизации, 
			ПоследнийБлокСообщений.ПредставлениеОрганизации, ПоследнийБлокСообщений.ПредставлениеКонтрагента);
	КонецЕсли;
	
	ПредставлениеОтправителя = ?(Строка.ИдентификаторОтправителя = ИдентификаторОрганизации, 
			ФормаДокумента.СвойстваEDI.ПредставлениеУчастников.ПредставлениеОрганизации, 
			ФормаДокумента.СвойстваEDI.ПредставлениеУчастников.ПредставлениеКонтрагента);
	
	ВыводитьДату = БлокСообщений = Неопределено Или Не НачалоДня(Строка.Дата) = НачалоДня(ПоследнийБлокСообщений.Дата);
	ВыводитьОтправителя = БлокСообщений = Неопределено
		Или Не ПредставлениеОтправителя = ПоследнийБлокСообщений.ПредставлениеОтправителя;
	
	СторонаОтправки = ?(Строка.ИдентификаторОтправителя = ИдентификаторОрганизации, "sent", "received");
	ЭтоНовыйБлок    = ВыводитьДату Или ВыводитьОтправителя Или Не Строка.ИдентификаторОтправителя = ПоследнийБлокСообщений.Отправитель;
	
	ИдентификаторЭлемента = СтрШаблон("message_%1", СтрЗаменить(Строка.ИдентификаторСообщения, "-", ""));
	
	Сообщение = МодульВзаимодействия.getElementById(ИдентификаторЭлемента);
	
	Если Сообщение = Неопределено Тогда
		
		Если ВыводитьДату Тогда
			
			Маркер = МодульВзаимодействия.createElement("div");
			Маркер.className = "marker";
			ОсновнойЭлементФормы.append(Маркер);
			
			Блок = МодульВзаимодействия.createElement("div");
			Блок.className = "marker__block";
			Маркер.append(Блок);
			
			Дата = МодульВзаимодействия.createElement("div");
			Дата.className = "marker__block__date";
			Блок.append(Дата);
			
			Текст = МодульВзаимодействия.createElement("span");
			Текст.innerText = Формат(Строка.Дата, "ДФ=dd.MM.yy");
			Текст.className = "marker__block__date__text";
			Дата.append(Текст);
			
		КонецЕсли;
		
		Если БлокСообщений = Неопределено 
				Или ВыводитьОтправителя 
				Или Не Строка.СистемноеСообщение = ПоследнийБлокСообщений.СистемноеСообщение 
				Или (Строка.Дата - ПоследнийБлокСообщений.Дата > 60) 
				Или Строка.НомерСистемногоСообщения < НомерСистемногоСообщения
				Или Строка.НомерСистемногоСообщения = 1 Тогда
			Секция = МодульВзаимодействия.createElement("section");
			Секция.className = "section";
			ОсновнойЭлементФормы.append(Секция);
			
			КлассыСообщения = Новый Массив;
			КлассыСообщения.Добавить("messages__block");
			КлассыСообщения.Добавить(СторонаОтправки);
			
			БлокСообщений = МодульВзаимодействия.createElement("div");
			БлокСообщений.className = СтрСоединить(КлассыСообщения, " ");
			БлокСообщений.id = СтрШаблон("block_%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
			Секция.append(БлокСообщений);
			
		КонецЕсли;
		
		Если ВыводитьОтправителя Тогда
			
			КлассыСообщения = Новый Массив;
			КлассыСообщения.Добавить("message");
			КлассыСообщения.Добавить(СтрШаблон("message__%1", СторонаОтправки));
			КлассыСообщения.Добавить(СтрШаблон("message__%1_user", СторонаОтправки));
			
			Отправитель = МодульВзаимодействия.createElement("div");
			Отправитель.innerText = ПредставлениеОтправителя;
			Отправитель.className = СтрСоединить(КлассыСообщения, " ");
			БлокСообщений.append(Отправитель);
			
		КонецЕсли;
		
		КлассыСообщения = Новый Массив;
		КлассыСообщения.Добавить("message");
		
		Если ВыводитьОтправителя Тогда
			КлассыСообщения.Добавить(СтрШаблон("message__%1_dialog_start", СторонаОтправки));
		Иначе
			КлассыСообщения.Добавить(СтрШаблон("message__%1", СторонаОтправки));
		КонецЕсли;
		
		Сообщение = МодульВзаимодействия.createElement("div");
		Сообщение.className = СтрСоединить(КлассыСообщения, " ");
		Сообщение.id = ИдентификаторЭлемента;
		БлокСообщений.append(Сообщение);
		
	КонецЕсли;
	
	НомерСистемногоСообщения = НомерСистемногоСообщения(Строка);
	ТребуетсяВыводитьВремя = ПоследнийБлокСообщений = Неопределено Или Не НачалоМинуты(Строка.Дата) = НачалоМинуты(ПоследнийБлокСообщений.Дата)
		Или НомерСистемногоСообщения = 1;
	
	Если Не ПустаяСтрока(Строка.Заголовок) Тогда
		ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "title", "span", Сообщение, "message__system_text_title", Строка.Заголовок);
	КонецЕсли;
	
	Если ТребуетсяВыводитьВремя Или Строка.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
		
		МетаданныеСообщения = ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "metadata", "span", Сообщение, "message__metadata");
		Если ТребуетсяВыводитьВремя Тогда
			ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "time", "span", МетаданныеСообщения, "message__metadata__time", Формат(Строка.Дата, "ДФ=HH:mm"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.ИдентификаторОтправителя = ИдентификаторОрганизации И Не НомерСистемногоСообщения > 1 Тогда
		
		КлассыСообщения = Новый Массив;
		КлассыСообщения.Добавить("message__metadata__status");
		
		Если Строка.Статус = ИдентификаторСтатусаДоставкиОжидает() Тогда
			КлассыСообщения.Добавить("message__metadata__status_pending");
		ИначеЕсли Строка.Статус = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторСтатусаДоставкиОтправлен() Тогда
			КлассыСообщения.Добавить("message__metadata__status_almost-sent");
		ИначеЕсли Строка.Статус = ИдентификаторСтатусаДоставкиПолучен() Тогда
			КлассыСообщения.Добавить("message__metadata__status_sent");
		ИначеЕсли Строка.Статус = ИдентификаторСтатусаДоставкиПрочитан() Тогда
			КлассыСообщения.Добавить("message__metadata__status_success");
		КонецЕсли;
		
		ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "status", "span", МетаданныеСообщения, КлассыСообщения);
		
		ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "br", "br", Сообщение);
		
	КонецЕсли;
	
	Если ТребуетсяВыводитьВремя Или (Строка.ИдентификаторОтправителя = ИдентификаторОрганизации И Не НомерСистемногоСообщения(Строка) > 1) Тогда
		ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "br", "br", Сообщение);
	КонецЕсли;
	
	Если ПустаяСтрока(Строка.Гиперссылка) Тогда
		ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "description", "span", Сообщение, "message__system_text_description", Строка.Текст);
	Иначе
		БлокСсылка = ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "div", "div", Сообщение, СтрШаблон("message__%1_file", СторонаОтправки));;
		Ссылка = ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "link", "a", БлокСсылка, СтрШаблон("message__%1_file__link", СторонаОтправки));
		Ссылка.setAttribute("href", Строка.Гиперссылка);
		ЗаполнитьЭлемент(ПолеHTML, ИдентификаторЭлемента, "description", "span", Ссылка, "message__sent_file message__system_text_description", Строка.Текст);
	КонецЕсли;
	
	НовоеПоследнееСообщение = Новый Структура;
	НовоеПоследнееСообщение.Вставить("Дата"                     , Строка.Дата);
	НовоеПоследнееСообщение.Вставить("ПредставлениеОрганизации" , ФормаДокумента.СвойстваEDI.ПредставлениеУчастников.ПредставлениеОрганизации);
	НовоеПоследнееСообщение.Вставить("ПредставлениеКонтрагента" , ФормаДокумента.СвойстваEDI.ПредставлениеУчастников.ПредставлениеКонтрагента);
	НовоеПоследнееСообщение.Вставить("Отправитель"              , Строка.ИдентификаторОтправителя);
	НовоеПоследнееСообщение.Вставить("ПредставлениеОтправителя" , ПредставлениеОтправителя);
	НовоеПоследнееСообщение.Вставить("БлокСообщений"            , 
		?(БлокСообщений = Неопределено, Неопределено, БлокСообщений.id));
	НовоеПоследнееСообщение.Вставить("СистемноеСообщение"       , Строка.СистемноеСообщение);
	НовоеПоследнееСообщение.Вставить("НомерСистемногоСообщения" , Строка.НомерСистемногоСообщения);
	
	Если Строка.ИдентификаторОтправителя = ИдентификаторОрганизации Тогда
		НовоеПоследнееСообщение.ПредставлениеОрганизации = Строка.ИдентификаторОтправителя;
	Иначе
		НовоеПоследнееСообщение.ПредставлениеКонтрагента = Строка.ИдентификаторОтправителя;
	КонецЕсли;
	
	ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ПоследнийБлокСообщенийСообщений = НовоеПоследнееСообщение;
	
КонецПроцедуры

Процедура ВывестиСообщенияHTML(ФормаДокумента)
	
	Если ДокументHTML(ФормаДокумента) = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ИнициализированаТабличнаяЧастьСообщений Тогда
		Возврат;
	КонецЕсли;
	
	ДокументHTML = ДокументHTML(ФормаДокумента);
	
	Если Не ДокументHTML = Неопределено Тогда
		ОтображениеСтатичныхСообщений = 
			ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений;
		ДокументHTML.setDisabledInput(ОтображениеСтатичныхСообщений);
	КонецЕсли;
	
	Для каждого Строка Из ФормаДокумента.ТабличнаяЧастьСообщений Цикл
		ВывестиСообщениеHTML(ФормаДокумента, Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСообщенияHTML(ФормаДокумента)
	
	ДокументHTML = ДокументHTML(ФормаДокумента);
	
	Если ДокументHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульВзаимодействия = ДокументHTML.ownerDocument;
	
	ОсновнойЭлементФормы = МодульВзаимодействия.getElementById("main");
	
	КоличествоЭлементов = ОсновнойЭлементФормы.children.length;
	
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		
		Сообщение = ОсновнойЭлементФормы.children[КоличествоЭлементов - Счетчик];
		
		ИмяТега = НРег(Сообщение.nodeName);
		
		Если ИмяТега = "div" Или ИмяТега = "section" Тогда
			Сообщение.remove();
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлючамиДоступа

Функция ИдентификаторКлючаПолученияТокена()
	
	Возврат "ЭлектронноеВзаимодействие.ТокеныДоступаEDI";
	
КонецФункции

Процедура НачатьФоновоеПолучениеТокена(ФормаДокумента, Организация, ОписаниеОповещения)
	
	ДлительнаяОперация = ДокументыEDIИнтеграцияВызовСервера.ВыполнитьФоновоеПолучениеТокена(Организация, ФормаДокумента.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация"        , Организация);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения" , ОписаниеОповещения);
	
	ОписаниеОповещенияОбВыполненииОперации = Новый ОписаниеОповещения("ПриЗавершенииПолученияТокена", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаДокумента);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещенияОбВыполненииОперации, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПриЗавершенииПолученияТокена(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Статус = "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ИдентификаторКлючаПолученияТокена = ИдентификаторКлючаПолученияТокена();
	
	ДанныеОрганизаций = ПараметрыПриложения[ИдентификаторКлючаПолученияТокена];
	
	Если ДанныеОрганизаций = Неопределено Тогда
		ДанныеОрганизаций = Новый Соответствие;
		ПараметрыПриложения.Вставить(ИдентификаторКлючаПолученияТокена, ДанныеОрганизаций);
	КонецЕсли;
	
	ДанныеТокена = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	
	ДанныеОрганизаций.Вставить(ДополнительныеПараметры.Организация, ДанныеТокена);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ДанныеТокена.ТокенДоступа);
	
КонецПроцедуры

Процедура НачатьПолучениеТокена(ФормаДокумента, Организация, ОписаниеОповещения)
	
	ИдентификаторКлючаПолученияТокена = ИдентификаторКлючаПолученияТокена();
	
	ДанныеОрганизаций = ПараметрыПриложения[ИдентификаторКлючаПолученияТокена];
	
	Если ДанныеОрганизаций = Неопределено Тогда
		ДанныеОрганизаций = Новый Соответствие;
		ПараметрыПриложения.Вставить(ИдентификаторКлючаПолученияТокена, ДанныеОрганизаций);
	КонецЕсли;
	
	ДанныеТокена = ДанныеОрганизаций[Организация];
	
	Если ДанныеТокена = Неопределено Тогда
		НачатьФоновоеПолучениеТокена(ФормаДокумента, Организация, ОписаниеОповещения);
		Возврат;
	ИначеЕсли ДанныеТокена.СрокДействияТокенаДоступа <= ТекущаяДата() Тогда
		НачатьФоновоеПолучениеТокена(ФормаДокумента, Организация, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеТокена.ТокенДоступа);
	
КонецПроцедуры

#КонецОбласти

#Область Словарь

Функция ИдентификаторСобытияСоединениеУстановлено() Экспорт
	Возврат "onConnect";
КонецФункции

Функция ИдентификаторСобытияСоединениеРазорвано() Экспорт
	Возврат "onDisconnect";
КонецФункции

Функция ИдентификаторСобытияСоединениеОшибка()
	Возврат "onError";
КонецФункции

Функция ИдентификаторСобытияСообщение() Экспорт
	Возврат "onMessage";
КонецФункции

Функция ИдентификаторЗапросаНайтиПротокол() Экспорт
	Возврат "НайтиПротокол";
КонецФункции

Функция ИдентификаторЗапросаПолучитьСообщения() Экспорт
	Возврат "ПолучитьСообщения";
КонецФункции

Функция ИдентификаторЗапросаПолучитьНовоеСообщение() Экспорт
	Возврат "ПолучитьНовоеСообщение";
КонецФункции

Функция ИдентификаторЗапросаОтправитьСообщение() Экспорт
	Возврат "ОтправитьСообщение";
КонецФункции

Функция ИдентификаторЗапросаУстановитьСтатусСообщения() Экспорт
	Возврат "УстановитьСтатусСообщения";
КонецФункции

Функция АдресЗапросаНовыеСообщения() Экспорт
	Возврат "/newMessages";
КонецФункции

Функция ИдентификаторКнопкиОтправкиСообщения() Экспорт
	Возврат "composer__btn";
КонецФункции

Функция ИдентификаторПараметраОшибкаПодключения()
	Возврат "2";
КонецФункции

#КонецОбласти

#Область РаботаВВебКлиенте

Функция ЗначениеИзСтрокиJSON(СтрокаJSON) Экспорт
	
	Возврат СледующееЗначениеИзСтрокиJSON(СтрокаJSON, СтрДлина(СтрокаJSON));
	
КонецФункции

Функция ЗначениеВСтрокуJSON(Значение, Уровень = 0) Экспорт
	
	Результат = "";
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Строка") Тогда
		Результат = Значение;
		Если Найти(Результат, """") Тогда
			Результат = СтрЗаменить(Результат, """", "\""");
		КонецЕсли;
		Если Найти(Результат, Символы.ПС) Тогда
			Результат = СтрЗаменить(Результат, Символы.ПС, "\n");
		КонецЕсли;
		Результат = """" + Результат + """";
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Результат = Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = """" + Формат(Значение, "ДФ=yyyy-MM-ddTHH:mm:ss; ДП=0001-01-01T00:00:00") + """";
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Значение, "БЛ=false; БИ=true")
	ИначеЕсли ТипЗначения = Тип("Неопределено") 
		ИЛИ ТипЗначения = Тип("Null") Тогда
		Результат = "null";
	ИначеЕсли ТипЗначения = Тип("Массив")
		ИЛИ ТипЗначения = Тип("ФиксированныйМассив") Тогда
		Результат = Результат + "[";
		Уровень = Уровень + 1;
		ПервыйЭлемент = Истина;
		Для Каждого Элемент Из Значение Цикл
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				Результат = Результат + ", ";
			КонецЕсли;
			Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень)
				+ ЗначениеВСтрокуJSON(Элемент, Уровень);
		КонецЦикла;
		Уровень = Уровень - 1;
		Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень) + "]";
	ИначеЕсли ТипЗначения = Тип("Структура")
		ИЛИ ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда
		Результат = Результат + "{";
		ПервыйЭлемент = Истина;
		Уровень = Уровень + 1;
		Для Каждого Элемент Из Значение Цикл
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				Результат = Результат + ",";
			КонецЕсли;
			Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень)
				+ """" + Элемент.Ключ  + """: " + ЗначениеВСтрокуJSON(Элемент.Значение, Уровень);
		КонецЦикла;
		Уровень = Уровень - 1;
		Результат = Результат + Символы.ПС + ОтступУровняВложенностиJSON(Уровень) + "}";
	Иначе
		ВызватьИсключение НСтр("ru = 'Передано значение недопустимого типа'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СледующееЗначениеИзСтрокиJSON(СтрокаJSON, ДлинаСтроки, НомерСимвола = 1, ЕстьСледующее = Ложь)
	
	Результат = Неопределено;
	ТипЗначения = Неопределено;
	НачальныйНомер = 0;
	
	СимволЭкранирован = Ложь;
	ЕстьЭкранированиеКавычек = Ложь;
	ЕстьПереносСтроки = Ложь;
	
	Пока ДлинаСтроки > НомерСимвола Цикл
		
		КодСимвола = КодСимвола(СтрокаJSON, НомерСимвола);
		Если ТипЗначения = Неопределено Тогда
			
			Если КодСимвола = 123 Тогда // {
				Результат = Новый Соответствие;
				ТипЗначения = 1; // КлючСтруктуры
				
			ИначеЕсли КодСимвола = 91 Тогда // [
				Результат = Новый Массив;
				ТипЗначения = 3; // ЗначениеМассива
				
			ИначеЕсли КодСимвола = 34 Тогда // "
				ТипЗначения = 4; // Строка
				НачальныйНомер = НомерСимвола + 1;
				
			ИначеЕсли КодСимвола = 45 // -
				ИЛИ (КодСимвола >= 48 И КодСимвола <= 57) Тогда // 0...9
				ТипЗначения = 5; // Число
				НачальныйНомер = НомерСимвола;
				
			ИначеЕсли КодСимвола = 116 Тогда // t
				Результат = Истина;
				НомерСимвола = НомерСимвола + 3;
				ТипЗначения = 0; // Разделитель
				
			ИначеЕсли КодСимвола = 102 Тогда // f
				Результат = Ложь;
				НомерСимвола = НомерСимвола + 4;
				ТипЗначения = 0; // Разделитель
				
			ИначеЕсли КодСимвола = 110 Тогда // n
				Результат = Null;
				НомерСимвола = НомерСимвола + 3;
				ТипЗначения = 0; // Разделитель
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 4 Тогда // Строка
			
			Если КодСимвола = 34 Тогда // "
				Если СимволЭкранирован Тогда
					СимволЭкранирован = Ложь;
					ЕстьЭкранированиеКавычек = Истина;
				Иначе
					ЧислоСимволов = НомерСимвола - НачальныйНомер;
					Результат = Сред(СтрокаJSON, НачальныйНомер, ЧислоСимволов);
					Если ЕстьЭкранированиеКавычек Тогда
						Результат = СтрЗаменить(Результат, "\""", """");
					КонецЕсли;
					Если ЕстьПереносСтроки Тогда
						Результат = СтрЗаменить(Результат, "\n", Символы.ПС);
					КонецЕсли;
					НачальныйНомер = 0;
					ТипЗначения = 0; // Разделитель
				КонецЕсли;
			ИначеЕсли КодСимвола = 92 Тогда // \
				СимволЭкранирован = Истина;
			ИначеЕсли КодСимвола = 110 И СимволЭкранирован Тогда // n
				ЕстьПереносСтроки = Истина;
				СимволЭкранирован = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 5 Тогда // Число
			
			Если Не ((КодСимвола >= 48 И КодСимвола <= 57) // 0...9
				ИЛИ КодСимвола = 46) Тогда // .
				Результат = Число(Сред(СтрокаJSON, НачальныйНомер, НомерСимвола - НачальныйНомер));
				НачальныйНомер = 0;
				ТипЗначения = 0; // Разделитель
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 1 Тогда // КлючСтруктуры
			
			Если КодСимвола = 34 Тогда // "
				
				Если НачальныйНомер = 0 Тогда
					НачальныйНомер = НомерСимвола + 1;
				Иначе
					КлючСтруктуры = Сред(СтрокаJSON, НачальныйНомер, НомерСимвола - НачальныйНомер);
					НачальныйНомер = 0;
					ТипЗначения = 0; // Разделитель
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 2 Тогда // ЗначениеСтруктуры
			ЕстьСледующее = Ложь;
			ЗначениеСтруктуры = СледующееЗначениеИзСтрокиJSON(СтрокаJSON, ДлинаСтроки, НомерСимвола, ЕстьСледующее);
			Результат.Вставить(КлючСтруктуры, ЗначениеСтруктуры);
			Если ЕстьСледующее Тогда
				ТипЗначения = 1; // КлючСтруктуры
			Иначе
				ТипЗначения = 0; // Разделитель
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = 3 Тогда // ЗначениеМассива
			ЕстьСледующее = Ложь;
			ЗначениеМассива = СледующееЗначениеИзСтрокиJSON(СтрокаJSON, ДлинаСтроки, НомерСимвола, ЕстьСледующее);
			Результат.Добавить(ЗначениеМассива);
			Если Не ЕстьСледующее Тогда
				ТипЗначения = 0; // Разделитель
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗначения <> 0 Тогда // Разделитель
			
		ИначеЕсли КодСимвола = 58 Тогда // :
			ТипЗначения = 2; // ЗначениеСтруктуры
			
		ИначеЕсли КодСимвола = 93 ИЛИ КодСимвола = 125 Тогда // ] или }
			Возврат Результат;
			
		ИначеЕсли КодСимвола = 44 Тогда // ,
			ЕстьСледующее = Истина;
			Возврат Результат;
			
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтступУровняВложенностиJSON(Уровень)
	
	Результат = "";
	
	Для Счетчик = 1 По Уровень Цикл
		Результат = Результат + Символы.Таб;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтсутствиеПодключения

Процедура ВывестиСтатичныеСообщенияПротоколаВзаимодействия(ФормаДокумента)
	
	Если Не ЗначениеЗаполнено(ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиСтатичныеСообщенияПротоколаВзаимодействияПродолжение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОбновитьСведенияДокумента(ФормаДокумента, 
		РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов(), 
		Истина,
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиСтатичныеСообщенияПротоколаВзаимодействияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	Документ = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
	
	ДлительнаяОперация = РаботаСДаннымиEDIСлужебныйВызовСервера.ПолучитьВерсииДокумента(Документ,
		ФормаДокумента.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриПолученииВерсийДокумента", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаДокумента);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПриПолученииВерсийДокумента(ДанныеВерсийДокумента, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВерсийДокумента = Неопределено
		Или Не ДанныеВерсийДокумента.Статус = "Выполнено" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	ИдентификаторКоманды = ДокументыEDIИнтеграцияКлиентСервер.ИдентификаторКомандыВывестиСтатичныеСообщенияПротоколаВзаимодействия();
	
	ОчиститьСообщенияHTML(ФормаДокумента);
	ВыполнитьСервернуюКоманду(ФормаДокумента, ИдентификаторКоманды,
		ДанныеВерсийДокумента);
	ВывестиСообщенияHTML(ФормаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПереходаПоГиперссылке

Функция НавигационнаяСсылкаСоответствуетШаблону(НавигационнаяСсылка, Шаблон, ЗначенияПараметров) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	
	ЧастиСсылки = СтрРазделить(НавигационнаяСсылка, "/");
	ЧастиШаблона = СтрРазделить(Шаблон, "/");
	
	Если Не ЧастиСсылки.Количество() = ЧастиШаблона.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Счетчик = 0 По ЧастиШаблона.ВГраница() Цикл
		
		ЧастьСсылки = ЧастиСсылки[Счетчик];
		ЧастьШаблона = ЧастиШаблона[Счетчик];
		
		Если Лев(ЧастьШаблона, 1) = "{" И Прав(ЧастьШаблона, 1) = "}" Тогда
			
			ЗначенияПараметров.Вставить(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2), ЧастьСсылки);
			
		ИначеЕсли Не ВРег(ЧастьСсылки) = ВРег(ЧастьШаблона) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ШаблонНавигационнойСсылкиВерсияДокумента() Экспорт
	
	Возврат "edi://document/{ИдентификаторДокумента}/version/{ВерсияДокумента}";
	
КонецФункции

Процедура ОбработатьПереходПоСсылке(ФормаДокумента, НавигационнаяСсылка)
	Перем ЗначенияПараметров;
	
	Если НавигационнаяСсылкаСоответствуетШаблону(НавигационнаяСсылка, ШаблонНавигационнойСсылкиВерсияДокумента(), 
		ЗначенияПараметров) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
		
		ПараметрыСравнения = РаботаСВерсиямиEDIКлиент.НовыйПараметрыПросмотра(ФормаДокумента);
		ПараметрыСравнения.ТипДокумента           = ФормаДокумента.СвойстваEDI.ДанныеОтображенияФормы.ТипДокумента;
		ПараметрыСравнения.Документ               = ЗначенияПараметров.ИдентификаторДокумента;
		ПараметрыСравнения.Версия                 = ЗначенияПараметров.ВерсияДокумента;
		ПараметрыСравнения.Организация            = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Организация;
		ПараметрыСравнения.ДокументСсылка         = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
		ПараметрыСравнения.ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииСравненияВерсий", ЭтотОбъект, 
			ДополнительныеПараметры);
		
		РаботаСВерсиямиEDIКлиент.ОткрытьФормуСравненияИПросмотраВерсий(ПараметрыСравнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонфликтВерсий

Процедура ПолучитьСведенияКонфликтующихВерсий(ФормаДокумента)
	
	ДанныеДокумента = ФормаДокумента.СвойстваEDI.ДанныеДокумента;
	
	ПараметрыВыполнения = Новый Структура;
	ДанныеДействияДокумента = Новый Структура;
	ДанныеДействияДокумента.Вставить("Документ"                      , ДанныеДокумента.Ссылка);
	ДанныеДействияДокумента.Вставить("Организация"                   , ДанныеДокумента.Организация);
	ДанныеДействияДокумента.Вставить("Контрагент"                    , ДанныеДокумента.Контрагент);
	ДанныеДействияДокумента.Вставить("Менеджер"                      , ДанныеДокумента.Менеджер);
	ДанныеДействияДокумента.Вставить("ВариантУказанияНоменклатуры"   , ВариантУказанияНоменклатуры(ФормаДокумента));
	ДанныеДействияДокумента.Вставить("Версия"                        , "");
	
	ДлительнаяОперация = ДокументыEDIИнтеграцияВызовСервера.ПолучитьСведенияКонфликтующихВерсий(
		ДанныеДействияДокумента, ФормаДокумента.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриПолученииСведенийКонфликтующихВерсий", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаДокумента);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Функция ПредставлениеДаты(Дата)
	
	ТекущаяДата = ТекущаяДата();
	
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата) Тогда
		
		Возврат НСтр("ru = 'Сегодня'");
		
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ТекущаяДата - 24 * 60 * 60) Тогда
		
		Возврат НСтр("ru = 'Вчера'");
		
	Иначе
		
		Возврат Формат(Дата, "ДФ=dd.MM.yy") 
		
	КонецЕсли;
	
КонецФункции

Процедура ПриПолученииСведенийКонфликтующихВерсий(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Или Не РезультатВыполнения.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы = ДополнительныеПараметры.ФормаДокумента.Элементы;
	
	СведенийКонфликтующихВерсий = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	
	СведенияТекущейВерсии       = СведенийКонфликтующихВерсий.СведенияТекущейВерсии;
	СведенияАктуальнойВерсии    = СведенийКонфликтующихВерсий.СведенияАктуальнойВерсии;
	СведенияРедактируемойВерсии = СведенийКонфликтующихВерсий.СведенияРедактируемойВерсии;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьЗаголовокПоследнееИзменениеКонфликтВерсий",
		"Заголовок", СтрШаблон(НСтр("ru = 'Последнее изменение - %1'"), ПредставлениеДаты(СведенияАктуальнойВерсии.Дата)));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьМенеджерПоследнееИзменениеКонфликтВерсий",
		"Заголовок", СведенияАктуальнойВерсии.ПредставлениеМенеджера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьСуммаПоследнееИзменениеКонфликтВерсий",
		"Заголовок", СтрШаблон("%1 %2", Формат(СведенияАктуальнойВерсии.Сумма, "ЧДЦ=0; ЧН=0"), СведенияАктуальнойВерсии.ПредставлениеВалюты));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьЗаголовокПоследнееИзменениеКонфликтВерсийПриЗаписи",
		"Заголовок", СтрШаблон(НСтр("ru = 'Последнее изменение - %1'"), ПредставлениеДаты(СведенияАктуальнойВерсии.Дата)));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьМенеджерПоследнееИзменениеКонфликтВерсийПриЗаписи",
		"Заголовок", СведенияАктуальнойВерсии.ПредставлениеМенеджера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьСуммаПоследнееИзменениеКонфликтВерсийПриЗаписи",
		"Заголовок", СтрШаблон("%1 %2", Формат(СведенияАктуальнойВерсии.Сумма, "ЧДЦ=0; ЧН=0"), СведенияАктуальнойВерсии.ПредставлениеВалюты));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьМенеджерТекущаяВерсияКонфликтВерсий",
		"Заголовок", СведенияРедактируемойВерсии.ПредставлениеМенеджера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьСуммаТекущаяВерсияКонфликтВерсий",
		"Заголовок", СтрШаблон("%1 %2", Формат(СведенияРедактируемойВерсии.Сумма, "ЧДЦ=0; ЧН=0"), СведенияРедактируемойВерсии.ПредставлениеВалюты));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьМенеджерТекущаяВерсияКонфликтВерсийПриЗаписи",
		"Заголовок", СведенияРедактируемойВерсии.ПредставлениеМенеджера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьСуммаТекущаяВерсияКонфликтВерсийПриЗаписи",
		"Заголовок", СтрШаблон("%1 %2", Формат(СведенияРедактируемойВерсии.Сумма, "ЧДЦ=0; ЧН=0"), СведенияРедактируемойВерсии.ПредставлениеВалюты));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьЗаголовокРедактируемаяВерсияКонфликтВерсийПриЗаписи",
		"Заголовок", СтрШаблон(НСтр("ru = 'Редактируемая версия - %1'"), ПредставлениеДаты(СведенияТекущейВерсии.Дата)));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьМенеджерРедактируемаяВерсияКонфликтВерсийПриЗаписи",
		"Заголовок", СведенияТекущейВерсии.ПредставлениеМенеджера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияНадписьСуммаРедактируемаяВерсияКонфликтВерсийПриЗаписи",
		"Заголовок", СтрШаблон("%1 %2", Формат(СведенияТекущейВерсии.Сумма, "ЧДЦ=0; ЧН=0"), СведенияТекущейВерсии.ПредставлениеВалюты));
	
КонецПроцедуры

Процедура КонфликтВерсийСкачатьВерсиюИзСервиса(ФормаДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонфликтВерсийСкачатьВерсиюИзСервисаОкончание", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Все текущие изменения будут потеряны.
                        |Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет,
		НСтр("ru = 'Принятие моих изменений'"));
	
КонецПроцедуры

Процедура КонфликтВерсийСкачатьВерсиюИзСервисаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	ВыполнитьДействиеДокумента(
		ФормаДокумента, 
		ПредопределенноеЗначение("Перечисление.КомандыПроцессаЗаказаEDI.СкачатьВерсиюИзСервиса"), 
		ПредопределенноеЗначение("Перечисление.СценарииВыполненияКомандEDI.СкачатьВерсиюИзСервиса"));
		
	ДокументыEDIИнтеграцияКлиентСервер.СкрытьВсплывающуюГруппуФормы(ФормаДокумента.Элементы, "ГруппаКонфликтВерсий");
	ДокументыEDIИнтеграцияКлиентСервер.СкрытьВсплывающуюГруппуФормы(ФормаДокумента.Элементы, "ГруппаКонфликтВерсийПриЗаписи");
	
КонецПроцедуры
 
Процедура КонфликтВерсийОтправитьВерсиюВСервис(ФормаДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонфликтВерсийОтправитьВерсиюВСервисОкончание", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Последние изменения будут удалены и моя версия станет актуальной.
                        |Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет,
		НСтр("ru = 'Сохранение моих изменений'"));
	
КонецПроцедуры

Процедура КонфликтВерсийОтправитьВерсиюВСервисОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	ВыполнитьДействиеДокумента(
		ФормаДокумента, 
		ПредопределенноеЗначение("Перечисление.КомандыПроцессаЗаказаEDI.ОтправитьВерсиюВСервис"), 
		ПредопределенноеЗначение("Перечисление.СценарииВыполненияКомандEDI.ОтправитьВерсиюВСервис"));
		
	ОтправитьТекущуюРевизиюДокументаВСервис(ФормаДокумента);
	ДокументыEDIИнтеграцияКлиентСервер.СкрытьВсплывающуюГруппуФормы(ФормаДокумента.Элементы, "ГруппаКонфликтВерсий");
	ДокументыEDIИнтеграцияКлиентСервер.СкрытьВсплывающуюГруппуФормы(ФормаДокумента.Элементы, "ГруппаКонфликтВерсийПриЗаписи");
	
КонецПроцедуры

#КонецОбласти

#Область СравнениеВерсий

Процедура ПриЗавершенииСравненияВерсий(ВыполняемаяОперация, ДополнительныеПараметры) Экспорт 
	
	Если ВыполняемаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеДокумента(ДополнительныеПараметры.ФормаДокумента, ВыполняемаяОперация.Команда, 
		ВыполняемаяОперация.Сценарий, ВыполняемаяОперация.Версия);
	
КонецПроцедуры

Процедура ОткрытьСравнениеВерсийДокумента(ФормаДокумента, URL)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	НовыйПараметрыСравнения = РаботаСВерсиямиEDIКлиент.НовыйПараметрыСравнения(ФормаДокумента);
	НовыйПараметрыСравнения.ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииСравненияВерсий", ЭтотОбъект, 
		ДополнительныеПараметры);
	НовыйПараметрыСравнения.ТипДокумента           = ФормаДокумента.СвойстваEDI.ДанныеОтображенияФормы.ТипДокумента;
	НовыйПараметрыСравнения.Документ               = ФормаДокумента.СвойстваEDI.ИдентификаторыОбъектов.ИдентификаторДокумента;
	НовыйПараметрыСравнения.ДокументСсылка         = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
	НовыйПараметрыСравнения.Организация            = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Организация;
	
	ПараметрыURL = ПараметрыURL(URL);
	
	Если ПараметрыURL.Свойство("toVersionId") Тогда
		НовыйПараметрыСравнения.Версия             = ПараметрыURL.fromVersionId;
	КонецЕсли;
	
	Если ПараметрыURL.Свойство("fromVersionId ") Тогда
		НовыйПараметрыСравнения.ВерсияДляСравнения = ПараметрыURL.toVersionId;
	КонецЕсли;
	
	РаботаСВерсиямиEDIКлиент.ОткрытьФормуСравненияИПросмотраВерсий(НовыйПараметрыСравнения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура УдалитьНезаполненныеСвойства(Данные)
	
	НезаполненныеСвойства = Новый Массив;
	
	Для каждого КлючИЗначение Из Данные Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			НезаполненныеСвойства.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Ключ Из НезаполненныеСвойства Цикл
		Данные.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктурыИдентичны(Структура1, Структура2)
	Перем ЗначениеСвойства;
	
	Для каждого КлючИЗначение Из Структура1 Цикл
		Если Не Структура2.Свойство(КлючИЗначение.Ключ, ЗначениеСвойства)
			Или Не КлючИЗначение.Значение = ЗначениеСвойства Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Структура2 Цикл
		Если Не Структура1.Свойство(КлючИЗначение.Ключ, ЗначениеСвойства)
			Или Не КлючИЗначение.Значение = ЗначениеСвойства Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция СравнитьСтруктуры(Структура1, Структура2) 
	Перем Значение;
	
	Результат = Новый Структура;
	
	Для каждого КлючИЗначение Из Структура1 Цикл
		Если Не Структура2.Свойство(КлючИЗначение.Ключ, Значение) Или Не КлючИЗначение.Значение = Значение Тогда
			Результат.Вставить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из Структура2 Цикл
		Если Не Структура1.Свойство(КлючИЗначение.Ключ, Значение) Или Не КлючИЗначение.Значение = Значение Тогда
			Результат.Вставить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхронноеВыполнениеДействий

Функция ВыполняемыеСинхронизацииДокументов() Экспорт
	
	ИмяПараметра = "ЭлектронноеВзаимодействие.ВыполняемыеСинхронизацииДокументов";
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		Операции = Новый Структура("Обработка,Список", Ложь, Новый Соответствие);
		ПараметрыПриложения.Вставить(ИмяПараметра, Операции);
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра];

КонецФункции

Процедура ВыполнитьКонтрольСинхронизации(Операции) Экспорт
	
	ТекущаяДата = ТекущаяДата(); // дата сеанса не используется 
	
	НеотслеживаемыеОперации = Новый Массив;
	
	Для каждого Операция Из Операции Цикл
		
		ДанныеОперации = Операция.Значение;
		
		Если ДанныеОперации.ФормаДокумента = Неопределено
			Или Не ДанныеОперации.ФормаДокумента.Открыта() Тогда
			
			НеотслеживаемыеОперации.Добавить(Операция.Ключ);
			
		ИначеЕсли ДанныеОперации.Контроль <= ТекущаяДата Тогда
			
			РезультатВыполнения = РаботаСДаннымиEDIСлужебныйВызовСервера.ПроверитьВыполнениеЗадания(ДанныеОперации.Документ);
			
			Если РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка")
				Или РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления")
				Или РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление") 
				Или РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполнена") Тогда
				
				НеотслеживаемыеОперации.Добавить(Операция.Ключ);

				ПриИзмененииСведенийДокумента(ДанныеОперации.ФормаДокумента, РезультатВыполнения);
				ЗаполнитьЗначенияСвойств(ДанныеОперации.ФормаДокумента.СвойстваEDI, РезультатВыполнения);
				
				ЗавершитьДлительнуюОперацию(ДанныеОперации.ФормаДокумента, Операция.Ключ);
				
				ПослеВыполненияДействийДокумента(ДанныеОперации.ФормаДокумента);
				
			Иначе
				
				Операция.Значение.ТекущийИнтервал = Мин(Операция.Значение.ТекущийИнтервал * 1.4, 15);
				Операция.Значение.Контроль        = ТекущаяДата + Операция.Значение.ТекущийИнтервал;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ИдентификаторОперации Из НеотслеживаемыеОперации Цикл
		Операции.Удалить(ИдентификаторОперации);
	КонецЦикла;
	
	Если Операции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата(); // дата сеанса не используется
	Интервал = 120; 
	Для каждого Операция Из Операции Цикл
		Интервал = Макс(Мин(Интервал, Операция.Значение.Контроль - ТекущаяДата), 1);
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("КонтрольВыполненияСинхронизации", Интервал, Истина);
	
КонецПроцедуры

Процедура ОжидатьЗавершенияСинхронизации(ФормаДокумента)
	
	ИдентификаторЗадания = Новый УникальныйИдентификатор;
	
	ФормаДокумента.СвойстваEDI.ДлительныеОперации.Добавить(ИдентификаторЗадания);
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
	ТекущийИнтервал = 3;
	
	ДанныеЗадания = Новый Структура;
	ДанныеЗадания.Вставить("ФормаДокумента"             , ФормаДокумента);
	ДанныеЗадания.Вставить("Документ"                   , ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка);
	ДанныеЗадания.Вставить("ТекущийИнтервал"            , ТекущийИнтервал);
	ДанныеЗадания.Вставить("Контроль"                   , ТекущаяДата() + ТекущийИнтервал);
	
	ВыполняемыеСинхронизацииДокументов = ВыполняемыеСинхронизацииДокументов();
	ВыполняемыеСинхронизацииДокументов.Список.Вставить(ИдентификаторЗадания, ДанныеЗадания);
	
	ПодключитьОбработчикОжидания("КонтрольВыполненияСинхронизации", 1, Истина);
	
КонецПроцедуры

Процедура ЗавершитьДлительнуюОперацию(ФормаДокумента, ИдентификаторЗадания)
	
	Индекс = ФормаДокумента.СвойстваEDI.ДлительныеОперации.Найти(ИдентификаторЗадания);
	
	Если Не Индекс = Неопределено Тогда
		ФормаДокумента.СвойстваEDI.ДлительныеОперации.Удалить(Индекс);
	КонецЕсли;
	
	ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область КлиентскиеОбработчики

#Область КлиентскийОбработчикПодтвердитьИзменения

Функция ИдентификаторКлиентскогоОбработчикаПодтвердитьИзменения()
	
	Возврат "confirmChanges";
	
КонецФункции

Процедура КлиентскийОбработчикПодтвердитьИзменения(ФормаДокумента, ОписаниеОповещения)
	
	Если Не ДокументыEDIИнтеграцияВызовСервера.ПоказыватьФормуПодтвержденияПриОтправкеИзменений() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Документ", ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка);
	
	ОткрытьФорму("Обработка.СервисEDI.Форма.ПодтверждениеОтправкиНаСогласование", ПараметрыОткрытияФормы, 
		ФормаДокумента, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДокументовИзСписка

Процедура ЗагрузитьОбновитьПрикладныеДокументыИзСписка(ПараметрыЗагрузки, Форма, ЭлементСписок) Экспорт
	
	ДлительнаяОперация =  ДокументыEDIИнтеграцияВызовСервера.РезультатЗагрузкиОбновленияПрикладныхДокументов(ПараметрыЗагрузки);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементСписок",           ЭлементСписок);
	ДополнительныеПараметры.Вставить("НавигационнаяСсылка",     Неопределено);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", ПараметрыЗагрузки.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("Форма",                   Форма);
	
	Если Форма.Окно <> Неопределено Тогда
		ДополнительныеПараметры.НавигационнаяСсылка = Форма.Окно.ПолучитьНавигационнуюСсылку();
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ЗагрузитьОбновитьПрикладныеДокументыИзСпискаЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьОбновитьПрикладныеДокументыИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОбновитьПрикладныеДокументыИзСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		Если ДополнительныеПараметры.ЭлементСписок <> Неопределено Тогда
			ДополнительныеПараметры.ЭлементСписок.Обновить();
		КонецЕсли;
		
		РезультатВыполнения = ДокументыEDIИнтеграцияВызовСервера.ОбработатьРезультатСопоставления(Результат.АдресРезультата, 
			ДополнительныеПараметры.УникальныйИдентификатор);
		
		ДополнительныеПараметры.Вставить("РезультатЗагрузки", РезультатВыполнения);
		
		Если РезультатВыполнения.КоличествоТребуетсяСопоставлениеНоменклатуры > 0 Тогда
			
			РезультатВыполнения.Вставить("УникальныйИдентификатор", ДополнительныеПараметры.УникальныйИдентификатор);
			ОповещениеООкончанииСопоставления = Новый ОписаниеОповещения("ПослеОкончанияСопоставленияНоменклатурыПриЗагрузкеДокументов", ЭтотОбъект, ДополнительныеПараметры);
			СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(РезультатВыполнения.НоменклатураКСопоставлению,, ОповещениеООкончанииСопоставления); 
			
		Иначе
			
			ОповеститьПользователяОРезультатахЗагрузкиДокументов(ДополнительныеПараметры);
			
		КонецЕсли;
		
		Оповестить("ВыполненаОбновлениеРегистраСостояниеДокументов");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОкончанияСопоставленияНоменклатурыПриЗагрузкеДокументов(РезультатСопоставления, ДополнительныеПараметры) Экспорт
	
	НетРезультатаСопоставления = Ложь;
	
	Если РезультатСопоставления = Неопределено Тогда
		НетРезультатаСопоставления = Истина;
	ИначеЕсли ТипЗнч(РезультатСопоставления) <> Тип("Массив") Тогда
		НетРезультатаСопоставления = Истина;
	ИначеЕсли РезультатСопоставления.Количество() = 0 Тогда 
		НетРезультатаСопоставления = Истина;
	КонецЕсли;
	
	Если НетРезультатаСопоставления Тогда
		
		ДополнительныеПараметры.РезультатЗагрузки.КоличествоНеЗагруженныхОшибка = ДополнительныеПараметры.РезультатЗагрузки.КоличествоНеЗагруженныхОшибка 
		                                                                          + ДополнительныеПараметры.РезультатЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры;
		ДополнительныеПараметры.РезультатЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры = 0;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеПараметры.РезультатЗагрузки.ДанныеНеЗагруженныхДокументовОшибка,
		                                             ДополнительныеПараметры.РезультатЗагрузки.ДанныеДокументовТребуетсяСопоставление);
		
		ОповеститьПользователяОРезультатахЗагрузкиДокументов(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбновления = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры.РезультатЗагрузки);
	ПараметрыОбновления.Вставить("РезультатСопоставленияНоменклатуры", РезультатСопоставления);
	
	ДлительнаяОперация =  ДокументыEDIИнтеграцияВызовСервера.РезультатОбновленияДокументовПослеСопоставленияНоменклатуры(ПараметрыОбновления);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатыЗагрузкиОбновленияДокументовПослеСопоставленияНоменклатуры(ДлительнаяОперация, ДополнительныеПараметры);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.Форма);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатыЗагрузкиОбновленияДокументовПослеСопоставленияНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатыЗагрузкиОбновленияДокументовПослеСопоставленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ДополнительныеПараметры.РезультатЗагрузки = РезультатВыполнения;
		
		Если ДополнительныеПараметры.Свойство("ЭлементСписок")
			И ДополнительныеПараметры.ЭлементСписок <> Неопределено Тогда
			ДополнительныеПараметры.ЭлементСписок.Обновить();
		КонецЕсли;
		
		ОповеститьПользователяОРезультатахЗагрузкиДокументов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьПользователяОРезультатахЗагрузкиДокументов(ПараметрыОповещения)
	
	ОчиститьСообщения();
	
	Заголовок = НСтр("ru = 'Загрузка и обновление документов из сервиса 1С:EDI'");
	
	Для Каждого ДанныеДокумента Из ПараметрыОповещения.РезультатЗагрузки.ДанныеНеЗагруженныхДокументовОшибка Цикл
		
		ШаблонСообщения = НСтр("ru = 'Документ ""%1""  № %2 от %3 не загружен. %4'");
		ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		                                                                          ДанныеДокумента.ТипДокумента, 
		                                                                          ДанныеДокумента.НомерДокумента, 
		                                                                          ДанныеДокумента.ДатаДокумента,
		                                                                          ДанныеДокумента.ТекстОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ДанныеДокумента.ПрикладнойОбъект);
		
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнена загрузка или обновление документов: %1 из %2.'"), 
	                                                                         ПараметрыОповещения.РезультатЗагрузки.КоличествоЗагруженных, 
	                                                                         ПараметрыОповещения.РезультатЗагрузки.КоличествоВыбранных);
	
	ПоказатьОповещениеПользователя(Заголовок,
	                               ПараметрыОповещения.НавигационнаяСсылка,
	                               ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ПоясненияКомандФормы

Процедура УстановитьПодсказкуКоманды(ФормаДокумента, Порядок, Развернута = Ложь)
	
	ИмяЭлементаФормы = СтрШаблон("ДействиеДокумента_%1", Порядок);
	
	ЭлементФормы = ФормаДокумента.Элементы.Найти(ИмяЭлементаФормы);
	
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваEDI = ФормаДокумента.СвойстваEDI;
	
	ЭлементФормыПодсказка = ЭлементФормы.РасширеннаяПодсказка;
	
	КомандаФормы  = СвойстваEDI.ДанныеОтображенияФормы.КомандыЭлементовФормы[ИмяЭлементаФормы];
	ДанныеКоманды = СвойстваEDI.ДанныеКомандДокумента[КомандаФормы];
	
	Если ДанныеКоманды.Доступно Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ЭлементФормыПодсказка.Имя,
			"Заголовок", ДанныеКоманды.Пояснение);
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаПояснения = СтрШаблон("ТекстПоясненияНедоступности_%1", Порядок);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ИмяЭлементаПояснения,
		"Видимость", Развернута);
	
	Если Развернута Тогда
		
		ТекстНавигационнойСсылки = СтрШаблон("СвернутьПояснениеНедоступности_%1", Порядок);
		ЗаголовокHTML = "%1<span style = 'color: НедоступныеДанныеЭДЦвет'><a href = '%2'>%3:</a></span>";

	Иначе
		
		ТекстНавигационнойСсылки = СтрШаблон("РазвернутьПояснениеНедоступности_%1", Порядок);
		ЗаголовокHTML = "%1<span style = 'color: НедоступныеДанныеЭДЦвет'><a href = '%2'>%3?</a></span>";

	КонецЕсли;
	
	
	ПояснениеКоманды = ?(ПустаяСтрока(ДанныеКоманды.Пояснение), "", ДанныеКоманды.Пояснение + ". ");
	
	ТекстПояснения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ЗаголовокHTML, ПояснениеКоманды, 
		ТекстНавигационнойСсылки, НСтр("ru = 'Почему недоступно'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, ЭлементФормыПодсказка.Имя,
		"Заголовок", ТекстПояснения);
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыКонтрагента

Процедура ПослеСопоставленияНоменклатурыКонтрагента(РезультатСопоставления, ДополнительныеПараметры) Экспорт
	
	Если РезультатСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	Документ       = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("ТаблицаСопоставления", РезультатСопоставления);
	
	РезультатВыполнения = РаботаСДаннымиEDIСлужебныйВызовСервера.ПродолжитьВыполнениеКомандыПерехода(Документ, ДанныеСценария);
	
	УдалитьНезаполненныеСвойства(РезультатВыполнения);
	
	ПриИзмененииСведенийДокумента(ФормаДокумента, РезультатВыполнения);
	
	ЗаполнитьЗначенияСвойств(ФормаДокумента.СвойстваEDI, РезультатВыполнения);
	
	Если РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется")
		Или РезультатВыполнения.СостояниеСинхронизации.СостояниеВыполнения = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Требуется") Тогда
		
		ОжидатьЗавершенияСинхронизации(ФормаДокумента);
		
	Иначе
		
		ДокументыEDIИнтеграцияКлиентСервер.ОбновитьОтображениеЭлементовФормы(ФормаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#Область СопоставитьНоменклатуруПриОтправке

Процедура СопоставитьНоменклатуруПриОтправке(ФормаДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СопоставитьНоменклатуруПриОтправкеЗаписатьДокумент", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Если ФормаДокумента.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Для сопоставления номенклатуры контрагента требуется записать документ.
		                    |Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет, 
			НСтр("ru = 'Запись документа'"), КодВозвратаДиалога.Отмена);
		
	Иначе
		
		ОписаниеОповещенияПослеЗаписи = Новый ОписаниеОповещения("СопоставитьНоменклатуруПриОтправкеПослеЗаписи", 
			ЭтотОбъект, ДополнительныеПараметры);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеЗаписи, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьНоменклатуруПриОтправкеЗаписатьДокумент(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПослеЗаписи = Новый ОписаниеОповещения("СопоставитьНоменклатуруПриОтправкеПослеЗаписи", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	СервисEDIКлиентПереопределяемый.ЗаписатьДокумент(ДополнительныеПараметры.ФормаДокумента, ОписаниеОповещенияПослеЗаписи);
	
КонецПроцедуры

Процедура СопоставитьНоменклатуруПриОтправкеПослеЗаписи(РезультатЗаписи, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗаписи Тогда
		Возврат
	КонецЕсли;
	
	ФормаДокумента    = ДополнительныеПараметры.ФормаДокумента;
	
	Документ          = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСопоставленияНоменклатурыКонтрагента", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Настройки = Новый Структура;
	Настройки.Вставить("РежимОткрытияОкна" , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Настройки.Вставить("ВладелецФормы"     , ФормаДокумента);
	
	СопоставлениеНоменклатурыКонтрагентовСлужебныйКлиент.ОбработатьРезультатСопоставленияНоменклатурыКонтрагентовВДокументах(
		Документ, , ОписаниеОповещения, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СопоставитьНоменклатуруПриПолучении

Процедура СопоставитьНоменклатуруПриПолучении(ФормаДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СопоставитьНоменклатуруПриПолученииЗаписатьДокумент", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ФормаДокумента.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Для сопоставления номенклатуры контрагента требуется записать документ.
		                    |Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Нет, 
			НСтр("ru = 'Запись документа'"), КодВозвратаДиалога.Отмена);
		
	Иначе
		
		ОписаниеОповещенияПослеЗаписи = Новый ОписаниеОповещения("СопоставитьНоменклатуруПриПолученииПослеЗаписи", 
			ЭтотОбъект, ДополнительныеПараметры);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеЗаписи, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьНоменклатуруПриПолученииЗаписатьДокумент(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ДополнительныеПараметры.ФормаДокумента;
	
	ОписаниеОповещенияПослеЗаписи = Новый ОписаниеОповещения("СопоставитьНоменклатуруПриПолученииПослеЗаписи", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	СервисEDIКлиентПереопределяемый.ЗаписатьДокумент(ФормаДокумента, ОписаниеОповещенияПослеЗаписи);
	
КонецПроцедуры

Процедура СопоставитьНоменклатуруПриПолученииПослеЗаписи(РезультатЗаписи, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента    = ДополнительныеПараметры.ФормаДокумента;
	
	Документ          = ФормаДокумента.СвойстваEDI.ДанныеДокумента.Ссылка;
	РезультатПроверки = ФормаДокумента.СвойстваEDI.СостояниеСинхронизации.ДанныеСопоставленияНоменклатуры;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаДокумента", ФормаДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСопоставленияНоменклатурыКонтрагента", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Настройки = Новый Структура;
	Настройки.Вставить("РежимОткрытияОкна" , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Настройки.Вставить("ВладелецФормы"     , ФормаДокумента);
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(
		РезультатПроверки, Настройки, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДокумента

Процедура ЗагрузитьОбновитьПрикладнойДокументЗавершение(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗагрузки = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатЗагрузки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.КраткоеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Не РезультатЗагрузки.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(РезультатЗагрузки.АдресРезультата);
	
	ДополнительныеПараметры.Вставить("РезультатЗагрузки", РезультатЗагрузки);
	
	ОповеститьПользователяОРезультатахЗагрузкиДокументов(ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
	Оповестить("ВыполненаОбновлениеРегистраСостояниеДокументов");
	
КонецПроцедуры

Процедура ПослеЗагрузкиДокументаИзСервиса(РезультатЗагрузки, ПараметрыЗагрузки) Экспорт
	
	Если РезультатЗагрузки = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатЗагрузки.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.КраткоеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Не РезультатЗагрузки.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФормы = ?(ПараметрыЗагрузки.ФормаВладелец = Неопределено, Неопределено, ПараметрыЗагрузки.ФормаВладелец.УникальныйИдентификатор);
	
	РезультатВыполнения = ДокументыEDIИнтеграцияВызовСервера.ОбработатьРезультатСопоставления(РезультатЗагрузки.АдресРезультата, 
		ИдентификаторФормы);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормаВладелец"                 , ПараметрыЗагрузки.ФормаВладелец);
	ДополнительныеПараметры.Вставить("РезультатЗагрузки"             , РезультатВыполнения);
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияОЗавершении" , ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении);
	ДополнительныеПараметры.Вставить("НавигационнаяСсылка"           , Неопределено);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор"       , ИдентификаторФормы);
	
	Если РезультатВыполнения.КоличествоТребуетсяСопоставлениеНоменклатуры > 0 Тогда
		
		ОповещениеООкончанииСопоставления = Новый ОписаниеОповещения("ПослеОкончанияСопоставленияНоменклатурыПриЗагрузкеДокумента", ЭтотОбъект, ДополнительныеПараметры);
		СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(РезультатВыполнения.НоменклатураКСопоставлению,, ОповещениеООкончанииСопоставления); 
		Возврат;
		
	КонецЕсли;
	
	ОповеститьПользователяОРезультатахЗагрузкиДокументов(ДополнительныеПараметры);
	ВыполнитьОбработкуОповещения(ПараметрыЗагрузки.ОписаниеОповещенияОЗавершении);
	Оповестить("ВыполненаОбновлениеРегистраСостояниеДокументов");
	
КонецПроцедуры

Процедура ПослеОкончанияСопоставленияНоменклатурыПриЗагрузкеДокумента(РезультатСопоставления, ДополнительныеПараметры) Экспорт
	
	НетРезультатаСопоставления = Ложь;
	
	Если РезультатСопоставления = Неопределено Тогда
		НетРезультатаСопоставления = Истина;
	ИначеЕсли ТипЗнч(РезультатСопоставления) <> Тип("Массив") Тогда
		НетРезультатаСопоставления = Истина;
	ИначеЕсли РезультатСопоставления.Количество() = 0 Тогда 
		НетРезультатаСопоставления = Истина;
	КонецЕсли;
	
	Если НетРезультатаСопоставления Тогда
		
		ДополнительныеПараметры.РезультатЗагрузки.КоличествоНеЗагруженныхОшибка = ДополнительныеПараметры.РезультатЗагрузки.КоличествоНеЗагруженныхОшибка 
		                                                                          + ДополнительныеПараметры.РезультатЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры;
		ДополнительныеПараметры.РезультатЗагрузки.КоличествоТребуетсяСопоставлениеНоменклатуры = 0;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДополнительныеПараметры.РезультатЗагрузки.ДанныеНеЗагруженныхДокументовОшибка,
		                                             ДополнительныеПараметры.РезультатЗагрузки.ДанныеДокументовТребуетсяСопоставление);
		
		ОповеститьПользователяОРезультатахЗагрузкиДокументов(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбновления = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры.РезультатЗагрузки);
	ПараметрыОбновления.Вставить("РезультатСопоставленияНоменклатуры", РезультатСопоставления);
	ПараметрыОбновления.Вставить("УникальныйИдентификатор"           , ДополнительныеПараметры.УникальныйИдентификатор);
	
	ДлительнаяОперация =  ДокументыEDIИнтеграцияВызовСервера.РезультатОбновленияДокументовПослеСопоставленияНоменклатуры(ПараметрыОбновления);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.ФормаВладелец);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьОбновитьПрикладнойДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область ВариантУказанияНоменклатурыБЭД

Функция ВариантУказанияНоменклатуры(ФормаДокумента) 
	
	Возврат ФормаДокумента.ВариантУказанияНоменклатурыБЭД;
	
КонецФункции

#КонецОбласти

#Область СловарьИдентификаторов

Функция ИдентификаторПолныеДанныеДокумента()
	
	Идентификаторы = Новый Массив;
	
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников());
	Идентификаторы.Добавить(РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторСостояниеСинхронизации());
	
	Возврат СтрСоединить(Идентификаторы, ", ");
	
КонецФункции

Функция ИдентификаторКомандыИнициализироватьФорму() Экспорт
	
	Возврат "ИнициализироватьФорму";
	
КонецФункции

Функция ИдентификаторКомандыИнициализироватьТабличнуюЧастьСообщений() Экспорт 
	
	Возврат "ИнициализироватьТабличнуюЧастьСообщений";
	
КонецФункции

Функция ИдентификаторКомандыВывестиСтатичныеСообщенияПротоколаВзаимодействия() Экспорт
	
	Возврат "ВывестиСтатичныеСообщенияПротоколаВзаимодействия";
	
КонецФункции

Функция ИдентификаторСтатусаДоставкиОжидает() Экспорт
	Возврат "Wait";
КонецФункции

Функция ИдентификаторСтатусаДоставкиПолучен() Экспорт
	Возврат "Supply";
КонецФункции

Функция ИдентификаторСтатусаДоставкиПрочитан() Экспорт
	Возврат "Read";
КонецФункции

#КонецОбласти

#Область ПроверкаПовторногоПодключенияОрганизации

Процедура ПоказатьОповещениеОНеобходимостиПодключенияОрганизаций(Форма, Организации)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если Организации.Количество() = 1 Тогда
		Организация = Организации[0];
		ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Для организации %1 доступ к сервису 1С:Бизнес-сеть был приостановлен. Необходимо повторное подключение организации..'"),
			Организация);
		ДополнительныеПараметры.Вставить("Организация", Организация);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПодключенияОрганизации", ЭтотОбъект, ДополнительныеПараметры);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Для некоторых организаций (%1) доступ к сервису 1С:Бизнес-сеть был приостановлен. Необходимо повторное подключение организаций.'"),
			Организации.Количество());
		ДополнительныеПараметры.Вставить("Организации", Организации);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПодключенияОрганизаций", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ЗаголовокОповещения = НСтр("ru = 'Подключение к 1С:Бизнес-сеть'");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, ОписаниеОповещения, ТекстСообщения, БиблиотекаКартинок.БизнесСеть, СтатусОповещенияПользователя.Важное)
	
КонецПроцедуры

Процедура ОткрытьФормуПодключенияОрганизации(ДополнительныеПараметры) Экспорт
	
	БизнесСетьСлужебныйКлиент.ОткрытьФормуПодключенияОрганизации(ДополнительныеПараметры.Организация, ДополнительныеПараметры.Форма);
	
КонецПроцедуры

Процедура ОткрытьФормуПодключенияОрганизаций(ДополнительныеПараметры) Экспорт
	
	БизнесСетьСлужебныйКлиент.ОткрытьФормуРегистрацииОрганизаций(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
