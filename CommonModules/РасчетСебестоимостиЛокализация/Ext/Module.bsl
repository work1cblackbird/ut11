
#Область ПрограммныйИнтерфейс

// Выполняет локализованный расчет себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - начало периода (месяца), до которого надо выполнить расчет
//	МассивОрганизаций - Массив - организации, по которым надо выполнить расчет.
//	ВыполняетсяЗакрытиеМесяца - Булево - признак выполнения регламентных операций по закрытию месяца 
//	АвтоматическоеТестирование - Булево - признак выполнения автоматического тестирования себестоимости
//
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости.
//
Функция РассчитатьВсе(Знач ПериодРасчета, МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПериодРасчета) Тогда
		// Расчет будет выполнен в версии 2.1
		ПартионныйУчет.РассчитатьВсе(ПериодРасчета, МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

// Обновления стоимости товаров регламентным заданием.
//
// Параметры:
//	Период - Дата - дата начала расчета.
//	
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости.
//
Функция ПредварительныйРасчетСебестоимости(Период = Неопределено) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетСебестоимости); // проверка возможности запуска задания
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Дата = ТекущаяДатаСеанса();
	Иначе
		Дата = Период;
	КонецЕсли;
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода  = КонецМесяца(Дата);
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода) Тогда
		Если РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода) Тогда
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииПроизводства", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьСебестоимостьПроизводства", НачалоПериода, КонецПериода);
		ИначеЕсли РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода) Тогда
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииТоваров", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииПроизводства", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьСебестоимостьПроизводства", НачалоПериода, КонецПериода);
		КонецЕсли;
		
		ПараметрыЗапускаРасчетаСебестоимости = Новый Структура;
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("Дата", 					Дата);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("ПредварительныйРасчет", 	Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МассивОрганизаций", 		Неопределено);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("РегламентноеЗадание", 	Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МестоВызоваРасчета", 	"РасчетСебестоимостиКорректировкаСтоимости.ПредварительныйРасчетСебестоимости");
		
		СебестоимостьРассчитана = РасчетСебестоимостиПартионныйУчет21.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапускаРасчетаСебестоимости);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

#Область ЭтапыРасчета

// Вызов процедур локализованного расчета себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца.
//	
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости
//
Функция РассчитатьСебестоимость(ПараметрыРасчета) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	ФИФОСкользящаяОценкаВерсии21 = НЕ ПараметрыРасчета.ПредварительныйРасчет И НЕ ПараметрыРасчета.ПартионныйУчетВерсии22
	 	И ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка;
	Если ФИФОСкользящаяОценкаВерсии21 Тогда
		РасчетСебестоимостиПартионныйУчет21.РасчетСебестоимости_ФИФОСкользящаяОценкаВерсии21(ПараметрыРасчета);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

// Вызов процедур распределения материальных затрат в локализованной версии.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца
//
Процедура РаспределениеМатериальныхЗатрат(ПараметрыРасчета) Экспорт
	Если ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	//++ Локализация


	//-- Локализация
	Возврат;
КонецПроцедуры

// Вызов процедур распределения партий НДС в локализованной версии.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца
//	СтрокаСхемыРасчета - СтрокаТаблицыЗначений - Строка схемы расчета партий
//	НомерЭтапа - Число - Номер этапа распределения партий НДС
//
Процедура РаспределениеПартийНДС(ПараметрыРасчета, СтрокаСхемыРасчета, НомерЭтапа) Экспорт
	
	Если ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		
		//++ Локализация
		Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТСписаниеПостатейныхЗатрат") Тогда
			
			Запрос = Новый Запрос;
			РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
			
			Запрос.Текст = РасчетСебестоимостиНДС.ТекстОписаниеДанныхДляРаспределениеПартийНДСФИФОСкользящая();
			Запрос.Текст = РасчетСебестоимостиПрикладныеАлгоритмы.ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВТСписаниеПостатейныхЗатрат");
			
			Запрос.Выполнить();
			
		КонецЕсли;
		//-- Локализация
		Возврат;
		
	КонецЕсли;
	
	Если НомерЭтапа = 1 Тогда
		
		//++ Локализация
		// Этап 11
		// Формирует движения по регистрам:
		// - ДетализацияПартийТоваровДляНДСиУСН
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляУчетаНДСиУСН(ПараметрыРасчета);
		//-- Локализация
		
		// Этап 11.3
		// Формирует движения по регистрам:
		// - ДетализацияСебестоимостиПартииТоваров
		// - ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты
		// - ДетализацияСебестоимостиТоваровПостатейныеЗатраты
		РасчетСебестоимостиНДС.РаспределениеПартийНДСФИФОСкользящая(ПараметрыРасчета);
		
		// Формирует временные таблицы:
		// - ВТДопрасходыДляПостатейныхЗатрат
		// Формирует движения по регистрам:
		// - ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты
		РасчетСебестоимостиНДС.РаспределениеПартийНДСФИФОСкользящаяПоДопРасходам(ПараметрыРасчета);
		
	ИначеЕсли НомерЭтапа = 2 Тогда
		
		//++ Локализация
		// Формирует движения по регистрам:
		// - ДетализацияСебестоимостиТоваровПостатейныеЗатраты
		// - ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП
		РасчетСебестоимостиНДС.РаспределениеПартийНДСФИФОСкользящаяПоПартиямПрочихРасходов(ПараметрыРасчета);
		//-- Локализация
		
		// Этап 12.1
		// Формирует движения по регистрам:
		// - ПартииПрочихРасходов
		// - ПрочиеРасходы
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПартийПрочихРасходов(ПараметрыРасчета);
		//++ Локализация
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПрочихРасходов(ПараметрыРасчета);
		
		// Этап 12.2
		// Формирует движения по регистрам:
		// - ПартииНДСКРаспределению
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПартийНДСКРаспределению(ПараметрыРасчета);
		
		// Этап 13
		// Формирует документы РаспределениеНДС с движениями по регистрам:
		// - ПартииПрочихРасходов
		// - ПрочиеАктивыПассивы
		// - ПрочиеРасходы
		РасчетСебестоимостиНДС.РаспределениеНДСПоВидамНалогообложения(ПараметрыРасчета);
		//-- Локализация
		
	КонецЕсли;

	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета себестоимости
//	
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);

	//-- Локализация
	
КонецПроцедуры

// Дополняет перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров.
//	ОписаниеДокументов - Соответствие - Ключ - ОбъектМетаданных.
//
Процедура ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов) Экспорт
	//++ Локализация
	Значение = Истина;
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		
		Если РазныеПериоды Тогда
		КонецЕсли; 
	КонецЕсли;
	
	РасчетСебестоимостиНДС.ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов);

	//-- Локализация
	
КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт
	//++ Локализация
	РасчетСебестоимостиНДС.ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область ПроцедурыЭтапа_ЗаполнениеПартийВРегистреСебестоимостьТоваров

Функция ТекстЗапросаДляПартийТоваров() Экспорт
	
	ТекстЗапроса = ""
		//++ Локализация
		+ РасчетСебестоимостиПартионныйУчет21.ТекстЗапросаДляПартийТоваров()

		//-- Локализация
		+ "";
	Возврат ТекстЗапроса;	
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЭтапа10_РаспределениеДопРасходовМеждуПартиямиИТоварами

Функция ТекстТаможенныеДекларацииИПоступления() Экспорт // вт Декларации, КоличествоДеклараций
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК Поступление
		|ПОМЕСТИТЬ
		|	Декларации
		|;
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Поступление,
		|	1 КАК Количество
		|ПОМЕСТИТЬ
		|	КоличествоДеклараций
		|";
	//++ Локализация
	ТекстЗапроса = РасчетСебестоимостиПартионныйУчет21.ТекстТаможенныеДекларацииИПоступления();
	//-- Локализация
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти


#Область ПроцедурыЭтапов_Контекстные

// Используется для всех вызовов заполнения расчетной партии.
//
Процедура ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена) Экспорт
	
	Если ПартияЗаполнена Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	//++ Устарело_Производство21


	//-- Устарело_Производство21
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ВключитьИсключитьНДСВСтоимость

Процедура ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета, ТолькоПостатейные = Ложь) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - СебестоимостьТоваров
	// - ПрочиеРасходы
	Если НЕ ТолькоПостатейные Тогда
		РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета);
	КонецЕсли;
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимость24(ПараметрыРасчета, ТолькоПостатейные);
	
	//-- Локализация
	
	Если ПараметрыРасчета.ПартионныйУчетВерсии22 И НЕ ТолькоПостатейные
	 И РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДопрасходыДляПостатейныхЗатрат") Тогда
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляВключенияИсключенияНДСДопРасходовВСтоимость24(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - ВыручкаИСебестоимостьПродаж
	// - ПрочиеРасходы
	// - ДвиженияНоменклатураДоходыРасходы
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета);
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимостьПродаж24(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


#Область ВосстановленияДвижений

Функция ВосстановитьДвиженияДокументовПоРегиструНакопления(Регистратор) Экспорт
	ВыполненоВосстановлениеДвижений = Ложь;
	//++ Локализация
	
	ЭтоРегламентнаяОперация = Ложь;
	
	Если ЭтоРегламентнаяОперация
	 ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
		
		// Для этих документов частичное проведение по регистрам не поддерживается.
		ДокументОперации = Регистратор.ПолучитьОбъект();
		
		ДокументОперации.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		
		ДокументОперации.Записать(РежимЗаписиДокумента.Проведение);
		ВыполненоВосстановлениеДвижений = Истина;
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРегистров")
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетСебестоимостиТоваров") Тогда
		// Для этих документов проведение не предусматривается.
		ВыполненоВосстановлениеДвижений = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненоВосстановлениеДвижений;
КонецФункции


#КонецОбласти

#Область УниверсальныеПроцедурыОписанияДанныхМеханизма

// Возвращает перечень объектов метаданных, на основании данных которых выполняется расчет партий.
// В перечень не включаются объекты, которые являются одновременно и исходящими данными механизмов расчета партий и себестоимости.
//
// Параметры:
//	ВходящиеДанные - Соответствие - уже инициализированное хранилище для описания входящих данных
//	ТолькоТребующиеПерерасчета - Булево - если установлен, то будет возвращен перечень только тех данных,
//		изменение которых влечет за собой необходимость перерасчета партий и себестоимости
//		При изменении этих данных должна создаваться запись в регистре сведений ЗаданияКРасчетуСебестоимости.
//
Процедура ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета) Экспорт
	
	//++ Локализация
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		Если ТолькоТребующиеПерерасчета Тогда
			Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Значение);
		
		
		//++ НЕ ПУ21
		РасчетСебестоимостиПартионныйУчет21.ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета);
		// Добавим регистры партионного учета версии 2.1 (используются для формирования начальных остатков для версии 2.2).
		РасчетСебестоимостиПартионныйУчет21.НеиспользуемыеДанныеМеханизмаВерсии21(ВходящиеДанные, Значение);
		//-- НЕ ПУ21
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	КонецЕсли;
	
	Если НЕ ТолькоТребующиеПерерасчета Тогда 
		ВходящиеДанные.Вставить(Метаданные.Справочники.КатегорииЭксплуатации, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.ПартииТМЦВЭксплуатации, Значение);
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// Возвращает перечень регистров, обслуживаемых механизмом расчета партий.
//
// Параметры:
//	ИсходящиеДанные - Соответствие - имена регистров, обслуживаемых механизмом расчета партий.
//
Процедура ИсходящиеДанныеМеханизма(ИсходящиеДанные) Экспорт
	
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		//++ Локализация
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, 		Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4,	Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.НДСПредъявленный, 						Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению, 				Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров,        	Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП, Истина);
		//-- Локализация
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты, Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров,        			  Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты, Истина);
		//++ Локализация


		//-- Локализация
	Иначе
		//++ Локализация
		ПартионныйУчет.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
		//-- Локализация
	КонецЕсли;
	
КонецПроцедуры

// Возвращает перечень регистров, рассчитываемых механизмом партионного учета версии 2.2, и используемых при расчете себестоимости.
//
Процедура ИспользуемыеКэшиРегистровПартионногоУчета(ВходящиеДанные) Экспорт
	
	// Здесь перечислены регистры, которые (по И)
	// - рассчитываются механизмом партионного учета версии 2.2
	// - не рассчитываются механизмом расчета себестоимости
	// - являются входящими данными для механизма расчета себестоимости (используются кэши данных регистров)
	//
	// В случае, если выполняется отдельный запуск расчета себестоимости (не из партионного учета версии 2.2),
	// эти регистры не будут инициализированы - к их кэшам обращаться нельзя.
	//
	// Для этого делается следующее:
	// - перед началом расчета себестоимости "принудительно" инициализируются эти регистры (для того, чтобы сформировались их расчетные кэши)
	// - перед записью движений эти регистры удаляются из параметров расчета (записывать их не надо - движения по ним не формировались)
	
	//++ Локализация
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, 	  Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4,  Истина);

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсКорректировки

// Дополняет перечень регистров накопления, для которых предусмотрены корректировки.
//
// Параметры:
//	РегистрыСКорректировками - Массив - массив имен метаданных регистров с корректировками
//
Процедура ДополнитьРегистрыСКорректировкамиНачальныхОстатков(РегистрыСКорректировками) Экспорт
	//++ Локализация
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя());
	//-- Локализация
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты.ПолноеИмя());
КонецПроцедуры

// Дополняет описание корректировок регистров накопления.
//
// Параметры:
//	ТаблицаВидовКорректировок - ТаблицаЗначений - таблица с описанием корректировок регистров
//
Процедура ДополнитьОписаниеКорректировокНачальныхОстатков(ТаблицаВидовКорректировок) Экспорт
	//++ Локализация
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУправленческийУчетПоПравиламМФУ;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Имя;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаРегистрДетализацияСебестоимостиТоваров;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоВидамЗапасов;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеИзменениеПартнераВАналитикеУчетаНоменклатуры;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеДозаполнениеАналитикиУчетаПартийНДСиУСН2_4;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеОтключитьУправленческийУчетПоПравиламМФУ;
	НоваяСтрока.РодительскаяКорректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУправленческийУчетПоПравиламМФУ;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.ПартионныйУчетВерсии22.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаПереходаНаПартионныйУчетВерсии22.Имя;

	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеКорректировкаОстатковПартийПрочихРасходов;
	НоваяСтрока.ВозможноМногократноеВыполнение = Истина;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область УчетСебестоимости

// Дополняет перечень регистров, которые не используются при отключенном учете себестоимости.
//
// Параметры:
//	ПереченьРегистров - Соответствие - перечень регистров, которые не используются при отключенном учете себестоимости.
//
Процедура ДополнитьРегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости(ПереченьРегистров) Экспорт
	//++ Локализация
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию, Истина);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Тестирование

Процедура ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов) Экспорт
	
	//++ Локализация

	РасчетСебестоимостиНДС.ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов);
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов);
	//-- Локализация
	
	
КонецПроцедуры

Процедура ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса) Экспорт
	
	РасчетСебестоимостиНДС.ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса);

	//++ Локализация


	//-- Локализация
	
	
КонецПроцедуры

// Дополняет список этапов расчета.
// 
// Параметры:
// 	СписокЭтапов - СписокЗначений из Строка - 
Процедура ДополнитьЭтапыСПодготовкойДанныхДляСледующихЭтапов(СписокЭтапов) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДвижений

// Вызывается перед началом записи сформированных движений.
//
Процедура ПередЗаписьюСформированныхДвижений(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ПодготовитьДанныеДляФормированияЗаданийДляМеханизмовУчетаНДСПартионныйУчет22(ПараметрыРасчета);
	//-- Локализация
	
КонецПроцедуры

// Записывает сформированные новые движения.
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ) Тогда
		// Для отладки - расчет без изменения данных ИБ
		Возврат;
	КонецЕсли;
	
	РегистрыКонтроля = Новый Массив;
	
	РасчетСебестоимостиНДС.СформироватьЗаданияДляМеханизмовУчетаНДСПартионныйУчет22(ПараметрыРасчета);
	
	ДополнитьРегистрыКонтроляРегистрамиПоНДД(РегистрыКонтроля);
	
	//++ Локализация
	

	//-- Локализация
	
	РегистрыКонтроля = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РегистрыКонтроля);
	Если РегистрыКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета.ВариантРасчета <> Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый Массив;
	РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для каждого РегистрКонтроля Из РегистрыКонтроля Цикл
		
		ДанныеРегистра = Неопределено;
		ПараметрыРасчета.Движения.Свойство(РегистрКонтроля, ДанныеРегистра);
		Если ДанныеРегистра = Неопределено ИЛИ Не ДанныеРегистра.ЕстьИзмененныеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаИзмененийВЗаписываемыхДанных(ДанныеРегистра);
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	СформироватьЗаписиРегистровЗаданийПоНДД(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

//++ Локализация


//-- Локализация


Функция ТекстЗапросаИзмененийВЗаписываемыхДанных(ДанныеРегистра)
	
	Отбор = Новый Структура;
	ДополнительныеПараметры = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
	ДополнительныеПараметры.УсловияОтбораПосле = "Записи.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Записи.Активность И НЕ Записи.Сторно
	|		И Записи.Организация В(&МассивОрганизаций)";
	ДополнительныеПараметры.ИсключаемыеПоля.Вставить("Активность");
	// Будем использовать в качестве основы уже готовый метод, сравнивающий движения при записи регистров:
	ТекстыЗапросов = ЗакрытиеМесяцаСервер.ТекстыЗапросовДляПолученияТаблицыИзмененийРегистра(ДанныеРегистра.МетаданныеРегистра, Отбор, ДополнительныеПараметры);
	// Нас интересует последний запрос, где происходит сравнение, только уберем из него часть с уничтожением временной таблицы:
	ТекстыЗапросов = СтрРазделить(ТекстыЗапросов.ТекстВыборкиТаблицыИзменений, ";");
	ТекстЗапроса = ТекстыЗапросов.Получить(0);
	// У нас нет начальных записей (вместо этого используется обращение к данным регистра), однако у нас есть расчетные данные, будем использовать их при сравнении:
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачальныеЗаписи" + ДанныеРегистра.МетаданныеРегистра.Имя, ДанныеРегистра.ИмяТаблицыРасчетныхОборотовРегистра);
	// Вместо стандартного "ВидДвижения" используется поле "СлужебноеВидДвиженияПриход", вернем к стандартному:
	ТекстПереопределения = "ВЫБОР КОГДА СлужебноеВидДвиженияПриход ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КОНЕЦ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачальныеЗаписи.ВидДвижения", ТекстПереопределения);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область КэшированиеДанныхРегистров

// Добавляет имена регистров в массив.
//
// Параметры:
//	Регистры - Структура - имена регистров с записями конвертации данных
//
Процедура ДополнитьРегистрыСЗаписямиКонвертацииДанных(Регистры) Экспорт
	
	//++ Локализация
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.Имя);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКРасчетуСебестоимости

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиПартионныйУчет21.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СуммыДокументовВВалютахУчета

// Возвращает структуру регистров учета партий, для которых нужно обновить движения по данным взаиморасчетов.
//
// Возвращаемое значение:
//	Структура - имена регистров учета партий
//
Функция РегистрыУчетаПартий() Экспорт
	
	РегистрыПартий = Новый Структура();
	//++ Локализация
	РегистрыПартий.Вставить("ПартииТоваровОрганизаций", РегистрыНакопления.ПартииТоваровОрганизаций.СоздатьНаборЗаписей());
	РегистрыПартий.Вставить("ПартииПроизводственныхЗатрат", РегистрыНакопления.ПартииПроизводственныхЗатрат.СоздатьНаборЗаписей());
	//-- Локализация
	Возврат РегистрыПартий;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

Процедура Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область РежимыПартионногоУчета

// Определяет, используется ли партионный учет версии 2.2 на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак использования партионного учета версии 2.2 на указанную дату
//	Если дата не указана, то определяется сам факт использования партионного учета версии 2.2.
//
Функция ПартионныйУчетВерсии22(Дата) Экспорт
	
	ВключенПартионныйУчетВерсии22 = Истина;
	//++ Локализация
	Если НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22") Тогда
		Возврат Ложь; // партионный учет 2.2 выключен
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно установлены функциональные опции партионного учета'", ОбщегоНазначения.КодОсновногоЯзыка()); // такого быть не должно - обе опции включаются синхронно
	КонецЕсли;
	
	ВключенПартионныйУчетВерсии22 =
		(Дата = Неопределено ИЛИ Дата >= ДатаПереходаНаПартионныйУчетВерсии22());
	
	//-- Локализация
	Возврат ВключенПартионныйУчетВерсии22;
	
КонецФункции

// Определяет "старый" режим партионного учета, до перехода на партионный учет версии 2.2.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево, Неопределено - признак использования партионного учета на указанную дату
// 		Если параметр Дата не передан, или Дата находится в периоде действия партионного учета версии 2.2,
//		то возвращается значение Неопределено - в такой проверке нет смысла.
//
Функция ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата) Экспорт
	
	БылВключенПартионныйУчет = Неопределено;
	//++ Локализация
	Если НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"); // перехода на версию 2.2 не было - проверяем стандартно
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно установлены функциональные опции партионного учета'", ОбщегоНазначения.КодОсновногоЯзыка()); // такого быть не должно - обе опции включаются синхронно
	ИначеЕсли Дата = Неопределено ИЛИ Дата >= РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22() Тогда
		Возврат Неопределено; // нет смысла проверять режим "старого" партионного учета, т.к. используется партионный учет версии 2.2
	КонецЕсли;
	
	// До даты перехода на версию 2.2 партионный учет версии 2.1 мог быть как включен, так и выключен.
	// Информация об этом не сохранилась, т.к. константа ИспользоватьПартионныйУчет при переходе установилась в значение Истина.
	// Наиболее достоверный способ узнать "старый" режим партионного учета - определить его по данным ИБ.
	// Например, если партионный учет не использовался, то не должно быть движений по регистру партий товаров.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК БылВключенПартионныйУчет
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Т";
	
	БылВключенПартионныйУчет = НЕ Запрос.Выполнить().Пустой();
	//-- Локализация
	Возврат БылВключенПартионныйУчет;
	
КонецФункции

// Возвращает дату перехода на партионный учет версии 2.2.
// Дата может быть пустой - значит партионный учет версии 2.2 включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца перехода на партионный учет версии 2.2.
//
Функция ДатаПереходаНаПартионныйУчетВерсии22() Экспорт
	
	ДатаПереходаНаПартионныйУчетВерсии22 = Дата(1,1,1);
	//++ Локализация
	ДатаПереходаНаПартионныйУчетВерсии22 = НачалоМесяца(Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить());
	//-- Локализация
	Возврат ДатаПереходаНаПартионныйУчетВерсии22;
	
КонецФункции

#КонецОбласти

#Область УправленческийУчетОрганизаций

// Определяет, включен ли управленческий учет организаций на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить ведение управленческого учета организаций.
//
// Возвращаемое значение:
//	Булево - признак использования управленческого учета организаций на указанную дату
//	Если дата не указана, то определяется сам факт включения партионного учета организаций.
//
Функция УправленческийУчетОрганизаций(Дата) Экспорт
	
	ВключенУправленческийУчетОрганизаций = Истина;
	//++ Локализация
	ВключенУправленческийУчетОрганизаций = ПолучитьФункциональнуюОпцию("ВестиУправленческийУчетОрганизаций")
		И ПартионныйУчетВерсии22(Дата)
		И (Дата = Неопределено
			ИЛИ Дата >= ДатаНачалаВеденияУправленческогоУчетаОрганизаций());
	//-- Локализация
	Возврат ВключенУправленческийУчетОрганизаций;
	
КонецФункции

// Возвращает дату начала ведения управленческого учета организаций.
// Дата может быть пустой - значит управленческий учет организаций включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца ведения управленческого учета организаций
//
Функция ДатаНачалаВеденияУправленческогоУчетаОрганизаций() Экспорт
	
	ДатаНачалаВеденияУправленческогоУчетаОрганизаций = Дата(1,1,1);
	//++ Локализация
	ДатаНачалаВеденияУправленческогоУчетаОрганизаций = НачалоМесяца(Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Получить());
	//-- Локализация
	Возврат ДатаНачалаВеденияУправленческогоУчетаОрганизаций;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Дополняет текст запроса отчета "Ведомость по партиям товаров" данными для партионного учета 2.1.
//
// Параметры:
//	ТекстЗапроса - Строка - Исходный текст запроса
//
Процедура ВедомостьПоПартиямТоваров_ДополнитьТекстЗапроса(ТекстЗапроса) Экспорт
	//++ Локализация
	РасчетСебестоимостиПартионныйУчет21.ВедомостьПоПартиямТоваров_ДополнитьТекстЗапроса(ТекстЗапроса);
	//-- Локализация
КонецПроцедуры


#КонецОбласти

#Область НДД

#Область РаспределениеПрочихЗатрат

// Текст остатки прочих расходов НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ТекстОстаткиПрочихРасходовНДД() Экспорт
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ ПЕРВЫЕ 0
	|		//РежимОтладки ""ТекстОстаткиПрочихРасходов"",
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|		НЕОПРЕДЕЛЕНО,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0 КАК РасчетноеКоличество,
	|		ЛОЖЬ КАК РасчетнаяСумма,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст остатки прочих расходов ОВЗ НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ТекстОстаткиПрочихРасходовОВЗНДД() Экспорт
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ ПЕРВЫЕ 0
	|		//РежимОтладки ""ТекстОстаткиПрочихРасходовОВЗ"" КАК ЗапросИсточник,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)  КАК НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|		НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|		0 КАК Сумма,
	|		0 КАК СуммаБезНДС,
	|		0 КАК СуммаРегл,
	|		0 КАК ПостояннаяРазница,
	|		0 КАК ВременнаяРазница,
	|		0 КАК СуммаНДД,
	|		0 КАК СуммаУпр,
	|		0 КАК СуммаРеглРасход,
	|		0 КАК ПостояннаяРазницаРасход,
	|		0 КАК ВременнаяРазницаРасход,
	|		0 КАК СуммаНДДРасход,
	|		0 КАК РасчетноеКоличество,
	|		ЛОЖЬ КАК РасчетнаяСумма,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДляСвязи,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходовДляСвязи
	|";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст движения прочих расходов из ОВЗ НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ТекстДвиженияПрочихРасходовИзОВЗНДД() Экспорт
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ ПЕРВЫЕ 0
	|		//РежимОтладки ""ТекстДвиженияПрочихРасходовИзОВЗ"" КАК ЗапросИсточник,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)  КАК НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|		НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|		0 КАК Сумма,
	|		0 КАК СуммаБезНДС,
	|		0 КАК СуммаРегл,
	|		0 КАК ПостояннаяРазница,
	|		0 КАК ВременнаяРазница,
	|		0 КАК СуммаНДД,
	|		0 КАК СуммаУпр,
	|		0 КАК СуммаРеглРасход,
	|		0 КАК ПостояннаяРазницаРасход,
	|		0 КАК ВременнаяРазницаРасход,
	|		0 КАК СуммаНДДРасход,
	|		0 КАК РасчетноеКоличество,
	|		ЛОЖЬ КАК РасчетнаяСумма,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДляСвязи,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходовДляСвязи
	|	
	|";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст транзит расходов между ОВЗ по графу НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ТекстТранзитРасходовМеждуОВЗПоГрафуНДД() Экспорт
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ ПЕРВЫЕ 0
	|		//РежимОтладки ""ТекстТранзитРасходовМеждуОВЗПоГрафу"" КАК ЗапросИсточник,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)  КАК НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|		НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|		0 КАК Сумма,
	|		0 КАК СуммаБезНДС,
	|		0 КАК СуммаРегл,
	|		0 КАК ПостояннаяРазница,
	|		0 КАК ВременнаяРазница,
	|		0 КАК СуммаНДД,
	|		0 КАК СуммаУпр,
	|		0 КАК СуммаРеглРасход,
	|		0 КАК ПостояннаяРазницаРасход,
	|		0 КАК ВременнаяРазницаРасход,
	|		0 КАК СуммаНДДРасход,
	|		0 КАК РасчетноеКоличество,
	|		ЛОЖЬ КАК РасчетнаяСумма,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДляСвязи,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходовДляСвязи
	|	
	|";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса статьи к распределению в НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса 
Функция ТекстЗапросаСтатьиКРаспределениюНДД() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК Ссылка,
		|	ЛОЖЬ КАК Предопределенный,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходов
		|ПОМЕСТИТЬ СтатьиРасходовКРаспределениюНДД
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса ОВЗ к распределению в НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса 
Функция ТекстОВЗКРаспределениюНДД() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	Реквизиты.ОВЗ КАК ОВЗ
		|
		|ПОМЕСТИТЬ ОВЗКРаспределениюНДД
		|ИЗ
		|	ВтОВЗ КАК Реквизиты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОВЗ
		|";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получить настройки распределения по документу.
// 
// Параметры:
//  ДокументРаспределения - ДокументОбъект.РаспределениеПрочихЗатрат - Документ распределения прочих затрат
//  НаОВЗ - Булево - Признак распределения на ОВЗ
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить настройки распределения по документу:
// * ВариантРаспределенияРасходовНДД - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов для НДД
// * ПравилоРаспределенияРасходовНДД - СправочникСсылка.ПравилаРаспределенияРасходов - Правило распределения расходов для НДД
Функция ПолучитьНастройкиРаспределенияПоДокументу(ДокументРаспределения, НаОВЗ) Экспорт
	
	Настройки = Неопределено;
	
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ПрочиеРасходы

// Модификация текста запроса для формирования таблицы для записи в регистр "ПрочиеРасходы".
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИмяТаблицы - Строка - Имя основной таблицы запроса
//  ДополнительныеПоля - Строка -  Дополнительные поля, через запятую
//  ВозможныРазныеПериодыВДвижениях - Булево - определяет где хранятся параметры партионного учета, в параметрах запроса или во временной таблице ВТПараметрыПартионногоУчетаДляПроведения
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ИзменитьТекстЗапросаПрочиеРасходы(ТекстЗапроса, ИмяТаблицы, ДополнительныеПоля = "", ВозможныРазныеПериодыВДвижениях = Ложь) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	Если ЗначенияПоУмолчанию Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСуммаНДД", "ЛОЖЬ"); //@Query-part
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаНДД",  "0"); //@Query-part
	Иначе
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область КорректировкаСтоимости

// Изменить текст суммы прочих расходов.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ПараметрыРасчета - Структура - Параметры расчета
// 
// Возвращаемое значение:
//  Строка - ТекстЗапроса
Функция ИзменитьТекстСуммыПрочихРасходов(ТекстЗапроса, ПараметрыРасчета = Неопределено) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	Если ЗначенияПоУмолчанию Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаНДД", "0");
	Иначе
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЭтапа_ФормированиеДвиженийПоФактическимРасходамНДД

// Формирует движения по фактическим расходам НДД по себестоимости товаров и трудозатратам НЗП.
// Вызывается на этапе см. РасчетСебестоимостиКорректировкаСтоимости.СформироватьДвиженияПоРегистрам .
// 
// Параметры:
//  ПараметрыРасчета - Структура - Параметры расчета.
Процедура СформироватьДвиженияПоФактическимРасходамНДДпоСебестоимостиТоваровИТрудозатратамНЗП(ПараметрыРасчета) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

// Формирует движения по фактическим расходам НДД по прочим расходам.
// Вызывается на этапе см. РасчетСебестоимостиКорректировкаСтоимости.СформироватьДвиженияПоРегистрамФинансовыйРезультат .
// 
// Параметры:
//  ПараметрыРасчета - Структура - Параметры расчета.
Процедура СформироватьДвиженияПоФактическимРасходамНДДпоПрочимРасходам(ПараметрыРасчета) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

#КонецОбласти

#Область УчетПоНДД

// Текст запроса настроек по НДД.
// В зависимости от параметров возвращает запросы с разными наборами данных.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы с данными по прочим расходам.
//  ИсточникВызова - Строка - Описание источника вызова.
//  ПараметрыРасчета - Структура - Параметры расчета.
//  ВозможныРазныеПериодыВДвижениях - Булево - определяет где хранятся параметры партионного учета, в параметрах запроса или во временной таблице ВТПараметрыПартионногоУчетаДляПроведения
// 
// Возвращаемое значение:
//  Строка - Текст запроса настройки распределения статей НДД.
Функция ТекстЗапросаНастроекНДД(ИмяВременнойТаблицы, ИсточникВызова, ПараметрыРасчета = Неопределено, ВозможныРазныеПериодыВДвижениях = Ложь) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	
	// При добавлении нового источника вызова, нужно обязательно проверить методы:
	// - см. ИнициализироватьПараметрыПолученияДанныхПоНДД
	// - см. ИзменитьНаборПараметровЗапросаНастроекНДДДляПроведенияДокументов
	// и при необходимости дописать в них новые условия.
	ПараметрыПолученияДанныхПоНДД = ИнициализироватьПараметрыПолученияДанныхПоНДД(ИмяВременнойТаблицы, ИсточникВызова);
	
	Если ЗначенияПоУмолчанию Тогда
		ТекстЗапроса = ТекстОписаниеДанныхНастроекНДД(ПараметрыПолученияДанныхПоНДД, ИсточникВызова);
		
		ПодставитьВЗапросеТипОбъектаРаздельногоУчетаНДД(ТекстЗапроса, "Расходы");
		ИзменитьНаборПараметровЗапросаНастроекНДДДляПроведенияДокументов(ТекстЗапроса, ИсточникВызова);
	Иначе
	КонецЕсли;
	
	Возврат ТекстЗапроса; // Строка
	
КонецФункции

// Инициализировать параметры получения данных по НДД.
// 
// Параметры:
//  ИмяВременнойТаблицыИсточника - Строка - Имя временной таблицы источника
//  ИсточникВызова - Строка - Источник вызова
// 
// Возвращаемое значение:
//  Структура - Инициализировать параметры получения данных по НДД:
// * ИмяВременнойТаблицыИсточника - Строка - мя таблицы с данными по расходам
// * НужнаТаблицаПоОВЗ - Булево - Необходимость дополнительной ВТ по ОВЗ
// * ТолькоУчетнаяПолитика - Булево - Необходимость получения только базовых настроек ФО и настроек налогооблажения
// * ТолькоНастройкиПризнания - Булево -  Необходимость получения только базовых настроек признания (факт учета для НДД по аналитикам)
// * НастройкиПризнанияПоКлючамАналитикиУчетаНоменклатуры - Булево -  Необходимость получения настроек признания в разрезе ключей аналитики учета номенклатуры
// * ПодменаНастроекСтатейНаОВЗДляРаспределения - Булево - Необходимость подмены вариантов и правил из статей на данные по ОВЗ
// * ПравилаРаспределения - Булево - Необходимость получения правил распределения
// * УничтожаемыеВТ - Строка - Список ВТ для уничтожения
Функция ИнициализироватьПараметрыПолученияДанныхПоНДД(ИмяВременнойТаблицыИсточника, ИсточникВызова) Экспорт
	
	ПараметрыПолученияДанныхПоНДД = Новый Структура;
	ПараметрыПолученияДанныхПоНДД.Вставить("ИмяВременнойТаблицыИсточника",	ИмяВременнойТаблицыИсточника); // Имя таблицы с данными по расходам
	ПараметрыПолученияДанныхПоНДД.Вставить("НужнаТаблицаПоОВЗ",				Ложь); // Необходимость дополнительной ВТ по ОВЗ
	ПараметрыПолученияДанныхПоНДД.Вставить("ТолькоУчетнаяПолитика",			Ложь); // Необходимость получения только базовых настроек учета по НДД (ФО и настройки налогооблажения)
	ПараметрыПолученияДанныхПоНДД.Вставить("ТолькоНастройкиПризнания",		Ложь); // Необходимость получения только базовых настроек признания (факт учета для НДД по аналитикам)
	ПараметрыПолученияДанныхПоНДД.Вставить("НастройкиПризнанияПоКлючамАналитикиУчетаНоменклатуры",	Ложь); // Необходимость получения настроек признания в разрезе ключей аналитики учета номенклатуры
	ПараметрыПолученияДанныхПоНДД.Вставить("ПодменаНастроекСтатейНаОВЗДляРаспределения",			Ложь); // Необходимость подмены вариантов и правил из статей на данные по ОВЗ. Только для документ распределения прочих затрат
	ПараметрыПолученияДанныхПоНДД.Вставить("ПравилаРаспределения",			Ложь); // Необходимость получения правил распределения
	ПараметрыПолученияДанныхПоНДД.Вставить("УничтожаемыеВТ",				""); // Список ВТ для уничтожения в конце основного запроса
	ПараметрыПолученияДанныхПоНДД.Вставить("СтатьяРасходовДляСвязи",		"СтатьяРасходовДляСвязи"); // Имя реквизита статьи расходов для анализа расходов по ОВЗ
	
	УничтожаемыеВТ = Новый Массив; // Массив из Строка
	УничтожаемыеВТ.Добавить("УчетнаяПолитикаПоНДД");
	УничтожаемыеВТ.Добавить("ОбъектыРаздельногоУчетаНДДПоОрганизациям");
	УничтожаемыеВТ.Добавить("НастройкиПризнанияРасходовНДДПредварительные");
	УничтожаемыеВТ.Добавить("НастройкиПризнанияРасходовНДД");
	УничтожаемыеВТ.Добавить("ПредварительныеНастройкиРаспределенияСтатейНДД");
	
	// См. Документы.РаспределениеПрочихЗатрат.ТекстЗапросаПоступилоПрочихРасходов
	Если ИсточникВызова = "РаспределениеПрочихЗатрат_ТекстЗапросаПоступилоПрочихРасходов" Тогда
		
		ПараметрыПолученияДанныхПоНДД.ПодменаНастроекСтатейНаОВЗДляРаспределения	= Истина;
		ПараметрыПолученияДанныхПоНДД.ПравилаРаспределения			= Истина;
		ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ				= Истина;
		
	// См. РасчетСебестоимостиКорректировкаСтоимости.ТекстВтНезавершенноеПроизводство
	ИначеЕсли ИсточникВызова = "РасчетСебестоимостиКорректировкаСтоимости_ТекстВтНезавершенноеПроизводство" 
		// См. ИзменитьТекстСуммыПрочихРасходов
		ИЛИ ИсточникВызова = "ИзменитьТекстСуммыПрочихРасходов" Тогда
		
		ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ				= Истина;
		
	// См. РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы
	ИначеЕсли ИсточникВызова = "ПрочиеРасходы_ТекстЗапросаТаблицаПрочиеРасходы"
		// См. РасчетСебестоимостиПостатейныеЗатраты.ТекстДвижениеПриходОтклоненийВСтоимостиПрочиеРасходы
		ИЛИ ИсточникВызова = "РасчетСебестоимостиПостатейныеЗатраты_ТекстДвижениеПриходОтклоненийВСтоимостиПрочиеРасходы"
		// См. Документы.ОтражениеЗарплатыВФинансовомУчете.ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства
		ИЛИ ИсточникВызова = "ОтражениеЗарплатыВФинансовомУчете_ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства"
		// См. Документы.ПрочиеДоходыРасходы.ТекстЗапросаВтДанныеРасходы
		ИЛИ ИсточникВызова = "ПрочиеДоходыРасходы_ТекстЗапросаВтДанныеРасходы"
		// См. Документы.РаспределениеРасходовБудущихПериодов.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы
		ИЛИ ИсточникВызова = "РаспределениеРасходовБудущихПериодов_ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы"
		// См. Документы.ВводОстатковПрочиеРасходы.ТекстЗапросаВтДанныеРасходы
		ИЛИ ИсточникВызова = "ВводОстатковПрочиеРасходы_ТекстЗапросаВтДанныеРасходы" Тогда
		
		ПараметрыПолученияДанныхПоНДД.ТолькоУчетнаяПолитика			= Истина;
		
		УничтожаемыеВТ = Новый Массив; // Массив из Строка
		
	// См. РасчетСебестоимостиКорректировкаСтоимости.СкорректироватьСтоимостьСписанияЗапасов
	ИначеЕсли ИсточникВызова = "ТекстЗапросаДляРешенияСЛУ_СтоимостьНДД"
		// См. РасчетСебестоимостиПостатейныеЗатраты.ТекстБазаРаспределенияДолейПоЭтапам
		ИЛИ ИсточникВызова = "РасчетСебестоимостиПостатейныеЗатраты_ТекстБазаРаспределенияДолейПоЭтапам"
		// См. РасчетСебестоимостиТрудозатраты.ТекстЗапросаДляРаспределенияТрудозатратНаВыпуск
		ИЛИ ИсточникВызова = "РасчетСебестоимостиТрудозатраты_ТекстЗапросаДляРаспределенияТрудозатратНаВыпуск"
		// См. РасчетСебестоимостиПостатейныеЗатраты.РасчетТранзитовОВЗ
		ИЛИ ИсточникВызова = "РасчетСебестоимостиПостатейныеЗатраты_РасчетТранзитовОВЗ"
		// См. ТекстОВЗКРаспределениюНДД
		ИЛИ ИсточникВызова = "ТекстОВЗКРаспределениюНДД"
		// См. Документы.РаспределениеВозвратныхОтходов.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы
		ИЛИ ИсточникВызова = "РаспределениеВозвратныхОтходов_ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы"  Тогда
		
		ПараметрыПолученияДанныхПоНДД.ТолькоНастройкиПризнания		= Истина;
		
		УничтожаемыеВТ = Новый Массив; // Массив из Строка
		УничтожаемыеВТ.Добавить("УчетнаяПолитикаПоНДД");
		УничтожаемыеВТ.Добавить("ОбъектыРаздельногоУчетаНДДПоОрганизациям");
		УничтожаемыеВТ.Добавить("НастройкиПризнанияРасходовНДДПредварительные");
		 
	// См. РасчетСебестоимостиПроведениеДокументов.ДобавитьТекстЗапросаНастроекПризнанияНДД
	ИначеЕсли ИсточникВызова = "РасчетСебестоимостиПроведениеДокументов_ДобавитьТекстЗапросаНастроекПризнанияНДД"
		// См. ТекстЗапросаДляРешенияСЛУ_СтоимостьНДД
		ИЛИ ИсточникВызова = "РасчетСебестоимостиКорректировкаСтоимости_СкорректироватьСтоимостьСписанияЗапасов" Тогда
		
		ПараметрыПолученияДанныхПоНДД.ТолькоНастройкиПризнания		= Истина;
		ПараметрыПолученияДанныхПоНДД.НастройкиПризнанияПоКлючамАналитикиУчетаНоменклатуры = Истина;
		
		УничтожаемыеВТ = Новый Массив; // Массив из Строка
		УничтожаемыеВТ.Добавить("УчетнаяПолитикаПоНДД");
		УничтожаемыеВТ.Добавить("ОбъектыРаздельногоУчетаНДДПоОрганизациям");
		УничтожаемыеВТ.Добавить("НастройкиПризнанияРасходовНДДПредварительные");
		УничтожаемыеВТ.Добавить("ОбъектыРаздельногоУчетаНДДПоАналитикеУчетаНоменклатуры");
		 
	// См. РасчетСебестоимостиНДД.ТекстЗапросаПодготовкаДанныхДляРаспределенияФактическихРасходовНДДпоСебестоимостиТоваровИТрудозатратамНЗП
	ИначеЕсли ИсточникВызова = "ТекстЗапросаПодготовкаДанныхДляРаспределенияФактическихРасходовНДДпоСебестоимостиТоваровИТрудозатратамНЗП" Тогда
		
		ПараметрыПолученияДанныхПоНДД.ТолькоНастройкиПризнания		= Истина;
		ПараметрыПолученияДанныхПоНДД.НастройкиПризнанияПоКлючамАналитикиУчетаНоменклатуры = Истина;
		
		// В этом варианте нужно сохранить Вт НастройкиПризнанияРасходовНДД
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			УничтожаемыеВТ, "НастройкиПризнанияРасходовНДД");
		
	// См. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьВспомогательныеВременныеТаблицы
	ИначеЕсли  ИсточникВызова = "РасчетСебестоимостиПрикладныеАлгоритмы_ИнициализироватьВспомогательныеВременныеТаблицы" Тогда
		
		ПараметрыПолученияДанныхПоНДД.ТолькоНастройкиПризнания		= Истина;
		
		// Нужно сохранить все созданные ВТ.
		УничтожаемыеВТ = Новый Массив; // Массив из Строка
		
	// См. ТекстЗапросаПодготовкаДанныхДляРаспределенияФактическихРасходовНДДпоПрочимРасходам
	ИначеЕсли ИсточникВызова = "ТекстЗапросаПодготовкаДанныхДляРаспределенияФактическихРасходовНДДпоПрочимРасходам" Тогда
		
		ПараметрыПолученияДанныхПоНДД.ТолькоНастройкиПризнания		= Истина;
		
		// В этом варианте нужно сохранить Вт НастройкиПризнанияРасходовНДД
		УничтожаемыеВТ = Новый Массив; // Массив из Строка
		УничтожаемыеВТ.Добавить("УчетнаяПолитикаПоНДД");
		УничтожаемыеВТ.Добавить("ОбъектыРаздельногоУчетаНДДПоОрганизациям");
		УничтожаемыеВТ.Добавить("НастройкиПризнанияРасходовНДДПредварительные");
		УничтожаемыеВТ.Добавить("ОбъектыРаздельногоУчетаНДДПоАналитикеУчетаНоменклатуры");
		
	// См. РасчетСебестоимостиПостатейныеЗатраты.ТекстПартииДляОтнесенияРасходов
	ИначеЕсли ИсточникВызова = "РасчетСебестоимостиПостатейныеЗатраты_ТекстПартииДляОтнесенияРасходов" Тогда
		
		ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ				= Истина;
		
		// В этом варианте нужно сохранить Вт НастройкиПризнанияРасходовНДД
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			УничтожаемыеВТ, "НастройкиПризнанияРасходовНДД");
	
	// См. ПолучитьНастройкиРаспределенияПоДокументу
	ИначеЕсли ИсточникВызова = "ПолучитьНастройкиРаспределенияПоДокументу" Тогда
		ПараметрыПолученияДанныхПоНДД.ПравилаРаспределения			= Истина;
	// См. Документы.РаспределениеПрочихЗатрат.ПолучитьНастройкиРаспределенияСтатейРасходов
	ИначеЕсли ИсточникВызова = "РаспределениеПрочихЗатрат_ПолучитьНастройкиРаспределенияСтатейРасходов" Тогда
		ПараметрыПолученияДанныхПоНДД.ПравилаРаспределения			= Истина;
		ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ				= Истина;
		ПараметрыПолученияДанныхПоНДД.ПодменаНастроекСтатейНаОВЗДляРаспределения	= Истина;
		ПараметрыПолученияДанныхПоНДД.СтатьяРасходовДляСвязи		= "СтатьяРасходов";
	Иначе
		// Используются настройки по умолчанию
	КонецЕсли;
	
	Если ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ Тогда
		УничтожаемыеВТ.Добавить("ПредварительныеНастройкиРаспределенияОВЗНДД");
	КонецЕсли;
	СписокУничтожаемыхВТ = СтрСоединить(УничтожаемыеВТ, ",");
	ПараметрыПолученияДанныхПоНДД.УничтожаемыеВТ = СписокУничтожаемыхВТ;
	
	Возврат ПараметрыПолученияДанныхПоНДД;
	
КонецФункции

// Изменить набор параметров запроса настроек НДД.
// По умолчанию параметры заданы для механизмов закрытия месяца, но если вызов для проведения документов, то нужно заменить параметры.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИсточникВызова - Строка - Источник вызова
// 
// Возвращаемое значение:
//  Строка - Изменить набор параметров запроса настроек НДД
Функция ИзменитьНаборПараметровЗапросаНастроекНДДДляПроведенияДокументов(ТекстЗапроса, ИсточникВызова = "") Экспорт
	
	// См. РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы
	Если ИсточникВызова = "ПрочиеРасходы_ТекстЗапросаТаблицаПрочиеРасходы"
		// См. РасчетСебестоимостиПроведениеДокументов.ДобавитьТекстЗапросаНастроекПризнанияНДД
		Или ИсточникВызова = "РасчетСебестоимостиПроведениеДокументов_ДобавитьТекстЗапросаНастроекПризнанияНДД"
		// См. Документы.РаспределениеПрочихЗатрат.ПолучитьНастройкиРаспределенияСтатейРасходов
		Или ИсточникВызова = "РаспределениеПрочихЗатрат_ПолучитьНастройкиРаспределенияСтатейРасходов"
		// См. Документы.ОтражениеЗарплатыВФинансовомУчете.ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства
		Или ИсточникВызова = "ОтражениеЗарплатыВФинансовомУчете_ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства"
		// См. Документы.ПрочиеДоходыРасходы.ТекстЗапросаВтДанныеРасходы
		Или ИсточникВызова = "ПрочиеДоходыРасходы_ТекстЗапросаВтДанныеРасходы"
		// См. Документы.РаспределениеРасходовБудущихПериодов.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы
		Или ИсточникВызова = "РаспределениеРасходовБудущихПериодов_ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы"
		// См. Документы.ВводОстатковПрочиеРасходы.ТекстЗапросаВтДанныеРасходы
		Или ИсточникВызова = "ВводОстатковПрочиеРасходы_ТекстЗапросаВтДанныеРасходы"
		// См. Документы.РаспределениеВозвратныхОтходов.ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы
		Или ИсточникВызова = "РаспределениеВозвратныхОтходов_ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода", "&Период"); //@Query-part
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоВсемОрганизациям", "ЛОЖЬ"); //@Query-part
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МассивОрганизаций", "&Организация"); //@Query-part
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получить функциональную опцию учет по НДД.
// 
// Возвращаемое значение:
//  Булево - Истина, если учет по НДД включен
Функция ПолучитьФункциональнуюОпциюУчетПоНДД() Экспорт
	
	УчетПоНДД = Ложь;
	
	Возврат УчетПоНДД;
	
КонецФункции

// Проверить ведение учета по НДД.
// Проверяются: ФО УчетПоНДД, константа ДатаНачалаУчетаПоНДД, признак ПлательщикНДД у настроек налогообложения организации.
// 
// Параметры:
//  Период - Дата - Дата на которую необходимо проверить ведение учета по НДД.
//  Организация - СправочникСсылка.Организации, Неопределено - Организация
// 
// Возвращаемое значение:
//  Булево - Истина, если учет по НДД включен
Функция ВедетсяУчетПоНДД(Период, Организация = Неопределено) Экспорт
	
	ВедетсяУчетПоНДД = Ложь;
	
	Возврат ВедетсяУчетПоНДД;
	
КонецФункции

// Проверить признание в расходах НДД для статьи расходов
// 
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Статья расходов для проверки
// 
// Возвращаемое значение:
//  Булево - Истина, если статья признается в расходах НДД
Функция СтатьяРасходовПризнаетсяВРасходахНДД(СтатьяРасходов) Экспорт
	
	СтатьяПризнаетсяВНДД = Ложь;
	
	Возврат СтатьяПризнаетсяВНДД;
	
КонецФункции

// Подменить тип объекта раздельного учета НДД в запросе.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИменаПараметров - Строка - Имена параметров, по которым есть соединения временных таблиц НДД, через запятую без пробелов. Для случаев, когда у обоих объектов таблица источник одинаковая
//  ИмяВтДляПодразделения - Строка - Имена временных таблиц для подразделений, если по разным объектам они отличаются
//  ИмяВтДляНаправленияДеятельности - Строка - Имена временных таблиц для направлений деятельности, если по разным объектам они отличаются
Процедура ПодставитьВЗапросеТипОбъектаРаздельногоУчетаНДД(ТекстЗапроса, ИменаПараметров, ИмяВтДляПодразделения = "", ИмяВтДляНаправленияДеятельности = "") Экспорт
	
	ПодстановкаПоУмолчанию = Истина;
	
	Если ПодстановкаПоУмолчанию Тогда
		СписокЗамен = Новый Соответствие;
		
		СписокЗамен.Вставить("&ПустаяСсылкаНаОбъектРаздельногоУчетаНДД", //@Query-part 
									"ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)"); //@Query-part
		
		СписокПараметров = СтрРазделить(ИменаПараметров, ",");
		
		// Если используются разные таблицы, то замена будет только 1
		Если ЗначениеЗаполнено(ИмяВтДляНаправленияДеятельности) И ЗначениеЗаполнено(ИмяВтДляПодразделения) Тогда
			СписокЗамен.Вставить("&ТаблицаИсточник_ОбъектРаздельногоУчетаНДД", //@Query-part 
									"НЕОПРЕДЕЛЕНО"); //@Query-part
		// Для одинаковых таблиц источников замен может быть несколько
		Иначе
			Для Каждого ИмяПараметра Из СписокПараметров Цикл
				СписокЗамен.Вставить(СтрШаблон("&%1", ИмяПараметра), //@Query-part 
									"НЕОПРЕДЕЛЕНО"); //@Query-part
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Замена Из СписокЗамен Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Замена.Ключ, Замена.Значение);
		КонецЦикла;
	Иначе
	КонецЕсли;
КонецПроцедуры

// Дополняет массив блокируемых реквизитов объекта (см. ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьБлокируемыеРеквизитыОбъекта).
//
// Параметры:
// 	БлокируемыеРеквизиты - Массив из Строка - Блокируемые реквизиты объекта
// 	БезЭлементовФорм - Булево - Добавлять в массив только реквизиты, без управляющих элементов форм.
Процедура ДополнитьБлокируемыеРеквизитыОбъектаПоНДД(БлокируемыеРеквизиты, БезЭлементовФорм = Ложь) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры
// Текст запроса уничтожения настроек по НДД.
// 
// Возвращаемое значение:
//  Строка - Текст запроса уничтожения настроек по НДД.
Функция ТекстЗапросаУничтоженияНастроекНДД() Экспорт
	Возврат "
	|УНИЧТОЖИТЬ НастройкиРаспределенияСтатейНДД
	|;
	|УНИЧТОЖИТЬ НастройкиРаспределенияСтатейНДДПоОВЗ
	|;
	|";
КонецФункции

// Подставить сумму НДД в запрос. Для прочих расходов.
// Формирует строку НДД для приходных движений исходя из формулы НУ: СуммаРегл - ПР - ВР
// При пустых ПР и ВР, сумма НДД = СуммаРегл.
// Для расходных движений СуммаНДД = 0. Исключение - явно прописанные суммы НДД в документе.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИмяТаблицы - Строка - Имя основной таблицы
//  ВидДвижения - Строка - Вид движения в запросе. Варианты: ИзЗапроса, Приход, Расход.
//  ИмяПоляСуммаРегл - Строка - Имя поля суммы регл в запросе.
//  ИмяПоляПР - Строка - Имя поля постоянной разницы в запросе. По умолчанию пустое.
//  ИмяПоляВР - Строка - Имя поля временной разницы в запросе. По умолчанию пустое.
//  ПараметрПериода - Строка - Параметр периода, если в таблице период передается через параметр. По умолчанию пустое.
//  ПолеСтатьиОтсутствует - Булево - Признак отсутствия поля статьи.
Процедура ПодставитьСуммуНДДВЗапрос(ТекстЗапроса, ИмяТаблицы, ВидДвижения, ИмяПоляСуммаРегл, ИмяПоляПР = "", ИмяПоляВР = "", ПараметрПериода = "", ПолеСтатьиОтсутствует = Ложь) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	
	Если ЗначенияПоУмолчанию Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаНДД", "0"); //@Query-part
	Иначе
	КонецЕсли;
	
КонецПроцедуры

// Вставить описание служебных временных таблиц регистра.
// 
// Параметры:
//  ОписаниеРегистра - Структура - Описание регистра
Процедура ВставитьОписаниеСлужебныхВременныхТаблицРегистраФактическиеРасходыНДДПроизводствоРеализация(ОписаниеРегистра) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

// Проверить метаданные регистра фактические расходы НДДПроизводство реализация.
// 
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра
// 
// Возвращаемое значение:
//  Булево - Проверить метаданные регистра фактические расходы НДДПроизводство реализация
Функция ПроверитьМетаданныеРегистраФактическиеРасходыНДДПроизводствоРеализация(МетаданныеРегистра) Экспорт
	
	ЭтоНужныйРегистр = Ложь;
	
	Возврат ЭтоНужныйРегистр;
	
КонецФункции

// Расчет стоимости в части НДД (налога на добавленный доход) по товарам.
// Рассчитывается ресурс регистра "Себестоимость товаров" СтоимостьНДД.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета себестоимости:
// * РежимЗакрытияМесяца - ПеречислениеСсылка.РежимыЗакрытияМесяца - РежимыЗакрытияМесяца.
// * РаспределениеДопРасходовМеждуПартиямиИТоварами - Булево - признак распределения доп расходов между партиями и товарами.
// * ЗапущенРасчетПартий - Булево - Признак запущенного расчета партий.
Процедура РасчетСебестоимости_СтоимостьНДД(ПараметрыРасчета) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

// Добавляет в массив имена регистров, которые должны контролироваться для целей НДД.
//
//	Параметры:
//	КонтрольныеРегистры - Массив из Строка - массив элементов типа "Строка".
//
Процедура ДополнитьРегистрыКонтроляРегистрамиПоНДД(КонтрольныеРегистры) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

// Формирует записи в регистрах заданий к закрытию месяца.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
Процедура СформироватьЗаписиРегистровЗаданийПоНДД(МенеджерВременныхТаблиц) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры

// Установить параметры запроса по настройкам НДД.
// 
// Параметры:
//  Запрос - Запрос - Запрос для установки параметров
Процедура УстановитьПараметрыЗапросаПоНастройкамНДД(Запрос) Экспорт
	
	УчетПоНДД = Ложь;
	ДатаНачалаУчетаПоНДД = Дата(1,1,1);
	
	
	Запрос.УстановитьПараметр("УчетПоНДД", УчетПоНДД);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаПоНДД", ДатаНачалаУчетаПоНДД);
	
КонецПроцедуры

// Возвращает перечень регистров, обслуживаемых механизмом расчета партий.
//
// Параметры:
//	ИсходящиеДанные - Соответствие - имена регистров, обслуживаемых механизмом расчета партий.
//
Процедура ИсходящиеДанныеМеханизмаНДД(ИсходящиеДанные) Экспорт
	
	
	Возврат; // Чтобы метод не был пустым без НДД.
	
КонецПроцедуры
#КонецОбласти

#Область ПроведениеДокументов

// Добавить поле сумма НДД в дополнительные поля.
// 
// Параметры:
//  ДополнительныеПоля - Строка - Дополнительные поля, через запятую
Процедура ДобавитьДополнительныеПоляПоНДД(ДополнительныеПоля) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПоля) Тогда
		ДополнительныеПоля = "СуммаНДД," + ДополнительныеПоля;
	Иначе
		ДополнительныеПоля = "СуммаНДД";
	КонецЕсли;
	
КонецПроцедуры

// Подставить стоимость НДД в запрос.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  Операция - Строка - Операция себестоимости
//  ПроверкаНастроекПризнания - Булево - Признак необходимости проверки настроек признания (для операций по НЗП).
Процедура ПодставитьСтоимостьНДДВЗапрос(ТекстЗапроса, Операция, ПроверкаНастроекПризнания = Ложь) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	
	Если ЗначенияПоУмолчанию Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтоимостьНДД", "0"); //@Query-part
	Иначе
	КонецЕсли;
	
КонецПроцедуры

// Дополнить параметры запроса для проведения по регистрам партионного учета.
// 
// Параметры:
//  СтруктураПараметров - Структура - Структура параметров 
Процедура ДополнитьСтруктуруПараметровЗапросаДляПроведения(СтруктураПараметров) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	
	Если ЗначенияПоУмолчанию Тогда
		СтруктураПараметров.Вставить("Константа_ДатаНачалаУчетаПоНДД", Дата(1,1,1));
	Иначе
	КонецЕсли;
	
КонецПроцедуры

// Дополнить параметры запроса константами по НДД.
// 
// Параметры:
//  Запрос - Запрос - Запрос, в котором требуется установить параметры. 
Процедура ДополнитьПараметрыЗапросаКонстантамиПоНДД(Запрос) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	
	Если ЗначенияПоУмолчанию Тогда
		Запрос.УстановитьПараметр("Константа_ДатаНачалаУчетаПоНДД", Дата(1,1,1));
		Запрос.УстановитьПараметр("Константа_ИспользоватьУчетПоНДД", Ложь);
	Иначе
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ПолучениеНастроекНДД

// Формирует текст описания данных настроек НДД.
// 
// Параметры:
//  ПараметрыПолученияДанныхПоНДД - Структура - Параметры получения данных по НДД:
// * ИмяВременнойТаблицыИсточника - Строка - имя таблицы с данными по расходам
// * НужнаТаблицаПоОВЗ - Булево - Необходимость дополнительной ВТ по ОВЗ
// * ТолькоУчетнаяПолитика - Булево - Необходимость получения только базовых настроек ФО и настроек налогооблажения
// * ТолькоНастройкиПризнания - Булево -  Необходимость получения только базовых настроек применения НДД (ФО УчетПоНДД и настройки налогооблажения организации)
// * ПодменаНастроекСтатейНаОВЗДляРаспределения - Булево - Необходимость подмены вариантов и правил из статей на данные по ОВЗ
// * ПравилаРаспределения - Булево - Необходимость получения правил распределения
// * ВариантыПризнанияРасходовНДД - Строка - Строка вариантов признания расходов НДД для использования в параметрах запросов
// * УничтожаемыеВТ - Строка - Список ВТ для уничтожения
//  ИсточникВызова - Строка - Имя источника вызова
// 
// Возвращаемое значение:
//  Строка - Текст описание данных настроек НДД
Функция ТекстОписаниеДанныхНастроекНДД(ПараметрыПолученияДанныхПоНДД, ИсточникВызова) Экспорт
	
	ТекстыЗапроса = Новый Массив; // Массив из Строка
	
	ТекстыЗапроса.Добавить(ТекстЗапросаОписаниеУчетнаяПолитикаПоНДД(ИсточникВызова));
	
	Если НЕ ПараметрыПолученияДанныхПоНДД.ТолькоУчетнаяПолитика Тогда
		
		ТекстыЗапроса.Добавить(ТекстЗапросаОписаниеНастройкиПризнанияРасходовНДД());
		
		Если ПараметрыПолученияДанныхПоНДД.НастройкиПризнанияПоКлючамАналитикиУчетаНоменклатуры Тогда
			ТекстыЗапроса.Добавить(ТекстЗапросаОписаниеНастройкиПризнанияРасходовНДДПоАналитикеУчетаНоменклатуры());
		КонецЕсли;
		
		Если НЕ ПараметрыПолученияДанныхПоНДД.ТолькоНастройкиПризнания Тогда
		
			ТекстыЗапроса.Добавить(ТекстЗапросаОписаниеПредварительныеНастройкиРаспределенияСтатейНДД(ПараметрыПолученияДанныхПоНДД));
			ТекстыЗапроса.Добавить(ТекстЗапросаОписаниеНастройкиРаспределенияСтатейНДД());
			
			Если ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ Тогда
				
				ТекстыЗапроса.Добавить(ТекстЗапросаОписаниеДанныхНастроекНДДПоОВЗ());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ДобавитьТекстУничтожитьВременныеТаблицыВЗапрос(ТекстЗапроса, ПараметрыПолученияДанныхПоНДД.УничтожаемыеВТ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст описания ВТ УчетнаяПолитикаПоНДД.
// 
// Параметры:
//  ИсточникВызова - Строка - Описание источника вызова
//
// Возвращаемое значение:
//  Строка - Текст описание данных 
Функция ТекстЗапросаОписаниеУчетнаяПолитикаПоНДД(ИсточникВызова = "") Экспорт
	
	ИмяВтУчетнойПолитикиПоНДД = "УчетнаяПолитикаПоНДД"; //@Query-part
	
	// Для движений по прочим расходам ВТ УчетнаяПолитикаПоНДД называется УчетнаяПолитикаПоНДДПрочиеРасходы,
	// чтобы не пересекаться с такой же таблицей в себестоимости товаров
	Если ИсточникВызова = "ПрочиеРасходы_ТекстЗапросаТаблицаПрочиеРасходы" Тогда
		ИмяВтУчетнойПолитикиПоНДД = "УчетнаяПолитикаПоНДДПрочиеРасходы"; //@Query-part
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон("
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЛОЖЬ КАК ПлательщикНДД
		|ПОМЕСТИТЬ %1
		|", //@Query-part
		ИмяВтУчетнойПолитикиПоНДД); 
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст описания ВТ НастройкиПризнанияРасходовНДД.
// 
// Возвращаемое значение:
//  Строка - Текст описание данных 
Функция ТекстЗапросаОписаниеНастройкиПризнанияРасходовНДД()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	&ПустаяСсылкаНаОбъектРаздельногоУчетаНДД КАК ОбъектРаздельногоУчетаНДД,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЛОЖЬ КАК РасходыВключаютсяВСтоимость,
		|	NULL КАК ВариантПризнанияРасходов,
		|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияРасходов
		|ПОМЕСТИТЬ НастройкиПризнанияРасходовНДД
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст описания ВТ НастройкиПризнанияРасходовНДДПоАналитикеУчетаНоменклатуры.
// 
// Возвращаемое значение:
//  Строка - Текст описание данных 
Функция ТекстЗапросаОписаниеНастройкиПризнанияРасходовНДДПоАналитикеУчетаНоменклатуры()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)	КАК АналитикаУчетаНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)						КАК Организация,
		|	ЛОЖЬ 																КАК РасходыВключаютсяВСтоимость,
		|	NULL																КАК ВариантПризнанияРасходов,
		|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)		КАК ПравилоРаспределенияРасходов
		|ПОМЕСТИТЬ НастройкиПризнанияРасходовНДДПоАналитикеУчетаНоменклатуры
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст описания ВТ ПредварительныеНастройкиРаспределенияСтатейНДД.
// 
// Параметры:
//  ПараметрыПолученияДанныхПоНДД - Структура - Параметры получения данных по НДД:
// * ИмяВременнойТаблицыИсточника - Строка - имя таблицы с данными по расходам
// * НужнаТаблицаПоОВЗ - Булево - Необходимость дополнительной ВТ по ОВЗ
// * ТолькоУчетнаяПолитика - Булево - Необходимость получения только базовых настроек ФО и настроек налогооблажения
// * ТолькоНастройкиПризнания - Булево -  Необходимость получения только базовых настроек признания (факт учета для НДД по аналитикам)
// * ПодменаНастроекСтатейНаОВЗДляРаспределения - Булево - Необходимость подмены вариантов и правил из статей на данные по ОВЗ
// * ПравилаРаспределения - Булево - Необходимость получения правил распределения
// * ВариантыПризнанияРасходовНДД - Строка - Строка вариантов признания расходов НДД для использования в параметрах запросов
// * УничтожаемыеВТ - Строка - Список ВТ для уничтожения
// 
// Возвращаемое значение:
//  Строка - Текст описание данных
Функция ТекстЗапросаОписаниеПредварительныеНастройкиРаспределенияСтатейНДД(ПараметрыПолученияДанныхПоНДД)
	
	ТекстЗапроса = "";
	
	// Для данных с ОВЗ добавляются доп. поля, т.к. будет использовано в см. ТекстЗапросаНастройкиРаспределенияСтатейНДДПоОВЗ
	Если ПараметрыПолученияДанныхПоНДД.НужнаТаблицаПоОВЗ Тогда
		ТекстЗапроса = "
				|ВЫБРАТЬ ПЕРВЫЕ 0
				|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
				|	NULL КАК ОВЗ,
				|	&ПустаяСсылкаНаОбъектРаздельногоУчетаНДД КАК ОбъектРаздельногоУчетаНДД,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
				|	ЛОЖЬ КАК РасходыВключаютсяВСтоимость,
				|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходовРегл,
				|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходовНУ,
				|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияРегл,
				|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияНУ,
				|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияНДД,
				|	ЛОЖЬ КАК ЭтоОВЗ
				|ПОМЕСТИТЬ ПредварительныеНастройкиРаспределенияСтатейНДД
				|";
	Иначе
		ТекстЗапроса = "
				|ВЫБРАТЬ ПЕРВЫЕ 0
				|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
				|	&ПустаяСсылкаНаОбъектРаздельногоУчетаНДД КАК ОбъектРаздельногоУчетаНДД,
				|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
				|	ЛОЖЬ КАК РасходыВключаютсяВСтоимость,
				|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходовРегл,
				|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходовНУ,
				|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияРегл,
				|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияНУ,
				|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияНДД,
				|	ЛОЖЬ КАК ЭтоОВЗ
				|ПОМЕСТИТЬ ПредварительныеНастройкиРаспределенияСтатейНДД
				|";
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст описания ВТ НастройкиРаспределенияСтатейНДД.
// 
// Возвращаемое значение:
//  Строка - Текст описание данных 
Функция ТекстЗапросаОписаниеНастройкиРаспределенияСтатейНДД()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ОбъектРаздельногоУчетаНДД,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЛОЖЬ КАК РасходыВключаютсяВСтоимость,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходовНДД,
		|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияРасходовНДД,
		|	NULL КАК ВариантПризнанияРасходов
		|ПОМЕСТИТЬ НастройкиРаспределенияСтатейНДД
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст описания ВТ НастройкиРаспределенияСтатейНДДПоОВЗ.
// 
// Возвращаемое значение:
//  Строка - Текст описание данных настроек НДД по ОВЗ
Функция ТекстЗапросаОписаниеДанныхНастроекНДДПоОВЗ()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК ОВЗ,
		|	ЛОЖЬ КАК РасходыВключаютсяВСтоимость,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка) КАК ВариантРаспределенияРасходовНДД,
		|	ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка) КАК ПравилоРаспределенияРасходовНДД,
		|	NULL КАК ВариантПризнанияРасходов
		|ПОМЕСТИТЬ НастройкиРаспределенияСтатейНДДПоОВЗ
		|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Добавить текст уничтожения временных таблиц в запрос.
// Не требует менеджера временных таблиц, но чувствительна к именам таблиц.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИменаТаблиц - Строка - Имена таблиц, через запятую
Процедура ДобавитьТекстУничтожитьВременныеТаблицыВЗапрос(ТекстЗапроса, ИменаТаблиц)
	
	Если НЕ ЗначениеЗаполнено(ИменаТаблиц) Тогда
		Возврат; // Чтобы не нужно было делать проверки имен таблиц при вызове этой процедуры.
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Если СтрНайти(ТекстЗапроса, КлючИЗначение.Ключ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Дополняет имена функциональных опций в строку.
//
// Параметры:
//	ИменаФО - Строка - строка с перечислением имен функциональных опций
//
Процедура ДополнитьИменаФункциональныхОпций(ИменаФО) Экспорт
	//++ Локализация
	ИменаФО = ИменаФО + ",
	|ИспользоватьПартионныйУчет,
	|ПартионныйУчетВерсии22,
	|ДатаПереходаНаПартионныйУчетВерсии22";
	//-- Локализация
КонецПроцедуры

// Дополняет параметры расчета партий и себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры, используемые при расчете партий и себестоимости
//
Процедура ДополнитьПараметрыРасчета(ПараметрыРасчета) Экспорт
	
	#Область ОрганизацииИПолитики
	
	// Организации и их учетные политики.

	//++ Локализация
	ПараметрыРасчета.УчетныеПолитики.Вставить("УСН", 	   	   			   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УСН.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	//-- Локализация
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСВерсии22", 	   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСВерсии24", 	   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСНеВедется",    Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	//++ Локализация
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("РаздельныйУчетПостатейныхЗатрат", Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("РаспределениеПартийНДС", Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.РаспределениеПартийНДС.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
		
	ПараметрыРасчета.УчетныеПолитики.Вставить("ПлательщикНДД", Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.ПлательщикНДД.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	
	//-- Локализация
	
	ЗапросУчетныеПолитики = Новый Запрос;
	ЗапросУчетныеПолитики.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СпрОрганизации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	СпрОрганизации.Ссылка В (&Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
	|ПОМЕСТИТЬ ВТФинУчет
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
	//++ Локализация
	|	ВЫБОР КОГДА НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН ТОГДА
	|		ЕСТЬNULL(НастройкиУчетаУСНСрезПоследних.РаздельныйУчетТоваров, ЛОЖЬ)
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РаздельныйУчетТоваровУСН,
	//-- Локализация
	|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДД КАК ПлательщикНДД
	|ПОМЕСТИТЬ ВТСистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиСистемыНалогообложенияСрезПоследних
	//++ Локализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловнаяОрганизация
	|			ИЗ
	|				ВтГоловныеОрганизации)) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО НастройкиУчетаУСНСрезПоследних.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	//-- Локализация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУчетаНДССрезПоследних.Организация КАК Организация,
	//++ Локализация
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС,
	//-- Локализация
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетТоваровПоНалогообложениюНДС
	|ПОМЕСТИТЬ ВТУчетНДС
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиУчетаНДССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
	|ПОМЕСТИТЬ ВТФинУчетПрошлыйПериод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
	//++ Локализация
	|	ВЫБОР КОГДА НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН ТОГДА
	|		ЕСТЬNULL(НастройкиУчетаУСНСрезПоследних.РаздельныйУчетТоваров, ЛОЖЬ)
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РаздельныйУчетТоваровУСН,
	//-- Локализация
	|	НастройкиСистемыНалогообложенияСрезПоследних.СистемаНалогообложения,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДД КАК ПлательщикНДД
	|ПОМЕСТИТЬ ВТСистемаНалогообложенияПрошлыйПериод
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиСистемыНалогообложенияСрезПоследних
	//++ Локализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&ПрошлыйПериод, Организация В
	|			(ВЫБРАТЬ
	|				ГоловнаяОрганизация
	|			ИЗ
	|				ВтГоловныеОрганизации)) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО НастройкиУчетаУСНСрезПоследних.Организация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	//-- Локализация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУчетаНДССрезПоследних.Организация КАК Организация,
	//++ Локализация
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС,
	//-- Локализация
	|	НастройкиУчетаНДССрезПоследних.РаздельныйУчетТоваровПоНалогообложениюНДС
	|ПОМЕСТИТЬ ВТУчетНДСПрошлыйПериод
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК НастройкиУчетаНДССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГоловныеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ВТСистемаНалогообложения.СистемаНалогообложения, ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК
	|		СистемаНалогообложения,
	//++ Локализация
	|	ЕСТЬNULL(ВТСистемаНалогообложения.РаздельныйУчетТоваровУСН, ЛОЖЬ) КАК РаздельныйУчетТоваровУСН,
	//-- Локализация
	|	ЕСТЬNULL(ВТФинУчет.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров, ЛОЖЬ) КАК ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|	ЕСТЬNULL(ВТФинУчет.МетодОценкиСтоимостиТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров,
	//++ Локализация
	|	ЕСТЬNULL(ВТУчетНДС.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС, ЛОЖЬ) КАК
	|		РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС,
	//-- Локализация
	|	ЕСТЬNULL(ВТУчетНДС.РаздельныйУчетТоваровПоНалогообложениюНДС, ЛОЖЬ) КАК РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	ЕСТЬNULL(ВТСистемаНалогообложения.ПлательщикНДД, ЛОЖЬ) КАК ПлательщикНДД
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемаНалогообложения КАК ВТСистемаНалогообложения
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТСистемаНалогообложения.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчет КАК ВТФинУчет
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчет.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетНДС КАК ВТУчетНДС
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТУчетНДС.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГоловныеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ВТСистемаНалогообложенияПрошлыйПериод.СистемаНалогообложения,
	|		ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК СистемаНалогообложения,
	//++ Локализация
	|	ЕСТЬNULL(ВТСистемаНалогообложенияПрошлыйПериод.РаздельныйУчетТоваровУСН,
	|		ЛОЖЬ) КАК РаздельныйУчетТоваровУСН,
	//-- Локализация
	|	ЕСТЬNULL(ВТФинУчетПрошлыйПериод.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров, ЛОЖЬ) КАК ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|	ЕСТЬNULL(ВТФинУчетПрошлыйПериод.МетодОценкиСтоимостиТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров,
	//++ Локализация
	|	ЕСТЬNULL(ВТУчетНДСПрошлыйПериод.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС, ЛОЖЬ) КАК
	|		РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС,
	//-- Локализация
	|	ЕСТЬNULL(ВТУчетНДСПрошлыйПериод.РаздельныйУчетТоваровПоНалогообложениюНДС, ЛОЖЬ) КАК РаздельныйУчетТоваровПоНалогообложениюНДС,
	|	ЕСТЬNULL(ВТСистемаНалогообложенияПрошлыйПериод.ПлательщикНДД, ЛОЖЬ) КАК ПлательщикНДД
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемаНалогообложенияПрошлыйПериод КАК ВТСистемаНалогообложенияПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТСистемаНалогообложенияПрошлыйПериод.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчетПрошлыйПериод КАК ВТФинУчетПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчетПрошлыйПериод.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетНДСПрошлыйПериод КАК ВТУчетНДСПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТУчетНДСПрошлыйПериод.Организация";
	
	ЗапросУчетныеПолитики.УстановитьПараметр("Организации", ПараметрыРасчета.МассивОрганизаций);
	ЗапросУчетныеПолитики.УстановитьПараметр("Период", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	ЗапросУчетныеПолитики.УстановитьПараметр("ПрошлыйПериод", ПараметрыРасчета.РасчетныйПериод.НачалоПредыдущегоПериода);
	
	Результат						= ЗапросУчетныеПолитики.ВыполнитьПакет();
	
	УчетныеПолитики					= Результат[7].Выгрузить();
	УчетныеПолитикиПрошлогоПериода	= Результат[8].Выгрузить();
	
	Для Каждого ПараметрыУчетнойПолитики Из УчетныеПолитики Цикл
		
		ПараметрУчетнойПолитикиПрошлогоПериода = УчетныеПолитикиПрошлогоПериода.Найти(
			ПараметрыУчетнойПолитики.Организация,
			"Организация");
		
		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(
			ПараметрыУчетнойПолитики.Организация,
			ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров);
		
		//++ Локализация
		
		// УСН
		Если ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УСН.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		//-- Локализация
		
		// УчетПартийНДС...
		Если ПараметрыРасчета.ПартионныйУчетВерсии22
		 И (ПараметрыУчетнойПолитики.РаздельныйУчетТоваровПоНалогообложениюНДС
		 	ИЛИ ПараметрыУчетнойПолитики.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров
			ИЛИ ПараметрыУчетнойПолитики.ПлательщикНДД
			
			//++ Локализация
		
		 	ИЛИ ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
				И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровУСН
			
			//-- Локализация
		
			) Тогда
			
			Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			Иначе
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользуютВТекущемПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			КонецЕсли;
			
		Иначе
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыРасчета.ПартионныйУчетВерсии22
		 И (ПараметрУчетнойПолитикиПрошлогоПериода.РаздельныйУчетТоваровПоНалогообложениюНДС
		 	ИЛИ ПараметрУчетнойПолитикиПрошлогоПериода.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров
			ИЛИ ПараметрУчетнойПолитикиПрошлогоПериода.ПлательщикНДД
			
			//++ Локализация
		
		 	ИЛИ ПараметрУчетнойПолитикиПрошлогоПериода.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
				И ПараметрУчетнойПолитикиПрошлогоПериода.РаздельныйУчетТоваровУСН
			
			//-- Локализация
		
			) Тогда
			
			Если ПараметрУчетнойПолитикиПрошлогоПериода.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользовалиВПрошломПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			Иначе
				ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользовалиВПрошломПериоде; // Массив
				ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
			КонецЕсли;
			
		Иначе
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользовалиВПрошломПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
			
		//++ Локализация
		
		Если (ПараметрыУчетнойПолитики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС
		 	И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка
		 ИЛИ ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
			И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровУСН) Тогда
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
			
		Если ПараметрыРасчета.ПартионныйУчетВерсии22
		 И ПараметрыУчетнойПолитики.РаздельныйУчетТоваровПоНалогообложениюНДС Тогда
			ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.РаспределениеПартийНДС.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыРасчета.ПартионныйУчетВерсии22
		 И ПараметрыУчетнойПолитики.ПлательщикНДД Тогда
		 	ОрганизацииСУчетнойПолитикой = ПараметрыРасчета.УчетныеПолитики.ПлательщикНДД.ИспользуютВТекущемПериоде; // Массив
			ОрганизацииСУчетнойПолитикой.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		//-- Локализация
		
	КонецЦикла;
	
	#КонецОбласти

	//++ Локализация
	
	#Область РегламентированныйУчет
	
	ПараметрыРасчета.Вставить("НастройкиРеглУчета", Новый Структура);
	ПараметрыРасчета.НастройкиРеглУчета.Вставить("ДатаВозможностиВычетаПриОказанииУслугНеВРФ", УчетНДСУП.НастройкиУчета().ДатаВозможностиВычетаПриОказанииУслугНеВРФ);
	
	#КонецОбласти
	
	//-- Локализация
	
КонецПроцедуры

// Дополняет свойства запроса.
//
// Параметры:
//	Запрос - Запрос - Запрос для которого устанавливаются параметры
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
Процедура ДополнитьСвойстваЗапроса(Запрос, ПараметрыРасчета) Экспорт
	//++ Локализация
	Запрос.УстановитьПараметр("ОрганизацииНаУСН", 									 ПараметрыРасчета.УчетныеПолитики.УСН.ИспользуютВТекущемПериоде);
	//-- Локализация
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии22", 				 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии24", 				 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии22ВПрошломПериоде",  ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии24ВПрошломПериоде",  ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииБезУчетаПартийНДС",  						 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииБезУчетаПартийНДСВПрошломПериоде",  		 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользовалиВПрошломПериоде);

	//++ Локализация
	Запрос.УстановитьПараметр("ОрганизацииСРаздельнымУчетомПостатейныхЗатрат",       ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ЕстьОрганизацииСРаздельнымУчетомПостатейныхЗатрат",   ЗначениеЗаполнено(ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде));
	Запрос.УстановитьПараметр("ДатаВозможностиВычетаПриОказанииУслугНеВРФ",          ПараметрыРасчета.НастройкиРеглУчета.ДатаВозможностиВычетаПриОказанииУслугНеВРФ);
	Запрос.УстановитьПараметр("ОрганизацииСРаспределениемПартийНДС",       			 ПараметрыРасчета.УчетныеПолитики.РаспределениеПартийНДС.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииПлательщикиНДД",							 ПараметрыРасчета.УчетныеПолитики.ПлательщикНДД.ИспользуютВТекущемПериоде);
	

	//-- Локализация
КонецПроцедуры

// Дополняет параметры запроса для проведения документов.
//
// Параметры:
//	Реквизиты - Произвольный - реквизиты документа для определения параметров партионного учета
//	Период - Дата - период для получения данных
//  Организация - СправочникСсылка.Организации, Неопределено - организация для получения данных
//	СтруктураПараметров - Структура - перечень параметров с установленными значениями
//
Процедура ДополнитьПараметрыЗапросаДляПроведения(Реквизиты, Период, Организация, СтруктураПараметров) Экспорт
	
	// Инициализация локализованных параметров значениями по умолчанию.
	СтруктураПараметров.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС", Ложь);
	СтруктураПараметров.Вставить("СтатьяРасходовСписаниеНДС", ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка());
	СтруктураПараметров.Вставить("АналитикаРасходовСписаниеНДС", ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка());
	СтруктураПараметров.Вставить("ПлательщикНДД", Неопределено);
	
	//++ Локализация
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОрганизацияПолучатель")
	 И ЗначениеЗаполнено(Реквизиты.ОрганизацияПолучатель) Тогда
		ТекущаяОрганизация = Реквизиты.ОрганизацияПолучатель;
	ИначеЕсли Организация <> Неопределено Тогда
		ТекущаяОрганизация = Организация;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация") Тогда
		ТекущаяОрганизация = Реквизиты.Организация;
	Иначе
		ТекущаяОрганизация = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
	
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаНДС",
			ТекущаяОрганизация,
			Период);
		ПараметрыУчетнойПолитикиФинУчета = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаФинансовогоУчета",
			ТекущаяОрганизация,
			Период);
		
		СтруктураПараметров.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС",
			ПараметрыУчетнойПолитики <> Неопределено 
				И ПараметрыУчетнойПолитикиФинУчета <> Неопределено
				И ПараметрыУчетнойПолитикиФинУчета.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка
				И ПараметрыУчетнойПолитики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС);
		СтруктураПараметров.Вставить("СтатьяРасходовСписаниеНДС", ?(ПараметрыУчетнойПолитики <> Неопределено, 
			ПараметрыУчетнойПолитики.СтатьяРасходовСписаниеНДС, ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()));
		СтруктураПараметров.Вставить("АналитикаРасходовСписаниеНДС", ?(ПараметрыУчетнойПолитики <> Неопределено,
				?(ПараметрыУчетнойПолитики.АналитикаРасходовСписаниеНДС <> Неопределено,
					ПараметрыУчетнойПолитики.АналитикаРасходовСписаниеНДС, ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()),
				ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()));
				
		ПараметрыУчетнойПолитикиУСН = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаУСН",
			ТекущаяОрганизация,
			Период);
		СтруктураПараметров.Вставить("РаздельныйУчетТоваровУСН", ПараметрыУчетнойПолитикиУСН <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУчетнойПолитикиУСН.РаздельныйУчетТоваров)
			И ПараметрыУчетнойПолитикиУСН.РаздельныйУчетТоваров);
			
		ПараметрыУчетнойПолитикиНДД = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик("НастройкиСистемыНалогообложения",
			Организация,
			Период);
		СтруктураПараметров.Вставить("ПлательщикНДД", ПараметрыУчетнойПолитикиНДД <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУчетнойПолитикиНДД.ПлательщикНДД)
			И ПараметрыУчетнойПолитикиНДД.ПлательщикНДД);
		
	КонецЕсли;
	
	ДополнитьСтруктуруПараметровЗапросаДляПроведения(СтруктураПараметров);
	
	//-- Локализация
КонецПроцедуры

// Возвращает признак того, что указанный регистр является локализуемым.
//
// Параметры:
//	ИмяРегистра - Строка - имя проверяемого регистра
//
// Возвращаемое значение:
//	Булево - признак локализуемого регистра
//
Функция ЭтоЛокализуемыйРегистрСведений(ИмяРегистра) Экспорт
	
	Если ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров.Имя
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты.Имя
	//++ Локализация
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров.Имя
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.Имя
	//-- Локализация
	 ИЛИ ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты.Имя Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
