
#Область ПрограммныйИнтерфейс

// Формирование строки подключения к сервису.
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - Вид этп
//  РазделУчета - строка - "Поставщики" или "Покупатели"
// 
// Возвращаемое значение:
//  Строка - Строка подключения к сервису этп
Функция СтрокаПодключенияКСервису(ВидЭТП, РазделУчета) Экспорт
	
	Возврат ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.СтрокаПодключенияКСервису(ВидЭТП, РазделУчета);
	
КонецФункции

Процедура ПроверитьСвязьСЭТПБидзаар(ПараметрыОперации) Экспорт

	ФоновоеЗадание = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ПроверитьСвязьСЭТПБидзаарВФоне(ПараметрыОперации);

	Если ФоновоеЗадание <> Неопределено Тогда
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ПроверитьСвязьСЭТПБидзаарЗавершение", ЭтотОбъект,
			ПараметрыОперации);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОписаниеОповещенияЗавершение, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

// Публикация запроса коммерческих предложений в ЭТП Бидззар
// Подготавливаются данные для выполнения длительной операции и осуществляется вызов функции публикации
// 
// Параметры:
//  Документ - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - публикуемый документ
Процедура ПубликацияЗапросаКоммерческихПредложенийБидзаар(Знач Документ) Экспорт

	Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ПубликацияЗапросаКоммерческихПредложенийБидзаарВФоне(Документ, Истина);

	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ЗапросКоммерческихПредложений", Документ);
	ПараметрыЗавершения.Вставить("АдресРезультата", "");
			
	Если Результат <> Неопределено Тогда 

		ПараметрыЗавершения.АдресРезультата = Результат.АдресРезультата;
		ПриЗавершенииОтправкиЗапроса = Новый ОписаниеОповещения("ПубликацияЗапросаКоммерческихПредложенийЗавершение", 
			ЭтотОбъект, ПараметрыЗавершения);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПриЗавершенииОтправкиЗапроса, ПараметрыОжидания);
		
	Иначе
		ПриЗавершенииОтправкиЗапроса = Новый ОписаниеОповещения("ПубликацияЗапросаКоммерческихПредложенийЗавершение", 
			ЭтотОбъект, ПараметрыЗавершения);
			
		Результат = Новый Структура("Статус, Сообщения", "Ошибка", Новый Массив);
		ВыполнитьОбработкуОповещения(ПриЗавершенииОтправкиЗапроса, Результат);
	КонецЕсли;
		
КонецПроцедуры

// Получение текущие состояния документов
// Подготавливаются данные для выполнения длительной операции и осуществляется вызов функции получения событий
// 
// Параметры:
//  Контекст - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков,
//  	Массив из ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - документ(-ы), который(-е) будут оповещены о текущем статусе
Процедура ПолучитьСостоянияБидзаар(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("Массив") Тогда
		МассивДокументов = Контекст;
	Иначе
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Контекст);
	КонецЕсли;	
	
	Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ЗапросТекущихСостоянийОпубликованныхДокументовБидзаарВФоне(
		МассивДокументов);

	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ОповещаемыеДокументы", МассивДокументов);
	ПараметрыЗавершения.Вставить("АдресРезультата", "");
			
	Если Результат <> Неопределено Тогда

		ПараметрыЗавершения.АдресРезультата = Результат.АдресРезультата;
		ПриЗавершенииПолученияСостоянияДокумента = Новый ОписаниеОповещения("ПолучитьСостоянияБидзаарЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПриЗавершенииПолученияСостоянияДокумента, ПараметрыОжидания);
		
	Иначе
		ПриЗавершенииПолученияСостоянияДокумента = Новый ОписаниеОповещения("ПолучитьСостоянияБидзаарЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);
			
		Результат = Новый Структура("Статус, Сообщения", "Ошибка", Новый Массив);
		ВыполнитьОбработкуОповещения(ПриЗавершенииПолученияСостоянияДокумента, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеДанныхКоммерческихПредложенийБидзаар(Знач Документ) Экспорт
	
	Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ПолучениеДанныхКоммерческихПредложенийПоЗапросуБидзаарВФоне(Документ);

	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ОповещаемыйДокумент", Документ);
	ПараметрыЗавершения.Вставить("АдресРезультата", "");
			
	Если Результат <> Неопределено Тогда 

		ПараметрыЗавершения.АдресРезультата = Результат.АдресРезультата;
		ПриЗавершенииПолученияДанныхКоммерческихПредложений = Новый ОписаниеОповещения("ПолучениеДанныхКоммерческихПредложенийЗавершение", 
			ЭтотОбъект, ПараметрыЗавершения);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПриЗавершенииПолученияДанныхКоммерческихПредложений, ПараметрыОжидания);
		
	Иначе
		ПриЗавершенииПолученияДанныхКоммерческихПредложений = Новый ОписаниеОповещения("ПолучениеДанныхКоммерческихПредложенийЗавершение", 
			ЭтотОбъект, ПараметрыЗавершения);
			
		Результат = Новый Структура("Статус, Сообщения", "Ошибка", Новый Массив);
		ВыполнитьОбработкуОповещения(ПриЗавершенииПолученияДанныхКоммерческихПредложений, Результат);
	КонецЕсли;
КонецПроцедуры

Процедура ПолучениеДанныхУчастниковПоЗапросуБидзаар(Знач Документ, ТолькоПобедители) Экспорт

	Результат = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ПолучениеДанныхУчастниковПоЗапросуБидзаарВФоне(
		Документ, ТолькоПобедители);

	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ОповещаемыйДокумент", Документ);
	ПараметрыЗавершения.Вставить("АдресРезультата", "");

	Если Результат <> Неопределено Тогда

		ПараметрыЗавершения.АдресРезультата = Результат.АдресРезультата;
		ПриЗавершенииПолученияДанныхУчастниковПоЗапросуБидзаар = Новый ОписаниеОповещения("ПолучениеДанныхУчастниковПоЗапросуБидзаарЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.ВыводитьСообщения = Истина;

		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПриЗавершенииПолученияДанныхУчастниковПоЗапросуБидзаар,
			ПараметрыОжидания);

	Иначе
		ПриЗавершенииПолученияДанныхУчастниковПоЗапросуБидзаар = Новый ОписаниеОповещения("ПолучениеДанныхУчастниковПоЗапросуБидзаарЗавершение",
			ЭтотОбъект, ПараметрыЗавершения);

		Результат = Новый Структура("Статус, Сообщения", "Ошибка", Новый Массив);
		ВыполнитьОбработкуОповещения(ПриЗавершенииПолученияДанныхУчастниковПоЗапросуБидзаар, Результат);
	КонецЕсли;

КонецПроцедуры

// Открывает форму подключения организации к Бидзаар.
//
// Параметры:
//  Организация					 - ОпределяемыйТип.Организация - подключаемая организация.
//  Владелец					 - ФормаКлиентскогоПриложения - владелец формы.
//  ОписаниеОповещенияОЗакрытии	 - ОписаниеОповещения - описание оповещения о закрытии формы.
//
Процедура ОткрытьФормуПодключенияОрганизацииБидзаар(Организация, Владелец = Неопределено, ОписаниеОповещенияОЗакрытии = Неопределено)  Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("РазделУчета", "Покупатели");
	
	Если ИнтеграцияСЭлектроннымиТорговымиПлощадкамиВызовСервера.ДоступноПравоНастройкиАвторизацииБидзаар() Тогда
		ОткрытьФорму("Обработка.УправлениеВыгрузкамиВБидзаар.Форма.НастройкаПодключения", 
			ПараметрыФормы, 
			Владелец, , , , 
			ОписаниеОповещенияОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСвязьСЭТПБидзаарЗавершение(Результат, ПараметрыЗавершения) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Статус", "");
		Если Статус = "Выполнено" Тогда
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			ПараметрыЗавершения.Вставить("Результат", РезультатВыполнения);
			Оповестить("Бидзаар_ПроверкаСвязиСЭТП", ПараметрыЗавершения, ПараметрыЗавершения.Источник);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПубликацияЗапросаКоммерческихПредложенийЗавершение(Результат, ПараметрыЗавершения) Экспорт

	//Данные для оповещения публикуемого документа о результате публикации
	СостояниеДокумента = Новый Структура;
	СостояниеДокумента.Вставить("СостояниеСинхронизации", ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.ПустаяСсылка"));
	СостояниеДокумента.Вставить("Детализация", Новый Соответствие);

	ПараметрыОповещения = Новый Структура("Идентификатор, СостояниеДокумента, ТекстОшибки", "", СостояниеДокумента, "");

	Если Результат.Статус = "Выполнено" Тогда

		РезультатПубликации = ПолучитьИзВременногоХранилища(ПараметрыЗавершения.АдресРезультата);
		ЗаполнитьЗначенияСвойств(ПараметрыОповещения, РезультатПубликации);

		Оповестить("Бидзаар_ОтправкаЗапросаКоммерческихПредложений", ПараметрыОповещения,
			ПараметрыЗавершения.ЗапросКоммерческихПредложений);
		Если Не ПустаяСтрока(РезультатПубликации.Идентификатор) Тогда
			ПолучитьСостоянияБидзаар(ПараметрыЗавершения.ЗапросКоммерческихПредложений);
		КонецЕсли;

	ИначеЕсли Результат.Статус = "Ошибка" Тогда

		СообщенияОбОшибках = Новый массив;
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Если ТипЗнч(Сообщение) = Тип("Строка") Тогда
				СообщенияОбОшибках.Добавить(Сообщение);
			ИначеЕсли ТипЗнч(Сообщение) = Тип("СообщениеПользователю") Тогда
				СообщенияОбОшибках.Добавить(Сообщение.Текст);
			КонецЕсли;
		КонецЦикла;

		ПараметрыОповещения.ТекстОшибки = СтрСоединить(СообщенияОбОшибках, Символы.ПС);
		СостояниеДокумента.СостояниеСинхронизации = ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка");

		Оповестить("Бидзаар_ОтправкаЗапросаКоммерческихПредложений", ПараметрыОповещения,
			ПараметрыЗавершения.ЗапросКоммерческихПредложений);

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСостоянияБидзаарЗавершение(Результат, ПараметрыЗавершения) Экспорт

	ПараметрыОповещения = Новый Структура("Состояние, ТекстОшибки", "", "");

	Если Результат.Статус = "Выполнено" Тогда
		
		Если Не ПараметрыЗавершения.ОповещаемыеДокументы.Количество() Тогда
			Оповестить("ПолучитьСостоянияБидзаар", ПараметрыОповещения);
			Возврат;
		КонецЕсли;
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ПараметрыЗавершения.АдресРезультата);
		
		Для Каждого ОповещаемыйДокумент Из ПараметрыЗавершения.ОповещаемыеДокументы Цикл
			СостояниеДокумента = РезультатВыполнения.СостоянияДокументов.Получить(ОповещаемыйДокумент);
		
			Если СостояниеДокумента <> Неопределено Тогда
				ПараметрыОповещения.Состояние = СостояниеДокумента;
				ПараметрыОповещения.ТекстОшибки = "";
			Иначе
				ПараметрыОповещения.Состояние = "";
				ПараметрыОповещения.ТекстОшибки = "";
			КонецЕсли;
	
			Оповестить("ПолучитьСостояниеБидзаар", ПараметрыОповещения, ОповещаемыйДокумент);
			
		КонецЦикла;
			
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		Если Не ПараметрыЗавершения.ОповещаемыеДокументы.Количество() Тогда
			Оповестить("ПолучитьСостояниеБидзаар", ПараметрыОповещения);
			Возврат;
		КонецЕсли;

		Для Каждого ОповещаемыйДокумент Из ПараметрыЗавершения.ОповещаемыеДокументы Цикл

			ПараметрыОповещения.Состояние = "Ошибка";
			ПараметрыОповещения.ТекстОшибки = "";

			Оповестить("ПолучитьСостояниеБидзаар", ПараметрыОповещения, ОповещаемыйДокумент);

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеДанныхКоммерческихПредложенийЗавершение(Результат, ПараметрыЗавершения) Экспорт
	
	ПараметрыОповещения = Новый Структура("ДанныеКоммерческихПредложений, ТекстОшибки", "", "");

	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ПараметрыЗавершения.АдресРезультата);
		
		ЗаполнитьЗначенияСвойств(ПараметрыОповещения, РезультатВыполнения);
			
		Оповестить("ПолучениеДанныхКоммерческихПредложенийПоЗапросуБидзаар", ПараметрыОповещения, ПараметрыЗавершения.ОповещаемыйДокумент);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПараметрыОповещения.ТекстОшибки = Результат.КраткоеПредставлениеошибки;
		Оповестить("ПолучениеДанныхКоммерческихПредложенийПоЗапросуБидзаар", ПараметрыОповещения, ПараметрыЗавершения.ОповещаемыйДокумент);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеДанныхУчастниковПоЗапросуБидзаарЗавершение(Результат, ПараметрыЗавершения) Экспорт
	
	ПараметрыОповещения = Новый Структура("ДанныеУчастников, ТекстОшибки", "", "");
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ПараметрыЗавершения.АдресРезультата);
		
		ЗаполнитьЗначенияСвойств(ПараметрыОповещения, РезультатВыполнения);
		
		Оповестить("ПолучениеДанныхУчастниковБидзаар", ПараметрыОповещения, ПараметрыЗавершения.ОповещаемыйДокумент);
			
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ПараметрыОповещения.ТекстОшибки = Результат.КраткоеПредставлениеошибки;
	
		Оповестить("ПолучениеДанныхУчастниковБидзаар", ПараметрыОповещения, ПараметрыЗавершения.ОповещаемыйДокумент);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти