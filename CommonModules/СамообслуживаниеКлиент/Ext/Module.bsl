
#Область СлужебныеПроцедурыИФункции

#Область Прочее

// Формирует структуру параметров открытия формы подбора товаров, свойственных подсистеме самообслуживание.
//
// Параметры:
//  ПараметрыФормы  - Структура - параметры вызывающей формы
// Возвращаемое значение:
//   Структура   - сформированная структура параметров.
//
Функция СтруктураПараметровДляПодбора(Параметры) Экспорт

	ТипНалогообложенияЕНВД = Параметры.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиПеренести",                      Параметры.ЗаголовокПеренести);
	ПараметрыФормы.Вставить("Соглашение",                                    Параметры.Соглашение);
	ПараметрыФормы.Вставить("Склад",                                         Параметры.Склад);
	ПараметрыФормы.Вставить("Валюта",                                        Параметры.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                                     Параметры.Заголовок);
	ПараметрыФормы.Вставить("СегментНоменклатуры",                           Параметры.СегментНоменклатуры);
	ПараметрыФормы.Вставить("Документ",                                      Параметры.Документ);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",                               Параметры.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", ?(Параметры.Свойство("РежимПодбораИспользоватьСкладыВТабличнойЧасти"),
	                                                                           Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти, 
	                                                                           Ложь));
	Если Параметры.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	КонецЕсли;
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                     Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",        Ложь);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",            Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",            Параметры.СкрыватьКомандуОстаткиНаСкладах);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоИерархииНоменклатуры",    Истина);
	ПараметрыФормы.Вставить("СкрыватьНастройкуПодбора",                   Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоВидамНоменклатуры",       Истина);
	ПараметрыФормы.Вставить("НедоступностьФильтраПоСегментуНоменклатуры", Истина);
	ПараметрыФормы.Вставить("ПоказыватьПодобранныеТовары",                Истина);
	ПараметрыФормы.Вставить("СкрыватьВыборНоменклатуры",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",                       Истина);
	ПараметрыФормы.Вставить("Дата",                                       ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",                  ТипНалогообложенияЕНВД);
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары",    ТипНалогообложенияЕНВД);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество",                      Ложь);
	ПараметрыФормы.Вставить("ЗапретРедактированияСоставаНабора",          Истина);
	ПараметрыФормы.Вставить("ЗапретРедактированияЦеныНабора",             Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",          ?(Параметры.Свойство("РежимПодбораБезСуммовыхПараметров"),
	                                                                        Параметры.РежимПодбораБезСуммовыхПараметров,
	                                                                        Ложь));
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Формирует структуру параметров открытия формы примененных скидок, свойственных подсистеме самообслуживание.
//
// Возвращаемое значение:
//   Структура   - сформированная структура параметров.
//
Функция ДополнительныеПараметрыПримененныеСкидки() Экспорт

	Возврат Новый Структура("НеВыводитьИнформациюОРучныхСкидках", Истина);

КонецФункции

// Формирует информационную надпись на форме документа ПланыПродаж для выделенной ячейки.
//
// Параметры:
//  Элемент - ТаблицаФормы - активизированный элемент управления.
//  Форма    - ФормаКлиентскогоПриложения - форма, для которой выполняются действия.
//
Процедура ПланПродажТоварыПоПериодамПриАктивизацииЯчейки(Элемент, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ Объект.ПланироватьПоСумме Тогда
		Возврат;
	КонецЕсли; 
	
	ЭлементыФормы = Форма.Элементы; // ВсеЭлементыФормы 
	
	ТекущиеДанные = ЭлементыФормы.ТоварыПоПериодам.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИтогоПоКолонке = "";
	ИтогоПоСтроке = НСтр("ru='Всего по строке: %СуммаПоСтроке% %Валюта%'");
		
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%Валюта%", Строка(Объект.Валюта));
	ИтогоПоСтроке = СтрЗаменить(ИтогоПоСтроке, "%СуммаПоСтроке%", Формат(ТекущиеДанные.Сумма, "ЧДЦ=2; ЧН=0,00"));	
	
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		Для каждого ЭлментПериод Из Форма.Периоды.НайтиСтроки(Новый Структура("Активная", Истина)) Цикл
			Период = ЭлментПериод; // ПолеФормы
			Если Элемент.ТекущийЭлемент.Имя = "ТоварыПоПериодамЦена_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыПоПериодамКоличество_"+Период.ИмяКолонки 
				ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыПоПериодамСумма_"+Период.ИмяКолонки Тогда
				СуммаПоКолонке = Форма["ТоварыПоПериодамСумма_"+ Период.ИмяКолонки];
				ИтогоПоКолонке = НСтр("ru='Всего за период %ПериодЗаголовок%: %СуммаПоКолонке% %Валюта%'");
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%ПериодЗаголовок%", Период.Заголовок);
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%СуммаПоКолонке%", Формат(СуммаПоКолонке, "ЧДЦ=2; ЧН=0,00"));
				ИтогоПоКолонке = СтрЗаменить(ИтогоПоКолонке, "%Валюта%", Строка(Объект.Валюта));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.ИтогоПоСтрокеКолонке = ИтогоПоСтроке + " " + ИтогоПоКолонке;
	
КонецПроцедуры

// Заполняет список выбора действия при расхождении в документе АктПриемкиКлиента 
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который заполняется
//  Расхождения  - Число - выявленные расхождения по количеству в строке.
//  СпособОтраженияРасхождений - ПеречислениеСсылка.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки - как будут отражаться расхождения по строке.
//
Процедура ЗаполнитьСписокВыбораДействийПриРасхождении(СписокВыбора, Расхождения, СпособОтраженияРасхождений) Экспорт

	Если Расхождения > 0 Тогда
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного"));
		
	ИначеЕсли Расхождения < 0 Тогда
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется"));
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьОтчетОстаткиИДоступностьТоваров(Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии",Истина);
	ПараметрыОткрытия.Вставить("КлючВарианта","ОстаткиИДоступностьТоваров");
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
		Отбор.Вставить("СегментНоменклатуры",Форма.СегментНоменклатуры);
	КонецЕсли;
	Если Форма.СкладОпределенСоглашением Тогда
		Если Форма.ИмяФормы = "Обработка.СамообслуживаниеПартнеров.Форма.КорзинаПокупателя" Тогда
			Отбор.Вставить("Склад",Форма.Склад)
		Иначе
			Отбор.Вставить("Склад",Форма.Объект.Склад);
		КонецЕсли;
	Иначе
		Отбор.Вставить("Склад",Форма.Элементы.Склад.СписокВыбора.Скопировать());
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("Отбор",Отбор);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ОстаткиИДоступностьТоваров.Форма.ФормаОтчетаСамообслуживание", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область АктПриемкиСоСтороныКлиента

Функция СтруктураПараметровФормыВыбораОснований() Экспорт

	СтруктураПараметров = Новый Структура(
	"Партнер,
	|Валюта,
	|УказаниеДоговораНеТребуется,
	|Договор,
	|ДокументыОснования,
	|НалогообложениеНДС,
	|Организация,
	|Соглашение,
	|Партнер,
	|Контрагент,
	|ХозяйственнаяОперация,
	|ЦенаВключаетНДС,
	|ТабличнаяЧастьНеПустая,
	|ТипОснованияАктаОРасхождении,
	|ВариантПриемкиТоваров");
	
	Возврат СтруктураПараметров;

КонецФункции

// Обработчик изменения табличной части Товары в документе "Реализация"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  НайденнаяСтрока - СтрокаТабличнойЧасти - 
//
Процедура ТоварыРеализацияПриИзменении(Форма, НайденнаяСтрока = Неопределено) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Реализация) Тогда
		ТекущиеДанные.Склад        = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ТекущиеДанные.ЗаказКлиента = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Форма.ДокументыОснования.НайтиСтроки(Новый Структура("Реализация", ТекущиеДанные.Реализация));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущиеДанные.Склад        = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ТекущиеДанные.ЗаказКлиента = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];

	Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказКлиента) Тогда
		Если НайденнаяСтрока.ЗаказыОснования.НайтиПоЗначению(ТекущиеДанные.ЗаказКлиента) = Неопределено Тогда
			ТекущиеДанные.ЗаказКлиента = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		Если НайденнаяСтрока.СкладыОснования.НайтиПоЗначению(ТекущиеДанные.Склад) = Неопределено Тогда
			ТекущиеДанные.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	СамообслуживаниеКлиентСервер.УстановитьПризнакДокументОснованиеПоЗаказу(ТекущиеДанные, НайденнаяСтрока, Истина);
	СамообслуживаниеКлиентСервер.ЗаполнитьЗаказИСкладВСтроке(ТекущиеДанные, Форма.ДокументыОснования, Истина);
	
КонецПроцедуры

// Устанавливает вариант действия для выделенных строк акта о расхождениях
// 
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения                                          - форма документа.
//  ВариантДействия - ПеречислениеСсылка.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки - устанавливаемое действие.
//
Процедура УстановитьВариантДействия(Форма, ВариантДействия) Экспорт
	
	КоличествоИзмененныхСтрок = 0;
	
	Для Каждого ВыделеннаяСтрока Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Форма.Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ТекущиеДанные["Действие"] = ВариантДействия Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
			Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
			Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")
			Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится") Тогда
			
			Если НЕ ТекущиеДанные.КоличествоУпаковокРасхождения > 0  Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
			Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
			Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")
			Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана") Тогда
			
			Если НЕ ТекущиеДанные.КоличествоУпаковокРасхождения < 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные["Действие"]  = ВариантДействия;
		КоличествоИзмененныхСтрок = КоличествоИзмененныхСтрок + 1;
		
	КонецЦикла;
	
	ТекстОповещения =  НСтр("ru = 'Установка варианта действия строк'");
	ТекстПояснения = НСтр("ru = 'Строк, у которых установлен вариант действия %действие%: %КоличествоСтрок%.'");
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%действие%", Строка(ВариантДействия));
	ТекстПояснения = СтрЗаменить(ТекстПояснения, "%КоличествоСтрок%", Строка(КоличествоИзмененныхСтрок));
	
	ПоказатьОповещениеПользователя(ТекстОповещения,,ТекстПояснения);

КонецПроцедуры

// Обработчик начала выбора комментария в документе
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//
Процедура КомментарийКлиентаНачалоВыбора(Форма) Экспорт

	ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментарий", "КомментарийКлиента");
	ДополнительныеПараметры.Вставить("ИмяРеквизитаЕстьКомментарий", "ЕстьКомментарийКлиента");
	ДополнительныеПараметры.Вставить("Форма", Форма);

	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("РедактированиеКомментарияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОписаниеОповещенияЗавершение, ТекущиеДанные.КомментарийКлиента);
	

КонецПроцедуры

Процедура РедактированиеКомментарияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если РезультатРедактирования <> ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаКомментарий] Тогда
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаКомментарий]     = РезультатРедактирования;
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаЕстьКомментарий] = Не ПустаяСтрока(РезультатРедактирования);
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Выводит печатную форму документа "Заказ клиента" по умолчанию
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.ЗаказКлиента, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьДокументЗаказ(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьЗаказовНаТоварыУслуги",
		"ЗаказКлиента",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Неопределено);
	
КонецПроцедуры

// Выводит печатную форму документа "Заказ клиента" по умолчанию
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.ЗаказКлиента, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьДокументПлан(ОбъектПечати) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьСценарий"     , Ложь);
	ПараметрыПечати.Вставить("ВыводитьПодразделение", Ложь);
	ПараметрыПечати.Вставить("ВыводитьСоглашениеВТЧ", Ложь);
	ПараметрыПечати.Вставить("ВыводитьСкладВТЧ"     , Ложь);
	ПараметрыПечати.Вставить("ВыводитьПартнераВТЧ"  , Ложь);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
	    "Документ.ПланПродаж",
	    "ПланПродаж",
	     ДанныеПечати(ОбъектПечати),
	     Неопределено,
	     ПараметрыПечати);
	
КонецПроцедуры

// Выводит печатную форму документа "Заявка на возврат товаров от клиента" по умолчанию.
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьДокументЗаявкаНаВозврат(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента",
		"ЗаявкаНаВозврат",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Неопределено);
		
КонецПроцедуры

// Выводит печатную форму документа "Акт выполненных работ" по умолчанию
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.АктВыполненныхРабот, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьАктВыполненныхРабот(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.АктВыполненныхРабот",
		"Акт",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Неопределено);

КонецПроцедуры

// Выводит печатную форму документа "Реализация товаров и услуг" по умолчанию
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.РеализацияТоваровУслуг, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьРеализацияТоваровУслуг(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
	         "Документ.РеализацияТоваровУслуг",
	         "Накладная",
	         ДанныеПечати(ОбъектПечати),
	         Неопределено,
	         Неопределено);
	
КонецПроцедуры

// Выводит печатную форму документа "Реализация товаров и услуг" по умолчанию
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.РеализацияТоваровУслуг, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьСчетНаОплату(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьСчетовНаОплату",
		"СчетНаОплату",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Неопределено);
	
КонецПроцедуры

// Выводит печатную форму претензии клиента
//
// Параметры:
//  ОбъектПечати  - СправочникСсылка.Претензии, Массив Из СправочникСсылка.Претензии - претензии, печатные формы которых выводятся.
//
Процедура ПечатьПретензияКлиента(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.Претензии",
		"ПретензияКлиента",
		ДанныеПечати(ОбъектПечати),
		Неопределено,);
	
КонецПроцедуры

// Выводит печатную форму документа "Заказ клиента" по умолчанию
//
// Параметры:
//  ОбъектПечати  - ДокументСсылка.ЗаказКлиента, Массив - документы, печатные формы которых выводятся.
//
Процедура ПечатьДокументОтчетКомиссионера(ОбъектПечати) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьОтчетовПоКомиссии",
		"ОтчетКомиссионера",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Неопределено);
	
КонецПроцедуры

// Выводит печатную форму "Соглашения об условиях продаж" по умолчанию
//
// Параметры:
//  ОбъектПечати  - СправочникСсылка.СоглашенияСКлиентами, Массив Из СправочникСсылка.СоглашенияСКлиентами - соглашения, печатные формы которых выводятся.
//
Процедура ПечатьСоглашениеСКлиентом(ОбъектПечати) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.СоглашенияСКлиентами",
		"СоглашениеСКлиентом",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Неопределено);
	
КонецПроцедуры


//++ Локализация
	
// Выводит печатную форму "Счет-фактура выданный" по умолчанию
//
// Параметры:
//  ОбъектПечати - ДокументСсылка.СчетФактураВыданный, Массив Из ДокументСсылка.СчетФактураВыданный - документы, печатные формы которых выводятся.
//
Процедура ПечатьДокументСчетФактура(ОбъектПечати) Экспорт

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьОбщихФорм",
		"СчетФактура",
		ДанныеПечати(ОбъектПечати),
		Неопределено,
		Новый Структура("ПечатьВВалюте",Ложь));

КонецПроцедуры

//-- Локализация

Функция ДанныеПечати(ОбъектПечати)

	Если НЕ ТипЗнч(ОбъектПечати)= Тип("Массив") Тогда
		МассивОбъектовПечати = Новый Массив;
		МассивОбъектовПечати.Добавить(ОбъектПечати);
		Возврат МассивОбъектовПечати;
	Иначе
		Возврат ОбъектПечати;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти
