#Область ПрограммныйИнтерфейс

// Получает текущие параметры логирования.
// 
// Возвращаемое значение:
// 	см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов.
Функция ПараметрыЛогированияЗапросов() Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов("ПараметрыЛогированияЗапросовИСМП");
	
КонецФункции

// Сохраняет параметры логирования в параметр сеанса.
// 
// Параметры:
// 	ПараметрыЛогирования - см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов.
Процедура УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования) Экспорт
	
	ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП = ОбщегоНазначения.ФиксированныеДанные(ПараметрыЛогирования);
	
КонецПроцедуры

// Отключает режим записи логов.
// 
Процедура ОтключитьЛогированиеЗапросов() Экспорт
	
	ПараметрыЛогирования                 = ПараметрыЛогированияЗапросов();
	ПараметрыЛогирования.Включено        = Ложь;
	
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
КонецПроцедуры

// см. МенеджерОборудованияВызовСервераПереопределяемый.ПослеПроверкиКодовМаркировки
Процедура ПослеПроверкиКодовМаркировки(ДанныеОбмена) Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	
	Если Не ЛогированиеЗапросовИС.ВыполняетсяЛогированиеЗапросов(ПараметрыЛогирования) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = Новый Массив();
	
	Для Каждого ДанныеПроверки Из ДанныеОбмена Цикл
		Если ЗначениеЗаполнено(ДанныеПроверки.ЗапросКМ) Тогда
			ДанныеЗаписи.Добавить(НСтр("ru = 'Запрос КМ на ККТ:'"));
			ДанныеЗаписи.Добавить(ДанныеПроверки.ЗапросКМ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПроверки.ЛокальныйОтветКМ) Тогда
			ДанныеЗаписи.Добавить(НСтр("ru = 'Локальный ответ ККТ на запрос КМ:'"));
			ДанныеЗаписи.Добавить(ДанныеПроверки.ЛокальныйОтветКМ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПроверки.УдаленныйОтветКМ) Тогда
			ДанныеЗаписи.Добавить(НСтр("ru = 'Ответ ОИСМ на запрос КМ:'"));
			ДанныеЗаписи.Добавить(ДанныеПроверки.УдаленныйОтветКМ);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеЗаписи) Тогда
		ЛогированиеЗапросовИСМПВызовСервера.Вывести(СтрСоединить(ДанныеЗаписи, Символы.ПС));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершает уровень логирования, установленный методом см. ВключитьЛогированиеЗапросов с признаком НовыйЛог.
// 
// Параметры:
// 	ИдентификаторЗаписи - Строка - Идентификатор уровня логирования.
// Возвращаемое значение:
// 	Неопределено, Строка - Результат записи логов запросов.
Функция ЗавершитьЛогированиеЗапросовПоИдентификатору(ИдентификаторЗаписи) Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	СодержаниеЛога       = ЛогированиеЗапросовИС.СодержаниеЛогаЗапросов(ПараметрыЛогирования, ИдентификаторЗаписи);
	
	Если СодержаниеЛога <> Неопределено Тогда
		УдалитьФайлЛога(ИдентификаторЗаписи, ПараметрыЛогирования);
	КонецЕсли;
	
	Если ПараметрыЛогирования.ТекущийИдентификатор = ИдентификаторЗаписи Тогда
		
		Если ПараметрыЛогирования.СтекПараметров.Количество() = 0 Тогда
			ОтключитьЛогированиеЗапросов();
		Иначе
			ИндексСтека                               = ПараметрыЛогирования.СтекПараметров.ВГраница();
			ПараметрыСтрека                           = ПараметрыЛогирования.СтекПараметров.Получить(ИндексСтека);
			ПараметрыЛогирования.ТекущийИдентификатор = ПараметрыСтрека.ТекущийИдентификатор;
			ПараметрыЛогирования.Включено             = ПараметрыСтрека.Включено;
			ПараметрыЛогирования.ОкончаниеЗаписи      = ПараметрыСтрека.ОкончаниеЗаписи;
			ПараметрыЛогирования.СтекПараметров.Удалить(ИндексСтека);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
	Возврат СодержаниеЛога;
	
КонецФункции

// Дополняет возвращаемые данные (данные, которые помещаются во временное хранилище при завершении длительной операции)
// данными логирования запросов.
// Параметры:
// 	ДанныеДокумента - Структура - Возвращаемые из фонового задания данные.
Процедура ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ДанныеДокумента) Экспорт
	
	Если ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере()
		И ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
		
		Если ПараметрыЛогирования.Включено Тогда
			
			ДанныеЛогаЗапросов = ЗавершитьЛогированиеЗапросовПоИдентификатору(ПараметрыЛогирования.ТекущийИдентификатор);
			
			Если ДанныеЛогаЗапросов <> Неопределено Тогда
				ДанныеДокумента.Вставить("ДанныеЛогаЗапросов", ДанныеЛогаЗапросов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Дописывает полученные данные лога запросов в текущий уровень логирования.
// 
// Параметры:
// 	ДанныеДокумента - Структура:
// 	* ДанныеЛогаЗапросов - Строка - Данные для записи в лог запросов
Процедура ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ДанныеДокумента) Экспорт
	
	ЛогированиеЗапросовИС.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ДанныеДокумента, ПараметрыЛогированияЗапросов());
	
КонецПроцедуры

// Настраивает данные по штрихкодам для логирования.
// 
// Параметры:
// 	ДанныеПоШтрихкодам    - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
// 	ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
// 	Включить              - Булево - Флаг начала логирования.
// 	ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор, Неопределено - Идентификатор для результата.
Процедура НастроитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Включить = Ложь, ФормаУникальныйИдентификатор = Неопределено) Экспорт
	
	Если Не ПараметрыСканирования.ЗаписыватьЛогЗапросовИСМП Тогда
		Возврат;
	КонецЕсли;
	
	Если Включить Тогда
		
		Если Не ДанныеПоШтрихкодам.ЛогированиеЗапросов.Используется Тогда
			
			ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
			ДанныеПоШтрихкодам.ЛогированиеЗапросов.Используется = Истина;
			ПараметрыЛогирования = ЛогированиеЗапросовИС.ВключитьЛогированиеЗапросов(ПараметрыЛогирования,, Истина);
			УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
			
			ДанныеПоШтрихкодам.ЛогированиеЗапросов.ИдентификаторЛога = ПараметрыЛогирования.ТекущийИдентификатор;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеПоШтрихкодам.ЛогированиеЗапросов.Используется Тогда
			
			ДанныеПоШтрихкодам.ЛогированиеЗапросов.Используется = Ложь;
			
			ЛогЗапросов = ЗавершитьЛогированиеЗапросовПоИдентификатору(
				ДанныеПоШтрихкодам.ЛогированиеЗапросов.ИдентификаторЛога);
			
			Если ТипЗнч(ФормаУникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
				АдресПомещения = ФормаУникальныйИдентификатор;
			ИначеЕсли ТипЗнч(ФормаУникальныйИдентификатор) = Тип("ФормаКлиентскогоПриложения") Тогда
				АдресПомещения = ФормаУникальныйИдентификатор.УникальныйИдентификатор;
			Иначе
				АдресПомещения = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			АдресЛогаЗапросов = ПоместитьВоВременноеХранилище(ЛогЗапросов, АдресПомещения);
			ДанныеПоШтрихкодам.ЛогированиеЗапросов.АдресЛогаЗапросов = АдресЛогаЗапросов;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текствое описание текущего окружения и параметров.
// 
// Возвращаемое значение:
// 	Строка - Текстовое описание текущего окружения.
Функция ИнформацияОбОкружении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОкружения = Новый Массив();
	ЛогированиеЗапросовИС.ДополнитьИнформациюОбОкруженииШапка(ДанныеОкружения);
	
	СинонимыНастроекСканирования = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПредставленияПараметровСканирования();
	НастройкиСканирования        = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	ДанныеОкружения.Добавить(
		СтрШаблон(
			"%1: %2",
			Метаданные.Константы.ЗапрашиватьДанныеСервисаИСМП.Синоним,
			НастройкиСканирования.ЗапрашиватьДанныеСервисаИСМП));
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	Для Каждого КлючИЗначение Из ПараметрыКонтроля Цикл
		
		ГруппаНастроек = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
			НастройкиСканирования,
			КлючИЗначение.Ключ);
		
		ПредставленияИсключения = НастройкаПараметровСканированияСлужебныйКлиентСервер.ПредставленияИсключения(
			ГруппаНастроек);
		
		ЗначениеДетальнойНастройки = "";
		
		Если ГруппаНастроек.Включено
			И ЗначениеЗаполнено(ПредставленияИсключения.ПолноеВОднуСтроку) Тогда
			ЗначениеДетальнойНастройки = СтрШаблон(", %1", ПредставленияИсключения.ПолноеВОднуСтроку);
		КонецЕсли;
		
		ПредставлениеПараметра = СинонимыНастроекСканирования.Получить(КлючИЗначение.Ключ);
		Если ПредставлениеПараметра = Неопределено Тогда
			ПредставлениеПараметра = НастройкаПараметровСканированияСлужебныйКлиентСервер.ПредставлениеПараметраБезСинонима(КлючИЗначение.Ключ);
		КонецЕсли;
		
		ДанныеОкружения.Добавить(
			СтрШаблон(
				"%1: %2%3",
				ПредставлениеПараметра,
				Формат(ГруппаНастроек.Включено, "ДФ=dd.MM.yyyy; БЛ=Нет; БИ=Да;"),
				ЗначениеДетальнойНастройки));
		
	КонецЦикла;
	
	ОтключенаТабачнаяПродукция = Не (
		ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
			Перечисления.ВидыПродукцииИС.Табак)
		Или ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
			Перечисления.ВидыПродукцииИС.АльтернативныйТабак)
		Или ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
			Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция));
	
	ОтключенныеНастройки = Новый Соответствие();
	ОтключенныеНастройки.Вставить("ЗапрашиватьДанныеСервисаИСМП",      Истина);
	ОтключенныеНастройки.Вставить("ПараметрыКонтроляСтатусов",         Истина);
	ОтключенныеНастройки.Вставить("ПараметрыКонтроляВладельцев",       Истина);
	ОтключенныеНастройки.Вставить("ПараметрыИгнорированияПроверкиККТ", Истина);
	ОтключенныеНастройки.Вставить("УчитыватьМРЦ",                                              ОтключенаТабачнаяПродукция);
	ОтключенныеНастройки.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП", ОтключенаТабачнаяПродукция);
	ОтключенныеНастройки.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП", ОтключенаТабачнаяПродукция);
	ОтключенныеНастройки.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП", ОтключенаТабачнаяПродукция);
	
	Для Каждого КлючИЗначение Из НастройкиСканирования Цикл
		ИмяНастройки = КлючИЗначение.Ключ;
		Если ОтключенныеНастройки.Получить(ИмяНастройки) <> Неопределено
			И ОтключенныеНастройки.Получить(ИмяНастройки) Тогда
			Продолжить;
		КонецЕсли;
		Заголовок = СинонимыНастроекСканирования.Получить(ИмяНастройки);
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = НастройкаПараметровСканированияСлужебныйКлиентСервер.ПредставлениеПараметраБезСинонима(ИмяНастройки);
		КонецЕсли;
		Значение = СинонимыНастроекСканирования.Получить(КлючИЗначение.Значение);
		Если Значение = Неопределено Тогда
			Значение = НастройкаПараметровСканированияСлужебныйКлиентСервер.ПредставлениеПараметраБезСинонима(КлючИЗначение.Значение);
		КонецЕсли;
		ДанныеОкружения.Добавить(
			СтрШаблон(
				"%1: %2",
				Заголовок,
				Формат(Значение, "ДФ=dd.MM.yyyy; БЛ=Нет; БИ=Да;")));
	КонецЦикла;
	
	ДанныеОкружения.Добавить(
		СтрШаблон(
			"%1: %2",
			Метаданные.Константы.РежимРаботыСТестовымКонтуромИСМП.Синоним,
			ОбщегоНазначенияИСМПКлиентСерверПовтИсп.РежимРаботыСТестовымКонтуромИСМП()));
	
	ЛогированиеЗапросовИС.ДополнитьИнформациюОбОкруженииПодвал(ДанныеОкружения);
	
	УчитываемыеВидыПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ДанныеОкружения.Добавить(
			СтрШаблон(
				НСтр("ru = 'Ведется учет: %1'"),
				СтрСоединить(УчитываемыеВидыПродукции, ", ")));
	
	Возврат СтрСоединить(ДанныеОкружения, Символы.ПС);
	
КонецФункции

#Область ЛогированиеПротоколОбмена

// Включает логирование запросов для протокола обмена в текущем сейнсе на время ЗаписыватьСекунд.
// 
// Возвращаемое значение:
// 	см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов.
Функция ВключитьЛогированиеЗапросовДляПротоколаОбмена() Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	
	Если Не ЗначениеЗаполнено(ПараметрыЛогирования.ТекущийИдентификаторПротоколОбмена) Тогда
		ЛогированиеЗапросовИС.УстановитьНовыйЛогПротоколаОбмена(ПараметрыЛогирования);
	КонецЕсли;
	
	ПараметрыЛогирования.ВключеноПротоколОбмена = Истина;
	
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
	Возврат ПараметрыЛогирования;
	
КонецФункции

// Отключает режим записи логов для протокола обмена.
// 
Процедура ОтключитьЛогированиеЗапросовДляПротоколаОбмена() Экспорт
	
	ПараметрыЛогирования                        = ПараметрыЛогированияЗапросов();
	ПараметрыЛогирования.ВключеноПротоколОбмена = Ложь;
	
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
КонецПроцедуры

// Завершает уровень логирования для протокола обмена, установленный методом см. ВключитьЛогированиеЗапросовДляПротоколаОбмена.
// 
// Параметры:
// 	ИдентификаторЗаписи - Строка - Идентификатор уровня логирования.
// Возвращаемое значение:
// 	Неопределено, Строка - Результат записи логов запросов.
Функция ЗавершитьЛогированиеЗапросовПоИдентификаторуПротоколаОбмена(ИдентификаторЗаписи) Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	СодержаниеЛога       = СодержаниеЛогаЗапросовПротоколОбмена(ИдентификаторЗаписи);
	
	Если СодержаниеЛога <> Неопределено Тогда
		УдалитьФайлыЛогаПротоколОбмена(ИдентификаторЗаписи, ПараметрыЛогирования);
	КонецЕсли;
	
	ПараметрыЛогирования.ВключеноПротоколОбмена = Ложь;
	
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
	Возврат СодержаниеЛога;
	
КонецФункции

// Получает содержимое лога запросов для протокола обмена  по идентификатору уровня лога или содержание осноного уровня
// 
// Параметры:
//  ИдентификаторЗаписи - Неопределено, Строка - Идентификатор логирования протокола обмена.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Записанные данные запросов. (См. ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена).
Функция СодержаниеЛогаЗапросовПротоколОбмена(ИдентификаторЗаписи = Неопределено) Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	ПротоколОбмена = ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена(Истина);
	Если ЗначениеЗаполнено(ИдентификаторЗаписи) Тогда
		ФайлыПротоколаОбмена = ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена.Получить(ИдентификаторЗаписи);
	Иначе
		ФайлыПротоколаОбмена = ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена.Получить(ПараметрыЛогирования.ТекущийИдентификаторПротоколОбмена);
	КонецЕсли;
	
	Если ФайлыПротоколаОбмена = Неопределено Тогда
		Возврат ПротоколОбмена;
	КонецЕсли;
	
	Для Каждого ИмяФайла Из ФайлыПротоколаОбмена Цикл
		Файл = Новый Файл(ИмяФайла);
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		ТекстСообщенияXML = ЧтениеТекста.Прочитать();
		ДанныеПротокола = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстСообщенияXML);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПротокола.ПротоколОбмена, ПротоколОбмена);
		
	КонецЦикла;
	
	Если ЧтениеТекста <> Неопределено Тогда
		ЧтениеТекста.Закрыть();
	КонецЕсли;
		
	Возврат ПротоколОбмена;
	
КонецФункции

// Выполняет запись HTTP запроса / ответа в файл логирования в формат протокола обмена, если запись лога включена.
// 
// Параметры:
// 	ДанныеЗаписи - см. НоваяСтруктураДанныхЗаписи.
Процедура ВывестиДанныеДляПротоколаОбмена(РезультатЗапроса) Экспорт
	
	ПараметрыЛогирования = ПараметрыЛогированияЗапросов();
	Если Не ЛогированиеЗапросовИС.ВыполняетсяЛогированиеЗапросовДляПротоколаОбмена(ПараметрыЛогирования) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПротоколОбмена", Неопределено);
	
	ПротоколОбмена = ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена(Истина);
	Результат.ПротоколОбмена = ПротоколОбмена;
	
	ПараметрыОтправкиHTTPЗапросов = РезультатЗапроса.ПараметрыОтправкиHTTPЗапросов;
	HTTPМетод                     = РезультатЗапроса.HTTPМетод;
	HTTPЗапрос                    = РезультатЗапроса.HTTPЗапрос;
	HTTPОтвет                     = РезультатЗапроса.HTTPОтвет;
	
	ЗапросЗаголовки = Новый Массив;
	Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
		ЗапросЗаголовки.Добавить(
			СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	ЗаписьПротокола = ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Запрос            = ОбщегоНазначенияИСМП.URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
	ЗаписьПротокола.ЗапросЗаголовки   = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.ЗапросТело        = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет <> Неопределено Тогда
		
		ЗаписьПротокола.ОтветЗаголовки = ОбщегоНазначенияИСМП.ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
			ЗаписьПротокола.ОтветТело = HTTPОтвет.Тело;
		Иначе
			ЗаписьПротокола.ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		ЗаписьПротокола.КодСостояния = Строка(HTTPОтвет.КодСостояния);
		
		Если РезультатЗапроса.Свойство("ТекстОшибки")
			И Не ЗначениеЗаполнено(ЗаписьПротокола.ОтветТело) Тогда
			ЗаписьПротокола.ОтветТело = РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		
	Иначе
		ЗаписьПротокола.ОтветТело = РезультатЗапроса.ТекстОшибки;
	КонецЕсли;
	
	ТекущийИдентификатор = ПараметрыЛогирования.ТекущийИдентификаторПротоколОбмена;
	ФайлыПротокола = ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена.Получить(ТекущийИдентификатор);
	Если ФайлыПротокола = Неопределено Тогда
		ФайлыПротокола = Новый Массив;
	КонецЕсли;
	ИмяФайла = ПолучитьИмяВременногоФайла(".log");
	ФайлыПротокола.Добавить(ИмяФайла);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8,, Ложь);
	ЗаписьТекста.ЗаписатьСтроку(ОбщегоНазначения.ЗначениеВСтрокуXML(Результат));
	ЗаписьТекста.Закрыть();
	
	ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена[ТекущийИдентификатор] = ФайлыПротокола;
	УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет файл, в который ранее писался лог запросов по идентификатору.
// 
// Параметры:
// 	ИдентификаторЗаписи - Строка - Идентификатор лога запросов.
// 	ПараметрыЛогирования - см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов.
Процедура УдалитьФайлЛога(ИдентификаторЗаписи, ПараметрыЛогирования)
	
	ИмяФайла = ПараметрыЛогирования.ФайлыЛогирования.Получить(ИдентификаторЗаписи);
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЕсли;

КонецПроцедуры

// Удаляет файл, в который ранее писался лог запросов по идентификатору.
// 
// Параметры:
// 	ИдентификаторЗаписи - Строка - Идентификатор лога запросов.
// 	ПараметрыЛогирования - см. ЛогированиеЗапросовИС.ПараметрыЛогированияЗапросов.
Процедура УдалитьФайлыЛогаПротоколОбмена(ИдентификаторЗаписи, ПараметрыЛогирования)
	
	ФайлыПротоколаОбмена = ПараметрыЛогирования.ФайлыЛогированияПротоколОбмена.Получить(ИдентификаторЗаписи);
	Если ФайлыПротоколаОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяФайла Из ФайлыПротоколаОбмена Цикл
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлыПротоколаОбмена.Очистить();
	
КонецПроцедуры

#КонецОбласти