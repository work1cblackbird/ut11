#Область ПрограммныйИнтерфейс

#Область ПроверкаКодовМаркировкиСредствамиКТТ

// Формирует новый элемент проверки средствами ККТ на основании данных распределения.
// 
// Параметры:
//  РезультатРаспределения - см. ШтрихкодированиеИСМП.НовыйРезультатРаспределенияШтрихкодовПоТоварам.
// 
// Возвращаемое значение:
//  Структура - см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ
Функция НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения(РезультатРаспределения) Экспорт
	
	ЭлементДанных = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементДанныхПроверкиСредствамиККТ();
	ЗаполнитьЗначенияСвойств(
		ЭлементДанных,
		РезультатРаспределения,
		"ВидПродукции,ВидУпаковки,КодМаркировки,ПолныйКодМаркировки,СоставКодаМаркировки,ШтрихкодУпаковки,
		|Количество,ТекстОшибки,КодЕдиницыИзмерения,КоличествоПотребительскихУпаковок,РазрешительныйРежимИдентификаторЗапросаГИСМТ,РазрешительныйРежимДатаЗапросаГИСМТ");
	
	Если РезультатРаспределения.ЧастичноеВыбытие
		И ЗначениеЗаполнено(РезультатРаспределения.ЕмкостьПотребительскойУпаковки) Тогда
		ЭлементДанных.ЧастичноеВыбытиеКоличество     = РезультатРаспределения.ЧастичноеВыбытиеКоличество;
		ЭлементДанных.ЕмкостьПотребительскойУпаковки = РезультатРаспределения.ЕмкостьПотребительскойУпаковки;
		ЭлементДанных.ЧастичноеВыбытиеОстаток        = РезультатРаспределения.ЧастичноеВыбытиеОстаток;
		ЭлементДанных.ЧастичноеВыбытиеКомментарий    = РезультатРаспределения.ЧастичноеВыбытиеКомментарий;
	КонецЕсли;
	
	Возврат ЭлементДанных;
	
КонецФункции

// Выполняет проверку результата завершения проверки средствами ККТ и определяет необходимость фискализации.
// Например, в результате проверки были найдены ошибки, но пользователь согласен продолжать и игнорирует ошибки.
// Параметры:
//  Результат - см. НовыйРезультатПроверкиСредствамиККТ
// 
// Возвращаемое значение:
//  Булево - Результат проверки не препятствует фискализации.
Функция РезультатПроверкиСредствамиККТТребуетФискализации(Результат) Экспорт
	
	Возврат Результат.ВыполнитьФискализацию;
	
КонецФункции

// Выполняет проверку результата завершения проверки средствами ККТ и определяет необходимость закрытия не основной формы.
// Например, для пробития чека используется дополнительная форма, а в форме ошибки выполнено действие, приводящее к открытию
// дополнительных форм. В таком случае вспомогательная форма становится не актуальной и требует закрытия.
// Параметры:
//  Результат - см. НовыйРезультатПроверкиСредствамиККТ
// 
// Возвращаемое значение:
//  Булево - Требуется закрыть вспомогательную форму.
Функция РезультатПроверкиСредствамиККТЗакрытьВспомогательнуюФорму(Результат) Экспорт
	
	Возврат Результат.ЗакрытьВспомогательнуюФорму;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Открывает форму, которая информирует пользователя об ошибке добавления введенного штрихкода.
//
Процедура ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытияФормы.ВидПродукции) Тогда
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ИнформацияОНевозможностиДобавленияОтсканированного",
			ПараметрыОткрытияФормы, Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ИнформацияОНевозможностиДобавленияОтсканированного",
			ПараметрыОткрытияФормы, Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработкаРасширенныхУточненийДанныхПоШтрихкодам(ПараметрыЗавершенияВводаШтрихкода) Экспорт
	
	Форма                       = ПараметрыЗавершенияВводаШтрихкода.Форма;
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода;
	ПараметрыСканирования       = ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования;

	Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		ШтрихкодированиеИСКлиент.УточнитьДанныеУПользователя(
			Форма, РезультатОбработкиШтрихкода.ПараметрыУточненияДанных, ОписаниеОповещения);

		Возврат Истина;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ВыводитьСообщенияОбОшибках
		И (РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
		Или РезультатОбработкиШтрихкода.ЕстьОшибки
		Или ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ТекстОшибки)) Тогда
		
		ВидПродукции                 = Неопределено;
		ДанныеКодаМаркировки         = Неопределено;
		ДоступнаПечатьКодаМаркировки = Ложь;
		Если ТипЗнч(РезультатОбработкиШтрихкода.ДанныеШтрихкода) = Тип("Структура") Тогда
			
			ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ПредставлениеНоменклатуры) Тогда
				ПредставлениеНоменклатуры = Строка(ДанныеШтрихкода.ПредставлениеНоменклатуры);
			ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				ПредставлениеНоменклатуры = Строка(ДанныеШтрихкода.Номенклатура);
			Иначе
				ПредставлениеНоменклатуры = НСтр("ru = '<Неизвестная маркируемая продукция>'");
			КонецЕсли;
			
			ВидПродукции = ДанныеШтрихкода.ВидПродукции;
			
			Если Не ЗначениеЗаполнено(РезультатОбработкиШтрихкода.АдресДереваУпаковок)
				И (ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП
				Или ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП)
				И ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки
				И ДанныеШтрихкода.Свойство("ДанныеРазбора")
				И ТипЗнч(ДанныеШтрихкода.ДанныеРазбора) = Тип("Структура")
				И ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
				И ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетКриптоХвост
				И ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки.ВключаетИдентификаторыПрименения
				И ДанныеШтрихкода.ДанныеРазбора.Свойство("Детализация")
				И ТипЗнч(ДанныеШтрихкода.ДанныеРазбора.Детализация) = Тип("Структура")
				И Не ДанныеШтрихкода.ДанныеРазбора.Детализация.СодержитРазделительGS
				И (ДанныеШтрихкода.ЕстьВПулеКодовМаркировки
				Или ЗначениеЗаполнено(ДанныеШтрихкода.ПолныйКодМаркировки)) Тогда
				
				ДоступнаПечатьКодаМаркировки = Истина;
				
				ДанныеКодаМаркировки = Новый Структура;
				ДанныеКодаМаркировки.Вставить("ПараметрыСканирования", ПараметрыСканирования);
				ДанныеКодаМаркировки.Вставить("ДанныеШтрихкода",       ДанныеШтрихкода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции);
		ПараметрыОткрытияФормы.Штрихкод                     = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытияФормы.ТекстОшибки                  = РезультатОбработкиШтрихкода.ТекстОшибки;
		ПараметрыОткрытияФормы.Организация                  = ПараметрыСканирования.Организация;
		ПараметрыОткрытияФормы.ТипШтрихкода                 = РезультатОбработкиШтрихкода.ТипШтрихкода;
		ПараметрыОткрытияФормы.ПредставлениеНоменклатуры    = ПредставлениеНоменклатуры;
		ПараметрыОткрытияФормы.АдресДереваУпаковок          = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ПараметрыОткрытияФормы.ПараметрыОшибки              = РезультатОбработкиШтрихкода.ПараметрыОшибки;
		ПараметрыОткрытияФормы.ИмяФормыИсточник             = Форма.ИмяФормы;
		ПараметрыОткрытияФормы.ДоступнаПечатьКодаМаркировки = ДоступнаПечатьКодаМаркировки;
		ПараметрыОткрытияФормы.ДанныеКодаМаркировки         = ДанныеКодаМаркировки;
		
		ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

//Выполняет действия после выбора серии пользователем.
//
//Параметры:
//   РезультатВыбора        - ОпределяемыйТип.СерияНоменклатуры - выбранная серия.
//  ДополнительныеПараметры - Структура - данные источника вызова
//
Процедура УточненияДанныхЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		Если ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
		Иначе
			ОповещениеЗавершениеОбработки = Новый ОписаниеОповещения(ДополнительныеПараметры.ЗавершениеОбработки, ДополнительныеПараметры.Форма);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.Свойство("ВызовИзФормыДокумента") Тогда
		Если ДополнительныеПараметры.ВызовИзФормыДокумента Тогда

			Действие = "ОбработатьВыборСерии";
			РезультатОбработкиШтрихкода = Форма.Подключаемый_ВыполнитьДействие(
				Действие,
				РезультатВыбора,
				ДополнительныеПараметры.РезультатОбработкиШтрихкода,
				ДополнительныеПараметры.КэшированныеЗначения);

			ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","","");
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
			ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
			ДополнительныеПараметры.Свойство("ЗавершениеОбработки", ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки);
			ШтрихкодированиеОбщегоНазначенияИСМПКлиент.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);

		Иначе

			ДанныеШтрихкода = ШтрихкодированиеИСВызовСервера.ОбработатьДанныеШтрихкодаПослеВыбораСерии(
				ДополнительныеПараметры.РезультатОбработкиШтрихкода, РезультатВыбора);

			ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);

			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ДанныеШтрихкода);

		КонецЕсли;
		
	Иначе

		РезультатУточнения = Новый Структура;
		РезультатУточнения.Вставить("РезультатВыбора",             РезультатВыбора);
		РезультатУточнения.Вставить("КэшированныеЗначения",        ДополнительныеПараметры.КэшированныеЗначения);
		РезультатУточнения.Вставить("ПараметрыСканирования",       ДополнительныеПараметры.ПараметрыСканирования);
		РезультатУточнения.Вставить("Действие",                    "ОбработатьУточнениеДанных");
		РезультатУточнения.Вставить("РезультатОбработкиШтрихкода", ДополнительныеПараметры.РезультатОбработкиШтрихкода);
		РезультатУточнения.Вставить("ИсходныеДанные",              ДополнительныеПараметры.ДанныеШтрихкода);
		ОповещениеВыполнитьДействие = Новый ОписаниеОповещения(ДополнительныеПараметры.ВыполнитьДействие, Форма);
		ВыполнитьОбработкуОповещения(ОповещениеВыполнитьДействие, РезультатУточнения);

	КонецЕсли;
	
КонецПроцедуры

// Открыывает форму проверки кодов маркировки с параметрами.
// 
// Параметры:
// 	ПараметрыОткрытия   - Структура, Неопределено                  - Параметры открытия формы.
// 	ВладелецФормы       - ФормаКлиентскогоПриложения, Неопределено - Владелец открываемой формы.
// 	ОповещениеОЗакрытии - ОписаниеОповещения, Неопределено         - Описание оповещения при закрытии формы.
Процедура ОткрытьФормуПроверкиКодовМаркировки(ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ВладелецФормы = Неопределено Тогда
		РежимОткрытия = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПроверкаКодовМаркировкиИСМП.Форма",
		ПараметрыОткрытия,
		ВладелецФормы,,,,
		ОповещениеОЗакрытии,
		РежимОткрытия);
	
КонецПроцедуры

Процедура СохранениеПолногоКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ДанныеШтрихкода.Свойство("ЕстьВПулеКодовМаркировки")
		Или ДанныеШтрихкода.ЕстьВПулеКодовМаркировки
		Или ПараметрыСканирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
		И Не ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ДанныеРазбора <> Неопределено
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода.ДанныеРазбора.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
		ШтрихкодированиеИСМПВызовСервера.СохранениеПолногоКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеШтрихкодаПриВыбореКодаМаркировкиВФормеУточнения(ДанныеШтрихкода, РезультатВыбора) Экспорт
	
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ТипЗнч(РезультатВыбора) = Тип("Структура")
		И РезультатВыбора.Свойство("ДанныеВыбора")
		И РезультатВыбора.ДанныеВыбора.Свойство("ЧастичноеВыбытие")
		И РезультатВыбора.ДанныеВыбора.ЧастичноеВыбытие
		И Не (РезультатВыбора.ДанныеВыбора.КодМаркировки = ДанныеШтрихкода.Штрихкод // Это замена EAN на Код маркировки на оборудовании
			Или РезультатВыбора.ДанныеВыбора.КодМаркировки = ДанныеШтрихкода.НормализованныйШтрихкод) Тогда
		
		ДанныеШтрихкода.Штрихкод                 = РезультатВыбора.ДанныеВыбора.КодМаркировки;
		ДанныеШтрихкода.НормализованныйШтрихкод  = РезультатВыбора.ДанныеВыбора.КодМаркировки;
		ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры  = Ложь;
		ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета = Истина;
		ДанныеШтрихкода.ПолныйКодМаркировки      = РезультатВыбора.ДанныеВыбора.ПолныйКодМаркировки;
		ДанныеШтрихкода.ШтрихкодBase64           = РезультатВыбора.ДанныеВыбора.ПолныйКодМаркировки;
		ДанныеШтрихкода.ШтрихкодУпаковки         = РезультатВыбора.ДанныеВыбора.ЧастичноеВыбытиеШтрихкодУпаковки;
		Если ЗначениеЗаполнено(РезультатВыбора.ДанныеВыбора.ПолныйКодМаркировки) Тогда
			ДанныеШтрихкода.ЕстьВПулеКодовМаркировки = Истина;
			РезультатРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
				ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(РезультатВыбора.ДанныеВыбора.ПолныйКодМаркировки),
				ДанныеШтрихкода.ВидПродукции);
			ДанныеШтрихкода.ДанныеРазбора        = РезультатРазбора;
			Если РезультатРазбора <> Неопределено Тогда
				ДанныеШтрихкода.СоставКодаМаркировки = РезультатРазбора.СоставКодаМаркировки;
			КонецЕсли;
		КонецЕсли;
		Если РезультатВыбора.ДанныеВыбора.ДанныеСтатуса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, РезультатВыбора.ДанныеВыбора.ДанныеСтатуса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПотоковаяПечать

// Это событие потоковой печати
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из которой вызвано событие
//  ДанныеШтрихкода - Структура - данные считанного штрихкода
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// 
// Возвращаемое значение:
//  Булево - сканирован GTIN с сохраненным выбором для сценария "Потоковая печать кодов маркировки"
//
Функция ЭтоСобытиеПотоковойПечати(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.ДоступнаПечатьЭтикеток Тогда
		Возврат Ложь;
	ИначеЕсли ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Свойство("ШаблонМаркировки")
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.ШаблонМаркировки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(ДанныеШтрихкода.Штрихкод) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ДанныеШтрихкода.Штрихкод);
	ДанныеВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если GTIN <> ДанныеВыбора.GTIN Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Неопределено, Ложь);
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработать событие потоковой печати
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из которой вызвано событие
//  ДанныеШтрихкода - Структура - данные считанного штрихкода
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ДополнительныеПараметры - Неопределено, Структура - возможный источник веса для КМ требующих взвешивания
//
Процедура ОбработатьСобытиеПотоковойПечати(Форма, ДанныеШтрихкода, ПараметрыСканирования, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЭтоСобытиеПотоковойПечати(Форма, ДанныеШтрихкода, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	ДополнитьПолныйКодМаркировки = "";
	
	СтруктураПечати = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Организация") Тогда
		СтруктураПечати.Организация    = Форма.Организация;
		СтруктураПечати.ВидПродукции   = Форма.ВидМаркируемойПродукции;
		ДокументПечати                 = Форма.ПроверяемыйДокумент;
	Иначе
		СтруктураПечати.Организация    = Форма.Объект.Организация;
		СтруктураПечати.ВидПродукции   = Форма.Объект.ВидПродукции;
		ДокументПечати                 = Форма.Объект.Ссылка;
	КонецЕсли;
	СтруктураПечати.Номенклатура       = ДанныеВыбора.Номенклатура;
	СтруктураПечати.Характеристика     = ДанныеВыбора.Характеристика;
	СтруктураПечати.Серия              = ДанныеВыбора.Серия;
	СтруктураПечати.ШаблонЭтикетки     = ДанныеВыбора.ШаблонЭтикетки;
	СтруктураПечати.Шаблон             = ДанныеВыбора.ШаблонМаркировки;
	СтруктураПечати.СпособВводаВОборот = ПараметрыСканирования.ДопустимыйСпособВводаВОборот;
	
	Если ДанныеВыбора.ТребуетВзвешивания Тогда
		
		Если ДанныеШтрихкода.Свойство("ТребуетВзвешивания") Тогда
			СтруктураПечати.Количество = ДанныеШтрихкода.Количество;
		Иначе
			СтруктураПечати.Количество = ДополнительныеПараметры.РезультатВзвешивания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПечати.Количество) Тогда
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(СтруктураПечати.ВидПродукции)
				Или СтруктураПечати.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
				ДополнитьПолныйКодМаркировки = "3103";
			ИначеЕсли СтруктураПечати.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
				Или СтруктураПечати.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
				Или СтруктураПечати.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
				ДополнитьПолныйКодМаркировки = "3353";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоМаркировкаОстатков") И ПараметрыСканирования.ЭтоМаркировкаОстатков Тогда
		СтруктураПечати.МаркировкаОстатков = Истина;
	КонецЕсли;
	
	ДанныеДляПечати = ПечатьЭтикетокИСМПКлиентСервер.ДанныеДляПечатиЭтикеток(СтруктураПечати, Форма, ДокументПечати, ДополнитьПолныйКодМаркировки);
	СтруктураРезультата = ПечатьЭтикетокИСМПВызовСервера.ПечатьЭтикетокСРезервированиемПоДокументу(ДанныеДляПечати);
	
	Если СтруктураРезультата <> Неопределено
			И СтруктураРезультата.РезультатРезервирования.Количество() Тогда
		СтрокаРезультат = СтруктураРезультата.РезультатРезервирования.Получить(0);
		
		// Подмена кода кодом из пула
		ДанныеШтрихкода.Вставить("Штрихкод",     СтрокаРезультат.ПолныйКодМаркировки);
		ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
		
		// Оптимизация параметров сканирования
		ПараметрыСканирования.ДопустимыйСпособВводаВОборот      = Неопределено;
		ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП = Истина;
		
		Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования) Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеНеизвестныхУпаковокИСМП(ПараметрыСканирования, Ложь);
		КонецЕсли;
		// Печать КМ
		ПечатьЭтикетокИСМПКлиент.ВывестиНаПечатьТабличныйДокумент(
			СтруктураРезультата.ТабличныйДокумент, Форма, ДанныеВыбора.СразуНаПринтер);
		Если Не ДанныеВыбора.СразуНаПринтер Тогда
			Форма.Активизировать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать событие считывания GTIN
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма из которой вызвано событие
//  ДанныеШтрихкода - Структура - данные считанного штрихкода
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//
Процедура ОбработатьСобытиеСканированияGTINДляОСУ(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Свойство("КодМаркировки")
		Или Не ЗначениеЗаполнено(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.КодМаркировки) Тогда
		Возврат;
	ИначеЕсли Не ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Свойство("ВидУпаковки")
		Или ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(ДанныеШтрихкода.Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ДанныеШтрихкода.Штрихкод);
	ДанныеВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если GTIN <> ДанныеВыбора.GTIN Тогда
		ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Неопределено, Ложь);
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Подмена кода кодом из пула
	ДанныеШтрихкода.Вставить("Штрихкод",     ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.КодМаркировки);
	ДанныеШтрихкода.Вставить("ФорматBase64", Ложь);
	
КонецПроцедуры

// Выполняет обработку навигационной ссылки в тексте ошибки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма-источние события.
// 	НавигационнаяСсылкаФорматированнойСтроки - Строка - Данные навигационной ссылки.
// 	СтандартнаяОбработка                     - Булево - Признак стандартной обработки.
Процедура ОбработкаНавигационнойСсылкиТекстаОшибки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПроверкуКодаМаркировкиИСМП" Тогда
		
		ПараметрыОткрытияПроверкиКМ              = ЛогированиеЗапросовИСМПКлиент.ПараметрыОткрытияПроверкиКодовМаркирови();
		ПараметрыОткрытияПроверкиКМ.Штрихкоды    = Форма.Штрихкод;
		ПараметрыОткрытияПроверкиКМ.Организация  = Форма.Организация;
		ПараметрыОткрытияПроверкиКМ.ВидПродукции = Форма.ВидПродукции;
		
		ЛогированиеЗапросовИСМПКлиент.ОткрытьРабочееМестоПроверкиКодовМаркировки(ПараметрыОткрытияПроверкиКМ, Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЛогЗапросов" Тогда
		
		ЛогированиеЗапросовИСКлиент.ОткрытьПросмотрЛогаЗапросов(Форма.УникальныйИдентификатор, "ИСМП");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВключитьЛогированиеЗапросов" Тогда
		
		ЛогированиеЗапросовИСМПКлиент.ВключитьЛогированиеЗапросов(Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПанельАдминистрирования" Тогда
		
		ЛогированиеЗапросовИСМПКлиент.ОткрытьПанельАдминистрирования(Форма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьКонтрольВладельцев" Тогда
		
		ВладелецФормы = Форма.ВладелецФормы;
		
		Если ВладелецФормы <> Неопределено Тогда
			
			Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборПродукцииИСМП")
				Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
				
				Оповестить("ОтключениеКонтроляВладельцев", ВладелецФормы.УникальныйИдентификатор);
				Форма.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьКонтрольСтатусов" Тогда
		
		ВладелецФормы = Форма.ВладелецФормы;
		
		Если ВладелецФормы <> Неопределено Тогда
			
			Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборПродукцииИСМП")
				Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(ВладелецФормы, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
				
				Оповестить("ОтключениеКонтроляСтатусов", ВладелецФормы.УникальныйИдентификатор);
				Форма.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПроверкиПоВидуПродукции" Тогда
		
		СтандартнаяОбработка                   = Ложь;
		ПараметрыПроверки                      = Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.ПараметрыПроверки;
		ПараметрыПроверки.ОткрытьФормуПроверки = Истина;
		ПараметрыПроверки.ВидПродукции         = Форма.ВидПродукции;
		ПараметрыПроверки.Результат.ЗакрытьВспомогательнуюФорму = Истина;
		Форма.Закрыть(НавигационнаяСсылкаФорматированнойСтроки);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокТокеновИСМП" Тогда
		
		СтандартнаяОбработка                   = Ложь;
		ИмяФормы = "РегистрСведений.ДанныеКлючаСессииИСМП.Форма.ФормаПросмотраИАктуализацииТокеновАвторизации";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Актуализация", Ложь);
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокCDNПлощадокИСМП" Тогда
		
		СтандартнаяОбработка                   = Ложь;
		ИмяФормы = "РегистрСведений.СостоянияCDNПлощадокИСМП.Форма.ФормаСписка";
		
		ОткрытьФорму(ИмяФормы,, Форма,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокТокеновИСМП" Тогда
		
		СтандартнаяОбработка                   = Ложь;
		ИмяФормы = "РегистрСведений.ДанныеКлючаСессииИСМП.Форма.ФормаПросмотраИАктуализацииТокеновАвторизации";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Актуализация", Ложь);
		
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма,,,,, РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокCDNПлощадокИСМП" Тогда
		
		СтандартнаяОбработка                   = Ложь;
		ИмяФормы = "РегистрСведений.СостоянияCDNПлощадокИСМП.Форма.ФормаСписка";
		
		ОткрытьФорму(ИмяФормы,, Форма,,,,, РежимОткрытияОкнаФормы.Независимый);
	
	Иначе
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКодовМаркировкиСредствамиКТТ

Процедура ОповещениеОЗакрытииФормыОшибки(РезультатЗарктытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрыПроверки     = ДополнительныеПараметры.ПараметрыПроверки;
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	СсылкаНаОбъект        = ПараметрыСканирования.СсылкаНаОбъект;
	
	ШтрихкодированиеИСМПВызовСервера.СохранитьРезультатПроверкиСредствамиККТ(
		ПараметрыПроверки.Результат,
		СсылкаНаОбъект);
	
	Если ПараметрыПроверки <> Неопределено Тогда
		
		Если ПараметрыПроверки.ЭтоСканирование Тогда
			
			Если РезультатЗарктытияФормы <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			КонецЕсли;
			
		ИначеЕсли ПараметрыПроверки.Результат.ВыполнитьФискализацию
			И РезультатЗарктытияФормы <> Неопределено Тогда
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
		ИначеЕсли ПараметрыПроверки.ОткрытьФормуПроверки Тогда
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
			Если ПараметрыПроверки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
				МодульПроверкаИПодборПродукцииЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаИПодборПродукцииЕГАИСКлиент");
				МодульПроверкаИПодборПродукцииЕГАИСКлиент.ОткрытьФормуСканированияАлкогольнойПродукции(ПараметрыПроверки.ФормаОсновногоОбъекта);
			Иначе
				ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(
					ПараметрыПроверки.ФормаОсновногоОбъекта,
					ПараметрыПроверки.ВидПродукции,
					ПараметрыПроверки.ФормаОсновногоОбъекта.ПараметрыУказанияСерий);
			КонецЕсли;
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОповещениеОЗавершении, ПараметрыПроверки.Результат);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИспользуетсяВерсияБПОСЕдинымМетодомПроверкиКМСредствамиККТ() Экспорт
	
	ИменаПараметровРаботыКлиента = ИнтеграцияИСМПКлиентСервер.ИменаПараметровРаботыКлиента();
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	Возврат ПараметрыРаботыКлиента[ИменаПараметровРаботыКлиента.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом];
	
КонецФункции

Функция ДанныеПроверкиПередОбработкойШтрихкода(ВидМаркируемойПродукции, Штрихкод, ПараметрыСканирования, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",  Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", Неопределено);
	
	Если ТипЗнч(Штрихкод) <> Тип("Строка") Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода'");
		ВозвращаемоеЗначение.ЕстьОшибки  = Истина;
		Возврат ВозвращаемоеЗначение;
	Иначе
		Штрихкод = СокрЛП(Штрихкод);
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
		Штрихкод, ВидМаркируемойПродукции);
	
	Если ДанныеРазбора = Неопределено
		Или ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидМаркируемойПродукции].Количество() = 0 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода'");
		ВозвращаемоеЗначение.ЕстьОшибки  = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ОтключитьЗапросДанныхСервиса") Тогда
			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("СохраняемыеНастройки") Тогда
			ПараметрыСканирования.ДополнительныеПараметры.Вставить("ДанныеУточнения", ДополнительныеПараметры.СохраняемыеНастройки.ДанныеВыбора);
			ПараметрыСканирования.ДополнительныеПараметры.Вставить("ЗапомнитьВыбор", ДополнительныеПараметры.СохраняемыеНастройки.ЗапомнитьВыбор);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЭтоПечатьКодаМаркировкиИзПула") Тогда
			ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП = ДополнительныеПараметры.ЭтоПечатьКодаМаркировкиИзПула;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОткрытьФормуОтображенияОшибок(ПараметрыПроверки) Экспорт
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	ВыполняемыеОперации   = ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.ВыполняемыеОперацииПроверкиСредствамиККТ();
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ПараметрыОткрытияФормы.ТекстОшибки               = ПараметрыПроверки.Результат.ТекстОшибки;
	ПараметрыОткрытияФормы.Организация               = ПараметрыСканирования.Организация;
	ПараметрыОткрытияФормы.ИмяФормыИсточник          = ПараметрыПроверки.ФормаОсновногоОбъекта.ИмяФормы;
	ПараметрыОткрытияФормы.СсылкаНаОбъект            = ПараметрыСканирования.СсылкаНаОбъект;

	ПараметрыОписания = ШтрихкодированиеИСМПКлиентСервер.ПараметрыРасширенногоОписанияОшибки();
	
	ПараметрыОписания.ВозможноИгнорировать = (Не ПараметрыПроверки.ЗапрещеноИгнорироватьОшибку);
	ПараметрыОписания.ДанныеПроверкиНаККТ  = ПараметрыПроверки.Результат;
	ПараметрыОписания.ЗаголовокПродолжить  = ПараметрыПроверки.ЗаголовокКнопкиИгнорировать;
	ПараметрыОписания.ВидОперацииИСМП      = ПараметрыСканирования.ВидОперацииИСМП;
	ПараметрыОткрытияФормы.ПараметрыОшибки = ПараметрыОписания;
	
	Если ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ОбновлениеCDNПлощадок Тогда
		ПараметрыОписания.ЗагрузитьCDNПлощадки = Истина;
	ИначеЕсли ПараметрыПроверки.ТекущаяОперация = ВыполняемыеОперации.ПолучениеТокенаГИСМТ Тогда
		ПараметрыОписания.ТокенАвторизацииГИСМТ = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементПроверки Из ПараметрыПроверки.Результат.ЭлементыПроверки Цикл
		
		РезультатПроверкиСтроки = ПараметрыПроверки.Результат.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		Если ЗначениеЗаполнено(РезультатПроверкиСтроки.ТекстОшибки)
			Или ЗначениеЗаполнено(РезультатПроверкиСтроки.ТекстОшибкиГИСМТ) Тогда
			ПараметрыОткрытияФормы.ВидПродукции = ЭлементПроверки.ВидПродукции;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОповещенияОбертки = Новый Структура;
	ПараметрыОповещенияОбертки.Вставить("ПараметрыПроверки", ПараметрыПроверки);
	
	ОповещениеОЗакрытииФормыОшибки = Новый ОписаниеОповещения(
		"ОповещениеОЗакрытииФормыОшибки",
		ШтрихкодированиеИСМПКлиент,
		ПараметрыОповещенияОбертки);
	
	ОткрытьФормуНевозможностиДобавленияОтсканированного(
		ШтрихкодированиеОбщегоНазначенияИСМПКлиент.ФормаБлокировкиПоПараметрамПроверки(ПараметрыПроверки),
		ПараметрыОткрытияФормы,
		ОповещениеОЗакрытииФормыОшибки);
	
КонецПроцедуры

#КонецОбласти
