#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция ЭтоПеречисление(Тип)
	
	ОписаниеТипов = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПеречисленияТипВсеСсылки();
	Возврат ОписаниеТипов.СодержитТип(Тип);
	
КонецФункции

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//                                                        вопроса со следующими параметрами:
//                                                          РезультатВопроса - Структура:
//                                                            Значение - результат выбора пользователя: значение
//                                                                       системного перечисления или значение,
//                                                                       связанное с нажатой кнопкой. В случае закрытия
//                                                                       диалога по истечении времени - значение
//                                                                       Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
//                                                                                                  пользователя в
//                                                                                                  одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос
//                                 - СписокЗначений     - может быть задан список значений, в котором:
//                                       Значение - содержит значение, связанное с кнопкой и возвращаемое при 
//                                                  ее нажатии. В качестве значения может использоваться значение
//                                                  перечисления КодВозвратаДиалога, а также другие значения,
//                                                  поддерживающее XDTO-сериализацию.
//                                       Представление - текст кнопки.
//
//   ДополнительныеПараметры       - см. СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю.
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Параметры = ПараметрыВопросаПользователю();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ДополнительныеПараметры);
	КонецЕсли;
	
	КодыВозвратаДиалога = Новый Соответствие;
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Да, "КодВозвратаДиалога.Да");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Нет, "КодВозвратаДиалога.Нет");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.ОК, "КодВозвратаДиалога.ОК");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Отмена, "КодВозвратаДиалога.Отмена");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Повторить, "КодВозвратаДиалога.Повторить");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Прервать, "КодВозвратаДиалога.Прервать");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Пропустить, "КодВозвратаДиалога.Пропустить");
	КодыВозвратаДиалога.Вставить(КодВозвратаДиалога.Таймаут, "КодВозвратаДиалога.Таймаут");
	
	ПредставленияКнопок = Новый Соответствие;
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.ОК, НСтр("ru = 'ОК'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Повторить, НСтр("ru = 'Повторить'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Прервать'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Пропустить'"));
	ПредставленияКнопок.Вставить(КодВозвратаДиалога.Таймаут, НСтр("ru = 'Таймаут'"));
	
	РежимыДиалогаВопрос = Новый Соответствие;
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ДаНет, "РежимДиалогаВопрос.ДаНет");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ДаНетОтмена, "РежимДиалогаВопрос.ДаНетОтмена");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ОК, "РежимДиалогаВопрос.ОК");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ОКОтмена, "РежимДиалогаВопрос.ОКОтмена");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ПовторитьОтмена, "РежимДиалогаВопрос.ПовторитьОтмена");
	РежимыДиалогаВопрос.Вставить(РежимДиалогаВопрос.ПрерватьПовторитьПропустить, "РежимДиалогаВопрос.ПрерватьПовторитьПропустить");
	
	КнопкиДиалога = Кнопки;
	
	Если ТипЗнч(Кнопки) = Тип("СписокЗначений") Тогда
		КнопкиДиалога = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Кнопки);
		Для Каждого Кнопка Из КнопкиДиалога Цикл
			Если Кнопка.Представление = "" Тогда
				Кнопка.Представление = ПредставленияКнопок[Кнопка.Значение];
			КонецЕсли;
			Если ТипЗнч(Кнопка.Значение) = Тип("КодВозвратаДиалога") Тогда
				Кнопка.Значение = КодыВозвратаДиалога[Кнопка.Значение];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		КнопкиДиалога = РежимыДиалогаВопрос[Кнопки];
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = КодыВозвратаДиалога[Параметры.КнопкаПоУмолчанию];
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = КодыВозвратаДиалога[Параметры.КнопкаТаймаута];
	КонецЕсли;
	
	Параметры.Вставить("Кнопки", КнопкиДиалога);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);
	
	ОткрытьФорму("ОбщаяФорма.ВопросБРД", Параметры, , , , , ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//  Структура:
//    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
//                                                     с ней значению.
//    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
//                                                     вопроса.
//    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                     на которой отображается количество секунд, оставшихся до
//                                                     истечения таймаута.
//    * Заголовок                     - Строка       - заголовок вопроса. 
//    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево - если Истина, то в окне вопроса будет доступен одноименный флажок.
//    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
//                                                     флажке.
//    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается, блокируя работу всех
//                                                     остальных открытых окон, включая главное окно.
//    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
//
Функция ПараметрыВопросаПользователю() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	Параметры.Вставить("Заголовок", КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	Параметры.Вставить("Картинка", БиблиотекаКартинок.Вопрос32);
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ПроверкаАвторизации

Процедура ПослеАвторизации(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		// Пользователь закрыл форму авторизации
		РезультатАвторизации = Ложь;
	ИначеЕсли Контекст.ТипАвторизации = "ПоТикетуИТС" Тогда
		Попытка
			РезультатАвторизации = РаспознаваниеДокументовСлужебныйВызовСервера.ВыполнитьАвторизациюПоТикетуИТС();
		Исключение
			ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
			РезультатАвторизации = Ложь;
		КонецПопытки;
	ИначеЕсли Контекст.ТипАвторизации = "ПоЛогинуПаролю" Тогда
		РезультатАвторизации = (Результат = "АвторизацияВыполнена");
	Иначе
		РезультатАвторизации = Ложь;
	КонецЕсли;
	
	Если РезультатАвторизации Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеВыполненияДействийПослеАвторизации", ЭтотОбъект, Контекст);
		ПроверитьДопустимыеДействияПослеУспешнойАвторизации(Обработчик, Контекст.ТипАвторизации, Контекст.ВладелецФормы);
	Иначе
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, РезультатАвторизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыполненияДействийПослеАвторизации(Результат, Контекст) Экспорт
	
	РезультатАвторизации = Истина; // Выполняется только после успешной авторизации в ПослеАвторизации
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, РезультатАвторизации);
	
КонецПроцедуры

Процедура ПроверитьДопустимыеДействияПослеУспешнойАвторизации(ОповещениеОЗавершении, ТипАвторизации, ВладелецФормы = Неопределено) Экспорт
	
	ДлительнаяОперация = РаспознаваниеДокументовСлужебныйВызовСервера.НачатьПроверкуДопустимыхДействийПриАвторизации();
	
	Если ДлительнаяОперация = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ВладелецФормы", ВладелецФормы);
		Контекст.Вставить("ТипАвторизации", ТипАвторизации);
		Контекст.Вставить("ПоказатьВводПромокода", Ложь);
		Контекст.Вставить("ПромокодАктивирован", Ложь);
		Контекст.Вставить("АктивироватьТестовыйПакет", Ложь);
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияРезультатаПроверкиДопустимыхДействийПриАвторизации", ЭтотОбъект, Контекст);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияРезультатаПроверкиДопустимыхДействийПриАвторизации(ДлительнаяОперация, Контекст) Экспорт 
	
	Если ДлительнаяОперация = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ДопустимыеДействия = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Контекст.ПоказатьВводПромокода = ДопустимыеДействия.ПоказатьВводПромокода;
		Контекст.АктивироватьТестовыйПакет = ДопустимыеДействия.АктивироватьТестовыйПакет;
		ВыполнитьДействияПослеУспешнойАвторизации(Контекст);
	Иначе
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПослеУспешнойАвторизации(Контекст)
	
	Если Контекст.ПоказатьВводПромокода Тогда
		СледующееДействие = "ПоказатьВводПромокода";
	ИначеЕсли Контекст.ТипАвторизации = "ПоТикетуИТС"
		И Контекст.АктивироватьТестовыйПакет
		И Не Контекст.ПромокодАктивирован Тогда
		
		СледующееДействие = "АктивироватьТестовыйПакет";
	Иначе
		СледующееДействие = "ЗавершитьДействия";
	КонецЕсли;
	
	//
	
	Если СледующееДействие = "ПоказатьВводПромокода" Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеВводаПромокодаПриАвторизации", ЭтотОбъект, Контекст);
		РаспознаваниеДокументовКлиент.ПоказатьВводПромокода(Обработчик, Контекст.ВладелецФормы);
	КонецЕсли;
	
	Если СледующееДействие = "АктивироватьТестовыйПакет" Тогда
		ИдентификаторСервиса = РаспознаваниеДокументовСлужебныйКлиентСервер.ИдентификаторСервиса();
		Обработчик = Новый ОписаниеОповещения("ПослеПодключенияТестовогоПериодаПриАвторизации", ЭтотОбъект, Контекст);
		ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(ИдентификаторСервиса, ЭтотОбъект, Обработчик);
	КонецЕсли;
	
	Если СледующееДействие = "ЗавершитьДействия" Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении)
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВводаПромокодаПриАвторизации(ПромокодАктивирован, Контекст) Экспорт
	
	Контекст.ПромокодАктивирован = ПромокодАктивирован;
	Контекст.ПоказатьВводПромокода = Ложь;
	ВыполнитьДействияПослеУспешнойАвторизации(Контекст);
	
КонецПроцедуры

Процедура ПослеПодключенияТестовогоПериодаПриАвторизации(Результат, Контекст) Экспорт
	
	Контекст.АктивироватьТестовыйПакет = Ложь;
	ВыполнитьДействияПослеУспешнойАвторизации(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ПоказатьВводПромокода

Процедура ПослеВводаПромокода(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		// Пользователь закрыл форму ввода промокода
		РезультатВводаПромокода = Ложь;
	ИначеЕсли Результат = "ПромокодПринят" Тогда
		РезультатВводаПромокода = Истина;
	Иначе
		РезультатВводаПромокода = Ложь;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, РезультатВводаПромокода);
	
КонецПроцедуры

#КонецОбласти

#Область СохранитьФайл

Процедура СохранитьФайлыДокумента(РаспознанныйДокумент, ИдентификаторФормы) Экспорт
	
	Если Не ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = РаспознаваниеДокументовСлужебныйВызовСервера.ФайлыРаспознанногоДокумента(РаспознанныйДокумент, ИдентификаторФормы);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);
	
	Если Не Файлы.Количество() Тогда
		Текст =
			НСтр("ru = 'Не удалось сохранить файлы. Возможно они были удалены.
			           |Обратитесь к администратору приложения или техническому специалисту'");
		ВызватьИсключение Текст;
	ИначеЕсли Файлы.Количество() = 1 Тогда
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	Иначе
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	КонецЕсли;
	
	// Сохранение параметров БСП для последующего восстановления и установка параметров не вызывающих вопрос об использовании
	// расширения для работы с файлами в веб-клиенте. См. ПослеСохраненияФайла.
	//
	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ИсходноеЗначение = ПараметрыПриложения[ИмяПараметра];
	ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
	ПараметрыПриложения.Вставить("РаспознаваниеДокументов.ПредлагатьУстановкуРасширенияРаботыСФайлами", ИсходноеЗначение);
	
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, Файлы, ПараметрыСохранения);
	
КонецПроцедуры

Процедура ПослеСохраненияФайла(ПолученныеФайлы, Контекст) Экспорт
	
	// Восстановление параметров БСП использования расширения работы с файлами.
	//
	ИсходноеЗначение = ПараметрыПриложения["РаспознаваниеДокументов.ПредлагатьУстановкуРасширенияРаботыСФайлами"];
	ПараметрыПриложения.Вставить("СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами", ИсходноеЗначение);
	
	Если ПолученныеФайлы <> Неопределено Тогда
		
		Если ПолученныеФайлы.Количество() = 1 Тогда
			ТекстОповещения = НСтр("ru = 'Распознаваемый документ успешно сохранен в файл'");
		Иначе
			ТекстОповещения = НСтр("ru = 'Файлы сохранены в выбранную папку'");
		КонецЕсли;
		
		Заголовок = НСтр("ru = 'Сохранение файлов'");
		ПоказатьОповещениеПользователя(Заголовок, , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспознанныйДокумент

Процедура ПоказатьРаспознанныйДокумент(
		Ссылка,
		ТипДокумента,
		ВариантОбработки,
		ИдентификаторРезультата,
		КоличествоСтрокТаблицы = 0,
		Отбор = Неопределено
	) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(ТипДокумента, ВариантОбработки);
	Если Не ПустаяСтрока(ИмяФормыОбработчика) Тогда 
		КлючеваяОперация = "ОбщийМодуль.РаспознаваниеДокументовСлужебныйКлиент.ПоказатьРаспознанныйДокумент";
		Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
		
		Комментарий = Новый Структура;
		Комментарий.Вставить("ИдентификаторРезультата", ИдентификаторРезультата);
		
		ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
		
		ПараметрыФормы = Новый Структура("Ключ, ОтборИзСписка", Ссылка, Отбор);
		
		ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьТипДокумента(Форма, ОбработкаЗавершения, ПредлагатьЗаписать = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияИзмененияТипаДокумента", ЭтотОбъект, Контекст);
	
	Если Форма.Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент") Тогда
		СтарыйТипДокумента = РаспознаваниеДокументовСлужебныйВызовСервера.ТипРаспознанногоДокумента(Форма.Объект.Ссылка);
	Иначе
		СтарыйТипДокумента = Форма.Объект.ТипДокумента;
	КонецЕсли;
		
	Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый");
	Форма.Объект.ВариантОбработки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВариантОбработкиПоТипуИНаправлению(
		СтарыйТипДокумента, Форма.Объект.Направление);
		
	ОбработатьПереходФормыЕслиТребуется(Форма, Контекст);
	
КонецПроцедуры

Процедура ПослеПодтвержденияИзмененияТипаДокумента(РезультатВопроса, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВопроса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	Если РезультатВопроса.Значение = "Записать" Тогда 
		
		Если Форма.Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент") Тогда
			СтарыйТипДокумента = РаспознаваниеДокументовСлужебныйВызовСервера.ТипРаспознанногоДокумента(Форма.Объект.Ссылка);
		Иначе
			СтарыйТипДокумента = Форма.Объект.ТипДокумента;
		КонецЕсли;
		
		Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый");
		Форма.Объект.ВариантОбработки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВариантОбработкиПоТипуИНаправлению(
			СтарыйТипДокумента,
			Форма.Объект.Направление
		);
		
		ОбработатьПереходФормыЕслиТребуется(Форма, Контекст);
		
	Иначе
		
		СтарыйТипДокумента = РаспознаваниеДокументовСлужебныйВызовСервера.ТипРаспознанногоДокумента(Форма.Объект.Ссылка);
		Форма.Объект.ТипДокумента = СтарыйТипДокумента;
		
		ОбработатьПереходФормыЕслиТребуется(Форма, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВариантОбработки(Форма, ОбработкаЗавершения, ПредлагатьЗаписать = Истина) Экспорт 
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", Форма);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияИзмененияВариантаОбработки", ЭтотОбъект, Контекст);
	
	Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый");
	Форма.Объект.ТипДокумента = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ТипДокументаПоВариантуОбработки(Форма.Объект.ВариантОбработки);
	Форма.Объект.Направление = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.НаправлениеПоВариантуОбработки(Форма.Объект.ВариантОбработки);
		
	ОбработатьПереходФормыЕслиТребуется(Форма, Контекст);
	
КонецПроцедуры

Процедура ПослеПодтвержденияИзмененияВариантаОбработки(РезультатВопроса, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВопроса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	
	Если РезультатВопроса.Значение = "Записать" Тогда 
		
		Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый");
		Форма.Объект.ТипДокумента = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ТипДокументаПоВариантуОбработки(Форма.Объект.ВариантОбработки);
		Форма.Объект.Направление = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.НаправлениеПоВариантуОбработки(Форма.Объект.ВариантОбработки);
		
		ОбработатьПереходФормыЕслиТребуется(Форма, Контекст);
		
	Иначе
		
		СтарыйТипДокумента = РаспознаваниеДокументовСлужебныйВызовСервера.ТипРаспознанногоДокумента(Форма.Объект.Ссылка);
		Форма.Объект.ВариантОбработки = СтарыйТипДокумента;
		
		ОбработатьПереходФормыЕслиТребуется(Форма, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяИзменениеФормы(Форма)
	
	ТекущееИмяФрмы = Форма.ИмяФормы;
	НовоеИмяФормы = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(
		Форма.Объект.ТипДокумента, Форма.Объект.ВариантОбработки);
	
	Возврат ТекущееИмяФрмы <> НовоеИмяФормы;
	
КонецФункции

Процедура ОбработатьПереходФормыЕслиТребуется(Форма, Контекст)
	
	ТребуетсяИзменениеФормы = ТребуетсяИзменениеФормы(Форма);
	
	Если ТребуетсяИзменениеФормы Тогда
		
		Форма.Записать();
		Форма.Закрыть();
		
		ПоказатьРаспознанныйДокумент(
			Форма.Объект.Ссылка,
			Форма.Объект.ТипДокумента,
			Форма.Объект.ВариантОбработки,
			Форма.Объект.ИдентификаторРезультата
		);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, ТребуетсяИзменениеФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияЭлемента(
		ИмяЭлемента,
		НаборДанных,
		ДополнительныеДанные,
		Объект,
		Элемент,
		ЗначениеПодходящейСтроки
	) Экспорт
	
	Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(ЗначениеПодходящейСтроки)) Тогда
		Возврат;
	КонецЕсли;

	КлючеваяОперация = "ОбщийМодуль.РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуСозданияЭлемента";
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыОткрытия.Вставить("НаборДанных", НаборДанных);
	ПараметрыОткрытия.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ПараметрыОткрытия.Вставить("ТипДокумента", Объект.ТипДокумента);
	ПараметрыОткрытия.Вставить("Направление", Объект.Направление);
	ПараметрыОткрытия.Вставить("СоздаваемыйОбъект", ЗначениеПодходящейСтроки);
	
	Если ИмяЭлемента = "Партнер" Тогда
		
		ПараметрыОткрытия.Вставить("Основание", Новый Структура());

		Если (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий")
		И Не ЗначениеЗаполнено(НаборДанных.Получить("Покупатель").Значение)) Или 
		(Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий")
		И Не ЗначениеЗаполнено(НаборДанных.Получить("Продавец").Значение))Тогда
			Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД") 
				Или Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда 
					ИННКонтрагента = ДополнительныеДанные.ИННКонтрагента;
					КППКонтрагента = ДополнительныеДанные.КППКонтрагента;
			ИначеЕсли Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг") Тогда 
				Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
					ИННКонтрагента = НаборДанных.Получить("ИННПокупателя").Значение;
				Иначе
					ИННКонтрагента = НаборДанных.Получить("ИННПродавца").Значение;
				КонецЕсли;
			Иначе
				Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
					ИННКонтрагента = НаборДанных.Получить("ИННПокупателя").Значение;
					КППКонтрагента = НаборДанных.Получить("КПППокупателя").Значение;
				Иначе
					ИННКонтрагента = НаборДанных.Получить("ИННПродавца").Значение;
					КППКонтрагента = НаборДанных.Получить("КПППродавца").Значение;
				КонецЕсли;
			КонецЕсли;
			ПараметрыОткрытия.Основание.Вставить("ИНН",ИННКонтрагента);
			ПараметрыОткрытия.Основание.Вставить("КПП",КППКонтрагента);  
			ПараметрыОткрытия.Основание.Вставить("ЮридическийАдрес");
		КонецЕсли;
		
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			ТекстЗаполнения = НаборДанных.Получить("Покупатель").РаспознанныйТекст;
			Вид = "Клиент";
		Иначе
			ТекстЗаполнения = НаборДанных.Получить("Продавец").РаспознанныйТекст;
			Вид = "Поставщик";
		КонецЕсли;

		ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Структура());
		ПараметрыОткрытия.ПараметрыВыбора.Вставить(Вид, Истина);
		ПараметрыОткрытия.Основание.Вставить("СокращенноеНаименование", ТекстЗаполнения);
		ПараметрыОткрытия.Основание.Вставить("Наименование", ТекстЗаполнения);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового", ПараметрыОткрытия, Элемент);
		
	ИначеЕсли ИмяЭлемента = "Покупатель" Или ИмяЭлемента = "Продавец" Тогда
		
		Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД") 
			Или Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда 
				ИННКонтрагента = ДополнительныеДанные.ИННКонтрагента;
				КППКонтрагента = ДополнительныеДанные.КППКонтрагента;
		ИначеЕсли Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг") Тогда 
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
				ИННКонтрагента = НаборДанных.Получить("ИННПокупателя").Значение;
			Иначе
				ИННКонтрагента = НаборДанных.Получить("ИННПродавца").Значение;
			КонецЕсли;
		Иначе
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
				ИННКонтрагента = НаборДанных.Получить("ИННПокупателя").Значение;
				КППКонтрагента = НаборДанных.Получить("КПППокупателя").Значение;
			Иначе
				ИННКонтрагента = НаборДанных.Получить("ИННПродавца").Значение;
				КППКонтрагента = НаборДанных.Получить("КПППродавца").Значение;
			КонецЕсли;
		КонецЕсли;

		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			ТекстЗаполнения = НаборДанных.Получить("Покупатель").РаспознанныйТекст;
			Вид = "Клиент";
		Иначе
			ТекстЗаполнения = НаборДанных.Получить("Продавец").РаспознанныйТекст;
			Вид = "Поставщик";
		КонецЕсли;

		Если ДополнительныеДанные.ИспользоватьПартнеровИКонтрагентов Тогда
			Партнер = НаборДанных.Получить("Партнер").Значение;
			Если ЗначениеЗаполнено(Партнер) Тогда
				ЗначенияЗаполнения = Новый Структура("Партнер", Партнер);
			    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			Иначе
				ЗначенияЗаполнения = Новый Структура("НаименованиеПолное", ТекстЗаполнения);
			    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			КонецЕсли;
			ЗначенияЗаполнения.Вставить("ИНН",ИННКонтрагента);
			ЗначенияЗаполнения.Вставить("КПП",КППКонтрагента);
			ПараметрыОткрытия.Вставить("ТекстЗаполнения", ТекстЗаполнения);
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыОткрытия, Элемент);
		Иначе
			ПараметрыОткрытия.Вставить("Основание", Новый Структура());
			ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Структура());
			ПараметрыОткрытия.ПараметрыВыбора.Вставить(Вид, Истина);
			ПараметрыОткрытия.Основание.Вставить("ИНН",ИННКонтрагента);
			ПараметрыОткрытия.Основание.Вставить("КПП",КППКонтрагента);
			ПараметрыОткрытия.Основание.Вставить("СокращенноеНаименование", ТекстЗаполнения);
			ПараметрыОткрытия.Основание.Вставить("Наименование", ТекстЗаполнения);
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",ПараметрыОткрытия, Элемент);
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Грузоотправитель" Или ИмяЭлемента = "Грузополучатель" Тогда
		
		Если ИмяЭлемента = "Грузоотправитель" Тогда
			ТекстЗаполнения = НаборДанных.Получить("Грузоотправитель").РаспознанныйТекст;
		Иначе
			ТекстЗаполнения = НаборДанных.Получить("Грузополучатель").РаспознанныйТекст;
		КонецЕсли;  
		
		Если ДополнительныеДанные.ИспользоватьПартнеровИКонтрагентов Тогда
			ПараметрыОткрытия.Вставить("ТекстЗаполнения", ТекстЗаполнения);
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыОткрытия, Элемент);
		Иначе    
			ПараметрыОткрытия.Вставить("Основание", Новый Структура());
			ПараметрыОткрытия.Основание.Вставить("СокращенноеНаименование", ТекстЗаполнения);
			ПараметрыОткрытия.Основание.Вставить("Наименование", ТекстЗаполнения);
			ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
			ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",ПараметрыОткрытия, Элемент);
		КонецЕсли;
			
	ИначеЕсли ИмяЭлемента = "Договор" Тогда
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Организация = НаборДанных.Получить("ПродавецОрганизация").Значение;
			Контрагент = НаборДанных.Получить("Покупатель").Значение;
			ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
		Иначе
			Организация = НаборДанных.Получить("ПокупательОрганизация").Значение;
			Контрагент = НаборДанных.Получить("Продавец").Значение;
			ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура("Организация", Организация);
		ЗначенияЗаполнения.Вставить("Контрагент",Контрагент);
		ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация",ХозяйственнаяОперация);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);   
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", ПараметрыОткрытия, Элемент);		
		
	ИначеЕсли ИмяЭлемента = "Номенклатура" Тогда 
		ПараметрыОткрытия.Вставить("ДополнительныеПараметры", Новый Структура());
		ПараметрыОткрытия.Вставить("ТекстЗаполнения",НаборДанных.Получить("Номенклатура").РаспознанныйТекст);
		ПараметрыОткрытия.ДополнительныеПараметры.Вставить("Артикул",НаборДанных.Получить("Артикул").Значение); 
		ПараметрыОткрытия.ДополнительныеПараметры.Вставить("ЕдиницаИзмерения",НаборДанных.Получить("ЕдиницаИзмерения").Значение);
		ПараметрыОткрытия.ДополнительныеПараметры.Вставить("СтавкаНДС",НаборДанных.Получить("СтавкаНДС").Значение);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Структура("ТипНоменклатуры", 
			ДополнительныеДанные.ПараметрыВыбораНоменклатуры));
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента",ПараметрыОткрытия, Элемент);   
	ИначеЕсли ИмяЭлемента = "БанковскийСчетКонтрагента" Или ИмяЭлемента = "БанковскийСчетОрганизации" Тогда 
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);	
		Если ИмяЭлемента = "БанковскийСчетКонтрагента" Тогда 
			ОткрытьФорму("Справочник.БанковскиеСчетаКонтрагентов.Форма.ФормаЭлемента",ПараметрыОткрытия, Элемент);
		Иначе
			Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
				Организация = НаборДанных.Получить("ПродавецОрганизация").Значение;
			Иначе
				Организация = НаборДанных.Получить("ПокупательОрганизация").Значение;
			КонецЕсли;
			ЗначенияЗаполнения = Новый Структура("Владелец", Организация);
			ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.Форма.ФормаЭлемента",ПараметрыОткрытия, Элемент);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "СтранаПроисхождения" Тогда 
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура("НаименованиеПолное", НаборДанных.Получить("СтранаПроисхождения").РаспознанныйТекст);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.СтраныМира.Форма.ФормаЭлемента", ПараметрыОткрытия, Элемент);
	КонецЕсли;

КонецПроцедуры

Функция НаборДанныхСозданияЭлемента(НаборДанных) Экспорт
	
	Возврат РаспознаваниеДокументовСлужебныйКлиентСервер.НаборДанныхСозданияЭлемента(НаборДанных);
	
КонецФункции

Функция ДанныеЗаполненияДляНовогоЭлемента(ИсточникДанных)Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	Для Каждого СвойствоИсточника Из ИсточникДанных Цикл
		Если СвойствоИсточника.ИмяРеквизита = "Номенклатура" Тогда
			ДанныеЗаполнения.Вставить("Наименование", СвойствоИсточника.РаспознанныйТекст);
		Иначе
			ДанныеЗаполнения.Вставить(СвойствоИсточника.ИмяРеквизита, СвойствоИсточника.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ОткрытьФормуОбратнойСвязи(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Комментарий", Форма.Объект.Комментарий);
	ОткрытьФорму("Документ.РаспознанныйДокумент.Форма.ФормаОбратнойСвязи", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ОбработкаВыбораОбратнойСвязи(Форма, ВыбранноеЗначение) Экспорт
	
	Форма.Объект.Комментарий = ВыбранноеЗначение.Комментарий;
	Форма.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьКартинкуПоАдресу(ЭлементФормы, АдресКартинки) Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресКартинки);
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	DataImage = Base64Строка(ДвоичныеДанные);
	DataImage = СтрЗаменить(DataImage, Символы.ВК, "");
	DataImage = СтрЗаменить(DataImage, Символы.ПС, "");
	
	ЭлементКартинкиПоляHTML = ЭлементФормы.Документ.getElementById("image_setter");
	Если ЭлементКартинкиПоляHTML <> Неопределено Тогда
		ЭлементКартинкиПоляHTML.setAttribute("data-img", DataImage);
		ЭлементКартинкиПоляHTML.click();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НечеткийПоиск

Процедура ЗапросСохраненияСопоставленийТекстаСОбъектом(ПараметрыСохранения) Экспорт
	
	Если СтрДлина(ПараметрыСохранения.РаспознанныйТекст) > 3
		И ЗначениеЗаполнено(ПараметрыСохранения.ВыбранныйОбъект)
		И НЕ ПараметрыСохранения.РаспознанныйТекст = Строка(ПараметрыСохранения.ВыбранныйОбъект) Тогда
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Всегда использовать ""%1""
								|для текста ""%2""?'"), ПараметрыСохранения.ВыбранныйОбъект, ПараметрыСохранения.РаспознанныйТекст);
		Если ПараметрыСохранения.ВариантСохраненияСоответствий = ПредопределенноеЗначение("Перечисление.ВариантыСохраненияСоответствийБРД.ЗадаватьВопрос") Тогда
			ПоказатьВопрос(ПараметрыСохранения.Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		ИначеЕсли ПараметрыСохранения.ВариантСохраненияСоответствий = ПредопределенноеЗначение("Перечисление.ВариантыСохраненияСоответствийБРД.НеСохранятьИНеЗадаватьВопрос") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСохранения.Оповещение, КодВозвратаДиалога.Нет);
		Иначе
			ВыполнитьОбработкуОповещения(ПараметрыСохранения.Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначенияСпискаВыбора(Текст, ТипЗначения, ВозможныеВарианты) Экспорт
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗначения);
	Если ЭтоПримитивныйТип Тогда
		КартинкаСоздание = 0;
	Иначе
		Если ЭтоПеречисление(ТипЗначения) Тогда
			КартинкаСоздание = 0;
		Иначе
			КартинкаСоздание = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(Текст, ВозможныеВарианты, КартинкаСоздание);
	
КонецФункции

Процедура ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		ИмяЭлемента,
		НомерСтроки = Неопределено,
		ПереданноеЗначение = Неопределено,
		Свойства = Неопределено
	) Экспорт
	
	Контекст = СоответствиеПереданногоРаспознанногоЗначения(
		Объект,
		ИмяЭлемента,
		НомерСтроки,
		ПереданноеЗначение,
		Свойства
	);
	Контекст.Вставить("НаборСоответствийРаспознанныхСтрок", НаборСоответствийРаспознанныхСтрок);
	
	Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Контекст.ПереданноеЗначение)) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСоответствиеРаспознаваемыхСтрокЗавершение", ЭтотОбъект, Контекст);
	
	ПараметрыСохранения = Новый Структура();
	ПараметрыСохранения.Вставить("РаспознанныйТекст", Контекст.РаспознанныйТекст);
	ПараметрыСохранения.Вставить("ВыбранныйОбъект", Контекст.ПереданноеЗначение);
	ПараметрыСохранения.Вставить("Оповещение", Оповещение);
	ПараметрыСохранения.Вставить("ВариантСохраненияСоответствий", ВариантСохраненияСоответствий);
	
	ЗапросСохраненияСопоставленийТекстаСОбъектом(ПараметрыСохранения);
	
КонецПроцедуры

Функция СоответствиеПереданногоРаспознанногоЗначения(
		Объект,
		ИмяРеквизита,
		НомерСтроки = Неопределено,
		ПереданноеЗначение = Неопределено,
		Свойства = Неопределено
	)
	
	РаспознанныйТекст = Неопределено;
	
	Если НомерСтроки = Неопределено Тогда
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПереданноеЗначение = НайденныеСтроки[0].Значение;
			РаспознанныйТекст = НайденныеСтроки[0].РаспознанныйТекст;
		КонецЕсли;
	ИначеЕсли Свойства <> Неопределено Тогда
		
		РаспознанныйТекст = Свойства.РаспознанныйТекст;
	Иначе
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", ИмяРеквизита, НомерСтроки);
		НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			РаспознанныйТекст = НайденныеСтроки[0].РаспознанныйТекст;
		КонецЕсли;
	КонецЕсли;
	
	КлючеваяОперация = 
		?(НомерСтроки = Неопределено, 
			"РаспознаваниеДокументов.ИзменениеЗначенияПоля",
			"РаспознаваниеДокументов.ИзменениеЗначенияКолонки"
		);
	
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("ИмяЭлемента", ИмяРеквизита);
	Комментарий.Вставить("НомерСтроки", НомерСтроки);
	Комментарий.Вставить("ЗначениеПредставление", Строка(ПереданноеЗначение));
	Комментарий.Вставить("РаспознанныйТекст", Строка(РаспознанныйТекст));
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	Возврат Новый Структура("РаспознанныйТекст, ПереданноеЗначение", РаспознанныйТекст, ПереданноеЗначение);
	
КонецФункции

Процедура ДобавитьСоответствиеРаспознаваемыхСтрокЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТипЗначенияЗаписи = ПолучитьТипЗначенияСтрокой(ТипЗнч(Контекст.ПереданноеЗначение));
		
		Отбор = Новый Структура("ТипЗначения, РаспознаннаяСтрока", ТипЗначенияЗаписи, Контекст.РаспознанныйТекст);
		
		Записи = Контекст.НаборСоответствийРаспознанныхСтрок.НайтиСтроки(Отбор);
		Если Записи.Количество() = 0 Тогда
			Запись = Контекст.НаборСоответствийРаспознанныхСтрок.Добавить();
		Иначе
			Запись = Записи[0];
		КонецЕсли;
		
		Если Контекст.ПереданноеЗначение.Пустая() Тогда
			Контекст.НаборСоответствийРаспознанныхСтрок.Удалить(Запись);
		Иначе
			Запись.ТипЗначения = ТипЗначенияЗаписи;
			Запись.РаспознаннаяСтрока = Контекст.РаспознанныйТекст;
			Запись.СоответствующееЗначение = Контекст.ПереданноеЗначение;
			Запись.КоличествоПовторений = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипЗначенияСтрокой(Тип) Экспорт
	
	Возврат "Справочник." + Строка(Тип);
	
КонецФункции

#КонецОбласти

#Область Биллинг

Процедура ПоказатьТребованиеВключитьИТС(Обработчик) Экспорт
	
	ИмяПараметра = "РаспознаваниеДокументов.ДатаПоказатьТребованиеВключитьИТС";
	
	Если Не ОтображатьПредупреждение(ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВключитьСемафорПредупреждения() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса =
		НСтр("ru = 'Пилотное использование сервиса распознавания документов завершено.
		           |Для продолжения работы, пожалуйста, войдите с помощью учетной записи 1С:ИТС.'");
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Подключить", НСтр("ru = 'Войти'"));
	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Перейти на коммерческое использование сервиса'");
	ПараметрыВопроса.КнопкаПоУмолчанию = "Подключить";
	
	Контекст = Новый Структура;
	Контекст.Вставить("Обработчик", Обработчик);
	Контекст.Вставить("ИмяПараметра", ИмяПараметра);
	
	ОбработчикПослеОтвета = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопрос", ЭтотОбъект, Контекст);
	
	ПоказатьВопросПользователю(
		ОбработчикПослеОтвета,
		ТекстВопроса,
		КнопкиВопроса,
		ПараметрыВопроса
	);
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеНулевойБаланс(Обработчик, ДатаОкончания) Экспорт
	
	ИмяПараметра = "РаспознаваниеДокументов.ДатаПоказатьПредупреждениеНулевойБаланс";
	
	Если Не ОтображатьПредупреждение(ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВключитьСемафорПредупреждения() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("ДатаОкончанияПрописью", Формат(ДатаОкончания, "ДЛФ=DD"));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		НСтр("ru = 'Закончились оплаченные страницы в сервисе распознавания документов.
		           |Необходимо пополнить баланс до [ДатаОкончанияПрописью], иначе работа в сервисе будет заблокирована.'"),
		ПараметрыЗамены
	);
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Пополнить", НСтр("ru = 'Пополнить'"));
	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Пополните баланс сервиса распознавания'");
	ПараметрыВопроса.КнопкаПоУмолчанию = "Пополнить";
	
	Контекст = Новый Структура;
	Контекст.Вставить("Обработчик", Обработчик);
	Контекст.Вставить("ИмяПараметра", ИмяПараметра);
	
	ОбработчикПослеОтвета = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопрос", ЭтотОбъект, Контекст);
	
	ПоказатьВопросПользователю(
		ОбработчикПослеОтвета,
		ТекстВопроса,
		КнопкиВопроса,
		ПараметрыВопроса
	);
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеСервисОтключен(Обработчик) Экспорт
	
	ИмяПараметра = "РаспознаваниеДокументов.ДатаПоказатьПредупреждениеСервисОтключен";
	
	Если Не ОтображатьПредупреждение(ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВключитьСемафорПредупреждения() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 
		НСтр("ru = 'Закончились оплаченные страницы в сервисе распознавания документов.
		           |Работа в сервисе заблокирована. Пожалуйста, пополните баланс.'");
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Пополнить", НСтр("ru = 'Пополнить'"));
	КнопкиВопроса.Добавить("НапомнитьПозже", НСтр("ru = 'Напомнить позже'"));
	КнопкиВопроса.Добавить("НеСегодня", НСтр("ru = 'Не напоминать сегодня'"));
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Пополните баланс сервиса распознавания'");
	ПараметрыВопроса.КнопкаПоУмолчанию = "Пополнить";
	
	Контекст = Новый Структура;
	Контекст.Вставить("Обработчик", Обработчик);
	Контекст.Вставить("ИмяПараметра", ИмяПараметра);
	
	ОбработчикПослеОтвета = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопрос", ЭтотОбъект, Контекст);
	
	ПоказатьВопросПользователю(
		ОбработчикПослеОтвета,
		ТекстВопроса,
		КнопкиВопроса,
		ПараметрыВопроса
	);
	
КонецПроцедуры

Процедура ПослеОтветаНаВопрос(Результат, Контекст) Экспорт
	
	ВыключитьСемафорПредупреждения();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Пополнить" Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
			РаспознаваниеДокументовСлужебныйКлиентСервер.АдресСведенияПорталИТС()
		);
	ИначеЕсли Результат.Значение = "Подключить" Тогда
		РаспознаваниеДокументовКлиент.ПоказатьАвторизациюИТС(Новый ОписаниеОповещения());
	ИначеЕсли Результат.Значение = "НапомнитьПозже" Тогда
		ДатаНапоминания = ОбщегоНазначенияКлиент.ДатаСеанса() + 15 * 60; // + 15 минут
		ПараметрыПриложения.Вставить(Контекст.ИмяПараметра, ДатаНапоминания);
	ИначеЕсли Результат.Значение = "НеСегодня" Тогда
		ДатаНапоминания = КонецДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыПриложения.Вставить(Контекст.ИмяПараметра, ДатаНапоминания);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.Обработчик, Неопределено);
	
КонецПроцедуры

// Возвращает Ложь если не отображать
//
Функция ОтображатьПредупреждение(ИмяПараметра)
	
	Если ПараметрыПриложения[ИмяПараметра] <> Неопределено Тогда
		ДатаСохраненная = ПараметрыПриложения[ИмяПараметра];
		ДатаСеанса      = ОбщегоНазначенияКлиент.ДатаСеанса();
		Возврат ТипЗнч(ДатаСохраненная) <> Тип("Дата") Или ДатаСохраненная < ДатаСеанса;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Ложь если не удалось включить
//
Функция ВключитьСемафорПредупреждения()
	
	ИмяПараметра = "РаспознаваниеДокументов.ПоказаноПредупреждение";
	Если ПараметрыПриложения[ИмяПараметра] = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	ПараметрыПриложения.Вставить(ИмяПараметра, Истина);
	
	Возврат Истина;
	
КонецФункции

Процедура ВыключитьСемафорПредупреждения()
	
	ИмяПараметра = "РаспознаваниеДокументов.ПоказаноПредупреждение";
	ПараметрыПриложения.Вставить(ИмяПараметра, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

Функция ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Экспорт
	
	Если РаспознаваниеДокументовСлужебныйВызовСервера.ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Тогда
		Возврат Истина;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Данные может просматривать и скачивать только автор загруженного файла.'"));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СозданиеТиповыхДокументов

Процедура ПоказатьСозданиеДокумента(Форма, ПараметрыОперации, ОповещениеОЗавершении = Неопределено) Экспорт
	
	Контекст = КонтекстСозданияРаспознанногоДокумента(Форма, ПараметрыОперации);
	
	ПриИзмененииСостояния(Контекст);
	
КонецПроцедуры

Функция КонтекстСозданияРаспознанногоДокумента(Форма, ПараметрыОперации)
	
	////
	
	ЭтоСчетНаОплату = (ПараметрыОперации.ТипДокумента = "ЗаказКлиента") Или (ПараметрыОперации.ТипДокумента = "ЗаказПоставщику");
	
	ДатаДокумента = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Форма.Объект, "ДатаДокумента", '20000101');
	ИзменениеЗапрещено = РаспознаваниеДокументовКомплектыВызовСервера.ЗапрещеноСозданиеДокументаВЗакрытомПериоде(
		ПараметрыОперации.ТипДокумента, ДатаДокумента);
	
	СоздатьСчетФактуру = Не ЭтоСчетНаОплату И Форма.СоздатьСчетФактуру;
	
	СозданныеДокументы = Новый СписокЗначений;
	Для Каждого Элемент Из Форма.ДокументыСозданные Цикл
		СозданныеДокументы.Добавить(Элемент.СозданныйДокумент);
	КонецЦикла;
	КоличествоСозданныхДокументов = Форма.ДокументыСозданные.Количество();
	
	ТребуетсяПересчетСкидкиВЦену = ЭтоСчетНаОплату И Форма.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий")
		И Форма.ВидСкидки <> РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена;
	
	////
	
	Состояние = "ВопросОДублях";
	// ВопросОДублях
	// ВопросОЗакрытомПериоде
	// ВопросОПересчетеСкидок
	// СозданиеТипового
	
	Результат = Новый Структура;
	Результат.Вставить("ИзменениеЗапрещено", ИзменениеЗапрещено);
	Результат.Вставить("СоздатьСчетФактуру", СоздатьСчетФактуру);
	Результат.Вставить("СозданныеДокументы", СозданныеДокументы);
	Результат.Вставить("КоличествоСозданныхДокументов", КоличествоСозданныхДокументов);
	Результат.Вставить("ТребуетсяПересчетСкидкиВЦену", ТребуетсяПересчетСкидкиВЦену);
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("ПараметрыОперации", ПараметрыОперации);
	Результат.Вставить("Состояние", Состояние);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриИзмененииСостояния(Контекст)
	
	Если Контекст.Состояние = "ВопросОДублях" Тогда
		
		ЗадатьВопросОСозданииДокумента(Контекст);
		
	ИначеЕсли Контекст.Состояние = "ВопросОЗакрытомПериоде" Тогда
		
		ЗадатьВопросОЗакрытомПериоде(Контекст);
		
	ИначеЕсли Контекст.Состояние = "ВопросОПересчетеСкидок" Тогда
		
		ЗадатьВопросОПересчетеСкидок(Контекст);
		
	ИначеЕсли Контекст.Состояние = "СозданиеТипового" Тогда
		
		Контекст.Форма.Подключаемый_СозданиеТипового(Контекст.ПараметрыОперации);
		
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

Процедура СледующееСостояние(Контекст)
	
	Если Контекст.Состояние = "ВопросОДублях" Тогда
		Контекст.Состояние = "ВопросОЗакрытомПериоде";
	ИначеЕсли Контекст.Состояние = "ВопросОЗакрытомПериоде" Тогда
		Контекст.Состояние = "СозданиеТипового";
	Иначе
		Контекст.Состояние = "СозданиеТипового";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВопросОСозданииДокумента(Контекст)
	
	Если Контекст.КоличествоСозданныхДокументов = 0 Тогда
		
		СледующееСостояние(Контекст);
		ПриИзмененииСостояния(Контекст);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("СписокОбъектов", Контекст.СозданныеДокументы);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриПолученииРезультатаОНаличииИмеющихся", ЭтотОбъект, Контекст);
	ОткрытьФорму("ОбщаяФорма.ВопросПриНаличииИмеющихсяДокументовБРД", ПараметрыФормы, Контекст.Форма, , , , ОповещениеОЗавершении);
	
КонецПроцедуры

Процедура ПриПолученииРезультатаОНаличииИмеющихся(Результат, Контекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СледующееСостояние(Контекст);
		ПриИзмененииСостояния(Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВопросОЗакрытомПериоде(Контекст)
	
	Если Не Контекст.ИзменениеЗапрещено Тогда
		
		СледующееСостояние(Контекст);
		ПриИзмененииСостояния(Контекст);
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса =
		НСтр("ru = 'Дата документа находится в закрытом периоде.
		           |Изменить дату документа на текущую?'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриПолученииРезультатаОЗакрытомПериоде", ЭтотОбъект, Контекст);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ПриПолученииРезультатаОЗакрытомПериоде(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(
		Контекст.Форма.Объект, "ДатаДокумента", ОбщегоНазначенияКлиент.ДатаСеанса());
	
	СледующееСостояние(Контекст);
	ПриИзмененииСостояния(Контекст);
	
КонецПроцедуры

Процедура ЗадатьВопросОПересчетеСкидок(Контекст)
	
	Если Не Контекст.ТребуетсяПересчетСкидкиВЦену Тогда
		
		СледующееСостояние(Контекст);
		ПриИзмененииСостояния(Контекст);
		Возврат;
		
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриПолученииРезультатаОПересчетеСкидок", ЭтотОбъект, Контекст);
	ОткрытьФорму("Обработка.СчетНаОплатуРаспознаваниеДокументов.Форма.ВопросПриПересчетеСкидкиВЦену", , Контекст.Форма, , , , ОповещениеОЗавершении);
	
КонецПроцедуры

Процедура ПриПолученииРезультатаОПересчетеСкидок(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СледующееСостояние(Контекст);
	ПриИзмененииСостояния(Контекст);
	
КонецПроцедуры

#КонецОбласти

Процедура ПоказатьФормуБлокировки(Форма, Отказ) Экспорт
	
	ФормаБлокировки = ПолучитьФорму("Обработка.РаспознаваниеДокументов.Форма.ФормаБлокировкиСервиса", , Форма);
	ФормаБлокировки.Открыть();
	Если ФормаБлокировки.Открыта() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти