#Область СлужебныйПрограммныйИнтерфейс

#Область ИспользуютРаспознанныйДокумент

Процедура ОбработатьДокументыКомплекта(Форма, ПараметрыСоздания, ОповещениеНаКлиенте = Неопределено) Экспорт
	
	БылоЗапрещеноРедактировать = Ложь;
	ТипыДокументовДляИзмененияДаты = Новый Массив;
	
	Для Каждого ДанныеСозданного Из ПараметрыСоздания.СозданныеДокументы Цикл
		
		ПодходящиеТипы = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ДанныеСозданного.Ключ);
		Для Каждого ТипРаспознанного Из ПодходящиеТипы Цикл
			Если ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного] <> Неопределено Тогда
				Если ТипЗнч(ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного]) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного].ПараметрыЗаполнения) Тогда
						// Для данного ТипРаспознанного уже заполнены ПараметрыЗаполнения
						Прервать;
					Иначе
						ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного] = ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного].Ссылка;
					КонецЕсли;
				КонецЕсли;
				ДанныеРаспознанного = Новый Структура("Ссылка, ПараметрыЗаполнения", ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного], Неопределено);
				Если ДанныеСозданного.Значение.СоздатьДокумент Тогда
					
					ДанныеРаспознанного.ПараметрыЗаполнения = РаспознаваниеДокументовКомплектыВызовСервера.ПараметрыЗаполненияДляСозданияДокумента(
						ДанныеРаспознанного.Ссылка,
						ТипРаспознанного,
						ДанныеСозданного.Ключ,
						ПараметрыСоздания.ПараметрыОперации
					);
					
					#Если Не Сервер И Не ВнешнееСоединение Тогда
					// Проверка на запрет редактирования
					РедактированиеЗапрещено = РаспознаваниеДокументовКомплектыВызовСервера.ЗапрещеноСозданиеДокументаВЗакрытомПериоде(
						ДанныеРаспознанного.ПараметрыЗаполнения.ТипДокументаСтрокой,
						ДанныеРаспознанного.ПараметрыЗаполнения.Дата
					);
					
					Если РедактированиеЗапрещено Тогда
						Если Не БылоЗапрещеноРедактировать Тогда
							БылоЗапрещеноРедактировать = Истина;
						КонецЕсли;
						ТипыДокументовДляИзмененияДаты.Добавить(ТипРаспознанного);
					КонецЕсли;
					#Иначе
					// Ничего делать не нужно: при попытке проведения будет получен отказ, а сообщение об ошибке будет показано пользователю в отчете
					#КонецЕсли
				КонецЕсли;
				ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного] = ДанныеРаспознанного;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	#Если Не Сервер И Не ВнешнееСоединение Тогда
	Если БылоЗапрещеноРедактировать Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ПараметрыСоздания, ОповещениеНаКлиенте, ТипыДокументовДляИзмененияДаты",
			Форма,
			ПараметрыСоздания,
			ОповещениеНаКлиенте,
			ТипыДокументовДляИзмененияДаты);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаСменыДаты", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Дата документа находится в закрытом периоде.
			|Изменить дату документа на текущую?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	СоздатьДокументыКомплекта(Форма, ПараметрыСоздания, ОповещениеНаКлиенте);
	
КонецПроцедуры

Процедура СоздатьДокументыКомплекта(Форма, ПараметрыСоздания, ОповещениеНаКлиенте)
	
	Результат = РаспознаваниеДокументовКомплектыВызовСервера.СоздатьДокументыКомплектаВызовСервера(ПараметрыСоздания);
	
	Если Не Результат.УдалосьПровести Тогда
		Если ПараметрыСоздания.ДанныеОбработки <> Неопределено Тогда
			ПараметрыСоздания.ДанныеОбработки.КомплектовНеУдалосьОбработать = ПараметрыСоздания.ДанныеОбработки.КомплектовНеУдалосьОбработать + 1;
			Для Каждого ТекОшибка Из Результат.ОшибкиПроведения Цикл
				ПараметрыСоздания.ДанныеОбработки.ОшибкиПроведения.Вставить(ТекОшибка.Ключ, ТекОшибка.Значение);
			КонецЦикла;
		КонецЕсли;
	Иначе
		#Если Не Сервер И Не ВнешнееСоединение Тогда
		// для оповещения "РаспознанныйДокумент_СтатусОбработан" и всплывающих ПоказатьОповещениеПользователя
		
		ТекстСоздан = НСтр("ru = 'Создан документ'");
		ТекстПрикреплен = НСтр("ru = 'Скан прикреплен'");
		
		ПараметрыСоздания.Вставить("УдалосьОбработать", Истина);
		
		Для Каждого КлючЗначение Из Результат.СоответствиеСтатусОбработан Цикл
			ОповеститьОбИзменении(КлючЗначение.Ключ);
			Оповестить("РаспознанныйДокумент_СтатусОбработан", КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ТипыДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыСоздания);
		Для Каждого ЭтотТипДокумента Из ТипыДокументов Цикл
			ДанныеСозданного = ПараметрыСоздания.СозданныеДокументы[ЭтотТипДокумента];
			
			Если ДанныеСозданного.СоздатьДокумент Тогда
				ТекстЗаголовка = ТекстСоздан;
			ИначеЕсли ДанныеСозданного.ПрикрепитьСкан Тогда
				ТекстЗаголовка = ТекстПрикреплен;
			Иначе
				ТекстЗаголовка = "";
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстЗаголовка) Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДанныеСозданного.Ссылка);
				ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, Строка(ДанныеСозданного.Ссылка), , СтатусОповещенияПользователя.Важное);
			КонецЕсли;
		КонецЦикла;
		
		#КонецЕсли
	КонецЕсли;
	
	#Если Не Сервер И Не ВнешнееСоединение Тогда
	Если ОповещениеНаКлиенте <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеНаКлиенте, ПараметрыСоздания);
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

Функция СтруктураСозданныхДокументов() Экспорт
	
	СозданныеДокументы = Новый Структура(
		"Ссылка, СозданПоРаспознанномуДокументу, СоздатьДокумент, ПрикрепитьСкан, ДокументНайден, СканУжеПрикреплен",
		Неопределено, Ложь, Ложь, Ложь, Ложь, Ложь
	);
	
	Возврат СозданныеДокументы;
	
КонецФункции

Функция НовыеПараметрыОперации() Экспорт
	
	Возврат Новый Структура("ТипДокумента, ВидОперации");
	
КонецФункции

Функция ТипДокументаИВидОперации(Знач ИмяКоманды) Экспорт
	
	Результат = НовыеПараметрыОперации();
	
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "Форма", "");
	Если ИмяКоманды = "СоздатьРеализацияТовары" Или ИмяКоманды = "СоздатьРеализацияТоварыСчетФактура" Тогда
		Результат.ТипДокумента = "РеализацияТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
	ИначеЕсли ИмяКоманды = "СоздатьРеализацияУслуги" Или ИмяКоманды =  "СоздатьРеализацияУслугиСчетФактура" Тогда
		Результат.ТипДокумента = "РеализацияУслугПрочихАктивов";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
		
	ИначеЕсли ИмяКоманды = "СоздатьПоступлениеТовары" Или ИмяКоманды = "СоздатьПоступлениеТоварыСчетФактура" Тогда
		Результат.ТипДокумента = "ПриобретениеТоваровУслуг";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");		
	ИначеЕсли ИмяКоманды = "СоздатьПоступлениеУслуги" Или ИмяКоманды =  "СоздатьПоступлениеУслугиСчетФактура" Тогда
		Результат.ТипДокумента = "ПриобретениеУслугПрочихАктивов";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
		
	ИначеЕсли ИмяКоманды = "СоздатьАктВыполненныхРабот" Тогда
		Результат.ТипДокумента = "АктВыполненныхРабот";
		Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипДокументаИВидОперацииДляДокументаПоУмолчанию(Направление, ТипДокумента) Экспорт
	
	Результат = НовыеПараметрыОперации();
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
		Результат.ТипДокумента = "ПоступлениеТоваровУслуг";
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг") Тогда
			Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
		КонецЕсли;
	Иначе
		Результат.ТипДокумента = "РеализацияТоваровУслуг";
		Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг") Тогда
			Результат.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипДокументаИВидОперацииПоУмолчанию(Направление, ТипКомплекта) Экспорт
	
	ДоступныеКоманды = ДоступныеКомандыПоТипуКомплекта(Направление, ТипКомплекта);
	Если ДоступныеКоманды.Количество() = 0 Тогда
		Результат = Неопределено;
	Иначе
		СтрокаПоступленияРеализации = СтрЗаменить(ДоступныеКоманды[0], "СчетНаОплату", "");
		СтрокаПоступленияРеализации = СтрЗаменить(СтрокаПоступленияРеализации, "СчетФактура", "");
		Результат = ТипДокументаИВидОперации(СтрокаПоступленияРеализации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтрезатьВремяУДаты(Знач ДатаСтрокой) Экспорт
	
	Возврат СокрЛП(Лев(ДатаСтрокой, СтрДлина(ДатаСтрокой) - 8));
	
КонецФункции

Процедура ЗавершениеВопросаСменыДаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	#Если Не Сервер И Не ВнешнееСоединение Тогда
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТипРаспознанного Из ДополнительныеПараметры.ТипыДокументовДляИзмененияДаты Цикл
		ДополнительныеПараметры.ПараметрыСоздания.РаспознанныеДокументыПоТипам[ТипРаспознанного].ПараметрыЗаполнения.Дата
			= ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЦикла;
	
	СоздатьДокументыКомплекта(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ПараметрыСоздания, ДополнительныеПараметры.ОповещениеНаКлиенте);
	#КонецЕсли
	
КонецПроцедуры

Функция НовыеДанныеОбработкиКомплектов() Экспорт
	
	ДанныеОбработки = Новый Структура("КомплектовВсего, КомплектовНеУдалосьОбработать, НомераСозданныхКомплектов, ОшибкиПроведения, ГрупповаяОбработка, РезультатОбратнойСвязи",
		0, 0, Новый Массив, Новый Соответствие, Ложь, Новый Структура);
	Возврат ДанныеОбработки;
	
КонецФункции

Функция НовыеПараметрыСозданияКомплекта() Экспорт
	
	ПараметрыСоздания = Новый Структура("ПараметрыОперации, НаправлениеДокумента, ТипКомплекта, РаспознанныеДокументыПоТипам, ДанныеОбработки");
	Возврат ПараметрыСоздания;
	
КонецФункции

Функция ПодходящиеТипыРаспознанногоДокумента(ТипДокумента) Экспорт
	
	Результат = Новый Массив;
	Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		Или ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату"));
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД"));
		// Т.к. поступление или реализацию можно создать по распознанной СФ
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура"));
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный")
		Или ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура"));
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД"));
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг"));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НужноОбъединитьТабличныеЧасти(ТипДокумента1, ТипДокумента2) Экспорт
	
	Возврат (ТипДокумента1 = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12")
		И ТипДокумента2 = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг")
		ИЛИ
		ТипДокумента1 = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг")
		И ТипДокумента2 = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12"));
	
КонецФункции

Функция ПорядокОтображенияСвязанныхДокументовПоТипам() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура"));
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеКомандыПоТипуКомплекта(Направление, ТипКомплекта) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипКомплекта = "СчетФактураТОРГ12"
		Или ТипКомплекта = "ТОРГ12УПД"
		Или ТипКомплекта = "СчетФактураТОРГ12УПД"
		Тогда
		// тов/ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьПоступлениеТоварыСчетФактура");
			Результат.Добавить("СоздатьПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьРеализацияТоварыСчетФактура");
			Результат.Добавить("СоздатьРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "АктОбОказанииУслугСчетФактура"
		Или ТипКомплекта = "АктОбОказанииУслугУПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураУПД"
		Тогда
		// усл/ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьПоступлениеУслугиСчетФактура");
			Результат.Добавить("СоздатьПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьРеализацияУслугиСчетФактура");
			Результат.Добавить("СоздатьРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "СчетНаОплатуУПД"
		Или ТипКомплекта = "СчетНаОплатуСчетФактура"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураУПД"
		Тогда
		// Счет + тов/усл/ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеТоварыСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеУслугиСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияТоварыСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияУслугиСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "СчетНаОплатуТОРГ12" Тогда
		// Счет + тов/ком
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеТовары");
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссия");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияТовары");
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссия");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "АктОбОказанииУслугСчетНаОплату" Тогда
		// Счет + усл/ком
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеУслуги");
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссия");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияУслуги");
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссия");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12"
		Или ТипКомплекта = "СчетНаОплатуТОРГ12УПД"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		// Счет + тов/ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеТоварыСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияТоварыСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактура"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуУПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураУПД"
		Тогда
		// Счет + усл/ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеУслугиСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияУслугиСчетФактура");
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12" Тогда
		// Счет + ком
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссия");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссия");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "АктОбОказанииУслугТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12УПД"
		Тогда
		// ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		// Счет + ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьСчетНаОплатуРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	ИначеЕсли ТипКомплекта = "СчетФактураУПД" Тогда
		// тов/усл/ком + СФ
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить("СоздатьПоступлениеТоварыСчетФактура");
			Результат.Добавить("СоздатьПоступлениеУслугиСчетФактура");
			Результат.Добавить("СоздатьПоступлениеПокупкаКомиссияСчетФактура");
		ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
			Результат.Добавить("СоздатьРеализацияТоварыСчетФактура");
			Результат.Добавить("СоздатьРеализацияУслугиСчетФактура");
			Результат.Добавить("СоздатьРеализацияПродажаКомиссияСчетФактура");
		КонецЕсли;
		
	Иначе
		Результат.Добавить("СоздатьНевозможно");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздаваемыеДокументыКомплекта(ПараметрыСоздания) Экспорт
	
	Результат = Новый Массив;
	Если ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактура"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуУПД"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуСчетФактура"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуСчетФактураУПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуУПД"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуТОРГ12УПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураУПД"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12УПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12УПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		
		Если ПараметрыСоздания.НаправлениеДокумента = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
			Результат.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		Иначе
			Результат.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
			Результат.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		КонецЕсли;
	ИначеЕсли ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12"
		Или ПараметрыСоздания.ТипКомплекта = "СчетНаОплатуТОРГ12"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетНаОплату"
		Тогда
		
		Если ПараметрыСоздания.НаправлениеДокумента = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
		Иначе
			Результат.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		КонецЕсли;
	ИначеЕсли ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12"
		Или ПараметрыСоздания.ТипКомплекта = "СчетФактураТОРГ12"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетФактура"
		Или ПараметрыСоздания.ТипКомплекта = "СчетФактураУПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугУПД"
		Или ПараметрыСоздания.ТипКомплекта = "ТОРГ12УПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетФактураУПД"
		Или ПараметрыСоздания.ТипКомплекта = "СчетФактураТОРГ12УПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугТОРГ12УПД"
		Или ПараметрыСоздания.ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12УПД"
		Тогда
		
		Если ПараметрыСоздания.НаправлениеДокумента = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
			Результат.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
			Результат.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		Иначе
			Результат.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
			Результат.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоТипКомплектаМожноОбработать(ТипКомплекта) Экспорт
	
	Возврат (
		ТипКомплекта = "СчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактура"
		Или ТипКомплекта = "СчетНаОплатуУПД"
		Или ТипКомплекта = "СчетНаОплатуТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплату"
		Или ТипКомплекта = "СчетНаОплатуСчетФактура"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактура"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12"
		Или ТипКомплекта = "СчетФактураУПД"
		Или ТипКомплекта = "АктОбОказанииУслугУПД"
		Или ТипКомплекта = "ТОРГ12УПД"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураУПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуУПД"
		Или ТипКомплекта = "СчетНаОплатуТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураУПД"
		Или ТипКомплекта = "СчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураУПД"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12УПД"
	);
	
КонецФункции

// Выполнить поиск основного распознанного документа в комплекте и вернуть его.
//
// Параметры:
//  ПараметрыПоиска - Структура:
//  * ДокументыПоТипам - Соответствие из ПеречислениеСсылка.ТипыДокументовРаспознаваниеДокументов.
//  * ТипКомплекта - Строка - тип комплекта из РаспознаваниеДокументовКомплектыКлиентСервер.СформироватьТипКомплекта
//  * НаправлениеДокумента - ПеречислениеСсылка.НаправленияРаспознанногоДокумента - направление для всех документов
//
// Возвращаемое значение:
//  ДокументСсылка.РаспознанныйДокумент - ссылка на РаспознанныйДокумент
//
Функция НайтиОсновнойДокументКомплекта(ПараметрыПоиска) Экспорт
	
	Результат = Неопределено;
	
	ТипыДокументов1С = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыПоиска);
	Если ТипыДокументов1С.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипыРаспознанныхДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ТипыДокументов1С[0]);
	Для Каждого ТипРаспознанного Из ТипыРаспознанныхДокументов Цикл
		Результат = ПараметрыПоиска.ДокументыПоТипам.Получить(ТипРаспознанного);
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполнить поиск реквизитов, обязательных для заполнения в подчиненном документе комплекта.
//
// Параметры:
//  ПараметрыПоиска - Структура:
//  * ДокументыПоТипам - Соответствие - пары для каждого документа из комплекта, где Ключ - Перечисление.ТипыДокументовРаспознаваниеДокументов, а Значение - Документ.РаспознанныйДокумент
//  * ТипКомплекта - Строка - тип комплекта из РаспознаваниеДокументовКомплектыКлиентСервер.СформироватьТипКомплекта
//  * НаправлениеДокумента - Перечисление.НаправленияРаспознанногоДокумента - направление для всех документов
//  * ТипПодчиненного - Перечисление.ТипыДокументовРаспознаваниеДокументов - тип подчиненного распознанного документа
//
// Возвращаемое значение:
//  Массив строк - имен реквизитов
//
Функция ОбязательныеРеквизитыПодчиненногоДокументаКомплекта(ПараметрыПоиска) Экспорт
	
	// 1. Получить типы учетных документов, которые можно сделать из комплекта.
	// 2. Проверить, какой тип учетного документа можно создать из подчиненного распознанного документа.
	// 3. Проверить, из каких документов комплекта будет создан данный тип учетного документа.
	// 4. Если подчиненный документ участвует в создании, то указать, какие реквизиты обязательны для заполнения. В остальных случаях оставить массив пустым.
	
	// Возможна ситуация, когда из одного распознанного документа делают несколько учетных, поэтому используем Соответствие
	Реквизиты = Новый Соответствие;
	
	ТипыДокументов1С = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыПоиска);
	Если ТипыДокументов1С.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЭтотТипДокумента1С Из ТипыДокументов1С Цикл
		ТипыРаспознанных = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ЭтотТипДокумента1С);
		Если ТипыРаспознанных.Найти(ПараметрыПоиска.ТипПодчиненного) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// Из ТипПодчиненного можно сделать ЭтотТипДокумента1С, но при создании он может
		// не использоваться, если найден более приоритетный подчиненный документ
		Для Каждого ТипРаспознанного Из ТипыРаспознанных Цикл
			НайденныйДокумент = ПараметрыПоиска.ДокументыПоТипам.Получить(ТипРаспознанного);
			Если НайденныйДокумент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипРаспознанного <> ПараметрыПоиска.ТипПодчиненного Тогда
				// Учетный документ создаем из другого подчиненного
				Если РаспознаваниеДокументовКомплектыКлиентСервер.НужноОбъединитьТабличныеЧасти(ТипРаспознанного, ПараметрыПоиска.ТипПодчиненного) Тогда
					Реквизиты.Вставить("ВсяТаблица");
				КонецЕсли;
				
				// учетный документ создается из другого типа распознанного документа
				Прервать;
				
			КонецЕсли;
				
			ТипИВид = РаспознаваниеДокументовКомплектыКлиентСервер.ТипДокументаИВидОперацииПоУмолчанию(
				ПараметрыПоиска.НаправлениеДокумента,
				ПараметрыПоиска.ТипКомплекта
			);
			
			Если ЭтотТипДокумента1С = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				Или ЭтотТипДокумента1С = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Реквизиты.Вставить("НомерДокумента");
				Реквизиты.Вставить("ДатаДокумента");
				Если ТипИВид.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту")
					Или ТипИВид.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика") Тогда
					
					Реквизиты.Вставить("Склад");
				КонецЕсли;
				
			ИначеЕсли ЭтотТипДокумента1С = Тип("ДокументСсылка.СчетФактураПолученный")
					Или ЭтотТипДокумента1С = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				Реквизиты.Вставить("НомерДокумента");
				Реквизиты.Вставить("ДатаДокумента");
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	Результат = Новый Массив;
	Для Каждого Элемент Из Реквизиты Цикл
		Результат.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти