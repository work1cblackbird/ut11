////////////////////////////////////////////////////////////////////////////////
// Расширение подсистемы "Физические лица" для УТ и ERP.
//
// Вместо функций модуля БСП ФизическиеЛицаКлиентСервер, предназначенных для
// получения различной информации о ФИО физического лица,
// следует использовать одноименные функции этого модуля.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФИОФизическихЛиц

// Формирует структуру, содержащую информацию о фамилии, имени и отчестве физического лица.
// Строка формируется в зависимости от типа переданного параметра:
//	- либо по истории ФИО элемента справочника ФизическиеЛица,
// 	- либо разбором строки, содержащей полную ФИО.
//
// Параметры:
//  ФизическоеЛицо - Строка, СправочникСсылка.ФизическиеЛица - источник информации о ФИО
//  Дата - Дата - дата для получения истории ФИО, имеет смысл если в первом параметре передана ссылка.
//
// Возвращаемое значение:
//	Структура - со свойствами
//		Фамилия  - Строка
//		Имя      - Строка
//		Отчество - Строка
//
Функция ФамилияИмяОтчество(ФизическоеЛицо, Дата = Неопределено) Экспорт
	ФИОФизическогоЛица = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	ФизическиеЛицаЛокализация.ДополнитьФИО(ФизическоеЛицо, ФИОФизическогоЛица, Дата);
	Возврат ФИОФизическогоЛица;
КонецФункции

// Формирует строку, содержащую фамилию и инициалы физического лица.
// Строка формируется в зависимости от типа переданного параметра:
//	- либо по истории ФИО элемента справочника ФизическиеЛица,
// 	- либо разбором строки, содержащей полную ФИО.
//
// Параметры:
//  ФизическоеЛицо - Строка, СправочникСсылка.ФизическиеЛица - источник информации о ФИО
//  Дата - Дата - дата для получения истории ФИО, имеет смысл если в первом параметре передана ссылка.
//
// Возвращаемое значение:
//  Строка - Фамилия И. О. 
//
Функция ФамилияИнициалыФизЛица(ФизическоеЛицо, Дата = Неопределено) Экспорт
	ФамилияИнициалы = "";
	ФизическиеЛицаЛокализация.ДополнитьФамилияИнициалыФизЛица(ФизическоеЛицо, ФамилияИнициалы, Дата);
	Возврат ФамилияИнициалы;
КонецФункции

// Преобразовывает переданный массив физических лиц в строку.
// Используется для представления краткого состава документов.
//
// Параметры:
//	ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица - массив элементов типа СправочникСсылка.ФизическиеЛица,
//	ДатаАктуальности - Дата - дата для получения фамилии, имени и отчества.
//  МаксимальнаяДлинаСтроки - Число - Максимальная длина строки
//
// Возвращаемое значение:
//  Строка - Краткий состав физ лиц
// 
Функция КраткийСоставФизЛиц(ФизическиеЛица, ДатаАктуальности, МаксимальнаяДлинаСтроки = 100) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизическихЛиц.Фамилия  КАК Фамилия,
	|	ФИОФизическихЛиц.Имя      КАК Имя,
	|	ФИОФизическихЛиц.Отчество КАК Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаАктуальности) КАК ФИОФизическихЛиц
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)
	|";
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ФизическиеЛица",   ФизическиеЛица);
	
	КраткийСостав = "";
	ШаблонФИО = "%1 %2";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ПустаяСтрока(КраткийСостав) Тогда
			КраткийСостав = КраткийСостав + ", ";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.Имя) Тогда
			
			Имена = СоставныеЧастиИмени(Выборка.Имя);
			Если Имена.Количество() > 1 Тогда
				Инициалы = Лев(Имена[0], 1) + ".-" + Лев(Имена[1], 1) + ".";
			Иначе
				Инициалы = Лев(Выборка.Имя, 1) + ".";
			КонецЕсли;
			
			Если Не ПустаяСтрока(Выборка.Отчество) Тогда
				Инициалы = Инициалы + Лев(Выборка.Отчество, 1) + ".";
			КонецЕсли;
			
		КонецЕсли;
			
		КраткийСостав = КраткийСостав + СокрЛП(СтрШаблон(ШаблонФИО, Выборка.Фамилия, Инициалы));
		
	КонецЦикла;
	
	Если СтрДлина(КраткийСостав) > МаксимальнаяДлинаСтроки Тогда
		КраткийСостав = Лев(КраткийСостав, МаксимальнаяДлинаСтроки - 3) + "...";
	КонецЕсли;
	
	Возврат КраткийСостав;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСведенияОФизическихЛицах

// Получает подразделение указанного физического лица.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - источник информации о подразделении.
//
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - Подразделение пользователя.
//
Функция ПодразделениеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Пользователи.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
		|	И Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

// Получает данные документа физического лица.
// Если документ не найден или документов больше одного, то возвращается пустая структура.
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - источник информации о документе
//  ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц - вид документа физического лица
//  Дата - Дата - дата для получения истории документов физического лица.
//
// Возвращаемое значение:
//  Структура - данные документа физического лица,
//		поля соответствуют ресурсам регистра ДокументыФизическихЛиц.
//
Функция ПолучитьДокументФизическогоЛицаПоУмолчанию(ФизическоеЛицо, ВидДокумента = Неопределено, Дата = Неопределено) Экспорт
	
	ДокументФизическогоЛица = Новый Структура;
	ДокументФизическогоЛица.Вставить("ВидДокумента");
	ДокументФизическогоЛица.Вставить("Серия", "");
	ДокументФизическогоЛица.Вставить("Номер", "");
	ДокументФизическогоЛица.Вставить("ДатаВыдачи", Дата(1,1,1));
	ДокументФизическогоЛица.Вставить("СрокДействия", Дата(1,1,1));
	ДокументФизическогоЛица.Вставить("КемВыдан", "");
	Если ПолучитьФункциональнуюОпцию("ЛокализацияРФ") Тогда
		ДокументФизическогоЛица.Вставить("КодПодразделения", "");
		ДокументФизическогоЛица.Вставить("КодМВД", "");
	КонецЕсли;
	ДокументФизическогоЛица.Вставить("ЯвляетсяДокументомУдостоверяющимЛичность", Ложь);
	ДокументФизическогоЛица.Вставить("Представление", "");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДокументыФизическихЛиц.ВидДокумента,
		|	ДокументыФизическихЛиц.ВидДокумента.КодМВД КАК КодМВД,
		|	ДокументыФизическихЛиц.Серия,
		|	ДокументыФизическихЛиц.Номер,
		|	ДокументыФизическихЛиц.ДатаВыдачи,
		|	ДокументыФизическихЛиц.СрокДействия,
		|	ДокументыФизическихЛиц.КемВыдан,
		|	ДокументыФизическихЛиц.КодПодразделения,
		|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность,
		|	ДокументыФизическихЛиц.Представление
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Дата,
		|			Физлицо = &ФизическоеЛицо
		|				И (ВидДокумента = &ВидДокумента
		|					ИЛИ &ВидДокумента = НЕОПРЕДЕЛЕНО)) КАК ДокументыФизическихЛиц";
		
		Запрос.УстановитьПараметр("Дата", 		    ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ВидДокумента",   ?(ЗначениеЗаполнено(ВидДокумента), ВидДокумента, Неопределено));
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			// Если в базе есть только один документ, то вернем его данные.
			// Если документов больше чем один, то  ничего не возвращаем т.к. непонятно, данные какого документа нужны.
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДокументФизическогоЛица, Выборка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФизическиеЛицаЛокализация.ЗаполнитьДокументФизическогоЛицаПоУмолчанию(ФизическоеЛицо, ДокументФизическогоЛица);
	
	Возврат ДокументФизическогоЛица;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ЗначениеЗаполнено(Форма.Объект.ИНН) Тогда
		ВыборкаФизЛицо = ИННУжеНазначенДругомуФизЛицу(Форма.Объект.ИНН, Форма.Объект.Ссылка);
		Если ВыборкаФизЛицо <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Найдена запись о человеке, имеющем такой же ИНН (%1)'"),
				ВыборкаФизЛицо.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.ИНН",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокУточнений = Новый СписокЗначений;
	ПохожиеФизическиеЛица = ПохожиеФизическиеЛица(ФизическоеЛицоОбъект.Ссылка, ФизическоеЛицоОбъект.Наименование);
	СписокУточнений.ЗагрузитьЗначения(ПохожиеФизическиеЛица.ВыгрузитьКолонку("УточнениеНаименования"));
	
	НайденноеЗначение = СписокУточнений.НайтиПоЗначению(ФизическоеЛицоОбъект.УточнениеНаименования);
	Если НайденноеЗначение <> Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В списке уже есть физическое лицо с такими ФИО %1.
				|Введите дополнительную строку по которой вы будете отличать этого человека.'"),
			ФизическоеЛицоОбъект.Наименование);
		
		Если СписокУточнений.Количество() <> 1 Или Не ПустаяСтрока(СписокУточнений[0].Значение) Тогда
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС
				+ НСтр("ru='Для идентификации уже используются следующие дополнения: %1'");
			
			ТекстУточнений = "";
			Для каждого Уточнение Из СписокУточнений Цикл
				
				Если ПустаяСтрока(Уточнение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстУточнений = ТекстУточнений + Символы.ПС + " - " + Уточнение.Значение;
				
			КонецЦикла;
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстУточнений);
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.УточнениеНаименования", , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, есть ли в базе физическое лицо с таким же ИНН.
//
// Параметры:
//  ИНН  - Строка - проверяемый ИНН
//  ИсключаяСсылку  - СправочникСсылка.ФизическиеЛица - физическое лицо, исключаемое из проверки.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса, Неопределено   - выборка с данными найденного физического лица с таким же ИНН
// 		или Неопределено если искомый ИНН никому не назначен.
//
Функция ИННУжеНазначенДругомуФизЛицу(ИНН, ИсключаяСсылку = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ФизическиеЛица.Наименование) КАК Представление
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН
	|	И ФизическиеЛица.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ИНН",	ИНН);
	Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, ФизическоеЛицоНаименование)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.Наименование КАК Наименование,
		|	ФизическиеЛица.УточнениеНаименования КАК УточнениеНаименования
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &ФизическоеЛицо
		|	И ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("ФамилияИмяОтчество", СокрЛП(ФизическоеЛицоНаименование));
	
	ТаблицаПохожих = Запрос.Выполнить().Выгрузить();
	ТаблицаПохожих.Индексы.Добавить("Ссылка");
	
	Возврат ТаблицаПохожих;
	
КонецФункции

Функция СоставныеЧастиИмени(Знач Имя)
	
	Имена = Новый Массив;
	
	Если Не ПустаяСтрока(Имя) Тогда
		
		РазделительИмен = "-";
		ПозицияРазделителя = СтрНайти(Имя, РазделительИмен);
		Если ПозицияРазделителя = 0 Тогда
			РазделительИмен = " ";
			ПозицияРазделителя = СтрНайти(Имя, РазделительИмен);
		КонецЕсли;
		
		Имена = СтрРазделить(Имя, РазделительИмен, Ложь);
		
	КонецЕсли;
	
	Возврат Имена;
	
КонецФункции

#КонецОбласти

#КонецОбласти
