#Область ПрограммныйИнтерфейс

#Область ВыборСтатейИАналитик

// Возвращает структуру параметров выбора статьи и аналитики 
//
// Возвращаемое значение:
// 	Структура - Параметры выбора:
// 		* ПутьКДанным - Строка - Путь к объекту, в которым хранится статья.
// 		                         Например, "Объект" (если статья - реквизит объекта) или "Объект.Товары" (если статья - реквизит табличной части).
// 		* Статья - Строка - Имя реквизита статьи. Например "СтатьяРасходов"
// 		* ЗначениеПоУмолчанию - ПланВидовХарактеристикСсылка.СтатьиРасходов,
// 		                        ПланВидовХарактеристикСсылка.СтатьиДоходов
// 		                        ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Ссылка на элемент соответствующего типа (в том числе пустая ссылка).
// 		* ДоступностьПоОперации - Булево, Неопределено - Признак доступности выбора статьи по текущей хозяйственной операции документа.
// 		                                   Если Ложь, то элементы выбора статьи и аналитики на форме скрываются.
// 		                                   Если значение Неопределено, то механизм не управляет доступностью статьи. Задача решается на стороне документа. 
// 		* СкрыватьСтатьюНедоступнуюПоОперации - Булево - Если Истина, то поля скрываются. Если Ложь, то делаются недоступными. Значение по умолчанию Истина.
// 		* ОбязательностьЗаполнения - Булево - Если Истина, то устанавливается отметака незаполненного и проверяется заполнение.
// 		                                      Если Ложь, то отметка незаполненного не устанавливается и проверка заполнения не выполняется.
// 		
// 		* ВыборСтатьиРасходов - Булево - Определяет возможность выбора в качестве значения Статьи расходов. Значение по умолчанию Ложь.
// 		* АналитикаРасходов - Строка - Имя реквизита аналитики расходов (Тип реквизита Характеристика.СтатьиРасходов).
// 		* ОтборСтатейРасходов - Структура - Структура параметров дополнительного отбора статей расходов:
// 		                                * Ключ - Строка - Имя параметра отбора
// 		                                * Значение - Произвольный - Значение параметра отбора.
// 		
// 		* ВыборСтатьиДоходов - Булево - Определяет возможность выбора в качестве значения Статьи доходов. Значение по умолчанию Ложь.
// 		* АналитикаДоходов - Строка - Имя реквизита аналитики доходов (Тип реквизита Характеристика.СтатьиДоходов).
// 		
// 		* ВыборСтатьиАктивовПассивов - Булево - Определяет возможность выбора в качестве значения Статьи активов/пассивов. Значение по умолчанию Ложь.
// 		* АналитикаАктивовПассивов - Строка - Имя реквизита аналитики активов / пассивов (Тип реквизита Характеристика.СтатьиАктивовПассивов).
// 		
// 		* ЭлементыФормы - Структура - Структура с ключами:
// 			* Статья - Массив - Имена элементов формы для выбора статьи (Например, ТоварыСтатьяРасходов, СтатьяРасходовБезРазбиения)
// 			* АналитикаРасходов - Массив - Имена элементов формы для выбора аналитики статьи расходов.
// 			* АналитикаДоходов - Массив - Имена элементов формы для выбора аналитики статьи доходов.
// 			* АналитикаАктивовПассивов - Массив - Имена элементов формы для выбора аналитики статьи активов/пассивов.
// 
// 		* ТипСтатьи - Строка - Имя служебного реквизита формы, в котором хранится числовое значение типа статьи. Значение по умолчанию Ложь.
// 		                               Реквизит может принимать значения:
// 		                                0 - Статья имеет значение Неопределено;
// 		                                1 - если статья имеет тип ПланВидовХарактеристикСсылка.СтатьиРасходов;
// 		                                2 - если статья имеет тип ПланВидовХарактеристикСсылка.СтатьиДоходов;
// 		                                3 - если статья имеет тип ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов.
// 		
// 		* УсловияДоступностиСтатьиВСтроках - Структура - Дополнительные условия доступности статьи в строках таблицы. Если условий несколько, то доступность определяется по "И".
// 		                                            В элементах структуры:
// 		                                             * Ключ - Строка - Имя реквизита таблицы, определяющее доступность статьи.
// 		                                             * Значение - Булево, ЛюбаяСсылка, Массив, СписокЗначений - Значение реквизита, при котором выбор статьи доступен.
// 		* СкрыватьНедоступныеСтатьиВСтроках - Булево - Если Истина, то недоступные в строках статьи и аналитики скрываются.
// 		                                               Если Ложь, то для ячеек устанавливается оформление ТолькоПросмотр. Значение по умолчанию Ложь.
// 		                                                
Функция ПараметрыВыбораСтатьиИАналитики() Экспорт
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ПутьКДанным", "");
	ПараметрыВыбора.Вставить("Статья",      "");
	ПараметрыВыбора.Вставить("ЗначениеПоУмолчанию",   Неопределено);
	
	ПараметрыВыбора.Вставить("ДоступностьПоОперации", Истина);
	ПараметрыВыбора.Вставить("СкрыватьСтатьюНедоступнуюПоОперации", Истина);
	ПараметрыВыбора.Вставить("ОбязательностьЗаполнения", Истина);
	
	ПараметрыВыбора.Вставить("ВыборСтатьиРасходов", Ложь);
	ПараметрыВыбора.Вставить("АналитикаРасходов",   "");
	ПараметрыВыбора.Вставить("ОтборСтатейРасходов", Новый Структура());
	ПараметрыВыбора.ОтборСтатейРасходов.Вставить("ХозяйственнаяОперация");
	ПараметрыВыбора.ОтборСтатейРасходов.Вставить("ВариантРаспределенияРасходов");
	
	ПараметрыВыбора.Вставить("ВыборСтатьиДоходов", Ложь);
	ПараметрыВыбора.Вставить("АналитикаДоходов",   "");
	
	ПараметрыВыбора.Вставить("ВыборСтатьиАктивовПассивов", Ложь);
	ПараметрыВыбора.Вставить("АналитикаАктивовПассивов",   "");
	
	ПараметрыВыбора.Вставить("ТипСтатьи",     "");
	
	ЭлементыФормы = Новый Структура;
	ЭлементыФормы.Вставить("Статья",                   Новый Массив());
	ЭлементыФормы.Вставить("АналитикаРасходов",        Новый Массив());
	ЭлементыФормы.Вставить("АналитикаДоходов",         Новый Массив());
	ЭлементыФормы.Вставить("АналитикаАктивовПассивов", Новый Массив());
	ПараметрыВыбора.Вставить("ЭлементыФормы", ЭлементыФормы);
	
	ПараметрыВыбора.Вставить("УсловияДоступностиСтатьиВСтроках", Новый Структура);
	ПараметрыВыбора.Вставить("УсловияОбязательногоЗаполненияАналитикиВСтроках", Новый Структура);
	ПараметрыВыбора.Вставить("СкрыватьНедоступныеСтатьиВСтроках", Ложь);
	
	Возврат ПараметрыВыбора;
	
КонецФункции

// Инициализирует пустые значения статей значением по умолчанию.
// Вызывается в соответствующем обработчике событий объекта.
//
// Параметры:
// 	Объект - ДокументОбъектИмяДокумента - Объект
// 	ПараметрыВыбора - Структура, Массив - Параметры выбора статьей (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
// 	                                      Если в объекте несколько статей, то передается массив параметров.
//
Процедура ОбработкаЗаполнения(Объект, Знач ПараметрыВыбора) Экспорт
	
	Если ТипЗнч(ПараметрыВыбора) = Тип("Массив") Тогда
		МассивПараметровВыбора = ПараметрыВыбора;
	Иначе
		МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыбора);
	КонецЕсли;
	
	ИнициализироватьЗначенияСтатейИАналитик(Объект, МассивПараметровВыбора);
	
КонецПроцедуры

// Инициализирует пустые значения статей значением по умолчанию.
// Вызывается в соответствующем обработчике событий объекта.
//
// Параметры:
// 	Объект - ДокументОбъект - Объект
// 	ПараметрыВыбора - Структура, Массив - Параметры выбора статьей (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
// 	                                      Если в объекте несколько статей, то передается массив параметров.
//
Процедура ПередЗаписью(Объект, Знач ПараметрыВыбора) Экспорт
	
	Если ТипЗнч(ПараметрыВыбора) = Тип("Массив") Тогда
		МассивПараметровВыбора = ПараметрыВыбора;
	Иначе
		МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыбора);
	КонецЕсли;
	
	ИнициализироватьЗначенияСтатейИАналитик(Объект, МассивПараметровВыбора);
	
КонецПроцедуры

// Выполняет проверку заполнение статей и аналитик в объекте.
// Вызывается в соответствующем обработчике событий объекта.
//
// Параметры:
// 	Объект - ДокументОбъект - Объект
// 	Отказ - Булево - Флаг отказа записи.
// 	ПроверяемыеРеквизиты - Массив - Массив проверяемых реквизитов объекта.
// 	ПараметрыВыбора - Структура, Массив - Параметры выбора статьей (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
// 	                                      Если в объекте несколько статей, то передается массив параметров.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, Знач ПараметрыВыбора) Экспорт
	
	Если ТипЗнч(ПараметрыВыбора) = Тип("Массив") Тогда
		МассивПараметровВыбора = ПараметрыВыбора;
	Иначе
		МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыбора);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Для Каждого ПараметрыВыбора Из МассивПараметровВыбора Цикл
		
		ЧастиПутиКДанным = СтрРазделить(ПараметрыВыбора.ПутьКДанным, ".");
		Если ЧастиПутиКДанным.Количество() > 1 Тогда
			ЭтоТаблица = Истина;
			ИмяТаблицы = ЧастиПутиКДанным[1];
		ИначеЕсли ЧастиПутиКДанным.Количество() = 1
			И Не ЧастиПутиКДанным[0] = ""
			И ТипЗнч(Объект) = Тип("Структура")
			И ТипЗнч(Объект[ПараметрыВыбора.ПутьКДанным]) = Тип("ТаблицаЗначений") Тогда
			
			ЭтоТаблица = Истина;
			ИмяТаблицы = ПараметрыВыбора.ПутьКДанным;
			
		Иначе
			ЭтоТаблица = Ложь;
			ИмяТаблицы = "";
		КонецЕсли;
		
		ПрефиксПути = ?(ЗначениеЗаполнено(ИмяТаблицы), ИмяТаблицы + ".", "");
		
		ДоступностьПоОперации = Истина;
		Если ПараметрыВыбора.ДоступностьПоОперации <> Неопределено И Не ПараметрыВыбора.ДоступностьПоОперации Тогда
			ДоступностьПоОперации = Ложь;
			МассивНепроверяемыхРеквизитов.Добавить(ПрефиксПути + ПараметрыВыбора.Статья);
		КонецЕсли;
		
		Если НЕ ПараметрыВыбора.ОбязательностьЗаполнения Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ПрефиксПути + ПараметрыВыбора.Статья);
		КонецЕсли;
		
		ДополнительныеПараметры = ?(ПараметрыВыбора.Свойство("ДополнительныеПараметры"),
									ПараметрыВыбора.ДополнительныеПараметры,
									Неопределено);
		
		Если ЭтоТаблица
			И ЗначениеЗаполнено(ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках) Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить(ПрефиксПути + ПараметрыВыбора.Статья);
			
			КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
			
			Если ТипЗнч(Объект[ИмяТаблицы]) = Тип("ТаблицаЗначений") Тогда
				ПутьКДанным				= "";
				ПредставлениеТЧ			= ДополнительныеПараметры.ПредставлениеТЧ;
				ПредставлениеРеквизита	= ДополнительныеПараметры.ПредставленияРеквизитов[ПараметрыВыбора.Статья];
			Иначе
				МетаданныеОбъекта	= Объект.Метаданные();
				ТабличнаяЧасть		= МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТаблицы);
				Реквизит			= ТабличнаяЧасть.Реквизиты.Найти(ПараметрыВыбора.Статья);
				
				ПутьКДанным				= "Объект";
				ПредставлениеТЧ			= ТабличнаяЧасть.Синоним;
				ПредставлениеРеквизита	= Реквизит.Синоним;
			КонецЕсли;
			
			Для Каждого Строка Из Объект[ИмяТаблицы] Цикл
				ДоступностьВСтроке = ДоступностьПоОперации;
				Для Каждого КлючИЗначение Из ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
						Если КлючИЗначение.Значение.Найти(Строка[КлючИЗначение.Ключ]) = Неопределено Тогда
							ДоступностьВСтроке = Ложь;
						КонецЕсли;
					ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
						Если КлючИЗначение.Значение.НайтиПоЗначению(Строка[КлючИЗначение.Ключ]) = Неопределено Тогда
							ДоступностьВСтроке = Ложь;
						КонецЕсли;
					ИначеЕсли Строка[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						ДоступностьВСтроке = Ложь;
					КонецЕсли;
					Если Не ДоступностьВСтроке Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ДоступностьВСтроке
					И Не ЗначениеЗаполнено(Строка[ПараметрыВыбора.Статья]) Тогда
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, Строка.НомерСтроки, ПараметрыВыбора.Статья);
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Не заполнено поле ""%1"" в строке %2 списка ""%3""'"),
							ПредставлениеРеквизита, Строка.НомерСтроки, ПредставлениеТЧ),
						КлючДанных,
						Поле,
						ПутьКДанным,
						Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыбора.АналитикаРасходов)
			И ПроверяемыеРеквизиты.Найти(ПрефиксПути + ПараметрыВыбора.АналитикаРасходов) <> Неопределено Тогда
			
			Реквизиты = ПараметрыВыбора.Статья + "," + ПараметрыВыбора.АналитикаРасходов;
			
			Если ЭтоТаблица Тогда
				Реквизиты = Новый Структура(ИмяТаблицы, Реквизиты);
			КонецЕсли;
			
			ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(Объект,
																				Реквизиты,
																				МассивНепроверяемыхРеквизитов,
																				Отказ,
																				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыбора.АналитикаДоходов)
			И ПроверяемыеРеквизиты.Найти(ПрефиксПути + ПараметрыВыбора.АналитикаДоходов) <> Неопределено Тогда
			
			Реквизиты = ПараметрыВыбора.Статья + "," + ПараметрыВыбора.АналитикаДоходов;
			
			Если ЭтоТаблица Тогда
				Реквизиты = Новый Структура(ИмяТаблицы, Реквизиты);
			КонецЕсли;
			
			ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(Объект,
																				Реквизиты,
																				МассивНепроверяемыхРеквизитов,
																				Отказ,
																				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыбора.АналитикаАктивовПассивов)
			И ПроверяемыеРеквизиты.Найти(ПрефиксПути + ПараметрыВыбора.АналитикаАктивовПассивов) <> Неопределено Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить(ПрефиксПути + ПараметрыВыбора.АналитикаАктивовПассивов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Настраивает форму объекта для выбора статей и аналитики при создании формы не сервере.
// Вызывается в соответствующем обработчике событий формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта:
// 		* Объект - ДокументОбъект - Объект формы
// 	ПараметрыВыбора - Структура, Массив - Параметры выбора статьей (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
// 	                                      Если в объекте несколько статей, то передается массив параметров.
//
Процедура ПриСозданииНаСервере(Форма, Знач ПараметрыВыбора) Экспорт
	
	ДанныеВыборСтатейИАналитик = ДанныеВыборСтатейИАналитик(Форма, ПараметрыВыбора);
	
	#Область УстановкаУсловногоОформления
	УсловноеОформление = Форма.УсловноеОформление;
	Для каждого Параметры Из ДанныеВыборСтатейИАналитик.МассивПараметровВыбора Цикл
		
		ЧастиПутиКДанным = СтрРазделить(Параметры.ПутьКДанным, ".");
		Если ЧастиПутиКДанным.Количество() = 1
			И Параметры.ПутьКДанным <> ""
			И ТипЗнч(Форма[Параметры.ПутьКДанным]) = Тип("ДанныеФормыКоллекция") Тогда
			ПутьКДаннымСлужебныхРеквизитов = Параметры.ПутьКДанным;
		ИначеЕсли ЧастиПутиКДанным.Количество() = 1 Тогда
			ПутьКДаннымСлужебныхРеквизитов = "";
		Иначе
			ПутьКДаннымСлужебныхРеквизитов = Параметры.ПутьКДанным;
		КонецЕсли;
		
		#Область ДоступностьВСтрокахТаблицыПоУсловию
		Если ЗначениеЗаполнено(Параметры.УсловияДоступностиСтатьиВСтроках) Тогда
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.Статья Цикл
				ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			Если Параметры.ВыборСтатьиРасходов И ЗначениеЗаполнено(Параметры.ЭлементыФормы.АналитикаРасходов) Тогда
				Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаРасходов Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
			КонецЕсли;
			
			Если Параметры.ВыборСтатьиДоходов И ЗначениеЗаполнено(Параметры.ЭлементыФормы.АналитикаРасходов) Тогда
				Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаДоходов Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
			КонецЕсли;
			
			Если Параметры.ВыборСтатьиАктивовПассивов И ЗначениеЗаполнено(Параметры.ЭлементыФормы.АналитикаАктивовПассивов) Тогда
				Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаАктивовПассивов Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
			КонецЕсли;
			
			Группа = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			Группа.ТипГруппы =  ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			Для каждого ПолеИЗначение Из Параметры.УсловияДоступностиСтатьиВСтроках Цикл
				ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, ПолеИЗначение.Ключ);
				
				Если ТипЗнч(ПолеИЗначение.Значение) = Тип("Массив") Тогда
					ЗначениеОтбора = Новый СписокЗначений();
					ЗначениеОтбора.ЗагрузитьЗначения(ПолеИЗначение.Значение);
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.НеВСписке;
				ИначеЕсли ТипЗнч(ПолеИЗначение.Значение) = Тип("СписокЗначений") Тогда
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.НеВСписке;
				Иначе
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.НеРавно; 
				КонецЕсли;
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновки;
				ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
			КонецЦикла;
			
			Если Параметры.СкрыватьНедоступныеСтатьиВСтроках Тогда
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			Иначе
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			КонецЕсли;
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			
		КонецЕсли;
		#КонецОбласти
		
		Если ЗначениеЗаполнено(Параметры.ЭлементыФормы.АналитикаРасходов) Тогда
			
			#Область ОтметкаНезаполненного
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаРасходов Цикл
				ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			
			///////////////////////
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаРасходов Цикл
				ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			СписокУсловий = Параметры.УсловияОбязательногоЗаполненияАналитикиВСтроках; // Структура
			Если СписокУсловий.Количество() <> 0 Тогда
				Для Каждого ЭлементСтруктуры Из СписокУсловий Цикл
					ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, ЭлементСтруктуры.Ключ);
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемента.ПравоеЗначение = ЭлементСтруктуры.Значение;
				КонецЦикла;
			Иначе
				ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;
			КонецЕсли;
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.АналитикаРасходов);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			#КонецОбласти
			
			#Область Видимость
			Если ЗначениеЗаполнено(Параметры.ТипСтатьи) Тогда
				
				ЭлементОформления = УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаРасходов Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
				
				ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.ТипСтатьи);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ОтборЭлемента.ПравоеЗначение = 1;
				
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
				
			КонецЕсли;
			#КонецОбласти
			
			#Область ТолькоПросмотр
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаРасходов Цикл
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.Статья);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.АналитикаРасходов);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Для каждого ПолеИЗначение Из Параметры.УсловияДоступностиСтатьиВСтроках Цикл
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, ПолеИЗначение.Ключ);
				
				Если ТипЗнч(ПолеИЗначение.Значение) = Тип("Массив") Тогда
					ЗначениеОтбора = Новый СписокЗначений();
					ЗначениеОтбора.ЗагрузитьЗначения(ПолеИЗначение.Значение);
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли ТипЗнч(ПолеИЗначение.Значение) = Тип("СписокЗначений") Тогда
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Равно; 
				КонецЕсли;
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновки;
				ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Параметры.ТипСтатьи) Тогда
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.ТипСтатьи);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = 1;
			КонецЕсли;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью расходов>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			#КонецОбласти

		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЭлементыФормы.АналитикаДоходов) Тогда 
			
			#Область ОтметкаНезаполненного
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаДоходов Цикл
				ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаДоходов Цикл
				ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.АналитикаДоходов);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			#КонецОбласти
			
			#Область Видимость
			Если ЗначениеЗаполнено(Параметры.ТипСтатьи) Тогда
				ЭлементОформления = УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаДоходов Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
				
				ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.ТипСтатьи);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ОтборЭлемента.ПравоеЗначение = 2;
				
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			КонецЕсли;
			#КонецОбласти
		
			#Область ТолькоПросмотр
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаДоходов Цикл
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.Статья);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.АналитикаДоходов);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Для каждого ПолеИЗначение Из Параметры.УсловияДоступностиСтатьиВСтроках Цикл
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, ПолеИЗначение.Ключ);
				
				Если ТипЗнч(ПолеИЗначение.Значение) = Тип("Массив") Тогда
					ЗначениеОтбора = Новый СписокЗначений();
					ЗначениеОтбора.ЗагрузитьЗначения(ПолеИЗначение.Значение);
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли ТипЗнч(ПолеИЗначение.Значение) = Тип("СписокЗначений") Тогда
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Равно; 
				КонецЕсли;
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновки;
				ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Параметры.ТипСтатьи) Тогда
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.ТипСтатьи);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = 2;
			КонецЕсли;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью доходов>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			#КонецОбласти
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЭлементыФормы.АналитикаАктивовПассивов) Тогда

			#Область ПометкаНеИспользуется
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаАктивовПассивов Цикл
				ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.КэшРеквизитовСтатьиАктивовПассивов.АналитикаАктивовПассивовНеИспользуется);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется'"));
			#КонецОбласти
			
			#Область Видимость
			Если ЗначениеЗаполнено(Параметры.ТипСтатьи) Тогда
				
				ЭлементОформления = УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаАктивовПассивов Цикл
					ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				КонецЦикла;
				
				ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.ТипСтатьи);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ОтборЭлемента.ПравоеЗначение = 3;
				
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			КонецЕсли;
			#КонецОбласти
			
			#Область ТолькоПросмотр
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.АналитикаАктивовПассивов Цикл
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			КонецЦикла;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.Статья);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, Параметры.АналитикаАктивовПассивов);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Для каждого ПолеИЗначение Из Параметры.УсловияДоступностиСтатьиВСтроках Цикл
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(Параметры.ПутьКДанным, ПолеИЗначение.Ключ);
				
				Если ТипЗнч(ПолеИЗначение.Значение) = Тип("Массив") Тогда
					ЗначениеОтбора = Новый СписокЗначений();
					ЗначениеОтбора.ЗагрузитьЗначения(ПолеИЗначение.Значение);
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли ТипЗнч(ПолеИЗначение.Значение) = Тип("СписокЗначений") Тогда
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ЗначениеОтбора = ПолеИЗначение.Значение;
					ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Равно; 
				КонецЕсли;
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновки;
				ОтборЭлемента.ПравоеЗначение = ЗначениеОтбора;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Параметры.ТипСтатьи) Тогда
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанных(ПутьКДаннымСлужебныхРеквизитов, Параметры.ТипСтатьи);
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = 3;
			КонецЕсли;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью активов/пассивов>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			#КонецОбласти
		КонецЕсли; 
	КонецЦикла;
	#КонецОбласти
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
		 И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "ВыборСтатейИАналитик", ДанныеВыборСтатейИАналитик);
	
	ОбновитьРеквизитыСтатьи(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	УстановитьСвойстваЭлементовСтатей(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	УстановитьСвязьАналитикСоСтатьями(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	Для каждого ПараметрыВыбора Из ДанныеВыборСтатейИАналитик.МассивПараметровВыбора Цикл
		ДоходыИРасходыКлиентСервер.УстановитьСвойстваЭлементовАналитики(Форма, ПараметрыВыбора);
	КонецЦикла
	
КонецПроцедуры

// Настраивает форму объекта для выбора статей и аналитики при чтении объекта на сервере.
// Вызывается в соответствующем обработчике событий формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
// 	ПараметрыВыбора - Структура, Массив - Параметры выбора статьей (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
// 	                                      Если в объекте несколько статей, то передается массив параметров.
//
Процедура ПриЧтенииНаСервере(Форма, Знач ПараметрыВыбора) Экспорт
	
	ДанныеВыборСтатейИАналитик = ДанныеВыборСтатейИАналитик(Форма, ПараметрыВыбора);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "ВыборСтатейИАналитик", ДанныеВыборСтатейИАналитик);
	
	ОбновитьРеквизитыСтатьи(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	УстановитьСвойстваЭлементовСтатей(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	УстановитьСвязьАналитикСоСтатьями(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	Для каждого ПараметрыВыбора Из ДанныеВыборСтатейИАналитик.МассивПараметровВыбора Цикл
		ДоходыИРасходыКлиентСервер.УстановитьСвойстваЭлементовАналитики(Форма, ПараметрыВыбора);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет служебные реквизиты выбора статей и аналитик после записи на сервере.
// Вызывается в соответствующем обработчике событий формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
//
Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	ДанныеВыборСтатейИАналитик = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "ВыборСтатейИАналитик");
	ОбновитьРеквизитыСтатьи(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	
КонецПроцедуры

// Обновляет служебные реквизиты выбора статей и аналитик 
// Вызывается при необходимости (например после преобразования объекта в реквизит формы).
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
//
Процедура ОбновитьСлужебныеРеквизиты(Форма) Экспорт
	
	ДанныеВыборСтатейИАналитик = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "ВыборСтатейИАналитик");
	ОбновитьРеквизитыСтатьи(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);	
	
КонецПроцедуры

// Проверяет соответствие выбранных статей и аналитик переданным параметрам выбора.
// Выполняет настройку формы под новые параметры выбора.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
// 	ПараметрыВыбора - Структура, Массив - Параметры выбора статьей (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
// 	                                      Если в объекте несколько статей, то передается массив параметров.
//
Процедура ПриИзмененииПараметровВыбораСтатей(Форма, Знач ПараметрыВыбора) Экспорт
	
	ДанныеВыборСтатейИАналитик = ДанныеВыборСтатейИАналитик(Форма, ПараметрыВыбора);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "ВыборСтатейИАналитик", ДанныеВыборСтатейИАналитик);
	
	ИнициализироватьЗначенияСтатейИАналитик(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	
	ОбновитьРеквизитыСтатьи(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	УстановитьСвойстваЭлементовСтатей(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	УстановитьСвязьАналитикСоСтатьями(Форма, ДанныеВыборСтатейИАналитик.МассивПараметровВыбора);
	Для каждого ПараметрыВыбора Из ДанныеВыборСтатейИАналитик.МассивПараметровВыбора Цикл
		ДоходыИРасходыКлиентСервер.УстановитьСвойстваЭлементовАналитики(Форма, ПараметрыВыбора);
	КонецЦикла
	
КонецПроцедуры

// Заполняет в строке табличный части статью и аналитику расходов списания номенклатуры по статистике.
// Вызывается из механизма ОбработкаТабличнойЧасти.
// 
// Параметры:
// 	ТекущаяСтрока - Структура - Данные строки.
// 	Номенклатура - СправочникСсылка.Номенклатура - Номенклатура, для которой необходимо заполнить статью и аналитику расходов.
// 	ПараметрыДействия - Структура - Параметры действия. (См. ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры)
//
Процедура ЗаполнитьСтатьюИАналитикуРасходовНоменклатуры(ТекущаяСтрока, ПараметрыДействия) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]) Тогда
		Возврат;
	Конецесли;
	
	Номенклатура = ТекущаяСтрока.Номенклатура;
	УказанаХарактеристика = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика")
								И ЗначениеЗаполнено(ТекущаяСтрока.Характеристика);
	
	СтатьяИАналитика = 
		СтатьяАналитикаРасходовПоУмолчанию(
			ПараметрыДействия.ХозяйственнаяОперация,
			ПараметрыДействия.Организация,
			ПараметрыДействия.Подразделение,
			Номенклатура,
			?(УказанаХарактеристика, ТекущаяСтрока.Характеристика, Неопределено));
	
	Если СтатьяИАналитика.Следующий() Тогда
		ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]     = СтатьяИАналитика.СтатьяРасходов;
		ТекущаяСтрока[ПараметрыДействия.АналитикаРасходов]  = СтатьяИАналитика.АналитикаРасходов;
	КонецЕсли;
	
	Если ПараметрыДействия.ДействиеВФорме Тогда
		ЗаполнитьРеквизитыСтатьиВСтрокеТаблицы(ТекущаяСтрока, ПараметрыДействия.ПараметрыВыбораСтатейИАналитик);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в строке табличный части статью и аналитику расходов списания номенклатуры по статистике.
// Вызывается из механизма пакетной обработке строк табличных частей.
// 
// Параметры:
// 	ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
// 	ПараметрыДействия - Структура - Параметры действия. (См. ДоходыИРасходыКлиентСервер.ВставитьДействиеЗаполнитьСтатьюАналитикуРасходовНоменклатуры)
// 	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьСтатьюИАналитикуРасходовНоменклатурыПакетно(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]) Тогда
		Возврат;
	Конецесли;
	
	СтатьяИАналитика = 
		СтатьяАналитикаРасходовПоУмолчаниюПакетно(КэшированныеЗначения);
	
	Если СтатьяИАналитика <> Неопределено Тогда
		ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]     = СтатьяИАналитика.СтатьяРасходов;
		ТекущаяСтрока[ПараметрыДействия.АналитикаРасходов]  = СтатьяИАналитика.АналитикаРасходов;
	КонецЕсли;
	
	Если ПараметрыДействия.ДействиеВФорме Тогда
		ЗаполнитьРеквизитыСтатьиВСтрокеТаблицыПакетно(ТекущаяСтрока, ПараметрыДействия.ПараметрыВыбораСтатейИАналитик, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Очищает в строке табличный части статью и аналитику расходов.
// Вызывается из механизма ОбработкаТабличнойЧасти.
// 
// Параметры:
// 	ТекущаяСтрока - Структура - Данные строки.
// 	ПараметрыДействия - Структура - Параметры действия. (См. ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов)
//
Процедура ОчиститьСтатьюАналитикуРасходов(ТекущаяСтрока, ПараметрыДействия) Экспорт
	
	ПараметрыВыбораСтатейИАналитик = ПараметрыДействия.ПараметрыВыбораСтатейИАналитик;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]) Тогда
		ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов] = ПараметрыВыбораСтатейИАналитик.ЗначениеПоУмолчанию;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.АналитикаРасходов]) Тогда
		ТекущаяСтрока[ПараметрыДействия.АналитикаРасходов] = Неопределено;
	КонецЕсли;
	
	Если ПараметрыДействия.ДействиеВФорме Тогда
		ЗаполнитьРеквизитыСтатьиВСтрокеТаблицы(ТекущаяСтрока, ПараметрыДействия.ПараметрыВыбораСтатейИАналитик);
	КонецЕсли;
	
КонецПроцедуры

// Очищает в строке табличной части статью и аналитику расходов. Вызывается из механизма пакетной обработки строк
// табличных частей.
// 
// Параметры:
// 	ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
// 	ПараметрыДействия - Структура - Параметры действия. (См. ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов)
// 	КэшированныеДанные - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ОчиститьСтатьюАналитикуРасходовПакетно(ТекущаяСтрока, ПараметрыДействия, КэшированныеДанные) Экспорт
	
	ПараметрыВыбораСтатейИАналитик = ПараметрыДействия.ПараметрыВыбораСтатейИАналитик;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]) Тогда
		ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов] = ПараметрыВыбораСтатейИАналитик.ЗначениеПоУмолчанию;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.АналитикаРасходов]) Тогда
		ТекущаяСтрока[ПараметрыДействия.АналитикаРасходов] = Неопределено;
	КонецЕсли;
	
	Если ПараметрыДействия.ДействиеВФорме Тогда
		ЗаполнитьРеквизитыСтатьиВСтрокеТаблицыПакетно(ТекущаяСтрока, ПараметрыДействия.ПараметрыВыбораСтатейИАналитик, КэшированныеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует строку после добавления.
// Вызывается из механизма ОбработкаТабличнойЧасти.
// 
// Параметры:
// 	ТекущаяСтрока - Структура - Данные строки.
// 	ПараметрыДействия - Структура - Параметры действия. (См. ДоходыИРасходыКлиентСервер.ВставитьДействиеИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки)
//
Процедура ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки(ТекущаяСтрока, ПараметрыДействия) Экспорт
	
	Для каждого ПараметрыВыбора Из ПараметрыДействия.МассивПараметровВыбораСтатейИАналитик Цикл
		
		ДоходыИРасходыКлиентСервер.ИнициализироватьЗначениеСтатьиИАналитик(ТекущаяСтрока, ПараметрыВыбора);
		
		Если ПараметрыДействия.ДействиеВФорме Тогда
			ЗаполнитьРеквизитыСтатьиВСтрокеТаблицы(ТекущаяСтрока, ПараметрыВыбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует строку табличной части после добавления. Вызывается из механизма пакетной обработки табличной части.
// 
// Параметры:
// 	ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
// 	ПараметрыДействия - Структура - Параметры действия. (См. ДоходыИРасходыКлиентСервер.ВставитьДействиеИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки)
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ИнициализироватьСтатьюИАналитикуПослеДобавленияСтрокиПакетно(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	Для каждого ПараметрыВыбора Из ПараметрыДействия.МассивПараметровВыбораСтатейИАналитик Цикл
		
		ДоходыИРасходыКлиентСервер.ИнициализироватьЗначениеСтатьиИАналитик(ТекущаяСтрока, ПараметрыВыбора);
		
		Если ПараметрыДействия.ДействиеВФорме Тогда
			ЗаполнитьРеквизитыСтатьиВСтрокеТаблицыПакетно(ТекущаяСтрока, ПараметрыВыбора, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения статьи аналитики расходов
// при обработке строк табличной части. Возвращается последние использованные в документах статьи и аналитики расходов.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаСтатьяАналитикаРасходовПоУмолчанию(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьСтатьюАналитикуРасходовНоменклатуры",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		ИспользуетсяХарактеристика = ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("Характеристика", КэшированныеЗначения);
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Товары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ПрочиеРасходы.АналитикаУчетаНоменклатуры,
		|	МАКСИМУМ(ПрочиеРасходы.Период) КАК Период
		|ПОМЕСТИТЬ ВтСтатьяАналитикаРасходовПоУмолчаниюПромежуточная
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
		|			ПО ПрочиеРасходы.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИсточникДанных КАК Товары
		|			ПО КлючиАналитикиУчетаНоменклатуры.Номенклатура = Товары.Номенклатура
		|				И КлючиАналитикиУчетаНоменклатуры.Характеристика = Товары.Характеристика
		|				И ПрочиеРасходы.Организация = &Организация
		|				И ПрочиеРасходы.Подразделение = &Подразделение
		|				И ПрочиеРасходы.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаНоменклатуры КАК Отбор
		|			ГДЕ
		|				(Отбор.Номенклатура,
		|				Отбор.Характеристика,
		|				ПрочиеРасходы.АналитикаУчетаНоменклатуры,
		|				ПрочиеРасходы.Организация,
		|				ПрочиеРасходы.Подразделение,
		|				ПрочиеРасходы.ХозяйственнаяОперация,
		|				ИСТИНА) В
		|					(ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.Характеристика,
		|						Отбор.КлючАналитики,
		|						&Организация,
		|						&Подразделение,
		|						&ХозяйственнаяОперация,
		|						Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					ИЗ
		|						ВтИсточникДанных КАК Товары)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаНоменклатуры КАК Отбор
		|			ГДЕ
		|				(Отбор.Номенклатура,
		|				ИСТИНА,
		|				ПрочиеРасходы.АналитикаУчетаНоменклатуры,
		|				ПрочиеРасходы.Организация,
		|				ПрочиеРасходы.Подразделение,
		|				ПрочиеРасходы.ХозяйственнаяОперация,
		|				ИСТИНА) В
		|					(ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						ИСТИНА,
		|						Отбор.КлючАналитики,
		|						&Организация,
		|						&Подразделение,
		|						&ХозяйственнаяОперация,
		|						Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					ИЗ
		|						ВтИсточникДанных КАК Товары))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрочиеРасходы.АналитикаУчетаНоменклатуры,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ИдентификаторСтрокиВТ";
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВтСтатьяАналитикаРасходовПоУмолчаниюПромежуточная");
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	СтатьиРасходов.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	СтатьиРасходов.Номенклатура КАК Номенклатура,
		|	СтатьиРасходов.Характеристика КАК Характеристика,
		|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
		|	ПрочиеРасходы.Период КАК Период
		|ИЗ ВтСтатьяАналитикаРасходовПоУмолчаниюПромежуточная КАК СтатьиРасходов
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
		|		ПО ПрочиеРасходы.АналитикаУчетаНоменклатуры = СтатьиРасходов.АналитикаУчетаНоменклатуры
		|			И ПрочиеРасходы.Организация = &Организация
		|			И ПрочиеРасходы.Подразделение = &Подразделение
		|			И ПрочиеРасходы.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|			И ПрочиеРасходы.Период = СтатьиРасходов.Период
		|";

		Если Не ИспользуетсяХарактеристика Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.Характеристика,", "ИСТИНА,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.Характеристика КАК Характеристика,", "ИСТИНА КАК Характеристика,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Отбор.Характеристика,", "ИСТИНА,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "ИСТИНА");
		КонецЕсли;
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "СтатьяАналитикаРасходовПоУмолчанию");
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Организация", 			ПараметрыДействия.Организация);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Подразделение", 			ПараметрыДействия.Подразделение);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ХозяйственнаяОперация", 	ПараметрыДействия.ХозяйственнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения реквизитов по статье
// расходов/доходов при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаЗначенияРеквизитовСтатьи(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ОчиститьСтатьюАналитикуРасходов,ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		ПараметрыВыбора 	= ПараметрыДействия.ПараметрыВыбораСтатейИАналитик;
		ТипСтатьи 			= ПакетнаяОбработкаТабличнойЧастиСервер.ТипКолонкиВИсточникеДанных(ПараметрыВыбора.Статья, ОписаниеЗапроса);
		
		Если ТипСтатьи = ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")) Тогда
			ТекстЗапроса 	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
				|	СтатьиРасходов.ТипЗначения,
				|	СтатьиРасходов.КонтролироватьЗаполнениеАналитики,
				|	СтатьиРасходов.АналитикаРасходовЗаказРеализация
				|ИЗ
				|	ВтИсточникДанных КАК ИсточникДанных
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
				|		ПО &ЗначениеПоУмолчаниюСтатейИАналитик = СтатьиРасходов.Ссылка
				|";
		ИначеЕсли ТипСтатьи = ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов")) Тогда
			ТекстЗапроса 	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
				|	СтатьиДоходов.ТипЗначения,
				|	СтатьиДоходов.КонтролироватьЗаполнениеАналитики
				|ИЗ
				|	ВтИсточникДанных КАК ИсточникДанных
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
				|		ПО &ЗначениеПоУмолчаниюСтатейИАналитик = СтатьиДоходов.Ссылка
				|";
		ИначеЕсли ТипСтатьи = ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")) Тогда
			ТекстЗапроса 	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
				|	СтатьиАктивовПассивов.ТипЗначения,
				|	СтатьиАктивовПассивов.БезАналитики
				|ИЗ
				|	ВтИсточникДанных КАК ИсточникДанных
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
				|		ПО &ЗначениеПоУмолчаниюСтатейИАналитик = СтатьиАктивовПассивов.Ссылка
				|";
		КонецЕсли;
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ЗначенияРеквизитовСтатьи");
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ЗначениеПоУмолчаниюСтатейИАналитик", ПараметрыВыбора.ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения поля ПринятиеКНалоговомуУчету
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаПризнакПринимаетсяКНУ(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПолеСтатьяРасходов;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьПризнакПринимаетсяКНУ",
			СтруктураДействий,
			КэшированныеЗначения) Тогда
				
		Если ПустаяСтрока(ПолеСтатьяРасходов) Тогда
			ПолеСтатьяРасходов = "СтатьяРасходов";
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
						|	ЕСТЬNULL(СтатьиРасходов.ПринятиеКНалоговомуУчету, ЛОЖЬ) КАК ПринятиеКНалоговомуУчету
						|ИЗ ВтИсточникДанных КАК ИсточникДанных
						|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
						|		ПО СтатьиРасходов.Ссылка = ИсточникДанных.СтатьяРасходов
						|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсточникДанных.СтатьяРасходов", "ИсточникДанных." + ПолеСтатьяРасходов);
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПризнакПринимаетсяКНУ");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает последние использованные в документах статью и аналитику расходов.
//
// Параметры:
//	КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - Статья и аналитика расходов.
//
Функция СтатьяАналитикаРасходовПоУмолчаниюПакетно(КэшированныеЗначения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляОбработки = ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки(
							"СтатьяАналитикаРасходовПоУмолчанию", КэшированныеЗначения); 
	Если Не ДанныеДляОбработки = Неопределено
		И ДанныеДляОбработки.Количество() Тогда
			Возврат ДанныеДляОбработки[0];
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПрочаяВыручка);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ПрочаяВыручка);
		
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ПрочаяВыручка);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	КонецЕсли;
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеДоходы;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстДопУсловий = "НЕ ДанныеРегистра.РасчетСебестоимости";
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстДопУсловий = "
		|	НЕ ДанныеРегистра.РасчетПартий
		|	И НЕ ДанныеРегистра.РасчетСебестоимости
		|";
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда 
		ТекстДопУсловий = "
		|	НЕ ДанныеРегистра.РасчетПартий
		|	И НЕ ДанныеРегистра.РасчетСебестоимости
		|";
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочаяВыручка;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстДопУсловий = "";
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра,
				МетаданныеДокумента,
				ТекстДопУсловий));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам денежных документов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПрочиеДоходы");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПрочиеРасходы");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ВыручкаИСебестоимостьПродаж");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПрочаяВыручка");
		
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПрочиеДоходы", 
		РегистрыНакопления.ПрочиеДоходы.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПрочиеРасходы", 
		РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийПрочаяВыручка", 
		РегистрыНакопления.ПрочаяВыручка.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения реализации товаров, работ, услуг, прочих активов.
// Операция формирует движения по регистру ПрочаяВыручка.
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстПрочаяВыручкаПоДокументу - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку с полями
// 	     ВыборкаИзРезультатаЗапроса:
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается приобретение.
// 	     * Партнер - СправочникСсылка.Партнеры - партнер.
// 	     * Контрагент - СправочникСсылка.Контрагенты - контрагент партнера.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями, СправочникСсылка.ДоговорыКредитовИДепозитов - Договор приобретения ценностей.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, от имени которого регистрируется документ приобретения.
// 	     * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо документа.
//    	 * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности операции.
//       * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * СтатьяДоходов - ПланВидовХарактеристикСсылка.СтатьиДоходов - Статья расходов, на которую списываются приобретаемые ценности.
// 	     * АналитикаДоходов - Характеристика.СтатьиДоходов - Аналитика отражения расходов.
// 	     * Количество - Число - количество товара, услуги.
// 	     * ВыручкаБезНДСУпр - Число - выручка без НДС за товар, услуги.
// 	     * ВыручкаБезНДСРегл - Число - выручка без НДС за товар, услуги.
// 	     * НДСУпр - Число - сумма НДС в валюте Упр.
// 	     * НДСРегл - Число - сумма НДС в валюте Регл.
// 	     * СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС.
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС документа приобретения.
// 	     * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - валюта взаиморасчетов.
// 	     * СуммаВзаиморасчетов - Число - сумма взаиморасчетов.
Процедура ОтразитьПрочуюВыручку(Запрос, ТекстыЗапроса, Регистры, ТекстПрочаяВыручкаПоДокументу) Экспорт

#Область ПрочаяВыручка

	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходовРегл", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходовРегл"));
	
	ТекстЗапросаПрочаяВыручка = 
	"ВЫБРАТЬ
	|	ПрочаяВыручка.Период КАК Период,
	|	ПрочаяВыручка.Организация КАК Организация,
	|	ПрочаяВыручка.Партнер КАК Партнер,
	|	ПрочаяВыручка.Контрагент КАК Контрагент,
	|	ПрочаяВыручка.Договор КАК Договор,
	|	ПрочаяВыручка.Подразделение КАК Подразделение,
	|	ПрочаяВыручка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НД.УчетДоходов, ЛОЖЬ) ТОГДА
	|			ПрочаяВыручка.НаправлениеДеятельности
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ПрочаяВыручка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПрочаяВыручка.СтатьяДоходов КАК СтатьяДоходов,
	|	ПрочаяВыручка.АналитикаДоходов КАК АналитикаДоходов,
	|	ПрочаяВыручка.Количество КАК Количество,
	|	ПрочаяВыручка.ВыручкаБезНДСУпр КАК ВыручкаБезНДСУпр,
	|	ПрочаяВыручка.ВыручкаБезНДСРегл КАК ВыручкаБезНДСРегл,
	|	ПрочаяВыручка.НДСУпр КАК НДСУпр,
	|	ПрочаяВыручка.НДСРегл КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА ПрочаяВыручка.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ ПрочаяВыручка.НалогообложениеНДС
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	ПрочаяВыручка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПрочаяВыручка.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПрочаяВыручка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ПрочаяВыручка.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ПрочаяВыручка.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	#ПрочаяВыручка КАК ПрочаяВыручка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НД
	|		ПО ПрочаяВыручка.НаправлениеДеятельности = НД.Ссылка
	|";
	
#КонецОбласти
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("ПрочаяВыручка", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("ПрочаяВыручка", ТекстЗапросаПрочаяВыручка);
	КонецЕсли;
	ТекстыЗапросовДанныхДокумента = Новый Структура("ПрочаяВыручка", ТекстПрочаяВыручкаПоДокументу);
	ПроведениеДокументов.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);

КонецПроцедуры

#КонецОбласти

// Возвращает валюту управленческого учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту УУ. Если валюта УУ не заполнена - возвращает пустую ссылку на валюту.
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - валюта управленческого учета.
//
Функция ПолучитьВалютуУправленческогоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции

// Возвращает контрагента из документа основания
//
// Параметры:
//  ДокументОснование - ДокументСсылка - документ, для которого нужно получить контрагента.
//
// Возвращаемое значение:
//	СправочникСсылка.Контрагенты - ссылка на контрагента.
//
Функция ПолучитьКонтрагентаИзОснования(ДокументОснование) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Контрагент = Неопределено;
	
	Если ТипОснования = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Контрагент,ХозяйственнаяОперация,БанковскийСчетПолучатель");
		Если ЗначенияРеквизитов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Контрагент = ЗначенияРеквизитов.БанковскийСчетПолучатель.Владелец;
		Иначе
			Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли; 

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Контрагент,ХозяйственнаяОперация,КассаПолучатель");

		Если ЗначенияРеквизитов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Контрагент = ЗначенияРеквизитов.КассаПолучатель.Владелец;
		Иначе
			Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаЗадолженности") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		// Нет возможности однозначно определить контрагента, т.к. сведения хранятся в табличной части.
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		// Нет возможности однозначно определить контрагента, т.к. сведения хранятся в табличной части.
		
	КонецЕсли;

	Возврат Контрагент;
	
КонецФункции

#Область ПроцедурыРаспределенияДоходовИРасходовПоБазеРаспределения

// Процедура выполняет распределение расходов на себестоимость товаров 
// по рассчитанной базе распределения.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - документ, которым отражены расходы, распределяемые на себестоимость товаров.
//	СтруктураДополнительныеСвойства - Структура - дополнительные свойства документа:
//		* ТаблицыДляДвижений - Структура - Таблицы для движений:
//			** ТаблицаРасходов - ТаблицаЗначений - Таблица с колонками:
//				*** НомерСтроки - Число - Номер строки таблицы
//	Движения - КоллекцияДвижений - наборы записей регистров.
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура РаспределитьРасходыНаСебестоимостьТоваровПоБазе(ДокументОбъект, СтруктураДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасходов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходов;
	РезультатЗапросаПоБазе = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.РезультатЗапросаПоБазе;

	Если Отказ Или ТаблицаРасходов.Количество() = 0 Или РезультатЗапросаПоБазе.Пустой() Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейСебестоимостьТоваров = Движения.СебестоимостьТоваров;
	НаборЗаписейСебестоимостьТоваров.Записывать = Истина;

	СчетчикЗаписей  = 0;
	СтруктураОтбора = Новый Структура("ИндексБазы");

	// Выборка строк базы распределения по индексу аналитики.
	ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

		// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
		// Данные затраты будут распределены по одинаковой базе распределения.
		МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		Если МассивРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоИндексу.База = 0 Тогда
			
			Выборка.Следующий();
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отсутствует база для распределения расходов по правилу %1 для аналитики %2. Укажите другое правило или удалите строку из документа.'"),
				Выборка.ПравилоРаспределения,
				Выборка.АналитикаРасходов);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Расходы[" + (МассивРасходов[0].НомерСтроки - 1) + "].ПравилоРаспределения",
				,
				Отказ);
			
			Продолжить;
			
		КонецЕсли;

		Для Каждого СтрокаРасходов Из МассивРасходов Цикл
		
			СуммаКРаспределению = СтрокаРасходов.Сумма;
			СуммаБезНДСКРаспределению = СтрокаРасходов.СуммаБезНДС;
			СуммаРеглКРаспределению = СтрокаРасходов.СуммаРегл;
			БазаВсего = ВыборкаПоИндексу.База;
		
			// Выборка строк базы распределения по индексу базы распределения
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл

				Если БазаВсего <> 0 Тогда
					Стоимость = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьБезНДС = Окр(СуммаБезНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьРегл = Окр(СуммаРеглКРаспределению * Выборка.База / БазаВсего, 2, 1);
				Иначе
					Стоимость = 0;
					СтоимостьБезНДС = 0;
					СтоимостьРегл = 0;
				КонецЕсли;

				СуммаКРаспределению = СуммаКРаспределению - Стоимость;
				СуммаБезНДСКРаспределению = СуммаБезНДСКРаспределению - СтоимостьБезНДС;
				СуммаРеглКРаспределению = СуммаРеглКРаспределению - СтоимостьРегл;
				БазаВсего = БазаВсего - Выборка.База;

				СчетчикЗаписей = СчетчикЗаписей + 1;
				НоваяЗапись = НаборЗаписейСебестоимостьТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРасходов);
				НоваяЗапись.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры;
				НоваяЗапись.Количество = 0;
				НоваяЗапись.ВидЗапасов = Выборка.ВидЗапасов;
				НоваяЗапись.Организация = Выборка.Организация;
				НоваяЗапись.ДопРасходы = Стоимость;
				НоваяЗапись.ДопРасходыБезНДС = СтоимостьБезНДС;
				НоваяЗапись.СтоимостьРегл = СтоимостьРегл;

				Если СчетчикЗаписей > 1000 Тогда

					СчетчикЗаписей = 0;
					НаборЗаписейСебестоимостьТоваров.Записать(Ложь);

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если СчетчикЗаписей > 0 Тогда
		НаборЗаписейСебестоимостьТоваров.Записать(Ложь);
	КонецЕсли;

	НаборЗаписейСебестоимостьТоваров.Записывать = Ложь;

КонецПроцедуры // РаспределитьРасходыНаСебестоимостьТоваровПоБазе()

#КонецОбласти

#Область ПолучениеТаблицыРаспределенияРасходовНаСебестоимостьТоваровДляФормированияДокументаПоступлениеДопРасходовПриОбменеСБп20

// Функция формирует таблицу с данными распределения расходов на себестоимость товаров.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка - документ, которым отражены расходы, распределяемые на себестоимость товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица распределения расходов.
//
Функция РаспределениеРасходовНаСебестоимостьТоваров(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	//++ Локализация


	//-- Локализация
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ТекстЗапроса = ТекстЗапросаВтТаблицаРасходов()
		+ ТекстЗапросаТаблицаСпособовРаспределения()
		+ ТекстЗапросаТаблицаДокументов()
		+ ТекстЗапросаТаблицаПоступленияТоваров()
		+ ТекстЗапросаТаблицаБазыРаспределения()
		+ ТекстЗапросаТаблицаРасходов()
	;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// МассивРезультатов[0] - временная таблица "ВтТаблицаРасходов"
	// МассивРезультатов[1] - временная таблица "ТаблицаСпособовРаспределения"
	// МассивРезультатов[2] - временная таблица "ТаблицаДокументов"
	// МассивРезультатов[3] - временная таблица "ВтПоступленияТоваров"
	// МассивРезультатов[4] - временная таблица "ТаблицаПоступленияТоваров".
	РезультатЗапросаПоБазе = МассивРезультатов[5];
	ТаблицаРасходов = МассивРезультатов[6].Выгрузить();
	
	// Сформируем таблицу распределения расходов.
	ТаблицаРаспределенияРасходов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРаспределенияРасходов.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Колонки.Добавить("СтоимостьТоваров", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	Колонки.Добавить("СуммаНДС", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СборкаТоваров"));
	Колонки.Добавить("ДокументПоступления", Новый ОписаниеТипов(МассивТипов));
	
	Если Не ТаблицаРасходов.Количество() = 0
	 И Не РезультатЗапросаПоБазе.Пустой() Тогда
	
		СтруктураОтбора = Новый Структура("ИндексБазы");
	
		// Выборка строк базы распределения по индексу аналитики.
		ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоИндексу.Следующий() Цикл
			
			СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

			// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
			// Данные затраты будут распределены по одинаковой базе распределения.
			МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			Если МассивРасходов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаПоИндексу.База = 0 Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаРасходов Из МассивРасходов Цикл
			
				СуммаКРаспределению = СтрокаРасходов.Сумма;
				СуммаНДСКРаспределению = СтрокаРасходов.СуммаНДС;
				БазаВсего = ВыборкаПоИндексу.База;
			
				// Выборка строк базы распределения по индексу базы распределения
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл

					Если БазаВсего <> 0 Тогда
						Сумма = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1); 
						СуммаНДС = Окр(СуммаНДСКРаспределению * Выборка.База / БазаВсего, 2, 1) ;
					Иначе
						Сумма = 0;
						СуммаНДС = 0;
					КонецЕсли;

					СуммаКРаспределению = СуммаКРаспределению - Сумма;
					СуммаНДСКРаспределению = СуммаНДСКРаспределению - СуммаНДС;
					БазаВсего = БазаВсего - Выборка.База;
					
					НоваяСтрока = ТаблицаРаспределенияРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Сумма = Сумма;
					НоваяСтрока.СуммаНДС = СуммаНДС;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРаспределенияРасходов; 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоУчетуДоходовИРасходов


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область РаспределениеРасходовБудущихПериодов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РаспределениеРасходовБудущихПериодов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Истина, Истина, Истина);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Распределить'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ДоходыИРасходыСервер.Использование_РаспределениеРасходовБудущихПериодов");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеРасходовБудущихПериодов.Формы.ФормаСпискаДокументов.ПолноеИмя());
КонецПроцедуры

Процедура Использование_РаспределениеРасходовБудущихПериодов(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет прочих доходов и расходов не ведется'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Данные.Организация КАК Организация,
		|	Данные.Подразделение КАК Подразделение,
		|	Данные.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Данные.СтатьяРасходов КАК СтатьяРасходов,
		|	Данные.АналитикаРасходов КАК АналитикаРасходов,
		|	Данные.СуммаОстаток + Данные.СуммаПриход - Данные.СуммаРасход КАК Сумма,
		|	Данные.СуммаУпрОстаток + Данные.СуммаУпрПриход - Данные.СуммаУпрРасход КАК СуммаУпр,
		|	Данные.СуммаРеглОстаток + Данные.СуммаРеглПриход - Данные.СуммаРеглРасход КАК СуммаРегл,
		|	Данные.СуммаРеглОстаток + Данные.СуммаРеглПриход - Данные.СуммаРеглРасход 
		|		- (Данные.ПостояннаяРазницаОстаток + Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход) 
		|		- (Данные.ВременнаяРазницаОстаток + Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход) КАК СуммаНУ,
		|	Данные.ПостояннаяРазницаОстаток + Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход КАК ПостояннаяРазница,
		|	Данные.ВременнаяРазницаОстаток + Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход КАК ВременнаяРазница,
		|	Данные.БезСуммУпр КАК БезСуммУпр,
		|	Данные.БезСуммРегл КАК БезСуммРегл,
		|	Данные.БезСуммНУ КАК БезСуммНУ
		|ПОМЕСТИТЬ ВТНераспределенныеРБП_Предварительная
		|ИЗ
		|	(ВЫБРАТЬ
		|		Данные.Организация КАК Организация,
		|		Данные.Подразделение КАК Подразделение,
		|		Данные.СтатьяРасходов КАК СтатьяРасходов,
		|		Данные.АналитикаРасходов КАК АналитикаРасходов,
		|		Данные.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		СУММА(Данные.СуммаПриход) КАК СуммаПриход,
		|		СУММА(Данные.СуммаУпрПриход) КАК СуммаУпрПриход,
		|		СУММА(Данные.СуммаРеглПриход) КАК СуммаРеглПриход,
		|		СУММА(Данные.ПостояннаяРазницаПриход) КАК ПостояннаяРазницаПриход,
		|		СУММА(Данные.ВременнаяРазницаПриход) КАК ВременнаяРазницаПриход,
		|		СУММА(Данные.СуммаРасход) КАК СуммаРасход,
		|		СУММА(Данные.СуммаУпрРасход) КАК СуммаУпрРасход,
		|		СУММА(Данные.СуммаРеглРасход) КАК СуммаРеглРасход,
		|		СУММА(Данные.ПостояннаяРазницаРасход) КАК ПостояннаяРазницаРасход,
		|		СУММА(Данные.ВременнаяРазницаРасход) КАК ВременнаяРазницаРасход,
		|		СУММА(Данные.СуммаОстаток) КАК СуммаОстаток,
		|		СУММА(Данные.СуммаУпрОстаток) КАК СуммаУпрОстаток,
		|		СУММА(Данные.СуммаРеглОстаток) КАК СуммаРеглОстаток,
		|		СУММА(Данные.ПостояннаяРазницаОстаток) КАК ПостояннаяРазницаОстаток,
		|		СУММА(Данные.ВременнаяРазницаОстаток) КАК ВременнаяРазницаОстаток,
		|		МАКСИМУМ(Данные.БезСуммУпр) КАК БезСуммУпр,
		|		МАКСИМУМ(Данные.БезСуммРегл) КАК БезСуммРегл,
		|		МАКСИМУМ(Данные.БезСуммНУ) КАК БезСуммНУ
		|	ИЗ
		|		&ИсточникиРБП КАК Данные
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Данные.Организация,
		|		Данные.Подразделение,
		|		Данные.СтатьяРасходов,
		|		Данные.АналитикаРасходов,
		|		Данные.НаправлениеДеятельности) КАК Данные
		|ГДЕ
		|	(Данные.СуммаОстаток + Данные.СуммаПриход - Данные.СуммаРасход <> 0
		|			ИЛИ Данные.СуммаУпрОстаток + Данные.СуммаУпрПриход - Данные.СуммаУпрРасход <> 0
		|			ИЛИ Данные.СуммаРеглОстаток + Данные.СуммаРеглПриход - Данные.СуммаРеглРасход <> 0
		|			ИЛИ Данные.СуммаРеглОстаток + Данные.СуммаРеглПриход - Данные.СуммаРеглРасход 
		|				- (Данные.ПостояннаяРазницаОстаток + Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход) 
		|				- (Данные.ВременнаяРазницаОстаток + Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход) <> 0
		|			ИЛИ Данные.БезСуммУпр
		|			ИЛИ Данные.БезСуммРегл
		|			ИЛИ Данные.БезСуммНУ)
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяРасходов,
		|	АналитикаРасходов,
		|	Подразделение,
		|	НаправлениеДеятельности,
		|	Организация;
		|	
		|ВЫБРАТЬ
		|	Данные.Организация КАК Организация,
		|	Данные.Подразделение КАК Подразделение,
		|	Данные.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Данные.СтатьяРасходов КАК СтатьяРасходов,
		|	Данные.АналитикаРасходов КАК АналитикаРасходов,
		|	Данные.Сумма КАК Сумма,
		|	Данные.СуммаУпр КАК СуммаУпр,
		|	Данные.СуммаРегл КАК СуммаРегл,
		|	Данные.СуммаНУ КАК СуммаНУ,
		|	Данные.ПостояннаяРазница КАК ПостояннаяРазница,
		|	Данные.ВременнаяРазница КАК ВременнаяРазница,
		|	Данные.БезСуммУпр КАК БезСуммУпр,
		|	Данные.БезСуммРегл КАК БезСуммРегл,
		|	Данные.БезСуммНУ КАК БезСуммНУ
		|ПОМЕСТИТЬ ВТНераспределенныеРБП
		|ИЗ ВТНераспределенныеРБП_Предварительная КАК Данные
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК РаспределениеУпр
		|	ПО РаспределениеУпр.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РаспределениеУпр.СтатьяРасходов = Данные.СтатьяРасходов
		|	И РаспределениеУпр.Проведен
		|	И РаспределениеУпр.УправленческийУчет
		|	И РаспределениеУпр.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
		|	И РаспределениеУпр.Организация = Данные.Организация
		|	И РаспределениеУпр.Подразделение = Данные.Подразделение
		|	И РаспределениеУпр.АналитикаРасходов = Данные.АналитикаРасходов
		|	И РаспределениеУпр.НаправлениеДеятельности = Данные.НаправлениеДеятельности
		|ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК РаспределениеРегл
		|	ПО РаспределениеРегл.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РаспределениеРегл.СтатьяРасходов = Данные.СтатьяРасходов
		|	И РаспределениеРегл.Проведен
		|	И РаспределениеРегл.РегламентированныйУчет
		|	И РаспределениеРегл.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
		|	И РаспределениеРегл.Организация = Данные.Организация
		|	И РаспределениеРегл.Подразделение = Данные.Подразделение
		|	И РаспределениеРегл.АналитикаРасходов = Данные.АналитикаРасходов
		|	И РаспределениеРегл.НаправлениеДеятельности = Данные.НаправлениеДеятельности
		|ГДЕ
		|	(Данные.Сумма <> 0 ИЛИ Данные.СуммаУпр <> 0 ИЛИ Данные.БезСуммУпр) И РаспределениеУпр.Ссылка ЕСТЬ NULL
		|	ИЛИ (Данные.СуммаРегл <> 0 ИЛИ Данные.БезСуммРегл) И РаспределениеРегл.Ссылка ЕСТЬ NULL
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникиРБП", "("+Документы.РаспределениеРасходовБудущихПериодов.ТекстЗапросаРасходыКРаспределениюИсточники()+")"); //@Query-part
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоВсемОрганизациям", "ЛОЖЬ"); //@Query-part
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоВсемПодразделениям", "ИСТИНА"); //@Query-part
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подразделение", "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)"); //@Query-part
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организация = &Организация", "Организация В (&МассивОрганизаций)"); //@Query-part
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
		
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНераспределенныеРБП = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет незакрытых оборотов по статьям расходов с вариантом распределения ""На расходы будущих периодов""'", ОбщегоНазначения.КодОсновногоЯзыка()));
	 
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеРасходовБудущихПериодов(ТаблицаПроверок) Экспорт
	
	// Расходы будущих периодов.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеРасходыБудущихПериодов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ДоходыИРасходыСервер.ПроверкаНераспределенныеРасходыБудущихПериодов",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Нераспределенные расходы будущих периодов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Обнаружены нераспределенные расходы по статьям с вариантом распределения ""На расходы будущих периодов"".'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура ПроверкаНераспределенныеРасходыБудущихПериодов(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 			НСтр("ru = 'Организация'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru = 'Статья расходов'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru = 'Аналитика расходов'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru = 'Направление деятельности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Сумма",		 			НСтр("ru = 'Сумма (с НДС)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаУпр",		 		НСтр("ru = 'Сумма (без НДС)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаРегл",		 		НСтр("ru = 'Сумма (БУ)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("БезСуммУпр",		 		НСтр("ru = 'Автосумма (УУ)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("БезСуммРегл",		 		НСтр("ru = 'Автосумма (БУ)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНераспределенныеРБП",
		НСтр("ru = 'В периоде %2 имеются нераспределенные расходы будущих периодов по организации ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхВыбораСтатей

Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиАктивовПассивов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	
	СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры);
	
	Запрос.Текст = СвойстваЗапроса.ТекстЗапроса;
	Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
		
	Если Параметры.Свойство("ДополнитьСтатьямиРасходов") И Параметры.ДополнитьСтатьямиРасходов Тогда
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры);
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + СвойстваЗапроса.ТекстЗапроса;
			
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ДополнитьСтатьямиДоходов") И Параметры.ДополнитьСтатьямиДоходов Тогда
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры);
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + СвойстваЗапроса.ТекстЗапроса;
			
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");

	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеДанныхВыбора = Новый Структура();
		ЗначениеДанныхВыбора.Вставить("Значение", Выборка.Ссылка);
		ЗначениеДанныхВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		
		Представление = СокрЛП(Выборка.Представление) + " (" + СокрЛП(Выборка.Код) + ")";
		
		ДанныеВыбора.Добавить(ЗначениеДанныхВыбора, Представление);
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиРасходов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	
	Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы И ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры);
		
		Запрос.Текст = СвойстваЗапроса.ТекстЗапроса;
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
		Если Параметры.Свойство("ДополнитьСтатьямиАктивовПассивов") 
				И Параметры.ДополнитьСтатьямиАктивовПассивов 
				И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
			
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ДополнитьСтатьямиДоходов") И Параметры.ДополнитьСтатьямиДоходов Тогда
		
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ДанныеВыбора = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗначениеДанныхВыбора = Новый Структура();
			ЗначениеДанныхВыбора.Вставить("Значение", Выборка.Ссылка);
			ЗначениеДанныхВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			
			Представление = СокрЛП(Выборка.Представление) + " (" + СокрЛП(Выборка.Код) + ")";
			
			ДанныеВыбора.Добавить(ЗначениеДанныхВыбора, Представление);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиДоходов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры);
		
		Запрос.Текст = СвойстваЗапроса.ТекстЗапроса;
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
		Если Параметры.Свойство("ДополнитьСтатьямиАктивовПассивов") 
				И Параметры.ДополнитьСтатьямиАктивовПассивов
				И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
			
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ДополнитьСтатьямиРасходов") И Параметры.ДополнитьСтатьямиРасходов Тогда
			
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ДанныеВыбора = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗначениеДанныхВыбора = Новый Структура();
			ЗначениеДанныхВыбора.Вставить("Значение", Выборка.Ссылка);
			ЗначениеДанныхВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			
			Представление = СокрЛП(Выборка.Представление) + " (" + СокрЛП(Выборка.Код) + ")";
			
			ДанныеВыбора.Добавить(ЗначениеДанныхВыбора, Представление);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыборСтатейИАналитик

Функция ДанныеВыборСтатейИАналитик(Форма, ПараметрыВыбора)
	
	Если ТипЗнч(ПараметрыВыбора) = Тип("Массив") Тогда
		МассивПараметровВыбора = ПараметрыВыбора;
	Иначе
		МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыбора);
	КонецЕсли;
	
	СоответствиеПараметровВыбораЭлементамФормы = Новый Структура;
	Индекс = 0;
	Для каждого ПараметрыВыбора Из МассивПараметровВыбора Цикл
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.Статья Цикл
			СоответствиеПараметровВыбораЭлементамФормы.Вставить(ИмяЭлемента, Индекс);
		КонецЦикла;
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов Цикл
			СоответствиеПараметровВыбораЭлементамФормы.Вставить(ИмяЭлемента, Индекс);
		КонецЦикла;
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов Цикл
			СоответствиеПараметровВыбораЭлементамФормы.Вставить(ИмяЭлемента, Индекс);
		КонецЦикла;
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов Цикл
			СоответствиеПараметровВыбораЭлементамФормы.Вставить(ИмяЭлемента, Индекс);
		КонецЦикла;
		Если ПараметрыВыбора.ЗначениеПоУмолчанию = Неопределено Тогда
			Если ПараметрыВыбора.ВыборСтатьиРасходов Тогда
				ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
			ИначеЕсли ПараметрыВыбора.ВыборСтатьиДоходов Тогда
				ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
			ИначеЕсли ПараметрыВыбора.ВыборСтатьиАктивовПассивов Тогда
				ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыбора.ВыборСтатьиРасходов) И ПараметрыВыбора.АналитикаРасходов <> "" Тогда
			ПараметрыВыбора.Вставить("КэшРеквизитовСтатьиРасходов", Новый Структура());
			ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.Вставить("АналитикаРасходовОбязательна", ПараметрыВыбора.АналитикаРасходов + "Обязательна");
			ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.Вставить("АналитикаРасходовЗаказРеализация", ПараметрыВыбора.АналитикаРасходов + "ЗаказРеализация");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыбора.ВыборСтатьиДоходов) И ПараметрыВыбора.АналитикаДоходов <> "" Тогда
			ПараметрыВыбора.Вставить("КэшРеквизитовСтатьиДоходов", Новый Структура());
			ПараметрыВыбора.КэшРеквизитовСтатьиДоходов.Вставить("АналитикаДоходовОбязательна", ПараметрыВыбора.АналитикаДоходов + "Обязательна");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыбора.ВыборСтатьиАктивовПассивов) И ПараметрыВыбора.АналитикаАктивовПассивов <> ""  Тогда
			ПараметрыВыбора.Вставить("КэшРеквизитовСтатьиАктивовПассивов", Новый Структура());
			ПараметрыВыбора.КэшРеквизитовСтатьиАктивовПассивов.Вставить("АналитикаАктивовПассивовНеИспользуется", ПараметрыВыбора.АналитикаАктивовПассивов + "НеИспользуется");
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПроверитьПараметрыВыбораСтатейИАналитик(Форма, МассивПараметровВыбора);
	
	ДанныеВыборСтатейИАналитик = Новый Структура();
	ДанныеВыборСтатейИАналитик.Вставить("МассивПараметровВыбора", Новый ФиксированныйМассив(МассивПараметровВыбора));
	ДанныеВыборСтатейИАналитик.Вставить("СоответствиеПараметровВыбораЭлементамФормы", СоответствиеПараметровВыбораЭлементамФормы);
	
	Возврат ДанныеВыборСтатейИАналитик;
	
КонецФункции

Процедура ПроверитьПараметрыВыбораСтатейИАналитик(Форма, МассивПараметровВыбора)
	
	Если Не ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Для каждого ПараметрыВыбора Из МассивПараметровВыбора Цикл
		
		Если Найти(ПараметрыВыбора.ПутьКДанным, "Объект.") > 0 Тогда
			ИмяТЧПоиска = СтрЗаменить(ПараметрыВыбора.ПутьКДанным, "Объект.", "");
			ПоискПоТЧ = Истина;
			ТабличнаяЧасть = Форма.Объект[ИмяТЧПоиска]; // ТабличнаяЧасть - 
			СписокКолонокТЧ = ТабличнаяЧасть.Выгрузить().Колонки;
		ИначеЕсли ПараметрыВыбора.ПутьКДанным = "Объект" Тогда
			ПоискПоТЧ = Ложь;
		Иначе
			Прервать; // Вызов из внутренней формы выбора статьи и аналитики
		КонецЕсли;
		
		Если НЕ ПоискПоТЧ И ЗначениеЗаполнено(ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Статья располагается в шапке документа. Использование параметра ""%1"" не допускается.'");
			СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, "УсловияДоступностиСтатьиВСтроках");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"",
					СообщениеОбОшибке,
					"");
		КонецЕсли;
		
		МассивПроверяемыхРеквизитов = Новый Массив();
		МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора["Статья"]);
		Если ПараметрыВыбора.ВыборСтатьиРасходов Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора["АналитикаРасходов"]);
		КонецЕсли;
		
		Если ПараметрыВыбора.ВыборСтатьиДоходов Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора["АналитикаДоходов"]);
		КонецЕсли;
		
		Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора["АналитикаАктивовПассивов"]);
		КонецЕсли;
		
		Если ПараметрыВыбора.ВыборСтатьиРасходов И ЗначениеЗаполнено(ПараметрыВыбора.АналитикаРасходов) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна);
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовЗаказРеализация);
		КонецЕсли;

		Если ПараметрыВыбора.ВыборСтатьиДоходов И ЗначениеЗаполнено(ПараметрыВыбора.АналитикаДоходов) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна);
		КонецЕсли;
		
		Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов И ЗначениеЗаполнено(ПараметрыВыбора.АналитикаАктивовПассивов) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора.КэшРеквизитовСтатьиАктивовПассивов.АналитикаАктивовПассивовНеИспользуется);
		КонецЕсли;
		
		Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов + ПараметрыВыбора.ВыборСтатьиДоходов + ПараметрыВыбора.ВыборСтатьиРасходов > 1 Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыВыбора.ТипСтатьи) Тогда 
				
				ШаблонСообщения = НСтр("ru = 'Не указано значение параметра ""%1"" в параметрах выбора статей и аналитик .'");

				СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, "ТипСтатьи");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СообщениеОбОшибке
						,
						"");
			Иначе
				МассивПроверяемыхРеквизитов.Добавить(ПараметрыВыбора["ТипСтатьи"]);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ПроверяемыйРеквизит Из МассивПроверяемыхРеквизитов Цикл
				Если ПоискПоТЧ И НЕ ЕстьКолонкаВТЧ(СписокКолонокТЧ, ПроверяемыйРеквизит) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru = 'Отсутствует реквизит %1 в %2 формы объекта.'"), 
										ПроверяемыйРеквизит, 
										?(ПоискПоТЧ, СтрШаблон(НСтр("ru = 'табличной части %1'"), ИмяТЧПоиска), НСтр("ru = 'списке реквизитов'"))),
							"");
				КонецЕсли;
				
				Если НЕ ПоискПоТЧ 
					И НЕ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, ПроверяемыйРеквизит)
							ИЛИ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ПроверяемыйРеквизит)) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru = 'Отсутствует реквизит %1 в %2 формы объекта.'"), 
										ПроверяемыйРеквизит, 
										?(ПоискПоТЧ, СтрШаблон(НСтр("ru = 'табличной части %1'"), ИмяТЧПоиска), НСтр("ru = 'списке реквизитов'"))),
							"");
				КонецЕсли;
		КонецЦикла;
		
		Для каждого ЭлементФормы Из ПараметрыВыбора.ЭлементыФормы Цикл
			Для каждого ИмяЭлемента Из ЭлементФормы.Значение Цикл 
			
				Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru = 'Отсутствует элемент управления %1 на форме.'"), ИмяЭлемента),
							"");
					
				Иначе
					ЭлементУправленияФормы = Форма.Элементы[ИмяЭлемента];
					
					ПутьКДаннымСтатьи = ПараметрыВыбора.ПутьКДанным + "." + ПараметрыВыбора[ЭлементФормы.Ключ]; 
					ПутьКДаннымСтатьиТекущаяСтрока = "ТекущиеДанные." + ПараметрыВыбора[ЭлементФормы.Ключ];
					
					Если НЕ СтрНайти(ЭлементУправленияФормы.ПутьКДанным, ПутьКДаннымСтатьи)
						И НЕ СтрНайти(ЭлементУправленияФормы.ПутьКДанным, ПутьКДаннымСтатьиТекущаяСтрока) Тогда 
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(
							НСтр("ru = 'Путь к данным элемента формы %1 указан некорректно: %2, ожидается %3.'"),
								ЭлементФормы.Ключ,
								ЭлементУправленияФормы.ПутьКДанным,
								ПутьКДаннымСтатьи),
							"");
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если НЕ Ошибки = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'Найдены ошибки при проверке параметров выбора статей и аналитик'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыСтатьи(Форма, Знач МассивПараметровВыбора)
	
	Для каждого Параметры Из МассивПараметровВыбора Цикл
		
		ЧастиПутиКДанным = СтрРазделить(Параметры.ПутьКДанным, ".", Ложь);
		Если ЧастиПутиКДанным.Количество() = 2 Тогда
			Данные = Форма[ЧастиПутиКДанным[0]][ЧастиПутиКДанным[1]];
			ЭтоТаблица = Истина;
		ИначеЕсли ЧастиПутиКДанным.Количество() = 1 
			И ТипЗнч(Форма[ЧастиПутиКДанным[0]]) = Тип("ДанныеФормыКоллекция") Тогда
			Данные = Форма[ЧастиПутиКДанным[0]];
			ЭтоТаблица = Истина;
		Иначе
			Данные = Форма;
			ЭтоТаблица = Ложь;
		КонецЕсли;
		
		Если ЭтоТаблица Тогда
			ЗаполнитьРеквизитыСтатьиВТаблице(Данные, Параметры);
		Иначе
			ЗаполнитьРеквизитыСтатьиВОбъекте(Данные, Параметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтатьиВОбъекте(Данные, Знач ПараметрыВыбора)
	
	Если ЗначениеЗаполнено(ПараметрыВыбора.ПутьКДанным) Тогда 
		Статья = Данные[ПараметрыВыбора.ПутьКДанным][ПараметрыВыбора.Статья];
	Иначе
		Статья = Данные[ПараметрыВыбора.Статья];
	КонецЕсли;
	
	Если ПараметрыВыбора.ТипСтатьи <> "" Тогда
		ТипСтатьи = 0;
		Если ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			ТипСтатьи = 1;
		ИначеЕсли ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			ТипСтатьи = 2;
		ИначеЕсли ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
			ТипСтатьи = 3;
		КонецЕсли;
		Данные[ПараметрыВыбора.ТипСтатьи] = ТипСтатьи;
	КонецЕсли;
	
	РеквизитыСтатьи = ДоходыИРасходыВызовСервераПовтИсп.ЗначенияРеквизитовСтатьи(Статья);
	
	Если ПараметрыВыбора.ВыборСтатьиРасходов И ПараметрыВыбора.АналитикаРасходов <> "" Тогда
		Данные[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна] = РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
		Данные[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовЗаказРеализация] = РеквизитыСтатьи.АналитикаРасходовЗаказРеализация;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиДоходов И ПараметрыВыбора.АналитикаДоходов <> "" Тогда
		Данные[ПараметрыВыбора.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна] = РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов И ПараметрыВыбора.АналитикаАктивовПассивов <> "" Тогда
		Данные[ПараметрыВыбора.КэшРеквизитовСтатьиАктивовПассивов.АналитикаАктивовПассивовНеИспользуется] = РеквизитыСтатьи.БезАналитики;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтатьиВТаблице(ТаблицаДанных, Знач ПараметрыВыбора)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТипЗначения(&ПолеСтатья) = Тип(ПланВидовХарактеристик.СтатьиРасходов)
	|			ТОГДА 1
	|		КОГДА ТипЗначения(&ПолеСтатья) = Тип(ПланВидовХарактеристик.СтатьиДоходов)
	|			ТОГДА 2
	|		КОГДА ТипЗначения(&ПолеСтатья) = Тип(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипСтатьи,
	|	ЕСТЬNULL(СтатьиРасходов.КонтролироватьЗаполнениеАналитики, ЛОЖЬ) КАК АналитикаРасходовОбязательна,
	|	ЕСТЬNULL(СтатьиРасходов.АналитикаРасходовЗаказРеализация, ЛОЖЬ)  КАК АналитикаРасходовЗаказРеализация,
	|	ЕСТЬNULL(СтатьиДоходов.КонтролироватьЗаполнениеАналитики, ЛОЖЬ)  КАК АналитикаДоходовОбязательна,
	|	ЕСТЬNULL(СтатьиАктивовПассивов.БезАналитики, ЛОЖЬ)               КАК АналитикаАктивовПассивовНеИспользуется
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		&ПолеСтатья = СтатьиРасходов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|	ПО
	|		&ПолеСтатья = СтатьиДоходов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|	ПО
	|		&ПолеСтатья = СтатьиАктивовПассивов.Ссылка
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеСтатья", "ТаблицаДанных." + ПараметрыВыбора.Статья);
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаДанных[Выборка.НомерСтроки-1];
		Если ПараметрыВыбора.ТипСтатьи <> "" Тогда
			СтрокаТаблицы[ПараметрыВыбора.ТипСтатьи] = Выборка.ТипСтатьи;
		КонецЕсли;
		Если ПараметрыВыбора.ВыборСтатьиРасходов И ПараметрыВыбора.АналитикаРасходов <> "" Тогда
			СтрокаТаблицы[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна] = Выборка.АналитикаРасходовОбязательна;
			СтрокаТаблицы[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовЗаказРеализация] = Выборка.АналитикаРасходовЗаказРеализация;
		КонецЕсли;
		Если ПараметрыВыбора.ВыборСтатьиДоходов И ПараметрыВыбора.АналитикаДоходов <> "" Тогда
			СтрокаТаблицы[ПараметрыВыбора.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна] = Выборка.АналитикаДоходовОбязательна;
		КонецЕсли;
		Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов И ПараметрыВыбора.АналитикаАктивовПассивов <> "" Тогда
			СтрокаТаблицы[ПараметрыВыбора.КэшРеквизитовСтатьиАктивовПассивов.АналитикаАктивовПассивовНеИспользуется] = Выборка.АналитикаАктивовПассивовНеИспользуется;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтатьиВСтрокеТаблицы(Строка, Знач ПараметрыВыбора)
	
	Статья = Строка[ПараметрыВыбора.Статья];
	
	Если ПараметрыВыбора.ТипСтатьи <> "" Тогда
		ТипСтатьи = 0;
		Если ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			ТипСтатьи = 1;
		ИначеЕсли ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			ТипСтатьи = 2;
		ИначеЕсли ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
			ТипСтатьи = 3;
		КонецЕсли;
		Строка[ПараметрыВыбора.ТипСтатьи] = ТипСтатьи;
	КонецЕсли;
	
	РеквизитыСтатьи = ДоходыИРасходыВызовСервераПовтИсп.ЗначенияРеквизитовСтатьи(Статья);
	
	Если ПараметрыВыбора.ВыборСтатьиРасходов И ПараметрыВыбора.АналитикаРасходов <> "" Тогда
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна] = РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовЗаказРеализация] = РеквизитыСтатьи.АналитикаРасходовЗаказРеализация;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиДоходов И ПараметрыВыбора.АналитикаДоходов <> "" Тогда
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна] = РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов И ПараметрыВыбора.АналитикаАктивовПассивов <> "" Тогда
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиАктивовПассивов.АналитикаАктивовПассивовНеИспользуется] = РеквизитыСтатьи.БезАналитики;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтатьиВСтрокеТаблицыПакетно(Строка, Знач ПараметрыВыбора, КэшированныеДанные)
	
	Статья = Строка[ПараметрыВыбора.Статья];
	
	Если ПараметрыВыбора.ТипСтатьи <> "" Тогда
		ТипСтатьи = 0;
		Если ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			ТипСтатьи = 1;
		ИначеЕсли ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			ТипСтатьи = 2;
		ИначеЕсли ТипЗнч(Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
			ТипСтатьи = 3;
		КонецЕсли;
		Строка[ПараметрыВыбора.ТипСтатьи] = ТипСтатьи;
	КонецЕсли;
	
	РеквизитыСтатьи = Новый Структура;
	РеквизитыСтатьи.Вставить("ТипЗначения", Новый ОписаниеТипов("Неопределено"));
	РеквизитыСтатьи.Вставить("КонтролироватьЗаполнениеАналитики", Ложь);
	РеквизитыСтатьи.Вставить("АналитикаРасходовЗаказРеализация",  Ложь);
	РеквизитыСтатьи.Вставить("БезАналитики", Ложь);
	
	Если ЗначениеЗаполнено(Статья) Тогда
		ДанныеДляОбработки = ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки("ЗначенияРеквизитовСтатьи", КэшированныеДанные);
		Если Не ДанныеДляОбработки = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(РеквизитыСтатьи, ДанныеДляОбработки[0]);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиРасходов И ПараметрыВыбора.АналитикаРасходов <> "" Тогда
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовОбязательна] = РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиРасходов.АналитикаРасходовЗаказРеализация] = РеквизитыСтатьи.АналитикаРасходовЗаказРеализация;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиДоходов И ПараметрыВыбора.АналитикаДоходов <> "" Тогда
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиДоходов.АналитикаДоходовОбязательна] = РеквизитыСтатьи.КонтролироватьЗаполнениеАналитики;
	КонецЕсли;
	
	Если ПараметрыВыбора.ВыборСтатьиАктивовПассивов И ПараметрыВыбора.АналитикаАктивовПассивов <> "" Тогда
		Строка[ПараметрыВыбора.КэшРеквизитовСтатьиАктивовПассивов.АналитикаАктивовПассивовНеИспользуется] = РеквизитыСтатьи.БезАналитики;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьЗначенияСтатейИАналитик(Объект, МассивПараметровВыбора)
	
	Для каждого Параметры Из МассивПараметровВыбора Цикл
		
		Данные = ДоходыИРасходыКлиентСервер.ДанныеПоПути(Объект, Параметры.ПутьКДанным);
		ЭтоТаблица = (СтрНайти(Параметры.ПутьКДанным, ".") <> 0) Или ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция");

		Если ЭтоТаблица Тогда
			Для каждого СтрокаТаблицы Из Данные Цикл
				ДоходыИРасходыКлиентСервер.ИнициализироватьЗначениеСтатьиИАналитик(СтрокаТаблицы, Параметры);
			КонецЦикла;
		Иначе
			ДоходыИРасходыКлиентСервер.ИнициализироватьЗначениеСтатьиИАналитик(Данные, Параметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовСтатей(Форма, Знач МассивПараметровВыбора)

	ЭлементыФормы = Форма.Элементы;
	Для каждого Параметры Из МассивПараметровВыбора Цикл
			
		ПараметрДополнитьСтатьямиРасходов =        Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Параметры.ВыборСтатьиРасходов);
		ПараметрДополнитьСтатьямиДоходов =         Новый ПараметрВыбора("ДополнитьСтатьямиДоходов", Параметры.ВыборСтатьиДоходов);
		ПараметрДополнитьСтатьямиАктивовПассивов = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Параметры.ВыборСтатьиАктивовПассивов);
		
		Для каждого ИмяЭлемента Из Параметры.ЭлементыФормы.Статья Цикл
			
			ЭлементФормы = ЭлементыФормы[ИмяЭлемента]; // ПолеФормы -
			
			ЭлементФормы.ВыбиратьТип = Ложь;
			
			Если Параметры.ДоступностьПоОперации <> Неопределено Тогда
				Если Параметры.СкрыватьСтатьюНедоступнуюПоОперации Тогда
					ЭлементФормы.Видимость = Параметры.ДоступностьПоОперации;
				Иначе
					ЭлементФормы.Доступность = Параметры.ДоступностьПоОперации;
				КонецЕсли;
			КонецЕсли;
			
			// Параметры выбора
			НовыеПараметрыВыбора = Новый Массив;
			ПараметрыВыбораЭлементаСтатьи = ЭлементФормы.ПараметрыВыбора; // ФиксированныйМассив Из ПараметрВыбора
			Для каждого ТекущийПараметр Из ПараметрыВыбораЭлементаСтатьи Цикл
				Если ТекущийПараметр.Имя <> ПараметрДополнитьСтатьямиРасходов.Имя
					 И ТекущийПараметр.Имя <> ПараметрДополнитьСтатьямиДоходов.Имя
					 И ТекущийПараметр.Имя <> ПараметрДополнитьСтатьямиАктивовПассивов.Имя Тогда
					НовыеПараметрыВыбора.Добавить(ТекущийПараметр);
				КонецЕсли;
			КонецЦикла;
			НовыеПараметрыВыбора.Добавить(ПараметрДополнитьСтатьямиРасходов);
			НовыеПараметрыВыбора.Добавить(ПараметрДополнитьСтатьямиДоходов);
			НовыеПараметрыВыбора.Добавить(ПараметрДополнитьСтатьямиАктивовПассивов);
			
			Если Параметры.ВыборСтатьиРасходов Тогда
				Для каждого Отбор Из Параметры.ОтборСтатейРасходов Цикл
					Если ЗначениеЗаполнено(Отбор.Значение) Тогда
						НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор." + Отбор.Ключ, Отбор.Значение));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
			
			Если НЕ Параметры.ОбязательностьЗаполнения Тогда
				ЭлементФормы.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвязьАналитикСоСтатьями(Форма, Знач МассивПараметровВыбора)
	
	ЭлементыФормы = Форма.Элементы;
	Для каждого ПараметрыВыбора Из МассивПараметровВыбора Цикл
		
		Данные = ДоходыИРасходыКлиентСервер.ДанныеПоПути(Форма, ПараметрыВыбора.ПутьКДанным); 
		
		ДанныеВШапке = Ложь;
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") Тогда
			ДанныеВШапке = Истина;
		КонецЕсли;
		
		ПолныйПутьКСтатьеВШапке = ПараметрыВыбора.ПутьКДанным + "." + ПараметрыВыбора.Статья;
		
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов Цикл
			ЭлементАналитики = ЭлементыФормы[ИмяЭлемента];
			ТаблицаФормыЭлемента = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементАналитики);
			Если ДанныеВШапке Тогда
				ПолныйПутьКСтатье = ПолныйПутьКСтатьеВШапке;
			ИначеЕсли ТаблицаФормыЭлемента = Неопределено Тогда
				ПолныйПутьКСтатье = СтрЗаменить(ЭлементАналитики.ПутьКДанным, ПараметрыВыбора.АналитикаРасходов, ПараметрыВыбора.Статья);
			Иначе
				ПолныйПутьКСтатье = СтрШаблон("Элементы.%1.ТекущиеДанные.%2", ТаблицаФормыЭлемента.Имя, ПараметрыВыбора.Статья);
			КонецЕсли;
			УстановитьСвойстваЭлементаАналитики(ЭлементАналитики, ПолныйПутьКСтатье);
		КонецЦикла;
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов Цикл
			ЭлементАналитики = ЭлементыФормы[ИмяЭлемента];
			ТаблицаФормыЭлемента = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементАналитики);
			Если ДанныеВШапке Тогда
				ПолныйПутьКСтатье = ПолныйПутьКСтатьеВШапке;
			ИначеЕсли ТаблицаФормыЭлемента = Неопределено Тогда
				ПолныйПутьКСтатье = СтрЗаменить(ЭлементАналитики.ПутьКДанным, ПараметрыВыбора.АналитикаДоходов, ПараметрыВыбора.Статья);
			Иначе
				ПолныйПутьКСтатье = СтрШаблон("Элементы.%1.ТекущиеДанные.%2", ТаблицаФормыЭлемента.Имя, ПараметрыВыбора.Статья);
			КонецЕсли;
			УстановитьСвойстваЭлементаАналитики(ЭлементАналитики, ПолныйПутьКСтатье);
		КонецЦикла;
		Для каждого ИмяЭлемента Из ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов Цикл
			ЭлементАналитики = ЭлементыФормы[ИмяЭлемента];
			ТаблицаФормыЭлемента = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементАналитики);
			Если ДанныеВШапке Тогда
				ПолныйПутьКСтатье = ПолныйПутьКСтатьеВШапке;
			ИначеЕсли ТаблицаФормыЭлемента = Неопределено Тогда
				ПолныйПутьКСтатье = СтрЗаменить(ЭлементАналитики.ПутьКДанным, ПараметрыВыбора.АналитикаАктивовПассивов, ПараметрыВыбора.Статья);
			Иначе
				ПолныйПутьКСтатье = СтрШаблон("Элементы.%1.ТекущиеДанные.%2", ТаблицаФормыЭлемента.Имя, ПараметрыВыбора.Статья);
			КонецЕсли;
			УстановитьСвойстваЭлементаАналитики(ЭлементАналитики, ПолныйПутьКСтатье);
			ЭлементАналитики.ОтметкаНезаполненного = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементаАналитики(ЭлементАналитики, ПолныйПутьКСтатье)
	
	ЭлементАналитики.СвязьПоТипу = Новый СвязьПоТипу(ПолныйПутьКСтатье);
	
	МассивСвязейПараметровВыбора = Новый Массив;
	МассивСвязейПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПолныйПутьКСтатье, РежимИзмененияСвязанногоЗначения.НеИзменять));
	ЭлементАналитики.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	
	ЭлементАналитики.АвтоОтметкаНезаполненного = Ложь;
	ЭлементАналитики.ВыбиратьТип = Ложь;
	ЭлементАналитики.КнопкаВыпадающегоСписка = Ложь;
	ЭлементАналитики.КнопкаВыбора = Истина;
	ЭлементАналитики.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	
КонецПроцедуры

Функция ЕстьКолонкаВТЧ(СписокКолонокТЧ, ИмяКолонки)
	
	Возврат Не СписокКолонокТЧ.Найти(ИмяКолонки) = Неопределено;
	
КонецФункции

// Функция получает последние использованные в документах статью и аналитику расходов.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция, указанная в документа.
//	Организация - СправочникСсылка.Организации - организация, указанная в документе.
//	Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, указанное в документе.
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой выполняется заполнение статьи и аналитики расходов.
//
// Возвращаемое значение:
//	ВыборкаИзРезультатаЗапроса - Статья и аналитика расходов.
//
Функция СтатьяАналитикаРасходовПоУмолчанию(ХозяйственнаяОперация, Организация, Подразделение, Номенклатура, Характеристика = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаНоменклатуры КАК Отбор
	|			ГДЕ
	|				Отбор.Номенклатура = &Номенклатура
	|				И &Характеристика
	|				И ПрочиеРасходы.АналитикаУчетаНоменклатуры = Отбор.КлючАналитики
	|				И ПрочиеРасходы.Организация = &Организация
	|				И ПрочиеРасходы.Подразделение = &Подразделение
	|				И ПрочиеРасходы.ХозяйственнаяОперация = &ХозяйственнаяОперация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрочиеРасходы.Период УБЫВ");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Отбор.Характеристика = &Характеристика");
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Иначе
		Запрос.УстановитьПараметр("Характеристика", Истина);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПолеКомпоновкиДанных(ПутьКДанным, ИмяПоля)
	
	Если ПутьКДанным = "" Тогда
		Возврат Новый ПолеКомпоновкиДанных(ИмяПоля);
	Иначе
		Возврат Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + ИмяПоля);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеТаблицыРаспределенияРасходовНаСебестоимостьТоваровДляФормированияДокументаПоступлениеДопРасходовПриОбменеСБп20

// Функция формирует текст запроса для временной таблицы расходов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаВтТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.СтатьяРасходов.ПравилоРаспределенияРасходовРегл.БазаРаспределенияПоПартиям КАК ПравилоРаспределения,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС
	|
	|ПОМЕСТИТЬ ВтТаблицаРасходов
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаРасходы.СтатьяРасходов.ПравилоРаспределенияРасходовРегл.БазаРаспределенияПоПартиям КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.Ссылка = &Ссылка
	|	И ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов
	|
	//++ Локализация


	//-- Локализация
	|;
	|////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВтТаблицаРасходов()

// Функция формирует текст запроса для таблицы способов распределения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаСпособовРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК АналитикаЗаполнена,
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК ИндексБазы
	|	
	|ПОМЕСТИТЬ ТаблицаСпособовРаспределения
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|///////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаСпособовРаспределения()

// Функция формирует текст запроса для таблицы документов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаДокументов()
	
	ТекстЗапроса = "
	|// Поступление товаров по конкретным документам закупки или по заказам поставщикам.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И (ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|       	ИЛИ ТаблицаТовары.ЗаказПоставщику = ТаблицаСпособовРаспределения.АналитикаРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Приобретения товаров по любым документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ТаблицаТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) 
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Передачи товаров между организациями.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Сборки (разборки) товаров.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.СборкаТоваров КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.СборкаТоваров КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.СборкаТоваров.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|///////////////////////////////////////////////////////////////////////////////////	
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаДокументов()

// Функция формирует текст запроса для таблицы поступления товаров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры.СкладскаяТерритория КАК Склад,
	|	УчетСебестоимости.Период КАК Период,
	|	УчетСебестоимости.Регистратор КАК ДокументПоступления,
	|	УчетСебестоимости.КоличествоПриход КАК Количество,
	|	УчетСебестоимости.СтоимостьРеглПриход КАК Стоимость
	|
	|ПОМЕСТИТЬ ВтПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(,, Регистратор,
	|		РазделУчета В (
	|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах),
	|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути))
	|		И Организация = &Организация
	|	) КАК УчетСебестоимости
	|
	|ГДЕ
	|	УчетСебестоимости.КоличествоПриход > 0
	|	И УчетСебестоимости.СтоимостьРеглПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	ДокументПоступления
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|
	|ПОМЕСТИТЬ ТаблицаПоступленияТоваров
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ВтПоступленияТоваров.ДокументПоступления = ТаблицаДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ВтПоступленияТоваров.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (ТаблицаСпособовРаспределения.АналитикаРасходов = ВтПоступленияТоваров.Склад
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ВтПоступленияТоваров.Номенклатура
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексБазы
	|;
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаПоступленияТоваров()

// Функция формирует текст запроса для таблицы базы распределения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаБазыРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ТаблицаПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаПоступленияТоваров.ДокументПоступления.Дата КАК Дата,
	|	ТаблицаПоступленияТоваров.Количество КАК Количество,
	|	ТаблицаПоступленияТоваров.Стоимость КАК СтоимостьТоваров,
	|	
	|	ВЫБОР КОГДА ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		= ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.КоличествоТоваров)
	|	ТОГДА
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Количество, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Стоимость, 0)
	|	КОНЕЦ КАК База
	|
	|ИЗ
	|	ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПоступленияТоваров КАК ТаблицаПоступленияТоваров
	|	ПО
	|		ТаблицаСпособовРаспределения.ИндексБазы = ТаблицаПоступленияТоваров.ИндексБазы
	|ИТОГИ
	|	СУММА(База)
	|ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаБазыРаспределения()

// Функция формирует текст запроса для таблицы расходов к распределению.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаРасходы.ПравилоРаспределения = ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		И ТаблицаРасходы.АналитикаРасходов = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаРасходов()

#КонецОбласти

#Область ПолучениеДанныхВыбораСтатей

Функция СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтатьиАктивовПассивов.Ссылка,
	|	СтатьиАктивовПассивов.Код,
	|	СтатьиАктивовПассивов.Наименование,
	|	ПРЕДСТАВЛЕНИЕ(СтатьиАктивовПассивов.Ссылка) КАК Представление,
	|	СтатьиАктивовПассивов.ПометкаУдаления
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|ГДЕ
	|	(СтатьиАктивовПассивов.АктивПассив В (&АктивПассив) ИЛИ &БезОграниченийПоАктивуПассиву)
	|	И (СтатьиАктивовПассивов.Наименование ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиАктивовПассивов.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиАктивовПассивов.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска)
	|	И СтатьиАктивовПассивов.ЭтоГруппа В (&ОграничениеГруппИЭлементов)
	|";
	
	
	ПараметрыЗапроса = Новый Структура;
	
	АктивПассив = Неопределено;
	Параметры.Отбор.Свойство("АктивПассив", АктивПассив);
	ПараметрыЗапроса.Вставить("АктивПассив", АктивПассив);
	ПараметрыЗапроса.Вставить("БезОграниченийПоАктивуПассиву", НЕ ЗначениеЗаполнено(АктивПассив));
	
	ОграничениеГруппИЭлементов = Новый Массив;
	Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
		ОграничениеГруппИЭлементов.Добавить(Истина);
	ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
		ОграничениеГруппИЭлементов.Добавить(Ложь);
	Иначе
		ОграничениеГруппИЭлементов.Добавить(Истина);
		ОграничениеГруппИЭлементов.Добавить(Ложь);
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ОграничениеГруппИЭлементов", ОграничениеГруппИЭлементов);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка,
	|	СтатьиРасходов.Код,
	|	СтатьиРасходов.Наименование,
	|	ПРЕДСТАВЛЕНИЕ(СтатьиРасходов.Ссылка) КАК Представление,
	|	СтатьиРасходов.ПометкаУдаления
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	(СтатьиРасходов.Наименование ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиРасходов.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиРасходов.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиРасходов.Код ПОДОБНО &СтрокаПоиска)
	|	И НЕ СтатьиРасходов.Ссылка В (&ЗаблокированныеСтатьи)
	|	И (Не СтатьиРасходов.ОграничитьИспользование
	|		ИЛИ &ПоВсемХозОперациям
	|		ИЛИ СтатьиРасходов.Ссылка В (
	|			ВЫБРАТЬ
	|				ДоступныеОперации.Ссылка
	|			ИЗ
	|				ПланВидовХарактеристик.СтатьиРасходов.ДоступныеХозяйственныеОперации КАК ДоступныеОперации
	|			ГДЕ
	|			ДоступныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|		)
	|	 )
	|	И СтатьиРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	И (СтатьиРасходов.ВариантРаспределенияРасходовУпр В (&ВариантРаспределенияРасходовУпр)
	|		ИЛИ &ПоВсемВариантамРаспределения
	|		ИЛИ &ОтбиратьВариантыРаспределенияПоИли)
	|	И (СтатьиРасходов.ВариантРаспределенияРасходовРегл В (&ВариантРаспределенияРасходовРегл)
	|		ИЛИ &ПоВсемВариантамРаспределения
	|		ИЛИ &ОтбиратьВариантыРаспределенияПоИли)
	|	И (СтатьиРасходов.ВариантРаспределенияРасходовНУ В (&ВариантРаспределенияРасходовНУ)
	|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка)
	|		ИЛИ &ПоВсемВариантамРаспределения
	|		ИЛИ &ОтбиратьВариантыРаспределенияПоИли)
	|	И (&ОтбиратьВариантыРаспределенияПоИли
	|		И (СтатьиРасходов.ВариантРаспределенияРасходовУпр В (&ВариантРаспределенияРасходовУпр)
	|			ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовРегл В (&ВариантРаспределенияРасходовРегл)
	|			ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовНУ В (&ВариантРаспределенияРасходовНУ))
	|		ИЛИ НЕ &ОтбиратьВариантыРаспределенияПоИли)
	|	И (СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&ВидДеятельностиДляНалоговогоУчетаЗатрат)
	|		ИЛИ &ПоВсемВидамДеятельностиДляНалоговогоУчетаЗатрат)
	|	И (СтатьиРасходов.ХарактерПроизводственныхЗатрат В (&ХарактерПроизводственныхЗатрат)
	|		ИЛИ &ПоВсемХарактерамЗатрат)
	|	И (СтатьиРасходов.ДоговорыКредитовИДепозитов ИЛИ &БезУчетаДоговоровКредитовИДепозитов)
	|	И (СтатьиРасходов.РасходыНаОбъектыЭксплуатации = &РасходыНаОбъектыЭксплуатации ИЛИ &РасходыНаОбъектыЭксплуатации = НЕОПРЕДЕЛЕНО)
	|	И (СтатьиРасходов.РасходыНаНМАиНИОКР = &РасходыНаНМАиНИОКР ИЛИ &РасходыНаНМАиНИОКР = НЕОПРЕДЕЛЕНО)
	|	И (СтатьиРасходов.РасходыНаИсследованияИРазработки = &РасходыНаИсследованияИРазработки ИЛИ &РасходыНаИсследованияИРазработки = НЕОПРЕДЕЛЕНО)
	|	И (СтатьиРасходов.РасходыНаЗаказыНаРемонт = &РасходыНаЗаказыНаРемонт ИЛИ &РасходыНаЗаказыНаРемонт = НЕОПРЕДЕЛЕНО)
	|	И (&РасходыНаРемонт = ИСТИНА И (СтатьиРасходов.РасходыНаОбъектыЭксплуатации ИЛИ СтатьиРасходов.РасходыНаЗаказыНаРемонт)
	|		ИЛИ &РасходыНаРемонт = НЕОПРЕДЕЛЕНО)
	|";
	
	ПараметрыЗапроса = Новый Структура;
	
	ХозяйственнаяОперация = Неопределено;
	Если Параметры.Отбор.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = Параметры.Отбор.ХозяйственнаяОперация;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ПараметрыЗапроса.Вставить("ПоВсемХозОперациям",    ХозяйственнаяОперация = Неопределено);
	
	ВариантРаспределенияРасходов = Неопределено;
	ОтбиратьВариантыРаспределенияПоИли = Ложь;
	ПоВсемВариантамРаспределения = Истина;
	Если Параметры.Отбор.Свойство("ВариантРаспределенияРасходов") Тогда
		ВариантРаспределенияРасходов = Параметры.Отбор.ВариантРаспределенияРасходов;
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовУпр", ВариантРаспределенияРасходов);
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовРегл", ВариантРаспределенияРасходов);
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовНУ", ВариантРаспределенияРасходов);
		ПоВсемВариантамРаспределения = Ложь;
	КонецЕсли;
	Если Параметры.Отбор.Свойство("ВариантРаспределенияРасходовУпр") Тогда
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовУпр", Параметры.Отбор.ВариантРаспределенияРасходовУпр);
		ОтбиратьВариантыРаспределенияПоИли = Истина;
		ПоВсемВариантамРаспределения = Ложь;
	КонецЕсли;
	Если Параметры.Отбор.Свойство("ВариантРаспределенияРасходовРегл") Тогда
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовРегл", Параметры.Отбор.ВариантРаспределенияРасходовРегл);
		ОтбиратьВариантыРаспределенияПоИли = Истина;
		ПоВсемВариантамРаспределения = Ложь;
	КонецЕсли;
	Если Параметры.Отбор.Свойство("ВариантРаспределенияРасходовНУ") Тогда
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовНУ", Параметры.Отбор.ВариантРаспределенияРасходовНУ);
		ОтбиратьВариантыРаспределенияПоИли = Истина;
		ПоВсемВариантамРаспределения = Ложь;
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("ВариантРаспределенияРасходовУпр") Тогда
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовУпр", Неопределено);
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("ВариантРаспределенияРасходовРегл") Тогда
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовРегл", Неопределено);
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("ВариантРаспределенияРасходовНУ") Тогда
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовНУ", Неопределено);
	КонецЕсли;
	Если Параметры.Отбор.Свойство("ВариантРаспределенияРасходовИли") Тогда
		ВариантРаспределенияРасходов = Параметры.Отбор.ВариантРаспределенияРасходовИли;
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовУпр", ВариантРаспределенияРасходов);
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовРегл", ВариантРаспределенияРасходов);
		ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходовНУ", ВариантРаспределенияРасходов);
		ОтбиратьВариантыРаспределенияПоИли = Истина;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ПоВсемВариантамРаспределения", ПоВсемВариантамРаспределения);
	ПараметрыЗапроса.Вставить("ОтбиратьВариантыРаспределенияПоИли", ОтбиратьВариантыРаспределенияПоИли);
	
	ВидДеятельностиДляНалоговогоУчетаЗатрат = Неопределено;
	ПараметрыЗапроса.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", ВидДеятельностиДляНалоговогоУчетаЗатрат);
	ПараметрыЗапроса.Вставить("ПоВсемВидамДеятельностиДляНалоговогоУчетаЗатрат", ВидДеятельностиДляНалоговогоУчетаЗатрат = Неопределено);
	
	ДоговорыКредитовИДепозитов = Неопределено;
	Если Параметры.Отбор.Свойство("ДоговорыКредитовИДепозитов") Тогда
		ДоговорыКредитовИДепозитов = Параметры.Отбор.ДоговорыКредитовИДепозитов;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("БезУчетаДоговоровКредитовИДепозитов", ДоговорыКредитовИДепозитов = Неопределено);
	
	РасходыНаОбъектыЭксплуатации = Неопределено;
	Если Параметры.Отбор.Свойство("РасходыНаОбъектыЭксплуатации") Тогда
		РасходыНаОбъектыЭксплуатации = Параметры.Отбор.РасходыНаОбъектыЭксплуатации;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("РасходыНаОбъектыЭксплуатации", РасходыНаОбъектыЭксплуатации);
	
	РасходыНаНМАиНИОКР = Неопределено;
	Если Параметры.Отбор.Свойство("РасходыНаНМАиНИОКР") Тогда
		РасходыНаНМАиНИОКР = Параметры.Отбор.РасходыНаНМАиНИОКР;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("РасходыНаНМАиНИОКР", РасходыНаНМАиНИОКР);
	
	РасходыНаИсследованияИРазработки = Неопределено;
	Если Параметры.Отбор.Свойство("РасходыНаИсследованияИРазработки") Тогда
		РасходыНаИсследованияИРазработки = Параметры.Отбор.РасходыНаИсследованияИРазработки;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("РасходыНаИсследованияИРазработки", РасходыНаИсследованияИРазработки);
	
	РасходыНаЗаказыНаРемонт = Неопределено;
	Если Параметры.Отбор.Свойство("РасходыНаЗаказыНаРемонт") Тогда
		РасходыНаЗаказыНаРемонт = Параметры.Отбор.РасходыНаЗаказыНаРемонт;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("РасходыНаЗаказыНаРемонт", РасходыНаЗаказыНаРемонт);
	
	РасходыНаРемонт = Неопределено;
	Если Параметры.Отбор.Свойство("РасходыНаРемонт") Тогда
		РасходыНаРемонт = Параметры.Отбор.РасходыНаРемонт;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("РасходыНаРемонт", РасходыНаРемонт);
	
	ПараметрыЗапроса.Вставить("ЗаблокированныеСтатьи", ПланыВидовХарактеристик.СтатьиРасходов.ЗаблокированныеСтатьиРасходов());
	
	ХарактерПроизводственныхЗатрат = Неопределено;
	Если Параметры.Отбор.Свойство("ХарактерПроизводственныхЗатрат") Тогда
		ХарактерПроизводственныхЗатрат = Параметры.Отбор.ХарактерПроизводственныхЗатрат;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ХарактерПроизводственныхЗатрат", ХарактерПроизводственныхЗатрат);
	ПараметрыЗапроса.Вставить("ПоВсемХарактерамЗатрат", ХарактерПроизводственныхЗатрат = Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка КАК Ссылка,
	|	СтатьиДоходов.Код КАК Код,
	|	СтатьиДоходов.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(СтатьиДоходов.Ссылка) КАК Представление,
	|	СтатьиДоходов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	(СтатьиДоходов.Наименование ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиДоходов.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиДоходов.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска)
	|	И НЕ СтатьиДоходов.ЭтоГруппа
	|	И НЕ СтатьиДоходов.Ссылка В (&ЗаблокированныеСтатьи)
	|	И (СтатьиДоходов.ДоговорыКредитовИДепозитов ИЛИ &БезУчетаДоговоровКредитовИДепозитов)
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ЗаблокированныеСтатьи", ПланыВидовХарактеристик.СтатьиДоходов.ЗаблокированныеСтатьиДоходов());
	
	ДоговорыКредитовИДепозитов = Неопределено;
	Если Параметры.Отбор.Свойство("ДоговорыКредитовИДепозитов") Тогда
		ДоговорыКредитовИДепозитов = Параметры.Отбор.ДоговорыКредитовИДепозитов;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("БезУчетаДоговоровКредитовИДепозитов", ДоговорыКредитовИДепозитов = Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
