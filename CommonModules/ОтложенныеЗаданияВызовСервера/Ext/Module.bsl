///////////////////////////////////////////////////////////////////////////
// Модуль "ОтложенныеЗаданияВызовСервера" содержит процедуры и функции для
// работы с механизмом отложенных заданий.
//
///////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОшибкиВыполненияОтложенныхЗаданий

// Передает задания из регистра "Ошибки выполнения отложенных заданий" на выполнения.
//
// Параметры:
//  Очередь             - Строка -  имя регистра сведений очереди заданий
//  ИдентификаторОшибки - Неопределено, УникальныйИдентификатор - уникальный идентификатор ошибки
//
// Возвращаемое значение:
//  Булево - признак выполнение действие
//
Функция ВыполнитьЗаданияИзРегистраОшибкиВыполненияОтложенныхЗаданий(
			Очередь,
			ИдентификаторОшибки = Неопределено) Экспорт
	
	ДействиеВыполнено = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Очередь             КАК Очередь,
	|	Таблица.ИдентификаторОшибки КАК ИдентификаторОшибки,
	|	Таблица.ДанныеЗадания       КАК ДанныеЗадания
	|ИЗ
	|	РегистрСведений.ОшибкиВыполненияОтложенныхЗаданий КАК Таблица
	|ГДЕ
	|	Таблица.Очередь = &Очередь
	|	И Таблица.ИдентификаторОшибки = &ИдентификаторОшибки";
	
	Запрос.УстановитьПараметр("Очередь", Очередь);
	
	Если ЗначениеЗаполнено(ИдентификаторОшибки) Тогда
		Запрос.УстановитьПараметр("ИдентификаторОшибки", ИдентификаторОшибки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИдентификаторОшибки = &ИдентификаторОшибки", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОшибкиВыполненияОтложенныхЗаданий");
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторОшибки", Выборка.ИдентификаторОшибки);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				БлокировкаДанных.Заблокировать();
				
				НаборЗаписей = РегистрыСведений[Выборка.Очередь].СоздатьНаборЗаписей();
				НаборЗаписей.Загрузить(Выборка.ДанныеЗадания.Получить());
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				
				УдалитьЗадания(Выборка.Очередь, Выборка.ИдентификаторОшибки);
				
			КонецЦикла;
			
			ДействиеВыполнено = Истина;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ДействиеВыполнено = Ложь;
			
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обработка ошибок выполнения очереди заданий'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий,,
				ПредставлениеОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДействиеВыполнено
	
КонецФункции

// Удаляет задания из регистра "Ошибки выполнения отложенных заданий".
// 
// Параметры:
//  Очередь             - Строка -  имя регистра сведений очереди заданий
//  ИдентификаторОшибки - Неопределено, УникальныйИдентификатор - уникальный идентификатор ошибки
//
// Возвращаемое значение:
//  Булево - признак выполнение действие
//
Функция УдалитьЗаданияИзРегистраОшибкиВыполненияОтложенныхЗаданий(
			Очередь,
			ИдентификаторОшибки = Неопределено) Экспорт
	
	ДействиеВыполнено = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		УдалитьЗадания(Очередь, ИдентификаторОшибки);
		
		ДействиеВыполнено = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ДействиеВыполнено = Ложь;
		
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обработка ошибок выполнения очереди заданий'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий,,
			ПредставлениеОшибки);
		
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибки);
		
	КонецПопытки;
	
	Возврат ДействиеВыполнено
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьЗадания(Очередь, ИдентификаторОшибки = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Очередь.Установить(Очередь);
	
	Если ЗначениеЗаполнено(ИдентификаторОшибки) Тогда
		НаборЗаписей.Отбор.ИдентификаторОшибки.Установить(ИдентификаторОшибки);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти