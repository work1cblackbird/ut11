////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы "Комиссионные продажи"
// связанные с хозяйственной операцией "Передача на комиссию".
// 
////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область УнифицированныеМетоды

#Область Заполнение

// Возвращает текст запроса заполнения документа на основание заказа по передачи на комиссию.
//
// Возвращаемое значение:
//  Строка -
//
Функция ТекстЗапросаЗаполненияНаОснованияЗаказа() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка      КАК ЗаказКлиента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) КАК ХозяйственнаяОперация,
	|	ЗаказКлиента.Статус      КАК СтатусДокумента,
	|	ЗаказКлиента.Партнер     КАК Партнер,
	|	ЗаказКлиента.Контрагент  КАК Контрагент,
	|	ЗаказКлиента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ЗаказКлиента.Соглашение  КАК Соглашение,
	|	ЗаказКлиента.Организация КАК Организация,
	|	ЗаказКлиента.БанковскийСчет КАК БанковскийСчетОрганизации,
	|	ЗаказКлиента.Договор     КАК Договор,
	|	ВЫБОР
	|		КОГДА
	|			ЕСТЬNULL(Склады.ЭтоГруппа, ЛОЖЬ)
	|				И ЕСТЬNULL(Склады.ВыборГруппы, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ ЗаказКлиента.Склад
	|	КОНЕЦ                    КАК Склад,
	|	ЕСТЬNULL(Склады.ИспользоватьОрдернуюСхемуПриОтгрузке,
	|			ЛОЖЬ)            КАК ОрдернаяСхемаПриОтгрузке,
	|	ВЫБОР
	|		КОГДА
	|			ЕСТЬNULL(Склады.ЭтоГруппа, ЛОЖЬ)
	|				И ЕСТЬNULL(Склады.ВыборГруппы, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                    КАК ЗапрещеноВыбиратьГруппуСкладов,
	|	ЗаказКлиента.Валюта      КАК Валюта,
	|
	|	ЗаказКлиента.Грузоотправитель               КАК Грузоотправитель,
	|	ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ЗаказКлиента.Грузополучатель                КАК Грузополучатель,
	|	ЗаказКлиента.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
	|
	|	ЗаказКлиента.ДатаОтгрузки       КАК ДатаОтгрузки,
	|	ЗаказКлиента.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
	|
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.СпособДоставки
	|	КОНЕЦ                                   КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ПеревозчикПартнер
	|	КОНЕЦ                                   КАК ПеревозчикПартнер,
	|	ЗаказКлиента.АдресДоставки              КАК АдресДоставки,
	|	ЗаказКлиента.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ЗонаДоставки
	|	КОНЕЦ                                   КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ВремяДоставкиС
	|	КОНЕЦ                                   КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ВремяДоставкиПо
	|	КОНЕЦ                                   КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ДополнительнаяИнформацияПоДоставке
	|	КОНЕЦ                                   КАК ДополнительнаяИнформацияПоДоставке,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ОсобыеУсловияПеревозки
	|	КОНЕЦ                                   КАК ОсобыеУсловияПеревозки,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				ИЛИ ЗаказКлиента.ЭтоЗаказКакСчет
	|			ТОГДА ЗаказКлиента.ОсобыеУсловияПеревозкиОписание
	|	КОНЕЦ                                   КАК ОсобыеУсловияПеревозкиОписание,
	|
	|	ЗаказКлиента.Сделка                  КАК Сделка,
	|	ЗаказКлиента.Подразделение           КАК Подразделение,
	|	ЗаказКлиента.КонтактноеЛицо          КАК КонтактноеЛицо,
	|	ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
	|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСоглашенияСКлиентами
	|			ТОГДА ЕСТЬNULL(Соглашения.КалендарьВозвратаТары, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|	КОНЕЦ                                       КАК КалендарьВозвратаТары,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСоглашенияСКлиентами 
	|			ТОГДА ЕСТЬNULL(Соглашения.РассчитыватьДатуВозвратаТарыПоКалендарю, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|
	|	ЗаказКлиента.ЭтоЗаказКакСчет                КАК ЭтоЗаказКакСчет,
	|
	|	НЕ ЗаказКлиента.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ЗаказКлиента.Склад = Склады.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК Соглашения
	|		ПО ЗаказКлиента.Соглашение = Соглашения.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ДокументОснование
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияНаОтгрузкуОбороты.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(,,,Распоряжение = &ДокументОснование) КАК РаспоряженияНаОтгрузкуОбороты";

	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одной накладной.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам") Тогда
		КлючевыеПоля = "Партнер, Контрагент, Договор, Организация, Сделка, Валюта, НаправлениеДеятельности";
	Иначе
		КлючевыеПоля = "Ссылка";
	КонецЕсли;
	
	Возврат КлючевыеПоля;
	
КонецФункции

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ДокументОснование",   Неопределено);
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",      Неопределено);
	
	ПараметрыЗаполнения.Вставить("Склад",               Неопределено);
	ПараметрыЗаполнения.Вставить("СкладОтгрузки",       Неопределено);
	
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру",   Неопределено);
	ПараметрыЗаполнения.Вставить("ПараметрыОформления", Новый Структура("ПоЗаказам, ПоОрдерам"));
	
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",        "Номенклатура, Характеристика, Серия, Назначение, НазначениеОтправителя, Склад");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам.
//
// Параметры:
//  ПараметрыЗаполнения	 - см. ПередачаПереработчику.ПараметрыЗаполненияДокумента
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.ДокументОснование = МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки	  = РеквизитыШапки;
	
	ПараметрыЗаполнения.СкладОтгрузки     =
		?(ЗначениеЗаполнено(ПараметрыЗаполнения.Склад), ПараметрыЗаполнения.Склад, РеквизитыШапки.Склад);
	
	Если ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам = Неопределено Тогда
		
		Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру = Неопределено Тогда
			
			ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам = 
				НакладныеСервер.ЗаполнятьПоОрдеру(ПараметрыЗаполнения.СкладОтгрузки);
			
		Иначе
			
			ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам = ПараметрыЗаполнения.ЗаполнятьПоОрдеру;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПараметрыОформления.ПоЗаказам = Неопределено Тогда
		
		ПараметрыЗаполнения.ПараметрыОформления.ПоЗаказам = Не ПараметрыЗаполнения.ПараметрыОформления.ПоОрдерам;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру для создания документа по заказам
//  Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//  МассивСсылок - Массив - заказы на внутреннее потребление, по которым необходимо ввести накладную.
//  СвойстваЗаказов - Структура, Неопределено - 
//
// Возвращаемое значение:
//  Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	РеквизитыШапки = Новый Структура;
	
//	Выполнено = ПереработкаНаСторонеВызовСервера.СформироватьДанныеЗаполненияПередачиСырья(
//					МассивСсылок, Метаданные.Документы.ПередачаТоваровХранителю.Имя, РеквизитыШапки);
//					
//	Если Не Выполнено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
	
	Возврат РеквизитыШапки;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Возвращает параметры заполнения видов запасов для документа "Передача товаров хранителю".
// 
// Параметры:
// 	Объект - ДокументОбъект.ПередачаТоваровХранителю
// Возвращаемое значение:
// 	см. ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов
//
Функция ПараметрыЗаполненияВидовЗапасов(Объект) Экспорт
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи, "Никогда");
	ПараметрыЗаполнения.СторнируемыйДокумент = Объект.СторнируемыйДокумент;
	
	ОтборыВидовЗапасов = ПараметрыЗаполнения.ОтборыВидовЗапасов;
	
	ДоступныеТипыЗапасов = Новый Массив;
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Товар);
	ДоступныеТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.КомиссионныйТовар);
	
	ОтборыВидовЗапасов.ТипЗапасов = ДоступныеТипыЗапасов;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область Округление


// Пересчитывает количество единиц
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//
Процедура ПересчитатьКоличествоЕдиниц(Объект) Экспорт
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


// Добавляет действие "ПересчитатьКоличествоЕдиниц"
//
// Параметры:
//  СтруктураДействий - Структура - 
//
Процедура ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц());
	
КонецПроцедуры

// Возвращает параметры перерасчета клиента единиц
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция ПараметрыПересчетаКоличестваЕдиниц() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Признак необходимости пересчета количество единиц
//
// Возвращаемое значение:
//  Булево - 
//
Функция НеобходимПересчетКоличествоЕдиниц() Экспорт

	Возврат Ложь;

КонецФункции

// Возвращает параметры для округления
// 
// Возвращаемое значение:
// 	Структура - элементы содержат структуру параметров округления 
// 				см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
// 
Функция ПараметрыТЧДляОкругления() Экспорт
	
	Возврат Новый Структура("Товары");
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

#Область ТекстыЗапросовЗаполненияСпискаРаспоряжений

// Возвращает текст запроса распоряжений доступных в накладной.
// 
// Параметры:
//  ПараметрыТекстаЗапроса - см. ОбщегоНазначенияУТ.ПараметрыТекстаЗапросаРаспоряженийНакладных
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаРаспоряженияНакладной(ПараметрыТекстаЗапроса) Экспорт
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ПараметрыТекстаЗапроса.Отбор,
		"ТаблицаРаспоряжений.ХозяйственнаяОперация",
		"ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)",
		"=");
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ПараметрыТекстаЗапроса.Отбор,
		"ВЫБОР
		|	КОГДА ТаблицаРаспоряжений.Склад = &Склад
		|		ИЛИ ТаблицаРаспоряжений.Склад В ИЕРАРХИИ (&Склад)
		|		ИЛИ ТаблицаРаспоряжений.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ",
		"ИСТИНА",
		"=");
	
	Возврат Документы.ЗаказКлиента.ТекстЗапросаРаспоряженийНакладных(ПараметрыТекстаЗапроса);
	
КонецФункции

// Возвращает текст запроса товаров распоряжений к оформлению
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаОстаткиТоваровКОформлению(ИмяВременнойТаблицы, ОтборПоИзмерениям = Неопределено) Экспорт
	
	Если ОтборПоИзмерениям = Неопределено Тогда
		ОтборПоИзмерениям = Новый Соответствие;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ОтборПоИзмерениям,
		"Распоряжение",
		"ВЫБРАТЬ
		|	РаспоряженияНакладной.Распоряжение
		|ИЗ
		|	РаспоряженияНакладной КАК РаспоряженияНакладной");
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ОтборПоИзмерениям,
		"ВЫБОР
		|	КОГДА Склад = &Склад
		|		ИЛИ Склад В ИЕРАРХИИ (&Склад)
		|		ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ",
		"ИСТИНА",
		"=");
	
	ТекстЗапроса =
		РегистрыНакопления.РаспоряженияНаОтгрузку.ТекстЗапросаОстатки(
			ИмяВременнойТаблицы,
			ОтборПоИзмерениям,
			"КОформлению > 0");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса дублей товаров распоряжений к оформлению
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаДублиТоваровКОформлению() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*)                    КАК КоличествоДублей,
	|	ТоварыКОформлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия          КАК Серия,
	|	ТоварыКОформлению.Склад          КАК Склад
	|ПОМЕСТИТЬ ДублиТоваровКОформлению
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Склад
	|";
	
КонецФункции

#КонецОбласти

// Редактирует текст запроса пересчета в валюту документа
//
// Параметры:
//  ТекстЗапроса - Строка - редактируемый текст запроса.
//
Процедура РедактироватьТекстЗапросаПересчетаВВалютуДокумента(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Редактирует текст запроса по остаткам заказов
//
// Параметры:
//  ТекстЗапроса - Строка - редактируемый текст запроса.
//
Процедура РедактироватьТекстЗапросаПоОстаткамЗаказов(ТекстЗапроса) Экспорт
	
	//Таблица ЗаказКлиента
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказКлиентаСоглашение",                "ЗаказКлиента.Соглашение");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказКлиентаВернутьМногооборотнуюТару", "ЗаказКлиента.ВернутьМногооборотнуюТару");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказКлиентаНазначениеОтправителя",     "ЗаказТовары.Ссылка.Назначение");
	
	ТекстЗапроса =
		СтрЗаменить(
			ТекстЗапроса,
			"&ЗаказКлиентаНазначение",
			"ВЫБОР
			|	КОГДА ЗаказТовары.Обособленно
			|		ТОГДА ЗаказТовары.Ссылка.Назначение
			|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|КОНЕЦ");
	
	//Таблица ТоварыЗаказа
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыЗаказаСуммаСНДС", "ТоварыЗаказа.СуммаСНДС");
	
	//Таблица ЗаказТовары
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказТоварыНоменклатураНабора",   "ЗаказТовары.НоменклатураНабора");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказТоварыХарактеристикаНабора", "ЗаказТовары.ХарактеристикаНабора");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаказТоварыВидЦены",              "ЗаказТовары.ВидЦены");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОстаткиСумма",             "ТаблицаОстатки.Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область ДокументЗаказ

// Возвращает право доступа заказа клиента.
//
// Параметры:
//  ИмяПраво - Строка - имя проверяемого права.
//
// Возвращаемое значение:
//  Булево - 
//
Функция ПравоДоступаЗаказа(ИмяПраво) Экспорт
	
	Возврат ПравоДоступа(ИмяПраво, Метаданные.Документы.ЗаказКлиента);
	
КонецФункции

// Возвращает менеджер документа заказ клиента
//
// Возвращаемое значение:
//  ДокументМенеджер.ЗаказКлиента - 
//
Функция МенеджерЗаказа() Экспорт
	
	Возврат Документы.ЗаказКлиента;
	
КонецФункции

// Возвращает описание типа для заказа клиента
// 
// Возвращаемое значение:
//  ОписаниеТипов - 
//
Функция ОписаниеТипаЗаказа() Экспорт
	
	Возврат Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента");
	
КонецФункции

// Возвращает типа для заказа клиента
// 
// Возвращаемое значение:
//  Тип - 
//
Функция ТипЗаказа() Экспорт
	
	Возврат Тип("ДокументСсылка.ЗаказКлиента");
	
КонецФункции

// Возвращает синоним заказа.
//
// Возвращаемое значение:
//  Строка - синоним заказа.
//
Функция СинонимЗаказа() Экспорт
	
	Возврат НСтр("ru='Заказ передачи на комиссию'");
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

// Возвращает тип основания акта о расхождении
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОснованияАктаОРасхождении
//
Функция ТипОснованияАкта() Экспорт
	
	Возврат Перечисления.ТипыОснованияАктаОРасхождении.ПередачаНаКомиссию;
	
КонецФункции

// Возвращает признак оформления документа возврата через документ акта о расхождении
//
// Возвращаемое значение:
//  Булево - 
//
Функция ОформитьВозвратАкта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает постфикс имени акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПостфиксИмениАкта() Экспорт
	
	Возврат НСтр("ru = 'после передачи товаров на комиссию'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении при создании
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыСозданияАкта() Экспорт
	
	Возврат НСтр("ru = 'Акт о расхождениях после передачи товаров на комиссию (создание)'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыАкта() Экспорт
	
	Возврат НСтр("ru = 'Акты о расхождениях после передачи товаров на комиссию'");
	
КонецФункции

// Возвращает заголовок партнера акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокПартнераАкта() Экспорт
	
	Возврат НСтр("ru = 'Комиссионер'");
	
КонецФункции

// Возвращает заголовок документа основания акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокДокументаОснованияАкта() Экспорт
	
	Возврат НСтр("ru = 'Передача на комиссию'");
	
КонецФункции

// Возвращает подсказку договора акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПодсказкаДоговораАкта() Экспорт
	
	Возврат НСтр("ru = 'Договор, в рамках которого оформлена передача'");
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

// Возвращает хозяйственную операцию документа.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперация() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
КонецФункции

// Возвращает хозяйственную операцию договора.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперацияДоговора() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
КонецФункции

// Возвращает массив хозяйственных операции распоряжений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ХозяйственныеОперации -
//
Функция ХозяйственныеОперацииРаспоряжений() Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	
	Возврат МассивОпераций;
	
КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Возвращает признак применяемости соглашений с клиентами
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСКлиентамиПрименимы() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак использование соглашений с клиентами
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьСоглашенияСКлиентами() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
КонецФункции

// Возвращает признак использование расширенных возможностей заказа клиента
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРасширенныеВозможностиЗаказаКлиента() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецФункции

// Возвращает признак использование заказов клиентов
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьЗаказыКлиентов() Экспорт

	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
								 Или ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");

	Возврат ИспользоватьЗаказыКлиентов;
	
КонецФункции

// Возвращает признак использование реализации по нескольким заказов.
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРеализациюПоНесколькимЗаказам() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");

КонецФункции

// Возвращает признак реализации сверх заказа.
// 
// Возвращаемое значение:
// 	Булево
//
Функция РеализацияСверхЗаказа() Экспорт
	
	Возврат ПраваПользователяПовтИсп.РеализацияСверхЗаказа();
	
КонецФункции

// Возвращает признак отклонения от условий продаж.
// 
// Возвращаемое значение:
// 	Булево
//
Функция ОтклонениеОтУсловийПродаж() Экспорт
	
	Возврат ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	
КонецФункции

#КонецОбласти

#Область ОснованиеДляПечати

// Возвращает структуру основания по данными документа
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, ДокументОбъект - Объект документа, по которому необходимо
// 																			   получить текст основания.
// 	
// Возвращаемое значение:
//  Структура - Описание:
//   * Основание - Строка - представление
//   * ОснованиеДата - Дата - дата
//   * ОснованиеНомер - Строка - номер
//
Функция СтруктураОснованияДляПечати(Объект) Экспорт
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетов(Ложь,,Объект.Соглашение, Объект.Договор);
	
	СтруктураОснования = СтруктураОснования(Объект, ПорядокРасчетов);
	
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		СтруктураОснования.Основание = СтруктураОснования.Основание + ", " + НСтр("ru='передача на комиссию'");
	Иначе
		СтруктураОснования.Основание = НСтр("ru='Передача на комиссию.'");
	КонецЕсли;
	
	Возврат СтруктураОснования;
	
КонецФункции

// Возвращает таблицу значений по умолчанию для реквизита "Основание".
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПередачаТоваровХранителю - объект документа, по которому необходимо
//																			получить список выбора.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица значений с реквизитами оснований.
//
Функция ТаблицаОснованийДляПечати(Объект) Экспорт
	
	ТаблицаОснований = Новый ТаблицаЗначений;
	ТаблицаОснований.Колонки.Добавить("Основание", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(300)));
	ТаблицаОснований.Колонки.Добавить("ОснованиеДата", Новый ОписаниеТипов("Дата", , , , ,
																			Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаОснований.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка", , , ,
																			Новый КвалификаторыСтроки(128)));
	
	СтруктураОснования = СтруктураОснования(Объект, Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
		
		ДобавленнаяСтрока.Основание = СтруктураОснования.Основание + ", " + НСтр("ru='передача на комиссию'");
		
		Если ЗначениеЗаполнено(СтруктураОснования.ОснованиеДата)
			И ЗначениеЗаполнено(СтруктураОснования.ОснованиеНомер) Тогда
			
			ТекстРасширенный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
																						СтруктураОснования.Основание,
																						СтруктураОснования.ОснованиеНомер,
																						Формат(СтруктураОснования.ОснованиеДата, "ДЛФ=DD"));
			
			ТекстРасширенный = ТекстРасширенный + ", " + НСтр("ru='передача на комиссию'");
			
			ДобавленнаяСтрока = ТаблицаОснований.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
			
			ДобавленнаяСтрока.Основание = ТекстРасширенный;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОснования = СтруктураОснования(Объект, Перечисления.ПорядокРасчетов.ПоЗаказам);
	
	Если ЗначениеЗаполнено(СтруктураОснования.Основание) Тогда
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтруктураОснования);
		ДобавленнаяСтрока.Основание = СтруктураОснования.Основание + ", " + НСтр("ru='передача на комиссию'");
	КонецЕсли;
	
	Если ТаблицаОснований.Количество() = 0 Тогда
		ДобавленнаяСтрока = ТаблицаОснований.Добавить();
		ДобавленнаяСтрока.Основание = НСтр("ru='Передача на комиссию'");
	КонецЕсли;
	
	Возврат ТаблицаОснований;
	
КонецФункции

#КонецОбласти

#Область Форма

//Получает договор по умолчанию.
//
// Параметры:
//    Объект                         - ДанныеФормыСтруктура, ДокументОбъект - Объект, из которого будут взяты основные параметры для поиска.
//    ОтборПоВалюте                  - Булево - Вести поиск по указанной валюте взаиморасчетов искомого договора (Истина) или
//												без учета валюты взаиморасчетов (Ложь).
//    ОтборПоНаправлениюДеятельности - Булево - Вести поиск по указанному направлению деятельности искомого договора (Истина) или
//												по всем направлениям (Ложь).
//
// Возвращаемое значение:
//    СправочникСсылка.ДоговорыКонтрагентов - договор контрагента по умолчанию.
//
Функция ПолучитьДоговорПоУмолчанию(Объект, ОтборПоВалюте = Истина, ОтборПоНаправлениюДеятельности = Истина) Экспорт
	
	ХозяйственнаяОперация = ХозяйственнаяОперацияДоговора();
	
	Валюта = Неопределено;
	Если ОтборПоВалюте Тогда
		Валюта = Объект.Валюта;
	КонецЕсли;
	
	НаправлениеДеятельности = Неопределено;
	Если ОтборПоНаправлениюДеятельности
	   И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
		НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, ХозяйственнаяОперация, Валюта, НаправлениеДеятельности, Истина);
	
	Возврат Договор;
	
КонецФункции

// Устанавливает доступность элемента договор.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено -
//
Процедура УстановитьДоступностьДоговора(Форма, Объект, Договор = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	Элементы.Договор.Доступность = Истина;
	Элементы.Договор.Видимость = Истина;
	
КонецПроцедуры

// Настраивает форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит:
//           * Элементы - ВсеЭлементыФормы - содержит:
//              ** Партнер - ПолеВвода - содержит:
//                  *** Заголовок - Строка - 
//              ** ТоварыЗаказКлиента - ПолеВвода - содержит:
//                  *** Заголовок - Строка -
//              ** ЗакрытьЗаказ - КнопкаКоманднойПанели - содержит:
//                  *** Доступность - Булево - 
//              ** ЗакрытьЗаказы - КнопкаКоманднойПанели - содержит:
//                  *** Доступность - Булево - 
//  Номер - Число - 
//  Дата  - Дата - 
//
Процедура НастроитьФорму(Форма, Номер, Дата) Экспорт
	
	Элементы  = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок     = ЗаголовокФормыДокумента(Не ЗначениеЗаполнено(Параметры.Ключ), Номер, Дата);

	Элементы.Партнер.Заголовок            = НСтр("ru = 'Комиссионер'");
	Элементы.ТоварыЗаказКлиента.Заголовок = НСтр("ru = 'Заказ на комиссию'");
	
	ПравоНаИзменениеЗаказов = ПравоДоступаЗаказа("Изменение");
	Элементы.ЗакрытьЗаказ.Доступность  = ПравоНаИзменениеЗаказов;
	Элементы.ЗакрытьЗаказы.Доступность = ПравоНаИзменениеЗаказов;
	
	Элементы.Соглашение.Видимость = ИспользоватьСоглашенияСКлиентами();
	Элементы.ТоварыЗаполнитьЦеныПоСоглашению.Видимость = Элементы.Соглашение.Видимость;
	Элементы.ТоварыЗаполнитьЦеныПоДоговору.Видимость   = Истина;
	
КонецПроцедуры

// Настраивает параметры выбора и связи параметров выбора реквизитов формы.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//
Процедура НастроитьПараметрыВыбораЭлементов(Форма, Объект) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Партнер
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
			
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Контрагент
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ЗаголовокПоПартнеру", НСтр("ru = 'По комиссионеру'")));
			
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	//Договор
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию));
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.КомиссионныеПродажи25", Истина));
	
	МассивСвязейПараметровВыбора = Новый Массив;
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.Очищать));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Соглашение", "Объект.Соглашение", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("ВалютаВзаиморасчетов", "Объект.Валюта", РежимИзмененияСвязанногоЗначения.Очищать));
	
	Элементы.Договор.ПараметрыВыбора       = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	
	// Направление деятельности
	Если Не Элементы.Найти("НаправлениеДеятельности") = Неопределено Тогда
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчетДоходов", Истина));
		
		Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
	// Вид цены
	Если Не Элементы.Найти("ТоварыВидЦены") = Неопределено Тогда
		
		МассивСвязейПараметровВыбора = Новый Массив;
		
		МассивСвязейПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("ИспользоватьСоглашенияСКлиентами", "ИспользоватьСоглашенияСКлиентами", РежимИзмененияСвязанногоЗначения.Очищать));
		
		МассивСвязейПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("Соглашение", "Объект.Соглашение", РежимИзмененияСвязанногоЗначения.Очищать));
			
		МассивСвязейПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.Очищать));
		
		МассивСвязейПараметровВыбора.Добавить(
			Новый СвязьПараметраВыбора("Валюта", "Объект.Валюта", РежимИзмененияСвязанногоЗначения.Очищать));
		
		Элементы.ТоварыВидЦены.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВыводитьПроизвольныйВидЦены", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
		
		Элементы.ТоварыВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок формы документа передача товаров хранителю.
//
// Параметры:
//  НовыйДокумент - Булево - 
//  Номер - Число - 
//  Дата - Дата - 
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыДокумента(НовыйДокумент, Номер, Дата) Экспорт
	
	Если НовыйДокумент Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (создание)'"), ПредставлениеОбъекта());
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), ПредставлениеОбъекта(), Номер, Дата);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает представление документа передача товаров хранителю.
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПредставлениеОбъекта() Экспорт
	
	Возврат НСтр("ru = 'Передача на комиссию'");
	
КонецФункции

// Возвращает признак, что склад является группой и группы можно использовать в документах продажи.
// 
// Параметры:
//  Склад - СправочникСсылка.Склады
// 
// Возвращаемое значение:
//  Булево - Это группа складов
//
Функция ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Склад) Экспорт
	
	Возврат Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Прочее

// Возвращает текст основания по данным документа и указанному порядку расчетов.
//
// Параметры:
//	Объект 			- ДанныеФормыСтруктура, ДокументОбъект.ПередачаТоваровХранителю - Объект документа, по которому необходимо
//																					получить текст основания.
//	ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов 							- Порядок расчетов.
//
// Возвращаемое значение:
//  Структура - Описание:
//   * Основание - Строка - представление
//   * ОснованиеДата - Дата - дата
//   * ОснованиеНомер - Строка - номер
//
Функция СтруктураОснования(Объект, ПорядокРасчетов)
	
	СтруктураОснование = Новый Структура("Основание, ОснованиеНомер, ОснованиеДата");
	
	Если (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным)
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК Основание,
		|	ДоговорыКонтрагентов.Дата КАК ОснованиеДата,
		|	ДоговорыКонтрагентов.Номер КАК ОснованиеНомер
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтруктураОснование.Основание      = СокрЛП(Выборка.Основание);
			СтруктураОснование.ОснованиеДата  = Выборка.ОснованиеДата;
			СтруктураОснование.ОснованиеНомер = СокрЛП(Выборка.ОснованиеНомер);
		КонецЕсли;
		
	ИначеЕсли (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным)
		И Объект.ПередачаПоЗаказам Тогда
		
		МассивЗаказов = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Объект.ЗаказКлиента);
		ИначеЕсли Объект.Товары.Количество() <> 0 Тогда
			
			Если ТипЗнч(Объект) = Тип("Структура") Тогда
				МассивЗаказов = Объект.Товары.ВыгрузитьКолонку("ЗаказКлиента");
			Иначе
				МассивЗаказов = Объект.Товары.Выгрузить(, "ЗаказКлиента").ВыгрузитьКолонку("ЗаказКлиента");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивЗаказов <> Неопределено Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаказыКлиентов.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
			|	ЗаказыКлиентов.ДатаПоДаннымКлиента  КАК ДатаПоДаннымКлиента,
			|	ЗаказыКлиентов.Номер                КАК Номер,
			|	ЗаказыКлиентов.Дата                 КАК Дата,
			|	&СинонимЗаказа                      КАК Синоним
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказыКлиентов
			|ГДЕ
			|	ЗаказыКлиентов.Ссылка В(&МассивЗаказов)";
			
			Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
			Запрос.УстановитьПараметр("СинонимЗаказа", НСтр("ru='Заказ клиента'"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТекстПоЗаказам = "";
			ОдноОснование  = Выборка.Количество() = 1;
			
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.НомерПоДаннымКлиента)
					И ЗначениеЗаполнено(Выборка.ДатаПоДаннымКлиента) Тогда
					
					ТекстПоЗаказам = ТекстПоЗаказам + ", "
									+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 № %2 от %3'"),
																							Выборка.Синоним,
																							Выборка.НомерПоДаннымКлиента,
																							Формат(Выборка.ДатаПоДаннымКлиента, "ДЛФ=DD"));
					
					ДатаПоЗаказам  = Выборка.ДатаПоДаннымКлиента;
					НомерПоЗаказам = Выборка.НомерПоДаннымКлиента;
					
				Иначе
					ТекстПоЗаказам = ТекстПоЗаказам + ", "
									+ ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка, Выборка.Синоним);
					
					ДатаПоЗаказам  = Выборка.Дата;
					НомерПоЗаказам = Выборка.Номер;
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураОснование.Основание      = СокрЛП(Сред(ТекстПоЗаказам, 3));
			СтруктураОснование.ОснованиеДата  = ?(ОдноОснование, ДатаПоЗаказам, "");
			СтруктураОснование.ОснованиеНомер = ?(ОдноОснование,
												ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерПоЗаказам),
												"");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОснование;
	
КонецФункции

#КонецОбласти
