#Область СлужебныеПроцедурыИФункции

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника СерииНоменклатуры.
//
Процедура СерииНоменклатурыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("ВидНоменклатуры") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	СерииНоменклатуры.Ссылка КАК Серия,
		|	СерииНоменклатуры.Наименование КАК Наименование,
		|	&ТекстЗапросаПолейСерий
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И &ТекстЗапросаУсловияПоПолямСерий
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер,
		|	ГоденДо";
		
		Запрос = Новый Запрос;
		Если Не Параметры.Свойство("НастройкиИспользованияСерий") Тогда
			НастройкиИспользованияСерий = Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(Параметры.ВидНоменклатуры);
		Иначе
			НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", НастройкиИспользованияСерий.ВладелецСерий);
		
		ШаблонТекстаУсловия = " 
		|		ВЫБОР
		|			КОГДА СерииНоменклатуры.ВидНоменклатуры.%ИмяНастройки%
		|				ТОГДА &РеквизитНеЗаполнен
		|						ИЛИ СерииНоменклатуры.%ИмяРеквизита% %ВидСравнения% &ЗначениеРеквизита
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		МассивТекстовУсловий = Новый Массив;
		ИменаРеквизитовСерий = Новый Массив;
		
		Для Каждого Реквизит Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			
			Если Реквизит.Использование
				И Реквизит.ИмяНастройки <> "ИспользоватьRFIDМеткиСерии" Тогда
				
				ТекстУсловия = СтрЗаменить(ШаблонТекстаУсловия, "%ИмяНастройки%", Реквизит.ИмяНастройки);
				ТекстУсловия = СтрЗаменить(ТекстУсловия, "%ИмяРеквизита%", Реквизит.ИмяРеквизита);
				ТекстУсловия = СтрЗаменить(ТекстУсловия, "&РеквизитНеЗаполнен", "&РеквизитНеЗаполнен" + Реквизит.ИмяРеквизита);
				ТекстУсловия = СтрЗаменить(ТекстУсловия, "&ЗначениеРеквизита", "&ЗначениеРеквизита" + Реквизит.ИмяРеквизита);
				
				Если ТипЗнч(Параметры[Реквизит.ИмяРеквизита]) = Тип("Строка") Тогда
					ТекстУсловия = СтрЗаменить(ТекстУсловия, "%ВидСравнения%", "ПОДОБНО");
					Запрос.УстановитьПараметр("РеквизитНеЗаполнен" + Реквизит.ИмяРеквизита, ПустаяСтрока(Параметры[Реквизит.ИмяРеквизита]));
					Запрос.УстановитьПараметр("ЗначениеРеквизита" + Реквизит.ИмяРеквизита, "%" + СокрЛП(Параметры[Реквизит.ИмяРеквизита]) + "%");
				Иначе
					ТекстУсловия = СтрЗаменить(ТекстУсловия, "%ВидСравнения%", "=");
					Запрос.УстановитьПараметр("РеквизитНеЗаполнен" + Реквизит.ИмяРеквизита, Не ЗначениеЗаполнено(Параметры[Реквизит.ИмяРеквизита]));
					Запрос.УстановитьПараметр("ЗначениеРеквизита" + Реквизит.ИмяРеквизита, Параметры[Реквизит.ИмяРеквизита]);
				КонецЕсли;
				
				МассивТекстовУсловий.Добавить(ТекстУсловия);
				
			КонецЕсли;
			
			ИменаРеквизитовСерий.Добавить(Реквизит.ИмяРеквизита);
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПолейСерий",
				Обработки.ПодборСерийВДокументы.ТекстЗапросаРеквизитыСерий("СерииНоменклатуры", НастройкиИспользованияСерий, Ложь, Ложь));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУсловияПоПолямСерий", СтрСоединить(МассивТекстовУсловий, Символы.ПС + "И" + Символы.НПП));
		
		Запрос.Текст = ТекстЗапроса;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Значение = Новый Структура("Серия," + СтрСоединить(ИменаРеквизитовСерий, ","));
			ЗаполнитьЗначенияСвойств(Значение, Выборка);
			
			ДанныеВыбора.Добавить(Значение, Выборка.Наименование);
			
		КонецЦикла;
		
	ИначеЕсли Параметры.Свойство("Номенклатура")
		И ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		
		СтрокаПоиска = Параметры.СтрокаПоиска;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	СпрСерии.Ссылка КАК Серия,
		|	СпрСерии.Наименование КАК СерияПредставление
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
		|		ПО (СпрСерии.ВидНоменклатуры = ВЫБОР
		|				КОГДА СпрНоменклатура.ВидНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
		|					ТОГДА СпрНоменклатура.ВидНоменклатуры.ВладелецСерий
		|				ИНАЧЕ СпрНоменклатура.ВидНоменклатуры
		|			КОНЕЦ)  
		|ГДЕ
		|	СпрНоменклатура.Ссылка = &Номенклатура
		|	" + ?(СтрокаПоиска = Неопределено, "", "И СпрСерии.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""") + "
		|УПОРЯДОЧИТЬ ПО
		|	СерияПредставление";
		
		Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
		
		Если СтрокаПоиска <> Неопределено Тогда
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СокрЛП(СтрокаПоиска)) + "%");
		КонецЕсли;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Серия, Выборка.СерияПредставление);
		КонецЦикла;
		
	ИначеЕсли Параметры.СтрокаПоиска <> Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
		|	СерииНоменклатуры.Ссылка КАК Серия,
		|	СерииНоменклатуры.Наименование КАК СерияПредставление,
		|	ЕСТЬNULL(ДвиженияСерийТоваров.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
		|	ЕСТЬNULL(ДвиженияСерийТоваров.Номенклатура.Представление, """") КАК НоменклатураПредставление,
		|	ЕСТЬNULL(ДвиженияСерийТоваров.Характеристика, НЕОПРЕДЕЛЕНО) КАК Характеристика,
		|	ЕСТЬNULL(ДвиженияСерийТоваров.Характеристика.Представление, """") КАК ХарактеристикаПредставление
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
		|		ПО (ДвиженияСерийТоваров.Серия = СерииНоменклатуры.Ссылка)
		|ГДЕ
		|	&УсловиеСравнения
		|
		|УПОРЯДОЧИТЬ ПО
		|	СерияПредставление,
		|	НоменклатураПредставление";
		
		УсловиеСравнения = "СерииНоменклатуры.Наименование %ВидСравнения% &СтрокаПоиска";
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеСравнения", 
							СтрЗаменить(УсловиеСравнения, "%ВидСравнения%", "="));
		Запрос.УстановитьПараметр("СтрокаПоиска", СокрЛП(Параметры.СтрокаПоиска));
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеСравнения", 
								СтрЗаменить(УсловиеСравнения, "%ВидСравнения%", "ПОДОБНО") + " СПЕЦСИМВОЛ ""~""");
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СокрЛП(Параметры.СтрокаПоиска)) + "%");
			
			Результат = Запрос.Выполнить();
			
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				
				ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					Выборка.НоменклатураПредставление,
					Выборка.ХарактеристикаПредставление);
					
					ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																			НСтр("ru = '%1 (%2)'"),
																			Выборка.СерияПредставление,
																			ПредставлениеНоменклатуры);
			Иначе
				
				ПредставлениеЗначения = Выборка.СерияПредставление;
				
			КонецЕсли; 
			
			ДанныеВыбора.Добавить(Выборка.Серия, ПредставлениеЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника ПолитикиУчетаСерий.
//
Процедура ПолитикиУчетаСерийОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Не Параметры.Свойство("Отбор") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	ИначеЕсли Не ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры.Отбор, НоменклатураСервер.ОтборПолитикУчетаСерийПоПараметрам(Параметры));
	
КонецПроцедуры

Процедура УпаковкиЕдиницыИзмеренияОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт 
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Параметры.Свойство("Ключ") 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ТипИзмеряемойВеличины") = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда 				
			ВыбраннаяФорма = "ФормаЭлементаУпаковки";
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗначениеКопирования") 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ТипИзмеряемойВеличины") = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
			ВыбраннаяФорма = "ФормаЭлементаУпаковки";
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("ПараметрыВыбора") 
			И Параметры.ПараметрыВыбора.Свойство("ТипИзмеряемойВеличины") 
			И Параметры.ПараметрыВыбора.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда  			
			ВыбраннаяФорма = "ФормаЭлементаУпаковки";
			Возврат;
		КонецЕсли;
		
		ВыбраннаяФорма = "ФормаЭлементаЕдиницыИзмерения";
		
 	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ТипИзмеряемойВеличины = Неопределено;
		
		Если Параметры.Свойство("Отбор") 
			И (Параметры.Отбор.Свойство("ТипИзмеряемойВеличины",ТипИзмеряемойВеличины)
			Или Параметры.Свойство("ТипИзмеряемойВеличины",ТипИзмеряемойВеличины)) Тогда
			
			Если ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
				ВыбраннаяФорма = "ФормаВыбораУпаковки";
			Иначе
				ВыбраннаяФорма = "ФормаВыбораЕдиницыИзмерения";
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Параметры.Свойство("Номенклатура")
			И Не (Параметры.Свойство("ВсегдаВыбиратьЕдиницуИзмерения") И Не ЗначениеЗаполнено(Параметры.Номенклатура)) Тогда 
			ВыбраннаяФорма = "ФормаВыбораИзДокументов";
			СтандартнаяОбработка = Ложь;
		Иначе
			ВыбраннаяФорма = "ФормаВыбораЕдиницыИзмерения";
			Если Не Параметры.Свойство("Отбор") Тогда
				Параметры.Вставить("Отбор", Новый Структура);
			КонецЕсли;
			МассивТиповЕдиниц = Новый Массив;
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Мощность);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Энергия);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Время);
			МассивТиповЕдиниц.Добавить(Перечисления.ТипыИзмеряемыхВеличин.ПустаяСсылка());
			Параметры.Отбор.Вставить("ТипИзмеряемойВеличины", МассивТиповЕдиниц);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;		

		ТекущаяСтрока = Неопределено;
		
		Если Параметры.Свойство("ТекущаяСтрока", ТекущаяСтрока) Тогда
			Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Владелец");
		ИначеЕсли Параметры.Свойство("Отбор")
			И Параметры.Отбор.Свойство("Владелец") Тогда
			Владелец = Параметры.Отбор.Владелец;	
		Иначе
			Владелец = Неопределено;
		КонецЕсли;
		
		Если Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения Тогда
			ВыбраннаяФорма = "ФормаСпискаЕдиницИзмерения";
		Иначе
			ВыбраннаяФорма = "ФормаСпискаУпаковок";
		КонецЕсли;
		
		Если Владелец <> Неопределено Тогда
			
			Если Не Параметры.Свойство("Отбор") Тогда
				Параметры.Вставить("Отбор", Новый Структура);
			КонецЕсли;
			
			Параметры.Отбор.Вставить("Владелец", Владелец);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника Номенклатура.
//
Процедура НоменклатураОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Получим структуру возможных полей отбора справочника номенклатуры
	СтруктураРеквизитов = ЗначениеНастроекПовтИсп.РеквизитыСправочника("Номенклатура");
	
	Запрос        = Новый Запрос;
	СтрокаПоиска  = Параметры.СтрокаПоиска;
	УсловиеОтбора = "ИСТИНА";
	
	Для Каждого КлючИЗначениеОтбора Из Параметры.Отбор Цикл
		Если СтруктураРеквизитов.Свойство(КлючИЗначениеОтбора.Ключ) Тогда
			УсловиеОтбора = УсловиеОтбора + "
				|	И СпрНоменклатура." + КлючИЗначениеОтбора.Ключ + " В (&" + КлючИЗначениеОтбора.Ключ + ")";
			Запрос.УстановитьПараметр(КлючИЗначениеОтбора.Ключ,КлючИЗначениеОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Параметры.Отбор.Свойство("ЭтоГруппа") И Параметры.Свойство("ВыборГруппИЭлементов") Тогда
		Если Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
			УсловиеОтбора = УсловиеОтбора + "
				|	И СпрНоменклатура.ЭтоГруппа";
		ИначеЕсли Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			УсловиеОтбора = УсловиеОтбора + "
				|	И НЕ СпрНоменклатура.ЭтоГруппа";
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	СпрНоменклатура.Наименование КАК ПредставлениеСовпадения,
	|	СпрНоменклатура.Качество.Порядок КАК Качество,
	|	0 КАК Порядок,
	|	СпрНоменклатура.Код КАК ПредставлениеНоменклатуры,
	|	СпрНоменклатура.ЭтоГруппа
	|ПОМЕСТИТЬ НоменклатураПоиск
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И &УсловиеОтбора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	СпрНоменклатура.НаименованиеЯзык1 КАК ПредставлениеСовпадения,
	|	СпрНоменклатура.Качество.Порядок КАК Качество,
	|	1 КАК Порядок,
	|	СпрНоменклатура.Код КАК ПредставлениеНоменклатуры,
	|	СпрНоменклатура.ЭтоГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	&ИспользуютсяДопЯзыки = ИСТИНА
	|	И СпрНоменклатура.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И &УсловиеОтбора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	СпрНоменклатура.НаименованиеЯзык2 КАК ПредставлениеСовпадения,
	|	СпрНоменклатура.Качество.Порядок КАК Качество,
	|	2 КАК Порядок,
	|	СпрНоменклатура.Код КАК ПредставлениеНоменклатуры,
	|	СпрНоменклатура.ЭтоГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	&ИспользуютсяДопЯзыки = ИСТИНА
	|	И СпрНоменклатура.НаименованиеЯзык2 ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И &УсловиеОтбора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ПометкаУдаления,
	|	СпрНоменклатура.Код,
	|	СпрНоменклатура.Качество.Порядок,
	|	3,
	|	СпрНоменклатура.Наименование,
	|	NULL
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Код ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И &УсловиеОтбора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ПометкаУдаления,
	|	СпрНоменклатура.Артикул,
	|	СпрНоменклатура.Качество.Порядок,
	|	4,
	|	СпрНоменклатура.Наименование,
	|	NULL
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Артикул ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И &УсловиеОтбора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ПометкаУдаления,
	|	СпрНоменклатура.КодДляПоиска,
	|	СпрНоменклатура.Качество.Порядок,
	|	5,
	|	СпрНоменклатура.Наименование,
	|	NULL
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.КодДляПоиска ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И &УсловиеОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураПоиск.Ссылка,
	|	МИНИМУМ(НоменклатураПоиск.Порядок) КАК Порядок
	|ПОМЕСТИТЬ НоменклатураПоПорядку
	|ИЗ
	|	НоменклатураПоиск КАК НоменклатураПоиск
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураПоиск.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	|	ЕСТЬNULL(НоменклатураПоиск.Качество, 0) КАК Качество,
	|	НоменклатураПоиск.ПометкаУдаления КАК ПометкаУдаления,
	|	НоменклатураПоиск.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(НоменклатураПоиск.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(НоменклатураПоиск.ПредставлениеСовпадения, """") КАК ПредставлениеСовпадения,
	|	ЕСТЬNULL(НоменклатураПоиск.ПредставлениеНоменклатуры, """") КАК ПредставлениеНоменклатуры
	|ИЗ
	|	НоменклатураПоПорядку КАК НоменклатураПоПорядку
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураПоиск КАК НоменклатураПоиск
	|		ПО НоменклатураПоПорядку.Ссылка = НоменклатураПоиск.Ссылка
	|			И НоменклатураПоПорядку.Порядок = НоменклатураПоиск.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Качество,
	|	ПредставлениеСовпадения,
	|	ПредставлениеНоменклатуры";
	
	Если Параметры.Свойство("ВыборТовараДругогоКачества")
		И Параметры.ВыборТовараДругогоКачества
		И Параметры.Свойство("ТоварИсходногоКачества") Тогда
		
		Запрос.УстановитьПараметр("ТоварИсходногоКачества", Параметры.ТоварИсходногоКачества);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбобщенныйУчетНекачественныхТоваров") Тогда
			
			УсловиеОтбора = УсловиеОтбора + "
				|	И НЕ СпрНоменклатура.Качество = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый)";
			
			ПоляНоменклатуры = Новый Структура;
			ПоляНоменклатуры.Вставить("ВидНоменклатуры");
			ПоляНоменклатуры.Вставить("ИспользоватьСерии",           "ВидНоменклатуры.ИспользоватьСерии");
			ПоляНоменклатуры.Вставить("НастройкаИспользованияСерий", "ВидНоменклатуры.НастройкаИспользованияСерий");
			
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ТоварИсходногоКачества, ПоляНоменклатуры);
			
			Если РеквизитыНоменклатуры.ИспользоватьСерии
				И Не РеквизитыНоменклатуры.НастройкаИспользованияСерий =
						Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
				
				УсловиеОтбора = УсловиеОтбора + "
					|	И СпрНоменклатура.ВидНоменклатуры =
					|		 ВЫРАЗИТЬ(&ТоварИсходногоКачества КАК Справочник.Номенклатура).ВидНоменклатуры";
				
			КонецЕсли;
			
		Иначе
			
			ОписаниеТаблицы = 
				СхемыЗапросов.ОписаниеТаблицы(
					Тип("ТаблицаСхемыЗапроса"),
					"РегистрСведений.ТоварыДругогоКачества",
					"ТоварыДругогоКачества",
					"НоменклатураБрак, Номенклатура");
			
			ОписаниеСоединения =
			СхемыЗапросов.ОписаниеСоединения(
				ОписаниеТаблицы,
				"ТоварыДругогоКачества.НоменклатураБрак = СпрНоменклатура.Ссылка
				|И ТоварыДругогоКачества.Номенклатура = &ТоварИсходногоКачества",
				ТипСоединенияСхемыЗапроса.Внутреннее);
			
			ТекстЗапроса =
				СхемыЗапросов.ДобавитьСоединениеВЗапрос(
					ТекстЗапроса,
					"СпрНоменклатура",
					ОписаниеСоединения,
					0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора" ,УсловиеОтбора);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска) + "%");
	Запрос.УстановитьПараметр("ИспользуютсяДопЯзыки", НЕ МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь));
	
	ДанныеВыбора = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстЗначения = СокрП(Выборка.ПредставлениеСовпадения) + " (" + Выборка.ПредставлениеНоменклатуры + ")";
		
		ЗначениеСписка = Новый Структура;
		ЗначениеСписка.Вставить("Значение", Выборка.Ссылка);
		ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
	
		ДанныеВыбора.Добавить(ЗначениеСписка, ТекстЗначения);
		
	КонецЦикла; 	
	
КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника ВидыНоменклатуры.
//
Процедура ВидыНоменклатурыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
    
    Если Параметры.Свойство("Номенклатура")
        И ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
        
        СтандартнаяОбработка = Ложь;
        
        УсловияВыбораНовогоВидаНоменклатуры = Справочники.Номенклатура.УсловияВыбораНовогоВидаНоменклатуры();
        
		Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ ПЕРВЫЕ 50
        |	НовыйВидНоменклатуры.Ссылка КАК Ссылка,
        |	НовыйВидНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
        |	НовыйВидНоменклатуры.Наименование КАК Наименование
        |ИЗ
        |	Справочник.ВидыНоменклатуры КАК НовыйВидНоменклатуры
        |ГДЕ
        |	НЕ НовыйВидНоменклатуры.ЭтоГруппа
        |	";
        
        Для Каждого КлючЗначение Из УсловияВыбораНовогоВидаНоменклатуры Цикл
            
            Запрос.Текст = Запрос.Текст + " И НЕ " + КлючЗначение.Значение;
            
        КонецЦикла;
		
        ПараметрыЗапроса = Запрос.НайтиПараметры();
        
        ИменаРеквизитов = Новый Структура;
        Для Каждого Параметр Из ПараметрыЗапроса Цикл
            ИменаРеквизитов.Вставить(Параметр.Имя, "ВидНоменклатуры." + Параметр.Имя);
        КонецЦикла;
        
        СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Номенклатура, ИменаРеквизитов);
        Для Каждого Параметр Из ПараметрыЗапроса Цикл
            Запрос.УстановитьПараметр(Параметр.Имя, СтарыеРеквизиты[Параметр.Имя]);
        КонецЦикла;
        
        Запрос.Текст = Запрос.Текст + "
        |	И НовыйВидНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
       	|
        |УПОРЯДОЧИТЬ ПО
        |	НовыйВидНоменклатуры.Наименование";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска) + "%");
        
        ДанныеВыбора = Новый СписокЗначений;
        
        Выборка = Запрос.Выполнить().Выбрать();
        Пока Выборка.Следующий() Цикл
            
			ЗначениеВыбора = Новый Структура;
			ЗначениеВыбора.Вставить("Значение", Выборка.Ссылка); 
			ЗначениеВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления); 
			ЗначениеВыбора.Вставить("Предупреждение ", ""); 
			
			ДанныеВыбора.Добавить(ЗначениеВыбора, Выборка.Наименование);
			
        КонецЦикла; 	
        
    КонецЕсли;

КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника НаборыУпаковок.
//
Процедура НаборыУпаковокОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	СтандартнаяОбработка = Ложь;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыУпаковок.Ссылка КАК Значение,
	|	НаборыУпаковок.Наименование КАК Представление
	|ИЗ
	|	Справочник.НаборыУпаковок КАК НаборыУпаковок
	|ГДЕ
	|	НаборыУпаковок.Ссылка <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|	И НаборыУпаковок.Ссылка <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаборыУпаковок.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Значение, Выборка.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора справочника СкладскиеГруппыНоменклатуры.
//
Процедура СкладскиеГруппыНоменклатурыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// Получим структуру возможных полей отбора справочника номенклатуры
	СтруктураРеквизитов = ЗначениеНастроекПовтИсп.РеквизитыСправочника("СкладскиеГруппыНоменклатуры");
	
	Если Параметры.Свойство("ОбособленнаяЗакупкаПродажа") Тогда
		ОбособленнаяЗакупкаПродажа = Параметры.ОбособленнаяЗакупкаПродажа;
	Иначе
		ОбособленнаяЗакупкаПродажа = Истина;
	КонецЕсли;
	
	УсловиеОтбора = "";
	Запрос = Новый Запрос;
	СтрокаПоиска = Параметры.СтрокаПоиска;
	
	Для Каждого КлючИЗначениеОтбора Из Параметры.Отбор Цикл
		Если СтруктураРеквизитов.Свойство(КлючИЗначениеОтбора.Ключ) Тогда
			УсловиеОтбора = УсловиеОтбора + "
				|	И СкладскиеГруппыНоменклатуры." + КлючИЗначениеОтбора.Ключ + " В (&" + КлючИЗначениеОтбора.Ключ + ")";
			Запрос.УстановитьПараметр(КлючИЗначениеОтбора.Ключ,КлючИЗначениеОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СкладскиеГруппыНоменклатуры.Ссылка КАК Ссылка,
	|	СкладскиеГруппыНоменклатуры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СкладскиеГруппыНоменклатуры КАК СкладскиеГруппыНоменклатуры
	|ГДЕ
	|	СкладскиеГруппыНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""
	|	И (НЕ &ТолькоФизическиРазличаетсяОтНазначения
	|			ИЛИ &ТолькоФизическиРазличаетсяОтНазначения
	|				И НЕ СкладскиеГруппыНоменклатуры.ФизическиРазличаетсяОтНазначения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда 
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"СкладскиеГруппыНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""",
			"СкладскиеГруппыНоменклатуры.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""" + УсловиеОтбора);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТолькоФизическиРазличаетсяОтНазначения", НЕ ОбособленнаяЗакупкаПродажа);
	Запрос.УстановитьПараметр("СтрокаПоиска", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска) + "%");
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

// Серверный обработчик события ОбработкаПолученияДанныхВыбора перечисления ЕдиницыИзмеренияВремени.
//
Процедура ЕдиницыИзмеренияСрокаГодностиОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ВидНоменклатуры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВидНоменклатуры = Параметры.ВидНоменклатуры;
		ЕдиницаИзмеренияСрокаГодности = Неопределено;
		
		ИсключаемыеЗначения = Новый Массив;
		ИсключаемыеЗначения.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Секунда);
		ИсключаемыеЗначения.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Минута);
		ИсключаемыеЗначения.Добавить(Перечисления.ЕдиницыИзмеренияВремени.День);
		
		Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			ЕдиницаИзмеренияСрокаГодности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры,
																					"ЕдиницаИзмеренияСрокаГодности");
		КонецЕсли;
		
		Если ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
			ИсключаемыеЗначения.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Час);
		ИначеЕсли ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Месяц Тогда
			ИсключаемыеЗначения.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Час);
			ИсключаемыеЗначения.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Сутки);
		КонецЕсли;
		
		ОбщегоНазначенияУТВызовСервера.ДоступныеДляВыбораЗначенияПеречисления("ЕдиницыИзмеренияВремени",
																			ДанныеВыбора,
																			Параметры,
																			ИсключаемыеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает единицу хранения номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - ссылка номенклатуры,
//
// Возвращаемое значение:
//  СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры.
//
Функция ЕдиницаХраненияНоменклатуры(Знач Номенклатура) Экспорт
	
	Возврат Справочники.УпаковкиЕдиницыИзмерения.ЕдиницаХраненияНоменклатуры(Номенклатура);
	
КонецФункции

#Область СертификатыНоменклатуры

// Выполняет запуск фонового задания по установке статуса сертификатов номенклатуры.
//
// Параметры:
//	УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор запускаемого фонового задания.
//	ПараметрыЗаполнения - см. НоменклатураКлиентСервер.ПараметрыУстановкиСтатусаСертификатовНоменклатурыПоУмолчанию.
//
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию.
//
Функция УстановитьСтатусСертификатовНоменклатуры(УникальныйИдентификатор, ПараметрыЗаполнения) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Изменение статуса сертификатов номенклатуры'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
							ПараметрыВыполнения,
							"Справочники.СертификатыНоменклатуры.УстановитьСтатусСертификатовНоменклатуры",
							ПараметрыЗаполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
