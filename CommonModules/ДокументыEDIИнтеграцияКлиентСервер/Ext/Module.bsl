///////////////////////////////////////////////////////////////////////////////////////////////////////
// В модуле реализованы клиент-серверные процедуры и функции, предназначенные для работы с документами EDI
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция КатегорияДокументаПоТипу(ТипДокумента) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказКлиента") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Продажа");
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КатегорииДокументовEDI.Закупка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДокументДоступенДляРедактированияПоСтатусу(ТипДокумента, Статус) Экспорт
	
	Если Не ЗначениеЗаполнено(Статус) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказКлиента") Тогда
		МассивСтатусов = ДокументыEDIКлиентСервер.МассивСтатусовНаСторонеПродавца();
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
		МассивСтатусов = ДокументыEDIКлиентСервер.МассивСтатусовНаСторонеПокупателя();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат МассивСтатусов.Найти(Статус) <> Неопределено;
	
КонецФункции

#Область КлиентскаяБиблиотека

Процедура ИзменитьОтборыСписокСтатусыEDI(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ТипДокументаEDI) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ИспользоватьОтборПоСтатусам           = Форма.ИспользоватьОтборПоСтатусамEDI;
	ВариантОтбораПоАктуальностиВерсии     = Форма.ВариантОтбораПоАктуальностиВерсииEDI;
	МассивВыбранныхСтатусов               = ДокументыEDIКлиентСервер.ВыбранныеВДеревеСтатусыДокументов(Форма.ДеревоСтатусовEDI);
	ИспользоватьОтборПоНеактуальнойВерсии = Форма.ИспользоватьОтборПоНеактуальнойВерсииEDI;
	ИмяЭлементаСписок                     = Форма.ИмяРеквизитаСписокEDI;
	
	Список = Форма[ИмяЭлементаСписок];
	
	Если ВариантОтбораПоАктуальностиВерсии = ПредопределенноеЗначение("Перечисление.ВариантыОтбораПоНеактуальнойВерсииEDI.НеУчитыватьОтборПоСтатусам") Тогда
		ТипГруппыЭлементовОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Иначе
		ТипГруппыЭлементовОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	КонецЕсли;
	
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
	                                                                                  "ОтборПоСтатусамEDI",
	                                                                                   ТипГруппыЭлементовОтбора);
	
	Если Не ИспользоватьОтборПоСтатусам Тогда
		Возврат;
	КонецЕсли;
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Форма.ТипДокументаEDI);
	
	МассивТиповДокументовИСтатусов = ДокументыEDIИнтеграцияВызовСервера.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивТиповДокументов, МассивВыбранныхСтатусов);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементовОтбора,
			"ХэшТипаДокументаИСтатусаEDI",
			ВидСравненияКомпоновкиДанных.ВСписке,
			МассивТиповДокументовИСтатусов,
			НСтр("ru = 'Отбор по статусу EDI'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Если ИспользоватьОтборПоНеактуальнойВерсии Тогда
		
		НеактуальныеВерсии = Новый СписокЗначений;
		НеактуальныеВерсии.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия"));
		НеактуальныеВерсии.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеУдалосьАктуализироватьВерсиюВСервисе"));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаЭлементовОтбора,
			"СостояниеПрикладногоОбъектаEDI",
			ВидСравненияКомпоновкиДанных.ВСписке,
			НеактуальныеВерсии,
			НСтр("ru = 'Отбор по актуальности версии документа по сравнению с версией в сервисе EDI'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСФормойДокументов

Процедура ПрочитатьДанныеДокумента(ФормаДокумента) Экспорт
	
	Объект          = ФормаДокумента.Объект;
	ДанныеДокумента = ФормаДокумента.СвойстваEDI.ДанныеДокумента;
	НастройкиФормы  = ФормаДокумента.СвойстваEDI.НастройкиФормы;
	
	ДанныеДокумента.Ссылка      = Объект.Ссылка;
	ДанныеДокумента.Организация = Объект[НастройкиФормы.ИмяРеквизитаОрганизация];
	ДанныеДокумента.Контрагент  = Объект[НастройкиФормы.ИмяРеквизитаКонтрагент];
	
	Если Не ПустаяСтрока(НастройкиФормы.ИмяРеквизитаМенеджер) Тогда
		ДанныеДокумента.Менеджер    = Объект[НастройкиФормы.ИмяРеквизитаМенеджер];
	КонецЕсли;
	
	ФормаДокумента.СвойстваEDI.ДанныеОтображенияФормы.ТипДокумента = 
		РаботаСДаннымиEDIСлужебныйВызовСервера.ТипДокументаEDI(Объект.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьОтображениеЭлементовФормы(ФормаДокумента, НачальноеЗаполнение = Ложь) Экспорт
	
	СвойстваEDI                   = ФормаДокумента.СвойстваEDI;
	ДанныеДокумента               = СвойстваEDI.ДанныеДокумента;
	ДанныеСтатусаДокумента        = СвойстваEDI.ДанныеСтатусаДокумента;
	ДанныеПротоколаВзаимодействия = СвойстваEDI.ДанныеПротоколаВзаимодействия;
	ДанныеОтображенияФормы        = СвойстваEDI.ДанныеОтображенияФормы;
	ДанныеБизнесСеть              = СвойстваEDI.ДанныеБизнесСеть;
	ЭлементыФормы                 = ФормаДокумента.Элементы;
	ЭтоЗаказПоставщику            = СвойстваEDI.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику");
	
	ИмяГруппыФормыПанельСостояния               = СвойстваEDI.НастройкиФормы.ИмяГруппыФормыПанельСостояния;
	ИмяГруппыФормыПанельПротоколаВзаимодействия = СвойстваEDI.НастройкиФормы.ИмяГруппыФормыПанельПротоколаВзаимодействия;
	
	Если СвойстваEDI.ИменаЭлементовКомандEDI.Свойство("РазрешитьРедактированиеДокументаВФинальномСтатусеEDI") Тогда
	
		МассивВозможныхСтатусов = МассивСтатусовДляРазрешенияРедактирования(ДанныеСтатусаДокумента.ТипДокумента);

		КомандаДоступна = МассивВозможныхСтатусов.Найти(ДанныеСтатусаДокумента.ТекущийСтатус) <> Неопределено;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
		                                                             СвойстваEDI.ИменаЭлементовКомандEDI.РазрешитьРедактированиеДокументаВФинальномСтатусеEDI,
		                                                             "Видимость", 
		                                                              КомандаДоступна);
	                                                              
	КонецЕсли;
	
	Если Не ДанныеБизнесСеть.ОтправлятьЗаказыПоставщикам 
		И СвойстваEDI.ДанныеСтатусаДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельСостояния,
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельПротоколаВзаимодействия,
			"Видимость", Ложь);
		
		Возврат;
		
	ИначеЕсли ПустаяСтрока(СвойстваEDI.ДанныеСтатусаДокумента.ИдентификаторВСервисе)
		И СвойстваEDI.ДанныеСтатусаДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказКлиента")
		И Не СвойстваEDI.ДанныеОтображенияФормы.ОшибкаПолученияДанныхСервиса
		И СвойстваEDI.ДлительныеОперации.Количество() = 0 Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельСостояния,
			"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельПротоколаВзаимодействия,
			"Видимость", Ложь);
	
		Возврат;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельСостояния,
			"Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельПротоколаВзаимодействия,
			"Видимость", ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ТребуетсяОтображатьПанель);
	КонецЕсли;
	
	ТекстПроблемаЗаполненияHTML = "";
	
	Если ВыполняетсяДлительнаяОперация(ФормаДокумента) Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаДлительнаяОперацияEDI;
		
	ИначеЕсли Не СвойстваEDI.ДанныеБизнесСеть.ОрганизацияПодключена Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаПроблемаЗаполнения;
		ТекстПроблемаЗаполненияHTML = СтрШаблон(
			НСтр("ru = 'Состояние EDI: <b>Организация ""%1"" не подключена к сервису 1С:Бизнес-сеть.</b> <a href = ""ОткрытьФормуПодключенияОрганизации"">Подключиться...</a>'"),
			ДанныеДокумента.Организация);
			
	ИначеЕсли СвойстваEDI.ДанныеБизнесСеть.ТребуетсяПовторноеПодключениеОрганизации Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаПроблемаЗаполнения;
		ТекстПроблемаЗаполненияHTML = 
			НСтр("ru = 'Состояние EDI: <b>Требуется</b> <a href=""ПодключениеОрганизации"">подключение организации к 1С:Бизнес-сеть</a>'");
			
	ИначеЕсли СвойстваEDI.ДанныеОтображенияФормы.ОшибкаПолученияДанныхСервиса Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаПроблемаЗаполнения;
		ТекстПроблемаЗаполненияHTML = НСтр("ru = 'Не удалось получить данные документа из сервиса'");
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеДокумента.Организация) Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаПроблемаЗаполнения;
		ТекстПроблемаЗаполненияHTML = НСтр("ru = 'Не выбрана организация документа'");
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеДокумента.Контрагент) Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаПроблемаЗаполнения;
		ТекстПроблемаЗаполненияHTML = НСтр("ru = 'Не выбран контрагент документа'");
		
	ИначеЕсли ЭтоЗаказПоставщику И Не СвойстваEDI.НастройкиКонтрагента.КонтрагентЗарегистрирован Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаКонтрагентНеПринимаетЗаказы;
		ТекстКонтрагентНеПринимаетЗаказы = НСтр("ru = 'Причина: Контрагент не зарегистрирован в сервисе'");
		
	ИначеЕсли ЭтоЗаказПоставщику И СвойстваEDI.НастройкиКонтрагента.ЗначениеНастройки = 
			ПредопределенноеЗначение("Перечисление.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы") 
		И СвойстваEDI.НастройкиКонтрагента.ИндивидуальнаяНастройка Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаКонтрагентНеПринимаетЗаказы;
		ТекстКонтрагентНеПринимаетЗаказы = НСтр("ru = 'Причина: Контрагент ограничил список клиентов от которых готов принимать заказы'");
		
	ИначеЕсли ЭтоЗаказПоставщику И СвойстваEDI.НастройкиКонтрагента.ЗначениеНастройки = 
			ПредопределенноеЗначение("Перечисление.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы") 
			И Не СвойстваEDI.НастройкиКонтрагента.ИндивидуальнаяНастройка Тогда
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаКонтрагентНеПринимаетЗаказы;
		ТекстКонтрагентНеПринимаетЗаказы = НСтр("ru = 'Причина: Контрагент установил запрет на получение заказов'");
		
	Иначе
		
		ТекущаяСтраница = ЭлементыФормы.СтраницаРаботаССервисом;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ПанельСостоянияСтраницы",
		"ТекущаяСтраница", ТекущаяСтраница);
	
	Если ТекущаяСтраница = ЭлементыФормы.СтраницаПроблемаЗаполнения Тогда
		#Если Клиент Тогда
			ТекстПроблемаЗаполнения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстПроблемаЗаполненияHTML);
		#Иначе
			ТекстПроблемаЗаполнения = СтроковыеФункции.ФорматированнаяСтрока(ТекстПроблемаЗаполненияHTML);
		#КонецЕсли
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "НадписьПроблемаЗаполнения",
			"Заголовок", ТекстПроблемаЗаполнения);
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.СтраницаКонтрагентНеПринимаетЗаказы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ДекорацияЗагрузитьНастройкиОбменаНадпись",
			"Заголовок", ТекстКонтрагентНеПринимаетЗаказы);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяГруппыФормыПанельПротоколаВзаимодействия,
		"Видимость", ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ТребуетсяОтображатьПанель);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ОткрытьПротоколВзаимодействия",
		"Пометка", ФормаДокумента.СвойстваEDI.ДанныеПротоколаВзаимодействия.ТребуетсяОтображатьПанель);
	
	Если Не ПустаяСтрока(СвойстваEDI.ДанныеСтатусаДокумента.ИдентификаторВСервисе)
		И (ДанныеПротоколаВзаимодействия.ПротоколВзаимодействияПодключен 
			Или ДанныеПротоколаВзаимодействия.ОтображениеСтатичныхСообщений) Тогда
		ТекущаяСтраница = ЭлементыФормы.ГруппаПротоколВзаимодействияДоступен;
	Иначе
		ТекущаяСтраница = ЭлементыФормы.ГруппаПротоколВзаимодействияНедоступен;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ГруппаПротоколВзаимодействияСтраницы",
		"ТекущаяСтраница", ТекущаяСтраница);
	
	Если Не ДанныеОтображенияФормы.КонфликтВерсий Или СвойстваEDI.СостояниеСинхронизации.СостояниеВыполнения = 
			ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка")
			Или СвойстваEDI.СостояниеСинхронизации.СостояниеВыполнения = 
			ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление")  Тогда
		ТекущаяСтраница = ЭлементыФормы.СтраницаДействияДокумента;
	Иначе
		ТекущаяСтраница = ЭлементыФормы.СтраницаКонфликтВерсийПриЗаписи;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "СтраницыРаботаССервисом",
		"ТекущаяСтраница", ТекущаяСтраница);
	
	ОтображатьПредупреждение = Ложь;
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить();
	ЧастиЗаголовка.Добавить(" ");
	
	НовыйСтатус = СвойстваEDI.ДанныеСтатусаДокумента.ТекущийСтатус;
	
	ОшибкаСинхронизации = СвойстваEDI.СостояниеСинхронизации.СостояниеВыполнения = 
			ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "ГруппаСостояниеДокументаОшибка",
		"Видимость", ОшибкаСинхронизации);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "ГруппаСостояниеДокументаБезОшибки",
		"Видимость", Не ОшибкаСинхронизации);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "ДекорацияНадписьОшибкаСинхронизацииПояснение",
		"Заголовок", СвойстваEDI.СостояниеСинхронизации.КраткоеПредставлениеОшибки);
	
	Если СвойстваEDI.СостояниеСинхронизации.СостояниеВыполнения = 
			ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление") Тогда
		ОтображатьПредупреждение = Истина;
		ТекстСостояние = НСтр("ru = 'Требуется сопоставление номенклатуры'");
		КомандаПроверки = "СопоставитьНоменклатуруПриПолучении"
	ИначеЕсли СвойстваEDI.СостояниеСинхронизации.СостояниеВыполнения = 
			ПредопределенноеЗначение("Перечисление.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления")  Тогда
		ОтображатьПредупреждение = Истина;
		ТекстСостояние = НСтр("ru = 'Требуется сопоставление номенклатуры'");
		КомандаПроверки = "СопоставитьНоменклатуруПриОтправке"
	ИначеЕсли СвойстваEDI.ДанныеДокумента.Ссылка.Пустая() Тогда
		ТекстСостояние = НСтр("ru = 'Новый'");
	ИначеЕсли НовыйСтатус.Пустая() Тогда
		ТекстСостояние = НСтр("ru = 'Новый'");
	Иначе
		ТекстСостояние = Строка(НовыйСтатус);
	КонецЕсли;
	
	ТекстНачало = НСтр("ru = 'Состояние EDI'");
	
	Если ОтображатьПредупреждение Тогда
		ШаблонЗаголовка = "%1: <span style = 'color: ЦветТекстаПредупреждениеEDI'><b>%2</b>, <a href = ""%3"">%4</a>";
	Иначе
		ШаблонЗаголовка = "%1: <b>%2</b>";
	КонецЕсли;
	
	Если ОтображатьПредупреждение Тогда
		ТекстПроверка = НСтр("ru = 'проверить'");
	КонецЕсли;
	
	#Если Клиент Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ШаблонЗаголовка, ТекстНачало, ТекстСостояние,
			КомандаПроверки, ТекстПроверка);
	#Иначе
		ТекстЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаголовка, ТекстНачало, ТекстСостояние,
			КомандаПроверки, ТекстПроверка);
	#КонецЕсли
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "НадписьСтатусДокумента",
		"Заголовок", ТекстЗаголовка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "ДекорацияНадписьПредупреждениеДоступныеДействия",
		"Видимость", ОтображатьПредупреждение И Не ПустаяСтрока(СвойстваEDI.ДанныеОсновногоДействия.Идентификатор));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "НадписьОсновноеДействиеДокумента",
		"Видимость", Не ОтображатьПредупреждение Или (ДанныеСтатусаДокумента.Команды.Количество() = 1
			И ЗначениеЗаполнено(СвойстваEDI.ДанныеОсновногоДействия.Ссылка)));
	
	Если Не ДанныеПротоколаВзаимодействия.ОтображаемоеКоличествоНепрочитанныхСообщений = 
		ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений Тогда
		
		ДанныеПротоколаВзаимодействия.ОтображаемоеКоличествоНепрочитанныхСообщений = 
			ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений;
			
		Если ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений = 0 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ОткрытьПротоколВзаимодействия", 
				"Картинка", БиблиотекаКартинок.БизнесСетьПротокол);
		ИначеЕсли ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений <= 9 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ОткрытьПротоколВзаимодействия", 
				"Картинка", БиблиотекаКартинок["БизнесСетьНовоеСообщение" + Строка(ДанныеПротоколаВзаимодействия.КоличествоНепрочитанныхСообщений)]);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, "ОткрытьПротоколВзаимодействия", 
				"Картинка", БиблиотекаКартинок.БизнесСетьНовоеСообщениеБолее9);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ФормаДокумента.Элементы, "ГруппаПодробнаяИнформацияОбОшибке",
		"Видимость", Не ПустаяСтрока(ФормаДокумента.ПодробнаяИнформацияОбОшибке));
	
	
	СкрытьВсплывающуюГруппуФормы(ЭлементыФормы, "ГруппаКонтрагентНеПринимаетЗаказыДоступныеДействия");
	
КонецПроцедуры

Функция ФормаИнициализирована(ФормаДокумента) Экспорт
	
	ЗначениеПроверки = Новый УникальныйИдентификатор;
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("СвойстваEDI", ЗначениеПроверки);
	
	ЗаполнитьЗначенияСвойств(СтруктураПроверки, ФормаДокумента);
	
	Если СтруктураПроверки.СвойстваEDI = ЗначениеПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ФормаДокумента.СвойстваEDI.ФормаИнициализирована;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПодключенияКСервису

Процедура ЗаполнитьНастройкиОрганизации(ФормаДокумента) Экспорт
	
	СвойстваEDI = ФормаДокумента.СвойстваEDI;

	ДанныеОрганизации = ДанныеОрганизации(СвойстваEDI.ДанныеДокумента.Организация);
	
	СвойстваEDI.ДанныеБизнесСеть.ОрганизацияПодключена                    = ДанныеОрганизации.ОрганизацияПодключена;
	СвойстваEDI.ДанныеБизнесСеть.ОтправлятьЗаказыПоставщикам              = ДанныеОрганизации.ОтправлятьЗаказыПоставщикам;
	СвойстваEDI.ДанныеБизнесСеть.ТребуетсяПовторноеПодключениеОрганизации = ДанныеОрганизации.ТребуетсяПовторноеПодключениеОрганизации;
	
КонецПроцедуры

#КонецОбласти

#Область СловарьИдентификаторов

Функция ИдентификаторКомандыИнициализироватьФорму() Экспорт
	
	Возврат "ИнициализироватьФорму";
	
КонецФункции

Функция ИдентификаторКомандыИнициализироватьТабличнуюЧастьСообщений() Экспорт 
	
	Возврат "ИнициализироватьТабличнуюЧастьСообщений";
	
КонецФункции

Функция ИдентификаторКомандыВывестиСтатичныеСообщенияПротоколаВзаимодействия() Экспорт
	
	Возврат "ВывестиСтатичныеСообщенияПротоколаВзаимодействия";
	
КонецФункции

Функция ИдентификаторСтатусаДоставкиОтправлен() Экспорт
	Возврат "Send";
КонецФункции

#КонецОбласти

#Область ОбновлениеЗагрузкаДокументов

Процедура ДобавитьДанныеНезагруженныхДокументовСОшибкой(МассивДокументов, ДанныеДокумента, ТекстОшибки, КоличествоНеЗагруженныхОшибка) Экспорт
	
	ДанныеОшибкиПриЗагрузке = Новый Структура;
	ДанныеОшибкиПриЗагрузке.Вставить("ТекстОшибки",           ТекстОшибки);
	ДанныеОшибкиПриЗагрузке.Вставить("ТипДокумента",          ДанныеДокумента.ТипДокумента);
	ДанныеОшибкиПриЗагрузке.Вставить("ИдентификаторВСервисе", ДанныеДокумента.ИдентификаторВСервисе);
	ДанныеОшибкиПриЗагрузке.Вставить("НомерДокумента",        ДанныеДокумента.НомерДокумента);
	ДанныеОшибкиПриЗагрузке.Вставить("ДатаДокумента",         ДанныеДокумента.ДатаДокумента);
	ДанныеОшибкиПриЗагрузке.Вставить("ПрикладнойОбъект",      ДанныеДокумента.ПрикладнойОбъект);
	ДанныеОшибкиПриЗагрузке.Вставить("Организация",           ДанныеДокумента.Организация);

	МассивДокументов.Добавить(ДанныеОшибкиПриЗагрузке);
	КоличествоНеЗагруженныхОшибка = КоличествоНеЗагруженныхОшибка + 1;
	
КонецПроцедуры

Функция ПараметрыЗагрузкиОбновленияДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоВыбранных",                 0);
	Результат.Вставить("КоличествоКЗагрузке",                 0);
	Результат.Вставить("ДокументыКЗагрузке",                  Новый Массив);
	Результат.Вставить("УникальныйИдентификатор",             Неопределено);
	Результат.Вставить("ДанныеНеЗагруженныхДокументовОшибка", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗагрузкиОбновленияДокумента() Экспорт
	
	ДокументКЗагрузке = Новый Структура;
	
	ДокументКЗагрузке.Вставить("ИдентификаторВСервисе",              "");
	ДокументКЗагрузке.Вставить("ТипДокумента",                       Неопределено);
	ДокументКЗагрузке.Вставить("Организация",                        Неопределено);
	ДокументКЗагрузке.Вставить("ДатаДокумента",                      Неопределено);
	ДокументКЗагрузке.Вставить("НомерДокумента",                     Неопределено);
	ДокументКЗагрузке.Вставить("Успешно",                            Ложь);
	ДокументКЗагрузке.Вставить("ТекстОшибки",                        Неопределено); 
	ДокументКЗагрузке.Вставить("ПрикладнойОбъект",                   Неопределено);
	ДокументКЗагрузке.Вставить("Менеджер",                           Неопределено);
	
	Возврат ДокументКЗагрузке;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполняетсяДлительнаяОперация(ФормаДокумента)
	
	Возврат ФормаДокумента.СвойстваEDI.ДлительныеОперации.Количество() > 0;
	
КонецФункции

Процедура СкрытьВсплывающуюГруппуФормы(ЭлементыФормы, ИмяЭлементаФормы) Экспорт
	
	ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлементаФормы);
	
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	ИначеЕсли ЭлементФормы.Скрыта() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы.Скрыть();
	
КонецПроцедуры

Функция МассивСтатусовДляРазрешенияРедактирования(ТипДокумента)

	МассивВозможныхСтатусов = ДокументыEDIКлиентСервер.МассивСтатусовАрхив();
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказКлиента") Тогда
		МассивВозможныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ОтменаПодтверждаетсяПокупателем"));
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказПоставщику") Тогда
		МассивВозможныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказаEDI.ОтменаПодтверждаетсяПоставщиком"));
	КонецЕсли;
	
	Возврат МассивВозможныхСтатусов;

КонецФункции

Функция ДанныеОрганизации(Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияПодключена"                    , Ложь);
	Результат.Вставить("ОтправлятьЗаказыПоставщикам"              , Ложь);
	Результат.Вставить("ТребуетсяПовторноеПодключениеОрганизации" , Ложь);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДокументыEDIИнтеграцияВызовСервера.ОпределитьДанныеОрганизации(Организация, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
