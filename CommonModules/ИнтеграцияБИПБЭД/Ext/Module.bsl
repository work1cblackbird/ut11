
#Область СлужебныйПрограммныйИнтерфейс

// Получение билета на сайте интернет-поддержки.
//
// Параметры:
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ПоказыватьОшибки - Булево - признак показа ошибок.
//  ПоказыватьОшибкуАутентификацииПриОтсутствииДанных - Булево - определяет, показывать ли ошибку аутентификации
//                                                      в случае, если не указан логин и пароль.
//  КонтекстОперации - Структура - Контекст операции, см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики.
// 
// Возвращаемое значение:
//  Строка - контрольная строка для авторизации.
//
Функция БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, ПоказыватьОшибки = Истина,
	ПоказыватьОшибкуАутентификацииПриОтсутствииДанных = Истина, КонтекстОперации = Неопределено) Экспорт
	
	Билет = "";
	ИнтернетПоддержкаПользователейПодключена = Истина;
	
	ВидОперации = НСтр("ru = 'Подключение к порталу интернет-поддержки'");
	ТекстЗаголовкаСообщения = НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:'");
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.УправлениеТарифами") Тогда
			
			МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
			Если Не МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
				ИнтеграцияБИПБЭДКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
				ИнтеграцияБИПБЭДКлиентСервер.ИдентификаторУслугиОбменаЭлектроннымиДокументами()) Тогда
			
				ОписаниеОшибки = НСтр("ru = 'Услуга ""Обмен электронными документами"" не подключена.
											|Необходимо:
											|Проверить наличие ИТС по рег. номеру;
											|Проверить окончание срока действия договора ИТС на портале.'");
				
				ТекстСообщенияДляЖурналаРегистрации = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
				ТекстСообщенияДляПользователя = "";
				Если ПоказыватьОшибки Тогда
					ТекстСообщенияДляПользователя = ТекстСообщенияДляЖурналаРегистрации;
				КонецЕсли;
				
				ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
					ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие,
					ТекстСообщенияДляЖурналаРегистрации,
					ТекстСообщенияДляПользователя);
					
				Возврат Билет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОшибки =
			НСтр("ru = 'Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'");
		ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ИнтеграцияБИПБЭДКлиентСервер.ВидОшибкиИнтернетПоддержка(), ОписаниеОшибки, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстОперации, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие);
			
		Возврат Билет;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ТикетАутентификацииНаПорталеПоддержки("1C-EDO");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Если Результат.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			ИнтернетПоддержкаПользователейПодключена = Ложь;
		КонецЕсли;
		
		ТекстСообщения = "";
		Если ПоказыватьОшибки Тогда
			УстановитьПривилегированныйРежим(Истина);
			МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
			ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не (Не ПоказыватьОшибкуАутентификацииПриОтсутствииДанных И Результат.КодОшибки = "НеверныйЛогинИлиПароль"
						И ДанныеАутентификации = Неопределено) Тогда
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + Результат.СообщениеОбОшибке;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.КодОшибки = "ОшибкаПодключения" Тогда
			ВидОшибки = ИнтернетСоединениеБЭДКлиентСервер.ВидОшибкиИнтернетСоединение();
		ИначеЕсли Результат.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			ВидОшибки = ИнтеграцияБИПБЭДКлиентСервер.ВидОшибкиИнтернетПоддержка();
		Иначе
			ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидОшибки) И Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + Результат.СообщениеОбОшибке;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки,
			Результат.СообщениеОбОшибке, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстОперации, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие);
	Иначе
		Билет = Результат.Тикет;
	КонецЕсли;
	
	Возврат Билет;
	
КонецФункции

// Получает тикет аутентификации или данные пользователя на портале поддержки.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Тикет аутентификации или данные пользователя на портале поддержки:
Функция ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки() Экспорт

	ВидОперации = НСтр("ru = 'Подключение к порталу интернет-поддержки'");
	ТекстЗаголовкаСообщения = НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:'");
	ТекстСообщенияДляПользователя = НСтр("ru = 'Ошибка подключения к порталу интернет-поддержки'");
	ПодсистемаЭлектронноеВзаимодействие = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие;

	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		
		ОписаниеОшибки =
			НСтр("ru = 'Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'");
		ТекстСообщенияДляЖурналаРегистрации = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
			ПодсистемаЭлектронноеВзаимодействие,
			ТекстСообщенияДляЖурналаРегистрации,
			ТекстСообщенияДляПользователя);
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	
	Если МодульИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = БилетНаСайтПоддержки(Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПустаяСтрока(Тикет) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Результат = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			Возврат Новый Структура("Логин, Пароль", Результат.Логин, Результат.Пароль);
		Иначе
			Возврат Новый Структура("Тикет", Тикет);
		КонецЕсли;
		
	Иначе

		ОписаниеОшибки =
			НСтр("ru = 'Не введены данные доступа к порталу интернет-поддержки.'");
		ТекстСообщенияДляЖурналаРегистрации = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
			ПодсистемаЭлектронноеВзаимодействие,
			ТекстСообщенияДляЖурналаРегистрации,
			ТекстСообщенияДляПользователя);
	
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ВладелецТикета - см. ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки.ВладелецТикета
// 
// Возвращаемое значение:
//  См. ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки
Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт

	Если Не ЗначениеЗаполнено(ВладелецТикета) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ВладелецТикета""'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначенияБЭД.ЭтоРежимСервисаОблачногоЭДО() Тогда
		
		// Работа в модели сервиса.
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		Результат = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			ВладелецТикета);
		
	Иначе
		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		
		Результат = СлужебнаяТикетАутентификации(
			"",
			"",
			ВладелецТикета,
			МодульИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//  ИмяСервиса - Строка - произвольное имя сервиса, для которого
//      выполняется аутентификация пользователя. Это же имя должно
//      использоваться при вызове операции checkTicket;
//      Не допускается незаполненное значение параметра.
//  НастройкиСоединения - Структура - см. НастройкиСоединенияССерверами;
//
// Возвращаемое значение:
//  Структура - результат получения тикета. Поля структуры:
//        * Тикет - Строка - полученный тикет аутентификации. Если при получении
//          тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//          значение поля - пустая строка.
//        * КодОшибки - Строка - строковый код возникшей ошибки, который
//          может быть обработан вызывающим функционалом:
//              - <Пустая строка> - получение тикета выполнено успешно;
//              - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//              - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                 получения тикета с некорректным логином и паролем;
//              - "ОшибкаПодключения" - ошибка при подключении к сервису;
//              - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//              - "НеизвестнаяОшибка" - при получении тикета возникла
//                 неизвестная (не обрабатываемая) ошибка;
//        * СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//          может быть отображено пользователю;
//        * ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//          может быть записано в журнал регистрации.
//
Функция СлужебнаяТикетАутентификации(
	Знач Логин,
	Знач Пароль,
	Знач ИмяСервиса,
	НастройкиСоединения)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Тикет"             , Неопределено);
	
	МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		ДанныеАутентификации = МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Логин  = ДанныеАутентификации.Логин;
			Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = МодульИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	URLСервиса = URLОперацииПолучитьТикет(
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыTicketGetJSON(Логин, Пароль, ИмяСервиса));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);

	РезультатОперации = МодульИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Попытка
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОперации.Содержимое);
			ОтветОбъект = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Результат.Тикет = ОтветОбъект.ticket;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат.КодОшибки = "ОшибкаСервиса";
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
					|Некорректный ответ сервиса.
					|Ошибка при обработке ответа сервиса:
					|%2
					|Код состояния: %3;
					|Тело ответа: %4'"),
				URLСервиса,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				РезультатОперации.КодСостояния,
				Лев(РезультатОперации.Содержимое, 5120));
			МодульИнтернетПоддержкаПользователей.ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации. Некорректный ответ сервиса.'");
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.
			|Повторите попытку позже.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 500 Тогда
		
		Результат.КодОшибки          = "ОшибкаСервиса";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Внутренняя ошибка сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		МодульИнтернетПоддержкаПользователей.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Ошибка аутентификации. Внутренняя ошибка сервиса.
				|Подробнее см. в журнале регистрации.'");
		
	ИначеЕсли РезультатОперации.КодСостояния = 0 Тогда
		
		Результат.КодОшибки         = "ОшибкаПодключения";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|%2'"),
			URLСервиса,
			РезультатОперации.ИнформацияОбОшибке);
		МодульИнтернетПоддержкаПользователей.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения к сервису.
			|Подробнее см. в журнале регистрации.'");
		
	Иначе
		
		Результат.КодОшибки = "НеизвестнаяОшибка";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Неизвестный код состояния ответа сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		МодульИнтернетПоддержкаПользователей.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка аутентификации в сервисе (%1).
					|Подробнее см. в журнале регистрации.'"),
				РезультатОперации.КодСостояния);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Параметры:
//  Домен - Число - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции получения тикета.
//
Функция URLОперацииПолучитьТикет(Домен)
	
	МодульИнтернетПоддержкаПользователейКлиентСервер = ОбщегоНазначения.ОбщийМодуль(
		"ИнтернетПоддержкаПользователейКлиентСервер");
	
	Возврат "https://"
		+ МодульИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(Домен)
		+ "/rest/public/ticket/get";
	
КонецФункции

// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки;
//  Пароль - Строка - пароль пользователя Интернет-поддержки.
//  ВладелецТикета - Строка - произвольное имя сервиса, для которого
//      выполняется аутентификация пользователя. Это же имя должно
//      использоваться при вызове операции checkTicket;
//      Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//  Строка - тело запроса
//
Функция ПараметрыTicketGetJSON(Логин, Пароль, ВладелецТикета)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("serviceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВладелецТикета);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

#КонецОбласти