#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПодписи

// Возвращаемое значение:
//  Структура:
// * ВидОперации - Строка
// * Подпись - Неопределено,ДвоичныеДанные
// * ИсходныеДанные - Неопределено,ДвоичныеДанные
// * МенеджерКриптографии - Неопределено,МенеджерКриптографии
// * ОповещениеОЗавершении - ОписаниеОповещения
// * РезультатПроверки - см. КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйКонтекстПроверкиПодписи() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ВидОперации", НСтр("ru = 'Проверка подписи'"));
	Контекст.Вставить("Подпись", Неопределено);
	Контекст.Вставить("ИсходныеДанные", Неопределено);
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("РезультатПроверки", КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи());
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Контекст
КонецФункции

// Параметры:
//  РезультатПолучения - см. НовыйРезультатИнициализацииСертификатов
//  Контекст - Структура:
//  * ВидОперации - Строка
//  * Подпись - ДвоичныеДанные
//  * ИсходныеДанные - ДвоичныеДанные
//  * МенеджерКриптографии - МенеджерКриптографии
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * РезультатПроверки - см. КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ПроверитьПодписьПослеПолученияСертификатовИзПодписиНаСервере(РезультатПолучения, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(РезультатПолучения.ОписаниеОшибки) Тогда
		ОбработатьОшибкуВыгрузкиСертификата(РезультатПолучения.ОписаниеОшибки, Ложь, Контекст);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПолучения.СертификатыКриптографии) Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеПолученияМенеджераКриптографии",
			КриптографияБЭДСлужебныйКлиент, Контекст, "ОбработатьОшибкуПолученияМенеджераКриптографии",
			КриптографияБЭДСлужебныйКлиент);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПроверкаПодписи", Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеПолученияСертификатовИзПодписи",
		КриптографияБЭДСлужебныйКлиент, Контекст);
		
	ВыполнитьОбработкуОповещения(Оповещение, РезультатПолучения.СертификатыКриптографии);
	
КонецПроцедуры

Процедура ОбработатьОшибкуПолученияМенеджераКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ШаблонСообщения = НСтр("ru = 'Получение менеджера криптографии: %1'");
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
		ТекстСообщения = ИнформацияОбОшибке;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;

	Контекст.РезультатПроверки.ОписаниеОшибки = ТекстСообщения;
	Контекст.РезультатПроверки.ОшибкаИнициализацииПроверки = Истина;

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьПодписьПослеПолученияМенеджераКриптографии(МенеджерКриптографии, Контекст) Экспорт

	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ОбработатьОшибкуПолученияМенеджераКриптографии(МенеджерКриптографии, Ложь, Контекст);
		Возврат;
	КонецЕсли;

	Контекст.МенеджерКриптографии = МенеджерКриптографии;

	ОповещениеПолучениеСертификатов = Новый ОписаниеОповещения("ПроверитьПодписьПослеПолученияСертификатовИзПодписи",
		ЭтотОбъект, Контекст, "ОбработатьОшибкуПолученияСертификатовИзПодписи", ЭтотОбъект);

	МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(ОповещениеПолучениеСертификатов, Контекст.Подпись);

КонецПроцедуры

// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  СтандартнаяОбработка - Булево
//  Контекст - см. НовыйКонтекстПроверкиПодписи
Процедура ОбработатьОшибкуПолученияСертификатовИзПодписи(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Контекст.РезультатПроверки.ОписаниеОшибки =  ТекстСообщения;
	Контекст.РезультатПроверки.ОшибкаИнициализацииПроверки = Истина;
	
	КонтекстДиагностики = Контекст.КонтекстДиагностики;
	Если ЗначениеЗаполнено(КонтекстДиагностики) Тогда
		ПодробноеПредставление = НСтр("ru = 'Не удалось получить сертификаты из подписи.
			|При выполнении операции возникла ошибка криптопровайдера:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ВидОшибкиКриптография = КриптографияБЭДКлиентСервер.ВидОшибкиКриптография();
		ВидОшибкиКриптография.ВыполнятьОбработчикАвтоматически = Ложь;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(Контекст.ВидОперации,
			ВидОшибкиКриптография, ТекстСообщения, ПодробноеПредставление);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);
	
КонецПроцедуры

Асинх Процедура ПроверитьПодписьПослеПолученияСертификатовИзПодписи(СертификатыПодписи, Контекст) Экспорт

	СертификатКриптографии = КриптографияБЭДКлиентСервер.СертификатПодписавшейСтороны(СертификатыПодписи);
	Если СертификатКриптографии = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьЗавершение", ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Контекст.ИсходныеДанные, Контекст.Подпись, , , Ложь);
		Возврат;
	КонецЕсли;

	Контекст.Вставить("СертификатКриптографии", СертификатКриптографии);
	Контекст.РезультатПроверки.СвойстваПодписи.Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
	Контекст.РезультатПроверки.СвойстваПодписи.КомуВыданСертификат = ЭлектроннаяПодписьКлиент.ПредставлениеСубъекта(
		СертификатКриптографии);

	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеВыгрузкиСертификата", ЭтотОбъект, Контекст,
		"ОбработатьОшибкуВыгрузкиСертификата", ЭтотОбъект);

	СертификатКриптографии.НачатьВыгрузку(Оповещение);

КонецПроцедуры

Процедура ОбработатьОшибкуВыгрузкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ШаблонСообщения = НСтр("ru = 'Выгрузка сертификата: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОбОшибке);

	Контекст.РезультатПроверки.ОписаниеОшибки =  ТекстСообщения;
	Контекст.РезультатПроверки.ОшибкаИнициализацииПроверки = Истина;

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьПодписьПослеВыгрузкиСертификата(ДанныеСертификата, Контекст) Экспорт

	Контекст.РезультатПроверки.СвойстваПодписи.Сертификат = ДанныеСертификата;

	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьЗавершение", ЭтотОбъект, Контекст);
	ПараметрыПроверки = ЭлектроннаяПодписьКлиент.ПараметрыПроверкиПодписи();
	ПараметрыПроверки.ПроверятьСертификат = ИнтеграцияБСПБЭДСлужебныйКлиентСервер.РежимыПроверкиСертификата().НеПроверятьСертификат;
	ПараметрыПроверки.РезультатВВидеСтруктуры = Истина;
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, Контекст.ИсходныеДанные, Контекст.Подпись, , , ПараметрыПроверки);

КонецПроцедуры

// Продолжение процедуры ПроверитьПодписьПослеВыгрузкиСертификата.
// 
// Параметры:
//  Результат - См. ЭлектроннаяПодписьКлиентСервер.РезультатПроверкиПодписи
//  Контекст - Структура:
//   * ВидОперации - Строка
//   * Оповещение - ОписаниеОповещения
//   * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//   * ПаролиСертификатов - См. КриптографияБЭДКлиент.Подписать.ПаролиСертификатов
Процедура ПроверитьПодписьЗавершение(Результат, Контекст) Экспорт

	Если Результат.ПодписьМатематическиВерна Тогда
		РезультатПроверкиСредствамиКриптографии = Истина;
	Иначе
		РезультатПроверкиСредствамиКриптографии = Результат.ОшибкаМатематическойПроверкиПодписи;
	КонецЕсли;
	КонтекстПроверки = КриптографияБЭДКлиентСервер.НовыйКонтекстПроверкиКвалифицированногоСертификата(Результат.Сертификат, РезультатПроверкиСредствамиКриптографии, Контекст.Подпись);
	РезультатКЭП = КриптографияБЭДКлиентСервер.ПроверитьКвалифицировнныйСертификат(Контекст.СертификатКриптографии, КонтекстПроверки);
	
	Если Не РезультатКЭП.Успех Тогда
		Ошибка = КриптографияБЭДКлиентСервер.СформироватьОшибкуПоПротоколуПроверкиКвалификации(Контекст.СертификатКриптографии, РезультатКЭП.Протокол);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Контекст.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Ложь);
		Контекст.РезультатПроверки.ОписаниеОшибки = Ошибка.ПодробноеПредставлениеОшибки;
		Контекст.РезультатПроверки.СвойстваПодписи.Комментарий = Ошибка.ПодробноеПредставлениеОшибки;
	КонецЕсли;

	Контекст.РезультатПроверки.СвойстваПодписи.ДатаПроверкиПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
	Контекст.РезультатПроверки.СвойстваПодписи.ПодписьВерна = РезультатКЭП.Успех;
	Контекст.РезультатПроверки.СвойстваПодписи.Вставить("ПропуститьПриПродлении", Истина);
	Поток = Новый ПотокВПамяти;
	Поток.НачатьПолучениеРазмера(Новый ОписаниеОповещения("ПроверитьПодписьЗавершениеПродолжение", ЭтотОбъект,
		Контекст));

КонецПроцедуры

Процедура ПроверитьПодписьЗавершениеПродолжение(Результат, Контекст) Экспорт

	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОЗавершении, Контекст.РезультатПроверки);

КонецПроцедуры

#КонецОбласти

Процедура ПослеВыполненияКриптографическойОперации(Результат, Контекст) Экспорт

	Если Контекст.ПаролиСертификатов = Неопределено Тогда
		Контекст.ПаролиСертификатов = КриптографияБЭДКлиент.НовыеПаролиСертификатов();
	КонецЕсли;

	Если Результат.Свойство("КонтекстОперации") И Результат.Свойство("ВыбранныйСертификат") Тогда
		Контекст.ПаролиСертификатов.Вставить(Результат.ВыбранныйСертификат.Ссылка, Результат.КонтекстОперации);
	КонецЕсли;

	Результат.Вставить("ПаролиСертификатов", Контекст.ПаролиСертификатов);
	ОбработатьОшибкиКриптографическойОперации(Результат, Контекст.ВидОперации, Контекст.КонтекстДиагностики);

	Если Контекст.Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	КонецЕсли;

КонецПроцедуры

// Служебное описание оповещения, вызываемое после проверки сертификата методом АПИ БСП и до передачи результата в
// основной обработчик (параметр СледующийОбработчик) результата проверки сертификата.
// 
// Параметры:
//  Сертификат - См. ПроверитьСертификат.Сертификат
//  СледующийОбработчик - См. ПроверитьСертификат.ОбработчикРезультатаПроверки
//  КонтекстДиагностики - См. ПроверитьСертификат.КонтекстДиагностики
//  Подпись - ДвоичныеДанные - если проверка выполняется в контексте проверки подписи
// 
// Возвращаемое значение:
//  ОписаниеОповещения
Функция ОбработчикРезультатаПроверкиСертификатаСредствамиБСП(Сертификат, СледующийОбработчик, КонтекстДиагностики, Подпись = Неопределено)
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Сертификат", Сертификат);
	ПараметрыОповещения.Вставить("СледующийОбработчик", СледующийОбработчик);
	ПараметрыОповещения.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	ПараметрыОповещения.Вставить("Подпись", Подпись);
	Возврат Новый ОписаниеОповещения("ОбработатьРезультатПроверкиСертификатаСредствамиБСП", ЭтотОбъект, ПараметрыОповещения);
КонецФункции

// Параметры:
//  РезультатПроверкиСертификата - Булево, Неопределено -
//  ПараметрыОповещения - Структура:
//   * Сертификат- СертификатКриптографии
//   * Подпись - ДвоичныеДанные, Неопределено -
//   * СледующийОбработчик - См. ОбработчикРезультатаПроверкиСертификатаСредствамиБСП.СледующийОбработчик
//   * КонтекстДиагностики - См. ОбработчикРезультатаПроверкиСертификатаСредствамиБСП.КонтекстДиагностики
Асинх Процедура ОбработатьРезультатПроверкиСертификатаСредствамиБСП(РезультатПроверкиСертификата, ПараметрыОповещения) Экспорт
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Операция", НСтр("ru='Проверка сертификата'"));
	ПараметрыПроверки.Вставить("КонтекстДиагностики", ПараметрыОповещения.КонтекстДиагностики);

	ДвоичныеДанныеСертификата = Ждать ПараметрыОповещения.Сертификат.ВыгрузитьАсинх();
	КонтекстПроверки = КриптографияБЭДКлиентСервер.НовыйКонтекстПроверкиКвалифицированногоСертификата(ДвоичныеДанныеСертификата, РезультатПроверкиСертификата, ПараметрыОповещения.Подпись);
	РезультатПроверкиКЭП = КриптографияБЭДКлиентСервер.ПроверитьКвалифицировнныйСертификат(ПараметрыОповещения.Сертификат, КонтекстПроверки);
	Если ТипЗнч(ПараметрыОповещения.СледующийОбработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.СледующийОбработчик, РезультатПроверкиКЭП);
	КонецЕсли;
КонецПроцедуры

// См. КриптографияБЭДКлиент.ПроверитьСертифкат
Процедура ПроверитьСертификат(ОбработчикРезультатаПроверки, Сертификат, КонтекстДиагностики, МенеджерКриптографии, Подпись) Экспорт
	ПараметрыПроверки = ЭлектроннаяПодписьКлиент.ПараметрыПроверкиСертификата();
	ПараметрыПроверки.ВыполнятьПроверкуУдостоверяющегоЦентра = КриптографияБЭДСлужебныйКлиентСервер.РежимыПроверкиСертификата().НеПроверятьСертификат;
	ПромежуточныйОбработчикРезультата = ОбработчикРезультатаПроверкиСертификатаСредствамиБСП(Сертификат,
		ОбработчикРезультатаПроверки, КонтекстДиагностики, Подпись);
	ЭлектроннаяПодписьКлиент.ПроверитьСертификат(ПромежуточныйОбработчикРезультата, Сертификат, МенеджерКриптографии,,
		ПараметрыПроверки);
КонецПроцедуры

// Обработчик вызываемый после выбора сертификата при выполнении действий Подписать и Зашифровать
// модуля КриптографияБЭДКлиент.
// 
// Параметры:
//  СледующийОбработчик - Неопределено, ОписаниеОповещения -
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  ОписаниеОповещения - Обработчик выбора сертификата
Функция ОбработчикВыбораСертификата(СледующийОбработчик, КонтекстДиагностики) Экспорт
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("СледующийОбработчик", СледующийОбработчик);
	ПараметрыОповещения.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	Возврат Новый ОписаниеОповещения("ОбработатьВыборСертификата", КриптографияБЭДСлужебныйКлиент, ПараметрыОповещения);
КонецФункции

Асинх Функция СертификатИзДвоичныхДанных(ДвоичныеДанные)
	НеинициализированныйСертификат = Новый СертификатКриптографии;
	СертификатКриптографии = Ждать НеинициализированныйСертификат.ИнициализироватьАсинх(ДвоичныеДанные);
	Возврат СертификатКриптографии;
КонецФункции

// Параметры:
//  РезультатВыбораСертификата - Структура:
//  * ОписаниеДанных - См. ЭлектроннаяПодписьКлиент.Подписать.ОписаниеДанных
//  * Оповещение - ОписаниеОповещения - для продолжения вызвать с пустой структурой в параметре Результат,
//                                    - для прерывания вызвать со структурой, содержащей поле ОписаниеОшибки типа Строка.
//  ПараметрыОповещения - Структура:
//   * СледующийОбработчик - См. ОбработчикВыбораСертификата.СледующийОбработчик
//   * КонтекстДиагностики - См. ОбработчикВыбораСертификата.КонтекстДиагностики
Асинх Процедура ОбработатьВыборСертификата(РезультатВыбораСертификата, ПараметрыОповещения) Экспорт
	
	СертификатКриптографии = Ждать СертификатИзДвоичныхДанных(ПолучитьИзВременногоХранилища(РезультатВыбораСертификата.ОписаниеДанных.ВыбранныйСертификат.Данные));
	Структура = Новый Структура;
	Структура.Вставить("РезультатВыбораСертификата", РезультатВыбораСертификата);
	Структура.Вставить("СледующийОбработчик", ПараметрыОповещения.СледующийОбработчик);
	Структура.Вставить("КонтекстДиагностики", ПараметрыОповещения.КонтекстДиагностики);
	Структура.Вставить("СертификатКриптографии", СертификатКриптографии);
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиСертификата", ЭтотОбъект, Структура);
	КриптографияБЭДКлиент.ПроверитьСертифкат(Оповещение, СертификатКриптографии, ПараметрыОповещения.КонтекстДиагностики);
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиСертификата(РезультатПроверки, ПараметрыОповещения) Экспорт
	Результат = Новый Структура;
	Если Не РезультатПроверки.Успех Тогда
		Ошибка = КриптографияБЭДКлиентСервер.СформироватьОшибкуПоПротоколуПроверкиКвалификации(ПараметрыОповещения.СертификатКриптографии, РезультатПроверки.Протокол);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(ПараметрыОповещения.КонтекстДиагностики, Ошибка, ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Истина);
		ПараметрыОповещения.РезультатВыбораСертификата.ОписаниеДанных.Вставить("ПрекратитьВыполнение");
		МеченныйТекстОшибки = ИнтеграцияБСПБЭДКлиентСервер.СформироватьМеченныйТекстОшибки(Ошибка);
		Результат.Вставить("ОписаниеОшибки", МеченныйТекстОшибки);
	КонецЕсли;
	
	Если Не Результат.Свойство("ОписаниеОшибки") И ТипЗнч(ПараметрыОповещения.СледующийОбработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОповещения.СледующийОбработчик, ПараметрыОповещения.РезультатВыбораСертификата);
		Возврат;
	КонецЕсли; 
	
	ВыполнитьОбработкуОповещения(ПараметрыОповещения.РезультатВыбораСертификата.Оповещение, Результат);
КонецПроцедуры

// Обрабатывает ошибки криптографической операции.
// 
// Параметры:
//  Результат - Структура - см. описание результата, возвращаемого при выполнении оповещения, переданного в параметре
//              ОбработкаРезультата метода ЭлектроннаяПодписьКлиент.Подписать
//  ВидОперации - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ОбработатьОшибкиКриптографическойОперации(Результат, ВидОперации, КонтекстДиагностики) Экспорт
	// Для обработки случая, когда криптографическая операция выполняется повторно без ошибки.
	Если КонтекстДиагностики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Успех И Не Результат.Отказ Тогда
		Если Результат.Свойство("ОписаниеОшибки") И Результат.ОписаниеОшибки <> "" Тогда
			ТекстОшибки = Результат.ОписаниеОшибки;
		Иначе
			ТекстОшибки = НСтр("ru = 'Произошла криптографическая ошибка'");
		КонецЕсли;
		
		Если ИнтеграцияБСПБЭДКлиентСервер.ВТекстеОшибкиБСПЕстьМеткаОшибкиБЭД(ТекстОшибки, КонтекстДиагностики.Диагностика.Ошибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ТребуетсяРегистрацияОшибки(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;

		ПодробноеПредставлениеОшибки = ТекстОшибки;
		КраткоеПредставлениеОшибки = ТекстОшибки;

		КриптографияБЭДСобытияКлиент.ПриОшибкеВыполненияКриптографическойОперации(КонтекстДиагностики,
			ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки);

		ДополнительныеПараметрыОшибки = Новый Структура;
		Если Результат.Свойство("ВыбранныйСертификат") Тогда
			ДополнительныеПараметрыОшибки.Вставить("Сертификат", Результат.ВыбранныйСертификат.Ссылка);
		КонецЕсли;
		Если Результат.Свойство("ТипПодписи") Тогда
			ДополнительныеПараметрыОшибки.Вставить("ДополнительныеДанные", Новый Структура("ТипПодписи", Результат.ТипПодписи));
		КонецЕсли;
		ДобавитьОшибкуКриптографии(КонтекстДиагностики, ВидОперации, ПодробноеПредставлениеОшибки,
			КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет ошибку криптографии в контекст диагностики.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ПодробноеПредставлениеОшибки - Строка
//  КраткоеПредставлениеОшибки - Строка
//  ДополнительныеПараметрыОшибки - Структура
Процедура ДобавитьОшибкуКриптографии(КонтекстДиагностики, ВидОперации, ПодробноеПредставлениеОшибки,
	КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки = Неопределено)

	ВидОшибкиКриптография = КриптографияБЭДКлиентСервер.ВидОшибкиКриптография();
	Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации, ВидОшибкиКриптография,
		ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки, ДополнительныеПараметрыОшибки);
	ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().Криптография, Истина);

КонецПроцедуры

// Получает отпечатки сертификатов пользователя ОС на компьютере.
// Только для работы через средства платформы (МенеджерКриптографии).
//
// Параметры:
//  Оповещение - ОписаниеОповещения - описание процедуры, которая будет вызвана после получения сертификатов
//               со следующими параметрами:
//                 * Результат - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//                 * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании
//                                             объекта ОписаниеОповещения.    
//  Личные - Булево - если Ложь, то к личным сертификатам добавляются сертификаты получателей.
//  ПоказатьОшибку - Булево - показать ошибку создания менеджера криптографии.
//
Процедура ПолучитьОтпечаткиСертификатов(Оповещение, Личные, ПоказатьОшибку = Ложь) Экспорт

	ПараметрыЗавершенияУстановкиРасширения = Новый Структура;
	ПараметрыЗавершенияУстановкиРасширения.Вставить("Оповещение", Оповещение);
	ПараметрыЗавершенияУстановкиРасширения.Вставить("Личные", Личные);
	ПараметрыЗавершенияУстановкиРасширения.Вставить("ПоказатьОшибку", ПоказатьОшибку);
		
	ОповещениеУстановкиРасширения = Новый ОписаниеОповещения("ПолучитьОтпечаткиСертификатовПослеУстановкиРасширения", 
		КриптографияБЭДСлужебныйКлиент, ПараметрыЗавершенияУстановкиРасширения);
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, ОповещениеУстановкиРасширения);
КонецПроцедуры

// Получить отпечатки сертификатов после установки расширения.
// 
// Параметры:
//  РасширениеУстановлено - Булево
//  ПараметрыЗавершенияУстановкиРасширения - Структура - с параметрами поучения отпечатков:
//                 * Оповещение - ОписаниеОповещения
//                 * Личные - Булево - если Ложь, то к личным сертификатам добавляются сертификаты получателей.
//                 * ПоказатьОшибку - Булево - показать ошибку создания менеджера криптографии.
// 
Процедура ПолучитьОтпечаткиСертификатовПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыЗавершенияУстановкиРасширения) Экспорт
	Контекст = Новый Структура("Оповещение", ПараметрыЗавершенияУстановкиРасширения.Оповещение);
	СлужебноеОповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект, Контекст);
	
	Если РасширениеУстановлено <> Истина Тогда
		ТекстОшибки = НСтр("ru = 'Для выполнения обмена электронными документами требуется расширение работы с криптографией.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		
		ВыполнитьОбработкуОповещения(СлужебноеОповещение, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(СлужебноеОповещение,
		ПараметрыЗавершенияУстановкиРасширения.Личные, ПараметрыЗавершенияУстановкиРасширения.ПоказатьОшибку);

КонецПроцедуры

Процедура ПослеПолученияОтпечатков(Отпечатки, Контекст) Экспорт

	РезультатПолученияОтпечатков = КриптографияБЭДКлиентСервер.НовыйРезультатПолученияОтпечатков();

	Если ТипЗнч(Отпечатки) = Тип("Строка") Тогда
		РезультатПолученияОтпечатков.Ошибка = Истина;
		РезультатПолученияОтпечатков.ТекстОшибки = Отпечатки;
	Иначе
		РезультатПолученияОтпечатков.Доступность = Истина;
		Для Каждого КлючЗначение Из Отпечатки Цикл
			РезультатПолученияОтпечатков.Отпечатки.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;

	РезультатыПолучения = КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков();
	РезультатыПолучения.Клиент = РезультатПолученияОтпечатков;
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатыПолучения);

КонецПроцедуры

// См. КриптографияБЭДКлиент.НайтиСоздатьСертификатКриптографии
Процедура НайтиСоздатьСертификатКриптографии(Отпечаток, Организация, Оповещение) Экспорт

	Контекст = Новый Структура;
	Контекст.Вставить("Отпечаток", Отпечаток);
	Контекст.Вставить("Организация", Организация);
	Контекст.Вставить("Оповещение", Оповещение);

	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПолучитьМенеджерКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Истина);

КонецПроцедуры

Процедура ПослеПолученияОтпечатковПолучитьМенеджерКриптографии(Отпечатки, Контекст) Экспорт

	Если ТипЗнч(Отпечатки) <> Тип("Соответствие") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;

	ОтпечатокНайден = Ложь;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		Если Контекст.Отпечаток = КлючЗначение.Ключ Тогда
			ОтпечатокНайден = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии",
				ЭтотОбъект, Контекст);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, КлючЗначение.Ключ, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ОтпечатокНайден Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии(Сертификат, Контекст) Экспорт

	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		Возврат;
	КонецЕсли;

	ВыгрузитьСертификатЗавершение = Новый ОписаниеОповещения("СертификатВыгрузитьПродолжить", ЭтотОбъект, Контекст);

	Сертификат.НачатьВыгрузку(ВыгрузитьСертификатЗавершение);

КонецПроцедуры

Процедура СертификатВыгрузитьПродолжить(ДвоичныеДанныеСертификата, Контекст) Экспорт

	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;

	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеПолученияМенеджераКриптографии", ЭтотОбъект,
		Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПолучениеСертификатов", Ложь);

КонецПроцедуры

Процедура ВыполнитьДействияПослеПолученияМенеджераКриптографии(МенеджерКриптографии, Контекст = Неопределено) Экспорт

	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Неопределено);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНайтиСертификатКриптографииПользователя", ЭтотОбъект,
		Контекст);
	МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОписаниеОповещения);

КонецПроцедуры

Процедура СоздатьНайтиСертификатКриптографииПользователя(ИнформацияМодуля, Контекст = Неопределено) Экспорт

	Сертификат= ИнтеграцияБСПБЭДВызовСервера.НайтиСоздатьСертификатЭП(
		Контекст.ДвоичныеДанныеСертификата, Контекст.Организация);

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Сертификат);

КонецПроцедуры

Процедура ПроверитьНаличиеУстановленныхПрограммПослеПоискаУстановленныхПрограмм(РезультатПроверки, Контекст) Экспорт

	ЕстьПрограммаКриптографии = Ложь;
	Для Каждого ОписаниеПрограммы Из РезультатПроверки Цикл
		Если ОписаниеПрограммы.Установлена Тогда
			ЕстьПрограммаКриптографии = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, ЕстьПрограммаКриптографии);

КонецПроцедуры

Процедура ОбработкаРезультатаТестаСертификата(Результат, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		Возврат;
	КонецЕсли;

	ВсеПроверки = Новый Массив;
	ВсеПроверки.Добавить(ДополнительныеПараметры.Результат.ПроверкиНаСервере);
	ВсеПроверки.Добавить(ДополнительныеПараметры.Результат.ПроверкиНаКлиенте);

	Для Каждого Проверка Из ВсеПроверки Цикл

		Если ТипЗнч(Проверка) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;

		ТекущийРезультат = Ложь;

		Для Каждого КлючЗначение Из Проверка Цикл
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Булево") Тогда
				ТекущийРезультат = Значение;
				Если Не ТекущийРезультат Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ТекущийРезультат Тогда
			Результат = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаЗавершенияТестаСертификата(Результат, Контекст) Экспорт

	ОбработкаЗавершения = Контекст.ОбработкаЗавершения;
	Контекст.ДополнительныеПараметры.Очистить();
	Контекст.Очистить();

	Если ТипЗнч(ОбработкаЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДоступныеСертификатыПослеПолученияОтпечатков(Результат, Контекст) Экспорт

	ОшибкаПолученияОтпечатков = "";
	Сертификаты = КриптографияБЭДСлужебныйВызовСервера.ДоступныеСертификаты(Результат, ОшибкаПолученияОтпечатков);

	Если ЗначениеЗаполнено(ОшибкаПолученияОтпечатков) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкаПолученияОтпечатков);
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Сертификаты);

КонецПроцедуры

Процедура ОпределитьПрограммуСертификатаПослеИнициализацииСертификата(СертификатКриптографии, Контекст) Экспорт

	НачатьОпределениеПрограммыСертификатаКриптографии(
		СертификатКриптографии, Контекст.Оповещение, Контекст.Пароль);

КонецПроцедуры

Процедура НачатьОпределениеПрограммыСертификатаКриптографии(Знач Сертификат, Знач ОбработкаЗавершения,
	Знач Пароль = Неопределено)

	ПроцессВыполнения = НовыйПроцессОпределенияПрограммыСертификатаКриптографии(Сертификат, ОбработкаЗавершения, Пароль);

	ВыполнитьОпределениеПрограммыСертификатаКриптографии(Неопределено, ПроцессВыполнения);

КонецПроцедуры

// Возвращаемое значение:
//  Булево
Функция ИспользоватьЭлектроннуюПодписьВМоделиСервиса()
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьВМоделиСервисаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиент");
	ИспользоватьЭлектроннуюПодписьВМоделиСервиса = МодульЭлектроннаяПодписьВМоделиСервисаКлиент.ИспользованиеВозможно()
		И КриптографияБЭДКлиент.ИспользованиеСертификатовОблачногоСервисаВозможно();
	
	Возврат ИспользоватьЭлектроннуюПодписьВМоделиСервиса;
	
КонецФункции

// Признак, определяющий необходимость регистрации ошибки в контексте диагностики
// 
// Параметры:
//  ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяРегистрацияОшибки(ТекстОшибки)
	
	ИсключаемыйКодОшибки = КриптографияБЭДКлиент.КодОшибкиВыбораСертификатаТребующегоМЧД();
	Если СтрНайти(ТекстОшибки, ИсключаемыйКодОшибки) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

#Область ОпределениеПрограммыСертификатаКриптографии

Процедура ЗавершитьОпределениеПрограммыСертификатаКриптографии(Знач ПроцессВыполнения)

	ВыполнитьОбработкуОповещения(ПроцессВыполнения.ОбработкаЗавершения, ПроцессВыполнения.Программа);

КонецПроцедуры

Функция НовыйПроцессОпределенияПрограммыСертификатаКриптографии(Знач Сертификат, Знач ОбработкаЗавершения, Знач Пароль)

	Процесс = Новый Структура;
	Процесс.Вставить("Сертификат", Сертификат);
	Процесс.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	Процесс.Вставить("ТекущийЭтап");

	Процесс.Вставить("УстановленныеПрограммы");
	Процесс.Вставить("НаборПрограмм");

	Процесс.Вставить("СвойстваПароля");
	Процесс.Вставить("Пароль", Пароль);

	Процесс.Вставить("ПрограммаДляПроверки");
	Процесс.Вставить("РезультатПроверкиПрограммы", Ложь);
	Процесс.Вставить("ПроверенныеПрограммы", Новый Массив);
	Процесс.Вставить("Программа");

	Возврат Процесс;

КонецФункции

Процедура ВыполнитьОпределениеПрограммыСертификатаКриптографии(Знач РезультатТекущегоЭтапа, Знач ПроцессВыполнения) Экспорт

	Если ЗначениеЗаполнено(ПроцессВыполнения.ТекущийЭтап) Тогда
		ПроцессВыполнения.Вставить(ПроцессВыполнения.ТекущийЭтап, РезультатТекущегоЭтапа);
	КонецЕсли;

	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_НайтиУстановленныеПрограммы(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_ВводПароля(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	Выполнено = ВыполнитьОпределениеПрограммыСертификатаКриптографии_ПроверитьПрограммы(ПроцессВыполнения);
	Если Не Выполнено Тогда
		Возврат;
	КонецЕсли;

	ЗавершитьОпределениеПрограммыСертификатаКриптографии(ПроцессВыполнения);

КонецПроцедуры

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_НайтиУстановленныеПрограммы(ПроцессВыполнения)

	Выполнено = Ложь;

	УстановленныеПрограммы = ПроцессВыполнения.УстановленныеПрограммы;
	НаборПрограмм = ПроцессВыполнения.НаборПрограмм;

	Если ЗначениеЗаполнено(УстановленныеПрограммы) Тогда
		Если Не ЗначениеЗаполнено(НаборПрограмм) Тогда
			ПроцессВыполнения.НаборПрограмм = ИнтеграцияБСПБЭДВызовСервера.НайтиПрограммыЭлектроннойПодписиИШифрования(
				УстановленныеПрограммы);
		КонецЕсли;
		Выполнено = Истина;
	ИначеЕсли ТипЗнч(УстановленныеПрограммы) = Тип("Массив") Тогда // ничего не нашли (пустой массив)
		ЗавершитьОпределениеПрограммыСертификатаКриптографии(ПроцессВыполнения);
	Иначе
		ПроцессВыполнения.Вставить("ТекущийЭтап", "УстановленныеПрограммы");
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии",
			ЭтотОбъект, ПроцессВыполнения);
		ОписаниеПрограмм = КриптографияБЭДСлужебныйВызовСервера.ОписанияПрограммЭлектроннойПодписиИШифрования();
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(ОбработкаПродолжения, ОписаниеПрограмм, Ложь);
	КонецЕсли;

	Возврат Выполнено;

КонецФункции

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_ВводПароля(ПроцессВыполнения)

	Выполнено = Ложь;

	СвойстваПароля = ПроцессВыполнения.СвойстваПароля;
	Если ТипЗнч(СвойстваПароля) = Тип("Структура") Тогда
		ПроцессВыполнения.Пароль = СвойстваПароля.Пароль;
	КонецЕсли;

	Если ПроцессВыполнения.Пароль = Неопределено Тогда
		ПроцессВыполнения.Вставить("ТекущийЭтап", "СвойстваПароля");
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии",
			ЭтотОбъект, ПроцессВыполнения);
		ПараметрыВвода = Новый Структура;
		ПараметрыВвода.Вставить("Заголовок", НСтр("ru = 'Проверка сертификата криптографии'"));
		ПараметрыВвода.Вставить("Подсказка", НСтр("ru = 'Введите пароль закрытого ключа сертификата:'"));
		ОбщегоНазначенияБЭДКлиент.ПоказатьВводПароля(ПараметрыВвода, ОбработкаПродолжения);
	Иначе
		Выполнено = Истина;
	КонецЕсли;

	Возврат Выполнено;

КонецФункции

Функция ВыполнитьОпределениеПрограммыСертификатаКриптографии_ПроверитьПрограммы(ПроцессВыполнения)

	ПрограммаДляПроверки = ПроцессВыполнения.ПрограммаДляПроверки;
	РезультатПроверки = ПроцессВыполнения.РезультатПроверкиПрограммы;

	Если ЗначениеЗаполнено(ПрограммаДляПроверки) Тогда
		ПроцессВыполнения.ПроверенныеПрограммы.Добавить(ПрограммаДляПроверки);
		Если РезультатПроверки Тогда
			ПроцессВыполнения.Программа = ПрограммаДляПроверки;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	НаборПрограмм = ПроцессВыполнения.НаборПрограмм;

	Для Каждого Программа Из НаборПрограмм Цикл
		Если ПроцессВыполнения.ПроверенныеПрограммы.Найти(Программа) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПроцессВыполнения.Вставить("ТекущийЭтап", "РезультатПроверкиПрограммы");
		ПроцессВыполнения.Вставить("ПрограммаДляПроверки", Программа);
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыполнитьОпределениеПрограммыСертификатаКриптографии",
			ЭтотОбъект, ПроцессВыполнения);
		НачатьПроверкуСертификатаКриптографииПрограммой(
			ПроцессВыполнения.Сертификат, ПроцессВыполнения.ПрограммаДляПроверки, ПроцессВыполнения.Пароль,
			ОбработкаПродолжения);
		Возврат Ложь;
	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура НачатьПроверкуСертификатаКриптографииПрограммой(Знач Сертификат, Знач Программа, Знач Пароль,
	Знач ОбработкаЗавершения)

	Контекст = Новый Структура;
	Контекст.Вставить("Сертификат", Сертификат);
	Контекст.Вставить("Программа", Программа);
	Контекст.Вставить("Пароль", Пароль);
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);

	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_ВыгрузкаСертификата",
		ЭтотОбъект, Контекст);
	Сертификат.НачатьВыгрузку(ОбработкаПродолжения);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ВыгрузкаСертификата(Знач ДвоичныеДанныеСертификата,
	Знач Контекст) Экспорт

	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);

	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_СозданиеМенеджераКриптографии",
		ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОбработкаПродолжения, "Подписание", Ложь, Контекст.Программа);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_СозданиеМенеджераКриптографии(Знач Менеджер, Знач Контекст) Экспорт

	Если ТипЗнч(Менеджер) <> Тип("МенеджерКриптографии") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);
		Возврат;
	КонецЕсли;

	Менеджер.ПарольДоступаКЗакрытомуКлючу = Контекст.Пароль;

	ОбработкаПродолжения = Новый ОписаниеОповещения("НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписания",
		ЭтотОбъект, Контекст, "НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписанияОшибка", ЭтотОбъект);

	Менеджер.НачатьПодписывание(ОбработкаПродолжения, Контекст.ДвоичныеДанныеСертификата, Контекст.Сертификат);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписания(Знач ДанныеПодписи, Знач Контекст) Экспорт

	Подписано = Истина;

	Попытка
		Подписано = ЗначениеЗаполнено(ДанныеПодписи);
	Исключение
		Подписано = Ложь;
	КонецПопытки;

	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Подписано);

КонецПроцедуры

Процедура НачатьПроверкуСертификатаКриптографииПрограммой_ПроверкаПодписанияОшибка(ИнформацияОбОшибке,
	СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);

КонецПроцедуры

#КонецОбласти

#Область УстановкаПрограммКриптографии

#Область УстановитьCryptoPRO

Процедура УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(Результат, ВходящийКонтекст) Экспорт

	ОповещениеПослеСозданияКаталога = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеСозданияВременногоКаталога",
		ЭтотОбъект, ВходящийКонтекст);

	ВходящийКонтекст.Вставить("ПослеСозданияВременногоКаталога", ОповещениеПослеСозданияКаталога);

	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		ВходящийКонтекст.Вставить("РегистрационныеДанные", Результат);
		Оповещение = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеПолученияДистрибутива", ЭтотОбъект,
			ВходящийКонтекст);

		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ВходящийКонтекст.Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
			"УстановитьCryptoPRO", "Картинка", БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация);

		ДлительнаяОперация = КриптографияБЭДСлужебныйВызовСервера.ПолучитьДистрибутивCryptoProCSP(
			ВходящийКонтекст.РегистрационныеДанные);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Пользователь прервал операцию'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция НовыеПараметрыРегистрацииПрограммыКриптографии() Экспорт

	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("КонтактноеЛицо", "");
	ПараметрыРегистрации.Вставить("ЭлектроннаяПочта", "");
	ПараметрыРегистрации.Вставить("СерийныйНомер", "");
	ПараметрыРегистрации.Вставить("Продукт", "");
	ПараметрыРегистрации.Вставить("ВыполнятьКонтрольЦелостности", Ложь);
	ПараметрыРегистрации.Вставить("ИмяПрограммы", "");

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура УстановитьКриптопровайдерПослеПолученияДистрибутива(ДлительнаяОперация, ВходящийКонтекст) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы, "УстановитьVipNet",
		"Картинка", Новый Картинка);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ВходящийКонтекст.Форма.Элементы,
		"УстановитьCryptoPRO", "Картинка", Новый Картинка);

	Если ДлительнаяОперация = Неопределено Тогда
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);

		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Вызов API сервиса выдачи дистрибутивов'"));
		МассивСтрок.Добавить(ВходящийКонтекст.ИмяПрограммы);
		МассивСтрок.Добавить(НСтр("ru = 'Не был завершен штатно.'"));

		РезультатВыполнения.Вставить("ОписаниеОшибки", СтрСоединить(МассивСтрок, " "));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатПолученияДистрибутива = КриптографияБЭДСлужебныйВызовСервера.РезультатПолученияДистрибутиваКриптопровайдера(
			ДлительнаяОперация, ВходящийКонтекст.Форма.УникальныйИдентификатор);

		Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(РезультатПолученияДистрибутива.КонтекстДиагностики) Тогда
			ОбработчикПовторенияДействия = Новый ОписаниеОповещения("УстановитьКриптопровайдерПослеВводаРегистрационныхДанныхПовторить",
				ЭтотОбъект, Новый Структура("ВходящийКонтекст, РегистрационныеДанные", ВходящийКонтекст,
				ВходящийКонтекст.РегистрационныеДанные));
			ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
			ПараметрыОбработкиОшибок.ОбработчикПовторенияДействия = ОбработчикПовторенияДействия;
			ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(РезультатПолученияДистрибутива.КонтекстДиагностики,
				ПараметрыОбработкиОшибок);
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВходящийКонтекст,
			РезультатПолученияДистрибутива.ДанныеДистрибутива);
		ФайловаяСистемаКлиент.СоздатьВременныйКаталог(ВходящийКонтекст.ПослеСозданияВременногоКаталога);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКриптопровайдерПослеСозданияВременногоКаталога(ИмяКаталогаВременныхФайлов, ВходящийКонтекст) Экспорт

	ИмяКаталогаВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ИмяКаталогаВременныхФайлов);
	ВходящийКонтекст.Вставить("ВременныйКаталог", ИмяКаталогаВременныхФайлов);

	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайловДистрибутива", ЭтотОбъект, ВходящийКонтекст);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Интерактивно = Ложь;
	ПараметрыСохранения.Диалог.Каталог = ИмяКаталогаВременныхФайлов;
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, ВходящийКонтекст.Дистрибутив, ПараметрыСохранения);

КонецПроцедуры

Процедура ПослеСохраненияФайловДистрибутива(ПолученныеФайлы, ВходящийКонтекст) Экспорт

	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗапуститьПриложениеНаКлиенте(
		ВходящийКонтекст.ВременныйКаталог + "Setup.bat", ВходящийКонтекст.ВременныйКаталог, Истина, Ложь,
		ВходящийКонтекст);

КонецПроцедуры

Процедура УстановитьКриптопровайдерПослеВводаРегистрационныхДанныхПовторить(Результат, ДополнительныеПараметры) Экспорт

	ВходящийКонтекст = ДополнительныеПараметры.ВходящийКонтекст;
	РегистрационныеДанные = ДополнительныеПараметры.РегистрационныеДанные;
	Если РегистрационныеДанные.ИмяПрограммы = "CryptoPro CSP" Тогда
		УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(РегистрационныеДанные, ВходящийКонтекст);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗапуститьПриложениеНаКлиенте

Процедура ЗапуститьПриложениеНаКлиенте(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, ВыводитьСообщения,
	ВходящийКонтекст)

	Оповещение = Новый ОписаниеОповещения("ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения", ЭтотОбъект,
		ВходящийКонтекст, "ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения", ЭтотОбъект);

	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.Оповещение = Оповещение;
	ПараметрыЗапуска.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапуска.ДождатьсяЗавершения = ДождатьсяЗавершения;

	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапуска);

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения(КодВозврата, ВходящийКонтекст) Экспорт

	Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Истина);
		РезультатВыполнения.Вставить("ОписаниеОшибки", "");

		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка,
	ВходящийКонтекст) Экспорт

	СтандартнаяОбработка = Ложь;

	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
						  |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки,
		ВходящийКонтекст.СтрокаКоманды);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);

	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Выполнено", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);

	ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);

КонецПроцедуры

#КонецОбласти

#Область РасшифровкаНабораДанных

// Возвращаемое значение:
//  Структура:
//  * ИндексДанных - Число
//  * КлючиДанных - Массив из Строка
//  * НаборДанныхДляРасшифровки - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * НаборРасшифрованныхДанных - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * ПаролиСертификатов - См. КриптографияБЭД.ПаролиСертификатов
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ОшибкиРасшифровкиДанных - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор данных для расшифровки.
//  ** Значение - Строка - описание ошибки.
//  * ОтказыРасшифровкиДанных - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор данных для расшифровки.
//  ** Значение - Булево
//  * СертификатыОтказа - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
Функция НовыйКонтекстРасшифровкиНабораДанных() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ИндексДанных", 0);
	Контекст.Вставить("КлючиДанных", Новый Массив);
	Контекст.Вставить("НаборДанныхДляРасшифровки", КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки());
	Контекст.Вставить("НаборРасшифрованныхДанных", КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных());
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ОшибкиРасшифровкиДанных", Новый Соответствие);
	Контекст.Вставить("ОтказыРасшифровкиДанных", Новый Соответствие);
	Контекст.Вставить("СертификатыОтказа", Новый Массив);
	Возврат Контекст;
КонецФункции

// Параметры:
//  КонтекстРасшифровки - См. НовыйКонтекстРасшифровки
Процедура РасшифроватьНаборДанных(КонтекстРасшифровки) Экспорт
	
	ДанныеПоСертификатам = ТекущийДанныеДляРасшифровки(КонтекстРасшифровки);
	
	Если Не ЗначениеЗаполнено(ДанныеПоСертификатам) Тогда
		РасшифроватьСледующиеДанныеНабора(КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	ПаролиСертификатов = КонтекстРасшифровки.ПаролиСертификатов;
	СертификатыОтказа = КонтекстРасшифровки.СертификатыОтказа;
	
	ПараметрыСертификатов = ПараметрыСертификатовДляРасшифровкиДанных(ДанныеПоСертификатам, ПаролиСертификатов, СертификатыОтказа);
	
	Если Не ЗначениеЗаполнено(ПараметрыСертификатов.ОтборСертификатов) Тогда
		РасшифроватьСледующиеДанныеНабора(КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	ОповещениеПолученияДанных = Новый ОписаниеОповещения("ПолучитьЗашифрованныеДанныеПослеВыбораСертификата",
		КриптографияБЭДСлужебныйКлиент, КонтекстРасшифровки);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Данные", ОповещениеПолученияДанных);
	ОписаниеДанных.Вставить("ЗаголовокДанных", "");
	ОписаниеДанных.Вставить("КонтекстОперации", ПараметрыСертификатов.ПарольСертификата);
	ОписаниеДанных.Вставить("ОтборСертификатов", ПараметрыСертификатов.ОтборСертификатов);
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация в сервисе ЭДО'"));
	ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
	ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
	ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатРасшифровки", ЭтотОбъект, КонтекстРасшифровки);
	
	КриптографияБЭДКлиент.Расшифровать(ОписаниеДанных, КонтекстРасшифровки.КонтекстДиагностики, Неопределено,
		Оповещение, ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  ДанныеПоСертификатам - см. ТекущийДанныеДляРасшифровки
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  СертификатыОтказа - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция ПараметрыСертификатовДляРасшифровкиДанных(ДанныеПоСертификатам, ПаролиСертификатов, СертификатыОтказа)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтборСертификатов", Новый Массив);
	Результат.Вставить("ПарольСертификата", Неопределено);
	
	Для Каждого ДанныеПоСертификату Из ДанныеПоСертификатам Цикл
		
		Сертификат = ДанныеПоСертификату.Сертификат;
		Если СертификатыОтказа.Найти(Сертификат) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.ПарольСертификата = ПаролиСертификатов[Сертификат];
		Если Результат.ПарольСертификата <> Неопределено Тогда
			Результат.ОтборСертификатов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
			Прервать;
		КонецЕсли;
		Результат.ОтборСертификатов.Добавить(Сертификат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получить зашифрованные данные после выбора сертификата.
// 
// Параметры:
//  Результат - Структура:
//  * ОписаниеДанных - см. ЭлектроннаяПодписьКлиент.Расшифровать.ОписаниеДанных
//  * Оповещение - ОписаниеОповещения
//  КонтекстРасшифровки - см. НовыйКонтекстРасшифровкиНабораДанных
Процедура ПолучитьЗашифрованныеДанныеПослеВыбораСертификата(Результат, КонтекстРасшифровки) Экспорт
	
	ВыбранныйСертификат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ОписаниеДанных, "ВыбранныйСертификат");
	Если Не ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
		ОбработатьРезультатРасшифровки(Неопределено, КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Результат.ОписаниеДанных;
	
	ДанныеПоСертификатам = ТекущийДанныеДляРасшифровки(КонтекстРасшифровки);
	
	Сертификат = ВыбранныйСертификат.Ссылка;
	Для Каждого ДанныеПоСертификату Из ДанныеПоСертификатам Цикл
		Если ДанныеПоСертификату.Сертификат = Сертификат Тогда
			ОписаниеДанных.Данные = ДанныеПоСертификату.Данные;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, ОписаниеДанных);
	
КонецПроцедуры

// Параметры:
//  Результат - Структура:
//  * Успех - Булево
//  * Отказ - Булево
//  * ОписаниеОшибки - Строка - опционально.
//  * РасшифрованныеДанные - Строка,ДвоичныеДанные
//  * ВыбранныйСертификат - Структура:
//  ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  КонтекстРасшифровки - см. НовыйКонтекстРасшифровкиНабораДанных
Процедура ОбработатьРезультатРасшифровки(Результат, КонтекстРасшифровки) Экспорт
	
	КлючДанных = ТекущийКлючДанныхДляРасшифровки(КонтекстРасшифровки);
	
	Если Не Результат.Успех Тогда
		Если Результат.Отказ Тогда
			КонтекстРасшифровки.ОтказыРасшифровкиДанных.Вставить(КлючДанных, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтекстРасшифровки.СертификатыОтказа, Результат.ОтборСертификатов);
		Иначе
			ОписаниеОшибки = "";
			Если Результат.Свойство("ОписаниеОшибки") Тогда
				ОписаниеОшибки = Результат.ОписаниеОшибки;
			КонецЕсли;
			КонтекстРасшифровки.ОшибкиРасшифровкиДанных.Вставить(КлючДанных, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат.Свойство("РасшифрованныеДанные") Тогда
		РасшифроватьСледующиеДанныеНабора(КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	ДанныеРасшифровки = КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки();
	ДанныеРасшифровки.Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	
	Если ТипЗнч(Результат.РасшифрованныеДанные) = Тип("Строка") Тогда
		ДанныеРасшифровки.Данные = ПолучитьИзВременногоХранилища(Результат.РасшифрованныеДанные);
	Иначе
		ДанныеРасшифровки.Данные = Результат.РасшифрованныеДанные;
	КонецЕсли;
	
	КонтекстРасшифровки.НаборРасшифрованныхДанных.Вставить(КлючДанных, ДанныеРасшифровки);
	
	Если Результат.Свойство("ПаролиСертификатов") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			КонтекстРасшифровки.ПаролиСертификатов, Результат.ПаролиСертификатов, Истина);
	КонецЕсли;
	
	РасшифроватьСледующиеДанныеНабора(КонтекстРасшифровки);
	
КонецПроцедуры

// Параметры:
//  КонтекстРасшифровки - См. НовыйКонтекстРасшифровкиНабораДанных
//  
// Возвращаемое значение:
//  - Неопределено
//  - Строка
Функция ТекущийКлючДанныхДляРасшифровки(КонтекстРасшифровки)
	ИндексДанных = КонтекстРасшифровки.ИндексДанных;
	КлючиДанных = КонтекстРасшифровки.КлючиДанных;
	Если ИндексДанных > КлючиДанных.ВГраница() Тогда
		Возврат Неопределено;
	КонецЕсли;
	КлючДанных = КлючиДанных[ИндексДанных];
	Возврат КлючДанных;
КонецФункции

// Параметры:
//  КонтекстРасшифровки - См. НовыйКонтекстРасшифровкиНабораДанных
//  
// Возвращаемое значение:
//  - Неопределено
//  - Массив из см. КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки
Функция ТекущийДанныеДляРасшифровки(КонтекстРасшифровки)
	КлючДанных = ТекущийКлючДанныхДляРасшифровки(КонтекстРасшифровки);
	Если КлючДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат КонтекстРасшифровки.НаборДанныхДляРасшифровки[КлючДанных];
КонецФункции

// Параметры:
//  КонтекстРасшифровки - См. НовыйКонтекстРасшифровкиНабораДанных
Процедура РасшифроватьСледующиеДанныеНабора(КонтекстРасшифровки)
	
	Если КонтекстРасшифровки.ИндексДанных < КонтекстРасшифровки.КлючиДанных.ВГраница() Тогда
		КонтекстРасшифровки.ИндексДанных = КонтекстРасшифровки.ИндексДанных + 1;
		РасшифроватьНаборДанных(КонтекстРасшифровки);
	Иначе
		ЗавершитьРасшифровкуНабораДанных(КонтекстРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КонтекстРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
Процедура ЗавершитьРасшифровкуНабораДанных(КонтекстРасшифровки)
	ИтогРасшифровки = КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных();
	ИтогРасшифровки.НаборРасшифрованныхДанных = КонтекстРасшифровки.НаборРасшифрованныхДанных;
	ИтогРасшифровки.ПаролиСертификатов = КонтекстРасшифровки.ПаролиСертификатов;
	ИтогРасшифровки.ОтказыРасшифровкиДанных = КонтекстРасшифровки.ОтказыРасшифровкиДанных;
	ИтогРасшифровки.ОшибкиРасшифровкиДанных = КонтекстРасшифровки.ОшибкиРасшифровкиДанных;
	ВыполнитьОбработкуОповещения(КонтекстРасшифровки.ОповещениеОЗавершении, ИтогРасшифровки);
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСертификатыИзПодписиНаСервере

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  Подпись - ДвоичныеДанные
Процедура ПолучитьСертификатыИзПодписиНаСервере(ОповещениеОЗавершении, Подпись) Экспорт
	
	
	Если Не ЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере()
		И Не ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, НовыйРезультатИнициализацииСертификатов());
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеСертификатов = КриптографияБЭДВызовСервера.ПолучитьСертификатыИзПодписи(Подпись);
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеСертификатов) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, НовыйРезультатИнициализацииСертификатов());
		Возврат;
	КонецЕсли;
	
	НачатьИнициализациюСертификатов(ОповещениеОЗавершении, ДвоичныеДанныеСертификатов);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияСертификатов

// Возвращаемое значение:
//  Структура:
//  * СертификатыКриптографии - Массив из СертификатКриптографии
//  * ОписаниеОшибки - Строка
Функция НовыйРезультатИнициализацииСертификатов()
	Результат = Новый Структура;
	Результат.Вставить("СертификатыКриптографии", Новый Массив);
	Результат.Вставить("ОписаниеОшибки", "");
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИндексДанных - Число
//  * ДвоичныеДанныеСертификатов - Массив из ДвоичныеДанные
//  * СертификатыКриптографии - Массив из СертификатКриптографии
//  * ОповещениеОЗавершении - ОписаниеОповещения
Функция НовыйКонтекстИнициализацииСертификатов()
	Контекст = Новый Структура;
	Контекст.Вставить("ИндексДанных", 0);
	Контекст.Вставить("ДвоичныеДанныеСертификатов", Новый Массив);
	Контекст.Вставить("СертификатыКриптографии", Новый Массив);
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ДвоичныеДанныеСертификатов - Массив из ДвоичныеДанные
Процедура НачатьИнициализациюСертификатов(ОповещениеОЗавершении, ДвоичныеДанныеСертификатов)
	
	КонтекстИнициализации = НовыйКонтекстИнициализацииСертификатов();
	КонтекстИнициализации.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстИнициализации.ДвоичныеДанныеСертификатов = ДвоичныеДанныеСертификатов;
	
	Оповещение = Новый ОписаниеОповещения("ИнициализироватьСертификатыПослеПодключенияРасширения",
		КриптографияБЭДСлужебныйКлиент, КонтекстИнициализации);
	НачатьПодключениеРасширенияРаботыСКриптографией(Оповещение);
	
КонецПроцедуры

// Параметры:
//  Подключено - Булево
//  КонтекстИнициализации - см. НовыйКонтекстИнициализацииСертификатов
Процедура ИнициализироватьСертификатыПослеПодключенияРасширения(Подключено, КонтекстИнициализации) Экспорт
	
	Если Подключено Тогда
		ИнициализироватьСертификаты(КонтекстИнициализации);
		Возврат;
	КонецЕсли;
	
	Результат = НовыйРезультатИнициализацииСертификатов();
	Результат.ОписаниеОшибки =  НСтр("ru = 'Не подключено расширение работы с криптографией'");
	ВыполнитьОбработкуОповещения(КонтекстИнициализации.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  КонтекстИнициализации - см. НовыйКонтекстИнициализацииСертификатов
Процедура ИнициализироватьСертификаты(КонтекстИнициализации)
	
	ИндексДанных = КонтекстИнициализации.ИндексДанных;
	ДвоичныеДанныеСертификатов = КонтекстИнициализации.ДвоичныеДанныеСертификатов;
	
	Если ИндексДанных >= ДвоичныеДанныеСертификатов.Количество() Тогда
		Результат = НовыйРезультатИнициализацииСертификатов();
		Результат.СертификатыКриптографии = КонтекстИнициализации.СертификатыКриптографии;
		ВыполнитьОбработкуОповещения(КонтекстИнициализации.ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатИнициализацииСертификата", КриптографияБЭДСлужебныйКлиент,
		КонтекстИнициализации, "ОбработатьОшибкуИнициализацииСертификата", КриптографияБЭДСлужебныйКлиент);
	
	ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатов[ИндексДанных];
	
	СертификатКриптографии = Новый СертификатКриптографии;
	СертификатКриптографии.НачатьИнициализацию(Оповещение, ДвоичныеДанныеСертификата);
	
КонецПроцедуры

// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  СтандартнаяОбработка - Булево
//  КонтекстИнициализации - см. НовыйКонтекстИнициализацииСертификатов
Процедура ОбработатьОшибкуИнициализацииСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, КонтекстИнициализации) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = НовыйРезультатИнициализацииСертификатов();
	Результат.ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ВыполнитьОбработкуОповещения(КонтекстИнициализации.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  СертификатКриптографии - СертификатКриптографии
//  КонтекстИнициализации - см. НовыйКонтекстИнициализацииСертификатов
Процедура ОбработатьРезультатИнициализацииСертификата(СертификатКриптографии, КонтекстИнициализации) Экспорт
	
	КонтекстИнициализации.СертификатыКриптографии.Добавить(СертификатКриптографии);
	КонтекстИнициализации.ИндексДанных = КонтекстИнициализации.ИндексДанных + 1;
	ИнициализироватьСертификаты(КонтекстИнициализации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти