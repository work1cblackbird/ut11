#Область ПрограммныйИнтерфейс

// Заполнение таблицы этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
//
Процедура ДополнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов) Экспорт
	//++ Локализация
	#Область Группа_РучныеОперации
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыРучныеОперации();
	УчетНДСРФ.ДобавитьЭтап_ОформлениеСчетовФактурИТаможенныхДокументов(ТаблицаЭтапов,ТекущийРодитель);

	#КонецОбласти
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыФормированиеЗатрат();
	ПодарочныеСертификатыСервер.ДобавитьЭтап_АннулированиеПодарочныхСертификатов(ТаблицаЭтапов,ТекущийРодитель);

	#КонецОбласти
	
	
	#Область Группа_РегламентированныйУчет
	
	#КонецОбласти
	
	#Область Группа_ФормированиеФинансовогоРезультата
	ТекущийРодитель = ЗакрытиеМесяцаСервер.ИдентификаторГруппыФормированиеФинансовогоРезультата();
	#КонецОбласти
	

	//-- Локализация
КонецПроцедуры

// Заполнение таблицы групп этапов закрытия месяца.
// Элементы данной таблицы являются элементами верхнего уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
//	ТаблицаГруппЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияГруппЭтапов
//
Процедура ДополнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов) Экспорт
	//++ Локализация

	
	//-- Локализация
КонецПроцедуры

// Заполняет проверки, выполняемые в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации.
//
Процедура ДополнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	//++ Локализация
	УчетНДСРФ.ОписаниеПроверок_ФормированиеСводныхСправокНДС(ТаблицаПроверок);
	УчетНДСРФ.ОписаниеПроверок_ФормированиеДвиженийПоНДС(ТаблицаПроверок);

	//-- Локализация
КонецПроцедуры


// Дополняет список операций закрытия месяца, использующих механизм заданий к закрытию месяца.
// 
// Параметры:
// 	ДанныеВыбора - СписокЗначений -
//
Процедура ДополнитьДанныеВыбораОперацийЗакрытияМесяца(ДанныеВыбора) Экспорт
	//++ Локализация

	

	//-- Локализация
	
КонецПроцедуры


#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	//++ Локализация


	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


#Область УстановкаБлокировкиФункционалаПриОбновленииИБ

// Обработчики обновления блокирующие закрытие месяца.
// Параметры:
//  Обработчики - Строка - Обработчики обновления не влияющие на закрытие месяца.
// 
Процедура ОбработчикиОбновленияБлокирующиеЗакрытиеМесяца(Обработчики) Экспорт
	Обработчики = Обработчики + "
	//++ Локализация
	|
	|
	//-- Локализация
	|";
КонецПроцедуры

// Обработчики обновления не влияющие на закрытие месяца.
// Параметры:
//  Обработчики - Строка - Обработчики обновления не влияющие на закрытие месяца.
// 
Процедура ОбработчикиОбновленияНеВлияющиеНаЗакрытиеМесяца(Обработчики) Экспорт
	Обработчики = Обработчики +  "
	//++ Локализация
	|
	|
	//-- Локализация
	|";
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервереФормаЗакрытиеМесяца(Отказ, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат;
КонецПроцедуры


// Настраивает форму закрытия месяца.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ВыполняетсяЗагрузкаНастроек - Булево -
//
Процедура НастроитьЭлементыПриИнициализацииФормы(Форма, ВыполняетсяЗагрузкаНастроек = Ложь) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Если НЕ ВыполняетсяЗагрузкаНастроек Тогда
		
		Элементы.ФормаОткрытьЗаданияКПогашениюСтоимостиТМЦ.Видимость =
			Ложь // в УТ11

			ИЛИ Ложь; // для соблюдение стандарта по переносу выражений	
			
		Элементы.ФормаОткрытьЗаданияКДоначислениюНалогаНаИмущество.Видимость =
		    Ложь // в УТ11

			ИЛИ Ложь; // для соблюдение стандарта по переносу выражений
			
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область РаботаСДатами

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
// Параметры:
//  ИсточникиДанных - ТаблицаЗначений - см. описание в механизме БСП.
//
Процедура ДополнитьОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	//++ Локализация


	//-- Локализация
КонецПроцедуры

// Возвращает дату задания на текущий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка - документ задания.
// 	Период - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаТекущийПериод(Операция, Организация, ДокументЗадания, Знач Период) Экспорт
	Месяц = Период;
	//++ Локализация

	
	//-- Локализация
	Возврат Месяц
	
КонецФункции

// Возвращает дату задания на следующий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка - документ задания.
// 	СледующийМесяц - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаСледующийПериод(Операция, Организация, ДокументЗадания, Знач СледующийМесяц) Экспорт
	
	ДатаЗадания = СледующийМесяц;
	
	//++ Локализация

	
	
	//-- Локализация

	Возврат ДатаЗадания;
	
КонецФункции

#КонецОбласти

//++ Локализация

#Область КонтрольныеРегистры

// Возвращает регистры, по данным которых могут формироваться задания к закрытию месяца.
//
// Возвращаемое значение:
//	Соответствие - метаданные регистров для заданий
//
Функция ИсточникиДанныхДляЗаданийЗакрытияМесяца() Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ГрафикОплатКредитовИДепозитов, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваВПути, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочаяВыручка, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентами, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизацийКПередаче, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию, Истина);

	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДанныеОснованийСчетовФактур, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию, Истина);

	Возврат ВходящиеДанные;
	
КонецФункции

// Проверить контрольные регистры в источниках данных для заданий закрытия месяца.
// 
// Параметры:
//  Запрос - Запрос - запрос формирования движения по регистрам
//
Процедура ПроверитьКонтрольныеРегистрыВИсточникахДанныхДляЗаданийЗакрытияМесяца(Запрос) Экспорт
	
	ТекстОшибки = "";
	
	Для Каждого КлючИЗначение Из Запрос.Параметры.ТаблицыКонтрольныхРегистров Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		ТекстОшибки = ТекстОшибки + Символы.ПС
			+ ЗакрытиеМесяцаПовтИсп.ПроверитьВхождениеИсточникаДанныхВКонтрольныеРегистрыДляЗаданийЗакрытияМесяца(ИмяТаблицы);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение СокрЛП(ТекстОшибки);
	КонецЕсли;
	
	Запрос.Параметры.Удалить("ТаблицыКонтрольныхРегистров");
	
КонецПроцедуры

#КонецОбласти


//-- Локализация

#КонецОбласти
