
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	МеханизмыДокумента.Добавить("ПодарочныеСертификаты");
	

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт	

КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	ПодарочныеСертификатыСервер.ОбработкаПроверкиЗаполнения(Объект, Отказ);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	//++ Локализация
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		ЗаполнитьПоОперацииПоЯндексКассе(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт

КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Документы.СчетФактураВыданныйАванс.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ВзаимозачетЗадолженности) Тогда

		// Акт взаимозачета (Microsoft Word)
		ИмяМакета = "ПФ_DOC_АктВзаимозачета" + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
		Если Метаданные.Документы.ВзаимозачетЗадолженности.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаВзаимозачетаЗадолженностиMicrosoftWord";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "АктВзаимозачетаMicrosoftWord";
			КомандаПечати.Представление = НСтр("ru = 'Акт взаимозачета (Microsoft Word)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
																"ВидОперации",
																Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом,
																ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;

		// Акт переуступки долга (Microsoft Word)
		ИмяМакета = "ПФ_DOC_АктПереуступкиДолга" + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
		Если Метаданные.Документы.ВзаимозачетЗадолженности.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаПереуступкиДолгаMicrosoftWord";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "АктПереуступкиДолгаMicrosoftWord";
			КомандаПечати.Представление = НСтр("ru = 'Акт переуступки долга (Microsoft Word)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
																"ВидОперации",
																Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом,
																ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		
		// Акт переуступки долга между организациями (Microsoft Word)
		ИмяМакета = "ПФ_DOC_АктПереуступкиДолгаМеждуОрганизациями" + "_" + ОбщегоНазначения.КодОсновногоЯзыка();
		Если Метаданные.Документы.ВзаимозачетЗадолженности.Макеты.Найти(ИмяМакета) <> Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаПереуступкиДолгаМеждуОрганизациямиMicrosoftWord";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "АктПереуступкиДолгаМеждуОрганизациямиMicrosoftWord";
			КомандаПечати.Представление = НСтр("ru = 'Акт переуступки долга между организациями (Microsoft Word)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
			КомандаПечати.ФункциональныеОпции = "ИспользоватьНесколькоОрганизаций";
			ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати,
																"ВидОперации",
																Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом,
																ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр).
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

#КонецОбласти


//++ Локализация
#Область Фискализация

// Возвращает параметры операции фискализации чека для печати чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Структура - Структура параметров операции фискализации чека
Функция ОсновныеПараметрыОперации(Форма) Экспорт
	
	ОсновныеПараметрыОперации = ФормированиеФискальныхЧековСерверПереопределяемый.СтруктураОсновныхПараметровОперации();
	
	ОсновныеПараметрыОперации.ДокументСсылка       = Форма.Объект.Ссылка;
	ОсновныеПараметрыОперации.СуммаДокумента       = Форма.Объект.СуммаРегл;
	
	ОсновныеПараметрыОперации.ИмяКомандыПробитияЧека = Форма.ИмяКомандыПробитияЧека;
	
	ОсновныеПараметрыОперации.ИмяРеквизитаГиперссылкиНаФорме = "ТекстДокументыНаОснованииПодвал";
	
	Если Форма.ИмяКомандыПробитияЧека = "КонтрагентПоставщик" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "КонтрагентДебитор" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "КонтрагентКредитор" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентКредитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "КонтрагентПодарочныйСертификат" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентКредитор;
		
	ИначеЕсли Форма.ИмяКомандыПробитияЧека = "ОрганизацияДебитор" Тогда
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.Организация;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	Иначе // ОрганизацияКредитор
		
		ОсновныеПараметрыОперации.Организация          = Форма.Объект.ОрганизацияКредитор;
		ОсновныеПараметрыОперации.Контрагент           = Форма.Объект.КонтрагентДебитор;
		
	КонецЕсли;
	
	ОсновныеПараметрыОперации.Валюта =  ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ОсновныеПараметрыОперации.Организация);
	
	Возврат ОсновныеПараметрыОперации;
	
КонецФункции

// Определяет, разрешено ли пробитие фискального чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Булево - Истина, если разрешено пробитие чека
Функция РазрешеноПробитиеФискальныхЧековПоДокументу(Форма) Экспорт
	
	Организация = Форма.Объект.Организация;
	ОрганизацияКредитор = Форма.Объект.ОрганизацияКредитор;
	
	КонтрагентДебитор = Форма.Объект.КонтрагентДебитор;
	КонтрагентКредитор = Форма.Объект.КонтрагентКредитор;
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
			
		Возврат Ложь;
	КонецЕсли;
	
	РазрешеноПробитиеФискальныхЧековПоДокументу = Ложь;
	
	ТипКонтрагентДебитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		ТипКонтрагентДебитор = Форма.ЮрФизЛицоДебитор;
	КонецЕсли;
	
	ТипКонтрагентКредитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентКредитор) Тогда
		ТипКонтрагентКредитор = Форма.ЮрФизЛицоКредитор;
	КонецЕсли;
	
	ВидОперации = Форма.Объект.ВидОперации;
	
	// Организация + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
	
	// Организация + Контрагент + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И ((ТипКонтрагентДебитор <> Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо)
			ИЛИ (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор <> Перечисления.ЮрФизЛицо.ФизЛицо)) Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
	
	// Организация + Физическое лицо 1 + Физическое лицо 2
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
	
	// Организация 1 + Организация 2 + Физическое лицо 1
	Если ЗначениеЗаполнено(ОрганизацияКредитор)
		И Организация <> ОрганизацияКредитор
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
		
	КонецЕсли;
		
	// Организация + Физическое лицо 1 + Физическое лицо 2 + Подарочные сертификаты
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
		И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ТаблицаЗадолженности = Форма.Объект.КредиторскаяЗадолженность;
		Если ТаблицаЗадолженности.Количество() = 1
			И ЗначениеЗаполнено(ТаблицаЗадолженности[0].ОбъектРасчетов)
			И ТаблицаЗадолженности[0].ОбъектРасчетовПодарочныйСертификат Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДебиторскаяЗадолженность.ОбъектРасчетов
			|ПОМЕСТИТЬ ОбъектыРасчетов
			|ИЗ
			|	&ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность
			|;
			|//////////////////////////////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ОбъектыРасчетов.ОбъектРасчетов.Объект КАК ОбъектОплаты
			|ИЗ
			|	ОбъектыРасчетов КАК ОбъектыРасчетов";
			Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", Форма.Объект.ДебиторскаяЗадолженность.Выгрузить());
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				РазрешеноПробитиеФискальныхЧековПоДокументу = Ложь;
				Если ФормированиеФискальныхЧековСервер.ДокументПоставкиСВозможностьюПробитияЧеков(Выборка.ОбъектОплаты)
					ИЛИ ТипЗнч(Выборка.ОбъектОплаты) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
				КонецЕсли;
				
				Если НЕ РазрешеноПробитиеФискальныхЧековПоДокументу Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РазрешеноПробитиеФискальныхЧековПоДокументу;
	
КонецФункции

// Формирует массив форматированных строк для формирования гиперссылки пробития фискального чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ-ссылка, по которому пробивается фискальный чек
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// 	МассивПредставлений - Массив из ФорматированнаяСтрока - Массив форматированных строк для формирования гиперссылки
//    пробития фискального чека.
Процедура ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, МассивПредставлений) Экспорт
	
	Организация = Форма.Объект.Организация;
	ОрганизацияКредитор = Форма.Объект.ОрганизацияКредитор;
	
	КонтрагентДебитор = Форма.Объект.КонтрагентДебитор;
	КонтрагентКредитор = Форма.Объект.КонтрагентКредитор;
	
	ВидОперации = Форма.Объект.ВидОперации;
	
	МассивСсылок = Новый Массив;
	ТипКонтрагентДебитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		ТипКонтрагентДебитор = Форма.ЮрФизЛицоДебитор;
		МассивСсылок.Добавить(КонтрагентДебитор);
	КонецЕсли;
	ТипКонтрагентКредитор = Неопределено;
	Если ЗначениеЗаполнено(КонтрагентКредитор) Тогда
		ТипКонтрагентКредитор = Форма.ЮрФизЛицоКредитор;
		МассивСсылок.Добавить(КонтрагентКредитор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивСсылок.Добавить(Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОрганизацияКредитор) Тогда
		МассивСсылок.Добавить(ОрганизацияКредитор);
	КонецЕсли;
	НаименованияСсылок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Наименование");
	
	МассивПредставлений = Новый Массив;
	
	// Организация + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		МассивПредставлений.Добавить("Зачет закупки: ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентПоставщикОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
				ТекстСсылки = "КонтрагентПоставщикПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("Зачет продажи: ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
				ТекстСсылки = "КонтрагентДебиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация + Контрагент + Физическое лицо
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И ((ТипКонтрагентДебитор <> Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо)
			ИЛИ (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор <> Перечисления.ЮрФизЛицо.ФизЛицо)) Тогда
		
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			
			ТекстСсылки = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации";
			Если ТипКонтрагентДебитор <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				ТекстСсылки = "КонтрагентКредиторОткрытьЗаписьФискальнойОперации";
			КонецЕсли;
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "КонтрагентКредиторПробитьЧек";
				Если ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					ТекстСсылки = "КонтрагентДебиторПробитьЧек";
				КонецЕсли;
				
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация + Физическое лицо 1 + Физическое лицо 2
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуКонтрагентами
		И КонтрагентДебитор <> КонтрагентКредитор
		И (ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		
		МассивПредставлений.Добавить("" + НаименованияСсылок[КонтрагентДебитор] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентДебиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "КонтрагентДебиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("" + НаименованияСсылок[КонтрагентКредитор] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "КонтрагентКредиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "КонтрагентКредиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// Организация 1 + Организация 2 + Физическое лицо 1
	Если ЗначениеЗаполнено(ОрганизацияКредитор)
		И Организация <> ОрганизацияКредитор
		И ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносДолгаКлиентаМеждуОрганизациями
		И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		МассивПредставлений.Добавить("" + НаименованияСсылок[Организация] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "ОрганизацияОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 			
				ТекстСсылки = "ОрганизацияПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
		МассивПредставлений.Добавить(Символы.ПС);
		МассивПредставлений.Добавить("" + НаименованияСсылок[ОрганизацияКредитор] + ": ");
		
		ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка, , , ТипРасчета);
		
		Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
			
			НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
			ТекстСсылки = "ОрганизацияКредиторОткрытьЗаписьФискальнойОперации";
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
			
		ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
			
			Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.ОрганизацияКредитор) Тогда 			
				ТекстСсылки = "ОрганизацияКредиторПробитьЧек";
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
			Иначе
				ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
			КонецЕсли;
			
		Иначе
			
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Организация + Физическое лицо 1 + Физическое лицо 2
	Если НЕ ЗначениеЗаполнено(ОрганизацияКредитор)
		И ((ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаМеждуКонтрагентами
			И КонтрагентДебитор <> КонтрагентКредитор
			И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И КонтрагентКредитор = Справочники.Контрагенты.РозничныйПокупатель)
	// Организация + Физическое лицо 1 + Физическое лицо 2 + Подарочный сертификат
		ИЛИ (ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом
			И КонтрагентДебитор <> КонтрагентКредитор
			И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И ТипКонтрагентКредитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И КонтрагентКредитор = Справочники.Контрагенты.РозничныйПокупатель)
	// Организация + Физическое лицо
		Или (ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент
			И ТипКонтрагентДебитор = Перечисления.ЮрФизЛицо.ФизЛицо
			И КонтрагентДебитор = Справочники.Контрагенты.РозничныйПокупатель)) Тогда
			
		ТаблицаЗадолженности = Форма.Объект.КредиторскаяЗадолженность;
			
		Если ТаблицаЗадолженности.Количество()=1 Тогда
			ОбъектРасчетов = ТаблицаЗадолженности[0].ОбъектРасчетов;
			Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
				Если ТаблицаЗадолженности[0].ОбъектРасчетовПодарочныйСертификат Тогда
 					
					МассивПредставлений.Добавить("" + НаименованияСсылок[КонтрагентДебитор] + ": ");
					ФискальнаяОперацияДанныеЖурнала = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументСсылка);
					
					Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
						
						НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
						
						ТекстСсылки = "КонтрагентПодарочныйСертификатОткрытьЗаписьФискальнойОперации";
						
						ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
						
					ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
						
						ТекстСсылки = "КонтрагентПодарочныйСертификатПробитьЧек";
						
						ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, ТекстСсылки);
						
					Иначе
						
						ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

// Определяет виды фискальных чеков, доступных по документу
// 
// Параметры:
// 	ВидыЧеков - ТаблицаЗначений - Таблица значений, содержащая виды фискальных чеков, доступных по документу
// 	Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция по документу
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ЗаполнитьВидыФискальныхЧековПоДокументу(ВидыЧеков, Операция, ИмяКомандыПробитияЧека) Экспорт
	
	ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	Если ИмяКомандыПробитияЧека = "КонтрагентПоставщик" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентДебитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентКредитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентПодарочныйСертификат" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияДебитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияКредитор" Тогда
		ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли;
	
	ВидЧека = ВидыЧеков.Добавить();
	ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
	ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетаДенежнымиСредствами;
	ВидЧека.ВидЧекаКоррекции = Неопределено;
	
КонецПроцедуры

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация");
	СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Возвращает данные по объекта расчетов по документу в зависимости от выбранной команды пробития чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, по которому определяются объекты расчетов
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений, содержащая суммы по объектам расчетов документа
Функция ДанныеПоОбъектамРасчетовПоДокументу(ДокументСсылка, ИмяКомандыПробитияЧека, ВзаиморасчетыОбновлены) Экспорт
	
	Если ИмяКомандыПробитияЧека = "КонтрагентПоставщик" Тогда
		
		Возврат ПолучитьДанныеПоЗадолженностиПередПоставщикамиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентДебитор" Тогда
		
		Возврат ПолучитьДанныеПоДебиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентКредитор" Тогда
		
		Возврат ПолучитьДанныеПоКредиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияДебитор" Тогда
		
		Возврат ПолучитьДанныеПоДебиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "ОрганизацияКредитор" Тогда
		
		Возврат ПолучитьДанныеПоКредиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	ИначеЕсли ИмяКомандыПробитияЧека = "КонтрагентПодарочныйСертификат" Тогда
		
		Возврат ПолучитьДанныеПоОплатеПодарочнымСертификатомДляДляПараметровФискальногоЧека(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

// Возвращает тип оплаты по документу для заполнения фискального чека
// 
// Параметры:
//  ДокументСсылка- ДокументСсылка - Документ, по которому пробивается фискальный чек
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОплатыККТ
Функция ТипОплатыПоДокументу(ДокументСсылка) Экспорт
	
	Возврат Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

//++ Локализация


//-- Локализация

#КонецОбласти

#Область Прочее

//++ Локализация
Процедура ЗаполнитьПоОперацииПоЯндексКассе(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| // Данные шапки документа
	|
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный) КАК ВидОперации,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Клиент) КАК ТипКредитора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.Клиент) КАК ТипДебитора,
	|
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ДанныеДокумента.Контрагент КАК КонтрагентКредитор,
	|	ДанныеДокумента.Эквайер КАК КонтрагентДебитор,
	|
	|	ДанныеДокумента.Валюта КАК Валюта,
	|
	|	&Ссылка КАК ДокументОснование,
	|
	|// Данные табличных частей
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|
	|	ДанныеДокумента.ОбъектРасчетов КАК ЗаказКредитора,
	|
	|	ДанныеДокумента.Контрагент.Партнер КАК ПартнерКредитор,
	|	ДанныеДокумента.Эквайер.Партнер КАК ПартнерДебитор
	|
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);

	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Взаимозачет задолженности на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Объект.Подразделение     = ДанныеЗаполнения.Подразделение;
	ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Объект.Ответственный     = Пользователи.ТекущийПользователь();
	
	// Дебиторская задолженность
	НоваяСтрока = Объект.ДебиторскаяЗадолженность.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.Партнер = ДанныеЗаполнения.ПартнерДебитор;
	
	// Кредиторская задолженность
	НоваяСтрока = Объект.КредиторскаяЗадолженность.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.Партнер = ДанныеЗаполнения.ПартнерКредитор;
	НоваяСтрока.ОбъектРасчетов = ДанныеЗаполнения.ЗаказКредитора;
	
КонецПроцедуры
//-- Локализация

#КонецОбласти

//++ Локализация
#Область Фискализация

Функция ПолучитьДанныеПоЗадолженностиПередПоставщикамиДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	РасчетыСПоставщикамиПоСрокам.ДолгРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
		|ГДЕ
		|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСПоставщикамиПоСрокам.ВидДвижения = &ВидДвижения
		|	И РасчетыСПоставщикамиПоСрокам.ДолгРегл > 0";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект  КАК Заказ,
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ВзаимозачетЗадолженностиКредиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоДебиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	ВЫБОР
		|		КОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл > 0
		|			ТОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл
		|		КОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл > 0
		|			ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвиженияПриход
		|	И (РасчетыСКлиентамиПоСрокам.ДолгРегл > 0 ИЛИ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	ВЫБОР
		|		КОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл > 0
		|			ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл
		|		КОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл > 0
		|			ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
		|ГДЕ
		|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСПоставщикамиПоСрокам.ВидДвижения = &ВидДвиженияРасход
		|	И (РасчетыСПоставщикамиПоСрокам.ДолгРегл > 0 ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл > 0)";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Заказ,
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ВзаимозачетЗадолженностиДебиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоКредиторскойЗадолженностиДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	РасчетыСКлиентамиПоСрокам.ДолгРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвижения
		|	И РасчетыСКлиентамиПоСрокам.ДолгРегл > 0";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект  КАК Заказ,
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ВзаимозачетЗадолженностиКредиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиКредиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиКредиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоОплатеПодарочнымСертификатомДляДляПараметровФискальногоЧека(ДокументСсылка)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов.Объект КАК Заказ,
		|	РасчетыСКлиентамиПоСрокам.ПредоплатаРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвиженияПриход
		|	И НЕ РасчетыСКлиентамиПоСрокам.ОбъектРасчетов.Объект ССЫЛКА Справочник.ПодарочныеСертификаты
		|	И РасчетыСКлиентамиПоСрокам.ПредоплатаРегл <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	РасчетыСКлиентамиПоСрокам.РасчетныйДокумент КАК Заказ,
		|	РасчетыСКлиентамиПоСрокам.ДолгРегл КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Ссылка
		|	И РасчетыСКлиентамиПоСрокам.ВидДвижения = &ВидДвиженияРасход
		|	И РасчетыСКлиентамиПоСрокам.ДолгРегл <> 0";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Заказ,
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.СуммаРегл КАК Сумма
		|ИЗ
		|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ВзаимозачетЗадолженностиДебиторскаяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти
