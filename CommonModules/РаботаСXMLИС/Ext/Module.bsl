
#Область ПрограммныйИнтерфейс

#Область РаботаСXDTO

// Возвращает все пространства зависимые пространства имен из коллекции пакетов.
//
Процедура ЗависимыеПространстваИмен(ЗависимыеПакеты, ПространстваИмен) Экспорт
	
	Для Каждого ПакетXDTO Из ЗависимыеПакеты Цикл
		Если ПространстваИмен.Найти(ПакетXDTO.URIПространстваИмен) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПространстваИмен.Добавить(ПакетXDTO.URIПространстваИмен);
		
		ЗависимыеПространстваИмен(ПакетXDTO.Зависимости, ПространстваИмен);
	КонецЦикла;
	
КонецПроцедуры

// Создает ОбъектXDTO из пространства имен по имени свойства.
//
// Возвращаемое значение:
//   ОбъектXDTO
Функция ОбъектXDTOПоИмениТипа(ОбъектXDTOРодитель, ИмяТипа) Экспорт
	
	Если ТипЗнч(ОбъектXDTOРодитель) = Тип("СписокXDTO") Тогда
		ТипОбъекта = ОбъектXDTOРодитель.ВладеющееСвойство.Тип.Свойства.Получить(ИмяТипа).Тип;
	Иначе
		ТипОбъекта = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяТипа).Тип;
	КонецЕсли; 
	
	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	
КонецФункции

// Создает ОбъектXDTO из пространства имен по имени свойства.
//
// Возвращаемое значение:
//   ОбъектXDTO
Функция ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойства, ОбъектXDTOРодитель = Неопределено) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		ТипОбъекта = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяСвойства).Тип;
	Иначе
		СвойствоРодителя = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства);
		Если СвойствоРодителя = Неопределено Тогда
			ТипОбъекта = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяСвойства).Тип;
		Иначе
			ТипОбъекта = СвойствоРодителя.Тип;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	
КонецФункции

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ПараметрыПреобразования - Неопределено, Структура - дополнительные переметры преобразования объекта
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	
	Структура      = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			Если ПараметрыПреобразования <> Неопределено
				И ПараметрыПреобразования.НайтиИдентификаторы
				И Свойство.Тип = ПараметрыПреобразования.ТипUUID Тогда
				
				РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
				Если РезультатПоиска <> Неопределено
					И РезультатПоиска.ИмяПоля = ИмяСвойства Тогда
					ПараметрыПреобразования.Идентификаторы[РезультатПоиска.ИмяТаблицы].Вставить(ЗначениеСвойства, РезультатПоиска.ПустоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Создает новый объект XDTO.
//
// Параметры:
//  ПространствоИмен - Строка - Пространство имен.
//  ИмяТипа - Строка - Имя типа в пространстве имен.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Созданный объект XDTO/
//
Функция ОбъектXDTO(ПространствоИмен, ИмяТипа) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа));
	
КонецФункции

// Устанавливает значение свойства объекта XDTO,
// с проверкой на наличие свойства и необходимость заполнения.
//
// Параметры:
//  ОбъектXDTO       - ОбъектXDTO   - объект в котором заполняется свойство
//  ИмяСвойства      - Строка       - имя свойства
//  ЗначениеСвойства - Произвольный - значение свойства
//  КешОшибок        - Структура    - см. ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки()
//  Расшифровки      - Структура    - см. ДанныеДляРасшифровкиОшибок()
//  ТребуетсяЗаполнить - Булево     - Признак необходимости заполнения свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если значение было заполнено
//
Функция ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, Расшифровки, ТребуетсяЗаполнить = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТребуетсяЗаполнить = Неопределено Тогда
		РазрешеноНеЗаполнять = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства).НижняяГраница = 0;
	Иначе
		РазрешеноНеЗаполнять = Не ТребуетсяЗаполнить;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеСвойства) <> Тип("ОбъектXDTO") И ТипЗнч(ЗначениеСвойства) <> Тип("СписокXDTO") Тогда
		Если Не ЗначениеЗаполнено(ЗначениеСвойства)
			И РазрешеноНеЗаполнять Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, Расшифровки);
	
	Возврат Истина;
	
КонецФункции

// Устанавливает значение свойства объекта XDTO (для списка - добавляет элемент в список), без проверок
//
// Параметры:
//  ОбъектXDTO       - ОбъектXDTO   - объект в котором заполняется свойство
//  ИмяСвойства      - Строка       - имя свойства
//  ЗначениеСвойства - Произвольный - значение свойства
//  КешОшибок        - Структура    - см ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки()
//  Расшифровки      - Структура    - см ДанныеДляРасшифровкиОшибок()
//
Процедура УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, Расшифровки) Экспорт
	
	Попытка
		Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
			ОбъектXDTO[ИмяСвойства].Добавить(ЗначениеСвойства);
		Иначе
			ОбъектXDTO[ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	Исключение
		ЧтениеXML = Новый Структура;
		ЧтениеXML.Вставить("Имя"                , ИмяСвойства);
		ЧтениеXML.Вставить("ЛокальноеИмя"       , ИмяСвойства);
		ЧтениеXML.Вставить("Значение"           , ЗначениеСвойства);
		ЧтениеXML.Вставить("ТипУзла"            , ТипУзлаXML.КонецЭлемента);
		ЧтениеXML.Вставить("URIПространстваИмен", ОбъектXDTO.Тип().URIПространстваИмен);
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПредставлениеОшибкиXDTO(ТекстОшибки, ЧтениеXML, Расшифровки);
		
		Если КешОшибок <> Неопределено Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(КешОшибок, ТекстОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает пользовательское представление ошибки
//
// Параметры:
//  ПредставлениеОшибки	 - Строка               - представление ошибки до обработки
//  ЧтениеXML            - ЧтениеXML, Структура - ошибочный узел данных
//  Расшифровки          - Структура            - см. ДанныеДляРасшифровкиОшибок()
// 
// Возвращаемое значение:
//  Строка - представление ошибки после обработки
//
Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Расшифровки) Экспорт
	
	Если СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Ошибка проверки данных XDTO'")) = 0
		И СтрНайти(ПредставлениеОшибки, НСтр("ru = 'Несоответствие типов XDTO'")) = 0 Тогда
		Возврат ПредставлениеОшибки;
	КонецЕсли;
	
	ЗначениеПоля = ЧтениеXML.Значение;
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		ЧтениеXML.Прочитать();
	КонецЕсли;
	
	Если Расшифровки.Таблица = Неопределено Тогда
		Расшифровки.Таблица = ПредставленияПолей(Расшифровки.ИмяМакета);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПространствоИмен", ЧтениеXML.URIПространстваИмен);
	Отбор.Вставить("ЛокальноеИмя",     ЧтениеXML.ЛокальноеИмя);
	
	МассивСтрок = Расшифровки.Таблица.НайтиСтроки(Отбор);
	
	СтрокаТаблицы = Неопределено;
	Если МассивСтрок.Количество() = 1 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	ИначеЕсли МассивСтрок.Количество() > 1 И НЕ Расшифровки.Глубина = Неопределено Тогда
		Отбор.Вставить("Глубина", Расшифровки.Глубина);
		МассивСтрокПоГлубине = Расшифровки.Таблица.НайтиСтроки(Отбор);
		Если МассивСтрокПоГлубине.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтрокПоГлубине[0];
		Иначе
			СтрокаТаблицы = МассивСтрок[0];
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ПредставлениеОшибки = НСтр("ru = 'Не заполнено значение поля ""%1"" (%2)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			Иначе
				ПредставлениеОшибки = НСтр("ru = 'Некорректное значение ""%1"" поля ""%2"" (%3)'");
				ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ЗначениеПоля, СтрокаТаблицы.Представление, ЧтениеXML.Имя);
			КонецЕсли;
		Иначе
			ИндексСтроки = Расшифровки.Таблица.Индекс(СтрокаТаблицы);
			
			Пока ИндексСтроки > 0 Цикл
				ПредыдущееПоле = Расшифровки.Таблица[ИндексСтроки - 1];
				Если ПредыдущееПоле.ПространствоИмен <> СтрокаТаблицы.ПространствоИмен Тогда
					Прервать;
				КонецЕсли;
				Если ПредыдущееПоле.Обязательное Тогда
					ПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""%1"" (%2)'");
					ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ПредыдущееПоле.Представление, ПредыдущееПоле.ЛокальноеИмя);
					Прервать;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

// Возвращает Объект XDTO, получаемый из текста сообщения XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращается значение свойства объекта XDTO при его наличии.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект для получения свойства.
//  ПутьКСвойству - Строка - Путь к свойству объекта, возможно разделенный точками (.).
// 
// Возвращаемое значение:
//  Неопределено, ОбъектXDTO, СписокXDTO, СвойствоXDTO, Строка, Число - Значение свойства объекта XDTO.
Функция ЗначениеСвойстваОбъектаXDTO(ОбъектXDTO, ПутьКСвойству) Экспорт
	
	ПутиКСвойству = СтрРазделить(ПутьКСвойству, ".");
	ТекущийОбъект = ОбъектXDTO;
	Для Каждого ТекущийПуть Из ПутиКСвойству Цикл
		СвойствоОбъекта = ТекущийОбъект.Свойства().Получить(ТекущийПуть);
		Если ТипЗнч(СвойствоОбъекта) = Тип("СвойствоXDTO") Тогда
			Если (СвойствоОбъекта.ВерхняяГраница = -1) Или (СвойствоОбъекта.ВерхняяГраница > 1) Тогда
				ТекущийОбъект = ТекущийОбъект.ПолучитьСписок(ТекущийПуть);
			Иначе
				ТекущийОбъект = ТекущийОбъект.Получить(ТекущийПуть);
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущийОбъект;
	
КонецФункции


// Функция - Данные для расшифровки ошибок
//
// Параметры:
//  ИмяМакета - Строка - макет в котором искать описание ошибки
//  Глубина   - Число  - уровень вложенности ошибки в макете
// 
// Возвращаемое значение:
//  Структура - из переданных параметров
//
Функция ДанныеДляРасшифровкиОшибок(ИмяМакета = Неопределено, Глубина = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяМакета", ИмяМакета);
	Результат.Вставить("Глубина",   Глубина);
	Результат.Вставить("Таблица",   Неопределено);
	Возврат Результат;
	
КонецФункции

// Функция возвращает пустую таблицу значений пользовательских представлений полей
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица (отсутствия пользовательской расшифровки полей)
//
Функция ПустаяТаблицаПредставленийПолей() Экспорт
	
	ТаблицаПредставлений = Новый ТаблицаЗначений;
	ТаблицаПредставлений.Колонки.Добавить("ПространствоИмен", Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлений.Колонки.Добавить("ЛокальноеИмя",     Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлений.Колонки.Добавить("Представление",    Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлений.Колонки.Добавить("Обязательное",     Новый ОписаниеТипов("Булево"));
	ТаблицаПредставлений.Колонки.Добавить("Глубина",          Новый ОписаниеТипов("Число"));
	Возврат ТаблицаПредставлений;
	
КонецФункции

// Функция возвращает таблицу значений пользовательских представлений полей из макета
//    Структура макета: Табличный документ с XML:
//     * Элементы (список): Items,
//       * Вложенный элемент списка: Item, с атрибутами соответствующими колонкам результата.
//
// Параметры:
//  ИмяМакета - Строка - имя общего макета из которого берутся представления
// Возвращаемое значение:
//  ТаблицаЗначений - см. ПустаяТаблицаПредставленийПолей()
//
Функция ПредставленияПолей(ИмяМакета)
	
	ТаблицаПредставлений = ПустаяТаблицаПредставленийПолей();
	
	Если ИмяМакета = Неопределено Тогда
		Возврат ТаблицаПредставлений;
	КонецЕсли;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда //пустой макет вполне валиден
		Возврат ТаблицаПредставлений;
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		СтрокаПредставления = ТаблицаПредставлений.Добавить();
		СтрокаПредставления.ПространствоИмен = ЧтениеXML.ПолучитьАтрибут("ПространствоИмен");
		СтрокаПредставления.ЛокальноеИмя     = ЧтениеXML.ПолучитьАтрибут("ЛокальноеИмя");
		СтрокаПредставления.Представление    = ЧтениеXML.ПолучитьАтрибут("Представление");
		СтрокаПредставления.Глубина          = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут("Глубина"));
		СтрокаПредставления.Обязательное     = Булево(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЧтениеXML.ПолучитьАтрибут("Обязательное")));
		
	КонецЦикла;
	
	ТаблицаПредставлений.Сортировать("ПространствоИмен Возр");
	
	Возврат ТаблицаПредставлений;
	
КонецФункции


#КонецОбласти

#Область ФорматированиеXML

// Инициализирует объект ПараметрыЗаписиXML.
//
// Параметры:
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
//  Кодировка           - Строка - Кодировка текста.
// 
// Возвращаемое значение:
//  ПараметрыЗаписиXML - набор параметров, который используется при записи XML.
//
Функция ПараметрыФорматированияXML(ИспользоватьОтступы = Истина, СимволОтступа = "  ", Кодировка = "UTF-8") Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиXML(
		Кодировка,
		"1.0",
		ИспользоватьОтступы,
		ИспользоватьОтступы,
		СимволОтступа);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Форматирует текст сообщения в формате XML
//
// Параметры:
//  ТекстСообщенияXML       - Строка - текст сообщения, который.
//  ПараметрыФорматирования - ПараметрыЗаписиXML - параметры записи XML.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Форматирует текст сообщения в формате XML
//
// Параметры:
//  ТекстСообщенияXML   - Строка - текст сообщения, который.
//  ИспользоватьОтступы - Булево - признак использования отступов, по умолчанию Истина.
//  СимволОтступа       - Строка - символ, которым отображается отступ, по умолчанию два пробела.
// 
// Возвращаемое значение:
//  Строка - отформатированная строка XML.
//
Функция ФорматироватьXML(ТекстСообщенияXML, ИспользоватьОтступы = Истина, СимволОтступа = " ") Экспорт
	
	ПараметрыФорматирования = ПараметрыФорматированияXML(ИспользоватьОтступы, СимволОтступа);
	
	Возврат ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования);
	
КонецФункции

#КонецОбласти

#КонецОбласти