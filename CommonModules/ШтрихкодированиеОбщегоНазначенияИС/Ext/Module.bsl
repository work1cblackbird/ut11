
#Область ПрограммныйИнтерфейс

#Область ПараметрыСканирования

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
//
// Параметры:
//  Контекст - Неопределено, Структура, ВыборкаИзРезультатаЗапроса, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - Форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
//
// Возвращаемое значение:
//  См. ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено, ПараметрыРежимаИсправленияОшибок = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.БазовыеПараметрыСканирования();
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ЗаполнитьПараметрыСканированияРасширенные(ПараметрыСканирования, Контекст);
	ПараметрыСканирования.ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции, ПараметрыРежимаИсправленияОшибок);
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыСканирования;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Определяет текст запроса получения признаков номенклатуры: 
//   * МаркируемаяПродукция,
//   * ВидПродукции.
// Помещает признаки во временную таблицу "СвойстваМаркируемойПродукции".
// 
// Параметры:
//  ТаблицаИсточник - Строка - имя временной таблицы запроса-источника данных.
// Возвращаемое значение:
//  Строка - Текст формирования временной таблицы запроса.
//
Функция ТекстЗапросаСвойстваМаркируемойПродукции(ТаблицаИсточник = "ДанныеШтрихкодовУпаковок") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура               КАК Номенклатура,
	|	МАКСИМУМ(ЛОЖЬ)                                      КАК МаркируемаяПродукция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ТаблицаИсточник КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточник", ТаблицаИсточник);
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапроса, ТаблицаИсточник);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняет обработку штрихкода и возвращает результат этой обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ВходящиеДанные - Структура - Исходные данные, включающие только значение штрихкода и количество,
//                               либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьВводШтрихкода(Форма, ВходящиеДанные, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = ОбщегоНазначения.СкопироватьРекурсивно(ВходящиеДанные);
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода, ТипЗнч(ВходящиеДанные) = Тип("Структура"));
	
	Если ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода)
		И (ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
		
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(ДанныеШтрихкода);
	
	ДанныеПоШтрихкодам    = ИнициализацияДанныхПоШтрихкодам();
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = Ложь;
	ДанныеПоШтрихкодам.ЭтоОбработкаВводаШтрихкода = Истина;
	
	НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	
	// Логирование исходного значения штрихкода со сканера
	ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования, ДанныеШтрихкодаСписок);
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования);
	
	ОбработатьШтрихкодыПоВскрытымПотребительскимУпаковкам(
		ДанныеПоШтрихкодам,
		ДанныеШтрихкодаСписок,
		ПараметрыСканирования,,
		ДанныеКодовМаркировки);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		
		Результат = ОбработатьОчисткуКэшаИОтложенныхКодов(ПараметрыСканирования, ДанныеКодовМаркировки, РезультатыПроверок);
		НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	// В режиме одиночного сканирования всегда должен быть только 1 результат обработки
	// иначе форма документа не сможет корректно обработать данные.
	ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(Форма) = Тип("УникальныйИдентификатор"));
	
	РезультатыОбработок = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, Форма, РезультатыПроверок);
	
	// Логирование результатов разбора штрихкода
	ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования, РезультатыОбработок);
	
	НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь);
	СохранитьАдресЛогаЗапросовПоСтрокам(ПараметрыСканирования, РезультатыОбработок, ДанныеПоШтрихкодам);
	
	//@skip-check constructor-function-return-section
	Возврат РезультатыОбработок[ДанныеКодовМаркировки[0].Штрихкод];
	
КонецФункции

// Заполняет таблицу "ДанныеКодовМаркировки" данными разбора кода и сведениями по номенклатуре на основании штрихкода EAN,
// входящего в состав кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  СписокДанныхШтрихкода - Массив Из Структура.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КешДанныхРазбора - Неопределено, Соответствие из КлючИЗначение - Известный кешированный результат разбора кодов маркировки
Процедура ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, СписокДанныхШтрихкода, ПараметрыСканирования, КешДанныхРазбора = Неопределено) Экспорт
	
	ЗаполнитьДанныеКодовМаркировкиВходящимиДанными(ДанныеПоШтрихкодам, СписокДанныхШтрихкода, ПараметрыСканирования);
	НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, КешДанныхРазбора);
	ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьСведенияПоШтрихкодамEANСУчетомВерсии(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

Процедура ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	МассивСтрокКЗаполнению = Новый Массив;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И (Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
				Или СтрокаДанных.МаркируемаяПродукция = Неопределено
				// Поддержка переходного периода: АТП, эмиттированные как табак
				Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак)
			Или (ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И СтрокаДанных.МаркируемаяПродукция = Неопределено) Тогда
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаДанных.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаДанных.Характеристика;
			МассивСтрокКЗаполнению.Добавить(СтрокаДанных);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.ЭтоКодВводаОстатков
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 Тогда
			СтрокаДанных.ВидПродукции = СтрокаДанных.ВидыПродукцииКодаМаркировки[0];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеПоВидуПродукции.Номенклатура         КАК Номенклатура,
	|	ДанныеПоВидуПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
	|	ДанныеПоВидуПродукции.ВидПродукции         КАК ВидПродукции,
	|	&ТребуетВзвешивания                        КАК ТребуетВзвешивания,
	|	&ПроизвольнаяЕдиницаУчета                  КАК ПроизвольнаяЕдиницаУчета
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ПутьКИсточникуОписания КАК ОписаниеИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(
		Запрос.Текст,
		"ОписаниеИС",
		"ДанныеПоВидуПродукции.Номенклатура",
		"РегистрСведений.ОписаниеНоменклатурыИС");
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаНоменклатуры);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	ТаблицаНоменклатуры.Индексы.Добавить("Номенклатура");
	
	ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ПроверятьСтруктуруКодовМаркировки") Тогда
		ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	Иначе
		ПроверятьСтруктуруКодовМаркировки = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ЭтоМаркировкаТоваровИСМП") Тогда
		ЭтоМаркировкаТоваровИСМП = ПараметрыСканирования.ЭтоМаркировкаТоваровИСМП;
	Иначе
		ЭтоМаркировкаТоваровИСМП = Ложь;
	КонецЕсли;
	
	ОбщиеМодули = Неопределено;
	НастройкиРазбора = Неопределено;
	ДанныеКодовМаркировкиДляПерезаполнения = Новый Массив;
	
	Для Каждого СтрокаДанных Из МассивСтрокКЗаполнению Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаДанных.Номенклатура);
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки <> Неопределено Тогда
			
			НайденнаяСтрока = НайденныеСтроки[0];
			
			СтрокаДанных.ВидПродукции             = НайденнаяСтрока.ВидПродукции;
			СтрокаДанных.МаркируемаяПродукция     = НайденнаяСтрока.МаркируемаяПродукция;
			СтрокаДанных.ТребуетВзвешивания       = НайденнаяСтрока.ТребуетВзвешивания;
			СтрокаДанных.ПроизвольнаяЕдиницаУчета = НайденнаяСтрока.ПроизвольнаяЕдиницаУчета;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.ВидПродукции = СтрокаДанных.ВидПродукции;
			КонецЕсли;
			
			Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
				И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам Тогда
				
				РезультатыРазборы = Новый Массив;
				Для Каждого РезультатРазбора Из СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
					
					Если РезультатРазбора.ВидыПродукции.Найти(СтрокаДанных.ВидПродукции) <> Неопределено Тогда
						РезультатыРазборы.Добавить(РезультатРазбора);
					КонецЕсли;
					
				КонецЦикла;
				
				Если РезультатыРазборы.Количество() = 1 Тогда
					
					Если НастройкиРазбора = Неопределено Тогда
						
						ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
						ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = Истина;
						ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = Не ЭтоМаркировкаТоваровИСМП;
						
						НастройкиРазбора = Новый Структура;
						НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
						НастройкиРазбора.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки());
						НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
						
						ОбщиеМодули = ОбщиеМодулиПодсистем();
						
					КонецЕсли;
					
					ПримечаниеКРазборуШтрихкода = Неопределено;
					ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
						СтрокаДанных.Штрихкод, НастройкиРазбора.Кеш, СтрокаДанных.ВидПродукции, ПримечаниеКРазборуШтрихкода,
						НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
					
					Если ДанныеРазбора <> Неопределено Тогда
						
						СтрокаДанных.ДанныеРазбора = ДанныеРазбора;
						СтрокаДанных.ПримечаниеКРазборуШтрихкода = ПримечаниеКРазборуШтрихкода;
						
						ДанныеКодовМаркировкиДляПерезаполнения.Добавить(СтрокаДанных);
						
						ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули);
						
						// Восстанавливать структуру кода маркировки
						Если Не ПроверятьСтруктуруКодовМаркировки
							И ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
							
							//@skip-check wrong-string-literal-content
							МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
							МодульШтрихкодированиеИСМП.ПроверитьПолныйКодМаркировкиПоДаннымРазбора(
								СтрокаДанных.ДанныеРазбора, СтрокаДанных, ПараметрыСканирования);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеКодовМаркировкиДляПерезаполнения.Количество() Тогда
		ЗаполнитьСведенияПоШтрихкодамEANСУчетомВерсии(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировкиДляПерезаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, ВидПродукции, ПараметрыСканирования, ОбщиеМодули = Неопределено) Экспорт
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	ПримечаниеКРазборуШтрихкода = СтрокаДанных.ПримечаниеКРазборуШтрихкода;
	
	Если ПримечаниеКРазборуШтрихкода <> Неопределено 
		И ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам
		Тогда
		
		Для Каждого ДанныеРазбора Из ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
			Если ДанныеРазбора.ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
				СтрокаДанных.ДанныеРазбора = ДанныеРазбора;
				ДанныеРазбора.Свойство("СоставКодаМаркировки", СтрокаДанных.СоставКодаМаркировки);
				
				Если ОбщиеМодули = Неопределено Тогда
					ОбщиеМодули = ОбщиеМодулиПодсистем();
				КонецЕсли;
				
				ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули);
				
				Если ОбщегоНазначенияИС.ПодсистемаСуществует("ИСМП") Тогда
					МодульОбщегоНазначенияИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
					МодульОбщегоНазначенияИСМП.ПроверитьПолныйКодМаркировкиПоДаннымРазбора(СтрокаДанных.ДанныеРазбора, СтрокаДанных, ПараметрыСканирования);
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет информацию по EAN кодов маркировки по данным ИБ. Информация помещается в таблицу ДанныеПоШтрихкодам.ДанныеКодовМаркировки.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  ДанныеКодовМаркировки - см. ИнициализацияТаблицыДанныхКодовМаркировки
Процедура ЗаполнитьСведенияПоШтрихкодамEANСУчетомВерсии(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		ЗаполнитьСведенияПоШтриходамДаннымПулаGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования);
		Возврат;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыEAN                  = Новый Массив;
	ДопустимаТабачнаяПродукция    = ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП        = ДопустимаПродукцияИСМП(ПараметрыСканирования);
	ДопустимаАлкогольнаяПродукция = ДопустимаАлкогольнаяПродукция(ПараметрыСканирования);
	ЗапрашиватьДанныеСервисаИСМП  = Ложь;
	ОбщиеМодули                   = Неопределено;
	
	Если ДопустимаТабачнаяПродукция Или ДопустимаПродукцияИСМП Тогда
		Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив") Тогда
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
		Иначе
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
		КонецЕсли;
		ЗапрашиватьДанныеСервисаИСМП = ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция Тогда
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМПСлужебный.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаАлкогольнаяПродукция
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	УникальныеШтрихкодыEAN = Новый Соответствие;
	GTINПотребительскихУпаковок = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ЭтоКодВводаОстатков И Не ПараметрыСканирования.РежимБРМК Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			// Код маркировки алкогольной продукции
			Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено
			Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			СтрокаДанных.ТребуетсяСопоставление = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДанных.EAN) И ПустаяСтрока(СтрокаДанных.GTIN) Тогда
			ШтрихкодДляПоиска = СтрокаДанных.Штрихкод;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				СтрокаДанных.EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаДанных.GTIN);
			КонецЕсли;
			ШтрихкодДляПоиска = СтрокаДанных.EAN;
		КонецЕсли;
		
		Если УникальныеШтрихкодыEAN[ШтрихкодДляПоиска] = Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
			УникальныеШтрихкодыEAN.Вставить(ШтрихкодДляПоиска, Истина);
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] = Неопределено Тогда
			GTINПотребительскихУпаковок.Вставить(СтрокаДанных.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ИнформацияПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	
	ШаблоныГрупповыхУпаковок = Новый Соответствие;
	ШаблоныНаборов = Новый Соответствие;
	ШаблоныГрупповыхУпаковокИНаборов = Новый Соответствие;
	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ИСМП") Тогда
		МодульИнтеграцияИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер");
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
			ШаблоныГрупповыхУпаковок.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
		КонецЦикла;
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныНаборов() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
			ШаблоныНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ТребуетсяСопоставление = Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или СтрокаДанных.ТребуетсяСопоставление;
		
		ЗначениеПоиска = ?(ЗначениеЗаполнено(СтрокаДанных.EAN), СтрокаДанных.EAN, СтрокаДанных.Штрихкод);
		
		Если ЗначениеЗаполнено(СтрокаДанных.EAN) Тогда
			EAN  = СтрокаДанных.EAN;
			GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
		Иначе
			EAN  = "";
			GTIN = "";
			Если РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеПоиска) Тогда
				EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(ЗначениеПоиска);
				Если ЗначениеЗаполнено(EAN) Тогда
					GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		UPC = Неопределено;
		Если Лев(EAN, 1) = "0"
			И СтрДлина(EAN) = 13 Тогда
			UPC = Сред(EAN, 2);
		КонецЕсли;
		
		ЭтоШтрихкодНоменклатуры = Ложь;
		Если СтрокаДанных.Штрихкод = ЗначениеПоиска
			Или СтрокаДанных.Штрихкод = EAN
			Или СтрокаДанных.Штрихкод = ("00000" + EAN) // Считан код EAN8 в формате EAN13
			Или СтрокаДанных.Штрихкод = GTIN
			Или СтрокаДанных.Штрихкод = UPC Тогда
			ЭтоШтрихкодНоменклатуры = Истина;
		КонецЕсли;
		
		РезультатПоискаУникален                = Неопределено;
		ВидПродукцииУникален                   = Неопределено;
		ПодменныеНоменклатурыЧастичногоВыбытие = Новый ТаблицаЗначений();
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("Номенклатура",                   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("Характеристика",                 Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Индексы.Добавить("Номенклатура,Характеристика");
		
		НайденныеШтрихкодыEAN = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", ЗначениеПоиска));
		ВариантовВыбора = НайденныеШтрихкодыEAN.Количество();
		
		Для Каждого СтрокаИнформации Из НайденныеШтрихкодыEAN Цикл
			
			// Штрихкоды не требующие обработки библиотекой
			Если СтрокаИнформации.ТребуетсяОбработкаШтрихкода Тогда
				СтрокаДанных.ТребуетсяОбработкаШтрихкода = Истина;
				СтрокаДанных.ДополнительныеПараметры = СтрокаИнформации.ДанныеШтрихкода;
				Прервать;
			// Внешние по отношению к ГосИС данные штрихкодов (все)
			ИначеЕсли ЗначениеЗаполнено(СтрокаИнформации.ДанныеШтрихкода) Тогда
				СтрокаДанных.ВнешниеДанныеПоШтрихкодам.Добавить(СтрокаИнформации.ДанныеШтрихкода);
			КонецЕсли;
			
			Если ТребуетсяСопоставление Тогда
				ВариантовВыбора = ВариантовВыбора - 1;
				// Если вариантов выбора несколько - отфильтруем подходящие. Если не подходят все - оставим 1 для вывода ошибки
				Если Не (РезультатПоискаУникален = Неопределено И ВариантовВыбора = 0) Тогда
					// Маркируемая продукция
					Если ПараметрыСканирования.ТолькоМаркируемаяПродукция
						И Не СтрокаИнформации.МаркируемаяПродукция Тогда
						Продолжить;
					// Соответствие пулу
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ЕстьВПулеКодовМаркировки")
						И СтрокаДанных.ЕстьВПулеКодовМаркировки
							И ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
							И (РезультатПоискаУникален = Истина
								Или СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
								Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика) Тогда
						Продолжить;
					ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
							И Не ЭтоШтрихкодНоменклатуры
							И ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(СтрокаИнформации.ВидПродукции) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатПоискаУникален = Неопределено Тогда
					РезультатПоискаУникален = Истина;
				ИначеЕсли РезультатПоискаУникален = Истина Тогда
					РезультатПоискаУникален = СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура
						И СтрокаДанных.Характеристика = СтрокаИнформации.Характеристика
						И СтрокаДанных.Серия = СтрокаИнформации.Серия;
				КонецЕсли;
				
				Если ВидПродукцииУникален = Неопределено Тогда
					ВидПродукцииУникален = Истина;
				ИначеЕсли ВидПродукцииУникален = Истина Тогда
					ВидПродукцииУникален = СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если (Не ЗапрашиватьДанныеСервисаИСМП
					И ПараметрыСканирования.РасширеннаяВерсияГосИС
					И СтрокаДанных.НоменклатураСопоставленаПоУПД)
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
						СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
						СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						Иначе 
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// Флаг взводится, если вид упаковки определен по данным ЭДО
				СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаДанных.ОбработатьБезМаркировки Тогда
				// Количество будет заполнено пользователем в форме уточнения данных
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции, ПлановоеКоличествоПотребительскихУпаковок, Коэффициент");
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИнформации.ВидПродукции) Тогда
				
				Если СтрокаДанных.ВидПродукции <> СтрокаИнформации.ВидПродукции Тогда
					УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, СтрокаИнформации.ВидПродукции, ПараметрыСканирования, ОбщиеМодули);
				КонецЕсли;
				
				СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) 
				И СтрокаДанных.ДанныеРазбора = Неопределено Тогда
				
				УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, СтрокаДанных.ВидПродукции, ПараметрыСканирования, ОбщиеМодули);
				
				Если СтрокаДанных.ДанныеРазбора <> Неопределено
					И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС)
					И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
					И РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
						СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
					
					СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
					Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
						СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
					Иначе 
						СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаИнформации.Весовой Тогда
				СтрокаДанных.Количество = СтрокаИнформации.Количество;
			ИначеЕсли СтрокаИнформации.ТребуетВзвешивания Тогда
				СтрокаДанных.Количество = 0;
			КонецЕсли;
			
			Если СтрокаДанных.EAN = "" Тогда
				СтрокаДанных.EAN = EAN;
			КонецЕсли;
			
			Если ЭтоШтрихкодНоменклатуры Тогда
				
				СтрокаДанных.ЭтоШтрихкодНоменклатуры = Истина;
				СтрокаДанных.Идентифицирован         = Истина;
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Вид продукции определен по команде Добавить без кода маркировки в форме проверки и подбора
				Иначе
					ТипШтрихкодаСтрока = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(СтрокаДанных.Штрихкод);
					СтрокаДанных.ТипШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрока);
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				СтрокаДанных.Идентифицирован = Истина;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = 1;
				КонецЕсли;
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
					СтрокаДанных.ДополнительныеПараметры = Новый Структура;
				КонецЕсли;
				СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", СтрокаИнформации.ВидУпаковкиИС);
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетВзвешивания
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("МассаНеттоВКг")
				И СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг <> Неопределено Тогда
				СтрокаДанных.Количество = СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг;
			КонецЕсли;
			
			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
				И Не СтрокаДанных.ТребуетВзвешивания
				И ЗначениеЗаполнено(СтрокаДанных.Коэффициент) Тогда
				СтрокаДанных.Количество = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяСопоставление = Ложь;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаИнформации);
				СтрокаДанных.СтрокаДерева.Коэффициент = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			Если ТребуетсяСопоставление Тогда
				ДанныеУточнения = Новый Структура("Номенклатура, Характеристика, Серия, Упаковка, ПредставлениеНоменклатуры");
				ЗаполнитьЗначенияСвойств(ДанныеУточнения, СтрокаИнформации);
				СтрокаДанных.СписокНоменклатуры.Добавить(ДанныеУточнения);
				//@skip-check query-in-loop
				Если ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
					И СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
					СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
					Если ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
						НоваяСтрока = ПодменныеНоменклатурыЧастичногоВыбытие.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПодменныеНоменклатурыЧастичногоВыбытие.Количество() Тогда
			
			УдаляемыеЭлементыСпискаНоменклатуры = Новый Массив;
			Для Каждого ЭлементСписка Из СтрокаДанных.СписокНоменклатуры Цикл
				СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
				СтруктураПоиска.ЧастичноеВыбытиеНоменклатура   = ЭлементСписка.Номенклатура;
				СтруктураПоиска.ЧастичноеВыбытиеХарактеристика = ЭлементСписка.Характеристика;
				СтрокиПодменнойНоменклатуры = ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПодменнойНоменклатуры.Количество() > 0 Тогда
					УдаляемыеЭлементыСпискаНоменклатуры.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементыСпискаНоменклатуры Цикл
				СтрокаДанных.СписокНоменклатуры.Удалить(СтрокаДанных.СписокНоменклатуры.Найти(УдаляемыйЭлемент));
			КонецЦикла;
			Если РезультатПоискаУникален = Ложь И СтрокаДанных.СписокНоменклатуры.Количество() <= 1 Тогда
				РезультатПоискаУникален = Истина;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
			СтруктураПоиска.ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.Номенклатура;
			СтруктураПоиска.ЧастичноеВыбытиеХарактеристика = СтрокаДанных.Характеристика;
			СтрокиПодменнойНоменклатуры = ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодменнойНоменклатуры.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокиПодменнойНоменклатуры[0]);
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатПоискаУникален = Ложь Тогда
			
			СтрокаДанных.Номенклатура   = Неопределено;
			СтрокаДанных.Характеристика = Неопределено;
			СтрокаДанных.Серия          = Неопределено;
			СтрокаДанных.Упаковка       = Неопределено;
			
			ИменаКолонокЗаполнения = "Номенклатура, Характеристика, Серия, Упаковка";
			//@skip-check query-in-loop
			Если ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета   = Неопределено;
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеНоменклатура   = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеХарактеристика = Неопределено;
				ИменаКолонокЗаполнения = ИменаКолонокЗаполнения + ", ЧастичноеВыбытиеВариантУчета, ЕмкостьПотребительскойУпаковки, ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика";
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, ИменаКолонокЗаполнения);
			КонецЕсли;
			
			СтрокаДанных.ПредставлениеНоменклатуры = СтрШаблон(
				НСтр("ru = '%1 ( + еще %2 )'"),
				Лев(СтрокаДанных.СписокНоменклатуры[0].ПредставлениеНоменклатуры, 20),
				СтрокаДанных.СписокНоменклатуры.Количество() - 1);
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				СтрокаДанных.СтрокаДерева.СписокНоменклатуры = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаДанных.СписокНоменклатуры, Истина);
			КонецЕсли;
			
		Иначе
			СтрокаДанных.СписокНоменклатуры.Очистить();
		КонецЕсли;
		
		Если ВидПродукцииУникален = Ложь Тогда
			
			СтрокаДанных.ВидПродукции = Неопределено;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидПродукции");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			И СтрокаДанных.ДанныеРазбора <> Неопределено
			И СтрокаДанных.КоличествоПотребительскихУпаковок > 1
			И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
			СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияИКонструкторыДанных

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент).
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
//  Структура - Описание:
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции ИС.
//   * ИзмененныеСтроки - Массив Из СтрокаТабличнойЧасти - Строки документа, которые были изменены в процессе обработки штрихкодов.
//   * ДобавленныеСтроки - Массив Из СтрокаТабличнойЧасти - Строки документа, которые были добавлены в процессе обработки штрихкодов.
//   * ДополнительныеПараметры - Неопределено -
//   * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
//   * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
//   * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
//   * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
//   * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
//   * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
//   * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
//   * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
//   * ТребуетсяВыборСерии - Булево - Признак, указывающий на необходимость выбора серии
//   * ТребуетсяУточнениеДанных - Булево - Признак, указывающий необходимость уточнения
//   * ТребуетсяУточнениеКоэффициентовУпаковок - Булево - Признак, указывающий необходимость уточнения коэффициентов упаковок
//   * ТребуетсяУточнениеСоставаУпаковки - Булево - Признак, указывающий необходимость уточнения состава упаковки
//   * ТребуетсяПроверкаСредствамиККТ - Булево - Признак проверки на ККТ
//   * ПроверкаСредствамиККТЗавершена - Булево - Проверка ККТ завершена
//   * ВложенныеШтрихкодыДляПроверкиККТ - Массив Из см. ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер.НовыйЭлементПроверкиСредствамиККТПоДаннымШтрихкода
//   * ОткрытьФормуВводаКодаМаркировки - Булево
//   * ПараметрыУточненияДанных - Структура - Параметры уточнения
//   * ИспользоватьОбработкуНаКлиенте - Булево
//   * ОбработкаШтрихкодаБезМарки - Булево
//   * ПараметрыВыбораНоменклатуры - Структура - Параметры, участвующие в отборе при выборе номенклатуры в диалоговом окне.
//   * ПараметрыОшибки - Неопределено
//   * ЕстьОшибки - Булево
//   * ЕстьОшибкиВДеревеУпаковок - Булево
//   * ОбщаяОшибка - Булево
//   * ОшибкаДопустимостиВидовПродукции - Булево
//   * ТребуетсяПерезаписьШтрихкодаУпаковки - Булево
//   * АдресУточнениеКоэффициентовУпаковок - Строка
//   * ДанныеШтрихкода - Структура -
Функция ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		ВидыПродукции = Новый Массив;
		ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры",       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",               Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",              Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",                 Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеКоэффициентовУпаковок",  Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеСоставаУпаковки",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВскрытиеПотребительскойУпаковки", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяПроверкаСредствамиККТ",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ПроверкаСредствамиККТЗавершена",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ВложенныеШтрихкодыДляПроверкиККТ",         Новый Массив());
	
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("ДанныеШтрихкода",                    ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Неявное уточнение веса
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяПерезаписьШтрихкодаУпаковки", Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", Перечисления.ТипыШтрихкодов.ПустаяСсылка());
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  Перечисления.ТипыУпаковок.ПустаяСсылка());
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  "");
	
	РезультатОбработкиШтрихкода.Вставить("ПараметрыОшибки",                  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",                 "");
	РезультатОбработкиШтрихкода.Вставить("АдресУточнениеКоэффициентовУпаковок", "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",  Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",     Новый Массив);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;
	
	Если ПрисутствуетАлкогольнаяПродукция(ВидыПродукции)Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);
		
	КонецЕсли;
	
	Если ПрисутствуетПродукцияИСМП(ВидыПродукции) Или ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода, ПараметрыСканирования);
	
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Данные, заполняемые в процессе обработки штрихкодов
// 
// Параметры:
//  ИндексироватьТаблицы - Булево - Индексировать таблицы
// 
// Возвращаемое значение:
//  Структура -- сводные данные по штрихкодам:
//		* ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС
//		* ПрисутствуетТабачнаяПродукция - Булево
//		* ДанныеКодовМаркировки - см. ИнициализацияТаблицыДанныхКодовМаркировки
//		* ВложенныеШтрихкоды - Неопределено,
//		* ДеревоПоДаннымСервиса - Неопределено, 
//		* СведенияОбОрганизациях - Неопределено, 
//		* ПредставленияСтатусовИСМП - Неопределено, 
//		* ТребуетсяЧастичноеВыбытиеИСМП - Неопределено, 
//		* ОтключитьЗапросВСервисПоОперацииИПродукции - Булево
//		* ЕстьОшибкиВДеревеУпаковок - Булево
//		* ЕстьОшибки - Булево
//		* ТребуетсяОбновлениеКлючаСессии - Булево
//		* ТребуетсяОбновлениеКлючаСессииРозница - Булево
//		* ОшибкаДопустимостиВидовПродукции - Булево
//		* ЕстьКодыМаркировкиВводаОстатков - Булево
//		* ТекстОшибки - Строка
//		* ТребуетсяСопоставление - Булево
//		* ЭтоСканированиеВФормеПроверкиИПодбора - Булево
//		* ЭтоОбработкаВводаШтрихкода - Булево
//		* ИерархическаяЗагрузкаИзТСД - Булево
//		* ЗаменыШтрихкодов - Неопределено, 
//		* УточнитьУПользователя - Массив Из Строка
//		* СтрокиДляСохраненияКодовМаркировки - Соответствие из КлючИЗначение
//		* ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN - Булево
//		* ЛогированиеЗапросов - Структура:
//			** Используется - Булево
//			** ИдентификаторЛога - Неопределено, Строка - 
//			** АдресЛогаЗапросов - Неопределено, Строка - 
Функция ИнициализацияДанныхПоШтрихкодам(ИндексироватьТаблицы = Истина) Экспорт
	
	ДанныеПоШтрихкодам = Новый Структура;
	
	ДанныеПоШтрихкодам.Вставить("ВидыПродукции", Новый Массив);
	// Используется если вид продукции АТП или классический табак будет определен познее
	ДанныеПоШтрихкодам.Вставить("ПрисутствуетТабачнаяПродукция", Ложь);
	
	ДанныеПоШтрихкодам.Вставить("ДанныеКодовМаркировки",     ИнициализацияТаблицыДанныхКодовМаркировки(ИндексироватьТаблицы));
	ДанныеПоШтрихкодам.Вставить("ВложенныеШтрихкоды",        Неопределено);
	ДанныеПоШтрихкодам.Вставить("ДеревоПоДаннымСервиса",     Неопределено);
	ДанныеПоШтрихкодам.Вставить("СведенияОбОрганизациях",    Неопределено);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяЧастичноеВыбытиеИС", Неопределено);
	
	// ИСМП
	ДанныеПоШтрихкодам.Вставить("ПредставленияСтатусовИСМП",                  Неопределено);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеCDNПлощадок",             Ложь);
	ДанныеПоШтрихкодам.Вставить("ОтсутствуютCDNПлощадки",                     Ложь);
	ДанныеПоШтрихкодам.Вставить("ОтключитьЗапросВСервисПоОперацииИПродукции", Ложь);
	
	// Ошибки
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибкиВДеревеУпаковок",             Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибки",                            Ложь);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеКлючаСессии",        Ложь);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ДанныеПоШтрихкодам.Вставить("ОшибкаДопустимостиВидовПродукции",      Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьКодыМаркировкиВводаОстатков",       Ложь);
	ДанныеПоШтрихкодам.Вставить("ТекстОшибки",                           "");
	
	ДанныеПоШтрихкодам.Вставить("ТребуетсяСопоставление",           Ложь);
	
	ДанныеПоШтрихкодам.Вставить("ЭтоСканированиеВФормеПроверкиИПодбора", Ложь);
	ДанныеПоШтрихкодам.Вставить("ЭтоОбработкаВводаШтрихкода",            Ложь);
	
	// ТСД
	ДанныеПоШтрихкодам.Вставить("ИерархическаяЗагрузкаИзТСД", Ложь);
	ДанныеПоШтрихкодам.Вставить("ЗаменыШтрихкодов",           Неопределено);
	
	// Уточнения
	ДанныеПоШтрихкодам.Вставить("УточнитьУПользователя",              Новый Массив);
	ДанныеПоШтрихкодам.Вставить("СтрокиДляСохраненияКодовМаркировки", Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN", Истина);
	
	// Логирование запросов
	ДанныеПоШтрихкодам.Вставить("ЛогированиеЗапросов", Новый Структура());
	ДанныеПоШтрихкодам.ЛогированиеЗапросов.Вставить("Используется",      Ложь);
	ДанныеПоШтрихкодам.ЛогированиеЗапросов.Вставить("ИдентификаторЛога", Неопределено);
	ДанныеПоШтрихкодам.ЛогированиеЗапросов.Вставить("АдресЛогаЗапросов", Неопределено);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Иинициализация таблицы данных кода маркировки. В данную таблицу собирается вся информация по введенному штрихкоду.
// 
// Параметры:
//  ИндексироватьТаблицы - Булево - Индексировать таблицы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодBase64 - Строка - Штрихкод, закодированный по алгоритму BASE64.
// * Штрихкод - Строка - Значение штрихкода.
// * EAN - Строка - Штрихкод в формате EAN.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * Упаковка - ОпределяемыйТип.Упаковка - Упаковка.
// * Коэффициент - Число - количество маркируемой продукции в типовой упаковке с известным GTIN.
// * КоличествоПотребительскихУпаковок - Число - количество индивидуальных потребительских упаковок в текцущей
// * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
// * ВидыПродукцииКодаМаркировки - Массив из ПеречислениеСсылка.ВидыПродукцииИС - список видов продукции кода маркировки.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
// * МаркируемаяПродукция - Булево - Истина, если продукция имеет марку.
// * Идентифицирован - Булево - Истина, если по коду маркировки удалось найти или создать элемент справочника "Штрихкоды упаковок товаров".
// * ТребуетсяСопоставление - Булево - Истина, если по штрихкоду EAN не найдена номенклатура и требуется сопоставить штрихкод номенклатуре.
// * ТребуетсяОбработкаШтрихкода - Булево - Истина, если штрихкод EAN требуется обработать вне библиотеки (например это не номенклатура).
// * СписокНоменклатуры - Массив из Структура - 
// * ВнешниеДанныеПоШтрихкодам - Массив из Структура - произвольные данные, которые были получены по штрихкодам
// * Входящий - Булево - Истина, если данный штрихкод был передан для обработки.
// * ЭтоШтрихкодНоменклатуры - Булево - Истина, если введенный штрихкод является штрихкодом номенклатуры.
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки штрихкода.
// * СоставКодаМаркировки - (См. РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки).
// * ЭтоКодВводаОстатков - Булево - Истина, если штрихкод является штрихкодом ввода остатков.
// * ОбработатьБезМаркировки - Булево - Истина, если номенклатуру с кодом маркировки требуется обработать без учета марки.
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * ТекстОшибки - Строка - текст ошибки обработки штрихкода.
// * ДополнительныеПараметры - Произвольный - дополнительные параметры.
// * Количество - Число - количество товара в базовых ед. изм. по коду маркировки
// * ТребуетВзвешивания - Булево - признак "Потребительские упаковки номенклатуры требуют индивидуального взвешивания"
// * ПроизвольнаяЕдиницаУчета - Булево - признак "Индивидуальный КМ не соответствует единице учета"
Функция ИнициализацияТаблицыДанныхКодовМаркировки(ИндексироватьТаблицы = Истина) Экспорт
	
	ДанныеКодовМаркировки = Новый ТаблицаЗначений;
	
	ДанныеКодовМаркировки.Колонки.Добавить("ШтрихкодBase64",            Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("Штрихкод",                  Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("EAN",                       Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Серия",                     Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Упаковка",                  Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеКодовМаркировки.Колонки.Добавить("Коэффициент",                               Новый ОписаниеТипов("Булево, Число", Новый КвалификаторыЧисла(18,8,ДопустимыйЗнак.Неотрицательный)));
	ДанныеКодовМаркировки.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
	ДанныеКодовМаркировки.Колонки.Добавить("Количество",                        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДанныеКодовМаркировки.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ДанныеКодовМаркировки.Колонки.Добавить("ПредставлениеНоменклатуры",         Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ПредставлениеНоменклатурыРР",       Новый ОписаниеТипов("Строка")); // для логирования представления номенклатуры разрешительного режима
	
	ДанныеКодовМаркировки.Колонки.Добавить("ВидПродукции",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидыПродукцииКодаМаркировки",   Новый ОписаниеТипов("Массив"));
	// Требуется если в текущий момент нет возможности определить вид продукции: АТП или классический табак
	ДанныеКодовМаркировки.Колонки.Добавить("ПрисутствуетТабачнаяПродукция", Новый ОписаниеТипов("Булево"));
	
	ДанныеКодовМаркировки.Колонки.Добавить("МаркируемаяПродукция",        Новый ОписаниеТипов("Число, Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетВзвешивания",          Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("Идентифицирован",             Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяСопоставление",                                            Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN", Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяОбработкаШтрихкода",                                       Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяВыборСерии",                                               Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("СписокНоменклатуры",          Новый ОписаниеТипов("Массив"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВнешниеДанныеПоШтрихкодам",   Новый ОписаниеТипов("Массив"));
	ДанныеКодовМаркировки.Колонки.Добавить("Входящий",                    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ЭтоШтрихкодНоменклатуры",     Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ВидУпаковки",                 Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеКодовМаркировки.Колонки.Добавить("СоставКодаМаркировки",        Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("ЭтоКодВводаОстатков",         Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("СтрокаДерева",                Неопределено); // Основное дерево упаковок
	ДанныеКодовМаркировки.Колонки.Добавить("ПримечаниеКРазборуШтрихкода", Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("РодительскаяУпаковка",        Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ДанныеРазбора",               Неопределено);
	ДанныеКодовМаркировки.Колонки.Добавить("GTINПотребительскойУпаковки", Метаданные.ОпределяемыеТипы.GTIN.Тип); // Для заполнения группы ОСУ
	
	// Для поиска КМ без учета МРЦ
	ДанныеКодовМаркировки.Колонки.Добавить("НормализованныйШтрихкод",     Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ХешСуммаНормализации",        Новый ОписаниеТипов("Строка"));
	
	// Для отказа от обработанных и необработанных ШК
	ДанныеКодовМаркировки.Колонки.Добавить("ОбработатьБезМаркировки",     Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТипУпаковки",                 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТипШтрихкода",                Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ДанныеКодовМаркировки.Колонки.Добавить("ТекстОшибки",                 Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("ПараметрыОшибки",             Неопределено);
	
	ДанныеКодовМаркировки.Колонки.Добавить("ДополнительныеПараметры",     Неопределено);
	
	// Проверки не пройдены, дальнейшая обработка не требуется
	ДанныеКодовМаркировки.Колонки.Добавить("ОбработанСОшибками",          Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировки.Колонки.Добавить("АдресЛогаЗапросов",           Новый ОписаниеТипов("Строка"));
	
	// Произошло уточнение кода маркировки на клиенте требующее перезаписи штрихкода упаковки
	ДанныеКодовМаркировки.Колонки.Добавить("ТребуетсяОбновлениеШтрихкода", Новый ОписаниеТипов("Булево"));
	
	// Идентификатор запроса ГИС МТ при розничной продаже определенных товарных групп
	ДанныеКодовМаркировки.Колонки.Добавить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("РазрешительныйРежимДатаЗапросаГИСМТ",          Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("РазрешительныйРежимАдресСервера",              Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("РазрешительныйРежимТелоЗапросаJSON",           Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("РазрешительныйРежимТелоОтветаJSON",            Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировки.Колонки.Добавить("РазрешительныйРежимКодОтвета",                 Новый ОписаниеТипов("Строка"));
	
	ДанныеКодовМаркировки.Колонки.Добавить("КонтролиРазрешительногоРежима",                Новый ОписаниеТипов("Массив"));
	
	Если ИндексироватьТаблицы Тогда
		ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеКодовМаркировки);
	КонецЕсли;
	
	ДополнитьКолонкамиРасширеннойВерсииРазбора(ДанныеКодовМаркировки);
	
	Возврат ДанныеКодовМаркировки;
	
КонецФункции

// Формирует структура параметров, необходимую для выполнения действия и заполняет ее
// (См. ВыполнитьДействие).
//
// Параметры:
//  РезультатВыбора - Произвольный - Результат уточнения информации у пользователя
//  РезультатОбработкиШтрихкода - См. ИнициализироватьРезультатОбработкиШтрихкода.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений
// Возвращаемое значение:
//  Структура - Заполняет структуру параметров значениями:
//   * РезультатВыбора - Произвольный - Результат уточнения информации у пользователя
//   * РезультатОбработкиШтрихкода - См. ИнициализироватьРезультатОбработкиШтрихкода.
//   * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений
Функция ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РезультатВыбора",             РезультатВыбора);
	ПараметрыВыбора.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыВыбора.Вставить("КэшированныеЗначения",        КэшированныеЗначения);
	
	Возврат ПараметрыВыбора;

КонецФункции

// Возвращает пустую структуру обработки штрихкода
// 
// Возвращаемое значение:
//  Структура - Инициализировать новую структуру обработки штрихкода:
// * ИсходныйШтрихкод - Произвольный -
// * Штрихкод - Произвольный -
// * ТипШтрихкода - Произвольный -
// * ВидПродукции - Произвольный -
// * ВидУпаковки - Произвольный -
// * GTIN - Произвольный -
// * НаименованиеВладельца - Произвольный -
// * ПредставлениеНоменклатуры - Произвольный -
// * СоставКодаМаркировки - Произвольный - 
// * ДанныеРазбора - Произвольный - 
// * ВидыПродукцииКодаМаркировки - Массив Из ПеречислениеСсылка.ВидыПродукцииИС -
// * АдресЛогаЗапросов - Произвольный -
// * НормализованныйШтрихкод - Строка -
// * ХешСуммаНормализации - Строка -
Функция ИнициализироватьНовуюСтруктуруОбработкиШтрихкода() Экспорт
	
	СтруктураЗначения = Новый Структура();
	СтруктураЗначения.Вставить("ИсходныйШтрихкод");
	СтруктураЗначения.Вставить("Штрихкод");
	СтруктураЗначения.Вставить("ТипШтрихкода");
	СтруктураЗначения.Вставить("ВидПродукции");
	СтруктураЗначения.Вставить("ВидУпаковки");
	СтруктураЗначения.Вставить("GTIN");
	
	СтруктураЗначения.Вставить("НаименованиеВладельца");
	СтруктураЗначения.Вставить("ПредставлениеНоменклатуры");
	СтруктураЗначения.Вставить("СоставКодаМаркировки");
	СтруктураЗначения.Вставить("ДанныеРазбора");
	СтруктураЗначения.Вставить("ВидыПродукцииКодаМаркировки", Новый Массив());
	СтруктураЗначения.Вставить("АдресЛогаЗапросов");

	// Для поиска КМ без учета МРЦ
	СтруктураЗначения.Вставить("НормализованныйШтрихкод", "");
	СтруктураЗначения.Вставить("ХешСуммаНормализации", "");

	//@skip-check constructor-function-return-section
	Возврат СтруктураЗначения;
	
КонецФункции

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Информация по штрихкоду:
//   * МаркируемаяПродукция - Булево - Истина, если номенклатура данных штрихкода является маркируемой.
//   * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция элементов перечисления видов продукции 
//        ИС, которые были идентифицированы по данным штрихкода.
//   * ДополнительныеПараметры - Произвольный - дополнительные параметры.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода маркированного товара.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки маркированного товара.
//   * ТекстОшибки - Строка - описание ошибки.
//   * МаркированныеТовары - Массив - коллекция товаров, подлежащих маркировке.
//   * Количество - Число - количество единиц маркируемой продукции.
//   * ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
//   * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
			
	КонецЕсли;

	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования);
			
	КонецЕсли;
	
	ЗначенияПоУмолчанию = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Добавить();
	
	ДанныеШтрихкода = Новый Структура;
	Для Каждого Колонка Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Колонки Цикл
		ДанныеШтрихкода.Вставить(Колонка.Имя, ЗначенияПоУмолчанию[Колонка.Имя]);
	КонецЦикла;
	
	//@skip-check constructor-function-return-section
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Инициализировать таблицу уточнения коэффициентов упаковок.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу уточнения коэффициентов упаковок:
// * GTIN - Строка - 
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС -
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС -
// * КоличествоПотребительскихУпаковок - Число -
// * Номенклатура - ОпределяемыйТип.Номенклатура -
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры -
// * Серия - ОпределяемыйТип.СерияНоменклатуры -
// * Упаковка - ОпределяемыйТип.Упаковка -
// * ПредставлениеСодержимоеУпаковки - Произвольный -
Функция ИнициализироватьТаблицуУточненияКоэффициентовУпаковок() Экспорт
	
	УточнениеКоэффициентовУпаковок = Новый ТаблицаЗначений;
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("GTIN",                              Метаданные.ОпределяемыеТипы.GTIN.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("ВидУпаковки",                       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("ВидПродукции",                      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("КоличествоПотребительскихУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("Упаковка",       Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	УточнениеКоэффициентовУпаковок.Колонки.Добавить("ПредставлениеСодержимоеУпаковки");
	
	УточнениеКоэффициентовУпаковок.Индексы.Добавить("GTIN");
	
	Возврат УточнениеКоэффициентовУпаковок;
	
КонецФункции

// Инициализирует структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// Может инициалироваться значением штрихкода, после разбора которого заполняются соответствующие свойства структуры.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	ПользовательскиеПараметрыРазбораКодаМаркировки - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
// 	Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
// Возвращаемое значение:
//  См. ИнициализироватьНовуюСтруктуруОбработкиШтрихкода
Функция НоваяСтруктураОбработкиШтрихкода(КодМаркировки = Неопределено, ВидПродукции = Неопределено, ПользовательскиеПараметрыРазбораКодаМаркировки = Неопределено, Настройки = Неопределено) Экспорт
	
	СтруктураЗначения = ИнициализироватьНовуюСтруктуруОбработкиШтрихкода();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			КодМаркировки, ВидПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПользовательскиеПараметрыРазбораКодаМаркировки);
		Если ДанныеРазбора = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
		КонецЕсли;
		
		СтруктураЗначения.ИсходныйШтрихкод        = КодМаркировки;
		СтруктураЗначения.Штрихкод                = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.ТипШтрихкода            = ДанныеРазбора.ТипШтрихкода;
		СтруктураЗначения.ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		СтруктураЗначения.СоставКодаМаркировки    = ДанныеРазбора.СоставКодаМаркировки;
		
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			СтруктураЗначения.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
		СтруктураЗначения.ДанныеРазбора = ДанныеРазбора;
		
	КонецЕсли;
	
	Возврат СтруктураЗначения;
	
КонецФункции

// Инициализирует структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// Может инициалироваться значением штрихкода, после разбора которого заполняются соответствующие свойства структуры.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	Настройки - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
// Возвращаемое значение:
// 	см. ИнициализироватьНовуюСтруктуруОбработкиШтрихкода
Функция НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(КодМаркировки = Неопределено, ВидПродукции = Неопределено, НастройкиРазбора = Неопределено) Экспорт
	
	СтруктураЗначения = ИнициализироватьНовуюСтруктуруОбработкиШтрихкода();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			КодМаркировки, НастройкиРазбора.Кеш, ВидПродукции, ПримечаниеКРезультатуРазбора,
			НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
		Если ДанныеРазбора = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru ='Не удалось разобрать код маркировки: %1
				          |%2'"),
				СтрЗаменить(КодМаркировки, Символ(29), "<GS>"),
				ПримечаниеКРезультатуРазбора.ТекстОшибки);
		КонецЕсли;
		
		СтруктураЗначения.ИсходныйШтрихкод        = КодМаркировки;
		СтруктураЗначения.Штрихкод                = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
		СтруктураЗначения.ТипШтрихкода            = ДанныеРазбора.ТипШтрихкода;
		СтруктураЗначения.ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		СтруктураЗначения.СоставКодаМаркировки    = ДанныеРазбора.СоставКодаМаркировки;
		
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			СтруктураЗначения.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
		СтруктураЗначения.ДанныеРазбора = ДанныеРазбора;
		
	КонецЕсли;
	
	Возврат СтруктураЗначения;
	
КонецФункции

// Инициализирует и заполняет структуру, являющуюся аналогом строки таблицы См. ИнициализацияТаблицыДанныхКодовМаркировки
// по данным разбора переданного кода маркировки.
// 
// Параметры:
// 	КодМаркировки - Строка - Значение штрихкода.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// 	ДанныеРазбора - см. РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки
// Возвращаемое значение:
// 	см. ИнициализироватьНовуюСтруктуруОбработкиШтрихкода
Функция НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(КодМаркировки, ВидПродукции = Неопределено, ДанныеРазбора) Экспорт
	
	СтруктураЗначения = ИнициализироватьНовуюСтруктуруОбработкиШтрихкода();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		СтруктураЗначения.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	СтруктураЗначения.ИсходныйШтрихкод        = КодМаркировки;
	СтруктураЗначения.Штрихкод                = ДанныеРазбора.НормализованныйКодМаркировки;
	СтруктураЗначения.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	СтруктураЗначения.ТипШтрихкода            = ДанныеРазбора.ТипШтрихкода;
	СтруктураЗначения.ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
	СтруктураЗначения.СоставКодаМаркировки    = ДанныеРазбора.СоставКодаМаркировки;
	
	Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		СтруктураЗначения.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	КонецЕсли;
	
	СтруктураЗначения.ДанныеРазбора = ДанныеРазбора;
		
	Возврат СтруктураЗначения;
	
КонецФункции

Функция ИменаКолонокДляЗаполнения() Экспорт
	
	КолонкиНоменклатура = Новый Соответствие;
	КолонкиНоменклатура.Вставить("Номенклатура",                  Истина);
	КолонкиНоменклатура.Вставить("Характеристика",                Истина);
	КолонкиНоменклатура.Вставить("Серия",                         Истина);
	КолонкиНоменклатура.Вставить("ТребуетВзвешивания",            Истина);
	КолонкиНоменклатура.Вставить("ПроизвольнаяЕдиницаУчета",      Истина);
	КолонкиНоменклатура.Вставить("МаркируемаяПродукция",          Истина);
	КолонкиНоменклатура.Вставить("СкоропортящаясяПродукция",      Истина);
	КолонкиНоменклатура.Вставить("НоменклатураСопоставленаПоУПД", Истина);
	КолонкиНоменклатура.Вставить("Упаковка",                      Истина);
	
	КолонкиИсключения = Новый Соответствие;
	КолонкиИсключения.Вставить("Входящий", Истина);
	
	КолонкиИсключения.Вставить("СоставКодаМаркировки",    Истина);
	КолонкиИсключения.Вставить("ДанныеРазбора",           Истина);
	КолонкиИсключения.Вставить("НормализованныйШтрихкод", Истина);
	КолонкиИсключения.Вставить("ХешСуммаНормализации",    Истина);
	КолонкиИсключения.Вставить("ПараметрыОшибки",         Истина);
	КолонкиИсключения.Вставить("ТекстОшибки",             Истина);
	КолонкиИсключения.Вставить("СписокНоменклатуры",      Истина);
	
	// Штрихкод - попадает в Прочее.
	// Заполнение штрихкода требуется при замене кодов с МРЦ - без МРЦ
	
	КолонкиКоличество = Новый Соответствие;
	КолонкиКоличество.Вставить("Количество",                        Истина);
	КолонкиКоличество.Вставить("КоличествоПотребительскихУпаковок", Истина);
	КолонкиКоличество.Вставить("КоличествоГрупповыхУпаковок",       Истина);
	КолонкиКоличество.Вставить("Коэффициент",                       Истина);
	
	КолонкиСлужебные = Новый Соответствие;
	КолонкиСлужебные.Вставить("EAN",                      Истина);
	КолонкиСлужебные.Вставить("GTIN",                     Истина);
	КолонкиСлужебные.Вставить("ТипУпаковки",              Истина);
	КолонкиСлужебные.Вставить("ТипШтрихкода",             Истина);
	КолонкиСлужебные.Вставить("ПолныйКодМаркировки",      Истина);
	КолонкиСлужебные.Вставить("ЕстьВПулеКодовМаркировки", Истина);
	КолонкиСлужебные.Вставить("ЭтоКодВводаОстатков",      Истина);
	
	// ВидПродукци и ВидУпаковки - сведения, получаемые и по данным сервиса и по данным ИБ
	
	КолонкиДанныеСервиса = Новый Соответствие;
	КолонкиДанныеСервиса.Вставить("РодительскаяУпаковка",                Истина);
	КолонкиДанныеСервиса.Вставить("ИННВладельца",                        Истина);
	КолонкиДанныеСервиса.Вставить("СпособВводаВОборот",                  Истина);
	КолонкиДанныеСервиса.Вставить("ДатаПроизводства",                    Истина);
	КолонкиДанныеСервиса.Вставить("Статус",                              Истина);
	КолонкиДанныеСервиса.Вставить("ОсобоеСостояние",                     Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеВыведено",            Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеОстаток",             Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеОстатокГИСМТ",        Истина);
	КолонкиДанныеСервиса.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Истина);
	КолонкиДанныеСервиса.Вставить("МРЦ",                       Истина);
	КолонкиДанныеСервиса.Вставить("ВСеройЗоне",                Истина);
	КолонкиДанныеСервиса.Вставить("СодержитСерыеКоды",         Истина);
	КолонкиДанныеСервиса.Вставить("ГоденДо",                   Истина);
	КолонкиДанныеСервиса.Вставить("ПредставлениеНоменклатуры", Истина);
	КолонкиДанныеСервиса.Вставить("ПредставлениеСтатуса",      Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Номенклатура",  КолонкиНоменклатура);
	ВозвращаемоеЗначение.Вставить("Исключения",    КолонкиИсключения);
	ВозвращаемоеЗначение.Вставить("Количество",    КолонкиКоличество);
	ВозвращаемоеЗначение.Вставить("Служебные",     КолонкиСлужебные);
	ВозвращаемоеЗначение.Вставить("ДанныеСервиса", КолонкиДанныеСервиса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата обработки штрихкодов.
//
// Возвращаемое значение:
//  Структура - Описание:
//  * ШтрихкодыПродукцииДляСопоставления - Массив Из Строка - Штрихкоды, которым небходимо сопоставить номенклатуру.
//  * РезультатыОбработки - Соответствие Из Строка:
//    ** Ключ     - Строка - значение штрихкода
//    ** Значение - (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализацияРезультатаОбработкиШтрихкодов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатыОбработки",                Новый Соответствие);
	Результат.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВидовПродукцииИС

// Проверяет значения массива ВидыПродукции на вхождение допустимых видов продукции параметров сканирования.
//
// Параметры:
//  ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если каждый элемент массива ВидыПродукции присутствует в допустимых видах продукции.
Функция ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

// Определяет допустимость обработки продукции ИС МП по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ВключаяТабачнуюПродукцию - Булево - допустимость обработки в т.ч. табачной продукции
// Возвращаемое значение:
//  Булево - Истина, если допустима.
Функция ДопустимаПродукцияИСМП(ПараметрыСканирования, ВключаяТабачнуюПродукцию = Ложь) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) И ПараметрыСканирования.ТолькоЕГАИС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, ВключаяТабачнуюПродукцию) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ОбщегоНазначенияИСКлиентСервер.ПересечениеМассивов(
		ВидыПродукции, ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС()).Количество() > 0;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Выполняет поиск в массиве ВидыПродукции продукции ИС МП.
//
//Параметры:
//   ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС.
//   ВключаяТабачнуюПродукцию  - Булево - Признак включения табачной продукции.
//   ВключатьМолочнуюПродукцию - Булево - Признак включения молочной продукции.
//
//Возвращаемое значение:
//   Булево - Истина, если в массиве есть продукция ИС МП.
//
Функция ПрисутствуетПродукцияИСМП(ВидыПродукции, ВключаяТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, ВключаяТабачнуюПродукцию, ВключатьМолочнуюПродукцию) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции продукции из натурального меха.
//
// Параметры:
//  ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена продукция из натурального меха.
Функция ПрисутствуетПродукцияИзНатуральногоМеха(ВидыПродукции) Экспорт
	
	Результат = ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РезультатНеТребуетУточненияДанных

// Формирует результат обработки штрихкодов для кодов маркировки, в данных которых выявлены ошибки.
//
// Параметры:
//  ДанныеШтрихкодов - См. ИнициализацияДанныхПоШтрихкодам.
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор - идентификатор, по которому 
//    помещается дерево упаковок во временное хранилище.
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиШтрихкодаПриОшибках(ДанныеШтрихкодов, ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор) Экспорт
	
	Если ДанныеШтрихкодов.ЕстьОшибки Тогда
		
		ДанныеШтрихкода.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		РезультатДобавления.ЕстьОшибки  = ДанныеШтрихкодов.ЕстьОшибки;
		РезультатДобавления.ОбщаяОшибка = Истина;
		
		Возврат РезультатДобавления;
		
	КонецЕсли;
	
	// Условие для дерева.
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоУпаковкаПоВиду(ДанныеШтрихкода.ВидУпаковки)
		И ДанныеШтрихкодов.ВложенныеШтрихкоды <> Неопределено Тогда
		
		РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.Штрихкод     = ДанныеШтрихкода.Штрихкод;
		РезультатДобавления.ТипШтрихкода = ДанныеШтрихкода.ТипШтрихкода;
		Если ТипЗнч(ФормаУникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
			РезультатДобавления.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, ФормаУникальныйИдентификатор);
		Иначе
			РезультатДобавления.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, ФормаУникальныйИдентификатор.УникальныйИдентификатор);
		КонецЕсли;
		РезультатДобавления.ЕстьОшибкиВДеревеУпаковок = ДанныеШтрихкодов.ЕстьОшибкиВДеревеУпаковок Или ЗначениеЗаполнено(ДанныеШтрихкода.ТекстОшибки);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ПараметрыОшибки")
			И ДанныеШтрихкода.ПараметрыОшибки <> Неопределено Тогда
			РезультатДобавления.ПараметрыОшибки = ДанныеШтрихкода.ПараметрыОшибки;
		КонецЕсли;
		
	Иначе
		
		Если ДанныеШтрихкода.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная)<>Неопределено
			Или (Не ДопустимаПродукцияИСМП(ПараметрыСканирования,Истина)
				И ПрисутствуетАлкогольнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки)) Тогда
			
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИС");
			РезультатДобавления = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукцииПриОшибках(ДанныеШтрихкода);
			
		ИначеЕсли ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
			РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
			
		ИначеЕсли ПрисутствуетПродукцияИСМП(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
			
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
			РезультатДобавления = МодульШтрихкодированиеИСМПСлужебный.РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования);
			
		Иначе
			
			РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатДобавления.ТекстОшибки = ДанныеШтрихкода.ТекстОшибки;
			РезультатДобавления.ЕстьОшибки  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат РезультатДобавления;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Вычисляет структуру с общими модулями.
// 
// Возвращаемое значение:
//  Структура - общие модули подсистемы ИСМП:
// * ШтрихкодированиеИСМП - ОбщийМодуль - базовый общий модуль,
// * ШтрихкодированиеМОТП - ОбщийМодуль - базовый общий модуль.
//  Булево - Ложь если подсистема не встроена
Функция ОбщиеМодулиПодсистем() Экспорт
	
	ОбщиеМодули = Новый Структура;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//@skip-check wrong-string-literal-content
	ОбщиеМодули.Вставить("ШтрихкодированиеМОТП", ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП"));
	//@skip-check wrong-string-literal-content
	ОбщиеМодули.Вставить("ШтрихкодированиеИСМП", ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП"));
	
	//@skip-check constructor-function-return-section
	Возврат ОбщиеМодули;
	
КонецФункции

// Выполняет проверку на вхождение в код недопустимых символов
// 
// Параметры:
// 	СтрокаДанных - СтрокаДереваЗначений: См. ИнициализироватьДеревоУпаковок - Строка дерева
//               - СтрокаТаблицыЗначений: См. ИнициализацияТаблицыДанныхКодовМаркировки - Строка данных
Процедура ПроверитьСтрокуДанныхНаВхождениеНедопустимыхСимволов(СтрокаДанных) Экспорт
	
	Если СтрНайти(СтрокаДанных.Штрихкод, "¶") Тогда
		СтрокаДанных.ТекстОшибки = СтрШаблон(НСтр("ru = 'Недопустимый символ: %1'"), "¶");
	ИначеЕсли СтрНайти(СтрокаДанных.Штрихкод, Символы.Таб)
		Или СтрНайти(СтрокаДанных.Штрихкод, Символы.ПС) Тогда
		СтрокаДанных.ТекстОшибки = НСтр("ru = 'Код не может содержать переносы строк и табуляции'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет разбор штрихкодов (кодов маркировки) в таблице "ДанныеКодовМаркировки"
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КешДанныхРазбора      - Неопределено, Структура -
//  ДанныеКодовМаркировки - см. ИнициализацияТаблицыДанныхКодовМаркировки
Процедура НормализоватьИРазобратьНаСоставляющиеКодыМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, КешДанныхРазбора = Неопределено, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ОбщиеМодули = ОбщиеМодулиПодсистем();
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Если ДопустимыСтрокиДанныхБезВидаПродукции Тогда
		НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь);
		ВидыПродукции                  = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	Иначе
		НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки();
		ВидыПродукции                  = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "СохранятьКодыМаркировкиВПулИСМП") Тогда
		СохранятьКодыМаркировкиВПулИСМП = ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП;
	Иначе
		СохранятьКодыМаркировкиВПулИСМП = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ПроверятьСтруктуруКодовМаркировки") Тогда
		ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	Иначе
		ПроверятьСтруктуруКодовМаркировки = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ЭтоМаркировкаТоваровИСМП") Тогда
		ЭтоМаркировкаТоваровИСМП = ПараметрыСканирования.ЭтоМаркировкаТоваровИСМП;
	Иначе
		ЭтоМаркировкаТоваровИСМП = Ложь;
	КонецЕсли;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = СохранятьКодыМаркировкиВПулИСМП
		Или ПроверятьСтруктуруКодовМаркировки
		Или ПараметрыСканирования.РежимБРМК;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками =
		Не ЭтоМаркировкаТоваровИСМП;
	
	НастройкиРазбора = Новый Структура;
	НастройкиРазбора.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбора.Вставить("Общие",            НастройкиРазбораКодаМаркировки);
	НастройкиРазбора.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	СоответствиеВидовПродукции = Новый Соответствие;
	
	ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверитьСтрокуДанныхНаВхождениеНедопустимыхСимволов(СтрокаДанных);
		
		ДанныеРазбораИПримечание = Неопределено;
		
		Если КешДанныхРазбора <> Неопределено Тогда
			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанных.Штрихкод];
			Если ДанныеРазбораИПримечание <> Неопределено Тогда
				
				ДанныеРазбора                            = ДанныеРазбораИПримечание.ДанныеРазбора;
				СтрокаДанных.ПримечаниеКРазборуШтрихкода = ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода;
				СтрокаДанных.ДанныеРазбора               = ДанныеРазбора;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеРазбораИПримечание = Неопределено Тогда
			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
				СтрокаДанных.Штрихкод, НастройкиРазбора.Кеш, ВидыПродукции, СтрокаДанных.ПримечаниеКРазборуШтрихкода,
				НастройкиРазбора.Общие, НастройкиРазбора.Пользовательские);
			
			СтрокаДанных.ДанныеРазбора = ДанныеРазбора;
		КонецЕсли;
		
		Если ДанныеРазбора <> Неопределено Тогда
			
			ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули);
			
			// Восстанавливать структуру кода маркировки
			Если Не ПроверятьСтруктуруКодовМаркировки
				И ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
				
				//@skip-check wrong-string-literal-content
				МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
				МодульШтрихкодированиеИСМП.ПроверитьПолныйКодМаркировкиПоДаннымРазбора(
					ДанныеРазбора, СтрокаДанных, ПараметрыСканирования);
				
			КонецЕсли;
			
		ИначеЕсли ДанныеРазбора = Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам Тогда
			
			GTIN = Неопределено;
			Для Каждого РезультатРазбора Из СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
				Если РезультатРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
					Если GTIN = Неопределено Тогда
						GTIN = РезультатРазбора.СоставКодаМаркировки.GTIN;
					ИначеЕсли GTIN <> РезультатРазбора.СоставКодаМаркировки.GTIN Тогда
						GTIN = "";
					КонецЕсли;
				Иначе
					GTIN = "";
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаДанных.ВидыПродукцииКодаМаркировки, РезультатРазбора.ВидыПродукции, Истина);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				СтрокаДанных.EAN  = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
				СтрокаДанных.GTIN = GTIN;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСтрокуДанныхКодовМаркировкиСНеопределеннымСоставомКода(СтрокаДанных);
			
		КонецЕсли;
		
		СоответствиеВидовПродукции.Вставить(СтрокаДанных.ВидПродукции, Истина);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеВидовПродукции Цикл
		Если ДанныеПоШтрихкодам.ВидыПродукции.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеКодовМаркировки) Экспорт
	
	ДанныеКодовМаркировки.Индексы.Добавить("НормализованныйШтрихкод");
	ДанныеКодовМаркировки.Индексы.Добавить("Штрихкод");
	ДанныеКодовМаркировки.Индексы.Добавить("EAN");
	
КонецПроцедуры

// Формирует таблицу значений данных по штрихкодам EAN.
//
// Параметры:
//  ШтрихкодыEAN - Массив из Строка - Штрихкоды EAN.
//  ПараметрыСканирования - см. ПараметрыСканирования
//  GTINПотребительскихУпаковок - Соответствие из КлючИЗначение - GTIN потребительских упаковок.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * Упаковка - ОпределяемыйТип.Упаковка - Упаковка.
//   * ШтрихкодEAN - Строка - Штрихкод.
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//   * ВидУпаковкиИС - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки (из коэффициента регистра ОписаниеGTINИС)
//   * МаркируемаяПродукция - Булево - Истина, если продукция является маркируемой.
//   * ТребуетВзвешивания - Булево - Истина, если продукция требует взвешивания индивидуальных упаковок.
//   * ПроизвольнаяЕдиницаУчета - Булево - Истина, учетная единица не равняется индивидуальному КМ.
//   * Коэффициент - Число - количество товара в групповой или стандартной логистической монотоварной упаковке
//   * КоличествоПотребительскихУпаковок - Число - количество минимальных потребительских упаковок в EAN
//   * Количество - Число - количество товара (заполняется только для весовых штрихкодов)
//   * ТребуетсяОбработкаШтрихкода - Булево - Истина если штрихкод не следует обрабатывать библиотекой
//   * ДанныеШтрихкода - Структура,Неопределено - Результат получения данных по штрихкоду (для обработки вне библиотеки)
Функция ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования = Неопределено, GTINПотребительскихУпаковок = Неопределено) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",                Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",              Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Серия",                       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Упаковка",                    Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",                 Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Весовой",                     Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры",   Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",                Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",        Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Количество",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 6)));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ТребуетсяОбработкаШтрихкода", Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ДанныеШтрихкода");
	ДанныеПоШтрихкодамEAN.Индексы.Добавить("ШтрихкодEAN");
	
	Если ШтрихкодыEAN.Количество() = 0 Тогда
		Возврат ДанныеПоШтрихкодамEAN;
	КонецЕсли;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Набор",                       Новый ОписаниеТипов("Булево"));
	
	ДополнительныеПредставленияШтрихкодов = Новый Соответствие;
	
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		
		//GTIN
		GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
		Если GTIN <> ШтрихкодEAN Тогда
			НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
			НоваяСтрока.ШтрихкодEAN = GTIN;
			ДополнительныеПредставленияШтрихкодов.Вставить(GTIN, ШтрихкодEAN);
		КонецЕсли;
		
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(GTIN) Тогда
			
			//EAN13
			Если Лев(GTIN, 1) = "0" Тогда
				EAN13 = Сред(GTIN, 2);
				Если EAN13 <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = EAN13;
					ДополнительныеПредставленияШтрихкодов.Вставить(EAN13, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
			//UPC
			Если Лев(GTIN, 2) = "00" Тогда
				UPC = Сред(GTIN, 3);
				Если UPC <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = UPC;
					ДополнительныеПредставленияШтрихкодов.Вставить(UPC, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
			//EAN8
			Если Лев(GTIN, 6) = "000000" Тогда
				EAN8 = Сред(GTIN, 7);
				Если EAN8 <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = EAN8;
					ДополнительныеПредставленияШтрихкодов.Вставить(EAN8, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПоискаРМК = Неопределено;
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ДополнительныеПараметры") И ТипЗнч(ПараметрыСканирования.ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ПараметрыПоискаРМК") Тогда
			ПараметрыПоискаРМК = ПараметрыСканирования.ДополнительныеПараметры.ПараметрыПоискаРМК;
		КонецЕсли;
	КонецЕсли;
	ШтрихкодированиеИСПереопределяемый.ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN, ПараметрыПоискаРМК);
	
	КолонкиСтрокой = Новый Массив;
	Для Каждого Колонка Из ДанныеПоШтрихкодамEAN.Колонки Цикл
		КолонкиСтрокой.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодамEAN Цикл
		Если ДополнительныеПредставленияШтрихкодов.Получить(СтрокаТаблицы.ШтрихкодEAN) <> Неопределено Тогда
			СтрокаТаблицы.ШтрихкодEAN = ДополнительныеПредставленияШтрихкодов.Получить(СтрокаТаблицы.ШтрихкодEAN);
		КонецЕсли;
	КонецЦикла;
	ДанныеПоШтрихкодамEAN.Свернуть(СтрСоединить(КолонкиСтрокой, ","));
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Коэффициент",                               Новый ОписаниеТипов("Число"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ТребуетВзвешивания",                        Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                  Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидУпаковкиИС",                             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",              Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЕмкостьПотребительскойУпаковки",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры Цикл
			
			ШтрихкодEAN           = КлючИЗначение.Ключ;     // Строка
			ВариантыСопоставления = КлючИЗначение.Значение; // Массив Из Структура: {Номенклатура, Характеристика, Серия}
			
			Для Каждого ВариантСопоставления Из ВариантыСопоставления Цикл
				
				Отбор = Новый Структура("ШтрихкодEAN, Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(Отбор, ВариантСопоставления);
				Отбор.ШтрихкодEAN = ШтрихкодEAN;
				
				Если ДанныеПоШтрихкодамEAN.НайтиСтроки(Отбор).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВариантСопоставления);
				
				НоваяСтрока.ШтрихкодEAN          = ШтрихкодEAN;
				НоваяСтрока.ВидПродукции         = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
				НоваяСтрока.МаркируемаяПродукция = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И Не ДанныеСтроки.ТребуетсяОбработкаШтрихкода Тогда
			ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	НаборGTIN = Новый Массив;
	УникальныеGTIN = Новый Соответствие;
	НаборНоменклатуры = Новый Массив;
	УникальнаяНоменклатура = Новый Соответствие;
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Если ЭлементДанных.ТребуетсяОбработкаШтрихкода Тогда
			Продолжить;
		КонецЕсли;
		
		GTINСтроки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ЭлементДанных.ШтрихкодEAN);
		Если УникальныеGTIN[GTINСтроки] = Неопределено Тогда
			НаборGTIN.Добавить(GTINСтроки);
			УникальныеGTIN.Вставить(GTINСтроки, Истина);
		КонецЕсли;
		
		Если УникальнаяНоменклатура[ЭлементДанных.Номенклатура] = Неопределено Тогда
			НаборНоменклатуры.Добавить(ЭлементДанных.Номенклатура);
			УникальнаяНоменклатура.Вставить(ЭлементДанных.Номенклатура, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(НаборНоменклатуры);
	ОписанияGTIN = ОписанияGTINПоДаннымШтрихкодов(ПараметрыСканирования, НаборGTIN);
	
	ДопустимаПродукцияИСМП = ДопустимаПродукцияИСМП(ПараметрыСканирования);
	НастроеннаяНоменклатураЧастичногоВыбытия = Неопределено;
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	// Заполнение коэффициентов упаковок (учетное количество в упаковке) и количества потребительских кодов в упаковке
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Если Не ДопустимаПродукцияИСМП
			И (ЭлементДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или ЭлементДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках) Тогда
			ЭлементДанных.МаркируемаяПродукция = Ложь;
		КонецЕсли;
		
		Если ЭлементДанных.ТребуетсяОбработкаШтрихкода Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(ЭлементДанных.Номенклатура);
		
		Если ОписаниеНоменклатуры <> Неопределено Тогда
			КоэффициентПересчета = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
			ЭлементДанных.ТребуетВзвешивания             = (КоэффициентПересчета = 0);
			ЭлементДанных.ПроизвольнаяЕдиницаУчета       = (КоэффициентПересчета <> 1);
			ЭлементДанных.ЧастичноеВыбытиеВариантУчета   = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
			ЭлементДанных.ЕмкостьПотребительскойУпаковки = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
			Если ОписаниеНоменклатуры.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				Если НастроеннаяНоменклатураЧастичногоВыбытия = Неопределено Тогда
					//@skip-check query-in-loop
					НастроеннаяНоменклатураЧастичногоВыбытия = НастроеннаяНоменклатураЧастичногоВыбытия(НаборНоменклатуры);
				КонецЕсли;
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
				Для Каждого СтрокаНайстройкиЧастичногоВыбытия Из НастроеннаяНоменклатураЧастичногоВыбытия.НайтиСтроки(СтруктураПоиска) Цикл
					ЭлементДанных.ЧастичноеВыбытиеНоменклатура   = СтрокаНайстройкиЧастичногоВыбытия.НоменклатураЧастичногоВыбытия;
					ЭлементДанных.ЧастичноеВыбытиеХарактеристика = СтрокаНайстройкиЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		GTINСтроки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ЭлементДанных.ШтрихкодEAN);
		
		Если ЗначениеЗаполнено(GTINСтроки) Тогда
			ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки = (GTINПотребительскихУпаковок <> Неопределено И GTINПотребительскихУпаковок[GTINСтроки] <> Неопределено);
		Иначе
			ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки = Ложь;
		КонецЕсли;
		
		ОписаниеGTIN = ОписанияGTIN.Получить(GTINСтроки);
		Если ОписаниеGTIN = Неопределено
			И ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки Тогда
			ОписаниеGTIN = Новый Структура(
				"ВидУпаковки, КоличествоПотребительскихУпаковок",
				Перечисления.ВидыУпаковокИС.Потребительская, 1);
		КонецЕсли;
		
		Если ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки
			И ОписаниеGTIN <> Неопределено
			И ОписаниеGTIN.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И ОписаниеGTIN.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'GTIN %1 найден в составе кода маркировки потребительской упаковки.
					           |В регистре Описание GTIN ИС %1 соответствует виду упаковки: %2.
					           |GTIN логистических, групповых и потребительских упаковок должны быть различными.'"),
					GTINСтроки, ОписаниеGTIN.ВидУпаковки));
			ОписаниеGTIN = Новый Структура(
				"ВидУпаковки, КоличествоПотребительскихУпаковок",
				Перечисления.ВидыУпаковокИС.Потребительская, 1);
		КонецЕсли;
		
		Если ЭлементДанных.Набор Тогда
			ЭлементДанных.ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Набор;
		КонецЕсли;
		
		// Коэффициент, заданный для упаковки имеет приоритет перед коэффициентом из Описания GTIN
		Если ЗначениеЗаполнено(ЭлементДанных.Упаковка)
			И Не ЭлементДанных.ТребуетВзвешивания Тогда
			
			ЭлементДанных.Коэффициент = ЭлементДанных.Количество;
			
			ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = ЭлементДанных.Количество / КоэффициентПересчета;
			Если ЗначениеЗаполнено(ОписаниеGTIN) И ЗначениеЗаполнено(ОписаниеGTIN.ВидУпаковки) Тогда
				ЭлементДанных.ВидУпаковкиИС = ОписаниеGTIN.ВидУпаковки;
			ИначеЕсли ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = 1 Тогда
				ЭлементДанных.ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Потребительская;
			КонецЕсли;
		
		ИначеЕсли ЗначениеЗаполнено(ОписаниеGTIN) Тогда
			
			ПлановоеКоличествоПотребительскихУпаковок = ОписаниеGTIN.КоличествоПотребительскихУпаковок;
			Если ПлановоеКоличествоПотребительскихУпаковок = 0
				И (Не СозданиеНаборов И ОписаниеGTIN.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
				ПлановоеКоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
			
			ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок;
			
			Если ЭлементДанных.ТребуетВзвешивания Тогда
				ЭлементДанных.Коэффициент = 0;
			Иначе
				ЭлементДанных.Количество  = ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
				ЭлементДанных.Коэффициент = ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
			КонецЕсли;
			
			ЭлементДанных.ВидУпаковкиИС = ОписаниеGTIN.ВидУпаковки;
			
		КонецЕсли;
		
		ЭлементДанных.Количество = Окр(ЭлементДанных.Количество, 3);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN.Колонки.Удалить("Набор");
	ДанныеПоШтрихкодамEAN.Индексы.Добавить("ШтрихкодEAN");
	
	Возврат ДанныеПоШтрихкодамEAN;
	
КонецФункции

Функция ПараметрыДополненияТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ДеревоУпаковок, ИменаКолонокДляКопированияСвойств = "", ЭтоЗагрузкаИзТСД = Ложь) Экспорт
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений") Тогда
		ДеревоУпаковокИсточник = ДеревоУпаковок.Владелец();
	Иначе
		ДеревоУпаковокИсточник = ДеревоУпаковок;
	КонецЕсли;
	
	Если ИменаКолонокДляКопированияСвойств = Неопределено
		Или ИменаКолонокДляКопированияСвойств = "" Тогда
		
		ИменаКолонокДляКопированияСвойств = Новый Массив;
		Для Каждого КолонкаДерева Из ДеревоУпаковок.Колонки Цикл
			
			ИмяКолонки = КолонкаДерева.Имя;
			Если ДанныеКодовМаркировки.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаКолонокДляКопированияСвойств.Добавить(ИмяКолонки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ИменаКолонокДляКопированияСвойств) = Тип("Массив") Тогда
		
		ИменаКолонокДляЗаполнения = ИменаКолонокДляЗаполнения();
		
		ПараметрыСлиянияДанных = Новый Структура;
		ПараметрыСлиянияДанных.Вставить("ЗаполнятьНоменклатуру", Ложь);
		ПараметрыСлиянияДанных.Вставить("ЗаполнятьКоличество",   Ложь);
		ПараметрыСлиянияДанных.Вставить("КолонкиНоменклатуры",   "");
		ПараметрыСлиянияДанных.Вставить("КолонкиДанныеСервиса",  "");
		ПараметрыСлиянияДанных.Вставить("Прочие",                Новый Массив);
		ПараметрыСлиянияДанных.Вставить("ИменаКолонокДляКопированияСвойств", СтрСоединить(ИменаКолонокДляКопированияСвойств, ","));
		
		КолонкиНоменклатуры  = Новый Массив;
		КолонкиДанныеСервиса = Новый Массив;
		
		Для Каждого ИмяКолонки Из ИменаКолонокДляКопированияСвойств Цикл
			
			Если ДанныеКодовМаркировки.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДеревоУпаковок.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Исключения[ИмяКолонки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИменаКолонокДляЗаполнения.Номенклатура[ИмяКолонки] <> Неопределено Тогда
				ПараметрыСлиянияДанных.ЗаполнятьНоменклатуру = Истина;
				КолонкиНоменклатуры.Добавить(ИмяКолонки);
			ИначеЕсли ИменаКолонокДляЗаполнения.ДанныеСервиса[ИмяКолонки] <> Неопределено Тогда
				КолонкиДанныеСервиса.Добавить(ИмяКолонки);
			Иначе
				ПараметрыСлиянияДанных.Прочие.Добавить(ИмяКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыСлиянияДанных.КолонкиНоменклатуры  = СтрСоединить(КолонкиНоменклатуры, ",");
		ПараметрыСлиянияДанных.КолонкиДанныеСервиса = СтрСоединить(КолонкиДанныеСервиса, ",");
		
	ИначеЕсли ТипЗнч(ИменаКолонокДляКопированияСвойств) = Тип("Структура") Тогда
		
		ПараметрыСлиянияДанных = ИменаКолонокДляКопированияСвойств;
		
	КонецЕсли;
	
	ПараметрыДополнения = Новый Структура;
	ПараметрыДополнения.Вставить("ЭтоЗагрузкаИзТСД",       ЭтоЗагрузкаИзТСД);
	ПараметрыДополнения.Вставить("ЗаполнятьСтрокуДерева",  ЭтоЗагрузкаИзТСД);
	ПараметрыДополнения.Вставить("ПараметрыСлиянияДанных", ПараметрыСлиянияДанных);
	
	ПараметрыДополнения.Вставить("ЕстьКолонкаВходящий",    ДеревоУпаковокИсточник.Колонки.Найти("Входящий") <> Неопределено);
	ПараметрыДополнения.Вставить("ЕстьКолонкаТипУпаковки", ДеревоУпаковокИсточник.Колонки.Найти("ТипУпаковки") <> Неопределено);
	
	Возврат ПараметрыДополнения;
	
КонецФункции

// Выполняет поиск акцизных марок в дереве упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ЗначенияШтрихкодов - Массив Из Строка - Массив найденных штрихкодов.
//
// Возвращаемое значение:
//  Массив Из Строка - Найденные штрихкоды.
Функция ЗначенияШтрихкодовДереваУпаковок(ДеревоУпаковок, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗначенияШтрихкодовДереваУпаковок(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обработку данных штрихкода для единицы маркируемой продукции. Обработка происходит в модуле соответствующей
// виду продукции подсистеме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа, обработки.
//  ДанныеШтрихкода - См. ИнициализироватьДанныеШтрихкода
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = Неопределено;
	
	ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ПараметрыСканирования, Форма, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.МаркируемаяПродукция <> Истина
		И ДанныеШтрихкода.ДанныеРазбора = Неопределено
		
		// Передача штрихкода для обработки на сторону прикладного решения
		// Документы подсистемы ЕГАИС умеют самостоятельно обрабатывать штрихкоды немаркированной алкогольной продукции
		И Не ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки Тогда
		
		РезультатДобавления = РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
			Или (ПараметрыСканирования.Свойство("ТолькоЕГАИС") И ПараметрыСканирования.ТолькоЕГАИС)) Тогда
		
		МодульШтрихкодированиеОбщегоНазначенияЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИС");
		РезультатДобавления = МодульШтрихкодированиеОбщегоНазначенияЕГАИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеОбщегоНазначенияМОТП  = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		РезультатДобавления = МодульШтрихкодированиеОбщегоНазначенияМОТП .РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		РезультатДобавления = ШтрихкодированиеОбщегоНазначенияИСМП.РезультатОбработкиКодаМаркировки(
			ДанныеШтрихкода,
			ПараметрыСканирования,
			Неопределено,
			Форма);
		
	Иначе // Штрихкод не относящийся к библиотеке
		
		РезультатДобавления = РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат РезультатДобавления;
	
КонецФункции

// Выполняет полную проверку на ошибки данных штрихкодов с учетом индивидуальных проверок по видам продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки в данных.
Функция ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление
		Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии
		Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессииРозница Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеПараметруСканированияТолькоМаркируемаяПродукция(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	РасширенныеПроверкиШтрихкодов(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);

	ШтрихкодированиеИСПереопределяемый.ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	Если ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Или Не ЕстьОшибки Тогда
		
		//только для режима групповой загрузки: недопустимо указание продукции переменного количества
		ПроверитьУказаниеКоличестваПриГрупповойЗагрузке(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		
		ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
		
		Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			И (ПрисутствуетТабачнаяПродукция(ВидыПродукции)
				Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
			
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
			МодульШтрихкодированиеМОТП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		
		КонецЕсли;
		
		Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
			И (ПрисутствуетПродукцияИСМП(ВидыПродукции)
				Или ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков) Тогда
			
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
			МодульШтрихкодированиеИСМП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		
		ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Получение информации по коллекции штрихкодов
// 
// Параметры:
//  Штрихкоды - Массив из Структура - коллекция штрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования
//  КэшированныеЗначения - Структура - Содержит закэшированные значения
// Возвращаемое значение:
//  См. ИнициализацияДанныхПоШтрихкодам
Функция ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам(Ложь);
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, Штрихкоды, ПараметрыСканирования);
	ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеКодовМаркировки);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма = Неопределено) Экспорт
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроверкаКодовМаркировкиИСМП = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		ЭтоПроверкаКодовМаркировкиИСМП = Истина;
	КонецЕсли;

	ЭтоОтчетПроизводственнойЛинии = Ложь;
	Если ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
		И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		ЭтоОтчетПроизводственнойЛинии = Истина;
	КонецЕсли;
	
	Если Не ЭтоПроверкаКодовМаркировкиИСМП
		И Не ЭтоОтчетПроизводственнойЛинии Тогда
		ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования);
		ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования);
		ЗаполнитьДанныеИзвестныхСозданныхНаборов(ДанныеПоШтрихкодам, Неопределено, ПараметрыСканирования)
	КонецЕсли;
	
	Если Не ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования)
		И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ОпределениеВидаПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если вид продукции определить не удалось
	ПроверитьВидПродукцииУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеИдентификатораРозничнойПродажиПоОбязательнымТоварнымГруппам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьДанныеВложенныхШтрихкодовДереваУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам);
	
	// Заполнение флага МаркируемаяПродукция для кодов, добавленных в процессе заполнения данных по штрихкодам
	ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ЗаполнитьДанныеВскрытыхПотребительскихУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам);

	// В процессе сложной иерархической загрузки данных из ТСД
	// оптимальным вариантом будет нормализация дерева на последнем этапе обработки.
	Если ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД Тогда
		НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ТребуетсяСопоставление
		Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии
		Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессииРозница Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД
		И ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки);
	ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		// После выполнения ЗаполнитьПоДаннымУточнения или ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора
		// незаполненная номенклатура могла заполниться. После заполнения номенклатуры необходимо пересчитать количество
		ДанныеКодовМаркировкиДляПересчетаКоличества = Новый Массив;
		Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки Цикл
			Если КлючИЗначение.Ключ.Количество = 0
				И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(КлючИЗначение.Ключ.ВидПродукции, Истина) Тогда
				ДанныеКодовМаркировкиДляПересчетаКоличества.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДанныеКодовМаркировкиДляПересчетаКоличества, ПараметрыСканирования);
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьGTINПотребительскихУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	КонецЕсли;
	
	ОбновитьШтрихкодыУпаковок(ДанныеПоШтрихкодам.СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Дополняет данные штрихкодов специфичными данными, характерными для каждого вида продукции ИС
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
		И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		
		ДополнитьДанныеШтрихкодовРасширеннойСпецификойЕГАИС(ПараметрыСканирования, ДанныеПоШтрихкодам);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И (ПрисутствуетТабачнаяПродукция(ВидыПродукции)
		Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
		
		ДополнитьДанныеШтрихкодовРасширеннойСпецификойМОТП(ПараметрыСканирования, ДанныеПоШтрихкодам);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
		И ПрисутствуетПродукцияИСМП(ВидыПродукции) Тогда
		
		ДополнитьДанныеШтрихкодовРасширеннойСпецификойИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам);
		
	КонецЕсли;
	
	// Дозаполнение МРЦ, ГоденДо и т.п. в данных кодов маркировки по составу кода маркировки
	НаличиеКолонокСоставаКодаМаркировкиВДанных = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтрокаДанных.СоставКодаМаркировки Цикл
			
			ИмяСвойства = КлючИЗначение.Ключ;
			
			ЕстьСвойство = НаличиеКолонокСоставаКодаМаркировкиВДанных.Получить(ИмяСвойства);
			Если ЕстьСвойство = Неопределено Тогда
				ЕстьСвойство = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, ИмяСвойства);
				НаличиеКолонокСоставаКодаМаркировкиВДанных.Вставить(ИмяСвойства, ЕстьСвойство);
			КонецЕсли;
			
			Если ЕстьСвойство
				И Не ЗначениеЗаполнено(СтрокаДанных[ИмяСвойства]) Тогда
				СтрокаДанных[ИмяСвойства] = КлючИЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет представления статусов, владельцев и прочую дополнительную информацию
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
			И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИС");
		МодульШтрихкодированиеЕГАИС.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
			И (ПрисутствуетТабачнаяПродукция(ВидыПродукции)
			Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция)
			И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	КонецЕсли;
		
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
			И ПрисутствуетПродукцияИСМП(ВидыПродукции)
			И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьПредставленияДанных(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	КонецЕсли;
	
КонецПроцедуры

// Помещает настройки выбора маркируемой продукции в хранилище настроек данных формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - ДокументСсылка - Ссылка на объект.
Процедура СохранитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("СохраненВыборПоМаркируемойПродукции", Форма.СохраненВыборПоМаркируемойПродукции);
	СохраняемыеНастройки.Вставить("ДанныеВыбораПоМаркируемойПродукции",  Форма.ДанныеВыбораПоМаркируемойПродукции);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Ссылка, "ДанныеВыбораМаркируемойПродукции", СохраняемыеНастройки);
	
КонецПроцедуры

// Восстанавливает сохраненные настройки выбора маркируемой продукции и помещает их в данные формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой необходимо сохранить настройки.
//  Ссылка - ДокументСсылка - Ссылка на объект.
Процедура ВосстановитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	НастройкиВыбораМаркируемойПродукции = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Ссылка, "ДанныеВыбораМаркируемойПродукции");
	Если ЗначениеЗаполнено(Ссылка) И НастройкиВыбораМаркируемойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, НастройкиВыбораМаркируемойПродукции);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверки по штрихкодам до формирования данных по ним.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - см. ИнициализироватьРезультатОбработкиШтрихкода
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ДанныеДокументаОснования = Неопределено;
	
	РезультатПроверок = Новый Соответствие;
	
	Шаблон = Неопределено;
	ГрупповаяЗагрузка = ДанныеКодовМаркировки.Количество() > 1;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		РезультатПроверки = ПроверкаТребуетсяОбработкаШтрихкода(СтрокаДанных);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверкаОшибкиПриРазбореКодаМаркировки(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = КонтрольНаДопустимыеВидыПродукции(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ПроверитьНаСоответствиеДокументуОснованиюЧастично(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		//@skip-check query-in-loop
		РезультатПроверки = ПроверкаШтрихкодаНаУжеДобавленный(СтрокаДанных, ПараметрыСканирования, ДанныеПоШтрихкодам);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверки.ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, ГрупповаяЗагрузка);
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ТребуетсяОткрытьФормуВводаКодаМаркировки(СтрокаДанных, ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			СтрокаДанных.ОбработанСОшибками = Истина;
			РезультатПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	ДопустимаМаркируемаяПродукция = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияЕГАИС");
		ДопустимаМаркируемаяПродукция = Модуль.ИспользуетсяМаркируемаяПродукция();
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияИСМП");
		Если Модуль.ИспользуетсяМаркируемаяПродукция() Тогда
			
			ДопустимаМаркируемаяПродукция = Истина;
			
			Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
				И (ПрисутствуетТабачнаяПродукция(ДанныеПоШтрихкодам.ВидыПродукции)
				Или ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция) Тогда
				
				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
				РезультатПроверокМОТП = Модуль.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
					ДанныеПоШтрихкодам, ПараметрыСканирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатПроверок, РезультатПроверокМОТП, Ложь);
				
			КонецЕсли;
			
			Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
				И ПрисутствуетПродукцияИСМП(ДанныеПоШтрихкодам.ВидыПродукции) Тогда
				
				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
				РезультатПроверокИСМП = Модуль.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
					ДанныеПоШтрихкодам, ПараметрыСканирования);
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатПроверок, РезультатПроверокИСМП, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Шаблон = Неопределено;
	Если Не ДопустимаМаркируемаяПродукция Тогда
		Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
			Если РезультатПроверок.Получить(СтрокаДанных.Штрихкод) = Неопределено Тогда
				СтрокаДанных.ОбработанСОшибками = Истина;
				ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных, Шаблон, Истина);
				РезультатПроверок.Вставить(
					СтрокаДанных.Штрихкод,
					РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатПроверок;
	
КонецФункции

Функция ТребуетсяОткрытьФормуВводаКодаМаркировки(СтрокаДанных, ПараметрыСканирования) Экспорт
	
	Результат = Неопределено;
	
	ТребуетсяУточнениеЧастичногоВыбытия = (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина, Ложь)
		И СтрокаДанных.ТребуетсяУточнениеЧастичногоВыбытия);
	
	ЭтоЗапросКодаМаркировкиПослеСчитыванияEAN = СтрокаДанных.ЭтоШтрихкодНоменклатуры
		И СтрокаДанных.МаркируемаяПродукция = Истина
		И ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
		И ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
		И СтрокаДанных.ОбработатьБезМаркировки = Ложь
		И ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки
		И Не ТребуетсяУточнениеЧастичногоВыбытия;
	
	ЭтоЗапросКодаМаркировкиПослеСчитыванияRFID = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ДанныеRFID")
		И СтрокаДанных.ДанныеRFID <> Неопределено
		И Не ЗначениеЗаполнено(СтрокаДанных.Штрихкод);
	
	Если ЭтоЗапросКодаМаркировкиПослеСчитыванияEAN
		Или ЭтоЗапросКодаМаркировкиПослеСчитыванияRFID Тогда
		
		ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
		Результат = РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает модуль, в котором требуется выполнить обработку штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
// Возвращаемое значение:
//  ОбщийМодуль, ФормаКлиентскогоПриложения - Модуль, в котором требуется выполнить обработку штрихкодов.
Функция МодульДляОбработки(Форма) Экспорт

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		МодульДляОбработки = Форма;
	Иначе
		МодульДляОбработки = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Возврат МодульДляОбработки;
	
КонецФункции

// Выполняет контроль заполнения серии с учетом сохраненного ранее выбора пользователя.
// 
// Параметры:
//  ПравилаПроверкиНаОшибки - Структура - набор правил:
//   * КонтрольСерий - Массив из СтрокаТаблицыЗначений - строки дерева упаковок или данных штрихкода, где требуется указание серии.
//  ПараметрыСканирования - См. ПараметрыСканирования.
Процедура ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(ПравилаПроверкиНаОшибки, ПараметрыСканирования) Экспорт
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий")
		И ПравилаПроверкиНаОшибки.КонтрольСерий.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСерий Цикл
			
			СтрокаДанных.ТребуетсяВыборСерии = Истина;
			
			Если ДанныеСохраненногоВыбора <> Неопределено
				И СтрокаДанных.Номенклатура = ДанныеСохраненногоВыбора.Номенклатура
				И СтрокаДанных.Характеристика = ДанныеСохраненногоВыбора.Характеристика
				И СтрокаДанных.Серия = ДанныеСохраненногоВыбора.Серия Тогда
				СтрокаДанных.ТребуетсяВыборСерии = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработкаДанныхПоШтрихкодамУспешноЗавершена(РезультатОбработки) Экспорт
	
	Если РезультатОбработки.ЕстьОшибки
		Или РезультатОбработки.ТребуетсяУточнениеДанных
		Или РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки
		Или РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработки.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияДополнительныхКолонок, ДобавленныеКолонки = Неопределено) Экспорт
	
	Если ДобавленныеКолонки = Неопределено Тогда
		ДобавленныеКолонки = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из КоллекцияДополнительныхКолонок Цикл
		
		ИмяКолонки    = КлючЗначение.Ключ;
		ОписаниеТипов = КлючЗначение.Значение;
		
		Если Коллекция.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Коллекция.Колонки.Добавить(ИмяКолонки, ОписаниеТипов);
			ДобавленныеКолонки.Вставить(ИмяКолонки, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеКолонки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаНаОшибки

Процедура ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
			Или СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибки = СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных.ПримечаниеКРазборуШтрихкода.ТекстОшибки);
		
		Если Не ЕстьОшибки И ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
			
			ЭтоКодВводаОстатков = РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДанных.GTIN);
			
			СтрокаДанных.ЭтоКодВводаОстатков    = ЭтоКодВводаОстатков;
			СтрокаДанных.МаркируемаяПродукция   = Истина;
			СтрокаДанных.ТребуетсяСопоставление = Не ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
			
			Если ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
				СтрокаДанных.Количество = 1;
				Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
					СтрокаДанных.СтрокаДерева.Количество = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет первоначальное заполнение таблицы "ДанныеКодовМаркировки" на основании "ДанныеШтрихкодов".
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам.
//  СписокДанныхШтрихкода - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
Процедура ЗаполнитьДанныеКодовМаркировкиВходящимиДанными(ДанныеПоШтрихкодам, СписокДанныхШтрихкода, ПараметрыСканирования)
	
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	Если Не ДанныеПоШтрихкодам.ЭтоОбработкаВводаШтрихкода
		И ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		
		Если КэшМаркируемойПродукции <> Неопределено
			И КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Количество() > 0 Тогда
			
			Для Каждого ОтложенныйКод Из КэшМаркируемойПродукции.ОтложенныеКодыМаркировки Цикл
				ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ОтложенныйКод);
				НоваяСтрока = ДанныеКодовМаркировки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтложенныйКод);
				НоваяСтрока.Входящий = Истина;
			КонецЦикла;
			
			КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = Новый Массив;
			ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнятьДанныеRFID = Неопределено;
	
	ДанныеRFID = Неопределено;
	ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеRFID", ДанныеRFID);
	
	СоответствиеВидовПродукции = Новый Соответствие;
	
	Для Каждого ДанныеШтрихкода Из СписокДанныхШтрихкода Цикл
		
		НоваяСтрока = ДанныеКодовМаркировки.Добавить();
		НоваяСтрока.Штрихкод   = СокрЛП(ДанныеШтрихкода.Штрихкод);
		НоваяСтрока.Количество = ДанныеШтрихкода.Количество;
		НоваяСтрока.Входящий   = Истина;
		
		Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура") 
			И ДанныеШтрихкода.Свойство("ВидУпаковки")
			И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
			И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки") Тогда
			НоваяСтрока.ОбработатьБезМаркировки = ДанныеШтрихкода.ОбработатьБезМаркировки;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
			И ДанныеШтрихкода.Свойство("ШтрихкодBase64") Тогда
			НоваяСтрока.ШтрихкодBase64 = ДанныеШтрихкода.ШтрихкодBase64;
		Иначе
			НоваяСтрока.ШтрихкодBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
		КонецЕсли;
		
		Если ЗаполнятьДанныеRFID = Неопределено Тогда
			ЗаполнятьДанныеRFID = (ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
				И ДанныеШтрихкода.Свойство("ДанныеRFID")
				И ДанныеШтрихкода.Свойство("ВидПродукции")
				И ДанныеШтрихкода.Свойство("ВидУпаковки")
				И ДанныеШтрихкода.ДанныеRFID <> Неопределено);
		КонецЕсли;
		
		Если ЗаполнятьДанныеRFID Тогда
			
			НоваяСтрока.МаркируемаяПродукция = Истина;
			НоваяСтрока.ДанныеRFID   = ДанныеШтрихкода.ДанныеRFID;
			НоваяСтрока.GTIN         = ДанныеШтрихкода.ДанныеRFID.GTIN;
			НоваяСтрока.ВидПродукции = ДанныеШтрихкода.ВидПродукции;
			НоваяСтрока.ВидУпаковки  = ДанныеШтрихкода.ВидУпаковки;
			НоваяСтрока.ВидыПродукцииКодаМаркировки.Добавить(НоваяСтрока.ВидПродукции);
			
			СоответствиеВидовПродукции.Вставить(ДанныеШтрихкода.ВидПродукции, Истина);
			
		ИначеЕсли ДанныеRFID <> Неопределено Тогда
			НоваяСтрока.ДанныеRFID = ДанныеRFID;
			НоваяСтрока.GTIN       = ДанныеRFID.GTIN;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.GTIN) Тогда
			НоваяСтрока.EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(НоваяСтрока.GTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеВидовПродукции Цикл
		Если ДанныеПоШтрихкодам.ВидыПродукции.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку на соответствие вида продукции номенклатуры виду продукции, вычисленному по значению кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыдаватьОшибку = Истина;
		ЭтоКодМаркировкиИСМП = СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() > 1;
		Если ЭтоКодМаркировкиИСМП И ДопустимыСтрокиДанныхБезВидаПродукции Тогда
			ВыдаватьОшибку = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И Не ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И ПараметрыСканирования.ТолькоМаркируемаяПродукция
			И ВыдаватьОшибку Тогда
			
			СтрокаДанных.ТекстОшибки = ТекстОшибкиНеЗаданВидПродукцииНоменклатуры(СтрокаДанных.Номенклатура);
			ЕстьОшибки = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки        = СтрокаДанных.ТекстОшибки;
			КонецЕсли;
			
		ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры И ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
			
			ЭтоСменаАТП = СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				И СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Табак) <> Неопределено;
			
			Если НЕ ЭтоСменаАТП Тогда
				СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(СтрокаДанных.ВидыПродукцииКодаМаркировки);
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку вида продукции: при сканировании неизвестной упаковки, ее вид продукции должен быть известен.
// 
// Параметры:
// 	ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
// 	ПараметрыСканирования - См. ПараметрыСканирования
//
Процедура ПроверитьВидПродукцииУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДопустимыхВидовПродукцииИСМП = ПараметрыСканирования.ДопустимыеВидыПродукции.Количество();
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.ПустаяСсылка()) <> Неопределено Тогда
		КоличествоДопустимыхВидовПродукцииИСМП = КоличествоДопустимыхВидовПродукцииИСМП - 1;
	КонецЕсли;
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		КоличествоДопустимыхВидовПродукцииИСМП = КоличествоДопустимыхВидовПродукцииИСМП - 1;
	КонецЕсли;
	Если КоличествоДопустимыхВидовПродукцииИСМП < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		ИначеЕсли СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		ИначеЕсли СтрокаДанных.Идентифицирован Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ТекстОшибки = ТекстОшибкиНеопределеннойУпаковки();
		
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
			ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
			СтрокаДанных.СтрокаДерева.ТекстОшибки        = СтрокаДанных.ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку видов продукции данных по штрихкодам на вхождение в массив допустимых видов продукции, который
// задан в параметрах сканирования.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	ДопустимыСтрокиДанныхБезВидаПродукции = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ОпределениеВидаПродукцииИСМП")
		И ПараметрыСканирования.ОпределениеВидаПродукцииИСМП;
	
	Отказ                = Ложь;
	ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	УчитываемыеВидыМаркируемойПродукции = Неопределено;
	
	ДопустимаАТП = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.АльтернативныйТабак) <> Неопределено;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ВидыПродукции = Новый Массив;
		
		ВыдаватьОшибку = Истина;
		ЭтоКодМаркировкиИСМП = СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() > 1;
		Если ЭтоКодМаркировкиИСМП И ДопустимыСтрокиДанныхБезВидаПродукции Тогда
			ВыдаватьОшибку = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
				И ДопустимаАТП Тогда
				ВыдаватьОшибку = ЗначениеЗаполнено(СтрокаДанных.Номенклатура);
			Иначе
				ВыдаватьОшибку = Истина;
			КонецЕсли;
			
			Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаДанных.ВидПродукции) = Неопределено
				И ВыдаватьОшибку
				И ВидыПродукции.Найти(СтрокаДанных.ВидПродукции) = Неопределено Тогда
				ВидыПродукции.Добавить(СтрокаДанных.ВидПродукции);
			КонецЕсли;
			
		ИначеЕсли ВыдаватьОшибку
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции Тогда
			
			РезультатРазбора = СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора;
			Для Каждого Элемент Из РезультатРазбора Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукции, Элемент.ВидыПродукции, Истина);
			КонецЦикла;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидыПродукции.Количество() > 0 Тогда
			
			Отказ = Истина;
			
			Если УчитываемыеВидыМаркируемойПродукции = Неопределено И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
				
				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
				УчитываемыеВидыМаркируемойПродукции = Модуль.УчитываемыеВидыМаркируемойПродукции();
				
				ВидыПродукцииПоКоторымВыключенУчет = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВидыПродукции, УчитываемыеВидыМаркируемойПродукции);
				Если ВидыПродукцииПоКоторымВыключенУчет.Количество() Тогда
					СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукцииПоКоторымВыключенУчет, Истина);
				Иначе
					СтрокаДанных.ТекстОшибки = ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукции);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОшибки                                          = ?(Отказ, Истина, ЕстьОшибки);
	ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции = ?(Отказ, Истина, ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции);
	
КонецПроцедуры

Процедура ПроверитьНаСоответствиеПараметруСканированияТолькоМаркируемаяПродукция(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
			И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
			И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И СтрокаДанных.МаркируемаяПродукция <> Истина
			И ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
			
			СтрокаДанных.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Номенклатура %1 является немаркируемой'"),
				СтрокаДанных.Номенклатура);
			ЕстьОшибки = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДерева) Тогда
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаДанных.СтрокаДерева.ТекстОшибки        = СтрокаДанных.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасширенныеПроверкиШтрихкодов(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.РасширенныеПроверкиШтрихкодов(ПараметрыСканирования, ДанныеПоШтрихкодам, ЕстьОшибки);
	
		Если ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Или Не ЕстьОшибки Тогда
		
			ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
			
			Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
				И ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Тогда
					
				//@skip-check wrong-string-literal-content
				МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
				МодульШтрихкодированиеЕГАИС.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПроверкаОшибкиПриРазбореКодаМаркировки(СтрокаДанных, ПараметрыСканирования)
	
	Если ПустаяСтрока(СтрокаДанных.ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	Если НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод) = 0 Тогда
		РезультатОбработки.Штрихкод = СтрокаДанных.Штрихкод;
	КонецЕсли;
	РезультатОбработки.ЕстьОшибки  = Истина;
	РезультатОбработки.ТекстОшибки = СтрокаДанных.ТекстОшибки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПроверкаТребуетсяОбработкаШтрихкода(СтрокаДанных)
	
	Если Не СтрокаДанных.ТребуетсяОбработкаШтрихкода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	Если НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод) = 0 Тогда
		РезультатОбработки.Штрихкод = СтрокаДанных.Штрихкод;
	КонецЕсли;
	РезультатОбработки.ТребуетсяОбработкаШтрихкода  = Истина;
	Если СтрокаДанных.ДополнительныеПараметры <> Неопределено Тогда
		РезультатОбработки.ДанныеШтрихкода = СтрокаДанных.ДополнительныеПараметры;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку на допустимость обработки вида продукции ИС. Допустимые виды продукции задаются в параметрах
// сканирования.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений Из (См. ИнициализироватьТаблицуМаркированныеТовары).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода.
Функция КонтрольНаДопустимыеВидыПродукции(СтрокаДанных, ПараметрыСканирования)
	
	РезультатОбработки = Неопределено;
	
	ВидПродукцииИС = СтрокаДанных.ВидПродукции;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		
		ИдентификаторыОшибок = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции Тогда
			
			ВидыПродукцииИС = Новый Массив;
			
			РезультатРазбора = СтрокаДанных.ПримечаниеКРазборуШтрихкода.РезультатРазбора;
			Для Каждого Элемент Из РезультатРазбора Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыПродукцииИС, Элемент.ВидыПродукции, Истина);
			КонецЦикла;
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидыПродукцииИС);
			
		ИначеЕсли ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 0
			И СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() > 0 Тогда
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, СтрокаДанных.ВидыПродукцииКодаМаркировки);
			
		// Сканирование немаркируемой продукции в форме проверки и подбора
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1
			И ПараметрыСканирования.ДопустимыеВидыПродукции[0] <> ВидПродукцииИС Тогда
			
			РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, НСтр("ru = 'Немаркируемая продукция'"));
			
		КонецЕсли;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	ДопустимВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
	Если Не ДопустимВидПродукции Тогда
		
		РезультатОбработки = РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидПродукцииИС);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку кода маркировки на уже обработанный, путем поиска в кэше обработанных кодов маркировки.
// 
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений из см. ИнициализироватьТаблицуМаркированныеТовары
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ДанныеПоШтрихкодам - см. ИнициализацияДанныхПоШтрихкодам
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода.
Функция ПроверкаШтрихкодаНаУжеДобавленный(СтрокаДанных, ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Штрихкод = СтрокаДанных.Штрихкод;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	РезультатОбработкиИзКэша = ОбработанныеКодыМаркировки.Получить(Штрихкод);
	Если РезультатОбработкиИзКэша = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
			И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			СтрокаДанных.ВидПродукции,
			ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, СтрокаДанных.ВидПродукции)) Тогда
		Если РезультатОбработкиИзКэша.ЧастичноеВыбытие Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	
	СтрокаДанных.ТекстОшибки                = ТекстОшибкиУжеДобавленаВДокумент();
	РезультатОбработки                      = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	РезультатОбработки.ДанныеШтрихкода      = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	РезультатОбработки.ЕстьОшибки           = Истина;
	РезультатОбработки.ТекстОшибки          = ТекстОшибкиУжеДобавленаВДокумент();
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет проверку сценария: групповая загрузка кодов маркировки по которым требуется указать вес или объем
// 
// Параметры:
// ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
// ПараметрыСканирования - См. ПараметрыСканирования
// ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПроверитьУказаниеКоличестваПриГрупповойЗагрузке(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
	
		Если СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.Количество = 0
			И СтрокаДанных.ТребуетВзвешивания
			И СтрокаДанных.СтрокаДерева <> Неопределено
			И СтрокаДанных.СтрокаДерева.Родитель <> Неопределено Тогда
			
			ТекстОшибки = ТекстОшибкиТребуетВзвешиванияПриГрупповойОбработке();
			
			ЕстьОшибки = Истина;
			
			ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			СтрокаДанных.ТекстОшибки                     = ТекстОшибки;
			СтрокаДанных.СтрокаДерева.ЕстьОшибки         = Истина;
			СтрокаДанных.СтрокаДерева.ТекстОшибки        = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ТекстыОшибок

// Возвращает текст ошибки, что указание количества недопустимо при групповой обработке.
//
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиТребуетВзвешиванияПриГрупповойОбработке()
	
	ТекстОшибки =  НСтр("ru = 'Для кода маркировки требуется указание индивидуального количества'");
	Возврат ТекстОшибки;
	
КонецФункции

// Возвращает текст ошибки, что вид продукции не поддерживается.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений Из (См. ИнициализироватьТаблицуМаркированныеТовары).
//  ПоддерживаемыеВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Список допустимых видов продукции.
//  ВидПродукцииШтрихкода - ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - вид продукции штрихкода.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиНеПоддерживаетсяВидПродукции(СтрокаДанных, ПоддерживаемыеВидыПродукции, ВидПродукцииШтрихкода)
	
	ПредставлениеВидаПродукции = НСтр("ru = '<нет данных>'");
	Если ЗначениеЗаполнено(ВидПродукцииШтрихкода) Тогда
		Если ТипЗнч(ВидПродукцииШтрихкода) = Тип("Массив") Тогда
			ПредставлениеВидаПродукции = СтрСоединить(ВидПродукцииШтрихкода, ", ");
		Иначе
			ПредставлениеВидаПродукции = Строка(ВидПродукцииШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
	Позиция = НайтиНедопустимыеСимволыXML(СтрокаДанных.Штрихкод);
	Если Позиция > 0 Тогда
		СтрокаДанных.Штрихкод = Лев(СтрокаДанных.Штрихкод, Позиция - 1);
	КонецЕсли;
	ПредставлениеШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПредставлениеШтрихкода(СтрокаДанных.Штрихкод);
	
	Если ПоддерживаемыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = НСтр("ru = 'Не определены'");
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПоддерживаемыеВидыПродукции, ", ");
	КонецЕсли;
	
	Фрагмент1 = НСтр("ru = 'Считанный код'");
	Фрагмент2 = Новый ФорматированнаяСтрока(
		ПредставлениеШтрихкода, Новый Шрифт(,,,,Истина),
		ЦветаСтиля.ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	Фрагмент3 = СтрШаблон(НСтр("ru='опознан как %1.'"), НРег(ПредставлениеВидаПродукции));
	Фрагмент4 = СтрШаблон(НСтр("ru='Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, " ", Фрагмент2, " ", Фрагмент3, Символы.ПС, Фрагмент4);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстОшибкиНеЗаданВидПродукцииНоменклатуры(Номенклатура)
	
	ШаблонОшибки =  НСтр("ru = 'Не задан вид продукции номенклатуры %1'");
	Возврат СтрШаблон(ШаблонОшибки, Номенклатура);
	
КонецФункции

Функция ТекстОшибкиШтрихкодСоответствуетВидамПродукции(ВидыПродукцииКодаМаркировки, ВыключенУчет = Ложь)
	
	ПредставлениеВидовПродукцииКода = СтрСоединить(ВидыПродукцииКодаМаркировки, ",");
	
	Если ВыключенУчет Тогда
		ШаблонОшибки = НСтр("ru = 'В информационной базе выключен учет по видам продукции: %1'");
	Иначе
		ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует недопустимым видам продукции: %1'");
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонОшибки, ПредставлениеВидовПродукцииКода);
	
КонецФункции

Функция ТекстОшибкиНеопределеннойУпаковки()
	
	Возврат НСтр("ru = 'Отсканируйте код логистической упаковки в соответствующей форме
	                   |проверки и подбора маркируемой продукции'");
	
КонецФункции

// Возвращает шаблон ошибки уже добавлена в документ.
//
// Возвращаемое значение:
//  Строка - Шаблон ошибки.
Функция ТекстОшибкиУжеДобавленаВДокумент() Экспорт
	
	Возврат НСтр("ru='Уже добавлена в документ'");
	
КонецФункции

Функция ТекстОшибкиТребуетсяУточнениеКоличества() Экспорт
	
	Возврат НСтр("ru='Требуется индивидуальное считывание с указанием веса'");
	
КонецФункции

Функция ТекстОшибкиТолькоВесоваяПродукция(СтрокаДанных) Экспорт
	
	ПредставлениеШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПредставлениеШтрихкода(СтрокаДанных.Штрихкод);
	
	Возврат СтрШаблон(НСтр("ru = 'Считанный код %1 не требует уточнения веса.
	                             |Отсканируйте код весовой продукции.'"), ПредставлениеШтрихкода);
	
КонецФункции

Функция ТекстОшибкиОбрабатываетсяПовторно()
	
	Возврат НСтр("ru='Обрабатывается повторно'");
	
КонецФункции

Функция ТекстОшибкиОшибкаВДеревеУпаковок()
	
	Возврат НСтр("ru='Проблемы с содержимым'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеИОбработкаРезультата

#Область РезультатКодНеОтноситсяКБиблиотеке

Функция РезультатДобавленияНемаркируемойПродукции(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатДобавления = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	РезультатДобавления.ИсходныеДанные = Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	РезультатДобавления.ОбработкаШтрихкодаБезМарки = ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
	РезультатДобавления.ТребуетсяОбработкаШтрихкода = Истина;
	
	Возврат РезультатДобавления;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеДанныхПоОтсканированномуШК

// Собирает данные по маркируемой продукции, которые хранятся в ИБ. Обновляет данные штрихкодов упаковок.
//
// Параметры:
//  ДанныеПоШтрихкодам    - См. ИнициализацияДанныхПоШтрихкодам
//  ДобавленныеСтроки     - Массив Из СтрокаТаблицыЗначений: См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//                        - Неопределено
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ЗаполнитьПоСсылкам    - Булево - Выполнить считывание данных из ссылок ШтрихкодУпаковки добавленных строк
Процедура ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ДобавленныеСтроки, ПараметрыСканирования, ЗаполнитьПоСсылкам = Ложь) Экспорт
	
	ШтрихкодыМаркируемойПродукции = Новый Массив;
	Если ДобавленныеСтроки = Неопределено Тогда
		ДобавленныеСтроки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДобавленныеСтроки Цикл
		
		Если ЗаполнитьПоСсылкам Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
				ШтрихкодыМаркируемойПродукции.Добавить(СтрокаДанных.ШтрихкодУпаковки);
			КонецЕсли;
			
		Иначе
			
			// Пропуск строки по флагу ОбработанСОшибками не требуется,
			// так как в этом случае будет заполнено некорректное представление
			// в строках, требующих уточнения номенклатуры.
			
			Если ЗначениеЗаполнено(СтрокаДанных.Штрихкод)
				И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
					Или (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
						И Не ПараметрыСканирования.СозданиеНаборов)) Тогда
				ШтрихкодыМаркируемойПродукции.Добавить(СтрокаДанных);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьПоСсылкам Тогда
		ТипыУпаковок = Неопределено;
	Иначе
		ТипыУпаковок = Новый Массив;
		ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	КонецЕсли;
	
	ОбработатьШтрихкодыУпаковокПоДаннымБазы(ПараметрыСканирования, ДанныеПоШтрихкодам, ШтрихкодыМаркируемойПродукции, ТипыУпаковок, ЗаполнитьПоСсылкам);
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииПоРасширеннойВерсииСУчетомСпецифики(ПараметрыСканирования, ДанныеПоШтрихкодам);
	
	Если ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИдентификатораРозничнойПродажиПоОбязательнымТоварнымГруппам(ДанныеПоШтрихкодам, ПараметрыСканирования)

	Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеИдентификатораРозничнойПродажиПоОбязательнымТоварнымГруппам(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;

КонецПроцедуры

Функция ЭтоПолныйКодМаркировки(СтрокаТаблицы, ТолькоПотребительскиеУпаковки = Истина) Экспорт
	
	Если (Не ТолькоПотребительскиеУпаковки Или СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская)
		И СтрокаТаблицы.СоставКодаМаркировки <> Неопределено
		И СтрокаТаблицы.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
		И СтрокаТаблицы.СоставКодаМаркировки.ВключаетКриптоХвост Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Дополняет структуру "Данные по штрихкодам" информацией по известным наборам (режим создания наборов).
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//  ДанныеКодовМаркировкиКОбработке - Массив Из СтрокаТаблицыЗначений - Строки данных кодов маркировки для обработки
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
Процедура ЗаполнитьДанныеИзвестныхСозданныхНаборов(ДанныеПоШтрихкодам, ДанныеКодовМаркировкиКОбработке = Неопределено, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СозданиеНаборов Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодИСтрокаДанныхКодаМаркировки = Новый Соответствие;
	ШтрихкодыУпаковокДляОпределения     = Новый Массив;
	
	Если ДанныеКодовМаркировкиКОбработке = Неопределено Тогда
		ДанныеКодовМаркировкиКОбработке = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировкиКОбработке Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И Не СтрокаДанных.Идентифицирован Тогда
			ШтрихкодыУпаковокДляОпределения.Добавить(СтрокаДанных);
			ШтрихкодИСтрокаДанныхКодаМаркировки[СтрокаДанных.Штрихкод] = СтрокаДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыУпаковокДляОпределения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИзвестныеУпаковкиРасширенные(ПараметрыСканирования, ШтрихкодИСтрокаДанныхКодаМаркировки, ШтрихкодыУпаковокДляОпределения, ДанныеПоШтрихкодам);
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
Процедура ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ЕстьНеизвестныеШтрихкодыУпаковок = Ложь;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками
			Или ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоУпаковкаПоВиду(СтрокаДанных.ВидУпаковки, Истина, Ложь)
			И Не СтрокаДанных.Идентифицирован
			И Не ЭтоАгрегатТСД(СтрокаДанных.Штрихкод) Тогда
			ЕстьНеизвестныеШтрихкодыУпаковок = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьНеизвестныеШтрихкодыУпаковок Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования)
		И ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыСканирования

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Если (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
			Или ВидПродукции = Неопределено) Тогда
			
			//@skip-check wrong-string-literal-content
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер");
			Модуль.ЗаполнитьПараметрыСканирования(
				ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Или ВидПродукции = Неопределено) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора, ПараметрыРежимаИсправленияОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыРежимаИсправленияОшибок - Структура - Параметры режима исправления ошибок.
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ФормаВыбора, ВидПродукции, ПараметрыРежимаИсправленияОшибок = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			//@skip-check wrong-string-literal-content
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиентСервер");
			Модуль.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования, ПараметрыРежимаИсправленияОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВидовПродукции

// Определяет по контексту возможность работы с алкоголем.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ПеречислениеСсылка.ВидыПродукцииИС -
//  контекст, по которому будет определяться возможность работы с алкогольной продукцией.
// Возвращаемое значение:
//  Булево - Истина, если для контекста разрешена работа с алкогольной продукцией.
Функция ДопустимаАлкогольнаяПродукция(Контекст) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Алкогольная;
	КонецЕсли;
	
	Возврат ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Алкогольная);
	
КонецФункции

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ДопустимаТабачнаяПродукция(Контекст) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(Контекст);
	КонецЕсли;
	
	Возврат ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табак)
		Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.АльтернативныйТабак)
		Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
	
КонецФункции

// Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с продукцией из натурального меха.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с продукцией из натурального меха.
//
Функция ДопустимаПродукцияИзНатуральногоМеха(Контекст) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	КонецЕсли;
	
	Возврат ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыВызовСервера

//Выполняет обработку штрихкодов и возвращает результат этой обработки.
//
//Параметры:
//  ДанныеШтрихкодаСписок - Массив из Строка - значения штрихкодов
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ФормаУникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//                                                           штрихкодам в хранилище.
//                               - ФормаКлиентскогоПриложения - Форма, из которой осуществлен вызов
//  КешДанныхРазбора - Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - Структура - Данные разбора и примечание:
//      * ДанныеРазбора - Структура - Данные разбора штрикхода
//      * ПримечаниеКРезультатуРазбора - Структура - Примечание к результату разбора
//  ВнешниеДанныеПоШтрихкодам - Произвольный - известные данные обработки.
//Возвращаемое значение:
//  Структура:
//    * ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам
//    * РезультатыОбработки - Соответствие Из КлючИЗначение:
//       ** Ключ - Строка - Штрихкод
//       ** Значение - См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьШтрихкоды(ДанныеШтрихкодаСписок, ПараметрыСканирования, КэшированныеЗначения,
	ФормаУникальныйИдентификатор, КешДанныхРазбора = Неопределено, ВнешниеДанныеПоШтрихкодам = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатыОбработки, ДанныеПоШтрихкодам");
	
	Если ВнешниеДанныеПоШтрихкодам = Неопределено Тогда
		
		// На входе массив структур: штрихкод, количество
		ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам(Ложь);
		
		ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, КешДанныхРазбора);
		ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ОбработатьШтрихкодыПоВскрытымПотребительскимУпаковкам(
			ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, КешДанныхРазбора);
		
		ВнешниеДанныеПоШтрихкодам = ДанныеПоШтрихкодам;
		
	Иначе
		
		ДанныеПоШтрихкодам = ВнешниеДанныеПоШтрихкодам;
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,, Истина);
		
		ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
		ИндексироватьКолонкиТаблицыДанныхКодовМаркировки(ДанныеПоШтрихкодам.ДанныеКодовМаркировки);
		
		ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ЗаполнитьСведенияПоШтрихкодамEANСУчетомВерсии(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ЗаполнитьВидыПродукцииДанныхКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам,, ФормаУникальныйИдентификатор);
	
	// Логирование исходного значения штрихкода со сканера
	ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования, ДанныеШтрихкодаСписок);
	
	Если ТипЗнч(ФормаУникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ФормаУникальныйИдентификатор.УникальныйИдентификатор;
		Форма                   = ФормаУникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = ФормаУникальныйИдентификатор;
		Форма                   = Неопределено;
	КонецЕсли;
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		Или ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.УстановитьПризнакОтказаОтПроверкиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	РезультатПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
		ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ЕстьОшибкиИЧастичнаяОбработкаКодовМаркировкиНедоступна(ПараметрыСканирования, РезультатПроверок, ДанныеПоШтрихкодам) Тогда
		
		// Логирование результатов разбора штрихкода
		Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
			
			МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМПВызовСервера");
			МодульЛогированиеЗапросовИСМП.Вывести("",, РезультатПроверок);
			
		КонецЕсли;
		
		НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь, ФормаУникальныйИдентификатор);
		
		ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования);
		
		СтруктураВозврата.РезультатыОбработки = РезультатПроверок;
		СтруктураВозврата.ДанныеПоШтрихкодам  = ДанныеПоШтрихкодам;
		Возврат СтруктураВозврата;
			
	КонецЕсли;
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	ЗаполнитьКратностьТСД(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок);
	
	РезультатыОбработки = ОбработатьДанныеШтрихкодов(
		ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования, РезультатПроверок);
	
	// Логирование результатов разбора штрихкода
	ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования,, РезультатыОбработки);
	
	НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь, ФормаУникальныйИдентификатор);
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда

		Для Каждого СтрокаТаблицы Из РезультатыОбработки Цикл
			
			Если Не ТипЗнч(СтрокаТаблицы.Значение.ДанныеШтрихкода) = Тип("Структура")
				Или Не СтрокаТаблицы.Значение.ДанныеШтрихкода.Свойство("АдресЛогаЗапросов") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Значение.ДанныеШтрихкода.АдресЛогаЗапросов = ДанныеПоШтрихкодам.ЛогированиеЗапросов.АдресЛогаЗапросов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата.РезультатыОбработки = РезультатыОбработки;
	СтруктураВозврата.ДанныеПоШтрихкодам  = ДанныеПоШтрихкодам;
	
	//@skip-check constructor-function-return-section
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьКратностьТСД(ДанныеПоШтрихкодам, СвернутыеДанныеТСД)
	
	Если Не ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД Тогда
		Возврат;
	ИначеЕсли СвернутыеДанныеТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СвернутыеДанныеТСД Цикл
		Если СтрокаТЧ.Количество = 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКодаМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Найти(СтрокаТЧ.ШтрихкодBase64, "ШтрихкодBase64");
		Если СтрокаКодаМаркировки = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не СтрокаКодаМаркировки.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКодаМаркировки.КоличествоПотребительскихУпаковок = СтрокаКодаМаркировки.КоличествоПотребительскихУпаковок * СтрокаТЧ.Количество;
		СтрокаКодаМаркировки.Количество = ?(СтрокаКодаМаркировки.Количество = 0, СтрокаТЧ.Количество, СтрокаКодаМаркировки.Количество * СтрокаТЧ.Количество);
		СтрокаКодаМаркировки.СтрокаДерева.КоличествоПотребительскихУпаковок = СтрокаКодаМаркировки.КоличествоПотребительскихУпаковок;
		СтрокаКодаМаркировки.СтрокаДерева.Количество = СтрокаКодаМаркировки.Количество;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьОшибкиИЧастичнаяОбработкаКодовМаркировкиНедоступна(ПараметрыСканирования, РезультатПроверок, ДанныеПоШтрихкодам)
	
	Если РезультатПроверок.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат Истина;
	ИначеЕсли ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД
		И ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Ошибка Из РезультатПроверок Цикл
		Если Ошибка.Значение.ОбщаяОшибка Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//                                                      штрихкодам в хранилище.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  РезультатыПроверок - Массив Из См. ИнициализироватьРезультатОбработкиШтрихкода - Коды маркировки с заранее
//     известным результатом обработки.
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - Строка - Штрихкод
//   * Значение - См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеШтрихкодов(ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования, РезультатыПроверок)
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор"));
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	РезультатыОбработки = ОбработатьДанныеПоШтрихкодам(
		ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, УникальныйИдентификатор, РезультатыПроверок);
	
	ДеревоУпаковок = ?(
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено,
		Неопределено,
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
	
	ОшибкиПриОбработке = Ложь;
	ДанныеДляКэширования = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатыОбработки Цикл
		
		РезультатОбработки = КлючИЗначение.Значение;
		
		ЕстьОшибкиПриОбработке = ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки)
			Или РезультатОбработки.ЕстьОшибки
			Или РезультатОбработки.ЕстьОшибкиВДеревеУпаковок
			Или (РезультатОбработки.ТребуетсяПроверкаСредствамиККТ
				И Не РезультатОбработки.ПроверкаСредствамиККТЗавершена);
		
		Если РезультатОбработки.ОбщаяОшибка
			Или РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры
			Или РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок
			Или (ЕстьОшибкиПриОбработке И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД) Тогда
			
			ОшибкиПриОбработке = Истина;
			Прервать;
			
		Иначе
			
			Если ЕстьОшибкиПриОбработке
				И ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДляКэширования.Добавить(
				Новый Структура(
					"ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок",
					РезультатОбработки.ДанныеШтрихкода,
					РезультатОбработки,
					ДеревоУпаковок));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОшибкиПриОбработке Тогда
		
		Для Каждого ДанныеКэша Из ДанныеДляКэширования Цикл
			
			ЗакэшироватьОбработанныеШтрихкоды(
				ПараметрыСканирования, ДанныеКэша.ДанныеШтрихкода,
				ДанныеКэша.РезультатОбработки, ДанныеКэша.ДеревоУпаковок);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатыОбработки;
	
КонецФункции

Процедура ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	ДанныеПоШтрихкодам.ВидыПродукции                 = Новый Массив;
	ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция = Ложь;
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	
	СоответствиеВидовПродукции = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ВидПродукции) Тогда
			ДобавитьЭлемент = СоответствиеВидовПродукции[ЭлементДанных.ВидПродукции] = Неопределено;
			Если ДобавитьЭлемент Тогда
				СоответствиеВидовПродукции.Вставить(ЭлементДанных.ВидПродукции, Истина);
				ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ЭлементДанных.ВидПродукции);
			КонецЕсли;
		ИначеЕсли ЭлементДанных.ПрисутствуетТабачнаяПродукция Тогда
			ДанныеПоШтрихкодам.ПрисутствуетТабачнаяПродукция = Истина;
		ИначеЕсли ЭлементДанных.ЭтоКодВводаОстатков Тогда
			ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Включить = Истина, ФормаУникальныйИдентификатор = Неопределено)
	
	ЗаписыватьЛогиПроверкиКодовМаркировки = ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП;
	
	Если ЗаписыватьЛогиПроверкиКодовМаркировки Тогда
		
		МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
		МодульЛогированиеЗапросовИСМП.НастроитьДанныеПоШтрихкодам(
			ДанныеПоШтрихкодам,
			ПараметрыСканирования,
			Включить,
			ФормаУникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования, ДанныеЗаписиШтрихкода = Неопределено, ДанныеЗаписиРезультатОбработки = Неопределено)
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
		
		МодульЛогированиеЗапросовИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМПВызовСервера");
		МодульЛогированиеЗапросовИСМП.Вывести("", ДанныеЗаписиШтрихкода, ДанныеЗаписиРезультатОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// Сценарий: данные по штрихкоду были получены ранее, а пользователь выполнил 
//   уточнение данных (выбор номенклатуры, серии, ввод кода маркировки итп).
//
Функция РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	ДанныеШтрихкодаВКоллекции = Новый Массив;
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОбновитьНеобходимостьУточненияДанных(ДанныеШтрихкода);
	ДанныеШтрихкодаВКоллекции.Добавить(ДанныеШтрихкода);
	
	// При преобразовании строки таблицы значений в структуру ДанныеШтрихкода методом СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру
	// происходит удаление колонки СтрокаДерева. Поэтому перед обработкой структуры колонка СтрокаДерева возвращается.
	ДанныеШтрихкода.Вставить("СтрокаДерева", Неопределено);
	
	ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам();
	//@skip-check wrong-type-expression
	ДанныеПоШтрихкодам.ДанныеКодовМаркировки = ДанныеШтрихкодаВКоллекции;
	
	СтрокиДляСохраненияКодовМаркировки = Новый Соответствие;
	
	// Требуется применить сохраненный выбор автоматически.
	ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, СтрокиДляСохраненияКодовМаркировки);
	ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(Форма) = Тип("УникальныйИдентификатор"));
	
	РезультатыОбработок = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Ложь, Форма, Новый Соответствие);
	Возврат РезультатыОбработок[ДанныеШтрихкода.Штрихкод];
	
КонецФункции

// Выполняет разбор штрихкода строки таблицы "ДанныеКодовМаркировки" и заполняет строку данными разбора.
// 
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений: См. ИнициализацияТаблицыДанныхКодовМаркировки.
//  ОбщиеМодули  - Структура - Общие модули.
Процедура ЗаполнитьСтрокуДанныхКодовМаркировкиПоДаннымРазбора(СтрокаДанных, ОбщиеМодули) Экспорт
	
	ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
	
	Если ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		СтрокаДанных.EAN  = ДанныеРазбора.СоставКодаМаркировки.EAN;
	КонецЕсли;
	
	СтрокаДанных.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
	Если Не (ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		И СтрНачинаетсяС(СтрокаДанных.Штрихкод, "(")) Тогда
		СтрокаДанных.Штрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	СтрокаДанных.ТипШтрихкода = ДанныеРазбора.ТипШтрихкода;
	
	ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора);
	
	Если ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
		СтрокаДанных.ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
	ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией Тогда
		СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	КонецЕсли;
	
	СтрокаДанных.ВидыПродукцииКодаМаркировки = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеРазбора.ВидыПродукции, Ложь);
	// АТП или классический табак - будет определено позднее.
	СтрокаДанных.ПрисутствуетТабачнаяПродукция = Ложь;
	Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 2 Тогда
		Если (СтрокаДанных.ВидыПродукцииКодаМаркировки[0] = Перечисления.ВидыПродукцииИС.Табак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[0] = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[0] = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция)
			И (СтрокаДанных.ВидыПродукцииКодаМаркировки[1] = Перечисления.ВидыПродукцииИС.Табак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[1] = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки[1] = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция) Тогда
			СтрокаДанных.ПрисутствуетТабачнаяПродукция = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Количество по коду маркировки определяется в процессе обработки.
	Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() Тогда
		СтрокаДанных.Количество = 0;
	КонецЕсли;
	
	СтрокаДанных.НормализованныйШтрихкод = СтрокаДанных.Штрихкод;
	Если ЗначениеЗаполнено(СтрокаДанных.ХешСуммаНормализации)
		И СтрокаДанных.ХешСуммаНормализации <> ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод) Тогда
		СтрокаДанных.ХешСуммаНормализации = "";
	КонецЕсли;

	// Нормализация используется для поиска КМ без учета МРЦ.
	// Для табачных пачек и блоков нормализованный код не содержит МРЦ.
	// Для логистические упаковки GS1-128 нормализованный код не содержит скобок.
	// Для остальной маркированной продукции нормализованный штрихкод равен штрихкоду.
	ВключаяТабачнуюПродукцию = Истина;
	Если ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
		ОбщиеМодули.ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(СтрокаДанных, ДанныеРазбора);
	КонецЕсли;
	
	Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		// Количество из тега 30
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("Коэффициент") Тогда
			Коэффициент = ДанныеРазбора.СоставКодаМаркировки.Коэффициент;
			Если Коэффициент <> Неопределено Тогда
				СтрокаДанных.Коэффициент = ДанныеРазбора.СоставКодаМаркировки.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.СоставКодаМаркировки.Свойство("МассаНеттоВКг") Тогда
			МассаНеттоВКг = СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг;
			Если МассаНеттоВКг <> Неопределено Тогда
				СтрокаДанных.Количество = МассаНеттоВКг;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидУпаковкиПоДаннымРазбораИлиСтрокеДанных(СтрокаДанных, ДанныеРазбора) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеРазбора.ВидУпаковки) Тогда
		СтрокаДанных.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
		ДанныеРазбора.ВидУпаковки = СтрокаДанных.ВидУпаковки;
	КонецЕсли;
	
КонецПроцедуры

#Область РезультатТребуетУточненияДанных

Функция РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Форма = Неопределено)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;
	РезультатОбработки.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	СоответствиеШтрихкодовКСопоставлению = Новый Соответствие;
	ШтрихкодыКСопоставлению = Новый Массив;
	ОтложенныеКодыМаркировки = Новый Массив;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ТребуетсяСопоставлениеНоменклатуры = Ложь;
		Если СтрокаДанных.Входящий И СтрокаДанных.ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			// Штрихкод добавляется в отложенные коды, не сопоставляется
		ИначеЕсли СтрокаДанных.ТребуетсяСопоставление
			И ПараметрыСканирования.СопоставлятьНоменклатуру
			И Не СтрокаДанных.ОбработанСОшибками Тогда
			ТребуетсяСопоставлениеНоменклатуры = Истина;
		КонецЕсли;
		
		ЭтоКодМаркировки = Истина;
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиНеСоответствуетНиОдномуШаблону Тогда
			ЭтоКодМаркировки = Ложь;
		КонецЕсли;
		
		Если СтрокаДанных.Входящий И ЭтоКодМаркировки Тогда
			
			ОтложенныйКод = Новый Структура(
				"Штрихкод, ШтрихкодBase64, Количество",
				СтрокаДанных.Штрихкод,
				СтрокаДанных.ШтрихкодBase64,
				СтрокаДанных.Количество);
				
			Если ЗначениеЗаполнено(ОтложенныйКод.ШтрихкодBase64) Тогда
				ОтложенныйКод.Вставить("Штрихкод", ОтложенныйКод.ШтрихкодBase64);
				ОтложенныйКод.Вставить("ФорматBase64", Истина);
			КонецЕсли;
			
			ОтложенныеКодыМаркировки.Добавить(ОтложенныйКод);
			
		КонецЕсли;
		
		Если ТребуетсяСопоставлениеНоменклатуры Тогда
			
			Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
				И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиНеСоответствуетНиОдномуШаблону
				И ЗначениеЗаполнено(СтрокаДанных.Штрихкод) Тогда
				ШтрихкодКСопоставлению = СтрокаДанных.Штрихкод;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.EAN) Тогда
				ШтрихкодКСопоставлению = СтрокаДанных.EAN;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				ШтрихкодКСопоставлению = СтрокаДанных.GTIN;
			Иначе
				ШтрихкодКСопоставлению = СтрокаДанных.Штрихкод;
			КонецЕсли;
			
			Если СоответствиеШтрихкодовКСопоставлению[ШтрихкодКСопоставлению] = Неопределено Тогда
				
				ШтрихкодыКСопоставлению.Добавить(
					Новый Структура(
						"Штрихкод, Количество", ШтрихкодКСопоставлению, 1));
				
				СоответствиеШтрихкодовКСопоставлению.Вставить(ШтрихкодКСопоставлению, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные",          Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество));
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", ШтрихкодыКСопоставлению);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ПараметрыСканирования",   ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64) Тогда
			ДанныеДляСопоставленияНоменклатуры.ИсходныеДанные.Штрихкод = ДанныеШтрихкода.ШтрихкодBase64;
			ДанныеДляСопоставленияНоменклатуры.ИсходныеДанные.Вставить("ФорматBase64", Истина);
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = ОтложенныеКодыМаркировки;
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = ДанныеДляСопоставленияНоменклатуры;
		
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
	РезультатОбработки.ДанныеШтрихкода                    = ДанныеШтрихкода;
	РезультатОбработки.ШтрихкодыПродукцииДляСопоставления = ШтрихкодыКСопоставлению;
	РезультатОбработки.Штрихкод                           = ДанныеШтрихкода.Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеНоменклатуры(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных = Истина;
	РезультатОбработкиШтрихкода.ДанныеШтрихкода = ДанныеШтрихкода;
	
	ПараметрыВыбора = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	
	Номенклатура   = Новый Массив;
	Характеристика = Новый Массив;
	Для Каждого Структура Из ДанныеШтрихкода.СписокНоменклатуры Цикл
		Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
			Номенклатура.Добавить(Структура.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(Структура.Характеристика) Тогда
			Характеристика.Добавить(Структура.Характеристика);
		КонецЕсли;
	КонецЦикла;
	
	Если Номенклатура.Количество() = 1 Тогда
		Номенклатура = Номенклатура[0];
	КонецЕсли;
	
	Если Характеристика.Количество() = 1 Тогда
		Характеристика = Характеристика[0];
	КонецЕсли;
	
	ПараметрыВыбора.Номенклатура          = Номенклатура;
	ПараметрыВыбора.Характеристика        = Характеристика;
	ПараметрыВыбора.КодМаркировки         = ДанныеШтрихкода.Штрихкод;
	ПараметрыВыбора.ШтрихкодEAN           = ДанныеШтрихкода.EAN;
	ПараметрыВыбора.ПараметрыСканирования = ПараметрыСканирования;
	
	РезультатОбработкиШтрихкода.ПараметрыУточненияДанных = ПараметрыВыбора;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Формирует результат обработки штрихкодов для кодов маркировки, данные которых не удалось сформировать в связи с их
// отсутствием.
//
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(Форма, ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ИсходныеДанные = Новый Структура(
		"Штрихкод, Количество",
		ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество);
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ИсходныеДанные = ИсходныеДанные;
	
	Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			Если ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки
				Или ДанныеШтрихкода.ОбработатьБезМаркировки
				Или Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
				
				ДанныеШтрихкода.ОбработатьБезМаркировки = Истина;
				ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
				
				РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				
			Иначе
				
				РезультатОбработки = РезультатОбработкиТребуетсяОткрытьФормуВводаКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Форма);
				
			КонецЕсли;
			
		Иначе
			
			ДанныеДляСопоставленияНоменклатуры = Новый Структура;
			ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные",          ИсходныеДанные);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
			ДанныеДляСопоставленияНоменклатуры.Вставить("ПараметрыСканирования",   ПараметрыСканирования);
			ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(ИсходныеДанные);
			
			КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
			КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
			КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляСопоставленияНоменклатуры;
			
			РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
			РезультатОбработки.ШтрихкодыПродукцииДляСопоставления.Добавить(ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Не ЭтоАгрегатТСД(ДанныеШтрихкода.Штрихкод) Тогда
		
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
			
			РезультатОбработки.ТекстОшибки = НСтр("ru = 'Упаковка не найдена'");
			РезультатОбработки.ЕстьОшибки  = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
			
		КонецЕсли;
		
	Иначе
		
		РезультатОбработки.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Форма)
		
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализацияДанныхПоШтрихкодам).
//  УточнениеКоэффициентовУпаковок - ТаблицаЗначений - Таблица для уточнения коэффициетов упаковок.
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеКоэффициентаУпаковок(ДанныеШтрихкода, УточнениеКоэффициентовУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	АдресУточнениеКоэффициентовУпаковок = ПоместитьВоВременноеХранилище(УточнениеКоэффициентовУпаковок, Новый УникальныйИдентификатор);
	
	ОтложенныеКодыМаркировки = Новый Массив;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		ЭтоКодМаркировки = Истина;
		Если СтрокаДанных.ПримечаниеКРазборуШтрихкода <> Неопределено
			И СтрокаДанных.ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиНеСоответствуетНиОдномуШаблону Тогда
			ЭтоКодМаркировки = Ложь;
		КонецЕсли;
		
		Если СтрокаДанных.Входящий
			И ЭтоКодМаркировки
			// ОСУ: Сканирование GTIN - Уточнение вида упаковки по GTIN - Уточнение количества потребительских упаковок
			И Не (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаДанных.КоличествоПотребительскихУпаковок = 0) Тогда
			
			ОтложенныйКод = Новый Структура(
				"Штрихкод, ШтрихкодBase64, Количество",
				СтрокаДанных.Штрихкод,
				СтрокаДанных.ШтрихкодBase64,
				СтрокаДанных.Количество);
			
			Если ЗначениеЗаполнено(ОтложенныйКод.ШтрихкодBase64) Тогда
				ОтложенныйКод.Вставить("Штрихкод", ОтложенныйКод.ШтрихкодBase64);
				ОтложенныйКод.Вставить("ФорматBase64", Истина);
			КонецЕсли;
			
			ОтложенныеКодыМаркировки.Добавить(ОтложенныйКод);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		ДанныеДляУточненияКоэффициентовУпаковок = Новый Структура;
		ДанныеДляУточненияКоэффициентовУпаковок.Вставить("ИсходныеДанные",                      Новый Структура("Штрихкод, Количество", ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода.Количество));
		ДанныеДляУточненияКоэффициентовУпаковок.Вставить("АдресУточнениеКоэффициентовУпаковок", АдресУточнениеКоэффициентовУпаковок);
		ДанныеДляУточненияКоэффициентовУпаковок.Вставить("ПараметрыСканирования",               ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64) Тогда
			ДанныеДляУточненияКоэффициентовУпаковок.ИсходныеДанные.Штрихкод = ДанныеШтрихкода.ШтрихкодBase64;
			ДанныеДляУточненияКоэффициентовУпаковок.ИсходныеДанные.Вставить("ФорматBase64", Истина);
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = ОтложенныеКодыМаркировки;
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "УточнениеКоэффициентовУпаковок";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляУточненияКоэффициентовУпаковок;
		
	КонецЕсли;
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ТребуетсяУточнениеКоэффициентовУпаковок = Истина;
	РезультатОбработки.ДанныеШтрихкода                         = ДанныеШтрихкода;
	РезультатОбработки.АдресУточнениеКоэффициентовУпаковок     = АдресУточнениеКоэффициентовУпаковок;
	РезультатОбработки.Штрихкод                                = ДанныеШтрихкода.Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код маркировки ввода остатков.
//
// Параметры:
//  ДанныеШтрихкода - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - см. ПараметрыСканирования.
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.Штрихкод        = ДанныеШтрихкода.Штрихкод;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код групповой упаковки.
//
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеКоличества(ДанныеШтрихкода) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.Штрихкод        = ДанныеШтрихкода.Штрихкод;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае сканирования упаковки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция РезультатТребуетсяУточнениеУпаковки(ДанныеШтрихкода, ПараметрыСканирования)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработки.ТребуетсяУточнениеСоставаУпаковки = Истина;
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура СохранитьАдресЛогаЗапросовПоСтрокам(ПараметрыСканирования, РезультатыОбработок, ДанныеПоШтрихкодам)
	
	Если ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
			
		Для Каждого СтрокаТаблицы Из РезультатыОбработок Цикл
			
			Если Не ТипЗнч(СтрокаТаблицы.Значение.ДанныеШтрихкода) = Тип("Структура")
				Или Не СтрокаТаблицы.Значение.ДанныеШтрихкода.Свойство("АдресЛогаЗапросов") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Значение.ДанныеШтрихкода.АдресЛогаЗапросов = ДанныеПоШтрихкодам.ЛогированиеЗапросов.АдресЛогаЗапросов;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбращениеКРасширеннойВерсииГосИС

Функция ЭтоАгрегатТСД(ЗначениеШтрихкода) Экспорт

	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ГрупповаяОбработкаШтрихкодовИС");
		Возврат ОбщийМодуль.ЭтоАгрегатТСД(ЗначениеШтрихкода);
	КонецЕсли;
	Возврат Ложь;

КонецФункции

Процедура ЗаполнитьПараметрыСканированияРасширенные(ПараметрыСканирования, Контекст)
	
	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ИСМП") Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСКлиентСервер");
		МодульШтрихкодированиеИСКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьОчисткуКэшаИОтложенныхКодов(ПараметрыСканирования, ДанныеКодовМаркировки, РезультатыПроверок)
	
	Результат = РезультатыПроверок[ДанныеКодовМаркировки[0].Штрихкод];
	
	Если Не ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		Возврат Результат;
	КонецЕсли;
	
	//@skip-check wrong-string-literal-content
	Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
	
	Если Результат.ОткрытьФормуВводаКодаМаркировки Тогда
		Модуль.ОчиститьОтложенныеКодыМаркировки(ПараметрыСканирования.КэшМаркируемойПродукции);
	Иначе
		ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по известным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ДанныеКодовМаркировкиКОбработке - Массив Из СтрокаТаблицыЗначений - Строки данных кодов маркировки для обработки
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
Процедура ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ДанныеКодовМаркировкиКОбработке = Неопределено, ПараметрыСканирования) Экспорт

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
	
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьДанныеИзвестныхУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам, ДанныеКодовМаркировкиКОбработке);
	
	КонецЕсли;

КонецПроцедуры

Процедура НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки);
		
	КонецЕсли;
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		ТребуетсяЧастичноеВыбытие = ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам);
		МодульШтрихкодированиеЕГАИС.НормализоватьДанныеВложенныхШтрихкодов(ДанныеПоШтрихкодам.ВложенныеШтрихкоды, ПараметрыСканирования, ДанныеКодовМаркировки, ТребуетсяЧастичноеВыбытие);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ОбновитьШтрихкодыУпаковок(СтрокиДляСохраненияКодовМаркировки, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС
		И (ДопустимаТабачнаяПродукция(ПараметрыСканирования) Или ДопустимаПродукцияИСМП(ПараметрыСканирования)) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьДанныеКодовМаркировкиПоДаннымУПД(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки,
			ПараметрыСканирования);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьДанныеRFID(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения, ПараметрыСканирования)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ОтметитьНовыеИИзмененныеШтрихкодыУпаковок(ДанныеПоШтрихкодам, ЭлементыДляИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьШтрихкодыУпаковокПоДаннымБазы(ПараметрыСканирования, ДанныеПоШтрихкодам, ШтрихкодыМаркируемойПродукции, ТипыУпаковок, ЗаполнитьПоСсылкам)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ОбработатьШтрихкодыУпаковокПоДаннымБазы(ПараметрыСканирования, ДанныеПоШтрихкодам, ШтрихкодыМаркируемойПродукции, ТипыУпаковок, ЗаполнитьПоСсылкам);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИзвестныеУпаковкиРасширенные(ПараметрыСканирования, ШтрихкодИСтрокаДанныхКодаМаркировки, ШтрихкодыУпаковокДляОпределения, ДанныеПоШтрихкодам)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьИзвестныеУпаковкиРасширенные(ПараметрыСканирования, ДанныеПоШтрихкодам, ШтрихкодыУпаковокДляОпределения, ШтрихкодИСтрокаДанныхКодаМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет выбранные номенклатуру, характеристику, серию в случае потокового сканирования (GTIN-уточнение-автовыбор КМ)
//   или при сканировании остаточного КМ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ПараметрыСканирования.
//  ЭлементыДляИзменения - Соответствие Из СтрокаДереваЗначений - 
Процедура ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьПоДаннымУточнения(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЭлементыДляИзменения - Массив из СтрокаТаблицыЗначений
Процедура ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьДанныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования, ЭлементыДляИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьПоДокументуИОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам, ПараметрыДополненияТаблицыДанныеКодовМаркировки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок,,
			ПараметрыСканирования, ПараметрыДополненияТаблицыДанныеКодовМаркировки);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПоШтриходамДаннымПулаGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования)

	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьСведенияПоШтриходамДаннымПулаGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;

КонецПроцедуры

Функция ОписанияGTINПоДаннымШтрихкодов(ПараметрыСканирования, ДанныеGTIN)
	
	ОписанияGTIN = Новый Соответствие();

	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		ОписанияGTIN = Модуль.ОписанияGTINПоДаннымШтрихкодов(ДанныеGTIN);
		
	КонецЕсли;
	
	Возврат ОписанияGTIN;
	
КонецФункции

Процедура ЗаполнитьДанныеВложенныхШтрихкодовДереваУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ЗаполнитьДанныеВложенныхШтрихкодовДереваУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВскрытыхПотребительскихУпаковок(ПараметрыСканирования, ДанныеПоШтрихкодам)

	Если Не (ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина)
			Или ДопустимаАлкогольнаяПродукция(ПараметрыСканирования))
		Или Не ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
		Возврат;
	КонецЕсли;

	СтрокиДереваПоШтрихкодуУпакови = Новый Соответствие();
	ШтрихкодыУпаковок              = Новый Массив();

	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(СтрокаТаблицы.ВидПродукции) Тогда
			ШтрихкодУпаковки = ЗначениеШтрихкодаУпаковкиПоСтрокеТаблицыДанныхКодаМаркировки(СтрокаТаблицы, ПараметрыСканирования);
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
				СтрокиДереваПоШтрихкодуУпакови.Вставить(ШтрихкодУпаковки, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеВскрытыхУпаковок = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(ШтрихкодыУпаковок, Истина);

	Для Каждого ШтрихкодУпаковки Из ШтрихкодыУпаковок Цикл

		ДанныеВскрытия = ДанныеВскрытыхУпаковок[ШтрихкодУпаковки];
		СтрокаТаблицы  = СтрокиДереваПоШтрихкодуУпакови[ШтрихкодУпаковки];
		Если ДанныеВскрытия <> Неопределено Тогда
			СтрокаТаблицы.ЧастичноеВыбытиеОстаток = ДанныеВскрытия.Остаток;
			Если СтрокаТаблицы.СтрокаДерева <> Неопределено Тогда
				СтрокаТаблицы.СтрокаДерева.ЧастичноеВыбытиеОстаток = СтрокаТаблицы.ЧастичноеВыбытиеОстаток;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ЗначениеШтрихкодаУпаковкиПоСтрокеТаблицыДанныхКодаМаркировки(СтрокаТаблицы, ПараметрыСканирования)
	
	СтандартнаяОбработка       = Истина;
	ЗначеничеШтрихкодаУпаковки = Неопределено;
	
	ШтрихкодированиеИСПереопределяемый.ПриОпределенииЗначенияШтрихкодаУпаковкиПоСтрокеТаблицыДанныхКодовМаркировки(
		ЗначеничеШтрихкодаУпаковки, СтрокаТаблицы, ПараметрыСканирования, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ЗначеничеШтрихкодаУпаковки = СтрокаТаблицы.ШтрихкодУпаковки;
	КонецЕсли;
	
	Возврат ЗначеничеШтрихкодаУпаковки;
	
КонецФункции

Процедура ДополнитьКолонкамиРасширеннойВерсииРазбора(ДанныеКодовМаркировки)
	
	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ДополнитьКолонкамиРасширеннойВерсииРазбора(ДанныеКодовМаркировки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаСоответствиеДокументуОснованиюЧастично(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования)
	
	ДанныеОснования = Неопределено;
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		ДанныеОснования = Модуль.ПроверитьНаСоответствиеДокументуОснованиюЧастично(СтрокаДанных, ПараметрыСканирования, ДанныеДокументаОснования);
		
	КонецЕсли;
	
	Возврат ДанныеОснования;
	
КонецФункции

Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ПараметрыСканирования, Форма, ДанныеШтрихкода)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИС");
		Модуль.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ПараметрыСканирования, Форма, ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеШтрихкодовРасширеннойСпецификойЕГАИС(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
	
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		МодульШтрихкодированиеЕГАИС.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеШтрихкодовРасширеннойСпецификойМОТП(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	ШтрихкодированиеОбщегоНазначенияМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСМП.ЗаполнениеПолногоКодаМаркировкиПоДаннымСоставаКодаМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
	
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеШтрихкодовРасширеннойСпецификойИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСМП.ЗаполнениеПолногоКодаМаркировкиПоДаннымСоставаКодаМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииПоРасширеннойВерсииСУчетомСпецифики(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			МодульШтрихкодированиеЕГАИС.ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыФункции

// Обрабатывает входящее дерево упаковок из ИСМП- строки, не соответствующие условию отбора по виду продукции - удаляются
//  из дерева.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений, СтрокаДереваЗначений - строки для проверки на соотвествие виду продукции.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для отбора строк дерева.
//  ПараметрыПроверки - Неопределено, Структура  - служебный параметр, при первом вызове передавать Неопределено.
Процедура ОтобратьСтрокиДереваИСМППоВидуПродукции(ДеревоУпаковок, //СоответствиеСтрокДереваУпаковок,
		ВидПродукции, ПараметрыПроверки = Неопределено) Экспорт
	
	ПерваяИтерация = Ложь;
	МассивУдаляемыхСтрок = Новый Массив;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПерваяИтерация = Истина;
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("УдалитьТекущуюУпаковку", Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаДерева из ДеревоУпаковок.Строки Цикл
		
		Если ПерваяИтерация Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Ложь;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОтобратьСтрокиДереваИСМППоВидуПродукции(СтрокаДерева, ВидПродукции, ПараметрыПроверки);
		ИначеЕсли (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
			И СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
			ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
		КонецЕсли;
		
		Если ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			Если ПерваяИтерация Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Если СтрокаДерева.ВидПродукции <> ВидПродукции Тогда
				Если Не (СтрокаДерева.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
					И ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак) Тогда
					ПараметрыПроверки.УдалитьТекущуюУпаковку = Истина;
					Если ПерваяИтерация Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
					Иначе
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Не ПараметрыПроверки.УдалитьТекущуюУпаковку Тогда
			СтрокаДерева.ВидПродукции = ВидПродукции; // заполнить вид для мультитоварной упаковки
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПерваяИтерация Тогда
		
		Для Каждого СтрокаДерева из МассивУдаляемыхСтрок Цикл
			ДеревоУпаковок.Строки.Удалить(СтрокаДерева);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	Если ДанныеПоШтрихкодам <> Неопределено Тогда
		ВозвращаемоеЗначение = ДанныеПоШтрихкодам.ТребуетсяЧастичноеВыбытиеИС;
	КонецЕсли;
	Если ВозвращаемоеЗначение = Неопределено Тогда
		Если ПараметрыСканирования <> Неопределено
			И ПараметрыСканирования.Свойство("ТребуетсяЧастичноеВыбытие")
			И ПараметрыСканирования.ТребуетсяЧастичноеВыбытие Тогда
			
			ВозвращаемоеЗначение = ЕстьНоменклатураСЧастичнымВыбытием(ПараметрыСканирования);
			
		Иначе
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам <> Неопределено Тогда
			ДанныеПоШтрихкодам.ТребуетсяЧастичноеВыбытиеИС = ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЕстьНоменклатураСЧастичнымВыбытием(ПараметрыСканирования)
	
	ТребуетсяЧастичноеВыбытие = Ложь;
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОписаниеНоменклатурыИС.Номенклатура
			|ИЗ
			|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
			|ГДЕ
			|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)";
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Не РезультатЗапроса.Пустой() Тогда
			ТребуетсяЧастичноеВыбытие = Истина;
		КонецЕсли;
	Иначе
		ШтрихкодированиеИСПереопределяемый.ПриОпределенииНаличияНоменклатурыСЧастичнымВыбытием(ПараметрыСканирования, ТребуетсяЧастичноеВыбытие);
	КонецЕсли;
	
	Возврат ТребуетсяЧастичноеВыбытие;
	
КонецФункции

Процедура ЗаполнитьСтрокуДанныхКодовМаркировкиСНеопределеннымСоставомКода(СтрокаДанных)
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(СтрокаДанных.Штрихкод);
	Если ЭтоGTIN И СтрДлина(СтрокаДанных.Штрихкод) = 14 Тогда
		СтрокаДанных.EAN  = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаДанных.Штрихкод);
		СтрокаДанных.GTIN = СтрокаДанных.Штрихкод;
	ИначеЕсли ЭтоGTIN Тогда
		СтрокаДанных.EAN  = СтрокаДанных.Штрихкод;
		СтрокаДанных.GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаДанных.Штрихкод);
	Иначе
		
		ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
		ПримечаниеКРазборуШтрихкода = СтрокаДанных.ПримечаниеКРазборуШтрихкода;
		
		Если ПримечаниеКРазборуШтрихкода <> Неопределено 
			И ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам
			Тогда
			
			GTINЗаполнен                         = Ложь;
			СоставКодаМаркировки                 = Неопределено;
			ДанныеСоставаКодаМаркировкиСовпадают = Истина;
			СоответствиеНормализованныхКодов     = Новый Соответствие;
			СоответствиеТиповШтрихкода           = Новый Соответствие;
			Для Каждого ДанныеРазбора Из ПримечаниеКРазборуШтрихкода.РезультатРазбора Цикл
				
				Если Не GTINЗаполнен И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
					СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
					СтрокаДанных.EAN  = ДанныеРазбора.СоставКодаМаркировки.EAN;
					GTINЗаполнен = Истина;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаДанных.ВидыПродукцииКодаМаркировки, ДанныеРазбора.ВидыПродукции, Ложь);
				СоответствиеНормализованныхКодов.Вставить(ДанныеРазбора.НормализованныйКодМаркировки, Истина);
				СоответствиеТиповШтрихкода.Вставить(ДанныеРазбора.ТипШтрихкода, Истина);
				Если СоставКодаМаркировки = Неопределено Тогда
					
					СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
					
				Иначе
					
					Если Не ОбщегоНазначения.ДанныеСовпадают(СоставКодаМаркировки, ДанныеРазбора.СоставКодаМаркировки)
						Или Не ОбщегоНазначения.ДанныеСовпадают(ДанныеРазбора.СоставКодаМаркировки, СоставКодаМаркировки) Тогда
						ДанныеСоставаКодаМаркировкиСовпадают = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СоответствиеНормализованныхКодов.Количество() = 1 Тогда
				
				Для Каждого КлючИЗначение Из СоответствиеНормализованныхКодов Цикл
					СтрокаДанных.НормализованныйШтрихкод = КлючИЗначение.Ключ;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ХешСуммаНормализации)
					И СтрокаДанных.ХешСуммаНормализации <> ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод) Тогда
					СтрокаДанных.ХешСуммаНормализации = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Если СоответствиеТиповШтрихкода.Количество() = 1 Тогда
				Для Каждого КлючИЗначение Из СоответствиеТиповШтрихкода Цикл
					СтрокаДанных.ТипШтрихкода = КлючИЗначение.Ключ;
				КонецЦикла;
			КонецЕсли;
			
			Если ДанныеСоставаКодаМаркировкиСовпадают Тогда
				СтрокаДанных.СоставКодаМаркировки = СоставКодаМаркировки;
			КонецЕсли;
			
			СтрокаДанных.Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(
				СтрокаДанных.Штрихкод, "");
			
		Иначе
			
			СтрокаДанных.Штрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(
				СтрокаДанных.Штрихкод, "");
			СтрокаДанных.НормализованныйШтрихкод = СтрокаДанных.Штрихкод;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку Данных штрихкода на то, что уже данные обработаны.
//
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если данные штрихкода не требует повторной обработки.
Функция ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода) 
	
	Возврат (ДанныеШтрихкода.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура))
		Или (ДанныеШтрихкода.Свойство("МаркируемаяПродукция") И ДанныеШтрихкода.МаркируемаяПродукция = Истина);
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если есть ошибки в данных по штрихкодам.
//  ФормаУникальныйИдентификатор - ФормаКлиентскогоПриложения, УникальныйИдентификатор - источник вызова 
//    (если форма, то будет проводиться дополнительная обработка полученных данных соответственно источнику).
//  РезультатыПроверок - Соответствие Из КлючИЗначение:
//    Ключ - Строка - Обработанная строка кода маркировки.
//    Значение - См. ИнициализироватьРезультатОбработкиШтрихкода - Коды маркировки с заранее
//     известным результатом обработки.
// Возвращаемое значение:
//   См. ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, ФормаУникальныйИдентификатор, РезультатыПроверок) Экспорт
	
	ВложенныеШтрихкоды                      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	РезультатыОбработок                     = Новый Соответствие;
	ТребуетсяСопоставлениеНоменклатуры      = Ложь;
	ТребуетсяВыборНоменклатурыВводаОстатков = Ложь;
	Штрихкодов                              = 0;
	
	СтрокиТаблицыВводаОстатков = Новый Массив;
	
	УточнениеКоэффициентовУпаковок = ИнициализироватьТаблицуУточненияКоэффициентовУпаковок();
	
	ЗаполнитьТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		//@skip-check wrong-type-expression
		Если РезультатыПроверок.Получить(СтрокаТаблицы.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// Если штрихкоды были загружены из ТСД с иерархией, то
		// все штрихкоды будут входящими, но обработка требуется только для верхнего уровня
		ВходящийВерхнегоУровня = Ложь;
		Если СтрокаТаблицы.Входящий Тогда
			Если СтрокаТаблицы.СтрокаДерева = Неопределено Тогда
				ВходящийВерхнегоУровня = Истина;
			ИначеЕсли СтрокаТаблицы.СтрокаДерева <> Неопределено
				И СтрокаТаблицы.СтрокаДерева.Родитель = Неопределено Тогда
				ВходящийВерхнегоУровня = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВходящийВерхнегоУровня Тогда
			Штрихкодов = Штрихкодов + 1;
		КонецЕсли;
		
		Если ВходящийВерхнегоУровня И СтрокаТаблицы.ЭтоКодВводаОстатков И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ТребуетсяВыборНоменклатурыВводаОстатков = Истина;
			СтрокиТаблицыВводаОстатков.Добавить(СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.ТребуетсяСопоставление
			И ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
			ТребуетсяСопоставлениеНоменклатуры = Истина;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("GTIN", СтрокаТаблицы.GTIN);
			
			НайденныеСтроки = УточнениеКоэффициентовУпаковок.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ОписаниеGTIN = УточнениеКоэффициентовУпаковок.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеGTIN, СтрокаТаблицы);
				Если СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
					ОписаниеGTIN.ВидУпаковки = Перечисления.ВидыУпаковокИС.ПустаяСсылка();
				Иначе
					ОписаниеGTIN.ВидУпаковки = СтрокаТаблицы.ВидУпаковки;
				КонецЕсли;
			Иначе
				ОписаниеGTIN = НайденныеСтроки[0];
			КонецЕсли;
			
			Если ПустаяСтрока(ОписаниеGTIN.ПредставлениеСодержимоеУпаковки) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеНоменклатуры) Тогда
					ОписаниеGTIN.ПредставлениеСодержимоеУпаковки = СтрокаТаблицы.ПредставлениеНоменклатуры;
				Иначе
					ОписаниеGTIN.ПредставлениеСодержимоеУпаковки = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КэшОбщихМодулей = Неопределено;
	
	ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	Если ПодсистемаИСМПСуществует Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеОбщегоНазначенияИСМП = ОбщегоНазначенияИС.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП", КэшОбщихМодулей);
		
		Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
			//@skip-check wrong-string-literal-content
			МодульШтрихкодированиеМОТП = ОбщегоНазначенияИС.ОбщийМодуль("ШтрихкодированиеМОТП", КэшОбщихМодулей);
			
			Если УточнениеКоэффициентовУпаковок.Количество() > 0
				И ВложенныеШтрихкоды <> Неопределено Тогда
				
				МодульШтрихкодированиеМОТП.РасчетКоэффициентовПоСтатистике(
					ВложенныеШтрихкоды.ДеревоУпаковок,
					УточнениеКоэффициентовУпаковок,
					ПараметрыСканирования);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТребуетсяСопоставлениеНоменклатуры Или ДанныеПоШтрихкодам.ИерархическаяЗагрузкаИзТСД Тогда
		ОчиститьКэшМаркируемойПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ЕГАИС") Тогда
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		КонецЕсли;
		МодульШтрихкодированиеОбщегоНазначенияЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияЕГАИС");
	КонецЕсли;
	
	Шаблон = Неопределено;
	ГрупповаяЗагрузка = Штрихкодов > 1;
	ОбщаяОшибка = ЗначениеЗаполнено(ДанныеПоШтрихкодам.ТекстОшибки)
		И Не ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии
		И Не ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессииРозница;
	
	ТребуетсяУточнениеКоэффициентовУпаковок = (УточнениеКоэффициентовУпаковок <> Неопределено
		И УточнениеКоэффициентовУпаковок.Количество() > 0);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ЭтоМаркировкаТоваровИСМП") Тогда
		ЭтоМаркировкаТоваровИСМП = ПараметрыСканирования.ЭтоМаркировкаТоваровИСМП;
	Иначе
		ЭтоМаркировкаТоваровИСМП = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		// Если штрихкоды были загружены из ТСД с иерархией, то
		// все штрихкоды будут входящими, но обработка требуется только для верхнего уровня
		ВходящийВерхнегоУровня = СтрокаТаблицы.Входящий И
			(СтрокаТаблицы.СтрокаДерева = Неопределено
				Или СтрокаТаблицы.СтрокаДерева.Родитель = Неопределено);
		
		Если Не ВходящийВерхнегоУровня Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода    = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаТаблицы, Шаблон, ГрупповаяЗагрузка);
		ВидУпаковки        = ДанныеШтрихкода.ВидУпаковки;
		ВидПродукции       = ДанныеШтрихкода.ВидПродукции;
		РезультатОбработки = Неопределено;
		
		РезультатОбработки = РезультатыПроверок.Получить(СтрокаТаблицы.Штрихкод);
		// Обработка ошибок и уточнений во всех формах
		Если РезультатОбработки <> Неопределено Тогда // Ошибка получена ранее...
		
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ТребуетсяСопоставлениеНоменклатуры
			И Не ТребуетсяУточнениеКоэффициентовУпаковок Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования);
			ТребуетсяСопоставлениеНоменклатуры = Ложь;
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибки) Или ОбщаяОшибка Тогда
			
			РезультатОбработки = РезультатОбработкиШтрихкодаПриОшибках(
				ДанныеПоШтрихкодам, ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии
			Или ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессииРозница Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяОбновлениеКлючаСессии(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессииРозница);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ТребуетсяВыборНоменклатурыВводаОстатков
			И ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(СтрокаТаблицы, ПараметрыСканирования) Тогда
			
			РезультатОбработки = РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли УточнениеКоэффициентовУпаковок <> Неопределено
			И УточнениеКоэффициентовУпаковок.Количество() > 0 Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеКоэффициентаУпаковок(ДанныеШтрихкода, УточнениеКоэффициентовУпаковок, ДанныеПоШтрихкодам, ПараметрыСканирования);
			УточнениеКоэффициентовУпаковок = Неопределено;
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли ДанныеПоШтрихкодам.УточнитьУПользователя.Найти(СтрокаТаблицы.Штрихкод) <> Неопределено
			И СтрокаТаблицы.СтрокаДерева <> Неопределено
			И СтрокаТаблицы.СтрокаДерева.Строки.Количество() > 0
			И Не ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И СтрокаТаблицы.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка) Тогда
			
				РезультатОбработки = РезультатТребуетсяУточнениеУпаковки(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
				И ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0)
			Или ((ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				Или ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция)
				И ВидУпаковки = Перечисления.ВидыУпаковокИС.ПустаяСсылка())
			Или (ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара
				И СтрокаТаблицы.ТребуетВзвешивания
				И (СтрокаТаблицы.СтрокаДерева = Неопределено Или СтрокаТаблицы.СтрокаДерева.Строки.Количество() = 0)
				
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая И ЭтоМаркировкаТоваровИСМП)
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая И ЭтоМаркировкаТоваровИСМП)
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И ЭтоМаркировкаТоваровИСМП)
				И (СтрокаТаблицы.Количество = 0
				   Или ПараметрыСканирования.ТолькоВесоваяПродукция))
				
			Или (ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0) Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеКоличества(ДанныеШтрихкода);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли (ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
			И ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная
			И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И СтрокаТаблицы.СписокНоменклатуры.Количество() > 1 Тогда
			
			РезультатОбработки = РезультатТребуетсяУточнениеНоменклатуры(ДанныеШтрихкода, ПараметрыСканирования);
			
		// Обработка ошибок и уточнений во всех формах
		ИначеЕсли Не СтрокаТаблицы.Идентифицирован
			И СтрокаТаблицы.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			
			РезультатОбработки = РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(
				ФормаУникальныйИдентификатор, ДанныеШтрихкода, ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		// При сканировании в форме проверки и подбора
		ИначеЕсли ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора Тогда
			
			Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования)
				И (ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
					Или ПараметрыСканирования.ТолькоЕГАИС) Тогда
				
				РезультатОбработки = МодульШтрихкодированиеОбщегоНазначенияЕГАИС.РезультатОбработкиШтрихкодаАкцизнойМарки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор, МодульШтрихкодированиеЕГАИС);
				
			ИначеЕсли ПодсистемаИСМПСуществует
				И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
				
				РезультатОбработки = ШтрихкодированиеОбщегоНазначенияМОТП.РезультатОбработкиКодаМаркировки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор,, КэшОбщихМодулей);
				
			ИначеЕсли ПодсистемаИСМПСуществует
				И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
				
				РезультатОбработки = МодульШтрихкодированиеОбщегоНазначенияИСМП.РезультатОбработкиКодаМаркировки(
					ДанныеШтрихкода, ПараметрыСканирования, ФормаУникальныйИдентификатор,, КэшОбщихМодулей);
				
			Иначе
				
				РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
				РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
				
			КонецЕсли;
			
		// При сканировании в форме документов
		ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			Или ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
			
			РезультатОбработки = РезультатОбработкиШтрихкодаМаркируемойПродукции(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования);
			
		// При сканировании в форме документов
		ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			РезультатОбработки = ОбработатьДанныеШтрихкода(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
			
		// При сканировании в форме РМК
		ИначеЕсли СтрокаТаблицы.МаркируемаяПродукция <> Истина Тогда
			
			РезультатОбработки = ОбработатьДанныеШтрихкодаНемаркируемойПродукции(ФормаУникальныйИдентификатор, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
		ДополнитьРезультатОбработкиПризнакомНеобходимостиОбновленияCDNПлощадок(РезультатОбработки, ДанныеПоШтрихкодам);
		
		РезультатыОбработок.Вставить(ДанныеШтрихкода.Штрихкод, РезультатОбработки);
		
		Если ОбщаяОшибка Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//@skip-check constructor-function-return-section
	Возврат РезультатыОбработок;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода - Структура - сведения по штрихкоду.
//  ПараметрыСканирования - См. ПараметрыСканирования.
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкодаНемаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Результат = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ОбработкаШтрихкодаБезМарки = Истина;
	Результат.ДанныеШтрихкода = ДанныеШтрихкода;
	Возврат Результат;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода - Структура - сведения по штрихкоду.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//   (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		РезультатОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ОбработатьДанныеШтрихкодаДляОбщейФормы(
			Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки);
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Обработка.ПроверкаКодовМаркировкиИСМП") Тогда
		МодульДляОбработки = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Обработка.РабочееМестоКассира") Тогда
		МодульДляОбработки = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		МодульДляОбработки = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
	
	ДеревоУпаковок = Неопределено;
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
	Форма.Модифицированность = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ПараметрыСканирования.РасширеннаяВерсияГосИС
		И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина)
		И Не (ПараметрыСканирования.Свойство("ТолькоЕГАИС") И ПараметрыСканирования.ТолькоЕГАИС) Тогда
		
		//@skip-check wrong-string-literal-content
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		МодульШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
	
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиТребуетсяОбновлениеКлючаСессии(ВидыПродукции, ПараметрыСканирования, РозничныйТокен  = Ложь)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	
	//@skip-check wrong-string-literal-content
	МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
	МодульШтрихкодированиеИСМПСлужебный.ЗаполнитьРезультатОбработкиТребуетсяАвторизация(РезультатОбработки, ПараметрыСканирования, РозничныйТокен);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция РезультатОбработкиОшибкаКонтроляДопустимыхВидовПродукции(СтрокаДанных, ПараметрыСканирования, ВидыПродукцииИС)
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ЕстьОшибки  = Истина;
	РезультатОбработки.ТекстОшибки = ТекстОшибкиНеПоддерживаетсяВидПродукции(
		СтрокаДанных,
		ПараметрыСканирования.ДопустимыеВидыПродукции,
		ВидыПродукцииИС);
	СтрокаДанных.ТекстОшибки       = РезультатОбработки.ТекстОшибки;
	РезультатОбработки.Штрихкод    = СтрокаДанных.Штрихкод;
	
	РезультатОбработки.ОшибкаДопустимостиВидовПродукции = Истина;
	Если ТипЗнч(ВидыПродукцииИС) = Тип("Массив") Тогда
		РезультатОбработки.ВидыПродукции = ВидыПродукцииИС;
	Иначе
		РезультатОбработки.ВидыПродукции.Добавить(ВидыПродукцииИС);
	КонецЕсли;
	
	ДанныеШтрихкода = СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаДанных);
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ДанныеШтрихкодаТребуетсяОбработатьКакМаркировкуОстатков(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Не ДанныеШтрихкода.ЭтоКодВводаОстатков Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
		И ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой
		И ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции <> Неопределено
		И Не ЗначениеЗаполнено(ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Номенклатура)
		И ДанныеШтрихкода.GTIN = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.GTIN Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура);
	
КонецФункции

Процедура ЗаполнитьТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если Не ДанныеПоШтрихкодам.ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.Свойство("ЭтоПроверкаКодовМаркировкиИСМП")
		И ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП Тогда
		Возврат;
	ИначеЕсли ПараметрыСканирования.Свойство("ЭтоОтчетПроизводственнойЛинии")
		И ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ОбработанСОшибками Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
		Если Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДанных.ВидПродукции, Истина)
			Или Не ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		ИначеЕсли СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок > 0 Тогда
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда // для набора уточнять плановое количество не требуется
			
			СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Истина;
			
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			ЕстьGTINВСоставеКода = СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("GTIN")
				И СтрокаДанных.СоставКодаМаркировки.GTIN <> Неопределено;
			
			ЭтоGTIN02 = СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц")
				И СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц <> Неопределено;
			
			СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Не ЭтоGTIN02 И ЕстьGTINВСоставеКода;
			
		ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			ВидУпаковки = Неопределено;
			Если СтрокаДанных.ДополнительныеПараметры <> Неопределено
				И СтрокаДанных.ДополнительныеПараметры.Свойство("ВидУпаковкиПоGTIN") Тогда
				ВидУпаковки = СтрокаДанных.ДополнительныеПараметры.ВидУпаковкиПоGTIN;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Не ЗначениеЗаполнено(ВидУпаковки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам.ЗаполнитьФлагТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
	
КонецПроцедуры

// Проверят на дубли коды маркировки в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "НеПроверять" Тогда
		Возврат;
	ИначеЕсли ЕстьОшибки И Не ПараметрыСканирования.ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД Тогда
		Возврат;
	КонецЕсли;
	
	КэшДобавляемыхКодовМаркировки = Новый Соответствие;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, ДеревоУпаковок.Строки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок Или ЕстьОшибки;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если Не СтрокаДанных.Входящий 
			Или ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "НайденВоВложенныхУпаковках") И СтрокаДанных.НайденВоВложенныхУпаковках Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДанных.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДанных.Штрихкод, Истина);
		Иначе
			СтрокаДанных.ТекстОшибки = ТекстОшибкиОбрабатываетсяПовторно();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(СтрокаДереваУпаковок, ДанныеКодовМаркировки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаДерева Из СтрокаДереваУпаковок.Строки Цикл
		
		ЕстьОшибкиВоВложенныхСтроках = ЗаполнитьИнформациюПоОшибкеВДеревеУпаковок(СтрокаДерева, ДанныеКодовМаркировки);
		
		НайденнаяСтрока = ДанныеКодовМаркировки.Найти(СтрокаДерева.НормализованныйШтрихкод, "НормализованныйШтрихкод");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если Не ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) Тогда
				СтрокаДерева.ТекстОшибки = НайденнаяСтрока.ТекстОшибки;
				СтрокаДерева.ЕстьОшибки  = Истина;
				ЕстьОшибки = Истина;
			ИначеЕсли ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) И Не ПустаяСтрока(СтрокаДерева.ТекстОшибки) Тогда
				НайденнаяСтрока.ТекстОшибки     = СтрокаДерева.ТекстОшибки;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ПараметрыОшибки") Тогда
					НайденнаяСтрока.ПараметрыОшибки = СтрокаДерева.ПараметрыОшибки;
				КонецЕсли;
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(НайденнаяСтрока.ТекстОшибки) И ЕстьОшибкиВоВложенныхСтроках Тогда
				ЕстьОшибки = Истина;
				СтрокаДерева.ТекстОшибки = ТекстОшибкиОшибкаВДеревеУпаковок();
				НайденнаяСтрока.ТекстОшибки = ТекстОшибкиОшибкаВДеревеУпаковок();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Выполняет проверку по строкам дерева на дубли, которые лежат в кэше. В случе нахождения - добавляет описание ошибки,
//    в противном случае - добавляет в кэш проверенных кодов маркировки.
// 
// Параметры:
//  КэшДобавляемыхКодовМаркировки - Соответствие из КлючИЗначение - Кэш проверяемых кодов.
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева для обхода.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокиДерева, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПараметрыСканирования.ПроверятьДублиКодовМаркировки = "Иерархия" Тогда
			ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокаДерева.Строки, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДерева.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДерева.Штрихкод, Истина);
		Иначе
			СтрокаДерева.ТекстОшибки = ТекстОшибкиОбрабатываетсяПовторно();
			СтрокаДерева.ЕстьОшибки  = Истина;
			ЕстьОшибки = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаТаблицыДанныеКодовМаркировкиВСтруктуру(СтрокаТаблицы, Шаблон = Неопределено, ИспользоватьШаблон = Ложь) Экспорт
	
	Если ТипЗнч(СтрокаТаблицы) = Тип("СтрокаТаблицыЗначений")
		Или ТипЗнч(СтрокаТаблицы) = Тип("СтрокаДереваЗначений") Тогда
		Если Шаблон <> Неопределено Тогда
			ДанныеСтруктура = Новый Структура(Шаблон);
			ЗаполнитьЗначенияСвойств(ДанныеСтруктура, СтрокаТаблицы);
		Иначе
			ДанныеСтруктура = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
			ДанныеСтруктура.Удалить("СтрокаДерева");
			Если ИспользоватьШаблон Тогда
				Поля = Новый Массив;
				Для Каждого КлючИЗначение Из ДанныеСтруктура Цикл
					Поля.Добавить(КлючИЗначение.Ключ);
				КонецЦикла;
				Шаблон = СтрСоединить(Поля, ",");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеСтруктура = СтрокаТаблицы;
	КонецЕсли;
	
	Возврат ДанныеСтруктура;
	
КонецФункции

Процедура ЗаполнитьПроверяемыеGTIN(ТаблицаНоменклатуры, ПроверяемыеGTIN, СоответствиеGTIN, ВключатьGTINОстатков = Истина, ИспользоватьХарактеристики = Истина) Экспорт
	
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьПроверяемыеGTIN(
		ТаблицаНоменклатуры, ПроверяемыеGTIN, СоответствиеGTIN, ИспользоватьХарактеристики);
	
	ВГраница = ПроверяемыеGTIN.ВГраница();
	Для Счетчик = 0 По ВГраница Цикл
		Индекс = ВГраница - Счетчик;
		Штрихкод = ПроверяемыеGTIN[Индекс];
		GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(Штрихкод);
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(GTIN)
			И (Не ВключатьGTINОстатков
				Или Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN)) Тогда
				ПроверяемыеGTIN.Удалить(Индекс);
				СоответствиеGTIN.Удалить(Штрихкод);
				Продолжить;
			КонецЕсли;
		Если Штрихкод <> GTIN Тогда
			Если ПроверяемыеGTIN.Найти(GTIN) = Неопределено Тогда
				ПроверяемыеGTIN.Добавить(GTIN);
				СоответствиеGTIN.Вставить(GTIN, СоответствиеGTIN[Штрихкод]);
			КонецЕсли;
			ПроверяемыеGTIN.Удалить(Индекс);
			СоответствиеGTIN.Удалить(Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьШтрихкодыПоВскрытымПотребительскимУпаковкам(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, КешДанныхРазбора = Неопределено, ИсходныеДанныеКодовМаркировки = Неопределено)
	
	Если ДанныеШтрихкодаСписок.Количество() = 1
		И ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Количество() = 1
		И ОбщегоНазначенияИСПовтИсп.ВедетсяУчетМаркируемойПродукции(ПараметрыСканирования.РасширеннаяВерсияГосИС) Тогда
		СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не (СтрокаДанных.ЭтоШтрихкодНоменклатуры
		И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			СтрокаДанных.ВидПродукции,
			ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, СтрокаДанных.ВидПродукции))
		И ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВскрытыеПотребительскиеУпаковкиИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС");
	
	ТаблицаТовары = МенеджерВскрытыеПотребительскиеУпаковкиИС.НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок();
	
	НоваяСтрока = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
	НоваяСтрока.УчитыватьСерии = ЗначениеЗаполнено(НоваяСтрока.Серия);
	
	КодыМаркировки = МенеджерВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров(
		ТаблицаТовары,
		ПараметрыСканирования);
	
	Если КодыМаркировки.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли КодыМаркировки.Количество() = 1 Тогда
	
		ДанныеШтрихкодаСписок[0].Штрихкод       = КодыМаркировки[0].КодМаркировкиСтрокой;
		ДанныеШтрихкодаСписок[0].ФорматBase64   = Ложь;
		ДанныеШтрихкодаСписок[0].Количество     = 1;
		ДанныеШтрихкодаСписок[0].ШтрихкодBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкодаСписок[0].Штрихкод);
		
		ДанныеПоШтрихкодам = ИнициализацияДанныхПоШтрихкодам(Ложь);
		
		ПодготовитьДанныеКодовМаркировкиДляОбработки(
			ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования, КешДанныхРазбора);
		
		СтрокаДанных = ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0];
		СтрокаДанных.ЧастичноеВыбытие = Истина;
		
		Если СтрокаДанных.ДанныеРазбора <> Неопределено
			И ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
			СтрокаДанных.ДанныеРазбора.Вставить("ЭтоКодМаркировкиВскрытойПотребительскойУпаковки");
		КонецЕсли;
		
		Если ИсходныеДанныеКодовМаркировки <> Неопределено Тогда
			ИсходныеДанныеКодовМаркировки[0].Штрихкод                = ДанныеШтрихкодаСписок[0].Штрихкод;
			ИсходныеДанныеКодовМаркировки[0].ШтрихкодBase64          = ДанныеШтрихкодаСписок[0].ШтрихкодBase64;
			ИсходныеДанныеКодовМаркировки[0].ЧастичноеВыбытиеОстаток = КодыМаркировки[0].Остаток;
		КонецЕсли;
		
	Иначе
		
		СтрокаДанных.ЧастичноеВыбытие                    = Истина;
		СтрокаДанных.ТребуетсяУточнениеЧастичногоВыбытия = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Настроенная номенклатура частичного выбытия.
// 
// Параметры:
//  СписокНоменклатуры - Массив из ОпределяемыйТип.Номенклатура - Список номенклатуры для которой определяется соответствие номенклатуры частичного выбытия
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Настроенная номенклатура частичного выбытия:
// * Номенклатура                    - ОпределяемыйТип.Номенклатура
// * Характеристика                  - ОпределяемыйТип.ХарактеристикаНоменклатуры
// * НоменклатураЧастичногоВыбытия   - ОпределяемыйТип.Номенклатура
// * ХарактеристикаЧастичногоВыбытия - ОпределяемыйТип.ХарактеристикаНоменклатуры
Функция НастроеннаяНоменклатураЧастичногоВыбытия(СписокНоменклатуры) Экспорт
	
	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ИСМП") Тогда
		
		//@skip-check wrong-string-literal-content
		МенеджерРегистраСведений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС");
		//@skip-check unknown-method-property
		ВозвращаемоеЗначение = МенеджерРегистраСведений.НастроеннаяНоменклатураЧастичногоВыбытия(СписокНоменклатуры);
		
	Иначе
		
		ВозвращаемоеЗначение = Новый ТаблицаЗначений();
		ВозвращаемоеЗначение.Колонки.Добавить("Номенклатура",                    Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ВозвращаемоеЗначение.Колонки.Добавить("Характеристика",                  Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ВозвращаемоеЗначение.Колонки.Добавить("НоменклатураЧастичногоВыбытия",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ВозвращаемоеЗначение.Колонки.Добавить("ХарактеристикаЧастичногоВыбытия", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ВозвращаемоеЗначение.Индексы.Добавить("Номенклатура, Характеристика");
		
		Для Каждого Номенклатура Из СписокНоменклатуры Цикл
			НоваяСтрока = ВозвращаемоеЗначение.Добавить();
			НоваяСтрока.НоменклатураЧастичногоВыбытия = Номенклатура;
		КонецЦикла;
		
		ШтрихкодированиеИСПереопределяемый.ПриЗаполненииНастроеннойНоменклатурыЧастичногоВыбытия(
			ВозвращаемоеЗначение, Истина);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ДополнитьРезультатОбработкиПризнакомНеобходимостиОбновленияCDNПлощадок(РезультатОбработкиШтрихкода, ДанныеПоШтрихкодам)
	
	Если ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции)
		Или ПрисутствуетПродукцияИСМП(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьРезультатОбработкиПризнакомНеобходимостиОбновленияCDNПлощадок(РезультатОбработкиШтрихкода, ДанныеПоШтрихкодам);
		МодульШтрихкодированиеИСМПСлужебный.ДополнитьРезультатОбработкиПризнакомОтсутствияCDNПлощадок(РезультатОбработкиШтрихкода, ДанныеПоШтрихкодам);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
