// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область РаботаСДатами

Функция ДатаИзУниверсальнойДаты(Знач Значение, Делитель = 1000, ПриводитьКМестномуВремени = Истина) Экспорт
	
	Значение = '00010101' + Цел(Значение / Делитель);
	
	Если ПриводитьКМестномуВремени Тогда
		Возврат МестноеВремя(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормыДокументовОснований

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
// Параметры:
//  Элемент - ПолеВвода - Элемент формы
//  Отображать - Булево - Отображать предупреждения при редактировании
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт
	
	Если Отображать Тогда
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормыСпискаДокументов

// Инициализировать структуру параметров передачи данных.
// 
// Параметры:
//  ДальнейшееДействие - ЛюбаяСсылка - Дальнейшее действие
// 
// Возвращаемое значение:
//  Структура - Структура параметров передачи данных:
// * ДальнейшееДействие - ЛюбаяСсылка -
// * ПараметрыОтбора - Неопределено -
//                   - Структура -
// * ИменаКолонокДальнейшиеДействия - Массив из Строка -
// * ИмяПоляСсылка - Строка -
// * ВыделенныеСтроки - Массив Из Число -
// * ОчищатьСообщения - Булево - 
// * ОповещениеПриЗавершении - ОписаниеОповещения -
Функция ИнициализироватьПараметрыПередачиДанных(ДальнейшееДействие = Неопределено) Экспорт
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ДальнейшееДействие", ДальнейшееДействие);
	ПараметрыПередачи.Вставить("ПараметрыОтбора");
	ПараметрыПередачи.Вставить("ИменаКолонокДальнейшиеДействия");
	ПараметрыПередачи.Вставить("ИмяПоляСсылка");
	ПараметрыПередачи.Вставить("ВыделенныеСтроки");
	ПараметрыПередачи.Вставить("ОчищатьСообщения", Истина);
	ПараметрыПередачи.Вставить("ОповещениеПриЗавершении", Неопределено);
	
	Возврат ПараметрыПередачи;
	
КонецФункции

#Область ОтборПоОрганизации

Процедура НастроитьОтборПоОрганизации(Форма, Результат, Префикс = Неопределено, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Форма.Организации.ЗагрузитьЗначения(Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
	ИначеЕсли Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда
		Форма.Организации.Очистить();
	Иначе
		Форма.Организации.Очистить();
		ЭлементСписка = Форма.Организации.Добавить();
		ЭлементСписка.Значение = Результат;
		Если Не(ЭлементСписка.Значение = Результат) Тогда
			Форма.Организации.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Организации.Количество() = 1 Тогда
		Форма.Организация = Форма.Организации.Получить(0).Значение;
		Форма.ОрганизацииПредставление = Строка(Форма.Организация);
	ИначеЕсли Форма.Организации.Количество() = 0 Тогда
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = "";
	Иначе
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = Строка(Форма.Организации);
	КонецЕсли;
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		
		Если Форма.Организации.Количество() > 1 Тогда
			Окончание = "Организации";
		Иначе 
			Окончание = "Организация";
		КонецЕсли;
		
		Если Значение = "Отбор" Тогда
			Постфикс = Окончание;
		Иначе
			Постфикс = "Отбор" + Окончание;
		КонецЕсли;
		
		СтраницыОтбораОрганизация = Форма.Элементы.Найти("Страницы" + Значение + Постфикс);
		Если СтраницыОтбораОрганизация <> Неопределено Тогда
			СтраницыОтбораОрганизация.ТекущаяСтраница = Форма.Элементы["Страница" + Значение + Окончание];
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> Неопределено Тогда
		ЭлементОтбораОрганизация = Форма.Элементы.Найти(Префикс + ?(Форма.Организации.Количество() > 1,
		                                                                "Организации",
		                                                                "Организация"));
		Если ЭлементОтбораОрганизация <> Неопределено Тогда
			Форма.ТекущийЭлемент = ЭлементОтбораОрганизация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомандыНавигационнойСсылки

// Имя команды представляет собой строку формата
// ИнтеграцияИС_КомандаНавигационнойСсылки#<ИмяПодсистемы>#<Действие>[#<Параметр1>#<Параметр2>...]
// где
//	ИнтеграцияИС_КомандаНавигационнойСсылки - постоянный префикс, указывающий принадлежность команды к данному механизму
//	<ИмяПодсистемы> - имя интегрируемой подсистемы, к которой относится команда
//	<Действие> - действие, которое должно быть выполнено по данной команде, см. ПрефиксКоманды...()
//  <Параметр...> - произвольная строка-параметр команды; количество параметров определяется контекстом конкретной команды

Функция ПреобразоватьИмяКомандыНавигационнойСсылкиВоВнутреннийФормат(ИмяКоманды) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяКоманды,
		РазделительКомандыНавигационнойСсылки(),
		Истина);
	
	Возврат ЧастиИмени;
	
КонецФункции


Функция ЭтоИмяКомандыНавигационнойСсылки(ИмяКоманды, ИмяПодсистемы) Экспорт
	
	Префикс = ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы);
	
	Возврат (Лев(ИмяКоманды, СтрДлина(Префикс)) = Префикс);
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиСоздатьОбъект(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = ПрефиксКомандыСоздатьОбъект();
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиОткрытьОбъект(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = ПрефиксКомандыОткрытьОбъект();
	
КонецФункции

Функция ЭтоКомандаНавигационнойСсылкиОткрытьПротоколОбмена(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[2] = ПрефиксКомандыОткрытьПротоколОбмена();
	
КонецФункции


Функция ИмяОбъектаДляСозданияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[3];
	
КонецФункции

Функция ИмяОбъектаДляОткрытияИзВнутреннегоФорматаКомандыНавигационнойСсылки(ОписаниеКоманды) Экспорт
	
	Возврат ОписаниеКоманды[3];
	
КонецФункции

Функция ЭтоКорректировочныйДокументКомандыНавигационнойСсылки(ОписаниеКоманды) Экспорт
	
	Если ОписаниеКоманды.Количество() >= 5 Тогда
		Возврат ОписаниеКоманды[4] = "Корректировочный";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяОбъекта, Корректировочный = Ложь) Экспорт
	
	Возврат
		ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ ПрефиксКомандыСоздатьОбъект() + РазделительКомандыНавигационнойСсылки()
		+ ИмяОбъекта
		+ ?(Корректировочный, РазделительКомандыНавигационнойСсылки() + "Корректировочный", "");
	
КонецФункции

Функция ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяОбъекта) Экспорт
	
	Возврат
		ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ ПрефиксКомандыОткрытьОбъект() + РазделительКомандыНавигационнойСсылки()
		+ ИмяОбъекта;
	
КонецФункции

Функция ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы)
		+ ПрефиксКомандыОткрытьПротоколОбмена();

КонецФункции

#КонецОбласти

#Область СобытияОповещения

// Имя события представляет собой строку формата
// ИнтеграцияИС_СобытиеОповещения#<ИмяПодсистемы>#<Действие>[#<Параметр1>#<Параметр2>...]
// где
//	ИнтеграцияИС_СобытиеОповещения - постоянный префикс, указывающий принадлежность события к данному механизму
//	<ИмяПодсистемы> - имя интегрируемой подсистемы, к которой относится событие
//	<Действие> - действие, которое инициировало данное событие, см. ПрефиксСобытия...()
//  <Параметр...> - произвольная строка-параметр события; количество параметров определяется контекстом конкретного события

Функция ПреобразоватьИмяСобытияОповещенияВоВнутреннийФормат(ИмяСобытия) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяСобытия,
		РазделительСобытияОповещения(),
		Истина);
	
	Возврат ЧастиИмени;
	
КонецФункции


Функция ЭтоИмяСобытияОповещения(ИмяСобытия, ИмяПодсистемы) Экспорт
	
	Префикс = ОбщийПрефиксСобытияОповещения(ИмяПодсистемы);
	
	Возврат (Лев(ИмяСобытия, СтрДлина(Префикс)) = Префикс);
	
КонецФункции

Функция ЭтоСобытиеОповещенияИзмененОбъект(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[2] = ПрефиксСобытияИзмененОбъект();
	
КонецФункции

Функция ЭтоСобытиеОповещенияИзмененоСостояние(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[2] = ПрефиксСобытияИзмененоСостояние();
	
КонецФункции

Функция ЭтоСобытиеОповещенияВыполненОбмен(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[2] = ПрефиксСобытияВыполненОбмен();
	
КонецФункции


Функция ИмяИзмененногоОбъектаИзВнутреннегоФорматаСобытияОповещения(ОписаниеСобытия) Экспорт
	
	Возврат ОписаниеСобытия[3];
	
КонецФункции

Функция ИмяСобытияИзмененОбъект(ИмяПодсистемы, ИсточникИмениОбъекта = Неопределено) Экспорт
	
	Если ИсточникИмениОбъекта = Неопределено Тогда
		ИмяОбъекта = "";
	ИначеЕсли ТипЗнч(ИсточникИмениОбъекта) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяОбъекта = ИмяОбъектаИзИмениФормы(ИсточникИмениОбъекта);
	Иначе
		ИмяОбъекта = ИсточникИмениОбъекта;
	КонецЕсли;
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияИзмененОбъект() + РазделительСобытияОповещения()
		+ ИмяОбъекта;
	
КонецФункции

Функция ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияИзмененоСостояние();
	
КонецФункции

Функция ИмяСобытияОбновитьКэшМаркируемойПродукции(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияОбновитьКэшМаркируемойПродукции();
	
КонецФункции

Функция ИмяСобытияВыполненОбмен(ИмяПодсистемы) Экспорт
	
	Возврат
		ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
		+ ПрефиксСобытияВыполненОбмен();
	
КонецФункции

Функция ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("ОбновлятьСтатус%1ВФормахДокументов", ИмяПодсистемы);
	
КонецФункции

#КонецОбласти

#Область ШрифтГиперссылкиФормыПроверки

Функция ШрифтГиперссылки() Экспорт
	Возврат Новый Шрифт(,,,,Истина);
КонецФункции

#КонецОбласти

#Область НастройкаНоменклатуры

// Параметры формирования данных представления настройки номенклатуры.
//
// Возвращаемое значение:
//  Структура                          - Параметры формирования данных представления настройки номенклатуры:
// * СсылкаНаОбъект                    - Неопределено, ОпределяемыйТип.Номенклатура       - Ссылка на номенклатуру, для которой выполняется настройка.
// * ВидПродукции                      - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции. Если не заполнено, то вид продукции получается по СсылкаНаОбъект.
// * ЕстьПравоРедактирования           - Булево  - Определяет наличие прав на редактирование, например, если есть права на справочник Номенклатура.
// * РазрешеноРедактированиеРеквизитов - Булево  - Истина (По-умолчанию), если пользователь принудительно включил редактирование реквизитов, например, через подсистему запрета редактирования реквизитов.
//                                                 Ложь - Библиотека определяет использование номенклатуры и разрешает редактирование, если в штрихкодах упаковок номенклатура не использовалась.
// * ТребуетВзвешивания                - Булево, Неопределено - Признак взвешивания потребительской упаковки.
//                                       Неопределено - Означает что в карточке товара нет информации о весовом товаре, необходимость взвешивания настривается в отдельной форме.
//                                       Истина       - Потребительская упаковка требует взвешивания.
//                                       Ложь         - Не требует взвешивания, настраиваются остальные параметры.
// * ДопустимаНастройкаЛогистическойЕдиницы - Булево - Включает возможность настройки потребительской упаковки как части единицы измерения номенклатуры.
// * ПредставлениеВНесколькоСтрок           - Булево - Переносит представление упаковки частичного выбытия на следующую строку. Используется, если место вывода гиперссылки в карточке номенклатуре менее ширины выводимого текста.
// * ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN - Булево - Определяет необходимость вывода гиперссылки настройки видов упаковок.
// * ОтступПриВыводеНастройкиВидаУпаковки            - Булево - Добавляет перенос строк при формировании гиперссылки настройки вида упаковки по GTIN.
// * РазделительНастройкиВидовУпаковокПоGTIN         - Неопределено, Строка, ФорматированнаяСтрока - Позволяет задать префикс или дополнительный перенос строк при выводе гиперссылки настройки видов упаковок.
Функция ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры() Экспорт

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("СсылкаНаОбъект",                                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕстьПравоРедактирования",                         Истина);
	ВозвращаемоеЗначение.Вставить("РазрешеноРедактированиеРеквизитов",               Истина);
	ВозвращаемоеЗначение.Вставить("ТребуетВзвешивания",                              Неопределено);
	ВозвращаемоеЗначение.Вставить("ДопустимаНастройкаЛогистическойЕдиницы",          Истина);
	ВозвращаемоеЗначение.Вставить("ПредставлениеВНесколькоСтрок",                    Истина);
	ВозвращаемоеЗначение.Вставить("ВыводитьГиперссылкуНастройкиВидовУпаковокПоGTIN", Истина);
	ВозвращаемоеЗначение.Вставить("ОтступПриВыводеНастройкиВидаУпаковки",            Истина);
	ВозвращаемоеЗначение.Вставить("РазделительНастройкиВидовУпаковокПоGTIN",         Неопределено);

	Возврат ВозвращаемоеЗначение;

КонецФункции

#КонецОбласти

#Область Прочие

Функция ИмяОбъектаИзИмениФормы(Форма, ПолноеИмя = Истина) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Если ПолноеИмя Тогда
		ИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
	Иначе
		ИмяОбъекта = ЧастиИмени[1];
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

// Преобразует массив в соответствие с ключами, соответствующими элементам массива.
//
// Параметры:
//   Источник - Массив - преобразуемый массив
//   ЗначениеПоУмолчанию - Произвольный - значение соответствия для заполнения
// Возвращаемое значение:
//   Соответствие - результат преобразования
//
Функция МассивВСоответствие(Источник, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из Источник Цикл
		Результат.Вставить(ЭлементМассива, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует таблицу формы в массив структур. В первом элементе структура колонок.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - исходная таблица значений.
//  Колонки      - Строка               - наименования колонок для копирования.
//
// Возвращаемое значение:
//  Массив Из Структура - коллекция строк таблицы в виде структур.
//
Функция ТаблицаФормыВМассив(ТаблицаФормы, Колонки) Экспорт
	
	Массив = Новый Массив;
	НоваяСтрока = Новый Структура(Колонки);
	Массив.Добавить(НоваяСтрока);
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат Массив;
	КонецЕсли;
	Для Каждого Строка Из ТаблицаФормы Цикл
		НоваяСтрока = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Преобразует массив структур в таблицу формы. В первом элементе структура колонок.
//
// Параметры:
//  Массив       - Массив Из Структура  - коллекция строк таблицы в виде структур.
//  ТаблицаФормы - ДанныеФормыКоллекция - заполняемая таблица значений.
//
Процедура МассивВТаблицуФормы(Массив, ТаблицаФормы) Экспорт
	
	ПерваяСтрока = Истина;
	ТаблицаФормы.Очистить();
	Для Каждого Строка Из Массив Цикл
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		Иначе
			НоваяСтрока = ТаблицаФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает сопоставленное ему перечисление.
//
// Параметры:
//  ТипМаркировкиККТИлиВидПродукции - ПеречислениеСсылка.ТипыМаркировкиККТ,ПеречислениеСсылка.ВидыПродукцииИС - значение
//  перечисления для котороего нужно получить сопоставленное ему перечисление.
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыМаркировкиККТ,ПеречислениеСсылка.ВидыПродукцииИС - значение сопоставленного перечисления
Функция ТипМаркировкиККТПоВидуПродукции(ТипМаркировкиККТИлиВидПродукции) Экспорт
	
	Если ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ИначеЕсли ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ИначеЕсли ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция");
	ИначеЕсли ТипМаркировкиККТИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Признак возможности маркировки остатков.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Доступность маркировки остатков товаров для вида продукции.
Функция ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияПодлежитМаркировкеОстатков();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаПодлежитМаркировкеОстатков();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак возможности перемаркировки переданного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
// 	Булево - Доступность перемаркировки товаров для вида продукции.
Функция ВидПродукцииПодлежитПеремаркировке(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияПодлежитПеремаркировке();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаПодлежитПеремаркировке();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак возможности возврата в оборот переданного вида продукции или список всех видов продукции,
// допускающих возврат в оборот
//
// Параметры:
//  ВидПродукции - Неопределено - для получения набора видов продукции, допускающих возврат в оборот
//               - ПеречислениеСсылка.ВидыПродукцииИС - для получения возможности возврата в оборот
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, допускающие возврат в оборот
//  Булево - конкретный вид продукции подлежит возврату в оборот
Функция ВидПродукцииПодлежитВозвратуВОборот(ВидПродукции = Неопределено) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	
	Если КормаДляЖивотныхБезВЕТИСПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС"));
	ИначеЕсли КормаДляЖивотныхПодконтрольныеВЕТИСПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"));
	ИначеЕсли МясоПодконтрольноеВЕТИСПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС"));
	ИначеЕсли ВетеринарныеПрепаратыПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты"));
	ИначеЕсли ИгрыИИгрушкиДляДетейПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей"));
	ИначеЕсли РадиоэлектроннаяПродукцияПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция"));
	ИначеЕсли ТитановаяМеталлопродукцияПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция"));
	ИначеЕсли КонсервированнаяПродукцияБезВЕТИСПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС"));
	ИначеЕсли КонсервированнаяПродукцияПодконтрольнаяВЕТИСПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС"));
	ИначеЕсли РастительныеМаслаПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла"));
	ИначеЕсли ОптоволокноИОптоволоконнаяПродукцияПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция"));
	ИначеЕсли ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"));
	ИначеЕсли ПечатнаяПродукцияПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция"));
	ИначеЕсли СтроительныеМатериалыПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы"));
	ИначеЕсли ОтопительныеПриборыПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы"));
	ИначеЕсли БакалеяПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея"));
	ИначеЕсли АлкогольнаяПродукцияДо9ПроцентовПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов"));
	ИначеЕсли ТелефоныИНоутбукиПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки"));
	ИначеЕсли ПиротехническиеИзделияИСредстваПожарнойБезопасностиПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности"));
	ИначеЕсли КабельнаяПродукцияПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция"));
	ИначеЕсли МоторныеМаслаПодлежитВозвратуВОборот() Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла"));
	КонецЕсли;
	
	Если ВидПродукции = Неопределено Тогда
		Возврат Результат;
	Иначе
		Возврат Результат.Найти(ВидПродукции) <> Неопределено;
	КонецЕсли;
	
КонецФункции

// Признак возможности приемки на комиссию от физического лица переданного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
// 	Булево - Доступность приемки на комиссию от физического лица товаров для вида продукции.
Функция ВидПродукцииПодлежитПриемкеНаКомиссию(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак возможности импорта в РФ переданного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
// 	Булево - Доступность импорта в РФ для вида продукции.
Функция ВидПродукцииПодлежитИмпорту(ВидПродукции) Экспорт
	
	Возврат ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция");
	
КонецФункции

// Признак использования отчетов о нанесения кодов маркировки в документе маркировки.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Доступность отчетов о нанесении в документе маркировки.
Функция ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаИспользуетОтчетыОНанесенииКодовМаркировки();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак использования агрегации кодов маркировки через СУЗ.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Доступность отчетов о нанесении в документе маркировки.
Функция ВидПродукцииПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха")
		Или ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
// Признак использования операции получения продукции от физических лиц в документе маркировки.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Доступность операции получения продукции от физических лиц в документе маркировки.
Функция ВидПродукцииИспользуетПолучениеПродукцииОтФизическихЛиц(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаИспользуетПолучениеПродукцииОтФизическихЛиц();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак использования отчетов об отбраковке через СУЗ.
//
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Признак использования отчетов об отбраковке через СУЗ для вида продукции.
Функция ВидПродукцииИспользуетПередачуОтчетаОбОтбраковкеЧерезСУЗ(ВидПродукции) Экспорт

	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

//Выполняет поиск в массиве ВидыПродукции продукции, для которой используются наборы.
//
//Параметры:
//   ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС.
//
//Возвращаемое значение:
//   Булево - Истина, если в массиве есть продукция, для которой используются наборы.
//
Функция ПрисутствуетВидПродукцииНабор(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

//Выполняет поиск в массиве ВидыПродукции продукции, для которой используются групповые упаковки.
//
//Параметры:
//   ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС.
//
//Возвращаемое значение:
//   Булево - Истина, если в массиве есть продукция, для которой используются групповые упаковки.
//
Функция ПрисутствуетВидПродукцииИспользующийГрупповыеУпаковки(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Признак принадлежности к множественному число. Для склонения слов в предложении.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Множественное или единственное число.
Функция ПредставлениеВидаПродукцииВоМножественномЧисле(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла");
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента молочной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления молочная продукция.
Функция ПрисутствуетМолочнаяПродукция(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие продукций со сроками годности.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найдены элементы со сроками годности
Функция ПрисутствуютВидыПродукцииСоСрокомГодности(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Определяет является ли тип упаковки логистической или групповой товарной упаковкой.
//
//Параметры:
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - тип упаковки
//Возвращаемое значение:
//   Булево - Истина, если тип упаковки относится к логистической или товарной.
Функция ЭтоУпаковка(ТипУпаковки) Экспорт
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	
КонецФункции

//Возвращает массив типов упаковок, которые соответствуют коробкам.
//
//Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыУпаковок- Коллекция типов упаковок.
Функция ТипыУпаковокДляКоробок() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка"));
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает признак доступности использования Свидетельства о государственной регистрации
// при указании данных сертификации.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//Возвращаемое значение:
//   Булево - Истина, если вид сертификации поддерживатся.
Функция ВидПродукцииИспользуетСвидетельствоОГосударственнойРегистрации(ВидПродукции) Экспорт

	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат КормаДляЖивотныхБезВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат МясоПодконтрольноеВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ВетеринарныеПрепаратыИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ИгрыИИгрушкиДляДетейИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат РадиоэлектроннаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ТитановаяМеталлопродукцияИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат КонсервированнаяПродукцияБезВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат РастительныеМаслаИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОптоволокноИОптоволоконнаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ПечатнаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат СтроительныеМатериалыИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОтопительныеПриборыИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат БакалеяИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат АлкогольнаяПродукцияДо9ПроцентовИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат ТелефоныИНоутбукиИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат КабельнаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат МоторныеМаслаИспользуетСвидетельствоОГосударственнойРегистрации();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак использования запроса подлинности КМ, выпущенных Операторами ЕАЭС
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//Возвращаемое значение:
//  Булево - Истина, если вид продукции поддерживает проверки валидности КМ, выпущенных Операторами государств-членов ЕАЭС.
Функция ВидПродукцииПоддерживаетЗапросСтатусовЕАЭС(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра %1: %2'"), "СтрокаВерсии1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    	НСтр("ru = 'Неправильный формат параметра %1: %2'"), "СтрокаВерсии2", СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 2 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает все виды продукции, подконтрольным учету в ВетИС.
//
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции по которым ведется учет в ВетИС.
//
Функция ВидыПродукцииПодконтрольныеВЕТИС() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС"));
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДоступностьРеквизитовДокументов

// Устанавливает признак доступности для массива элементов формы.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма, для элементов которой устанавливается признак доступности. 
//  МассивЭлементов  - Массив Из Строка - содержит имена элементов формы.
//  Доступно         - Булево           - признак доступности.
//
Процедура УстановитьДоступностьЭлементовФормы(Форма, МассивЭлементов, Доступно) Экспорт
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		ТекущийЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
		
		Если ТекущийЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ТекущийЭлемент);
		
		Если ТипЭлемента = Тип("КнопкаФормы")
		 Или ТипЭлемента = Тип("ГруппаФормы")
			И (ТекущийЭлемент.Вид = ВидГруппыФормы.Подменю
			Или ТекущийЭлемент.Вид = ВидГруппыФормы.ГруппаКнопок) Тогда
			Форма.Элементы[ИмяЭлемента].Доступность = Доступно;
		Иначе
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Не Доступно;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно устанавливает для подчиненных элементов типа "ПолеФормы" - признак "ТолькоПросмотр",
// для подчиненных элементов типа "КнопкаФормы" - признак "Доступность", за исключением элементов,
// имена которых перечислены в исключениях.
//
// Параметры:
//  ГруппаЭлементовФормы - ГруппаФормы, ТаблицаФормы - Группа элементов управляемой формы.
//  Доступность          - Булево      - Признак доступности подчиненных элементов.
//  Исключения           - Строка, Массив Из Строка - Имена элементов формы.
// 
Процедура УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ГруппаЭлементовФормы, Доступность, Исключения = "") Экспорт
	
	ТипГруппыФормы = ТипЗнч(ГруппаЭлементовФормы);
	Если НЕ (ТипГруппыФормы = Тип("ГруппаФормы") или ТипГруппыФормы = Тип("ТаблицаФормы")) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	ТипИсключения = ТипЗнч(Исключения);
	Если ТипИсключения = Тип("Строка") и ЗначениеЗаполнено(Исключения) Тогда
		МассивИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Исключения, ", ");
	ИначеЕсли ТипИсключения = Тип("Массив") Тогда
		МассивИсключений = Исключения;
	КонецЕсли;
	
	Для Каждого ЭлементФормы из ГруппаЭлементовФормы.ПодчиненныеЭлементы Цикл
		
		Если НЕ МассивИсключений.Найти(ЭлементФормы.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ЭлементФормы);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда 
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы, Доступность, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ТаблицаФормы") Тогда
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы, Доступность, МассивИсключений);
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы.КоманднаяПанель, Доступность, МассивИсключений);
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы.КонтекстноеМеню, Доступность, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
			ЭлементФормы.ТолькоПросмотр = НЕ Доступность;
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") Тогда
			ЭлементФормы.Доступность = Доступность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Функция проверяет необходимость указания серии в строке по статусу.
//
// Параметры:
//  СтатусУказанияСерий - Число - статус указания серии в строке табличной части
// 
// Возвращаемое значение:
//  Булево - в этом статусе требуется указание серий.
//
Функция НеобходимоУказатьСерию(СтатусУказанияСерий) Экспорт
	
	ТребуетсяУказать = Ложь;
	ИнтеграцияИСКлиентСерверПереопределяемый.ПроверитьНеобходимоУказатьСерию(ТребуетсяУказать, СтатусУказанияСерий);
	Возврат ТребуетсяУказать;
	
КонецФункции

Функция ИспользоватьСерииНоменклатуры(ПараметрыУказанияСерий) Экспорт
	
	Используются = Ложь;
	ИнтеграцияИСКлиентСерверПереопределяемый.ИспользованиеСерийПоПараметрамУказанияСерий(Используются, ПараметрыУказанияСерий);
	Возврат Используются;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

//Формирует представление строки номенклатуры. Переопределяется.
//   Значение по-умолчанию: непустые представления составляющих, через запятую.
//
//Параметры:
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру.
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры.
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//   ПоУмолчанию    - Строка                                     - Значение, если номенклатура не заполнена.
//
//Возвращаемое значение:
//   Строка - представление строки номенклатуры
//
Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Упаковка = Неопределено, Серия = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	Представление = "";
	ИнтеграцияИСКлиентСерверПереопределяемый.ЗаполнитьПредставлениеНоменклатуры(
		Представление, Номенклатура, Характеристика, Упаковка, Серия);
	
	Если Представление = "" Тогда
		МассивФормированияПредставления = Новый Массив;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Номенклатура));
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Упаковка));
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Серия));
		КонецЕсли;
		Представление = СтрСоединить(МассивФормированияПредставления, ", ");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Представление) И ЗначениеЗаполнено(ПоУмолчанию) Тогда
		Представление = Строка(ПоУмолчанию);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область МаркировкаОстатков

// Конвертирует код ТНВЭД в значение для передачаи в ИС МП
// 
// Параметры:
// 	Значение     - Строка                                           - Код ТНВЭД.
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// 	Возвращаемое значение:
// 	Строка - Конвертированное значение для передачи.
Функция КодТНВЭДДляПередачиВИСМП(Значение, ВидПродукции = Неопределено) Экспорт
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Возврат Значение;
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции)
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		Возврат Лев(Значение, 4);
	Иначе
		Возврат Лев(Значение, 2);
	КонецЕсли;
КонецФункции

// Признак необходимости заполнять возрастную категорию при описании остатков
// 
// Параметры:
// 	КодТНВЭД - Строка - Конвертированное значение для передачи см. КодТНВЭДДляПередачиВИСМП
// Возвращаемое значение:
// 	Булево - Требование возрастной категории.
Функция КодТНВЭДТребуетВозрастнуюКатегорию(КодТНВЭД) Экспорт
	Возврат (КодТНВЭД = КодТНВЭДДляВозврастнойКатегории());
КонецФункции

// Начало кода ТНВЭД для которого требуется указание возрастной категории
//
// Возвращаемое значение:
// 	Строка - Начало кода ТНВЭД для которого требуется указание возрастной категории.
Функция КодТНВЭДДляВозврастнойКатегории() Экспорт
	Возврат "63";
КонецФункции

// Возвращает признаки использования параметров описания остатков.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// 	КодТНВЭД     - Строка - Код ТНВЭД.
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьНаименование        - Булево - Признак использования наименоваения.
// * ИспользоватьСпособВводаВОборот  - Булево - Признак использования способа ввода в оборот.
// * ИспользоватьМодель              - Булево - Признак использования модели.
// * ИспользоватьВозрастнуюКатегорию - Булево - Признак использования возрастной категории.
// * ИспользоватьЦелевойПол          - Булево - Признак использования целевого пола.
// * ИспользоватьТоварныйЗнак        - Булево - Признак использования товарного знака.
Функция ИспользованиеПараметровОписанияОстатковПоВидуПродукции(ВидПродукции, КодТНВЭД = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИспользоватьЦелевойПол",          Ложь);
	СтруктураПараметров.Вставить("ИспользоватьВозрастнуюКатегорию", Ложь);
	СтруктураПараметров.Вставить("ИспользоватьМодель",              Ложь);
	СтруктураПараметров.Вставить("ИспользоватьСпособВводаВОборот",  Ложь);
	СтруктураПараметров.Вставить("ИспользоватьНаименование",        Ложь);
	СтруктураПараметров.Вставить("ИспользоватьТоварныйЗнак",        Ложь);
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		СтруктураПараметров.ИспользоватьЦелевойПол = Истина;
		СтруктураПараметров.ИспользоватьСпособВводаВОборот = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		СтруктураПараметров.ИспользоватьСпособВводаВОборот = Истина;
		Если КодТНВЭД = Неопределено Или ПустаяСтрока(КодТНВЭД) Тогда
			СтруктураПараметров.ИспользоватьВозрастнуюКатегорию = Истина;
			СтруктураПараметров.ИспользоватьЦелевойПол = Истина;
		Иначе
			Если КодТНВЭДТребуетВозрастнуюКатегорию(КодТНВЭД) Тогда
				СтруктураПараметров.ИспользоватьВозрастнуюКатегорию = Истина;
			Иначе
				СтруктураПараметров.ИспользоватьЦелевойПол = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		СтруктураПараметров.ИспользоватьМодель = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		СтруктураПараметров.ИспользоватьНаименование = Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		СтруктураПараметров.ИспользоватьНаименование = Истина;
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		СтруктураПараметров.ИспользоватьНаименование = Истина;
	КонецЕсли;
	
	Если Не ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		СтруктураПараметров.ИспользоватьТоварныйЗнак = Истина;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает возможность использования способа описания остатков для указанного вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// Возвращаемое значение:
// Булево - если возможно использование только полного (Истина) или упрощенного(Ложь) описания остатков.
// Неопределено - если использование способа описания остатков не ограничено.
Функция ИспользованиеСпособаОписанияОстатков(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат Ложь;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЧастичноеВыбытие

//Формирует представление частичного выбытия по виду продукции для отображения пользователю.
//
//Параметры:
// ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для которого необходимо получить представление.
//
//Возвращаемое значение:
// Строка - Представление частичного выбытия по виду продукции.
Функция ПредставлениеЧастичногоВыбытияПоВидуПродукции(ВидПродукции) Экспорт
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат НСтр("ru = 'Продажа на разлив'");
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		Возврат НСтр("ru = 'Поштучная продажа'");
	Иначе
		Возврат НСтр("ru = 'Частичное выбытие'");
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область УпаковкиЕдиницыИзмерения

Функция ПолучитьДанныеУпаковки(Данные, Номенклатура, Упаковка = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Коэффициент", 0);
	Результат.Вставить("Вес",         0);
	Результат.Вставить("Объем",       0);
	Результат.Вставить("ТипИзмеряемойВеличиныВес",   Ложь);
	Результат.Вставить("ТипИзмеряемойВеличиныОбъем", Ложь);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Упаковка = Неопределено Тогда
		КлючУпаковки = ИнтеграцияИСКлиентСерверПовтИсп.ПустоеЗначениеУпаковки();
		Если КлючУпаковки = Неопределено Тогда
			КлючУпаковки = "";
		КонецЕсли;
	Иначе
		КлючУпаковки = Упаковка;
	КонецЕсли;
	
	ДанныеНоменклатуры = Данные[Номенклатура];
	Если ДанныеНоменклатуры <> Неопределено Тогда
		ДанныеУпаковки = ДанныеНоменклатуры[КлючУпаковки];
		Если ДанныеУпаковки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеУпаковки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПреобразоватьИдентификаторВСД(ИдентификаторПроисхожденияВЕТИССтрокой) Экспорт
	
	Если СтрДлина(ИдентификаторПроисхожденияВЕТИССтрокой) = 39 Тогда
		
		ИдентификаторПроисхожденияВЕТИССтрокой = НРег(ИдентификаторПроисхожденияВЕТИССтрокой);
		ИдентификаторПроисхожденияВЕТИССтрокой = СтрЗаменить(ИдентификаторПроисхожденияВЕТИССтрокой, "-", "");
		ИдентификаторПроисхожденияВЕТИССтрокой = Лев(ИдентификаторПроисхожденияВЕТИССтрокой,8)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 9, 4)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 13, 4)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 17, 4)
			+ "-" + Сред(ИдентификаторПроисхожденияВЕТИССтрокой, 21, 12);
		
		Возврат ИдентификаторПроисхожденияВЕТИССтрокой;
		
	Иначе
		Возврат ИдентификаторПроисхожденияВЕТИССтрокой;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормыДокументовОснований

Функция ИмяПоляИнтеграцииВФормеДокументаОснования(ИмяПодсистемы) Экспорт
	
	Возврат "Интеграция" + ИмяПодсистемы + "_ИнформацияОДокументах";
	
КонецФункции

Функция ИмяПоляОписанияИнтеграцийВФормеДокументаОснования() Экспорт
	
	Возврат "ИнтеграцияИС_ИнтегрируемыеПодсистемы";
	
КонецФункции

Функция ИнтегрируемыеПодсистемыВФормеДокументаОснования(Форма) Экспорт
	
	ИмяПоля = ИмяПоляОписанияИнтеграцийВФормеДокументаОснования();
	
	СтруктураРеквизитов = Новый Структура(ИмяПоля);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Форма);
	
	Если СтруктураРеквизитов[ИмяПоля] = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов[ИмяПоля];
	
КонецФункции

#КонецОбласти

#Область КомандыНавигационнойСсылки

Функция РазделительКомандыНавигационнойСсылки()
	
	Возврат "#";
	
КонецФункции

Функция ОбщийПрефиксКомандыНавигационнойСсылки(ИмяПодсистемы) Экспорт
	
	Возврат 
		"ИнтеграцияИС_КомандаНавигационнойСсылки" + РазделительКомандыНавигационнойСсылки()
		+ ИмяПодсистемы + РазделительКомандыНавигационнойСсылки();
	
КонецФункции

Функция ПрефиксКомандыСоздатьОбъект()
	
	Возврат "СоздатьОбъект";
	
КонецФункции

Функция ПрефиксКомандыОткрытьОбъект()
	
	Возврат "ОткрытьОбъект";
	
КонецФункции

Функция ПрефиксКомандыОткрытьПротоколОбмена()
	
	Возврат "ОткрытьПротоколОбмена";
	
КонецФункции

#КонецОбласти

#Область СобытияОповещения

Функция РазделительСобытияОповещения()
	
	Возврат "#";
	
КонецФункции

Функция ОбщийПрефиксСобытияОповещения(ИмяПодсистемы)
	
	Возврат 
		"ИнтеграцияИС_СобытиеОповещения" + РазделительСобытияОповещения()
		+ ИмяПодсистемы + РазделительСобытияОповещения();
	
КонецФункции

Функция ПрефиксСобытияИзмененОбъект()
	
	Возврат "ИзмененОбъект";
	
КонецФункции

Функция ПрефиксСобытияИзмененоСостояние()
	
	Возврат "ИзмененоСостояние";
	
КонецФункции

Функция ПрефиксСобытияОбновитьКэшМаркируемойПродукции()
	
	Возврат "ОбновитьКэшМаркируемойПродукции";
	
КонецФункции

Функция ПрефиксСобытияВыполненОбмен()
	
	Возврат "ВыполненОбмен";

КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыПредставленияНоменклатуры() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Номенклатура",               Неопределено);
	Параметры.Вставить("Характеристика",             Неопределено);
	Параметры.Вставить("ХарактеристикиИспользуются", Ложь);
	Параметры.Вставить("Серия",                      Неопределено);
	Параметры.Вставить("СерииИспользуются",          Ложь);
	Параметры.Вставить("ТолькоПросмотр",             Неопределено);
	Параметры.Вставить("ДляОтображения",             Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ПредставлениеНоменклатурыФорматированнойСтрокой(Параметры) Экспорт
	
	Номенклатура               = Параметры.Номенклатура;
	Характеристика             = Параметры.Характеристика;
	ХарактеристикиИспользуются = Параметры.ХарактеристикиИспользуются;
	Серия                      = Параметры.Серия;
	СерииИспользуются          = Параметры.СерииИспользуются;
	ТолькоПросмотр             = Параметры.ТолькоПросмотр;
	ДляОтображения             = Параметры.ДляОтображения;
	
	МассивСтрок = Новый Массив;
	
	Если ТолькоПросмотр Тогда
		ЦветТекста = WebЦвета.Серый; // ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	ПустоеЗначение = Истина;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПустоеЗначение = Ложь;
		Если ТолькоПросмотр Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Номенклатура);
		Иначе 
			Ссылка = "ВыбратьНоменклатуру";
		КонецЕсли;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			СокрЛП(Номенклатура), , ЦветТекста, , Ссылка));
	Иначе
		Если ТолькоПросмотр Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Номенклатура не указана'"),, ЦветТекста));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'выбрать номенклатуру'"), , , , "ВыбратьНоменклатуру"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустоеЗначение И (ХарактеристикиИспользуются Или ДляОтображения) Тогда
	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		Если ТолькоПросмотр И ЗначениеЗаполнено(Характеристика) Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Характеристика);
		Иначе
			Ссылка = "ВыбратьХарактеристику";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон("(%1)", Характеристика), , ЦветТекста, , Ссылка));
		ИначеЕсли ТолькоПросмотр Тогда
			Если Не ДляОтображения Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = '(характеристика не указана)'"),,ЦветТекста));
			КонецЕсли;
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(выбрать характеристику)'"), , , , Ссылка));
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ПустоеЗначение И (СерииИспользуются Или ДляОтображения) Тогда
	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		Если ТолькоПросмотр И ЗначениеЗаполнено(Серия) Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Серия);
		Иначе 
			Ссылка = "ВыбратьСерию";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон("(%1)", Серия), , ЦветТекста, , Ссылка));
		ИначеЕсли ТолькоПросмотр Тогда
			Если Не ДляОтображения Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = '(серия не указана)'"),,ЦветТекста));
			КонецЕсли;
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(выбрать серию)'"), , , , Ссылка));
		КонецЕсли;
	
	КонецЕсли;

	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ЗаменитьНечитаемыеСимволы(Знач ИсходнаяСтрока, ЗаменятьПробел = Истина, ЗаменятьНа = "") Экспорт
	
	НечитаемыеСимволы = Новый Массив();
	НечитаемыеСимволы.Добавить(Символы.ВК);
	НечитаемыеСимволы.Добавить(Символы.ВТаб);
	НечитаемыеСимволы.Добавить(Символы.НПП);
	НечитаемыеСимволы.Добавить(Символы.ПС);
	НечитаемыеСимволы.Добавить(Символы.ПФ);
	НечитаемыеСимволы.Добавить(Символы.Таб);
	НечитаемыеСимволы.Добавить(Символ(182)); // символ параграфа
	НечитаемыеСимволы.Добавить(Символ(176)); // символ градуса
	
	Если ЗаменятьПробел Тогда
		НечитаемыеСимволы.Добавить(" ");
	КонецЕсли;
	
	Для Каждого НечитаемыйСимвол Из НечитаемыеСимволы Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, НечитаемыйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция ПредставлениеНаименования(Наименование, ОкружатьКавычками = Истина, МаксимальнаяДлина = 30) Экспорт

	Результат = Наименование;
	
	Если СтрДлина(Результат) > МаксимальнаяДлина Тогда
		Результат = Лев(Результат, МаксимальнаяДлина) + "...";
	КонецЕсли;
	
	Если ОкружатьКавычками Тогда
		Если Лев(Результат, 1) <> """" Тогда
			Результат = """" + Результат;
		КонецЕсли;
		Если Прав(Результат, 1) <> """" Тогда
			Результат = Результат + """";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СтрокаДляРасчетаХешаСоставаУпаковки(Параметры) Экспорт
	
	СтрокаДляРасчетаХеша = "";
	Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		СтрокаДляРасчетаХеша = СтрокаДляРасчетаХеша + Строка(Параметры.Номенклатура.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
			СтрокаДляРасчетаХеша = СтрокаДляРасчетаХеша + Строка(Параметры.Характеристика.УникальныйИдентификатор());
		КонецЕсли;
	Иначе
		СтрокаДляРасчетаХеша = СтрокаДляРасчетаХеша + Параметры.GTIN;
	КонецЕсли;
	
	Возврат СтрокаДляРасчетаХеша;
	
КонецФункции

Функция ПредставлениеКоличестваСоставаУпаковкиДляРасчетаХеша(Упаковка, РодительКоличествоПредставление) Экспорт
	
	Если Упаковка.КоличествоУпаковок > 0 Тогда
		КоличествоПредставление = Формат(Упаковка.КоличествоУпаковок, "ЧДЦ=0; ЧРГ=;");
	Иначе
		КоличествоПредставление = Формат(Упаковка.Коэффициент, "ЧДЦ=0; ЧРГ=;");
	КонецЕсли;
	Если РодительКоличествоПредставление <> "" Тогда
		КоличествоПредставление = КоличествоПредставление + "*" + РодительКоличествоПредставление;
	КонецЕсли;
	
	Возврат КоличествоПредставление;
	
КонецФункции

Функция ПредставлениеСоставаУпаковки(Упаковка, РодительскаяУпаковка) Экспорт
	
	Если РодительскаяУпаковка = Неопределено Тогда
		Возврат Упаковка.Наименование;
	Иначе
		Возврат СтрШаблон("%1 - %2 %3",
			Упаковка.Наименование, Упаковка.КоличествоУпаковок, РодительскаяУпаковка.Представление);
	КонецЕсли;
	
КонецФункции

Функция ДанныеПредставленияСрокаГодности(СрокГодности, ПроверяемаяДата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОсталосьДней");
	ВозвращаемоеЗначение.Вставить("Представление");
	
	ВозвращаемоеЗначение.ОсталосьДней = (НачалоДня(СрокГодности) - НачалоДня(ПроверяемаяДата)) / (60 * 60 * 24);
	
	Если ВозвращаемоеЗначение.ОсталосьДней < 0 Тогда
		ВозвращаемоеЗначение.Представление = НСтр("ru = 'Просрочен'");
	ИначеЕсли ВозвращаемоеЗначение.ОсталосьДней = 0 Тогда
		ВозвращаемоеЗначение.Представление = НСтр("ru = 'Сегодня'");
	Иначе
		ПредставлениеДней                  = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
		ПредставлениеЛет                   = НСтр("ru = ';%1 год;;%1 года;%1 лет;%1 года'");
		ОсталосьЛет = Цел(ВозвращаемоеЗначение.ОсталосьДней / 365);
		Если ОсталосьЛет = 0 Тогда
			ВозвращаемоеЗначение.Представление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				ПредставлениеДней, ВозвращаемоеЗначение.ОсталосьДней);
		Иначе
			ДанныеПредставления = Новый Массив();
			ДанныеПредставления.Добавить(
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					ПредставлениеЛет, ОсталосьЛет));
			ОсталосьДней = ВозвращаемоеЗначение.ОсталосьДней - (ОсталосьЛет * 365);
			Если ОсталосьДней > 0 Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						ПредставлениеДней, ОсталосьДней));
			КонецЕсли;
			ВозвращаемоеЗначение.Представление = СтрСоединить(ДанныеПредставления, ", ");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

Функция ПутьКДаннымИзСтроки(Форма, Путь) Экспорт
	
	Если Путь = "" Тогда
		Возврат Форма;
	КонецЕсли;
	
	ПутьКДанным = Форма;
	Массив = СтрРазделить(Путь, ".");
	Для Каждого Имя Из Массив Цикл
		ПутьКДанным = ПутьКДанным[Имя];
	КонецЦикла;
	
	Возврат ПутьКДанным;
	
КонецФункции

#КонецОбласти

#Область НовыеТоварныеГруппыВнедрение

#Область ПодлежитМаркировкеОстатков

Функция КормаДляЖивотныхПодконтрольныеВЕТИСПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция МясоПодконтрольноеВЕТИСПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ИгрыИИгрушкиДляДетейПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция РадиоэлектроннаяПродукцияПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ТитановаяМеталлопродукцияПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция РастительныеМаслаПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ПечатнаяПродукцияПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция БакалеяПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаПодлежитМаркировкеОстатков()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ПодлежитПеремаркировке

Функция КормаДляЖивотныхПодконтрольныеВЕТИСПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция МясоПодконтрольноеВЕТИСПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ИгрыИИгрушкиДляДетейПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция РадиоэлектроннаяПродукцияПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ТитановаяМеталлопродукцияПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция РастительныеМаслаПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ПечатнаяПродукцияПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция БакалеяПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаПодлежитПеремаркировке()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ПодлежитВозвратуВОборот

Функция КормаДляЖивотныхПодконтрольныеВЕТИСПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция МясоПодконтрольноеВЕТИСПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция ИгрыИИгрушкиДляДетейПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция РадиоэлектроннаяПродукцияПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция ТитановаяМеталлопродукцияПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция РастительныеМаслаПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПодлежитВозвратуВОборот()
	Возврат Истина;
КонецФункции

Функция ПечатнаяПродукцияПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция БакалеяПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаПодлежитВозвратуВОборот()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ИспользуетОтчетыОНанесенииКодовМаркировки

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция РастительныеМаслаИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ПечатнаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция СтроительныеМатериалыИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ОтопительныеПриборыИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция БакалеяИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция КабельнаяПродукцияИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

Функция МоторныеМаслаИспользуетОтчетыОНанесенииКодовМаркировки()
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ИспользуетПроизводствоВнеЕАЭС

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция РастительныеМаслаИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ПечатнаяПродукцияИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция СтроительныеМатериалыИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ОтопительныеПриборыИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция БакалеяИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

Функция КабельнаяПродукцияИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаИспользуетПроизводствоВнеЕАЭС() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ

Функция КормаДляЖивотныхПодконтрольныеВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция МясоПодконтрольноеВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ИгрыИИгрушкиДляДетейПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция РадиоэлектроннаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Истина;
КонецФункции

Функция ТитановаяМеталлопродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция РастительныеМаслаПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Истина;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ПечатнаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция БакалеяПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ИспользуетПолучениеПродукцииОтФизическихЛиц

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Истина;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция РастительныеМаслаИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ПечатнаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция БакалеяИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

Функция МоторныеМаслаИспользуетПолучениеПродукцииОтФизическихЛиц()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ИспользуетСвидетельствоОГосударственнойРегистрации

Функция КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция КормаДляЖивотныхБезВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция МясоПодконтрольноеВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция ВетеринарныеПрепаратыИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция ИгрыИИгрушкиДляДетейИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция РадиоэлектроннаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Истина;
КонецФункции

Функция ТитановаяМеталлопродукцияИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Истина;
КонецФункции

Функция КонсервированнаяПродукцияБезВЕТИСИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Истина;
КонецФункции

Функция РастительныеМаслаИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Истина;
КонецФункции

Функция ОптоволокноИОптоволоконнаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Истина;
КонецФункции

Функция ПечатнаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция СтроительныеМатериалыИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция ОтопительныеПриборыИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция БакалеяИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

Функция КабельнаяПродукцияИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Истина;
КонецФункции

Функция МоторныеМаслаИспользуетСвидетельствоОГосударственнойРегистрации()
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти