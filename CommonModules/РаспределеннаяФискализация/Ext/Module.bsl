
#Область ПрограммныйИнтерфейс

// Возвращает признак доступности распределенной фискализации.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ДоступноРаспределеннаяФискализация() Экспорт
	
	Результат = Ложь;
	РаспределеннаяФискализацияДоступна = Результат; 
	СтандартнаяОбработка = Истина;
	РаспределеннаяФискализацияПереопределяемый.ДоступноРаспределеннаяФискализация(РаспределеннаяФискализацияДоступна, СтандартнаяОбработка);
	Результат = ?(СтандартнаяОбработка, Результат, РаспределеннаяФискализацияДоступна);
	Возврат Результат; 
	
КонецФункции          

#Если Не МобильноеПриложениеСервер Тогда 

// Создает обсуждение фискализации.
// 
// Возвращаемое значение:
//  Неопределено, ИдентификаторОбсужденияСистемыВзаимодействия - Обсуждение фискализации
//
Функция ОбсуждениеФискализации() Экспорт
	
	Обсуждение = Неопределено; 
	
	Если НЕ ДоступноРаспределеннаяФискализация() Тогда
		Возврат Обсуждение;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБПО.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Обсуждение;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторОбсужденияСтрока = Константы.ИдентификаторОбсужденияФискализации.Получить();
	Если ЗначениеЗаполнено(ИдентификаторОбсужденияСтрока) Тогда
		Попытка
			ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсужденияСтрока);
			Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
		Исключение
			Обсуждение = Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	Попытка
		Если Обсуждение = Неопределено Тогда
			Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Отображаемое = Ложь;
			Обсуждение.Заголовок = НСтр("ru='Фискализация чеков'");
			Обсуждение.Ключ = Строка(Новый УникальныйИдентификатор);
			Обсуждение.Записать();
			Константы.ИдентификаторОбсужденияФискализации.Установить(Строка(Обсуждение.Идентификатор));
		КонецЕсли;
	
		// Добавить текущего пользователя в обсуждение.
		Если НЕ Обсуждение.Участники.Содержит(СистемаВзаимодействия.ИдентификаторТекущегоПользователя()) Тогда
			Обсуждение.Участники.Добавить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
			Обсуждение.Записать();
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка системы взаимодействия'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Обсуждение.Идентификатор;
	
КонецФункции

// Создает сообщение для фискализации чека
// 
// Параметры:
//  ИдентификаторЧека - УникальныйИдентификатор
//  ОрганизацияИИН - Строка
//
Процедура СоздатьСообщениеФискализации(ИдентификаторЧека, ОрганизацияИИН = Неопределено) Экспорт
	
	Если НЕ ДоступноРаспределеннаяФискализация() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБПО.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ИдентификаторОбсужденияСтрока = Константы.ИдентификаторОбсужденияФискализации.Получить();
		Если ЗначениеЗаполнено(ИдентификаторОбсужденияСтрока) Тогда
			Попытка
				ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсужденияСтрока);
				СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
				НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(ИдентификаторОбсуждения);
				НовоеСообщение.Дата = ОбщегоНазначенияБПО.ДатаСеанса();
				ТекстСообщения = НСтр("ru='Фискализация чека'") + Символы.НПП + ИдентификаторЧека;
				Если Не ПустаяСтрока(ОрганизацияИИН) Тогда
					ТекстСообщения = ТекстСообщения + Символы.НПП + ОрганизацияИИН;
				КонецЕсли;
				НовоеСообщение.Текст = ТекстСообщения;
				НовоеСообщение.Записать();
			Исключение
				ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
					НСтр("ru = 'Ошибка системы взаимодействия'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;   

КонецПроцедуры

#КонецЕсли

#Область ОчередьЧековККТ 

// Добавить чек в очередь чеков ККТ.
//
// Параметры:
//  ПараметрыЧекаККТ - Структура - Параметры чека ККТ:
//  * ПозицииЧека - Массив из См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека - .
//  ПараметрыПакетнойОперации - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков
// Возвращаемое значение:
//  РегистрСведенийЗапись.ОчередьЧековККТ.
Функция ДобавитьЧекВОчередьЧековККТ(ПараметрыЧекаККТ, ПараметрыПакетнойОперации = Неопределено, ЗапуститьОчередьЧеков = Ложь) Экспорт
	                                            
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		Если ПустаяСтрока(ПараметрыЧекаККТ.ИдентификаторФискальнойЗаписи) Тогда
			ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИдентификаторЗаписи = ПараметрыЧекаККТ.ИдентификаторФискальнойЗаписи;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЧековККТ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗаписи", ИдентификаторЗаписи);
		Блокировка.Заблокировать();
		
		// ОчередьЧековККТ
		НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыЧекаККТ.ДокументОснование, Истина);
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ФискальнаяОперации = ОборудованиеЧекопечатающиеУстройства.ФискальнаяОперацииПоИдентификатору(ИдентификаторЗаписи);
			
			НоваяСтрока = НаборЗаписей.Добавить();
			Если ФискальнаяОперации <> Неопределено И Не ПустаяСтрока(ФискальнаяОперации.ФискальныйПризнак) Тогда
				НоваяСтрока.СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован;
			Иначе
				НоваяСтрока.СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Новый;
			КонецЕсли;
			НоваяСтрока.Дата = ТекущаяДатаСеанса();
			НоваяСтрока.ИдентификаторЗаписи = ИдентификаторЗаписи;
			НоваяСтрока.ДокументОснование = ПараметрыЧекаККТ.ДокументОснование;
			НоваяСтрока.ТипДокумента      = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
			НоваяСтрока.Организация       = ПараметрыЧекаККТ.Организация;
			НоваяСтрока.ОрганизацияИНН    = ПараметрыЧекаККТ.ОрганизацияИНН;
			НоваяСтрока.СистемаНалогообложения = ПараметрыЧекаККТ.СистемаНалогообложения;
			НоваяСтрока.ТорговыйОбъект    = ПараметрыЧекаККТ.ТорговыйОбъект;         
			НоваяСтрока.СубъектПерсональныхДанных = ПараметрыЧекаККТ.СубъектПерсональныхДанных;
			НоваяСтрока.ТипРасчета        = ПараметрыЧекаККТ.ТипРасчета;
			Содержание = "";
			Сумма = 0;
			Для Каждого ПозицияЧека Из ПараметрыЧекаККТ.ПозицииЧека Цикл 
				Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
					Сумма = Сумма + ПозицияЧека.Сумма;
					Если Не ПустаяСтрока(Содержание) Тогда
						Содержание = Содержание + Символы.НПП + ПозицияЧека.Наименование
					Иначе
						Содержание = ПозицияЧека.Наименование
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока.Сумма      = Сумма;
			НоваяСтрока.Содержание = Содержание;
			НоваяСтрока.КассаККМ   = ПараметрыЧекаККТ.КассаККМ;
			НоваяСтрока.ДанныеЧека = Новый ХранилищеЗначения(ПараметрыЧекаККТ);
			НоваяСтрока.ПараметрыПакетнойОперации = Новый ХранилищеЗначения(ПараметрыПакетнойОперации);
			
			Если ТипЗнч(ПараметрыПакетнойОперации) = Тип("Структура") Тогда
				НоваяСтрока.ТипПакетнойОперации   = ПараметрыПакетнойОперации.ТипОперации;
				НоваяСтрока.ЭквайринговыйТерминал = ПараметрыПакетнойОперации.ИдентификаторЭТ;
			КонецЕсли;
			
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение                 
		ОтменитьТранзакцию();   
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка добавления чека в очередь'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецПопытки;
	
	#Если Не МобильноеПриложениеСервер Тогда
		СоздатьСообщениеФискализации(ИдентификаторЗаписи, ПараметрыЧекаККТ.ОрганизацияИНН);
	#КонецЕсли 
	
	Если ЗапуститьОчередьЧеков Тогда
		РазрешенаАвтоматическаяФискализация = ДоступноРаспределеннаяФискализация();  
	#Если Не МобильноеПриложениеСервер Тогда
		РазрешенаАвтоматическаяФискализация = РазрешенаАвтоматическаяФискализация И СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	#КонецЕсли 
		Если ТипЗнч(ПараметрыЧекаККТ) = Тип("Структура") Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("КассаККМ", ПараметрыЧекаККТ.КассаККМ);
		КонецЕсли;
		
		ФискализацияЧековВОчереди(ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ИдентификаторЗаписи;
	
КонецФункции

// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
//  Структура.
Функция ДанныеЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьЧековККТ.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование,
	|	ОчередьЧековККТ.Сумма КАК Сумма,
	|	ОчередьЧековККТ.ДанныеЧека КАК ДанныеЧека,
	|	ОчередьЧековККТ.РезультатПакетнойОперации КАК РезультатПакетнойОперации
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	ОчередьЧековККТ.ИдентификаторЗаписи = &ИдентификаторЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЧековККТ.Дата УБЫВ");
		
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ДанныеЧека", Новый Структура());
		ДанныеЧека.Вставить("РезультатПакетнойОперации", Новый Структура());
		
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		
		ХранилищеДанныеЧека = ДанныеЧека.ДанныеЧека;
		Если ТипЗнч(ХранилищеДанныеЧека) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.ДанныеЧека = ХранилищеДанныеЧека.Получить();
		КонецЕсли;
		
		ХранилищеРезультатПакетнойОперации = ДанныеЧека.РезультатПакетнойОперации;
		Если ТипЗнч(ХранилищеРезультатПакетнойОперации) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.РезультатПакетнойОперации = ХранилищеРезультатПакетнойОперации.Получить();
		КонецЕсли;
		
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Чеки в очереди на фискализацию.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаБПО - Касса по которой провести фискализацию, если не указано тогда по всем.
//
// Возвращаемое значение:
//  Массив.
Функция ЧекиВОчередиНаФискализацию(КассаККМ = Неопределено, ОблачнаяККТ = Ложь) Экспорт
	
	СтрокаЗапроса = "";
	Для Каждого ТипОрганизация Из Метаданные.ОпределяемыеТипы.ОрганизацияБПО.Тип.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипОрганизация) Тогда
			ПолноеИмя = Метаданные.НайтиПоТипу(ТипОрганизация).ПолноеИмя();
			Если ПустаяСтрока(СтрокаЗапроса) Тогда
				СтрокаЗапроса = СтрокаЗапроса + СтрШаблон("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Т.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ Организации
					|ИЗ
					|	%1 КАК Т", ПолноеИмя);
			Иначе
				СтрокаЗапроса = СтрокаЗапроса + СтрШаблон("
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Т.Ссылка
					|ИЗ
					|	%1 КАК Т", ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ФильтрПоОрганизациям = Ложь;
	Если Не ПустаяСтрока(СтрокаЗапроса) Тогда
		СтрокаЗапроса = СтрокаЗапроса + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ФильтрПоОрганизациям = Истина;
	КонецЕсли;
	
	СтрокаЗапроса = СтрокаЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОчередьЧековККТ.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование,
	|	ОчередьЧековККТ.Сумма КАК Сумма,
	|	ОчередьЧековККТ.ДанныеЧека КАК ДанныеЧека,
	|	ОчередьЧековККТ.ТипПакетнойОперации КАК ТипПакетнойОперации,
	|	ОчередьЧековККТ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ОчередьЧековККТ.ПараметрыПакетнойОперации КАК ПараметрыПакетнойОперации,
	|	ОчередьЧековККТ.КассаККМ КАК КассаККМ
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЧековККТ.Дата УБЫВ";
	Запрос = Новый Запрос(СтрокаЗапроса);
	
	ТекстУсловия = "ОчередьЧековККТ.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусЧекаККТВОчереди.Новый)";
	Если ОблачнаяККТ Тогда
		ТекстУсловия = ТекстУсловия + " ИЛИ ОчередьЧековККТ.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусЧекаККТВОчереди.Ошибка)"
	КонецЕсли;
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстУсловия = ТекстУсловия + " И ОчередьЧековККТ.КассаККМ = &КассаККМ";
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	КонецЕсли;
	Если ФильтрПоОрганизациям Тогда
		ТекстУсловия = ТекстУсловия + "
						|И ОчередьЧековККТ.Организация В ( ВЫБРАТЬ
						|	Т.Ссылка КАК Ссылка
						|ИЗ
						|	Организации КАК Т)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	ЧекиНаФискализацию = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ТипПакетнойОперации");
		ДанныеЧека.Вставить("ЭквайринговыйТерминал");
		ДанныеЧека.Вставить("КассаККМ");
		ДанныеЧека.Вставить("ДанныеЧека", Новый Структура());
		ДанныеЧека.Вставить("ПараметрыПакетнойОперации", Новый Структура());
		
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		
		ХранилищеДанныеЧека = ДанныеЧека.ДанныеЧека;
		Если ТипЗнч(ХранилищеДанныеЧека) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.ДанныеЧека = ХранилищеДанныеЧека.Получить();
		КонецЕсли;
		
		ХранилищеПараметрыПакетнойОперации = ДанныеЧека.ПараметрыПакетнойОперации;
		Если ТипЗнч(ХранилищеПараметрыПакетнойОперации) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.ПараметрыПакетнойОперации = ХранилищеПараметрыПакетнойОперации.Получить();
		КонецЕсли;
		
		ЧекиНаФискализацию.Добавить(ДанныеЧека);
	КонецЦикла;
	
	Возврат ЧекиНаФискализацию;
	
КонецФункции

// Чеки в очереди на фискализацию.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаБПО - Касса по которой провести фискализацию, если не указано тогда по всем.
//
// Возвращаемое значение:
//  Массив.
Функция ЧекиВОчередиНаПроверкуСтатусов(КассаККМ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОчередьЧековККТ.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.ТипДокумента КАК ТипДокумента,
	|	ОчередьЧековККТ.ТипРасчета КАК ТипРасчета,
	|	ОчередьЧековККТ.Организация КАК Организация,
	|	ОчередьЧековККТ.СтатусЧека КАК СтатусЧека,
	|	ОчередьЧековККТ.ТорговыйОбъект КАК ТорговыйОбъект,
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование,
	|	ОчередьЧековККТ.Сумма КАК Сумма,
	|	ОчередьЧековККТ.ДанныеЧека КАК ДанныеЧека,
	|	ОчередьЧековККТ.ТипПакетнойОперации КАК ТипПакетнойОперации,
	|	ОчередьЧековККТ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ОчередьЧековККТ.ПараметрыПакетнойОперации КАК ПараметрыПакетнойОперации,
	|	ОчередьЧековККТ.КассаККМ КАК КассаККМ,
	|	ОчередьЧековККТ.СтатусыОперацийВСервисеОблачныхКасс КАК СтатусыОперацийВСервисеОблачныхКасс
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ГДЕ
	|	ОчередьЧековККТ.СтатусЧека = &СтатусЧека
	|	И ОчередьЧековККТ.СтатусыОперацийВСервисеОблачныхКасс = &СтатусыОперацийВСервисеОблачныхКасс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЧековККТ.Дата УБЫВ";  
	
	Запрос.УстановитьПараметр("СтатусЧека", Перечисления.СтатусЧекаККТВОчереди.Фискализируется);
	Запрос.УстановитьПараметр("СтатусыОперацийВСервисеОблачныхКасс", Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Выполняется);
	
	ЧекиНаПроверкуСтатуса = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ТипДокумента");
		ДанныеЧека.Вставить("ТипРасчета");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("Организация");
		ДанныеЧека.Вставить("ТорговыйОбъект");
		ДанныеЧека.Вставить("Сумма");
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ТипПакетнойОперации");
		ДанныеЧека.Вставить("ЭквайринговыйТерминал");
		ДанныеЧека.Вставить("КассаККМ");
		ДанныеЧека.Вставить("СтатусыОперацийВСервисеОблачныхКасс");
		ДанныеЧека.Вставить("ДанныеЧека", Новый Структура());
		
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		
		ХранилищеДанныеЧека = ДанныеЧека.ДанныеЧека;
		Если ТипЗнч(ХранилищеДанныеЧека) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.ДанныеЧека = ХранилищеДанныеЧека.Получить();
		КонецЕсли;
		
		ЧекиНаПроверкуСтатуса.Добавить(ДанныеЧека);
	КонецЦикла;
	
	Возврат ЧекиНаПроверкуСтатуса;
	
КонецФункции

// Удалить чек из очереди.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ-основание.
// 
Процедура УдалитьЧекИзОчереди(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументСсылка);
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Очистить очередь чеков.
//
Процедура ОчиститьОчередьЧеков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить(); 
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Записать статус чека в очереди.
//
// Параметры:
//  ПараметрыФискализации - Структура:
//   * ИдентификаторФискальнойЗаписи - Строка
//   * ДокументОснование - ДокументСсылка
//   * РезультатВыполненияПакетнойОперации - Структура
//  СтатусЧека - ПеречислениеСсылка.СтатусЧекаККТВОчереди
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование -
//  ТекстОшибки - Строка
Процедура ЗаписатьСтатусЧекаВОчереди(ПараметрыФискализации, СтатусЧека, ОборудованиеККТ = Неопределено, ТекстОшибки = Неопределено, СтатусОперацииВСервисе = Неопределено, ОбъектОбработан = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ПустаяСтрока(ПараметрыФискализации.ИдентификаторФискальнойЗаписи) Тогда
			ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИдентификаторЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЧековККТ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗаписи", ИдентификаторЗаписи);
		Блокировка.Заблокировать();
		
		// ОчередьЧековККТ
		НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(ПараметрыФискализации.ДокументОснование, Истина);
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
		НаборЗаписей.Прочитать();
		
		Для Каждого НоваяСтрока Из НаборЗаписей Цикл
			НоваяСтрока.СтатусЧека  = СтатусЧека;
			НоваяСтрока.СтатусыОперацийВСервисеОблачныхКасс = СтатусОперацииВСервисе;
			НоваяСтрока.ТекстОшибки = ТекстОшибки;
			Если ПараметрыФискализации.Свойство("РезультатВыполненияПакетнойОперации") Тогда
				ПараметрыФискализации.РезультатВыполненияПакетнойОперации.Удалить("ИдентификаторЗаписи");
				НоваяСтрока.РезультатПакетнойОперации = 
				Новый ХранилищеЗначения(ПараметрыФискализации.РезультатВыполненияПакетнойОперации);
			КонецЕсли;
			Если ОборудованиеККТ <> Неопределено Тогда
				НоваяСтрока.ОборудованиеККТ  = ОборудованиеККТ; 
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	#Если НЕ МобильноеПриложениеСервер Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись статуса чека в очереди'",
			ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	#КонецЕсли
		Возврат;
	КонецПопытки;
	
	Если СтатусЧека = Перечисления.СтатусЧекаККТВОчереди.Фискализирован Тогда
		ИдентификаторФискальнойЗаписи = ПараметрыФискализации.ИдентификаторФискальнойЗаписи;
		РезультатФискализации = ОборудованиеЧекопечатающиеУстройства.ФискальнаяОперацииПоИдентификатору(ИдентификаторФискальнойЗаписи);
		Если ПараметрыФискализации.Свойство("РезультатВыполненияПакетнойОперации") Тогда
			РезультатВыполненияПакетнойОперации = ПараметрыФискализации.РезультатВыполненияПакетнойОперации;
			ПараметрыФискализации.Удалить("РезультатВыполненияПакетнойОперации");
		Иначе
			РезультатВыполненияПакетнойОперации = Неопределено;
		КонецЕсли;
		РаспределеннаяФискализацияПереопределяемый.ФискализацияЧекаВОчереди(
			ИдентификаторФискальнойЗаписи, 
			ПараметрыФискализации, 
			ОборудованиеККТ, 
			РезультатФискализации,
			РезультатВыполненияПакетнойОперации,
			ОбъектОбработан);
	КонецЕсли;
	
КонецПроцедуры

// Данные чека из очереди.
//
// Параметры:
//  ИдентификаторЗаписи - РегистрСведенийЗапись.ФискальныеОперации - Идентификатор записи.
// 
// Возвращаемое значение:
//  Структура.
Функция ПолучитьСтатусЧекаВОчереди(ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак,
	|	ФискальныеОперации.НомерСменыККМ КАК НомерСменыККМ,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ФискальныеОперации.ЗаводскойНомерФН КАК ЗаводскойНомерФН,
	|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ПОМЕСТИТЬ ФискализированныеЧеки
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФискализированныеЧеки.ФискальныйПризнак КАК ФискальныйПризнак,
	|	ФискализированныеЧеки.НомерСменыККМ КАК НомерСменыККМ,
	|	ФискализированныеЧеки.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ФискализированныеЧеки.ЗаводскойНомерФН КАК ЗаводскойНомерФН,
	|	ОчередьЧековККТ.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ОчередьЧековККТ.СтатусЧека КАК СтатусЧека,
	|	ОчередьЧековККТ.ДокументОснование КАК ДокументОснование,
	|	ОчередьЧековККТ.ТекстОшибки КАК ТекстОшибки,
	|	ОчередьЧековККТ.ТипПакетнойОперации КАК ТипПакетнойОперации,
	|	ОчередьЧековККТ.РезультатПакетнойОперации КАК РезультатПакетнойОперации,
	|	ОчередьЧековККТ.ДанныеЧека КАК ДанныеЧека,
	|	ОчередьЧековККТ.СтатусыОперацийВСервисеОблачныхКасс КАК СтатусыОперацийВСервисеОблачныхКасс,
	|	ОчередьЧековККТ.ОборудованиеККТ КАК ОборудованиеККТ
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФискализированныеЧеки КАК ФискализированныеЧеки
	|		ПО (ФискализированныеЧеки.ИдентификаторЗаписи = ОчередьЧековККТ.ИдентификаторЗаписи)
	|ГДЕ
	|	ОчередьЧековККТ.ИдентификаторЗаписи = &ИдентификаторЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЧековККТ.Дата УБЫВ");
		
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("СтатусЧека");
		ДанныеЧека.Вставить("ФискальныйПризнак");
		ДанныеЧека.Вставить("НомерСменыККМ");
		ДанныеЧека.Вставить("НомерЧекаККМ");
		ДанныеЧека.Вставить("ЗаводскойНомерФН");
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ТекстОшибки");
		ДанныеЧека.Вставить("ТипПакетнойОперации");
		ДанныеЧека.Вставить("РезультатПакетнойОперации", Новый Структура());
		ДанныеЧека.Вставить("ДанныеЧека", Новый Структура());
		
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		
		ХранилищеРезультатПакетнойОперации = ДанныеЧека.РезультатПакетнойОперации;
		Если ТипЗнч(ХранилищеРезультатПакетнойОперации) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.РезультатПакетнойОперации = ХранилищеРезультатПакетнойОперации.Получить();
		КонецЕсли;
		
		ХранилищеДанныеЧека = ДанныеЧека.ДанныеЧека;
		Если ТипЗнч(ХранилищеДанныеЧека) = Тип("ХранилищеЗначения") Тогда
			ДанныеЧека.ДанныеЧека = ХранилищеДанныеЧека.Получить();
		КонецЕсли;
		
		Если ОбщегоНазначенияБПО.ИспользуютсяОблачныеККТ() Тогда
			Если Выборка.СтатусыОперацийВСервисеОблачныхКасс = Перечисления.СтатусыОперацийВСервисеОблачныхКасс.Выполняется Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрыОперации", ДанныеЧека.ДанныеЧека);
				ДополнительныеПараметры.Вставить("ИдентификаторУстройства", Выборка.ОборудованиеККТ);
				
				МодульОблачныхКасс = ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеЧекопечатающиеОблачныеККТ");
				МодульОблачныхКасс.ПолучитьСтатусПробитияЧека(Выборка.ДокументОснование, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Данные чека из очереди по фискальный признаку и номеру чеку ККМ.
// 
// Параметры:
//  ФискальныйПризнак - Строка - Фискальный признак
//  НомерЧекаККМ - Строка - Номер чека ККМ
// 
// Возвращаемое значение:
//  Неопределено, Структура - Получить фискальную операцию:
//  * ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО.
//  * ИдентификаторЗаписи - УникальныйИдентификатор.
//  * ФискальныйПризнак - Строка - 
//  * НомерСменыККМ - Число.
//  * НомерЧекаККМ - Число. 
Функция ПолучитьФискальнуюОперацию(ФискальныйПризнак, НомерЧекаККМ = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "ВЫБРАТЬ ПЕРВЫЕ 1                          
	|	ОчередьЧековККТ.ДокументОснование    КАК ДокументОснование,
	|	ОчередьЧековККТ.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	ФискальныеОперации.ФискальныйПризнак    КАК ФискальныйПризнак,
	|	ФискальныеОперации.НомерСменыККМ        КАК НомерСменыККМ,
	|	ФискальныеОперации.НомерЧекаККМ         КАК НомерЧекаККМ
	|ИЗ
	|	РегистрСведений.ОчередьЧековККТ КАК ОчередьЧековККТ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|	ПО ОчередьЧековККТ.ИдентификаторЗаписи = ФискальныеОперации.ИдентификаторЗаписи
	|ГДЕ
	|	(ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак)";
	Если Не ПустаяСтрока(НомерЧекаККМ) Тогда
		Текст = Текст + Символы.НПП + "И (ФискальныеОперации.НомерЧекаККМ = &НомерЧекаККМ)";
	КонецЕсли;
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("ФискальныйПризнак", ФискальныйПризнак);
	Если Не ПустаяСтрока(НомерЧекаККМ) Тогда
		Запрос.УстановитьПараметр("НомерЧекаККМ", Число(НомерЧекаККМ));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("ДокументОснование");
		ДанныеЧека.Вставить("ИдентификаторЗаписи");
		ДанныеЧека.Вставить("ФискальныйПризнак");
		ДанныеЧека.Вставить("НомерСменыККМ");
		ДанныеЧека.Вставить("НомерЧекаККМ");
		ЗаполнитьЗначенияСвойств(ДанныеЧека, Выборка);
		Возврат ДанныеЧека;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаспределеннаяФискализация

// Выполнить фискализацию чеков в очереди
//
// Параметры:
//  Параметры - см. ПараметрыФискализацииОчередиЧеков.
Процедура ФискализацияЧековВОчереди(Параметры = Неопределено) Экспорт
	
	ПоддерживаемыеТипы = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ПоддерживаемыеТипы.ОблачнаяККТ = Истина;
	
	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	СписокОтбор.ТипыПО = ПоддерживаемыеТипы;
	СписокУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);
	
	Если Параметры = Неопределено Тогда
		КассаККМ = Неопределено;
	Иначе
		КассаККМ = Параметры.КассаККМ;
	КонецЕсли;
	ЧекиВОчереди = ЧекиВОчередиНаФискализацию(КассаККМ, Истина);
	Если ЧекиВОчереди.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКассир = МенеджерОборудованияКлиентСервер.ТекущийКассирДляФискальныхОпераций();
	
	ДанныеОчереди = Новый Структура();
	ДанныеОчереди.Вставить("Кассир"         , ТекущийКассир.Кассир);
	ДанныеОчереди.Вставить("КассирИНН"      , ТекущийКассир.КассирИНН);
	ДанныеОчереди.Вставить("ЧекиВОчереди"   , ЧекиВОчереди);
	ДанныеОчереди.Вставить("СписокУстройств", СписокУстройств);
	ДанныеОчереди.Вставить("НомерЧека"      , 0);
	
	ФискализацияЧековВОчереди_Начало(ДанныеОчереди); 
	
КонецПроцедуры

// Выполнить получение статусов чеков в очереди
Процедура ПолучениеСтатусовЧековВОчереди() Экспорт
	
	ПоддерживаемыеТипы = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ПоддерживаемыеТипы.ОблачнаяККТ = Истина;
	
	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	СписокОтбор.ТипыПО = ПоддерживаемыеТипы;
	СписокУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);
	
	ЧекиВОчереди = ЧекиВОчередиНаПроверкуСтатусов();
	Если ЧекиВОчереди.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОчереди = Новый Структура();
	ДанныеОчереди.Вставить("ЧекиВОчереди"   , ЧекиВОчереди);
	ДанныеОчереди.Вставить("НомерЧека"      , 0);
	ДанныеОчереди.Вставить("СписокУстройств", СписокУстройств);
	
	ПолучениеСтатусовЧековВОчереди_Начало(ДанныеОчереди); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполнят очистку истории операций очереди чеков
//
Процедура ОчисткаИсторииОперацийОчередиЧеков(ДатаОчистки) Экспорт
	
	ОбщегоНазначенияБПО.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаИсторииОперацийОчередиЧеков);
	
	Если ДатаОчистки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОчередьЧековККТ.ОчиститьРегистрДоДаты(ДатаОчистки);
	
КонецПроцедуры

// Возвращает созданное обсуждение фискализации
//
// Возвращаемое значение:
//  Неопределено, ИдентификаторОбсужденияСистемыВзаимодействия - Обсуждение фискализации
Функция ПодключениеСистемыВзаимодействия() Экспорт
	
#Если Не МобильноеПриложениеСервер Тогда 
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеФискализации();
	КонецЕсли;
#КонецЕсли

	Возврат Неопределено;
	
КонецФункции

// Возвращает период хранения платежных операций в регистре сведений
//
// Возвращаемое значение:
//   ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций
Функция ПериодХраненияИсторииОперацийОчередиЧеков() Экспорт
	
	ПериодХранения = Константы.СрокХраненияОперацийОчередиЧеков.Получить();
	Возврат ПериодХранения;
	
КонецФункции

// Установить значение констант сроков хранения операций в регистрах сведений
//
Процедура УстановитьСрокХраненияОперацийОчередиЧеков() Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Константы.СрокХраненияОперацийОчередиЧеков.Получить()) Тогда
		Константы.СрокХраненияОперацийОчередиЧеков.Установить(Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя);
	КонецЕсли;
	
КонецПроцедуры

#Область РегламентныеЗадания

// Вызывается из процедуры РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
// для установки доступности регламентного задания, определяет зависимость от функциональных опций.
// 
// Параметры:
//  Настройки - ТаблицаЗначений
//  ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки, ФункциональнаяОпция = Неопределено) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОчисткаИсторииОперацийОчередиЧеков;
	Настройка.ФункциональнаяОпция = ФункциональнаяОпция;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗаданияТехнологияСервиса

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОчисткаИсторииОперацийОчередиЧеков.Имя);
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	Если ОбщегоНазначенияБПО.ИспользуетсяРаспределеннаяФискализация() Тогда
		СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОчисткаИсторииОперацийОчередиЧеков.ИмяМетода);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределеннаяФискализация

// Начать фискализацию чеков в очереди
// 
// Параметры:
//  ДанныеОчереди - Структура - .
Процедура ФискализацияЧековВОчереди_Начало(ДанныеОчереди) Экспорт
	
	Пока ДанныеОчереди.НомерЧека < ДанныеОчереди.ЧекиВОчереди.Количество() Цикл
		
		ЧекВОчереди = ДанныеОчереди.ЧекиВОчереди[ДанныеОчереди.НомерЧека];
		ДанныеОчереди.НомерЧека = ДанныеОчереди.НомерЧека + 1;
		
		Если ЧекВОчереди.ДанныеЧека <> Неопределено Тогда
			ОбщиеПараметры = ЧекВОчереди.ДанныеЧека;
			ОбщиеПараметры.ИдентификаторФискальнойЗаписи = ЧекВОчереди.ИдентификаторЗаписи;
			СтатусДокументаИзменен = Ложь; 
			РаспределеннаяФискализацияПереопределяемый.ПроверитьСтатусДокументаОснования(ОбщиеПараметры, СтатусДокументаИзменен);
			Если СтатусДокументаИзменен Тогда
				ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	
		Если ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Новый") 
			Или ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка") 
			Или ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется") Тогда
			
			Если ПустаяСтрока(ОбщиеПараметры.Кассир) Тогда
				ОбщиеПараметры.Кассир = ДанныеОчереди.Кассир;
				ОбщиеПараметры.КассирИНН = ДанныеОчереди.КассирИНН;
			КонецЕсли;
			
			ИдентификаторУстройстваККТ = ПолучитьДоступноеККТДляФискализации(ОбщиеПараметры, ДанныеОчереди.СписокУстройств);
			
			Если НЕ ЗначениеЗаполнено(ИдентификаторУстройстваККТ) Тогда
				ТекстСообщения = НСтр("ru='Нет доступных ККТ для фискализации чека.'");
				СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
				СтатусОперацииВСервисе = ПредопределенноеЗначение("Перечисление.СтатусыОперацийВСервисеОблачныхКасс.Ошибка");
				ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения, СтатусОперацииВСервисе);
			Иначе
				СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется");
				ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, ИдентификаторУстройстваККТ);
				
				ПараметрыПроцедуры = Новый Массив;
				ПараметрыПроцедуры.Добавить(ЧекВОчереди.ДокументОснование);
				ПараметрыПроцедуры.Добавить(ИдентификаторУстройстваККТ); 
				ПараметрыПроцедуры.Добавить(ОбщиеПараметры);
				
				ФоновоеЗаданиеПолученияСтатуса = ФоновыеЗадания.Выполнить("ОборудованиеЧекопечатающиеОблачныеККТ.ПробитьЧек", ПараметрыПроцедуры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Начать фискализацию чеков в очереди
// 
// Параметры:
//  Параметры - см. ПараметрыФискализацииОчередиЧеков
Процедура ПолучениеСтатусовЧековВОчереди_Начало(ДанныеОчереди) Экспорт
	
	Пока ДанныеОчереди.НомерЧека < ДанныеОчереди.ЧекиВОчереди.Количество() Цикл
		
		ЧекВОчереди = ДанныеОчереди.ЧекиВОчереди[ДанныеОчереди.НомерЧека];
		ДанныеОчереди.НомерЧека = ДанныеОчереди.НомерЧека + 1;
		
		Если ЧекВОчереди.ДанныеЧека <> Неопределено Тогда
			ОбщиеПараметры = ЧекВОчереди.ДанныеЧека;
			ОбщиеПараметры.ИдентификаторФискальнойЗаписи = ЧекВОчереди.ИдентификаторЗаписи;
			СтатусДокументаИзменен = Ложь; 
			РаспределеннаяФискализацияПереопределяемый.ПроверитьСтатусДокументаОснования(ОбщиеПараметры, СтатусДокументаИзменен);
			Если СтатусДокументаИзменен Тогда
				ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	
		Если ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется") Тогда
			
			ИдентификаторУстройстваККТ = ПолучитьДоступноеККТДляФискализации(ОбщиеПараметры, ДанныеОчереди.СписокУстройств);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройстваККТ);
			ДополнительныеПараметры.Вставить("ПараметрыОперации", ОбщиеПараметры);
			
			ПараметрыПроцедуры = Новый Массив;
			ПараметрыПроцедуры.Добавить(ЧекВОчереди.ДокументОснование);
			ПараметрыПроцедуры.Добавить(ДополнительныеПараметры);
			
			ФоновоеЗаданиеПолученияСтатуса = ФоновыеЗадания.Выполнить("ОборудованиеЧекопечатающиеОблачныеККТ.ПолучитьСтатусПробитияЧека", ПараметрыПроцедуры);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств)
	
	ИдентификаторУстройстваККТ = Неопределено;
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияВызовСервераПереопределяемый.ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат ИдентификаторУстройстваККТ;
	КонецЕсли;
	
	Для Каждого Устройство Из СписокУстройств Цикл
		ОрганизацияУстройства = Устройство.Организация;
		Если ОрганизацияУстройства = РеквизитыЧека.Организация И Устройство.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ОблачнаяККТ Тогда
			ИдентификаторУстройстваККТ = Устройство.Ссылка; 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторУстройстваККТ;
	
КонецФункции

#КонецОбласти

#КонецОбласти
