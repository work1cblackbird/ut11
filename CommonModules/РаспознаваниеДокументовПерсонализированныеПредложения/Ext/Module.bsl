#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяРазмещенияСписокРезультатовРаспознавания() Экспорт
	
	Возврат "СписокРезультатовРаспознавания";
	
КонецФункции

Функция ИмяРазмещенияНастройкиРаспознавания() Экспорт
	
	Возврат "НастройкиРаспознавания";
	
КонецФункции

Функция ИмяРазмещенияПриЗагрузкеФайла() Экспорт
	
	Возврат "ПриЗагрузкеФайла";
	
КонецФункции

// Получает баннер, в случае если есть что показать. Если баннер не найден, в хранилище помещается Неопределено.
// Параметры:
//  Размещение - Строка - Идентификатор формы по которой нужно показать баннер. см. функции ИмяРазмещения...().
//  ПоказатьПредыдущий - Булево - Признак показа предыдущего в очереди баннера. Если Ложь - показывается следующий баннер.
//
// Возвращаемое значение:
//  - Неопределено - если баннеры для пользователя неопределены или работа с внешними ресурсами заблокирована.
//  - Структура:
//        * Баннер - Неопределено, Структура - описание баннера.
//        * Размещение - Строка - идентификатор формы по которой нужно показать баннер. см. функции ИмяРазмещения...().
//        * ПоказыватьКнопкуПоказатьБаннер - Булево - признак видимости кнопки показа баннера.
//        * ТекстКнопкиПоказатьБаннер - Строка - текст заголовка кнопки показа баннера.
//        * ИдентификаторБанераОткрываемогоКнопкойПоказатьБаннер - Неопределено, Строка - идентификатор следующего баннера.
//        * Единственный - Булево - признак того, что баннер только один.
//
Функция ПолучитьКарусельБаннеров(Размещение, ПоказатьПредыдущий) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БаннерыПользователя = БаннерыПользователя(Размещение);
	Если БаннерыПользователя.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БаннерыВРотации = БаннерыВРотации(Размещение);
	ВыполнитьРотациюБаннеров(БаннерыВРотации, ПоказатьПредыдущий);
	
	// Баннеры в ротации могли устареть, необходимо обновить
	// по баннерам пользователей, сохранив порядок ротации
	
	ИсключитьНедоступныеБаннеры(БаннерыВРотации, БаннерыПользователя);
	ДобавитьНовыеБаннерыВНачало(БаннерыВРотации, БаннерыПользователя);
	ИсключитьЗакрытыеБаннеры(БаннерыВРотации, БаннерыПользователя);
	
	СохранитьРотациюБанеров(БаннерыВРотации, Размещение);
	
	// Расчет модели баннера по ротации
	КарусельБаннеров = НоваяКарусельБаннеров(Размещение);
	
	Если БаннерыВРотации.Количество() > 0 Тогда
		// Данные карусели текущего баннера
		ПервыйБаннер = БаннерыПользователя.Получить(БаннерыВРотации[0]);
		КарусельБаннеров.Баннер = ПервыйБаннер;
		КарусельБаннеров.Единственный = (БаннерыВРотации.Количество() = 1);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Распознавание документов. Персонализированные предложения. Показан баннер'"),
			УровеньЖурналаРегистрации.Информация, , , КарусельБаннеров.Баннер.Идентификатор);
	КонецЕсли;
	
	// Данные карусели следующего баннера, открываемойго кнопкой "показать баннер".
	СледующийБаннер = СледующийЗакрытыйОткрываемыйБаннер(БаннерыПользователя, Размещение);
	Если СледующийБаннер <> Неопределено Тогда 
		КарусельБаннеров.ПоказыватьКнопкуПоказатьБаннер = Истина;
		КарусельБаннеров.ТекстКнопкиПоказатьБаннер = СледующийБаннер.ТекстКнопкиПоказатьБаннер;
		КарусельБаннеров.ИдентификаторБанераОткрываемогоКнопкойПоказатьБаннер = СледующийБаннер.Идентификатор;
	КонецЕсли;
	
	Возврат КарусельБаннеров;
	
КонецФункции

// Процедура отображает баннер на форме.
// Параметры:
//		Форма - Форма - Форма, на которой отображается баннер.
//		АдресРезультата - Строка - Адрес временного хранилища, в которое помещен баннер.
//
Процедура УстановитьБаннерНаФорме(Форма, АдресРезультата) Экспорт
	
	Элементы = Форма.Элементы;
	
	КарусельБаннеров = ПолучитьИзВременногоХранилища(АдресРезультата);
	Форма.КарусельБаннеров = КарусельБаннеров;
	
	Если КарусельБаннеров = Неопределено Тогда
		Элементы.Баннер.Видимость = Ложь;
		Элементы.ГруппаПоказатьБаннер.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если КарусельБаннеров.Баннер = Неопределено Тогда
		Элементы.Баннер.Видимость = Ложь;
		Элементы.ГруппаПоказатьБаннер.Видимость = Ложь;
	Иначе
		Элементы.ГруппаБаннерОжидание.Видимость = Ложь;
		Элементы.ТекстБаннера.Видимость         = Истина;
		Элементы.КартинкаБаннера.Видимость      = Истина;
		Элементы.Баннер.Видимость               = Истина;
		Элементы.БаннерСФоном.ЦветФона          = ЦветаСтиля[КарусельБаннеров.Баннер.ЦветФона];
		Если ЗначениеЗаполнено(КарусельБаннеров.Баннер.Картинка) Тогда
			Элементы.КартинкаБаннера.Видимость  = Истина;
			Форма.КартинкаБаннера = ПоместитьВоВременноеХранилище(КарусельБаннеров.Баннер.Картинка, Форма.УникальныйИдентификатор);
		Иначе
			Элементы.КартинкаБаннера.Видимость  = Ложь;
		КонецЕсли;
		Форма.ТекстБаннера = КарусельБаннеров.Баннер.ТекстБаннера;
		
		Элементы.КартинкаПредыдущийБаннер.Видимость = Не КарусельБаннеров.Единственный;
		Элементы.КартинкаСледующийБаннер.Видимость = Не КарусельБаннеров.Единственный;
		
		Элементы.КартинкаЗакрытьБаннер.Доступность = Истина;
		Элементы.КартинкаПредыдущийБаннер.Доступность = Истина;
		Элементы.КартинкаСледующийБаннер.Доступность = Истина;
	КонецЕсли;
	
	Если КарусельБаннеров.ПоказыватьКнопкуПоказатьБаннер Тогда 
		Элементы.ГруппаПоказатьБаннер.Видимость = Истина;
		Элементы.ДекорацияПоказатьБаннер.Доступность = Истина;
		Элементы.ДекорацияПоказатьБаннер.Заголовок = КарусельБаннеров.ТекстКнопкиПоказатьБаннер;
	Иначе
		Элементы.ГруппаПоказатьБаннер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьОткрытиеБаннера(КарусельБаннеров) Экспорт
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_ИсключенныеБаннеры",
		КарусельБаннеров.Размещение,
		Новый Соответствие);
	
	ЗакрытыеБаннеры.Удалить(КарусельБаннеров.ИдентификаторБанераОткрываемогоКнопкойПоказатьБаннер);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_ИсключенныеБаннеры",
		КарусельБаннеров.Размещение, ЗакрытыеБаннеры);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Распознавание документов. Персонализированные предложения. Открыт баннер'"),
		УровеньЖурналаРегистрации.Информация, , , КарусельБаннеров.ИдентификаторБанераОткрываемогоКнопкойПоказатьБаннер);
	
КонецПроцедуры

Процедура СохранитьЗакрытиеБаннера(КарусельБаннеров) Экспорт
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_ИсключенныеБаннеры",
		КарусельБаннеров.Размещение,
		Новый Соответствие);
	
	ЗакрытыеБаннеры.Вставить(КарусельБаннеров.Баннер.Идентификатор, ТекущаяДатаСеанса());
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_ИсключенныеБаннеры",
		КарусельБаннеров.Размещение, ЗакрытыеБаннеры);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Распознавание документов. Персонализированные предложения. Закрыт баннер'"),
		УровеньЖурналаРегистрации.Информация, , , КарусельБаннеров.Баннер.Идентификатор);
	
КонецПроцедуры

Функция ПолучитьСтраницуПриЗагрузкеФайла() Экспорт
	
	Размещение = РаспознаваниеДокументовПерсонализированныеПредложения.ИмяРазмещенияПриЗагрузкеФайла();
	
	Предложения = РаспознаваниеДокументовSDK.ТекущиеПерсонализированныеПредложения(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор,
		Размещение
	);
	
	Возврат Предложения.ПриЗагрузкеФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция БаннерыВРотации(Размещение)
	
	// Ротация - это массив идентификаторов баннеров в которой важен порядок
	// Порядок ротации определяет карусель баннеров для работы кнопок вперед/назад
	
	// Получаем баннеры в ротации у текущего пользователя в указанном размещении.
	БаннерыВРотации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_НаборБаннеровВРотации",
		Размещение,
		Новый Массив
	);
	
	Если ТипЗнч(БаннерыВРотации) <> Тип("Массив") Тогда
		БаннерыВРотации = Новый Массив;
	КонецЕсли;
	
	Возврат БаннерыВРотации;
	
КонецФункции

Процедура ВыполнитьРотациюБаннеров(БаннерыВРотации, ПоказатьПредыдущий);
	
	// Ротируем пользовательский список баннеров.
	Если БаннерыВРотации.Количество() > 1 Тогда
		Если ПоказатьПредыдущий Тогда
			ПоследнийБаннер = БаннерыВРотации[БаннерыВРотации.ВГраница()];
			БаннерыВРотации.Удалить(БаннерыВРотации.ВГраница());
			БаннерыВРотации.Вставить(0, ПоследнийБаннер);
		Иначе
			ПервыйБаннер = БаннерыВРотации[0];
			БаннерыВРотации.Удалить(0);
			БаннерыВРотации.Добавить(ПервыйБаннер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьНедоступныеБаннеры(БаннерыВРотации, БаннерыПользователя)
	
	НоваяРотация = Новый Массив;
	
	Для каждого БаннерВРотации Из БаннерыВРотации Цикл
		Баннер = БаннерыПользователя.Получить(БаннерВРотации);
		Если Баннер <> Неопределено Тогда
			НоваяРотация.Добавить(БаннерВРотации);
		КонецЕсли;
	КонецЦикла;
	
	БаннерыВРотации = НоваяРотация;
	
КонецПроцедуры

Процедура ДобавитьНовыеБаннерыВНачало(БаннерыВРотации, БаннерыПользователя)
	
	Для каждого БаннерПользователя Из БаннерыПользователя Цикл
		Если БаннерыВРотации.Найти(БаннерПользователя.Ключ) = Неопределено Тогда
			БаннерыВРотации.Вставить(0, БаннерПользователя.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьЗакрытыеБаннеры(БаннерыВРотации, БаннерыПользователя)
	
	НоваяРотация = Новый Массив;
	
	Для каждого БаннерВРотации Из БаннерыВРотации Цикл
		Баннер = БаннерыПользователя.Получить(БаннерВРотации);
		Если Баннер <> Неопределено И Не Баннер.БаннерЗакрыт Тогда
			НоваяРотация.Добавить(БаннерВРотации);
		КонецЕсли;
	КонецЦикла;
	
	БаннерыВРотации = НоваяРотация;
	
КонецПроцедуры

Процедура СохранитьРотациюБанеров(БаннерыВРотации, Размещение)
	
	// Сохраняем баннеры в ротации у текущего пользователя в указанном размещении.
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_НаборБаннеровВРотации",
		Размещение, БаннерыВРотации);
	
КонецПроцедуры

Функция СледующийЗакрытыйОткрываемыйБаннер(БаннерыПользователя, Размещение)
	
	ЗакрытыеБаннеры = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_ИсключенныеБаннеры",
		Размещение,
		Новый Соответствие);
	
	Для Каждого ЗакрытыйБаннер Из ЗакрытыеБаннеры Цикл
		Баннер = БаннерыПользователя.Получить(ЗакрытыйБаннер.Ключ);
		Если Баннер <> Неопределено Тогда
			Если ЗначениеЗаполнено(Баннер.ТекстКнопкиПоказатьБаннер) Тогда
				Возврат Баннер;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗакрытыеБаннеры(Размещение)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаспознаваниеДокументовПерсонализированныеПредложения_ИсключенныеБаннеры",
		Размещение,
		Новый Соответствие);
	
КонецФункции

Функция БаннерЗакрыт(ИдентификаторБаннера, Размещение)
	
	Возврат ЗакрытыеБаннеры(Размещение).Получить(ИдентификаторБаннера) <> Неопределено;
	
КонецФункции

Функция БаннерыПользователя(Размещение)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
	
	Баннеры = Новый Соответствие;
	// Баннеры доступные текущему пользорвателю.
	// * Загрузка новых баннеров
	// * Исключение закрытых
	// * Ограничение по правам
	
	Предложения = РаспознаваниеДокументовSDK.ТекущиеПерсонализированныеПредложения(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор,
		Размещение,
		ЗакрытыеБаннеры(Размещение)
	);
	Для Каждого БаннерПредложения Из Предложения.Баннеры Цикл
		
		Если Не ЭтоПолноправныйПользователь И БаннерПредложения.ТолькоДляПолныхПрав Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПолноправныйПользователь Тогда
			// Вытеснение баннеров по полным правам
			// Если есть несколько баннеров с одним идентификатором,
			// то оставить только баннеры с признаком ТолькоДляПолныхПрав
			
			НайденныйБаннер = Баннеры.Получить(БаннерПредложения.Идентификатор);
			Если НайденныйБаннер <> Неопределено Тогда
				Если НайденныйБаннер.ТолькоДляПолныхПрав Тогда
					// Уже найден баннер для полных прав, не переопределяем его.
					Продолжить;
				КонецЕсли;
				
				// Найденный баннер будет заменен.
			КонецЕсли;
			
		КонецЕсли;
		
		Баннер = НовыйБаннер();
		Баннер.Идентификатор = БаннерПредложения.Идентификатор;
		Баннер.ТекстБаннера = НовыйТекстБаннера(БаннерПредложения.ЗаголовокБаннера, БаннерПредложения.ТекстБаннера);
		Баннер.Картинка = БаннерПредложения.Картинка;
		Баннер.БаннерЗакрыт = БаннерЗакрыт(БаннерПредложения.Идентификатор, Размещение);
		Баннер.ТолькоДляПолныхПрав = БаннерПредложения.ТолькоДляПолныхПрав;
		Баннер.ТекстКнопкиПоказатьБаннер = БаннерПредложения.ТекстКнопкиПоказатьБаннер;
		Баннер.Страницы = Предложения.Страницы;
		
		Баннеры.Вставить(Баннер.Идентификатор, Баннер);
	КонецЦикла;
	
	Возврат Баннеры;
	
КонецФункции

Функция НовыйТекстБаннера(Знач ТекстЗаголовка, Знач ТекстПодзаголовка)
	
	ТекстБаннера = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗаголовка);
		ТекстБаннера.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка, ШрифтыСтиля.ШрифтЗаголовкаБаннераБРД));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗаголовка) И ЗначениеЗаполнено(ТекстПодзаголовка) Тогда
		ТекстБаннера.Добавить(Символы.ПС);
		ТекстБаннера.Добавить(Новый ФорматированнаяСтрока(" ", Новый Шрифт(,5))); // Отступ между заголовком и подзаголовком.
		ТекстБаннера.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПодзаголовка) Тогда
		ТекстПодзаголовка = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодзаголовка);
		ТекстБаннера.Добавить(Новый ФорматированнаяСтрока(ТекстПодзаголовка, ШрифтыСтиля.ШрифтТекстаБаннераБРД));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстБаннера);
	
КонецФункции

#Область Конструкторы

Функция НовыйБаннер()
	
	Баннер = Новый Структура;
	Баннер.Вставить("Идентификатор", "");
	Баннер.Вставить("ТекстБаннера", Новый ФорматированнаяСтрока(""));
	Баннер.Вставить("Картинка", Неопределено);
	Баннер.Вставить("ЦветФона", Метаданные.ЭлементыСтиля.ЦветФонаБаннерБРД.Имя);
	Баннер.Вставить("БаннерЗакрыт", Ложь);
	Баннер.Вставить("ТолькоДляПолныхПрав", Ложь);
	Баннер.Вставить("ТекстКнопкиПоказатьБаннер", Неопределено);
	Баннер.Вставить("Страницы", Новый Соответствие);
	// См. РаспознаваниеДокументовSDK.КакПерсонализированныеПредложения().Страницы
	
	Возврат Баннер;
	
КонецФункции

Функция НоваяКарусельБаннеров(Размещение)
	
	Модель = Новый Структура;
	Модель.Вставить("Баннер", Неопределено);
	Модель.Вставить("Размещение", Размещение);
	Модель.Вставить("ПоказыватьКнопкуПоказатьБаннер", Ложь);
	Модель.Вставить("ТекстКнопкиПоказатьБаннер", "");
	Модель.Вставить("ИдентификаторБанераОткрываемогоКнопкойПоказатьБаннер", Неопределено);
	Модель.Вставить("Единственный", Ложь);
	
	Возврат Модель;
	
КонецФункции

#КонецОбласти

#КонецОбласти