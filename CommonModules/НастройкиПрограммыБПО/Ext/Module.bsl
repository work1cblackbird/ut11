#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПанельАдминистрирования

// Создает новый раздел на форме Панели администрирования.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяГруппы - Строка
//  Родитель - ГруппаФормы
//           - Неопределено
//  Элемент - ГруппаФормы
//          - Неопределено
//
// Возвращаемое значение:
//  ГруппаФормы
Функция НоваяГруппаПанелиАдминистрирования(Форма, ИмяГруппы, Родитель = Неопределено, Элемент = Неопределено) Экспорт

#Если НЕ МобильноеПриложениеСервер Тогда
	Элементы = Форма.Элементы;
	Если Элемент = Неопределено Тогда
		Если Родитель = Неопределено Тогда
			Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), , Элементы.ГруппаДополнительно);
		Иначе
			Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		КонецЕсли;
	Иначе
		Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Родитель, Элемент);
	КонецЕсли;
	Группа.Вид                   = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Поведение             = ПоведениеОбычнойГруппы.Свертываемая;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	Группа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	Группа.ОтображатьОтступСлева = Истина;
	Группа.Скрыть();
	Возврат Группа;
#КонецЕсли

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПанельАдминистрирования

// Вызывается из модуля формы Панель администрирования, формирует команды на форме
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ПанельАдминистрированияПриСозданииНаСервере(Форма) Экспорт

#Если НЕ МобильноеПриложениеСервер Тогда
	ДанныеФормы = ДанныеФормы(Форма);
	ПараметрыРазмещения = Новый Структура();
	ПараметрыРазмещения.Вставить("ГруппаКомандЛево", Форма.Элементы.ГруппаДополнительноЛево);
	ПараметрыРазмещения.Вставить("ГруппаКомандПраво", Форма.Элементы.ГруппаДополнительноПраво);
	
	Если ДанныеФормы.ФункциональныеОпции.Количество() > 0 Тогда
		Форма.УстановитьПараметрыФункциональныхОпцийФормы(ДанныеФормы.ФункциональныеОпции);
	КонецЕсли;
	
	ВывестиКоманды(Форма, ДанныеФормы.Команды, ПараметрыРазмещения);
#КонецЕсли

КонецПроцедуры

// Возвращает описание команды по имени элемента формы.
// 
// Параметры:
//  ИмяКомандыВФорме Имя команды в форме
//  АдресНастроек Адрес настроек
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * Идентификатор - Строка
//   * Представление - Строка
//   * Подсказка - Строка
//   * ГруппаФормы - Неопределено, 
//                 - ГруппаФормы
//   * Важность - Строка
//   * Порядок - Число
//   * ФункциональныеОпции - Строка
//   * Менеджер - Строка
//   * Обработчик - Строка
//   * ДополнительныеПараметры - Структура
//   * ИмяФормы - Строка
//   * ПараметрыФормы - Структура, Неопределено -
//   * ИмяПараметраФормы - Строка
//   * ПорядокВажности - Число
//   * ИмяВФорме - Строка
//
Функция ОписаниеКомандыПанелиАдминистрирования(ИмяКомандыВФорме, АдресНастроек) Экспорт
	
#Если НЕ МобильноеПриложениеСервер Тогда
	Команды = ПолучитьИзВременногоХранилища(АдресНастроек);
	Команда = Команды.Найти(ИмяКомандыВФорме, "ИмяВФорме");
	Если Команда = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Сведения о команде ""%1"" не существуют.'"),
			ИмяКомандыВФорме);
	КонецЕсли;
	ОписаниеКоманды = СтрокаТаблицыЗначенийВСтруктуру(Команда);
	
	Если ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормы) Тогда
		ОписаниеКоманды.Вставить("Серверная", Ложь);
		МассивПодстрок = СтрРазделить(ОписаниеКоманды.ИмяФормы, ".");
		КоличествоПодстрок = МассивПодстрок.Количество();
		Если КоличествоПодстрок = 1
			Или (КоличествоПодстрок = 2 И ВРег(МассивПодстрок[0]) <> "ОБЩАЯФОРМА") Тогда
			ОписаниеКоманды.ИмяФормы = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.ИмяФормы;
		КонецЕсли;
	Иначе
		ОписаниеКоманды.Вставить("Серверная", Истина);
		Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
			Если Не ПустаяСтрока(ОписаниеКоманды.Менеджер) И СтрНайти(ОписаниеКоманды.Обработчик, ".") = 0 Тогда
				ОписаниеКоманды.Обработчик = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.Обработчик;
			КонецЕсли;
			Если СтрНачинаетсяС(ОписаниеКоманды.Обработчик, "e1cib") Тогда
				ОписаниеКоманды.Серверная = Ложь;
			ИначеЕсли СтрНайти(ОписаниеКоманды.Обработчик, "://")>0 Тогда
				ОписаниеКоманды.Серверная = Ложь;
			Иначе
				Если СтрНачинаетсяС(ВРег(ОписаниеКоманды.Обработчик), ВРег("ОбщийМодуль.")) Тогда
					ПозицияТочки = СтрНайти(ОписаниеКоманды.Обработчик, ".");
					ОписаниеКоманды.Обработчик = Сред(ОписаниеКоманды.Обработчик, ПозицияТочки + 1);
				КонецЕсли;
				МассивПодстрок = СтрРазделить(ОписаниеКоманды.Обработчик, ".");
				КоличествоПодстрок = МассивПодстрок.Количество();
				Если КоличествоПодстрок = 2 Тогда
					ИмяМодуля = МассивПодстрок[0];
					ОбъектМетаданныхОбщийМодуль = Метаданные.ОбщиеМодули.Найти(ИмяМодуля);
					Если ОбъектМетаданныхОбщийМодуль = Неопределено Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'Общий модуль ""%1"" не существует.'"),
							ИмяМодуля);
					КонецЕсли;
					Если ОбъектМетаданныхОбщийМодуль.КлиентУправляемоеПриложение Тогда
						ОписаниеКоманды.Серверная = Ложь;
					КонецЕсли;
				Иначе
					Вид = ВРег(МассивПодстрок[0]);
					ВидВоМножественномЧисле = ВидОбъектаМетаданныхВоМножественномЧисле(Вид);
					Если ВидВоМножественномЧисле <> Неопределено Тогда
						МассивПодстрок.Установить(0, ВидВоМножественномЧисле);
						ОписаниеКоманды.Обработчик = СтрСоединить(МассивПодстрок, ".");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОписаниеКоманды.Удалить("Менеджер");
	ОписаниеКоманды.Удалить("ГруппаФормы");
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКоманды);    
#КонецЕсли

КонецФункции

#КонецОбласти

#Область БезопасноеВыполнениеВнешнегоКода

////////////////////////////////////////////////////////////////////////////////
// Функции для поддержки работы конфигурации с профилем безопасности, в котором
// запрещено подключение внешних модулей без установки безопасного режима.
//

// Выполнить экспортную процедуру по имени с уровнем привилегий конфигурации.
// При включении профилей безопасности для вызова оператора Выполнить() используется
// переход в безопасный режим с профилем безопасности, используемым для информационной базы
// (если выше по стеку не был установлен другой безопасный режим).
//
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате
//                       <имя объекта>.<имя процедуры>, где <имя объекта> - это
//                       общий модуль или модуль менеджера объекта.
//  Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                        в порядке расположения элементов массива.
// 
Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	
#Если НЕ МобильноеПриложениеСервер Тогда
	ПроверитьИмяПроцедурыКонфигурации(ИмяМетода);
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
	
#КонецЕсли

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений)
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

#Область БезопасноеВыполнениеВнешнегоКода

// Проверяет, что переданное имя ИмяПроцедуры является именем экспортной процедуры конфигурации.
// Может использоваться для проверки, что переданная строка не содержит произвольного алгоритма
// на встроенном языке 1С:Предприятия перед использованием его в операторах Выполнить и Вычислить
// при их использовании для динамического вызова методов код конфигурации.
//
// В случае если переданная строка не является именем процедуры конфигурации, генерируется исключение.
//
// Предназначена для вызова из см. процедуру ВыполнитьМетодКонфигурации.
//
// Параметры:
//   ИмяПроцедуры - Строка - проверяемое имя экспортной процедуры.
//
Процедура ПроверитьИмяПроцедурыКонфигурации(Знач ИмяПроцедуры)
	
	ЧастиИмени = СтрРазделить(ИмяПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1 (передано значение: ""%2"") в %3.'"), 
			"ИмяПроцедуры", ИмяПроцедуры, "ОбщегоНазначенияБПО.ВыполнитьМетодКонфигурации");
	КонецЕсли;
	
	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1 (передано значение: ""%2"") в %3:
				|Не существует общий модуль ""%4"".'"),
			"ИмяПроцедуры", ИмяПроцедуры, "ОбщегоНазначенияБПО.ВыполнитьМетодКонфигурации", ИмяОбъекта);
	КонецЕсли;
	
	Если ЧастиИмени.Количество() = 3 Тогда
		ПолноеИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
		Попытка
			Менеджер = МенеджерОбъектаПоИмени(ПолноеИмяОбъекта);
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
		Если Менеджер = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неправильный формат параметра %1 (передано значение: ""%2"") в %3:
				           |Не существует менеджер объекта ""%4"".'"),
				"ИмяПроцедуры", ИмяПроцедуры, "ОбщегоНазначенияБПО.ВыполнитьМетодКонфигурации", ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	ИмяМетодаОбъекта = ЧастиИмени[ЧастиИмени.ВГраница()];
	ВременнаяСтруктура = Новый Структура;
	Попытка
		// Проверка того, что ИмяПроцедуры является допустимым идентификатором.
		// Например: МояПроцедура.
		ВременнаяСтруктура.Вставить(ИмяМетодаОбъекта);
	Исключение
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Безопасное выполнение метода'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1 (передано значение: ""%2"") в %3:
			           |Имя метода ""%4"" не соответствует требованиям образования имен процедур и функций.'"),
			"ИмяПроцедуры", ИмяПроцедуры, "ОбщегоНазначенияБПО.ВыполнитьМетодКонфигурации", ИмяМетодаОбъекта);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает менеджер объекта по имени.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Имя - Строка - имя например, "Справочник", "Справочники", "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникиМенеджер
//  СправочникМенеджер
//  ДокументыМенеджер
//  ДокументМенеджер
//  ...
//
Функция МенеджерОбъектаПоИмени(Имя)
	Перем КлассОМ, ИмяОМ, Менеджер;

#Если НЕ МобильноеПриложениеСервер Тогда
	ЧастиИмени = СтрРазделить(Имя, ".");
	
	Если ЧастиИмени.Количество() > 0 Тогда
		КлассОМ = ВРег(ЧастиИмени[0]);
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 1 Тогда
		ИмяОМ = ЧастиИмени[1];
	КонецЕсли;
	
	Если      КлассОМ = "ПЛАНОБМЕНА"
	 Или      КлассОМ = "ПЛАНЫОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли КлассОМ = "СПРАВОЧНИК"
	      Или КлассОМ = "СПРАВОЧНИКИ" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли КлассОМ = "ДОКУМЕНТ"
	      Или КлассОМ = "ДОКУМЕНТЫ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли КлассОМ = "ЖУРНАЛДОКУМЕНТОВ"
	      Или КлассОМ = "ЖУРНАЛЫДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли КлассОМ = "ПЕРЕЧИСЛЕНИЕ"
	      Или КлассОМ = "ПЕРЕЧИСЛЕНИЯ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли КлассОМ = "ОБЩИЙМОДУЛЬ"
	      Или КлассОМ = "ОБЩИЕМОДУЛИ" Тогда
		
		Возврат ОбщегоНазначенияБПО.ОбщийМодуль(ИмяОМ);
		
	ИначеЕсли КлассОМ = "ОТЧЕТ"
	      Или КлассОМ = "ОТЧЕТЫ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли КлассОМ = "ОБРАБОТКА"
	      Или КлассОМ = "ОБРАБОТКИ" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли КлассОМ = "ПЛАНВИДОВХАРАКТЕРИСТИК"
	      Или КлассОМ = "ПЛАНЫВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли КлассОМ = "ПЛАНСЧЕТОВ"
	      Или КлассОМ = "ПЛАНЫСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли КлассОМ = "ПЛАНВИДОВРАСЧЕТА"
	      Или КлассОМ = "ПЛАНЫВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли КлассОМ = "РЕГИСТРСВЕДЕНИЙ"
	      Или КлассОМ = "РЕГИСТРЫСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли КлассОМ = "РЕГИСТРНАКОПЛЕНИЯ"
	      Или КлассОМ = "РЕГИСТРЫНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли КлассОМ = "РЕГИСТРБУХГАЛТЕРИИ"
	      Или КлассОМ = "РЕГИСТРЫБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли КлассОМ = "РЕГИСТРРАСЧЕТА"
	      Или КлассОМ = "РЕГИСТРЫРАСЧЕТА" Тогда
		
		Если ЧастиИмени.Количество() < 3 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ВРег(ЧастиИмени[2]);
			Если ЧастиИмени.Количество() > 3 Тогда
				ИмяПодчиненногоОМ = ЧастиИмени[3];
			КонецЕсли;
			Если КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТ"
			 Или КлассПодчиненногоОМ = "ПЕРЕРАСЧЕТЫ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОМ = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КлассОМ = "БИЗНЕСПРОЦЕСС"
	      Или КлассОМ = "БИЗНЕСПРОЦЕССЫ" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли КлассОМ = "ЗАДАЧА"
	      Или КлассОМ = "ЗАДАЧИ" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли КлассОМ = "КОНСТАНТА"
	      Или КлассОМ = "КОНСТАНТЫ" Тогда
		Менеджер = Константы;
		
	ИначеЕсли КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТЬ"
	      Или КлассОМ = "ПОСЛЕДОВАТЕЛЬНОСТИ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОМ) Тогда
			Попытка
				Возврат Менеджер[ИмяОМ];
			Исключение
				Менеджер = Неопределено;
			КонецПопытки;
		Иначе
			Возврат Менеджер;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось получить менеджер для объекта ""%1""'"), Имя);
#КонецЕсли

КонецФункции

#КонецОбласти

#Область ПанельАдминистрирования

// Кэш формы, в которой будут выводиться подключаемые команды.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Структура:
//   * Команды - см. ТаблицаКоманд.
//   * ФункциональныеОпции - Структура
Функция ДанныеФормы(Форма)
	
	// Добавить команды
	Команды  = ТаблицаКоманд();
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("Команды", Новый Массив());
	ДанныеФормы.Вставить("ФункциональныеОпции", Новый Структура);
	
	
	НастройкиПрограммыБПОПереопределяемый.ПриЗаполненииКомандПанелиАдминистрирования(Форма, Команды);
	
	Количество = Команды.Количество();
	Для Номер = 1 По Количество Цикл
		Команда = Команды[Количество - Номер];
		
		// Фильтр по функциональным опциям.
		ФункциональныеОпции = СтрРазделить(Команда.ФункциональныеОпции, ",", Ложь);
		ВидимостьКоманды = ФункциональныеОпции.Количество() = 0;
		Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
			Если ПолучитьФункциональнуюОпцию(СокрЛП(ИмяОпции)) Тогда
				ВидимостьКоманды = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ВидимостьКоманды Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		Команда.ПорядокВажности = ?(Команда.Важность = "Важное", 1, ?(Команда.Важность = "СмТакже", 3, 2));
		
		Если ПустаяСтрока(Команда.Идентификатор) Тогда
			Команда.Идентификатор = "Авто_" + ОбщегоНазначенияБПО.КонтрольнаяСуммаСтрокой(Команда.Менеджер + "/" + Команда.ИмяФормы + "/" + Команда.Обработчик);
		КонецЕсли;
		
	КонецЦикла;
	
	Команды.Сортировать("ПорядокВажности Возр, Порядок Возр, Представление Возр");
	Для Каждого Команда Из Команды Цикл
		ДанныеФормы.Команды.Добавить(СтрокаТаблицыЗначенийВСтруктуру(Команда));
	КонецЦикла;
	
	
	Возврат ДанныеФормы;
	
КонецФункции

// Шаблон таблицы подключаемых команд.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Идентификатор - Строка
//   * Представление - Строка
//   * Подсказка - Строка
//   * ГруппаФормы - Неопределено, 
//                 - ГруппаФормы
//   * Важность - Строка
//   * Порядок - Число
//   * ФункциональныеОпции - Строка
//   * Менеджер - Строка
//   * Обработчик - Строка
//   * ДополнительныеПараметры - Структура
//   * ИмяФормы - Строка
//   * ПараметрыФормы - Структура, Неопределено -
//   * ИмяПараметраФормы - Строка
//   * ИмяВФорме - Строка
//
Функция ТаблицаКоманд()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Настройки внешнего вида:
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Подсказка", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГруппаФормы", Новый ОписаниеТипов);
	Таблица.Колонки.Добавить("Важность", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	// Настройки видимости и доступность:
	Таблица.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	// Настройки обработчика:
	Таблица.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ИмяФормы", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПараметрыФормы"); // Структура или Неопределено.
	Таблица.Колонки.Добавить("ИмяПараметраФормы", Новый ОписаниеТипов("Строка"));
	// Служебные:
	Таблица.Колонки.Добавить("ПорядокВажности", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ИмяВФорме", Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
КонецФункции

// Размещает подключенные команды в форме.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо разместить команды.
//   Команды - см. ТаблицаКоманд
//   ПараметрыРазмещения - см. ПараметрыРазмещения
//
Процедура ВывестиКоманды(Форма, Команды, ПараметрыРазмещения)
	
	ПодключенныеКоманды = ПодключенныеКоманды(Форма);
	ГруппаПоУмолчаниюЛево = ПараметрыРазмещения.ГруппаКомандЛево;
	ГруппаПоУмолчаниюПраво = ПараметрыРазмещения.ГруппаКомандПраво;
	
	Элементы = Форма.Элементы;
	
	// Вывод команд.
	СчетчикКомандСАвтогенерируемымИменем = 0;
	НомерКомандыВГруппеПоУмолчанию = 0;
	Для Каждого Команда Из Команды Цикл 
		
		ГруппаФормы = Команда.ГруппаФормы; // ГруппаФормы
		Если Команда.ГруппаФормы = Неопределено Тогда
			Если НомерКомандыВГруппеПоУмолчанию%2=0 Тогда
				ГруппаФормы = ГруппаПоУмолчаниюЛево;
			Иначе
				ГруппаФормы = ГруппаПоУмолчаниюПраво;
			КонецЕсли;
			НомерКомандыВГруппеПоУмолчанию = НомерКомандыВГруппеПоУмолчанию + 1;
		КонецЕсли;
		
		Команда.ИмяВФорме = ОпределитьИмяКоманды(Форма, ГруппаФормы.Имя, Команда.Идентификатор, СчетчикКомандСАвтогенерируемымИменем);
		
		КомандаФормы = Форма.Команды.Добавить(Команда.ИмяВФорме);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
		КомандаФормы.Заголовок = Команда.Представление;
		КомандаФормы.Подсказка   = КомандаФормы.Подсказка;
		
		КнопкаФормы = Элементы.Добавить(Команда.ИмяВФорме, Тип("КнопкаФормы"), ГруппаФормы);
		КнопкаФормы.Вид = ВидКнопкиФормы.Гиперссылка;
		Если Команда.ПорядокВажности = 1 Тогда
			КнопкаФормы.Шрифт = Новый Шрифт(КнопкаФормы.Шрифт,,,Истина);
		КонецЕсли;
		КнопкаФормы.ИмяКоманды = Команда.ИмяВФорме;
		Если ЗначениеЗаполнено(Команда.Подсказка) Тогда
			КнопкаФормы.РасширеннаяПодсказка.Заголовок = Команда.Подсказка; 
			КнопкаФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		КонецЕсли;
		КнопкаФормы.Ширина = 39;
		КнопкаФормы.РастягиватьПоГоризонтали = Ложь;
		
		Команда.Удалить("ГруппаФормы");
		
	КонецЦикла;
	
	ПодключенныеКоманды.АдресТаблицыКоманд = ПоместитьВоВременноеХранилище(Команды, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает структуру параметров подключаемых команд из реквизита формы и при необходимости создает 
// реквизит формы ПараметрыПодключаемыхКоманд
//
// Возвращаемое значение:
//  Структура:
//   * АдресТаблицыКоманд - Строка
Функция ПодключенныеКоманды(Форма)
	
	ЗначенияСвойств = Новый Структура("ПараметрыПодключаемыхКоманд", Null);
	ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Форма);

	Результат = ЗначенияСвойств.ПараметрыПодключаемыхКоманд;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Если Результат = Null Тогда
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыПодключаемыхКоманд", Новый ОписаниеТипов));
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("АдресТаблицыКоманд", Неопределено);
		
		Форма.ПараметрыПодключаемыхКоманд = Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает имя команды по имени группы и идентификатору, если имя не задано имя генерируется автоматически.
//
// Параметры:
//  Форма - Форма
//  ИмяГруппы - Строка
//  ИдентификаторКоманды - Строка
//  СчетчикКомандСАвтогенерируемымИменем - Число
//
// Возвращаемое значение:
//  Строка.
Функция ОпределитьИмяКоманды(Форма, ИмяГруппы, ИдентификаторКоманды, СчетчикКомандСАвтогенерируемымИменем)
	Если ИмяСоответствуетТребованиямИменованияСвойств(ИдентификаторКоманды) Тогда
		ИмяКоманды = ИмяГруппы + "_" + ИдентификаторКоманды;
	Иначе
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЕсли;
	Пока Форма.Элементы.Найти(ИмяКоманды) <> Неопределено
		Или Форма.Команды.Найти(ИмяКоманды) <> Неопределено Цикл
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЦикла;
	Возврат ИмяКоманды;
КонецФункции

Функция ИмяСоответствуетТребованиямИменованияСвойств(Имя)
	// АПК:163-выкл - особенности алгоритма
	Буквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	// АПК:163-вкл
	Цифры = "1234567890";
	
	Если Имя = "" Или СтрНайти(Буквы + "_", ВРег(Лев(Имя, 1))) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрРазделить(ВРег(Имя), Буквы + Цифры + "_", Ложь).Количество() = 0;
КонецФункции

// Возвращает вид объекта во множественном числе.
Функция ВидОбъектаМетаданныхВоМножественномЧисле(Знач Вид)
	Вид = ВРег(СокрЛП(Вид));
	Если Вид = "ПЛАНОБМЕНА" Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли Вид = "СПРАВОЧНИК" Тогда
		Возврат "Справочники";
	ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
		Возврат "Документы";
	ИначеЕсли Вид = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат "ЖурналыДокументов";
	ИначеЕсли Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат "Перечисления";
	ИначеЕсли Вид = "ОТЧЕТ" Тогда
		Возврат "Отчеты";
	ИначеЕсли Вид = "ОБРАБОТКА" Тогда
		Возврат "Обработки";
	ИначеЕсли Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат "ПланыВидовРасчета";
	ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Вид = "ПЕРЕРАСЧЕТ" Тогда
		Возврат "Перерасчеты";
	ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат "БизнесПроцессы";
	ИначеЕсли Вид = "ЗАДАЧА" Тогда
		Возврат "Задачи";
	ИначеЕсли Вид = "КОНСТАНТА" Тогда
		Возврат "Константы";
	ИначеЕсли Вид = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Возврат "Последовательности";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
