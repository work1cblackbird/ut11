#Область СлужебныйПрограммныйИнтерфейс

Функция ДанныеЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗ(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъект");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдрес");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдресСтрокой");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектИдентификатор");
	ДанныеЗаполнения.Вставить("ИдентификаторПроизводственнойЛинии");
	ДанныеЗаполнения.Вставить("СпособВводаВОборот");
	ДанныеЗаполнения.Вставить("СервисПровайдер");
	ДанныеЗаполнения.Вставить("GLNОрганизации");
	ДанныеЗаполнения.Вставить("НомерДоговораСОператором");
	ДанныеЗаполнения.Вставить("ДатаДоговораСОператором");
	ДанныеЗаполнения.Вставить("СпособПолучения");
	ДанныеЗаполнения.Вставить("ТипОплатыКодовМаркировки");
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                                    КАК Количество,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Организация                         КАК Организация,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ВидПродукции                        КАК ВидПродукции,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъект              КАК ПроизводственныйОбъект,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъектИдентификатор КАК ПроизводственныйОбъектИдентификатор,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъектАдрес         КАК ПроизводственныйОбъектАдрес,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПроизводственныйОбъектАдресСтрокой  КАК ПроизводственныйОбъектАдресСтрокой,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ИдентификаторПроизводственнойЛинии  КАК ИдентификаторПроизводственнойЛинии,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СпособВводаВОборот                  КАК СпособВводаВОборот,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.GLNОрганизации                      КАК GLNОрганизации,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.НомерДоговораСОператором            КАК НомерДоговораСОператором,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДатаДоговораСОператором             КАК ДатаДоговораСОператором,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СпособПолучения                     КАК СпособПолучения,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.СервисПровайдер                     КАК СервисПровайдер,
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ТипОплатыКодовМаркировки            КАК ТипОплатыКодовМаркировки
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
	|ГДЕ
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Организация = &Организация Или &БезУчетаОрганизации
	|	И ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация, ПроизводственныйОбъект",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"СпособВводаВОборот,
			|ПроизводственныйОбъектИдентификатор,
			|ПроизводственныйОбъектАдрес,
			|ПроизводственныйОбъектАдресСтрокой,
			|ИдентификаторПроизводственнойЛинии",
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ПоляЗаполнения = "СпособВводаВОборот, СервисПровайдер, ТипОплатыКодовМаркировки";
		
		Если ДанныеЗаполнения.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			ПоляЗаполнения = ПоляЗаполнения + ",
			|GLNОрганизации,
			|НомерДоговораСОператором,
			|ДатаДоговораСОператором,
			|ПроизводственныйОбъектАдрес,
			|ПроизводственныйОбъектАдресСтрокой,
			|СпособПолучения";
		КонецЕсли;
		
		ЗаполнитьПоСтатистике(
			ПоляЗаполнения,
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
	КонецЕсли;
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДанныеЗаполнения.ВидПродукции       = ВидыПродукцииУчета[0];
		ДанныеЗаполнения.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.Производство;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ТипОплатыКодовМаркировки)
		И ИнтеграцияИСМПКлиентСервер.ИспользуетсяТипОплатыКодовМаркировки(ДанныеЗаполнения.ВидПродукции, ДанныеЗаполнения.Организация) Тогда
		ДанныеЗаполнения.ТипОплатыКодовМаркировки = Перечисления.ТипыОплатыКодовМаркировкиСУЗ.ОплатаПоНанесению;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияМаркировкиТоваровИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъект");
	ДанныеЗаполнения.Вставить("Операция");
	ДанныеЗаполнения.Вставить("КодТаможенногоОргана");
	ДанныеЗаполнения.Вставить("ПринятоеРешение");
	ДанныеЗаполнения.Вставить("СтранаПроисхождения");
	ДанныеЗаполнения.Вставить("ИдентификаторПроизводственнойЛинии");
	ДанныеЗаполнения.Вставить("GLNОрганизации");
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                            КАК Количество,
	|	МаркировкаТоваровИСМП.Организация            КАК Организация,
	|	МаркировкаТоваровИСМП.Операция               КАК Операция,
	|	МаркировкаТоваровИСМП.ВидПродукции           КАК ВидПродукции,
	|	МаркировкаТоваровИСМП.ПроизводственныйОбъект КАК ПроизводственныйОбъект,
	|	МаркировкаТоваровИСМП.GLNОрганизации         КАК GLNОрганизации,
	|	МаркировкаТоваровИСМП.КодТаможенногоОргана               КАК КодТаможенногоОргана,
	|	МаркировкаТоваровИСМП.ПринятоеРешение                    КАК ПринятоеРешение,
	|	МаркировкаТоваровИСМП.СтранаПроисхождения                КАК СтранаПроисхождения,
	|	МаркировкаТоваровИСМП.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|ГДЕ
	|	МаркировкаТоваровИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И МаркировкаТоваровИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	МаркировкаТоваровИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация, ПроизводственныйОбъект",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"ИдентификаторПроизводственнойЛинии",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
		
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ПоляЗаполнения = "КодТаможенногоОргана, ПринятоеРешение, СтранаПроисхождения";
		
		Если ДанныеЗаполнения.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			ПоляЗаполнения = ПоляЗаполнения + ", GLNОрганизации";
		КонецЕсли;
		
		ЗаполнитьПоСтатистике(
			ПоляЗаполнения,
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
	КонецЕсли;
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП();
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				
				Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
					ДанныеЗаполнения.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
				ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
					ДанныеЗаполнения.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияСписанияКодовМаркировкиИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъект");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдрес");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектАдресСтрокой");
	ДанныеЗаполнения.Вставить("ПроизводственныйОбъектИдентификатор");
	ДанныеЗаполнения.Вставить("ИдентификаторПроизводственнойЛинии");
	ДанныеЗаполнения.Вставить("ПричинаСписания");
	ДанныеЗаполнения.Вставить("GLNОрганизации");
	ДанныеЗаполнения.Вставить("КодФИАС");
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                               КАК Количество,
	|	СписаниеКодовМаркировкиИСМП.Организация                         КАК Организация,
	|	СписаниеКодовМаркировкиИСМП.ВидПродукции                        КАК ВидПродукции,
	|	СписаниеКодовМаркировкиИСМП.ПричинаСписания                     КАК ПричинаСписания,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъект              КАК ПроизводственныйОбъект,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъектИдентификатор КАК ПроизводственныйОбъектИдентификатор,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъектАдрес         КАК ПроизводственныйОбъектАдрес,
	|	СписаниеКодовМаркировкиИСМП.ПроизводственныйОбъектАдресСтрокой  КАК ПроизводственныйОбъектАдресСтрокой,
	|	СписаниеКодовМаркировкиИСМП.ИдентификаторПроизводственнойЛинии  КАК ИдентификаторПроизводственнойЛинии,
	|	СписаниеКодовМаркировкиИСМП.GLNОрганизации                      КАК GLNОрганизации,
	|	СписаниеКодовМаркировкиИСМП.КодФИАС                             КАК КодФИАС
	|ИЗ
	|	Документ.СписаниеКодовМаркировкиИСМП КАК СписаниеКодовМаркировкиИСМП
	|ГДЕ
	|	СписаниеКодовМаркировкиИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И СписаниеКодовМаркировкиИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеКодовМаркировкиИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеЗаполнения.ВидПродукции) Тогда
		
		ЗаполнитьПоСтатистике(
			"ПроизводственныйОбъект,
			|ПроизводственныйОбъектИдентификатор,
			|ПроизводственныйОбъектАдрес,
			|ПроизводственныйОбъектАдресСтрокой,
			|ИдентификаторПроизводственнойЛинии",
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
		ЗаполнитьПоСтатистике(
			"ПричинаСписания",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
		
	ИначеЕсли ДанныеЗаполнения.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		
		ЗаполнитьПоСтатистике(
			"GLNОрганизации",
			ДанныеЗаполнения, ДанныеПоследнихДокументов,
			"ВидПродукции, Организация");
		
	Иначе
		
		ЗаполнитьПоСтатистике(
			"ПричинаСписания",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
		
		Если ДанныеЗаполнения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или ДанныеЗаполнения.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
			
			ЗаполнитьПоСтатистике(
				"ПроизводственныйОбъект,
				|ПроизводственныйОбъектИдентификатор,
				|ПроизводственныйОбъектАдрес,
				|ПроизводственныйОбъектАдресСтрокой",
				ДанныеЗаполнения, ДанныеПоследнихДокументов,
				"ВидПродукции, Организация");
			
			ЗаполнитьПоСтатистике(
				"КодФИАС",
				ДанныеЗаполнения, ДанныеПоследнихДокументов,
				"ВидПродукции, Организация, ПроизводственныйОбъектАдрес");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДанныеЗаполнения.ВидПродукции = ВидыПродукцииУчета[0];
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеЗаполнения.ВидПродукции) Тогда
			ДанныеЗаполнения.ПричинаСписания = Перечисления.ПричиныСписанияКодовМаркировкиИСМП.Испорчен;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияВыводаИзОборотаИСМП(Организация, ВидПродукции) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("Операция");
	ДанныеЗаполнения.Вставить("ВидПервичногоДокумента");
	ДанныеЗаполнения.Вставить("НаименованиеПервичногоДокумента");
	ДанныеЗаполнения.Вставить("АдресПлощадкиСтрокой");
	ДанныеЗаполнения.Вставить("АдресПлощадки");
	ДанныеЗаполнения.Вставить("Контрагент");
	ДанныеЗаполнения.Вставить("СтранаНазначения");
	ДанныеЗаполнения.Вставить("ВидПродукции", ВидПродукции);
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ДанныеЗаполнения.Вставить("ОбъемноСортовойУчет");
	КонецЕсли;
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                  КАК Количество,
	|	ВыводИзОборотаИСМП.Организация                     КАК Организация,
	|	ВыводИзОборотаИСМП.ВидПродукции                    КАК ВидПродукции,
	|	ВыводИзОборотаИСМП.Операция                        КАК Операция,
	|	ВыводИзОборотаИСМП.Контрагент                      КАК Контрагент,
	|	ВыводИзОборотаИСМП.СтранаНазначения                КАК СтранаНазначения,
	|	ВыводИзОборотаИСМП.ВидПервичногоДокумента          КАК ВидПервичногоДокумента,
	|	ВыводИзОборотаИСМП.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	ВыводИзОборотаИСМП.ОбъемноСортовойУчет             КАК ОбъемноСортовойУчет,
	|	ВыводИзОборотаИСМП.АдресПлощадкиСтрокой            КАК АдресПлощадкиСтрокой,
	|	ВыводИзОборотаИСМП.АдресПлощадки                   КАК АдресПлощадки
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК ВыводИзОборотаИСМП
	|ГДЕ
	|	(ВыводИзОборотаИСМП.Организация = &Организация Или &БезУчетаОрганизации)
	|	И (ВыводИзОборотаИСМП.ВидПродукции = &ВидПродукции Или &БезУчетаВидаПродукции)
	|	И ВыводИзОборотаИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ВыводИзОборотаИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации",   Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ВидПродукции",          ВидПродукции);
	Запрос.УстановитьПараметр("БезУчетаВидаПродукции", Не ЗначениеЗаполнено(ВидПродукции));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ЗаполнитьПоСтатистике(
			"Операция, Контрагент, СтранаНазначения, ОбъемноСортовойУчет",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
	Иначе
		ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
		ЗаполнитьПоСтатистике(
			"Операция, Контрагент, СтранаНазначения",
			ДанныеЗаполнения, ДанныеПоследнихДокументов);
	КонецЕсли;
	
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"ВидПервичногоДокумента, НаименованиеПервичногоДокумента",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"АдресПлощадкиСтрокой, АдресПлощадки",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП();
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияОтгрузкиТоваровИСМП(Организация, Контрагент = Неопределено) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("Операция");
	
	ДанныеЗаполнения.Вставить("ВидПродукции",     Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Контрагент",       ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("КонтрагентГосИС"));
	ДанныеЗаполнения.Вставить("GLNКонтрагента",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("GLN"));
	ДанныеЗаполнения.Вставить("СтранаНазначения", Справочники.СтраныМира.ПустаяСсылка());
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДоступныеВидыПродукцииИСМП = Документы.ОтгрузкаТоваровИСМП.ДоступныеВидыПродукцииИСМП();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                   КАК Количество,
	|	ОтгрузкаТоваровИСМП.Организация                     КАК Организация,
	|	ОтгрузкаТоваровИСМП.ВидПродукции                    КАК ВидПродукции,
	|	ОтгрузкаТоваровИСМП.Операция                        КАК Операция,
	|	ОтгрузкаТоваровИСМП.Контрагент                      КАК Контрагент,
	|	ОтгрузкаТоваровИСМП.GLNКонтрагента                  КАК GLNКонтрагента,
	|	ОтгрузкаТоваровИСМП.СтранаНазначения                КАК СтранаНазначения
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|ГДЕ
	|	ОтгрузкаТоваровИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ОтгрузкаТоваровИСМП.Проведен
	|	И ВЫБОР
	|		КОГДА &ОтборПоКонтрагенту
	|			ТОГДА ОтгрузкаТоваровИСМП.Контрагент = &Контрагент
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ОтгрузкаТоваровИСМП.ВидПродукции В (&ДоступныеВидыПродукции)
	|УПОРЯДОЧИТЬ ПО
	|	ОтгрузкаТоваровИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("Контрагент",             Контрагент);
	Запрос.УстановитьПараметр("БезУчетаОрганизации",    (Не ЗначениеЗаполнено(Организация) Или ЗначениеЗаполнено(Контрагент)));
	Запрос.УстановитьПараметр("ОтборПоКонтрагенту",     ЗначениеЗаполнено(Контрагент));
	Запрос.УстановитьПараметр("ДоступныеВидыПродукции", ДоступныеВидыПродукцииИСМП);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Контрагент, GLNКонтрагента",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"СтранаНазначения",
		ДанныеЗаполнения, ДанныеПоследнихДокументов, "ВидПродукции,Операция");
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ДоступныеВидыПродукцииИСМП;
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияВозвратаВОборотИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Операция");
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                               КАК Количество,
	|	ВозвратВОборотИСМП.Организация  КАК Организация,
	|	ВозвратВОборотИСМП.ВидПродукции КАК ВидПродукции,
	|	ВозвратВОборотИСМП.Операция     КАК Операция
	|ИЗ
	|	Документ.ВозвратВОборотИСМП КАК ВозвратВОборотИСМП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументов
	|			ПО СтатусыДокументов.Документ = ВозвратВОборотИСМП.Ссылка
	|			И (СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)
	|				ИЛИ СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы))
	|ГДЕ
	|	ВозвратВОборотИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ВозвратВОборотИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратВОборотИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Операция",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация",
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитВозвратуВОборот(ВидПродукцииУчета) Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияПеремаркировкиТоваровИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ТребуетсяИндивидуализацияКИЗ", Ложь);
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                               КАК Количество,
	|	ПеремаркировкаТоваровИСМП.Организация  КАК Организация,
	|	ПеремаркировкаТоваровИСМП.ВидПродукции КАК ВидПродукции,
	|	ПеремаркировкаТоваровИСМП.ТребуетсяИндивидуализацияКИЗ КАК ТребуетсяИндивидуализацияКИЗ
	|ИЗ
	|	Документ.ПеремаркировкаТоваровИСМП КАК ПеремаркировкаТоваровИСМП
	|ГДЕ
	|	ПеремаркировкаТоваровИСМП.Организация = &Организация Или &БезУчетаОрганизации
	|	И ПеремаркировкаТоваровИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ПеремаркировкаТоваровИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	ДанныеПоследнихДокументов = Запрос.Выполнить().Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ПоляЗаполнения = "Организация";
	
	Если ДанныеЗаполнения.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		ПоляЗаполнения = ПоляЗаполнения + ",
		|ТребуетсяИндивидуализацияКИЗ";
	КонецЕсли;
	
	ЗаполнитьПоСтатистике(
		ПоляЗаполнения,
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(,Ложь);
		Для Каждого ВидПродукцииУчета Из ВидыПродукцииУчета Цикл
			Если ДоступныеВидыПродукцииИС.Найти(ВидПродукцииУчета) <> Неопределено Тогда
				ДанныеЗаполнения.ВидПродукции = ВидПродукцииУчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияУточненияСведенийОКодахМаркировкиИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Операция");
	
	ВидыПродукцииУчета = Новый Массив;
	Для Каждого ВидПродукции Из Документы.УточнениеСведенийОКодахМаркировкиИСМП.ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки() Цикл
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
			ВидыПродукцииУчета.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                  КАК Количество,
	|	УточнениеСведенийОКодахМаркировкиИСМП.Организация  КАК Организация,
	|	УточнениеСведенийОКодахМаркировкиИСМП.ВидПродукции КАК ВидПродукции,
	|	УточнениеСведенийОКодахМаркировкиИСМП.Операция     КАК Операция
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК УточнениеСведенийОКодахМаркировкиИСМП
	|ГДЕ
	|	(УточнениеСведенийОКодахМаркировкиИСМП.Организация = &Организация Или &БезУчетаОрганизации)
	|	И УточнениеСведенийОКодахМаркировкиИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	УточнениеСведенийОКодахМаркировкиИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация, ВидПродукции, Операция", 
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДанныеЗаполнения.ВидПродукции = ВидыПродукцииУчета[0];
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияПодключениеКегаКОборудованиюРозливаИСМП(Организация, ПоТекущемуПользователю = Истина) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Подразделение");
	ДанныеЗаполнения.Вставить("Склад", );
	ДанныеЗаполнения.Вставить("АдресПодключения");
	ДанныеЗаполнения.Вставить("АдресПодключенияСтрокой");
	ДанныеЗаполнения.Вставить("КодФИАС");
	ДанныеЗаполнения.Вставить("ОбъемСлива");
	ДанныеЗаполнения.Вставить("Комментарий");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                               КАК Количество,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.Подразделение           КАК Подразделение,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.Склад                   КАК Склад,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.АдресПодключения        КАК АдресПодключения,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.Ответственный           КАК Ответственный,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.Комментарий             КАК Комментарий,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.АдресПодключенияСтрокой КАК АдресПодключенияСтрокой,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.ОбъемСлива              КАК ОбъемСлива,
	|	ПодключениеКегаКОборудованиюРозливаИСМП.КодФИАС                 КАК КодФИАС
	|ИЗ
	|	Документ.ПодключениеКегаКОборудованиюРозливаИСМП КАК ПодключениеКегаКОборудованиюРозливаИСМП
	|ГДЕ
	|	(ПодключениеКегаКОборудованиюРозливаИСМП.Организация = &Организация Или &БезУчетаОрганизации)
	|	И (ПодключениеКегаКОборудованиюРозливаИСМП.Ответственный = &Ответственный Или &БезУчетаОтветственного)
	|	И ПодключениеКегаКОборудованиюРозливаИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ПодключениеКегаКОборудованиюРозливаИСМП.Дата УБЫВ");
	
	ТекущийПользователь    = Пользователи.ТекущийПользователь();
	БезУчетаОтветственного = (Не ПоТекущемуПользователю Или ТекущийПользователь = Неопределено);
	
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации",    Не ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Ответственный",          ТекущийПользователь);
	Запрос.УстановитьПараметр("БезУчетаОтветственного", БезУчетаОтветственного);
	
	РезультатЗапроса          = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	Если ДанныеПоследнихДокументов.Количество() = 0 И Не БезУчетаОтветственного Тогда
		
		Возврат ДанныеЗаполненияПодключениеКегаКОборудованиюРозливаИСМП(Организация, Ложь);
		
	Иначе
		
		ЗаполнитьПоСтатистике(
			"Подразделение, Склад",
			ДанныеЗаполнения, ДанныеПоследнихДокументов, "");
		
		ЗаполнитьПоСтатистике(
			"АдресПодключения, АдресПодключенияСтрокой, КодФИАС",
			ДанныеЗаполнения, ДанныеПоследнихДокументов, "Подразделение, Склад");
		
		ЗаполнитьПоСтатистике(
			"ОбъемСлива",
			ДанныеЗаполнения, ДанныеПоследнихДокументов, "Подразделение, Склад, Комментарий");
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияОтчетИСМП(Организация) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация");
	ДанныеЗаполнения.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Операция");
	
	ВидыПродукцииУчета = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если ВидыПродукцииУчета.Количество() = 0 Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
	|	1                                                  КАК Количество,
	|	ОтчетИСМП.Организация  КАК Организация,
	|	ОтчетИСМП.ВидПродукции КАК ВидПродукции,
	|	ОтчетИСМП.Операция     КАК Операция
	|ИЗ
	|	Документ.ОтчетИСМП КАК ОтчетИСМП
	|ГДЕ
	|	(ОтчетИСМП.Организация = &Организация Или &БезУчетаОрганизации)
	|	И ОтчетИСМП.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетИСМП.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("БезУчетаОрганизации", Не ЗначениеЗаполнено(Организация));
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоследнихДокументов = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения.ВидПродукции = ВидПродукции(ДанныеПоследнихДокументов);
	
	ЗаполнитьПоСтатистике(
		"Организация, ВидПродукции, Операция", 
		ДанныеЗаполнения, ДанныеПоследнихДокументов);
	
	// Значения по-умолчанию
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ВидПродукции) Тогда
		ДанныеЗаполнения.ВидПродукции = ВидыПродукцииУчета[0];
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьПустойРеквизит(Объект, ДанныеСтатистики, ИмяРеквизита) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита])
		Или ТипЗнч(Объект[ИмяРеквизита]) = Тип("Булево") Тогда
		Объект[ИмяРеквизита] = ДанныеСтатистики[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДаннымиЗаполнения(ИсходныеДанные, ДанныеДляЗаполнения, ПоляИсключения = "") Экспорт

	Для Каждого СтрокаДанных Из ДанныеДляЗаполнения Цикл
		СтрокаТовары = ИсходныеДанные.Получить(СтрокаДанных.ИндексИсходнойСтроки);
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаДанных,, ПоляИсключения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ОбъектЗаполнения, МассивСтрок = Неопределено, Знач ДополнительныеПоляПоиска = "") Экспорт
	
	Если ТипЗнч(ОбъектЗаполнения) = Тип("ФормаКлиентскогоПриложения") Тогда
		ЗаполнятьРеквизитыФормы = Истина;
		Объект = ОбъектЗаполнения.Объект
	Иначе
		ЗаполнятьРеквизитыФормы = Ложь;
		Объект = ОбъектЗаполнения
	КонецЕсли;
	
	ВременнаяТаблица = Объект.Товары.Выгрузить(МассивСтрок);
	
	Если ВременнаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПоляПоиска) = Тип("Массив") Тогда
		ДополнительныеПоляПоискаСтрокой = СтрСоединить(ДополнительныеПоляПоиска, ",");
	Иначе
		ДополнительныеПоляПоискаСтрокой = ДополнительныеПоляПоиска;
		ДополнительныеПоляПоиска = СтрРазделить(ДополнительныеПоляПоискаСтрокой, ",", Ложь);
	КонецЕсли;
	
	ОбрабатыватьГрупповыеУпаковки = Ложь;
	ШаблоныГрупповойУпаковки      = Неопределено;
	ОбрабатыватьНаборы            = Ложь;
	ШаблоныНабора                 = Неопределено;
	Если ДополнительныеПоляПоиска.Найти("Шаблон") = Неопределено Тогда
		ОбрабатыватьГрупповыеУпаковки = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(Объект.ВидПродукции);
		Если ОбрабатыватьГрупповыеУпаковки Тогда
			ШаблоныГрупповойУпаковки = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 4);
		КонецЕсли;
		
		ОбрабатыватьНаборы = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(Объект.ВидПродукции);
		Если ОбрабатыватьНаборы Тогда
			ШаблоныНабора = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 5);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбрабатыватьНаборы
		И ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		И Объект.ДополнительныеСвойства.Свойство("ОбрабатыватьНаборы")
		И Не Объект.ДополнительныеСвойства.ОбрабатыватьНаборы Тогда
		ОбрабатыватьНаборы = Ложь;
	КонецЕсли;
	
	ТаблицаДанных = ДанныеЗаполненияТоварыЗаказаНаЭмиссиюСУЗ(
		ВременнаяТаблица, Объект, ДополнительныеПоляПоиска, ШаблоныГрупповойУпаковки, ШаблоныНабора);
	
	Если ОбрабатыватьГрупповыеУпаковки Тогда
		КоличествоПотребительскихУпаковокВГрупповойУпаковке = КоличествоПотребительскихУпаковокВГрупповойУпаковке(
			ТаблицаДанных, ШаблоныГрупповойУпаковки);
	КонецЕсли;
	
	СтрокиНаборов = Новый Массив;
	
	НомерСтроки = 0;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтрокаТовары = Объект.Товары[СтрокаДанных.НомерСтроки - 1];
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.НомерСтроки = НомерСтроки Тогда
			
			Если ОбрабатыватьГрупповыеУпаковки
				И ШаблонЕстьВСписке(СтрокаДанных.Шаблон, ШаблоныГрупповойУпаковки)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца)
				И ЗначениеЗаполнено(СтрокаТовары.Шаблон)
				И Не ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				
				СтруктураДанных = КоличествоПотребительскихУпаковокВГрупповойУпаковке[СтрокаДанных.GTIN];
				Если СтруктураДанных <> Неопределено
					И СтруктураДанных.КоличествоПотребительскихУпаковок > 1
					И СтрокаТовары.Количество >= СтруктураДанных.КоличествоПотребительскихУпаковок Тогда
					
					КоличествоГрупповыхУпаковок = Цел(СтрокаТовары.Количество / СтруктураДанных.КоличествоПотребительскихУпаковок);
					КоличествоВУпаковках = КоличествоГрупповыхУпаковок * СтруктураДанных.КоличествоПотребительскихУпаковок;
					КоличествоБезУпаковок = СтрокаТовары.Количество - КоличествоВУпаковках;
					
					ИдентификаторСтрокиВладельца = Новый УникальныйИдентификатор;
					
					СтрокаГрупповойУпаковки = Объект.Товары.Вставить(НомерСтроки - 1);
					ЗаполнитьЗначенияСвойств(СтрокаГрупповойУпаковки, СтрокаТовары);
					СтрокаГрупповойУпаковки.GTIN                         = СтрокаДанных.GTIN;
					СтрокаГрупповойУпаковки.Шаблон                       = СтрокаДанных.Шаблон;
					СтрокаГрупповойУпаковки.Количество                   = КоличествоГрупповыхУпаковок;
					СтрокаГрупповойУпаковки.КоличествоУпаковок           = КоличествоГрупповыхУпаковок;
					СтрокаГрупповойУпаковки.ИдентификаторСтроки          = ИдентификаторСтрокиВладельца;
					СтрокаГрупповойУпаковки.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
					Если ЗаполнятьРеквизитыФормы Тогда
						СтрокаГрупповойУпаковки.ЭтоГрупповаяУпаковка     = Истина;
					КонецЕсли;
					
					Если КоличествоБезУпаковок > 0 Тогда
						
						СтрокаСоставУпаковки = Объект.Товары.Вставить(НомерСтроки);
						ЗаполнитьЗначенияСвойств(СтрокаСоставУпаковки, СтрокаТовары);
						СтрокаСоставУпаковки.Количество                   = КоличествоВУпаковках;
						СтрокаСоставУпаковки.КоличествоУпаковок           = КоличествоВУпаковках;
						СтрокаСоставУпаковки.ИдентификаторСтроки          = "";
						СтрокаСоставУпаковки.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
						Если ЗаполнятьРеквизитыФормы Тогда
							СтрокаСоставУпаковки.ЭтоГрупповаяУпаковка     = Истина;
						КонецЕсли;
						
						СтрокаТовары.Количество         = КоличествоБезУпаковок;
						СтрокаТовары.КоличествоУпаковок = КоличествоБезУпаковок;
						
					Иначе
						
						СтрокаТовары.ИдентификаторСтроки          = "";
						СтрокаТовары.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
						Если ЗаполнятьРеквизитыФормы Тогда
							СтрокаТовары.ЭтоГрупповаяУпаковка     = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			НомерСтроки = СтрокаДанных.НомерСтроки;
			
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаДанных,, ДополнительныеПоляПоискаСтрокой);
			
			Если ОбрабатыватьНаборы
				И СтрокаДанных.ЕстьСоставляющие
				И ШаблонЕстьВСписке(СтрокаДанных.Шаблон, ШаблоныНабора)
				И Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца)
				И ЗначениеЗаполнено(СтрокаТовары.Шаблон)
				И ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныНабора) Тогда
				Если Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтроки) Тогда
					СтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				КонецЕсли;
				СтрокиНаборов.Добавить(СтрокаТовары);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(Объект.ВидПродукции);
		ЗаполнятьТоварныйЗнак = ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак;
	Иначе
		ЗаполнятьТоварныйЗнак = ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(Объект.ВидПродукции);
	КонецЕсли;
	
	Если ЗаполнятьТоварныйЗнак Тогда
		ДанныеТоварногоЗнака = Новый Соответствие;
		ИнтеграцияИСМППереопределяемый.ТоварныеЗнакиПоНоменклатуре(
			ВременнаяТаблица.ВыгрузитьКолонку("Номенклатура"),
			ДанныеТоварногоЗнака);
	КонецЕсли;
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(
		Объект.ВидПродукции, 0);
	
	ВсеДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(
		Объект.ВидПродукции, 3);
	
	Если МассивСтрок = Неопределено Тогда
		СтрокиТовары = Объект.Товары;
	Иначе
		СтрокиТовары = МассивСтрок;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из СтрокиТовары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Шаблон)
			И ВсеДоступныеШаблоны.НайтиПоЗначению(СтрокаТовары.Шаблон) = Неопределено Тогда
			СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Шаблон) Тогда
			Если ДоступныеШаблоны.Количество() = 1
				Или ((Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
						Или Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
					И ДоступныеШаблоны.НайтиПоЗначению(СтрокаТовары.Шаблон) = Неопределено) Тогда
				СтрокаТовары.Шаблон = ДоступныеШаблоны[0].Значение;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
				СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
				СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Антисептики Тогда
				СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
				СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС Тогда
				СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.МорепродуктыСтандартныйКМ;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.Мясо;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.РастительныеМасла Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатнаяПродукция Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.СтроительныеМатериалы Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ОтопительныеПриборы Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.КабельнаяПродукция Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МоторныеМасла Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Бакалея Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.Бакалея;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов;
				КонецЕсли;
			ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки Тогда
				Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ;
				Иначе
					СтрокаТовары.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнятьТоварныйЗнак
			И Не ЗначениеЗаполнено(СтрокаТовары.ТоварныйЗнак) Тогда
			СтрокаТовары.ТоварныйЗнак = ДанныеТоварногоЗнака[СтрокаТовары.Номенклатура];
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.СпособФормированияСерийногоНомера) Тогда
			СтрокаТовары.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗ.Автоматически;
			СтрокаТовары.СтатусУказанияСерии               = 2;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиНаборов.Количество() > 0 Тогда
		
		ДобавленныеСтроки = Новый Массив;
		
		ЗаполнитьСоставляющиеНаборов(ОбъектЗаполнения, СтрокиНаборов, ДобавленныеСтроки);
		
		Если ДобавленныеСтроки.Количество() > 0 Тогда
			ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ОбъектЗаполнения, ДобавленныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоТоварамОтгрузкиТоваровИСМП(ИсходныеДанные, Объект) Экспорт
	
	Если Объект.Операция <> Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
		И Объект.Операция <> Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = ИсходныеДанные;
	Иначе
		ВременнаяТаблица = ИсходныеДанные.Выгрузить(,
			"Номенклатура, Характеристика, GTIN");
	КонецЕсли;
	
	Если ВременнаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ВременнаяТаблица);
	
	ТаблицаДанных = ДанныеЗаполненияТоварыОтгрузкаТоваровИСМП(ВременнаяТаблица, Объект);
	
	ЗаполнитьТаблицуДаннымиЗаполнения(ИсходныеДанные, ТаблицаДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоТоварамВыводаИзОборотаИСМП(ИсходныеДанные, Объект) Экспорт
	
	Если Не Объект.ОбъемноСортовойУчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = ИсходныеДанные;
	Иначе
		ВременнаяТаблица = ИсходныеДанные.Выгрузить(,
			"Номенклатура, Характеристика, GTIN");
	КонецЕсли;
	
	Если ВременнаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ВременнаяТаблица);
	
	ТаблицаДанных = ДанныеЗаполненияТоварыВыводИзОборотаИСМП(ВременнаяТаблица, Объект);
	
	ЗаполнитьТаблицуДаннымиЗаполнения(ИсходныеДанные, ТаблицаДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоТоварамМаркировкиТоваровИСМП(ИсходныеДанные, Объект) Экспорт
	
	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
	Если Не ОперацииМаркировки.ЭтоВводВОборот Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = ИсходныеДанные;
	Иначе
		ВременнаяТаблица = ИсходныеДанные.Выгрузить(,
			"Номенклатура, Характеристика");
	КонецЕсли;
	
	Если ВременнаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ВременнаяТаблица);
	
	ТаблицаДанных = ДанныеЗаполненияТоварыМаркировкаТоваровИСМП(ВременнаяТаблица, Объект);
	
	ЗаполнитьТаблицуДаннымиЗаполнения(ИсходныеДанные, ТаблицаДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЗаполненияТоварыОтгрузкаТоваровИСМП(ИсходнаяТаблица, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.GTIN                 КАК GTIN
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	МАКСИМУМ(ОтгрузкаТоваровИСМПТовары.Ссылка.Дата) КАК Дата
		|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП.Товары КАК ОтгрузкаТоваровИСМПТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ОтгрузкаТоваровИСМПТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ОтгрузкаТоваровИСМПТовары.Характеристика
		|			И (ОтгрузкаТоваровИСМПТовары.Ссылка.Проведен)
		|			И (ОтгрузкаТоваровИСМПТовары.Ссылка.Организация = &Организация)
		|			И (ОтгрузкаТоваровИСМПТовары.Ссылка.Операция    = &Операция)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика,
		|	ОтгрузкаТоваровИСМПТовары.Ссылка.Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Дата
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	&ДополнительныеПоля
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП.Товары КАК ДокументыПоНоменклатуре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
		|			ПО ДокументыПоНоменклатуре.Номенклатура      = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
		|				И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
		|				И ДокументыПоНоменклатуре.Ссылка.Дата           = ГруппировкаПоМаксимальнойДатеДокумента.Дата
		|		ПО ВременнаяТаблицаТовары.Номенклатура      = ДокументыПоНоменклатуре.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
		|			И (ДокументыПоНоменклатуре.Ссылка.Проведен)
		|			И (ДокументыПоНоменклатуре.Ссылка.Организация = &Организация)
		|			И (ДокументыПоНоменклатуре.Ссылка.Операция    = &Операция)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Характеристика,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	&ПоляГруппировки";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Операция",      Объект.Операция);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ВидДокументаСертификации");
	МассивПолей.Добавить("НомерДокументаСертификации");
	МассивПолей.Добавить("ДатаДокументаСертификации");
	МассивПолей.Добавить("Импортер");
	МассивПолей.Добавить("РегистрационныйНомерДекларации");
	МассивПолей.Добавить("ДатаДекларации");
	МассивПолей.Добавить("Производитель");
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
		МассивПолей.Добавить("GTIN");
	КонецЕсли;
	
	ДополнительныеПоля            = Новый Массив;
	ДополнительныеПоляГруппировки = Новый Массив;
	
	Для Каждого СтрокаПоле Из МассивПолей Цикл
		ДополнительныеПоля.Добавить(СтрШаблон("ДокументыПоНоменклатуре.%1 КАК %1", СтрокаПоле));
		ДополнительныеПоляГруппировки.Добавить(СтрШаблон("ДокументыПоНоменклатуре.%1", СтрокаПоле));
	КонецЦикла;
	
	Разделитель = "," + Символы.ПС;
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ДополнительныеПоля",
		СтрСоединить(ДополнительныеПоля, Разделитель));
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ПоляГруппировки",
		СтрСоединить(ДополнительныеПоляГруппировки, Разделитель));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеЗаполненияТоварыВыводИзОборотаИСМП(ИсходнаяТаблица, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.GTIN                 КАК GTIN
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВыводИзОборотаИСМПТовары.GTIN               КАК GTIN,
		|	ВыводИзОборотаИСМПТовары.Ссылка             КАК Ссылка,
		|	ВыводИзОборотаИСМПТовары.Ссылка.Дата        КАК Дата
		|ПОМЕСТИТЬ ДокументыПоНоменклатуре
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.Товары КАК ВыводИзОборотаИСМПТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ВыводИзОборотаИСМПТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ВыводИзОборотаИСМПТовары.Характеристика
		|			И (ВыводИзОборотаИСМПТовары.Ссылка.Проведен)
		|			И (ВыводИзОборотаИСМПТовары.Ссылка.Организация = &Организация)
		|			И (ВыводИзОборотаИСМПТовары.Ссылка.ОбъемноСортовойУчет)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика,
		|	ВыводИзОборотаИСМПТовары.GTIN,
		|	ВыводИзОборотаИСМПТовары.Ссылка,
		|	ВыводИзОборотаИСМПТовары.Ссылка.Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	Номенклатура,
		|	Характеристика,
		|	GTIN
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПоНоменклатуре.Номенклатура   КАК Номенклатура,
		|	ДокументыПоНоменклатуре.Характеристика КАК Характеристика,
		|	ДокументыПоНоменклатуре.GTIN           КАК GTIN,
		|	МАКСИМУМ(ДокументыПоНоменклатуре.Дата) КАК Дата
		|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
		|ИЗ
		|	ДокументыПоНоменклатуре КАК ДокументыПоНоменклатуре
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыПоНоменклатуре.Номенклатура,
		|	ДокументыПоНоменклатуре.Характеристика,
		|	ДокументыПоНоменклатуре.GTIN
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата,
		|	Номенклатура,
		|	Характеристика,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ДокументыПоНоменклатуре.GTIN                КАК GTIN
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоНоменклатуре КАК ДокументыПоНоменклатуре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
		|			ПО ДокументыПоНоменклатуре.Номенклатура      = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
		|				И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
		|				И ДокументыПоНоменклатуре.Дата           = ГруппировкаПоМаксимальнойДатеДокумента.Дата
		|		ПО ВременнаяТаблицаТовары.Номенклатура      = ДокументыПоНоменклатуре.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеЗаполненияТоварыМаркировкаТоваровИСМП(ИсходнаяТаблица, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	МАКСИМУМ(МаркировкаТоваровИСМПТовары.Ссылка.Дата)     КАК Дата
		|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП.Товары КАК МаркировкаТоваровИСМПТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура = МаркировкаТоваровИСМПТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МаркировкаТоваровИСМПТовары.Характеристика
		|			И (МаркировкаТоваровИСМПТовары.Ссылка.Проведен)
		|			И (МаркировкаТоваровИСМПТовары.Ссылка.Организация = &Организация)
		|			И (МаркировкаТоваровИСМПТовары.Ссылка.Операция    = &Операция)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Дата
		|	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ДокументыПоНоменклатуре.ВидДокументаСертификации     КАК ВидДокументаСертификации,
		|	ДокументыПоНоменклатуре.НомерДокументаСертификации   КАК НомерДокументаСертификации,
		|	ДокументыПоНоменклатуре.ДатаДокументаСертификации    КАК ДатаДокументаСертификации,
		|	ДокументыПоНоменклатуре.НомерСкважины                КАК НомерСкважины,
		|	ДокументыПоНоменклатуре.НомерЛицензииНаПользованиеНедрами КАК НомерЛицензииНаПользованиеНедрами,
		|	ДокументыПоНоменклатуре.ДатаЛицензииНаПользованиеНедрами  КАК ДатаЛицензииНаПользованиеНедрами,
		|	ДокументыПоНоменклатуре.КемВыданПаспортСоответствия КАК КемВыданПаспортСоответствия,
		|	ДокументыПоНоменклатуре.НомерПаспортаСоответствия   КАК НомерПаспортаСоответствия,
		|	ДокументыПоНоменклатуре.ДатаПаспортаСоответствия    КАК ДатаПаспортаСоответствия
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП.Товары КАК ДокументыПоНоменклатуре
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
		|			ПО ДокументыПоНоменклатуре.Номенклатура      = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
		|				И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
		|				И ДокументыПоНоменклатуре.Ссылка.Дата           = ГруппировкаПоМаксимальнойДатеДокумента.Дата
		|		ПО ВременнаяТаблицаТовары.Номенклатура      = ДокументыПоНоменклатуре.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
		|			И (ДокументыПоНоменклатуре.Ссылка.Проведен)
		|			И (ДокументыПоНоменклатуре.Ссылка.Организация = &Организация)
		|			И (ДокументыПоНоменклатуре.Ссылка.Операция    = &Операция)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыПоНоменклатуре.ВидДокументаСертификации,
		|	ДокументыПоНоменклатуре.НомерСкважины,
		|	ДокументыПоНоменклатуре.ДатаДокументаСертификации,
		|	ВременнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ВременнаяТаблицаТовары.Характеристика,
		|	ДокументыПоНоменклатуре.НомерДокументаСертификации,
		|	ВременнаяТаблицаТовары.Номенклатура,
		|	ДокументыПоНоменклатуре.НомерЛицензииНаПользованиеНедрами,
		|	ДокументыПоНоменклатуре.ДатаЛицензииНаПользованиеНедрами,
		|	ДокументыПоНоменклатуре.КемВыданПаспортСоответствия,
		|	ДокументыПоНоменклатуре.НомерПаспортаСоответствия,
		|	ДокументыПоНоменклатуре.ДатаПаспортаСоответствия";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("Операция",      Объект.Операция);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПронумероватьИсходнуюТаблицуДанныхЗаполнения(ИсходнаяТаблица, ПолеОтслеживанияНовойСтроки = Неопределено) Экспорт
	
	Если ИсходнаяТаблица.Колонки.Найти("ИндексИсходнойСтроки") = Неопределено Тогда
		ИсходнаяТаблица.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		СтрокаТаблицы.ИндексИсходнойСтроки = ИсходнаяТаблица.Индекс(СтрокаТаблицы);
		Если ЗначениеЗаполнено(ПолеОтслеживанияНовойСтроки)
			И ЗначениеЗаполнено(СтрокаТаблицы[ПолеОтслеживанияНовойСтроки]) Тогда
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		ИсходнаяТаблица.Удалить(ИсходнаяТаблица.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗаполненияТоварыЗаказаНаЭмиссиюСУЗ(ИсходнаяТаблица, Объект, МассивПолейСвязи, ШаблоныГрупповойУпаковки, ШаблоныНабора)
	
	Запрос = Новый Запрос;
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		
		Запрос.Текст = ТекстЗапросаЗаполненияТоварыЗаказаНаЭмиссиюСУЗМаркировкаОстатков();
		
	Иначе
		
		Запрос.Текст = ТекстЗапросаЗаполненияТоварыЗаказаНаЭмиссиюСУЗ();
		
		ВозможныеGTIN = Новый Соответствие;
		ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(
			ИсходнаяТаблица, Новый Массив, ВозможныеGTIN, Ложь);
		
		ТаблицаВозможныхGTIN = ИсходнаяТаблица.СкопироватьКолонки("Номенклатура, Характеристика, GTIN");
		Для Каждого КлючИЗначение Из ВозможныеGTIN Цикл
			НоваяСтрока = ТаблицаВозможныхGTIN.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
			НоваяСтрока.GTIN = КлючИЗначение.Ключ;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаВозможныхGTIN", ТаблицаВозможныхGTIN);
		
	КонецЕсли;

	ПоляСвязи = "";
	Если МассивПолейСвязи.Количество() > 0 Тогда
		Для Каждого ПолеСвязи Из МассивПолейСвязи Цикл
			ПоляСвязи = ПоляСвязи + СтрШаблон(
				" И ВременнаяТаблицаТовары.%1 = ДокументыПоНоменклатуре.%1",
				СокрЛП(ПолеСвязи));
		КонецЦикла;
	КонецЕсли;
	
	ПоляУпорядочивания = "НомерСтроки УБЫВ";
	
	ШаблоныУпаковок = Новый Массив;
	Если ШаблоныГрупповойУпаковки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШаблоныУпаковок, ШаблоныГрупповойУпаковки.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ШаблоныНабора <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШаблоныУпаковок, ШаблоныНабора.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ШаблоныУпаковок.Количество() > 0 Тогда
		ПоляУпорядочивания = ПоляУпорядочивания + ", ВЫБОР КОГДА ДокументыПоНоменклатуре.Шаблон В (&ШаблоныУпаковок) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
		Запрос.УстановитьПараметр("ШаблоныУпаковок", ШаблоныУпаковок);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ПоляСвязи", ПоляСвязи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляУпорядочивания", ПоляУпорядочивания);
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ИсходнаяТаблица);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("ВидПродукции",  Объект.ВидПродукции);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстЗапросаЗаполненияТоварыЗаказаНаЭмиссиюСУЗ()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.GTIN КАК GTIN,
	|	ТаблицаТовары.Шаблон КАК Шаблон
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозможныхGTIN.Номенклатура КАК Номенклатура,
	|	ТаблицаВозможныхGTIN.Характеристика КАК Характеристика,
	|	ТаблицаВозможныхGTIN.GTIN КАК GTIN
	|ПОМЕСТИТЬ ТаблицаВозможныхGTIN
	|ИЗ
	|	&ТаблицаВозможныхGTIN КАК ТаблицаВозможныхGTIN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ДокументыПоНоменклатуре.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ДокументыПоНоменклатуре
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ДокументыПоНоменклатуре.Номенклатура
	|		И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
	|		И &ПоляСвязи
	|		И ДокументыПоНоменклатуре.Ссылка.Проведен
	|		И ДокументыПоНоменклатуре.Ссылка.Организация = &Организация
	|		И ДокументыПоНоменклатуре.Ссылка.ВидПродукции = &ВидПродукции
	|		И ДокументыПоНоменклатуре.Ссылка.СпособВводаВОборот <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВозможныхGTIN КАК ТаблицаВозможныхGTIN
	|		ПО ТаблицаВозможныхGTIN.Номенклатура = ДокументыПоНоменклатуре.Номенклатура
	|		И ТаблицаВозможныхGTIN.Характеристика = ДокументыПоНоменклатуре.Характеристика
	|		И ТаблицаВозможныхGTIN.GTIN = ДокументыПоНоменклатуре.GTIN
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументов
	|			ПО СтатусыДокументов.Документ = ДокументыПоНоменклатуре.Ссылка
	|			И (СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)
	|				ИЛИ СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы))
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                     КАК Характеристика,
	|	ДокументыПоНоменклатуре.Шаблон                            КАК Шаблон,
	|	ДокументыПоНоменклатуре.ТоварныйЗнак                      КАК ТоварныйЗнак,
	|	ДокументыПоНоменклатуре.СпособВводаВОборот                КАК СпособВводаВОборот,
	|	ДокументыПоНоменклатуре.ВидКИЗ                            КАК ВидКИЗ,
	|	ДокументыПоНоменклатуре.РазмерКИЗ                         КАК РазмерКИЗ,
	|	ДокументыПоНоменклатуре.GTIN                              КАК GTIN,
	|	ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	ДокументыПоНоменклатуре.ИдентификаторСтроки = ДокументыПоНоменклатуре.ИдентификаторСтрокиВладельца КАК ЕстьСоставляющие,
	|	ВЫБОР
	|		КОГДА
	|			ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)
	|			ТОГДА 2
	|		ИНАЧЕ ДокументыПоНоменклатуре.СтатусУказанияСерии
	|	КОНЕЦ КАК СтатусУказанияСерии
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ДокументыПоНоменклатуре
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
	|			ПО ДокументыПоНоменклатуре.Номенклатура = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
	|			И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
	|			И ДокументыПоНоменклатуре.Ссылка.Дата = ГруппировкаПоМаксимальнойДатеДокумента.Дата
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументов
	|				ПО СтатусыДокументов.Документ = ДокументыПоНоменклатуре.Ссылка
	|				И (СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)
	|					ИЛИ СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы))
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ДокументыПоНоменклатуре.Номенклатура
	|		И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
	|		И &ПоляСвязи
	|		И ДокументыПоНоменклатуре.Ссылка.Проведен
	|		И ДокументыПоНоменклатуре.Ссылка.Организация = &Организация
	|		И ДокументыПоНоменклатуре.Ссылка.СпособВводаВОборот <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ДокументыПоНоменклатуре.Шаблон,
	|	ДокументыПоНоменклатуре.ТоварныйЗнак,
	|	ДокументыПоНоменклатуре.СпособВводаВОборот,
	|	ДокументыПоНоменклатуре.ВидКИЗ,
	|	ДокументыПоНоменклатуре.РазмерКИЗ,
	|	ДокументыПоНоменклатуре.GTIN,
	|	ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера,
	|	ДокументыПоНоменклатуре.СтатусУказанияСерии,
	|	ДокументыПоНоменклатуре.ИдентификаторСтроки,
	|	ДокументыПоНоменклатуре.ИдентификаторСтрокиВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	&ПоляУпорядочивания";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияТоварыЗаказаНаЭмиссиюСУЗМаркировкаОстатков()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.GTIN                 КАК GTIN,
	|	ТаблицаТовары.Шаблон               КАК Шаблон,
	|	ТаблицаТовары.СпособВводаВОборот   КАК СпособВводаВОборот,
	|	ТаблицаТовары.Модель               КАК Модель,
	|	ТаблицаТовары.ЦелевойПол           КАК ЦелевойПол,
	|	ТаблицаТовары.ТоварныйЗнак         КАК ТоварныйЗнак,
	|	ТаблицаТовары.ВозрастнаяКатегория  КАК ВозрастнаяКатегория
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
	|	МАКСИМУМ(ДокументыПоНоменклатуре.Ссылка.Дата) КАК Дата
	|ПОМЕСТИТЬ ГруппировкаПоМаксимальнойДатеДокумента
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ДокументыПоНоменклатуре
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ДокументыПоНоменклатуре.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
	|			И &ПоляСвязи
	|			И (ДокументыПоНоменклатуре.Ссылка.Проведен)
	|			И (ДокументыПоНоменклатуре.Ссылка.Организация = &Организация)
	|			И (ДокументыПоНоменклатуре.Ссылка.ВидПродукции = &ВидПродукции)
	|			И (ДокументыПоНоменклатуре.Ссылка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументов
	|			ПО СтатусыДокументов.Документ = ДокументыПоНоменклатуре.Ссылка
	|			И (СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)
	|				ИЛИ СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                     КАК Характеристика,
	|	ДокументыПоНоменклатуре.GTIN                              КАК GTIN,
	|	ДокументыПоНоменклатуре.Шаблон                            КАК Шаблон,
	|	ДокументыПоНоменклатуре.ЦелевойПол                        КАК ЦелевойПол,
	|	ДокументыПоНоменклатуре.Модель                            КАК Модель,
	|	ДокументыПоНоменклатуре.ТоварныйЗнак                      КАК ТоварныйЗнак,
	|	ДокументыПоНоменклатуре.ВозрастнаяКатегория               КАК ВозрастнаяКатегория,
	|	ДокументыПоНоменклатуре.СпособВводаВОборот                КАК СпособВводаВОборот,
	|	ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	ДокументыПоНоменклатуре.ИдентификаторСтроки = ДокументыПоНоменклатуре.ИдентификаторСтрокиВладельца КАК ЕстьСоставляющие,
	|	ВЫБОР
	|		КОГДА ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически)
	|			ТОГДА 2
	|			ИНАЧЕ ДокументыПоНоменклатуре.СтатусУказанияСерии
	|	КОНЕЦ КАК СтатусУказанияСерии
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ДокументыПоНоменклатуре
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаПоМаксимальнойДатеДокумента КАК ГруппировкаПоМаксимальнойДатеДокумента
	|			ПО ДокументыПоНоменклатуре.Номенклатура      = ГруппировкаПоМаксимальнойДатеДокумента.Номенклатура
	|				И ДокументыПоНоменклатуре.Характеристика = ГруппировкаПоМаксимальнойДатеДокумента.Характеристика
	|				И ДокументыПоНоменклатуре.Ссылка.Дата    = ГруппировкаПоМаксимальнойДатеДокумента.Дата
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументов
	|				ПО СтатусыДокументов.Документ = ДокументыПоНоменклатуре.Ссылка
	|				И (СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы)
	|					ИЛИ СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ЦЭМКодыМаркировкиЭмитированы))
	|		ПО ВременнаяТаблицаТовары.Номенклатура      = ДокументыПоНоменклатуре.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ДокументыПоНоменклатуре.Характеристика
	|			И &ПоляСвязи
	|			И (ДокументыПоНоменклатуре.Ссылка.Проведен)
	|			И (ДокументыПоНоменклатуре.Ссылка.Организация = &Организация)
	|			И (ДокументыПоНоменклатуре.Ссылка.СпособВводаВОборот = ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ДокументыПоНоменклатуре.GTIN,
	|	ДокументыПоНоменклатуре.Шаблон,
	|	ДокументыПоНоменклатуре.ЦелевойПол,
	|	ДокументыПоНоменклатуре.Модель,
	|	ДокументыПоНоменклатуре.ТоварныйЗнак,
	|	ДокументыПоНоменклатуре.ВозрастнаяКатегория,
	|	ДокументыПоНоменклатуре.СпособВводаВОборот,
	|	ДокументыПоНоменклатуре.СпособФормированияСерийногоНомера,
	|	ДокументыПоНоменклатуре.СтатусУказанияСерии,
	|	ДокументыПоНоменклатуре.ИдентификаторСтроки,
	|	ДокументыПоНоменклатуре.ИдентификаторСтрокиВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	&ПоляУпорядочивания
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ШаблонЕстьВСписке(Шаблон, СписокШаблонов)
	
	Возврат СписокШаблонов <> Неопределено И СписокШаблонов.НайтиПоЗначению(Шаблон) <> Неопределено;
	
КонецФункции

Функция КоличествоПотребительскихУпаковокВГрупповойУпаковке(ТаблицаДанных, ШаблоныГрупповойУпаковки)
	
	Данные = Новый Соответствие;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или Не ШаблонЕстьВСписке(СтрокаДанных.Шаблон, ШаблоныГрупповойУпаковки)
			Или Не ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Номенклатура",                      СтрокаДанных.Номенклатура);
		СтруктураДанных.Вставить("Характеристика",                    СтрокаДанных.Характеристика);
		СтруктураДанных.Вставить("КоличествоПотребительскихУпаковок", 1);
		Данные.Вставить(СтрокаДанных.GTIN, СтруктураДанных);
	КонецЦикла;

	ИнтеграцияИСМП.ЗаполнитьКоличествоПотребительскихУпаковокПоGTIN(Данные, Истина, Ложь);
	
	Возврат Данные;
	
КонецФункции

Процедура ЗаполнитьСоставляющиеНаборов(ОбъектЗаполнения, МассивСтрок, ДобавленныеСтроки)
	
	КомплектующиеНаборов = ИнтеграцияИСМП.КомплектующиеНаборов(МассивСтрок);
	Если КомплектующиеНаборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектЗаполнения) = Тип("ФормаКлиентскогоПриложения") Тогда
		ЗаполнятьРеквизитыФормы = Истина;
		Объект = ОбъектЗаполнения.Объект
	Иначе
		ЗаполнятьРеквизитыФормы = Ложь;
		Объект = ОбъектЗаполнения
	КонецЕсли;
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 0);
	Если ДоступныеШаблоны.Количество() = 1 Тогда
		ШаблонПотребительскойУпаковки = ДоступныеШаблоны[0].Значение;
	Иначе
		ШаблонПотребительскойУпаковки = Неопределено;
	КонецЕсли;
	
	НомерСтрокиНабора = 0;
	НомерСтроки       = 0;
	Для Каждого КомплектующаяНабора Из КомплектующиеНаборов Цикл
		
		Если КомплектующаяНабора.НомерСтрокиНабора <> НомерСтрокиНабора Тогда
			НомерСтрокиНабора = КомплектующаяНабора.НомерСтрокиНабора;
			НомерСтроки       = НомерСтрокиНабора;
			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			ИдентификаторСтрокиВладельца = ТекущаяСтрока.ИдентификаторСтроки;
			ТекущаяСтрока.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
			Если ЗаполнятьРеквизитыФормы Тогда
				ТекущаяСтрока.ЭтоНабор = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Товары.Вставить(НомерСтроки);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КомплектующаяНабора);
		ТекущаяСтрока.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
		
		Если ЗаполнятьРеквизитыФормы Тогда
			СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(ОбъектЗаполнения, ТекущаяСтрока, Неопределено);
			ТекущаяСтрока.ЭтоНабор = Истина;
		КонецЕсли;
		
		Если КомплектующаяНабора.Номенклатура = КомплектующаяНабора.НоменклатураНабора
			И КомплектующаяНабора.Характеристика = КомплектующаяНабора.ХарактеристикаНабора
			И ШаблонПотребительскойУпаковки <> Неопределено Тогда
			ТекущаяСтрока.Шаблон = ШаблонПотребительскойУпаковки;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ДобавленныеСтроки.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидПродукции(ДанныеПоследнихДокументов)
	
	ДанныеАнализа = ДанныеПоследнихДокументов.Скопировать(,"ВидПродукции, Количество");
	ДанныеАнализа.Свернуть("ВидПродукции", "Количество");
	ДанныеАнализа.Сортировать("Количество Убыв");
	Если ДанныеАнализа.Количество() > 0 Тогда
		ВидПродукции = ДанныеАнализа[0].ВидПродукции;
	КонецЕсли;
	
	Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
		ВидПродукции = Неопределено;
	КонецЕсли;
	
	Возврат ВидПродукции;
	
КонецФункции

Процедура ЗаполнитьПоСтатистике(Поля, ДанныеЗаполнения, ДанныеПоследнихДокументов, ПоляОтбора = "ВидПродукции")
	
	Отбор = Новый Структура;
	ОтбираемыеПоля = СтрРазделить(ПоляОтбора, ",", Ложь);
		
	Для каждого ПолеОтбора из ОтбираемыеПоля Цикл
		ИмяПоля = СокрЛП(ПолеОтбора);
		Если ДанныеЗаполнения[ИмяПоля] <> Неопределено Тогда
			Отбор.Вставить(ИмяПоля, ДанныеЗаполнения[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Отбор = Неопределено;
	КонецЕсли;
	
	ЗаполняемыеПоля = СтрРазделить(Поля, ",");
	
	РезультатыАнализа = ДанныеПоследнихДокументов.Скопировать(
		Отбор, Поля + ", Количество");
	
	РезультатыАнализа.Свернуть(Поля, "Количество");
	РезультатыАнализа.Сортировать("Количество Убыв");
	Если РезультатыАнализа.Количество() > 0 Тогда
		Для Каждого Поле Из ЗаполняемыеПоля Цикл
			ИмяПоля = СокрЛП(Поле);
			ДанныеЗаполнения[ИмяПоля] = РезультатыАнализа[0][ИмяПоля];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
