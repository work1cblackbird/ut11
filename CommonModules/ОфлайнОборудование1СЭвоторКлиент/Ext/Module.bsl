////////////////////////////////////////////////////////////////////////////////
// Подсистема "Офлайн-оборудование".
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//  Параметры: 
//  ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения для выполнения.
//  Команда - Строка - НаименованиеКоманды.
//  ВходныеПараметры - Структура - ВыходныеПараметрыФункции.
//  ОбъектДрайвера - СправочникСсылка.ОфлайнОборудование - Объект драйвера торгового оборудования.
//  Параметры - Структура - Параметры устройства.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, ОбъектДрайвера, Параметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	Если Команда = "ЗагрузитьМагазины" Тогда
		НачатьЗагрузкуМагазинов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ЗагрузитьТерминалы" Тогда
		НачатьЗагрузкуТерминалов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ЗагрузитьСотрудников" Тогда
		НачатьЗагрузкуСотрудников(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ЗагрузитьТовары" Тогда
		НачатьЗагрузкуТоваров(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ЗагрузитьДанные" Тогда
		НачатьЗагрузкуДокументов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ВыгрузитьДанные" Тогда
		НачатьПередачуТоваров(ОповещениеПриЗавершении, Параметры, ВходныеПараметры.ДанныеДляВыгрузки.ПрайсЛист, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		НачатьУдалениеТоваров(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	ИначеЕсли Команда = "УстановитьФлагДанныеЗагружены" Тогда
		НачатьУстановкуФлагаДанныеЗагружены(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АсинхронныеКоманды

// Функция осуществляет загрузку магазинов из облака Эвотор
//
Процедура НачатьЗагрузкуМагазинов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗапроса = Новый Структура;
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьЗагрузкуМагазинов(Параметры, РезультатЗапроса, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, РезультатЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку терминалов из облака Эвотор
//
Процедура НачатьЗагрузкуТерминалов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗапроса = Новый Структура;
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьЗагрузкуТерминалов(Параметры, РезультатЗапроса, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, РезультатЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку сотрудников из облака Эвотор
//
Процедура НачатьЗагрузкуСотрудников(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗапроса = Новый Структура;
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьЗагрузкуСотрудников(Параметры, РезультатЗапроса, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, РезультатЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку товаров из облака Эвотор
//
Процедура НачатьЗагрузкуТоваров(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗапроса = Новый Структура;
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьЗагрузкуТоваров(Параметры, РезультатЗапроса, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, РезультатЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку документов из облака Эвотор
//
Процедура НачатьЗагрузкуДокументов(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗапроса = Новый Структура;
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	
	Если НЕ Параметры.ПериодИзмененВручную Тогда
		ОфлайнОборудование1СЭвоторВызовСервера.ПолучитьДатуПоследнейЗагрузки(Параметры);
	КонецЕсли;
	
	Параметры.Вставить("ПериодНачалоВыгрузки");
	Параметры.Вставить("ПериодОкончаниеВыгрузки");
	Параметры.Вставить("ТипыДокументов", "SELL,PAYBACK,CASH_INCOME,CASH_OUTCOME,OPEN_SESSION,CLOSE_SESSION, OPEN_TARE");
	ДатаНачалаВыгрузки    = Параметры.ДатаНачала;
	ДатаОкончанияВыгрузки = Дата('00010101');
	МассивДокументов = Новый Массив;
	
	Пока ДатаОкончанияВыгрузки < Параметры.ДатаОкончания Цикл
		ДатаОкончанияВыгрузки = ДатаНачалаВыгрузки + 30*86400;
		Если ДатаОкончанияВыгрузки > Параметры.ДатаОкончания Тогда
			ДатаОкончанияВыгрузки = Параметры.ДатаОкончания
		КонецЕсли;
		Параметры.ПериодНачалоВыгрузки    = ДатаНачалаВыгрузки;
		Параметры.ПериодОкончаниеВыгрузки = ДатаОкончанияВыгрузки;
		ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьЗагрузкуСпискаДокументов(Параметры, РезультатЗапроса, ЕстьОшибки, СообщениеОбОшибке, Истина);
		ДополнитьМассив(МассивДокументов, РезультатЗапроса);
		ДатаНачалаВыгрузки = ДатаОкончанияВыгрузки;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		ДатаСмены = Неопределено;
		Если Параметры.Свойство("ИспользоватьФорматЗагрузкиВ2") И Параметры.ИспользоватьФорматЗагрузкиВ2 Тогда
			ДокументыЭвотор = ОбработатьСписокДокументов(МассивДокументов, ДатаСмены, ЕстьОшибки, СообщениеОбОшибке);
		Иначе
			ДокументыЭвотор = ОбработатьСписокДокументовФормат10(МассивДокументов, ДатаСмены, ЕстьОшибки, СообщениеОбОшибке);
		КонецЕсли;
		Если ЕстьОшибки Тогда
			СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Иначе
			Результат = ОфлайнОборудование1СЭвоторВызовСервера.ЗаполнитьДатуПоследнейПопыткиЗагрузки(Параметры, ДатаСмены);
			Если Не Результат Тогда
				СообщениеОбОшибке = НСтр("ru = 'При записи данных произошла ошибка'");
				СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
				РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			Иначе
				РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ДокументыЭвотор);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет выгрузку товаров в облако Эвотор
//
Процедура НачатьПередачуТоваров(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	СообщениеОбОшибке = "";
	
	ЕстьОшибки = Ложь;
	Товары = ПодготовитьСписокТоваровКОтправке(ВходныеПараметры);
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьВыгрузкуТоваров(Параметры, Товары, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, Товары);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет удаление товаров в облаке Эвотор
//
Процедура НачатьУдалениеТоваров(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	СообщениеОбОшибке = "";
	
	ЕстьОшибки = Ложь;
	
	Если ЗначениеЗаполнено(ВходныеПараметры) Тогда
		Товары = ПодготовитьСписокТоваровКУдалению(ВходныеПараметры);
	Иначе
		Товары = Неопределено;
	КонецЕсли;
		
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьОчисткуТоваров(Параметры, Товары, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, Товары);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет загрузку магазинов из облака Эвотор
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	РезультатЗапроса = Новый Структура;
	
	СообщениеОбОшибке = "";
	
	ЕстьОшибки = Ложь;
	ОфлайнОборудование1СЭвоторВызовСервера.ВыполнитьЗагрузкуМагазинов(Параметры, РезультатЗапроса, ЕстьОшибки, СообщениеОбОшибке, Истина);
	
	Если ЕстьОшибки Тогда
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, СообщениеОбОшибке);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, РезультатЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Истина, РезультатЗапроса);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуФлагаДанныеЗагружены(ОповещениеПриЗавершении, Параметры, ВходныеПараметры, ВыходныеПараметры, Команда)
	
	Результат = ОфлайнОборудование1СЭвоторВызовСервера.ЗаполнитьДатуПоследнейЗагрузки(Параметры, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры
#КонецОбласти

#Область ПодготовкаДанныхЗапросов
Функция ПодготовитьСписокТоваровКУдалению(СписокТоваров)
	
	МассивТоваров = Новый Массив;
	
	Для Каждого Товар Из СписокТоваров Цикл
		
		СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыТовараКУдалению();
		СтруктураТовара.uuid = Товар.УникальныйИдентификатор;
		МассивТоваров.Добавить(СтруктураТовара);
		
	КонецЦикла;
	
	Возврат МассивТоваров;
	
КонецФункции

// Возвращает массив товаров
//
// Параметры:
//  СписокТоваров - см. МенеджерОфлайнОборудованияКлиентСервер.ПрайсЛистККМ
//
// Возвращаемое значение:
//  Массив из Структура
Функция ПодготовитьСписокТоваровКОтправке(СписокТоваров)
	
	МассивТоваров = Новый Массив;
	
	Если Не СписокТоваров.Товары.Количество() = 0 ИЛИ Не СписокТоваров.ГруппыТоваров.Количество() = 0 Тогда
		
		СоответствиеТоваровГрупп = Новый Соответствие;
		
		Для Каждого Группа Из СписокТоваров.ГруппыТоваров Цикл
			
			СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыГруппы();
			СтруктураТовара.uuid                   = Строка(Группа.УникальныйИдентификатор);
			СтруктураТовара.name                   = Группа.Наименование;
			СтруктураТовара.group                  = Истина; 
			СтруктураТовара.hasVariants            = Истина; 
			СоответствиеТоваровГрупп.Вставить(Группа.Код, Строка(Группа.УникальныйИдентификатор));
			Если Группа.КодГруппы <> 0 Тогда
				СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Группа.КодГруппы);
			Иначе
				СтруктураТовара.parentUuid = Неопределено;
			КонецЕсли;
			
			МассивТоваров.Добавить(СтруктураТовара);
			
		КонецЦикла;
		
		Для Каждого Товар Из СписокТоваров.Товары Цикл
			Если Товар.ИмеетХарактеристики Тогда
				Для Каждого Характеристика Из Товар.Характеристики Цикл
					Если Характеристика.ИмеетУпаковки Тогда
						Для Каждого Упаковка Из Характеристика.Упаковки Цикл
							СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыТовара();
							СтруктураТовара.name      = Товар.Наименование + Характеристика.Наименование + Упаковка.Наименование;
							СтруктураТовара.price     = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
							СтруктураТовара.quantity  = ?(Упаковка.Остаток = Неопределено, 0, Упаковка.Остаток);
							Если Не Товар.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
								СтруктураТовара.costPrice = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
							КонецЕсли;
							Если Не ПустаяСтрока(Упаковка.УникальныйИдентификатор) Тогда
								СтруктураТовара.uuid      = Строка(Новый УникальныйИдентификатор);
							Иначе
								СтруктураТовара.uuid      = Строка(Новый УникальныйИдентификатор);
							КонецЕсли;
							СтруктураТовара.code      = Упаковка.Код;
							Если Товар.КодГруппы <> 0 Тогда
								СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
							Иначе
								СтруктураТовара.parentUuid = Неопределено;
							КонецЕсли;
							ЗаписатьШтрихкодыТовара(Упаковка.Штрихкоды, СтруктураТовара);
							СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СписокТоваров.ЕдиницыИзмерения, Товар);
							ЗаполнитьТовар(СтруктураТовара, Товар);
							МассивТоваров.Добавить(СтруктураТовара);
						КонецЦикла;
					Иначе
						СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыТовара();
						СтруктураТовара.name      = Товар.Наименование + Характеристика.Наименование;
						СтруктураТовара.price     = ?(Характеристика.Цена = Неопределено, 0, Характеристика.Цена);
						СтруктураТовара.quantity  = ?(Характеристика.Остаток = Неопределено, 0, Характеристика.Остаток);
						Если Не Товар.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
							СтруктураТовара.costPrice = ?(Характеристика.Цена = Неопределено, 0, Характеристика.Цена);
						КонецЕсли;
						Если Не ПустаяСтрока(Характеристика.УникальныйИдентификатор) Тогда
							СтруктураТовара.uuid      = Строка(Характеристика.УникальныйИдентификатор);
						Иначе
							СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
						КонецЕсли;
						СтруктураТовара.code      = Характеристика.Код;
						Если Товар.КодГруппы <> 0 Тогда
							СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
						Иначе
							СтруктураТовара.parentUuid = Неопределено;
						КонецЕсли;
						ЗаписатьШтрихкодыТовара(Характеристика.Штрихкоды, СтруктураТовара);
						СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СписокТоваров.ЕдиницыИзмерения, Товар);
						ЗаполнитьТовар(СтруктураТовара, Товар);
						МассивТоваров.Добавить(СтруктураТовара);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Товар.ИмеетУпаковки Тогда
				Если ЗначениеЗаполнено(Товар.Код) Тогда
					СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыТовара();
					СтруктураТовара.name      = Товар.Наименование;
					СтруктураТовара.price     = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
					СтруктураТовара.quantity  = ?(Товар.Остаток = Неопределено, 0, Товар.Остаток);
					Если Не Товар.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
						СтруктураТовара.costPrice = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
					КонецЕсли;
					СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
					СтруктураТовара.code      = Товар.Код;
					Если Товар.КодГруппы <> 0 Тогда
						СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
					Иначе
						СтруктураТовара.parentUuid = Неопределено;
					КонецЕсли;
					ЗаписатьШтрихкодыТовара(Товар.Штрихкоды, СтруктураТовара);
					СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СписокТоваров.ЕдиницыИзмерения, Товар);
					ЗаполнитьТовар(СтруктураТовара, Товар);
					МассивТоваров.Добавить(СтруктураТовара);
				КонецЕсли;
				Для Каждого Упаковка Из Товар.Упаковки Цикл
					СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыТовара();
					СтруктураТовара.name      = Товар.Наименование + Упаковка.Наименование;
					СтруктураТовара.price     = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
					СтруктураТовара.quantity  = ?(Упаковка.Остаток = Неопределено, 0, Упаковка.Остаток);
					Если Не Товар.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
						СтруктураТовара.costPrice = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
					КонецЕсли;
					Если Не ПустаяСтрока(Упаковка.УникальныйИдентификатор) Тогда
						СтруктураТовара.uuid      = Строка(Новый УникальныйИдентификатор);
					Иначе
						СтруктураТовара.uuid      = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
					СтруктураТовара.code      = Упаковка.Код;
					Если Товар.КодГруппы <> 0 Тогда
						СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
					Иначе
						СтруктураТовара.parentUuid = Неопределено;
					КонецЕсли;
					ЗаписатьШтрихкодыТовара(Упаковка.Штрихкоды, СтруктураТовара);
					СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СписокТоваров.ЕдиницыИзмерения, Товар);
					ЗаполнитьТовар(СтруктураТовара, Товар);
					МассивТоваров.Добавить(СтруктураТовара);
				КонецЦикла;
			Иначе
				СтруктураТовара = ОфлайнОборудование1СЭвоторКлиентСервер.РеквизитыТовара();
				СтруктураТовара.name      = Товар.Наименование;
				СтруктураТовара.price     = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
				СтруктураТовара.quantity  = ?(Товар.Остаток = Неопределено, 0, Товар.Остаток);
				Если Не Товар.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
					СтруктураТовара.costPrice = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
				КонецЕсли;
				СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
				СтруктураТовара.code      = Товар.Код;
				Если Товар.КодГруппы <> 0 Тогда
					СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
				Иначе
					СтруктураТовара.parentUuid = Неопределено;
				КонецЕсли;
				ЗаписатьШтрихкодыТовара(Товар.Штрихкоды, СтруктураТовара);
				СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СписокТоваров.ЕдиницыИзмерения, Товар);
				ЗаполнитьТовар(СтруктураТовара, Товар);
				МассивТоваров.Добавить(СтруктураТовара);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивТоваров;
	
КонецФункции

Процедура ЗаполнитьТовар(СтруктураТовара, Товар)
	
	Если Товар.ЭтоАлкоголь Тогда
		
		СтруктураТовара.alcoholByVolume        = Товар.АлкогольныеРеквизиты.Крепость;
		СтруктураТовара.alcoholProductKindCode = Товар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
		СтруктураТовара.tareVolume             = Товар.АлкогольныеРеквизиты.ЕмкостьТары;
		Если Товар.АлкогольныеРеквизиты.Маркируемый = Истина Тогда
			СтруктураТовара.type               = "ALCOHOL_MARKED";
		Иначе
			СтруктураТовара.type               = "ALCOHOL_NOT_MARKED";
		КонецЕсли;
		Если Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво") Тогда
			СтруктураТовара.type = "BEER_MARKED_KEG";
		ИначеЕсли Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Пиво") Тогда
			СтруктураТовара.type = "BEER_MARKED";
		КонецЕсли;
		
	ИначеЕсли Товар.Свойство("ЭтоМаркированнаяПродукция") Тогда
		
		СтруктураТовара.alcoholByVolume        = Неопределено;
		СтруктураТовара.alcoholProductKindCode = Неопределено;
		СтруктураТовара.tareVolume             = Неопределено;
		СтруктураТовара.alcocodes              = Неопределено;
		
		Если Товар.ЭтоМаркированнаяПродукция Тогда 
			Если Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") 
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Табак") Тогда
				СтруктураТовара.type = "TOBACCO_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") 
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Обувь") Тогда
				СтруктураТовара.type = "SHOES_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты") Тогда
				СтруктураТовара.type = "MEDICINE_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция") Тогда
				СтруктураТовара.type = "DAIRY_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Духи") 
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Духи") Тогда
				СтруктураТовара.type = "PERFUME_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Фотоаппараты")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Фотоаппараты") Тогда
				СтруктураТовара.type = "PHOTOS_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Шины") 
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Шины") Тогда
				СтруктураТовара.type = "TYRES_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность") Тогда
				СтруктураТовара.type = "LIGHT_INDUSTRY_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.УпакованнаяВода")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.УпакованнаяВода") Тогда
				СтруктураТовара.type = "WATER_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха") Тогда
				СтруктураТовара.type = "FUR_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Велосипеды")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Велосипеды") Тогда
				СтруктураТовара.type = "BIKE_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.СоковаяПродукция")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.СоковаяПродукция") Тогда
				СтруктураТовара.type = "JUICE_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Антисептики")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Антисептики") Тогда
				СтруктураТовара.type = "ANTISEPTIC_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.БАДы")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.БАДы") Тогда
				СтруктураТовара.type = "DIETARY_SUPPLEMENTS_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МедицинскиеИзделия")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МедицинскиеИзделия") Тогда
				СтруктураТовара.type = "MEDICAL_DEVICES_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КреслаКоляски")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КреслаКоляски") Тогда
				СтруктураТовара.type = "WHEELCHAIRS_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак")
				ИЛИ Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция")
				ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция")Тогда
				СтруктураТовара.type = "TOBACCO_PRODUCTS_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво") Тогда
				СтруктураТовара.type = "BEER_MARKED_KEG";
				СтруктураТовара.alcoholByVolume        = Товар.АлкогольныеРеквизиты.Крепость;
				СтруктураТовара.alcoholProductKindCode = Товар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
				СтруктураТовара.tareVolume             = Товар.АлкогольныеРеквизиты.ЕмкостьТары;
			ИначеЕсли Товар.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Пиво") Тогда
				СтруктураТовара.type = "BEER_MARKED";
				СтруктураТовара.alcoholByVolume        = Товар.АлкогольныеРеквизиты.Крепость;
				СтруктураТовара.alcoholProductKindCode = Товар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
				СтруктураТовара.tareVolume             = Товар.АлкогольныеРеквизиты.ЕмкостьТары;
			Иначе
				СтруктураТовара.type = "NORMAL";
			КонецЕсли;
		Иначе
			Если Товар.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
				СтруктураТовара.type = "SERVICE";
			Иначе
				СтруктураТовара.type = "NORMAL";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураТовара.allowToSell                = Истина; 
	СтруктураТовара.articleNumber              = Строка(Товар.Артикул);
	СтруктураТовара.description                = "";
	СтруктураТовара.group                      = Ложь; 
	Если Строка(Товар.СтавкаНДС) = "18" ИЛИ Строка(Товар.СтавкаНДС) = "20" Тогда
		СтруктураТовара.tax                    = "VAT_18";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "10" Тогда
		СтруктураТовара.tax                    = "VAT_10";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "0" Тогда
		СтруктураТовара.tax                    = "VAT_0";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "110" Тогда
		СтруктураТовара.tax                    = "VAT_10_110";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "118" Тогда
		СтруктураТовара.tax                    = "VAT_18_118";
	Иначе
		СтруктураТовара.tax                    = "NO_VAT";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьШтрихкодыТовара(Штрихкоды, СтруктураТовара)
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		СтруктураТовара.barCodes.Добавить(Штрихкод.Штрихкод);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьЕдиницуИзмеренияТовара(ЕдиницыИзмерения, Товар)
	
	Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
		
		Для Каждого ЕИ Из ЕдиницыИзмерения Цикл
			Если ЕИ.Код = Товар.КодЕдиницыИзмерения Тогда
				Возврат ЕИ.Наименование;
			КонецЕсли;
		КонецЦикла;
		Возврат "шт";
	Иначе
		Возврат "шт";
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСписокДокументовФормат10(МассивДанных, ДатаСмены, ЕстьОшибки, СообщениеОбОшибке)
	
	СтруктураВозвращаемыхДанных = Новый Массив;
	СтруктураДанных = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	СоответствиеСмен = Новый Соответствие;
	
	Для Каждого Документ Из МассивДанных Цикл
		Если Документ.type = "OPEN_SESSION" Тогда
			ОтчетОПродажахККМ = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОПродажахККМ();
			ОтчетОПродажахККМ.ДатаОткрытияСмены = Документ.openDate;
			ОтчетОПродажахККМ.НомерСмены        = Документ.sessionNumber;
			ОтчетОПродажахККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.sessionUUID);
			СоответствиеСмен.Вставить(Документ.sessionUUID, ОтчетОПродажахККМ);
		ИначеЕсли Документ.type = "SELL" ИЛИ Документ.type = "PAYBACK" Тогда
			
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
			
			ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
			ЧекККМ.ДатаЧека                = Документ.openDate;
			ЧекККМ.НомерЧека               = Документ.number; 
			ЧекККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.uuid);
			Если Документ.type = "SELL" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(1);
			ИначеЕсли Документ.type = "PAYBACK" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(2);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
			КонецЕсли;
			
			Для Каждого Транзакция Из Документ.transactions Цикл
				Если Транзакция.type ="DOCUMENT_OPEN" Тогда
					Если Транзакция.baseDocumentUUID <> Неопределено Тогда
						ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ = Новый УникальныйИдентификатор(Транзакция.baseDocumentUUID);
						ЧекККМ.ТипСвязанногоДокументаККМ = "Чек";
					КонецЕсли;
				ИначеЕсли Транзакция.type = "REGISTER_POSITION" Тогда
					ТоварККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
					ТоварККМ.Код                          = Транзакция.commodityCode;
					ТоварККМ.Количество                   = ?(Документ.type = "SELL", Транзакция.quantity, -Транзакция.quantity);
					ТоварККМ.Сумма                        = ?(Документ.type = "SELL", Транзакция.resultSum, -Транзакция.resultSum);
					ТоварККМ.Цена                         = Транзакция.price;
					
					Если ЗначениеЗаполнено(Транзакция.mark) Тогда
						Если Транзакция.commodityType = "ALCOHOL_MARKED" ИЛИ Транзакция.commodityType = "TOBACCO_MARKED" Тогда
							ТоварККМ.ШтрихкодыМаркированнойПродукции.Добавить(Транзакция.mark);
						КонецЕсли;
					КонецЕсли;
					
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(4);
					ЧекККМ.Товары.Добавить(ТоварККМ);
					СоответствиеТоваровНалогов = Новый Соответствие;
					СоответствиеТоваровНалогов.Вставить(Транзакция.commodityCode, ТоварККМ);
				ИначеЕсли Транзакция.type = "POSITION_TAX" Тогда
					Товар = СоответствиеТоваровНалогов.Получить(Транзакция.commodityCode);
					Если ЗначениеЗаполнено(Товар) Тогда
						
						ИспользоватьСтавкуНДС20 = Истина;
						Если Документ.closeDate < Дата(2019,1,1,0,0,0) Тогда
							ИспользоватьСтавкуНДС20 = Ложь;
						ИначеЕсли Документ.closeDate > Дата(2019,1,1,0,0,0) И Документ.type = "PAYBACK" И ЗначениеЗаполнено(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ) 
							И -Транзакция.resultSum > 1 Тогда
							СуммаНДС20 = Окр(Транзакция.resultSum*(20/(120)), 2);
							Если Транзакция.resultTaxSum <> СуммаНДС20 Тогда
								ИспользоватьСтавкуНДС20 = Ложь;
							КонецЕсли;
						КонецЕсли;
						
						Если Транзакция.tax = "NO_VAT" Тогда
							Товар.СтавкаНДС = "none"
						ИначеЕсли Транзакция.tax = "VAT_0" Тогда
							Товар.СтавкаНДС = "0"
						ИначеЕсли Транзакция.tax = "VAT_10" Тогда
							Товар.СтавкаНДС = "10"
						ИначеЕсли Транзакция.tax = "VAT_10_110" Тогда
							Товар.СтавкаНДС = "10/110"
						ИначеЕсли Транзакция.tax = "VAT_18" И ИспользоватьСтавкуНДС20 Тогда
							Товар.СтавкаНДС = "20"
						ИначеЕсли Транзакция.tax = "VAT_18" И НЕ ИспользоватьСтавкуНДС20 Тогда
							Товар.СтавкаНДС = "18"
						ИначеЕсли Транзакция.tax = "VAT_18_118" И ИспользоватьСтавкуНДС20 Тогда
							Товар.СтавкаНДС = "20/120"
						ИначеЕсли Транзакция.tax = "VAT_18_118" И НЕ ИспользоватьСтавкуНДС20 Тогда
							Товар.СтавкаНДС = "18/118"
						КонецЕсли;
						
					КонецЕсли;
				ИначеЕсли Транзакция.type = "PAYMENT" Тогда
					ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
					Если Транзакция.paymentType = "CASH" Тогда
						Если Не ОплатаЧекаККМ.СуммаНаличнойОплаты = Неопределено Тогда
							ОплатаЧекаККМ.СуммаНаличнойОплаты = ОплатаЧекаККМ.СуммаНаличнойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						Иначе
							ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						КонецЕсли;
						ОплатаЧекаККМ.СуммаЭлектроннойОплаты = 0;
					ИначеЕсли Транзакция.paymentType = "CARD" Тогда
						Если Не ОплатаЧекаККМ.СуммаЭлектроннойОплаты = Неопределено Тогда
							ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ОплатаЧекаККМ.СуммаЭлектроннойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						Иначе
							ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
						КонецЕсли;
						ОплатаЧекаККМ.СуммаНаличнойОплаты    = 0;
					КонецЕсли;
					ОплатаЧекаККМ.СуммаПостоплатой           = 0;
					ОплатаЧекаККМ.СуммаПредоплатой           = 0;
					ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Документ.type = "CLOSE_SESSION" Тогда
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
			ДатаСмены = Документ.openDate;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.ДатаЗакрытияСмены = Документ.openDate;
				СтруктураДанных.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
			КонецЕсли;
		ИначеЕсли Документ.type = "OPEN_TARE" Тогда
			ВскрытиеТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ВскрытиеТарыККМ();
			ВскрытиеТарыККМ.Дата                    = Документ.openDate;
			ВскрытиеТарыККМ.Номер                   = Документ.number;
			ВскрытиеТарыККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.uuid);
			Для Каждого Транзакция Из Документ.transactions Цикл
				
				Если Транзакция.type = "REGISTER_POSITION" Тогда
					ТоварВскрытияТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварВскрытияТарыККМ();
					ТоварВскрытияТарыККМ.Код        = Транзакция.commodityCode;
					ТоварВскрытияТарыККМ.Количество = Транзакция.quantity;
					
					Если ЗначениеЗаполнено(Транзакция.barcode) Тогда
						ТоварВскрытияТарыККМ.ШтрихкодАлкогольнойПродукции.Добавить(Транзакция.barcode);
					КонецЕсли;
					
					ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияТарыККМ);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураДанных.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
			
		ИначеЕсли Документ.type = "CASH_INCOME" ИЛИ Документ.type = "CASH_OUTCOME" Тогда 
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
			ДвижениеДСККМ = МенеджерОфлайнОборудованияКлиентСервер.ДвижениеДСККМ();
			ДвижениеДСККМ.Дата                    = Документ.openDate;
			ДвижениеДСККМ.Номер                   = Документ.number;
			ДвижениеДСККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.uuid);
			ДвижениеДСККМ.Сумма                   = Документ.closeSum;
			Если Документ.type = "CASH_INCOME" Тогда
				ДвижениеДСККМ.ТипДвижения = "Внесение";
			Иначе
				ДвижениеДСККМ.ТипДвижения = "Выемка"
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДанных.ОтчетыОПродажах.Количество() > 0 Тогда
		ЕстьОшибки = Ложь;
	Иначе
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Нет данных к загрузке'");
	КонецЕсли;
	СтруктураВозвращаемыхДанных.Добавить(СтруктураДанных);
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

Функция ОбработатьСписокДокументов(МассивДанных, ДатаСмены, ЕстьОшибки, СообщениеОбОшибке)
	
	СтруктураВозвращаемыхДанных = Новый Массив;
	СтруктураДанных = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	СоответствиеСмен = Новый Соответствие;
	Для Каждого Документ Из МассивДанных Цикл
		Если Документ.type = "OPEN_SESSION" Тогда
			
			ОтчетОПродажахККМ = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОПродажахККМ();
			ОтчетОПродажахККМ.ДатаОткрытияСмены = Документ.close_date;
			ОтчетОПродажахККМ.НомерСмены        = Документ.session_number;
			ОтчетОПродажахККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.session_id);
			СоответствиеСмен.Вставить(Документ.session_id, ОтчетОПродажахККМ);
			
		ИначеЕсли Документ.type = "SELL" ИЛИ Документ.type = "PAYBACK" Тогда
			
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.session_id);
			
			ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
			ЧекККМ.ДатаЧека                = Документ.close_date;
			ЧекККМ.НомерЧека               = Документ.number;
			Если СтрДлина(Документ.id) = 36 Тогда
				ЧекККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.id);
			Иначе
				ЧекККМ.УникальныйИдентификатор = Документ.id;
			КонецЕсли;
			
			Если Документ.body.taxation_system = "COMMON" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(0);
			ИначеЕсли Документ.body.taxation_system = "SIMPLIFIED_INCOME" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(1);
			ИначеЕсли Документ.body.taxation_system = "SIMPLIFIED_INCOME_OUTCOME" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(2);
			ИначеЕсли Документ.body.taxation_system = "SINGLE_IMPUTED_INCOME" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(3);
			ИначеЕсли Документ.body.taxation_system = "SINGLE_AGRICULTURE" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(4);
			ИначеЕсли Документ.body.taxation_system = "PATENT" Тогда
				ЧекККМ.СистемаНалогообложения = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СистемаНалогообложенияККТПоКоду(5);
			ИначеЕсли Документ.body.taxation_system = "" Тогда
				ЧекККМ.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
			КонецЕсли;
			
			Если Документ.type = "SELL" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(1);
			ИначеЕсли Документ.type = "PAYBACK" Тогда
				ЧекККМ.ТипРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.РасчетДенежнымиСредствамиПоКоду(2);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
			КонецЕсли;
			
			СтруктураТелаДокумента = Документ.body;
			
			Для Каждого Оплата Из СтруктураТелаДокумента.payments Цикл
				ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
				Если Оплата.Type = "CASH" ИЛИ Оплата.Type = "UNKNOWN" Тогда
					ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(Документ.type = "SELL", Оплата.sum, -Оплата.sum);
					ОплатаЧекаККМ.СуммаЭлектроннойОплаты        = 0;
					ОплатаЧекаККМ.СуммаПостоплатой              = 0;
					ОплатаЧекаККМ.СуммаПредоплатой              = 0;
					ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ИначеЕсли Оплата.Type = "CARD" Тогда
					ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ?(Документ.type = "SELL", Оплата.sum, -Оплата.sum);
					ОплатаЧекаККМ.СуммаНаличнойОплаты           = 0;
					ОплатаЧекаККМ.СуммаПостоплатой              = 0;
					ОплатаЧекаККМ.СуммаПредоплатой              = 0;
					ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ИначеЕсли Оплата.Type = "ADVANCE" Тогда
					ОплатаЧекаККМ.СуммаПредоплатой = ?(Документ.type = "SELL", Оплата.sum, -Оплата.sum);
					ОплатаЧекаККМ.СуммаНаличнойОплаты           = 0;
					ОплатаЧекаККМ.СуммаЭлектроннойОплаты        = 0;
					ОплатаЧекаККМ.СуммаПостоплатой              = 0;
					ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ИначеЕсли Оплата.Type = "CREDIT" Тогда
					ОплатаЧекаККМ.СуммаПостоплатой = ?(Документ.type = "SELL", Оплата.sum, -Оплата.sum);
					ОплатаЧекаККМ.СуммаНаличнойОплаты           = 0;
					ОплатаЧекаККМ.СуммаЭлектроннойОплаты        = 0;
					ОплатаЧекаККМ.СуммаПредоплатой              = 0;
					ОплатаЧекаККМ.СуммаВстречнымПредоставлением = 0;
				ИначеЕсли Оплата.Type = "COUNTEROFFER" Тогда
					ОплатаЧекаККМ.СуммаВстречнымПредоставлением = ?(Документ.type = "SELL", Оплата.sum, -Оплата.sum);
					ОплатаЧекаККМ.СуммаНаличнойОплаты        = 0;
					ОплатаЧекаККМ.СуммаЭлектроннойОплаты     = 0;
					ОплатаЧекаККМ.СуммаПостоплатой           = 0;
					ОплатаЧекаККМ.СуммаПредоплатой           = 0;
				КонецЕсли;
				
				ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
				
			КонецЦикла;
			
			Для Каждого Товар Из СтруктураТелаДокумента.positions Цикл
				
				ТоварККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
				ТоварККМ.Код                          = Товар.code;
				ТоварККМ.Количество                   = ?(Документ.type = "SELL", Товар.quantity, -Товар.quantity);
				ТоварККМ.Сумма                        = ?(Документ.type = "SELL", Товар.result_sum, -Товар.result_sum);
				ТоварККМ.Цена                         = Товар.price;
				ТоварККМ.СтавкаНДС                    = Товар.tax.tax_percent;
				
				Если ЗначениеЗаполнено(Товар.mark) Тогда
					ТоварККМ.ШтрихкодыМаркированнойПродукции.Добавить(Товар.mark);
				КонецЕсли;
				
				Если Товар.settlement_method.Свойство("type") Тогда
					Если Товар.settlement_method.type = "PREPAYMENT_FULL" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(1);
					ИначеЕсли Товар.settlement_method.type = "PREPAYMENT_PARTIAL" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(2);
					ИначеЕсли Товар.settlement_method.type = "ADVANCE" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(3);
					ИначеЕсли Товар.settlement_method.type = "CHECKOUT_FULL" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(4);
					ИначеЕсли Товар.settlement_method.type = "CHECKOUT_PARTIAL" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(5);
					ИначеЕсли Товар.settlement_method.type = "CREDIT_PASS" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(6);
					ИначеЕсли Товар.settlement_method.type = "CREDIT_CHECKOUT" Тогда
						ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(7);
					КонецЕсли;
				Иначе
					ТоварККМ.ПризнакСпособаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПризнакСпособаРасчетаПоКоду(4);
				КонецЕсли;
				
				ЧекККМ.Товары.Добавить(ТоварККМ);
				
			КонецЦикла;
		ИначеЕсли Документ.type = "CLOSE_SESSION" Тогда
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.session_id);
			ДатаСмены = Документ.close_date;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.ДатаЗакрытияСмены = Документ.close_date;
				СтруктураДанных.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
			КонецЕсли;
		ИначеЕсли Документ.type = "OPEN_TARE" Тогда
			ВскрытиеТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ВскрытиеТарыККМ();
			ВскрытиеТарыККМ.Дата                    = Документ.close_date;
			ВскрытиеТарыККМ.Номер                   = Документ.number;
			ВскрытиеТарыККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.id);
			Для Каждого Товар Из Документ.body.positions Цикл
			
				ТоварВскрытияТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварВскрытияТарыККМ();
				ТоварВскрытияТарыККМ.Код        = Товар.code;
				ТоварВскрытияТарыККМ.Количество = Товар.quantity;
				
				Если ЗначениеЗаполнено(Товар.bar_code) Тогда
					ТоварВскрытияТарыККМ.ШтрихкодАлкогольнойПродукции.Добавить(Товар.bar_code);
				КонецЕсли;
				
				ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияТарыККМ);
			
			КонецЦикла;
			
			СтруктураДанных.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
			
		ИначеЕсли Документ.type = "CASH_INCOME" ИЛИ Документ.type = "CASH_OUTCOME" Тогда 
			ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.session_id);
			ДвижениеДСККМ = МенеджерОфлайнОборудованияКлиентСервер.ДвижениеДСККМ();
			ДвижениеДСККМ.Дата                    = Документ.close_date;
			ДвижениеДСККМ.Номер                   = Документ.number;
			ДвижениеДСККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.id);
			ДвижениеДСККМ.Сумма                   = Документ.body.sum;
			Если Документ.type = "CASH_INCOME" Тогда
				ДвижениеДСККМ.ТипДвижения = "Внесение";
			Иначе
				ДвижениеДСККМ.ТипДвижения = "Выемка"
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
				ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураДанных.ОтчетыОПродажах.Количество() > 0 Тогда
		ЕстьОшибки = Ложь;
	Иначе
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Нет данных к загрузке'");
	КонецЕсли;
	СтруктураВозвращаемыхДанных.Добавить(СтруктураДанных);
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

Процедура ДополнитьМассив(МассивПриемник, МассивИсточник) 
	
	УникальныеЗначения = Новый Соответствие;
		
	Для Каждого Значение Из МассивПриемник Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для Каждого Значение Из МассивИсточник Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			МассивПриемник.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
// Процедура добавляет в массив выходных параметров сообщение об ошибке.
//		Параметры:
//			- ВыходныеПараметры - массив, в который будет помещено сообщение об ошибке.
//			- ТекстСообщения - текст сообщения, содержащий информация об ошибке.
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти