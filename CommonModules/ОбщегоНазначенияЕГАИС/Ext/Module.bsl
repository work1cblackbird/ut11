
#Область ПрограммныйИнтерфейс

Функция ЭтоРасширеннаяВерсияГосИС() Экспорт
	
	Возврат ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ЕГАИС");
	
КонецФункции

Функция ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ЕГАИС") Тогда
		//@skip-check wrong-string-literal-content
		Возврат ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	Иначе
		Возврат ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукцииРМК");
	КонецЕсли;
	
КонецФункции

// см. ОбщегоНазначенияПереопределяемый.ПриПериодическомПолученииДанныхКлиентаНаСервере
Процедура ПриПериодическомПолученииДанныхКлиентаНаСервере(Параметры, Результаты) Экспорт
	
	ИменаПараметров = ОбщегоНазначенияЕГАИСКлиентСервер.ИменаПараметровПериодическогоПолученияДанных();
	
	Для Каждого КлючИЗначение Из Параметры Цикл
		
		ИмяПараметра      = КлючИЗначение.Ключ;
		ЗначениеПараметра = КлючИЗначение.Значение; // см. ОбщегоНазначенияЕГАИСКлиентСервер.НовоеЗначениеПараметраПериодическойОтправкиДанныхНаСерверЗапрос
		
		Если ИмяПараметра = ИменаПараметров.ОбновитьПараметрыНастроек Тогда
			
			Результат = ОбщегоНазначенияЕГАИСКлиентСервер.НовоеЗначениеПараметраПериодическойОтправкиДанныхНаСерверОтвет();
			Результат.ПараметрПриложения = ОбщегоНазначенияЕГАИСКлиентСервер.ПараметрПриложенияОбменНаКлиентеПоРасписанию();
			Результат.ПараметрПриложения.ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
			
			Если Не (ОбщегоНазначения.РазделениеВключено()
				И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()) Тогда
					
				Результат.ПараметрПриложения.ВедетсяУчетАлкогольнойПродукции = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукцииРМК");
				Если Результат.ПараметрПриложения.ВедетсяУчетАлкогольнойПродукции Тогда
					Результат.ПараметрПриложения.НастроенАвтоматическийОбмен = ОбменДаннымиЕГАИСВызовСервера.ДоступноВыполнениеОбменаНаКлиентеПоРасписанию();
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеПараметра.НастроенАвтоматическийОбмен
				И Результат.ПараметрПриложения.НастроенАвтоматическийОбмен Тогда
				
				Результат.ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ВыполнитьОбмен(
					Неопределено,
					ЗначениеПараметра.ДатыПоследнегоЗапускаОбменаНаКлиентеПоРасписанию);
				Если Результат.ДанныеДляВыполненияОбменаНаКлиенте.ВыполнитьОбменПоРасписанию
					И Не Результат.ПараметрПриложения.ЭтоВебКлиент Тогда
					Результат.ВыполнитьОбменНаКлиенте = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Результаты.Вставить(ИмяПараметра, Результат);
			
		ИначеЕсли ИмяПараметра = ИменаПараметров.ВыполнитьОбменДанными Тогда
			
			Результат = ОбщегоНазначенияЕГАИСКлиентСервер.НовоеЗначениеПараметраПериодическойОтправкиДанныхНаСерверОтвет();
			Результат.ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ВыполнитьОбмен(
				Неопределено,
				ЗначениеПараметра.ДатыПоследнегоЗапускаОбменаНаКлиентеПоРасписанию);
			Если Результат.ДанныеДляВыполненияОбменаНаКлиенте.ВыполнитьОбменПоРасписанию Тогда
				Результат.ВыполнитьОбменНаКлиенте = Истина;
			КонецЕсли;
			Результаты.Вставить(ИмяПараметра, Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Возвращает текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
//   номенклатуры в объем ЕГАИС (декалитры).
//Временная таблица используется для пересчета учетного количества номенклатуры в объем ЕГАИС.
//
// Параметры:
//  ИмяТаблицыТовары - Строка - Имя таблицы с колонками: Номенклатура, Характеристика.
//  ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
//  ДобавлятьРазделитель - Булево - Признак добавления разделителя запросов.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВТОбъемДАЛЕдиницыНоменклатуры(ИмяТаблицыТовары = "ВТТовары", ИмяВременнойТаблицы = "ВТОбъемДАЛ", ДобавлятьРазделитель = Ложь) Экспорт
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	0                             КАК ОбъемДАЛ
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%1 КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика",
		ИмяТаблицыТовары,
		ИмяВременнойТаблицы);
	
	ОбщегоНазначенияЕГАИСПереопределяемый.ТекстЗапросаВТОбъемДАЛЕдиницыНоменклатуры(
		ТекстЗапроса,
		ИмяТаблицыТовары,
		ИмяВременнойТаблицы);
	
	Если ДобавлятьРазделитель Тогда
		ТекстЗапроса = ТекстЗапроса +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помечает/снимает пометку удаления у приложенных файлов.
Процедура ПометитьНаУдалениеПрисоединенныеФайлыЕГАИС(Знач Источник, ДляОрганизацииЕГАИС = Ложь) Экспорт
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Если ДляОрганизацииЕГАИС Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Редактирует КАК Редактирует
			|ИЗ
			|	Справочник.ЕГАИСПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &Ссылка
			|	И Файлы.Документ = НЕОПРЕДЕЛЕНО";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Редактирует КАК Редактирует
			|ИЗ
			|	Справочник.ЕГАИСПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.Документ = &Ссылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Источник.ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				           |т.к. содержит присоединенный файл ""%2"",
				           |занятый для редактирования.'"),
				Строка(Источник.Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает режим записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Документ.
// 
// Возвращаемое значение:
//  РежимЗаписиДокумента - Режим записи документа.
//
Функция РежимЗаписи(ДокументОбъект) Экспорт
	
	Возврат ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
КонецФункции

// Возвращает общий префикс идентификатора для режима отладки.
// 
// Возвращаемое значение:
//  Строка - Общий префикс идентификатора режима отладки.
//
Функция ПрефиксИдентификатораРежимаОтладкиОбщий() Экспорт
	
	Возврат "1c-";
	
КонецФункции

// Возвращает префикс идентификатора для режима отладки.
// 
// Возвращаемое значение:
//  Строка - Префикс идентификатора режима отладки.
//
Функция ПрефиксИдентификатораРежимаОтладки() Экспорт
	
	ПрефиксИдентификатора = НРег(СокрЛП(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РежимОтладкиЕГАИС", "ПрефиксИдентификатора", "")));
	Если СтрДлина(ПрефиксИдентификатора) > 6 Тогда
		ПрефиксИдентификатора = Лев(ПрефиксИдентификатора, 6);
	КонецЕсли;
	Префикс = ПрефиксИдентификатораРежимаОтладкиОбщий() + ПрефиксИдентификатора + "-";
	
	Возврат Префикс;
	
КонецФункции

#Область РаботаСКлассификаторами

// Идентификаторы классификаторов.
// 
// Возвращаемое значение:
//  Соответствие - Идентификаторы классификаторов
Функция ИдентификаторыКлассификаторов() Экспорт
	
	Идентификаторы = Новый Соответствие();
	Идентификаторы.Вставить(
		"MinimalPricesForExcisableProducts",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Минимальные цены для алкогольной и табачной продукции ИС'"),
			"РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС"));
	Идентификаторы.Вставить(
		"ClassifierOfTypesOfAlcoholicProducts",
		Новый Структура(
			"Наименование, ВидКлассификатора",
			НСтр("ru = 'Классификатор видов алкогольной продукции ЕГАИС'"),
			"РегистрСведений.ВидыАлкогольнойПродукцииЕГАИС"));
	Возврат Идентификаторы;
	
КонецФункции

// см. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	ДанныеКлассификатора          = ИдентификаторыКлассификаторов[Идентификатор];
	
	Если ДанныеКлассификатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные      = ПолучитьИзВременногоХранилища(Адрес); // - ДвоичныеДанные
	ВременныеФайлы      = Новый Массив();
	ФайлыКлассификатора = Новый Массив();
	
	Попытка
		
		ПотокЧтения = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ПотокЧтения);
		
		//@skip-check missing-temporary-file-deletion
		ВременныйКаталог = ПолучитьИмяВременногоФайла("cat");
		СоздатьКаталог(ВременныйКаталог);
		
		Для Каждого ЭлементАрхива Из ЧтениеZIP.Элементы Цикл
			ИмяВременногоФайла = ОбщегоНазначенияИС.ОбъединитьПути(ВременныйКаталог, ЭлементАрхива.ПолноеИмя);
			ФайлыКлассификатора.Добавить(ИмяВременногоФайла);
			ВременныеФайлы.Добавить(ИмяВременногоФайла);
			ЧтениеZIP.Извлечь(ЭлементАрхива, ВременныйКаталог);
		КонецЦикла;
		
		ЧтениеZIP.Закрыть();
		ПотокЧтения.Закрыть();
	
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка подготовки исходных файлов для загрузки классификатора ЕГАИС %1:
			           |%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеКлассификатора.ВидКлассификатора,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОписанияОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка подготовки исходных файлов для загрузки классификатора ЕГАИС %1:
			           |%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеКлассификатора.ВидКлассификатора,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибки,
			НСтр("ru = 'Работа с классификаторами ЕГАИС'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение ТекстОписанияОшибки;
	КонецПопытки;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеКлассификатора.ВидКлассификатора);
	МенеджерОбъекта.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры, ФайлыКлассификатора);
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныеФайлы.Добавить(ВременныйКаталог);
	КонецЕсли;
	Для Каждого ИмяВременногоФайла Из ВременныеФайлы Цикл
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЦикла;
	
КонецПроцедуры

// см. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если Не РазделениеВключено 
		И Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		
		Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
		Описатель.Наименование               = КлючИЗначение.Значение.Наименование;
		Описатель.Идентификатор              = КлючИЗначение.Ключ;
		Описатель.ОбновлятьАвтоматически     = Истина;
		Описатель.ОбщиеДанные                = Истина;
		Описатель.СохранятьФайлВКэш          = РазделениеВключено;
		Описатель.ОбработкаРазделенныхДанных = Ложь;
		
		Классификаторы.Добавить(Описатель);
		
	КонецЦикла;
	
КонецПроцедуры

// см. РаботаСКлассификаторамиПереопределяемый.ПриОпределенииНачальногоНомераВерсииКлассификатора
Процедура ПриОпределенииНачальногоНомераВерсииКлассификатора(Идентификатор, НачальныйНомерВерсии) Экспорт
	
	Возврат;
	
КонецПроцедуры

// см. РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОпределенииИдентификаторовКлассификаторов
Процедура ПриОпределенииИдентификаторовКлассификаторовВМоделиСервиса(Идентификаторы) Экспорт
	
	ИдентификаторыКлассификаторов = ИдентификаторыКлассификаторов();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		
		Идентификаторы.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МинимальныеЦеныАлкогольнойПродукции

//Инициализирует параметры проверки минимальных цен алкогольной продукции
//
// Возвращаемое значение:
//  Структура - Описание:
//   * Организация - СправочникСсылка.Организации, Неопределено - необходимо для определения вида операции (производитель/
//                   иная организация). Не заполняется для розничной продажи и для документов закупки алкогольной продукции
//   * Контрагент  - СправочникСсылка.Контрагенты, Неопределено - необходимо для определения вида операции (производитель/
//                   иная организация) при закупках, а также для проверки импорта/экспорта. 
//                   Не заполняется для розничной продажи                                                             
//   * ПроверятьКонтрагентов - Булево - признак необходимости проверки заполнения данных в карточках контрагентов
//   * ИННКонтрагента - Строка - ИНН контрагента (для операций закупок) или организации (для операций продаж). Заполняется
//                      для прикладных документов для подбора вида операции (производитель/иная организация)
//   * КППКонтрагента - Строка - КПП контрагента (для операций закупок) или организации (для операций продаж). Заполняется
//                      для прикладных документов для подбора вида операции (производитель/иная организация)
//   * РозничнаяПродажа - Булево - признак проверки для розничных продаж
//   * Поступление      - Булево - признак проверки цен в документах закупки
//   * Реализация       - Булево - признак проверки цен в документах продажи
//   * УчитыватьФактическоеКоличество - Булево - признак для ТТН Входящей ЕГАИС - проверять строки, 
//                                      где фактическое количество больше 0
//   * ТрансграничнаяОперация - Булево - признак импорта/экспорта
//   * ПроверятьЗаполнениеНоменклатуры - Булево - признак необходимости проверки заполнения данных в карточках номенклатуры
//                                       участвющих в проверке
//   * ОтсутствуютДанные - Булево - признак наличия карточек номенклатуры с незаполненными данными, необходимыми для подбора цен
//   * ПроблемыПоискаЦен - Массив - список проблем подбора цен
//   * ПровереннаяПродукция - Таблица значений - таблица с подобранными минимальными ценами и параметрами подбора
//      * ВидОперации - ПеречислениеСсылка.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС
//      * ВидПодакцизногоТовара - ПеречислениеСсылка.ВидыПодакцизныхТоваровИС
//      * Крепость - Число - крепость алкогольной продукции
//      * МинимальнаяЦена - Число - минимальная цена с учетом объема
//      * МинимальнаяЦенаБезУчетаОбъема - Число - минимальная цена без учета объема
//      * Номенклатура - СправочникСсылка.Номенклатура
//      * Объем - Число - объем
//      * Серия - СправочникСсылка.СерииНоменклатуры
//      * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//   * СписокНарушений - Массив - см.
//
Функция ИнициализироватьПараметрыПроверкиМинимальныхЦен() Экспорт 
	
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("Организация",                     Неопределено);
	ПараметрыПроверки.Вставить("Контрагент",                      Неопределено);
	ПараметрыПроверки.Вставить("ПроверятьКонтрагентов",           Истина);
	ПараметрыПроверки.Вставить("ИННКонтрагента",                  "");
	ПараметрыПроверки.Вставить("КППКонтрагента",                  "");
	ПараметрыПроверки.Вставить("РозничнаяПродажа",                Ложь);
	ПараметрыПроверки.Вставить("Поступление",                     Ложь);
	ПараметрыПроверки.Вставить("Реализация",                      Ложь);
	ПараметрыПроверки.Вставить("УчитыватьФактическоеКоличество",  Ложь);
	ПараметрыПроверки.Вставить("ТрансграничнаяОперация",          Ложь);
	ПараметрыПроверки.Вставить("ПроверятьЗаполнениеНоменклатуры", Истина);
	ПараметрыПроверки.Вставить("ОтсутствуютДанные",               Ложь);
	ПараметрыПроверки.Вставить("ПроблемыПоискаЦен",               Новый Массив);
	ПараметрыПроверки.Вставить("ПровереннаяПродукция",            Новый ТаблицаЗначений);
	ПараметрыПроверки.Вставить("СписокНарушений",                 Новый Массив);
	
	Возврат ПараметрыПроверки;
		
КонецФункции

//Подбирает минимальные цены алкгольной продукции по номенклатуре
// Параметры:
//  Товары- ТаблицаЗначений - номенклатура, для которой осуществляется поиск цен
//   * Номенклатура   - СправочникСсылка.Номенклатура
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//   * Серия          - СправочникСсылка.СерииНоменклатуры
//   
//  ПараметрыПроверки - Структура - см. ИнтеграцияЕГАИС.ИнициализироватьПараметрыПроверкиМинимальныхЦен 
//
Процедура ПодобратьМинимальныеЦеныАлкогольнойПродукции(Товары, ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ПроверятьКонтрагентов Тогда
		ИнициализироватьДанныеКонтрагентовПередПоискомЦен(ПараметрыПроверки);
	КонецЕсли;
	
	Если Не (ПараметрыПроверки.ТрансграничнаяОперация И ПараметрыПроверки.ОтсутствуютДанные) Тогда
		ДополнитьДанныеПоНоменклатуреДляПоискаМинимальныхЦен(Товары, ПараметрыПроверки);
		МинимальныеЦеныАлкогольнойПродукции(Товары, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеПоНоменклатуреДляПоискаМинимальныхЦен(Товары, ПараметрыПроверки)
	
	//добавляем в таблицу товаров параметры, необходимые для поиска цен и которые будут взяты из номенклатуры
	Товары.Колонки.Добавить("НомерСтроки",      Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Крепость",         ОбщегоНазначения.ОписаниеТипаЧисло(5,3));
	Товары.Колонки.Добавить("Производитель",    Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип);
	Товары.Колонки.Добавить("ПроизводительИНН", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Товары.Колонки.Добавить("ПроизводительКПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Товары.Колонки.Добавить("Объем",            ОбщегоНазначения.ОписаниеТипаЧисло(10,3));
	Товары.Колонки.Добавить("ВидПродукции",     Новый ОписаниеТипов("СправочникСсылка.ВидыАлкогольнойПродукции"));
	
	Если ПараметрыПроверки.ПроверятьКонтрагентов Тогда
		Товары.Колонки.Добавить("ИННКонтрагента", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		Товары.Колонки.Добавить("КППКонтрагента", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	КонецЕсли;
	
	СчетчикНомераСтроки = 1;
	Для каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.НомерСтроки    = СчетчикНомераСтроки;
		
		Если ПараметрыПроверки.ПроверятьКонтрагентов Тогда
			СтрокаТовара.ИННКонтрагента = ПараметрыПроверки.ИННКонтрагента;
			СтрокаТовара.КППКонтрагента = ПараметрыПроверки.КППКонтрагента;
		КонецЕсли;
		
		СчетчикНомераСтроки = СчетчикНомераСтроки + 1;
	КонецЦикла;
	
	ОбщегоНазначенияЕГАИСПереопределяемый.ЗаполнитьРеквизитыАлкогольнойПродукции(Товары);
		
КонецПроцедуры

Процедура ИнициализироватьДанныеКонтрагентовПередПоискомЦен(ПараметрыПроверки)
   
   	Организация  = ПараметрыПроверки.Организация;
	Контрагент   = ПараметрыПроверки.Контрагент;
	
    МассивОшибок = Новый Массив;
    
    Если Контрагент <> Неопределено Тогда	
		ДанныеКонтрагента = Новый Структура;
		ДанныеКонтрагента.Вставить("ИНН",                   "");
		ДанныеКонтрагента.Вставить("КПП",                   "");
		ДанныеКонтрагента.Вставить("ИностранныйКонтрагент", Ложь);
		ОбщегоНазначенияИСПереопределяемый.ЗаполнитьИННКПППоОрганизацииКонтрагенту(ДанныеКонтрагента, Контрагент);
	
		Если ДанныеКонтрагента.ИностранныйКонтрагент Тогда
			ПараметрыПроверки.ТрансграничнаяОперация = Истина;
			Возврат;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
			МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У контрагента ""%1"" не указан ИНН'"), Контрагент));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
			МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У контрагента ""%1"" не указан КПП'"), Контрагент));
		КонецЕсли;
		
		ПараметрыПроверки.ИННКонтрагента = ДанныеКонтрагента.ИНН;
		ПараметрыПроверки.ИННКонтрагента = ДанныеКонтрагента.КПП;
    
    КонецЕсли;	
	
	Если Организация <> Неопределено Тогда
		ДанныеОрганизации = Новый Структура;
		ДанныеОрганизации.Вставить("ИНН",                   "");
		ДанныеОрганизации.Вставить("КПП",                   "");
		ДанныеОрганизации.Вставить("ИностранныйКонтрагент", Ложь);
		ОбщегоНазначенияИСПереопределяемый.ЗаполнитьИННКПППоОрганизацииКонтрагенту(ДанныеОрганизации, Организация);
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.ИНН) Тогда
			МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У организации ""%1"" не указан ИНН'"), Организация));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.КПП) Тогда
			МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У организации ""%1"" не указан КПП'"), Организация));
		КонецЕсли;
		
		ПараметрыПроверки.ИННКонтрагента = ДанныеОрганизации.ИНН;
		ПараметрыПроверки.ИННКонтрагента = ДанныеОрганизации.КПП;
		
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ПараметрыПроверки.ОтсутствуютДанные = Истина;
		ПараметрыПроверки.ПроблемыПоискаЦен = МассивОшибок;
	КонецЕсли;
		
КонецПроцедуры

Процедура МинимальныеЦеныАлкогольнойПродукции(Товары, ПараметрыПроверки)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Крепость КАК Крепость,
	|	Товары.Производитель КАК Производитель,
	|	Товары.ПроизводительИНН КАК ПроизводительИНН,
	|	Товары.ПроизводительКПП КАК ПроизводительКПП,
	|	Товары.ИННКонтрагента КАК ИННКонтрагента,
	|	Товары.КППКонтрагента КАК КППКонтрагента,
	|	Товары.Объем КАК Объем,
	|	Товары.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ВидПродукции");
	
	ТекстыЗапроса.Добавить(ТекстЗапросаВТОбъемДАЛЕдиницыНоменклатуры("втТовары", "втТоварыОбъем")); 
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Серия КАК Серия,
	|	втТовары.Крепость КАК Крепость,
	|	втТовары.Производитель КАК Производитель,
	|	втТовары.Объем КАК Объем,
	|	втТоварыОбъем.ОбъемДАЛ КАК ОбъемДАЛ,
	|	втТовары.ВидПродукции КАК ВидПродукции,
	|	ВидыПродукции.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
	|	втТовары.ПроизводительИНН КАК ПроизводительИНН,
	|	втТовары.ПроизводительКПП КАК ПроизводительКПП,
	|	ВЫБОР
	|		КОГДА &РозничнаяПродажа
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС.РозничнаяПродажа)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втТовары.ПроизводительИНН = втТовары.ИННКонтрагента
	|						И втТовары.ПроизводительКПП = втТовары.КППКонтрагента
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС.ОптовыеДляПроизводителей)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС.ОптовыеДляИныхОрганизаций)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА втТовары.Крепость = 0
	|				ИЛИ втТовары.Объем = 0
	|				ИЛИ втТовары.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяССылка)
	|				ИЛИ втТовары.Производитель = &ПроизводительНеУказан
	|				ИЛИ втТовары.ПроизводительИНН = """"
	|				ИЛИ втТовары.ПроизводительКПП = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаДанных
	|ПОМЕСТИТЬ втТоварыПолная
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
	|		ПО втТовары.ВидПродукции = ВидыПродукции.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыОбъем КАК втТоварыОбъем
	|		ПО втТовары.Номенклатура = втТоварыОбъем.Номенклатура");
	
	Если ПараметрыПроверки.ПроверятьЗаполнениеНоменклатуры Тогда
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	втТоварыПолная.Номенклатура КАК Номенклатура,
		|	втТоварыПолная.Характеристика КАК Характеристика,
		|	втТоварыПолная.Крепость КАК Крепость,
		|	втТоварыПолная.ПроизводительИНН КАК ПроизводительИНН,
		|	втТоварыПолная.ПроизводительКПП КАК ПроизводительКПП,
		|	втТоварыПолная.ВидПродукции КАК ВидПродукции,
		|	втТоварыПолная.Производитель КАК Производитель,
		|	втТоварыПолная.Объем КАК Объем
		|ИЗ
		|	втТоварыПолная КАК втТоварыПолная
		|ГДЕ
		|	втТоварыПолная.ОшибкаДанных = ИСТИНА",
		"ПроверкаНоменклатуры");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	втТоварыПолная.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
	|	втТоварыПолная.ВидОперации КАК ВидОперации,
	|	втТоварыПолная.Крепость КАК Крепость
	|ПОМЕСТИТЬ втПараметрыПоиска
	|ИЗ
	|	втТоварыПолная КАК втТоварыПолная
	|
	|СГРУППИРОВАТЬ ПО
	|	втТоварыПолная.ВидПодакцизногоТовара,
	|	втТоварыПолная.ВидОперации,
	|	втТоварыПолная.Крепость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрыПоиска.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
	|	втПараметрыПоиска.ВидОперации КАК ВидОперации,
	|	втПараметрыПоиска.Крепость КАК Крепость,
	|	ЕСТЬNULL(МинимальныеЦеныПодакцизныхТоваровИС.МинимальнаяЦена, 0) КАК МинимальнаяЦенаБезУчетаОбъема
	|ПОМЕСТИТЬ втПодобранныеЦены
	|ИЗ
	|	втПараметрыПоиска КАК втПараметрыПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК МинимальныеЦеныПодакцизныхТоваровИС
	|		ПО втПараметрыПоиска.ВидПодакцизногоТовара = МинимальныеЦеныПодакцизныхТоваровИС.ВидПодакцизногоТовара
	|			И втПараметрыПоиска.ВидОперации = МинимальныеЦеныПодакцизныхТоваровИС.ВидОперации
	|			И втПараметрыПоиска.Крепость > МинимальныеЦеныПодакцизныхТоваровИС.КрепостьНижняяГраница
	|			И втПараметрыПоиска.Крепость <= МинимальныеЦеныПодакцизныхТоваровИС.КрепостьВерхняяГраница
	|ГДЕ
	|	МинимальныеЦеныПодакцизныхТоваровИС.ДатаНачалаДействия <= &ДатаПоиска
	|	И МинимальныеЦеныПодакцизныхТоваровИС.ДатаОкончанияДействия >= &ДатаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПолная.Номенклатура КАК Номенклатура,
	|	втТоварыПолная.Характеристика КАК Характеристика,
	|	втТоварыПолная.Серия КАК Серия,
	|   втТоварыПолная.ОбъемДАЛ КАК Объем,
	|	втТоварыПолная.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
	|	втТоварыПолная.ВидОперации КАК ВидОперации,
	|	втТоварыПолная.Крепость КАК Крепость,
	|	втПодобранныеЦены.МинимальнаяЦенаБезУчетаОбъема КАК МинимальнаяЦенаБезУчетаОбъема,
	|ВЫБОР
	|		КОГДА втТоварыПолная.ВидПодакцизногоТовара = ЗНАЧЕНИЕ(Перечисление.ВидыПодакцизныхТоваровИС.Водка)
	|			ТОГДА ВЫБОР
	|				КОГДА (втТоварыПолная.ОбъемДАЛ * 10) < 0.5
	|					ТОГДА втПодобранныеЦены.МинимальнаяЦенаБезУчетаОбъема
	|				ИНАЧЕ втПодобранныеЦены.МинимальнаяЦенаБезУчетаОбъема * втТоварыПолная.ОбъемДАЛ * 10 / 0.5
	|			КОНЕЦ
	|		ИНАЧЕ втПодобранныеЦены.МинимальнаяЦенаБезУчетаОбъема * втТоварыПолная.ОбъемДАЛ * 10 / 0.5
	|	КОНЕЦ КАК МинимальнаяЦена
	|ИЗ
	|	втТоварыПолная КАК втТоварыПолная
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПодобранныеЦены КАК втПодобранныеЦены
	|		ПО втТоварыПолная.ВидПодакцизногоТовара = втПодобранныеЦены.ВидПодакцизногоТовара
	|			И втТоварыПолная.ВидОперации = втПодобранныеЦены.ВидОперации
	|			И втТоварыПолная.Крепость = втПодобранныеЦены.Крепость", "РезультатыПодбора");
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	ЗапросМинимальныхЦен    = Новый Запрос;
	
	ЗапросМинимальныхЦен.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросМинимальныхЦен.УстановитьПараметр("Товары",           Товары);
	ЗапросМинимальныхЦен.УстановитьПараметр("ДатаПоиска",       ТекущаяДатаСеанса());
	ЗапросМинимальныхЦен.УстановитьПараметр("РозничнаяПродажа", ПараметрыПроверки.РозничнаяПродажа);
	
	ПроизводительНеУказан = Неопределено;
	СопоставлениеОбъектовЕГАИСПереопределяемый.ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(,,ПроизводительНеУказан,);
	ЗапросМинимальныхЦен.УстановитьПараметр("ПроизводительНеУказан", ПроизводительНеУказан);
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(ЗапросМинимальныхЦен, ТекстыЗапроса);
	
	Если ПараметрыПроверки.ПроверятьЗаполнениеНоменклатуры Тогда
		//@skip-warning
		ВыборкаНоменклатуры = РезультатыЗапроса["ПроверкаНоменклатуры"].Выбрать();
		МассивОшибок        = Новый Массив;
	
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			Если ВыборкаНоменклатуры.Крепость = 0 Тогда
				МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У номенклатуры ""%1"" не указана крепость'"), ВыборкаНоменклатуры.Номенклатура));
			КонецЕсли;
		
			Если ВыборкаНоменклатуры.Объем = 0 Тогда
				МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У номенклатуры ""%1"" не указан объем'"), ВыборкаНоменклатуры.Номенклатура));
			КонецЕсли;
		
			Если ВыборкаНоменклатуры.Производитель = ПроизводительНеУказан Тогда
				МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У номенклатуры ""%1"" не указан производитель'"),
					ВыборкаНоменклатуры.Номенклатура));
			Иначе
				Если ВыборкаНоменклатуры.ПроизводительИНН = "" Тогда
					МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У номенклатуры ""%1"" в производителе не указан ИНН'"),
						ВыборкаНоменклатуры.Номенклатура));
				КонецЕсли;

				Если ВыборкаНоменклатуры.ПроизводительКПП = "" Тогда
					МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У номенклатуры ""%1"" в производителе не указан КПП'"),
						ВыборкаНоменклатуры.Номенклатура));
				КонецЕсли;
			КонецЕсли;
		
			Если ВыборкаНоменклатуры.ВидПродукции = Справочники.ВидыАлкогольнойПродукции.ПустаяСсылка() Тогда
				МассивОшибок.Добавить(СтрШаблон(НСтр("ru='У номенклатуры ""%1"" не указан вид алкогольной продукции'"), ВыборкаНоменклатуры.Номенклатура));
			КонецЕсли;
		
		КонецЦикла;
	
		Если МассивОшибок.Количество() > 0 Тогда
			ПараметрыПроверки.ОтсутствуютДанные = Истина;
			ПараметрыПроверки.ПроблемыПоискаЦен = МассивОшибок;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ПараметрыПроверки.ОтсутствуютДанные Тогда 
		//@skip-warning
		ПараметрыПроверки.ПровереннаяПродукция = РезультатыЗапроса["РезультатыПодбора"].Выгрузить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти