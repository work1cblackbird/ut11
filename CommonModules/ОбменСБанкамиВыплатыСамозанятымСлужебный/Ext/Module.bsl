
////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиВыплатыСамозанятымСлужебный: механизм обмена электронными документами с банками по выплатам самозанятым
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляСозданияФайлаОтправкиВБанк

// ПРОЦЕДУРЫ ОТПРАВКИ ИНФОРМАЦИИИ В БАНК

// Формирует электронный документ по ссылке для документа Выплаты самозанятым
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка
//  НастройкиОбменаЭД - Структура - структура настроек обмена
//  ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками
//
// Возвращаемое значение:
//	ВозвращаемоеЗначение - Структура
//		* Организация - Строка - номер документа Выплаты самозанятым
//		* ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками
//		* Номер - Строка - номер документа Выплаты самозаняты 
//		* СтруктураЭД - Структура
//			** ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками
//			** Направление - ПеречислениеСсылка.ВидыЭДОбменСБанками
//			** Идентификатор - Строка - уникальный идентификатор
//			** СсылкаНаОбъект - ПеречислениеСсылка.ВидыЭДОбменСБанками
//			** НомерДокументаОтправителя - Строка - номер документа Выплаты самозанятым
//			** ДатаДокументаОтправителя - Дата - дата документа Выплаты самозанятым
//			** НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками 
//			** ПрограммаБанка - ПеречислениеСсылка.ПрограммыБанка 
//			** Основной - Булево
//			** Статус - ПеречислениеСсылка.СтатусыОбменСБанками
//			** АдресФайлаВоВременномХранилище - Строка
//
Функция СформироватьЭДПоВыплатамСамозанятым(СсылкаНаОбъект, НастройкиОбменаЭД, ВидЭД)    Экспорт

	ВозвращаемоеЗначение = Неопределено;

	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", ВидЭД);
	СтруктураЭД.Вставить("Направление", Перечисления.НаправленияЭДО.Исходящий);
	СтруктураЭД.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор));
	СтруктураЭД.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);

	ПечатныйНомерДокумента = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, ПечатныйНомерДокумента);

	СтруктураЭД.Вставить("НомерДокументаОтправителя", ПечатныйНомерДокумента);
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("НастройкаОбмена", НастройкиОбменаЭД.НастройкаОбмена);
	СтруктураЭД.Вставить("ПрограммаБанка", НастройкиОбменаЭД.ПрограммаБанка);

	АдресФайла = "";	
	ПриФормированииXMLФайлаВыплатСамозанятым(СсылкаНаОбъект, АдресФайла);

	Если НЕ ЗначениеЗаполнено(АдресФайла) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Организация", НастройкиОбменаЭД.Организация);
	ВозвращаемоеЗначение.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	ВозвращаемоеЗначение.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);

	СтруктураЭД.Вставить("Основной", Истина);
	СтруктураЭД.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Сформирован);
	СтруктураЭД.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);

	ВозвращаемоеЗначение.Вставить("СтруктураЭД", СтруктураЭД);	

	Возврат ВозвращаемоеЗначение;

КонецФункции

// Вызывается для формирования XML файла в прикладном решении.
//
// Параметры:
//    ОбъектДляВыгрузки - ДокументСсылка - ссылка на документ, на основании которого будет сформирован ЭД.
//    АдресФайла - Строка - АдресВременногоХранилища, содержит двоичные данные файла.
//
Процедура ПриФормированииXMLФайлаВыплатСамозанятым(ОбъектДляВыгрузки, АдресФайла) 
	
	Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляВыгрузки, "Проведен");
	Если Не Проведен Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не проведен.'"), ОбъектДляВыгрузки);		
		Операция = НСтр("ru = 'Формирование XML файла выплат самозанятым'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ДанныеЗаполненияРеестрВыплатСамозанятым();	 
	ОбменСБанкамиВыплатыСамозанятымПереопределяемый.ДанныеРеестраВыплатСамозанятым(
		ОбъектДляВыгрузки, ДанныеДокумента);
					
	ПрисоединитьФайлОбменаСБанкамиКОбъекту(
		ОбъектДляВыгрузки, 
		ДанныеДокумента,   
		АдресФайла);

КонецПроцедуры

// Прикрепляет файл обмена с банками к документу, если к документу уже прикреплен файл, то он будет заменен.
//
//	Параметры:
//		ВладелецФайла - ДокументСсылка - Ссылка на документ, к которому будет прикреплен файл.
//		ДанныеДокумента - Структура - данные, собранные из документа выплаты самозанятым.
//		АдресФайла - Строка - АдресВременногоХранилища, содержит двоичные данные файла.
//
Процедура ПрисоединитьФайлОбменаСБанкамиКОбъекту(ВладелецФайла, ДанныеДокумента, АдресФайла)
		
	КодировкаФайла = "UTF-8";
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(КодировкаФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	Пакет = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоВыплатамСамозанятым.ПространствоИмен);	
	КорневоеСвойствоXDTO = Пакет.КорневыеСвойства.Получить("ВыплатыСамозанятым");
	КорневойОбъектXDTO = ФабрикаXDTO.Создать(КорневоеСвойствоXDTO.Тип);
	ЗаполнитьЗначенияСвойств(КорневойОбъектXDTO, ДанныеДокумента);
	СвойствоXDTOРеестрВыплатСамозанятым = КорневойОбъектXDTO.Свойства().Получить("РеестрВыплатСамозанятым");
	ОбъектXDTOРеестрВыплатСамозанятым = ФабрикаXDTO.Создать(СвойствоXDTOРеестрВыплатСамозанятым.Тип);
	СписокXDTO = ОбъектXDTOРеестрВыплатСамозанятым.ПолучитьСписок("ФизЛицо");
	Для Каждого СтрокаФизЛицо Из ДанныеДокумента.ФизЛица Цикл
	
		СвойствоXDTOФизЛицо = ОбъектXDTOРеестрВыплатСамозанятым.Свойства().Получить("ФизЛицо");
		ОбъектXDTOXDTOФизЛицо = ФабрикаXDTO.Создать(СвойствоXDTOФизЛицо.Тип);
		ЗаполнитьЗначенияСвойств(ОбъектXDTOXDTOФизЛицо, СтрокаФизЛицо);
		СписокXDTO.Добавить(ОбъектXDTOXDTOФизЛицо);
		
	КонецЦикла; 
	КорневойОбъектXDTO.Установить("РеестрВыплатСамозанятым", ОбъектXDTOРеестрВыплатСамозанятым);
	СвойствоXDTOКонтрольныеСуммы = КорневойОбъектXDTO.Свойства().Получить("КонтрольныеСуммы");
	ОбъектXDTOКонтрольныеСуммы = ФабрикаXDTO.Создать(СвойствоXDTOКонтрольныеСуммы.Тип);
	ОбъектXDTOКонтрольныеСуммы.КоличествоЗаписей = ДанныеДокумента.КоличествоЗаписей;
	ОбъектXDTOКонтрольныеСуммы.СуммаИтого = ДанныеДокумента.СуммаИтого;
	КорневойОбъектXDTO.Установить("КонтрольныеСуммы", ОбъектXDTOКонтрольныеСуммы);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, 
							КорневойОбъектXDTO, 
							КорневоеСвойствоXDTO.ЛокальноеИмя, 
							КорневоеСвойствоXDTO.URIПространстваИмен, 
							, 
							НазначениеТипаXML.Явное);
	
	ТекстXML = ЗаписьXML.Закрыть();	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстXML);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаФайла);	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляПолученияФайлаПодтверждения

// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ ОТВЕТА ИЗ БАНКА

// Вызывается при получении файла из банка.
//
// Параметры:
//  АдресДанныхФайла - Строка - адрес временного хранилища с двоичными данными файла.
//  ОбъектВладелец - ДокументСсылка - (возвращаемый параметр) ссылка на документ, который был создан на основании ЭД.
//  ДанныеОповещения - Структура - (возвращаемый параметр) данные для вызова метода Оповестить на клиенте.
//                 * Ключ - Строка - имя события.
//                 * Значение - Произвольный - параметр сообщения.
Процедура ПриПолученииXMLФайлаЧекиВыплатСамозанятым(АдресДанныхФайла, ОбъектВладелец, ДанныеОповещения)
	
	СозданныйДокумент = ЗагрузитьРеестрЧековИзВременногоХранилища(АдресДанныхФайла);
	ДанныеОповещения = Новый Структура();
	// В очень редких случаях СозданныйДокумент может быть битой ссылкой, в этом случае нам ничего делать не надо.
	// Поэтому ниже в условии проверяются только два наиболее частых и вероятных состояния.
	// СозданныйДокумент может быть битой ссылкой только в редких (нестандартных) случаях, 
	//  когда обмен с одним и тем же банком был из разных баз (копий баз), 
	//  или когда в этой базе был физически удален реестр выплат самозанятым, 
	//  а в банке о нем информация осталась, и банк прислал эту информацию к нам
	Если СозданныйДокумент = Неопределено Тогда		
		ТекстСообщения = НСтр("ru = 'При загрузке реестра чеков банка были ошибки'");
		Операция = НСтр("ru = 'Загрузка реестра чеков из банка'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
	ИначеЕсли  ОбщегоНазначения.СсылкаСуществует(СозданныйДокумент) Тогда
		ТекстСообщения = НСтр("ru = 'Все файлы успешно загружены'");
		ДанныеОповещения.Вставить(ПривестиСтрокуКИдентификатору(Строка(СозданныйДокумент)), ТипЗнч(СозданныйДокумент));		
		ОбъектВладелец = СозданныйДокумент;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Производит форматирование строки
//
Функция ПривестиСтрокуКИдентификатору(СтрокаДляПреобразования) 
	
	СтрокаВИдентификатор = СтрЗаменить(СтрокаДляПреобразования, ".", "_");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, "-", "_");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, " ", "");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, "~", "");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, "%", "");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, "/", "");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, "\", "");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, ":", "_");
	СтрокаВИдентификатор = СтрЗаменить(СтрокаВИдентификатор, ";", "");
	
	Возврат СтрокаВИдентификатор;
	
КонецФункции

// Загружает подтверждение банка из файла.
//
// Параметры:
//		АдресДанныхФайла - Строка - адрес во временном хранилище, 
//										в котором содержится XML данные по реестру чеков выплат самозанятым, 
//										отправленные банком
//
// Возвращаемое значение:
//		СозданныйДокумент - ДокументСсылка.
//
Функция ЗагрузитьРеестрЧековИзВременногоХранилища(АдресДанныхФайла) 
	
	СозданныйДокумент = Неопределено;
	РасширениеФайла = "xml";
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресДанныхФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	СозданныйДокумент = ЗагрузитьРеестрЧековИзФайла(ИмяВременногоФайла);	
	// Удаляем временный файл
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат СозданныйДокумент;	
	
КонецФункции

// Загружает подтверждение банка из файла.
//
// Параметры:
//		ПолноеИмяФайла - Строка - расположение файла.
//
// Возвращаемое значение:
//		Ссылка на документ или Неопределено, если документ не создан.
//
Функция ЗагрузитьРеестрЧековИзФайла(ПолноеИмяФайла)
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоВыплатамСамозанятым.ПространствоИмен);
	ТипОбъектаXDTO = Пакет.КорневыеСвойства[0].Тип;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	Попытка
		ОбъектXDTOВременный = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);		
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
		ЗаполнитьОбъектXDTO(ОбъектXDTO, ОбъектXDTOВременный);		
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Неверный формат файла %1'"), ПолноеИмяФайла);
		Операция = НСтр("ru = 'Загрузка реестра чеков из банка'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
		Возврат Неопределено;
	КонецПопытки;
	ЧтениеXML.Закрыть();
	// СОЗДАТЬ ТАБЛИЦУ С РАЗОБРАННЫМ XML	
	ДанныеЗаполнения = ДанныеЗаполнения();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОбъектXDTO);	
	Если ОбъектXDTO.Свойства().Получить("КонтрольныеСуммы") <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ОбъектXDTO.КонтрольныеСуммы);
	КонецЕсли;
	Если ОбъектXDTO.Получить("РеестрЧековСамозанятых") <> Неопределено Тогда
		Если ОбъектXDTO.Получить("РеестрЧековСамозанятых").Свойства().Получить("ФизЛицо") <> Неопределено Тогда		
			Индекс = 0;
			Для Каждого ЧекXDTO Из ОбъектXDTO.РеестрЧековСамозанятых.ФизЛицо Цикл
				ДанныеЗаполненияЧекСамозанятого = ДанныеЗаполнения.ЧекиСамозанятых.Добавить();
				ЗаполнитьЗначенияСвойств(ДанныеЗаполненияЧекСамозанятого, ЧекXDTO);				
				ДанныеЗаполненияЧекСамозанятого.НомерСтроки = Индекс;
				Индекс = Индекс + 1;
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;
	// ПЕРЕДАТЬ В ПЕРЕОПРЕДЕЛЯЕМЫЙ МОДУЛЬ И ЗАПОЛНИТЬ ДОКУМЕНТ
	Если ОбъектXDTO.Получить("РеестрЧековСамозанятых") <> Неопределено Тогда	
		СсылкаНаДокумент = Неопределено;
		ОбменСБанкамиВыплатыСамозанятымПереопределяемый.ПриЗагрузкеРеестраЧековВыплатСамозанятым(
			ДанныеЗаполнения, 
			СсылкаНаДокумент);
		Возврат СсылкаНаДокумент;
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет сведений о реестре чеков из банка.'");
		Операция = НСтр("ru = 'Загрузка реестра чеков из банка'");
		ПодробныйТекстОшибки = ТекстСообщения;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			Операция, 
			ПодробныйТекстОшибки, 
			ТекстСообщения, 
			"ОбменСБанками");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает структуру полей для последующего заполнения
//
Функция ДанныеЗаполнения()
	
	Результат = Новый Структура();
	Результат.Вставить("НаименованиеОрганизации", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("РасчетныйСчетОрганизации", "");
	Результат.Вставить("БИК", "");
	Результат.Вставить("ИдПервичногоДокумента", "");
	Результат.Вставить("НомерРеестра", "");
	Результат.Вставить("ДатаРеестра", Дата(1,1,1));
	Результат.Вставить("НомерПлатежногоПоручения", "");
	Результат.Вставить("ДатаПлатежногоПоручения", Дата(1,1,1));
	
	ЧекиСамозанятых = Новый ТаблицаЗначений;
	ТипСтрока30 = ОбщегоНазначения.ОписаниеТипаСтрока(30);
	ЧекиСамозанятых.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ЧекиСамозанятых.Колонки.Добавить("Фамилия", ТипСтрока30);
	ЧекиСамозанятых.Колонки.Добавить("Имя", ТипСтрока30);
	ЧекиСамозанятых.Колонки.Добавить("Отчество", ТипСтрока30);
	ЧекиСамозанятых.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ЧекиСамозанятых.Колонки.Добавить("БИК", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ЧекиСамозанятых.Колонки.Добавить("СсылкаНаЧек", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ЧекиСамозанятых.Колонки.Добавить("Результат", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ЧекиСамозанятых.Колонки.Добавить("РасшифровкаРезультата", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ЧекиСамозанятых.Колонки.Добавить("НомерСтрокиТабличнойЧасти", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Результат.Вставить("ЧекиСамозанятых", ЧекиСамозанятых);
	
	Результат.Вставить("КоличествоЗаписей", 0);
	Результат.Вставить("СуммаИтого", 0);
	
	Возврат Результат;
	
КонецФункции

// Копирует значения свойств ОбъектXDTO(источник) в свойства ОбъектXDTO(приемник).
// Сопоставление производится по именам свойств.
//
Процедура ЗаполнитьОбъектXDTO(ОбъектXDTOПриемник, ОбъектXDTOИсточник)
	
	Для Каждого СвойствоОбъектаXDTO Из ОбъектXDTOИсточник.Свойства() Цикл
		ТипСвойства = ОбъектXDTOПриемник.Свойства().Получить(СвойствоОбъектаXDTO.Имя).Тип;
		Если ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") Тогда
			Если ТипЗнч(ОбъектXDTOПриемник[СвойствоОбъектаXDTO.Имя]) = Тип("СписокXDTO") Тогда
				СписокXDTOПриемник = ОбъектXDTOПриемник.ПолучитьСписок(СвойствоОбъектаXDTO.Имя);
				Если ТипЗнч(ОбъектXDTOИсточник[СвойствоОбъектаXDTO.Имя]) = Тип("СписокXDTO") Тогда
					СписокXDTOИсточник = ОбъектXDTOИсточник.ПолучитьСписок(СвойствоОбъектаXDTO.Имя);
				Иначе
					СписокXDTOИсточник = Новый Массив;
					СписокXDTOИсточник.Добавить(ОбъектXDTOИсточник[СвойствоОбъектаXDTO.Имя]);
				КонецЕсли;
				Для Каждого ОбъектXDTOСпискаИсточника Из СписокXDTOИсточник Цикл
					ОбъектXDTOСпискаПриемника = ФабрикаXDTO.Создать(ОбъектXDTOПриемник.Свойства().Получить(СвойствоОбъектаXDTO.Имя).Тип);
					ЗаполнитьОбъектXDTO(ОбъектXDTOСпискаПриемника, ОбъектXDTOСпискаИсточника);
					СписокXDTOПриемник.Добавить(ОбъектXDTOСпискаПриемника);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Если ОбъектXDTOИсточник.ПолучитьXDTO(СвойствоОбъектаXDTO.Имя) <> Неопределено Тогда
				ОбъектXDTOПриемник[СвойствоОбъектаXDTO.Имя] = ФабрикаXDTO.Создать(ОбъектXDTOПриемник.Свойства().Получить(СвойствоОбъектаXDTO.Имя).Тип);
				ЗаполнитьОбъектXDTO(ОбъектXDTOПриемник[СвойствоОбъектаXDTO.Имя], ОбъектXDTOИсточник.ПолучитьXDTO(СвойствоОбъектаXDTO.Имя));
			КонецЕсли;
		Иначе
			Если ТипСвойства.Фасеты <> Неопределено Тогда
				// Значение может быть указано в различных вариантах заглавных и прописных символов.
				// Нам нужно получить точное соответствие значения со значениями перечисления из формата обмена.
				ЗначениеСвойстваXDTO = ОбъектXDTOИсточник.ПолучитьXDTO(СвойствоОбъектаXDTO.Имя);
				Для Каждого Фасет Из ТипСвойства.Фасеты Цикл
					Если Фасет.Вид <> ВидФасетаXDTO.Перечисление Тогда
						Продолжить;
					КонецЕсли;
					Если ВРег(Фасет.Значение) = ВРег(ЗначениеСвойстваXDTO.Значение) Тогда
						ОбъектXDTOИсточник[СвойствоОбъектаXDTO.Имя] = Фасет.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗначениеИсточника = ОбъектXDTOИсточник.ПолучитьXDTO(СвойствоОбъектаXDTO.Имя);
			// Значение может быть пустым, проверим
			Если ТипЗнч(ЗначениеИсточника) <> Тип("ОбъектXDTO") И ЗначениеИсточника <> Неопределено Тогда
				ОбъектXDTOПриемник[СвойствоОбъектаXDTO.Имя] = ЗначениеИсточника;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Путь)

	Возврат РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTO, Путь);

КонецФункции

// Производит чтение из файла обмена отправленного банком.
// Берется информация подтверждения зачисления денежных средств самозанятым
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.НастройкиОбменСБанками
//  ПакетОбменСБанками - ДокументСсылка.ПакетОбменСБанками
//  ДвоичныеДанныеФайла - ДвоичныеДанные - данные XML с реестром чеков выплат самозанятым, отправленные банком.
//  Document - ЗначениеСвойстваXDTO - Значение свойства "ResultBank" в ветке "Success.GetPacketResponse.Document" 
//  				в файле обмена полученном из банка.
//  НовоеСообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками.
//  ДанныеВозврата - ДвоичныеДанные - данные XML с реестром чеков выплат самозанятым, сформированные конфигурацией.
//
Процедура ПрочитатьПодтверждениеЗачисленияВыплатСамозанятым(НастройкаОбмена,
		ПакетОбменСБанками, ДвоичныеДанныеФайла, Document, НовоеСообщениеОбмена,
		ДанныеВозврата)   Экспорт

	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);

	ОбъектВладелец = Неопределено;
	ДанныеОповещения = Новый Структура;
	
	НомерДокумента = "";
	
	ПриПолученииXMLФайлаЧекиВыплатСамозанятым(АдресВХранилище, ОбъектВладелец, ДанныеОповещения);

	СообщениеРодитель = Неопределено;
	Если НЕ ЗначениеЗаполнено(ОбъектВладелец) Тогда
		ОбъектВладелец = НастройкаОбмена;		
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
								ОбъектВладелец.Номер, 
								Истина, 
								Ложь);
		СообщениеРодитель = ОбменСБанкамиСлужебный.РодительскоеСообщение(
								ОбъектВладелец, 
								Перечисления.ВидыЭДОбменСБанками.РеестрВыплатСамозанятым);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;

	СтруктураРеквизитов.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.РеестрЧековВыплатСамозанятым);
	СтруктураРеквизитов.Вставить("НастройкаОбмена", НастройкаОбмена);
	СтруктураРеквизитов.Вставить("Направление", Перечисления.НаправленияЭДО.Входящий);
	СтруктураРеквизитов.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
	СтруктураРеквизитов.Вставить("ВнешнийИдентификатор", ЗначениеСвойстваXDTO(Document, "id"));
	СтруктураРеквизитов.Вставить("СсылкаНаОбъект", ОбъектВладелец);
	СтруктураРеквизитов.Вставить("ОбъектВладелец", ОбъектВладелец);
	СтруктураРеквизитов.Вставить("НомерДокументаОтправителя", НомерДокумента);
	СтруктураРеквизитов.Вставить("ФорматФайла", "xml");
	Если СообщениеРодитель <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("СообщениеРодитель", СообщениеРодитель);
	КонецЕсли;

	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(СтруктураРеквизитов, НовоеСообщениеОбмена);
	Если Не ЗначениеЗаполнено(НовоеСообщениеОбмена) Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеОповещения.Количество() Тогда
		ДанныеВозврата.МассивОповещений.Добавить(ДанныеОповещения);
	КонецЕсли;

	ОбменСБанкамиСлужебный.ДобавитьСообщениеОбменаВПакет(ПакетОбменСБанками, НовоеСообщениеОбмена);

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Создает структуру данных для заполнения информации по платежному поручению
//
// Возвращаемое значение:
//		ДанныеПлатежногоПоручения - Структура - структура данных для заполнения информации по платежному поручению
Функция ДанныеПлатежногоПоручения() Экспорт
	
	ДанныеПлатежногоПоручения = Новый Структура();
	ДанныеПлатежногоПоручения.Вставить("НомерПлатежногоПоручения", "");
	ДанныеПлатежногоПоручения.Вставить("ДатаПлатежногоПоручения", Дата(1,1,1));
	ДанныеПлатежногоПоручения.Вставить("РасчетныйСчетОрганизации", "");
	ДанныеПлатежногоПоручения.Вставить("БИК", "");
	ДанныеПлатежногоПоручения.Вставить("Организация", Неопределено);
	ДанныеПлатежногоПоручения.Вставить("Банк", Неопределено);
	
	Возврат ДанныеПлатежногоПоручения;
	
КонецФункции

// Возвращает структуру документа, используемую для формирования файла обмена, печатного документа.
//
// Возвращаемое значение:
//		ДанныеЗаполнения - Структура - документа, используемую для формирования файла обмена, печатного документа
Функция ДанныеЗаполненияРеестрВыплатСамозанятым() Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Документ", Неопределено);
	ДанныеЗаполнения.Вставить("НомерРеестра", "");
	ДанныеЗаполнения.Вставить("ДатаРеестра", Дата("00010101"));
	ДанныеЗаполнения.Вставить("НаименованиеОрганизации", "");
	ДанныеЗаполнения.Вставить("ИНН", "");	
	ДанныеЗаполнения.Вставить("Организация", Неопределено);
	ДанныеЗаполнения.Вставить("РасчетныйСчетОрганизации", "");	
	ДанныеЗаполнения.Вставить("БИК", "");
	ДанныеЗаполнения.Вставить("КодировкаФайла", "UTF8");
	ДанныеЗаполнения.Вставить("КоличествоЗаписей", 0);
	ДанныеЗаполнения.Вставить("СуммаИтого", 0);	
	ДанныеЗаполнения.Вставить("ИдПервичногоДокумента", "");
	ДанныеЗаполнения.Вставить("НомерПлатежногоПоручения", "");
	ДанныеЗаполнения.Вставить("ДатаПлатежногоПоручения", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДатаФормирования", Дата("00010101"));
	
	ФизЛица = Новый ТаблицаЗначений;
	ТипСтрока30 = ОбщегоНазначения.ОписаниеТипаСтрока(30);
	ФизЛица.Колонки.Добавить("Нпп", ОбщегоНазначения.ОписаниеТипаЧисло(7,0));
	ФизЛица.Колонки.Добавить("Фамилия", ТипСтрока30);
	ФизЛица.Колонки.Добавить("Имя", ТипСтрока30);
	ФизЛица.Колонки.Добавить("Отчество", ТипСтрока30);
	ФизЛица.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ФизЛица.Колонки.Добавить("БИК", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ФизЛица.Колонки.Добавить("НомерСчета", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ФизЛица.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(31,2));
	ФизЛица.Колонки.Добавить("НазначениеПлатежа", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	
	ДанныеЗаполнения.Вставить("ФизЛица", ФизЛица);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти