///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Облачный архив".
// ОбщийМодуль.ОблачныйАрхив20Клиент.
//
// Клиентские процедуры и функции облачного архива:
//  - универсальный обработчик перехода по навигационным ссылкам;
//  - автоматическое резервное копирование;
//  - обработки событий Библиотеки стандартных подсистем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Вызывается из обработчика ОбработкаОповещения формы Обслуживание панели администрирования БСП. Управляет отображением
// элементов управления связанных состоянием работы облачного архива.
//
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБСП.Форма.Обслуживание
//  ИмяСобытия - Строка
//  Параметр - Произвольный
//  Источник - Произвольный
//
Процедура Обслуживание_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ИмяСобытия = ИмяСобытияОповещенияНастройкиОблачногоАрхиваСохранены() Тогда
		Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивРаботает;
		ОблачныйАрхивРаботает = Параметр;	// Неопределено, Булево
		Элементы.ГруппаОблачныйАрхивРаботает.Видимость = (ОблачныйАрхивРаботает = Истина);
	ИначеЕсли ИмяСобытия = ИмяСобытияОповещенияОблачныйАрхивСервисНеПодключен() Тогда
		Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивНеПодключен;
	ИначеЕсли ИмяСобытия = ИмяСобытияОповещенияОблачныйАрхивСервисЗаблокирован() Тогда
		Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивЗаблокирован;
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов в соответствии с выбранным вариантом хранения резервных копий.
//
// Параметры:
//  Форма - см. Обработка.ПанельАдминистрированияБСП.Форма.Обслуживание
//  ХранениеРезервныхКопий - Строка - способ хранения резервных копий:
//    • "СтандартныеПодсистемы.РезервноеКопированиеИБ" - если используется подсистема резервного копирования БСП.
//    • "ИнтернетПоддержкаПользователей.ОблачныйАрхив20" - если используется подсистема резервного копирования БИП.
//
Процедура Обслуживание_ХранениеРезервныхКопийПриИзменении(Форма, ХранениеРезервныхКопий) Экспорт
	
	ПараметрыОкружения = ОблачныйАрхив20ВызовСервера.ПриИзмененииХраненияРезервныхКопий(ХранениеРезервныхКопий);
	Элементы           = Форма.Элементы;
	
	Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = 
		Элементы[ПараметрыОкружения.СтраницаРезервногоКопированияИВосстановления];
		
	Если ПараметрыОкружения.ОблачныйАрхивРаботает = Неопределено Тогда
		Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница =
			Элементы[ПараметрыОкружения.СтраницаСостоянияОблачногоАрхива];
		Элементы.ГруппаОблачныйАрхивРаботает.Видимость = Ложь;
	Иначе
		Элементы.ГруппаОблачныйАрхивРаботает.Видимость = ПараметрыОкружения.ОблачныйАрхивРаботает;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из панели администрирования БСП. Открывает форму подключения, обновления или настройки Облачного архива в
// зависимости от текущего статуса работы подсистемы.
//
Процедура ОткрытьФормуНастройкиОблачногоАрхива() Экспорт
	
	ОткрытьФорму("Обработка.ОблачныйАрхив20.Форма.НастройкаСервиса", , , "НастройкаСервисаОблачныйАрхив");
	
КонецПроцедуры

// Вызывается из панели администрирования БСП. Открывает форму создания ручной резервной копии.
//
Процедура ОткрытьФормуРезервногоКопирования() Экспорт
	
	ОткрытьФорму("Обработка.ОблачныйАрхив20.Форма.СозданиеРезервнойКопии", , , "СозданиеРезервнойКопии");
	
КонецПроцедуры

// Вызывается из панели администрирования БСП. Открывает веб-страницу списка ранее выполненных резервных копий на
// портале облачного архива.
//
Процедура ОткрытьСписокРезервныхКопий() Экспорт
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		АдресСтраницыСпискаРезервныхКопий());
	
КонецПроцедуры

#КонецОбласти

// Параметры создания резервной копии в Облачный архив.
//
// Возвращаемое значение:
//  Структура:
//    * Комментарий - Строка - дополнительная информация, которая будет отображаться в интерфейсе личного кабинета
//        пользователя на портале Облачного архива.
//        Значение по умолчанию: см. СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента свойство ЗаголовокПриложения.
//    * ЗапуститьПриОткрытии - Булево - Истина, если необходимо незамедлительно запустить процесс резервного
//        копирования.
//        Значение по умолчанию: Ложь.
//
Функция ПараметрыСозданияРезервнойКопии() Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	
	Результат = Новый Структура();
	Результат.Вставить("Комментарий"         , ПараметрыКлиента.ЗаголовокПриложения);
	Результат.Вставить("ЗапуститьПриОткрытии", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Запускает процесс создания резервной копии в Облачный архив.
//
// Параметры:
//  Параметры - Неопределено - запускает процесс создания резервной копии с параметрами по умолчанию.
//    см. ОблачныйАрхив20Клиент.ПараметрыСозданияРезервнойКопии
//            - см. ОблачныйАрхив20Клиент.ПараметрыСозданияРезервнойКопии
//
Процедура СоздатьРезервнуюКопию(Параметры = Неопределено) Экспорт
	
	ПараметрыОперации = ПараметрыСозданияРезервнойКопии();
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, Параметры);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыСозданияРезервнойКопии", ПараметрыОперации);
	
	ОткрытьФорму(
		"Обработка.ОблачныйАрхив20.Форма.СозданиеРезервнойКопии",
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// См. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПараметрыРаботыКлиента   = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	ПараметрыОблачногоАрхива = ПараметрыРаботыКлиента.ИнтернетПоддержкаПользователей.ОблачныйАрхив;
	
	Если ПараметрыОблачногоАрхива = Неопределено Тогда
		Возврат;
	ИначеЕсли ПараметрыОблачногоАрхива.ОблачныйАрхивПодключен Тогда
		
		// Сценарий "Перемещение информационной базы"
		Если ПараметрыОблачногоАрхива.ПоказатьФормуВосстановленияРаботыОблачногоАрхива Тогда
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
				"ПоказатьФормуВосстановленияРаботыОблачногоАрхива",
				ЭтотОбъект);
		КонецЕсли;
		
		// Сценарий "Создание ручной резервной копии"
		Если ПараметрыОблачногоАрхива.ПоказатьФормуСтатусаРучногоРезервногоКопирования <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("НастройкиКопирования"     ,
				ПараметрыОблачногоАрхива.ПоказатьФормуСтатусаРучногоРезервногоКопирования);
			ПараметрыФормы.Вставить("ПоказатьСтатусКопирования", Истина);
			
			ОткрытьФорму(
				"Обработка.ОблачныйАрхив20.Форма.СозданиеРезервнойКопии",
				ПараметрыФормы,
				,
				"НастройкаСервисаОблачныйАрхив");
			
		КонецЕсли;
		
		// Сценарий "Автоматическое резервное копирование"
		ДлительнаяОперация = Новый Структура(ПараметрыОблачногоАрхива.АвтоматическоеАрхивирование);	// см. ОблачныйАрхив20.ОбновитьВремяДоАвтоматическогоРезервногоКопированияВФоне
		Если ДлительнаяОперация.ДлительнаяОперацияЗапущена Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"ОбновитьВремяДоАвтоматическогоРезервногоКопирования",
				ЭтотОбъект,
				ДлительнаяОперация.ДополнительныеПараметры);
			
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, НастройкиОжидания);
			
		Иначе
			ОбновитьВремяДоАвтоматическогоРезервногоКопирования(
				Неопределено,
				ДлительнаяОперация.ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		ПодключитьОбработчикОжидания("ОблачныйАрхив20_КонтрольИзмененияПараметровРезервногоКопирования", 43200, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму восстановления работы Облачного архива. Только для внутреннего использования.
//
// Параметры:
//  Параметры - Произвольный
//  ДополнительныеПараметры - Произвольный
//
Процедура ПоказатьФормуВосстановленияРаботыОблачногоАрхива(Параметры, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеОткрытияОкнаВосстановленияРаботыОблачногоАрхива",
		ЭтотОбъект,
		Параметры);
	
	ОткрытьФорму(
		"Обработка.ОблачныйАрхив20.Форма.НастройкаСервиса",
		,
		,
		"НастройкаСервисаОблачныйАрхив",
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Обработки завершения работы с окном восстановления Облачного архива. Только для внутреннего использования.
//
// Параметры:
//  Результат - Произвольный
//  Параметры - Структура:
//    * ОбработкаПродолжения - ОписаниеОповещения
//
Процедура ПослеОткрытияОкнаВосстановленияРаботыОблачногоАрхива(Результат, Параметры) Экспорт
	
	ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(60);
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Возвращает URL адрес веб-страницы информации о сервисе облачного архива портале 1С:ИТС.
//
// Возвращаемое значение:
//  Строка
//
Функция АдресСтраницыОписанияСервисаОблачныйАрхив()
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("/app/arhiv", 0);
	
КонецФункции

// Возвращает URL адрес веб-страницы справки по облачному архиву.
//
// Возвращаемое значение:
//  Строка
//
Функция АдресСтраницыСправкиОблачногоАрхива()
	
	
	Возврат "https://backup.1c.ru/help";
	
КонецФункции

// Возвращает URL адрес веб-страницы списка ранее выполненных резервных копий на портале облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция АдресСтраницыСпискаРезервныхКопий()
	
	
	Возврат "https://backup.1c.ru/#/client/archives?needAccessToken=true";
	
КонецФункции

// Обработчик события "ОбработкаНавигационнойСсылки" любой формы подсистемы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой инициировано событие.
//  ЭлементФормы - ДекорацияФормы - элемент формы, в котором инициировано событие.
//  НавигационнаяСсылка - Строка - навигационная ссылка. Возможные стандартные значения:
//    • Backup1C:About - информация о сервисе.
//    • Backup1C:UserAgreement - пользовательское соглашение.
//    • Backup1C:Help - открывает веб-страницу справки сервиса.
//    • Backup1C:OpenSettings - открывает форму настроек подсистемы.
//    • Backup1C:OpenArchives - открывает веб-страницу списка резервных копий.
//    • Open:Log - открывает журнал регистраций с установленным отбором по текущему пользователю.
//  СтандартнаяОбработкаФормой - Булево - в этот параметр возвратить Ложь, если надо запретить стандартную обработку
//    события формой.
//
Процедура ОбработкаНавигационнойСсылки(Форма, ЭлементФормы, НавигационнаяСсылка, СтандартнаяОбработкаФормой) Экспорт

	Если СтрСравнить(НавигационнаяСсылка, "Backup1C:About") = 0 Тогда
		СтандартнаяОбработкаФормой = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			АдресСтраницыОписанияСервисаОблачныйАрхив());
	ИначеЕсли СтрСравнить(НавигационнаяСсылка, "Backup1C:UserAgreement") = 0 Тогда
		СтандартнаяОбработкаФормой = Ложь;
		ОткрытьФорму("Обработка.ОблачныйАрхив20.Форма.ПользовательскоеСоглашение", , ЭтотОбъект);
	ИначеЕсли СтрСравнить(НавигационнаяСсылка, "Backup1C:Help") = 0 Тогда
		СтандартнаяОбработкаФормой = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			АдресСтраницыСправкиОблачногоАрхива());
	ИначеЕсли СтрСравнить(НавигационнаяСсылка, "Backup1C:OpenSettings") = 0 Тогда
		СтандартнаяОбработкаФормой = Ложь;
		ОткрытьФормуНастройкиОблачногоАрхива();
	ИначеЕсли СтрСравнить(НавигационнаяСсылка, "Backup1C:OpenArchives") = 0 Тогда
		СтандартнаяОбработкаФормой = Ложь;
		ОткрытьСписокРезервныхКопий();
	ИначеЕсли СтрСравнить(НавигационнаяСсылка, "Open:Log") = 0 Тогда
		СтандартнаяОбработкаФормой = Ложь;
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Новый Структура("Пользователь", ИмяПользователя()));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеРезервноеКопирование

// Подключает различные обработчики ожидания для обеспечения работы автоматического резервного копирования.
//
// Параметры:
//  Результат - Структура: см. ДлительныеОперации.ВыполнитьФункцию
//            - Неопределено - автоматическое резервное копирование не работает.
//  ДополнительныеПараметры - Структура:
//    * ОблачныйАрхивПодключен - Булево - Истина, если информационная база подключена к Облачному архиву.
//    * ДатаОбновленияНастроек - Дата - дата последнего обновления настроек в формате универсального времени.
//        Используется для определения необходимости выполнить обновление времени наступления автоматического
//        резервного копирования информационной базы.
//    * АвтоАрхивированиеВключено - Булево - Истина, если автоматическое резервное копирование включено и работает.
//    * ЗавершатьРаботуПользователей - Булево - признак принудительного завершения работы пользователей при
//        автоматическом резервном копировании информационной базы. Параметр заполняется если
//        ОблачныйАрхивПодключен = Истина.
//
Процедура ОбновитьВремяДоАвтоматическогоРезервногоКопирования(Результат, ДополнительныеПараметры) Экспорт
	
	// Автоматическое резервное копирование выключено
	Если Результат = Неопределено Тогда
		
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			ИмяПараметраПриложенияАвтоАрхивированиеВключено(),
			Ложь);
		
		ПодключитьОбработчикОжидания("ОблачныйАрхив20_КонтрольИзмененияПараметровРезервногоКопирования", 43200, Истина);
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	// см. ОблачныйАрхив20.ЗапросВремениДоАвтоматическогоРезервногоКопирования
		Если РезультатВыполнения.Статус = ОблачныйАрхив20КлиентСервер.ИдентификаторСтатусаОтветПолученУспешно() Тогда
			
			// Сброс количества попыток запроса времени до копирования
			ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
				ИмяПараметраПриложенияНомерПопыткиЗапроса(),
				Неопределено);
			
			// Сохранение признака автоматического архивирования в глобальной переменной
			ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
				ИмяПараметраПриложенияАвтоАрхивированиеВключено(),
				ДополнительныеПараметры.АвтоАрхивированиеВключено);
			
			// Сохранение даты актуальности настроек резервного копирования
			ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
				ИмяПараметраПриложенияДатаОбновленияНастроек(),
				ДополнительныеПараметры.ДатаОбновленияНастроек);
			
			Если РезультатВыполнения.СекундДоКопирования = Неопределено Тогда
				// Сервису не удалось получить время до следующего резервного копирования
				ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(43200);
			ИначеЕсли РезультатВыполнения.СекундДоКопирования > 0 Тогда
				
				//@skip-check use-non-recommended-method
				ВремяКопирования = ТекущаяДата()	// АПК:143 Используется только в клиентском коде.
					+ РезультатВыполнения.СекундДоКопирования;
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					ИмяПараметраПриложенияВремяРезервногоКопирования(),
					ВремяКопирования);
				
				ПодключитьОбработчикКонтроляПриближенияРезервногоКопирования(
					ДополнительныеПараметры.ЗавершатьРаботуПользователей);
				
			КонецЕсли;
			
		Иначе
			ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования();
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		
	// Ошибка при выполнении запроса к сервису
	Иначе
		ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования();
	КонецЕсли;
	
КонецПроцедуры

// Подключает обработчик контроля приближения резервного копирования.
//
// Параметры:
//  СекундДоКопирования - Число - количество секунд до запланированного резервного копирования.
//  ЗавершатьРаботу     - Булево - Истина, если работу пользователей необходимо завершить принудительно.
//
Процедура ПодключитьОбработчикКонтроляПриближенияРезервногоКопирования(ЗавершатьРаботу) Экспорт
	
	ВремяКопирования = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
		ИмяПараметраПриложенияВремяРезервногоКопирования());	// Неопределено, Дата
	
	// Выполнить повторный контроль с обновлением времени до резервного копирования через 12 часов
	Если ВремяКопирования = Неопределено Тогда
		ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(43200);
		Возврат;
	КонецЕсли;
	
	//@skip-check use-non-recommended-method
	ТекущаяДата         = ТекущаяДата();	// АПК:143 Используется только в клиентском коде.
	СекундДоКопирования = ВремяКопирования - ТекущаяДата;
	
	Сообщение  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В %1 будет выполнено резервное копирование информационной базы.
			|Рекомендуется завершить текущую работу и сохранить все свои данные.'"),
		Формат(ВремяКопирования, "ДФ=HH:mm"));
	
	// Время для резервного копирования наступило
	Если СекундДоКопирования <= 0 Тогда
		Если ЗавершатьРаботу Тогда
			УстановитьБлокировкуИПрекратитьРаботуСистемы(СекундДоКопирования);
		Иначе
			ПоказатьВопросЗавершенияСеанса(Сообщение, Истина, Истина);
		КонецЕсли;
	Иначе
		
		// Правило:
 		// 1. Каждые 12 часов, не зависимо от полученного времени, выполняется контроль с обновлением
		//    времени до копирования.
		// 2. Если время до копирования больше 15 минут, то первый контроль будет выполнен за 15 минут до
		//    целевого времени с обновлением времени до копирования.
		// 3. За 15 минут до целевого времени каждые 5 минут будет выводиться сообщение о завершении работы
		//    программы. Если в настройках резервного копирования запрещено завершать работу принудительно,
		//    то сообщения будут нести рекомендательный характер.
		
		// До резервного копирования более 12 часов 15 минут
		Если СекундДоКопирования - 900 > 43200 Тогда
			ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(43200);
		// До резервного копирования более 15 минут и менее 12 часов 15 минут
		ИначеЕсли СекундДоКопирования > 900 Тогда
			ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(СекундДоКопирования - 900);
		// До резервного копирования менее 15 минут
		Иначе
			
			Минут5   = 300;
			Интервал = СекундДоКопирования % Минут5;
			
			Если ЗавершатьРаботу Тогда
				ПоказатьПредупреждение(, Сообщение);
			Иначе
				
				НомерПериода = Цел(СекундДоКопирования / Минут5) + ?(Интервал > 0, 1, 0);
				
				ПоказатьВопросЗавершенияСеанса(Сообщение, НомерПериода <= 0, Ложь);
				
			КонецЕсли;
			
			ОтключитьОбработчикОжидания("ОблачныйАрхив20_КонтрольПриближенияАвтоматическогоРезервногоКопирования");
			ПодключитьОбработчикОжидания(
				"ОблачныйАрхив20_КонтрольПриближенияАвтоматическогоРезервногоКопирования",
				?(Интервал = 0, Минут5, Интервал),
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает пользователю вопрос завершения сеанса и при необходимости устанавливает таймер на кнопке завершения.
//
// Параметры:
//  ТекстВопроса - Строка
//  ВключитьТаймер - Булево - включить таймер отсчета времени.
//  ПоследнийВопрос - Булево - Истина, если это последний вопрос-предложение завершить работу сеанса.
//
Процедура ПоказатьВопросЗавершенияСеанса(ТекстВопроса, ВключитьТаймер, ПоследнийВопрос)
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросЗавершенияСеансаЗавершение", ЭтотОбъект, ПоследнийВопрос);
	Таймаут    = ?(ВключитьТаймер, 60, 0);
	
	ПредставлениеКнопкиОтмена = ?(ПоследнийВопрос,
		НСтр("ru = 'Больше не показывать'"),
		"");
	
	ПараметрыВопроса = ПараметрыВопросаОЗавершенииРаботы();
	ПараметрыВопроса.ТекстСообщения            = ТекстВопроса;
	ПараметрыВопроса.ПредставлениеКнопкиОтмена = ПредставлениеКнопкиОтмена;
	ПараметрыВопроса.Таймаут                   = Таймаут;
	
	ПоказатьВопросОЗавершенииРаботы(Оповещение, ПараметрыВопроса);

КонецПроцедуры

// Обработка ответа на вопрос о завершении сеанса для резервного копирования.
//
// Параметры:
//  Ответ - КодВозвратаДиалога
//  ПоследнийВопрос - см. ПоказатьВопросЗавершенияСеанса.ПоследнийВопрос
//
Процедура ПоказатьВопросЗавершенияСеансаЗавершение(Ответ, ПоследнийВопрос) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ПрекратитьРаботуСистемы(Ложь);
	ИначеЕсли ПоследнийВопрос Тогда
		ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(60);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры вопроса о завершении работы для автоматического резервного копирования.
//
// Возвращаемое значение:
//  Структура:
//    * ТекстСообщения - Строка
//    * ПредставлениеКнопкиОтмена - Строка
//    * Таймаут - Число
//
Функция ПараметрыВопросаОЗавершенииРаботы()
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстСообщения"           , "");
	Результат.Вставить("ПредставлениеКнопкиОтмена", "");
	Результат.Вставить("Таймаут"                  , 0);
	
	Возврат Результат;
	
КонецФункции

// Показать форму вопроса о завершении работы системы.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//     вопроса со следующими параметрами:
//     • РезультатВопроса - результат выбора пользователя: значение системного перечисления или значение, связанное с
//         нажатой кнопкой. В случае закрытия диалога по истечении времени - значение системного перечисления OK.
//     • ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта
//         ОписаниеОповещения.
//  ПараметрыВопроса - см. ПараметрыВопросаОЗавершенииРаботы
//
Процедура ПоказатьВопросОЗавершенииРаботы(ОписаниеОповещенияОЗавершении, ПараметрыВопроса)
	
	// Обновление параметров открытого диалога вопроса
	Оповестить(
		ИмяСобытияОповещенияОбновитьДиалогВопросОЗавершенииРаботы(),
		ПараметрыВопроса);
	
	// Открытие диалога вопроса если он не был ранее открыт
	ОткрытьФорму(
		"ОбщаяФорма.ВопросОЗавершенииРаботыПередРезервнымКопированием",
		ПараметрыВопроса,
		,
		"ВопросОЗавершенииРаботы",
		,
		,
		ОписаниеОповещенияОЗавершении);	
	
КонецПроцедуры

// Возвращает имя события оповещения о необходимости обновить форму вопроса о завершении работы системы в связи с
// предстоящим автоматическим резервным копированием.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияОповещенияОбновитьДиалогВопросОЗавершенииРаботы() Экспорт
	
	Возврат "ОблачныйАрхив:ОбновитьДиалогВопросОЗавершенииРаботы";
	
КонецФункции

// Определяет время для повтора операции обновлении времени и подключает соответствующий обработчик ожидания.
//
Процедура ПодключитьОбработчикОбновленияВремениДоРезервногоКопирования(ВремяПовтора = Неопределено)
	
	Если ВремяПовтора = Неопределено Тогда
		
		// Определение времени для повтора операции обновлении времени и подключение обработчика ожидания
		НомерПопытки = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
			ИмяПараметраПриложенияНомерПопыткиЗапроса(),
			1);
		Если НомерПопытки = 1 Тогда
			ВремяПовтора = 300;		// 5 минут
		ИначеЕсли НомерПопытки = 2 Тогда
			ВремяПовтора = 1200;	// 20 минут (всего 25 минут)
		ИначеЕсли НомерПопытки = 3 Тогда
			ВремяПовтора = 3600;	// 1 минут (всего 1 час 25 минут)
		ИначеЕсли НомерПопытки = 4 Тогда
			ВремяПовтора = 7200;	// 2 часа (всего 3 часа 25 минут)
		ИначеЕсли НомерПопытки = 5 Тогда
			ВремяПовтора = 14400;	// 4 часа (всего 7 часов 25 минут)
		Иначе
			ВремяПовтора = 43200;	// 12 часов
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			ИмяПараметраПриложенияНомерПопыткиЗапроса(),
			НомерПопытки + 1);
		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ОблачныйАрхив20_ОбновитьВремяДоАвтоматическогоРезервногоКопирования");
	ПодключитьОбработчикОжидания(
		"ОблачныйАрхив20_ОбновитьВремяДоАвтоматическогоРезервногоКопирования",
		ВремяПовтора,
		Истина);
	
КонецПроцедуры

// Возвращает имя параметра приложения, в котором хранится время наступления автоматического резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяПараметраПриложенияВремяРезервногоКопирования()
	
	Возврат "ОблачныйАрхив20\ВремяРезервногоКопирования";
	
КонецФункции

// Возвращает имя параметра приложения, в котором хранится количество попыток обновить время до автоматического
// резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяПараметраПриложенияНомерПопыткиЗапроса()
	
	Возврат "ОблачныйАрхив20\НомерПопыткиОбновитьВремяДоРезервногоКопирования";
	
КонецФункции

// Возвращает имя параметра приложения, в котором хранится дата обновления настроек резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяПараметраПриложенияДатаОбновленияНастроек() Экспорт
	
	Возврат "ОблачныйАрхив20\ДатаОбновленияНастроек";
	
КонецФункции

// Возвращает имя параметра приложения, в котором хранится признак работы автоматического резервного копирования.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяПараметраПриложенияАвтоАрхивированиеВключено() Экспорт
	
	Возврат "ОблачныйАрхив20\АвтоАрхивированиеВключено";
	
КонецФункции

// Устанавливает блокировку сеансов на 15 минут и прекращает работу системы с признаком перезапуска.
//
// Параметры:
//  СекундДоРезервногоКопирования - Число - количество секунд, которое необходимо учесть при определении даты окончания
//    блокировки.
//
Процедура УстановитьБлокировкуИПрекратитьРаботуСистемы(СекундДоРезервногоКопирования)
	
	ОблачныйАрхив20ВызовСервера.УстановитьБлокировкуСоединений(СекундДоРезервногоКопирования);
	
	ПрекратитьРаботуСистемы(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ИменаСобытийОповещения

// Возвращает идентификатор имени события оповещения о сохранении настроек Облачного архива.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияОповещенияНастройкиОблачногоАрхиваСохранены() Экспорт
	
	Возврат "ОблачныйАрхив_НастройкиСохранены";
	
КонецФункции

// Возвращает идентификатор имени события оповещения Облачный архив не подключен.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияОповещенияОблачныйАрхивСервисНеПодключен() Экспорт
	
	Возврат "ОблачныйАрхив_СервисНеПодключен";
	
КонецФункции

// Возвращает идентификатор имени события оповещения Облачный архив заблокирован.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияОповещенияОблачныйАрхивСервисЗаблокирован() Экспорт
	
	Возврат "ОблачныйАрхив_СервисЗаблокирован";
	
КонецФункции

#КонецОбласти

#КонецОбласти
