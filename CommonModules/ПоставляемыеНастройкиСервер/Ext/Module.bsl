///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Поставляемые настройки".
// ОбщийМодуль.ПоставляемыеНастройкиСервер.
//
// Серверные процедуры загрузки файлов настроек:
//  - настройка обработки и загрузки файлов;
//  - обработчики обновления настроек;
//  - управление регламентными заданиями;
//  - интеграция с библиотеками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает описание настройки, которая  используется в программе.
//
// Возвращаемое значение:
//   Структура - содержит перечень значений необходимых для  подключения тестового периода:
//     * Идентификатор - Строка - идентификатор настройки в сервисе. Поле обязательно для заполнения,
//       если передана пустая строка, при переходе на новую версию будет вызвано исключение.
//       Длина не более 50 символов;
//     * ОбновлятьАвтоматически     - Булево - настройка которая включает/отключает автоматическое
//       обновления данных из сервиса;
//     * ОбщиеДанные - Булево - регулирует способ обработки поставляем данных.
//        Если Ложь, загрузка данных настройки будет произведена в каждую область базы данных.
//        Параметр используется только при работе в модели сервиса, в обычном режиме игнорируется;
//     * СохранятьФайлВКэш - Булево  - указывает на необходимость сохранения файла в кэше.
//        Если установлено значение Истина, после обработки данных настройки файл будет сохранен в кэше.
//
Функция ОписаниеНастройки() Экспорт
	
	ОписаниеНастройки = Новый Структура;
	ОписаниеНастройки.Вставить("Идентификатор", "");
	ОписаниеНастройки.Вставить("ОбновлятьАвтоматически", Истина);
	ОписаниеНастройки.Вставить("ОбщиеДанные", Истина);
	ОписаниеНастройки.Вставить("СохранятьФайлВКэш", Ложь);
	
	Возврат ОписаниеНастройки;
	
КонецФункции

// Выполняет загрузку обновления поставляемой настройки и обработку данных.
//
// Параметры:
//  Идентификаторы - Массив из Строка - идентификаторы поставляемых настроек в сервисе,
//   обновление которых необходимо загрузить.
//
// Возвращаемое значение:
//  Структура - содержит результат обновления поставляемой настройки:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//       может быть обработан вызывающим функционалом:
//         - <Пустая строка> - обновление выполнено успешно;
//         - "ОбновлениеНеТребуется" - обновление не обнаружено;
//         - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//         - "ПревышеноКоличествоПопыток" - превышено количество попыток
//         получения обновления с некорректным логином и паролем;
//         - "ОшибкаПодключения" - ошибка при подключении к сервису;
//         - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//         - "НеизвестнаяОшибка" - при получении информации возникла
//         неизвестная (не обрабатываемая) ошибка;
//         - "НеОбработан" - файл поставляемой настройки успешно загружен, но не обработан.
//         Ошибка может возникнуть, если отсутствуют алгоритмы обработки файла
//         см. процедуру ПоставляемыеНастройкиПереопределяемый.ПриЗагрузкеФайлаНастройки
//         и ИнтеграцияПодсистемБИП.ПриЗагрузкеФайлаНастройки;
//         - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//         - "НеизвестнаяНастройкаИлиПрограмма" - настройка или программа
//         в сервисе не обнаружен по переданному идентификатору;
//         - "ФайлНеЗагружен" - при загрузке файлов настройки возникли ошибки;
//         - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьПоставляемыеНастройки(Идентификаторы) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("КодОшибки", "");
	РезультатОбновления.Вставить("СообщениеОбОшибке", "");
	РезультатОбновления.Вставить("ИнформацияОбОшибке", "");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ДанныеАутентификации = Неопределено;
	Иначе
		Результат = ДанныеАутентификации();
		Если Результат.Ошибка Тогда
			РезультатОбновления.КодОшибки = КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОбновления.СообщениеОбОшибке = Результат.ИнформацияОбОшибке;
			РезультатОбновления.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке;
			Возврат РезультатОбновления;
		КонецЕсли;
		ДанныеАутентификации = Результат.ДанныеАутентификации;
	КонецЕсли;
	
	// 1. Проверка доступности обновления.
	ПроверитьДоступностьОбновления();
	
	// 2. Из сервиса или кэша загружается информация об актуальных версиях поставляемых настроек,
	// а также файлы настроек.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		РезультатОперации = СлужебнаяОпределитьДанныеНастроекВМоделиСервиса(
			Идентификаторы);
	Иначе
		РезультатОперации = СлужебнаяОпределитьДанныеНастроек(
			Идентификаторы,
			ДанныеАутентификации);
	КонецЕсли;
	
	Если РезультатОперации.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОбновления,
			РезультатОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	// 3. Обработка файлов потребителями подсистемы.
	НеОбработанные = ОбработатьФайлыНастроек(
		РезультатОперации.ДанныеНастроек);
	
	Если НеОбработанные.Количество() > 0 Тогда
		РезультатОбновления.КодОшибки = КодОшибкиНеОбработан();
		РезультатОбновления.СообщениеОбОшибке  = НСтр("ru = 'Не удалось обработать обновления поставляемых настроек.'");
		РезультатОбновления.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обработке загруженных обновлений поставляемых настроек %1 возникли ошибки.'"),
			СтрСоединить(НеОбработанные, ","));
	КонецЕсли;
	
	Возврат РезультатОбновления;
	
КонецФункции

// Получает файлы поставляемых настроек из кэша. Если в настройках при добавлении
// в методе ПоставляемыеНастройкиПереопределяемый.ПриДобавленииНастроек установлено значение
// свойства СохранятьФайлВКэш равным Истина получение файлов актуальных версий будет доступно,
// в противно случае метод вызовет исключение.
//
// Параметры:
//  Идентификаторы - Массив из Строка - идентификаторы поставляемых настроек в сервисе,
//   файлы которых необходимо загрузить.
//  ПолучитьФайлы - Булево - если Истина, будут получены файлы из сервис и сохранены в кэш в
//    случае отсутствия данных. Значения по умолчанию Ложь.
//
// Возвращаемое значение:
//  ДанныеНастроек - ТаблицаЗначений, Неопределено - содержит информацию о доступных обновлениях
//    * Идентификатор - Строка - идентификатор настройки в сервисе;
//    * Версия - Строка - номер актуальной версии;
//    * АдресФайла - Строка - адрес файла во временном хранилище;
//    * КонтрольнаяСумма - Строка - описание изменений в версии;
//    * Размер - Строка - описание изменений в версии.
//
Функция ПолучитьФайлыНастроек(Идентификаторы, ПолучитьФайлы = Ложь) Экспорт
	
	Если Идентификаторы.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не переданы идентификаторы настроек для получения файлов из кэша.'");
	КонецЕсли;
	
	ВерсииНастроек = ВерсииПоставляемыхНастроек(Идентификаторы);
	НастройкиБезКэша = Новый Массив;
	Для Каждого Идентификатор Из Идентификаторы Цикл
		Настройка = ВерсииНастроек.Получить(Идентификатор);
		Если Настройка = Неопределено Или Не Настройка.СохранятьФайлВКэш Тогда
			НастройкиБезКэша.Добавить(Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиБезКэша.Количество() <> 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки с идентификаторами: %1 не хранятся в кэше. Проверьте корректность заполнения метода
				|ПоставляемыеНастройкиПереопределяемый.ПриДобавленииНастроек.'"),
			СтрСоединить(НастройкиБезКэша));
	КонецЕсли;
	
	Результат = ДанныеПоставляемыхНастроекИзИзКэша(Идентификаторы);
	Если Не ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат.ДанныеНастроек;
	Иначе
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке,
			Истина);
	КонецЕсли;
	
	Если ПолучитьФайлы
		И Не ОбщегоНазначения.РазделениеВключено()
		И Результат.ДанныеНастроек.Количество() = 0 Тогда
		РезультатОбновления = ОбновитьПоставляемыеНастройки(
			Идентификаторы);
		Если Не ЗначениеЗаполнено(РезультатОбновления.КодОшибки) Тогда
			Результат = ДанныеПоставляемыхНастроекИзИзКэша(Идентификаторы);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат.ДанныеНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаПоставляемыхНастроек(0),
		443,
		НСтр("ru = 'Сервис поставляемых настроек (ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаПоставляемыхНастроек(1),
		443,
		НСтр("ru = 'Сервис поставляемых настроек (eu)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
		НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#Область БСПОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ПоставляемыеНастройкиСервер.ОбновитьСлужебныеДанныеНастроек";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Обновление списка поставляемых настроек.'"),
		ИмяСобытияЖурналаРегистрации());
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "*";
		Обработчик.Процедура           = "ПоставляемыеНастройкиСервер.ОбновитьСлужебныеДанныеНастроекОбластейДанных";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("563bb7cb-db4a-437e-b66a-d1773294c7f9");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Обновление поставляемых настроек областей данных.'"),
			ИмяСобытияЖурналаРегистрации());
	Иначе
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.7.5.2";
		Обработчик.Процедура           = "ПоставляемыеНастройкиСервер.ДобавитьЗаданиеОбновленияПоставляемыхНастроек";
		Обработчик.ОбщиеДанные         = Ложь;
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("27d8220e-f948-41f8-a5cc-72e38c4991d6");
		Обработчик.Комментарий         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1. Добавление задания обновления поставляемых настроек.'"),
			ИмяСобытияЖурналаРегистрации());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление данных регистра сведений ВерсииПоставляемыхНастроек.
//
Процедура ОбновитьСлужебныеДанныеНастроек() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Поставляемые настройки"". Начало обновления.'"),
		Ложь);
	
	Настройки = Новый Массив;
	ПриДобавленииНастроек(Настройки);
	
	// АПК:1328-выкл
	
	// Блокировку ставить не требуется, т.к. процедура вызывается в монопольном режиме при обновлении.
	
	ИспользуемыеНастройки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПоставляемыхНастроек.Идентификатор КАК Идентификатор,
		|	ВерсииПоставляемыхНастроек.Версия КАК Версия,
		|	ВерсииПоставляемыхНастроек.ОбновлятьАвтоматически КАК ОбновлятьАвтоматически,
		|	ВерсииПоставляемыхНастроек.ОбщиеДанные КАК ОбщиеДанные,
		|	ВерсииПоставляемыхНастроек.СохранятьФайлВКэш КАК СохранятьФайлВКэш
		|ИЗ
		|	РегистрСведений.ВерсииПоставляемыхНастроек КАК ВерсииПоставляемыхНастроек";
	
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого ОписаниеНастройки Из Настройки Цикл
		
		Обновлен = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ОписаниеНастройки.Идентификатор);
		
		// Обновление настроек служебных данных поставляемой настройки.
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
			
			Если ВыборкаДетальныеЗаписи.ОбновлятьАвтоматически <> ОписаниеНастройки.ОбновлятьАвтоматически
				Или ВыборкаДетальныеЗаписи.ОбщиеДанные <> ОписаниеНастройки.ОбщиеДанные
				Или ВыборкаДетальныеЗаписи.СохранятьФайлВКэш <> ОписаниеНастройки.СохранятьФайлВКэш Тогда
				
				Запись = РегистрыСведений.ВерсииПоставляемыхНастроек.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(
					Запись,
					ВыборкаДетальныеЗаписи,
					"Идентификатор, Версия");
				Запись.ОбновлятьАвтоматически = ОписаниеНастройки.ОбновлятьАвтоматически;
				Запись.ОбщиеДанные = ОписаниеНастройки.ОбщиеДанные;
				Запись.СохранятьФайлВКэш = ОписаниеНастройки.СохранятьФайлВКэш;
				Запись.Записать();
				
			КонецЕсли;
			
			Обновлен = Истина;
			
		КонецЕсли;
		
		// Добавление новых поставляемых настроек.
		Если Не Обновлен Тогда
			Запись = РегистрыСведений.ВерсииПоставляемыхНастроек.СоздатьМенеджерЗаписи();
			Свойства = "
				|Идентификатор,
				|ОбновлятьАвтоматически,
				|ОбщиеДанные,
				|СохранятьФайлВКэш";
			ЗаполнитьЗначенияСвойств(
				Запись,
				ОписаниеНастройки,
				Свойства);
			Запись.Записать();
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		ИспользуемыеНастройки.Добавить(ОписаниеНастройки.Идентификатор);
		
	КонецЦикла;
	
	// Идентификаторы поставляемых настроек, которые перестали использоваться необходимо удалить
	// из регистра "Версии поставляемых настроек".
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПоставляемыхНастроек.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ВерсииПоставляемыхНастроек КАК ВерсииПоставляемыхНастроек
		|ГДЕ
		|	НЕ ВерсииПоставляемыхНастроек.Идентификатор В (&ИспользуемыеНастройки)";
	
	Запрос.УстановитьПараметр("ИспользуемыеНастройки", ИспользуемыеНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Набор = РегистрыСведений.ВерсииПоставляемыхНастроек.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(ВыборкаДетальныеЗаписи.Идентификатор);
		Набор.Записать();
		
		Набор = РегистрыСведений.КэшДанныхПоставляемыхНастроек.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(ВыборкаДетальныеЗаписи.Идентификатор);
		Набор.Записать();
	КонецЦикла;
	
	// АПК:1328-вкл
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек подсистемы ""Поставляемые настройки"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

// Выполняет добавление регламентного задания обновления поставляемых настроек.
//
Процедура ДобавитьЗаданиеОбновленияПоставляемыхНастроек(Параметры) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ДобавитьЗаданиеОбновлениеПоставляемыхНастроек();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление данных регистра сведений ВерсииПоставляемыхНастроекОбластейДанных.
//
Процедура ОбновитьСлужебныеДанныеНастроекОбластейДанных(Параметры) Экспорт
	
	// Дозаписываем информацию о поставляемых настройках в регистр
	// отложенном обновлении из областей данных.
	Если Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек областей подсистемы ""Поставляемые настройки"". Начало обновления.'"),
		Ложь);
	
	Настройки = Новый Массив;
	ПриДобавленииНастроек(Настройки);
	
	ИспользуемыеНастройки = Новый Массив;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииПоставляемыхНастроекОбластейДанных");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВерсииПоставляемыхНастроекОбластейДанных.Идентификатор КАК Идентификатор,
			|	ВерсииПоставляемыхНастроекОбластейДанных.Версия КАК Версия
			|ИЗ
			|	РегистрСведений.ВерсииПоставляемыхНастроекОбластейДанных КАК ВерсииПоставляемыхНастроекОбластейДанных";
		
		РезультатЗапроса       = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Для Каждого ОписаниеНастройки Из Настройки Цикл
			
			Если ОписаниеНастройки.ОбщиеДанные Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", ОписаниеНастройки.Идентификатор);
			
			Если Не ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
				Запись = РегистрыСведений.ВерсииПоставляемыхНастроекОбластейДанных.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ОписаниеНастройки, "Идентификатор");
				Запись.Записать();
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи.Сбросить();
			ИспользуемыеНастройки.Добавить(ОписаниеНастройки.Идентификатор);
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВерсииПоставляемыхНастроекОбластейДанных.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ВерсииПоставляемыхНастроекОбластейДанных КАК ВерсииПоставляемыхНастроекОбластейДанных
			|ГДЕ
			|	НЕ ВерсииПоставляемыхНастроекОбластейДанных.Идентификатор В (&ИспользуемыеНастройки)";
		
		Запрос.УстановитьПараметр("ИспользуемыеНастройки", ИспользуемыеНастройки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Набор = РегистрыСведений.ВерсииПоставляемыхНастроекОбластейДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Идентификатор.Установить(ВыборкаДетальныеЗаписи.Идентификатор);
			Набор.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьИнформациюВЖурналРегистрации(
			ИнформацияОбОшибке,
			Истина,
			Метаданные.РегистрыСведений.ВерсииПоставляемыхНастроекОбластейДанных);
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление настроек областей подсистемы ""Поставляемые настройки"". Успешно завершено.'"),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологииСервиса

#Область БСПОчередьЗаданий

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		"ОбновлениеРазделеннойНастройки",
		"ПоставляемыеНастройкиВМоделиСервиса.ОбновлениеРазделеннойНастройки");
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ВидыДанных = ВидыПоставляемыхДанных();
	Для Каждого ВидДанных Из ВидыДанных Цикл
		СтрОбработчик = Обработчики.Добавить();
		СтрОбработчик.ВидДанных = ВидДанных;
		СтрОбработчик.КодОбработчика = ВидДанных;
		СтрОбработчик.Обработчик = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеНастройкиВМоделиСервиса");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		ДобавитьЗаданиеОбновлениеПоставляемыхНастроек();
	Иначе
		УдалитьЗаданияОбновленияНастроек();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаПоставляемыхНастроек(0),
		НСтр("ru = 'Получение поставляемых настроек'"));
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаПоставляемыхНастроек(1),
		НСтр("ru = 'Получение поставляемых настроек'"));
	
КонецПроцедуры

// Определяет вид данных и код обработчика для поставляемых данных.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор настройки в сервисе.
//
// Возвращаемое значение:
//  Строка - наименование вида данных.
//
Функция ВидПоставляемыхДанных(Идентификатор = "") Экспорт
	
	Возврат ВидПоставляемыхДанныхПоставляемыеНастройки() + Идентификатор;
	
КонецФункции

// Определяет идентификатор вида данных.
//
// Возвращаемое значение:
//  Строка - идентификатор вида данных.
//
Функция ВидПоставляемыхДанныхПоставляемыеНастройки() Экспорт
	
	Возврат "Setting.";
	
КонецФункции

// Определяет параметры обновления поставляемой настройки.
//
// Параметры:
//  Идентификаторы - Строка - содержит идентификатор поставляемых настроек,
//   для которых необходимо получить параметры обновления;
//
// Возвращаемое значение:
//  Структура - параметры обновелния настройки.
//
Функция ПараметрыНастройки(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПоставляемыхНастроек.Версия КАК Версия,
		|	ВерсииПоставляемыхНастроек.ОбновлятьАвтоматически КАК ОбновлятьАвтоматически,
		|	ВерсииПоставляемыхНастроек.ОбщиеДанные КАК ОбщиеДанные,
		|	ВерсииПоставляемыхНастроек.СохранятьФайлВКэш КАК СохранятьФайлВКэш
		|ИЗ
		|	РегистрСведений.ВерсииПоставляемыхНастроек КАК ВерсииПоставляемыхНастроек
		|ГДЕ
		|	ВерсииПоставляемыхНастроек.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("Версия", ВыборкаДетальныеЗаписи.Версия);
		ПараметрыОбновления.Вставить("ОбновлятьАвтоматически", ВыборкаДетальныеЗаписи.ОбновлятьАвтоматически);
		ПараметрыОбновления.Вставить("ОбщиеДанные", ВыборкаДетальныеЗаписи.ОбщиеДанные);
		ПараметрыОбновления.Вставить("СохранятьФайлВКэш", ВыборкаДетальныеЗаписи.СохранятьФайлВКэш);
		Возврат ПараметрыОбновления;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет номер версии поставляемой настройки.
//
// Параметры:
//  Идентификаторы - Строка - содержит идентификатор поставляемых настроек,
//   для которых необходимо получить параметры обновления;
//
// Возвращаемое значение:
//  Число, Неопределено - номер версии настройки настройки.
//
Функция ВерсияПоставляемойНастройки(Идентификатор) Экспорт
	
	// Версии поставляемых настроек не являются секретной информацией
	// и могут быть получены любым пользователем ИБ.
	УстановитьПривилегированныйРежим(Истина);

	ОбщиеДанные = Не (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
	ИмяРегистра = ?(ОбщиеДанные,
		"ВерсииПоставляемыхНастроек",
		"ВерсииПоставляемыхНастроекОбластейДанных");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегВерсииПоставляемыхНастроек.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.%1 КАК РегВерсииПоставляемыхНастроек
		|ГДЕ
		|	РегВерсииПоставляемыхНастроек.Идентификатор = &Идентификатор";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяРегистра);
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Версия;
	КонецЕсли;
	
КонецФункции

// Создает структуру с описанием данных файла актуальной версий поставляемой настройки.
//
// Возвращаемое значение:
//  Структура      - содержит информацию, которая используется
//    для обновления данных поставляемой настройки.
//   * АдресФайла - Строка - адрес файла во временном хранилище;
//   * Идентификатор - Строка - идентификатор настройки в сервисе;
//   * Версия - Число - номер актуальной версии;
//   * КонтрольнаяСумма - Число - контрольная сумма файла;
//   * Размер - Строка - размер файла.
//
Функция ОписаниеДанныхФайла(
		АдресФайла,
		Идентификатор = "",
		Версия = "",
		КонтрольнаяСумма = "",
		Размер = 0) Экспорт
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Идентификатор",    Идентификатор);
	ОписаниеФайла.Вставить("Версия",           Версия);
	ОписаниеФайла.Вставить("КонтрольнаяСумма", КонтрольнаяСумма);
	ОписаниеФайла.Вставить("Размер",           Размер);
	ОписаниеФайла.Вставить("АдресФайла",      АдресФайла);
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Сохраняет или обновляет данные поставляемой настройки в кэше.
//
// Параметры:
//  ОписаниеФайла - Структура - данные для записи в кэш:
//    * Идентификатор - Строка - идентификатор настройки в сервисе;
//    * Версия - Строка - номер актуальной версии;
//    * АдресФайла - Строка - адрес файла во временном хранилище;
//    * КонтрольнаяСумма - Строка - описание изменений в версии;
//    * Размер - Строка - описание изменений в версии.
//
Процедура ОбновитьКэшНастройки(ОписаниеФайла) Экспорт
	
	Запись = РегистрыСведений.КэшДанныхПоставляемыхНастроек.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = ОписаниеФайла.Идентификатор;
	Запись.Версия = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
		СтрЗаменить(ОписаниеФайла.Версия, Символы.НПП, ""));
	Запись.КонтрольнаяСумма = ОписаниеФайла.КонтрольнаяСумма;
	Запись.Размер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
		СтрЗаменить(ОписаниеФайла.Размер, Символы.НПП, ""));
	Запись.ДанныеФайла = Новый ХранилищеЗначения(
		ПолучитьИзВременногоХранилища(
			ОписаниеФайла.АдресФайла));
	
	Запись.Записать();
	
КонецПроцедуры

// Вызываются алгоритмы обработки файла загруженного файла настройки.
//
// Параметры:
//  ОписаниеНастройки - Структура - см. ОписаниеНастройки;
//  Обработан - Булево - если Ложь, при обработке файла обновления были ошибки
//   и его необходимо загрузить повторно.
//
Процедура ПриЗагрузкеФайлаНастройки(
		ОписаниеНастройки,
		Обработан) Экспорт
	
	Попытка
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("КонтрольнаяСумма", ОписаниеНастройки.КонтрольнаяСумма);
		ДанныеФайла.Вставить("Размер", ОписаниеНастройки.Размер);
		ДанныеФайла.Вставить("АдресФайла", ОписаниеНастройки.АдресФайла);
		
		ДанныеНастройки = Новый Структура;
		ДанныеНастройки.Вставить("Идентификатор", ОписаниеНастройки.Идентификатор);
		ДанныеНастройки.Вставить("Версия", ОписаниеНастройки.Версия);
		
		ИнтеграцияПодсистемБИП.ПриЗагрузкеФайлаНастройки(
			ДанныеНастройки,
			ДанныеФайла,
			Обработан);
		ПоставляемыеНастройкиПереопределяемый.ПриЗагрузкеФайлаНастройки(
			ДанныеНастройки,
			ДанныеФайла,
			Обработан);
		
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(
				ИнформацияОбОшибке()),
			Истина);
		ВызватьИсключение ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(
			ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если Обработан Тогда
		
		// Вне зависимости от прав пользователя данные в регистрах сведений
		// Версии поставляейх настроек, Версии поставляемых настроек областей данных
		// и Кэш данных настроект данные должны быть обновлены после
		// обработки файла поставляемой настройки.
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьСлужебныеДанныеНастройки(
			ДанныеНастройки,
			ДанныеФайла);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет номер загруженной версии, дату обновления и при необходимости
// кэширует данные поставляемой настройки в регистре сведений. При работе в модели 
// сервиса будет автоматический определена доступность общих данных.
// Если общие данные не доступны, изменение версии регистрируется
// для области данных.
//
// Параметры:
//  ДанныеНастройки - Структура - параметры поставляемой настройки;
//  ДанныеФайла - Структура - параметры файла поставляемой настройки;
//  ОбновитьКэш - Булево - признак обновления кэша.
//
Процедура ОбновитьСлужебныеДанныеНастройки(ДанныеНастройки, ДанныеФайла, ОбновитьКэш = Истина) Экспорт
		
		Если ИспользоватьДанныеОбласти() Тогда
			Запись = РегистрыСведений.ВерсииПоставляемыхНастроекОбластейДанных.СоздатьМенеджерЗаписи();
			Запись.Идентификатор = ДанныеНастройки.Идентификатор;
			Запись.Версия = Число(ДанныеНастройки.Версия);
			Запись.Записать();
		Иначе
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииПоставляемыхНастроек");
				ЭлементБлокировки.УстановитьЗначение("Идентификатор", ДанныеНастройки.Идентификатор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Запись = РегистрыСведений.ВерсииПоставляемыхНастроек.СоздатьМенеджерЗаписи();
				Запись.Идентификатор = ДанныеНастройки.Идентификатор;
				Запись.Прочитать();
				Если Не Запись.Выбран() Тогда
					ВызватьИсключение НСтр("ru = 'Поставляемая настройка по идентификатору не обнаружен.'");
				КонецЕсли;
				
				Запись.Версия = Число(ДанныеНастройки.Версия);
				
				Запись.Записать();
				
				// Кэширование выполняется, если ответственный за настройку
				// в явном виде указал на потребность в кэшировании.
				Если ОбновитьКэш И Запись.СохранятьФайлВКэш Тогда
					ОписаниеФайла = ОписаниеДанныхФайла(
						ДанныеФайла.АдресФайла,
						ДанныеНастройки.Идентификатор,
						ДанныеНастройки.Версия,
						ДанныеФайла.КонтрольнаяСумма,
						ДанныеФайла.Размер);
					ОбновитьКэшНастройки(ОписаниеФайла);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
				ВызватьИсключение ИнформацияОбОшибке;
				
			КонецПопытки;
			
		КонецЕсли;
		
	УдалитьИзВременногоХранилища(ДанныеФайла.АдресФайла);
	
КонецПроцедуры

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегламентныеЗадания

// Создает регламентное задание "ОбновлениеПоставляемыхНастроек".
//
Процедура ДобавитьЗаданиеОбновлениеПоставляемыхНастроек()
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеПоставляемыхНастроек);
		ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
		Если ЗаданияОбновления.Количество() = 0 Тогда
			
			// Чтобы не создавать пиковых нагрузок на сервис,
			// время обновления будет выбрано случайным образом
			// между 00:00 и 09:00.
			Генератор = Новый ГенераторСлучайныхЧисел;
			Расписание = Новый РасписаниеРегламентногоЗадания;
			Расписание.ВремяНачала       = Дата("00010101") + Генератор.СлучайноеЧисло(0, 32400);
			Расписание.ПериодПовтораДней = 1;
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ОбновлениеПоставляемыхНастроек);
			ПараметрыЗадания.Вставить("Расписание",    Расписание);
			ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обновление поставляемых настроек'"));
			
			Попытка
				РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			Исключение
				ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписатьИнформациюВЖурналРегистрации(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось создать регламентное задание Обновление поставляемых настроек по причине:
								|%1'"),
							ИнформацияОбОшибке),
						Истина);
				ВызватьИсключение ИнформацияОбОшибке;
			КонецПопытки;
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru = 'Создано регламентное задание Обновление поставляемых настроек.'"),
				Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ОбновлениеПоставляемыхНастроек".
//
Процедура УдалитьЗаданияОбновленияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено()
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеПоставляемыхНастроек);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания "ОбновлениеПоставляемыхНастроек"
//
Процедура ОбновлениеПоставляемыхНастроек() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеПоставляемыхНастроек);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииПоставляемыхНастроек.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ВерсииПоставляемыхНастроек КАК ВерсииПоставляемыхНастроек
		|ГДЕ
		|	ВерсииПоставляемыхНастроек.ОбновлятьАвтоматически";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Идентификаторы = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Идентификаторы.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Отсутствуют поставляемые настройки для автоматического обновления.'"),
			Ложь,
			Метаданные.РегламентныеЗадания.ОбновлениеПоставляемыхНастроек);
		Возврат;
	КонецЕсли;
	
	ОбновитьПоставляемыеНастройки(Идентификаторы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Определяет список поставляемых настроекдоступных конфигурации.
//
// Параметры:
//  Настройки  - Массив - содержит служебные данные загрузки поставляемых настроек.
//   см. ОписаниеНастройки.
//
Процедура ПриДобавленииНастроек(Настройки)
	
	ИнтеграцияПодсистемБИП.ПриДобавленииНастроек(Настройки);
	ПоставляемыеНастройкиПереопределяемый.ПриДобавленииНастроек(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхНастроек

// Создает таблицу с описанием данных актуальных версий.
//
// Возвращаемое значение:
//  ТаблицаЗначений      - содержит информацию, которая используется:
//    для обновления данных поставляемых настроек.
//   * Идентификатор - Строка - идентификатор настройки в сервисе.
//   * Версия - Число - номер актуальной версии.
//   * КонтрольнаяСумма - Строка - контрольная сумма файла.
//   * АдресФайла - Строка - адрес файла настройки во временном хранилище.
//   * Размер - Число - размер файла.
//   * URL - Строка - URL для загрузки файла.
//
Функция ОписаниеДанныхНастроек() Экспорт
	
	ДанныеНастроек = Новый ТаблицаЗначений;
	ДанныеНастроек.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеНастроек.Колонки.Добавить("Версия", ОбщегоНазначения.ОписаниеТипаЧисло(11));
	ДанныеНастроек.Колонки.Добавить("КонтрольнаяСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеНастроек.Колонки.Добавить("АдресФайла", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеНастроек.Колонки.Добавить("Размер", ОбщегоНазначения.ОписаниеТипаЧисло(32));
	ДанныеНастроек.Колонки.Добавить("URL", ОбщегоНазначения.ОписаниеТипаСтрока(2048));
	
	Возврат ДанныеНастроек;
	
КонецФункции

// Выполняет загрузку данных поставляемой настройки из сервиса.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы поставляемых настроек в сервисе,
//                   обновление которых необходимо загрузить;
//  ДанныеАутентификации - Структура - логин и пароль для авторизации в сервисе.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки данных поставляемых настроек:
//    * Ошибка    - Булево - признак ошибки загрузки данных;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - определение выполнено успешно;
//                    - "ОбновлениеНеТребуется" - обновление не обнаружено;
//                    - "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//                    - "ПревышеноКоличествоПопыток" - превышено количество попыток
//                      получения обновления с некорректным логином и паролем;
//                    - "ОшибкаПодключения" - ошибка при подключении к сервису;
//                    - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//                    - "НеизвестнаяОшибка" - при получении информации возникла
//                      неизвестная (не обрабатываемая) ошибка;
//                    - "СервисВременноНеДоступен" - на сервер ведутся регламентные работы;
//                    - "НеизвестнаяНастройкаИлиПрограмма" - настройка или программа
//                      в сервисе не обнаружен по переданному идентификатору;
//                    - "ФайлНеЗагружен" - при загрузке файлов настройки возникли ошибки;
//                    - "НетДоступаКПрограмме" - отсутствует доступ к программе на Портале 1С:ИТС;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебнаяОпределитьДанныеНастроек(
		Идентификаторы,
		ДанныеАутентификации,
		ЗагрузитьФайлы = Истина)
	
	РезультатОперации = СервисПоставляемыеНастройки.АктуальныеВерсииПоставляемыхНастроек(
		Идентификаторы,
		ДанныеАутентификации);
	
	Если РезультатОперации.Ошибка Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Если номер версии поставляемой настройки в базе равен номеру версии в сервисе,
	// обновление не будет загружено.
	УдалитьАктуальныеВерсии(
		РезультатОперации.ДанныеНастроек,
		Идентификаторы);
	
	Если РезультатОперации.ДанныеНастроек = 0 Тогда
		РезультатОперации.Ошибка = Истина;
		РезультатОперации.КодОшибки = "ОбновлениеНеТребуется";
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Обновление не требуется. Загружена актуальная версия поставляемой настройки.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Обновление не требуется. Загружена актуальная версия поставляемой настройки.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатЗагрузки = СервисПоставляемыеНастройки.ЗагрузитьФайлыПоставляемыхНастроек(
		РезультатОперации.ДанныеНастроек,
		ДанныеАутентификации);
	
	Если РезультатЗагрузки.Ошибка Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатЗагрузки,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку данных поставляемых настреок из кэша.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы настроек в сервисе,
//   обновление которых необходимо загрузить.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки данных поставляемых настроек:
//    * ДанныеНастроек - ТаблицаЗначений - см. ОписаниеДанныхНастроек;
//    * Ошибка    - Булево - признак ошибки загрузки данных;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим функционалом:
//        - <Пустая строка> - определение выполнено успешно;
//        - "ОбновлениеНеТребуется" - загружены актуальные версии настроек;
//        - "ФайлНеЗагружен" - при загрузке файлов настроек возникли ошибки;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СлужебнаяОпределитьДанныеНастроекВМоделиСервиса(Идентификаторы)
	
	РезультатОперации = ДанныеПоставляемыхНастроекИзИзКэша(Идентификаторы);
	
	Если РезультатОперации.Ошибка Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Если номер версии поставляемой настройки в базе равен номеру версии в сервисе,
	// обновление не будет загружено.
	УдалитьАктуальныеВерсии(
		РезультатОперации.ДанныеНастроек,
		Идентификаторы);
	
	Если РезультатОперации.ДанныеНастроек.Количество() = 0 Тогда
		РезультатОперации.Ошибка = Истина;
		РезультатОперации.КодОшибки = "ОбновлениеНеТребуется";
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Обновление не требуется. Загружена актуальная версия настройки.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Обновление не требуется. Загружена актуальная версия настройки.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит удаление актуальных версий поставляемых настроек,
// которые определяются на основании данных ИБ.
//
// Параметры:
//  ДанныеНастроек - ТаблицаЗначений - см.  ОписаниеДанныхНастроек.
//  Идентификаторы - Массив - список загруженных список идентификаторов
//    поставляемых настроек, которые необходимо обновить.
//
Процедура УдалитьАктуальныеВерсии(ДанныеНастроек, Идентификаторы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииПоставляемыхНастроек.Идентификатор КАК Идентификатор,
		|	ВерсииПоставляемыхНастроек.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.%1 КАК ВерсииПоставляемыхНастроек
		|ГДЕ
		|	ВерсииПоставляемыхНастроек.Идентификатор В(&Идентификаторы)";
	
	ИмяТаблицы = ?(
		ИспользоватьДанныеОбласти(),
		"ВерсииПоставляемыхНастроекОбластейДанных",
		"ВерсииПоставляемыхНастроек");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяТаблицы);
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	АктуальныеВерсии = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		
		НайденныеСтроки = ДанныеНастроек.НайтиСтроки(Отбор);
		Для каждого ОписательВерсии Из НайденныеСтроки Цикл
			Если ОписательВерсии.Версия <= ВыборкаДетальныеЗаписи.Версия Тогда
				АктуальныеВерсии.Добавить(ОписательВерсии);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ОписательВерсии Из АктуальныеВерсии Цикл
		ДанныеНастроек.Удалить(ОписательВерсии);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет версии поставляемых настроек, а также параметры их обновления.
//
// Параметры:
//  ДанныеНастроек - ТаблицаЗначений - см.  ОписаниеДанныхНастроек.
//
// Возвращаемое значение:
//  Соответствие - параметры обновления и версии поставляемых настроек.
//
Функция ВерсииПоставляемыхНастроек(Идентификаторы)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПоставляемыхНастроек.Идентификатор КАК Идентификатор,
		|	ВерсииПоставляемыхНастроек.СохранятьФайлВКэш КАК СохранятьФайлВКэш,
		|	ВерсииПоставляемыхНастроек.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПоставляемыхНастроек КАК ВерсииПоставляемыхНастроек";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить(
			ВыборкаДетальныеЗаписи.Идентификатор,
			Новый Структура(
				"СохранятьФайлВКэш, Версия",
				ВыборкаДетальныеЗаписи.СохранятьФайлВКэш,
				ВыборкаДетальныеЗаписи.Версия));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновления данных поставляемых настроек.
//
// Параметры:
//  ДанныеНастроек - ТаблицаЗначений - см. ОписаниеДанныхНастроек;
//
// Возвращаемое значение:
//  Массив - настройки, данные которые не удалось обновить.
//
Функция ОбработатьФайлыНастроек(ДанныеНастроек)
	
	НеОбработанные = Новый Массив;
	Для Каждого ОписаниеНастройки Из ДанныеНастроек Цикл
		
		Обработан = Ложь;
		
		ПриЗагрузкеФайлаНастройки(
			ОписаниеНастройки,
			Обработан);
		
		Если Не Обработан Тогда
			НеОбработанные.Добавить(ОписаниеНастройки.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеОбработанные;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКэша

// Выполняет загрузку данных поставляемых настроек из кэша.
//
// Параметры:
//  Идентификаторы - Массив - идентификаторы настроек в сервисе,
//                   обновление которых необходимо загрузить.
//
// Возвращаемое значение:
//  Структура - содержит результат загрузки данных поставляемых настроек:
//    * ДанныеНастроек - ТаблицаЗначений - см. ОписаниеДанныхНастроек;
//    * Ошибка - Булево - признак ошибки загрузки данных;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//                  может быть обработан вызывающим функционалом:
//                    - <Пустая строка> - получение выполнено успешно;
//                    - "ФайлНеЗагружен" - при загрузке файлов поставляемой настройки возникли ошибки;
//    *СообщениеОбОшибке - Строка - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка - сообщение об ошибке для администратора.
//
Функция ДанныеПоставляемыхНастроекИзИзКэша(Идентификаторы)
	
	// Кэш поставляемых настроек не являются секретной информацией
	// и могут быть получены любым пользователем ИБ.
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",                Ложь);
	РезультатОперации.Вставить("КодОшибки",             "");
	РезультатОперации.Вставить("СообщениеОбОшибке",     "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",    "");
	РезультатОперации.Вставить("ДанныеНастроек", ОписаниеДанныхНастроек());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КэшДанныхПоставляемыхНастроек.Идентификатор КАК Идентификатор,
		|	КэшДанныхПоставляемыхНастроек.Версия КАК Версия,
		|	КэшДанныхПоставляемыхНастроек.КонтрольнаяСумма КАК КонтрольнаяСумма,
		|	КэшДанныхПоставляемыхНастроек.Размер КАК Размер,
		|	КэшДанныхПоставляемыхНастроек.ДанныеФайла КАК ДанныеФайла
		|ИЗ
		|	РегистрСведений.КэшДанныхПоставляемыхНастроек КАК КэшДанныхПоставляемыхНастроек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииПоставляемыхНастроек КАК ВерсииПоставляемыхНастроек
		|		ПО КэшДанныхПоставляемыхНастроек.Идентификатор = ВерсииПоставляемыхНастроек.Идентификатор
		|ГДЕ
		|	КэшДанныхПоставляемыхНастроек.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Отбор = Новый Структура("Идентификатор", Идентификатор);
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Отбор) Тогда
			
			ОписаниеВерсии = РезультатОперации.ДанныеНастроек.Добавить();
			ОписаниеВерсии.Идентификатор = ВыборкаДетальныеЗаписи.Идентификатор;
			ОписаниеВерсии.Версия = ВыборкаДетальныеЗаписи.Версия;
			ОписаниеВерсии.КонтрольнаяСумма = ВыборкаДетальныеЗаписи.КонтрольнаяСумма;
			ОписаниеВерсии.Размер = ВыборкаДетальныеЗаписи.Размер;
			
			ДанныеФайла = ВыборкаДетальныеЗаписи.ДанныеФайла.Получить();
			
			Если ТипЗнч(ДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
				
				РезультатОперации.Ошибка = Истина;
				РезультатОперации.КодОшибки = КодОшибкиФайлНеЗагружен();
				РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при получении файла настройка. Файл настройки %1 в кэше не обнаружен.'"),
					Идентификатор);
				РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
				РезультатОперации.ДанныеНастроек.Очистить();
				
				Возврат РезультатОперации;
				
			КонецЕсли;
			
			ОписаниеВерсии.АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла);
			
		Иначе
			РезультатОперации.Ошибка = Истина;
			РезультатОперации.КодОшибки = КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла настройки. Файл настройки %1 в кэше не обнаружен.'"),
				Идентификатор);
			РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
			РезультатОперации.ДанныеНастроек.Очистить();
			Возврат РезультатОперации;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи.Сбросить();
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Возвращает логин и пароль Интернет-поддержки.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//              аутентификации пользователя Интернет-поддержки:
//    * ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    * ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    * Ошибка               - Строка    - признак наличия ошибки.
//
Функция ДанныеАутентификации()
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение НСтр("ru = 'При работе в модели сервиса информация о поставляемых настройках
			|загружается из сервиса поставляемых данных.'");
		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для получения обновлений поставляемой настройки необходимо подключить Интернет-поддержку пользователей.'");
			ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет доступность использования версий поставляемой настройки
// загруженных в область данных.
//
// Возвращаемое значение:
//  Булево - если Истина, для определения версий необходимо использовать
//   регистр сведений ВерсииПоставляемыхНастроекОбластейДанных.
//
Функция ИспользоватьДанныеОбласти()
	
	Возврат (ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
КонецФункции

// Определяет виды данных настроек для поставляемых данных.
//
// Возвращаемое значение:
//  Массив из Строка- наименования видов данных.
//
Функция ВидыПоставляемыхДанных()
	
	ВидыДанных = Новый Массив;
	
	Настройки = Новый Массив;
	ПриДобавленииНастроек(Настройки);
	
	Идентификаторы = Новый Массив;
	Для Каждого ОписаниеНастройки Из Настройки Цикл
		Идентификаторы.Добавить(ОписаниеНастройки.Идентификатор);
	КонецЦикла;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ВидДанных = ВидПоставляемыхДанных(
			Идентификатор);
		ВидыДанных.Добавить(ВидДанных);
	КонецЦикла;
	
	Возврат ВидыДанных;
	
КонецФункции

// Возвращает код ошибки "НеОбработан".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеОбработан()
	
	Возврат "НеОбработан";
	
КонецФункции

// Возвращает код ошибки "ФайлНеЗагружен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиФайлНеЗагружен() Экспорт
	
	Возврат "ФайлНеЗагружен";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль() Экспорт
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Проверяет права доступа на обновление данных поставляемых настроек.
// Обновление может быть недоступно если:
//  - у пользователя нет прав на получение обновлений,
//  - при работе в модели сервиса обновления загружаются из поставляемых данных.
//
Процедура ПроверитьДоступностьОбновления()
	
	ОбъектМетаданных = ?(
		ИспользоватьДанныеОбласти(),
		Метаданные.РегистрыСведений.ВерсииПоставляемыхНастроекОбластейДанных,
		Метаданные.РегистрыСведений.ВерсииПоставляемыхНастроек);
	
	Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет хост для вызова сервиса поставляемых настроек.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаПоставляемыхНастроек(Домен) Экспорт
	
	
	Если Домен = 0 Тогда
		Возврат "supplied-settings.1c.ru";
	Иначе
		Возврат "supplied-settings.1c.eu";
	КонецЕсли;
	
КонецФункции

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Поставляемые настройки'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
