#Область ПрограммныйИнтерфейс

// Интеграция с подсистемой "Подключаемые команды" БСП.
// 
// Параметры:
//  НастройкиФормы - См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.НастройкиФормы
//  Источники - См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Источники
//  ПодключенныеОтчетыИОбработки - См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.ПодключенныеОтчетыИОбработки
//  Команды - См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Команды
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт 
	
	ДоступныеКоманды = ПодключаемыеКомандыИСКлиентСервер.КомандыОбъекта(НастройкиФормы.ИмяФормы);
	Если ДоступныеКоманды.ОформитьИС.Количество()
		Или ДоступныеКоманды.ВыбратьИС.Количество() Тогда
	
		ШаблонКоманды = ШаблонКоманды(ИнтеграцияИС.ОписаниеТиповПоПолномуИмени(НастройкиФормы.ИмяФормы));
		ДополнитьКомандыИзДоступных(Команды, ДоступныеКоманды, ШаблонКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Интеграция с подсистемой "Подключаемые команды" БСП.
// 
// Параметры:
//  ВидыПодключаемыхКоманд См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.ВидыПодключаемыхКоманд
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Для Каждого ВидКомандИС Из ПодключаемыеКомандыИСКлиентСервер.ВидыПодключаемыхКоманд() Цикл
		
		Вид = ВидыПодключаемыхКоманд.Добавить();
		ЗаполнитьЗначенияСвойств(Вид,ВидКомандИС);
		Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
		Вид.Картинка       = Новый Картинка;
		Вид.Отображение    = ОтображениеКнопки.Текст;
		
	КонецЦикла;
	
КонецПроцедуры

// Настройки выполнения команд ввода/выбора основания.
// 
// Возвращаемое значение:
//  Структура - Настройки выполнения команд:
// * ДоступноПерезаполнение  - Булево - предлагать перезаполнение документа после выбора основания
// * ПередСозданиемОснования - Строка - имя процедуры, которую надо выполнить перед вводом документа-основания 
//    (имя обработчика оповещения в форме)
// * ОтборВыбораОснования    - Структура - отбор открываемой формы выбора
//
Функция НастройкиВыполненияКоманд() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДоступноПерезаполнение", Истина);
	Результат.Вставить("ПередСозданиемОснования", "");
	Результат.Вставить("ОтборВыбораОснования", Новый Структура);
	Возврат Результат;
	
КонецФункции

// Генерация команд ввода/выбора основания при создании формы на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  Настройки - Неопределено - значения по-умолчанию,
//            - См. НастройкиВыполненияКоманд
Процедура ПриСозданииНаСервере(Форма, Знач Настройки = Неопределено) Экспорт
	
	
#Область ОпределениеКомандДляУправленияВидимостью
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,"НастройкиВыполненияПодключаемыхКомандИС") = Ложь Тогда 
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НастройкиВыполненияПодключаемыхКомандИС",Новый ОписаниеТипов));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.НастройкиВыполненияПодключаемыхКомандИС = Новый Структура;
	КонецЕсли;
#КонецОбласти
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиВыполненияКоманд();
	КонецЕсли;
	
	Форма.НастройкиВыполненияПодключаемыхКомандИС = ОбщегоНазначения.СкопироватьРекурсивно(Настройки);
	Форма.НастройкиВыполненияПодключаемыхКомандИС.Вставить("Команды", Новый Структура);
	ВидыКоманд = ПодключаемыеКомандыИСКлиентСервер.ВидыПодключаемыхКоманд();
	
#Область ДоработкаПослеБСП
	
	ГруппаВводаВыбораОснования = Неопределено;
	// Установка вида группы - подменю
	Для Каждого ВидКомандИС Из ВидыКоманд Цикл
		ГруппаВводаВыбораОснования = Форма.Элементы[ВидКомандИС.ИмяПодменю].Родитель;
		Если Форма.Элементы[ВидКомандИС.ИмяПодменю].Вид = ВидГруппыФормы.ГруппаКнопок Тогда
			Форма.Элементы[ВидКомандИС.ИмяПодменю].Вид = ВидГруппыФормы.Подменю;
			Форма.Элементы[ВидКомандИС.ИмяПодменю].ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		КонецЕсли;
	КонецЦикла;
	
	// Возврат единственной команды в подменю
	Если ГруппаВводаВыбораОснования.ПодчиненныеЭлементы.Количество() > ВидыКоманд.Количество() Тогда
		Для Каждого ЭлементФормы Из ГруппаВводаВыбораОснования.ПодчиненныеЭлементы Цикл
			Для Каждого ВидКомандИС Из ВидыКоманд Цикл
				Если ЭлементФормы.Имя = ВидКомандИС.ИмяПодменю Тогда
					Продолжить;
				ИначеЕсли СтрНачинаетсяС(ЭлементФормы.Имя, ВидКомандИС.ИмяПодменю) Тогда
					Форма.Элементы.Переместить(
						ЭлементФормы,
						Форма.Элементы[Лев(ЭлементФормы.Имя, СтрНайти(ЭлементФормы.Имя, "_")-1)]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры

// Настройка команд ввода/выбора основания при чтении объекта на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПриЧтенииНаСервере(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НастройкиВыполненияПодключаемыхКомандИС") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьКомандыИзДоступных(Команды, ДоступныеКоманды, ШаблонКоманды)
	
	Для Каждого ВидКомандИС Из ПодключаемыеКомандыИСКлиентСервер.ВидыПодключаемыхКоманд() Цикл
		
		НомерПоПорядку = 1;
		ШаблонКоманды.Вставить("Вид",        ВидКомандИС.Имя);
		ШаблонКоманды.Вставить("Обработчик", ВидКомандИС.Обработчик);
		
		Для Каждого КомандаИС Из ДоступныеКоманды[ВидКомандИС.Имя] Цикл 
			
			Если ЕстьПравоДоступа(ВидКомандИС.Имя,ВидКомандИС.ТипМетаданных,КомандаИС.ИмяМетаданных) Тогда 
				Команда = Команды.Добавить();
				ЗаполнитьЗначенияСвойств(Команда, ШаблонКоманды);
				ЗаполнитьЗначенияСвойств(Команда, КомандаИС);
				Команда.Порядок = НомерПоПорядку;
			КонецЕсли;
			НомерПоПорядку = НомерПоПорядку + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПравоДоступа(ВидКоманды,ТипМетаданных,ИмяМетаданных) 
	
	Если ВидКоманды = "ОформитьИС" Тогда
		ИмяПраваДоступа = "Добавление";
	ИначеЕсли ВидКоманды = "ВыбратьИС" Тогда 
		ИмяПраваДоступа = "Просмотр";
	КонецЕсли;
	
	Возврат ПравоДоступа(ИмяПраваДоступа,Метаданные[ТипМетаданных][ИмяМетаданных]);
	
КонецФункции

Функция ШаблонКоманды(ОписаниеТипов)
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПараметра",             ОписаниеТипов);
	Результат.Вставить("Назначение",               "ДляОбъекта");
	Результат.Вставить("ИзменяетВыбранныеОбъекты", Ложь);
	Результат.Вставить("РежимЗаписи",              "Проводить");
	Возврат Результат;
	
КонецФункции

#КонецОбласти