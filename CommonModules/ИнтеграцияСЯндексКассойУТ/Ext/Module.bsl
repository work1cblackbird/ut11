
#Область ПрограммныйИнтерфейс

Функция ОписаниеИспользуемыхНастроек() Экспорт
	
	ОписаниеРеквизитов = Новый ТаблицаЗначений;
	
	ОписаниеРеквизитов.Колонки.Добавить("Настройка");
	ОписаниеРеквизитов.Колонки.Добавить("Представление");
	ОписаниеРеквизитов.Колонки.Добавить("ТипЗначения");
	ОписаниеРеквизитов.Колонки.Добавить("Подсказка");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		СтрокаНастройки = ОписаниеРеквизитов.Добавить();
		СтрокаНастройки.Настройка = "БанковскийСчет";
		СтрокаНастройки.Представление = НСтр("ru = 'Банковский счет'");
		СтрокаНастройки.ТипЗначения = Метаданные.ОпределяемыеТипы.БанковскийСчет.Тип;
		СтрокаНастройки.Подсказка = НСтр("ru = 'Банковский счет, указанный в договоре, на который будут перечисляться денежные средства'");
	КонецЕсли;
	
	СтрокаНастройки = ОписаниеРеквизитов.Добавить();
	СтрокаНастройки.Настройка = "СтатьяДвиженияДенежныхСредствОплаты";
	СтрокаНастройки.Представление = НСтр("ru = 'Статья ДДС'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	СтрокаНастройки.Подсказка = НСтр("ru = 'Статья движения денежных средств для учета поступлений оплаты от клиента'");
	
	СтрокаНастройки = ОписаниеРеквизитов.Добавить();
	СтрокаНастройки.Настройка = "СтатьяДвиженияДенежныхСредствВозвраты";
	СтрокаНастройки.Представление = НСтр("ru = 'Статья ДДС'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	СтрокаНастройки.Подсказка = НСтр("ru = 'Статья движения денежных средств для учета возвратов оплаты клиенту'");
	
	СтрокаНастройки = ОписаниеРеквизитов.Добавить();
	СтрокаНастройки.Настройка = "Эквайер";
	СтрокаНастройки.Представление = НСтр("ru = 'Эквайер'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	СтрокаНастройки.Подсказка = НСтр("ru = 'Организация-партнер, с которой заключен договор подключения к платежной системе'");
	
	СтрокаНастройки = ОписаниеРеквизитов.Добавить();
	СтрокаНастройки.Настройка = "ДоговорЭквайринга";
	СтрокаНастройки.Представление = НСтр("ru = 'Договор подключения к платежной системе'");
	СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДоговорыЭквайринга");
	СтрокаНастройки.Подсказка = НСтр("ru = 'Договор с платежной системой'");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		СтрокаНастройки = ОписаниеРеквизитов.Добавить();
		СтрокаНастройки.Настройка = "СтатьяРасходов";
		СтрокаНастройки.Представление = НСтр("ru = 'Статья расходов'");
		СтрокаНастройки.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
		СтрокаНастройки.Подсказка = НСтр("ru = 'Статья расходов, по которой отражается комиссия Яндекс.Кассы в прочих расходах'");
		
		СтрокаНастройки = ОписаниеРеквизитов.Добавить();
		СтрокаНастройки.Настройка = "АналитикаРасходов";
		СтрокаНастройки.Представление = НСтр("ru = 'Аналитика расходов'");
		СтрокаНастройки.ТипЗначения = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип;
		СтрокаНастройки.Подсказка = НСтр("ru = 'Объект аналитики прочих расходов'");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
			СтрокаНастройки = ОписаниеРеквизитов.Добавить();
			СтрокаНастройки.Настройка = "Подразделение";
			СтрокаНастройки.Представление = НСтр("ru = 'Подразделение'");
			СтрокаНастройки.ТипЗначения = Метаданные.ОпределяемыеТипы.Подразделение.Тип;
			СтрокаНастройки.Подсказка = НСтр("ru = 'Подразделение, на которое будут отнесены прочие расходы'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

Процедура ПриСозданииФормыНастроекЯндексКассы(Форма, Группа, Префикс, ДополнительныеНастройки) Экспорт
	
	ИспользуемыеНастройки = ОписаниеИспользуемыхНастроек();
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ИспользуемыеНастройки Цикл
		
		Реквизит = Новый РеквизитФормы(
			Префикс + ЭлементКоллекции.Настройка,
			ЭлементКоллекции.ТипЗначения,,
			ЭлементКоллекции.Представление,
			Истина);
		
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ДополнительныеНастройки.Вставить(ЭлементКоллекции.Настройка, Реквизит.Имя);
	КонецЦикла;
	
	Реквизит = Новый РеквизитФормы(Префикс + "ДополнительныеПараметрыФормы", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы(Префикс + "АналитикаРасходовОбязательна", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы(Префикс + "АналитикаРасходовЗаказРеализация", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Элементы формы
	РасположениеПолей = Новый Структура;
	РаспределитьРеквизитыПоГруппам(Форма, Группа, Префикс, РасположениеПолей);
	
	// События элементов
	СобытияЭлементов = Новый Структура;
	СобытияЭлементов.Вставить("СтатьяДвиженияДенежныхСредствОплаты",   "НачалоВыбора");
	СобытияЭлементов.Вставить("СтатьяДвиженияДенежныхСредствВозвраты", "НачалоВыбора");
	СобытияЭлементов.Вставить("АналитикаРасходов",                     "НачалоВыбора, ОбработкаВыбора");
	СобытияЭлементов.Вставить("СтатьяРасходов",                        "ПриИзменении, НачалоВыбора, Очистка");
	СобытияЭлементов.Вставить("Эквайер",                               "Создание");
	
	// Связи параметров выбора
	СвязиПараметровВыбора = Новый Структура;
	Связи = Новый Массив;
	Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
	СвязиПараметровВыбора.Вставить("БанковскийСчет", Связи);
	Связи = Новый Массив;
	Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Организация"));
	Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", Префикс + "Эквайер"));
	СвязиПараметровВыбора.Вставить("ДоговорЭквайринга", Связи);
	
	// Проверка заполнения
	РеквизитыДляПроверкиЗаполнения = РеквизитыДляПроверкиЗаполнения();
	
	Элементы = Форма.Элементы;
	ТипПолеФормы = Тип("ПолеФормы");
	
	Для каждого ЭлементКоллекции Из ИспользуемыеНастройки Цикл
		
		ИмяРеквизита = Префикс + ЭлементКоллекции.Настройка;
		
		Поле = Элементы.Добавить(ИмяРеквизита, ТипПолеФормы, РасположениеПолей[ЭлементКоллекции.Настройка]);
		Поле.ПутьКДанным = ИмяРеквизита;
		Поле.Вид = ВидПоляФормы.ПолеВвода;
		Поле.Подсказка = ЭлементКоллекции.Подсказка;
		Поле.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
		Если РеквизитыДляПроверкиЗаполнения.НайтиПоЗначению(ЭлементКоллекции.Настройка) <> Неопределено Тогда
			Поле.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если СвязиПараметровВыбора.Свойство(ЭлементКоллекции.Настройка) Тогда
			Поле.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора[ЭлементКоллекции.Настройка]); 
		КонецЕсли;
		
		Если СобытияЭлементов.Свойство(ЭлементКоллекции.Настройка) Тогда
			МассивСобытий = СтрРазделить(СобытияЭлементов[ЭлементКоллекции.Настройка], ",");
			Для каждого Событие Из МассивСобытий Цикл
				Поле.УстановитьДействие(СокрЛП(Событие), "Подключаемый_Элемент" + СокрЛП(Событие));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьРеквизитыФормы(Форма, Префикс);
	
	ПараметрыВыбораСтатейИАналитик = ПараметрыВыбораСтатейИАналитик(Префикс);
	ДоходыИРасходыСервер.ПриСозданииНаСервере(Форма, ПараметрыВыбораСтатейИАналитик);
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		// Не переопределения события ПриЧтенииНаСервере, поэтому вызывается здесь.
		ДоходыИРасходыСервер.ПриЧтенииНаСервере(Форма, ПараметрыВыбораСтатейИАналитик);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередНачаломРедактированияДополнительныхНастроекЯндексКассы(Контекст, Отказ = Ложь) Экспорт
	
	Если Не Контекст.СДоговором Тогда // Для схемы без договора не показываем страницу настроек.
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = ПараметрыВыбораСтатейИАналитик(Контекст.Префикс);
	ДоходыИРасходыСервер.ПриИзмененииПараметровВыбораСтатей(Контекст.Форма, ПараметрыВыбораСтатейИАналитик); 
	
	Если Не Контекст.НоваяНастройка Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Контекст.Форма;
	Префикс = Контекст.Префикс;
	
	// Банковский счет
	ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643"); //Рубль
	ПараметрыБанковскогоСчетаОрганизации = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	
	ПараметрыБанковскогоСчетаОрганизации.Вставить("Валюта", ВалютаРубль);
	ПараметрыБанковскогоСчетаОрганизации.Вставить("Организация", Форма.Организация);
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		ПараметрыБанковскогоСчетаОрганизации);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда	
		Форма[Префикс + "БанковскийСчет"] = БанковскийСчет;
	КонецЕсли;
	
	// Эквайер
	
	ДанныеЭквайераПоУмолчанию = ОнлайнОплаты.ДанныеЭквайера(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ДанныеЭквайераПоУмолчанию.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеЭквайераПоУмолчанию.КПП);
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Эквайер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		// Эквайер не найден, создадим его
		
		СоздаваемыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СоздаваемыйКонтрагент, ДанныеЭквайераПоУмолчанию);
		СоздаваемыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		НовыйПартнер.Клиент = Истина;
		НовыйПартнер.Поставщик = Истина;
		НовыйПартнер.ПрочиеОтношения = Истина;
		НовыйПартнер.ДатаРегистрации = ТекущаяДатаСеанса();
		НовыйПартнер.Комментарий = НСтр("ru = '#Создан автоматически при настройке подключения к ЮKassa'");
		НовыйПартнер.Наименование = СоздаваемыйКонтрагент.Наименование;
		НовыйПартнер.НаименованиеПолное = СоздаваемыйКонтрагент.НаименованиеПолное;
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		
		Попытка
			НовыйПартнер.Записать();
			СоздаваемыйКонтрагент.Партнер = НовыйПартнер.Ссылка;
			СоздаваемыйКонтрагент.Записать();
			ЭквайерПоУмолчанию = СоздаваемыйКонтрагент.Ссылка;
		Исключение
			ЭквайерПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
		КонецПопытки;
		
	Иначе
		
		// Эквайер найден, подставим его
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЭквайерПоУмолчанию = Выборка.Эквайер;
	КонецЕсли;
	
	Форма[Префикс + "Эквайер"] = ЭквайерПоУмолчанию;
	
	// Договор подключения к платежной системе
	ПараметрыОтбора = Справочники.ДоговорыЭквайринга.ПараметрыОтбораДоговораЭквайринга();
	
	ПараметрыОтбора.Организация = Форма.Организация;
	ПараметрыОтбора.Эквайер = ЭквайерПоУмолчанию;
	ПараметрыОтбора.БанковскийСчет = БанковскийСчет;
	
	ДоговорПоУмолчанию = Справочники.ДоговорыЭквайринга.ДоговорЭквайрингаПоУмолчанию(ПараметрыОтбора);
	Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		
		НовыйДоговор = Справочники.ДоговорыЭквайринга.СоздатьЭлемент();
		НовыйДоговор.Наименование = НСтр("ru = 'ЮKassa'");
		НовыйДоговор.Организация = Форма.Организация;
		НовыйДоговор.БанковскийСчет = БанковскийСчет;
		НовыйДоговор.Контрагент = ЭквайерПоУмолчанию;
		НовыйДоговор.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭквайерПоУмолчанию, "Партнер");
		НовыйДоговор.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		НовыйДоговор.СпособПроведенияПлатежа = Перечисления.СпособыПроведенияПлатежей.ИнтернетЭквайринг;
		НовыйДоговор.СпособОтраженияКомиссии = Перечисления.СпособыОтраженияЭквайринговойКомиссии.ВоВремяТранзакции;
		НовыйДоговор.Комментарий = НСтр("ru = '#Создан автоматически при настройке подключения к ЮKassa'");
		
		Попытка
			НовыйДоговор.Записать();
			ДоговорПоУмолчанию = НовыйДоговор.Ссылка;
		Исключение
			ДоговорПоУмолчанию = Справочники.ДоговорыЭквайринга.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	
	Форма[Префикс + "ДоговорЭквайринга"] = ДоговорПоУмолчанию;
	
КонецПроцедуры

Процедура ПередОкончаниемРедактированияДополнительныхНастроекЯндексКассы(Контекст, Отказ = Ложь) Экспорт
	
	Если Не Контекст.СДоговором Тогда
		Возврат;
	КонецЕсли;
	
	Форма   = Контекст.Форма;
	Префикс = Контекст.Префикс;
	
	РеквизитыДляПроверки = РеквизитыДляПроверкиЗаполнения();
	Для каждого Реквизит Из РеквизитыДляПроверки Цикл
		Реквизит.Значение = Префикс + Реквизит.Значение;
	КонецЦикла; 
	ПроверяемыеРеквизиты = РеквизитыДляПроверки.ВыгрузитьЗначения(); 
	
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик(Префикс)); 
	
	Для каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(Форма[Реквизит]) Тогда
			ЭлементКоллекции = РеквизитыДляПроверки.НайтиПоЗначению(Реквизит);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнено: %1'"), ЭлементКоллекции.Представление),, Реквизит,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииОснованийПлатежа(ОснованияПлатежа) Экспорт
	
	ОснованияПлатежа.Добавить("Документ.ЗаказКлиента");
	ОснованияПлатежа.Добавить("Документ.СчетНаОплатуКлиенту");
	
КонецПроцедуры

Процедура ПриПроверкеЗаполненияОснованияПлатежа(Знач ОснованиеПлатежа, Отказ) Экспорт
	
	РеквизитыДляПроверки = Новый СписокЗначений;
	
	РеквизитыДляПроверки.Добавить("Организация",    НСтр("ru = 'Организация'"));
	РеквизитыДляПроверки.Добавить("Контрагент",     НСтр("ru = 'Контрагент'"));
	РеквизитыДляПроверки.Добавить("БанковскийСчет", НСтр("ru = 'Банковский счет'"));
	РеквизитыДляПроверки.Добавить("СуммаДокумента", НСтр("ru = 'Сумма документа'"));
	РеквизитыДляПроверки.Добавить("Валюта",         НСтр("ru = 'Валюта'"));
	РеквизитыДляПроверки.Добавить("Номер",          НСтр("ru = 'Номер'"));
	РеквизитыДляПроверки.Добавить("Дата",           НСтр("ru = 'Дата'"));
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеПлатежа, СтрСоединить(РеквизитыДляПроверки.ВыгрузитьЗначения(), ","));
	
	Для каждого ЭлементКоллекции Из РеквизитыДляПроверки Цикл
		Если Не ЗначениеЗаполнено(ОснованиеПлатежа[ЭлементКоллекции.Значение]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнен реквизит %1'"), ЭлементКоллекции.Представление), 
				ОснованиеПлатежа, ЭлементКоллекции.Значение,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643");
	
	Если ЗначенияРеквизитов.Валюта <> ВалютаРубль Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Выставлять счета можно только в валюте: %1'"), ВалютаРубль);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОснованиеПлатежа, "Валюта",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОрганизации(Знач Организация, Реквизиты) Экспорт

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП, ЮрФизЛицо");
	
	Реквизиты.ИНН       = ЗначенияРеквизитов.ИНН;
	Реквизиты.КПП       = ЗначенияРеквизитов.КПП;
	Реквизиты.Резидент  = ЗначенияРеквизитов.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	Реквизиты.ЭтоЮрЛицо = ЗначенияРеквизитов.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОснованияПлатежа(Знач ОснованиеПлатежа, ДанныеОснованияПлатежа) Экспорт
	
	ДанныеЗаполнения = ДанныеДокументаДляПолученияПлатежнойСсылки(ОснованиеПлатежа);
	
	Если ДанныеЗаполнения.ДанныеДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента            = ДанныеЗаполнения.ДанныеДокумента[0];
	УчетнаяПолитикаПродавца    = ДанныеЗаполнения.УчетнаяПолитика;
	КонтактнаяИнформация       = ДанныеЗаполнения.КонтактнаяИнформация;
	ДанныеПоНоменклатуре       = ДанныеЗаполнения.РасширенноеОписаниеТоваров;
	Штрихкоды                  = ДанныеЗаполнения.Штрихкоды;
	
	ВидыКонтактнойИнформации = Новый Соответствие();
	
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,    "ФактическийАдрес");
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,	    "ЮридическийАдрес");
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,      "Телефон");
	ВидыКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,        "ЭлектроннаяПочта");
	
	// Данные документа
	ДанныеОснованияПлатежа.Идентификатор = ПолучитьУникальныйИдентификаторПлатежа(ОснованиеПлатежа);
	ДанныеОснованияПлатежа.Номер         = ДанныеДокумента.Номер;
	ДанныеОснованияПлатежа.Сумма         = ДанныеДокумента.Сумма;
	ДанныеОснованияПлатежа.Валюта        = ДанныеДокумента.Валюта;
	
	ДанныеОснованияПлатежа.НазначениеПлатежа = СтрШаблон(НСтр("ru = 'По счету № %1 от %2'"),
		ДанныеДокумента.Номер, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));

	// Банковский счет
	ДанныеОснованияПлатежа.БанковскийСчет.БанкБИК          = ДанныеДокумента.БанкБИК;
	ДанныеОснованияПлатежа.БанковскийСчет.БанкНаименование = ДанныеДокумента.БанкНаименование;
	ДанныеОснованияПлатежа.БанковскийСчет.БанкКоррСчет     = ДанныеДокумента.БанкКоррСчет;
	ДанныеОснованияПлатежа.БанковскийСчет.НомерСчета       = ДанныеДокумента.БанковскийСчетНомерСчета;
	
	// Продавец
	ДанныеОснованияПлатежа.Продавец.УчетнаяПолитика = ПараметрыУчетнойПолитики(УчетнаяПолитикаПродавца);
	ДанныеОснованияПлатежа.Продавец.ИНН             = ДанныеДокумента.ОрганизацияИНН;
	ДанныеОснованияПлатежа.Продавец.КПП             = ДанныеДокумента.ОрганизацияКПП;
	ДанныеОснованияПлатежа.Продавец.Наименование    = ДанныеДокумента.ОрганизацияНаименованиеПолное;
	
	Для каждого ЭлементКоллекции Из КонтактнаяИнформация Цикл
		Если ВидыКонтактнойИнформации.Получить(ЭлементКоллекции.Вид) <> Неопределено Тогда
			ПолеКонтактнойИнформации = ВидыКонтактнойИнформации[ЭлементКоллекции.Вид];
			ДанныеОснованияПлатежа.Продавец[ПолеКонтактнойИнформации] = ЭлементКоллекции.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из ВидыКонтактнойИнформации Цикл
		Если ДанныеОснованияПлатежа.Продавец[ЭлементКоллекции.Значение] = Неопределено Тогда
			ДанныеОснованияПлатежа.Продавец[ЭлементКоллекции.Значение] = "";
		КонецЕсли;
	КонецЦикла;
	
	// Покупатель
	ДанныеОснованияПлатежа.Покупатель.Идентификатор        = ИдентификаторПлательщика(ДанныеДокумента.Контрагент);
	ДанныеОснованияПлатежа.Покупатель.Наименование         = ДанныеДокумента.КонтрагентНаименованиеПолное;
	ДанныеОснованияПлатежа.Покупатель.ИНН         		   = ДанныеДокумента.КонтрагентИНН;
	ДанныеОснованияПлатежа.Покупатель.КонтактныеДанныеЧека = ""; // Будет выбрано в форме подготовки ссылки.

	СпособРасчетаОснованияПлатежаПредоплата = ФормированиеФискальныхЧековСерверПереопределяемый.ОбъектРасчетовПредоплатный(ОснованиеПлатежа);

	// Номенклатура
	Для каждого ЭлементКоллекции Из ДанныеПоНоменклатуре Цикл
		НоваяСтрока = ДанныеОснованияПлатежа.Номенклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		НоваяСтрока.СтавкаНДСКод = ПреобразоватьСтавкуНДС(ЭлементКоллекции.СтавкаНДССсылка, СпособРасчетаОснованияПлатежаПредоплата);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из Штрихкоды Цикл
		ЗаполнитьЗначенияСвойств(ДанныеОснованияПлатежа.Штрихкоды.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(Знач ОснованиеПлатежа, КонтактнаяИнформация) Экспорт
	
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Партнер");
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	ИсточникиКонтактнойИнформации = Новый Массив;
	ИсточникиКонтактнойИнформации.Добавить(Партнер);
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	
	ДанныеПоКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
	
	Для каждого ЭлементКоллекции Из ДанныеПоКонтактнойИнформации Цикл
		Если ЭлементКоллекции.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКоллекции.Представление);
			Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Телефон10Знаков);
			КонтактнаяИнформация.Телефоны.Добавить(Телефон);
		ИначеЕсли ЭлементКоллекции.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда	
			КонтактнаяИнформация.ЭлектроннаяПочта.Добавить(ЭлементКоллекции.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриФормированииСпискаПолучателейСообщения(Знач ОснованиеПлатежа, Знач ВариантОтправки, Получатели) Экспорт
	
	ТаблицаКонтактов = Новый ТаблицаЗначений;
	
	ТаблицаКонтактов.Колонки.Добавить("Контакт");
	ТаблицаКонтактов.Колонки.Добавить("Представление");
	
	Получатели = Новый СписокЗначений;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		ТаблицаКонтактов.Колонки.Добавить("Адрес");
		
		ФормированиеПечатныхФорм.ЗаполнитьПолучателейСообщенияПоШаблону(
			ТаблицаКонтактов, ОснованиеПлатежа.Метаданные().ПолноеИмя(), ОснованиеПлатежа, Ложь);	
		
		Для каждого ЭлементКоллекции Из ТаблицаКонтактов Цикл
			Получатели.Добавить(ЭлементКоллекции.Адрес, ЭлементКоллекции.Представление);
		КонецЦикла;

	ИначеЕсли ВариантОтправки = "Телефон" Тогда	
		
		ТаблицаКонтактов.Колонки.Добавить("НомерТелефона");
		
		ФормированиеПечатныхФорм.ЗаполнитьПолучателейСообщенияПоШаблону(
			ТаблицаКонтактов, ОснованиеПлатежа.Метаданные().ПолноеИмя(), ОснованиеПлатежа, Истина);	
			
		Для каждого ЭлементКоллекции Из ТаблицаКонтактов Цикл
			Получатели.Добавить(ЭлементКоллекции.НомерТелефона, ЭлементКоллекции.Представление);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗагрузкеОперацийПоЯндексКассе(Операции, Результат, Отказ) Экспорт
	
	Если Операции.СДоговором Тогда
		ЗагрузитьОперацииДляСхемыСДоговором(Операции, Результат, Отказ);
	Иначе
		ЗагрузитьОперацииДляСхемыБезДоговора(Операции, Результат, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредопределенныеШаблоныСообщений(Шаблоны) Экспорт
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	// Заказ клиента
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения", "Документ.ЗаказКлиента");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Счет на оплату через Яндекс.Кассу (Заказ клиента)'"));
	Шаблон.Вставить("Тема", СтрШаблон(НСтр("ru = 'Вам выставлен счет на сумму [ЗаказКлиента.СуммаДокумента]%1.'"),
		?(ИспользоватьНесколькоВалют, " [ЗаказКлиента.Валюта]", "")));
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p><br></p>
		|<p>%2</p>
		|<p><br>
		|</p>
		|<p><br></p>
		|<p>%3</p>
		|<p> </p>
		|<p>%4</p>
		|</body>
		|</html>",
		НСтр("ru = '[ЗаказКлиента.КонтактноеЛицоОбращение] [ЗаказКлиента.ПартнерНаименование] благодарим вас, за заказ и просим оплатить счет.'"),
		СтрШаблон(НСтр("ru = 'Сумма счета: [ЗаказКлиента.СуммаДокумента]%1.'"), ?(ИспользоватьНесколькоВалют, " [ЗаказКлиента.Валюта]", "")),
		НСтр("ru = 'Счет можно оплатить, нажав на кнопку'"),
		"[ЗаказКлиента.ПредставлениеСсылки]");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблон.Вставить("ФорматВложений", Новый ХранилищеЗначения(Новый СписокЗначений));
	Шаблоны.Добавить(Шаблон);
	
	// Счет на оплату клиенту
	Шаблон = Новый Структура();
	Шаблон.Вставить("ПолноеИмяТипаНазначения" , "Документ.СчетНаОплатуКлиенту");
	Шаблон.Вставить("Наименование", НСтр("ru = 'Счет на оплату через Яндекс.Кассу (Счет на оплату клиенту)'"));
	Шаблон.Вставить("Тема", СтрШаблон(НСтр("ru = 'Вам выставлен счет на сумму [СчетНаОплатуКлиенту.СуммаДокумента]%1.'"),
		?(ИспользоватьНесколькоВалют, " [СчетНаОплатуКлиенту.Валюта]", "")));
	ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
		|p{line-height:1.15;margin:0;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|</style>
		|</head>
		|<body>
		|<p>%1</p>
		|<p><br></p>
		|<p>%2</p>
		|<p><br></p>
		|<p><br></p>
		|<p>%3</p>
		|<p> </p>
		|<p>%4</p>
		|</body>
		|</html>",
		НСтр("ru = '[СчетНаОплатуКлиенту.КонтактноеЛицоОбращение] [СчетНаОплатуКлиенту.ПартнерНаименование] благодарим вас, за заказ и просим оплатить счет.'"),
		СтрШаблон(НСтр("ru = 'Сумма счета: [СчетНаОплатуКлиенту.СуммаДокумента]%1.'"), ?(ИспользоватьНесколькоВалют, " [СчетНаОплатуКлиенту.Валюта]", "")),
		НСтр("ru = 'Счет можно оплатить, нажав на кнопку'"),
		"[СчетНаОплатуКлиенту.ПредставлениеСсылки]");
	Шаблон.Вставить("Текст", ТекстШаблона);
	Шаблон.Вставить("ФорматВложений", Новый ХранилищеЗначения(Новый СписокЗначений));
	Шаблоны.Добавить(Шаблон);
	
КонецПроцедуры

Функция НачатьЗагрузкуОперацийПоЯндексКассе(Знач ПараметрыЗагрузки) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка операций по Яндекс.Кассе'");
	
	ИмяПроцедуры = "ИнтеграцияСЯндексКассойУТ.ЗагрузитьОперацииПоЯндексКассеВФоне";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗагрузки, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

#КонецОбласти

#Область ФормаНастройкиЯндексКассы

Процедура РаспределитьРеквизитыПоГруппам(Форма, Группа, Префикс, РасположениеПолей)
	
	Элементы = Форма.Элементы;
	
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Основная группа
	ГруппаАналитикиУчета = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаАналитикиУчета", НСтр("ru = 'Укажите настройки учета'"),
		Группа, Неопределено, ОтображениеОбычнойГруппы.ОбычноеВыделение);
		
	// Группа перед колонками
	ГруппаБанковскийСчет = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаБанковскийСчет", "", ГруппаАналитикиУчета);
		
	// Группа колонок
	КолонкиГруппАналитикиУчета = НоваяГруппаФормы(Элементы, 
		Префикс + "КолонкиГруппАналитикиУчета", "", ГруппаАналитикиУчета, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		
	// Левая колонка
	ГруппаАналитикиУчетаЛевая = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаАналитикиУчетаЛевая", "", КолонкиГруппАналитикиУчета);
	
	ГруппаСтатьяДвиженияДенежныхСредствОплаты = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаСтатьяДвиженияДенежныхСредствОплаты", НСтр("ru = 'Поступление оплаты от клиента'"), ГруппаАналитикиУчетаЛевая);
		
	ГруппаАналитикиУчетаЛеваяКомиссия = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаАналитикиУчетаЛеваяКомиссия", НСтр("ru = 'Комиссия'"), ГруппаАналитикиУчетаЛевая);
		
	// Правая колонка
	ГруппаАналитикиУчетаПравая = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаАналитикиУчетаПравая", "", КолонкиГруппАналитикиУчета);
		
	ГруппаСтатьяДвиженияДенежныхСредствВозвраты = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаСтатьяДвиженияДенежныхСредствВозвраты", НСтр("ru = 'Возврат оплаты клиенту'"), ГруппаАналитикиУчетаПравая);
		
	ГруппаАналитикиУчетаПраваяКомиссия = НоваяГруппаФормы(Элементы, 
		Префикс + "ГруппаАналитикиУчетаПраваяКомиссия", "", ГруппаАналитикиУчетаПравая);
	
	РасположениеПолей.Вставить("БанковскийСчет",                        ГруппаБанковскийСчет);
	РасположениеПолей.Вставить("СтатьяДвиженияДенежныхСредствОплаты",   ГруппаСтатьяДвиженияДенежныхСредствОплаты);
	РасположениеПолей.Вставить("Эквайер",                               ГруппаАналитикиУчетаЛеваяКомиссия);
	РасположениеПолей.Вставить("ДоговорЭквайринга",                     ГруппаАналитикиУчетаЛеваяКомиссия);
	РасположениеПолей.Вставить("СтатьяРасходов",                        ГруппаАналитикиУчетаЛеваяКомиссия);
	РасположениеПолей.Вставить("Подразделение",                         ГруппаАналитикиУчетаЛеваяКомиссия);
	РасположениеПолей.Вставить("СтатьяДвиженияДенежныхСредствВозвраты", ГруппаСтатьяДвиженияДенежныхСредствВозвраты);
	РасположениеПолей.Вставить("АналитикаРасходов",                     ГруппаАналитикиУчетаПраваяКомиссия);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФормы(Форма, Префикс)
	
	Форма[Префикс + "ДополнительныеПараметрыФормы"] = Новый Структура;
	
	ДополнительныеПараметрыФормы = Форма[Префикс + "ДополнительныеПараметрыФормы"];
	
	ДополнительныеПараметрыФормы.Вставить("ИспользоватьНесколькоРасчетныхСчетов",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов"));
	ДополнительныеПараметрыФормы.Вставить("ИспользоватьПодразделения",
		ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения"));
	ДополнительныеПараметрыФормы.Вставить("ИспользоватьУчетПрочихДоходовРасходов",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
		
	ДополнительныеПараметрыФормы.Вставить("КэшированныеЗначения",             Неопределено);
	
КонецПроцедуры

Функция НоваяГруппаФормы(Элементы, Имя, Заголовок, Родитель, Группировка = Неопределено, Отображение = Неопределено)
	
	ГруппаСтатьяДвиженияДенежныхСредствОплаты                     = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	ГруппаСтатьяДвиженияДенежныхСредствОплаты.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтатьяДвиженияДенежныхСредствОплаты.Заголовок           = Заголовок;
	ГруппаСтатьяДвиженияДенежныхСредствОплаты.Группировка         = ?(Группировка = Неопределено, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, Группировка);
	ГруппаСтатьяДвиженияДенежныхСредствОплаты.ОтображатьЗаголовок = ?(ЗначениеЗаполнено(Заголовок), Истина, Ложь);
	ГруппаСтатьяДвиженияДенежныхСредствОплаты.Отображение         = ?(Отображение = Неопределено, ОтображениеОбычнойГруппы.Нет, Отображение);
	
	Возврат ГруппаСтатьяДвиженияДенежныхСредствОплаты;
	
КонецФункции

Функция РеквизитыДляПроверкиЗаполнения()
	
	РеквизитыДляПроверки = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		РеквизитыДляПроверки.Добавить("БанковскийСчет",                        НСтр("ru = 'Банковский счет'"));
	КонецЕсли;
	РеквизитыДляПроверки.Добавить("Эквайер",                               НСтр("ru = 'Эквайер'"));
	РеквизитыДляПроверки.Добавить("ДоговорЭквайринга",                     НСтр("ru = 'Договор подключения к платежной системе'"));
	РеквизитыДляПроверки.Добавить("СтатьяДвиженияДенежныхСредствОплаты",   НСтр("ru = 'Статья ДДС для учета поступлений оплаты от клиента'"));
	РеквизитыДляПроверки.Добавить("СтатьяДвиженияДенежныхСредствВозвраты", НСтр("ru = 'Статья ДДС для учета возвратов оплаты клиенту'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		РеквизитыДляПроверки.Добавить("СтатьяРасходов",                        НСтр("ru = 'Статья расходов'"));
		РеквизитыДляПроверки.Добавить("АналитикаРасходов",                     НСтр("ru = 'Аналитика расходов'"));
	КонецЕсли;
	
	Возврат РеквизитыДляПроверки;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаОпераций

Процедура ЗагрузитьОперацииПоЯндексКассеВФоне(Знач Параметры, АдресРезультата) Экспорт
	
	Результат = ОнлайнОплаты.ЗагрузитьОперацииОнлайнОплат(Параметры.Период, Параметры.Организация, Параметры.СДоговором);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьОперацииДляСхемыБезДоговора(Знач Операции, Результат, Отказ)
	
	Результат = 0;
	
	// &ЗамерПроизводительности
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ИнтеграцияСЯндексКассой.СозданиеОперацийПоЯндексКассе");

	Если Операции.ОперацииМассивСтруктур.Количество() = 0 Тогда
		// &ЗамерПроизводительности
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
		Возврат;
	КонецЕсли;
	
	ДатыУспешногоОбмена = Новый Соответствие;
	ПараметрыЗагрузки = Новый Структура;
	КлиентБанк = Обработки.КлиентБанк.Создать();
	ПараметрыЗагрузки.Вставить("ДокументыКЗагрузке", КлиентБанк.ДокументыКЗагрузке.ВыгрузитьКолонки());
	
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ИнициализацияПеременных_БезДоговора");
	
	СтрокиВыписки = Новый Массив;
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Операции.ОперацииТекстовыйФормат);
	Для НомерСтроки = 1 по Текст.КоличествоСтрок() Цикл 
		СтрокиВыписки.Добавить(СокрЛП(Текст.ПолучитьСтроку(НомерСтроки)));
	КонецЦикла;
	
	ДанныеВыписки = ДенежныеСредстваКлиентСервер.РазобратьФайлВыписки1CClientBankExchange(СтрокиВыписки, Ложь);
	ПараметрыЗагрузки.Вставить("Выписка",  Новый Структура);
	ПараметрыЗагрузки.Выписка.Вставить("ДанныеВыписки", ДанныеВыписки);
	ПараметрыЗагрузки.Выписка.Вставить("СтрокиВыписки", СтрокиВыписки);
	ПараметрыЗагрузки.Выписка.Вставить("ТекстСообщения", "");
	ПараметрыЗагрузки.Вставить("ДатаНачалаЗагрузки", Операции.ДатаНачала);
	ПараметрыЗагрузки.Вставить("ДатаКонцаЗагрузки",  Операции.ДатаОкончания);
	
	Если ДанныеВыписки <> Неопределено
		И ТипЗнч(ДанныеВыписки) = Тип("Структура")
		И ДанныеВыписки.Свойство("Заголовок") Тогда
		
		ПараметрыЗагрузки.Вставить("ДатаНачалаЗагрузки", 
		ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(ДанныеВыписки.Заголовок.ДатаНачала));
		ПараметрыЗагрузки.Вставить("ДатаКонцаЗагрузки", 
		ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(ДанныеВыписки.Заголовок.ДатаКонца));
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("ПериодЗагрузки", 
	Новый СтандартныйПериод(ПараметрыЗагрузки.ДатаНачалаЗагрузки, ПараметрыЗагрузки.ДатаКонцаЗагрузки));
	
	ПараметрыЗагрузки.Вставить("АдресХранилищаФайла",  
	ПоместитьВоВременноеХранилище(ПараметрыЗагрузки.Выписка.СтрокиВыписки, Новый УникальныйИдентификатор));
	
	ПараметрыЗагрузки.Вставить("Загружается", Истина);
	
	НомерСчета = "";
	Для Каждого РасчетныйСчет из ПараметрыЗагрузки.Выписка.ДанныеВыписки.РасчетныеСчета Цикл 
		НомерСчета = РасчетныйСчет.РасчСчет
	КонецЦикла;
	Если Не ПустаяСтрока(НомерСчета) Тогда 
		ПараметрыЗагрузки.Вставить("БанковскийСчет",
		Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту("НомерСчета", НомерСчета,,Операции.Организация));
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("ПрямойОбмен", Ложь);
	ПараметрыЗагрузки.Вставить("СтрокиВыписки", ПараметрыЗагрузки.Выписка.СтрокиВыписки);
	ПараметрыЗагрузки.Вставить("СоздаватьКонтрагентов", Ложь);
	ПараметрыЗагрузки.Вставить("ПроводитьДокументы",    Истина);
	ПараметрыЗагрузки.Вставить("Кодировка", "");
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, "ПоместитьВоВременноеХранилище_БезДоговора");
	КоличествоПовторяющихсяДанных = Операции.ОперацииМассивСтруктур.Количество();
	
	Обработки.КлиентБанк.Загрузить(ПараметрыЗагрузки, АдресРезультата);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоПовторяющихсяДанных, "ЗагрузкаВКлиентБанк_БезДоговора");
	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Результат = ТаблицаДокументов.Количество();
	
	УдалитьИзВременногоХранилища(АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьОперацииДляСхемыСДоговором(Знач Операции, Результат, Отказ)
	
	Документы.ОперацияПоЯндексКассе.Создать(Операции, Результат, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

Функция ПараметрыВыбораСтатейИАналитик(Префикс)
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "";
	ПараметрыВыбора.Статья = Префикс + "СтатьяРасходов";
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить(Префикс + "СтатьяРасходов");
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.ОтборСтатейРасходов.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	ПараметрыВыбора.ОтборСтатейРасходов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга;
	
	ПараметрыВыбора.АналитикаРасходов = Префикс + "АналитикаРасходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить(Префикс + "АналитикаРасходов");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

Функция ПараметрыУчетнойПолитики(ДанныеПоУчетнойПолитике)
	
	Если ДанныеПоУчетнойПолитике.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	СтрокаУчетнойПолитики = ДанныеПоУчетнойПолитике[0];
	
	Если СтрокаУчетнойПолитики.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		Возврат 4;     // ЕНВД
	Иначе
		Если СтрокаУчетнойПолитики.ПрименяетсяУСН И СтрокаУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда
			Возврат 3; // УСН
		ИначеЕсли СтрокаУчетнойПолитики.ПрименяетсяУСН И НЕ СтрокаУчетнойПолитики.ПрименяетсяУСНДоходыМинусРасходы Тогда	
			Возврат 2; // УСН
		ИначеЕсли НЕ СтрокаУчетнойПолитики.ПрименяетсяУСН Тогда
			Возврат 1; // ОСН
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьСтавкуНДС(СтавкаНДС, СпособРасчетаОснованияПлатежаПредоплата = Ложь)
	
	// Для формирования ссылки в сервис Ю-Kassa необходимо передать данные непосредственно для формирования чека.
	// В случае, когда способ расчета - это предоплата, нужно заменить код прямой ставки НДС на код расчетной ставки НДС.
	
	СтавкаНДСЧислом = 1;
	
	Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		СтавкаНДСЧислом = 1;
	ИначеЕсли СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
		СтавкаНДСЧислом = 2;
	ИначеЕсли СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС10) Тогда
		СтавкаНДСЧислом = 3;
		Если СпособРасчетаОснованияПлатежаПредоплата Тогда
			СтавкаНДСЧислом = 5;
		КонецЕсли;
	ИначеЕсли СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18) 
		ИЛИ СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20) Тогда
		СтавкаНДСЧислом = 4;
		Если СпособРасчетаОснованияПлатежаПредоплата Тогда
			СтавкаНДСЧислом = 6;
		КонецЕсли;
	ИначеЕсли СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС10_110) Тогда
		СтавкаНДСЧислом = 5;
	ИначеЕсли СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18_118)
		ИЛИ СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20_120) Тогда
		СтавкаНДСЧислом = 6;
	КонецЕсли;
	
	Возврат СтавкаНДСЧислом;
	
КонецФункции

Функция ИдентификаторПлательщика(Знач Контрагент)
	
	Реквизиты = "ИНН, КПП, Наименование";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, Реквизиты);
	
	ИдентификаторПлательщика = СтрШаблон("%1 %2%3%4", 
		СокрЛП(ЗначенияРеквизитов.Наименование),
		СокрЛП(ЗначенияРеквизитов.ИНН),
		СокрЛП(?(Не ПустаяСтрока(ЗначенияРеквизитов.ИНН), "/", "")),
		СокрЛП(?(Не ПустаяСтрока(ЗначенияРеквизитов.ИНН), ЗначенияРеквизитов.КПП, "")));
	
	Возврат СокрЛП(ИдентификаторПлательщика);
	
КонецФункции

#КонецОбласти

#Область УИП

Функция ПолучитьУникальныйИдентификаторПлатежа(Объект)
	
	Префикс = ПолучитьПрефиксДляУИП(Объект.Ссылка);
	Дата = Формат(Объект.Дата, "ДФ=yyMM");
	Номер = СтрЗаменить(Объект.Номер, "-", "");
	Код = Строка(Префикс) + Строка(Дата) + Строка(Номер);
	УИН = ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код);
	
	Возврат УИН;
	
КонецФункции

Функция ПолучитьПрефиксДляУИП(Ссылка)
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить("ЗаказКлиента",        "ЗК");
	Соответствие.Вставить("СчетНаОплатуКлиенту", "СЧ");
	
	Возврат Соответствие[Ссылка.Метаданные().Имя];
	
КонецФункции

Функция ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код,Сдвиг = Неопределено)
	
	Если Сдвиг = Неопределено Тогда
		Сдвиг = 0;
	КонецЕсли;
	
	СтруктураСоответствий = СтруктураСоответствийБуквИЦифр();
	
	СтрокаЦифр = "0123456789";
	ВесРазряда = 1+Сдвиг;
	Результат = 0;
	//Замена служебных символов в коде
	СтрокаБукв = "АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЭЮЯЪЫЬABCDEFGHIJKLMNOPQRSTUVWXYZ";
	НовКод = "";
	Для Инд = 1 По СтрДлина(Код) Цикл
		СимволКода = Сред(Код,Инд,1);
		СимволКода = ВРЕГ(СимволКода);
		Если СтрНайти(СтрокаЦифр,СимволКода)=0 И СтрНайти(СтрокаБукв,СимволКода)=0 Тогда
			НовКод = НовКод + "0";
		Иначе
			НовКод = НовКод + СимволКода;
		КонецЕсли;
	КонецЦикла;
	Код = НовКод;
	//Конец замены
	Если СтрДлина(Код)<19 Тогда
		СтрокаКода = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Код,19,"0","Справа");
	Иначе
		СтрокаКода = Лев(Код,19);
	КонецЕсли;
	
	Для Инд = 1 По 19 Цикл 
		СимволКода = Сред(СтрокаКода,Инд,1);
		Если СтрНайти(СтрокаЦифр,СимволКода)>0 Тогда
			Значение = Число(СимволКода);
		ИначеЕсли СтруктураСоответствий.Свойство(ВРег(СимволКода)) Тогда
			Значение = СтруктураСоответствий[СимволКода]%10;
		КонецЕсли;		
		Результат = Результат + ВесРазряда*Значение;
		
		ВесРазряда = ВесРазряда + 1;
		Если ВесРазряда = 11 Тогда
			ВесРазряда = 1;
		КонецЕсли;
	КонецЦикла;
	
	КонтрольныйРазряд = Результат % 11;
	
	Если КонтрольныйРазряд = 10 Тогда
		Если Сдвиг = 0 Тогда
			Возврат ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код,2);
		Иначе
			КонтрольныйРазряд = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПолныйКод = СтрокаКода+Строка(КонтрольныйРазряд);
	
	Возврат ПолныйКод;
	
КонецФункции

Функция СтруктураСоответствийБуквИЦифр()
	
	СтруктураСоответствий = Новый Структура();
	
	СтруктураСоответствий.Вставить("А", 1);
	СтруктураСоответствий.Вставить("Б", 2);
	СтруктураСоответствий.Вставить("В", 3);
	СтруктураСоответствий.Вставить("Г", 4);
	СтруктураСоответствий.Вставить("Д", 5);
	СтруктураСоответствий.Вставить("Е", 6);
	СтруктураСоответствий.Вставить("Ж", 7);
	СтруктураСоответствий.Вставить("З", 8);
	СтруктураСоответствий.Вставить("И", 9);
	СтруктураСоответствий.Вставить("К", 10);
	СтруктураСоответствий.Вставить("Л", 11);
	СтруктураСоответствий.Вставить("М", 12);
	СтруктураСоответствий.Вставить("Н", 13);
	СтруктураСоответствий.Вставить("О", 14);
	СтруктураСоответствий.Вставить("П", 15);
	СтруктураСоответствий.Вставить("Р", 16);
	СтруктураСоответствий.Вставить("С", 17);
	СтруктураСоответствий.Вставить("Т", 18);
	СтруктураСоответствий.Вставить("У", 19);
	СтруктураСоответствий.Вставить("Ф", 20);
	СтруктураСоответствий.Вставить("Х", 21);
	СтруктураСоответствий.Вставить("Ц", 22);
	СтруктураСоответствий.Вставить("Ч", 23);
	СтруктураСоответствий.Вставить("Ш", 24);
	СтруктураСоответствий.Вставить("Щ", 25);
	СтруктураСоответствий.Вставить("Э", 26);
	СтруктураСоответствий.Вставить("Ю", 27);
	СтруктураСоответствий.Вставить("Я", 28);
	СтруктураСоответствий.Вставить("Ъ", 33);
	СтруктураСоответствий.Вставить("Ы", 36);
	СтруктураСоответствий.Вставить("Ь", 46);
	СтруктураСоответствий.Вставить("A", 1);
	СтруктураСоответствий.Вставить("B", 3);
	СтруктураСоответствий.Вставить("C", 17);
	СтруктураСоответствий.Вставить("D", 29);
	СтруктураСоответствий.Вставить("E", 6);
	СтруктураСоответствий.Вставить("F", 30);
	СтруктураСоответствий.Вставить("G", 31);
	СтруктураСоответствий.Вставить("H", 13);
	СтруктураСоответствий.Вставить("I", 32);
	СтруктураСоответствий.Вставить("J", 33);
	СтруктураСоответствий.Вставить("K", 10);
	СтруктураСоответствий.Вставить("L", 34);
	СтруктураСоответствий.Вставить("M", 12);
	СтруктураСоответствий.Вставить("N", 35);
	СтруктураСоответствий.Вставить("O", 14);
	СтруктураСоответствий.Вставить("P", 16);
	СтруктураСоответствий.Вставить("Q", 36);
	СтруктураСоответствий.Вставить("R", 37);
	СтруктураСоответствий.Вставить("S", 38);
	СтруктураСоответствий.Вставить("T", 18);
	СтруктураСоответствий.Вставить("U", 39);
	СтруктураСоответствий.Вставить("V", 40);
	СтруктураСоответствий.Вставить("W", 41);
	СтруктураСоответствий.Вставить("X", 21);
	СтруктураСоответствий.Вставить("Y", 19);
	СтруктураСоответствий.Вставить("Z", 42);
	
	Возврат СтруктураСоответствий;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

#Область ДанныхДляПолученияПлатежнойСсылки

Функция ДанныеДокументаДляПолученияПлатежнойСсылки(ДокументСсылка)
	
	ДанныеДокумента = Новый Структура;
	
	ДанныеДокумента.Вставить("ДанныеДокумента");
	ДанныеДокумента.Вставить("РасширенноеОписаниеТоваров");
	ДанныеДокумента.Вставить("КонтактнаяИнформация");
	ДанныеДокумента.Вставить("УчетнаяПолитика");
	ДанныеДокумента.Вставить("ШтрихКоды");
	
	////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаТоваровДокумента(ДокументСсылка);
	
	ВидыКонтактнойИнформации = Новый Массив;
	
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Организация");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("Период", РеквизитыДокумента.Дата);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", Истина);
	Запрос.УстановитьПараметр("ВидыКонтактнойИнформации", ВидыКонтактнойИнформации);
	
	Результат = Запрос.ВыполнитьПакет();
	
	////////////////////////////////////////////////////////////////////////////////
	
	ДанныеДокумента.ДанныеДокумента =            Результат[2].Выгрузить();
	ДанныеДокумента.УчетнаяПолитика =            Результат[4].Выгрузить();
	ДанныеДокумента.РасширенноеОписаниеТоваров = Результат[5].Выгрузить();
	ДанныеДокумента.ШтрихКоды =                  Результат[6].Выгрузить();
	ДанныеДокумента.КонтактнаяИнформация =       Результат[7].Выгрузить();
	
	Возврат ДанныеДокумента;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

// Текст запроса для электронного чека и расширенного описания номенклатуры
//
Функция ТекстЗапросаТоваровДокумента(ДокументСсылка)
	
	ТекстСводныеДанные = 
	
	"ВЫБРАТЬ
	|	ДокументОснованиеПлатежа.Номер КАК Номер,
	|	ДокументОснованиеПлатежа.Дата КАК Дата,
	|	ДокументОснованиеПлатежа.Организация КАК Организация,
	|	ДокументОснованиеПлатежа.Контрагент КАК Контрагент,
	|	ДокументОснованиеПлатежа.Контрагент.ИНН КАК КонтрагентИНН,
	|	ДокументОснованиеПлатежа.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДокументОснованиеПлатежа.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ДокументОснованиеПлатежа.Организация.ИНН КАК ОрганизацияИНН,
	|	ДокументОснованиеПлатежа.Организация.КПП КАК ОрганизацияКПП,
	|	ДокументОснованиеПлатежа.БанковскийСчет.НомерСчета КАК БанковскийСчетНомерСчета,
	|	ДокументОснованиеПлатежа.БанковскийСчет.Банк.Наименование КАК БанкНаименование,
	|	ДокументОснованиеПлатежа.БанковскийСчет.Банк.Код КАК БанкБИК,
	|	ДокументОснованиеПлатежа.БанковскийСчет.Банк.КоррСчет КАК БанкКоррСчет,
	|	ДокументОснованиеПлатежа.СуммаДокумента КАК Сумма,
	|	ДокументОснованиеПлатежа.БанковскийСчет КАК БанковскийСчет,
	|	ДокументОснованиеПлатежа.Валюта КАК Валюта
	|ИЗ
	|	&ДокументОснованиеПлатежа КАК ДокументОснованиеПлатежа
	|ГДЕ
	|	ДокументОснованиеПлатежа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	НастройкиУчетаУСНСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы
	|ПОМЕСТИТЬ УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, Организация = ВЫРАЗИТЬ (&Организация КАК Справочник.Организации).ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&Период, Организация = ВЫРАЗИТЬ (&Организация КАК Справочник.Организации).ГоловнаяОрганизация) КАК НастройкиУчетаУСНСрезПоследних
	|		ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = НастройкиУчетаУСНСрезПоследних.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименяетсяУСН, ЛОЖЬ) КАК ПрименяетсяУСН,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(ОснованияПлатежа.НалогообложениеНДС, НЕОПРЕДЕЛЕНО) КАК НалогообложениеНДС
	|ИЗ
	|	ОснованияПлатежа КАК ОснованияПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное = """"
	|				ТОГДА ТаблицаНоменклатуры.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное КАК СТРОКА(128))
	|		КОНЕЦ, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК Характеристика,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ТаблицаНоменклатуры.Количество = 0
	|				ТОГДА ТаблицаНоменклатуры.Сумма
	|			ИНАЧЕ ТаблицаНоменклатуры.Сумма / ТаблицаНоменклатуры.Количество
	|		КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена,
	|	ТаблицаНоменклатуры.Сумма КАК Сумма,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДССсылка,	
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.СтавкаНДС) КАК СтавкаНДС,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Валюта) КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.ПодакцизныйТовар 
	|			ТОГДА 2	
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА 1
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА 3
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА 4
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПредметРасчета,
	|	ЕСТЬNULL(ТаблицаНоменклатуры.Номенклатура.Наименование, """") КАК НаименованиеПолное,
	|	ТаблицаНоменклатуры.Номенклатура.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Номенклатура.Родитель) КАК Родитель,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	"""" КАК КодТовара,
	|	"""" КАК КодСтраныПроисхожденияТовара,
	|	"""" КАК НомерТаможеннойДекларации,
	|	"""" КАК СуммаАкциза
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаНоменклатуры.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И ТаблицаНоменклатуры.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
	|	И ОрганизацииКонтактнаяИнформация.Вид В(&ВидыКонтактнойИнформации)";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ТексНоменклатураДокумента = ТекстЗапросаЗаказКлиента();
		ТекстСводныеДанные = СтрЗаменить(ТекстСводныеДанные, "&ДокументОснованиеПлатежа", "Документ.ЗаказКлиента")
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
		ТексНоменклатураДокумента = ТекстЗапросаСчетНаОплатуКлиенту();
		ТекстСводныеДанные = СтрЗаменить(ТекстСводныеДанные, "&ДокументОснованиеПлатежа", "Документ.СчетНаОплатуКлиенту")
	КонецЕсли;
	
	Возврат ТексНоменклатураДокумента + " ; " + ТекстСводныеДанные;
	
КонецФункции

// Текст запроса к счету
//
Функция ТекстЗапросаСчетНаОплатуКлиенту()
	
	Возврат
	
	"ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.ДокументОснование КАК Основание,
	|	СчетНаОплатуКлиенту.ДокументОснование.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Неопределено КАК ПризнакСпособаРасчетаПредоплата
	|ПОМЕСТИТЬ ОснованияПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &Ссылка"
	
	+ " ; " + ТекстЗапросаОснованиеСчетаНаОплату();
	
КонецФункции

// Текст запроса к товарам заказа
//
Функция ТекстЗапросаЗаказКлиента()
	
	Возврат
	
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Основание,
	|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС	
	|ПОМЕСТИТЬ ОснованияПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)";
	
КонецФункции

// Текст запроса к основаниям счета
//
Функция ТекстЗапросаОснованиеСчетаНаОплату()
	
	Возврат
	
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ	
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,	
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,	
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	(ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,	
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Содержание             КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                            КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                            КАК Упаковка,
	|	ТаблицаДокумента.Количество             КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,	
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаДокумента.Отменено
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	НЕ &ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки	        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика         КАК Характеристика,
	|	ТаблицаДокумента.Упаковка               КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок     КАК Количество,
	|	ТаблицаДокумента.Цена                   КАК Цена,
	|	ТаблицаДокумента.СуммаСНДС              КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС              КАК СтавкаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта          КАК Валюта,
	|	ТаблицаДокумента.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияПлатежа
	|	ПО ОснованияПлатежа.Основание = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	&ОплатаОтКлиента
	|	И (ТаблицаДокумента.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаДокумента.Ссылка.ТребуетсяЗалогЗаТару)";

КонецФункции

#КонецОбласти

#КонецОбласти
