
#Область ПрограммныйИнтерфейс

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки или РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки
// 
// Параметры:
//  ТолькоСервер - Булево - Только сервер
//  ВидыПродукции - Неопределено - Виды продукции
//  ТолькоУчитываемыеВидыПродукции - Булево - Только учитываемые виды продукции
// 
// Возвращаемое значение:
//  Структура - Настройки разбора кода маркировки
Функция НастройкиРазбораКодаМаркировки(ТолькоСервер = Ложь, ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина) Экспорт
	//@skip-check constructor-function-return-section
	Возврат РазборКодаМаркировкиИССлужебныйВызовСервера.НастройкиРазбораКодаМаркировки(ВидыПродукции, ТолькоУчитываемыеВидыПродукции);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РазборКодаМаркировки

// Для разбора кода маркировки следует использовать следующие методы:
//  * РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки
//  * РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки
//
// Параметры:
//   ДанныеДляРазбора - Строка, Структура - данные кода маркировки для разбора
//   ВидыПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//      фильтр по допустимым видам продукции кода маркировки
//   ПримечаниеКРезультатуРазбора - Структура - исходящий параметр, ошибки разбора
//   Настройки - Структура из см. РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки - кешированные настройки разбора кодов маркировки.
//   МодульКонтекста - ОбщийМодуль - источник вызова.
//   ПользовательскиеПараметры - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
//
// Возвращаемое значение:
//   - Неопределено - если код маркировки разобрать не удалось.
//   - см. НовыйРезультатРазбораКодаМаркировки.
//
Функция РазобратьКодМаркировки(ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, МодульКонтекста, ПользовательскиеПараметры) Экспорт
	
	ПримечаниеКРезультатуРазбора = Новый Структура("ИдентификаторОшибки, ТекстОшибки, РезультатРазбора", "", "", Неопределено);
	
	ИдентификаторыОшибок = ИдентификаторыОшибокРазбораКодаМаркировки();
	
	Если Настройки.ДоступныеВидыПродукции.Количество() = 0 Тогда
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.УчетМаркируемойПродукцииНеВедется;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Учет маркируемой продукции не ведется.'");
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыПродукцииДляФильтра = Новый Массив;
	Если ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ВидыПродукцииДляФильтра.Добавить(ВидыПродукции);
	ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		Для Каждого Значение Из ВидыПродукции Цикл
			Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
				ВидыПродукцииДляФильтра.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВидыПродукцииДляФильтра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДляФильтра);
	
	ФильтрПоВидуПродукции = Новый Структура("Использовать, ВидыПродукции", Ложь, Неопределено);
	Если ВидыПродукцииДляФильтра.Количество() > 0 Тогда
		ФильтрПоВидуПродукции.Использовать = Истина;
		ФильтрПоВидуПродукции.ВидыПродукции = Новый ФиксированныйМассив(ВидыПродукцииДляФильтра);
	КонецЕсли;
	
	РезультатРазбора = Неопределено;
	Если ТипЗнч(ДанныеДляРазбора) = Тип("Строка") Тогда
		Если СтрНайти(ДанныеДляРазбора, " ") > 0 Тогда
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Данные для разбора некорректны: код маркировки содержит пробел.'");
			Возврат Неопределено;
		КонецЕсли;
		Если НайденНедопустимыйСимволXML(ДанныеДляРазбора) Тогда
			РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(ДанныеДляРазбора);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
		РезультатРазбора = ДанныеДляРазбора;
	Иначе
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Данные для разбора некорректны.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НачинаетсяСоСкобки    = Ложь;
	СодержитРазделительGS = Ложь;
	
	Если РезультатРазбора = Неопределено Тогда
		НачинаетсяСоСкобки = СтрНачинаетсяС(ДанныеДляРазбора, "(");
		КодМаркировки      = ДанныеДляРазбора;
	Иначе
		КодМаркировки = Неопределено;
		// Модифицирует свойства: СодержитРазделительGS и КодМаркировки
		Если Не РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора,
				ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСвойстваПозиции = "";
	Если НачинаетсяСоСкобки Тогда
		ИмяСвойстваПозиции = "СоСкобкой";
	ИначеЕсли СодержитРазделительGS Тогда
		ИмяСвойстваПозиции = "СРазделителемGS";
	КонецЕсли;
	
	ПараметрыРазбораКодаМаркировки = ИнициализироватьПараметрыРазбораКодаМаркировки();
	ПараметрыРазбораКодаМаркировки.КодМаркировки             = КодМаркировки;
	ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки        = НачинаетсяСоСкобки;
	ПараметрыРазбораКодаМаркировки.СодержитРазделительGS     = СодержитРазделительGS;
	ПараметрыРазбораКодаМаркировки.РезультатРазбора          = РезультатРазбора;
	ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки       = СтрДлина(КодМаркировки);
	ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции     = ФильтрПоВидуПродукции;
	ПараметрыРазбораКодаМаркировки.МодульКонтекста           = МодульКонтекста;
	ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ      = Новый Соответствие;
	ПараметрыРазбораКодаМаркировки.ИмяСвойстваПозиции        = ИмяСвойстваПозиции;
	ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры = ПользовательскиеПараметры;
	
	Если Настройки.ТолькоСервер Тогда
		ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ = Настройки.ОбщиеМодули;
	Иначе
		Для Каждого ИмяОбщегоМодуля Из Настройки.ИменаОбщихМодулей Цикл
			Если ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = Неопределено Тогда
				ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = МодульКонтекста.ОбщийМодуль(ИмяОбщегоМодуля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НайденныеШаблоны = ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки);
	
	Результат = Новый Массив;
	
	Для Каждого ШаблонКодаМаркировки Из НайденныеШаблоны Цикл
		
		ДанныеРезультата = КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);
		
		Если ДанныеРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ДанныеРезультата);
		
	КонецЦикла;
	
	РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(Результат, ФильтрПоВидуПродукции);
	
	Если РезультатПоФильтру.Количество() = 0
		Или СтрНачинаетсяС(КодМаркировки, "02") И Сред(КодМаркировки, 17, 2) = "37" Тогда
		ДанныеРезультата = Неопределено;
		Если ЭтоНеформализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки,
			ДанныеРезультата, Новый ФиксированныйМассив(Результат)) Тогда
			РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРезультата), ФильтрПоВидуПродукции);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПоФильтру.Количество() = 0 Тогда
		
		Если Результат.Количество() > 0 Тогда
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует другим видам продукции.'");
			ПримечаниеКРезультатуРазбора.РезультатРазбора    = Результат;
			Возврат Неопределено;
		Иначе
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиНеСоответствуетНиОдномуШаблону;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки не соответствует ни одному шаблону.'");
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли РезультатПоФильтру.Количество() = 1 Тогда
		
		Возврат РезультатПоФильтру[0];
		
	Иначе
		
		ДанныеРезультата = Неопределено;
		Если ОбработатьРезультатНесколькихШаблонов(РезультатПоФильтру, ДанныеРезультата) Тогда
			Возврат ДанныеРезультата;
		КонецЕсли;
		
		// К примеру логистические укаковки длиной 18 символов для ЕГАИС и ИСМП
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует нескольким шаблонам.'");
		ПримечаниеКРезультатуРазбора.РезультатРазбора    = РезультатПоФильтру;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, МодульКонтекста, ПользовательскиеПараметры, КешНастроекРазбораКодаМаркировки) Экспорт
	
	Если ТипЗнч(ДанныеДляРазбора) <> Тип("Строка") Тогда
		Возврат МодульКонтекста.РазобратьКодМаркировки(
			ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПользовательскиеПараметры);
	КонецЕсли;
	
	ПараметрыОбработкиКодаМаркировки = ИнициализироватьПараметрыОбработкиКодаМаркировки(ДанныеДляРазбора, ВидыПродукции, Настройки, ПользовательскиеПараметры, МодульКонтекста);
	
	РезультатРазбора = РазобратьКодМаркировкиУпрощенно(ПараметрыОбработкиКодаМаркировки, КешНастроекРазбораКодаМаркировки);
	
	Если РезультатРазбора = Неопределено Тогда
		
		Возврат РазобратьКодМаркировкиПолностью(ПараметрыОбработкиКодаМаркировки, ПримечаниеКРезультатуРазбора, КешНастроекРазбораКодаМаркировки);
		
	Иначе
		
		ПримечаниеКРезультатуРазбора = КешНастроекРазбораКодаМаркировки.ПустоеПримечаниеКРезультатуРазбора;
		
	КонецЕсли;
	
	Возврат РезультатРазбора;
	
КонецФункции

// Получает из кода маркировки составные части по из позиции в шаблоне.
// При этом в коде маркировки не должно быть недопустимых символов.
//
// Параметры:
//  КодМаркировки                      - Строка.
//  ПозицииЭлементовКМ                 - см. ПозицииЭлементовВШаблонеКодаМаркировки
//  ИмяСвойстваПозиции                 - Строка.
//  ИмяСвойстваДлины                   - Строка.
//  ИменаИдентификаторовКодаМаркировки - Массив из Строка.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение
//
Функция ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(КодМаркировки, ПозицииЭлементовКМ, ИмяСвойстваПозиции, ИмяСвойстваДлины, ИменаИдентификаторовКодаМаркировки = Неопределено) Экспорт
	
	// Для идентификатора:
	// - ПозицияИдентификатора
	// - ПозицияИдентификатораСоСкобкой
	// - ДлинаИдентификатора
	//
	// Для значения:
	// - ПозицияЗначения
	// - ПозицияЗначенияСоСкобкой
	// - ДлинаЗначения
	
	ЗначенияЭлементовКодаМаркировки = Новый Соответствие;
	
	Если ИменаИдентификаторовКодаМаркировки = Неопределено Тогда
		
		Для Каждого ДанныеИдентификатораЭлементаКМ Из ПозицииЭлементовКМ Цикл
			
			ИмяИдентификатораЭлемента = ДанныеИдентификатораЭлементаКМ.Ключ;
			ПозицияЗначенияЭлементаКМ = ДанныеИдентификатораЭлементаКМ.Значение;
			
			ЗначениеЭлементаКМ = Сред(КодМаркировки, ПозицияЗначенияЭлементаКМ[ИмяСвойстваПозиции], ПозицияЗначенияЭлементаКМ[ИмяСвойстваДлины]);
			
			ЗначенияЭлементовКодаМаркировки.Вставить(ИмяИдентификатораЭлемента, ЗначениеЭлементаКМ);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИмяИдентификатораЭлемента Из ИменаИдентификаторовКодаМаркировки Цикл
			
			ПозицияЗначенияЭлементаКМ = ПозицииЭлементовКМ[ИмяИдентификатораЭлемента];
			
			Если ПозицияЗначенияЭлементаКМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЭлементаКМ = Сред(КодМаркировки, ПозицияЗначенияЭлементаКМ[ИмяСвойстваПозиции], ПозицияЗначенияЭлементаКМ[ИмяСвойстваДлины]);
			
			ЗначенияЭлементовКодаМаркировки.Вставить(ИмяИдентификатораЭлемента, ЗначениеЭлементаКМ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияЭлементовКодаМаркировки;
	
КонецФункции

Функция КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки) Экспорт
	
	ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
	
	ОбщиеМодулиТекущегоШаблона = Новый Массив;
	Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
		МодульРазбораКМ = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		ОбщиеМодулиТекущегоШаблона.Добавить(Новый Структура("Имя, ОбщийМодуль", ИмяОбщегоМодуля, МодульРазбораКМ));
	КонецЦикла;
	
	СоставКодаМаркировки            = СкопироватьСоставКодаМаркировки(ДанныеШаблона.СоставКодаМаркировки);
	ЗначенияЭлементовКодаМаркировки = Неопределено;
	
	ПараметрыОписанияКодаМаркировки = Новый Структура;
	ПараметрыОписанияКодаМаркировки.Вставить("ВидыПродукции",                    ДанныеШаблона.ВидыПродукции);
	ПараметрыОписанияКодаМаркировки.Вставить("ОписаниеЭлементовКодаМаркировки",  ДанныеШаблона.ОписаниеЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("ВключаетИдентификаторыПрименения", ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	ПараметрыОписанияКодаМаркировки.Вставить("ПозицииЭлементовКодаМаркировки",   ДанныеШаблона.ПозицииЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("Шаблон",                           ШаблонКодаМаркировки.Шаблон);
	ПараметрыОписанияКодаМаркировки.Вставить("ТипШтрихкода",                     ШаблонКодаМаркировки.ТипШтрихкода);
	ПараметрыОписанияКодаМаркировки.Вставить("ВидУпаковки",                      ШаблонКодаМаркировки.ВидУпаковки);
	ПараметрыОписанияКодаМаркировки.Вставить("ОбщиеМодули",                      ОбщиеМодулиТекущегоШаблона);
	ПараметрыОписанияКодаМаркировки.Вставить("МодульКонтекста",                  ПараметрыРазбораКодаМаркировки.МодульКонтекста);
	ПараметрыОписанияКодаМаркировки.Вставить("ДополнительныеПараметры",          Настройки.ДополнительныеПараметры);
	ПараметрыОписанияКодаМаркировки.Вставить("Алфавит",                          Настройки.Алфавит);
	
	Если Не КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ЗначенияЭлементовКодаМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУпаковкиНабор = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор");
	
	ПроверятьВидУпаковки = Ложь;
	Если ЗначениеЗаполнено(ШаблонКодаМаркировки.ВидУпаковки) Тогда
		Если ШаблонКодаМаркировки.ВидУпаковки = ВидУпаковкиНабор
			И ЭтоВнутреннийШтрихкод(СоставКодаМаркировки.EAN) Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли СоставКодаМаркировки.Свойство("EAN")
		И ЭтоВнутреннийШтрихкод(СоставКодаМаркировки.EAN)
		И ДанныеШаблона.ВидыУпаковок.Найти(ВидУпаковкиНабор) <> Неопределено Тогда
		ПроверятьВидУпаковки = Истина;
	КонецЕсли;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация);
	ДанныеРезультата.КодМаркировки        = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ШаблонКодаМаркировки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ШаблонКодаМаркировки.ВидУпаковки;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	Если ПроверятьВидУпаковки Тогда
		
		ВидыПродукции = Новый Массив;
		Для Каждого ВидПродукции Из ПараметрыОписанияКодаМаркировки.ВидыПродукции Цикл
			ВидыУпаковокПоВидуПродукции = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
			Если ВидыУпаковокПоВидуПродукции.Найти(ВидУпаковкиНабор) = Неопределено Тогда
				ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковокПоВидуПродукции;
			Иначе
				ВидыУпаковок = Новый Массив;
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидуПродукции Цикл
					Если ВидУпаковки = ВидУпаковкиНабор Тогда
						Продолжить;
					КонецЕсли;
					ВидыУпаковок.Добавить(ВидУпаковки);
				КонецЦикла;
				ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковок;
			КонецЕсли;
			ВидыПродукции.Добавить(ВидПродукции);
		КонецЦикла;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			Возврат Неопределено;
		ИначеЕсли ВидыПродукции.Количество() = ПараметрыОписанияКодаМаркировки.ВидыПродукции.Количество() Тогда
			ДанныеРезультата.ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции;
		Иначе
			ДанныеРезультата.ВидыПродукции = ВидыПродукции;
		КонецЕсли;
		
	Иначе
		
		ДанныеРезультата.ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции; // Состав возможных видов продукции мог поменяться
		
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		
	КонецЕсли;
	
	БазовыйШаблонНормализацииКодаМаркировки = БазовыйШаблонНормализацииКодаМаркировки(ДанныеРезультата, ПараметрыРазбораКодаМаркировки, ЗначенияЭлементовКодаМаркировки);
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализоватьКодМаркировкиПоБазовомуШаблону(
		ДанныеРезультата.КодМаркировки,
		БазовыйШаблонНормализацииКодаМаркировки,
		ЗначенияЭлементовКодаМаркировки,
		СоставКодаМаркировки,
		ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	
	Если ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация Тогда
		
		ДанныеРезультата.Детализация.ШаблонРазбораКодаМаркировки             = ШаблонКодаМаркировки.Шаблон;
		ДанныеРезультата.Детализация.ВключаетИдентификаторыПрименения        = ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения;
		ДанныеРезультата.Детализация.ЗначенияЭлементовКодаМаркировки         = ЗначенияЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.ОписаниеЭлементовКодаМаркировки         = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.НачинаетсяСоСкобки                      = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки;
		ДанныеРезультата.Детализация.СодержитРазделительGS                   = ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		ДанныеРезультата.Детализация.ИмяСвойстваПозиции                      = ПараметрыРазбораКодаМаркировки.ИмяСвойстваПозиции;
		ДанныеРезультата.Детализация.БазовыйШаблонНормализацииКодаМаркировки = БазовыйШаблонНормализацииКодаМаркировки;
		
	КонецЕсли;
	
	Возврат ДанныеРезультата;
	
КонецФункции

// Конструктор результата разбора кода маркировки.
// 
// Параметры:
//  РасширеннаяДетализация - Булево - Расширенная детализация
// 
// Возвращаемое значение:
//  Структура -- результат разбора кода маркировки:
// * КодМаркировки - Строка -
// * НормализованныйКодМаркировки - Строка -
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов -
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС -
// * ВидыПродукции - Неопределено, Массив из ПеречислениеСсылка.ВидыПродукцииИС -
// * ВидыУпаковокПоВидамПродукции - Соответствие из КлючИЗначение -
// * СоставКодаМаркировки - Неопределено,Структура -
// * Детализация - Структура - данные расширенной детализации разбора (опциональный).
Функция НовыйРезультатРазбораКодаМаркировки(РасширеннаяДетализация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодМаркировки",                "");
	Результат.Вставить("НормализованныйКодМаркировки", "");
	Результат.Вставить("ТипШтрихкода",                 ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка"));
	Результат.Вставить("ВидУпаковки",                  ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ПустаяСсылка"));
	Результат.Вставить("ВидыПродукции",                Неопределено);
	Результат.Вставить("ВидыУпаковокПоВидамПродукции", Новый Соответствие);
	Результат.Вставить("СоставКодаМаркировки",         Неопределено);
	
	Если РасширеннаяДетализация Тогда
		
		Детализация = Новый Структура;
		
		Детализация.Вставить("ЭтоНеФормализованныйКодМаркировки",       Ложь);
		Детализация.Вставить("ШаблонРазбораКодаМаркировки",             Неопределено);
		Детализация.Вставить("ВключаетИдентификаторыПрименения",        Ложь);
		Детализация.Вставить("ЗначенияЭлементовКодаМаркировки",         Неопределено);
		Детализация.Вставить("ОписаниеЭлементовКодаМаркировки",         Неопределено);
		Детализация.Вставить("НачинаетсяСоСкобки",                      Ложь);
		Детализация.Вставить("СодержитРазделительGS",                   Ложь);
		Детализация.Вставить("ИмяСвойстваПозиции",                      "");
		Детализация.Вставить("БазовыйШаблонНормализацииКодаМаркировки", "");
		
		Результат.Вставить("Детализация", Детализация);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Инициализировать параметры нормализации кода маркировки
// 
// Возвращаемое значение:
// 	Структура:
// * ВключатьМРЦ - Булево - Признак включения МРЦ
// * ИмяСвойстваКодМаркировки - Строка - Имя свойства для получения кода маркировки
// * НачинаетсяСоСкобки - Булево
// * ВключатьСрокГодности - Булево - признак использования срока годности
// * ДобавитьМРЦПоУмолчанию - Булево
// * ВключатьЛидирующиеНули - Булево
Функция ПараметрыНормализацииКодаМаркировки() Экспорт
	
	ПараметрыНормализации = Новый Структура;
	ПараметрыНормализации.Вставить("ИмяСвойстваКодМаркировки", "КодМаркировки");
	ПараметрыНормализации.Вставить("НачинаетсяСоСкобки",        Истина);
	ПараметрыНормализации.Вставить("ВключатьМРЦ",               Истина); // Табак
	ПараметрыНормализации.Вставить("ВключатьСрокГодности",      Истина); // Молочная продукция
	ПараметрыНормализации.Вставить("ДобавитьМРЦПоУмолчанию",    Ложь);   // НСП
	ПараметрыНормализации.Вставить("ВключатьЛидирующиеНули",    Ложь); // для SSCC упаковок ИС МП
	
	Возврат ПараметрыНормализации;
	
КонецФункции

// Нормализует код маркировки.
// 
// Параметры:
//   РезультатРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС.
//   ПараметрыНормализации - см. ПараметрыНормализацииКодаМаркировки.
//
// Возвращаемое значение:
//   Строка
//
Функция НормализоватьКодМаркировки(РезультатРазбора, ВидПродукции, ПараметрыНормализации = Неопределено) Экспорт
	
	Если РезультатРазбора = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Данные для нормализации кода маркировки отсутствуют.
				|ВидПродукции: %1
				|РезультатРазбора: Неопределено'"),
			ВидПродукции);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если ПараметрыНормализации = Неопределено Тогда
		ПараметрыНормализации = ПараметрыНормализацииКодаМаркировки();
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
			Возврат РазобратьЛогистическуюУпаковкуРасширеннаяВерсия(РезультатРазбора, ПараметрыНормализации, ВидПродукции);
		Иначе
			Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		КонецЕсли;
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.АгрегированныйТаможенныйКод") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
		
		КоличествоВложенныхЕдиницСтрокой = Формат(РезультатРазбора.СоставКодаМаркировки.КоличествоВложенныхЕдиниц, "ЧН=; ЧГ=0");
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			Возврат СтрШаблон("(02)%1(37)%2",
				РезультатРазбора.СоставКодаМаркировки.GTIN,
				КоличествоВложенныхЕдиницСтрокой);
		КонецЕсли;
		
		ЭлементыКМ = Новый Массив;
		ЭлементыКМ.Добавить("02");
		ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
		ЭлементыКМ.Добавить("37");
		ЭлементыКМ.Добавить(КоличествоВложенныхЕдиницСтрокой);
		Возврат СтрСоединить(ЭлементыКМ);
		
	КонецЕсли;
	
	Если РезультатРазбора.СоставКодаМаркировки = Неопределено Тогда
		
		ОписаниеОшибки = Новый Массив;
		ОписаниеОшибки.Добавить(НСтр("ru = 'Данные для нормализации кода маркировки отсутствуют.'"));
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатРазбора, "ПримечаниеКРезультатуРазбора")
			И РезультатРазбора.ПримечаниеКРезультатуРазбора <> Неопределено
			И ЗначениеЗаполнено(РезультатРазбора.ПримечаниеКРезультатуРазбора.ТекстОшибки) Тогда
			ОписаниеОшибки.Добавить(РезультатРазбора.ПримечаниеКРезультатуРазбора.ТекстОшибки);
		КонецЕсли;
		
		ОписаниеОшибки.Добавить(НСтр("ru = 'СоставКодаМаркировки: Неопределено.'"));
		ОписаниеОшибки.Добавить(
			СтрШаблон(
				НСтр("ru = 'ВидПродукции: %1.'"),
				ВидПродукции));
		
		ИменаСвойств = Новый Массив;
		ИменаСвойств.Добавить("Штрихкод");
		ИменаСвойств.Добавить("КодМаркировки");
		ИменаСвойств.Добавить("ВидУпаковки");
		ИменаСвойств.Добавить("ТипШтрихкода");
		
		РазделительGS = РазделительGS();
		
		Для Каждого ИмяСвойства Из ИменаСвойств Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатРазбора, ИмяСвойства) Тогда
				
				Значение = РезультатРазбора[ИмяСвойства];
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					Значение = СтрЗаменить(Значение, РазделительGS, "<GS>");
					Значение = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Значение);
				КонецЕсли;
				
				ОписаниеОшибки.Добавить(
					СтрШаблон(
						НСтр("ru = '%1: %2'"),
						ИмяСвойства,
						Значение));
			КонецЕсли;
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(ОписаниеОшибки, Символы.ПС);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		ВключатьМРЦ = ПараметрыНормализации.ВключатьМРЦ
			И РезультатРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И РезультатРазбора.СоставКодаМаркировки.ВключаетМРЦ;
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			
			Если ВключатьМРЦ Тогда
				
				Возврат СтрШаблон("%1%2%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				
			Иначе
				
				Возврат СтрШаблон("%1%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				
			КонецЕсли;
			
		Иначе
			
			Если ВключатьМРЦ Тогда
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2(8005)%3",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
						РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				ЭлементыКМ.Добавить("8005");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				Возврат СтрСоединить(ЭлементыКМ);
				
			Иначе
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				Возврат СтрСоединить(ЭлементыКМ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")
			И Не РезультатРазбора.СоставКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
			
			Возврат СтрШаблон("%1%2",
				РезультатРазбора.СоставКодаМаркировки.GTIN,
				РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			
			Если ПараметрыНормализации.ДобавитьМРЦПоУмолчанию Тогда
				
				Возврат СтрШаблон("%1%2%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					"AAAA");
				
			Иначе
				
				Возврат СтрШаблон("%1%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыНормализации.ДобавитьМРЦПоУмолчанию Тогда
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2(8005)%3",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
						"000000");
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				ЭлементыКМ.Добавить("8005");
				ЭлементыКМ.Добавить("000000");
				Возврат СтрСоединить(ЭлементыКМ);
				
			Иначе
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				Возврат СтрСоединить(ЭлементыКМ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		
		ВключатьКодТНВЭД = РезультатРазбора.СоставКодаМаркировки.Свойство("КодТНВЭД")
		                 И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
		
		Если ВключатьКодТНВЭД Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2(240)%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить("240");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		
		ВключатьСрокГодности = ПараметрыНормализации.ВключатьСрокГодности
		                     И РезультатРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
		                     И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.ГоденДо);
		
		Если ВключатьСрокГодности Тогда
			
			Если РезультатРазбора.СоставКодаМаркировки.СкоропортящаясяПродукция Тогда
				КодЭлемента = "7003";
				ФорматДаты  = "ДФ=yyMMddHHmm;"; // Формат: YYMMDDHHMM
			Иначе
				КодЭлемента = "17";
				ФорматДаты  = "ДФ=yyMMdd;"; // Формат: YYMMDD
			КонецЕсли;
			
			ЗначениеЭлемента = Формат(РезультатРазбора.СоставКодаМаркировки.ГоденДо, ФорматДаты);
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2(%3)%4",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					КодЭлемента,
					ЗначениеЭлемента);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить(КодЭлемента);
			ЭлементыКМ.Добавить(ЗначениеЭлемента);
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
		Возврат СтрШаблон("(01)%1(21)%2",
			РезультатРазбора.СоставКодаМаркировки.GTIN,
			РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	КонецЕсли;
	
	ЭлементыКМ = Новый Массив;
	ЭлементыКМ.Добавить("01");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
	ЭлементыКМ.Добавить("21");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	Возврат СтрСоединить(ЭлементыКМ);
	
КонецФункции

Функция ПолныйКодМаркировкиПоДаннымРазбораСРасширеннойДетализацией(РезультатРазбора, ВосстанавливатьСтруктуруКодаМаркировки = Ложь, КодМаркировки = Неопределено) Экспорт
	
	Если РезультатРазбора = Неопределено
		Или Не РезультатРазбора.Свойство("Детализация")
		Или Не РезультатРазбора.СоставКодаМаркировки.Свойство("ВключаетКриптоХвост")
		Или Не РезультатРазбора.СоставКодаМаркировки.ВключаетКриптоХвост Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Детализация = РезультатРазбора.Детализация;
	
	Если КодМаркировки = Неопределено Тогда
		
		Если ВосстанавливатьСтруктуруКодаМаркировки
			Или Детализация.СодержитРазделительGS
			Или Не Детализация.ВключаетИдентификаторыПрименения Тогда
			
			Возврат ПолныйКодМаркировкиИзЗначенийЭлементов(
				Детализация.ЗначенияЭлементовКодаМаркировки,
				Детализация.ОписаниеЭлементовКодаМаркировки);
			
		КонецЕсли;
		
		Возврат Неопределено;
	
	ИначеЕсли Детализация.ВключаетИдентификаторыПрименения Тогда
		
		Если Детализация.СодержитРазделительGS Тогда
			
			Возврат КодМаркировки;
			
		ИначеЕсли ВосстанавливатьСтруктуруКодаМаркировки Тогда
			
			Возврат ПолныйКодМаркировкиИзЗначенийЭлементов(
				Детализация.ЗначенияЭлементовКодаМаркировки,
				Детализация.ОписаниеЭлементовКодаМаркировки);
			
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат КодМаркировки;
	
КонецФункции

// Собирает полный код маркировки.
// 
// Параметры:
//   ЗначенияЭлементовКМ - Соответствие.
//   ОписаниеЭлементовКодаМаркировки - Структура.
//   ИдентификаторыПримененияСРазделителемGS - см. ИдентификаторыПримененияСРазделителемGS.
//
// Возвращаемое значение:
//   Строка
//
Функция ПолныйКодМаркировкиИзЗначенийЭлементов(ЗначенияЭлементовКМ, ОписаниеЭлементовКодаМаркировки, ИдентификаторыПримененияСРазделителемGS = Неопределено) Экспорт
	
	СтрокиПолногоКодаМаркировки = Новый Массив;
	
	КоличествоЭлементов = ОписаниеЭлементовКодаМаркировки.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		ВключаетИдентификаторыПрименения = ЗначениеЗаполнено(ОписаниеЭлементовКодаМаркировки[0].Код);
	Иначе
		ВключаетИдентификаторыПрименения = Ложь;
	КонецЕсли;
	
	Если ВключаетИдентификаторыПрименения Тогда
		
		Если ИдентификаторыПримененияСРазделителемGS = Неопределено Тогда
			ИдентификаторыПримененияСРазделителемGS = ИдентификаторыПримененияСРазделителемGS();
		КонецЕсли;
		
		РазделительGS = РазделительGS();
		
		Для ИндексЭлемента = 0 По КоличествоЭлементов - 1 Цикл
			
			КодЭлемента = ОписаниеЭлементовКодаМаркировки[ИндексЭлемента].Код;
			ИмяЭлемента = ОписаниеЭлементовКодаМаркировки[ИндексЭлемента].Имя;
			
			СтрокиПолногоКодаМаркировки.Добавить(КодЭлемента);
			СтрокиПолногоКодаМаркировки.Добавить(ЗначенияЭлементовКМ[ИмяЭлемента]);
			
			Если ИдентификаторыПримененияСРазделителемGS[КодЭлемента] <> Неопределено Тогда
				Если (ИндексЭлемента + 1) < КоличествоЭлементов Тогда
					СтрокиПолногоКодаМаркировки.Добавить(РазделительGS);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОписаниеЭлементаКМ Из ОписаниеЭлементовКодаМаркировки Цикл
			СтрокиПолногоКодаМаркировки.Добавить(ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	ПолныйКодМаркировки = СтрСоединить(СтрокиПолногоКодаМаркировки);
	
	Возврат ПолныйКодМаркировки;
	
КонецФункции

// Идентификаторы ошибок разобра кода маркировки.
//
// Возвращаемое значение:
//   Структура:
//    * УчетМаркируемойПродукцииНеВедется              - Строка
//    * ДанныеДляРазбораНекорректны                    - Строка
//    * КодМаркировкиНеСоответствуетНиОдномуШаблону    - Строка
//    * КодМаркировкиСоответствуетНесколькимШаблонам   - Строка
//    * КодМаркировкиСоответствуетДругимВидамПродукции - Строка
//    * НекорректныйФорматКодМаркировки                - Строка
//
Функция ИдентификаторыОшибокРазбораКодаМаркировки() Экспорт
	
	ИдентификаторОшибки = Новый Структура;
	ИдентификаторОшибки.Вставить("УчетМаркируемойПродукцииНеВедется",              "УчетМаркируемойПродукцииНеВедется");
	ИдентификаторОшибки.Вставить("ДанныеДляРазбораНекорректны",                    "ДанныеДляРазбораНекорректны");
	ИдентификаторОшибки.Вставить("КодМаркировкиНеСоответствуетНиОдномуШаблону",    "КодМаркировкиНеСоответствуетНиОдномуШаблону");
	ИдентификаторОшибки.Вставить("КодМаркировкиСоответствуетНесколькимШаблонам",   "КодМаркировкиСоответствуетНесколькимШаблонам");
	ИдентификаторОшибки.Вставить("КодМаркировкиСоответствуетДругимВидамПродукции", "КодМаркировкиСоответствуетДругимВидамПродукции");
	ИдентификаторОшибки.Вставить("НекорректныйФорматКодМаркировки",                "НекорректныйФорматКодМаркировки");
	
	Возврат ИдентификаторОшибки;
	
КонецФункции

Функция ШаблоныКодовМаркировкиПоОтбору(ШаблоныКодовМаркировки, Отбор) Экспорт
	
	Если ТипЗнч(ШаблоныКодовМаркировки) = Тип("Массив") Тогда
		
		НайденныеШаблоны = Новый Массив;
		
		Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
			
			ШаблонНайден = Истина;
			
			Для Каждого ОтборКлючЗначение Из Отбор Цикл
				Если ШаблонКМ[ОтборКлючЗначение.Ключ] <> ОтборКлючЗначение.Значение Тогда
					ШаблонНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ШаблонНайден Тогда
				НайденныеШаблоны.Добавить(ШаблонКМ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НайденныеШаблоны = ШаблоныКодовМаркировки.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	Возврат НайденныеШаблоны;
	
КонецФункции

Функция МРЦПоВидуУпаковки(МРЦСтрокой, ВидУпаковки) Экспорт
	
	РезультатПроверки = Новый Структура("ЭтоМРЦ, ЗначениеМРЦ", Ложь, 0);
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		МРЦ        = 0;
		АлфавитМРЦ = ДопустимыеСимволыВКодеМаркировки().БуквыЦифрыЗнакиМРЦ;
		
		Для Индекс = 1 По СтрДлина(МРЦСтрокой) Цикл
			Символ = Сред(МРЦСтрокой, Индекс, 1);
			ИндексСимвола = СтрНайти(АлфавитМРЦ, Символ) - 1;
			Если ИндексСимвола < 0 Тогда
				Возврат РезультатПроверки;
			ИначеЕсли ИндексСимвола > 0 Тогда
				МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
			КонецЕсли;
		КонецЦикла;
		
		// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
		Если МРЦ > 500000 Или МРЦ % 100 > 0 Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		
	Иначе
		
		МРЦ = Число(МРЦСтрокой);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МРЦ) Тогда
		МРЦ = МРЦ / 100;
	КонецЕсли;
	
	РезультатПроверки.ЭтоМРЦ      = Истина;
	РезультатПроверки.ЗначениеМРЦ = МРЦ;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция РезультатРазбораКодаМаркировкиПоФильтру(РезультатРазбораКМ, ФильтрПоВидуПродукции) Экспорт
	
	РезультатПоФильтру = Новый Массив;
	
	Для Каждого ДанныеРезультата Из РезультатРазбораКМ Цикл
		
		ВидыПродукцииПоФильтру = ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ДанныеРезультата.ВидыПродукции);
		
		Если ВидыПродукцииПоФильтру.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПоФильтру.Добавить(ДанныеРезультата);
		
		ДанныеРезультата.ВидыПродукции = ВидыПродукцииПоФильтру;
		
		ВидыУпаковокПоВидамПродукции = Новый Соответствие;
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции = ВидыУпаковокПоВидамПродукции;
		
		Если Не ЗначениеЗаполнено(ДанныеРезультата.ВидУпаковки) Тогда
			ВидУпаковки  = Неопределено;
			ВидыУпаковок = Новый Соответствие;
			Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидамПродукции[ВидПродукции] Цикл
					Если ВидыУпаковок[ВидУпаковки] = Неопределено Тогда
						ВидыУпаковок[ВидУпаковки] = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ДанныеРезультата.ВидУпаковки = ?(ВидыУпаковок.Количество() = 1, ВидУпаковки, ДанныеРезультата.ВидУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПоФильтру;
	
КонецФункции

// Определяет является ли штрихкод кодом ввода остатков.
// 
// Параметры:
//  Штрихкод                     - Строка - штрихкод в формате EAN, GTIN или код маркировки.
//  ТолькоВСоставеКодаМаркировки - Булево - Признак проверки наличия GTIN остатков
//                                          только в составе кода маркировки.
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодов ввода остатков.
Функция ЭтоШтрихкодВводаОстатков(Штрихкод, ТолькоВСоставеКодаМаркировки = Ложь) Экспорт
	
	Если СтрНачинаетсяС(Штрихкод, "(") Тогда
		Возврат Сред(Штрихкод,5,3) = "029"; //Код маркировки со скобками
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) > 14 Тогда
		Если СтрНачинаетсяС(Штрихкод, "029") Тогда
			Возврат МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Лев(Штрихкод, 14)); // Табачная пачка
		КонецЕсли;
		Возврат Лев(Штрихкод, 5) = "01029"; // Код маркировки без скобок.
	КонецЕсли;
	
	Если ТолькоВСоставеКодаМаркировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) = 13 Тогда
		Возврат Лев(Штрихкод, 2) = "29"; // Штрихкод EAN.
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) = 14 Тогда
		Возврат Лев(Штрихкод, 3) = "029"; // Штрихкод GTIN.
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Определяет является ли штрихкод внутренним штрих-кодом EAN.
//
//Параметры:
//   Штрихкод - Строка - штрихкод в формате EAN, GTIN или код маркировки.
//
//Возвращаемое значение:
//   Булево - Истина, если штрихкод является внутренним.
Функция ЭтоВнутреннийШтрихкод(Штрихкод) Экспорт
	
	Если СтрДлина(Штрихкод) = 13 Тогда
		Возврат Лев(Штрихкод, 1) = "2"; // Штрихкод EAN.
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) = 14 Тогда
		Возврат Лев(Штрихкод, 2) = "02"; // Штрихкод GTIN.
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет является ли штрихкод штрих-кодом GTIN.
//
// Параметры:
//   Штрихкод - Строка - отсканированный штрихкод
//
// Возвращаемое значение:
//   Булево - Истина, если штрихкод в формате EAN8, EAN13, GTIN14
//
Функция ЭтоEANИлиGTIN(Штрихкод) Экспорт
	
	Если СтрДлина(Штрихкод) > 14 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипШтрихкодаСтрокой = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаСтрокой = "ITF14" Тогда
		Возврат Истина;
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN13" Тогда
		Возврат Истина;
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN8" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область НастройкиРазбораКодаМаркировки

// Возвращает структуру из строк с допустимыми символами
// 
// Возвращаемое значение:
// 	Структура - допустимые символы в коде маркировки:
// * БуквыЦифры - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
// * БуквыЦифрыЗнаки - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”%&’()*+,-./_:;=<>?"
// * БуквыЦифрыЗнакиМРЦ - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?()"
// * Цифры - Строка - "0123456789"
// * БуквыПрописныеЦифры - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
//
Функция ДопустимыеСимволыВКодеМаркировки() Экспорт
	Алфавит = Новый Структура;
	Алфавит.Вставить("БуквыЦифры",          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
	Алфавит.Вставить("БуквыЦифрыЗнаки",     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?");
	Алфавит.Вставить("БуквыЦифрыЗнакиМРЦ",  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?");
	Алфавит.Вставить("Цифры",               "0123456789");
	Алфавит.Вставить("БуквыПрописныеЦифры", "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
	Возврат Алфавит;
КонецФункции

Функция ТипШтрихкодаИВидУпаковки() Экспорт
	Данные = Новый Структура;
	Данные.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка"));
	Данные.Вставить("ВидУпаковки",  ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ПустаяСсылка"));
	Возврат Данные;
КонецФункции

// Получает позиции элементов в шаблоне кода маркировки.
//
// Параметры:
//  НастройкиРазбораКодаМаркировки - см. НастройкиРазбораКодаМаркировки.
//  ОписаниеЭлементовКодаМаркировки - Соответствие из КлючИЗначение - см. НастройкиРазбораКодаМаркировки.
//                                    НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонРазбораКодаМаркировки].ОписаниеЭлементовКодаМаркировки
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//    * Ключ     - Строка    - Значение идентификатора элемента КМ
//    * Значение - Структура:
//       ** Позиция          - Число.
//       ** ПозицияСоСкобкой - Число.
//       ** Длина            - Число.
//
//@skip-check doc-comment-field-type-strict
Функция ПозицииЭлементовВШаблонеКодаМаркировки(НастройкиРазбораКодаМаркировки, ОписаниеЭлементовКодаМаркировки) Экспорт
	
	ПозицииЭлементовКМ = Новый Соответствие;
	
	ПозицияЗначенияЭлемента                = 1;
	ПозицияЗначенияЭлементаСоСкобкой       = 1;
	ПозицияЗначенияЭлементаСРазделителемGS = 1;
	
	ПорядковыйНомерЭлемента = 0;
	КоличествоЭлементов     = ОписаниеЭлементовКодаМаркировки.Количество();
	
	Для Каждого ОписаниеЭлементаКМ Из ОписаниеЭлементовКодаМаркировки Цикл
		
		ПорядковыйНомерЭлемента = ПорядковыйНомерЭлемента + 1;
		
		ПозицияЗначенияЭлементаКМ = Новый Структура;
		ПозицияЗначенияЭлементаКМ.Вставить("ПорядковыйНомерЭлемента",        ПорядковыйНомерЭлемента);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначения",                0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначенияСоСкобкой",       0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначенияСРазделителемGS", 0);
		ПозицияЗначенияЭлементаКМ.Вставить("ДлинаЗначения",                  ОписаниеЭлементаКМ.Длина);
		
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатора",                0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатораСоСкобкой",       0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатораСРазделителемGS", 0);
		ПозицияЗначенияЭлементаКМ.Вставить("ДлинаИдентификатора",                  0);
		ПозицияЗначенияЭлементаКМ.Вставить("Код",                                  ОписаниеЭлементаКМ.Код);
		
		ПозицииЭлементовКМ[ОписаниеЭлементаКМ.Имя] = ПозицияЗначенияЭлементаКМ;
		
		Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Код) Тогда
			
			ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора                  = СтрДлина(ОписаниеЭлементаКМ.Код);
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатора                = ПозицияЗначенияЭлемента;
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСоСкобкой       = ПозицияЗначенияЭлементаСоСкобкой + 1;
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСРазделителемGS = ПозицияЗначенияЭлементаСРазделителемGS;
			
			
			ПозицияЗначенияЭлемента                = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатора                + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора;
			ПозицияЗначенияЭлементаСоСкобкой       = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСоСкобкой       + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора + 1; // добавляем по "(" и ")"
			ПозицияЗначенияЭлементаСРазделителемGS = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСРазделителемGS + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора;
			
			ПозицияЗначенияЭлементаКМ.ПозицияЗначенияСоСкобкой       = ПозицияЗначенияЭлементаСоСкобкой;
			ПозицияЗначенияЭлементаКМ.ПозицияЗначенияСРазделителемGS = ПозицияЗначенияЭлементаСРазделителемGS;
			
			ПозицияЗначенияЭлементаСоСкобкой       = ПозицияЗначенияЭлементаСоСкобкой       + ОписаниеЭлементаКМ.Длина;
			ПозицияЗначенияЭлементаСРазделителемGS = ПозицияЗначенияЭлементаСРазделителемGS + ОписаниеЭлементаКМ.Длина;
			Если Не (НастройкиРазбораКодаМаркировки.ИдентификаторыПримененияСРазделителемGS[ОписаниеЭлементаКМ.Код] = Неопределено
				Или ПорядковыйНомерЭлемента = КоличествоЭлементов) Тогда
				ПозицияЗначенияЭлементаСРазделителемGS = ПозицияЗначенияЭлементаСРазделителемGS + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияЗначенияЭлементаКМ.ПозицияЗначения = ПозицияЗначенияЭлемента;
		
		ПозицияЗначенияЭлемента = ПозицияЗначенияЭлемента + ОписаниеЭлементаКМ.Длина;
		
	КонецЦикла;
	
	Возврат ПозицииЭлементовКМ;
	
КонецФункции

Функция СкопироватьСоставКодаМаркировки(СоставКодаМаркировки) Экспорт
	
	НовыйСоставКодаМаркировки = Новый Структура;
	
	Для Каждого КлючЗначение Из СоставКодаМаркировки Цикл
		НовыйСоставКодаМаркировки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат НовыйСоставКодаМаркировки;
	
КонецФункции

Функция ИдентификаторыПримененияСРазделителемGS() Экспорт
	
	Идентификаторы = Новый Соответствие;
	
	КодыGS1 = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.КодыGS1();
	Для Каждого ДанныеКода Из КодыGS1 Цикл
		Если ДанныеКода.Значение.ЕстьРазделитель Тогда
			Идентификаторы.Вставить(ДанныеКода.Ключ, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

// Настройки влияющие на процесс разбора кода маркировки.
//
// Возвращаемое значение:
//    Структура:
//     * ПроверятьАлфавитЭлементов - Булево - Выполнять проверку символовсчитанных кодов маркировки на вхождение в множество допустимых символов GS1.
//     * РасширеннаяДетализация - Булево - Служебный параметр.
//     * ВалидироватьШтрихкодЛогистическойУпаковкиGS1128БезРазделителей - Булево - Служебный параметр. Позволяет отсекать логистические упаковки формата GS1 без разделителей, не прошедшие проверки.
//     * ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками - Булево - Служебный параметр. Позволяет отсекать логистические упаковки формата GS1, не прошедшие проверки.
//
Функция ПользовательскиеПараметрыРазбораКодаМаркировки() Экспорт
	
	ПользовательскиеПараметры = Новый Структура;
	ПользовательскиеПараметры.Вставить("ПроверятьАлфавитЭлементов",                                      Истина);
	ПользовательскиеПараметры.Вставить("РасширеннаяДетализация",                                         Ложь);
	ПользовательскиеПараметры.Вставить("ВалидироватьШтрихкодЛогистическойУпаковкиGS1128БезРазделителей", Истина);
	ПользовательскиеПараметры.Вставить("ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками",       Истина);
	
	Возврат ПользовательскиеПараметры;
	
КонецФункции

// Набор коллекций необходимых для "упрощенного" разбора с использованием предыдущих результатов.
//
// Возвращаемое значение:
//    Структура:
//     * ШаблоныПоИдентификатору - Соответствие из КлючИЗначение:
//        ** Ключ     - Строка - ИнициализироватьНастройкиШаблонаРазобранногоКодаМаркировки.ИдентификаторДопустимыхШаблонов
//        ** Значение - см. ИнициализироватьНастройкиШаблонаРазобранногоКодаМаркировки.
//     * ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN - Соответствие из КлючИЗначение:
//        ** Ключ     - Строка.
//        ** Значение - Булево.
//     * ПустоеПримечаниеКРезультатуРазбора - Структура - примечание к результату успешного разбора
//
Функция ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов() Экспорт
	
	ПримечаниеКРезультатуРазбора = Новый Структура("ИдентификаторОшибки, ТекстОшибки, РезультатРазбора", "", "", Неопределено);
	
	КешНастроекРазбораКодаМаркировки = Новый Структура;
	КешНастроекРазбораКодаМаркировки.Вставить("ШаблоныПоИдентификатору",                         Новый Соответствие);
	КешНастроекРазбораКодаМаркировки.Вставить("ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN", Новый Соответствие);
	КешНастроекРазбораКодаМаркировки.Вставить("ПустоеПримечаниеКРезультатуРазбора",              ПримечаниеКРезультатуРазбора);
	
	Возврат КешНастроекРазбораКодаМаркировки;
	
КонецФункции

#КонецОбласти

Функция ВидУпаковкиСоответствуетРазбору(ВидПродукции, ВидУпаковки, ДанныеРазбора, ЗаполнятьВидПродукцииПодВидУпаковки = Ложь) Экспорт
	
	Если ДанныеРазбора = Неопределено Или Не ЗначениеЗаполнено(ВидУпаковки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		
		Если ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции] = Неопределено
			Или ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции].Найти(ВидУпаковки) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ВидыПродукцииВидаУпаковки = Новый Массив;
		
		Для Каждого ВидПродукцииИС Из ДанныеРазбора.ВидыПродукции Цикл
			Если ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукцииИС].Найти(ВидУпаковки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВидыПродукцииВидаУпаковки.Добавить(ВидПродукцииИС);
		КонецЦикла;
		
		Если ВидыПродукцииВидаУпаковки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗаполнятьВидПродукцииПодВидУпаковки Тогда
			Если ВидыПродукцииВидаУпаковки.Количество() = 1 Тогда
				ВидПродукции = ВидыПродукцииВидаУпаковки[0];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НастройкиРазбораКодаМаркировкиДляХэшаНормализации(ВидПродукции = Неопределено) Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляХэшаНормализации(ВидПродукции);
КонецФункции

Функция НастройкиРазбораКодаМаркировкиДляСохраненияВПул() Экспорт
	Возврат РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
КонецФункции

Функция РазделительGS() Экспорт
	Возврат Символ(29);
КонецФункции

Функция ВесКодаМаркировкиСтрокой(Вес) Экспорт
	Возврат "3103" + СтрЗаменить(Формат(Вес, "ЧЦ=6; ЧДЦ=3; ЧН=000000; ЧВН=; ЧГ=0;"), ",", "");
КонецФункции

Функция ОбъемКодаМаркировкиСтрокой(Объем) Экспорт
	Возврат "3353" + СтрЗаменить(Формат(Объем, "ЧЦ=6; ЧДЦ=3; ЧН=000000; ЧВН=; ЧГ=0;"), ",", "");
КонецФункции

// Возвращает рассчитанное контрольное число.
//
// Параметры:
// 	Штрихкод - Строка - часть штрихкода SSCC, состоящая из цифр, без идентификатора применения SSCC
// 	                    (00 или (00)) и без контрольной цифры
//
// Возвращаемое значение:
// 	Число - Цифра контрольного числа SSCC
//
Функция КонтрольноеЧислоSSCC(Штрихкод) Экспорт
	КонтрольноеЧисло = 0;
	
	Цифры = Новый Массив;
	Позиций = СтрДлина(Штрихкод);
	Для НомерПозиции = 1 По Позиций Цикл
		Цифры.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(Штрихкод, НомерПозиции, 1)));
	КонецЦикла;
	
	СуммаЧетных = 0;
	СуммаНечетных = 0;
	Для НомерПозиции = 0 По Позиций-1 Цикл
		Если НомерПозиции%2=0 Тогда
			СуммаЧетных=СуммаЧетных+Цифры[НомерПозиции];
		Иначе
			СуммаНечетных=СуммаНечетных+Цифры[НомерПозиции];
		КонецЕсли;
	КонецЦикла;
	
	СверяемоеЧисло = СуммаЧетных * 3 + СуммаНечетных;
	КонтрольноеЧисло = 10 - СверяемоеЧисло%10;
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
КонецФункции

Функция ЗаводскойСерийныйНомерИзШтрихкода(Штрихкод, Base64 = Истина) Экспорт
	
	Результат = "";
	
	ПозицияПоследнегоРазделителя = СтрНайти(Штрихкод, РазделительGS(), НаправлениеПоиска.СКонца);
	Если ПозицияПоследнегоРазделителя > 0 Тогда
		Окончание = Сред(Штрихкод, ПозицияПоследнегоРазделителя + 1);
		Если Лев(Окончание, 2) = "97" Тогда
			Результат = Сред(Окончание, 3);
			Если Не Base64 Тогда
				Результат = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку на соответствие алфавиту кода маркировки.
//
// Параметры:
//  Код - Строка - Код маркировки.
//  Алфавит - Строка - перечень допустимых символов.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует алфавиту.
Функция КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс <= ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  Штрихкод - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(Знач Штрихкод) Экспорт
	
	Если Лев(Штрихкод, 1) = "0" Тогда
		Штрихкод = Сред(Штрихкод, 2); //EAN13
		Если Лев(Штрихкод, 5) = "00000" Тогда
			Штрихкод = Сред(Штрихкод, 6); //EAN8
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборКодаМаркировки

Функция ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки)
	
	ИмяКолонкиПоиска = "Длина";
	
	Отбор = Новый Структура;
	
	Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		ИмяКолонкиПоиска = "ДлинаСоСкобкой";
		
	ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитРазделительGS Тогда
		
		ИмяКолонкиПоиска = "ДлинаСоСкобкой";
		
		КоличествоЭлементов = ПараметрыРазбораКодаМаркировки.РезультатРазбора.ДанныеШтрихкода.Количество();
		
		Отбор.Вставить("КоличествоЭлементов", КоличествоЭлементов);
		
	КонецЕсли;
	
	Отбор.Вставить(ИмяКолонкиПоиска, ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки);
	
	НайденныеШаблоны = ШаблоныКодовМаркировкиПоОтбору(Настройки.ШаблоныКодовМаркировки, Отбор);
	
	Возврат НайденныеШаблоны;
	
КонецФункции

Функция КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ЗначенияЭлементовКодаМаркировки = Неопределено)
	
	ИмяСвойстваПозицииЗначения = "ПозицияЗначения";
	
	// Проверяем наличие идентификаторов применения в шаблоне кода маркировки
	Если ПараметрыОписанияКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
		
		// Коды маркировки с GS1 предварительно обрабатываются методом БПО,
		// МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1,
		// из которого получается код маркировки со скобками
		НачинаетсяСоСкобки = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Или ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		
		Если НачинаетсяСоСкобки Тогда
			ИмяСвойстваПозицииЗначения = "ПозицияЗначенияСоСкобкой";
		КонецЕсли;
		
		// Проверку осуществляем с конца
		
		ТекущийИндекс = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки.Количество() - 1;
		Пока ТекущийИндекс >= 0 Цикл
			
			ОписаниеЭлементаКМ        = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ТекущийИндекс];
			ОписаниеПозицииЭлементаКМ = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[ОписаниеЭлементаКМ.Имя];
			
			Если НачинаетсяСоСкобки Тогда
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ.ПозицияИдентификатораСоСкобкой - 1;
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора + 2;
				Идентификатор         = СтрШаблон("(%1)", ОписаниеЭлементаКМ.Код);
			Иначе
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ.ПозицияИдентификатора;
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора;
				Идентификатор         = ОписаниеЭлементаКМ.Код;
			КонецЕсли;
			
			Если Идентификатор <> Сред(ПараметрыРазбораКодаМаркировки.КодМаркировки, ПозицияИдентификатора, ДлинаИдентификатора) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекущийИндекс = ТекущийИндекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначенияЭлементовКМ = ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(ПараметрыРазбораКодаМаркировки.КодМаркировки,
		ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки, ИмяСвойстваПозицииЗначения, "ДлинаЗначения");
	
	ПроверятьАлфавитЭлементов = ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.ПроверятьАлфавитЭлементов;
	
	Если Не ПараметрыОписанияКодаМаркировки.ВключаетИдентификаторыПрименения
		// Шаблон КМ для Товаров из натурального меха уникален и его лучше обработать отдельно
		И ПараметрыОписанияКодаМаркировки.ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		
		Если Не ЭтоПродукцияИзНатуральногоМеха(
			ПараметрыРазбораКодаМаркировки.КодМаркировки,
			ПараметрыОписанияКодаМаркировки.ДополнительныеПараметры.ИСМП.ПродукцияИзНатуральногоМеха,
			ПроверятьАлфавитЭлементов,
			ПараметрыОписанияКодаМаркировки.Алфавит,
			ЗначенияЭлементовКМ) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		ЗначенияЭлементовКодаМаркировки = ЗначенияЭлементовКМ;
		
		Возврат Истина;
		
	КонецЕсли;
	
	ИменаПроверенныхЭлементовКМ = Новый Соответствие;
	ДополнительныеПараметры     = Новый Соответствие;
	
	#Область ВалидацияМРЦ
	
	// Проверка табачной продукции и альтернативной табачной продукции
	СвойствоПриоритетнойПроверки = "МРЦСтрокой";
	Если ЗначенияЭлементовКМ[СвойствоПриоритетнойПроверки] <> Неопределено Тогда
		
		ИменаПроверенныхЭлементовКМ[СвойствоПриоритетнойПроверки] = Истина;
		
		ИндексЭлементаКМ   = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[СвойствоПриоритетнойПроверки].ПорядковыйНомерЭлемента - 1;
		ОписаниеЭлементаКМ = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ИндексЭлементаКМ];
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписанию(
			ЗначенияЭлементовКМ[СвойствоПриоритетнойПроверки], ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры, ПроверятьАлфавитЭлементов) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДобавитьЭлементКодаМаркировкиВСоставКодаМаркировки(
			ЗначенияЭлементовКМ[СвойствоПриоритетнойПроверки], ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры);
		
		ВидыПродукции = Новый Массив;
		
		Табак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
		Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(Табак) <> Неопределено Тогда
			ВидыПродукции.Добавить(Табак);
		КонецЕсли;
		
		Если СоставКодаМаркировки.МРЦСтрокой = "000000" Или СоставКодаМаркировки.МРЦСтрокой = "AAAA" Тогда
			АльтернативныйТабак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
			Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(АльтернативныйТабак) <> Неопределено Тогда
				ВидыПродукции.Добавить(АльтернативныйТабак);
			КонецЕсли;
			НикотиносодержащаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
			Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(НикотиносодержащаяПродукция) <> Неопределено Тогда
				ВидыПродукции.Добавить(НикотиносодержащаяПродукция);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыОписанияКодаМаркировки.ВидыПродукции = ВидыПродукции;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Для Каждого ОписаниеЭлементаКМ Из ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки Цикл
		
		Значение = ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя];
		
		Если ИменаПроверенныхЭлементовКМ[ОписаниеЭлементаКМ.Имя] = Неопределено Тогда
			
			Если Не ЭлементКодаМаркировкиСоответствуетОписанию(
					Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры, ПроверятьАлфавитЭлементов) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьЭлементКодаМаркировкиВСоставКодаМаркировки(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ЗначенияЭлементовКодаМаркировки = ЗначенияЭлементовКМ;
	
	Возврат Истина;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры, ПроверятьАлфавитЭлементов) Экспорт
	
	Если ПроверятьАлфавитЭлементов Тогда
		Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Алфавит)
			И Не КодСоответствуетАлфавиту(Значение, ОписаниеЭлементаКМ.Алфавит) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДанныеОбщегоМодуля Из ПараметрыОписанияКодаМаркировки.ОбщиеМодули Цикл
		Если Не ДанныеОбщегоМодуля.ОбщийМодуль.ЭлементКодаМаркировкиСоответствуетОписанию(
				Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьЭлементКодаМаркировкиВСоставКодаМаркировки(Знач Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры) Экспорт
	
	Для Каждого ДанныеОбщегоМодуля Из ПараметрыОписанияКодаМаркировки.ОбщиеМодули Цикл
		
		ДанныеОбщегоМодуля.ОбщийМодуль.ДобавитьЭлементКодаМаркировкиВСоставКодаМаркировки(
			Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры);
		
		ДанныеОбщегоМодуля.ОбщийМодуль.ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(
			Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение);
	
КонецПроцедуры

Процедура ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение) Экспорт
	
	Если СоставКодаМаркировки.Свойство(ОписаниеЭлементаКМ.Имя) Тогда
		СоставКодаМаркировки[ОписаниеЭлементаКМ.Имя] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНеформализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра)
	
	// Можно добавить проверку, на необходимость
	Для Каждого ИмяОбщегоМодуля Из Настройки.ИменаОбщихМодулей Цикл
		ОбщийМодуль = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		Если ОбщийМодуль.ЭтоНеФормализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ВидыПродукции)
	
	Если Не ФильтрПоВидуПродукции.Использовать Тогда
		Возврат Новый ФиксированныйМассив(ВидыПродукции);
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрПоВидуПродукции.ВидыПродукции Цикл
		Если ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			Результат.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

Функция ОбработатьРезультатНесколькихШаблонов(Результат, ДанныеРезультата)
	
	// Для табака может подойти два шаблона: GTIN+Серия+КодПроверки и GTIN+Серия+МРЦСтрокой+КодПроверки, берем с МРЦ
	ВидПродукцииТабак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	Если Результат.Количество() = 2
		И Результат[0].ВидыПродукции.Найти(ВидПродукцииТабак) <> Неопределено
		И Результат[1].ВидыПродукции.Найти(ВидПродукцииТабак) <> Неопределено Тогда
		
		Если Результат[0].СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И Результат[0].СоставКодаМаркировки.ВключаетМРЦ Тогда
			ДанныеРезультата = Результат[0];
			Возврат Истина;
		ИначеЕсли Результат[1].СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И Результат[1].СоставКодаМаркировки.ВключаетМРЦ Тогда
			ДанныеРезультата = Результат[1];
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайденНедопустимыйСимволXML(Знач Текст) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
	Возврат НайтиНедопустимыеСимволыXML(Текст) > 0;
	
	#Иначе
	
	// Коды символов от 0 до 2^16-1, которые метод НайтиНедопустимыеСимволыXML
	// считает недопустимыми: 0-8, 11-12, 14-31, 55296-57343.
	
	ДлинаСтроки = СтрДлина(Текст);
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Текст, НомерСимвола, 1);
		КодСимвола = КодСимвола(Символ);
		
		Если КодСимвола < 9
			Или КодСимвола > 10    И КодСимвола < 13
			Или КодСимвола > 13    И КодСимвола < 32
			Или КодСимвола > 55295 И КодСимвола < 57344 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции

Функция РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора, ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки)
	
	Если Не РезультатРазбора.Разобран Тогда
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = РезультатРазбора.ОписаниеОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатРазбора.ОписаниеОшибки) Тогда
		
		СодержитРазделительGS = Истина;
		КодМаркировки         = РезультатРазбора.ПредставлениеШтрихкода;
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПродолжитьОбработкуКодаМаркировки = Ложь;
	
	ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.НекорректныйФорматКодМаркировки;
	ПримечаниеКРезультатуРазбора.ТекстОшибки         = РезультатРазбора.ОписаниеОшибки;
	
	Если ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
		
		// Исходный код маркировки не известен
		КодМаркировкиДляСообщенияПользователю = ДанныеДляРазбора.ПредставлениеШтрихкода + "...";
		
	Иначе
		
		ПродолжитьОбработкуКодаМаркировки = Истина;
		
		РазделительGS = РазделительGS();
		
		// Сбрасываем признак GS и обрезаем код маркировки
		СодержитРазделительGS = Ложь;
		КодМаркировки         = Лев(ДанныеДляРазбора, СтрНайти(ДанныеДляРазбора, РазделительGS) - 1);
		
		КодМаркировкиДляСообщенияПользователю = СтрЗаменить(ДанныеДляРазбора, РазделительGS, "<GS>");;
		
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректный формат код маркировки: %1'"), КодМаркировкиДляСообщенияПользователю)
		+ Символы.ПС + ПримечаниеКРезультатуРазбора.ТекстОшибки;
	
	МодульКонтекста.МодульОбщегоНазначения().СообщитьПользователю(ТекстОшибки);
	
	Возврат ПродолжитьОбработкуКодаМаркировки;
	
КонецФункции

// Инициализировать параметры разбора кода маркировки.
// 
// Возвращаемое значение:
//  Структура - Инициализировать параметры разбора кода маркировки:
// * КодМаркировки - Строка - Код марировки.
// * НачинаетсяСоСкобки - Булево - Начинается ли код маркировки со скобки.
// * СодержитРазделительGS - Булево - Содержит ли код маркировки разделитель GS.
// * РезультатРазбора - см. МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1, Неопределено - Предварительный разбор при флаге СодержитРазделительGS.
// * ДлинаКодаМаркировки - Число - Длина кода маркировки.
// * ФильтрПоВидуПродукции - Неопределено, Структура - Пользовательский фильтр по виду продукции:
//    ** Использовать - Булево - Признак активности фильтра.
//    ** ВидыПродукции - Неопределено, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции фильтра.
// * МодульКонтекста - Неопределено, ОбщийМодуль - РазборКодаМаркировкиИССлужебныйКлиент / РазборКодаМаркировкиИССлужебный.
// * ОбщиеМодулиРазбораКМ - Соответствие из КлючИЗначение - Соответствие из имени общего модуля и самого общего модуля.
// * ИмяСвойстваПозиции - Строка - Содержит значение: "", "СРазделителемGS", "СоСкобкой".
// * ПользовательскиеПараметры - Неопределено, см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки
//
Функция ИнициализироватьПараметрыРазбораКодаМаркировки() Экспорт
	
	ПараметрыРазбораКодаМаркировки = Новый Структура;
	ПараметрыРазбораКодаМаркировки.Вставить("КодМаркировки",             "");
	ПараметрыРазбораКодаМаркировки.Вставить("НачинаетсяСоСкобки",        Ложь);
	ПараметрыРазбораКодаМаркировки.Вставить("СодержитРазделительGS",     Ложь);
	ПараметрыРазбораКодаМаркировки.Вставить("РезультатРазбора",          Неопределено);
	ПараметрыРазбораКодаМаркировки.Вставить("ДлинаКодаМаркировки",       0);
	ПараметрыРазбораКодаМаркировки.Вставить("ФильтрПоВидуПродукции",     Неопределено);
	ПараметрыРазбораКодаМаркировки.Вставить("МодульКонтекста",           Неопределено);
	ПараметрыРазбораКодаМаркировки.Вставить("ОбщиеМодулиРазбораКМ",      Новый Соответствие);
	ПараметрыРазбораКодаМаркировки.Вставить("ИмяСвойстваПозиции",        "");
	ПараметрыРазбораКодаМаркировки.Вставить("ПользовательскиеПараметры", Неопределено);
	
	Возврат ПараметрыРазбораКодаМаркировки;
	
КонецФункции

Функция БазовыйШаблонНормализацииКодаМаркировки(ДанныеРезультата, ПараметрыРазбораКодаМаркировки, ЗначенияЭлементовКодаМаркировки)
	
	// Упрощенная версия функции РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки,
	// РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки используем со значениями по умолчанию:
	// - НачинаетсяСоСкобки = Истина,
	// - ВключатьМРЦ = Истина,
	// - ВключатьСрокГодности = Истина,
	// - ДобавитьМРЦПоУмолчанию = Ложь;
	// Изменения в текущем методе должны быть согласованы с функциями указанными выше.
	
	Если ДанныеРезультата.ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ДанныеРезультата.ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		
		Возврат "КодМаркировки";
		
	ИначеЕсли ДанныеРезультата.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		
		Возврат "SSCC"; // Ожидаем только SSCC
		
	ИначеЕсли ДанныеРезультата.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.АгрегированныйТаможенныйКод") Тогда
		
		Возврат "КодМаркировки";
		
	КонецЕсли;
	
	Если ЗначенияЭлементовКодаМаркировки["GTIN"] = Неопределено
		Или ЗначенияЭлементовКодаМаркировки["СерийныйНомер"] = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный шаблон нормализации кода маркировки'");
	КонецЕсли;
	
	Если ЗначенияЭлементовКодаМаркировки.Количество() = 2 Тогда
		
		Возврат "GTIN+СерийныйНомер";
		
	КонецЕсли;
	
	Если ДанныеРезультата.ВидыПродукции.Количество() = 1 Тогда
		
		ВидПродукции = ДанныеРезультата.ВидыПродукции[0];
		
	ИначеЕсли ДанныеРезультата.ВидыПродукции.Количество() > 1 Тогда
		
		// Описание:
		// Потребительские и групповые упаковки ИСМП и МОТП.
		
		ПродукцияМОТП         = 0;
		МолочнаяПродукцияИСМП = 0;
		ПрочаяПродукцияИСМП   = 0;
		
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
				ПродукцияМОТП = ПродукцияМОТП + 1;
			ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
				МолочнаяПродукцияИСМП = МолочнаяПродукцияИСМП + 1;
			Иначе
				ПрочаяПродукцияИСМП = ПрочаяПродукцияИСМП + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если (Булево(ПродукцияМОТП) + Булево(МолочнаяПродукцияИСМП) + Булево(ПрочаяПродукцияИСМП)) > 1 Тогда
			
			Возврат "GTIN+СерийныйНомер";
			
		КонецЕсли;
		
		Если ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции.Использовать Тогда
			ВидыПродукцииПоФильтру = ОбщегоНазначенияИСКлиентСервер.ПересечениеМассивов(ДанныеРезультата.ВидыПродукции, ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции.ВидыПродукции);
			Если ВидыПродукцииПоФильтру.Количество() = 0 Тогда
				ВидПродукции = ДанныеРезультата.ВидыПродукции[0];
			Иначе
				ВидПродукции = ВидыПродукцииПоФильтру[0];
			КонецЕсли;
		Иначе
			ВидПродукции = ДанныеРезультата.ВидыПродукции[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		Если ЗначенияЭлементовКодаМаркировки["МРЦСтрокой"] <> Неопределено Тогда
			
			Возврат "GTIN+СерийныйНомер+МРЦСтрокой";
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		
		Если ЗначенияЭлементовКодаМаркировки["КодТНВЭД"] <> Неопределено Тогда
			
			Возврат "GTIN+СерийныйНомер+КодТНВЭД";
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		
		Если ЗначенияЭлементовКодаМаркировки["ГоденДо"] <> Неопределено Тогда
			
			Возврат "GTIN+СерийныйНомер+ГоденДо";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "GTIN+СерийныйНомер";
	
КонецФункции

Функция НормализоватьКодМаркировкиПоБазовомуШаблону(КодМаркировки, БазовыйШаблонНормализацииКодаМаркировки, ЗначенияЭлементовКодаМаркировки, СоставКодаМаркировки, ВключаетИдентификаторыПрименения) Экспорт
	
	Если БазовыйШаблонНормализацииКодаМаркировки = "КодМаркировки" Тогда
		
		Возврат КодМаркировки;
		
	ИначеЕсли БазовыйШаблонНормализацииКодаМаркировки = "SSCC" Тогда
		
		Возврат "(00)" + ЗначенияЭлементовКодаМаркировки["SSCC"];
		
	ИначеЕсли ВключаетИдентификаторыПрименения Тогда
		
		Если БазовыйШаблонНормализацииКодаМаркировки = "GTIN+СерийныйНомер" Тогда
			
			Возврат СтрШаблон("(01)%1(21)%2",
				СоставКодаМаркировки.GTIN,
				СоставКодаМаркировки.СерийныйНомер);
			
		ИначеЕсли БазовыйШаблонНормализацииКодаМаркировки = "GTIN+СерийныйНомер+МРЦСтрокой" Тогда // Табак
			
			Возврат СтрШаблон("(01)%1(21)%2(8005)%3",
				СоставКодаМаркировки.GTIN,
				СоставКодаМаркировки.СерийныйНомер,
				СоставКодаМаркировки.МРЦСтрокой);
			
		ИначеЕсли БазовыйШаблонНормализацииКодаМаркировки = "GTIN+СерийныйНомер+КодТНВЭД" Тогда // Обувь
			
			Возврат СтрШаблон("(01)%1(21)%2(240)%3",
				СоставКодаМаркировки.GTIN,
				СоставКодаМаркировки.СерийныйНомер,
				СоставКодаМаркировки.КодТНВЭД);
			
		ИначеЕсли БазовыйШаблонНормализацииКодаМаркировки = "GTIN+СерийныйНомер+ГоденДо" Тогда // Молоко
			
			Возврат СтрШаблон("(01)%1(21)%2(%3)%4",
				СоставКодаМаркировки.GTIN,
				СоставКодаМаркировки.СерийныйНомер,
				?(СоставКодаМаркировки.СкоропортящаясяПродукция, "7003", "17"),
				ЗначенияЭлементовКодаМаркировки["ГоденДо"]);
			
		КонецЕсли;
		
	Иначе
		
		Если БазовыйШаблонНормализацииКодаМаркировки = "GTIN+СерийныйНомер" Тогда
			
			Возврат СтрШаблон("%1%2",
				СоставКодаМаркировки.GTIN,
				СоставКодаМаркировки.СерийныйНомер);
			
		ИначеЕсли БазовыйШаблонНормализацииКодаМаркировки = "GTIN+СерийныйНомер+МРЦСтрокой" Тогда // Табак
			
			Возврат СтрШаблон("%1%2%3",
				СоставКодаМаркировки.GTIN,
				СоставКодаМаркировки.СерийныйНомер,
				СоставКодаМаркировки.МРЦСтрокой);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Неизвестный шаблон нормализации кода маркировки'");
	
КонецФункции

#КонецОбласти

#Область РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты

// Инициализировать параметры обработки кода маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - код маркировки.
//  ВидыПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - пользовательский отбор по виду продукции.
//  Настройки - см. РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки.
//  ПользовательскиеПараметры - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
//  МодульКонтекста - ОбщийМодуль - источник вызова (РазборКодаМаркировкиИССлужебныйКлиент, РазборКодаМаркировкиИССлужебный).
// 
// Возвращаемое значение:
//  Структура - Инициализировать параметры обработки кода маркировки:
// * КодМаркировки - Строка.
// * ВидыПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС.
// * Настройки - Структура - см. РазборКодаМаркировкиИССлужебныйКлиент.НастройкиРазбораКодаМаркировки, см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки
// * ПользовательскиеПараметры - Неопределено, см. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки.
// * ДлинаКодаМаркировки - Число.
// * СодержитРазделительGS - Булево.
// * НачинаетсяСоСкобки - Булево.
// * МодульКонтекста - ОбщийМодуль.
// * ИдентификаторДопустимыхШаблонов - Строка - Идентификатор описывающий текущий код маркировки и текущие настройки для подбора допустимых шаблонов.
// * РасширеннаяДетализация - Булево.
//
Функция ИнициализироватьПараметрыОбработкиКодаМаркировки(КодМаркировки, ВидыПродукции, Настройки, ПользовательскиеПараметры, МодульКонтекста)
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("КодМаркировки",             КодМаркировки);
	Параметры.Вставить("ВидыПродукции",             ВидыПродукции);
	Параметры.Вставить("Настройки",                 Настройки);
	Параметры.Вставить("ПользовательскиеПараметры", ПользовательскиеПараметры);
	Параметры.Вставить("ДлинаКодаМаркировки",       СтрДлина(КодМаркировки));
	Параметры.Вставить("СодержитРазделительGS",     НайденНедопустимыйСимволXML(КодМаркировки));
	Параметры.Вставить("НачинаетсяСоСкобки",        СтрНачинаетсяС(КодМаркировки, "("));
	Параметры.Вставить("МодульКонтекста",           МодульКонтекста);
	
	ИдентификаторДопустимыхШаблонов = СтрШаблон("Настройки%1;Отбор%2;Свойства%3",
		Параметры.Настройки.Хеш,
		ХешВидовПродукции(Параметры.ВидыПродукции),
		СтрШаблон("%1%2%3",
			Параметры.ДлинаКодаМаркировки,
			Параметры.СодержитРазделительGS,
			Параметры.НачинаетсяСоСкобки));
	
	Параметры.Вставить("ИдентификаторДопустимыхШаблонов", ИдентификаторДопустимыхШаблонов);
	
	Параметры.Вставить("РасширеннаяДетализация",
		ПользовательскиеПараметры <> Неопределено И ПользовательскиеПараметры.РасширеннаяДетализация);
		
	//@skip-check constructor-function-return-section
	Возврат Параметры;
	
КонецФункции

// Инициализировать настройки шаблона разобранного кода маркировки.
// 
// Возвращаемое значение:
//  Структура - Инициализировать настройки шаблона разобранного кода маркировки:
// * ДлинаКодаМаркировки - Число - Длина кода маркировки.
// * СодержитРазделительGS - Булево - Признак наличия символа GS.
// * НачинаетсяСоСкобки - Булево - Начинается ли код маркировки со скобки
// * ИмяСвойстваПозиции - Строка - Значения: "Пустая строка", "СоСкобкой", "СРазделителемGS"
// * ШаблонРазбораКодаМаркировки - Строка.
// * БазовыйШаблонНормализацииКодаМаркировки - Строка - см. БазовыйШаблонНормализацииКодаМаркировки.
// * ЭтоНеФормализованныйКодМаркировки - Булево.
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС.
// * ВидыУпаковокПоВидамПродукции - Соответствие.
// * ВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции текущего разбора
//
Функция ИнициализироватьНастройкиШаблонаРазобранногоКодаМаркировки()
	
	ПараметрыШаблона = Новый Структура;
		
	// Характеристики кода маркировки
	ПараметрыШаблона.Вставить("ДлинаКодаМаркировки",   0);
	ПараметрыШаблона.Вставить("СодержитРазделительGS", Ложь);
	ПараметрыШаблона.Вставить("НачинаетсяСоСкобки",    Ложь);
	ПараметрыШаблона.Вставить("ИмяСвойстваПозиции",    "");
	
	// Вычисленные при разборе свойства
	ПараметрыШаблона.Вставить("ШаблонРазбораКодаМаркировки",             "");
	ПараметрыШаблона.Вставить("БазовыйШаблонНормализацииКодаМаркировки", "");
	ПараметрыШаблона.Вставить("ЭтоНеФормализованныйКодМаркировки",       Ложь);
	ПараметрыШаблона.Вставить("ВидУпаковки",                             Неопределено);
	ПараметрыШаблона.Вставить("ВидыУпаковокПоВидамПродукции",            Неопределено);
	ПараметрыШаблона.Вставить("ВидыПродукции",                           Неопределено);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыШаблона;
	
КонецФункции

Функция РазобратьКодМаркировкиПолностью(ПараметрыОбработкиКодаМаркировки, ПримечаниеКРезультатуРазбора, КешНастроекРазбораКодаМаркировки)
	
	ПримечаниеКРезультатуРазбора = Неопределено;
	
	Если ПараметрыОбработкиКодаМаркировки.ПользовательскиеПараметры = Неопределено Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки = ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = Истина;
	Иначе
		Если ПараметрыОбработкиКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация Тогда
			ПользовательскиеПараметрыРазбораКодаМаркировки = ПараметрыОбработкиКодаМаркировки.ПользовательскиеПараметры;
		Иначе
			ПользовательскиеПараметрыРазбораКодаМаркировки = ПользовательскиеПараметрыРазбораКодаМаркировки();
			ЗаполнитьЗначенияСвойств(ПользовательскиеПараметрыРазбораКодаМаркировки, ПараметрыОбработкиКодаМаркировки.ПользовательскиеПараметры);
			ПользовательскиеПараметрыРазбораКодаМаркировки.РасширеннаяДетализация = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РезультатРазбора = ПараметрыОбработкиКодаМаркировки.МодульКонтекста.РазобратьКодМаркировки(
		ПараметрыОбработкиКодаМаркировки.КодМаркировки,
		ПараметрыОбработкиКодаМаркировки.ВидыПродукции,
		ПримечаниеКРезультатуРазбора,
		ПараметрыОбработкиКодаМаркировки.Настройки,
		ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	// Свойство Детализация является исключительно служебным,
	// желательно отказаться от его использования в итоговом результате
	Если ПримечаниеКРезультатуРазбора.РезультатРазбора <> Неопределено Тогда
		Если Не ПараметрыОбработкиКодаМаркировки.РасширеннаяДетализация Тогда
			Для Каждого СтрокаСРезультататом Из ПримечаниеКРезультатуРазбора.РезультатРазбора Цикл
				СтрокаСРезультататом.Удалить("Детализация");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатРазбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРасширеннойДетализации = РезультатРазбора.Детализация;
	
	// Свойство Детализация является исключительно служебным,
	// желательно отказаться от его использования в итоговом результате
	Если Не ПараметрыОбработкиКодаМаркировки.РасширеннаяДетализация Тогда
		РезультатРазбора.Удалить("Детализация");
	КонецЕсли;
	
	Если ДанныеРасширеннойДетализации.ЭтоНеФормализованныйКодМаркировки Тогда
		// У подобных кодов маркировки нет фиксированных шаблонов
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией")
			Или РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
			Или РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			Возврат РезультатРазбора;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		
		ПолныйХешШаблонаСУчетомGTIN = СтрШаблон("%1;%2;%3",
			РезультатРазбора.СоставКодаМаркировки.GTIN,
			ПараметрыОбработкиКодаМаркировки.ИдентификаторДопустимыхШаблонов,
			ДанныеРасширеннойДетализации.ШаблонРазбораКодаМаркировки);
		
		КешНастроекРазбораКодаМаркировки.ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN.Вставить(ПолныйХешШаблонаСУчетомGTIN, Истина);
		
	КонецЕсли;
	
	ДопустимыеШаблоны = КешНастроекРазбораКодаМаркировки.ШаблоныПоИдентификатору[ПараметрыОбработкиКодаМаркировки.ИдентификаторДопустимыхШаблонов];
	
	ДобавитьШаблон = Истина;
	
	Если ДопустимыеШаблоны = Неопределено Тогда
		ДопустимыеШаблоны = Новый Массив;
		КешНастроекРазбораКодаМаркировки.ШаблоныПоИдентификатору.Вставить(ПараметрыОбработкиКодаМаркировки.ИдентификаторДопустимыхШаблонов, ДопустимыеШаблоны);
	Иначе
		Для Каждого СтрокаШаблона Из ДопустимыеШаблоны Цикл
			Если СтрокаШаблона.ШаблонРазбораКодаМаркировки = ДанныеРасширеннойДетализации.ШаблонРазбораКодаМаркировки Тогда
				ДобавитьШаблон = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДобавитьШаблон Тогда
		
		ИмяСвойстваПозиции = "";
		Если ПараметрыОбработкиКодаМаркировки.НачинаетсяСоСкобки Тогда
			ИмяСвойстваПозиции = "СоСкобкой";
		ИначеЕсли ПараметрыОбработкиКодаМаркировки.СодержитРазделительGS Тогда
			ИмяСвойстваПозиции = "СРазделителемGS";
		КонецЕсли;
		
		ПараметрыШаблона = ИнициализироватьНастройкиШаблонаРазобранногоКодаМаркировки();
		
		// Характеристики кода маркировки, необязательно
		ПараметрыШаблона.ДлинаКодаМаркировки   = ПараметрыОбработкиКодаМаркировки.ДлинаКодаМаркировки;
		ПараметрыШаблона.СодержитРазделительGS = ПараметрыОбработкиКодаМаркировки.СодержитРазделительGS;
		ПараметрыШаблона.НачинаетсяСоСкобки    = ПараметрыОбработкиКодаМаркировки.НачинаетсяСоСкобки;
		ПараметрыШаблона.ИмяСвойстваПозиции    = ИмяСвойстваПозиции;
		
		// Вычисленные при разборе свойства, обязательно
		ПараметрыШаблона.ШаблонРазбораКодаМаркировки             = ДанныеРасширеннойДетализации.ШаблонРазбораКодаМаркировки;
		ПараметрыШаблона.БазовыйШаблонНормализацииКодаМаркировки = ДанныеРасширеннойДетализации.БазовыйШаблонНормализацииКодаМаркировки;
		ПараметрыШаблона.ЭтоНеФормализованныйКодМаркировки       = ДанныеРасширеннойДетализации.ЭтоНеФормализованныйКодМаркировки;
		ПараметрыШаблона.ВидУпаковки                             = РезультатРазбора.ВидУпаковки;
		ПараметрыШаблона.ВидыУпаковокПоВидамПродукции            = РезультатРазбора.ВидыУпаковокПоВидамПродукции;
		ПараметрыШаблона.ВидыПродукции                           = РезультатРазбора.ВидыПродукции;
		
		ДопустимыеШаблоны.Добавить(ПараметрыШаблона);
		
	КонецЕсли;
	
	Возврат РезультатРазбора;
	
КонецФункции

Функция РазобратьКодМаркировкиУпрощенно(ПараметрыОбработкиКодаМаркировки, КешНастроекРазбораКодаМаркировки)
	
	ДопустимыеШаблоны = КешНастроекРазбораКодаМаркировки.ШаблоныПоИдентификатору[ПараметрыОбработкиКодаМаркировки.ИдентификаторДопустимыхШаблонов];
	
	Если ДопустимыеШаблоны = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ПараметрыШаблона Из ДопустимыеШаблоны Цикл
		
		РезультатОбработкиШаблона = РазобратьКодМаркировкиУпрощенноПоШаблону(ПараметрыОбработкиКодаМаркировки, ПараметрыШаблона, КешНастроекРазбораКодаМаркировки);
		
		Если РезультатОбработкиШаблона.ТребуетсяПолныйРазбор Тогда
			Возврат Неопределено;
		ИначеЕсли РезультатОбработкиШаблона.РезультатРазбора <> Неопределено Тогда
			Возврат РезультатОбработкиШаблона.РезультатРазбора;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьКодМаркировкиУпрощенноПоШаблону(ПараметрыОбработкиКодаМаркировки, ПараметрыПроверяемогоШаблона, КешНастроекРазбораКодаМаркировки)
	
	РезультатОбработкиШаблона = Новый Структура;
	РезультатОбработкиШаблона.Вставить("РезультатРазбора",      Неопределено);
	РезультатОбработкиШаблона.Вставить("ТребуетсяПолныйРазбор", Ложь);
	
	ДанныеШаблона        = ПараметрыОбработкиКодаМаркировки.Настройки.ШаблоныИОписанияВидовПродукции[ПараметрыПроверяемогоШаблона.ШаблонРазбораКодаМаркировки];
	ШаблонКодаМаркировки = ДанныеШаблона.СтрокаТаблицыШаблоныКодовМаркировки;
	
	ИмяСвойстваПозицииЗначения = "ПозицияЗначения";
	
	Если ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
		
		ИмяСвойстваПозицииЗначения       = ИмяСвойстваПозицииЗначения + ПараметрыПроверяемогоШаблона.ИмяСвойстваПозиции;
		ИмяСвойстваПозицииИдентификатора = "ПозицияИдентификатора"    + ПараметрыПроверяемогоШаблона.ИмяСвойстваПозиции;
		
		ТекущийИндекс = ДанныеШаблона.ОписаниеЭлементовКодаМаркировки.Количество() - 1;
		Пока ТекущийИндекс >= 0 Цикл
			
			ОписаниеЭлементаКМ        = ДанныеШаблона.ОписаниеЭлементовКодаМаркировки[ТекущийИндекс];
			ОписаниеПозицииЭлементаКМ = ДанныеШаблона.ПозицииЭлементовКодаМаркировки[ОписаниеЭлементаКМ.Имя];
			
			ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ[ИмяСвойстваПозицииИдентификатора];
			ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора;
			Идентификатор         = ОписаниеЭлементаКМ.Код;
			
			Если Идентификатор <> Сред(ПараметрыОбработкиКодаМаркировки.КодМаркировки, ПозицияИдентификатора, ДлинаИдентификатора) Тогда
				Возврат РезультатОбработкиШаблона;
			КонецЕсли;
			
			ТекущийИндекс = ТекущийИндекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначенияЭлементовКМ = ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(
		ПараметрыОбработкиКодаМаркировки.КодМаркировки,
		ДанныеШаблона.ПозицииЭлементовКодаМаркировки,
		ИмяСвойстваПозицииЗначения,
		"ДлинаЗначения");
	
	ЗначениеИдентификатораGTIN = ЗначенияЭлементовКМ["GTIN"];
	Если ЗначениеИдентификатораGTIN <> Неопределено Тогда
		
		Если Не РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеИдентификатораGTIN) Тогда
			Возврат РезультатОбработкиШаблона;
		КонецЕсли;
		
		ПолныйХешШаблонаСУчетомGTIN = СтрШаблон("%1;%2;%3",
			ЗначениеИдентификатораGTIN,
			ПараметрыОбработкиКодаМаркировки.ИдентификаторДопустимыхШаблонов,
			ПараметрыПроверяемогоШаблона.ШаблонРазбораКодаМаркировки);
		
		Если КешНастроекРазбораКодаМаркировки.ПараметрыШаблонаПоПолномуХешуШаблонаСУчетомGTIN[ПолныйХешШаблонаСУчетомGTIN] = Неопределено Тогда
			РезультатОбработкиШаблона.ТребуетсяПолныйРазбор = Истина;
			Возврат РезультатОбработкиШаблона;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОбработкиКодаМаркировки.ПользовательскиеПараметры = Неопределено
		Или ПараметрыОбработкиКодаМаркировки.ПользовательскиеПараметры.ПроверятьАлфавитЭлементов Тогда
		Для Каждого ОписаниеЭлементаКМ Из ДанныеШаблона.ОписаниеЭлементовКодаМаркировки Цикл
			Если ОписаниеЭлементаКМ.Имя = "GTIN" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Алфавит)
				И Не КодСоответствуетАлфавиту(
					ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя], ОписаниеЭлементаКМ.Алфавит) Тогда
				Возврат РезультатОбработкиШаблона;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыОбработкиКодаМаркировки.Настройки.ТолькоСервер Тогда
		ОбщиеМодулиРазбораКМ = ПараметрыОбработкиКодаМаркировки.Настройки.ОбщиеМодули;
	Иначе
		ОбщиеМодулиРазбораКМ = Новый Соответствие;
		Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
			Если ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = Неопределено Тогда
				ОбщиеМодулиРазбораКМ.Вставить(ИмяОбщегоМодуля, ПараметрыОбработкиКодаМаркировки.МодульКонтекста.ОбщийМодуль(ИмяОбщегоМодуля));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СоставКодаМаркировки = СкопироватьСоставКодаМаркировки(ДанныеШаблона.СоставКодаМаркировки);
	
	ДополнительныеПараметры = Новый Соответствие;
	
	Для Каждого ОписаниеЭлементаКМ Из ДанныеШаблона.ОписаниеЭлементовКодаМаркировки Цикл
		
		Значение = ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя];
		
		Если ОписаниеЭлементаКМ.Имя = "МРЦСтрокой" Или ОписаниеЭлементаКМ.Имя = "ШтрихкодАкцизнойМарки" Тогда
			ПараметрыОписанияКодаМаркировки = Новый Структура;
			Если ОписаниеЭлементаКМ.Имя = "МРЦСтрокой" Тогда
				ПараметрыОписанияКодаМаркировки.Вставить("ВидУпаковки", ПараметрыПроверяемогоШаблона.ВидУпаковки);
			ИначеЕсли ОписаниеЭлементаКМ.Имя = "ШтрихкодАкцизнойМарки" Тогда
				ПараметрыОписанияКодаМаркировки.Вставить("ДополнительныеПараметры", ПараметрыОбработкиКодаМаркировки.Настройки.ДополнительныеПараметры);
				ПараметрыОписанияКодаМаркировки.Вставить("МодульКонтекста",         ПараметрыОбработкиКодаМаркировки.МодульКонтекста);
			КонецЕсли;
		Иначе
			ПараметрыОписанияКодаМаркировки = Неопределено;
		КонецЕсли;
		
		Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
			
			ОбщийМодульРазбораКМ = ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
			
			// Выполняется заполнение ДополнительныеПараметры
			Если ПараметрыОписанияКодаМаркировки <> Неопределено
				И Не ОбщийМодульРазбораКМ.ЭлементКодаМаркировкиСоответствуетОписанию(
					Значение, ОписаниеЭлементаКМ, ПараметрыОписанияКодаМаркировки, ДополнительныеПараметры) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ОбщийМодульРазбораКМ.ДобавитьЭлементКодаМаркировкиВСоставКодаМаркировки(
				Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ДанныеШаблона, ДополнительныеПараметры);
			
			ОбщийМодульРазбораКМ.ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(
				Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ДанныеШаблона, ДополнительныеПараметры);
			
		КонецЦикла;
		
		ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение);
		
	КонецЦикла;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки(ПараметрыОбработкиКодаМаркировки.РасширеннаяДетализация);
	Если ДанныеШаблона.ВключаетИдентификаторыПрименения Тогда
		ДанныеДляПодготовкиКодаМаркировки = Новый Массив(ДанныеШаблона.СтрокаТаблицыШаблоныКодовМаркировки.КоличествоЭлементов);
		Для Каждого КлючИЗначение Из ДанныеШаблона.ПозицииЭлементовКодаМаркировки Цикл
			ДанныеДляПодготовкиКодаМаркировки[КлючИЗначение.Значение.ПорядковыйНомерЭлемента - 1] = СтрШаблон("(%1)%2", КлючИЗначение.Значение.Код, ЗначенияЭлементовКМ[КлючИЗначение.Ключ]);
		КонецЦикла;
		ДанныеРезультата.КодМаркировки = СтрСоединить(ДанныеДляПодготовкиКодаМаркировки);
	Иначе
		ДанныеРезультата.КодМаркировки = ПараметрыОбработкиКодаМаркировки.КодМаркировки;
	КонецЕсли;
	ДанныеРезультата.ТипШтрихкода  = ШаблонКодаМаркировки.ТипШтрихкода;
	
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	ДанныеРезультата.ВидУпаковки                  = ПараметрыПроверяемогоШаблона.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции                = ПараметрыПроверяемогоШаблона.ВидыПродукции;
	ДанныеРезультата.ВидыУпаковокПоВидамПродукции = ПараметрыПроверяемогоШаблона.ВидыУпаковокПоВидамПродукции;
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализоватьКодМаркировкиПоБазовомуШаблону(
		ДанныеРезультата.КодМаркировки,
		ПараметрыПроверяемогоШаблона.БазовыйШаблонНормализацииКодаМаркировки,
		ЗначенияЭлементовКМ,
		СоставКодаМаркировки,
		ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	
	Если ПараметрыОбработкиКодаМаркировки.РасширеннаяДетализация Тогда
		
		ДанныеРезультата.Детализация.ШаблонРазбораКодаМаркировки             = ШаблонКодаМаркировки.Шаблон;
		ДанныеРезультата.Детализация.ВключаетИдентификаторыПрименения        = ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения;
		ДанныеРезультата.Детализация.ЗначенияЭлементовКодаМаркировки         = ЗначенияЭлементовКМ;
		ДанныеРезультата.Детализация.ОписаниеЭлементовКодаМаркировки         = ДанныеШаблона.ОписаниеЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.НачинаетсяСоСкобки                      = ПараметрыПроверяемогоШаблона.НачинаетсяСоСкобки;
		ДанныеРезультата.Детализация.СодержитРазделительGS                   = ПараметрыПроверяемогоШаблона.СодержитРазделительGS;
		ДанныеРезультата.Детализация.ИмяСвойстваПозиции                      = ПараметрыПроверяемогоШаблона.ИмяСвойстваПозиции;
		ДанныеРезультата.Детализация.БазовыйШаблонНормализацииКодаМаркировки = ПараметрыПроверяемогоШаблона.БазовыйШаблонНормализацииКодаМаркировки;
		
	КонецЕсли;
	
	РезультатОбработкиШаблона.РезультатРазбора = ДанныеРезультата;
	
	Возврат РезультатОбработкиШаблона;
	
КонецФункции

#КонецОбласти

#Область РазборШтрихкодаGS1БезРазделителей

Процедура ПродолжитьРазборШтрихкодаGS1БезРазделителей(Штрихкод, РезультатРазбора, КодыGS1)
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ПредставлениеШтрихкода = РезультатРазбора.ПредставлениеШтрихкода;
	
	СоответствиеИдентификаторовДат = Новый Соответствие;
	СоответствиеИдентификаторовДат.Вставить("11", Истина);
	СоответствиеИдентификаторовДат.Вставить("12", Истина);
	СоответствиеИдентификаторовДат.Вставить("13", Истина);
	СоответствиеИдентификаторовДат.Вставить("15", Истина);
	СоответствиеИдентификаторовДат.Вставить("17", Истина);
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 2);
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 3);
			ОписаниеКода = КодыGS1[ИдентификаторПрименения];
			Если ОписаниеКода = Неопределено Тогда
				ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 4);
				ОписаниеКода = КодыGS1[ИдентификаторПрименения];
				Если ОписаниеКода = Неопределено Тогда
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неизвестный идентификатор применения(AI) %1.'"), ИдентификаторПрименения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОшибкаСовместногоПрименения0102 = Ложь;
		Если ИдентификаторПрименения = "01" Тогда
			Если РезультатРазбора.ДанныеШтрихкода["02"] <> Неопределено Тогда
				ОшибкаСовместногоПрименения0102 = Истина;
			КонецЕсли;
		ИначеЕсли ИдентификаторПрименения = "02" Тогда
			Если РезультатРазбора.ДанныеШтрихкода["01"] <> Неопределено Тогда
				ОшибкаСовместногоПрименения0102 = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ОшибкаСовместногоПрименения0102 Тогда
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = НСтр("ru = 'Идентификатор применения (02) использован вместе с идентификатором (01).'");
			Возврат;
		КонецЕсли;
		Если РезультатРазбора.ДанныеШтрихкода[ИдентификаторПрименения] <> Неопределено Тогда
			РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Идентификатор применения (%1) дублируется.'"), ИдентификаторПрименения);
				Возврат;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			ПоложениеДесятичнойТочкиСтрокой = Сред(Штрихкод, НомерСимвола, 1);
			Если Не ТолькоЦифрыВСтроке(ПоложениеДесятичнойТочкиСтрокой) Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Положение десятичной точки (%1) в идентификаторе (%2) задано не верно.'"), ПоложениеДесятичнойТочкиСтрокой, ИдентификаторПрименения);
				Возврат;
			КонецЕсли;
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), ОписаниеКода.ФиксированнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипФиксированногоЗначения = ТипGS1Число() Тогда
				Если Не ТолькоЦифрыВСтроке(Значение) Тогда
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		
		Если РезультатРазбора.ЗначениеПеременное = Неопределено
			И ОписаниеКода.ПеременнаяДлина > 0
			И Не РезультатРазбора.ЗначениеПеременноеОбработано Тогда
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			РезультатРазбора.Разобран = Ложь;
			РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШтрихкода;
			РезультатРазбора.ОписаниеКода = ОписаниеКода;
			РезультатРазбора.ЗначениеПеременное = ЗначениеПеременное;
			Возврат;
		КонецЕсли;
		
		Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
			
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), ОписаниеКода.ПеременнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипПеременногоЗначения = ТипGS1Число() Тогда
				Если Не ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение = Значение + ЗначениеПеременное;
		КонецЕсли;
		
		ПредставлениеШтрихкода = ПредставлениеШтрихкода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + Значение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		// Контроль даты yyMMdd
		ОшибкаКонтроляДаты = Ложь;
		Если СоответствиеИдентификаторовДат[ИдентификаторПрименения] <> Неопределено Тогда
			Попытка
				Месяц = Число(Сред(Значение, 3, 2));
			Исключение
				ОшибкаКонтроляДаты = Истина;
			КонецПопытки;
			Если Месяц > 12 Тогда
				ОшибкаКонтроляДаты = Истина;
			КонецЕсли;
			Попытка
				День = Число(Сред(Значение, 5, 2));
			Исключение
				ОшибкаКонтроляДаты = Истина;
			КонецПопытки;
			Если День > 31 Тогда
				ОшибкаКонтроляДаты = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ОшибкаКонтроляДаты Тогда
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = НСтр("ru = 'Ошибка формата даты.'");
			Возврат;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		РезультатРазбора.ПорядокИдентификаторов.Добавить(ОписаниеКода.Код);
		
		// Новый идентификатор применения
		Если ЗначениеЗаполнено(РезультатРазбора.ЗначениеПеременное) Тогда
			РезультатРазбора.ЗначениеПеременное = Неопределено;
			РезультатРазбора.ЗначениеПеременноеОбработано = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатРазбора.ОшибкаРазбора = Ложь;
	РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШтрихкода;
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

Функция ВариантыРазбораШтрихкодаGS1БезРазделителей(Штрихкод) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ЗначениеПеременное");
	РезультатРазбора.Вставить("ЗначениеПеременноеОбработано", Ложь);
	РезультатРазбора.Вставить("ОписаниеКода");
	РезультатРазбора.Вставить("ОшибкаРазбора", Ложь);
	РезультатРазбора.Вставить("Разобран", Ложь);
	РезультатРазбора.Вставить("ОписаниеОшибки");
	РезультатРазбора.Вставить("ПредставлениеШтрихкода", "");
	РезультатРазбора.Вставить("ДанныеШтрихкода",        Новый Соответствие);
	РезультатРазбора.Вставить("ПорядокИдентификаторов", Новый Массив);
	
	КодыGS1 = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.КодыGS1();
	Приоритеты = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ПриоритетыИдентификаторовGS1();
	
	ЧастиШтрихкода = Новый Массив;
	ЧастиШтрихкода.Добавить(Штрихкод);
	
	ЭлементСтека = Новый Структура;
	ЭлементСтека.Вставить("ЧастиШтрихкода",   ЧастиШтрихкода);
	ЭлементСтека.Вставить("РезультатРазбора", РезультатРазбора);
	
	Стек = Новый Массив;
	Стек.Добавить(ЭлементСтека);
	
	Пока Стек.Количество() > 0 Цикл
		
		ЭлементСтека = Стек[0];
		Стек.Удалить(0);
		
		Индекс = 0; 
		Для Каждого ЧастьШтрихкода Из ЭлементСтека.ЧастиШтрихкода Цикл
			
			Индекс = Индекс + 1;
			
			ЭтоПоследняяЧасть = (ЭлементСтека.ЧастиШтрихкода.Количество() = Индекс);
			
			РезультатРазбора = ЭлементСтека.РезультатРазбора;
			
			ПродолжитьРазборШтрихкодаGS1БезРазделителей(
				ЧастьШтрихкода,
				РезультатРазбора,
				КодыGS1);
			
			Если РезультатРазбора.ОшибкаРазбора Тогда
				Прервать;
			ИначеЕсли РезультатРазбора.Разобран И ЭтоПоследняяЧасть Тогда
				
				Если ВозвращаемоеЗначение = Неопределено Тогда
					ВозвращаемоеЗначение = Новый Соответствие;
				КонецЕсли;
				
				Приоритет = 0;
				Бонус     = 0;
				ПредыдущийПорядковыйНомер = -1;
				Для Каждого ИдентификаторПрименения Из РезультатРазбора.ПорядокИдентификаторов Цикл
					
					ДанныеИдентификатора = РезультатРазбора.ДанныеШтрихкода[ИдентификаторПрименения];
					
					Если ИдентификаторПрименения = "37" Или ИдентификаторПрименения = "30" Тогда
						КоличествоВложенныхЕдиниц = ДанныеИдентификатора.Значение;
						Если КоличествоВложенныхЕдиниц % 2 = 0
							Или КоличествоВложенныхЕдиниц % 3 = 0
							Или КоличествоВложенныхЕдиниц % 5 = 0 Тогда
							Бонус = Бонус + 1;
						КонецЕсли;
					КонецЕсли;
					
					ДанныеПриоритета = Приоритеты[ИдентификаторПрименения];
					Если ДанныеПриоритета = Неопределено Тогда
						ДанныеПриоритета = Приоритеты[ИдентификаторПрименения + "n"];
					КонецЕсли;
					Если ДанныеПриоритета = Неопределено Тогда
						Приоритет = 0;
						Бонус = Бонус - 100;
						Прервать;
					КонецЕсли;
					ПриоритетИдентификатора = ДанныеПриоритета.Приоритет;
					Если ПриоритетИдентификатора <> Неопределено Тогда
						Приоритет = Приоритет + ПриоритетИдентификатора;
					КонецЕсли;
					Если ДанныеПриоритета.ПорядковыйНомер < ПредыдущийПорядковыйНомер Тогда
						Приоритет = Приоритет - 10;
					КонецЕсли;
					
					ПредыдущийПорядковыйНомер = ДанныеПриоритета.ПорядковыйНомер;
					
				КонецЦикла;
				
				Если РезультатРазбора.ДанныеШтрихкода["02"] <> Неопределено
					И РезультатРазбора.ДанныеШтрихкода["37"] = Неопределено Тогда
					Бонус = Бонус - 100;
				КонецЕсли;
				
				Если РезультатРазбора.ДанныеШтрихкода["37"] <> Неопределено
					И РезультатРазбора.ДанныеШтрихкода["02"] = Неопределено Тогда
					Бонус = Бонус - 100;
				КонецЕсли;
				
				Если РезультатРазбора.ДанныеШтрихкода["37"] <> Неопределено
					И РезультатРазбора.ДанныеШтрихкода["30"] <> Неопределено Тогда
					Бонус = Бонус - 100;
				КонецЕсли;
				
				Если РезультатРазбора.ДанныеШтрихкода["10"] <> Неопределено
					И РезультатРазбора.ДанныеШтрихкода["30"] <> Неопределено Тогда
					Бонус = Бонус - 100;
				КонецЕсли;
				
				ЭлементРезультата = Новый Структура;
				ЭлементРезультата.Вставить("РезультатРазбора",       РезультатРазбора);
				ЭлементРезультата.Вставить("ПредставлениеШтрихкода", РезультатРазбора.ПредставлениеШтрихкода);
				ЭлементРезультата.Вставить("Приоритет",              Приоритет + Бонус);
				
				ВозвращаемоеЗначение.Вставить(Строка(Новый УникальныйИдентификатор), ЭлементРезультата);
				Прервать;
				
			ИначеЕсли ЗначениеЗаполнено(РезультатРазбора.ЗначениеПеременное) И Не РезультатРазбора.ЗначениеПеременноеОбработано Тогда
				
				МаксимальнаяДлинаЗначенияПеременнойДлины = Мин(
					РезультатРазбора.ОписаниеКода.ПеременнаяДлина, СтрДлина(РезультатРазбора.ЗначениеПеременное));
				
				Для ВариантДлины = 1 По МаксимальнаяДлинаЗначенияПеременнойДлины Цикл
					
					Часть1 = РезультатРазбора.ОписаниеКода.Код + Лев(РезультатРазбора.ЗначениеПеременное, ВариантДлины);
					Часть2 = Сред(РезультатРазбора.ЗначениеПеременное, ВариантДлины + 1);
					
					Если ЗначениеЗаполнено(Часть2) И СтрДлина(Часть2) <= 2 Тогда
						Продолжить;
					КонецЕсли;
					
					ЧастиШтрихкода = Новый Массив;
					ЧастиШтрихкода.Добавить(Часть1);
					Если ЗначениеЗаполнено(Часть2) Тогда
						ЧастиШтрихкода.Добавить(Часть2);
					КонецЕсли;
					
					РезультатРазбораПродолжение = Новый Структура;
					РезультатРазбораПродолжение.Вставить("ЗначениеПеременное",           РезультатРазбора.ЗначениеПеременное);
					РезультатРазбораПродолжение.Вставить("ЗначениеПеременноеОбработано", Истина);
					РезультатРазбораПродолжение.Вставить("ОписаниеКода");
					РезультатРазбораПродолжение.Вставить("ОшибкаРазбора", Ложь);
					РезультатРазбораПродолжение.Вставить("Разобран", Ложь);
					РезультатРазбораПродолжение.Вставить("ОписаниеОшибки");
					РезультатРазбораПродолжение.Вставить("ПредставлениеШтрихкода", РезультатРазбора.ПредставлениеШтрихкода);
					РезультатРазбораПродолжение.Вставить("ДанныеШтрихкода", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(РезультатРазбора.ДанныеШтрихкода));
					РезультатРазбораПродолжение.Вставить("ПорядокИдентификаторов", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(РезультатРазбора.ПорядокИдентификаторов));
					
					ЭлементСтека = Новый Структура;
					ЭлементСтека.Вставить("ЧастиШтрихкода",   ЧастиШтрихкода);
					ЭлементСтека.Вставить("РезультатРазбора", РезультатРазбораПродолжение);
					
					Стек.Добавить(ЭлементСтека);
					
				КонецЦикла
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТипGS1Число()
	
	Возврат "N";
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки - Строка - проверяемая строка.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки)
	
	Если СтрДлина(СтрокаПроверки) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		Если (КодСимвола < 48) Или (КодСимвола > 57) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

Функция ЭтоПродукцияИзНатуральногоМеха(КодМаркировки, ДополнительныеПараметры, ПроверятьАлфавитЭлементов, Алфавит, ЗначенияЭлементовКМ = Неопределено)
	
	Если ЗначенияЭлементовКМ = Неопределено Тогда
		
		Если Сред(КодМаркировки, 3, 1) <> "-" Тогда
			Возврат Ложь;
		ИначеЕсли Сред(КодМаркировки, 10, 1) <> "-" Тогда
			Возврат Ложь;
		ИначеЕсли ДополнительныеПараметры.БуквенныеКодыСтран[Лев(КодМаркировки, 2)] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПроверятьАлфавитЭлементов Тогда
			Если Не КодСоответствуетАлфавиту(
				Сред(КодМаркировки, 4, 6), Алфавит.БуквыПрописныеЦифры) Тогда
				Возврат Ложь;
			ИначеЕсли Не КодСоответствуетАлфавиту(
				Сред(КодМаркировки, 11, 10), Алфавит.БуквыПрописныеЦифры) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ЗначенияЭлементовКМ["Разделитель1"] <> "-" Тогда
			Возврат Ложь;
		ИначеЕсли ЗначенияЭлементовКМ["Разделитель2"] <> "-" Тогда
			Возврат Ложь;
		ИначеЕсли ДополнительныеПараметры.БуквенныеКодыСтран[ЗначенияЭлементовКМ["КодСтраны"]] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПроверятьАлфавитЭлементов Тогда
			Если Не КодСоответствуетАлфавиту(
				ЗначенияЭлементовКМ["Секция6"], Алфавит.БуквыПрописныеЦифры) Тогда
				Возврат Ложь;
			ИначеЕсли Не КодСоответствуетАлфавиту(
				ЗначенияЭлементовКМ["Секция10"], Алфавит.БуквыПрописныеЦифры) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Рассчитывает хеш видов продукции
//
// Параметры:
//   Значения - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС, Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции
// Возвращаемое значение:
//    Строка - Хеш элементов
//
Функция ХешВидовПродукции(Значения) Экспорт
	Если Значения = Неопределено Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(Значения) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Если Значения.Пустая() Тогда
			Возврат "";
		Иначе
			Возврат Формат(ОбщегоНазначенияИСКлиентСервер.ИндексВидаПродукцииИС(Значения), "ЧЦ=2; ЧН=; ЧВН=");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значения) = Тип("Массив") Тогда
		Если Значения.Количество() = 0 Тогда
			Возврат "";
		ИначеЕсли Значения.Количество() = 1 Тогда
			Если ТипЗнч(Значения[0]) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") И Не Значения[0].Пустая() Тогда
				Возврат Формат(ОбщегоНазначенияИСКлиентСервер.ИндексВидаПродукцииИС(Значения[0]), "ЧЦ=2; ЧН=; ЧВН=");
			Иначе
				Возврат "";
			КонецЕсли;
		Иначе
			СортируемыйСписок = Новый СписокЗначений();
			Для Каждого Значение Из Значения Цикл
				Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") И Не Значение.Пустая() Тогда
					СортируемыйСписок.Добавить(Формат(ОбщегоНазначенияИСКлиентСервер.ИндексВидаПродукцииИС(Значение), "ЧЦ=2; ЧН=; ЧВН="));
				КонецЕсли;
			КонецЦикла;
			Если СортируемыйСписок.Количество() > 0 Тогда
				СортируемыйСписок.СортироватьПоЗначению();
				Возврат СтрСоединить(СортируемыйСписок.ВыгрузитьЗначения());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция РазобратьЛогистическуюУпаковкуРасширеннаяВерсия(РезультатРазбора, ПараметрыНормализации, ВидПродукции)
	
	Если РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
		Или РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataMatrix")
		Или РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		КонецЕсли;
		
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			
			//@skip-check wrong-string-literal-content
			Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодыУпаковокКлиентСервер");
			
		#Иначе
			
			//@skip-check wrong-string-literal-content
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодыУпаковокКлиентСервер");
			
		#КонецЕсли
		
		Возврат Модуль.КодМаркировкиБезСкобок(
			РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки]);
		
	ИначеЕсли РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Неопределен") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	КонецЕсли;
	
	Если РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
	
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			Возврат СтрШаблон("(00)%1", Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18));
		КонецЕсли;
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции)
			Или ПараметрыНормализации.ВключатьЛидирующиеНули Тогда
			Возврат СтрШаблон("00%1", Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18));
		КонецЕсли;
		
		Возврат Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18);
		
	Иначе
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
