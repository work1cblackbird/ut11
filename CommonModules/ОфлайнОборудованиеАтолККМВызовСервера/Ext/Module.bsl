
#Область ПрограммныйИнтерфейс

// Загружаемые данные из ККМ.
// 
// Параметры:
//  ТекстовыйДокумент - Строка - Текстовый документ
//  ФорматОбмена - Строка -Формат обмена
//  ВыходныеПараметры - Структура - Выходные параметры
// 
// Возвращаемое значение:
//  Булево - Загружаемые данные из ККМ
Функция ЗагружаемыеДанныеИзККМ(ТекстовыйДокумент, ФорматОбмена, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВсегоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	
	ЗагружаемыеДанныеИзККМ = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	
	ПродолжатьЧтениеФайла = Ложь;
	ТекстОшибки = "";
	Строка = ТекстовыйДокумент.ПолучитьСтроку(1);
	
	// Проверяем обработанность файла.
	Если Строка = "#" Тогда
		Индекс = 4;
		ПродолжатьЧтениеФайла = Истина;
	ИначеЕсли Строка = "@" Тогда
		ТекстОшибки = НСтр("ru='Файл загрузки был обработан ранее.'");
		Результат = Ложь;
	Иначе
		ТекстОшибки = НСтр("ru='Загрузка невозможна. Неизвестный формат отчета.'");
		Результат = Ложь;
	КонецЕсли;
	
	Смены = Новый Массив;
	ТекущаяСмена = Неопределено;
	
	// В цикле читаем транзакции.
	Пока ПродолжатьЧтениеФайла Цикл
		
		// Получаем строку с очередной транзакцией.
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		
		// Если транзакция существует.
		Если ПустаяСтрока(Строка) Тогда
			
			Если Индекс <= ВсегоСтрок Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			ПродолжатьЧтениеФайла = Ложь;
			
		Иначе
			
			Транзакция = ПустаяТранзакция();
			
			// Раскладываем транзакцию на поля.
			Если ТранзакцияЗаполнена(СтрЗаменить(Строка, ";", Символы.ПС), Транзакция, ФорматОбмена, ТекстОшибки) Тогда
				
				Если Транзакция.Тип = 2 ИЛИ Транзакция.Тип = 12 Тогда
					
					// Сторно продажи/возврата товара.
					Если НЕ УдалитьТранзакциюИзЧека(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
					
				ИначеЕсли Транзакция.Тип = 1 ИЛИ Транзакция.Тип = 11 Тогда
					
					// Продажа/возврат товара.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция, ФорматОбмена);
					
				ИначеЕсли Транзакция.Тип = 40 ИЛИ Транзакция.Тип = 41 Тогда
					
					// Оплата.
					ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция, ФорматОбмена, Истина);
					
				ИначеЕсли Транзакция.Тип = 42 Тогда
					
					// Открытие чека.
					ОткрытьЧек(ТекущаяСмена, Смены, Транзакция);
					
				ИначеЕсли Транзакция.Тип = 55 ИЛИ Транзакция.Тип = 58 Тогда
					
					// Закрытие чека.
					Если НЕ ЗакрытьЧек(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
						ПродолжатьЧтениеФайла = Ложь;
						Результат = Ложь;
					КонецЕсли;
					
				ИначеЕсли Транзакция.Тип = 56 Тогда
					
					// Отмена чека.
					УдалитьЧек(ТекущаяСмена, Транзакция, ТекстОшибки);
					
				ИначеЕсли Транзакция.Тип = 61 Тогда
					
					// Закрытие смены.
					ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
					
				ИначеЕсли Транзакция.Тип = 62 Тогда
					
					// Открытие смены.
					ОткрытьСмену(ТекущаяСмена, Смены, Транзакция);
					
				КонецЕсли;
				
			Иначе
				Результат = Ложь;
				ПродолжатьЧтениеФайла = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если Результат Тогда
		
		// Если текущая смена не закрыта, закрываем ее.
		Если НЕ ТекущаяСмена = Неопределено И НЕ ЗначениеЗаполнено(ТекущаяСмена.ДатаЗакрытия) Тогда
			ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
		КонецЕсли;
		
		// Перебираем смены.
		Для Каждого Смена Из Смены Цикл
			
			// Формируем описание смены.
			
			ОтчетОПродажахККМ = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОПродажахККМ();
			
			ОтчетОПродажахККМ.НомерСмены = Смена.Номер;
			ОтчетОПродажахККМ.ДатаОткрытияСмены = Смена.ДатаОткрытия;
			ОтчетОПродажахККМ.ДатаЗакрытияСмены = Смена.ДатаЗакрытия;
			
			УдалитьНеподдерживаемыеОперации(Смена.Чеки);
			
			// Перебираем все чеки смены.
			Для Каждого Чек Из Смена.Чеки Цикл
				
				// Если чек закрыт.
				Если Чек.Закрыт Тогда
					
					Если Чек.ТипОперацииККМ = "Продажа" ИЛИ Чек.ТипОперацииККМ = "Возврат" Тогда
						
						ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
						
						ЧекККМ.ДатаЧека = Чек.ДатаЧека;
						ЧекККМ.НомерЧека = Чек.НомерЧека;
						ЧекККМ.ТипРасчета = ?(Чек.ТипОперацииККМ = "Продажа",
							Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств,
							Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
						
						
						Для Каждого Товар Из Чек.Товары Цикл
							
							ТоварЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
							
							ТоварЧекаККМ.Код 		= Товар.Код;
							ТоварЧекаККМ.Цена 		= ?(Товар.Цена > 0,  Товар.Цена,  -Товар.Цена);
							ТоварЧекаККМ.Сумма 		= ?(Товар.Сумма > 0, Товар.Сумма, -Товар.Сумма);
							ТоварЧекаККМ.Количество = ?(Товар.Количество > 0, Товар.Количество, -Товар.Количество);
							
							Если ЗначениеЗаполнено(Товар.ШтрихкодАлкогольнойПродукции) Тогда
								
								Разделитель = "¤";
								ШтрихкодыАлкогольнойПродукции = МассивПодстрок(
									Товар.ШтрихкодАлкогольнойПродукции, Разделитель, Истина, Истина);
								
								Для Каждого Штрихкод Из ШтрихкодыАлкогольнойПродукции Цикл
									ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(Штрихкод);
								КонецЦикла;
								
							КонецЕсли;
							
							ТоварЧекаККМ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
							
							ЧекККМ.Товары.Добавить(ТоварЧекаККМ);
							
						КонецЦикла;
						
						Для Каждого Оплата Из Чек.Оплаты Цикл
							
							ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
							
							Если Оплата.ТипОплаты = 0 ИЛИ Оплата.ТипОплаты = "0" Тогда
								ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(Оплата.Сумма > 0, Оплата.Сумма, -Оплата.Сумма);
							Иначе
								ОплатаЧекаККМ.СуммаЭлектроннойОплаты   = ?(Оплата.Сумма > 0, Оплата.Сумма, -Оплата.Сумма);
								ОплатаЧекаККМ.КодВидаЭлектроннойОплаты = Оплата.КодВидаОплаты;
							КонецЕсли;
								
							ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
							
						КонецЦикла;
						
						ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
						
					ИначеЕсли Чек.ТипОперацииККМ = "ВскрытиеТары" Тогда
						
						ВскрытиеТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ВскрытиеТарыККМ();
						
						ВскрытиеТарыККМ.Дата  = Чек.ДатаЧека;
						ВскрытиеТарыККМ.Номер = Чек.НомерЧека;
						
						Для Каждого Товар Из Чек.Товары Цикл
							
							ТоварВскрытияККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварВскрытияТарыККМ();
							
							ТоварВскрытияККМ.Код 		= Товар.Код;
							ТоварВскрытияККМ.Количество = Товар.Количество;
							
							Если ЗначениеЗаполнено(Товар.ШтрихкодАлкогольнойПродукции) Тогда
								
								Разделитель = "¤";
								ШтрихкодыАлкогольнойПродукции = МассивПодстрок(
									Товар.ШтрихкодАлкогольнойПродукции, Разделитель, Истина, Истина);
								
								Для Каждого Штрихкод Из ШтрихкодыАлкогольнойПродукции Цикл
									ТоварВскрытияККМ.ШтрихкодАлкогольнойПродукции.Добавить(Штрихкод);
								КонецЦикла;
								
							КонецЕсли;
							
							ВскрытиеТарыККМ.Товары.Добавить(ТоварЧекаККМ);
							
						КонецЦикла;
						
						ЗагружаемыеДанныеИзККМ.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
						
					ИначеЕсли Чек.ТипОперацииККМ = "Внесение" ИЛИ Чек.ТипОперацииККМ = "Выплата" Тогда
						
					ИначеЕсли Чек.ТипОперацииККМ = "СнятиеСКрана" ИЛИ Чек.ТипОперацииККМ = "ПостановкаНаКран" Тогда
						
						ВскрытиеТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ВскрытиеТарыККМ();
						
						ВскрытиеТарыККМ.Дата  = Чек.ДатаЧека;
						ВскрытиеТарыККМ.Номер = Чек.НомерЧека;
						
						Для Каждого Товар Из Чек.Товары Цикл
							
							ТоварВскрытияККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварВскрытияТарыККМ();
							
							ТоварВскрытияККМ.Код 		= Товар.Код;
							ТоварВскрытияККМ.Количество = Товар.Количество;
							ТоварВскрытияККМ.ШтрихкодАлкогольнойПродукции.Добавить(Товар.КодМаркировки);
							
							ВскрытиеТарыККМ.НомерДокумента = Товар.НомерДокумента;
							ВскрытиеТарыККМ.ПостановкаНаКран = Товар.ПостановкаНаКран;
							
							ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияККМ);
							
						КонецЦикла;
						
						ЗагружаемыеДанныеИзККМ.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат Тогда
		ВыходныеПараметры.Добавить(ЗагружаемыеДанныеИзККМ);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Файл очистки данных.
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Файл очистки данных
Функция ФайлОчисткиДанных() Экспорт
	
	#Если Не МобильноеПриложениеСервер Тогда
	Файл = Новый ТекстовыйДокумент();
	
	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Файл.ДобавитьСтроку("$$$DELETEALLWARES");
	Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
	Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
	
	Возврат Файл;
	#КонецЕсли
	
КонецФункции

// Выгружаемые данные ВККМ.
// 
// Параметры:
//  РасширеннаяВыгрузка - Булево - Расширенная выгрузка
//  ЧастичнаяВыгрузка - Булево - Частичная выгрузка
//  ФорматОбмена - Строка - Формат обмена
//  Товары - Массив - Товары
//  Налоги - Массив - Налоги
//  ВыходныеПараметры - Структура - Выходные параметры.
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Выгружаемые данные ВККМ
Функция ВыгружаемыеДанныеВККМ(РасширеннаяВыгрузка, ЧастичнаяВыгрузка, ФорматОбмена, Товары, Налоги, ВыходныеПараметры) Экспорт
	
	#Если Не МобильноеПриложениеСервер Тогда
	Файл = Новый ТекстовыйДокумент();
	
	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Разделитель = Разделитель();
	
	Если РасширеннаяВыгрузка Тогда
		
		Если ЧастичнаяВыгрузка Тогда
			Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
		Иначе
			
			Файл.ДобавитьСтроку("$$$DELETEALLWARES");
			Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
			Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
			Файл.ДобавитьСтроку("$$$ADDQUANTITY");
			
		КонецЕсли;
		
		Для Каждого ТекГруппа Из Товары.ГруппыТоваров Цикл
			
			ДанныеДляЗаполнения = Новый Структура;
			ДанныеДляЗаполнения.Вставить("Код", Формат(ТекГруппа.Код, "ЧН=0; ЧГ=0"));
			ДанныеДляЗаполнения.Вставить("Наименование", ИсходнаяСтрока(ТекГруппа.Наименование));
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(ТекГруппа.КодГруппы, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Истина);
			
		КонецЦикла;
			
	Иначе
		
		Если ЧастичнаяВыгрузка Тогда
			Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
		Иначе
			Файл.ДобавитьСтроку("$$$DELETEALLWARES");
			Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
			Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
			Файл.ДобавитьСтроку("$$$ADDQUANTITY");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Товар Из Товары.Товары Цикл
		
		Параметры = Новый Структура;
		
		Параметры.Вставить("Разделитель", Разделитель);
		Параметры.Вставить("Уровень", "Номенклатура");
		Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
		Параметры.Вставить("ФорматОбмена", ФорматОбмена);
		Параметры.Вставить("Источник", Товар);
		
		Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
			
			Для Каждого ЕИ Из Товары.ЕдиницыИзмерения Цикл
				
				Если ЕИ.Код = Товар.КодЕдиницыИзмерения Тогда
					Параметры.Вставить("БазоваяЕИ", ЕИ.Наименование);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Параметры.Вставить("БазоваяЕИ", "");
		КонецЕсли;
		
		ДополнитьФайл(Файл, ВыходныеПараметры, Параметры);
		
	КонецЦикла;
	
	Если (ФорматОбмена < 4 ИЛИ ФорматОбмена = 7 ИЛИ ФорматОбмена = 8) И НЕ ЧастичнаяВыгрузка Тогда
		СформироватьСтавкиНДС(Файл, Налоги);
	КонецЕсли;
	
	Возврат Файл;
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииРаботыСТранзакциями

Функция ПустаяТранзакция()
	
	Транзакция = Новый Структура;
	
	Транзакция.Вставить("Номер", 0);
	
	// Дата и время транзакции.
	Транзакция.Вставить("ДатаИВремя", Дата(1,1,1));
	
	// Тип транзакции.
	Транзакция.Вставить("Тип", 0);
	
	// Номер чека транзакции.
	Транзакция.Вставить("НомерЧека", 0);
	
	Возврат Транзакция;
	
КонецФункции

Функция ТранзакцияЗаполнена(Строка, Транзакция, ФорматОбмена, ТекстОшибки)
	
	Результат = Истина;
	
	// Номер транзакции.
	Попытка
		
		Транзакция.Номер = Число(СтрПолучитьСтроку(Строка, 1));
		
	Исключение
		Транзакция.Номер = 0;
	КонецПопытки;
	
	
	// Дата и время транзакции.
	Попытка
		
		ДатаТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 2), "-", ".");
		ДатаТранзакции = СтрЗаменить(ДатаТранзакции, ".", Символы.ПС);
		
		ВремяТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 3), ":", Символы.ПС);
		
		Транзакция.ДатаИВремя = Дата(Число(СтрПолучитьСтроку(ДатаТранзакции, 3)),
			Число(СтрПолучитьСтроку(ДатаТранзакции, 2)),
			Число(СтрПолучитьСтроку(ДатаТранзакции, 1)),
			Число(СтрПолучитьСтроку(ВремяТранзакции, 1)),
			Число(СтрПолучитьСтроку(ВремяТранзакции, 2)),
			Число(СтрПолучитьСтроку(ВремяТранзакции, 3)));
		
	Исключение
		Транзакция.ДатаИВремя = Дата(1,1,1);
	КонецПопытки;
	
	// Тип транзакции.
	Попытка
		
		Транзакция.Тип = Число(СтрПолучитьСтроку(Строка, 4));
		
	Исключение
		Транзакция.Тип = 0;
	КонецПопытки;
	
	
	// Номер чека транзакции.
	Попытка
		
		Транзакция.НомерЧека = Число(СтрПолучитьСтроку(Строка, 6));
		
	Исключение
		Транзакция.НомерЧека = 0;
	КонецПопытки;
	
	
	Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 ИЛИ ФорматОбмена = 8 Тогда
		КоличествоПолей = 34;
	Иначе
		КоличествоПолей = 26
	КонецЕсли;
	
	// При загрузке обрабатываются только первые 26 полей.
	Для Индекс = 8 По КоличествоПолей Цикл
		
		ИндексСтрокой = Формат(Индекс, "ЧГ=0");
		
		ПолеОшибки = НСтр("ru='Поле №%1% (%1%)'");
		ПолеОшибки = СтрЗаменить(ПолеОшибки, "%1%", ИндексСтрокой);
		
		Значение = СтрПолучитьСтроку(Строка, Индекс);
		
		ИндексВхождения = СтрНайти(Значение, "|");
		
		Если ИндексВхождения > 0 Тогда
			Значение = Лев(Значение, ИндексВхождения-1);
		КонецЕсли;
		
		// Преобразуем значение числовых полей в число.
		Если (Индекс >= 10 И Индекс <= 13) ИЛИ Индекс = 16 Тогда
			
			Попытка
				ЗначениеЧислом = Число(Значение);
			Исключение
				ЗначениеЧислом = 0;
			КонецПопытки;
			
			Транзакция.Вставить("Поле" + ИндексСтрокой, ?(ЗначениеЗаполнено(Значение), ЗначениеЧислом, Неопределено));
		Иначе
			Транзакция.Вставить("Поле" + ИндексСтрокой, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьТранзакциюВЧек(Смена, Смены, Транзакция, ФорматОбмена, Оплата = Ложь)
	
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		ОткрытьЧек(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Если Оплата Тогда
		
		ОплатыЧека = Смена.Чеки[Смена.Чеки.Количество()-1].Оплаты;
		
		НайденныеОплаты = НайтиСтроки(ОплатыЧека, Новый Структура("КодВидаОплаты, ТипЧека", Транзакция.Поле9, Транзакция.Поле13));
		
		Если НайденныеОплаты.Количество()>0 Тогда
			
			Оплата = ОплатыЧека[НайденныеОплаты[0].ИндексВМассиве];
			Оплата.Сумма = Оплата.Сумма + Транзакция.Поле12;
			
		Иначе
			
			НоваяОплата = Новый Структура;
			
			НоваяОплата.Вставить("ТипОплаты",		?(Транзакция.Поле10 = 0 ИЛИ ПустаяСтрока(Транзакция.Поле10), 0, 1)); // 0 - предопределенный тип оплаты "наличные".
			НоваяОплата.Вставить("КодВидаОплаты",	Транзакция.Поле9);
			НоваяОплата.Вставить("Сумма",			Транзакция.Поле12);
			НоваяОплата.Вставить("ТипЧека",			Транзакция.Поле13);
			
			ОплатыЧека.Добавить(НоваяОплата);
			
		КонецЕсли;
		
	Иначе
		
		Если Транзакция.Поле13 = 18 Тогда
			
			НовоеВскрытие = Новый Структура;
			
			НовоеВскрытие.Вставить("Дата",			НачалоДня(Транзакция.ДатаИВремя));
			НовоеВскрытие.Вставить("Код",			Транзакция.Поле8);
			НовоеВскрытие.Вставить("Количество",	Транзакция.Поле11);
			НовоеВскрытие.Вставить("ВскрытиеТары",	Истина);
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 ИЛИ ФорматОбмена = 8 Тогда
				Если Транзакция.Поле32 = 1 Тогда
					ШтрихкодМарки = Транзакция.Поле34;
				ИначеЕсли Транзакция.Поле32 = 0 Тогда
					ШтрихкодМарки = "";
				Иначе
					ШтрихкодМарки = Транзакция.Поле33;
				КонецЕсли;
			Иначе
				ШтрихкодМарки = "";
			КонецЕсли;
			
			НовоеВскрытие.Вставить("ШтрихкодАлкогольнойПродукции",	ШтрихкодМарки);
			
			МассивТоваровЧекаСмены = Смена.Чеки[Смена.Чеки.Количество()-1].Товары; //Массив - 
			МассивТоваровЧекаСмены.Добавить(НовоеВскрытие);
			
		ИначеЕсли Транзакция.Поле13 = 27 ИЛИ Транзакция.Поле13 = 28 Тогда
			
			НоваяПостановкаНаКран = Новый Структура;
			
			НоваяПостановкаНаКран.Вставить("Дата",				Транзакция.ДатаИВремя);
			НоваяПостановкаНаКран.Вставить("Код",				Транзакция.Поле8);
			НоваяПостановкаНаКран.Вставить("Количество",		Транзакция.Поле11);
			НоваяПостановкаНаКран.Вставить("ПостановкаНаКран",	?(Транзакция.Поле13 = 27, Истина, Ложь));
			НоваяПостановкаНаКран.Вставить("КодМаркировки",		Транзакция.Поле33);
			НоваяПостановкаНаКран.Вставить("НомерДокумента",	Транзакция.Поле26);
			
			МассивТоваровЧекаСмены = Смена.Чеки[Смена.Чеки.Количество()-1].Товары; //Массив - 
			МассивТоваровЧекаСмены.Добавить(НоваяПостановкаНаКран); 
			
		Иначе
				
			НовыйТовар = Новый Структура;
			
			НовыйТовар.Вставить("Код",					Транзакция.Поле8);
			НовыйТовар.Вставить("Количество",			Транзакция.Поле11);
			НовыйТовар.Вставить("Цена",					Транзакция.Поле10);
			НовыйТовар.Вставить("Сумма",				Транзакция.Поле16);
			НовыйТовар.Вставить("НомерТранзакции",		Транзакция.Номер);
			НовыйТовар.Вставить("ДатаИВремяТранзакции",	Транзакция.ДатаИВремя);
			НовыйТовар.Вставить("ВскрытиеТары",			Ложь);
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 Тогда
				ШтрихкодМарки = Транзакция.Поле34;
			Иначе
				ШтрихкодМарки = "";
			КонецЕсли;
			
			НовыйТовар.Вставить("ШтрихкодАлкогольнойПродукции", ШтрихкодМарки);
			
			МассивТоваровЧекаСмены = Смена.Чеки[Смена.Чеки.Количество()-1].Товары; //Массив -
			МассивТоваровЧекаСмены.Добавить(НовыйТовар);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьТранзакциюИзЧека(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено ИЛИ ТекущийЧек.Товары.Количество() = 0 Тогда
		Результат = Ложь;
	Иначе
		
		СторнируемаяТранзакция = Неопределено;
		
		Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
			
			Если ТекТовар.Код = Транзакция.Поле8 И ТекТовар.Количество = -1*Транзакция.Поле11 И ТекТовар.Цена = Транзакция.Поле10 Тогда
				СторнируемаяТранзакция = ТекТовар;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ СторнируемаяТранзакция = Неопределено Тогда
			ТекущийЧек.Товары.Удалить(ТекущийЧек.Товары.Найти(СторнируемаяТранзакция));
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Транзакция.Номер);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЧеками

Процедура ОткрытьЧек(Смена, Смены, Транзакция)
	
	// Проверяем инициализированность текущей смены.
	Если Смена = Неопределено ИЛИ Смена.Номер <> Транзакция.Поле14 ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Чек = Новый Структура;
	
	Чек.Вставить("Закрыт", Ложь);
	Чек.Вставить("ДатаЧека", Неопределено); // устанавливается при закрытии
	Чек.Вставить("НомерЧека", Транзакция.НомерЧека);
	Чек.Вставить("Товары", Новый Массив);
	Чек.Вставить("Оплаты", Новый Массив);
	Чек.Вставить("ТипОперацииККМ", ТипОперацииККМ(Транзакция.Поле13));
	
	Смена.Чеки.Добавить(Чек);
	
КонецПроцедуры

Функция ЗакрытьЧек(Смена, Транзакция, ТекстОшибки)
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Транзакция.НомерЧека);
		Результат = Ложь;
	Иначе
		ТекущийЧек.Закрыт = Истина;
		ТекущийЧек.ДатаЧека = Транзакция.ДатаИВремя;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧек(Смена, НомерЧека)
	
	НайденныеЧеки = НайтиСтроки(Смена.Чеки, Новый Структура("НомерЧека", НомерЧека));
	
	Если НайденныеЧеки.Количество()>0 Тогда
		Возврат Смена.Чеки[НайденныеЧеки[0].ИндексВМассиве];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция УдалитьЧек(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек<>Неопределено Тогда
		Смена.Чеки.Удалить(Смена.Чеки.Найти(ТекущийЧек));
	Иначе
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Транзакция.Номер);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьНеподдерживаемыеОперации(Чеки)
	
	КодОперацииПриход = 14;
	ОперацияПриход = ТипОперацииККМ(КодОперацииПриход);
	
	Индекс = Чеки.Количество() - 1;
	
	Пока Индекс > 0 Цикл
		
		Чек = Чеки[Индекс];
		
		Если Чек.ТипОперацииККМ = ОперацияПриход Тогда
			Чеки.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСоСменами

Процедура ЗакрытьСмену(Смена, Смены, Транзакция)
	
	// Если смена не открыта/закрыта, открываем ее.
	Если Смена=Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена.ДатаЗакрытия = Транзакция.ДатаИВремя;
	Смены.Добавить(Смена);
	
КонецПроцедуры

Процедура ОткрытьСмену(Смена, Смены, Транзакция)
	
	// Если предыдущая смена не закрыта, закрываем ее.
	Если Смена<>Неопределено И НЕ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ЗакрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена = Новый Структура;
	
	Смена.Вставить("Номер",			Транзакция.Поле14);
	Смена.Вставить("ДатаОткрытия",	Транзакция.ДатаИВремя);
	Смена.Вставить("ДатаЗакрытия"	);
	Смена.Вставить("Чеки",			Новый Массив);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНалогами

// Номера налогов на ККМПо умолчанию.
// 
// Возвращаемое значение:
//  Структура - Номера налогов на ККМПо умолчанию:
// * НомерНалога0 - Число -
// * НомерНалога10 - Число -
// * НомерНалога20 - Число -
// * НомерНалогаБезНДС - Число -
// * НомерНалога18 - Число -
Функция НомераНалоговНаККМПоУмолчанию() Экспорт
	
	Налоги = Новый Структура;
	
	Налоги.Вставить("НомерНалога0", 1);
	Налоги.Вставить("НомерНалога10", 2);
	Налоги.Вставить("НомерНалога20", 3);
	Налоги.Вставить("НомерНалогаБезНДС", 4);
	Налоги.Вставить("НомерНалога18", 5);
	
	Возврат Налоги;
	
КонецФункции

Функция КодНалогаПоСтавкеНДС(СтавкаНДС)
	
	КодНалога = Неопределено;
	
	Если СтавкаНДС = "0" Тогда
		
		КодНалога = 4;
		
	ИначеЕсли СтавкаНДС = "10" Тогда
		
		КодНалога = 2;
		
	ИначеЕсли СтавкаНДС = "18" Тогда
		
		КодНалога = 5;
		
	ИначеЕсли СтавкаНДС = "none" Тогда
		
		КодНалога = 3;
		
	ИначеЕсли СтавкаНДС = "20" Тогда
		
		КодНалога = 1;
		
	КонецЕсли;
	
	Возврат КодНалога;
	
КонецФункции

Процедура СформироватьСтавкиНДС(ТекстовыйФайл, НалогиНаККМ)
	
	Результат = Истина;
	
	Налоги = СпискиНалоговИКомбинацийНалогов(НалогиНаККМ);
	
	БлокСтавок = "$$$ADDTAXRATES";
	БлокГрупп = "$$$ADDTAXGROUPS";
	БлокСтавокГрупп = "$$$ADDTAXGROUPRATES";
	
	Для Каждого ТекНалог Из Налоги Цикл
		
		Если ТекНалог.Ставки.Количество() = 0 Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
			
			Текст = ?(СтрДлина(ТекСтавка.Текст)>100, Лев(ТекСтавка.Текст, 100), ТекСтавка.Текст);
			
			БлокСтавок = БлокСтавок
			+ Символы.ПС
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код
			+ Текст + ";"								// Наименование
			+ Текст + ";"								// Текст
			+ "0;"										// Тип налога
			+ Формат(ТекСтавка.Значение, "ЧН=0; ЧГ=0") 
			+ ";"
			+ ТекСтавка.НомерНалогаККМ; 				// Номер налога в ККМ
			
			БлокГрупп = БлокГрупп
			+ Символы.ПС
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";" // Код
			+ Текст + ";"								// Наименование
			+ Текст;									// Текст
			
			БлокСтавокГрупп = БлокСтавокГрупп
			+ Символы.ПС
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код налоговой группы
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код налоговой ставки
			+ "1";										// Смена базы
			
		КонецЦикла;
		
	КонецЦикла;
	
	БлокНалогов = "$$$DELETEALLTAXGROUPRATES
		|$$$DELETEALLTAXGROUPS
		|$$$DELETEALLTAXRATES" + Символы.ПС
		+ БлокСтавок + Символы.ПС
		+ БлокГрупп + Символы.ПС
		+ БлокСтавокГрупп;
	
	
	Если Результат Тогда
		
		Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
			
			// Определяем и удаляем блок видов оплаты.
			ТекстФайла = ТекстовыйФайл.ПолучитьТекст();
			
			Если Найти(ТекстФайла, "$$$DELETEALLTAXGROUPRATES")<>0 Тогда
				
				Для ИндексСтроки = 3 По ТекстовыйФайл.КоличествоСтрок() Цикл
					
					ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
					
					Если ТекущаяСтрока = "$$$DELETEALLTAXGROUPRATES" Тогда
						
						Пока Истина Цикл
							
							Если ИндексСтроки = ТекстовыйФайл.КоличествоСтрок() + 1 Тогда
								Прервать;
							КонецЕсли;
							
							ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
							
							Если ТекущаяСтрока <> "$$$REPLACEQUANTITY" И ТекущаяСтрока <> "$$$DELETEALLWARES" Тогда
								ТекстовыйФайл.УдалитьСтроку(ИндексСтроки);
							Иначе
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			// Выгружаем в новый файл
			ТекстовыйФайл.ДобавитьСтроку("##@@&&");
			ТекстовыйФайл.ДобавитьСтроку("#");
		КонецЕсли;
		
		ТекстовыйФайл.ВставитьСтроку(3, БлокНалогов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СпискиНалоговИКомбинацийНалогов(НалогиНаККМ)
	
	Налоги = Новый Массив;
	
	НалогНДС = Новый Структура;
	
	НалогНДС.Вставить("Код");
	НалогНДС.Вставить("Наименование");
	НалогНДС.Вставить("Ставки", Новый Массив);
	
	НалогНДС.Код = "1";
	НалогНДС.Наименование = "НДС";
	
	// 20%
	СтавкаНалога20 = Новый Структура;
	СтавкаНалога20.Вставить("Код", 1);
	СтавкаНалога20.Вставить("Текст", НСтр("ru = 'НДС 20%'"));
	СтавкаНалога20.Вставить("Значение", 20);
	СтавкаНалога20.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога20);
	НалогНДС.Ставки.Добавить(СтавкаНалога20);
	
	// 10%
	СтавкаНалога10 = Новый Структура;
	СтавкаНалога10.Вставить("Код", 2);
	СтавкаНалога10.Вставить("Текст", НСтр("ru = 'НДС 10%'"));
	СтавкаНалога10.Вставить("Значение", 10);
	СтавкаНалога10.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога10);
	НалогНДС.Ставки.Добавить(СтавкаНалога10);
	
	// Без НДС
	СтавкаНалогаБезНДС = Новый Структура;
	СтавкаНалогаБезНДС.Вставить("Код", 3);
	СтавкаНалогаБезНДС.Вставить("Текст", НСтр("ru = 'Без НДС'"));
	СтавкаНалогаБезНДС.Вставить("Значение", 0);
	СтавкаНалогаБезНДС.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалогаБезНДС);
	НалогНДС.Ставки.Добавить(СтавкаНалогаБезНДС);
	
	// 0%
	СтавкаНалога0 = Новый Структура;
	СтавкаНалога0.Вставить("Код", 4);
	СтавкаНалога0.Вставить("Текст", НСтр("ru = 'НДС 0%'"));
	СтавкаНалога0.Вставить("Значение", 0);
	СтавкаНалога0.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога0);
	НалогНДС.Ставки.Добавить(СтавкаНалога0);
	
	// 18%
	СтавкаНалога18 = Новый Структура;
	СтавкаНалога18.Вставить("Код", 5);
	СтавкаНалога18.Вставить("Текст", НСтр("ru = 'НДС 18%'"));
	СтавкаНалога18.Вставить("Значение", 18);
	СтавкаНалога18.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога18);
	НалогНДС.Ставки.Добавить(СтавкаНалога18);
	
	Налоги.Добавить(НалогНДС);
	
	Возврат Налоги;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФискальнымиПризнаками

Функция ТипОперацииККМ(КодТипаОперации)
	
	Если КодТипаОперации = 0 Тогда
		Возврат "Продажа";
		
	ИначеЕсли КодТипаОперации = 1 Тогда
		Возврат "Возврат";
		
	ИначеЕсли КодТипаОперации = 2 Тогда
		Возврат "Аннулирование";
		
	ИначеЕсли КодТипаОперации = 3 Тогда
		Возврат "Обмен";
		
	ИначеЕсли КодТипаОперации = 4 Тогда
		Возврат "Внесение";
		
	ИначеЕсли КодТипаОперации = 5 Тогда
		Возврат "Выплата";
		
	ИначеЕсли КодТипаОперации = 6 Тогда
		Возврат "Пользовательская";
		
	ИначеЕсли КодТипаОперации = 8 Тогда
		Возврат "ОткрытиеСмены";
		
	ИначеЕсли КодТипаОперации = 9 Тогда
		Возврат "ОперацияВККМ";
		
	ИначеЕсли КодТипаОперации = 10 Тогда
		Возврат "ЗакрытиеСмены";
		
	ИначеЕсли КодТипаОперации = 11 Тогда
		Возврат "ЗакрСменыПлатСистем";  // АПК: 1036 обратная соместимость
		
	ИначеЕсли КодТипаОперации = 12 Тогда
		Возврат "РедСпискаСотрудников";
		
	ИначеЕсли КодТипаОперации = 13 Тогда
		Возврат "СлужебнаяОперация";
		
	ИначеЕсли КодТипаОперации = 14 Тогда
		Возврат "Приход";
		
	ИначеЕсли КодТипаОперации = 15 Тогда
		Возврат "Расход";
		
	ИначеЕсли КодТипаОперации = 16 Тогда
		Возврат "Инвентаризация";
		
	ИначеЕсли КодТипаОперации = 17 Тогда
		Возврат "Переоценка";
		
	ИначеЕсли КодТипаОперации = 18 Тогда
		Возврат "ВскрытиеТары"; 
		
	ИначеЕсли КодТипаОперации = 27 Тогда
		Возврат "ПостановкаНаКран";
		
	ИначеЕсли КодТипаОперации = 28 Тогда
		Возврат "СнятиеСКрана";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция КодПризнакаПредметаРасчета(ПризнакПредметаРасчета)
	
	//	Признак предмета расчета:
	// 0 – не используется;
	// 1 – товар, кроме подакцизного;
	// 2 – подакцизный товар;
	// 3 – работа;
	// 4 – услуга;
	// 5 – товар, состоящий из нескольких признаков;
	// 6 – иной товар;
	// 7 – аванс, предоплата.
	
	Если ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар")
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ")
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ") Тогда
		ПризнакПредметаРасчетаКод = 1;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар") 
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ") 
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ") Тогда
		ПризнакПредметаРасчетаКод = 2;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа") Тогда
		ПризнакПредметаРасчетаКод = 3;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
		ПризнакПредметаРасчетаКод = 4;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 5;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 6;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата") Тогда
		ПризнакПредметаРасчетаКод = 7;
		
	Иначе
		ПризнакПредметаРасчетаКод = 1;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчетаКод;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСТекстовымиДокументамиИСтроками

Процедура ДополнитьФайл(Файл, ВыходныеПараметры, Параметры, Знач ДанныеДляЗаполнения = Неопределено)

	Разделитель			= Параметры.Разделитель;
	Уровень				= Параметры.Уровень;
	РасширеннаяВыгрузка	= Параметры.РасширеннаяВыгрузка;
	ФорматОбмена		= Параметры.ФорматОбмена;
	Источник			= Параметры.Источник;
	БазоваяЕИ			= Параметры.БазоваяЕИ;
	
	Если Уровень = "Номенклатура" Тогда
		
		ДанныеДляЗаполнения = Новый Структура;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("Наименование", ИсходнаяСтрока(Источник.Наименование));
		
		// Иерархия
		Если ФорматОбмена <> 0 Тогда
			// КодРодительскойГруппы
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(Источник.КодГруппы, "ЧН=0; ЧГ=0"));
		КонецЕсли;
		// Артикул
		ДанныеДляЗаполнения.Вставить("Артикул", ИсходнаяСтрока(Источник.Артикул, 20));
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", "1");
		
		// КодНалога
		ДанныеДляЗаполнения.Вставить("КодНалога", КодНалогаПоСтавкеНДС(Источник.СтавкаНДС));
		
		
		// Признак предмета расчета
		Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 7 ИЛИ ФорматОбмена = 8 Тогда
			ДанныеДляЗаполнения.Вставить("ПризнакПредметаРасчета", КодПризнакаПредметаРасчета(Источник.ПризнакПредметаРасчета));
		Иначе
			ДанныеДляЗаполнения.Вставить("ПризнакПредметаРасчета", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ЭтоАлкоголь) И Источник.ЭтоАлкоголь Тогда
			
			АлкогольныеРеквизиты = Источник.АлкогольныеРеквизиты;
			
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Истина);
			// Маркированная продукция
			ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 1);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", АлкогольныеРеквизиты.Маркируемый);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции);
			// Емкость тары
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", Формат(АлкогольныеРеквизиты.ЕмкостьТары, "ЧДЦ=3; ЧГ=0"));
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", Формат(АлкогольныеРеквизиты.Крепость, "ЧГ=0"));
			// ИННПроизводителя
			ДанныеДляЗаполнения.Вставить("ИННПроизводителя", АлкогольныеРеквизиты.ИННПроизводителя);
			// КПППроизводителя
			ДанныеДляЗаполнения.Вставить("КПППроизводителя", АлкогольныеРеквизиты.КПППроизводителя);
			Если Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво")Тогда
				ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 18);
				ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Истина);
				// Маркируемый
				ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Пиво") Тогда
				ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 17);
				ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
				// Маркируемый
				ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			Иначе
				ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
				// Маркируемый
				ДанныеДляЗаполнения.Вставить("Маркируемый", АлкогольныеРеквизиты.Маркируемый);
			КонецЕсли;
			
		Иначе
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", "");
			// ИННПроизводителя
			ДанныеДляЗаполнения.Вставить("ИННПроизводителя", "");
			// КПППроизводителя
			ДанныеДляЗаполнения.Вставить("КПППроизводителя", "");
			// Маркированная продукция
			Если ЗначениеЗаполнено(Источник.ЭтоМаркированнаяПродукция) И Источник.ЭтоМаркированнаяПродукция Тогда
				Если ФорматОбмена = 8 Тогда
					Если Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 2);
					ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 3);
					ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Табак") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 4);
					ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Обувь") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 5);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Фотоаппараты") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 8);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Духи") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 9);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Шины") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 10);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 11);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 12);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 13);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.УпакованнаяВода") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 15);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 16);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Пиво") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 17);
						АлкогольныеРеквизиты = Источник.АлкогольныеРеквизиты;
						Если ЗначениеЗаполнено(АлкогольныеРеквизиты) Тогда
							// Алкоголь
							ДанныеДляЗаполнения.Алкоголь = Ложь;
							// Маркируемый
							ДанныеДляЗаполнения.Маркируемый = Ложь;
							// КодВидаАлкогольнойПродукции
							ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции = АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
							// Емкость тары
							ДанныеДляЗаполнения.ЕмкостьТары = Формат(АлкогольныеРеквизиты.ЕмкостьТары, "ЧДЦ=3; ЧГ=0");
							// Крепость
							ДанныеДляЗаполнения.Крепость = Формат(АлкогольныеРеквизиты.Крепость, "ЧГ=0");
							// ИННПроизводителя
							ДанныеДляЗаполнения.ИННПроизводителя = АлкогольныеРеквизиты.ИННПроизводителя;
							// КПППроизводителя
							ДанныеДляЗаполнения.КПППроизводителя = АлкогольныеРеквизиты.КПППроизводителя;
						КонецЕсли;
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 18);
						ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Истина);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Антисептики") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 20);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.БАДы") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 19);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МедицинскиеИзделия") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 21);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КреслаКоляски") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 22);
						
					Иначе
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 7);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 2);
				КонецЕсли;
			Иначе
				ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 0);
			КонецЕсли;
			Если Не ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") Тогда
				ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
			КонецЕсли;
		КонецЕсли;
		
		МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(Источник.КодЕдиницыИзмерения);
		Если МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 0);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Грамм") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 1);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килограмм") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 2);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Тонна") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 3);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Сантиметр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 4);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Дециметр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 5);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Метр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 6);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйСантиметр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 7);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйДециметр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 8);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйМетр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 9);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Миллилитр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 10);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 11);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КубическийМетр") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 12);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КиловаттЧас") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 13);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигакалория") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 14);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 15);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 15);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Час") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 16);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Минута") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 17);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Секунда") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 18);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килобайт") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 19);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Мегабайт") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 20);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигабайт") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 21);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Терабайт") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 22);
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.ИныеЕдиницыИзмерения") Тогда
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 23);
		Иначе
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 0);
		КонецЕсли; 
		
		Если ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") И ДанныеДляЗаполнения.ЭтоРазливноеПиво Тогда
			ДанныеДляЗаполнения.МераКоличестваПредметаРасчета = 11;
		КонецЕсли;
		
		ДанныеДляЗаполнения.Вставить("КПППроизводителя", "");
		
		// ВесовойТовар
		ДанныеДляЗаполнения.Вставить("ВесовойТовар", Источник.ЭтоВесовойТовар);
		Если Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво")Тогда
			ДанныеДляЗаполнения.ВесовойТовар = Истина;
		КонецЕсли;
		// РазрешитьДробноеКоличество
		ДанныеДляЗаполнения.Вставить("РазрешитьДробноеКоличество", ?(Источник.ЭтоВесовойТовар, "1", "0"));
		// КодВидаНоменклатурнойКлассификации
		ДанныеДляЗаполнения.Вставить("КодВидаНоменклатурнойКлассификации", ИсходнаяСтрока(Источник.КодВидаНоменклатурнойКлассификации, 20));
		
		Если Источник.ИмеетУпаковки Тогда
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
					
					Штрихкод = РазложенныйШтрихкод(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Штрихкод = "";
					Запятая = "";
					
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						
						Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
						Запятая = ",";
						
					КонецЦикла;
					
				Иначе
					
					Штрихкод = "";
				КонецЕсли;
				
				// Штрихкод
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
				
				Если Не ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") Тогда
					ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
				КонецЕсли;
				
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Упаковка");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекУпаковка);
				Параметры.Вставить("БазоваяЕИ", БазоваяЕИ);
				
				ДополнитьФайл(Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		ИначеЕсли Источник.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Источник.Характеристики Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Характеристика");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекХарактеристика);
				Параметры.Вставить("БазоваяЕИ", БазоваяЕИ);
				
				ДополнитьФайл(Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
				
				Штрихкод = РазложенныйШтрихкод(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Штрихкод = "";
				Запятая = "";
				
				Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
					
					Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
					Запятая = ",";
					
				КонецЦикла;
				
			Иначе
				
				Штрихкод = "";
			КонецЕсли;
			
			// Штрихкод
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
			
			Если Не ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") Тогда
				ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
			КонецЕсли;
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
		
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Источник.ИмеетУпаковки Тогда
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ИсходнаяСтрока(Источник.Наименование));
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
					
					Штрихкод = РазложенныйШтрихкод(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Штрихкод = "";
					Запятая = "";
					
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						
						Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
						Запятая = ",";
						
					КонецЦикла;
					
				Иначе
					
					Штрихкод = "";
				КонецЕсли;
				
				// Штрихкод
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0")); 
				
				Если Не ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") Тогда
					ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
				КонецЕсли;
				
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Упаковка");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекУпаковка);
				Параметры.Вставить("БазоваяЕИ", БазоваяЕИ);
				
				ДополнитьФайл(Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ИсходнаяСтрока(Источник.Наименование));
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
			
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
				
				Штрихкод = РазложенныйШтрихкод(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Штрихкод = "";
				Запятая = "";
				
				Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
					
					Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
					Запятая = ",";
					
				КонецЦикла;
				
			Иначе
				
				Штрихкод = "";
			КонецЕсли;
			
			// Штрихкод
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
			Если Не ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") Тогда
				ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
			КонецЕсли;
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", Формат(1, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("НаименованиеУпаковки", ИсходнаяСтрока(Источник.Наименование));
		
		// Код
		ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
		// Цена
		ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧГ=0"));
		// Остаток
		ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
		
		Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
			
			Штрихкод = РазложенныйШтрихкод(Источник.Штрихкоды);
			
		ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
			
			Штрихкод = "";
			Запятая = "";
			
			Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
				
				Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
				Запятая = ",";
				
			КонецЦикла;
			
		Иначе
			
			Штрихкод = "";
		КонецЕсли;
		
		// Штрихкод
		ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
		Если Не ДанныеДляЗаполнения.Свойство("ЭтоРазливноеПиво") Тогда
			ДанныеДляЗаполнения.Вставить("ЭтоРазливноеПиво", Ложь);
		КонецЕсли;
		
		ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, ЭтоГруппа = Ложь)
	
	// ФорматОбмена:
	// 0 - АТОЛ: РМК
	// 1 - Frontol 5
	// 2 - Frontol Win32 v.4.x
	// 3 - Frontol WinCE v.2.x
	// 4 - Frontol xPOS 1.6.x
	// 5 - Frontol xPOS 1.5.x
	// 6 - Frontol xPOS 1.7.x
	// 7 - Frontol xPOS 2.2.x
	// 8 - Frontol 6
	
	Наименование = ДанныеДляЗаполнения.Наименование;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеХарактеристики") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеХарактеристики;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеУпаковки") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеУпаковки;
	КонецЕсли;
	
	МаксимальнаяДлина = 128;
	Если СтрДлина(Наименование) > МаксимальнаяДлина Тогда
		
		Наименование = Сред(Наименование, 1, МаксимальнаяДлина);
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		Строка =
			ДанныеДляЗаполнения.Код + Разделитель												// Код (1)
			+ Разделитель																		// Штрихкод (2)
			+ Наименование + Разделитель														// Наименование (3)
			+ Наименование + Разделитель														// Текст для чека (4)
			+ Разделитель																		// Цена (5)
			+ Разделитель																		// Остаток (6)
			+ Разделитель																		// Код группы условий скидки (7)
			+ Разделитель																		// Флаги через запятую (8)
			+ Разделитель																		// Минимальная цена (9)
			+ Разделитель																		// Срок годности (10)
			+ Разделитель																		// Код схемы разрезов (11)
			+ Разделитель																		// Вариант использования разрезов (12).
			+ Разделитель																		// Признак предмета расчета (13).
			+ Разделитель																		// Коэффициент (14)
			+ Разделитель																		// Код базового товара (15)
			+ ?(ФорматОбмена=0, "", ДанныеДляЗаполнения.КодРодительскойГруппы) + Разделитель	// Код родительской группы (16).
			+ "0" + Разделитель																	// Товар или группа: для товара «1» Товар или группа: для группы «0» (17).
			+ Разделитель																		// Номер уровня иерархического списка (18).
			+ Разделитель																		// Код значения первого разреза схемы с кодом «1» (19).
			+ Разделитель																		// Серия номенклатуры (20)
			+ Разделитель																		// Сертификат (21)
			+ Разделитель																		// Код ККМ (22)
			+ Разделитель																		// Код налоговой группы (23)
			+ Разделитель																		// Код весов с ПЭ (24)
			+ Разделитель																		// Код товара в весах ПЭ (25)
			+ Разделитель																		// Артикул (26)
			+ Разделитель																		// Тип скидки/надбавки: (27)
			+ Разделитель																		// Значение товарной скидки/надбавки (28)
			+ Разделитель																		// Максимальная скидка, % (29)
			+ Разделитель																		// Код принтера чеков (30)
			+ Разделитель																		// Файл *.bmp с картинкой (31)
			+ Разделитель																		// Описание (32)
			+ "";																					// Кратность количества (33)
			
	Иначе
		
		Флаги = 
				?(ДанныеДляЗаполнения.ВесовойТовар, "1", "0") + ","							// Дробное количество (весовой) (8.1)
				+ "1,"																		// Продажа (8.2)
				+ "1,"																		// Возврат (8.3)
				+ ?(ДанныеДляЗаполнения.ЭтоРазливноеПиво, "1", "0") + ","					// Отрицательные остатки / Без ввода количества(8.4)
				+ ?(ФорматОбмена<>3, "0", ?(ДанныеДляЗаполнения.Цена=0, "1", "0")) + ","	// Без ввода количества / Редактирование цены (8.5)
				+ ?(ДанныеДляЗаполнения.ЭтоРазливноеПиво, "1", "0") + ","					// Списание остатков / Ввод количества вручную(8.6)
				+ ?(ФорматОбмена=3, "", ?(ДанныеДляЗаполнения.Цена=0, "1", "0")) + ","		// Редактирование цены / Печать в чеке (8.7)
				+ ?(ФорматОбмена=3, "", "1") + ","											// Ввод количества вручную / Скидки (8.8)
				+ "1,"																		// Печатать в документе (8.9)
				+ "0,"																		// Наливаемый товар (8.10)
				+ "1,"																		// Скидки (8.11)
				+ "0,"																		// Запрос цены (8.12)
				+ "0,"																		// Запрос штрихкода (8.13)
				+ "1,"																		// Округление (8.14)
				+ ?(ДанныеДляЗаполнения.ВесовойТовар, ?(ДанныеДляЗаполнения.ЭтоРазливноеПиво, "0", "1"), "0");			// Деление упаковки (8.15) 
				
		Строка =
			ДанныеДляЗаполнения.Код + Разделитель																// Код (1)
			+ ДанныеДляЗаполнения.Штрихкод + Разделитель														// Штрихкод (2)
			+ Наименование + Разделитель																		// Наименование (3)
			+ Наименование + Разделитель																		// Текст для чека (4)
			+ ДанныеДляЗаполнения.Цена + Разделитель															// Цена (5)
			+ ДанныеДляЗаполнения.Остаток + Разделитель															// Остаток (6)
			+ "" + Разделитель																					// Код группы условий скидки (7)
			+ Флаги + Разделитель																				// Флаги через запятую (8)
			+ "" + Разделитель																					// Минимальная цена (9)
			+ "" + Разделитель																					// Срок годности (10)
			+ "" + Разделитель																					// Код схемы разрезов (11)
			+ "" + Разделитель																					// Вариант использования разрезов (12).
			+ ДанныеДляЗаполнения.ПризнакПредметаРасчета + Разделитель											// Признак предмета расчета (13).
			+ ДанныеДляЗаполнения.Коэффициент + Разделитель														// Коэффициент (14)
			+ "" + Разделитель																					// Код базового товара (15)
			+ ?(ФорматОбмена=0, "", ДанныеДляЗаполнения.КодРодительскойГруппы) + Разделитель					// Код родительской группы (16).
			+ "1" + Разделитель																					// Товар или группа: для товара «1» Товар или группа: для группы «0» (17).
			+ "" + Разделитель																					// Номер уровня иерархического списка (18).
			+ "" + Разделитель																					// Код значения первого разреза схемы с кодом «1» (19).
			+ "" + Разделитель																					// Серия номенклатуры (20)
			+ "" + Разделитель																					// Сертификат (21)
			+ "" + Разделитель																					// Код ККМ (22)
			+ ДанныеДляЗаполнения.КодНалога + Разделитель														// Код налоговой группы (23)
			+ "" + Разделитель																					// Код весов с ПЭ (24)
			+ ?(ДанныеДляЗаполнения.ВесовойТовар И (ФорматОбмена<3 Или ФорматОбмена=8), ДанныеДляЗаполнения.Код, "") + Разделитель	// Код товара в весах ПЭ (25)
			+ ДанныеДляЗаполнения.Артикул + Разделитель															// Артикул (26)
			+ "" + Разделитель																					// Тип скидки/надбавки: (27)
			+ "" + Разделитель																					// Значение товарной скидки/надбавки (28)
			+ "" + Разделитель																					// Максимальная скидка, % (29)
			+ "" + Разделитель																					// Код принтера чеков (30)
			+ "" + Разделитель																					// Файл *.bmp с картинкой (31)
			+ "" + Разделитель																					// Описание (32)
			+ "";																								// Кратность количества (33)
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 ИЛИ ФорматОбмена = 7 Тогда
				
				Строка = Строка + Разделитель
						+ Разделитель																				// Код ценника (34)
						+ Разделитель																				// Тип вознаграждения (35)
						+ Разделитель																				// Значение вознаграждения (36)
						+ Разделитель																				// Номер секции ККМ (37)
						+ Разделитель																				// ГТД (38)
						+ Разделитель																				// Код группы печати чека (39)
						+ Разделитель																				// Код группы печати копии (40)
						+ Разделитель																				// Код группы печати счета (41)
						+ Разделитель																				// Код группы печати марки (42)
						+ Разделитель																				// Код предприятия (43)
						+ Разделитель																				// Не используется (44)
						+ Разделитель																				// Номер сообщения в весах с ПЭ (45)
						+ Разделитель																				// Не используется (46)
						+ Разделитель																				// Значение флага «Визуальный выбор модификаторов при регистрации» (47)
						+ Разделитель																				// Левая граница допустимого суммарного удельного веса модификаторов (48)
						+ Разделитель																				// Правая граница допустимого суммарного удельного веса модификаторов (49)
						+ Разделитель																				// Текстовое сообщение для весов с ПЭ (50)
						+ Разделитель																				// Тип товара (51)
						+ Разделитель																				// Код тарифицируемой услуги (52)
						+ ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + Разделитель								// Код вида алкогольной или спиртосодержащей продукции (53)
						+ ДанныеДляЗаполнения.ЕмкостьТары + Разделитель												// Емкость тары в литрах (54)
						+ ДанныеДляЗаполнения.КодТипаНоменклатуры + Разделитель										// Тип номенклатуры(55)
						+ ?(ДанныеДляЗаполнения.Алкоголь И ДанныеДляЗаполнения.Маркируемый, "0", "1") + Разделитель	// Маркировка алкогольной продукции (56)
						+ ДанныеДляЗаполнения.Крепость + Разделитель												// Крепость алкогольной продукции (57)
						+ "2";																						// Признак способа расчета (58)
						
			ИначеЕсли ФорматОбмена = 8 Тогда
				
				Строка = Строка + Разделитель
						+ Разделитель																				// Код ценника (34)
						+ Разделитель																				// Тип вознаграждения (35)
						+ Разделитель																				// Значение вознаграждения (36)
						+ Разделитель																				// Номер секции ККМ (37)
						+ Разделитель																				// ГТД (38)
						+ Разделитель																				// Код группы печати чека (39)
						+ Разделитель																				// Код группы печати копии (40)
						+ Разделитель																				// Код группы печати счета (41)
						+ Разделитель																				// Код группы печати марки (42)
						+ Разделитель																				// Код предприятия (43)
						+ Разделитель																				// Не используется (44)
						+ Разделитель																				// Номер сообщения в весах с ПЭ (45)
						+ Разделитель																				// Не используется (46)
						+ Разделитель																				// Значение флага «Визуальный выбор модификаторов при регистрации» (47)
						+ Разделитель																				// Левая граница допустимого суммарного удельного веса модификаторов (48)
						+ Разделитель																				// Правая граница допустимого суммарного удельного веса модификаторов (49)
						+ Разделитель																				// Текстовое сообщение для весов с ПЭ (50)
						+ Разделитель																				// Тип товара (51)
						+ Разделитель																				// Код тарифицируемой услуги (52)
						+ ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + Разделитель								// Код вида алкогольной или спиртосодержащей продукции (53)
						+ ДанныеДляЗаполнения.ЕмкостьТары + Разделитель												// Емкость тары в литрах (54)
						+ ДанныеДляЗаполнения.КодТипаНоменклатуры + Разделитель										// Тип номенклатуры(55)
						+ ?(ДанныеДляЗаполнения.Алкоголь И ДанныеДляЗаполнения.Маркируемый, "0", "1") + Разделитель	// Маркировка алкогольной продукции (56)
						+ ДанныеДляЗаполнения.Крепость + Разделитель												// Крепость алкогольной продукции (57)
						+ "2" + Разделитель																			// Признак способа расчета (58)
						+ Разделитель																				// Код реквизитов агента(59)
						+ Разделитель																				// Сумма акциза (60)
						+ Разделитель																				// Код страны происхождения товара(61)
						+ Разделитель																				// Номер таможенной декларации(62)
						+ Разделитель																				// (63)
						+ ДанныеДляЗаполнения.КодВидаНоменклатурнойКлассификации + Разделитель						// Код вида номенклатурной классификации(64)
						+ Разделитель																				// Проверка соответствия товара штрихкоду маркировки(65)
						+ ДанныеДляЗаполнения.МераКоличестваПредметаРасчета;										// Мера количества предмета расчета(66)
			КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ (ФорматОбмена = 0 И ЭтоГруппа) Тогда
		Файл.ДобавитьСтроку(Строка);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает строку для выгрузки.
//
Функция ИсходнаяСтрока(Знач ИсходнаяСтрока, МаксимальнаяДлина=100)
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), Разделитель(), " ");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " ");
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, МаксимальнаяДлина);
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция РазложенныйШтрихкод(Штрихкод)
	
	Штрихкод = СокрЛП(Штрихкод);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель Из СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Штрихкод = СтрЗаменить(СокрЛП(Штрихкод), Разделитель, ",");
	
	Возврат Штрихкод;
	
КонецФункции

// Функция возвращает разделитель полей таблицы содержащейся в файле.
//
Функция Разделитель()
	
	Возврат ";";
	
КонецФункции

// Возвращает массив элементов, найденных в массиве структур по параметрам отбора.
// Параметры отбора являют собой структуру.
// Действует аналогично методу НайтиСтроки таблицы значений.
//
Функция НайтиСтроки(Знач МассивПоиска, ПараметрыОтбора)
	
	Результат = Новый Массив;
	Для ВремИндекс = 0 По МассивПоиска.Количество()-1 Цикл
		
		ЭлементМассива = МассивПоиска[ВремИндекс];
		ПолноеСовпадение = Истина;
		
		Для каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			
			Если ЭлементМассива.Свойство(ЭлементОтбора.Ключ) 
				И НЕ ЭлементОтбора.Значение = ЭлементМассива[ЭлементОтбора.Ключ] Тогда
				ПолноеСовпадение = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолноеСовпадение Тогда
			ЭлементМассива.Вставить("ИндексВМассиве", ВремИндекс);
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

