
#Область ПрограммныйИнтерфейс

// Обработчик двойного щелчка мыши, нажатия клавиши Enter или гиперссылки в табличном документе формы отчета.
//
//Параметры:
// См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента
//
Процедура ОбработкаВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
//
//Параметры:
// 	См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	


	ОтчетыЕГАИСКлиент.ОбработкаРасшифровкиОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	ОтчетыИСМПКлиент.ОбработкаРасшифровкиОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	
	ПолноеИмяОтчета = ФормаОтчета.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ФормаОтчета.КлючТекущегоВарианта;
	Если ПолноеИмяОтчета = "Отчет.КартаПродаж" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуКартыПродажПоРегионам(ФормаОтчета, Расшифровка);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//  см. ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик команд, добавленных динамически и подключенных к обработчику "Подключаемый_Команда".
// Пример добавления команды см. ОтчетыПереопределяемый.ПриСозданииНаСервере.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//   Команда     - КомандаФормы     - Команда, которая была вызвана.
//   Результат   - Булево           - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ФормаОтчета, Команда, Результат) Экспорт
	
	//++ Локализация
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ОтчетСформирован") Тогда
		ОтчетыЕГАИСКлиент.ОбработчикКоманды(ФормаОтчета, Команда, Результат);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация
#Область МенюОтчеты

#Область СверкаРасчетовСПартнерами

Функция СверкаРасчетовСПартнерами(СсылкаНаОбъект, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) <> Тип("Массив") Тогда
		МассивДокументов = Новый Массив();
		МассивДокументов.Добавить(СсылкаНаОбъект);
	Иначе
		МассивДокументов = СсылкаНаОбъект;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СверкаРасчетовСПартнерамиЗавершение", ЭтотОбъект);
	
	УправлениеПечатьюКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, МассивДокументов);
	
КонецФункции

Процедура СверкаРасчетовСПартнерамиЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("СверкаВзаиморасчетов", МассивДокументов));
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СверкаВзаиморасчетов");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	ПараметрыФормы.Вставить("КлючВарианта", "СверкаРасчетовСПартнерамиКонтекст");
		
	ОткрытьФорму("Отчет.СверкаРасчетовСПартнерами.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

// Вызывается для отчета "Карта продаж по регионам"
//
Процедура ОбработатьРасшифровкуКартыПродажПоРегионам(ЭтаФорма, Расшифровка)
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	ПараметрВариантАнализа = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВариантАнализа");
	Если ПараметрВариантАнализа.Значение = 0 Тогда
		КлючВарианта = "РейтингПродажДвухПериодовБизнесРегионы";
	Иначе
		КлючВарианта = "СравнениеВыручкиДвухПериодовБизнесРегионы";
	КонецЕсли;
	
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта",
		КлючВарианта, "Отчет.ПродажиСравнениеДвухПериодов");
	
	КомпоновщикНастроекВариантаОтчета =
		ОтчетыУТВызовСервераПереопределяемый.КомпоновщикНастроекВариантаОтчета(СвойстваВариантаОтчета);
		
	Если КомпоновщикНастроекВариантаОтчета <> Неопределено Тогда
		
		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ПериодОтчета", ПараметрПериодОтчета.Значение);
		ПараметрПериодСравнения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодСравнения");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ПериодСравнения", ПараметрПериодСравнения.Значение);
			
		ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеОтчета");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ДанныеОтчета", ПараметрДанныеОтчета.Значение);
		
		ПользовательскиеНастройкиВариантаОтчета = КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки;
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиВариантаОтчета);
	ПараметрыОтчета.Вставить("КлючВарианта", СвойстваВариантаОтчета.КлючВарианта);
	ПараметрыОтчета.Вставить("КлючНазначенияИспользования", "РасшифровкаКартыПродаж");
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ПродажиСравнениеДвухПериодов.Форма", ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти
//-- Локализация
#КонецОбласти