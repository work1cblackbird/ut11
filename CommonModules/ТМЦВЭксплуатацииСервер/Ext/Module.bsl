////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы ТМЦ в эксплуатации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	ТипДокумента = ТипЗнч(Документ);
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		
	КонецЕсли;
	
	ТМЦВЭксплуатацииЛокализация.ДополнитьПараметрыДляПроведенияДокумента(Параметры, Документ, Свойства);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	ТекстыЗапросов = Новый Соответствие();
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТМЦВЭксплуатации");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СтоимостьТМЦВЭксплуатации");

	ТМЦВЭксплуатацииЛокализация.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ);
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышен оперативный остаток в подразделении %1, на %2 %3'");
		ШаблонСообщенияФизЛицо = НСтр("ru = 'Превышен оперативный остаток в подразделении %1 (физ. лицо %2), на %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТМЦВЭксплуатации Цикл
			
			Строки = Новый Массив;
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика,,
				СтрокаОшибки.Серия);
			Строки.Добавить(СтрШаблон(НСтр("ru = 'Номенклатура: %1'"), ПредставлениеНоменклатуры));

			Если ЗначениеЗаполнено(СтрокаОшибки.ИнвентарныйНомер) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Инв.№: %1'"), СокрЛП(СтрокаОшибки.ИнвентарныйНомер)));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.НаправлениеДеятельности) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Направление деятельности: %1'"), СтрокаОшибки.НаправлениеДеятельности));
			КонецЕсли;

			Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Партия: %1'"), СтрокаОшибки.Партия));
				
			ТекстСообщения = СтрСоединить(Строки, НСтр("ru = ';'"));
			
			Если ЗначениеЗаполнено(СтрокаОшибки.ФизическоеЛицо) Тогда
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщенияФизЛицо, СтрокаОшибки.Подразделение, СтрокаОшибки.ФизическоеЛицо, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			Иначе	
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщения, СтрокаОшибки.Подразделение, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотребление - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//  РежимЗаписи - РежимЗаписиДокумента - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
Процедура ВнутреннееПотребление_ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	
	Справочники.ПартииТМЦВЭксплуатации.ЗаполнитьПартии(Объект, РежимЗаписи);
	
	
КонецПроцедуры


#КонецОбласти


#Область ОбработкаСтрокТабличнойЧасти

// Дополняет методы к выполнению.
// 
// Параметры:
//  МетодыКВыполнению - СписокЗначений из Строка -
Процедура ДополнитьМетодыКВыполнению(МетодыКВыполнению) Экспорт
	
	МетодыКВыполнению.Добавить("ЗаполнитьПризнакиКатегорииЭксплуатации", "ТМЦВЭксплуатацииСервер.ЗаполнитьПризнакиКатегорииЭксплуатации");
	
	
КонецПроцедуры

// Дополняет методы к выполнению.
// 
// Параметры:
//  МетодыКВыполнению - СписокЗначений из Строка -
Процедура ДополнитьМетодыКВыполнениюПакетно(МетодыКВыполнению) Экспорт
	
	МетодыКВыполнению.Добавить("ЗаполнитьПризнакиКатегорииЭксплуатации", "ТМЦВЭксплуатацииСервер.ЗаполнитьПризнакиКатегорииЭксплуатацииПакетно");
	
	
КонецПроцедуры

// Добавляет запросы в пакет запросов для получения данных, необходимых для обработки строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьОписаниеЗапросаПакетнойОбработкиТЧ(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	ДополнитьОписаниеЗапросаОбработкиТЧ_ПризнакиКатегорииЭксплуатации(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения);
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	ТМЦВЭксплуатацииЛокализация.НастроитьВариантыОтчетов(Настройки);

	
КонецПроцедуры

//  См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа 
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	ТМЦВЭксплуатацииЛокализация.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт

	СписокОбъектов.Добавить(Документы.ВводОстатковТМЦВЭксплуатации);

	
КонецПроцедуры

// Определяет список объектов конфигурации, в модулях менеджеров которых предусмотрена процедура 
// ДобавитьКомандыСозданияНаОсновании, формирующая команды создания на основании объектов.
// Синтаксис процедуры ДобавитьКомандыСозданияНаОсновании см. в документации.
//
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных (ОбъектМетаданных) с командами создания на основании.
//
// Пример:
//	Объекты.Добавить(Метаданные.Справочники.Организации);
//   
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт


КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
//
// Параметры:
//  КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//  Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//  ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	
	Набор = Элементы.Добавить();
	Набор.ИмяПредопределенногоНабора = "Документ_ВводОстатковТМЦВЭксплуатации";
	Набор.Ссылка = Новый УникальныйИдентификатор("7a5b4a72-72d0-4dd0-bb39-59f13c226572");
	Набор.Используется = Истина;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Набор, "Наименование",
		"ru = 'Ввод остатков ТМЦ в эксплуатации'", КодыЯзыков); // @НСтр-1
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	
КонецПроцедуры

// Определяет возможен ли учет серий в эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть учетная политика с включенным учетом серий в эксплуатации
Функция ВозможенУчетСерийВЭксплуатации() Экспорт
	
	Результат = Ложь;
	
	
	Возврат Результат;
	
КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	ТМЦВЭксплуатацииЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
	Объекты.Добавить(Метаданные.Документы.ВводОстатковТМЦВЭксплуатации);

	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ВводОстатковТМЦВЭксплуатации.ПолноеИмя(),
		"Дата",
		"ВводОстатков",
		"Организация");
										
	
КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме ВНА с правами на изменение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеНаИзменение(ОписаниеПрофиля) Экспорт
	
	ТМЦВЭксплуатацииЛокализация.ДобавитьРолиДляДоступаКПодсистемеНаИзменение(ОписаниеПрофиля);
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКатегорийЭксплуатации");

	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСтрокТабличнойЧасти

// Заполняет признаки категории эксплуатации в строке.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыСтруктура - Текущая строка.
//  СтруктураДействий - Структура - Структура действий.
//	КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
Процедура ЗаполнитьПризнакиКатегорииЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПризнаков = КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Получить(
		ТекущаяСтрока.КатегорияЭксплуатации);
		
	Если СтруктураПризнаков = Неопределено Тогда
		
		ПараметрыЗаполнения = СтруктураДействий.ЗаполнитьПризнакиКатегорииЭксплуатации;
		Если ПараметрыЗаполнения = Неопределено Тогда
			ПараметрыЗаполнения = ТМЦВЭксплуатацииКлиентСервер.ПараметрыЗаполненияПризнаковКатегорииЭксплуатации();
		КонецЕсли;
		
		Признаки = "ИнвентарныйУчет,УчетПоФизЛицам,
			|УчитыватьВВидеГрупповогоОС,СтатьяКапитализацииСтоимостиОС,
			|СпособПогашенияСтоимостиБУ";
			
		Если ПараметрыЗаполнения.ЗаполнитьСтатьюРасходов Тогда
			Признаки = Признаки + ",СтатьяРасходов";
		КонецЕсли;
			
		Если ПараметрыЗаполнения.ЗаполнитьСрокЭксплуатации Тогда
			Признаки = Признаки + ",СрокЭксплуатации";
		КонецЕсли;
			
		СтруктураПризнаков = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.КатегорияЭксплуатации, Признаки);
		
		Если ПараметрыЗаполнения.ЗаполнитьСтатьюРасходовДляГрупповогоОС
			И СтруктураПризнаков.УчитыватьВВидеГрупповогоОС Тогда
			СтруктураПризнаков.Вставить("СтатьяРасходов", СтруктураПризнаков.СтатьяКапитализацииСтоимостиОС);
		КонецЕсли;
		
		КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(
			ТекущаяСтрока.КатегорияЭксплуатации,
			СтруктураПризнаков);
			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПризнаков);
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения данных по категории эксплуатации
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьОписаниеЗапросаОбработкиТЧ_ПризнакиКатегорииЭксплуатации(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если НЕ ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьПризнакиКатегорииЭксплуатации",
			СтруктураДействий,
			КэшированныеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = СтруктураДействий.ЗаполнитьПризнакиКатегорииЭксплуатации;
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ТМЦВЭксплуатацииКлиентСервер.ПараметрыЗаполненияПризнаковКатегорииЭксплуатации();
	КонецЕсли;

	Признаки = "ИнвентарныйУчет,УчетПоФизЛицам,
		|УчитыватьВВидеГрупповогоОС,СтатьяКапитализацииСтоимостиОС,
		|СпособПогашенияСтоимостиБУ";
		
	Если ПараметрыЗаполнения.ЗаполнитьСтатьюРасходов Тогда
		Признаки = Признаки + ",СтатьяРасходов";
	КонецЕсли;
		
	Если ПараметрыЗаполнения.ЗаполнитьСрокЭксплуатации Тогда
		Признаки = Признаки + ",СрокЭксплуатации";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	&Признаки,
		|	ВЫБОР 
		|		КОГДА &ЗаполнитьСтатьюРасходовДляГрупповогоОС
		|				И СпрКатегорииЭксплуатации.УчитыватьВВидеГрупповогоОС
		|		ТОГДА
		|			СпрКатегорииЭксплуатации.СтатьяКапитализацииСтоимостиОС
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяРасходов
		|ИЗ
		|	ВтИсточникДанных КАК ИсточникДанных
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииЭксплуатации КАК СпрКатегорииЭксплуатации
		|		ПО СпрКатегорииЭксплуатации.Ссылка = ИсточникДанных.КатегорияЭксплуатации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Признаки", Признаки); 
			
	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПризнакиКатегорииЭксплуатации");
	
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить(
		"ЗаполнитьСтатьюРасходовДляГрупповогоОС", 
		ПараметрыЗаполнения.ЗаполнитьСтатьюРасходовДляГрупповогоОС);
		
КонецПроцедуры

// Заполняет признаки категории эксплуатации в строке табличной части используя данные полученные сразу для всех строк.
// 
// Параметры:
//  ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьПризнакиКатегорииЭксплуатацииПакетно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки(
												"ПризнакиКатегорииЭксплуатации", КэшированныеЗначения)[0]);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
