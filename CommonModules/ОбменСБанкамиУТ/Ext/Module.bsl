
#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеДокументов

// Определяет параметры электронного документа по типу владельца, на основании которого он формируется.
//
// Параметры:
//  Источник - ДокументСсылка, ДокументОбъект - объект, на основании которого формируется электронный документ.
//  ПараметрыЭД - Структура - (возвращаемое значение) структура параметров источника, необходимых для определения
//                настроек обмена электронными документами. Содержит поля:
//      * ВидЭД - ПеречислениеСсылка.ВидыЭДОбменСБанками - вид электронного документа, который должен быть сформирован.
//      * Организация - ОпределяемыйТип.Организация - организация, к которой относится Источник.
//      * Банк - ОпределяемыйТип.СправочникБанки - ссылка на банк, в который будет отправлен электронный документ.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	Рубли = Справочники.Валюты.НайтиПоКоду("643");
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если (ТипИсточника = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		Или ТипИсточника = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")) Тогда
		
		Если Источник.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
			
			РеквизитыБанковскогоСчета = РеквизитыБанковскогоСчета(Источник);
			
			Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
				
				Если ЗначениеЗаполнено(РеквизитыБанковскогоСчета.ВалютаДенежныхСредств)
					И РеквизитыБанковскогоСчета.ВалютаДенежныхСредств <> Рубли Тогда
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты;
				Иначе
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ПараметрыЭД, РеквизитыБанковскогоСчета, "Организация, Банк");
				
			Иначе
				
				Если РеквизитыБанковскогоСчета.ИностранныйБанк = Истина
					Или ЗначениеЗаполнено(РеквизитыБанковскогоСчета.ВалютаДенежныхСредств)
						И РеквизитыБанковскогоСчета.ВалютаДенежныхСредств <> Рубли Тогда
					
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты;
					ЗаполнитьЗначенияСвойств(ПараметрыЭД, РеквизитыБанковскогоСчета, "Организация, Банк");
				Иначе
					
					ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
					ЗаполнитьЗначенияСвойств(ПараметрыЭД, РеквизитыБанковскогоСчета, "Организация, Банк");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Источник.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже Тогда
			
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты;
			ЗаполнитьЗначенияСвойств(ПараметрыЭД, РеквизитыБанковскогоСчета(Источник), "Организация, Банк");
		КонецЕсли;
		
	ИначеЕсли (ТипИсточника = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипИсточника = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")) Тогда
		
		Если Источник.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
			ЗаполнитьЗначенияСвойств(ПараметрыЭД, РеквизитыБанковскогоСчета(Источник), "Организация, Банк");
			
		ИначеЕсли Источник.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
			
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
			ЗаполнитьЗначенияСвойств(ПараметрыЭД, РеквизитыБанковскогоСчета(Источник), "Организация, Банк");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПлатежноеПоручение из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеПлатежныхПоручений(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	Для Инд = 1 По МассивСсылок.Количество() Цикл
		ТаблицаСсылок.Добавить();
	КонецЦикла;
	ТаблицаСсылок.ЗагрузитьКолонку(МассивСсылок, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ
	|	ПлатежныеПоручения
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|;"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияВнутренние() + "ОБЪЕДИНИТЬ ВСЕ"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияПереводы()
	;
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПоляЗапроса = Схема.ПакетЗапросов[1].Колонки;
	Для каждого КлючИЗначение Из ИнициализироватьПоляПлатежногоПоручения() Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	
	ДанныеКонтрагентов = ДенежныеСредстваСервер.СведенияОПолучателеПлательщикеПоДокументам(МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПоляПлатежа = ИнициализироватьПоляПлатежногоПоручения();
		ЗаполнитьЗначенияСвойств(ПоляПлатежа, Выборка);
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		ПоляПлатежа["Номер"] = НомерДокумента;
		
		Если ЗначениеЗаполнено(Выборка.КонтрагентБанкНаименованиеРКЦ) Тогда
			ПоляПлатежа["РеквизитыПолучателя_Банк_Наименование"] = Выборка.КонтрагентБанкНаименованиеРКЦ
				+ "//" + Выборка.РеквизитыПолучателя_Банк_Наименование;
		КонецЕсли;
		
		Если ТипЗнч(Выборка.БанковскийСчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
			Обработки.КлиентБанк.ЗаполнитьЗначениеРеквизитаПоДокументу(
				ДанныеКонтрагентов,
				ПоляПлатежа.РеквизитыПолучателя_Наименование,
				Выборка.Ссылка,
				2);
		Иначе
			Обработки.КлиентБанк.ЗаполнитьЗначениеРеквизитаПоДокументу(
				ДанныеКонтрагентов,
				ПоляПлатежа.РеквизитыПолучателя_Наименование,
				Выборка.Ссылка,
				0);
		КонецЕсли;
		
		Обработки.КлиентБанк.ЗаполнитьЗначениеРеквизитаПоДокументу(
			ДанныеКонтрагентов,
			ПоляПлатежа.РеквизитыПолучателя_КПП,
			Выборка.Ссылка,
			1);
		ПоляПлатежа.РеквизитыПолучателя_КПП = ?(ПоляПлатежа.РеквизитыПолучателя_КПП = "",
												"",
												ПоляПлатежа.РеквизитыПолучателя_КПП);
		ПоляПлатежа.РеквизитыПолучателя_ИНН = ?(ПоляПлатежа.РеквизитыПолучателя_ИНН = ""
												И Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо,
												"0",
												ПоляПлатежа.РеквизитыПолучателя_ИНН);
		
		Обработки.КлиентБанк.ЗаполнитьЗначениеРеквизитаПоДокументу(
			ДанныеКонтрагентов,
			ПоляПлатежа.РеквизитыПлательщика_Наименование,
			Выборка.Ссылка,
			4);
		Обработки.КлиентБанк.ЗаполнитьЗначениеРеквизитаПоДокументу(
			ДанныеКонтрагентов,
			ПоляПлатежа.РеквизитыПлательщика_КПП,
			Выборка.Ссылка,
			7);
		
		КлючиКУдалению = Новый Массив;
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого КлючКУдалению Из КлючиКУдалению Цикл
			ПоляПлатежа.Удалить(КлючКУдалению);
		КонецЦикла;
		
		ИндексДокумента = МассивСсылок.Найти(Выборка.Ссылка);
		
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			ЗаполнитьЗначениеРеквизитаВДеревеЭВ(ДанныеДляЗаполнения[ИндексДокумента], КлючИЗначение);
		КонецЦикла;
		
		// Обработка ошибок
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			Выборка.Ссылка, "Номер");	
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
			ДанныеДляЗаполнения[ИндексДокумента], "Номер", ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			Выборка.Ссылка, "ОчередностьПлатежа");			
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
			ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлатежа.Очередность", ПараметрыОбработкиОшибок);

		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			Выборка.Ссылка, "НазначениеПлатежа");			
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
			ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлатежа.НазначениеПлатежа", ПараметрыОбработкиОшибок);			
		
		Если Выборка.БанковскийСчет.РучноеИзменениеРеквизитовБанка Тогда	
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчет, "ГородБанка");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлательщика.Банк.Город", ПараметрыОбработкиОшибок);
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчет.Банк, "Город");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлательщика.Банк.Город", ПараметрыОбработкиОшибок);
		КонецЕсли;			

		Если Выборка.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка Тогда		
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчетКонтрагента, "ГородБанка");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПолучателя.Банк.Город", ПараметрыОбработкиОшибок);
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчетКонтрагента.Банк, "Город");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПолучателя.Банк.Город", ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Поручение на перевод валюты.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПоручениеНаПереводВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеПорученийНаПереводВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	Для Инд = 1 По МассивСсылок.Количество() Цикл
		ТаблицаСсылок.Добавить();
	КонецЦикла;
	ТаблицаСсылок.ЗагрузитьКолонку(МассивСсылок, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ
	|	ПлатежныеПоручения
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|;"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияВнутренние() + "ОБЪЕДИНИТЬ ВСЕ"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияПереводы()
		+ ";" + "
	|ВЫБРАТЬ
	|	ИнструкцииБанку.Инструкция.Код КАК Инструкция,
	|	ИнструкцииБанку.Комментарий    КАК Комментарий,
	|	ИнструкцииБанку.Ссылка         КАК Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.ИнструкцииБанку КАК ИнструкцииБанку
	|ГДЕ
	|	ИнструкцииБанку.Ссылка В (&МассивСсылок)
	|";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПоляЗапроса = Схема.ПакетЗапросов[1].Колонки;
	Для каждого КлючИЗначение Из ИнициализироватьПоляВалютногоПлатежа() Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КИОтветственных = КонтактнаяИнформацияОтветственных(РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ответственный"));
	ФайлыДляПередачиВБанк = ФайлыДляПередачиВБанк(МассивСсылок);
	
	ИнструкцииБанку = РезультатЗапроса[2].Выгрузить();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПоляПлатежа = ИнициализироватьПоляВалютногоПлатежа();
		ЗаполнитьЗначенияСвойств(ПоляПлатежа, Выборка);
		
		Если ЗначениеЗаполнено(ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Страна_Наименование"]) Тогда
			ДанныеСтраныПолучателя = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(, ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Страна_Наименование"]);
			Если ЗначениеЗаполнено(ДанныеСтраныПолучателя) Тогда
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Страна_КодСтраны"] = ДанныеСтраныПолучателя.Код;
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Страна_ISOКод"] = ДанныеСтраныПолучателя.КодАльфа2;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Страна_Наименование"]) Тогда
			ДанныеСтраныПолучателя = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(, ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Страна_Наименование"]);
			Если ЗначениеЗаполнено(ДанныеСтраныПолучателя) Тогда
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Страна_КодСтраны"] = ДанныеСтраныПолучателя.Код;
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Страна_ISOКод"] = ДанныеСтраныПолучателя.КодАльфа2;
			КонецЕсли;
		КонецЕсли;
	
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		ПоляПлатежа["Номер"] = НомерДокумента;
		
		Если ПустаяСтрока(Выборка.ОрганизацияАдресМеждународныйЗначение) И ЗначениеЗаполнено(Выборка.ОрганизацияАдресМеждународныйЗначенияПолей) Тогда
			ЗначенияПолейАдресаОрганизации = Выборка.ОрганизацияАдресМеждународныйЗначенияПолей;
		Иначе
			ЗначенияПолейАдресаОрганизации = Выборка.ОрганизацияАдресМеждународныйЗначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначенияПолейАдресаОрганизации) Тогда
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ЗначенияПолейАдресаОрганизации) Тогда
				ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолейАдресаОрганизации);
				
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Индекс"] = ДанныеАдреса["Индекс"];
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Город"]  =
					РаботаСАдресами.ГородАдресаКонтактнойИнформации(ЗначенияПолейАдресаОрганизации);
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Адрес"]  = ДанныеАдреса["Представление"];
			Иначе
				РезультатыЧтения = Новый Структура;
				XDTOКонтактная = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(
					ЗначенияПолейАдресаОрганизации, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(
					XDTOКонтактная, Перечисления.ТипыКонтактнойИнформации.Адрес);
				НаселенныйПунктДетально = АккомодацияСтруктурыАдреса(ДанныеАдреса);
				
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Индекс"] = НаселенныйПунктДетально["ZIPcode"];
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Город"]  = НаселенныйПунктДетально["city"];
				ПоляПлатежа["РеквизитыПлательщика_АдресСтруктурированный_Адрес"]  =
					НаселенныйПунктДетально["street"] + " " + НаселенныйПунктДетально["streetType"];
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Выборка.КонтрагентАдресМеждународныйЗначение) И ЗначениеЗаполнено(Выборка.КонтрагентАдресМеждународныйЗначенияПолей) Тогда
			ЗначенияПолейАдресаКонтрагента = Выборка.КонтрагентАдресМеждународныйЗначенияПолей;
		Иначе
			ЗначенияПолейАдресаКонтрагента = Выборка.КонтрагентАдресМеждународныйЗначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначенияПолейАдресаКонтрагента) Тогда
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ЗначенияПолейАдресаКонтрагента) Тогда
				ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолейАдресаКонтрагента);
				
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Индекс"] = ДанныеАдреса["Индекс"];
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Город"]  =
					РаботаСАдресами.ГородАдресаКонтактнойИнформации(ЗначенияПолейАдресаКонтрагента);
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Адрес"]  = ДанныеАдреса["Представление"];
			Иначе
				РезультатыЧтения = Новый Структура;
				XDTOКонтактная = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(
					ЗначенияПолейАдресаКонтрагента, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(
					XDTOКонтактная, Перечисления.ТипыКонтактнойИнформации.Адрес);
					
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Индекс"] = НаселенныйПунктДетально["ZIPcode"];
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Город"]  = НаселенныйПунктДетально["city"];
				ПоляПлатежа["РеквизитыПолучателя_АдресСтруктурированный_Адрес"]  =
					НаселенныйПунктДетально["street"] + " " + НаселенныйПунктДетально["streetType"];
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
			ПоляПлатежа["УполномоченныйСотрудник_ФИО"]     = Строка(Выборка.ФизическоеЛицо);
			ПоляПлатежа["УполномоченныйСотрудник_Телефон"] = КИОтветственных.НомераТелефонов.Получить(Выборка.Ответственный);
			ПоляПлатежа["УполномоченныйСотрудник_Email"]   = КИОтветственных.ПочтовыеАдреса.Получить(Выборка.Ответственный);
		КонецЕсли;
		
		Если ПоляПлатежа["РеквизитыПлатежа_ТипКомиссии"] = "SHA"
			Или ПоляПлатежа["РеквизитыПлатежа_ТипКомиссии"] = "OUR" Тогда
			ПоляПлатежа["РеквизитыПлатежа_СчетКомиссии"] = ПоляПлатежа["РеквизитыПлательщика_РасчСчет"];
		КонецЕсли;
		
		КлючиКУдалению = Новый Массив;
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого КлючКУдалению Из КлючиКУдалению Цикл
			ПоляПлатежа.Удалить(КлючКУдалению);
		КонецЦикла;
		
		ИндексДокумента = МассивСсылок.Найти(Выборка.Ссылка);
		
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			ЗаполнитьЗначениеРеквизитаВДеревеЭВ(ДанныеДляЗаполнения[ИндексДокумента], КлючИЗначение);
		КонецЦикла;
		
		ТаблицаКодыИнструкцийБанку = ИнструкцииБанку.Скопировать(Новый Структура("Ссылка", Выборка.Ссылка), "Инструкция, Комментарий");
		Если ТаблицаКодыИнструкцийБанку.Количество() Тогда
			ТаблицаКодыИнструкцийБанку.Колонки["Инструкция"].Имя = "КодИнструкции";
			ТаблицаКодыИнструкцийБанку.Колонки["Комментарий"].Имя = "Описание";
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДляЗаполнения[ИндексДокумента], ТаблицаКодыИнструкцийБанку, "КодыИнструкций");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.КодВалютнойОперации) Тогда
			
			ТаблицаКодыВидовВалютныхОпераций = Новый ТаблицаЗначений;
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("КодВидаВалютнойОперации");
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("Сумма");
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("КодВалюты");
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("ISOКодВалюты");
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("НомерПаспортаСделки");
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("Контракт");
			ТаблицаКодыВидовВалютныхОпераций.Колонки.Добавить("ОжидаемыйСрок");
			
			ЗаполнитьЗначенияСвойств(ТаблицаКодыВидовВалютныхОпераций.Добавить(), Выборка);
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(
				ДанныеДляЗаполнения[ИндексДокумента], ТаблицаКодыВидовВалютныхОпераций, "КодыВидовВалютныхОпераций");
		КонецЕсли;
		
		Если ФайлыДляПередачиВБанк <> Неопределено Тогда
			СтрокиФайлов = ФайлыДляПередачиВБанк.НайтиСтроки(Новый Структура("ВладелецФайла", Выборка.Ссылка));
			Если СтрокиФайлов.Количество() Тогда
				ТаблицаФайлов = ФайлыДляПередачиВБанк.Скопировать(СтрокиФайлов, "ПрисоединенныйФайл");
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДляЗаполнения[ИндексДокумента], ТаблицаФайлов, "ПрисоединенныеФайлы");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное требование.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПлатежноеТребование из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеПлатежныхТребований(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	Для Инд = 1 По МассивСсылок.Количество() Цикл
		ТаблицаСсылок.Добавить();
	КонецЦикла;
	ТаблицаСсылок.ЗагрузитьКолонку(МассивСсылок, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ
	|	ПлатежныеТребования
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.Ссылка ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|;"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеТребованияТретьиЛица() + "ОБЪЕДИНИТЬ ВСЕ"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеТребованияВнутренние()
	;
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПоляЗапроса = Схема.ПакетЗапросов[1].Колонки;
	Для каждого КлючИЗначение Из ИнициализироватьПоляПлатежногоТребования() Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПоляПлатежа = ИнициализироватьПоляПлатежногоТребования();
		ЗаполнитьЗначенияСвойств(ПоляПлатежа, Выборка);
		
		ПоляПлатежа["УсловиеОплаты"] = "1";
		ПоляПлатежа["РеквизитыПлатежа_Очередность"] = 5;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		ПоляПлатежа["Номер"] = НомерДокумента;
		
		КлючиКУдалению = Новый Массив;
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого КлючКУдалению Из КлючиКУдалению Цикл
			ПоляПлатежа.Удалить(КлючКУдалению);
		КонецЦикла;
		
		ИндексДокумента = МассивСсылок.Найти(Выборка.Ссылка);
		
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			ЗаполнитьЗначениеРеквизитаВДеревеЭВ(ДанныеДляЗаполнения[ИндексДокумента], КлючИЗначение);
		КонецЦикла;
		
		// Обработка ошибок
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			Выборка.Ссылка, "Номер");	
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
			ДанныеДляЗаполнения[ИндексДокумента], "Номер", ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			Выборка.Ссылка, "НазначениеПлатежа");			
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
			ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлатежа.НазначениеПлатежа", ПараметрыОбработкиОшибок);			
			
		Если Выборка.БанковскийСчет.РучноеИзменениеРеквизитовБанка Тогда	
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчет, "ГородБанка");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПолучателя.Банк.Город", ПараметрыОбработкиОшибок);
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчет.Банк, "Город");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПолучателя.Банк.Город", ПараметрыОбработкиОшибок);
		КонецЕсли;			

		Если Выборка.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка Тогда		
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчетКонтрагента, "ГородБанка");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлательщика.Банк.Город", ПараметрыОбработкиОшибок);
		Иначе
			ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
				Выборка.БанковскийСчетКонтрагента.Банк, "Город");			
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(
				ДанныеДляЗаполнения[ИндексДокумента], "РеквизитыПлательщика.Банк.Город", ПараметрыОбработкиОшибок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Поручение на продажу валюты
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПоручениеНаПродажуВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеПорученийНаПродажуВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	Для Инд = 1 По МассивСсылок.Количество() Цикл
		ТаблицаСсылок.Добавить();
	КонецЦикла;
	ТаблицаСсылок.ЗагрузитьКолонку(МассивСсылок, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ
	|	ПлатежныеПоручения
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|;"
		+ Обработки.КлиентБанк.ТекстЗапросаКонвертацияВалюты();
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПоляЗапроса = Схема.ПакетЗапросов[1].Колонки;
	Для каждого КлючИЗначение Из ИнициализироватьПоляПорученияНаПродажуВалюты() Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	
	КИОтветственных = КонтактнаяИнформацияОтветственных(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ответственный"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПоляПлатежа = ИнициализироватьПоляПорученияНаПродажуВалюты();
		ЗаполнитьЗначенияСвойств(ПоляПлатежа, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
			ПоляПлатежа["УполномоченныйСотрудник_ФИО"]     = Строка(Выборка.ФизическоеЛицо);
			ПоляПлатежа["УполномоченныйСотрудник_Телефон"] = КИОтветственных.НомераТелефонов.Получить(Выборка.Ответственный);
		КонецЕсли;
		
		Если ПоляПлатежа["РеквизитыСписания_Банк_БИК"] = ПоляПлатежа["РеквизитыЗачисления_Банк_БИК"] Тогда
			ПоляПлатежа["РеквизитыЗачисления_ТипЗачисления"] = "0";
		Иначе
			ПоляПлатежа["РеквизитыЗачисления_ТипЗачисления"] = "1";
		КонецЕсли;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		ПоляПлатежа["Номер"] = НомерДокумента;
		
		КлючиКУдалению = Новый Массив;
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого КлючКУдалению Из КлючиКУдалению Цикл
			ПоляПлатежа.Удалить(КлючКУдалению);
		КонецЦикла;
		
		ИндексДокумента = МассивСсылок.Найти(Выборка.Ссылка);
		
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			ЗаполнитьЗначениеРеквизитаВДеревеЭВ(ДанныеДляЗаполнения[ИндексДокумента], КлючИЗначение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Поручение на покупку валюты
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета ПоручениеНаПокупкуВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеПорученийНаПокупкуВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	Для Инд = 1 По МассивСсылок.Количество() Цикл
		ТаблицаСсылок.Добавить();
	КонецЦикла;
	ТаблицаСсылок.ЗагрузитьКолонку(МассивСсылок, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ
	|	ПлатежныеПоручения
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|;"
		+ Обработки.КлиентБанк.ТекстЗапросаКонвертацияВалюты();
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	ПоляЗапроса = Схема.ПакетЗапросов[1].Колонки;
	Для каждого КлючИЗначение Из ИнициализироватьПоляПорученияНаПокупкуВалюты() Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	
	КИОтветственных = КонтактнаяИнформацияОтветственных(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ответственный"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПоляПлатежа = ИнициализироватьПоляПорученияНаПокупкуВалюты();
		ЗаполнитьЗначенияСвойств(ПоляПлатежа, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
			ПоляПлатежа["УполномоченныйСотрудник_ФИО"]     = Строка(Выборка.ФизическоеЛицо);
			ПоляПлатежа["УполномоченныйСотрудник_Телефон"] = КИОтветственных.НомераТелефонов.Получить(Выборка.Ответственный);
		КонецЕсли;
		
		ПоляПлатежа["РеквизитыСписания_ТипСписания"] = "0";
		Если ПоляПлатежа["РеквизитыСписания_Банк_БИК"] = ПоляПлатежа["РеквизитыЗачисления_Банк_БИК"] Тогда
			ПоляПлатежа["РеквизитыЗачисления_ТипЗачисления"] = "0";
		Иначе
			ПоляПлатежа["РеквизитыЗачисления_ТипЗачисления"] = "1";
		КонецЕсли;
		
		ПоляПлатежа["ИсточникСредствНаПокупку_Счет_СчетСписания_НомерСчета"]        = ПоляПлатежа["РеквизитыСписания_НомерСчета"];
		ПоляПлатежа["ИсточникСредствНаПокупку_Счет_СчетСписания_БИК"]               = ПоляПлатежа["РеквизитыСписания_Банк_БИК"];
		ПоляПлатежа["ИсточникСредствНаПокупку_Счет_СчетСписания_НаименованиеБанка"] = ПоляПлатежа["РеквизитыСписания_Банк_Наименование"];
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		ПоляПлатежа["Номер"] = НомерДокумента;
		
		КлючиКУдалению = Новый Массив;
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого КлючКУдалению Из КлючиКУдалению Цикл
			ПоляПлатежа.Удалить(КлючКУдалению);
		КонецЦикла;
		
		ИндексДокумента = МассивСсылок.Найти(Выборка.Ссылка);
		
		РеквизитыСписания = Новый ТаблицаЗначений;
		РеквизитыСписания.Добавить();
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДляЗаполнения[ИндексДокумента], РеквизитыСписания, "РеквизитыСписания");
		
		РеквизитыЗачисления = Новый ТаблицаЗначений;
		РеквизитыЗачисления.Добавить();
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДляЗаполнения[ИндексДокумента], РеквизитыЗачисления, "РеквизитыЗачисления");
		
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			ЗаполнитьЗначениеРеквизитаВДеревеЭВ(ДанныеДляЗаполнения[ИндексДокумента], КлючИЗначение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Распоряжение на обязательную продажу валюты
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета РаспоряжениеНаОбязательнуюПродажуВалюты из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеРаспоряженийНаОбязательнуюПродажуВалюты(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	Для Инд = 1 По МассивСсылок.Количество() Цикл
		ТаблицаСсылок.Добавить();
	КонецЦикла;
	ТаблицаСсылок.ЗагрузитьКолонку(МассивСсылок, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ
	|	ПлатежныеПоручения
	|ИЗ
	|	&ТаблицаСсылок КАК ТаблицаСсылок
	|ГДЕ
	|	ТаблицаСсылок.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|;"
		+ Обработки.КлиентБанк.ТекстЗапросаПлатежныеПорученияПереводы();
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	Пакет = Схема.ПакетЗапросов[1];
	Оператор = Пакет.Операторы[0];
	Оператор.ВыбираемыеПоля.Добавить("ДанныеДокумента.УведомлениеОЗачисленииВалюты.БанковскийСчет.Банк.Наименование");
	Оператор.ВыбираемыеПоля.Добавить("ДанныеДокумента.УведомлениеОЗачисленииВалюты.НомерПоБанку");
	Оператор.ВыбираемыеПоля.Добавить("ДанныеДокумента.УведомлениеОЗачисленииВалюты.ДатаПоступления");
	Оператор.ВыбираемыеПоля.Добавить("ДанныеДокумента.УведомлениеОЗачисленииВалюты.СуммаДокумента");
	Оператор.ВыбираемыеПоля.Добавить("ДанныеДокумента.УведомлениеОЗачисленииВалюты.Валюта.Код");
	Оператор.ВыбираемыеПоля.Добавить("ДанныеДокумента.УведомлениеОЗачисленииВалюты.Валюта.Наименование");
	
	ПоляЗапроса = Пакет.Колонки;
	Для каждого КлючИЗначение Из ИнициализироватьПоляРаспоряженияНаОбязательнуюПродажуВалюты() Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ПолеЗапроса = ПоляЗапроса.Найти(КлючИЗначение.Значение);
			Если ПолеЗапроса <> Неопределено Тогда
				ПолеЗапроса.Псевдоним = КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	
	КИОтветственных = КонтактнаяИнформацияОтветственных(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ответственный"));
	ФайлыДляПередачиВБанк = ФайлыДляПередачиВБанк(МассивСсылок);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПоляПлатежа = ИнициализироватьПоляРаспоряженияНаОбязательнуюПродажуВалюты();
		ЗаполнитьЗначенияСвойств(ПоляПлатежа, Выборка);
		
		ПоляПлатежа["Вычет_КодВалюты"] = ПоляПлатежа["ОбщаяСуммаПоступившихСредств_КодВалюты"];
		ПоляПлатежа["Вычет_ISOКодВалюты"] = ПоляПлатежа["ОбщаяСуммаПоступившихСредств_ISOКодВалюты"];
		ПоляПлатежа["ОбязательнаяПродажа_КодВалюты"] = ПоляПлатежа["ОбщаяСуммаПоступившихСредств_КодВалюты"];
		ПоляПлатежа["ОбязательнаяПродажа_ISOКодВалюты"] = ПоляПлатежа["ОбщаяСуммаПоступившихСредств_ISOКодВалюты"];
		
		Если ЗначениеЗаполнено(Выборка.Ответственный) Тогда
			ПоляПлатежа["УполномоченныйСотрудник_ФИО"]     = Строка(Выборка.ФизическоеЛицо);
			ПоляПлатежа["УполномоченныйСотрудник_Телефон"] = КИОтветственных.НомераТелефонов.Получить(Выборка.Ответственный);
		КонецЕсли;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Истина, Истина);
		ПоляПлатежа["Номер"] = НомерДокумента;
		
		КлючиКУдалению = Новый Массив;
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) И КлючИЗначение.Значение <> 0 Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого КлючКУдалению Из КлючиКУдалению Цикл
			ПоляПлатежа.Удалить(КлючКУдалению);
		КонецЦикла;
		
		ИндексДокумента = МассивСсылок.Найти(Выборка.Ссылка);
		
		Для каждого КлючИЗначение Из ПоляПлатежа Цикл
			ЗаполнитьЗначениеРеквизитаВДеревеЭВ(ДанныеДляЗаполнения[ИндексДокумента], КлючИЗначение);
		КонецЦикла;
		
		Если ФайлыДляПередачиВБанк <> Неопределено Тогда
			СтрокиФайлов = ФайлыДляПередачиВБанк.НайтиСтроки(Новый Структура("ВладелецФайла", Выборка.Ссылка));
			Если СтрокиФайлов.Количество() Тогда
				ТаблицаФайлов = ФайлыДляПередачиВБанк.Скопировать(СтрокиФайлов, "ПрисоединенныйФайл");
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДанныеДляЗаполнения[ИндексДокумента], ТаблицаФайлов, "ПрисоединенныеФайлы");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Справка о подтверждающих документах
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылки на документы информационной базы, на основании которых будут созданы электронные документы.
//  ДанныеДляЗаполнения - Массив - содержит пустые деревья значений, которые необходимо заполнить данными.
//           Дерево значений повторяет структуру макета СправкаОПодтверждающихДокументах из обработки ОбменСБанками.
//           Если по какому-либо документу не удалось получить данные, то текст ошибки необходимо поместить вместо дерева значений.
//
Процедура ЗаполнитьДанныеСправокОПодтверждающихДокументах(МассивСсылок, ДанныеДляЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.СправкаОПодтверждающихДокументах
	|ГДЕ
	|	Ссылка В (&МассивСсылок)
	|";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		
		
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при получении выписки из регламентного задания или при синхронизации
//
// Параметры:
//  ЭлектроннаяВыпискаБанка - ДокументСсылка.СообщениеОбменСБанками - ссылка на сообщение обмена, содержащий выписку банка.
//
Процедура ПриПолученииВыписки(ЭлектроннаяВыпискаБанка) Экспорт
	
	ДенежныеСредстваСерверЛокализация.РазобратьВыпискуБанка(ЭлектроннаяВыпискаБанка);
	
КонецПроцедуры

#КонецОбласти

// Вызывается при получении уведомления о зачислении валюты
//
// Параметры:
//  ДеревоРазбора - ДеревоЗначений - дерево данных, соответствующее макету Обработки.ОбменСБанками.УведомлениеОЗачислении
//  НовыйДокументСсылка - ДокументСсылка - ссылка на созданный документ на основании данных электронного документа.
//
Процедура ПриПолученииУведомленияОЗачислении(ДеревоРазбора, НовыйДокументСсылка) Экспорт
	
	ПоляПлатежа = ИнициализироватьПоляУведомленияОЗачисленииВалюты();
	
	Для каждого КлючИЗначение Из ПоляПлатежа Цикл
		Ключ = СтрЗаменить(КлючИЗначение.Ключ, "_", ".");
		СтрокаДерева = ЭлектронноеВзаимодействие.СтрокаДерева(ДеревоРазбора, Ключ, Истина);
		Если СтрокаДерева <> Неопределено Тогда
			ПоляПлатежа[КлючИЗначение.Ключ] = СтрокаДерева.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ПоляПлатежа["РеквизитыПолучателя_ИНН"]);
	БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.НайтиПоРеквизиту(
		"НомерСчета", ПоляПлатежа["РеквизитыПолучателя_РасчСчет"],, Организация);
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(БанковскийСчет) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОЗачисленииВалюты КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.НомерПоБанку = &Номер
		|	И ДанныеДокумента.Организация = &Организация
		|	И ДанныеДокумента.БанковскийСчет = &БанковскийСчет
		|";
		
		Запрос.УстановитьПараметр("Номер", ПоляПлатежа["Номер"]);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ДокументОбъект = Документы.УведомлениеОЗачисленииВалюты.СоздатьДокумент();
		Иначе
			ДокументОбъект = Результат.Выгрузить()[0].Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		ДокументОбъект.Дата                                  = ПоляПлатежа["Дата"];
		ДокументОбъект.НомерПоБанку                          = ПоляПлатежа["Номер"];
		ДокументОбъект.БанковскийСчет                        = БанковскийСчет;
		ДокументОбъект.Организация                           = Организация;
		ДокументОбъект.ДатаПоступления                       = ПоляПлатежа["ДатаПоступленияСредств"];
		ДокументОбъект.СрокПредоставленияДокументов          = ПоляПлатежа["СрокПредоставленияДокументов"];
		ДокументОбъект.СуммаДокумента                        = ПоляПлатежа["Сумма"];
		ДокументОбъект.Валюта                                = ?(ЗначениеЗаполнено(ПоляПлатежа["ISOКодВалюты"]),
			Справочники.Валюты.НайтиПоНаименованию(ПоляПлатежа["ISOКодВалюты"]),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств"));
		ДокументОбъект.СообщениеИзБанка                      = ПоляПлатежа["ТекстСообщения"];
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументСсылка = ДокументОбъект.Ссылка;
		Исключение
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(НСтр("ru = '%1
				|Произошли ошибки при проведении!'"), ОписаниеОшибки.Описание);
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Данные.Проведение'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект.Метаданные(),
				ДокументОбъект.Ссылка,
				ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при изменении состояния электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - владелец электронного документа;
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - новое состояние электронного документооборота.
//
Процедура ПриИзмененииСостоянияЭД(СсылкаНаОбъект, СостояниеЭД) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		Или СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		Или СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		Или СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение
		Или СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		Или СостояниеЭД = Перечисления.СостоянияОбменСБанками.ПлатежИсполнен Тогда
		
		Платежи = Новый Массив;
		Платежи.Добавить(СсылкаНаОбъект);
		ДенежныеСредстваСервер.ЗаписатьДатуВыгрузкиПлатежей(Платежи, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

//++ Локализация

// Создает файл реестра для зачисления денежных средств и прикрепляет его к документу.
//
// Параметры:
//  ВладелецФайла - ДокументСсылка - ссылка на документ, к которому будет прикреплен файл.
//  ДанныеДокумента - Структура - коллекция полей документа.
//  СтруктураПараметров - Структура:
//    * ВидОперации - Строка - выполняемая операция
//    * МассивОписанийФайлов - Массив из Структура - массив описаний сформированных файлов.
//    * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция документов.
//    * НастройкиОбменаСБанком - Соответствие из КлючИЗначение - параметры обмена с банком по документам.
//
Процедура СоздатьФайлРеестраОбменаСБанком(ВладелецФайла, ДанныеДокумента, СтруктураПараметров) Экспорт
	
	АдресФайла = "";
	Файл = Новый Структура("АдресФайла, ДвоичныеДанные");
	
	Если СтруктураПараметров.ВидОперации = "ОплатаСамозанятому" Тогда
		
		ВыгрузкаФорматаСбербанк = Ложь;
		
		Если СтруктураПараметров.Свойство("НастройкиОбменаСБанком") Тогда
			
			ЭтоСчетСбербанка = СтруктураПараметров.НастройкиОбменаСБанком.Получить(ВладелецФайла);
			
			Если ЭтоСчетСбербанка <> Неопределено Тогда
				ВыгрузкаФорматаСбербанк = ЭтоСчетСбербанка;
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		Если ВыгрузкаФорматаСбербанк Тогда
			
			ТекстовыйДокумент = РеестрВыплатСамозанятымВФорматеТекста(ДанныеДокумента.Реестр);
			ТекстовыйДокумент.Записать(ИмяВременногоФайла, "utf-8");
			
		Иначе
			
			ТабличныйДокумент = РеестрВыплатСамозанятым(ДанныеДокумента.Реестр);
			ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
			
		КонецЕсли;
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		
		ДанныеДокумента.ИмяФайла = СтрШаблон(
			НСтр("ru = '%1.%2'"), ДанныеДокумента.ИмяФайла, ?(ВыгрузкаФорматаСбербанк, "csv", "xls"));
		
	Иначе
		
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		Иначе
			
			ТекстXML = РеестрЗачисленияДенежныхСредствХML(ДанныеДокумента, СтруктураПараметров.ВидОперации);
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстXML);
			ТекстовыйДокумент.Записать(ИмяВременногоФайла, ДанныеДокумента.КодировкаФайла);
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
			АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Файл.АдресФайла = АдресФайла;
	Файл.ДвоичныеДанные = ДвоичныеДанныеФайла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФайла = Новый Структура(
		"Автор,
		|ВладелецФайлов,
		|ИмяБезРасширения,
		|РасширениеБезТочки,
		|ВремяИзменения,
		|ВремяИзмененияУниверсальное");
		
	ПараметрыФайла.ВладелецФайлов = ВладелецФайла;
	ПараметрыФайла.ИмяБезРасширения = Лев(ДанныеДокумента.ИмяФайла, СтрДлина(ДанныеДокумента.ИмяФайла) - 4);
	ПараметрыФайла.РасширениеБезТочки = Прав(ДанныеДокумента.ИмяФайла, 3);
	
	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Файл.АдресФайла);
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = СтруктураПараметров.УникальныйИдентификаторФормы;
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
	
	ОписаниеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
	ОписаниеФайла.Вставить("ВладелецФайла", ВладелецФайла);
	ОписаниеФайла.Вставить("Ссылка", ПрисоединенныйФайл);
	ОписаниеФайла.Вставить("ДвоичныеДанные", Файл.ДвоичныеДанные);
	СтруктураПараметров.МассивОписанийФайлов.Добавить(ОписаниеФайла);
	
	УдалитьИзВременногоХранилища(АдресФайла);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает структуру данных для создания документа "Зачисление ДС на лицевые счета" по данным чтения файла XDTO.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - объект типа XDTO для считывания данных
// 
// Возвращаемое значение:
//  Структура - Данные подтверждения зачисления из XDTO:
// * Организация - СправочникСсылка.Организации - организация из первичного документа
// * ЗарплатныйПроект - СправочникСсылка.ЗарплатныеПроекты - зарплатный проект из первичного документа
// * Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение из первичного документа
// * ПервичныйДокумент - Неопределено, ДокументСсылка.СписаниеБезналичныхДенежныхСредств - платежный документ из объекта XDTO
// * Сотрудники - ТаблицаЗначений - таблица сотрудников из объекта XDTO:
// ** ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - ссылка сотрудника на справочник
Функция ДанныеПодтвержденияЗачисленияИзXDTO(ОбъектXDTO) Экспорт
	
	СтруктураЗаполнения = СтруктураФайлаXDTO("ПодтверждениеЗачисленияЗарплаты");
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоЗарплатнымПроектам.ПространствоИмен);
	ТипОбъектаXDTO = Пакет.КорневыеСвойства[0].Тип;
	ИсточникXDTO = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
	
	ДанныеЗаполнения = Новый Структура;
	ЗаполнитьДанныеИзXDTOПоСтруктуре(ОбъектXDTO, ИсточникXDTO, СтруктураЗаполнения, ДанныеЗаполнения);
	
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	ПервичныйДокументСсылка = ДенежныеСредстваСерверЛокализация.ПервичныйДокументПоИдентификатору(
		ДанныеЗаполнения.ИдентификаторПервичногоДокумента);
	ДанныеЗаполнения.Вставить("ПервичныйДокумент", ?(ПервичныйДокументСсылка.Пустая(), Неопределено, ПервичныйДокументСсылка));
	
	Если Не (ЗначениеЗаполнено(ДанныеЗаполнения.РасчетныйСчетОрганизации)
		И ПервичныйДокументСсылка.Пустая()) Тогда
		Если ПервичныйДокументСсылка.Метаданные().Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ДанныеЗаполнения.РасчетныйСчетОрганизации = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокументСсылка, "БанковскийСчет.НомерСчета");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ПервичныйДокумент) Тогда
		
		ПолучаемыеРеквизиты = "Организация";
				
		МетаданныеПервичногоДокумента = ДанныеЗаполнения.ПервичныйДокумент.Метаданные();
		ЕстьРеквизитЗарплатныйПроект = МетаданныеПервичногоДокумента.Реквизиты.Найти("ЗарплатныйПроект") <> Неопределено;
		
		Если ЕстьРеквизитЗарплатныйПроект Тогда
			ПолучаемыеРеквизиты = СтрШаблон("%1, ЗарплатныйПроект", ПолучаемыеРеквизиты);
		КонецЕсли;
		
		ЕстьРеквизитПодразделения = МетаданныеПервичногоДокумента.Реквизиты.Найти("Подразделение") <> Неопределено;
		
		Если ЕстьРеквизитПодразделения Тогда
			ПолучаемыеРеквизиты = СтрШаблон("%1, Подразделение", ПолучаемыеРеквизиты);
		КонецЕсли;
		
		СтруктураДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ПервичныйДокумент, ПолучаемыеРеквизиты);
		ДанныеЗаполнения.Вставить("Организация", СтруктураДокумента.Организация);
		
		Если ЕстьРеквизитЗарплатныйПроект Тогда
			ДанныеЗаполнения.Вставить("ЗарплатныйПроект", СтруктураДокумента.ЗарплатныйПроект);
		Иначе
			
			
		КонецЕсли;
		
		Если ЕстьРеквизитПодразделения Тогда
			ДанныеЗаполнения.Вставить("Подразделение", СтруктураДокумента.Подразделение);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Сотрудники", ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ДанныеЗаполнения.Сотрудник));
	Сотрудники = ДанныеЗаполнения.Сотрудники;
	Сотрудники.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ТаблицаФизическиеЛица = ДенежныеСредстваСерверЛокализация.ФизическиеЛицаЛицевыхСчетов(Сотрудники);
	
	Для каждого СтрокаТаблицы Из Сотрудники Цикл
	
		ИскомаяСтрока = ТаблицаФизическиеЛица.Найти(СтрокаТаблицы.НомерСтроки, "НомерСтроки");
		
		Если ИскомаяСтрока <> Неопределено Тогда
			СтрокаТаблицы.ФизическоеЛицо = ИскомаяСтрока.ФизическоеЛицо;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаписатьУзелXML(ЧтениеXML, ЗаписьXML, ДесятичныеСвойства) Экспорт
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
		ИмяЭлемента = ЧтениеXML.Имя;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		
		Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, XMLСтрока(ЧтениеXML.Значение));
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		
		ЗначениеЭлемента = ДесятичныеСвойства.Получить(ИмяЭлемента);
		
		Если ЗначениеЭлемента = Неопределено Тогда
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЧтениеXML.Значение));
		Иначе
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(Формат(Число(ЧтениеXML.Значение), ЗначениеЭлемента)));
		КонецЕсли;
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, XMLСтрока(ЧтениеXML.Значение));
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область СлужебныеФункции

Функция РеквизитыБанковскогоСчета(Источник)
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник));
	
	Если ЭтоСсылка Тогда
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "БанковскийСчет");
	Иначе
		БанковскийСчет = Источник.БанковскийСчет;
	КонецЕсли;
	
	ПоляБанковскогоСчета = Новый Структура;
	ПоляБанковскогоСчета.Вставить("Банк");
	ПоляБанковскогоСчета.Вставить("Организация", "Владелец");
	ПоляБанковскогоСчета.Вставить("ИностранныйБанк");
	ПоляБанковскогоСчета.Вставить("ВалютаДенежныхСредств");
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, ПоляБанковскогоСчета);
	
КонецФункции

Функция ИнициализироватьПоляПлатежногоПоручения()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("РеквизитыПолучателя_Наименование",       "КонтрагентНаименованиеСокращенное");
	Поля.Вставить("РеквизитыПолучателя_ИНН",                "КонтрагентИНН");
	Поля.Вставить("РеквизитыПолучателя_КПП",                "КонтрагентКПП");
	Поля.Вставить("РеквизитыПолучателя_РасчСчет",           "КонтрагентРасчСчет");
	
	Поля.Вставить("РеквизитыПолучателя_Банк_БИК",           "КонтрагентБИКБанка");
	Поля.Вставить("РеквизитыПолучателя_Банк_Наименование",  "КонтрагентБанк");
	Поля.Вставить("РеквизитыПолучателя_Банк_Город",         "КонтрагентГородБанка");
	Поля.Вставить("РеквизитыПолучателя_Банк_КоррСчет",      "КонтрагентКоррСчетБанка");
	
	Поля.Вставить("РеквизитыПлательщика_Наименование",      "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("РеквизитыПлательщика_ИНН",               "ОрганизацияИНН");
	Поля.Вставить("РеквизитыПлательщика_КПП",               "ОрганизацияКПП");
	Поля.Вставить("РеквизитыПлательщика_РасчСчет",          "ОрганизацияРасчСчет");
	
	Поля.Вставить("РеквизитыПлательщика_Банк_БИК",          "ОрганизацияБИКБанка");
	Поля.Вставить("РеквизитыПлательщика_Банк_Наименование", "ОрганизацияБанк");
	Поля.Вставить("РеквизитыПлательщика_Банк_Город",        "ОрганизацияГородБанка");
	Поля.Вставить("РеквизитыПлательщика_Банк_КоррСчет",     "ОрганизацияКоррСчетБанка");
	
	Поля.Вставить("РеквизитыПлатежа_ВидПлатежа",            "ВидПлатежа");
	Поля.Вставить("РеквизитыПлатежа_Очередность",           "ОчередностьПлатежа");
	Поля.Вставить("РеквизитыПлатежа_Код",                   "Код");
	Поля.Вставить("РеквизитыПлатежа_НазначениеПлатежа",     "НазначениеПлатежа");
	Поля.Вставить("РеквизитыПлатежа_КодВидаДохода",         "КодВидаДохода");
	
	Поля.Вставить("ПлатежиВБюджет_СтатусСоставителя",       "СтатусСоставителя");
	Поля.Вставить("ПлатежиВБюджет_ПоказательКБК",           "КодБК");
	Поля.Вставить("ПлатежиВБюджет_ОКТМО",                   "КодОКАТО");
	Поля.Вставить("ПлатежиВБюджет_ПоказательОснования",     "ПоказательОснования");
	Поля.Вставить("ПлатежиВБюджет_ПоказательПериода",       "ПоказательПериода");
	Поля.Вставить("ПлатежиВБюджет_ПоказательНомера",        "ПоказательНомера");
	Поля.Вставить("ПлатежиВБюджет_ПоказательДаты",          "ПоказательДаты");
	Поля.Вставить("ПлатежиВБюджет_КодВыплат",               "КодВыплат");
	
	Возврат Поля;
	
КонецФункции

Функция ИнициализироватьПоляПлатежногоТребования()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("РеквизитыПолучателя_Наименование",       "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("РеквизитыПолучателя_ИНН",                "ОрганизацияИНН");
	Поля.Вставить("РеквизитыПолучателя_КПП",                "ОрганизацияКПП");
	Поля.Вставить("РеквизитыПолучателя_РасчСчет",           "ОрганизацияРасчСчет");
	
	Поля.Вставить("РеквизитыПолучателя_Банк_БИК",           "ОрганизацияБИКБанка");
	Поля.Вставить("РеквизитыПолучателя_Банк_Наименование",  "ОрганизацияБанк");
	Поля.Вставить("РеквизитыПолучателя_Банк_Город",         "ОрганизацияГородБанка");
	Поля.Вставить("РеквизитыПолучателя_Банк_КоррСчет",      "ОрганизацияКоррСчетБанка");
	
	Поля.Вставить("РеквизитыПлательщика_Наименование",      "КонтрагентНаименованиеСокращенное");
	Поля.Вставить("РеквизитыПлательщика_ИНН",               "КонтрагентИНН");
	Поля.Вставить("РеквизитыПлательщика_КПП",               "КонтрагентКПП");
	Поля.Вставить("РеквизитыПлательщика_РасчСчет",          "КонтрагентРасчСчет");
	
	Поля.Вставить("РеквизитыПлательщика_Банк_БИК",          "КонтрагентБИКБанка");
	Поля.Вставить("РеквизитыПлательщика_Банк_Наименование", "КонтрагентБанк");
	Поля.Вставить("РеквизитыПлательщика_Банк_Город",        "КонтрагентГородБанка");
	Поля.Вставить("РеквизитыПлательщика_Банк_КоррСчет",     "КонтрагентКоррСчетБанка");
	
	Поля.Вставить("РеквизитыПлатежа_ВидПлатежа",            "ВидПлатежа");
	Поля.Вставить("РеквизитыПлатежа_Очередность",           "ОчередностьПлатежа");
	Поля.Вставить("РеквизитыПлатежа_Код",                   "Код");
	Поля.Вставить("РеквизитыПлатежа_НазначениеПлатежа",     "НазначениеПлатежа");
	Поля.Вставить("РеквизитыПлатежа_КодВидаДохода",         "КодВидаДохода");
	
	Поля.Вставить("УсловиеОплаты");
	
	Возврат Поля;
	
КонецФункции

Функция ИнициализироватьПоляВалютногоПлатежа()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("РеквизитыПолучателя_Наименование", "КонтрагентНаименованиеСокращенное");
	Поля.Вставить("РеквизитыПолучателя_НаименованиеМеждународное", "КонтрагентНаименованиеМеждународное");
	Поля.Вставить("РеквизитыПолучателя_ИНН", "КонтрагентИНН");
	Поля.Вставить("РеквизитыПолучателя_РасчСчет", "КонтрагентРасчСчет");
	Поля.Вставить("РеквизитыПолучателя_АдресСтруктурированный_Страна_КодСтраны");
	Поля.Вставить("РеквизитыПолучателя_АдресСтруктурированный_Страна_ISOКод");
	Поля.Вставить("РеквизитыПолучателя_АдресСтруктурированный_Страна_Наименование", "КонтрагентСтрана");
	Поля.Вставить("РеквизитыПолучателя_АдресСтруктурированный_Город", "КонтрагентГород");
	Поля.Вставить("РеквизитыПолучателя_АдресСтруктурированный_Адрес");
	Поля.Вставить("РеквизитыПолучателя_АдресСтруктурированный_Индекс");
	Поля.Вставить("РеквизитыПолучателя_АдресПроизвольный", "КонтрагентАдресМеждународный");
	
	Поля.Вставить("РеквизитыПолучателя_Банк_КоррСчет", "КонтрагентСчетВБанкеДляРасчетов");
	Поля.Вставить("РеквизитыПолучателя_Банк_БИК", "КонтрагентБИКБанка");
	Поля.Вставить("РеквизитыПолучателя_Банк_SWIFT", "КонтрагентСВИФТБанка");
	Поля.Вставить("РеквизитыПолучателя_Банк_НаименованиеМеждународное", "КонтрагентБанкМеждународный");
	Поля.Вставить("РеквизитыПолучателя_Банк_Адрес", "КонтрагентАдресБанкаМеждународный");
	Поля.Вставить("РеквизитыПолучателя_Банк_Город", "КонтрагентГородБанкаМеждународный");
	Поля.Вставить("РеквизитыПолучателя_Банк_Страна_КодСтраны", "КонтрагентСтранаБанкаКод");
	Поля.Вставить("РеквизитыПолучателя_Банк_Страна_ISOКод", "КонтрагентСтранаБанкаИСОКод");
	Поля.Вставить("РеквизитыПолучателя_Банк_Страна_Наименование", "КонтрагентСтранаБанка");
	
	Поля.Вставить("РеквизитыПлательщика_НаименованиеМеждународное", "ОрганизацияНаименованиеМеждународное");
	Поля.Вставить("РеквизитыПлательщика_Наименование", "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("РеквизитыПлательщика_ИНН", "ОрганизацияИНН");
	Поля.Вставить("РеквизитыПлательщика_КПП", "ОрганизацияКПП");
	Поля.Вставить("РеквизитыПлательщика_РасчСчет", "ОрганизацияРасчСчет");
	Поля.Вставить("РеквизитыПлательщика_АдресСтруктурированный_Страна_КодСтраны");
	Поля.Вставить("РеквизитыПлательщика_АдресСтруктурированный_Страна_ISOКод");
	Поля.Вставить("РеквизитыПлательщика_АдресСтруктурированный_Страна_Наименование", "ОрганизацияСтранаНаименование");
	Поля.Вставить("РеквизитыПлательщика_АдресСтруктурированный_Город", "ОрганизацияГород");
	Поля.Вставить("РеквизитыПлательщика_АдресСтруктурированный_Адрес");
	Поля.Вставить("РеквизитыПлательщика_АдресСтруктурированный_Индекс");
	Поля.Вставить("РеквизитыПлательщика_АдресПроизвольный", "ОрганизацияАдресМеждународный");
	
	Поля.Вставить("РеквизитыПлательщика_Банк_БИК", "ОрганизацияБИКБанка");
	Поля.Вставить("РеквизитыПлательщика_Банк_SWIFT", "ОрганизацияСВИФТБанка");
	Поля.Вставить("РеквизитыПлательщика_Банк_НаименованиеМеждународное", "ОрганизацияБанкМеждународный");
	Поля.Вставить("РеквизитыПлательщика_Банк_Адрес", "ОрганизацияАдресБанкаМеждународный");
	Поля.Вставить("РеквизитыПлательщика_Банк_Город", "ОрганизацияГородБанкаМеждународный");
	
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_SWIFT", "ОрганизацияСВИФТБанкаДляРасчетов");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_БИК", "ОрганизацияБИКБанкаДляРасчетов");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_Наименование", "ОрганизацияБанкДляРасчетов");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_НаименованиеМеждународное", "ОрганизацияБанкДляРасчетовМеждународный");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_Город", "ОрганизацияГородБанкаДляРасчетовМеждународный");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_Адрес", "ОрганизацияАдресБанкаДляРасчетовМеждународный");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_Страна_КодСтраны", "ОрганизацияСтранаБанкаДляРасчетовКод");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_Страна_ISOКод", "ОрганизацияСтранаБанкаДляРасчетовИСОКод");
	Поля.Вставить("РеквизитыПлательщика_БанкПосредник_Страна_Наименование", "ОрганизацияСтранаБанкаДляРасчетов");
	
	Поля.Вставить("ВалютаПеревода_КодВалюты", "ВалютаПереводаКод");
	Поля.Вставить("ВалютаПеревода_ISOКодВалюты", "ВалютаПереводаИСОКод");
	Поля.Вставить("ВалютаПеревода_Сумма", "ВалютаПереводаСумма");
	
	Поля.Вставить("ВалютаСписания_КодВалюты", "ВалютаСписанияКод");
	Поля.Вставить("ВалютаСписания_ISOКодВалюты", "ВалютаСписанияИСОКод");
	Поля.Вставить("ВалютаСписания_Сумма", "ВалютаСписанияСумма");
	
	Поля.Вставить("УполномоченныйСотрудник_ФИО");
	Поля.Вставить("УполномоченныйСотрудник_Телефон");
	Поля.Вставить("УполномоченныйСотрудник_Email");
	
	Поля.Вставить("РеквизитыПлатежа_НазначениеПлатежа", "НазначениеПлатежа");
	Поля.Вставить("РеквизитыПлатежа_ТипКомиссии", "ТипКомиссииЗаПереводНаименование");
	Поля.Вставить("РеквизитыПлатежа_СчетКомиссии");
	Поля.Вставить("ИнформацияДляРегулирующихОрганов");
	
	Возврат Поля;
	
КонецФункции

Функция ИнициализироватьПоляПорученияНаПродажуВалюты()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("РеквизитыОрганизации_Наименование",                "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("РеквизитыОрганизации_ИНН",                         "ОрганизацияИНН");
	Поля.Вставить("РеквизитыОрганизации_КПП",                         "ОрганизацияКПП");
	Поля.Вставить("РеквизитыОрганизации_НаименованиеМеждународное",   "ОрганизацияНаименованиеМеждународное");
	
	Поля.Вставить("УполномоченныйСотрудник_ФИО");
	Поля.Вставить("УполномоченныйСотрудник_Телефон");
	Поля.Вставить("УполномоченныйСотрудник_Должность");
	
	Поля.Вставить("СуммаПродажи_Сумма",                               "ВалютаСписанияСумма");
	Поля.Вставить("СуммаПродажи_КодВалюты",                           "ВалютаСписанияКод");
	Поля.Вставить("СуммаПродажи_ISOКодВалюты",                        "ВалютаСписанияИСОКод");
	
	Поля.Вставить("УсловияСделки");
	
	Поля.Вставить("РеквизитыСписания_НомерСчета",                     "ОрганизацияРасчСчет");
	Поля.Вставить("РеквизитыСписания_Банк_БИК",                       "ОрганизацияБИКБанка");
	Поля.Вставить("РеквизитыСписания_Банк_КоррСчет",                  "ОрганизацияКоррСчетБанка");
	Поля.Вставить("РеквизитыСписания_Банк_Наименование",              "ОрганизацияБанк");
	Поля.Вставить("РеквизитыСписания_Банк_Город",                     "ОрганизацияГородБанка");
	
	Поля.Вставить("РеквизитыЗачисления_НомерСчета",                   "КонтрагентРасчСчет");
	Поля.Вставить("РеквизитыЗачисления_ТипЗачисления");
	Поля.Вставить("РеквизитыЗачисления_Банк_БИК",                     "КонтрагентБИКБанка");
	Поля.Вставить("РеквизитыЗачисления_Банк_КоррСчет",                "КонтрагентКоррСчетБанка");
	Поля.Вставить("РеквизитыЗачисления_Банк_Наименование",            "КонтрагентБанк");
	Поля.Вставить("РеквизитыЗачисления_Банк_Город",                   "КонтрагентГородБанка");
	
	Поля.Вставить("КомиссионноеВознаграждение_Счет_НомерСчета",       "НомерСчетаКомиссии");
	Поля.Вставить("КомиссионноеВознаграждение_Счет_БИК",              "БИКСчетаКомиссии");
	Поля.Вставить("КомиссионноеВознаграждение_Счет_НаименованиеБанка","НаименованиеБанкаСчетаКомиссии");
	Поля.Вставить("КомиссионноеВознаграждение_ПлатежноеПоручение_Номер");
	Поля.Вставить("КомиссионноеВознаграждение_ПлатежноеПоручение_Дата");
	Поля.Вставить("КомиссионноеВознаграждение_ПлатежноеПоручение_НазначениеПлатежа");
	
	Поля.Вставить("СоглашениеСБанком");
	
	Возврат Поля;
	
КонецФункции

Функция ИнициализироватьПоляПорученияНаПокупкуВалюты()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("РеквизитыОрганизации_Наименование",                "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("РеквизитыОрганизации_ИНН",                         "ОрганизацияИНН");
	Поля.Вставить("РеквизитыОрганизации_КПП",                         "ОрганизацияКПП");
	Поля.Вставить("РеквизитыОрганизации_НаименованиеМеждународное",   "ОрганизацияНаименованиеМеждународное");
	
	Поля.Вставить("УполномоченныйСотрудник_ФИО");
	Поля.Вставить("УполномоченныйСотрудник_Телефон");
	Поля.Вставить("УполномоченныйСотрудник_Должность");
	
	Поля.Вставить("СуммаПокупки_Сумма",                               "ВалютаПереводаСумма");
	Поля.Вставить("СуммаПокупки_КодВалюты",                           "ВалютаПереводаКод");
	Поля.Вставить("СуммаПокупки_ISOКодВалюты",                        "ВалютаПереводаИСОКод");
	
	Поля.Вставить("СредстваПокупки_Сумма",                            "ВалютаСписанияСумма");
	Поля.Вставить("СредстваПокупки_КодВалюты",                        "ВалютаСписанияКод");
	Поля.Вставить("СредстваПокупки_ISOКодВалюты",                     "ВалютаСписанияИСОКод");
	
	Поля.Вставить("УсловияСделки");
	
	Поля.Вставить("РеквизитыСписания_НомерСчета",                     "ОрганизацияРасчСчет");
	Поля.Вставить("РеквизитыСписания_ТипСписания");
	Поля.Вставить("РеквизитыСписания_Банк_БИК",                       "ОрганизацияБИКБанка");
	Поля.Вставить("РеквизитыСписания_Банк_Наименование",              "ОрганизацияБанк");
	
	Поля.Вставить("РеквизитыЗачисления_НомерСчета",                   "КонтрагентРасчСчет");
	Поля.Вставить("РеквизитыЗачисления_ТипЗачисления");
	Поля.Вставить("РеквизитыЗачисления_Банк_БИК",                     "КонтрагентБИКБанка");
	Поля.Вставить("РеквизитыЗачисления_Банк_КоррСчет",                "КонтрагентКоррСчетБанка");
	Поля.Вставить("РеквизитыЗачисления_Банк_Наименование",            "КонтрагентБанк");
	Поля.Вставить("РеквизитыЗачисления_Банк_SWIFT",                   "КонтрагентСВИФТБанка");
	
	Поля.Вставить("КомиссионноеВознаграждение",                       "Счет");
	Поля.Вставить("КомиссионноеВознаграждение_Счет_НомерСчета",       "НомерСчетаКомиссии");
	Поля.Вставить("КомиссионноеВознаграждение_Счет_БИК",              "БИКСчетаКомиссии");
	Поля.Вставить("КомиссионноеВознаграждение_Счет_НаименованиеБанка","НаименованиеБанкаСчетаКомиссии");
	Поля.Вставить("КомиссионноеВознаграждение_ПлатежноеПоручение_Номер");
	Поля.Вставить("КомиссионноеВознаграждение_ПлатежноеПоручение_Дата");
	Поля.Вставить("КомиссионноеВознаграждение_ПлатежноеПоручение_НазначениеПлатежа");
	
	Поля.Вставить("ИсточникСредствНаПокупку_Счет",                    "СчетСписания");
	Поля.Вставить("ИсточникСредствНаПокупку_Счет_СчетСписания_НомерСчета");
	Поля.Вставить("ИсточникСредствНаПокупку_Счет_СчетСписания_БИК");
	Поля.Вставить("ИсточникСредствНаПокупку_Счет_СчетСписания_НаименованиеБанка");
	Поля.Вставить("ИсточникСредствНаПокупку_ТипСписания",             "1");
	
	Поля.Вставить("СоглашениеСБанком");
	
	Возврат Поля;
	
КонецФункции

Функция ИнициализироватьПоляРаспоряженияНаОбязательнуюПродажуВалюты()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("РеквизитыОрганизации_Наименование",                "ОрганизацияНаименованиеСокращенное");
	Поля.Вставить("РеквизитыОрганизации_ИНН",                         "ОрганизацияИНН");
	Поля.Вставить("РеквизитыОрганизации_КПП",                         "ОрганизацияКПП");
	Поля.Вставить("РеквизитыОрганизации_НаименованиеМеждународное",   "ОрганизацияНаименованиеМеждународное");
	
	Поля.Вставить("ТранзитныйСчет_НомерСчета",                        "ОрганизацияРасчСчет");
	Поля.Вставить("ТранзитныйСчет_Банк_БИК",                          "ОрганизацияБИКБанка");
	Поля.Вставить("ТранзитныйСчет_Банк_Наименование",                 "ОрганизацияБанк");
	Поля.Вставить("ТранзитныйСчет_Банк_Город",                        "ОрганизацияГородБанка");
	
	Поля.Вставить("Уведомление_НаименованиеБанка",                    "УведомлениеОЗачисленииВалютыБанковскийСчетБанкНаименование");
	Поля.Вставить("Уведомление_НомерДокумента",                       "УведомлениеОЗачисленииВалютыНомерПоБанку");
	Поля.Вставить("Уведомление_ДатаДокумента",                        "УведомлениеОЗачисленииВалютыДатаПоступления");
	Поля.Вставить("Уведомление_Сумма",                                "УведомлениеОЗачисленииВалютыСуммаДокумента");
	Поля.Вставить("Уведомление_КодВалюты",                            "УведомлениеОЗачисленииВалютыВалютаКод");
	Поля.Вставить("Уведомление_ISOКодВалюты",                         "УведомлениеОЗачисленииВалютыВалютаНаименование");
	
	Поля.Вставить("ОбщаяСуммаПоступившихСредств_Сумма",               "ВалютаСписанияСумма");
	Поля.Вставить("ОбщаяСуммаПоступившихСредств_КодВалюты",           "ВалютаСписанияКод");
	Поля.Вставить("ОбщаяСуммаПоступившихСредств_ISOКодВалюты",        "ВалютаСписанияИСОКод");
	
	Поля.Вставить("Вычет_Сумма",                                      0);
	Поля.Вставить("Вычет_КодВалюты",                                  "");
	Поля.Вставить("Вычет_ISOКодВалюты",                               "");
	
	Поля.Вставить("ОбязательнаяПродажа_Процент",                      0);
	Поля.Вставить("ОбязательнаяПродажа_Сумма",                        0);
	Поля.Вставить("ОбязательнаяПродажа_КодВалюты",                    "");
	Поля.Вставить("ОбязательнаяПродажа_ISOКодВалюты",                 "");
	Поля.Вставить("ОбязательнаяПродажа_СчетЗачисленияОтПродажи_НомерСчета",        "КонтрагентРасчСчет");
	Поля.Вставить("ОбязательнаяПродажа_СчетЗачисленияОтПродажи_Тип",               "0");
	Поля.Вставить("ОбязательнаяПродажа_СчетЗачисленияОтПродажи_Банк_БИК",          "КонтрагентБИКБанка");
	Поля.Вставить("ОбязательнаяПродажа_СчетЗачисленияОтПродажи_Банк_КоррСчет",     "КонтрагентКоррСчетБанка");
	Поля.Вставить("ОбязательнаяПродажа_СчетЗачисленияОтПродажи_Банк_Наименование", "КонтрагентБанк");
	Поля.Вставить("ОбязательнаяПродажа_СчетЗачисленияОтПродажи_Банк_Город",        "КонтрагентГородБанка");
	
	Поля.Вставить("УполномоченныйСотрудник_ФИО");
	Поля.Вставить("УполномоченныйСотрудник_Телефон");
	
	Возврат Поля;
	
КонецФункции

Функция ИнициализироватьПоляУведомленияОЗачисленииВалюты()
	
	Поля = Новый Структура;
	Поля.Вставить("Дата");
	Поля.Вставить("Номер");
	Поля.Вставить("Сумма");
	
	Поля.Вставить("ISOКодВалюты");
	Поля.Вставить("НаименованиеОрганизации");
	Поля.Вставить("НаименованиеБанка");
	Поля.Вставить("ДатаПоступленияСредств");
	Поля.Вставить("СрокПредоставленияДокументов");
	Поля.Вставить("ТекстСообщения");
	
	Поля.Вставить("РеквизитыПолучателя_ИНН");
	Поля.Вставить("РеквизитыПолучателя_КПП");
	Поля.Вставить("РеквизитыПолучателя_РасчСчет");
	Поля.Вставить("РеквизитыПолучателя_Банк_БИК");
	Поля.Вставить("РеквизитыПолучателя_Банк_Наименование");
	
	Возврат Поля;
	
КонецФункции

Функция КонтактнаяИнформацияОтветственных(Ответственные)
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УправлениеКонтактнойИнформацией.СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, Ответственные,, ВидыКИ);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	МАКСИМУМ(КонтактнаяИнформация.Представление) КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Представление <> """"
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформация.Объект
	|;
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	МАКСИМУМ(КонтактнаяИнформация.Представление) КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Представление <> """"
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформация.Объект
	|";
	
	Результат = Запрос.ВыполнитьПакет();
	
	НомераТелефонов = Новый Соответствие;
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		НомераТелефонов.Вставить(Выборка.Объект, Выборка.Представление);
	КонецЦикла;
	
	ПочтовыеАдреса = Новый Соответствие;
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ПочтовыеАдреса.Вставить(Выборка.Объект, Выборка.Представление);
	КонецЦикла;
	
	Возврат Новый Структура("НомераТелефонов, ПочтовыеАдреса", НомераТелефонов, ПочтовыеАдреса);
	
КонецФункции

Функция ФайлыДляПередачиВБанк(ВладельцыФайлов)
	
	Если ВладельцыФайлов.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
		|ИЗ
		|	#ИмяСправочника КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла В (&ВладельцыФайлов)
		|	И ПрисоединенныеФайлы.ДляПередачиВБанк
		|";
		Запрос.УстановитьПараметр("ВладельцыФайлов", ВладельцыФайлов);
		
		ИмяДокумента = ВладельцыФайлов[0].Метаданные().ПолноеИмя();
		ИмяСправочника = СтрЗаменить(ИмяДокумента, "Документ.", "Справочник.") + "ПрисоединенныеФайлы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяСправочника", ИмяСправочника);
		
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция АккомодацияСтруктурыАдреса(Данные)
	
	НаселенныйПунктДетально = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗаполнитьЗначенияСвойств(НаселенныйПунктДетально, Данные);
	
	Для каждого ЭлементАдреса Из НаселенныйПунктДетально Цикл
		Если СтрЗаканчиваетсяНа(ЭлементАдреса.Ключ, "ID")
			И ТипЗнч(ЭлементАдреса.Значение) = Тип("Строка")
			И СтрДлина(ЭлементАдреса.Значение) = 36 Тогда
				НаселенныйПунктДетально[ЭлементАдреса.Ключ] = Новый УникальныйИдентификатор(ЭлементАдреса.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НаселенныйПунктДетально;
	
КонецФункции

Процедура ЗаполнитьЗначениеРеквизитаВДеревеЭВ(Дерево, КлючИЗначение)
	
	Ключ = СтрЗаменить(КлючИЗначение.Ключ, "_", ".");
	Если ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
		Значение = СокрЛП(КлючИЗначение.Значение);
	Иначе
		Значение = КлючИЗначение.Значение;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Ключ, Значение);
	
КонецПроцедуры

//++ Локализация

// Возвращает сформированный реестр на зачисление денежных средств в виде текста xml.
//
// Параметры:
//  ДанныеДокумента - Структура - содержит основные данные документа для формирования файла.
//  ВидОперации - Строка - выполняемая операция.
//
// Возвращаемое значение:
//   Строка - xml текст.
//
Функция РеестрЗачисленияДенежныхСредствХML(ДанныеДокумента, ВидОперации)
	
	СтруктураФайла = СтруктураФайлаXDTO(ВидОперации);
	
	ДесятичныеСвойстваПакетаXDTO = Новый Соответствие;
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(
					Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоЗарплатнымПроектам.ПространствоИмен);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ДанныеДокумента.КодировкаФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Для Каждого КорневоеСвойство Из ПакетXDTO.КорневыеСвойства Цикл
		
		ОбъектXDTO = СформироватьОбъектXDTO(КорневоеСвойство.Тип, ДанныеДокумента, СтруктураФайла);
		СформироватьСписокДесятичныхСвойствПакетаXDTO(ФабрикаXDTO,
														ДесятичныеСвойстваПакетаXDTO,
														КорневоеСвойство.Тип,
														СтруктураФайла);
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML,
								ОбъектXDTO,
								КорневоеСвойство.ЛокальноеИмя,
								КорневоеСвойство.URIПространстваИмен,
								,
								НазначениеТипаXML.Явное);
		
	КонецЦикла;
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = ИзменитьФорматОтображенияДесятичныхСвойствXML(ТекстXML, ДесятичныеСвойстваПакетаXDTO, ДанныеДокумента.КодировкаФайла);
	
	Возврат ТекстXML;
	
КонецФункции

// Возвращает структуру файла в зависимости от вида выполняемой операции для формирования объекта XDTO
//
// Параметры:
//  ВидОперации - Строка - выполняемая операция.
//
// Возвращаемое значение:
//   Структура - шаблон для правильного обхода пакета XDTO
//
Функция СтруктураФайлаXDTO(ВидОперации) Экспорт
	
	СчетаПК = Новый Структура;
	
	Если ВидОперации = "Зачисление" Тогда
		
		СчетаПК.Вставить("ДатаФормирования");
		СчетаПК.Вставить("НомерДоговора");
		СчетаПК.Вставить("ДатаДоговора");
		СчетаПК.Вставить("НаименованиеОрганизации");
		СчетаПК.Вставить("ИНН");
		СчетаПК.Вставить("РасчетныйСчетОрганизации");
		СчетаПК.Вставить("БИК");
		СчетаПК.Вставить("ИдПервичногоДокумента");
		СчетаПК.Вставить("НомерРеестра");
		СчетаПК.Вставить("ДатаРеестра");
		
		ЗачислениеЗарплаты = Новый Структура("Сотрудник");
		Сотрудник = Новый Структура;
		Сотрудник.Вставить("Нпп");
		Сотрудник.Вставить("Фамилия");
		Сотрудник.Вставить("Имя");
		Сотрудник.Вставить("Отчество");
		Сотрудник.Вставить("ОтделениеБанка");
		Сотрудник.Вставить("ФилиалОтделенияБанка");
		Сотрудник.Вставить("ЛицевойСчет");
		Сотрудник.Вставить("Сумма");
		Сотрудник.Вставить("КодВалюты");
		Сотрудник.Вставить("ОбщаяСуммаУдержаний");
		
		ЗачислениеЗарплаты.Сотрудник = Сотрудник;
		
		СчетаПК.Вставить("ЗачислениеЗарплаты", ЗачислениеЗарплаты);
		СчетаПК.Вставить("ВидЗачисления");
		СчетаПК.Вставить("КодВидаДохода");
		СчетаПК.Вставить("ПлатежноеПоручение");
		СчетаПК.Вставить("ДатаПлатежногоПоручения");
		
		КонтрольныеСуммы = Новый Структура;
		КонтрольныеСуммы.Вставить("КоличествоЗаписей");
		КонтрольныеСуммы.Вставить("СуммаИтого");
		СчетаПК.Вставить("КонтрольныеСуммы", КонтрольныеСуммы);
		
	ИначеЕсли ВидОперации = "ПодтверждениеЗачисленияЗарплаты" Тогда
		
		СчетаПК.Вставить("ДатаФормирования", "Дата");
		СчетаПК.Вставить("РасчетныйСчетОрганизации", "РасчетныйСчетОрганизации");
		СчетаПК.Вставить("ИдПервичногоДокумента", "ИдентификаторПервичногоДокумента");
		СчетаПК.Вставить("НомерДоговора", "НомерДоговора");
		СчетаПК.Вставить("ДатаДоговора", "ДатаДоговора");
		СчетаПК.Вставить("НомерРеестра", "НомерРеестра");
		СчетаПК.Вставить("ДатаРеестра", "ДатаРеестра");
		СчетаПК.Вставить("КоличествоЗаписей", "КоличествоЗаписей");
		СчетаПК.Вставить("СуммаИтого", "СуммаИтого");
		
		Сотрудники = Новый Структура;
		Сотрудники.Вставить("Фамилия", "Фамилия");
		Сотрудники.Вставить("Имя", "Имя");
		Сотрудники.Вставить("Отчество", "Отчество");
		Сотрудники.Вставить("ЛицевойСчет", "НомерЛицевогоСчета");
		Сотрудники.Вставить("Результат", "РезультатЗачисленияЗарплаты");
		Сотрудники.Вставить("Сумма", "Сумма");
		Сотрудники.Вставить("КодВалюты", "КодВалюты");
		СчетаПК.Вставить("Сотрудник", Сотрудники);
		
	КонецЕсли;
	
	Возврат СчетаПК;
	
КонецФункции

// Возвращает объект типа XDTO
//
// Параметры:
//  Тип - ТипОбъектаXDTO - тип, объект которого необходимо создать
//  ДанныеДокумента - Структура - основные данные документа для заполнения объекта XDTO
//  СтруктураОбъекта - Структура - шаблон для обхода пакета XDTO
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция СформироватьОбъектXDTO(Тип, ДанныеДокумента, СтруктураОбъекта)
	
	ОбъектXDTO = ФабрикаXDTO.Создать(Тип);
	ЗаполнитьОбъектXDTO(ОбъектXDTO, ДанныеДокумента, СтруктураОбъекта);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Выполняет заполнение свойств объекта XDTO
//
// Параметры:
//  ОбъектДанныхXDTO - ОбъектXDTO - объект XDTO, для которого заполняются свойства
//  ДанныеДокумента - Структура - основные данные документа для заполнения объекта XDTO
//  СтруктураОбъекта - Структура - шаблон для обхода пакета XDTO
//
Процедура ЗаполнитьОбъектXDTO(ОбъектДанныхXDTO, ДанныеДокумента, СтруктураОбъекта)
	
	Для Каждого ТекущееСвойство Из ОбъектДанныхXDTO.Свойства() Цикл
		
		Если Не СтруктураОбъекта.Свойство(ТекущееСвойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектДанныхXDTO[ТекущееСвойство.Имя]) = Тип("СписокXDTO") Тогда
			
			ОбъектСписокXDTO = ОбъектДанныхXDTO.ПолучитьСписок(ТекущееСвойство);
			
			Для Каждого СтрокаДокумента Из ДанныеДокумента[ТекущееСвойство.Имя] Цикл
				
				ОбъектXDTO = СформироватьОбъектXDTO(ТекущееСвойство.Тип, СтрокаДокумента, СтруктураОбъекта[ТекущееСвойство.Имя]);
				ОбъектСписокXDTO.Добавить(ОбъектXDTO);
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ТекущееСвойство.Тип) = Тип("ТипОбъектаXDTO") Тогда
			ЗначениеПоля = СформироватьОбъектXDTO(ТекущееСвойство.Тип, ДанныеДокумента, СтруктураОбъекта[ТекущееСвойство.Имя]);
		Иначе
			
			Если Не ДанныеДокумента.Свойство(ТекущееСвойство.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеПоля = ДанныеДокумента[ТекущееСвойство.Имя];
			
		КонецЕсли;
		
		ПривестиКТипу(ТекущееСвойство, ЗначениеПоля);
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Или ТипЗнч(ЗначениеПоля) = Тип("Дата") Или ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
			
		ОбъектДанныхXDTO[ТекущееСвойство.Имя] = ЗначениеПоля;
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует значение к типу в XDTO
//
// Параметры:
//  СвойствоXDTO - СвойствоXDTO - свойство объекта XDTO
//  ЗначениеПоля - Произвольный - значение
//
Процедура ПривестиКТипу(СвойствоXDTO, ЗначениеПоля, ТекстОшибки = "") Экспорт

	Если СвойствоXDTO.Тип.Имя = "date"
		ИЛИ СвойствоXDTO.Тип.БазовыйТип.Имя = "date"
		ИЛИ (СвойствоXDTO.Тип.БазовыйТип.БазовыйТип <> Неопределено
		И СвойствоXDTO.Тип.БазовыйТип.БазовыйТип.Имя = "date") Тогда
		
		Если ЗначениеПоля = Неопределено Тогда
			ЗначениеПоля = '00010101';
		Иначе
			ЗначениеПоля = Дата(СтрЗаменить(ЗначениеПоля, "-", ""));
		КонецЕсли;
		
	ИначеЕсли СвойствоXDTO.Тип.Имя = "string"
		ИЛИ СвойствоXDTO.Тип.БазовыйТип.Имя = "string"
		ИЛИ (СвойствоXDTO.Тип.БазовыйТип.БазовыйТип <> Неопределено
		И СвойствоXDTO.Тип.БазовыйТип.БазовыйТип.Имя = "string") Тогда
		
		ЗначениеПоля = Строка(ЗначениеПоля);
		
		Фасеты = СвойствоXDTO.Тип.Фасеты;
		
		Если Фасеты = Неопределено Тогда
			Фасеты = СвойствоXDTO.Тип.БазовыйТип.Фасеты;
		КонецЕсли;
	
		Для Каждого Фасет Из Фасеты Цикл
			
			Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
				ЗначениеПоля = Лев(ЗначениеПоля, Число(Фасет.Значение));
			ИначеЕсли Фасет.Вид = ВидФасетаXDTO.МинДлина Тогда
				
				Если Число(Фасет.Значение) > СтрДлина(ЗначениеПоля) Тогда
					Для Шаг = СтрДлина(ЗначениеПоля) + 1 По Число(Фасет.Значение) Цикл
						ЗначениеПоля = " " + ЗначениеПоля;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли Фасет.Вид = ВидФасетаXDTO.Длина Тогда
				
				Если СтрДлина(ЗначениеПоля) <> Число(Фасет.Значение) Тогда
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка установки свойства %1
											|Устанавливаемое значение: %2
											|Текущая длина строки: %3 
											|Допустимая длина строки: %4'"),
											СвойствоXDTO,
											ЗначениеПоля,
											СтрДлина(ЗначениеПоля),
											Число(Фасет.Значение));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СвойствоXDTO.Тип.Имя = "integer"
		ИЛИ СвойствоXDTO.Тип.БазовыйТип.Имя = "integer"
		ИЛИ (СвойствоXDTO.Тип.БазовыйТип.БазовыйТип <> Неопределено
		И СвойствоXDTO.Тип.БазовыйТип.БазовыйТип.Имя = "integer") Тогда
		ЗначениеПоля = Число(ЗначениеПоля);
	ИначеЕсли СвойствоXDTO.Тип.Имя = "decimal"
		ИЛИ СвойствоXDTO.Тип.БазовыйТип.Имя = "decimal"
		ИЛИ (СвойствоXDTO.Тип.БазовыйТип.БазовыйТип <> Неопределено
		И СвойствоXDTO.Тип.БазовыйТип.БазовыйТип.Имя = "decimal") Тогда
		
		Длина = 0;
		РазрядностьДробнойЧасти = 0;
		
		Фасеты = СвойствоXDTO.Тип.Фасеты;
		
		Если Фасеты = Неопределено Тогда
			Фасеты = СвойствоXDTO.Тип.БазовыйТип.Фасеты;
		КонецЕсли;
	
		Для Каждого Фасет Из Фасеты Цикл
			
			Если Фасет.Вид = ВидФасетаXDTO.РазрядовВсего Тогда
				Длина = Число(Фасет.Значение);
			КонецЕсли;
			
			Если Фасет.Вид = ВидФасетаXDTO.РазрядовДробнойЧасти Тогда
				РазрядностьДробнойЧасти = Число(Фасет.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧДЦ=%2; ЧН=0; ЧГ=0", 
									Длина, РазрядностьДробнойЧасти);
		ЗначениеПоля = Число(Формат(ЗначениеПоля, ФорматнаяСтрока));
		
	ИначеЕсли СвойствоXDTO.Тип.Имя = "boolean"
		ИЛИ СвойствоXDTO.Тип.БазовыйТип.Имя = "boolean"
		ИЛИ (СвойствоXDTO.Тип.БазовыйТип.БазовыйТип <> Неопределено
		И СвойствоXDTO.Тип.БазовыйТип.БазовыйТип.Имя = "boolean") Тогда
		ЗначениеПоля = XMLЗначение(Тип("Булево"), ЗначениеПоля);
	КонецЕсли;

КонецПроцедуры

// Формирует список имен свойств в пакете XDTO с десятичным типом данных
//
// Параметры:
//  ЗаполняемыйСписок - Соответствие - список для заполнения
//  Тип - ТипОбъектаXDTO - тип объекта XDTO
//  СтруктураОбъекта - Структура - шаблон для обхода пакета XDTO
//
Процедура СформироватьСписокДесятичныхСвойствПакетаXDTO(Фабрика, ЗаполняемыйСписок, Тип, СтруктураОбъекта) Экспорт
	
	ОбъектXDTO = Фабрика.Создать(Тип);
	ДобавитьДесятичноеСвойство(Фабрика, ЗаполняемыйСписок, ОбъектXDTO, СтруктураОбъекта);
	
КонецПроцедуры

// Добавляет имена свойств из пакета XDTO с десятичным типом данных
//
// Параметры:
//  ЗаполняемыйСписок - Соответствие - список для заполнения
//  ОбъектXDTO - ОбъектXDTO - объект типа XDTO для обхода свойств
//  СтруктураОбъекта - Структура - шаблон для обхода пакета XDTO
//
Процедура ДобавитьДесятичноеСвойство(Фабрика, ЗаполняемыйСписок, ОбъектXDTO, СтруктураОбъекта)
	
	Для Каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
		
		Если Не СтруктураОбъекта.Свойство(СвойствоXDTO.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СвойствоXDTO.Тип) = Тип("ТипОбъектаXDTO") Тогда
			СформироватьСписокДесятичныхСвойствПакетаXDTO(Фабрика, ЗаполняемыйСписок, СвойствоXDTO.Тип, СтруктураОбъекта[СвойствоXDTO.Имя]);
		Иначе
			
			Если СвойствоXDTO.Тип.Имя = "decimal"
				ИЛИ СвойствоXDTO.Тип.БазовыйТип.Имя = "decimal"
				ИЛИ (СвойствоXDTO.Тип.БазовыйТип.БазовыйТип <> Неопределено
				И СвойствоXDTO.Тип.БазовыйТип.БазовыйТип.Имя = "decimal")Тогда
				
				Длина = 0;
				РазрядностьДробнойЧасти = 0;
				РазделительДробнойЧасти = "";
				
				Фасеты = СвойствоXDTO.Тип.Фасеты;
				
				Если Фасеты = Неопределено Тогда
					Фасеты = СвойствоXDTO.Тип.БазовыйТип.Фасеты;
				КонецЕсли;
				
				Для Каждого Фасет Из Фасеты Цикл
					
					Если Фасет.Вид = ВидФасетаXDTO.РазрядовВсего Тогда
						Длина = Число(Фасет.Значение);
					КонецЕсли;
					
					Если Фасет.Вид = ВидФасетаXDTO.РазрядовДробнойЧасти Тогда
						
						РазрядностьДробнойЧасти = Число(Фасет.Значение);
						РазделительДробнойЧасти = ".";
						
					КонецЕсли;
					
				КонецЦикла;
				
				ФорматнаяСтрока = СтрШаблон("ЧЦ=%1; ЧДЦ=%2; ЧРД=%3; ЧГ=0",
											Длина, РазрядностьДробнойЧасти, РазделительДробнойЧасти);
				
				ЗаполняемыйСписок.Вставить(СвойствоXDTO.Имя, ФорматнаяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст формата xml с измененным форматом отображения десятичных значений.
//
// Параметры:
//  ТекстXML - Строка - текст в формате xml.
//  ДесятичныеСвойства - Соответствие из КлючИЗначение - список имен свойств в пакете XDTO с десятичным типом.
//  Кодировка - Строка - кодировка файла.
//
// Возвращаемое значение:
//   Строка - исправленный текст в формате xml
//
Функция ИзменитьФорматОтображенияДесятичныхСвойствXML(ТекстXML, ДесятичныеСвойства, Кодировка)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Кодировка);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		ЗаписатьУзелXML(ЧтениеXML, ЗаписьXML, ДесятичныеСвойства);
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Процедура ЗаполнитьДанныеИзXDTOПоСтруктуре(ОбъектXDTO, ИсточникXDTO, СтруктураДанных, Данные)
	
	Для каждого КоллекцияСвойствXDTO Из ОбъектXDTO.Свойства() Цикл
	
		СвойствоXDTO = ИсточникXDTO.Свойства().Получить(КоллекцияСвойствXDTO.Имя);
		
		Если ТипЗнч(ОбъектXDTO[КоллекцияСвойствXDTO.Имя]) = Тип("СписокXDTO") Тогда
		
			Если СтруктураДанных.Свойство(КоллекцияСвойствXDTO.Имя) Тогда
			
				ЭлементСтруктурыДанных = СтруктураДанных[КоллекцияСвойствXDTO.Имя];
				
				Если ТипЗнч(ЭлементСтруктурыДанных) = Тип("Структура") Тогда
				
					МассивДанных = Новый Массив;
					НомерСтроки = 0;
					
					Для каждого ЭлементСписка Из ОбъектXDTO[КоллекцияСвойствXDTO.Имя] Цикл
					
						ДанныеСписка = Новый Структура;
						ДанныеСписка.Вставить("НомерСтроки", НомерСтроки);
						ЗаполнитьДанныеИзXDTOПоСтруктуре(ЭлементСписка, ФабрикаXDTO.Создать(СвойствоXDTO.Тип), ЭлементСтруктурыДанных, ДанныеСписка);
						МассивДанных.Добавить(ДанныеСписка);
						НомерСтроки = НомерСтроки + 1;
					
					КонецЦикла;
					
					Данные.Вставить(КоллекцияСвойствXDTO.Имя, МассивДанных);
					
				Иначе
					Данные.Вставить(СтруктураДанных[КоллекцияСвойствXDTO.Имя], Неопределено);
				КонецЕсли;
			
			Иначе
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектXDTO[КоллекцияСвойствXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
			ЗаполнитьДанныеИзXDTOПоСтруктуре(ОбъектXDTO[КоллекцияСвойствXDTO.Имя], ФабрикаXDTO.Создать(СвойствоXDTO.Тип), СтруктураДанных, Данные);
		Иначе
			
			Если СтруктураДанных.Свойство(КоллекцияСвойствXDTO.Имя) Тогда
				
				ЗначениеXDTO = ОбъектXDTO[КоллекцияСвойствXDTO.Имя];
				ПривестиКТипу(СвойствоXDTO, ЗначениеXDTO);
				Данные.Вставить(СтруктураДанных[КоллекцияСвойствXDTO.Имя], ЗначениеXDTO);
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция РеестрВыплатСамозанятым(ДанныеДокумента)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Документы.СписаниеБезналичныхДенежныхСредств.ПолучитьМакет("РеестрВыплатСамозанятым");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаВыплаты Из ДанныеДокумента Цикл
		
		ОбластьСтрока.Параметры.Заполнить(СтрокаВыплаты);
		ОбластьСтрока.Параметры.Сумма = Формат(СтрокаВыплаты.Сумма, "ЧДЦ=2; ЧГ=0");
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция РеестрВыплатСамозанятымВФорматеТекста(ДанныеДокумента)

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для Каждого СтрокаВыплаты Из ДанныеДокумента Цикл
		
		// Строка вида: Счет (20 знаков);Фамилия;Имя;Отчество;Сумма (разделитель - точка);
		// Сумма произведенных удержаний (разделитель - точка, значение 0);Наименование товаров и услуг в чеке (СМЗ)
		Строки = Новый Массив;
		Строки.Добавить(СтрокаВыплаты.НомерСчета);
		Строки.Добавить(СтрокаВыплаты.Фамилия);
		Строки.Добавить(СтрокаВыплаты.Имя);
		Строки.Добавить(СтрокаВыплаты.Отчество);
		Строки.Добавить(Формат(СтрокаВыплаты.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
		Строки.Добавить(Формат(0, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0"));
		Строки.Добавить(СтрокаВыплаты.НазначениеПлатежа);
		
		СтрокаРеестра = СтрСоединить(Строки, ";");
		ТекстовыйДокумент.ДобавитьСтроку(СтрокаРеестра);
		
	КонецЦикла;
	
	Возврат ТекстовыйДокумент

КонецФункции

//-- Локализация

#КонецОбласти