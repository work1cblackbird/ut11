////////////////////////////////////////////////////////////////////////////////
// Содержит события форм, вызываемые на сервере
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормИС.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.ОсобенностьУчета) Тогда
			Форма.Элементы.КодТНВЭД.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		ИнтеграцияИСУТ.ДобавитьЭлементыНастройкиВидаУпаковокПриСоздании(Форма);
		ИнтеграцияИСУТ.ЗаполнитьЗначениеПолейПоВидамУпаковок(Форма);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.КассыККМ.Форма.ФормаЭлемента" Тогда
		РозничныеПродажиЛокализация.КассаККМНастроитьВидимостьЭлементовОплатыЭСФСС(Форма);
		РозничныеПродажиЛокализация.КассаККМЗаполнитьПараметрыПодключенияНСПК(Форма);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.Организации.Форма.ФормаЭлемента" Тогда
		РозничныеПродажиЛокализация.ОрганизацияНастроитьВидимостьЭлементовОплатыЭСФСС(Форма);
		РозничныеПродажиЛокализация.ОрганизацияЗаполнитьПараметрыПодключенияНСПК(Форма);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.ЭквайринговыеТерминалы.Форма.ФормаЭлемента" Тогда
		РозничныеПродажиЛокализация.ЭквайринговыйТерминалНастроитьВидимостьЭлементовОплатыЭСФСС(Форма);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.ОтчетКомиссионера.Форма.ФормаДокумента" Тогда
		Если ИнтеграцияСМаркетплейсамиСерверЛокализация.ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
			Форма.Элементы.ТоварыГруппаДанныеДокументаОтгрузки.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		ИЛИ Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		РозничныеПродажиЛокализация.УстановитьФункциональнуюОпциюОплатаЭСФСС(Форма);
		РозничныеПродажиЛокализация.УстановитьВозможностьИспользованиеОплатыСБПНаФормахРМК(Форма);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.РеализацияПодарочныхСертификатов.Форма.ФормаДокументаРМК"
		ИЛИ Форма.ИмяФормы = "Документ.ВозвратПодарочныхСертификатов.Форма.ФормаДокументаРМК" Тогда
		РозничныеПродажиЛокализация.УстановитьВозможностьИспользованиеОплатыСБПНаФормахРМК(Форма);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Перечисление.ТипыНоменклатуры.Форма.ВыборТипаНоменклатуры" Тогда
		Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Если Форма.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда
				Форма.Элементы.ОсобенностьУчетаКиЗГИСМ.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.СертификатыНоменклатуры.Форма.ФормаСпискаКонтекст" Тогда
		ИнтеграцияСМаркетплейсамиСервер.ПриСозданииФормыСпискаКонтекстСертификатовНоменклатуры(Форма);
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ДополнительныеСвойстваДинамическихСписков")
		И ИнтеграцияСМаркетплейсамиСерверЛокализация.ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		ИнтеграцияСМаркетплейсамиСерверЛокализация.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	КонецЕсли;

	ИнтеграцияИСМПУТ.ДобавитьЭлементСостояниеГИСМТПриСоздании(Форма);
	
	ОформлениеПередачиТоваровМеждуОрганизациямиСервер.ПриСозданииНаСервере(Форма);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- СправочникОбъект, ДокументОбъект - объект, который будет прочитан.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормИС.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	ОформлениеПередачиТоваровМеждуОрганизациямиСервер.ПриЧтенииНаСервере(Форма);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект, Отказ, ПараметрыЗаписи) Экспорт

	//++ Локализация
	
	//-- Локализация
	Возврат;

КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от записи из формы.
//	ТекущийОбъект			- СправочникОбъект, ДокументОбъект - записываемый объект.
//	ПараметрыЗаписи			- Структура - дополнительные параметры записи.
//
Процедура ПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	//++ Локализация
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		ИнтеграцияИСУТ.ЗаписатьДанныеПоВидамУпаковок(Форма, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.КассыККМ.Форма.ФормаЭлемента" Тогда
		РозничныеПродажиЛокализация.КассаККМЗаписатьПараметрыПодключенияНСПК(Форма, ТекущийОбъект);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.Организации.Форма.ФормаЭлемента" Тогда
		РозничныеПродажиЛокализация.ОрганизацияЗаписатьПараметрыПодключенияНСПК(Форма, ТекущийОбъект);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- СправочникОбъект, ДокументОбъект - объект, который будет прочитан.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормИС.ПослеЗаписиНаСервере(Форма);
	ОформлениеПередачиТоваровМеждуОрганизациямиСервер.ПослеЗаписиНаСервере(Форма);
	
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.ОсобенностьУчета) Тогда
			Форма.Элементы.КодТНВЭД.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		Иначе
			Форма.Элементы.КодТНВЭД.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от успешной проверки заполнения.
//	ПроверяемыеРеквизиты	- Массив из Строка - Проверяемые реквизиты.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.НаборыУпаковок.Форма.ФормаЭлемента" Тогда
		ИнтеграцияИСУТ.ПроверкаЗаполненияПоВидамУпаковок(Форма, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Произвольный     - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	СобытияФормИС.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
	Если Элемент = "СмТакжеВРаботе" Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
			Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП")
			Или ПолучитьФункциональнуюОпцию("ВестиУчетПестицидовАгрохимикатовТукосмесейСАТУРН")
			Или ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО")
			Или ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС")
		Тогда
			ДополнительныеПараметры.Добавить("Обработка.ОформлениеПередачиТоваровМеждуОрганизациями");
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриСменеСтраницФормы(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС")
		И Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
		
		Если Форма.ИмяФормы = "Документ.АктОРасхожденияхПослеПриемки.Форма.ФормаДокумента"
			И Элемент = "ГруппаСтраницы" 
			И Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.СтраницаОсновное Тогда
			
			ИнтеграцияИСМПУТКлиентСервер.ДополнитьНадписьСпособаОтраженияРасхождений(
				ТипЗнч(Форма.Объект.Ссылка),
				Форма.Элементы.НадписьРасхождения,
				Форма.Элементы.ОформитьДокументы,
				Форма.Объект.Товары,
				Форма.Объект.ШтрихкодыУпаковокРасхождения);
			
		ИначеЕсли Форма.ИмяФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаДокумента"
			И Элемент = "ГруппаСтраницы" 
			И Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаОсновное
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТребуетсяОбработкаКодовМаркировки")
			И Форма.ТребуетсяОбработкаКодовМаркировки Тогда
			
			ИнтеграцияИСМПУТКлиентСервер.ДополнитьНадписьСпособаОтраженияРасхождений(
				ТипЗнч(Форма.Объект.Ссылка),
				Форма.Элементы.НадписьРасхождения,
				Форма.Элементы.ОформитьДокументы);
				
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Серверная переопределяемая процедура обработки добавляемой команды
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   ДополнительныеПараметры - Структура        - параметры вызова команды.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	Если ДополнительныеПараметры.Свойство("ИмяКоманды")
		И ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПоДокументамМаркировки" Тогда
		
		ИмяТабличнойЧастиТовары = "ВыходныеИзделия";
		ИмяТабличнойЧастиСерии = "ВыходныеИзделияСерии";
		Если Форма.ИмяФормы = "Документ.ПрочееОприходованиеТоваров.Форма.ФормаДокумента" Тогда
			ИмяТабличнойЧастиТовары = "Товары";
			ИмяТабличнойЧастиСерии = "Серии";
		КонецЕсли;
		Товары = Форма.Объект[ИмяТабличнойЧастиТовары].Выгрузить();
		Серии = Форма.Объект[ИмяТабличнойЧастиСерии].Выгрузить();
		ТабличнаяЧастьШтрихкодыУпаковокЗаполнена = Форма.Объект.ШтрихкодыУпаковок.Количество() > 0;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДополнительныеПараметры.ДанныеВыбора);
		Запрос.УстановитьПараметр("Товары", Товары);
		
		СписокЗапросов = Новый СписокЗначений();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Серия КАК Серия,
		|	Таблица.Количество КАК Количество,
		|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
		|	&ТребуетВзвешивания КАК ТребуетВзвешивания
		|ПОМЕСТИТЬ Маркировано
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.Товары КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Серия КАК Серия,
		|	Таблица.Количество КАК Количество,
		|	Таблица.Количество КАК КоличествоУпаковок,
		|	&ТребуетВзвешивания КАК ТребуетВзвешивания
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|	И Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|";
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Таблица.Номенклатура");
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Маркировано.Номенклатура КАК Номенклатура,
		|	Маркировано.Характеристика КАК Характеристика,
		|	Маркировано.Серия КАК Серия,
		|	СУММА(Маркировано.Количество) КАК Количество,
		|	СУММА(Маркировано.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	МАКСИМУМ(Маркировано.ТребуетВзвешивания) КАК ТребуетВзвешивания
		|ПОМЕСТИТЬ ФактическиМаркировано
		|ИЗ
		|	Маркировано КАК Маркировано
		|СГРУППИРОВАТЬ ПО
		|	Маркировано.Номенклатура,
		|	Маркировано.Характеристика,
		|	Маркировано.Серия
		|");
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиМаркировано.Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
		|ПОМЕСТИТЬ ВыбранныеОсобенностиУчета
		|ИЗ
		|	ФактическиМаркировано КАК ФактическиМаркировано
		|");
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ТЗ.Номенклатура КАК Номенклатура,
		|	ТЗ.Характеристика КАК Характеристика,
		|	ТЗ.Серия КАК Серия
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК ТЗ
		|");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	&ТребуетВзвешивания КАК ТребуетВзвешивания
		|ИЗ
		|	Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОсобенностиУчета КАК ВыбранныеОсобенностиУчета
		|		ПО Товары.Номенклатура.ОсобенностьУчета = ВыбранныеОсобенностиУчета.ОсобенностьУчета
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|";
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
		СписокЗапросов.Добавить(ТекстЗапроса, "ИзменяемыеСтрокиТЧТовары");
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ФактическиМаркировано.Номенклатура КАК Номенклатура,
		|	ФактическиМаркировано.Характеристика КАК Характеристика,
		|	ФактическиМаркировано.Серия КАК Серия,
		|	ФактическиМаркировано.Количество КАК Количество,
		|	ФактическиМаркировано.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЛОЖЬ КАК Обработано
		|ИЗ
		|	ФактическиМаркировано КАК ФактическиМаркировано
		|", "НовоеЗначениеКоличества");
		
		РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
		
		//@skip-warning
		ИзменяемыеСтрокиТЧТовары = РезультатЗапроса["ИзменяемыеСтрокиТЧТовары"].Выгрузить();
		//@skip-warning
		НовоеЗначениеКоличества = РезультатЗапроса["НовоеЗначениеКоличества"].Выгрузить();
		
		КлючПоиска = Новый Структура("Номенклатура,Характеристика,Серия");
		КлючПоискаБезСерии = Новый Структура("Номенклатура,Характеристика");
		Товары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
		Серии.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если СтрокаТЧ.Удалить Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(КлючПоиска, СтрокаТЧ);
			ЗаполнитьЗначенияСвойств(КлючПоискаБезСерии, СтрокаТЧ);
			ИзменяютсяСтрокиТЧТовары = ИзменяемыеСтрокиТЧТовары.НайтиСтроки(КлючПоиска);
			СтрокаИзменяется = ИзменяютсяСтрокиТЧТовары.Количество();
			Если Не СтрокаИзменяется Тогда
				Продолжить;
			ИначеЕсли ТабличнаяЧастьШтрихкодыУпаковокЗаполнена И ИзменяемыеСтрокиТЧТовары[0].ТребуетВзвешивания Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
				НовоеКоличество = НовоеЗначениеКоличества.НайтиСтроки(КлючПоиска);
			Иначе
				НовоеКоличество = НовоеЗначениеКоличества.НайтиСтроки(КлючПоискаБезСерии);
			КонецЕсли;
			СтрокиСерии = Серии.НайтиСтроки(КлючПоискаБезСерии);
			Если НовоеКоличество.Количество() = 0 Тогда
				СтрокаТЧ.Удалить = Истина;
				Продолжить;
			КонецЕсли;
			Для Каждого Серия Из СтрокиСерии Цикл
				Серия.Удалить = Истина;
			КонецЦикла;
			Коэффициент = СтрокаТЧ.КоличествоУпаковок / СтрокаТЧ.Количество;
			СтрокаТЧ.Количество = 0;
			Для Каждого СтрокаМаркировано Из НовоеКоличество Цикл
				СтрокаМаркировано.Обработано = Истина;
				СтрокаТЧ.Количество = СтрокаТЧ.Количество + СтрокаМаркировано.Количество;
				Если ЗначениеЗаполнено(СтрокаМаркировано.Серия) Тогда
					НоваяСтрокаСерия = Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерия, СтрокаТЧ);
					НоваяСтрокаСерия.Количество = СтрокаМаркировано.Количество;
				КонецЕсли;
			КонецЦикла;
			СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество * Коэффициент;
			
			Для Каждого ДубльСтроки Из Товары.НайтиСтроки(КлючПоиска) Цикл
				Если ДубльСтроки <> СтрокаТЧ Тогда
					ДубльСтроки.Удалить = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаМаркировано Из НовоеЗначениеКоличества.НайтиСтроки(Новый Структура("Обработано", Ложь)) Цикл
			Если ТабличнаяЧастьШтрихкодыУпаковокЗаполнена И СтрокаМаркировано.ТребуетВзвешивания Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаМаркировано);
		КонецЦикла;
		
		Форма.Объект[ИмяТабличнойЧастиТовары].Загрузить(Товары.Скопировать(Новый Структура("Удалить", Ложь)));
		Форма.Объект[ИмяТабличнойЧастиСерии].Загрузить(Серии.Скопировать(Новый Структура("Удалить", Ложь)));
		
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
