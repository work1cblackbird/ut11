//////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы "Комиссионные продажи"
// связанные с хозяйственной операцией "Возврат от коммисионера".
// 
//////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область УнифицированныеМетодыПоХозяйственнымОперациям

#Область Заполнение

// Возвращает условию продаж
//
// Параметры:
//  Соглашение - СправочникСсылка.СоглашенияСКлиентами - 
//
// Возвращаемое значение:
//  см. ПродажиСервер.ПолучитьУсловияПродаж
//
Функция ПолучитьУсловияПродаж(Соглашение) Экспорт

	Возврат ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);

КонецФункции

// Возвращает список реквизитов, по которым происходит сопоставление таблиц при заполнении по заказам/ордерам
// 
// Возвращаемое значение:
// 	Строка
//
Функция КлючевыеПоляТаблицыТоваровРаспоряжения() Экспорт
	
	Возврат "Распоряжение, Номенклатура, Характеристика, Назначение, Серия";
	
КонецФункции

#КонецОбласти

#Область Проведение

// Возвращает параметры заполнения видов запасов для документа "Поступление товаров от хранителя".
//
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровОтХранителя
//
// Возвращаемое значение:
//  см. ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов
//
Функция ПараметрыЗаполненияВидовЗапасов(Объект) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи, "Никогда");
	ПараметрыЗаполнения.СторнируемыйДокумент = Объект.СторнируемыйДокумент;
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.Организация = Объект.Организация;
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов  = Новый Массив;
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.Товар);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.КомиссионныйТовар);
	
	Возврат ПараметрыЗаполнения;

КонецФункции

// Добавляет дополнительное свойство для контроля при проведении
// 
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровОтХранителя - 
//
Процедура ДобавитьДополнительноеСвойствоДляКонтроляПриПроведении(Объект) Экспорт
	
	Если Объект.ПоРаспоряжениям Тогда
		Объект.Движения.ЗаявкиНаВозвратТоваровОтКлиентов.ДополнительныеСвойства.Вставить("ФормироватьСводнуюТаблицуЗаявкиНаВозврат");
	Иначе
		Объект.Движения.ТоварыОрганизаций.ДополнительныеСвойства.Вставить("ФормироватьСводнуюТаблицуТоварыОрганизаций");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Округление


// Пересчитывает количество единиц
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//
Процедура ПересчитатьКоличествоЕдиниц(Объект) Экспорт
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


// Добавляет действие "ПересчитатьКоличествоЕдиниц"
//
// Параметры:
//  СтруктураДействий - Структура - 
//
Процедура ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц());
	
КонецПроцедуры

// Возвращает параметры перерасчета клиента единиц
//
// Возвращаемое значение:
//  Неопределено - 
//
Функция ПараметрыПересчетаКоличестваЕдиниц() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Признак необходимости пересчета количество единиц
//
// Возвращаемое значение:
//  Булево - 
//
Функция НеобходимПересчетКоличествоЕдиниц() Экспорт

	Возврат Ложь;

КонецФункции

// Возвращает параметры для округления
// 
// Параметры:
//  Склад - СправочникСсылка.Склады - 
// 
// Возвращаемое значение:
// 	Структура - элементы содержат структуру параметров округления 
// 				см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров
// 
Функция ПараметрыТЧДляОкругления(Склад) Экспорт
	
	Возврат Новый Структура("Товары");
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

//Возвращает текст запроса данные для проверки ввода на основании
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстЗапросаДанныеДляПроверкиВводаНаОсновании() Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Распоряжение.Ссылка КАК Основание,
	|	Распоряжение.Статус КАК Статус,
	|	ЛОЖЬ КАК ОформлениеЧерезРМ,
	|	ВЫБОР
	|		КОГДА Распоряжение.Склад.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ Распоряжение.Склад
	|	КОНЕЦ               КАК Склад,
	|	Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Распоряжение
	|ГДЕ
	|	Распоряжение.Ссылка В(&Распоряжения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Распоряжение.Ссылка КАК Основание,
	|	НЕОПРЕДЕЛЕНО        КАК Статус,
	|	ЛОЖЬ КАК ОформлениеЧерезРМ,
	|	ВЫБОР
	|		КОГДА Распоряжение.Склад.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ Распоряжение.Склад
	|	КОНЕЦ               КАК Склад,
	|	Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПередачаТоваровХранителю КАК Распоряжение
	|ГДЕ
	|	Распоряжение.Ссылка В(&Распоряжения)
	|");
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТоварыРаспоряжения
	|ГДЕ
	|	ТоварыРаспоряжения.Ссылка В(&Распоряжения)
	|	И НЕ ТоварыРаспоряжения.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.Товары КАК ТоварыРаспоряжения
	|ГДЕ
	|	ТоварыРаспоряжения.Ссылка В(&Распоряжения)
	|");
	
	ТекстыЗапросов.Добавить(
		РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОстатки(
			"ВтОстаткиКОформлению",
			Новый Структура("ДокументПоступления", "Распоряжения"),
			"КОформлению <> 0"));
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Набор.Распоряжение КАК РаспоряженияКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиКОформлению.Распоряжение КАК Распоряжение
	|	ИЗ
	|		ВтОстаткиКОформлению КАК ОстаткиКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДокумента.Ссылка КАК Распоряжение
	|	ИЗ
	|		Документ.ПередачаТоваровХранителю КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка В (&Распоряжения)
	|	) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Распоряжение
	|");
	
	Возврат СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

КонецФункции

//Возвращает текст запроса данные заполнения накладной
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстЗапросаДанныеЗаполненияНакладной() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	Заказ.Ссылка.Организация             КАК Организация,
	|	Заказ.Ссылка.Подразделение           КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Заказ.Ссылка.Склад.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ Заказ.Ссылка.Склад
	|	КОНЕЦ                                КАК Склад,
	|	Заказ.Ссылка.Сделка                  КАК Сделка,
	|	Заказ.Ссылка.Партнер                 КАК Партнер,
	|	Заказ.Ссылка.Контрагент              КАК Контрагент,
	|	Заказ.Ссылка.Соглашение              КАК Соглашение,
	|	Заказ.Ссылка.Договор                 КАК Договор,
	|	Заказ.Ссылка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заказ.Ссылка.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.ВидЦены) = 1
	|			ТОГДА МАКСИМУМ(Заказ.ВидЦены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЦены
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	Передача.Ссылка.Организация             КАК Организация,
	|	Передача.Ссылка.Подразделение           КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Передача.Ссылка.Склад.ЭтоГруппа
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ Передача.Ссылка.Склад
	|	КОНЕЦ                                   КАК Склад,
	|	Передача.Ссылка.Сделка                  КАК Сделка,
	|	Передача.Ссылка.Партнер                 КАК Партнер,
	|	Передача.Ссылка.Контрагент              КАК Контрагент,
	|	Передача.Ссылка.Соглашение              КАК Соглашение,
	|	Передача.Ссылка.Договор                 КАК Договор,
	|	Передача.Ссылка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Передача.Ссылка.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Передача.ВидЦены) = 1
	|			ТОГДА МАКСИМУМ(Передача.ВидЦены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЦены
	|ИЗ
	|	Документ.ПередачаТоваровХранителю.Товары КАК Передача
	|ГДЕ
	|	Передача.Ссылка = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	Передача.Ссылка
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

//Возвращает текст запроса товаров документа заказ
//
// Параметры:
//  Отбор - Соответствие - 
//  ДополнятьПоТаблицеСерий - Булево -
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаТоварыДокументаЗаказа(Отбор, ДополнятьПоТаблицеСерий = Ложь) Экспорт
	
	ТекстЗапроса =
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.ТекстЗапросаТоварыДокумента(
			Отбор,
		ТекстСоединения(Ложь, Истина),
			ДополнятьПоТаблицеСерий);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Возвращает текст запроса переданных товаров
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстЗапросаТоварыПереданные() Экспорт

	Возврат Обработки.ПодборТоваровПереданныхНаОтветственноеХранение.ТекстЗапросаТоварыПереданные();

КонецФункции

// Возвращает текст соединения между таблицами "Таблица" и "ДанныеУчета"
// 
//  Параметры:
//  ИспользоватьНомерГТД - Булево -
//  ИспользоватьСерии - Булево -  
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстСоединения(ИспользоватьНомерГТД = Истина, ИспользоватьСерии = Ложь) Экспорт

	ТекстСоединения = " Таблица.Ссылка = ДанныеУчета.Распоряжение
		| И Таблица.Номенклатура = ДанныеУчета.Номенклатура
		| И Таблица.Характеристика = ДанныеУчета.Характеристика
		| И Таблица.Назначение = ДанныеУчета.Назначение";
		
	Если ИспользоватьНомерГТД Тогда
		
		ТекстСоединения = ТекстСоединения + "
			| И Таблица.НомерГТД = ДанныеУчета.НомерГТД";
			
	КонецЕсли;
	
	Если ИспользоватьСерии Тогда
		
		ТекстСоединения = ТекстСоединения + "
			| И Таблица.Серия = ДанныеУчета.Серия";
			
	КонецЕсли;

	Возврат ТекстСоединения;

КонецФункции

#Область ТекстыЗапросовЗаполненияСпискаРаспоряжений

// Возвращает текст запроса распоряжений доступных в накладной.
// 
// Параметры:
//  ПараметрыТекстаЗапроса - см. ОбщегоНазначенияУТ.ПараметрыТекстаЗапросаРаспоряженийНакладных
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаРаспоряженияНакладной(ПараметрыТекстаЗапроса) Экспорт
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ПараметрыТекстаЗапроса.Отбор,
		"ТаблицаРаспоряжений.Склад",
		"&Склад",
		"=");
	
	Возврат Документы.ЗаявкаНаВозвратТоваровОтКлиента.ТекстЗапросаРаспоряженийНакладных(ПараметрыТекстаЗапроса);
	
КонецФункции

// Возвращает текст запроса распоряжений к оформлению
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаРаспоряженияКОформлению() Экспорт

	Возврат РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаРаспоряженияКОформлению();

КонецФункции

// Возвращает текст запроса товаров распоряжений к оформлению
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаОстаткиТоваровКОформлению(ИмяВременнойТаблицы, ОтборПоИзмерениям = Неопределено) Экспорт
	
	Если ОтборПоИзмерениям = Неопределено Тогда
		ОтборПоИзмерениям = Новый Соответствие;
	КонецЕсли;
	
	ТекстЗапроса =
		РегистрыНакопления.ТоварыКПоступлению.ТекстЗапросаОстатки(
			ИмяВременнойТаблицы,
			ОтборПоИзмерениям,
			"КОформлению > 0");
	
	
	ТекстЗапроса = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ТекстЗапроса, "0", "КодСтроки");
	
	ТекстЗапроса = СхемыЗапросов.УстановитьИндексациюПолейЗапроса(ТекстЗапроса, "Номенклатура, Характеристика");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса дублей товаров распоряжений к оформлению
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаДублиТоваровКОформлению() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*)                    КАК КоличествоДублей,
	|	ТоварыКОформлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДублиТоваровКОформлению
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика
	|";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Распоряжение

// Возвращает массив типов распоряжение
//
// Возвращаемое значение:
//  Массив из Тип -
//
Функция ТипыРаспоряжение() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает имя регистра заказ
//
// Возвращаемое значение:
//  Строка - 
//
Функция ИмяРегистраЗаказ() Экспорт
	
	Возврат "ТоварыКПоступлению";
	
КонецФункции

// Возвращает имя измерение регистра остатков, который используется в качестве распоряжение
//
// Возвращаемое значение:
//  Строка - 
//
Функция ИмяИзмерениеЗаказ() Экспорт
	
	Возврат "ДокументПоступления";
	
КонецФункции

// Возвращает признак использование кода строки
//
// Возвращаемое значение:
//  Булево - 
//
Функция ИспользоватьКодСтроки() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает синоним заказа.
//
// Возвращаемое значение:
//  Строка - синоним заказа.
//
Функция СинонимЗаказа() Экспорт
	
	Возврат НСтр("ru='Заявка на возврат товаров от комиссионера'");
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

// Возвращает тип основания акта о расхождении
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОснованияАктаОРасхождении
//
Функция ТипОснованияАкта() Экспорт
	
	Возврат Перечисления.ТипыОснованияАктаОРасхождении.ВозвратОтКомиссионера;
	
КонецФункции

// Возвращает постфикс имени акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПостфиксИмениАкта() Экспорт
	
	Возврат НСтр("ru = 'после поступления товаров от комиссионера'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении при создании
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыСозданияАкта() Экспорт
	
	Возврат НСтр("ru = 'Акт о расхождениях после поступления товаров от комиссионера (создание)'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыАкта() Экспорт
	
	Возврат НСтр("ru = 'Акт о расхождениях после поступления товаров от комиссионера'");
	
КонецФункции

// Возвращает подсказку договора акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПодсказкаДоговораАкта() Экспорт
	
	Возврат НСтр("ru = 'Договор, в рамках которого оформлено поступление'");
	
КонецФункции

// Возвращает подсказку соглашения акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПодсказкаСоглашенияАкта() Экспорт
	
	Возврат НСтр("ru = 'Соглашение, по которому был передан товар.'");
	
КонецФункции

// Возвращает заголовок документа основание
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокДокументаОснованияАкта() Экспорт
	
	Возврат НСтр("ru = 'Поступление от комиссионера'");
	
КонецФункции

// Возвращает заголовок по основаниям
//
// Параметры:
//  ДополнитьПартнером - Булево -
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокПоОснованиям(ДополнитьПартнером = Истина) Экспорт
	
	Если ДополнитьПартнером Тогда
		Возврат НСтр("ru = 'По поступлениям от комиссионера'");
	Иначе
		Возврат НСтр("ru = 'По поступлениям'");
	КонецЕсли;
	
КонецФункции

//Возвращает описание поля с комментариями
//
// Возвращаемое значение:
//  Строка - 
//
Функция КомментарийПоставщикаПодвал() Экспорт
	
	Возврат НСтр("ru = 'Комментарии комиссионера по расхождениям в строке'");
	
КонецФункции

//Возвращает наименование колонки, кто даёт комментарий
//
// Возвращаемое значение:
//  Строка - 
//
Функция КомментарийКлиента() Экспорт
	
	Возврат НСтр("ru = 'комиссионера'");
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

// Возвращает хозяйственную операцию документа.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперация() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	
КонецФункции

// Возвращает хозяйственную операцию договора.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперацияДоговора() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Возвращает признак применяемости соглашений с поставщиками
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСПоставщикамиПрименимы() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак применяемости соглашений с клиентами
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСКлиентамиПрименимы() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак использование соглашений с клиентами
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьСоглашенияСКлиентами() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

КонецФункции

// Возвращает признак использование заявки на возврат товаров от клиентов
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРаспоряжения() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");

КонецФункции

// Возвращает признак использование поступления по нескольким заказов.
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьПоступлениеПоНесколькимЗаказам() Экспорт

	Возврат Ложь;

КонецФункции

// Возвращает признак использование расширенных возможностей заказа клиента
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРасширенныеВозможностиЗаказаКлиента() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецФункции

#КонецОбласти

#Область Форма

//Получает договор по умолчанию.
//
// Параметры:
//    Объект                         - ДанныеФормыСтруктура, ДокументОбъект - Объект, из которого будут взяты основные параметры для поиска.
//    ОтборПоВалюте                  - Булево - Вести поиск по указанной валюте взаиморасчетов искомого договора (Истина) или
//												без учета валюты взаиморасчетов (Ложь).
//    ОтборПоНаправлениюДеятельности - Булево - Вести поиск по указанному направлению деятельности искомого договора (Истина) или
//												по всем направлениям (Ложь).
//
// Возвращаемое значение:
//    СправочникСсылка.ДоговорыКонтрагентов - договор контрагента по умолчанию.
//
Функция ПолучитьДоговорПоУмолчанию(Объект, ОтборПоВалюте = Истина, ОтборПоНаправлениюДеятельности = Истина) Экспорт
	
	ХозяйственнаяОперация = ХозяйственнаяОперацияДоговора();
	
	Валюта = Неопределено;
	Если ОтборПоВалюте Тогда
		Валюта = Объект.Валюта;
	КонецЕсли;
	
	НаправлениеДеятельности = Неопределено;
	Если ОтборПоНаправлениюДеятельности
	   И ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
		НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, ХозяйственнаяОперация, Валюта, НаправлениеДеятельности, Истина);
	
	Возврат Договор;
	
КонецФункции

// Устанавливает доступность элемента договор.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено -
//
Процедура УстановитьДоступностьДоговора(Форма, Объект, Договор = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	Элементы.Договор.Доступность = Истина;
	Элементы.Договор.Видимость = Истина;
	
КонецПроцедуры

// Настраивает форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит:
//           * Элементы - ВсеЭлементыФормы - содержит:
//              ** Партнер - ПолеВвода - содержит:
//                  *** Заголовок - Строка -
//              ** ТоварыПодобратьПереданныеТовары - КомандаФормы - содержит:
//                  *** Заголовок - Строка -
//              ** ЗакрытьЗаявку - КомандаФормы - содержит:
//                  *** Заголовок - Строка -
//  Номер - Число - 
//  Дата  - Дата - 
//
Процедура НастроитьФорму(Форма, Номер, Дата) Экспорт
	
	Элементы  = Форма.Элементы;
	Параметры = Форма.Параметры;
	Объект    = Форма.Объект;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок     = ЗаголовокФормыДокумента(Не ЗначениеЗаполнено(Параметры.Ключ), Номер, Дата);
	
	Форма.ЗаголовокФормыПодбораПереданныхТоваров = НСтр("ru = 'Подбор товаров, переданных комиссионеру'");

	Элементы.Партнер.Заголовок                         = НСтр("ru = 'Комиссионер'");
	Элементы.ТоварыПодобратьПереданныеТовары.Заголовок = "";
	Элементы.СтраницыЗаказ.Видимость                   = ИспользоватьРаспоряжения();
	Элементы.ПоРаспоряжению.Заголовок                  = НСтр("ru = 'По заявке'");
	Элементы.ПоРаспоряжениям.Заголовок                 = НСтр("ru = 'По заявкам'");
	Элементы.ЗакрытьЗаявку.Заголовок                   = НСтр("ru = 'Закрыть заявку'");
	Элементы.ЗакрытьЗаявки.Заголовок                   = НСтр("ru = 'Закрыть заявки'");
	
	Элементы.Соглашение.Видимость = ИспользоватьСоглашенияСКлиентами();
	
	Элементы.ВидЦены.Видимость                      = Истина;
	Элементы.ТоварыЦена.Видимость                   = Истина;
	Элементы.ТоварыСумма.Видимость                  = Истина;
	Элементы.ТоварыЗаполнитьЦеныПоВидуЦен.Видимость = Истина;
	Элементы.ТоварыЗаполнитьНомераГТД.Видимость     = Не Форма.КомиссионерНеВедетУчетПоРНПТ;
	Элементы.ГруппаИтого.Видимость                  = Истина;
	
	Элементы.ТоварыЗаполнитьЦеныПоДоговору.Видимость = Истина;
	Элементы.ВозвратПереданнойМногооборотнойТары.Видимость = Объект.ВозвратПереданнойМногооборотнойТары;
	
КонецПроцедуры

// Настраивает параметры выбора и связи параметров выбора реквизитов формы.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//
Процедура НастроитьПараметрыВыбораЭлементов(Форма, Объект) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Партнер
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
			
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Контрагент
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ЗаголовокПоПартнеру", НСтр("ru = 'По комиссионеру'")));
			
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	//Договор
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ХозяйственнаяОперацияДоговора()));
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.КомиссионныеПродажи25", Истина));


	МассивСвязейПараметровВыбора = Новый Массив;
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.Очищать));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Соглашение", "Объект.Соглашение", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	Элементы.Договор.ПараметрыВыбора       = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	
	//Соглашение
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.КомиссионныеПродажи25", Истина));
		
	МассивСвязейПараметровВыбора = Новый Массив;
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Дата", "Объект.Дата", РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.Очищать));
	
	Элементы.Соглашение.ПараметрыВыбора       = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.Соглашение.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	
	// Направление деятельности
	Если Элементы.Найти("НаправлениеДеятельности") <> Неопределено Тогда
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчетДоходов", Истина));
		
		Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	КонецЕсли;
	
	// Вид цены
	Если Не Элементы.Найти("ВидЦены") = Неопределено Тогда
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
		
		Элементы.ВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок формы документа передача товаров хранителю.
//
// Параметры:
//  НовыйДокумент - Булево - 
//  Номер - Число - 
//  Дата - Дата - 
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыДокумента(НовыйДокумент, Номер, Дата) Экспорт
	
	Если НовыйДокумент Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (создание)'"), ПредставлениеОбъекта());
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), ПредставлениеОбъекта(), Номер, Дата);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает представление документа поступление товаров от хранителя.
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПредставлениеОбъекта() Экспорт
	
	Возврат НСтр("ru = 'Поступление товаров от комиссионера'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
