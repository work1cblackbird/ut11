#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	МеханизмыДокумента.Добавить("ИнтеграцияЕГАИС");
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                            КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Ссылка,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	(НЕ &Архивный)
	|	И ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|	И (ТаблицаАкцизныеМарки.ЧастичноеВыбытиеВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
	|		ИЛИ ТаблицаАкцизныеМарки.ВыбытиеБутылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// БГосИС 1.3 работает на старом механизме проведения и в документах, проводимых библиотекой, требует адаптационный код
//
// Параметры:
//   ДокументСсылка         - ДокументСсылка.ЧекККМ - допроводимый документ
//   ДополнительныеСвойства - Структура             - возвращаемые таблицы движений для допроведения
//   Регистры               - Неопределено          - не используется в адаптационных целях
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЧекККМ.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос,
																							ТекстыЗапроса,
																							Неопределено);
	
	ДополнительныеСвойства = Новый Структура("ТаблицыДляДвижений", ТаблицыДляДвижений);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		ИнтеграцияИСУТ.ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Объект.ОрганизацияЕГАИС = ИнтеграцияЕГАИСУТ.ОрганизацияЕГАИСПоОрганизацииИСкладу(Объект.Организация, Объект.Склад);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	ИнтеграцияИСМП.ПередЗаписьюДокумента(Объект, Отказ);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	Объект.ОрганизацияЕГАИС = ИнтеграцияЕГАИСУТ.ОрганизацияЕГАИСПоОрганизацииИСкладу(Объект.Организация, Объект.Склад);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Фискализация

//++ Локализация

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация, КассаККМ");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, "Склад, Подразделение");
	
	НалогообложениеНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(РеквизитыДокумента.Организация, ТекущаяДатаСеанса(), РеквизитыКассыККМ.Склад, РеквизитыКассыККМ.Подразделение).НалогообложениеНДСРозничнойПродажи;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
		СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	Иначе
		СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Получить основные данные по таблице товаров для чека о розничной продаже
//
// Параметры:
//  ДокументСсылка - ДокументОбъект.ЧекККМ - Документ.
// 
// Возвращаемое значение:
//  ТаблицаЗначечний - 
Функция ПредметыРасчетовПоДокументу(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ЦенаВключаетНДС,Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	Товары.НоменклатураЕГАИС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.НомерСтроки КАК НомерСтроки,
	|	Серии.Серия КАК СерияТаблицыСерий,
	|	Серии.Количество КАК КоличествоУпаковок,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки,
	|	АкцизныеМарки.НомерСтроки,
	|	АкцизныеМарки.КодАкцизнойМарки,
	|	АкцизныеМарки.АкцизнаяМарка                                КАК ШтрихкодУпаковки,
	|	АкцизныеМарки.ЧастичноеВыбытиеВариантУчета                 КАК ЧастичноеВыбытиеВариантУчета,
	|	АкцизныеМарки.ЧастичноеВыбытиеНоменклатура                 КАК ЧастичноеВыбытиеНоменклатура,
	|	АкцизныеМарки.ЧастичноеВыбытиеХарактеристика               КАК ЧастичноеВыбытиеХарактеристика,
	|	АкцизныеМарки.ЧастичноеВыбытиеКоличество                   КАК ЧастичноеВыбытиеКоличество,
	|	АкцизныеМарки.РазрешительныйРежимИдентификаторЗапросаГИСМТ КАК РазрешительныйРежимИдентификаторЗапросаГИСМТ,
	|	АкцизныеМарки.РазрешительныйРежимДатаЗапросаГИСМТ          КАК РазрешительныйРежимДатаЗапросаГИСМТ
	|ПОМЕСТИТЬ ТаблицаАкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки,
	|	НомерСтроки;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриоритетыШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетыШтрихКода КАК ПриоритетыШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриоритетыШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриоритетыШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриоритетыШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриоритетыШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	
	|	СпрНоменклатура.ТипНоменклатуры                    КАК ТипНоменклатуры,
	|	СпрНоменклатура.ПодакцизныйТовар                   КАК ПодакцизныйТовар,
	|	СпрНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
	|	СпрНоменклатура.ОсобенностьУчета                   КАК ОсобенностьУчета,
	|	
	|	ВЫБОР КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			И ЕСТЬNULL(Товары.Характеристика.Принципал, СпрНоменклатура.Принципал) <> НЕОПРЕДЕЛЕНО
	|			И ЕСТЬNULL(Товары.Характеристика.Принципал, СпрНоменклатура.Принципал) <> &Организация
	|	ТОГДА ЕСТЬNULL(Товары.Характеристика.Контрагент, СпрНоменклатура.Контрагент)
	|	ИНАЧЕ ЕСТЬNULL(СпрНоменклатура.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ                                              КАК Агент,
	|	
	|	СпрНоменклатура.КодТРУ                             КАК КодТРУ,
	|	
	|	СпрНоменклатура.НаименованиеПолное       КАК НоменклатураНаименование,
	|	Товары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	Товары.Упаковка.Наименование             КАК УпаковкаНаименование,
	|	СпрНоменклатура.ЕдиницаИзмерения         КАК БазоваяУпаковка,
	|	
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА Товары.Цена
	|		КОГДА Товары.КоличествоУпаковок = 0 И &ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		КОГДА Товары.КоличествоУпаковок = 0 И НЕ &ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма + Товары.СуммаНДС
	|		ИНАЧЕ (Товары.Сумма + Товары.СуммаНДС + Товары.СуммаРучнойСкидки
	|			 + Товары.СуммаАвтоматическойСкидки) / Товары.КоличествоУпаковок
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.СуммаАвтоматическойСкидки + Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК СуммаСНДС,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	ВЫБОР 
	|		КОГДА НЕ СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|			ТОГДА ВЫБОР 
	|				КОГДА Товары.Штрихкод <> """"
	|					ТОГДА Товары.Штрихкод
	|					ИНАЧЕ ШтрихкодыНоменклатуры.Штрихкод
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Штрихкод,
	|	СпрНоменклатура.КодВидаНоменклатурнойКлассификации
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = Товары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО    ШтрихкодыНоменклатуры.Номенклатура   = Товары.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка       = Товары.Упаковка
	|
	|;
	|УНИЧТОЖИТЬ Штрихкоды;
	|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры;
	|УНИЧТОЖИТЬ ПриоритетыШтрихКода;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	Товары.ТипНоменклатуры,
	|	Товары.ПодакцизныйТовар,
	|	Товары.АлкогольнаяПродукцияВоВскрытойТаре,
	|	Товары.ОсобенностьУчета,
	|	Товары.Агент,
	|	Товары.КодТРУ,
	|	Товары.НоменклатураНаименование,
	|	Товары.ХарактеристикаНаименование,
	|	Товары.УпаковкаНаименование,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.БазоваяУпаковка,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.СуммаСкидки,
	|	Товары.СуммаСНДС,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	Товары.КодВидаНоменклатурнойКлассификации
	|ИЗ Товары КАК Товары
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Ссылка"			, ДокументСсылка);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС" , РеквизитыДокумента.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("Организация" , РеквизитыДокумента.Организация);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
	Если НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ДанныеКИЗиЕГАИС(ДокументСсылка, Товары);
	КонецЕсли;
	
	ДанныеДляИСМП = РозничныеПродажиЛокализация.ДанныеДляИСМП(ДокументСсылка, МенеджерВременныхТаблиц);
	ФормированиеФискальныхЧековСерверПереопределяемый.ТаблицаТоваровСРаспределениемКодовМаркировкиИСМП(Товары, ДанныеДляИСМП);
	
	Возврат Товары;
	
КонецФункции

// Возвращает массив товаров ФСС к оплате, находящиеся в документе.
// 
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - Товары в документе
//  ЦенаВключаетНДС - Булево - Цена включает НДС
// 
// Возвращаемое значение:
//  Массив ИЗ Структура - массив товаров ФСС в документе к оплате:
//	* Номенклатура - СправочникСсылка.Номенклатура -
//	* КодТовараТРУ - Строка -
//	* Количество - Число -
//	* Цена - Число -
//	* Сумма - Число -
//
Функция ТоварыФССВДокументеКОплате(ТаблицаТоваров, ЦенаВключаетНДС) Экспорт
	
	ТоварыФССКОплате = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.КоличествоУпаковок,
	|	ЧекККМТовары.Цена КАК Цена,
	|	ЧекККМТовары.Сумма КАК Сумма,
	|	ЧекККМТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ЧекККМТовары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Номенклатура.КодТРУ КАК КодТРУ,
	|	ЧекККМТовары.КоличествоУпаковок КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ЧекККМТовары.КоличествоУпаковок = 0 И &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма
	|		КОГДА ЧекККМТовары.КоличествоУпаковок = 0 И НЕ &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
	|		ИНАЧЕ (ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС) / ЧекККМТовары.КоличествоУпаковок
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма
	|		ИНАЧЕ ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Сумма
	|ИЗ
	|	ТаблицаТоваров КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Номенклатура.КодТРУ <> """"";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаЗапроса.КодТРУ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТоварнаяПозиция = Новый Структура();
		ТоварнаяПозиция.Вставить("Номенклатура", ВыборкаЗапроса.Номенклатура);
		ТоварнаяПозиция.Вставить("КодТовараТРУ", ВыборкаЗапроса.КодТРУ);
		ТоварнаяПозиция.Вставить("Количество"  , ВыборкаЗапроса.Количество);
		ТоварнаяПозиция.Вставить("Цена"        , ВыборкаЗапроса.Цена);
		ТоварнаяПозиция.Вставить("Сумма"       , ВыборкаЗапроса.Сумма);
		ТоварыФССКОплате.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	Возврат ТоварыФССКОплате;
	
КонецФункции

// Проверяет возможность ввода документа на основании Чека ККМ. Запрещается ввод в случае наличия товаров ФСС.
// 
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ
Процедура ПроверитьВозможностьВводаНаОсновании(ЧекККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	И ОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)
	|	И ОплатаПлатежнымиКартами.Сумма > 0";
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя вводить документ на основаниии ""Чек ККМ"" с товарами оплаченными электронным сертификатом ФСС.'");
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

#Область Фискализация

// Обновляет таблицу товаров данными для передачи кодов КИЗ и ЕГАИС в ККТ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекККМ - Документ.
//	ДанныеПоТоварам - ТаблицаЗначений - Данные по номенклатуре для вывода в позиции чека
//
Процедура ДанныеКИЗиЕГАИС(ДокументСсылка, ДанныеПоТоварам)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Серия КАК Серия,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	АкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка
	|ПОМЕСТИТЬ АкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	СправочникСерии.НомерКиЗГИСМ КАК ШтрихкодСтрока,
	|	Серии.Количество КАК Количество
	|ИЗ
	|	Серии КАК Серии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерии
	|		ПО Серии.Серия = СправочникСерии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Серии.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СправочникСерии.НомерКиЗГИСМ КАК ШтрихкодСтрока,
	|	Товары.Количество
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерии
	|		ПО Товары.Серия = СправочникСерии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	(НЕ Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		И СправочникНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха))";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	
	ТоварыРазобранные = ДанныеПоТоварам.СкопироватьКолонки();
	
	Для Каждого СтрокаТовары Из ДанныеПоТоварам Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		
		МассивМаркированныхТоваров = ШтрихкодыУпаковок.НайтиСтроки(СтруктураОтбора);
		
		Если МассивМаркированныхТоваров.Количество() = 0 Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрокМассиваМаркированныхТоваров = МассивМаркированныхТоваров.Количество(); 
		ТекущаяСтрока = 1;
		
		Пока КоличествоСтрокМассиваМаркированныхТоваров >= ТекущаяСтрока Цикл
			Если СтрокаТовары.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			МаркированныйТовар = МассивМаркированныхТоваров[КоличествоСтрокМассиваМаркированныхТоваров - ТекущаяСтрока];
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			СтрокаТоварыРазобранные.Штрихкод = МаркированныйТовар.ШтрихкодСтрока;
			
			СтрокаТоварыРазобранные.КоличествоУпаковок = 1;
			СтрокаТоварыРазобранные.Количество         = 1;
			СтрокаТоварыРазобранные.СуммаСкидки        = Окр(СтрокаТовары.СуммаСкидки / СтрокаТовары.Количество, 2);
			СтрокаТоварыРазобранные.СуммаНДС           = Окр(СтрокаТовары.СуммаНДС / СтрокаТовары.Количество, 2);
			СтрокаТоварыРазобранные.СуммаСНДС          = Окр(СтрокаТовары.СуммаСНДС / СтрокаТовары.Количество, 2);
			СтрокаТоварыРазобранные.Цена               = СтрокаТоварыРазобранные.СуммаСНДС - СтрокаТоварыРазобранные.СуммаСкидки;
			
			СтрокаТовары.Количество       = СтрокаТовары.Количество - СтрокаТоварыРазобранные.Количество;
			СтрокаТовары.СуммаСкидки      = СтрокаТовары.СуммаСкидки - СтрокаТоварыРазобранные.СуммаСкидки;
			СтрокаТовары.СуммаНДС         = СтрокаТовары.СуммаНДС - СтрокаТоварыРазобранные.СуммаНДС;
			СтрокаТовары.СуммаСНДС        = СтрокаТовары.СуммаСНДС - СтрокаТоварыРазобранные.СуммаСНДС;
			
			ШтрихкодыУпаковок.Удалить(МаркированныйТовар);
			
			ТекущаяСтрока = ТекущаяСтрока + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеПоТоварам = ТоварыРазобранные;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
//
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//
// Возвращаемое значение:
//  см. ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций.
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - см. ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
//
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                          КАК Номер,
		|	Шапка.Дата                           КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)   КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                         КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.ОрганизацияЕГАИС = КлассификаторОрганизацийЕГАИС.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	ВЫБОР КОГДА Товары.Количество <> 0 ТОГДА
		|		Товары.Сумма / Товары.Количество
		|	ИНАЧЕ
		|		0
		| 	КОНЕЦ КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.Номенклатура            КАК Номенклатура,
		|	Товары.Характеристика          КАК Характеристика,
		|	Товары.Серия                   КАК Серия,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем,
		|	ЕСТЬNULL(Товары.Номенклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	null                                         КАК ИдентификаторСтроки,
		|	Шапка.ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.Справка2                      КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка                 КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки              КАК ШтрихкодРодительскойУпаковки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
		|	ТабличнаяЧасть.ВыбытиеБутылки                 КАК ВыбытиеБутылки
		|
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка = Неопределено;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.Склад = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки      КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки              КАК НомерСтроки,
		|	Товары.Количество               КАК Количество,
		|	ВЫБОР КОГДА Товары.Количество <> 0 ТОГДА
		|		-Товары.Сумма / Товары.Количество
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК Цена,
		|	Товары.Штрихкод                 КАК Штрихкод,
		|	Товары.Номенклатура             КАК Номенклатура,
		|	Товары.Характеристика           КАК Характеристика,
		|	Товары.Серия                    КАК Серия,
		|	Товары.НоменклатураЕГАИС.Объем  КАК Объем,
		|	ЕСТЬNULL(Товары.Номенклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
		|	null                                         КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                      КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка                 КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки              КАК ШтрихкодРодительскойУпаковки,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
		|	ТабличнаяЧасть.ВыбытиеБутылки                 КАК ВыбытиеБутылки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка = Неопределено;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса,
		МенеджерВременныхТаблиц, Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	
КонецФункции

#КонецОбласти

#Область СканированиеМаркируемойПродукции

// Функция предназначена для обработки считанного штрихкода для разного вида упаковки и видов продукции.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ДанныеШтрихкода - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ДанныеШтрихкода
//	ПараметрыСканирования - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ПараметрыСканирования
//	ВложенныеШтрихкоды - см. ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции.ДеревоУпаковок
//
// Возвращаемое значение:
//	см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
		
	Иначе
		
		Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		
			Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				Результат = ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				
			ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
				
				Результат = ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				
			ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				И ДанныеШтрихкода.МаркируемаяПродукция <> Истина
				И ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
				
				Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);	
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
			
			Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ДанныеШтрихкода - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ДанныеШтрихкода
//	ПараметрыСканирования - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ПараметрыСканирования
//	ПараметрыЗаполнения - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
// Возвращаемое значение:
//  см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		РезультатОбработки     = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод   = Неопределено;
		ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
		
	Иначе
		
		РезультатОбработки     = ПараметрыЗаполнения;
		РодительскийШтрихкод   = ПараметрыЗаполнения.РодительскийШтрихкод;
		ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
		
	КонецЕсли;
	
	МаркируемаяПродукция    = Истина;
	ОбработатьБезМаркировки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ОбработатьБезМаркировки") Тогда
		ОбработатьБезМаркировки = ДанныеШтрихкода.ОбработатьБезМаркировки;
	КонецЕсли;
	
	ЧастичноеВыбытиеОтдельнойНоменклатуры = Ложь;
	// Необходимость использования серий в данных штрихкода для документа
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ТребуетсяУказаниеСерии = ОбщегоНазначенияИС.ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования);
		Если Не ТребуетсяУказаниеСерии Тогда
			ДанныеШтрихкода.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда // частичное выбытие - любой серии
			ЧастичноеВыбытиеОтдельнойНоменклатуры = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПоляПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
	ЗаполнитьЗначенияСвойств(ПоляПоиска, ДанныеШтрихкода);
	
	Серии  = Объект.Серии.НайтиСтроки(ПоляПоиска);
	
	ПоляПоиска.Вставить("МаркируемаяПродукция", МаркируемаяПродукция);
	
	Товары          = Объект.Товары.НайтиСтроки(ПоляПоиска);
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("АкцизнаяМарка", ДанныеШтрихкода.ШтрихкодУпаковки);
	
	ПоискСтрокШтрихкодовУпаковки = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	
	Если ПоискСтрокШтрихкодовУпаковки.Количество() Тогда
		СтрокаШтрихкодаУпаковки = ПоискСтрокШтрихкодовУпаковки[0];
	КонецЕсли;
	
	ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		ДанныеШтрихкода,
		ПараметрыСканирования,,
		Истина);
	ОбновляемаяСтрока                = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода);
	ОбновляемаяСтрока.ЧастичноеВыбытиеОтдельнойНоменклатуры = ЧастичноеВыбытиеОтдельнойНоменклатуры;
	
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета
		Или ЭтоСтрокаДанныхЧастичногоВыбытия Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.Количество;
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
	Иначе
		КоличествоМаркируемыхЕдиниц = 1;
	КонецЕсли;
	
	ОбновляемаяСтрока.Количество = КоличествоМаркируемыхЕдиниц;
	
	Если ЭтоСтрокаДанныхЧастичногоВыбытия Тогда
		ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(ОбновляемаяСтрока.Номенклатура)[ОбновляемаяСтрока.Номенклатура];
		ОбновляемаяСтрока.Вставить("Упаковка", ОписаниеНоменклатуры.УпаковкаЧастичногоВыбытия);
		ОбновляемаяСтрока.КоличествоУпаковок = ОбновляемаяСтрока.КоличествоУпаковок
			* ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке
			* ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
		ПоляПоиска.Вставить("Упаковка", ОписаниеНоменклатуры.УпаковкаЧастичногоВыбытия);
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	Если Товары.Количество() = 0 Тогда
		
		ПоляПоиска.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		Товары = Объект.Товары.НайтиСтроки(ПоляПоиска);
		
	КонецЕсли;
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если Товары.Количество() > 0 Тогда
		
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из Товары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
		
		Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
			КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
		КонецЕсли;
		
		СтрокаТовары = Товары[0];
		
		Если ВсегоВКеше = 0 Тогда
			СтрокаТовары.МаркируемаяПродукция = МаркируемаяПродукция;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбновляемаяСтрока.Серия)
			И Не ЗначениеЗаполнено(СтрокаТовары.Серия)
			И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			
			СтрокаТовары.Серия = ОбновляемаяСтрока.Серия;
			НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
				СтрокаТовары, КэшированныеЗначения, ПараметрыУказанияСерий);
			
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			СтрокаТовары.Количество = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
			РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.МаркируемаяПродукция = МаркируемаяПродукция;
		СтрокаТовары.Штрихкод             = ДанныеШтрихкода.EAN;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС",
				ОбработкаТабличнойЧастиКлиентСерверЛокализация.ПараметрыЗаполненияНоменклатурыЕГАИСДляЧека(Форма.Объект));
		КонецЕсли;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
			СтрокаТовары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	//Дополнить серии при необходимости. Не зависит от изменений в ТЧ Товары.
	Если ЗначениеЗаполнено(ОбновляемаяСтрока.Серия)
		И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
		
		СтрокаТовары.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		Если Серии.Количество() = 0 Тогда
			НоваяСтрокаСерия = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерия, ОбновляемаяСтрока);
			НоваяСтрокаСерия.Помещение = СтрокаТовары.Помещение;
		Иначе
			Серии[0].Количество = Серии[0].Количество + ОбновляемаяСтрока.Количество;
		КонецЕсли;
		//Обновить статусы указания серий
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(
			СтрокаТовары, КэшированныеЗначения, ПараметрыУказанияСерий);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
			ПараметрыУказанияСерий, СтрокаТовары.ПолучитьИдентификатор(), КэшированныеЗначения);
	КонецЕсли;
	
	Если ОбработатьБезМаркировки Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		
		ОтборАкцизныхМарок = Новый Структура("АкцизнаяМарка", РодительскийШтрихкод);
		РодительУказан = Объект.АкцизныеМарки.НайтиСтроки(ОтборАкцизныхМарок).Количество();
		
		Если Не РодительУказан Тогда
			НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
			НоваяСтрокаУпаковки.АкцизнаяМарка = РодительскийШтрихкод;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаШтрихкодаУпаковки = Неопределено Тогда
			
			СтрокаШтрихкодаУпаковки               = Объект.АкцизныеМарки.Добавить();
			СтрокаШтрихкодаУпаковки.АкцизнаяМарка = ДанныеШтрихкода.ШтрихкодУпаковки;
			
		КонецЕсли;
		
		ПредыдущееЗначениеЧастичноеВыбытиеКоличество = СтрокаШтрихкодаУпаковки.ЧастичноеВыбытиеКоличество;
		
		ШтрихкодированиеИСМП.ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(
			СтрокаШтрихкодаУпаковки,
			ДанныеШтрихкода,
			ПараметрыСканирования);
		
		СтрокаШтрихкодаУпаковки.ЧастичноеВыбытиеКоличество = СтрокаШтрихкодаУпаковки.ЧастичноеВыбытиеКоличество + ПредыдущееЗначениеЧастичноеВыбытиеКоличество;
		
	КонецЕсли;
	
	//дополнить кеш
	ПроверкаИПодборПродукцииИС.ДополнитьКеш(Форма, ОбновляемаяСтрока);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ДанныеШтрихкода - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ДанныеШтрихкода
//	ПараметрыСканирования - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ПараметрыСканирования
//	ВложенныеШтрихкоды - см. ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции.ДеревоУпаковок
// Возвращаемое значение:
//	см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
	
	ЗаполнитьТоварыИАкцизныеМаркиМаркируемойпродукции(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	ДокументОбъект = Форма.Объект;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(
			Форма, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ВидПродукции <> Неопределено
			И СтрокаДерева.Номенклатура <> Неопределено
			И СтрокаДерева.Характеристика <> Неопределено
			И СтрокаДерева.Серия <> Неопределено
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Если ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(СтрокаДерева.ВидПродукции) <> Неопределено Тогда
				
				ПараметрыЗаполнения.Вставить("РодительскийШтрихкод", УпаковкаВерхнегоУровня);
				ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыЗаполнения.ПараметрыСканирования, ПараметрыЗаполнения);
				
			ИначеЕсли СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				
				#Область АлкогольнаяПродукция
				СерииУказываютсяВТабличнойЧастиТовары = СерииУказываютсяВТабличнойЧастиТовары(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения);
			
				ВыполнитьПоискПоНоменклатуре = Истина;
				Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
					
					ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаДерева.ИдентификаторСтроки);
					СтрокиТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
					
					Если СтрокиТовары.Количество() > 0 Тогда
						ВыполнитьПоискПоНоменклатуре = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВыполнитьПоискПоНоменклатуре Тогда
					
					Если СерииУказываютсяВТабличнойЧастиТовары <> Неопределено
						И СерииУказываютсяВТабличнойЧастиТовары Тогда
						
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура",      СтрокаДерева.Номенклатура);
						ПараметрыОтбора.Вставить("Характеристика",    СтрокаДерева.Характеристика);
						ПараметрыОтбора.Вставить("Серия",             СтрокаДерева.Серия);
						
					Иначе
						
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура",      СтрокаДерева.Номенклатура);
						ПараметрыОтбора.Вставить("Характеристика",    СтрокаДерева.Характеристика);
						
					КонецЕсли;
					
					РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
						ДокументОбъект.Товары, ПараметрыОтбора,
						Неопределено, СтрокаДерева.АлкогольнаяПродукция, ПараметрыЗаполнения);
					
					СтрокаТЧТовары                  = РезультатПоиска.ПолноеСоответствие;
					СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
					
				Иначе
					
					СтрокаТЧТовары                  = СтрокиТовары[0];
					СтрокиТЧДляУменьшенияКоличества = Неопределено;
					
				КонецЕсли;
				
				Если СтрокиТЧДляУменьшенияКоличества = Неопределено
					И СтрокаТЧТовары = Неопределено Тогда
					
					СтрокаТЧТовары = ДокументОбъект.Товары.Добавить();
					
					СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
					СтрокаТЧТовары.Номенклатура      = СтрокаДерева.Номенклатура;
					СтрокаТЧТовары.Характеристика    = СтрокаДерева.Характеристика;
					СтрокаТЧТовары.Серия             = СтрокаДерева.Серия;
					
					Если Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
						СтрокаТЧТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
					Иначе
						СтрокаТЧТовары.ИдентификаторСтроки = СтрокаДерева.ИдентификаторСтроки;
					КонецЕсли;
					
					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
					
					ПроверитьСериюРассчитатьСтатус = Новый Структура;
					ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  ДокументОбъект.Склад);
					ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
					
					Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
						СтрокаТЧТовары.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
						СтрокаТЧТовары.Серия = Неопределено;
					КонецЕсли;
					
				ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
					И СтрокаТЧТовары <> Неопределено Тогда
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
					
				Иначе
					
					Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
						
						Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
							
							Если СтрокаТЧТовары = Неопределено Тогда
								
								СтрокаТЧТовары = СтрокаТЧДляУменьшенияКоличества;
								
								СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
								
							Иначе
								
								ДокументОбъект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
								
								Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
								Если Индекс <> Неопределено Тогда
									ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
								КонецЕсли;
								
							КонецЕсли;
							
							АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
							
						Иначе
							
							СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
							ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
							
							Если СтрокаТЧТовары = Неопределено Тогда
								
								СтрокаТЧТовары = ДокументОбъект.Товары.Вставить(ДокументОбъект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
								ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
								
								СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
								
								АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
								
							Иначе
								
								АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
								
							КонецЕсли;
							
						КонецЕсли;
						
						Прервать;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(
					СтрокаТЧТовары.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
					
					СтруктураПоискаСерий = Новый Структура;
					СтруктураПоискаСерий.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
					СтруктураПоискаСерий.Вставить("Характеристика", СтрокаДерева.Характеристика);
					СтруктураПоискаСерий.Вставить("Серия",          СтрокаДерева.Серия);
					
					СтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерии.Количество() = 0 Тогда
						
						СтрокаТЧСерии = ДокументОбъект.Серии.Добавить();
						СтрокаТЧСерии.Номенклатура   = СтрокаДерева.Номенклатура;
						СтрокаТЧСерии.Характеристика = СтрокаДерева.Характеристика;
						СтрокаТЧСерии.Серия          = СтрокаДерева.Серия;
						СтрокаТЧСерии.Количество     = СтрокаТЧТовары.Количество;
						
					Иначе
						
						СтрокаТЧСерии = СтрокиСерии[0];
						Если СтрокаТЧСерии.Количество < СтрокаТЧТовары.Количество Тогда
							СтрокаТЧСерии.Количество = СтрокаТЧТовары.Количество;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧТовары.ИдентификаторСтроки) Тогда
					СтрокаТЧТовары.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				
				СтрокаТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.Добавить();
				СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = СтрокаТЧТовары.ИдентификаторСтроки;
				СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = СтрокаДерева.ШтрихкодУпаковки;
				СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
				СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки    = УпаковкаВерхнегоУровня;
				
				#КонецОбласти
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область АлкогольнаяПродукция

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.НоменклатураЕГАИС                                   КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                               КАК Серия,
	|	ТабличнаяЧасть.Количество                                          КАК Количество
	|ПОМЕСТИТЬ
	|	ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                               КАК Серия,
	|	ТабличнаяЧасть.Количество                                          КАК Количество
	|ПОМЕСТИТЬ
	|	ВТСерии
	|ИЗ
	|	&Серии КАК ТабличнаяЧасть;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция                                КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ЕСТЬNULL(ТаблицаСерии.Серия, ТабличнаяЧасть.Серия)                 КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)                    КАК Справка2,
	|	СУММА(ЕСТЬNULL(ТаблицаСерии.Количество,ТабличнаяЧасть.Количество)) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)               КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСерии КАК ТаблицаСерии
	|		ПО ТаблицаСерии.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТабличнаяЧасть.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	Не СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И СправочникНоменклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Характеристика,
	|	ЕСТЬNULL(ТаблицаСерии.Серия, ТабличнаяЧасть.Серия),
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//	ДокументСсылка - см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу.ДокументСсылка
//	ЗаполнитьСправки2ИзРегистра - см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу.ЗаполнитьСправки2ИзРегистра
//
// Возвращаемое значение:
//	см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу
//
Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Возврат ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ЗаполнитьСправки2ИзРегистра);
	
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ДанныеШтрихкода - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ДанныеШтрихкода
//	ПараметрыСканирования - см. АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок.ПараметрыСканирования
//	  
// Возвращаемое значение:
//	см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
	
	ПараметрыПоискаСтатусаУказанияСерии = Новый Структура;
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	
	ЭтоЧастичноеВыбытие = ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ШтрихкодированиеЕГАИСКлиентСервер.ЭтоЧастичноеВыбытие(ДанныеШтрихкода);
	
	Если Не ЭтоЧастичноеВыбытие
		И ДанныеШтрихкода.Коэффициент <> Неопределено
		И ДанныеШтрихкода.Коэффициент > 0 Тогда
		КоличествоПродукции = ДанныеШтрихкода.Коэффициент;
	Иначе
		КоличествоПродукции = ДанныеШтрихкода.Количество;
	КонецЕсли;
	
	РаспределенноеКоличество = 0;
	Пока РаспределенноеКоличество < КоличествоПродукции Цикл
		
		ОсталосьРаспределить = КоличествоПродукции - РаспределенноеКоличество;
		
		НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(ПараметрыПоискаСтатусаУказанияСерии);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
				НайденныеСтроки[0].СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          ДанныеШтрихкода.Серия);
				
			Иначе
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          Справочники.СерииНоменклатуры.ПустаяСсылка());
				
			КонецЕсли;
			
			РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
				Форма.Объект.Товары, ПараметрыОтбора,
				Неопределено, ДанныеШтрихкода.АлкогольнаяПродукция, ПараметрыЗаполнения);
			
			СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
			СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
			
		Иначе
			
			СтрокаТЧ                        = Неопределено;
			СтрокиТЧДляУменьшенияКоличества = Неопределено;
			
		КонецЕсли;
		
		Если СтрокиТЧДляУменьшенияКоличества = Неопределено
			И СтрокаТЧ = Неопределено Тогда
			
			СтрокаТЧ = Форма.Объект.Товары.Добавить();
			СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
			СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
			СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
			СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;
			СтрокаТЧ.МаркируемаяПродукция = ДанныеШтрихкода.МаркируемаяПродукция;
			СтрокаТЧ.Штрихкод             = ДанныеШтрихкода.EAN;
			
			ПроверитьСериюРассчитатьСтатус = Новый Структура;
			ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  Форма.Объект.Склад);
			ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
			
			Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
				СтрокаТЧ.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
				СтрокаТЧ.Серия = Неопределено;
			КонецЕсли;
			
			АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(
				СтрокаТЧ, ПараметрыЗаполнения,
				ОсталосьРаспределить, ДанныеШтрихкода.МаркируемаяПродукция);
			
			РаспределенноеКоличество = РаспределенноеКоличество + ОсталосьРаспределить;
			
		ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
			И СтрокаТЧ <> Неопределено Тогда
			
			ОбработатьИзмененнуюСтроку(
				Форма, СтрокаТЧ, ПараметрыЗаполнения,
				ОсталосьРаспределить, ДанныеШтрихкода.МаркируемаяПродукция);
			
			РаспределенноеКоличество = РаспределенноеКоличество + ОсталосьРаспределить;
			
		Иначе
			
			Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
				
				Если СтрокаТЧДляУменьшенияКоличества.Количество >= ОсталосьРаспределить Тогда
					КоличествоКОбработке = ОсталосьРаспределить;
				Иначе
					КоличествоКОбработке = СтрокаТЧДляУменьшенияКоличества.Количество;
				КонецЕсли;
				
				Если СтрокаТЧДляУменьшенияКоличества.Количество <= КоличествоКОбработке Тогда
					
					Если СтрокаТЧ = Неопределено Тогда
						
						СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;
						
						СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
						
					Иначе
						
						Форма.Объект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
						
						Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
						Если Индекс <> Неопределено Тогда
							ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
						КонецЕсли;
						
						ОбработатьИзмененнуюСтроку(
							Форма, СтрокаТЧ, ПараметрыЗаполнения,
							КоличествоКОбработке, ДанныеШтрихкода.МаркируемаяПродукция);
					
					КонецЕсли;
					
					РаспределенноеКоличество = РаспределенноеКоличество + КоличествоКОбработке;
					
				Иначе
					
					СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - КоличествоКОбработке;
					ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
					
					Если СтрокаТЧ = Неопределено Тогда
						
						СтрокаТЧ = Форма.Объект.Товары.Вставить(Форма.Объект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
						
						СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
						
						АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(
							СтрокаТЧ, ПараметрыЗаполнения,
							КоличествоКОбработке, ДанныеШтрихкода.МаркируемаяПродукция);
						
					Иначе
						
						ОбработатьИзмененнуюСтроку(
							Форма, СтрокаТЧ, ПараметрыЗаполнения,
							КоличествоКОбработке, ДанныеШтрихкода.МаркируемаяПродукция);
						
					КонецЕсли;
					
					РаспределенноеКоличество = РаспределенноеКоличество + КоличествоКОбработке;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
			СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(
			СтрокаТЧ.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
			
			СтруктураПоискаСерий = Новый Структура;
			СтруктураПоискаСерий.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			СтруктураПоискаСерий.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураПоискаСерий.Вставить("Серия",          ДанныеШтрихкода.Серия);
			
			СтрокиСерии = Форма.Объект.Серии.НайтиСтроки(СтруктураПоискаСерий);
			Если СтрокиСерии.Количество() = 0 Тогда
				
				СтрокаТЧСерии = Форма.Объект.Серии.Добавить();
				СтрокаТЧСерии.Номенклатура   = ДанныеШтрихкода.Номенклатура;
				СтрокаТЧСерии.Характеристика = ДанныеШтрихкода.Характеристика;
				СтрокаТЧСерии.Серия          = ДанныеШтрихкода.Серия;
				СтрокаТЧСерии.Количество     = СтрокаТЧ.Количество;
				
			Иначе
				
				СтрокаТЧСерии = СтрокиСерии[0];
				Если СтрокаТЧСерии.Количество < СтрокаТЧ.Количество Тогда
					СтрокаТЧСерии.Количество = СтрокаТЧ.Количество;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеШтрихкода.МаркируемаяПродукция = Истина Тогда
		
		АкцизныеМаркиСтрокаТЧ = Форма.Объект.АкцизныеМарки.Добавить();
		АкцизныеМаркиСтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка       = ДанныеШтрихкода.ШтрихкодУпаковки;
		АкцизныеМаркиСтрокаТЧ.Справка2            = ДанныеШтрихкода.Справка2;
		
		Если ЭтоЧастичноеВыбытие Тогда
			АкцизныеМаркиСтрокаТЧ.ЧастичноеВыбытиеКоличество     = КоличествоПродукции;
			АкцизныеМаркиСтрокаТЧ.ЧастичноеВыбытиеВариантУчета   = ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета;
			АкцизныеМаркиСтрокаТЧ.ЧастичноеВыбытиеНоменклатура   = ДанныеШтрихкода.Номенклатура;
			АкцизныеМаркиСтрокаТЧ.ЧастичноеВыбытиеХарактеристика = ДанныеШтрихкода.Характеристика;
			АкцизныеМаркиСтрокаТЧ.ВыбытиеБутылки                 = ДанныеШтрихкода.ВыбытиеБутылки;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьИзмененнуюСтроку(Форма, СтрокаТЧТовары, ПараметрыЗаполнения, Количество, ЭтоМаркируемаяПродукция = Истина) Экспорт
	
	КоличествоАкцизныхМарок = 0;
	
	ПоискСУчетомТЧСерии = Форма.Объект.Серии.Количество() > 0;
	СтруктураПоискаАкцизныхМарок = Новый Структура("Номенклатура, Характеристика, Серия");
	Если Не ПоискСУчетомТЧСерии Тогда
		
		СтруктураПоискаАкцизныхМарок.Номенклатура   = СтрокаТЧТовары.Номенклатура;
		СтруктураПоискаАкцизныхМарок.Характеристика = СтрокаТЧТовары.Характеристика;
		СтруктураПоискаАкцизныхМарок.Серия          = СтрокаТЧТовары.Серия;
		НайденныеСтроки = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаАкцизныхМарок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			КоличествоАкцизныхМарок = НайденныеСтроки[0].Количество;
		КонецЕсли;
		
	Иначе
		
		СтруктураПоискаСерий = Новый Структура("Номенклатура, Характеристика",
			СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика);
		НайденныеСтрокиСерий = Форма.Объект.Серии.НайтиСтроки(СтруктураПоискаСерий);
		
		Если НайденныеСтрокиСерий.Количество() > 0 Тогда
			Для Каждого СтрокаСерий Из НайденныеСтрокиСерий Цикл
				
				СтруктураПоискаАкцизныхМарок.Номенклатура   = СтрокаТЧТовары.Номенклатура;
				СтруктураПоискаАкцизныхМарок.Характеристика = СтрокаТЧТовары.Характеристика;
				СтруктураПоискаАкцизныхМарок.Серия          = СтрокаСерий.Серия;
				НайденныеСтроки = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаАкцизныхМарок);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + НайденныеСтроки[0].Количество;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтруктураПоискаАкцизныхМарок = Новый Структура("Номенклатура, Характеристика",
				СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика);
			НайденныеСтроки = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаАкцизныхМарок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				КоличествоАкцизныхМарок = НайденныеСтроки[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоДобавленнаяСтрока = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТЧТовары) <> Неопределено;
	ЭтоИзмененнаяСтрока  = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧТовары) <> Неопределено;
	
	Если ПараметрыЗаполнения.ДобавлятьКоличество
		Или ЭтоДобавленнаяСтрока
		Или ЭтоИзмененнаяСтрока Тогда
		
		Если ЭтоМаркируемаяПродукция Тогда
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + Количество;
			Если КоличествоАкцизныхМарок > СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] Тогда
				СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] = КоличествоАкцизныхМарок;
			КонецЕсли;
		Иначе
			СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] = СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] + Количество;
		КонецЕсли;
		
		Если ЭтоДобавленнаяСтрока Тогда
			Если ЭтоМаркируемаяПродукция Тогда
				Если КоличествоАкцизныхМарок > СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок] Тогда
					СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок] = КоличествоАкцизныхМарок;
				КонецЕсли;
			Иначе
				СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок] = СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок] + Количество;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ЭтоМаркируемаяПродукция Тогда
			КоличествоАкцизныхМарок = Количество;
		КонецЕсли;
		СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиКоличество] = Количество;
	КонецЕсли;
	
	Если Не ЭтоИзмененнаяСтрока И Не ЭтоДобавленнаяСтрока Тогда
		ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧТовары);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			СерииУказываютсяВТабличнойЧастиТовары = СерииУказываютсяВТабличнойЧастиТовары(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения);
			
			ВыполнитьПоискПоНоменклатуре = Истина;
			Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
				
				ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаДерева.ИдентификаторСтроки);
				СтрокиТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиТовары.Количество() > 0 Тогда
					ВыполнитьПоискПоНоменклатуре = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыполнитьПоискПоНоменклатуре Тогда
				
				Если СерииУказываютсяВТабличнойЧастиТовары <> Неопределено
					И СерииУказываютсяВТабличнойЧастиТовары Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",      СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика",    СтрокаДерева.Характеристика);
					ПараметрыОтбора.Вставить("Серия",             СтрокаДерева.Серия);
					
				Иначе
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",      СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика",    СтрокаДерева.Характеристика);
					
				КонецЕсли;
				
				РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
					ДокументОбъект.Товары, ПараметрыОтбора,
					Неопределено, СтрокаДерева.АлкогольнаяПродукция, ПараметрыЗаполнения);
				
				СтрокаТЧТовары                  = РезультатПоиска.ПолноеСоответствие;
				СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
				
			Иначе
				
				СтрокаТЧТовары                  = СтрокиТовары[0];
				СтрокиТЧДляУменьшенияКоличества = Неопределено;
				
			КонецЕсли;
			
			ЭтоЧастичноеВыбытие = ШтрихкодированиеЕГАИСКлиентСервер.ЭтоЧастичноеВыбытие(СтрокаДерева);
			
			Если ЭтоЧастичноеВыбытие Тогда
				Количество = СтрокаДерева.ЧастичноеВыбытиеКоличество;
			ИначеЕсли СтрокаДерева.Коэффициент <> Неопределено И СтрокаДерева.Коэффициент > 0 Тогда
				Количество = СтрокаДерева.Коэффициент;
			Иначе
				Количество = 1;
			КонецЕсли;
			
			Если СтрокиТЧДляУменьшенияКоличества = Неопределено
				И СтрокаТЧТовары = Неопределено Тогда
				
				СтрокаТЧТовары = ДокументОбъект.Товары.Добавить();
				
				СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
				СтрокаТЧТовары.Номенклатура      = СтрокаДерева.Номенклатура;
				СтрокаТЧТовары.Характеристика    = СтрокаДерева.Характеристика;
				СтрокаТЧТовары.Серия             = СтрокаДерева.Серия;
						
				Если Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
					СтрокаТЧТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				Иначе
					СтрокаТЧТовары.ИдентификаторСтроки = СтрокаДерева.ИдентификаторСтроки;
				КонецЕсли;
				
				АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество);
				
				ПроверитьСериюРассчитатьСтатус = Новый Структура;
				ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  ДокументОбъект.Склад);
				ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
				
				Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
					СтрокаТЧТовары.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
					СтрокаТЧТовары.Серия = Неопределено;
				КонецЕсли;
				
			ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
				И СтрокаТЧТовары <> Неопределено Тогда
				
				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество);
				
			Иначе
				
				Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
					
					Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
						
						Если СтрокаТЧТовары = Неопределено Тогда
							
							СтрокаТЧТовары = СтрокаТЧДляУменьшенияКоличества;
							
							СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
							
						Иначе
							
							ДокументОбъект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
							
							Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
							Если Индекс <> Неопределено Тогда
								ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
							КонецЕсли;
							
						КонецЕсли;
						
						АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество);
						
					Иначе
						
						СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
						ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
						
						Если СтрокаТЧТовары = Неопределено Тогда
							
							СтрокаТЧТовары = ДокументОбъект.Товары.Вставить(ДокументОбъект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
							ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
							
							СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
							
							АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество);
							
						Иначе
							
							АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(
				СтрокаТЧТовары.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
				
				СтруктураПоискаСерий = Новый Структура;
				СтруктураПоискаСерий.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
				СтруктураПоискаСерий.Вставить("Характеристика", СтрокаДерева.Характеристика);
				СтруктураПоискаСерий.Вставить("Серия",          СтрокаДерева.Серия);
				
				СтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(СтруктураПоискаСерий);
				Если СтрокиСерии.Количество() = 0 Тогда
					
					СтрокаТЧСерии = ДокументОбъект.Серии.Добавить();
					СтрокаТЧСерии.Номенклатура   = СтрокаДерева.Номенклатура;
					СтрокаТЧСерии.Характеристика = СтрокаДерева.Характеристика;
					СтрокаТЧСерии.Серия          = СтрокаДерева.Серия;
					СтрокаТЧСерии.Количество     = СтрокаТЧТовары.Количество;
					
				Иначе
					
					СтрокаТЧСерии = СтрокиСерии[0];
					Если СтрокаТЧСерии.Количество < СтрокаТЧТовары.Количество Тогда
						СтрокаТЧСерии.Количество = СтрокаТЧТовары.Количество;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧТовары.ИдентификаторСтроки) Тогда
				СтрокаТЧТовары.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			СтрокаТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.Добавить();
			СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = СтрокаТЧТовары.ИдентификаторСтроки;
			СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = СтрокаДерева.ШтрихкодУпаковки;
			СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
			СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки    = УпаковкаВерхнегоУровня;
			
			Если ЭтоЧастичноеВыбытие Тогда
				СтрокаТЧАкцизныеМарки.ЧастичноеВыбытиеКоличество     = СтрокаДерева.ЧастичноеВыбытиеКоличество;
				СтрокаТЧАкцизныеМарки.ЧастичноеВыбытиеВариантУчета   = СтрокаДерева.ЧастичноеВыбытиеВариантУчета;
				СтрокаТЧАкцизныеМарки.ЧастичноеВыбытиеНоменклатура   = СтрокаДерева.Номенклатура;
				СтрокаТЧАкцизныеМарки.ЧастичноеВыбытиеХарактеристика = СтрокаДерева.Характеристика;
				СтрокаТЧАкцизныеМарки.ВыбытиеБутылки                 = СтрокаДерева.ВыбытиеБутылки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца
//
//Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ДанныеШтрихкода - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ДанныеШтрихкода
//	ПараметрыСканирования - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ПараметрыСканирования
//
// Возвращаемое значение:
//	см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

Функция СерииУказываютсяВТабличнойЧастиТовары(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", СтрокаДерева.Характеристика);
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СерииУказываютсяВТабличнойЧастиТовары = НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
		                                                                 НайденныеСтроки[0].СтатусУказанияСерий,
		                                                                 ПараметрыЗаполнения.ПараметрыУказанияСерий);
	Иначе
		СерииУказываютсяВТабличнойЧастиТовары = Неопределено;
	КонецЕсли;
	
	Возврат СерииУказываютсяВТабличнойЧастиТовары;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- Локализация

#КонецОбласти
