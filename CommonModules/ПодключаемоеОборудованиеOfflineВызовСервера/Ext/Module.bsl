#Область ПрограммныйИнтерфейс

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//  ВыполненоУспешно - Булево - Признак успешного выполнения операции.
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно);
	
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//  СтруктураДанные - Структура -
//  ВыполненоУспешно - Булево - Признак успешного выполнения операции.
//  РасширеннаяВыгрузка - Булево -
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно, РасширеннаяВыгрузка);
	
КонецПроцедуры

#Область ВыгрузкаТоваров

// Функция возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Устройство для которого необходимо получить данные.
//  ТолькоИзмененные - Булево - Флаг получения только измененных данных.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * Данные - Массив - Выгружаемые данные.
//  * КоличествоНеВыгруженныхСтрокСОшибками - Число - Количество строк с ошибками.
//  * ЧастичнаяВыгрузка - Булево - Признак частичной выгрузки.
//  * Параметры - Структура - см. функцию ПолучитьПараметрыУстройства.
//
Функция ПолучитьДанныеДляВесов(Устройство, ТолькоИзмененные = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ПолучитьДанныеДляВесов(ВозвращаемоеЗначение, Устройство, ТолькоИзмененные);
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Функция получает параметры устройства
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  * УзелИнформационнойБазы - ПланОбменаСсылка - узел информационной базы.
//  * Склад - СправочникСсылка.Склады - Склад.
//  * ВидЦены - СправочникСсылка.ВидыЦен - Вид цены.
//  * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования - тип оборудования.
//  * МаксимальныйКод - Число - Максимальный код.
//  * ВыгружатьИзменения - Булево - Признак необходимости выгрузки изменений.
//
Функция ПолучитьПараметрыУстройства(Устройство) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ПолучитьПараметрыУстройства(ВозвращаемоеЗначение, Устройство);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗарегистрироватьИзменения(Устройство);
	
КонецПроцедуры

// Процедура заполняет структуру прайс-листа для выгрузке на ККМ Offline в расширенном формате (с группами товаров)
//
Процедура ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(СтруктураПрайсЛиста, ТоварыКВыгрузке) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(СтруктураПрайсЛиста, ТоварыКВыгрузке);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромКодыТоваровПодключаемогоОборудования

// Максимальный код весового товара.
// 
// Возвращаемое значение:
//  Число - Максимальный код весового товара.
//
Функция МаксимальныйКодВесовогоТовара() Экспорт
	
	Возврат 99999;
	
КонецФункции

// Функция возвращает максимальный код товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//
// Возвращаемое значение:
//  Число - Максимальный код товара для заданного правила обмена.
//
Функция ПолучитьМаксимальныйКод(ПравилоОбмена) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КодыТоваровПодключаемогоОборудованияOffline.Код), 0) КАК Код
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МаксимальныйКодВесовогоТовара = МаксимальныйКодВесовогоТовара();
	
	Если Выборка.Следующий() Тогда
		
		Код = Выборка.Код;
		Если Код < МаксимальныйКодВесовогоТовара Тогда
			Код = МаксимальныйКодВесовогоТовара;	
		КонецЕсли;
		
		Возврат Код;

	Иначе
		Возврат МаксимальныйКодВесовогоТовара;
	КонецЕсли;
	
КонецФункции

// Функция возвращает таблицу свободных кодов товара в регистре КодыТоваровПодключаемогоОборудованияOffline
// для заданного правила обмена. Свободными являются коды, для которых не задана соответствующая номенклатура.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  Количество - Число - Необходимое количество свободных кодов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица свободных кодов товаров с колонками:
//  * Код - Число - свободный код.
//
Функция ПолучитьСвободныеКоды(ПравилоОбмена, Количество = 0) Экспорт
	
	Если Количество = 0 Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
		|ИЗ
		|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
		|ГДЕ
		|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
		|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодыТоваровПодключаемогоОборудованияOffline.Код Возр";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 0
		|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
		|ИЗ
		|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
		|ГДЕ
		|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
		|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодыТоваровПодключаемогоОборудованияOffline.Код Возр";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0", "" + Формат(Количество, "ЧГ=0"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает в регистр КодыТоваровПодключаемогоОборудованияOffline
// код для заданного правила обмена и соответствующие ему параметры номенклатуры.
//
// Параметры:
//  Данные        - Структура - Структура, содержащая поля:
//   * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура.
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//   * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка.
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline
//  Код           - Число - Код товара в разрезе правила обмена.
//  Используется  - Число - Признак того, что товар соответствует заданному в правиле обмена отбору.
//
Процедура ЗаписатьКод(Данные, ПравилоОбмена, Код, Используется) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	
	МенеджерЗаписи.Код             = Код;
	МенеджерЗаписи.ПравилоОбмена   = ПравилоОбмена;
	МенеджерЗаписи.Используется    = Используется;
	
	МенеджерЗаписи.Записать();

КонецПроцедуры

// Процедура очищает параметры номенклатуры для записи, соответствующей коду в пределах правила обмена
// в регистре КодыТоваровПодключаемогоОборудованияOffline.
// Такая запись становится свободной.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  Код           - Число - Код товара в разрезе правила обмена.
//
Процедура УдалитьКод(ПравилоОбмена, Код) Экспорт
	
	ЗаписатьКод(Новый Структура("Номенклатура, Характеристика, Упаковка"), ПравилоОбмена, Код , Ложь);
	
КонецПроцедуры

// Процедура обновляет записи в регистре КодыТоваровПодключаемогоОборудованияOffline
// в соответствии с правилом обмена. Записи, не соответствующие отбору правила становятся
// неиспользуемыми. Добавляются новые записи, соответствующие отбору, если такие будут найдены.
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//
Процедура ОбновитьКодыТоваров(ПравилоОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Склад.РозничныйВидЦены КАК ВидЦены,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Склад.ИндивидуальныйВидЦены КАК ИндивидуальныйВидЦены,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ЕдиницаИзмеренияВеса КАК ЕдиницаИзмеренияВеса,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных,
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипПодключаемогоОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
	
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыПравилаОбмена = Новый Структура;
		ПараметрыПравилаОбмена.Вставить("ВидЦены",                      Выборка.ВидЦены);
		ПараметрыПравилаОбмена.Вставить("ИндивидуальныйВидЦены",        Выборка.ИндивидуальныйВидЦены);
		ПараметрыПравилаОбмена.Вставить("ЕдиницаИзмеренияВеса",         Выборка.ЕдиницаИзмеренияВеса);
		ПараметрыПравилаОбмена.Вставить("НастройкиКомпоновкиДанных",    Выборка.НастройкиКомпоновкиДанных);
		ПараметрыПравилаОбмена.Вставить("ТипПодключаемогоОборудования", Выборка.ТипПодключаемогоОборудования);
		
		Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
			НастройкиАссортимента = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийНастройкиАссортимента(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоОбмена, "Склад"));
			Если НастройкиАссортимента.РозничныеЦеныИзФорматаМагазина Тогда
				РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкиАссортимента.ФорматМагазина, "РозничныйВидЦены, ИндивидуальныйВидЦены");
				ПараметрыПравилаОбмена.ВидЦены = РеквизитыОбъекта.РозничныйВидЦены;
				ПараметрыПравилаОбмена.ИндивидуальныйВидЦены = РеквизитыОбъекта.ИндивидуальныйВидЦены;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЭтоТипОфлайнОборудованияККМ(ПараметрыПравилаОбмена.ТипПодключаемогоОборудования) Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли ПараметрыПравилаОбмена.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	ЦенообразованиеВызовСервера.ПолучитьСхемуПоВерсииЦенообразования(СхемаКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ПараметрыПравилаОбменаНастройкиКомпоновкиДанных = ПараметрыПравилаОбмена.НастройкиКомпоновкиДанных; // ХранилищеЗначения
	Компоновщик.ЗагрузитьНастройки(ПараметрыПравилаОбменаНастройкиКомпоновкиДанных.Получить());
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Упаковка");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("СоответствуетОтбору");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Используется");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Весовой");
	ВыбранноеПоле.Использование = Истина;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДатаСеанса();
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПараметрыПравилаОбмена.ВидЦены;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИндивидуальныйВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПараметрыПравилаОбмена.ИндивидуальныйВидЦены;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЕдиницаИзмеренияВеса");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПараметрыПравилаОбмена.ЕдиницаИзмеренияВеса;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматШтрихкода");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода());
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИспользоватьУпаковкиНоменклатуры");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИспользоватьХарактеристикиНоменклатуры");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	НачатьТранзакцию();
	Попытка
		
		PLU = ПолучитьМаксимальныйКод( ПравилоОбмена) + 1;
		СвободныеPLU = ПолучитьСвободныеКоды(ПравилоОбмена);
		Для Каждого Капсула Из ДанныеОтчета Цикл
			Если Капсула.СоответствуетОтбору Тогда
				Если Не ЗначениеЗаполнено(Капсула.Код) Тогда
					
					Если СвободныеPLU.Количество() = 0 Тогда
						ЗаписатьКод(Капсула, ПравилоОбмена, PLU, Истина);
						PLU = PLU + 1;
					Иначе
						ЗаписатьКод(Капсула, ПравилоОбмена, СвободныеPLU[0].Код, Истина);
						СвободныеPLU.Удалить(0);
					КонецЕсли;
					
				Иначе
					ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Истина);
				КонецЕсли;
			Иначе
				ЗаписатьКод(Капсула, ПравилоОбмена, Капсула.Код, Ложь);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет обновление кодов товаров для всех правил обмена.
//
Процедура РегламентноеЗаданиеОбновитьКодыТоваров() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеКодовТоваровПодключаемогоОборудования);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'", ОбщегоНазначения.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ОбновитьКодыТоваров(Выборка.ПравилоОбмена);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'", ОбщегоНазначения.КодОсновногоЯзыка()),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru = 'Во время регламентного обновления кодов товаров подключаемого оборудования Offline произошла ошибка.'")
			                         + Символы.ПС + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление кодов товаров подключаемого оборудования Offline'", ОбщегоНазначения.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное обновление кодов товаров подключаемого оборудования Offline.'"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаТоваров

// Функция возвращает таблицу товаров с данными к выгрузке в устройство.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Устройство для которого необходимо получить данные
//  Параметры - Структура - 
//  ОбновитьКодыТоваров - Булево - Флаг обновления кодов товаров перед получением данных.
//  Штрихкод - Строка
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров к выгрузке.
//
Функция ДанныеТоваровДляВыгрузки(Устройство, Параметры, ОбновитьКодыТоваров = Ложь, Штрихкод = "") Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ДанныеТоваровДляВыгрузки(ТаблицаТоваров, Устройство, Параметры, ОбновитьКодыТоваров, Штрихкод);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#Область ТоварыПравилаВыгрузки

// Функция возвращает таблицу товаров с данными о товарам для правила выгрузки с ценами
//
// Параметры:
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  ВидЦены - СправочникСсылка.ВидыЦен - Вид цены.
//  ИндивидуальныйВидЦены - СправочникСсылка.ВидыЦен - Индивидуальный вид цены.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица товаров
//
Функция ДанныеТоваровПоПравилуОбмена(ПравилоОбмена, ВидЦены, ИндивидуальныйВидЦены) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ДанныеТоваровПоПравилуОбмена(ТаблицаТоваров, ПравилоОбмена, ВидЦены, ИндивидуальныйВидЦены);
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

// заполнение переопределяемых процедур модуля МенеджерОфлайнОборудованияПереопределяемый

Процедура ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиОборудования) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиОборудования);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМ(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузка) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗаполнитьПрайсЛистККМ(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузка);
	
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМПоШтрихкоду(ОфлайнОборудование, ПрайсЛист, Штрихкод) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗаполнитьПрайсЛистККМПоШтрихкоду(ОфлайнОборудование, ПрайсЛист, Штрихкод);
	
КонецПроцедуры

Процедура УдалитьРегистрациюПрайсЛистаПослеВыгрузки(ОфлайнОборудование) Экспорт
	
	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.УдалитьРегистрациюПрайсЛистаПослеВыгрузки(ОфлайнОборудование);
	
КонецПроцедуры

Процедура ЗагрузитьОтчетыОПродажахИзККМ(Устройство, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт

	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗагрузитьОтчетыОПродажахИзККМ(Устройство, ДанныеОПродажах, Отказ, СообщениеОбОшибке);

КонецПроцедуры

Процедура ЗагрузитьДанныеОВскрытияхТарыИзККМ(Устройство, ДанныеОВскрытияхТары, Отказ, СообщениеОбОшибке) Экспорт

	ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЗагрузитьДанныеОВскрытияхТарыИзККМ(Устройство, ДанныеОВскрытияхТары, Отказ, СообщениеОбОшибке);

КонецПроцедуры

#КонецОбласти

