
#Область ПрограммныйИнтерфейс

// Показывает форму ввода штрихкода.
// 
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение, которое будет выполнено по завершению.
Процедура ПоказатьВводШтрихкода(ОписаниеОповещения) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПоказатьВводШтрихкода(ОписаниеОповещения, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Введите штрихкод'"));
	
	ДополнительныеПараметры = Новый Структура(
		"ОповещениеУспешногоВвода, Количество",
		ОписаниеОповещения, Неопределено);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводШтрихкодаИС",
		ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("ПоказатьВводШтрихкодаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// Выполняет обработку RFID-метки. Вызывается из формы проверки и подбора маркируемой продукции.
//
// Параметры:
//  ЗавершениеОбработки - Строка - Имя описания оповещения - обработчика формы, которое произойдет при завершении обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканирован штрихкод.
//  ДанныеRFID - Структура - структура с ключами:
//   * TID - Строка - TID RFID-метки
//   * EPC - Строка - EPC RFID-метки
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ДанныеРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//  ДополнительныеПараметры - Структура
Процедура ОбработатьДанныеRFID(ЗавершениеОбработки, Форма, ДанныеRFID, ПараметрыСканирования = Неопределено, ДанныеРазбора = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(Форма);
	КонецЕсли;
	
	// Заполнение параметра ДополнительныеВариантыСопоставленияНоменклатуры выполняется только в формах
	// проверки и подбора продукции, в зависимых формах используется ранее заданное сопоставление.
	Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
		
		ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Неопределено;
		
		GTIN = ДанныеRFID.GTIN;
		
		Если GTIN <> Неопределено Тогда
			
			ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
			
			ОтборПоGTIN = Новый Структура("GTIN", GTIN);
			СтрокиТаблицыМаркируемойПродукции = Форма.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ОтборПоGTIN);
			Если СтрокиТаблицыМаркируемойПродукции.Количество() Тогда
				
				Индекс = Новый Соответствие;
				
				ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Новый Соответствие;
				ВариантыСопоставления = Новый Массив;
				Для Каждого СтрокаТаблицы Из СтрокиТаблицыМаркируемойПродукции Цикл 
					
					ИндексНоменклатура = Индекс.Получить(СтрокаТаблицы.Номенклатура);
					Если ИндексНоменклатура = Неопределено Тогда
						ИндексНоменклатура = Новый Соответствие;
					КонецЕсли;
					ИндексХарактеристика = ИндексНоменклатура.Получить(СтрокаТаблицы.Характеристика);
					Если ИндексХарактеристика = Неопределено Тогда
						ИндексХарактеристика = Новый Соответствие;
					КонецЕсли;
					
					Если ИндексХарактеристика.Получить(СтрокаТаблицы.Серия) = Неопределено Тогда
						
						ИндексХарактеристика.Вставить(СтрокаТаблицы.Серия, Истина);
						ИндексНоменклатура.Вставить(СтрокаТаблицы.Характеристика, ИндексХарактеристика);
						Индекс.Вставить(СтрокаТаблицы.Номенклатура, ИндексНоменклатура);
						
						ВариантСопоставления = Новый Структура("Номенклатура, Характеристика, Серия");
						ЗаполнитьЗначенияСвойств(ВариантСопоставления, СтрокаТаблицы);
						ВариантыСопоставления.Добавить(ВариантСопоставления);
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Вставить(
					ШтрихкодEAN, ВариантыСопоставления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИСВызовСервера.ОбработатьДанныеRFID(
		ДанныеRFID, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
	
	Если РезультатОбработкиШтрихкода <> Неопределено Тогда
		
		ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		
		Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.НормализованныйШтрихкод) <> Неопределено Тогда
				РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
			Или Не ПустаяСтрока(РезультатОбработкиШтрихкода.ТекстОшибки)
			Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
			Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки
			Или (РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
				И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена)
			Или ШтрихкодированиеОбщегоНазначенияИСКлиент.ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
			
			ДанныеШтрихкодаRFID = Новый Структура;
			ДанныеШтрихкодаRFID.Вставить("Штрихкод",   ДанныеШтрихкода.НормализованныйШтрихкод);
			ДанныеШтрихкодаRFID.Вставить("Количество", 1);
			ДанныеШтрихкодаRFID.Вставить("ДанныеRFID", ДанныеШтрихкода.ДанныеRFID);
			
			ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("","",ЗавершениеОбработки);
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработкиШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
			ПараметрыЗавершенияВводаШтрихкода.Форма                         = Форма;
			ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ДанныеШтрихкодаRFID;
			ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента         = Ложь;
			
			ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			
		Иначе
			
			ОповещениеЗавершениеОбработки = Новый ОписаниеОповещения(ЗавершениеОбработки, Форма, ДополнительныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет завершение после показа формы ввода штрихкода.
// 
// Параметры:
//  Результат - Произвольный - Результат ввода.
//  ДополнительныеПараметры - Структура - Параметры описания оповещения.
Процедура ПоказатьВводШтрихкодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	Количество = ДополнительныеПараметры.Количество;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Штрихкод = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ФорматBase64 Тогда
			Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Результат.Штрихкод);
		Иначе
			Штрихкод = Результат.Штрихкод;
		КонецЕсли;
	КонецЕсли;
	
	Если Штрихкод = Неопределено Или ПустаяСтрока(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) > 200 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Длина штрихкода не должна быть больше 200 символов.'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОповещениеУспешногоВвода,
		Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
	
КонецПроцедуры

// В случае успешного сопоставления номенклатуры неизвестным штрихкодам выполняет повторную попытку обработки штрихкода.
// 
// Параметры:
//  Результат - Произвольный - результат сопоставления неизветсной номенклатуры штрихкодам формата EAN.
//  ДополнительныеПараметры - Структура - параметры описания оповещения.
Процедура СопоставлениеНоменклатурыШтрихкодамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульПроверкаИПодборПродукцииИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиент");
		МодульПроверкаИПодборПродукцииИСМПКлиент.ОповеститьОСопоставленииНоменклатурыШтрихкодам(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(
			ДополнительныеПараметры.ПараметрыСканирования.КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПовторнойОбработки, ДополнительныеПараметры.ИсходныеДанные);
	
КонецПроцедуры

#Область РаботаСФормойКодаМаркировки

//Открывает форму ввода кода маркировки.
//
//Параметры:
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой необходимо выполнить открытие.
//   ПараметрыОткрытия - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыОткрытияФормыВводаКодаМаркировки.
//   ОповещениеОЗавершении - ОписаниеОповещения, Неопределено - действие после закрытия формы ввода кода маркировки
//
Процедура ОткрытьФормуСчитыванияКодаМаркировки(ФормаВладелец, ПараметрыОткрытия, ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если ПараметрыОткрытия.МаркируемаяПродукция <> Истина Тогда
		
		ПоказатьПредупреждение(
			Неопределено, НСтр("ru = 'Для данной строки не указываются акцизные марки'"));
		
		Возврат;
	КонецЕсли;
	
	Если ОповещениеОЗавершении = Неопределено Тогда
		//@skip-warning поведение по-умолчанию если обработчик не указан
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ФормаВладелец);
	КонецЕсли;
	
	Если ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		И ШтрихкодированиеОбщегоНазначенияИСКлиент.ПрисутствуетАлкогольнаяПродукция(
			ПараметрыОткрытия.ПараметрыСканирования.ДопустимыеВидыПродукции,
			ПараметрыОткрытия.ПараметрыСканирования) Тогда
		
		ОткрытьФорму(
			"Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
		
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытия.ВидПродукции)
		И ШтрихкодированиеОбщегоНазначенияИСКлиент.ПрисутствуетТабачнаяПродукция(ПараметрыОткрытия.ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
		
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ПараметрыОткрытия.ВидПродукции)
		И ШтрихкодированиеОбщегоНазначенияИСКлиент.ПрисутствуетПродукцияИСМП(ПараметрыОткрытия.ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
		
	Иначе
		
		ТекстОшибки = ТекстОшибкиНеПоддерживаетсяВидПродукции(
			ПараметрыОткрытия.ПараметрыСканирования, ПараметрыОткрытия.ВидПродукции);
		
		ПараметрыОткрытияФормы = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ТекстОшибки;
		ПараметрыОткрытияФормы.Штрихкод                         = ПараметрыОткрытия.ДанныеШтрихкода.Штрихкод;
		ПараметрыОткрытияФормы.ВидПродукции                     = ПараметрыОткрытия.ВидПродукции;
		ПараметрыОткрытияФормы.Организация                      = ПараметрыОткрытия.ПараметрыСканирования.Организация;
		
		ОткрытьФорму(
			"ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного",
			ПараметрыОткрытияФормы, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойУточненияДанных

// Открывает форму уточнения данных.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОповещениеПоЗавершениюУточненияДанных - ОписаниеОповещения - Оповещение после закрытия формы.
Процедура УточнитьДанныеУПользователя(ФормаВладелец, ПараметрыОткрытияФормы, ОповещениеПоЗавершениюУточненияДанных) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОткрытияФормы.КодМаркировкиДляУточнения) Тогда
		
		Если ШтрихкодированиеИСКлиентСервер.ТребуетсяСброситьСохраненныйВыбор(
				ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции,
				ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода) Тогда
			ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено;
			ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ФормаВладелец, Неопределено, Ложь);
		КонецЕсли;
		
		РезультатОбработкиШтрихкода = ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода;
		Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
			
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПреобразоватьВПараметрыОткрытияФормыВводаКодаМаркировки(
				ПараметрыОткрытияФормы.КодМаркировкиДляУточнения);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец, "Объект")
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец.Объект, "Ссылка") Тогда
				ПараметрыОткрытияФормы.Документ = ФормаВладелец.Объект.Ссылка;
			КонецЕсли;
			ПараметрыОткрытияФормы.Операция = "ОткрытьФормуВводаКодаМаркировки";
			
		Иначе
			
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя = ПреобразоватьВПараметрыОткрытияФормыУточнения(
				ПараметрыОткрытияФормы.КодМаркировкиДляУточнения);
			
			Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки Тогда
				ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияУпаковки";
			ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяВскрытиеПотребительскойУпаковки
				И (РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
					Или РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")) Тогда
				ПараметрыОткрытияФормы.Операция = "ПодключениеКегаКОборудованиюРозлива";
			ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
				И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена
				И Не РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных Тогда
				ПараметрыОткрытияФормы.Операция = "ПроверкаКодаМаркировкиСредставамиККТ";
			Иначе
				ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияДанных";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОткрытияФормы.Операция = "ОткрытьФормуВводаКодаМаркировки" Тогда
		
		ОткрытьФормуСчитыванияКодаМаркировки(
			ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ОповещениеПоЗавершениюУточненияДанных);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "СопоставлениеНоменклатуры" Тогда
		
		ШтрихкодыКСопоставлению = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ШтрихкодыКСопоставлению;
		ИсходныеДанные          = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ИсходныеДанные;
		ПараметрыСканирования   = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ПараметрыСканирования;
		
		ДополнительныеПараметры = Новый Структура(
			"ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования",
			ОповещениеПоЗавершениюУточненияДанных, ИсходныеДанные, ПараметрыСканирования);
			
		ОповещениеОЗавершенииСопоставления = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыШтрихкодамЗавершение", ШтрихкодированиеИСКлиент, ДополнительныеПараметры);
		
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ШтрихкодыКСопоставлению, ФормаВладелец, ОповещениеОЗавершенииСопоставления);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияДанных" Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОткрытияФормы.КодМаркировкиДляУточнения) Тогда
			ДанныеШтрихкода = ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
				ДополнитьПараметрыУточненияИзСпискаВыбораНоменклатуры(ДанныеШтрихкода.СписокНоменклатуры, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
			Иначе
				ДополнитьПараметрыУточненияИзСпискаВыбораНоменклатуры(ДанныеШтрихкода.СписокНоменклатуры, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
				ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
				ДополнитьПараметрыУточненияПолнымКодомМаркировки(ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ДанныеШтрихкода);
			КонецЕсли;
		Иначе
			ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
		КонецЕсли;
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИС",
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ФормаВладелец,,,,
			ОповещениеПоЗавершениюУточненияДанных, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияУпаковки" Тогда
		
		ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, Истина);
		
		ОткрытьФорму(
			"ОбщаяФорма.УточнениеСоставаУпаковкиИС",
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ФормаВладелец,,,,
			ОповещениеПоЗавершениюУточненияДанных, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "УточнениеКоэффициентовУпаковок" Тогда	
		
		ИсходныеДанные        = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ИсходныеДанные;
		ПараметрыСканирования = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ПараметрыСканирования;
		
		ДополнительныеПараметры = Новый Структура(
			"ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования",
			ОповещениеПоЗавершениюУточненияДанных, ИсходныеДанные, ПараметрыСканирования);
		
		ОповещениеОЗавершенииСопоставления = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыШтрихкодамЗавершение", ШтрихкодированиеИСКлиент, ДополнительныеПараметры);
		
		ОткрытьФорму(
			"ОбщаяФорма.УточнениеКоэффициентовУпаковокИСМП",
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ФормаВладелец,,,,
			ОповещениеОЗавершенииСопоставления, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ИначеЕсли ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП")
		И ПараметрыОткрытияФормы.Операция = "ПроверкаКодаМаркировкиСредставамиККТ" Тогда
		
		МодульШтрихкодированиеОбщегоНазначенияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиент");
		МодульШтрихкодированиеОбщегоНазначенияИСМПКлиент.ПроверкаКодаМаркировкиСредствамиККТПоДаннымШтрихкода(
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ПараметрыСканирования,
			ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода,
			ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.Форма,
			ОповещениеПоЗавершениюУточненияДанных);
	
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ПодключениеКегаКОборудованиюРозлива" Тогда
		
		ПараметрыСканирования = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ПараметрыСканирования;
		ДанныеШтрихкода       = ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		ИмяПодсистемы         = ?(ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина), "ИСМП", "ЕГАИС");
		
		ДополнительныеПараметрыОповещения = Новый Структура();
		ДополнительныеПараметрыОповещения.Вставить("ФормаВладелец",                         ФормаВладелец);
		ДополнительныеПараметрыОповещения.Вставить("ПараметрыОткрытияФормы",                ПараметрыОткрытияФормы);
		ДополнительныеПараметрыОповещения.Вставить("ОповещениеПоЗавершениюУточненияДанных", ОповещениеПоЗавершениюУточненияДанных);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(
			"ПодключениеКегаКОборудованиюРозливаПриСканированииЗавершение",
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент"),
			ДополнительныеПараметрыОповещения);
		
		ПараметрыОткрытия = ИнтеграцияИСКлиент.ПараметрыОткрытияФормыВскрытияПотребительскойУпаковки();
		ПараметрыОткрытия.ПараметрыСканирования = ПараметрыСканирования;
		ПараметрыОткрытия.ИмяПодсистемы         = ИмяПодсистемы;
		ПараметрыОткрытия.КодМаркировки         = ДанныеШтрихкода.ШтрихкодУпаковки;
		ПараметрыОткрытия.ОповещениеОЗакрытии   = ОповещениеОЗакрытии;
		ПараметрыОткрытия.СохранитьПолныйКод    = Истина;
		
		ИнтеграцияИСКлиент.ОткрытьФормуВскрытияПотребительскойУпаковки(ПараметрыОткрытия, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру данных, собранных после уточнения сведений у пользователя.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования.
// * ИсходныеДанные - Структура
//    * Штрихкод - Строка - Штрихкод.
//    * Количество - Число - Количество.
// * КэшированныеЗначения - Произвольный - кэш обработанных ранее штрихкодов.
// * РезультатВыбора - Произвольный - результат уточнения данных пользователем.
// * РезультатОбработкиШтрихкода - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода.
// * Действие - Строка - Действие, которое необходимо выполнить с данными.
Функция ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий() Экспорт
	
	РезультатУточненияДанных = Новый Структура;
	
	РезультатУточненияДанных.Вставить("Действие");
	РезультатУточненияДанных.Вставить("РезультатОбработкиШтрихкода");
	РезультатУточненияДанных.Вставить("РезультатВыбора");
	РезультатУточненияДанных.Вставить("КэшированныеЗначения");
	РезультатУточненияДанных.Вставить("ИсходныеДанные");
	РезультатУточненияДанных.Вставить("ПараметрыСканирования");
	РезультатУточненияДанных.Вставить("ДанныеШтрихкода");
	
	//@skip-check constructor-function-return-section
	Возврат РезультатУточненияДанных;
	
КонецФункции

// Выполняет обработку оповещения "ВыполнитьДействие" и передает результат уточнения данных у пользователя.
// 
// Параметры:
//  РезультатВыбора - Произвольный - результат уточнения данных у пользователя.
//  ДополнительныеПараметры - Структура - дополнительные параметры описания оповещения.
Процедура УточненияДанныхЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено
		Или РезультатВыбора = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода    = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
	ПараметрыСканирования          = ДополнительныеПараметры.ПараметрыСканирования;
	ВидПродукции                   = РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции;
	ОперацияИС                     = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ОперацияИС(ПараметрыСканирования, ВидПродукции);
	ПоддерживаетсяЧастичноеВыбытие = ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции, ОперацияИС);
	
	Если ПараметрыСканирования.Свойство("ККТФФД12ИСМП")
		И ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
		И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена
		И ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		ДанныеШтрихкода                  = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		
		Если ПоддерживаетсяЧастичноеВыбытие Тогда
			МодульШтрихкодированиеИСМПКлиент.ДополнитьДанныеШтрихкодаПриВыбореКодаМаркировкиВФормеУточнения(ДанныеШтрихкода, РезультатВыбора);
		КонецЕсли;
		
		Если Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И (РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
			Или ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
				И РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных) Тогда
			
			Если Не ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыСканирования.ККТФФД12ИСМП) Тогда
				
				МодульШтрихкодированиеИСМПКлиентСерверПереопределяемый = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСерверПереопределяемый");
				МодульШтрихкодированиеИСМПКлиентСерверПереопределяемый.УстановитьККТФФД12ПоДаннымОписанияТовара(
					РезультатВыбора.ДанныеВыбора,
					ДополнительныеПараметры.ПараметрыСканирования);
				
			КонецЕсли;
		
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ПараметрыСканирования.ККТФФД12ИСМП) Тогда
				
				МодульШтрихкодированиеОбщегоНазначенияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМПКлиент");
				
				Если МодульШтрихкодированиеОбщегоНазначенияИСМПКлиент.РежимПроверкиПриСканировании()
					Или ПараметрыСканирования.РежимБРМК Тогда
					
					Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ПолныйКодМаркировки)
						И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64)
						И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеШтрихкода.СоставКодаМаркировки, "ВключаетКриптоХвост", Ложь) Тогда
						ДанныеШтрихкода.ПолныйКодМаркировки = ДанныеШтрихкода.ШтрихкодBase64;
					КонецЕсли;
					
					ПроверкаКодовМаркировкиСредствамиККТЗавершение = Новый ОписаниеОповещения(
						"УточненияДанныхЗавершение",
						ЭтотОбъект,
						ДополнительныеПараметры);
					
					МодульШтрихкодированиеОбщегоНазначенияИСМПКлиент.ПроверкаКодаМаркировкиСредствамиККТПоДаннымШтрихкода(
						ПараметрыСканирования,
						РезультатОбработкиШтрихкода,
						ДополнительныеПараметры.Форма,
						ПроверкаКодовМаркировкиСредствамиККТЗавершение,
						РезультатВыбора);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;

	ИначеЕсли ПоддерживаетсяЧастичноеВыбытие
		И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда

		ДанныеШтрихкода                  = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		МодульШтрихкодированиеИСМПКлиент.ДополнитьДанныеШтрихкодаПриВыбореКодаМаркировкиВФормеУточнения(ДанныеШтрихкода, РезультатВыбора);

	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыполнитьДействие <> "" Тогда
		
		РезультатУточненияДанных = ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий();
		РезультатУточненияДанных.Действие                    = "ОбработатьУточнениеДанных";
		РезультатУточненияДанных.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		РезультатУточненияДанных.РезультатВыбора             = РезультатВыбора;
		РезультатУточненияДанных.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		РезультатУточненияДанных.ИсходныеДанные              = ДополнительныеПараметры.ДанныеШтрихкода;
		РезультатУточненияДанных.ПараметрыСканирования       = ДополнительныеПараметры.ПараметрыСканирования;
		РезультатУточненияДанных.ДанныеШтрихкода             = ДополнительныеПараметры.ДанныеШтрихкода;
		
		ОповещениеВыполнитьДействие = Новый ОписаниеОповещения(ДополнительныеПараметры.ВыполнитьДействие, ДополнительныеПараметры.Форма);
		ВыполнитьОбработкуОповещения(ОповещениеВыполнитьДействие, РезультатУточненияДанных);
		
	ИначеЕсли ДополнительныеПараметры.ВызовИзФормыДокумента Тогда // Ветка для старого механизма.
		
		Форма = ДополнительныеПараметры.Форма;
		
		Действие = "ОбработатьУточнениеДанных";
		РезультатОбработкиШтрихкода = Форма.Подключаемый_ВыполнитьДействие(
			Действие,
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода("");
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
		ДополнительныеПараметры.Свойство("ЗавершениеОбработки", ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки);
		ДополнительныеПараметры.Свойство("ПараметрыСканирования", ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования);
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	Иначе
		
		ШтрихкодированиеИСВызовСервера.ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.ПараметрыСканирования,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ДополнительныеПараметры);
		
		Если ТипЗнч(РезультатВыбора) = Тип("Структура")
			И РезультатВыбора.Свойство("ДополнитьПолныйКодМаркировки")
			И РезультатВыбора.ДополнитьПолныйКодМаркировки = "3103"
			И ДополнительныеПараметры.Свойство("ПараметрыСканирования")
			И ДополнительныеПараметры.ПараметрыСканирования <> Неопределено
			И ДополнительныеПараметры.ПараметрыСканирования.Свойство("ВидОперацииИСМП")
			И (ДополнительныеПараметры.ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес")
				Или ДополнительныеПараметры.ПараметрыСканирования.ВидОперацииИСМП = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийИСМП.ОтчетОПеревзвешивании"))
			И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			МодульПечатьЭтикетокИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПечатьЭтикетокИСМПКлиент");
			МодульПечатьЭтикетокИСМПКлиент.РаспечататьСуществующийКодМаркировки(
				РезультатВыбора.ДанныеВыбора,
				РезультатВыбора.ДополнитьПолныйКодМаркировки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УточнениеДанныхЭлектронныеВесы

Функция НачатьПолучениеВесаАвтоматически(Форма) Экспорт
	
	Если Форма.КодМаркировкиДляУточнения <> Неопределено
		И ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидПродукции)
		И Форма.КодМаркировкиДляУточнения.ПараметрыСканирования.ЗапрашиватьКоличествоМерногоТовара
		И Не Форма.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки
		И Не Форма.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки
		И Форма.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетВзвешивания
		И Форма.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.Количество = 0 Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьВесЗавершение", Форма);
		
		//@skip-check wrong-string-literal-content
		Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПодключаемоеОборудование")
			И Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ВесовоеОборудование") Тогда
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, Неопределено);
		Иначе
			МенеджерОборудованияИСКлиент.НачатьПолученияВесаСЭлектронныхВесов(
				ОбработчикОповещения,
				Форма.УникальныйИдентификатор);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормойНевозможностиДобавленияОтсканированного

// Инициализирует параметры открытия формы невозможности добавления отсканированного.
//
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
// Возвращаемое значение:
// 	Структура из КлючИЗначение - Описание:
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
// * ПредставлениеНоменклатуры - Строка - Представление маркируемой продукции.
// * Штрихкод - Строка - Штрихкод строкой.
// * ТекстОшибки - Строка - Описание причины невозможности обработки отсканированного штрихкода.
// * ПараметрыОшибки - Структура из КлючИЗначение
// * ИмяФормыИсточник - Строка
// * Организация - ОпределяемыйТип.Организация - Организация.
// * ТекстОшибкиФорматированнаяСтрока - ФорматированнаяСтрока
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - алкогольная продукция.
// * ОбратноеСканирование - Булево
// * СсылкаНаОбъект - ЛюбаяСсылка
// * ДоступнаПечатьКодаМаркировки - Булево
// * ДанныеКодаМаркировки - см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода
// * АдресДереваУпаковок - Строка - адрес хранилища, где находится дерево упаковок.
Функция ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции = Неопределено) Экспорт
	
	ИнформацияПроблемы = Новый Структура;
	
	ИнформацияПроблемы.Вставить("ВидПродукции", ВидПродукции);
	
	// Информация по маркированному товару.
	ИнформацияПроблемы.Вставить("ПредставлениеНоменклатуры",        Неопределено);
	ИнформацияПроблемы.Вставить("Штрихкод",                         Неопределено);
	ИнформацияПроблемы.Вставить("ТекстОшибки",                      Неопределено);
	ИнформацияПроблемы.Вставить("ПараметрыОшибки",                  Неопределено);
	ИнформацияПроблемы.Вставить("ИмяФормыИсточник",                 Неопределено);
	ИнформацияПроблемы.Вставить("Организация",                      Неопределено);
	ИнформацияПроблемы.Вставить("ТекстОшибкиФорматированнаяСтрока", Неопределено);
	ИнформацияПроблемы.Вставить("ТипШтрихкода",                     Неопределено);
	ИнформацияПроблемы.Вставить("ВидУпаковки",                      Неопределено);
	ИнформацияПроблемы.Вставить("АлкогольнаяПродукция",             Неопределено);
	ИнформацияПроблемы.Вставить("ОбратноеСканирование",             Неопределено);
	
	ИнформацияПроблемы.Вставить("СсылкаНаОбъект",                   Неопределено);
	
	ИнформацияПроблемы.Вставить("ДоступнаПечатьКодаМаркировки",     Ложь);
	ИнформацияПроблемы.Вставить("ДанныеКодаМаркировки",             Неопределено);
	
	// Информация по дереву упаковок.
	ИнформацияПроблемы.Вставить("АдресДереваУпаковок", Неопределено);
	
	//@skip-check constructor-function-return-section
	Возврат ИнформацияПроблемы;
	
КонецФункции

// Открывает форму с описанием ошибки о невозможности обработать отсканированный штрихкод.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ПараметрыОткрытияФормы - (См. ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного).
//
Процедура ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы) Экспорт
	
	Если ПараметрыОткрытияФормы.ВидПродукции = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, Форма);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		МодульШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
		
	Иначе
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытияФормы.ВидПродукции) Тогда
				
				МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
				МодульШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
				
			ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ПараметрыОткрытияФормы.ВидПродукции) Тогда
				
				МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
				МодульШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные из кэша, необходимые для уточнения сведений у пользователя. Открывает форму уточнения сведений.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - оповещение, которое будет выполнено после получения сведений.
Процедура Подключаемый_ОткрытьФормуУточненияДанных(Форма, ОписаниеОповещенияОЗавершении) Экспорт
	
	// Сценарий: есть текущий результат обработки кода маркировки
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КодМаркировкиДляУточнения")
		И ЗначениеЗаполнено(Форма.КодМаркировкиДляУточнения) Тогда
		КодМаркировкиДляУточнения = Форма.КодМаркировкиДляУточнения;
		КодМаркировкиДляУточнения.Форма = Форма;
		Форма.КодМаркировкиДляУточнения = Неопределено;
		ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыОткрытияФормыУточненияДанных.КодМаркировкиДляУточнения = КодМаркировкиДляУточнения;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, КодМаркировкиДляУточнения);
		УточнитьДанныеУПользователя(Форма, ПараметрыОткрытияФормыУточненияДанных, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ДанныеДляУточненияСведений = ШтрихкодированиеИСВызовСервера.ДанныеДляУточненияСведенийПользователя(Форма.КэшМаркируемойПродукции);
	
	Если ДанныеДляУточненияСведений = Неопределено
		Или ПустаяСтрока(ДанныеДляУточненияСведений.Операция) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляУточненияСведенийПользователя = ДанныеДляУточненияСведений.Данные;
	Если ТипЗнч(ДанныеДляУточненияСведений.Данные) = Тип("Соответствие") Тогда
		
		Для Каждого КлючЗначение Из ДанныеДляУточненияСведений.Данные Цикл
			ДанныеДляУточненияСведенийПользователя = КлючЗначение.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ПараметрыОткрытияФормыУточненияДанных.Операция = ДанныеДляУточненияСведений.Операция;
	ПараметрыОткрытияФормыУточненияДанных.ДанныеДляУточненияСведенийПользователя = ДанныеДляУточненияСведенийПользователя;
	
	УточнитьДанныеУПользователя(Форма, ПараметрыОткрытияФормыУточненияДанных, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

#КонецОбласти

// Преобразует массив штрихкодов в формат Base64.
// 
// Параметры:
//  ШтрихкодыТСД - Массив из Строка - список штрихкодов.
Процедура ПреобразоватьШтрихкодыТСДВBase64(ШтрихкодыТСД) Экспорт
	
	Для Каждого ЭлементМассива Из ШтрихкодыТСД Цикл
		Если ЭлементМассива.Свойство("ШтрихкодыПреобразованы") Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСвойствоФорматBase64 = Ложь;
		Если ЭлементМассива.Свойство("ФорматBase64") Тогда
			ФорматBase64 = ЭлементМассива.ФорматBase64;
			ЕстьСвойствоФорматBase64 = Истина;
		Иначе
			ФорматBase64 = Ложь;
		КонецЕсли;
		
		Если Не ФорматBase64 Тогда
			Если ЗначениеЗаполнено(ЭлементМассива.Штрихкод) Тогда
				ЭлементМассива.Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ЭлементМассива.Штрихкод);
				Если ЕстьСвойствоФорматBase64 Тогда
					ЭлементМассива.ФорматBase64 = Истина;
				Иначе
					ЭлементМассива.Вставить("ФорматBase64", Истина);
				КонецЕсли;
			КонецЕсли;
			Если ЭлементМассива.Свойство("ШтрихкодУпаковки") И ЗначениеЗаполнено(ЭлементМассива.ШтрихкодУпаковки) Тогда
				ЭлементМассива.ШтрихкодУпаковки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ЭлементМассива.ШтрихкодУпаковки);
				Если ЕстьСвойствоФорматBase64 Тогда
					ЭлементМассива.ФорматBase64 = Истина;
				Иначе
					ЭлементМассива.Вставить("ФорматBase64", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементМассива.Вставить("ШтрихкодыПреобразованы");
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру сохраненных данных в документе
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ДанныеВыбора - Структура - данные сохраненного выбора.
// * ЗапомнитьВыбор - Булево - признак сохранения выбора пользователем.
// * ДополнитьПолныйКодМаркировки - Неопределено, Булево - признак дополнения КМ
//
Функция ИнициализацияСтруктурыДанныхСохраненногоВыбора() Экспорт
	
	ДанныеВыбора = Новый Структура;
	ДанныеВыбора.Вставить("Номенклатура",                    Неопределено);
	ДанныеВыбора.Вставить("ПредставлениеНоменклатуры",       "");
	ДанныеВыбора.Вставить("Характеристика",                  Неопределено);
	ДанныеВыбора.Вставить("Упаковка",                        Неопределено);
	ДанныеВыбора.Вставить("Серия",                           Неопределено);
	ДанныеВыбора.Вставить("ОбработатьБезМаркировки",         Ложь);
	ДанныеВыбора.Вставить("КодМаркировки",                   "");
	
	// Коды остатков
	ДанныеВыбора.Вставить("GTIN",                            "");
	
	// Специфика для молочной продукции
	ДанныеВыбора.Вставить("ИдентификаторПроисхожденияВЕТИС", Неопределено);
	ДанныеВыбора.Вставить("ГоденДо",                         '00010101');
	ДанныеВыбора.Вставить("СкоропортящаясяПродукция",        Ложь);
	
	// Специфика для табачной и молочной продукции
	ДанныеВыбора.Вставить("СоставКодаМаркировки",            Неопределено);
	
	// Для уточнения нефиксированного учетного количества
	ДанныеВыбора.Вставить("Количество",             1);
	
	// Для добавления кодов ОСУ
	ДанныеВыбора.Вставить("КоличествоПотребительскихУпаковок", 0);
	
	// Для возможности указания пустого срока годности
	ДанныеВыбора.Вставить("СохраненВыборПустогоСрокаГодности", Ложь);
	
	// Для документов, печатающих коды маркировки
	ДанныеВыбора.Вставить("СразуНаПринтер",         Ложь);
	ДанныеВыбора.Вставить("ШаблонЭтикетки",         Неопределено);
	ДанныеВыбора.Вставить("ШаблонМаркировки",       Неопределено);
	ДанныеВыбора.Вставить("ВидПродукции",           Неопределено); // Для сохранения вида продукции в данных выбора при потоковой печати КМ

	// Индивидуально перемаркирова
	ДанныеВыбора.Вставить("ПричинаПеремаркировки",  Неопределено);
	ДанныеВыбора.Вставить("НоваяНоменклатура",      Неопределено);
	ДанныеВыбора.Вставить("НоваяХарактеристика",    Неопределено);
	
	// Для формы проверки и подбора
	ДанныеВыбора.Вставить("ДобавлятьНовуюУпаковку",  Ложь);
	ДанныеВыбора.Вставить("ЭтоКодВводаОстатков",     Ложь);
	ДанныеВыбора.Вставить("ЭтоШтрихкодНоменклатуры", Ложь);
	ДанныеВыбора.Вставить("ВидУпаковки",             Неопределено); // Для потокового сканирования ОСУ
	
	// Частичное выбытие
	ДанныеВыбора.Вставить("ЧастичноеВыбытие",                      Ложь);
	ДанныеВыбора.Вставить("ЕмкостьПотребительскойУпаковки",        Неопределено);
	ДанныеВыбора.Вставить("ЧастичноеВыбытиеВариантУчета",          Неопределено);
	ДанныеВыбора.Вставить("ЧастичноеВыбытиеСохранитьНовуюЕмкость", Ложь);
	ДанныеВыбора.Вставить("ЧастичноеВыбытиеНоменклатура",          Неопределено);
	ДанныеВыбора.Вставить("ЧастичноеВыбытиеХарактеристика",        Неопределено);
	ДанныеВыбора.Вставить("ЧастичноеВыбытиеШтрихкодУпаковки",      Неопределено);
	ДанныеВыбора.Вставить("ПолныйКодМаркировки",                   Неопределено);
	ДанныеВыбора.Вставить("ДанныеСтатуса",                         Неопределено);
	ДанныеВыбора.Вставить("ВыбытиеБутылки",                        Ложь); // Для алкогольной продукции
	
	// Специфика для ИСМП и МОТП
	ДанныеВыбора.Вставить("МаркируемаяПродукция",     Ложь);
	ДанныеВыбора.Вставить("ПроизвольнаяЕдиницаУчета", Ложь);
	ДанныеВыбора.Вставить("ТребуетВзвешивания",       Ложь);
	
	СтруктурыДанных = Новый Структура;
	СтруктурыДанных.Вставить("ЗапомнитьВыбор", Ложь);
	СтруктурыДанных.Вставить("ДанныеВыбора",   ДанныеВыбора);
	СтруктурыДанных.Вставить("ДополнитьПолныйКодМаркировки", Неопределено);
	
	Возврат СтруктурыДанных;
	
КонецФункции

Функция ПроверитьФорматШтрихкода(Штрихкод, ФорматBase64) Экспорт
	
	ФорматИзменен = Ложь;
	РезультатРазбора = Неопределено;
	ПримечаниеКРезультатуРазбора = Неопределено;
	
	ИдентификаторыОшибокРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИдентификаторыОшибокРазбораКодаМаркировки();
	
	РезультатРаспаковки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Штрихкод);
	Если РезультатРаспаковки <> Штрихкод Тогда
		
		ВидыПродукции = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ВидыПродукции,
			ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина), Истина);
		
		РезультатРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
			РезультатРаспаковки, ВидыПродукции, ПримечаниеКРезультатуРазбора);
		
	КонецЕсли;
	
	Если РезультатРазбора = Неопределено
		И ПримечаниеКРезультатуРазбора <> Неопределено
		И ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибокРазбораКодаМаркировки.КодМаркировкиСоответствуетНесколькимШаблонам Тогда
		Если ФорматBase64 <> Истина Тогда
			ФорматBase64 = Истина;
			ФорматИзменен = Истина;
		КонецЕсли;
	ИначеЕсли РезультатРазбора = Неопределено
		И ПримечаниеКРезультатуРазбора <> Неопределено
		И ЗначениеЗаполнено(ПримечаниеКРезультатуРазбора.ТекстОшибки) Тогда
		Если ФорматBase64 <> Ложь Тогда
			ФорматBase64 = Ложь;
			ФорматИзменен = Истина;
		КонецЕсли;
	ИначеЕсли РезультатРазбора = Неопределено И ПримечаниеКРезультатуРазбора = Неопределено Тогда
		Если ФорматBase64 <> Ложь Тогда
			ФорматBase64 = Ложь;
			ФорматИзменен = Истина;
		КонецЕсли;
	ИначеЕсли РезультатРазбора <> Неопределено Тогда
		Если ФорматBase64 <> Истина Тогда
			ФорматBase64 = Истина;
			ФорматИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматИзменен;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормойУточненияДанных

//Сценарий: на вход уточнения данных передан частично обработанный код маркировки
//
Функция ПреобразоватьВПараметрыОткрытияФормыУточнения(КодМаркировкиДляУточнения)
	
	ДанныеДляУточнения = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ДанныеДляУточнения.ПараметрыСканирования = КодМаркировкиДляУточнения.ПараметрыСканирования;
	
	ДанныеШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	Если КодМаркировкиДляУточнения.ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеДляУточнения, КодМаркировкиДляУточнения.ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции);
		КодМаркировкиДляУточнения.ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции.Свойство("ШаблонМаркировки", ДанныеДляУточнения.ШаблонКодаМаркировки);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеДляУточнения, ДанныеШтрихкода);
	ДанныеДляУточнения.КодМаркировки = ДанныеШтрихкода.Штрихкод;
	ДанныеДляУточнения.ШтрихкодEAN = ДанныеШтрихкода.EAN;
	Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		ДанныеШтрихкода,
		ДанныеДляУточнения.ПараметрыСканирования) Тогда
		
		Если Не ДанныеШтрихкода.ЧастичноеВыбытие Тогда
			ДанныеДляУточнения.Количество = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеШтрихкода.СписокНоменклатуры.Количество() > 1 Тогда
		Номенклатура = Новый Соответствие;
		Характеристика = Новый Соответствие;
		Для Каждого ЭлементСписка Из ДанныеШтрихкода.СписокНоменклатуры Цикл
			Если ЗначениеЗаполнено(ЭлементСписка.Номенклатура) Тогда
				Номенклатура.Вставить(ЭлементСписка.Номенклатура);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЭлементСписка.Характеристика) Тогда
				Характеристика.Вставить(ЭлементСписка.Характеристика);
			КонецЕсли;
			Если Номенклатура.Количество() > 1 Тогда
				ДанныеДляУточнения.Номенклатура = Новый Массив;
				Для Каждого КлючИЗначение Из Номенклатура Цикл
					ДанныеДляУточнения.Номенклатура.Добавить(КлючИЗначение.Ключ);
				КонецЦикла;
			КонецЕсли;
			Если Характеристика.Количество() > 1 Тогда
				ДанныеДляУточнения.Характеристика = Новый Массив;
				Для Каждого КлючИЗначение Из Характеристика Цикл
					ДанныеДляУточнения.Характеристика.Добавить(КлючИЗначение.Ключ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДляУточнения;
	
КонецФункции

//Сценарий: интерфейс уточнения данных для неуникальных штрихкодов информационной базы
//
Процедура ДополнитьПараметрыУточненияИзСпискаВыбораНоменклатуры(СписокВыбора, ПараметрыОткрытияФормы)
	
	Если ПараметрыОткрытияФормы.РежимПодбораИзДокумента Тогда
		Возврат;
	ИначеЕсли СписокВыбора.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ПараметрыОткрытияФормы.Номенклатура)<>Тип("Массив")
			И ЗначениеЗаполнено(ПараметрыОткрытияФормы.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		НовыйЭлементВыбора = Новый Структура("Номенклатура,Характеристика,Серия");
		ЗаполнитьЗначенияСвойств(НовыйЭлементВыбора, ЭлементСписка);
		ПараметрыОткрытияФормы.ДанныеДокумента.Добавить(НовыйЭлементВыбора);
	КонецЦикла;
	
КонецПроцедуры

// Сценарий: получаем варианты уточнения данных по коду маркировки (или упаковки)
// из формы документа (или формы проверки и подбора).
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - Форма владелец
//  ПараметрыОткрытияФормы - см. ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных
//  УточнитьУпаковку - Булево - Уточнить упаковку
Процедура ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы, УточнитьУпаковку = Ложь) Экспорт
	
	// * Если флаг подбора уже взведен - ничего не меняем
	Если ПараметрыОткрытияФормы.РежимПодбораИзДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ФормаИсточник = ФормаВладелец;
	Если ФормаИсточник.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ФормаВводаКодаМаркировки"
			Или ФормаИсточник.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ФормаВводаКодаМаркировки" Тогда
		Если ФормаИсточник.ВладелецФормы <> Неопределено Тогда
			ФормаИсточник = ФормаИсточник.ВладелецФормы;
		КонецЕсли;
	КонецЕсли;
	
	ВариантыВыбораБезКоличества = Новый Массив;
	ПоляДокумента = Новый Структура;
	ПоляПоиска = Новый Структура;
	
	// Обработка кодов маркировки остатков
	РаботаСПустойНоменклатурой = ПараметрыОткрытияФормы.ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой;
	
	// Обработка кодов маркировки молочной продукции
	ЕстьВЕТИС = ПараметрыОткрытияФормы.ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыОткрытияФормы.ПараметрыСканирования.ЗаполнятьДанныеВЕТИС;
	ЕстьСрокГодности = ПараметрыОткрытияФормы.ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыОткрытияФормы.ПараметрыСканирования.ЗаполнятьСрокГодности;
	
	// Форма проверки и подбора ИС МП, МОТП
	Если ФормаИсточник.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		Или ФормаИсточник.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
		
		Если Не ФормаИсточник.ПодобраннаяМаркируемаяПродукция.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		КолонкиТовары = ФормаИсточник.ПодобраннаяМаркируемаяПродукция[0];
		Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Номенклатура) Тогда
			ПоляДокумента.Вставить("Номенклатура");
			ПоляДокумента.Вставить("Характеристика");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Номенклатура", ПараметрыОткрытияФормы.Номенклатура);
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Характеристика", ПараметрыОткрытияФормы.Характеристика);
		КонецЕсли;
		Если ФормаИсточник.Элементы.ПодобраннаяМаркируемаяПродукцияГруппаСерия.Видимость // Есть серии
			И (УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Серия)) Тогда
			ПоляДокумента.Вставить("Серия");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Серия", ПараметрыОткрытияФормы.Серия);
		КонецЕсли;
		
		Если ЕстьВЕТИС Тогда
			Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ИдентификаторыПроисхожденияВЕТИС) Тогда
				ПоляДокумента.Вставить("ИдентификаторПроисхожденияВЕТИС");
			Иначе
				ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "ИдентификаторПроисхожденияВЕТИС", ПараметрыОткрытияФормы.ИдентификаторыПроисхожденияВЕТИС);
			КонецЕсли;
		КонецЕсли;
		ЕстьСрокГодности = ЕстьСрокГодности И КолонкиТовары.Свойство("ГоденДо");
		Если ЕстьСрокГодности Тогда
			Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ГоденДо) Тогда
				ПоляДокумента.Вставить("СрокГодности");
			Иначе
				ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "ГоденДо", ПараметрыОткрытияФормы.ГоденДо);
			КонецЕсли;
		КонецЕсли;
		
		Если КолонкиТовары.Свойство("ТребуетВзвешивания") Тогда
			ПоляДокумента.Вставить("ТребуетВзвешивания");
		КонецЕсли;
		Если КолонкиТовары.Свойство("ПроизвольнаяЕдиницаУчета") Тогда
			ПоляДокумента.Вставить("ПроизвольнаяЕдиницаУчета");
		КонецЕсли;

		// * Включаем режим выбора
		Если ПоляПоиска.Количество() Тогда
			НеЗавершенПодбор = ФормаИсточник.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ПоляПоиска);
		Иначе
			НеЗавершенПодбор = ФормаИсточник.ПодобраннаяМаркируемаяПродукция;
		КонецЕсли;
		
		Если НеЗавершенПодбор.Количество() И ПоляДокумента.Количество() Тогда
			Для Каждого СтрокаПодбор Из НеЗавершенПодбор Цикл
				ДобавитьСтрокуВПодборБезКоличества = (ЗначениеЗаполнено(СтрокаПодбор.Номенклатура) Или РаботаСПустойНоменклатурой)
					И (Не ЕстьВЕТИС Или ЗначениеЗаполнено(СтрокаПодбор.ИдентификаторПроисхожденияВЕТИС))
					И (Не ЕстьСрокГодности Или ЗначениеЗаполнено(СтрокаПодбор.ГоденДо))
					И (Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ЧастичноеВыбытиеВариантУчета));
				ДобавитьСтрокуВПодбор = ДобавитьСтрокуВПодборБезКоличества
					И СтрокаПодбор.КоличествоПодобрано < СтрокаПодбор.Количество;
				Если ДобавитьСтрокуВПодборБезКоличества Тогда
					НовыйЭлементВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПоляДокумента);
					ЗаполнитьЗначенияСвойств(НовыйЭлементВыбора, СтрокаПодбор);
					Если НовыйЭлементВыбора.Свойство("СрокГодности") И СтрокаПодбор.Свойство("ГоденДо") Тогда
						НовыйЭлементВыбора.СрокГодности = СтрокаПодбор.ГоденДо;
					КонецЕсли;
					Если ДобавитьСтрокуВПодбор Тогда
						ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
						ПараметрыОткрытияФормы.ДанныеДокумента.Добавить(НовыйЭлементВыбора);
					Иначе
						ВариантыВыбораБезКоличества.Добавить(НовыйЭлементВыбора);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Не ПараметрыОткрытияФормы.РежимПодбораИзДокумента И ВариантыВыбораБезКоличества.Количество() Тогда
				ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
				ПараметрыОткрытияФормы.ДанныеДокумента = ВариантыВыбораБезКоличества;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Поведение по-умолчанию (сканирование из формы документа):
	// * Ищем кеш штрихкодов упаковок
	// * Ищем заполненную ТЧ Товары документа
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаИсточник, "ДанныеШтрихкодовУпаковокГосИС") Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаИсточник, "Объект") Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаИсточник.Объект, "Товары") Тогда
		Возврат;
	ИначеЕсли Не ФормаИсточник.Объект.Товары.Количество() Тогда
		Возврат;
	ИначеЕсли ПараметрыОткрытияФормы.ЧастичноеВыбытие Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТовары = ФормаИсточник.Объект.Товары[0];
	// * Формируем таблицу выбора
	Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Номенклатура) Тогда
		ПоляДокумента.Вставить("Номенклатура");
		ПоляДокумента.Вставить("Характеристика");
	Иначе
		ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Номенклатура", ПараметрыОткрытияФормы.Номенклатура);
		ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Характеристика", ПараметрыОткрытияФормы.Характеристика);
	КонецЕсли;
	Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Серия) Тогда
		ПоляДокумента.Вставить("Серия");
	Иначе
		ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Серия", ПараметрыОткрытияФормы.Серия);
	КонецЕсли;
	
	Если ЕстьВЕТИС Тогда
		Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ИдентификаторыПроисхожденияВЕТИС) Тогда
			ПоляДокумента.Вставить("ИдентификаторПроисхожденияВЕТИС");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "ИдентификаторПроисхожденияВЕТИС", ПараметрыОткрытияФормы.ИдентификаторыПроисхожденияВЕТИС);
		КонецЕсли;
	КонецЕсли;
	ЕстьСрокГодности = ЕстьСрокГодности И КолонкиТовары.Свойство("СрокГодности");
	Если ЕстьСрокГодности Тогда
		Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ГоденДо) Тогда
			ПоляДокумента.Вставить("СрокГодности");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "СрокГодности", ПараметрыОткрытияФормы.ГоденДо);
		КонецЕсли;
	КонецЕсли;

	Если КолонкиТовары.Свойство("ТребуетВзвешивания") Тогда
		ПоляДокумента.Вставить("ТребуетВзвешивания");
	КонецЕсли;
	Если КолонкиТовары.Свойство("ПроизвольнаяЕдиницаУчета") Тогда
		ПоляДокумента.Вставить("ПроизвольнаяЕдиницаУчета");
	КонецЕсли;

	// * Включаем режим выбора
	Если ПоляПоиска.Количество() Тогда
		НеЗавершенПодбор = ФормаИсточник.Объект.Товары.НайтиСтроки(ПоляПоиска);
	Иначе
		НеЗавершенПодбор = ФормаИсточник.Объект.Товары;
	КонецЕсли;
	
	Если НеЗавершенПодбор.Количество() Тогда
		Для Каждого СтрокаПодбор Из НеЗавершенПодбор Цикл
			ДобавитьСтрокуВПодборБезКоличества = (ЗначениеЗаполнено(СтрокаПодбор.Номенклатура) Или РаботаСПустойНоменклатурой)
				И (Не ЕстьВЕТИС Или ЗначениеЗаполнено(СтрокаПодбор.ИдентификаторПроисхожденияВЕТИС))
				И (Не ЕстьСрокГодности Или ЗначениеЗаполнено(СтрокаПодбор.СрокГодности));
			ДобавитьСтрокуВПодбор = ДобавитьСтрокуВПодборБезКоличества
				И СтрокаПодбор.СтатусПроверкиГосИС = 2;
				
			Если ДобавитьСтрокуВПодборБезКоличества Тогда
				НовыйЭлементВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПоляДокумента);
				ЗаполнитьЗначенияСвойств(НовыйЭлементВыбора, СтрокаПодбор);
				Если ДобавитьСтрокуВПодбор Тогда
					ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
					ПараметрыОткрытияФормы.ДанныеДокумента.Добавить(НовыйЭлементВыбора);
				Иначе
					ВариантыВыбораБезКоличества.Добавить(НовыйЭлементВыбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не ПараметрыОткрытияФормы.РежимПодбораИзДокумента И ВариантыВыбораБезКоличества.Количество() Тогда
			ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
			ПараметрыОткрытияФормы.ДанныеДокумента = ВариантыВыбораБезКоличества;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, Имя, Значение)
	Если КолонкиТовары.Свойство(Имя) Тогда 
		ПоляПоиска.Вставить(Имя, Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьПараметрыУточненияПолнымКодомМаркировки(ПараметрыОткрытияФормы, ДанныеШтрихкода)
	
	Если ДанныеШтрихкода.Свойство("ПолныйКодМаркировки") Тогда
		ПараметрыОткрытияФормы.Вставить("ПолныйКодМаркировки", ДанныеШтрихкода.ПолныйКодМаркировки);
	Иначе
		ПараметрыОткрытияФормы.Вставить("ПолныйКодМаркировки", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатаНекорректногоСканирования

Функция ТекстОшибкиНеПоддерживаетсяВидПродукции(ПараметрыСканирования, ВидПродукции)
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = НСтр("ru = 'Не определены'");
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПараметрыСканирования.ДопустимыеВидыПродукции, ", ");
	КонецЕсли;
	
	Фрагмент1 = СтрШаблон(НСтр("ru='Вид продукции штрихкода: %1.'"), ВидПродукции);
	Фрагмент2 = СтрШаблон(НСтр("ru='Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, Символы.ПС, Фрагмент2);
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ИнформироватьВРасширеннойВерсииОНевозможностиДобавления(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования, ОбщаяОшибка = Ложь) Экспорт
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();

	Если ОбщаяОшибка Тогда

		ПараметрыОткрытия.Штрихкод            = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытия.АдресДереваУпаковок = РезультатОбработкиШтрихкода.АдресДереваУпаковок;

	Иначе
	
		ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;

		Если ДанныеШтрихкода <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеШтрихкода);
		КонецЕсли;

	КонецЕсли;

	ПараметрыОткрытия.Организация         = ПараметрыСканирования.Организация;

	Если ТипЗнч(РезультатОбработкиШтрихкода.ТекстОшибки) = Тип("ФорматированнаяСтрока") Тогда
		ПараметрыОткрытия.ТекстОшибкиФорматированнаяСтрока = РезультатОбработкиШтрихкода.ТекстОшибки;
	Иначе
		ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
	КонецЕсли;
	ПараметрыОткрытия.ПараметрыОшибки = РезультатОбработкиШтрихкода.ПараметрыОшибки;
	ПараметрыОткрытия.ИмяФормыИсточник = Форма.ИмяФормы;

	ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

Процедура ЗаполнитьРасширенныеПараметрыРазбораКодаМаркировки(ПараметрыСканирования, ПользовательскиеПараметрыРазбораКодаМаркировки) Экспорт
	
	ПользовательскиеПараметрыРазбораКодаМаркировки.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками =
		(ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
	
КонецПроцедуры

Процедура ЗавершитьРасширеннуюОбработкуШтрихкода(Форма, ПараметрыСканирования, ДанныеШтрихкода) Экспорт
	
	ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(
		Форма,
		ДанныеШтрихкода);
		
	ГрупповаяОбработкаШтрихкодовИСКлиент.ПрименитьСохраненныйВыбор(
		Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
