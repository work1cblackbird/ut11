// @strict-types

#Область СлужебныеПроцедурыИФункции

#Область ОписаниеМетодаСервиса

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  ИспользоватьМетодGET - Булево - признак передачи описание метода в параметрах адресной строки http запроса.
// 
// Возвращаемое значение:
//  Структура:
//  * ИдентификаторУчетнойЗаписи - Строка
//  * ИспользоватьМетодGET - Булево
Функция ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи, ИспользоватьМетодGET = Ложь) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);
	Параметры.Вставить("ИспользоватьМетодGET", ИспользоватьМетодGET);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ИмяМетода - Строка
//  Параметры - Массив из Число
//            - Массив из Строка
//            - Массив из Булево
//            - Массив из Структура
//            - Массив из см. ОписаниеМетодаСервиса.Параметры
//  Идентификатор - Число,Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеМетодаСервиса
Функция ОписаниеМетодаСервиса(ИмяМетода, Параметры, Идентификатор = Неопределено) Экспорт
	ОписаниеМетода = НовоеОписаниеМетодаСервиса();
	ОписаниеМетода.method = ИмяМетода;
	ОписаниеМетода.params = Параметры;
	Если Идентификатор <> Неопределено Тогда
		ОписаниеМетода.id = Идентификатор;
	КонецЕсли;
	Возврат ОписаниеМетода;
КонецФункции

// Параметры:
//  Параметр1 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр2 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр3 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр4 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр5 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр6 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр7 - см. ВыполнитьМетодСервиса.Параметр1
// 
// Возвращаемое значение:
//  Массив из см. ВыполнитьМетодСервиса.Параметр1
Функция СписокПараметровМетодаСервиса(Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7)
	
	ПереданныеПараметры = Новый Массив; // См. СписокПараметровМетодаСервиса
	ПереданныеПараметры.Добавить(Параметр7);
	ПереданныеПараметры.Добавить(Параметр6);
	ПереданныеПараметры.Добавить(Параметр5);
	ПереданныеПараметры.Добавить(Параметр4);
	ПереданныеПараметры.Добавить(Параметр3);
	ПереданныеПараметры.Добавить(Параметр2);
	ПереданныеПараметры.Добавить(Параметр1);
	
	Результат = Новый Массив; // См. СписокПараметровМетодаСервиса
	
	Для Каждого Параметр Из ПереданныеПараметры Цикл
		Если Результат.Количество() = 0 И Параметр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Вставить(0, Параметр);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращаемое значение:
//  Структура - Новое описание метода сервиса:
//  * method - Строка
//  * params - Массив из Число
//           - Массив из Строка
//           - Массив из Булево
//           - Массив из Структура
//  * id - Число,Строка
Функция НовоеОписаниеМетодаСервиса()
	ОписаниеМетода = Новый Структура;
	ОписаниеМетода.Вставить("method", "");
	ОписаниеМетода.Вставить("params", Новый Массив);
	ОписаниеМетода.Вставить("id", 0);
	Возврат ОписаниеМетода;
КонецФункции

// Параметры:
//  ОписаниеМетода - см. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Строка
Функция ОписаниеМетодаВСтрокуПараметровЗапроса(ОписаниеМетода)
	ПараметрыМетодаСтрокойJSON = ОбщегоНазначенияБЭД.JSONСтрока(ОписаниеМетода.params);
	Возврат СтрШаблон("method=%1&params=%2&id=%3", 
		КодироватьСтроку(ОписаниеМетода.method, СпособКодированияСтроки.КодировкаURL),
		КодироватьСтроку(ПараметрыМетодаСтрокойJSON, СпособКодированияСтроки.КодировкаURL),
		ОписаниеМетода.id);
КонецФункции

// Параметры:
//  ОписаниеМетода - см. НовоеОписаниеМетодаСервиса
//  Идентификатор - см. ОписаниеМетодаСервиса.Идентификатор
Процедура УстановитьИдентификаторМетода(ОписаниеМетода, Идентификатор) Экспорт
	ОписаниеМетода.id = Идентификатор;
КонецПроцедуры

#Область ДействияЭДО

// Возвращает сведения по созданным документам ЭДО. Результат см. НовыйРезультатМетодаСформироватьОтветныеТитулыДокументовЭДО.
//
// Параметры:
//  ДанныеДокументовЭДО - Массив из Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Получатель        - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Договор           - Структура:
//  ** Наименование     - Строка
//  ** Номер            - Строка
//  ** Дата             - Дата
//  ** Сторона1         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  ** Сторона2         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  * ВидДокумента      - Структура:
//  ** Наименование     - Строка
//  ** ИмяТипаДокумента - Строка
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Формат            - Строка - формат, в который конвертируются учетные данные.
//  * УчетныеДанные     - Неопределено,Структура - данные прикладного решения:
//  ** Данные           - Структура - учетные данные для конвертации.
//  ** Формат           - Строка - формат учетных данных.
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьДокументыЭДО(ДанныеДокументовЭДО) Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СформироватьДокументыЭДО",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДокументовЭДО));
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из см. НовоеСостояниеДокументаЭДО
Функция НовыйРезультатМетодаСформироватьДокументыЭДО()
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("СостоянияДокументовЭДО", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает сведения по созданным документам ЭДО на основании файлов. Результат см. НовыйРезультатМетодаСформироватьДокументыЭДО.
//
// Параметры:
//  ДанныеДокументовЭДО - Массив из Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Получатель        - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Договор           - Неопределено,Структура:
//  ** Наименование     - Строка
//  ** Номер            - Строка
//  ** Дата             - Дата
//  ** Сторона1         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  ** Сторона2         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  * ВидДокумента      - Структура:
//  ** Наименование     - Строка
//  ** ИмяТипаДокумента - Строка
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Номер             - Строка
//  * Дата              - Строка - дата строкой в формате ISO.
//  * Сумма             - Число
//  * ОсновнойФайл      - Структура:
//  ** ИмяФайла         - Строка
//  ** Данные           - Строка - двоичные данные в формате base64.
//  * ДополнительныйФайл - Неопределено,Структура:
//  ** ИмяФайла         - Строка
//  ** Данные           - Строка - двоичные данные в формате base64.
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьДокументыЭДОПоФайлам(ДанныеДокументовЭДО) Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СформироватьДокументыЭДОПоФайлам",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДокументовЭДО));
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатМетодаСформироватьДокументыЭДО
Функция НовыйРезультатМетодаСформироватьДокументыЭДОПоФайлам() Экспорт
	Возврат НовыйРезультатМетодаСформироватьДокументыЭДО();
КонецФункции

// Возвращает сформированные файлы с визуализацией документа ЭДО. Результат см. НовыйРезультатМетодаСформироватьФайлыИВизуализациюДокументаЭДО.
//
// Параметры:
//  ДанныеДокументаЭДО - Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Получатель        - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Договор           - Структура:
//  ** Наименование     - Строка
//  ** Номер            - Строка
//  ** Дата             - Дата
//  ** Сторона1         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  ** Сторона2         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  * ВидДокумента      - Структура:
//  ** Наименование     - Строка
//  ** ИмяТипаДокумента - Строка
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * Формат            - Строка - формат, в который конвертируются учетные данные.
//  * УчетныеДанные     - Структура:
//  ** Данные           - Структура - учетные данные для конвертации.
//  ** Формат           - Строка - формат учетных данных.
//  ПараметрыВизуализации - Структура:
//  * ВыводитьДопДанные - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ВыводитьКопияВерна - Булево
//  * ПодсказкаQRКода - Строка
//  * ПубличнаяСсылкаQRКода - Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьФайлыИВизуализациюДокументаЭДО(ДанныеДокументаЭДО, ПараметрыВизуализации) Экспорт
	Параметры = Новый Массив; // Массив из Структура
	Параметры.Добавить(ДанныеДокументаЭДО);
	Параметры.Добавить(ПараметрыВизуализации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СформироватьФайлыИВизуализациюДокументаЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ФайлыДокумента - Структура:
//  ** Идентификатор - Строка
//  ** Ошибки - Неопределено - при формировании без ошибок.
//            - Массив из Структура
//  ** ОсновнойФайл - Неопределено - при наличии ошибок.
//                 - Структура:
//  *** ИмяФайла - Строка
//  *** Данные - Строка - двоичные данные в формате base64.
//  ** ДополнительныйФайл - Неопределено - при наличии ошибок или отсутствии соответствующих учетных данных.
//                       - Структура:
//  *** ИмяФайла - Строка
//  *** Данные - Строка - двоичные данные в формате base64.
//  * Визуализация - Неопределено
//                          - Структура:
//  ** Данные - Строка - двоичные данные в формате base64.
//  ** ТипДанных - Строка
//  ** ВерсияДанных - Строка
//  ** ИдентификаторПравила - Строка
//  ** ДатаОбновленияПравила - Строка - дата в формате ISO.
Функция НовыйРезультатМетодаСформироватьФайлыИВизуализациюДокументаЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ФайлыДокумента", Новый Структура);
	Результат.Вставить("Визуализация", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращает результат формирования ответных титулов по электронным документам. Результат см. НовыйРезультатМетодаСформироватьОтветныеТитулыДокументовЭДО.
// 
// Параметры:
//  ДанныеОтветныхТитулов - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура - данные прикладного решения:
//  ** Данные - Структура - учетные данные для конвертации.
//  ** Формат - Строка - формат учетных данных.
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьОтветныеТитулыДокументовЭДО(ДанныеОтветныхТитулов) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтветныхТитулов);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СформироватьОтветныеТитулыДокументовЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатМетодаСформироватьДокументыЭДО
Функция НовыйРезультатМетодаСформироватьОтветныеТитулыДокументовЭДО() Экспорт
	Возврат НовыйРезультатМетодаСформироватьДокументыЭДО();
КонецФункции

// Возвращает данные для подписания документов ЭДО. Результат см. НовыйРезультатМетодаПодготовитьДанныеДляПодписанияДокументовЭДО.
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  ОтпечаткиСертификатов - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаПодготовитьДанныеДляПодписанияДокументовЭДО(ИдентификаторыДокументовЭДО, ОтпечаткиСертификатов) Экспорт
	Параметры = Новый Массив; // Массив из Массив
	Параметры.Добавить(ИдентификаторыДокументовЭДО);
	Параметры.Добавить(ОтпечаткиСертификатов);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПодготовитьДанныеДляПодписанияДокументовЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * ДанныеДляПодписания - Массив из Структура:
//    ** ОтпечаткиСертификатов - Массив из Строка
//    ** НаборДанных - Массив из Структура:
//       *** ИдентификаторДокумента - Строка
//       *** Данные - Строка - ДвоичныеДанные в формате base64.
//       *** ИдентификаторДанных - Строка
//       *** ТребуетсяЗаполнитьПодписанта - Булево
//       *** ТребуетсяДоверенность - Булево
//       *** ДоверенностиПоСертификатам - Неопределено - при значении ТребуетсяМЧД = Ложь.
//                               - Массив из Структура:
//           **** ОтпечатокСертификата - Строка
//           **** НомерДоверенности - Строка
Функция НовыйРезультатМетодаПодготовитьДанныеДляПодписанияДокументовЭДО()
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("ДанныеДляПодписания", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает данные для подписания извещений электронных документов. Результат см. НовыйРезультатМетодаПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО.
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  ОтпечаткиСертификатов - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО(ИдентификаторыДокументовЭДО, ОтпечаткиСертификатов) Экспорт
	Параметры = Новый Массив; // Массив из Массив
	Параметры.Добавить(ИдентификаторыДокументовЭДО);
	Параметры.Добавить(ОтпечаткиСертификатов);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатМетодаПодготовитьДанныеДляПодписанияДокументовЭДО
Функция НовыйРезультатМетодаПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО() Экспорт
	Возврат НовыйРезультатМетодаПодготовитьДанныеДляПодписанияДокументовЭДО();
КонецФункции

// Возвращает данные файлов электронных документов с заполненными подписантыми и доверенностями. Результат см. НовыйРезультатМетодаЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам.
//
// Параметры:
//  ДанныеДляЗаполненияПоСертификатам - Массив из Структура:
//  * ИдентификаторыДанных - Массив из Строка
//  * ОтпечатокСертификата - Строка
//  * НомерДоверенности - Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам(ДанныеДляЗаполненияПоСертификатам) Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляЗаполненияПоСертификатам));
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * НаборДанных - Массив из Структура:
//  ** ИдентификаторДанных - Строка - идентификатор данных электронного документа в сервисе.
//  ** Данные - Строка - двоичные данные в формате base64.
//
Функция НовыйРезультатМетодаЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("НаборДанных", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает результат добавления подписей к файлам электронных документов. Результат см. НовыйРезультатМетодаДобавитьПодписиФайловДокументовЭДО
// 
// Параметры:
//  ПодписиФайлов - Массив из Структура:
//  * ИдентификаторДанных - Строка - идентификатор файла электронного документа.
//  * Подпись - Строка - данные подписи в формате base64.
//  * НомерДоверенности - Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаДобавитьПодписиФайловДокументовЭДО(ПодписиФайлов) Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ДобавитьПодписиФайловДокументовЭДО",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодписиФайлов));
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаДобавитьПодписиФайловДокументовЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат отправки электронных документов по ЭДО. Результат см. НовыйРезультатМетодаОтправитьДокументыЭДО.
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьДокументыЭДО(ИдентификаторыДокументовЭДО, МаркерыАвторизации = Неопределено) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Если ЗначениеЗаполнено(МаркерыАвторизации) Тогда
		ПараметрыМетода.Добавить(МаркерыАвторизации);
	КонецЕсли;
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтправитьДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из См. НовоеСостояниеДокументаЭДО
//  * ЗашифрованныеМаркеры - Неопределено
//                         - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
Функция НовыйРезультатМетодаОтправитьДокументыЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("СостоянияДокументовЭДО", Новый Массив);
	Результат.Вставить("ЗашифрованныеМаркеры", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращает результат отправки извещений электронных документов по ЭДО. Результат см. НовыйРезультатМетодаОтправитьИзвещенияДокументовЭДО.
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьИзвещенияДокументовЭДО(ИдентификаторыДокументовЭДО, МаркерыАвторизации = Неопределено) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Если ЗначениеЗаполнено(МаркерыАвторизации) Тогда
		ПараметрыМетода.Добавить(МаркерыАвторизации);
	КонецЕсли;
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтправитьИзвещенияДокументовЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатМетодаОтправитьДокументыЭДО
Функция НовыйРезультатМетодаОтправитьИзвещенияДокументовЭДО() Экспорт
	Возврат НовыйРезультатМетодаОтправитьДокументыЭДО();
КонецФункции

// Возвращает описания отправленных документов. Результат см. НовыйРезультатМетодаОтправитьКонтейнерыЭДО
// 
// Параметры:
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииВФорматеСервиса
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьКонтейнерыЭДО(МаркерыАвторизации) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МаркерыАвторизации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтправитьКонтейнерыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * Отправлено - Число
//  
Функция НовыйРезультатМетодаОтправитьКонтейнерыЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("Отправлено", 0);
	Возврат Результат;
КонецФункции

// Возвращает описания полученных документов. Результат см. НовыйРезультатМетодаПолучитьКонтейнерыЭДО
// 
// Параметры:
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаПолучитьКонтейнерыЭДО(МаркерыАвторизации) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МаркерыАвторизации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПолучитьКонтейнерыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * Получено - Число
//  * ИдентификаторыДокументовДляОбработкиИзвещений - Массив из Строка
//  
Функция НовыйРезультатМетодаПолучитьКонтейнерыЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("Получено", 0);
	Результат.Вставить("ИдентификаторыДокументовДляОбработкиИзвещений", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает сведения по измененным документам ЭДО. Результат см. НовыйРезультатМетодаИзмененныеДокументыЭДО
// 
// Параметры:
//  ДатаНачалаВыборки - Дата - универсальная дата.
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаИзмененныеДокументыЭДО(ДатаНачалаВыборки) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаНачалаВыборки);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИзмененныеДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ДатаОкончанияВыборки - Строка - дата в формате ISO.
//  * ОписанияДокументовЭДО - Массив из Структура:
//  ** ЭтоВходящийЭДО         - Булево
//  ** Идентификатор          - Строка
//  ** Формат                 - Строка
//  ** ВидДокумента           - Структура:
//  *** Наименование          - Строка
//  *** ИмяТипаДокумента      - Строка
//  ** Организация            - Структура:
//  *** ИНН                   - Строка
//  *** КПП                   - Строка
//  ** Контрагент             - Структура:
//  *** ИНН                   - Строка
//  *** КПП                   - Строка
//  ** Договор                - Неопределено,Структура:
//  *** Наименование          - Строка
//  *** Номер                 - Строка
//  *** Дата                  - Строка - дата в формате ISO.
//  *** Сторона1              - Структура:
//  **** ИНН                  - Строка
//  **** КПП                  - Строка
//  *** Сторона2              - Структура:
//  **** ИНН                  - Строка
//  **** КПП                  - Строка
//  ** Дата                   - Строка - дата в формате ISO.
//  ** Номер                  - Строка
//  ** Сумма                  - Число
//  ** ИмяСостояния           - Строка
//  ** СостояниеДополнение    - Строка
//  ** ДатаИзмененияСостояния - Строка - дата в формате ISO.
//  ** КомментарийСостояния   - Строка
Функция НовыйРезультатМетодаИзмененныеДокументыЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаОкончанияВыборки", "");
	Результат.Вставить("ОписанияДокументовЭДО", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает результат утверждения электронных документов. Результат см. НовыйРезультатМетодаУтвердитьДокументыЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаУтвердитьДокументыЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.УтвердитьДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаУтвердитьДокументыЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат отклонения подписания электронных документов. Результат см. НовыйРезультатМетодаОтклонитьПодписаниеДокументовЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтклонитьПодписаниеДокументовЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаОтклонитьПодписаниеДокументовЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат аннулирования электронных документов. Результат см. НовыйРезультатМетодаАннулироватьДокументыЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаАннулироватьДокументыЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.АннулироватьДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаАннулироватьДокументыЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат принятия аннулирования электронных документов. Результат см. НовыйРезультатМетодаПринятьАннулированиеДокументовЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаПринятьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПринятьАннулированиеДокументовЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаПринятьАннулированиеДокументовЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат отклонения аннулирования электронных документов. Результат см. НовыйРезультатМетодаОтклонитьАннулированиеДокументовЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтклонитьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтклонитьАннулированиеДокументовЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаОтклонитьАннулированиеДокументовЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат отклонения электронных документов. Результат см. НовыйРезультатМетодаОтклонитьДокументыЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтклонитьДокументыЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтклонитьДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаОтклонитьДокументыЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат отправки в архив электронных документов. Результат см. НовыйРезультатМетодаОтправитьВАрхивДокументыЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьВАрхивДокументыЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтправитьВАрхивДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаОтправитьВАрхивДокументыЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат принудительного закрытия электронных документов. Результат см. НовыйРезультатМетодаЗакрытьДокументыЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаЗакрытьДокументыЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ЗакрытьДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаЗакрытьДокументыЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращает результат возврата в работу электронных документов. Результат см. НовыйРезультатМетодаВернутьВРаботуДокументыЭДО
// 
// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаВернутьВРаботуДокументыЭДО(ИдентификаторыДокументовЭДО) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ВернутьВРаботуДокументыЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  См. НовыйРезультатПолученияСостоянияДокументаЭДО
Функция НовыйРезультатМетодаВернутьВРаботуДокументыЭДО() Экспорт
	Возврат НовыйРезультатПолученияСостоянияДокументаЭДО();
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
Функция НовыйРезультатПолученияСостоянияДокументаЭДО()
	Возврат Новый Структура("Ошибки, СостоянияДокументовЭДО", Неопределено, Новый Массив);
КонецФункции

#КонецОбласти

#Область РаботаСПакетамиДокументовЭДО

// Возвращает результат добавления электронного документа в пакет. Результат см. НовыйРезультатДобавленияВПакетКДокументуЭДО
// 
// Параметры:
//  ИдентификаторДокументаВПакете - Строка
//  ИдентификаторДокументаБезПакета - Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаДобавитьВПакетКДокументуЭДО(ИдентификаторДокументаВПакете, ИдентификаторДокументаБезПакета) Экспорт
	ПараметрыМетода = Новый Массив; // Массив из Строка
	ПараметрыМетода.Добавить(ИдентификаторДокументаВПакете);
	ПараметрыМетода.Добавить(ИдентификаторДокументаБезПакета);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ДобавитьВПакетКДокументуЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Булево
//  * ТекстОшибки - Строка
//  * ИдентификаторПакета - Строка
Функция НовыйРезультатДобавленияВПакетКДокументуЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ИдентификаторПакета", "");
	Возврат Результат;
КонецФункции

// Возвращает результат удаления электронного документа из пакета. Результат см. НовыйРезультатУдаленияИзПакетаДокументовЭДО
// 
// Параметры:
//  ИдентификаторДокумента - Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаУдалитьИзПакетаДокументовЭДО(ИдентификаторДокумента) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.УдалитьИзПакетаДокументовЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Булево
//  * ТекстОшибки - Строка
Функция НовыйРезультатУдаленияИзПакетаДокументовЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
КонецФункции

// Возвращает сведения об измененных пакетах документов ЭДО. Результат см. НовыйРезультатПолученияИзмененныхПакетовДокументовЭДО
// 
// Параметры:
//  ДатаНачалаВыборки - Дата - универсальная дата.
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаИзмененныеПакетыДокументовЭДО(ДатаНачалаВыборки) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаНачалаВыборки);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИзмененныеПакетыДокументовЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ДатаОкончанияВыборки - Строка - дата в формате ISO.
//  * ОписанияПакетов - Массив из Структура:
//  ** ИдентификаторПакета - Строка
//  ** Дата - Строка - дата в формате ISO.
//  ** КлючСортировки - Строка
//  ** Состав - Массив из Строка - идентификаторы документов.
Функция НовыйРезультатПолученияИзмененныхПакетовДокументовЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаОкончанияВыборки", "");
	Результат.Вставить("ОписанияПакетов", Новый Массив);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

// Возвращает информацию о номенклатуре из файлов основных титулов электронных документов. Результат см. НовыеСведенияНоменклатурыДокументовЭДО
// 
// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаСведенияНоменклатурыДокументовЭДО(ИдентификаторыДокументов) Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СформироватьДокументыЭДО",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументов));
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * СведенияОНоменклатуре - Массив из Структура:
//  ** ИД - Строка
//  ** Штрихкод - Строка
//  ** Наименование - Строка
//  ** НаименованиеХарактеристики - Строка
//  ** КодТовара - Строка
//  ** Артикул - Строка
//  ** БазоваяЕдиницаКод - Строка
//  ** БазоваяЕдиницаНаименование - Строка
//  ** БазоваяЕдиницаНаименованиеПолное - Строка
//  ** БазоваяЕдиницаМеждународноеСокращение - Строка
//  ** БазоваяЕдиницаНаименованиеКраткое - Строка
//  ** СтавкаНДС - Строка
//  ** Описание - Строка
//  ** ИсторияИдентификаторов - Массив из Структура
//  ** ТипНоменклатурыФНС - Строка
//  ** КодПоКТРУ - Строка
//  ** КодТНВЭД - Строка
//  ** СтранаПроисхожденияКод - Строка
//  ** ПрослеживаемыйТовар - Булево
//  ** МаркируемыйТовар - Булево
Функция НовыеСведенияНоменклатурыДокументовЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает учетные данные из файлов основных титулов электронных документов. Результат см. НовыеУчетныеДанныеДокументовЭДО
// 
// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаУчетныеДанныеДокументовЭДО(ИдентификаторыДокументов) Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.УчетныеДанныеДокументовЭДО",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументов));
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура - данные прикладного решения:
//  ** Данные - Структура - учетные данные для конвертации.
//  ** Формат - Строка - формат учетных данных.
//
Функция НовыеУчетныеДанныеДокументовЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

#КонецОбласти

#Область ПросмотрДокумента

// Возвращает итоги документа по данным файла электронного документа. Результат см. НовыеИтогиДокументаПоСодержанию.
//
// Параметры:
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаИтогиДокументаПоСодержанию(ИдентификаторДокумента) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИтогиДокументаПоСодержанию", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Сумма - Число 
//  * СуммаНДС - Число 
//  * ПредставлениеВалюты - Строка
//  * ПредставлениеСтавкиНДС - Строка
Функция НовыеИтогиДокументаПоСодержанию() Экспорт
	ИтогиДокумента = Новый Структура;
	ИтогиДокумента.Вставить("Сумма", 0);
	ИтогиДокумента.Вставить("СуммаНДС", 0);
	ИтогиДокумента.Вставить("ПредставлениеВалюты", "");
	ИтогиДокумента.Вставить("ПредставлениеСтавкиНДС", "");
	Возврат ИтогиДокумента;
КонецФункции

// Возвращает имена файлов титулов отправителя по документам пакета. Результат см. НовыеИменаФайловОтправителейДокументовПакета.
//
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаИменаФайловОтправителейДокументовПакета(ИдентификаторПакета) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка(ИдентификаторПакета));
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИменаФайловОтправителейДокументовПакета", Параметры);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * ИмяФайла - Строка
Функция НовыеИменаФайловОтправителейДокументовПакета() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает сопроводительные записки сообщений электронного документа. Результат см. НовыеСопроводительныеЗаписиДокумента.
//
// Параметры:
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСопроводительныеЗаписиДокумента(ИдентификаторДокумента) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СопроводительныеЗаписиДокументаЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * Направление - Строка - принимает значения: Входящий, Исходящий, Внутренний.
//  * Дата - Строка - дата в формате ISO.
//  * ДополнительнаяИнформация - Строка
Функция НовыеСопроводительныеЗаписиДокумента() Экспорт
	Возврат Новый Массив;
КонецФункции

#КонецОбласти

#Область Визуализация

// Возвращает визуализацию электронного документа. Результат см. НовыеСвойстваВизуализацииДокумента.
//
// Параметры:
//  ИдентификаторДокумента - Строка
//  ПараметрыВизуализации - Структура:
//  * ВыводитьДопДанные - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ВыводитьКопияВерна - Булево
//  * ПодсказкаQRКода - Строка
//  * ПубличнаяСсылкаQRКода - Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаВизуализацияДокумента(ИдентификаторДокумента, ПараметрыВизуализации = Неопределено) Экспорт
	Параметры = Новый Массив; // Массив из Строка,Структура
	Параметры.Добавить(ИдентификаторДокумента);
	Если ПараметрыВизуализации <> Неопределено Тогда
		Параметры.Добавить(ПараметрыВизуализации);
	КонецЕсли;
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ВизуализацияДокумента", Параметры);	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Данные - Строка - двоичные данные в формате base64.
//  * ТипДанных - Строка - принимает значения: mxl, html, ИмяФайла.
//  * ВерсияДанных - Строка - хеш-сумма MD5 от данных визуализации.
//  * ИдентификаторПравила - Строка - хеш-сумма MD5 от измерений регистра сведений ПравилаПреобразованияФорматов.
//  * ДатаОбновленияПравила - Строка - Дата в формате ISO. Соответствует значению ресурса ДатаОбновления регистра сведений
//                               ПравилаПреобразованияФорматов на момент формирования данных визуализации.
//  * Настройки - Неопределено,Структура:
//    ** ВыводитьБанковскиеРеквизиты - Булево - опционально.
//    ** ВыводитьДополнительныеДанные - Булево - опционально.
//    ** ВыводитьКопияВерна - Булево - опционально.
Функция НовыеСвойстваВизуализацииДокумента() Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("Данные", "");
	Свойства.Вставить("ТипДанных", "");
	Свойства.Вставить("ВерсияДанных", "");
	Свойства.Вставить("ИдентификаторПравила", "");
	Свойства.Вставить("ДатаОбновленияПравила", "");
	Свойства.Вставить("Настройки", Неопределено);
	Возврат Свойства;
КонецФункции

// Возвращает представление xml файлов электронного документа. Результат см. НовыеСвойстваВизуализацииДокумента.
// 
// Параметры:
//  ФайлыДокумента - Массив из Структура:
//  * ИмяФайла - Строка
//  * Данные - Строка - двоичные данные xml файлов в формате base64.
//  ПараметрыВизуализации - Структура:
//  * ВыводитьДопДанные - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ВыводитьКопияВерна - Булево
//  * ПодсказкаQRКода - Строка
//  * ПубличнаяСсылкаQRКода - Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаВизуализацияФайловДокументаЭДО(ФайлыДокумента, ПараметрыВизуализации = Неопределено) Экспорт
	Параметры = Новый Массив; // Массив из Структура,Массив
	Параметры.Добавить(ФайлыДокумента);
	Если ПараметрыВизуализации <> Неопределено Тогда
		Параметры.Добавить(ПараметрыВизуализации);
	КонецЕсли;
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ВизуализацияФайловДокументаЭДО", Параметры);	
КонецФункции

// Возвращает даты обновления правил визуплизации электронных документов. Результат см. НовыйРезультатПолученияИзмененныхСостоянийВизуализацийДокументовЭДО
//
// Параметры:
//  ДатаНачала - Дата
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаИзмененныеСостоянияВизуализацийДокументовЭДО(ДатаНачала) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаНачала);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИзмененныеСостоянияВизуализацийДокументовЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ДатаОкончанияВыборки - Строка - дата в формате ISO.
//  * ВерсииДанныхВизуализаций - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ВерсияДанных - Строка
//  * ДатыОбновленияПравил - Массив из Структура:
//  ** ИдентификаторПравила - Строка
//  ** ДатаОбновления - Строка - дата в формате ISO.
Функция НовыйРезультатПолученияИзмененныхСостоянийВизуализацийДокументовЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаОкончанияВыборки", "");
	Результат.Вставить("ВерсииДанныхВизуализаций", Новый Массив);
	Результат.Вставить("ДатыОбновленияПравил", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает сведения о состоянии документа ЭДО. Результат см. НовыйРезультатМетодаСостояниеДокументаЭДО
// 
// Параметры:
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСостояниеДокументаЭДО(ИдентификаторДокумента) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СостояниеДокументаЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИмяСостояния - Строка
//  * Дополнение - Строка
//  * ДатаИзменения - Строка - дата в формате ISO.
//  * Комментарий - Строка
Функция НовыйРезультатМетодаСостояниеДокументаЭДО() Экспорт
	РеквизитыСостояния = Новый Структура;
	РеквизитыСостояния.Вставить("ИмяСостояния", "");
	РеквизитыСостояния.Вставить("Дополнение", "");
	РеквизитыСостояния.Вставить("ДатаИзменения", "");
	РеквизитыСостояния.Вставить("Комментарий", "");
	Возврат РеквизитыСостояния;
КонецФункции

// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСостоянияДокументовЭДО(ИдентификаторыДокументов) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументов);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СостоянияДокументовЭДО", Параметры);
КонецФункции

#КонецОбласти

#Область Подписи

// Возвращает описания установленных подписей по документу ЭДО. Результат см. НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО
// 
// Параметры:
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаУстановленныеПодписи(ИдентификаторДокумента) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОписанияУстановленныхПодписейДокументаЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ПодписанныйОбъект - Строка
//  * ПорядковыйНомер - Число
//  * Владелец - Строка
//  * ДатаПодписи - Строка
//  * ДатаПроверкиПодписи - Строка
//  * ДоверенностьПредставление - Строка
//  * ПодписьВерна - Булево
//  * ПодписьВернаПредставление - Строка
//  * ЭтоВходящаяПодпись - Булево
//  * ЭтоПодписьПоДоверенности - Булево
//  * ПодписьПоДоверенностиВерна - Булево
//  * ДоверенностьПроверенаУспешно - Булево
//  * ПроверкаДоверенностиВыполненаВручную - Булево
//  * ПроверкаПолномочийВыполненаБезОшибок - Булево
Функция НовыйРезультатМетодаОписанияУстановленныхПодписейДокументаЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает информацию о проверки подписей документов. Результат см. НовыйРезультатМетодаПроверитьПодписиДокументовЭДО.
// 
// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПроверитьПодписиДокументовЭДО(ИдентификаторыДокументов) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыДокументов);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПроверитьПодписиДокументов", Параметры);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * ЕстьНевалидныеПодписи - Булево
//  * ДатаПроверки - Строка - дата в формате ISO.
Функция НовыйРезультатМетодаПроверитьПодписиДокументовЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает описание маршрута подписания по документу ЭДО. Результат см. НовыйРезультатМетодаМаршрутПодписанияДокумента
// 
// Параметры:
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаМаршрутПодписанияДокумента(ИдентификаторДокумента) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.МаршрутПодписанияДокумента", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Тип - Строка - Принимает значения: ОднойДоступнойПодписью
//  * Представление - Строка
//  * ПредставлениеПрогресса - Строка
//  * СостояниеПодписания - Массив из Структура:
//    ** Идентификатор - Строка
//    ** ИдентификаторРодителя - Строка
//    ** Порядок - Число
//    ** Требование - Строка - Принимает значения: И, ИЛИ, ПоПорядку
//    ** ПредставлениеПодписанта - Строка
//    ** ОтпечатокСертификата - Строка
//    ** Организация - Неопределено,Структура:
//       *** ИНН - Строка
//       *** КПП - Строка
//    ** ЭтоТекущийПодписант - Булево
Функция НовыйРезультатМетодаМаршрутПодписанияДокумента() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", "");
	Результат.Вставить("Представление", "");
	Результат.Вставить("ПредставлениеПрогресса", "");
	Результат.Вставить("СостояниеПодписания", Новый Массив);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Приглашения

// Возвращает настройки уведомлений по учетной записи ЭДО. Результат см. НовыйРезультатПолученияНастроекУведомленийУчетнойЗаписиЭДО.
// 
// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  МаркерАвторизации - см. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаНастройкиУведомленийУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, МаркерАвторизации) Экспорт
	Параметры = Новый Массив; // Массив из Строка,Структура
	Параметры.Добавить(ИдентификаторУчетнойЗаписиЭДО);
	Параметры.Добавить(МаркерАвторизации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.НастройкиУведомленийУчетнойЗаписиЭДО", Параметры);	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Настройки - Неопределено,Структура:
//  ** АдресУведомлений - Строка
//  ** УведомлятьОСобытиях - Булево
//  ** УведомлятьОНовыхПриглашениях - Булево
//  ** УведомлятьОбОтветахНаПриглашения - Булево
//  ** УведомлятьОНовыхДокументах - Булево
//  ** УведомлятьОНеобработанныхДокументах - Булево
//  ** УведомлятьОбОкончанииСрокаДействияСертификата - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатПолученияНастроекУведомленийУчетнойЗаписиЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Настройки", Неопределено);
	Результат.Вставить("Ошибка", Неопределено);
	Возврат Результат;
КонецФункции

// Изменяет настройки уведомлений учетной записи ЭДО. Результат см. НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО.
// 
// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  НастройкиУведомлений - Структура:
//  * АдресУведомлений - Строка
//  * УведомлятьОНовыхПриглашениях - Булево
//  * УведомлятьОбОтветахНаПриглашения - Булево
//  * УведомлятьОНовыхДокументах - Булево
//  * УведомлятьОНеОбработанныхДокументах - Булево
//  * УведомлятьОбОкончанииСрокаДействияСертификата - Булево
//  МаркерАвторизации - см. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаОбновитьНастройкиУведомленийУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, НастройкиУведомлений, МаркерАвторизации) Экспорт
	Параметры = Новый Массив; // Массив из Строка,Структура
	Параметры.Добавить(ИдентификаторУчетнойЗаписиЭДО);
	Параметры.Добавить(НастройкиУведомлений);
	Параметры.Добавить(МаркерАвторизации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.НастройкиУведомленийУчетнойЗаписиЭДО", Параметры);	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибка", Неопределено);
	Возврат Результат;
КонецФункции

// Отклонить приглашения ЭДО. Результат см. НовыйРезультатОтклоненияПриглашенийЭДО
// 
// Параметры:
//  ДанныеПриглашенийЭДО - Массив из Структура:
//  * ИдентификаторДанных - Строка
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ПричинаОтказа - Строка
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаОтклонитьПриглашенияЭДО(ДанныеПриглашенийЭДО, МаркерыАвторизации) Экспорт
	Параметры = Новый Массив; // Массив из Массив
	Параметры.Добавить(ДанныеПриглашенийЭДО);
	Параметры.Добавить(МаркерыАвторизации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.НастройкиУведомленийУчетнойЗаписиЭДО", Параметры);	
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторДанных - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - Дата
//  * ОписаниеОшибки - Строка
Функция НовыйРезультатОтклоненияПриглашенийЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает результат получения приглашений из сервиса ЭДО. Результат см. НовыйРезультатПолученияПриглашенийИзСервисаЭДО
// 
// Параметры:
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПолучитьПриглашенияИзСервисаЭДО(МаркерыАвторизации) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МаркерыАвторизации);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПолучитьПриглашенияИзСервисаЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено,Строка
//  * Получено - Число
Функция НовыйРезультатПолученияПриглашенийИзСервисаЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("Получено", 0);
	Возврат Результат;
КонецФункции

// Возвращает измененные приглашения ЭДО с указанной даты. Результат см. НовыйРезультатПолученияИзмененныхПриглашенийЭДО
// 
// Параметры:
//  ДатаНачала - Дата
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаИзмененныеПриглашенияЭДО(ДатаНачала) Экспорт
	ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаНачала);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИзмененныеПриглашенияЭДО", ПараметрыМетода);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ДатаОкончанияВыборки - Строка - дата в формате ISO.
//  * ДанныеПриглашенийЭДО - Массив из Структура:
//  ** Ключ - Строка
//  ** Тип - Строка
//  ** ИдентификаторОрганизации - Строка
//  ** ИдентификаторКонтрагента - Строка
//  ** ПолучательИНН - Строка
//  ** ПолучательКПП - Строка
//  ** ИдентификаторОператора - Строка
//  ** Организация - Структура:
//  *** ИНН - Строка
//  *** КПП - Строка
//  ** Контрагент - Структура:
//  *** Наименование - Строка
//  *** ИНН - Строка
//  *** КПП - Строка
//  ** EmailОрганизации - Строка
//  ** EmailКонтрагента - Строка
//  ** ТекстПриглашения - Строка
//  ** ПричинаОтказа - Строка
//  ** Статус - Строка
//  ** ДатаИзмененияСтатуса - Строка - дата в формате ISO.
//  ** ОписаниеОшибки - Строка
Функция НовыйРезультатПолученияИзмененныхПриглашенийЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаОкончанияВыборки", "");
	Результат.Вставить("ДанныеПриглашенийЭДО", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращает список доступных операторов ЭДО. Результат см. НовыйРезультатМетодаСписокОператоровЭДО
// 
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПолученияСпискаОператоровЭДО() Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СписокОператоровЭДО", Новый Массив);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
Функция НовыйРезультатМетодаСписокОператоровЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает параметры связи между идентификаторами ЭДО организации и идентификаторами ЭДО контрагентов.
// Результат см. НовыйРезультатМетодаНаборПараметровСвязиИдентификаторовАбонентовЭДО
// 
// Параметры:
//  ПараметрыАбонентовЭДО - Структура:
//  * Контрагенты - Массив из Структура:
//  ** Наименование - Строка
//  ** ИНН - Строка
//  ** КПП - Строка
//  * ИдентификаторыКонтрагента - Массив из Строка
//  * ИдентификаторыОрганизации - Массив из Строка
//  * ФормироватьСписокВыбора - Булево
//  * ПриоритетПодключенные - Булево
//
// Возвращаемое значение:
//  См. СервисОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаНаборПараметровСвязиИдентификаторовАбонентовЭДО(ПараметрыАбонентовЭДО) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыАбонентовЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.НаборПараметровСвязиИдентификаторовАбонентовЭДО",Параметры);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * Контрагент - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторКонтрагентаПредставление - Строка
//  * ИдентификаторКонтрагентаОписание - Строка
//  * ОператорКонтрагента - Строка
//  * ОператорКонтрагентаПредставление - Строка
//  * АбонентВХабе1С - Булево
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторОрганизацииПредставление - Строка
//  * ОператорОрганизации - Строка
//  * ИмяФайлаСоглашенияНаРоуминг - Строка
//  * РекомендацияПоНастройке - Строка
//  * СтатусПриглашенияПредставление - Строка
//  * АбонентАктивен - Булево
//  * СертификатДействителен - Булево
//  * СтатусПодключения - Число
//  * ОператорыСовпадают - Булево
//  * СвязьДоступна - Число
//  * ОтправкаТолькоНаИдентификаторЭДО - Булево
//  * ТребуетсяСоглашение - Булево
//  * СписокВыбора - см. СписокВыбораИдентификаторовКонтрагентаВФорматСервиса
//  * Абоненты - см. АбонентыПараметровСвязиИдентификаторовЭДОВФорматСервиса
//  * ТребуетсяСоглашениеПриПервомПодключении - Булево
//  * ОбязательнаяОтправкаЗаявкиНаРоуминг - Булево
//  * ЗаявкаНаРоумингПринята - Булево
//  * ПриглашениеОтправлено - Булево
//  * ВариантПотребностиСоглашения - Строка
//  * СтатусПриглашенияНаИдентификатор - Строка
//  * СтатусШироковещательногоПриглашения - Строка
//  * СтатусЗаявкиНаРоуминг - Строка
Функция НовыйРезультатМетодаНаборПараметровСвязиИдентификаторовАбонентовЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

#КонецОбласти

#Область УчетныеЗаписиЭДО

// Возвращает список доступных учетных записей ЭДО. Результат см. НовыйСписокУчетныхЗаписейЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаСписокУчетныхЗаписейЭДО() Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СписокУчетныхЗаписейЭДО", Новый Массив);
КонецФункции

// Возвращаемое значение:
//  Массив из Строка
Функция НовыйСписокУчетныхЗаписейЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает идентификаторы организации по данным сервиса 1С-ЭДО. Результат см. НовыйРезультатПолученияИдентификаторовОрганизацииВСервисе1СЭДО
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаИдентификаторыОрганизацииВСервисе1СЭДО() Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ИдентификаторыОрганизацииВСервисе1СЭДО", Новый Массив);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Неопределено,Структура
//  * СписокИдентификаторов - Неопределено
//                          - Массив из Структура:
//  ** Идентификатор - Строка
//  ** Наименование - Строка
//  ** ЕстьУчетнаяЗапись - Булево
Функция НовыйРезультатПолученияИдентификаторовОрганизацииВСервисе1СЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Неопределено);
	Результат.Вставить("СписокИдентификаторов", Неопределено);
	Возврат Результат;
КонецФункции

// Изменяет информацию об учетной записи ЭДО. Результат см. НовыйРезультатОбновленияИнформацииОбУчетнойЗаписиЭДО.
// 
// Параметры:
//  ИнформацияОбУчетнойЗаписиЭДО - Структура:
//  * ИдентификаторЭДО - Строка
//  * Назначение - Строка
//  * ПодробноеОписание - Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаОбновитьИнформациюОбУчетнойЗаписиЭДО(ИнформацияОбУчетнойЗаписиЭДО) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИнформацияОбУчетнойЗаписиЭДО);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОбновитьИнформациюОбУчетнойЗаписиЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатОбновленияИнформацииОбУчетнойЗаписиЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибка", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращает операторов электронного документооборота, которые доступны для подключения через 1С.
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОператорыДляРегистрацииВЭДО() Экспорт
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОператорыДляРегистрацииВЭДО", Новый Массив);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
//  * ОГРН - Строка
//  * ОтпечатокСертификата - Строка
//  * СпособОбмена - Строка
Функция НовыйРезультатМетодаОператорыДляРегистрацииВЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

// Возвращает результат установки данных аутентификации пользователя интернет поддежки.
// Результат см. НовыйРезультатМетодаУстановитьДанныеАутентификацииПользователяИнтернетПоддежки
//
// Параметры:
//  ДанныеАутентификации - Структура:
//  * Логин - Строка - логин пользователя Интернет-поддержки.
//  * Пароль - Строка - пароль пользователя Интернет-поддержки.
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаУстановитьДанныеАутентификацииПользователяИнтернетПоддежки(ДанныеАутентификации) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеАутентификации);
	Возврат ОписаниеМетодаСервиса(
		"ОбменСКонтрагентамиВОблаке.УстановитьДанныеАутентификацииПользователяИнтернетПоддежки", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатМетодаУстановитьДанныеАутентификацииПользователяИнтернетПоддежки() Экспорт
	Возврат Новый Структура("Успех, Ошибка", Ложь, Неопределено);
КонецФункции

// Возвращает результаты создания заявок на регистрацию в сервисе ЭДО. Результат см. НовыйРезультатМетодаСформироватьЗаявкуНаРегистрациюВЭДО
// 
// Параметры:
//  ДанныеЗаявки - Структура:
//  * Идентификатор - Строка
//  * ОператорЭДО - Строка - код оператора ЭДО.
//  * ИдентификаторЭДО - Строка - уникальный идентификатор участника в обмене электронными документами.
//  * АдресОрганизации - Строка
//  * КодНалоговогоОргана - Строка - код налоговой инспекции, в которой зарегистрирована организация.
//  * ЭлектроннаяПочта - Строка
//  * ОтпечатокСертификатаДляПодписания - Строка
//  * СертификатыДляРегистрации - Массив из Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьЗаявкуНаРегистрациюВЭДО(ДанныеЗаявки) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаявки);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СформироватьЗаявкуНаРегистрациюВЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено - ошибка отсутствует.
//           - Структура:
//  ** СертификатыУжеЗарегистрированы - Булево
//  ** ОтпечаткиСертификатовБезДоверенностей - Неопределено - отсутствуют сертификаты без доверенностей.
//                                           - Массив из Строка - набор отпечатков сертификатов, по которым не найдена доверенность.
//  ** ОжиданиеДругойЗаявки - Неопределено - ожидание отсутствует.
//                          - Строка - идентификатор ожидаемой заявки.
//  ** Представление - Строка
Функция НовыйРезультатМетодаСформироватьЗаявкуНаРегистрациюВЭДО() Экспорт
	Возврат Новый Структура("Успех, Ошибка", Ложь, Неопределено);
КонецФункции

// Возвращает данные для подписания на регистрацию ВЭДО. Результат см. НовыйРезультатМетодаПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
// 
// Параметры:
//  ИдентификаторЗаявки - Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО(ИдентификаторЗаявки) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторЗаявки);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО",Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибка - Неопределено,Строка
//  * ДанныеДляПодписания - Неопределено,Структура:
//  ** ОтпечатокСертификатаДляПодписания - Неопределено - не указан сертификат подписанта.
//                                       - Строка
//  ** ОтпечаткиСертификатовДляВыбора - Массив из Строка - сертификаты для регистрации.
//  ** ДанныеСоглашения - Строка
//  ** ДанныеДляРегистрации - Строка
Функция НовыйРезультатМетодаПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО() Экспорт
	Возврат Новый Структура("Ошибка, ДанныеДляПодписания", Неопределено, Неопределено);
КонецФункции

// Заполнить подписанта данных на регистрацию ВЭДО. Результат см. НовыйРезультатМетодаЗаполнитьПодписантаДанныхНаРегистрациюВЭДО
// 
// Параметры:
//  ИдентификаторЗаявки - Строка
//  ОтпечатокСертификата - Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаЗаполнитьПодписантаДанныхНаРегистрациюВЭДО(ИдентификаторЗаявки, ОтпечатокСертификата) Экспорт
	Параметры = Новый Массив; // см. ОписаниеМетодаСервиса.Параметры
	Параметры.Добавить(ИдентификаторЗаявки);
	Параметры.Добавить(ОтпечатокСертификата);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатМетодаЗаполнитьПодписантаДанныхНаРегистрациюВЭДО() Экспорт
	Возврат Новый Структура("Успех, Ошибка", Ложь, Неопределено);
КонецФункции

// Добавить подписи данных на регистрацию ВЭДО. Результат см. НовыйРезультатМетодаДобавитьПодписиЗаявкиНаРегистрациюВЭДО
// 
// Параметры:
//  ПодписиЗаявки - Структура:
//  * Идентификатор - Строка
//  * ПодписьСоглашения - Строка
//  * ПодписьДанныхДляРегистрации - Строка
//  * НомерДоверенности - Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаДобавитьПодписиЗаявкиНаРегистрациюВЭДО(ПодписиЗаявки) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодписиЗаявки);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ДобавитьПодписиЗаявкиНаРегистрациюВЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатМетодаДобавитьПодписиЗаявкиНаРегистрациюВЭДО() Экспорт
	Возврат Новый Структура("Успех, Ошибка", Ложь, Неопределено);
КонецФункции

// Отправить заявку на регистрацию ВЭДО. Результат см. НовыйРезультатМетодаОтправитьЗаявкуНаРегистрациюВЭДО
// 
// Параметры:
//  ИдентификаторЗаявки - Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьЗаявкуНаРегистрациюВЭДО(ИдентификаторЗаявки) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторЗаявки);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ОтправитьЗаявкуНаРегистрациюВЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатМетодаОтправитьЗаявкуНаРегистрациюВЭДО() Экспорт
	Возврат Новый Структура("Успех, Ошибка", Ложь, Неопределено);
КонецФункции

// Возвращает состояния регистрации в сервисе ЭДО.
// 
// Параметры:
//  ИдентификаторыЗаявок - Массив из Строка
//
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
Функция ОписаниеМетодаСостоянияРегистрацииЗаявокВЭДО(ИдентификаторыЗаявок) Экспорт
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыЗаявок);
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.СостоянияРегистрацииЗаявокВЭДО", Параметры);
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторЗаявки - Строка
//  * ВОбработке - Булево
//  * ИдентификаторЭДО - Неопределено,Строка
//  * Ошибка - Неопределено,Строка
Функция НовыйРезультатМетодаСостоянияРегистрацииЗаявокВЭДО() Экспорт
	Возврат Новый Массив;
КонецФункции

#КонецОбласти

#Область Авторизация

// Возвращает маркеры авторизации по учетным записям ЭДО зашифрованные на сертификат. Результат см. НовыйРезультатПолученияМаркеровАвторизацииПоУчетнымЗаписямЭДО
// 
// Параметры:
//  ОтпечаткиСертификатов - Массив из Строка
//  ИдентификаторыУчетныхЗаписейЭДО - Неопределено
//                                  - Массив из Строка
// 
// Возвращаемое значение:
//  См. ОписаниеМетодаСервиса
//
Функция ОписаниеМетодаПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО(ОтпечаткиСертификатов, ИдентификаторыУчетныхЗаписейЭДО = Неопределено) Экспорт
	Параметры = Новый Массив; // Массив из Массив
	Параметры.Добавить(ОтпечаткиСертификатов);
	Если ИдентификаторыУчетныхЗаписейЭДО <> Неопределено Тогда
		Параметры.Добавить(ИдентификаторыУчетныхЗаписейЭДО);
	КонецЕсли;
	Возврат ОписаниеМетодаСервиса("ОбменСКонтрагентамиВОблаке.ПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО", Параметры);	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * ЗашифрованныеМаркеры - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
Функция НовыйРезультатПолученияМаркеровАвторизацииПоУчетнымЗаписямЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Неопределено);
	Результат.Вставить("ЗашифрованныеМаркеры", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура - Новые данные сервиса для расшифровки:
//  * ИдентификаторУчетнойЗаписиЭДО - Строка
//  * ОтпечатокСертификата - Строка
//  * Данные - Строка - двоичные данные в формате base64.
Функция НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО() Экспорт
	ЗашифрованныйМаркер = Новый Структура;
	ЗашифрованныйМаркер.Вставить("ИдентификаторУчетнойЗаписиЭДО", "");
	ЗашифрованныйМаркер.Вставить("ОтпечатокСертификата", "");
	ЗашифрованныйМаркер.Вставить("Данные", "");
	Возврат ЗашифрованныйМаркер;
КонецФункции

#КонецОбласти

#КонецОбласти // ОписаниеМетодаСервиса

#Область ОперацияСервиса

// Возвращаемое значение:
//  Структура:
//  * Асинхронно - Булево
//  * ИдентификаторУчетнойЗаписи - Строка
//  * ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
Функция НоваяОперацияСервиса() Экспорт
	Операция = Новый Структура;
	Операция.Вставить("Асинхронно", Ложь);
	Операция.Вставить("ИдентификаторУчетнойЗаписи", "");
	Операция.Вставить("ОписанияМетодов", Новый Массив);
	Возврат Операция;
КонецФункции

// Параметры:
//  ОперацияСервиса - см. НоваяОперацияСервиса
//  ОписаниеМетода - см. НовоеОписаниеМетодаСервиса
Процедура ДобавитьОписаниеМетодаВОперацию(ОперацияСервиса, ОписаниеМетода) Экспорт
	
	ОписанияМетодов = ОперацияСервиса.ОписанияМетодов;
	ОписанияМетодов.Добавить(ОписаниеМетода);
	
	Если Не ЗначениеЗаполнено(ОписаниеМетода.id) Тогда
		ОписаниеМетода.id = ОписанияМетодов.ВГраница();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОперацияСервиса - см. НоваяОперацияСервиса
// 
// Возвращаемое значение:
//  См. НовыйРезультатОперацииСервиса
Функция ВыполнитьОперациюСервиса(ОперацияСервиса) Экспорт
	
	РезультатОперации = НовыйРезультатОперацииСервиса();
	РезультатОперации.ИдентификаторУчетнойЗаписи = ОперацияСервиса.ИдентификаторУчетнойЗаписи;
	
	ОписанияМетодов = ОперацияСервиса.ОписанияМетодов;
	Если Не ЗначениеЗаполнено(ОписанияМетодов) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыВыполнения = ПараметрыВыполненияМетодаСервиса(ОперацияСервиса.ИдентификаторУчетнойЗаписи);
	
	Если ОперацияСервиса.Асинхронно Тогда
		АсинхроннаяОперация = ВыполнитьПакетМетодовСервисаАсинхронно(ПараметрыВыполнения, ОписанияМетодов);
		РезультатОперации.АсинхроннаяОперация = АсинхроннаяОперация;
	Иначе
		РезультатОбработки = ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ОписанияМетодов);
		РезультатОперации.Ошибки = РезультатОбработки.Ошибки;
		РезультатОперации.РезультатыМетодов = РезультатОбработки.РезультатыМетодов;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторУчетнойЗаписи - Строка
//  * Ошибки - Массив из Структура
//  * РезультатыМетодов - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор запроса.
//  ** Значение - Структура - результат метода.
//  * АсинхроннаяОперация - см. НоваяАсинхроннаяОперация
Функция НовыйРезультатОперацииСервиса()
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторУчетнойЗаписи", "");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("РезультатыМетодов", Новый Соответствие);
	Результат.Вставить("АсинхроннаяОперация", Новый Структура);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область АсинхроннаяОперация

// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияМетодаСервиса
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  См. РезультатОбработкиМетодаСервисаАсинхронно
Функция ВыполнитьПакетМетодовСервисаАсинхронно(ПараметрыВыполнения, ОписанияМетодов)
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения);
	ПараметрыЗапроса.Асинхронно = Истина;
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов);
	
	РезультатОбработки = РезультатОбработкиМетодаСервисаАсинхронно(ПараметрыЗапроса, РезультатОтправки);
	
	Возврат РезультатОбработки;
	
КонецФункции

//@skip-check method-too-many-params
//
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияМетодаСервиса
//  ИмяМетода - Строка
//  Параметр1 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр2 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр3 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр4 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр5 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр6 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр7 - см. ВыполнитьМетодСервиса.Параметр1
// 
// Возвращаемое значение:
//  См. РезультатОбработкиМетодаСервисаАсинхронно
//  
Функция ВыполнитьМетодСервисаАсинхронно(ПараметрыВыполнения, ИмяМетода, Параметр1 = Неопределено,
	Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено,
	Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено) Экспорт
	
	ПараметрыВызова = СписокПараметровМетодаСервиса(Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7);
	
	ОписаниеМетода = ОписаниеМетодаСервиса(ИмяМетода, ПараметрыВызова);
	
	РезультатОбработки = ВыполнитьМетодСервисаПоОписаниюАсинхронно(ПараметрыВыполнения, ОписаниеМетода);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияМетодаСервиса
//  ОписаниеМетода - см. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  См. РезультатОбработкиМетодаСервисаАсинхронно
//  
Функция ВыполнитьМетодСервисаПоОписаниюАсинхронно(ПараметрыВыполнения, ОписаниеМетода) Экспорт
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения);
	ПараметрыЗапроса.Асинхронно = Истина;
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ОписаниеМетода);
	
	РезультатОбработки = РезультатОбработкиМетодаСервисаАсинхронно(ПараметрыЗапроса, РезультатОтправки);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращаемое значение:
//   Структура:
//   * ИдентификаторУчетнойЗаписи - Строка
//   * Статус          - Строка  - "Выполняется", если задание еще не завершилось;
//                                 "Выполнено", если задание было успешно выполнено;
//                                 "Ошибка", если задание завершено с ошибкой;
//   * АдресРесурса    - Строка
//   * ПовторитьПосле  - Число - если Статус = "Выполняется", то содержит количество секунд,
//                              через которое надо повторить запрос результата.
//   * АдресРезультата - Неопределено - если Статус = "Выполняется" или Статус = "Ошибка".
//                     - Строка - адрес временного хранилища.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
Функция НоваяАсинхроннаяОперация() Экспорт
	РезультатЗадания = Новый Структура;
	РезультатЗадания.Вставить("ИдентификаторУчетнойЗаписи", "");
	РезультатЗадания.Вставить("Статус", "Выполнено");
	РезультатЗадания.Вставить("АдресРесурса", "");
	РезультатЗадания.Вставить("ПовторитьПосле", 0);
	РезультатЗадания.Вставить("АдресРезультата", Неопределено);
	РезультатЗадания.Вставить("КраткоеПредставлениеОшибки", "");
	РезультатЗадания.Вставить("ПодробноеПредставлениеОшибки", "");
	Возврат РезультатЗадания;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * АдресРесурса - Строка
//  * АдресРезультата - Строка
Функция НовыеПараметрыПроверкиВыполненияАсинхроннойОперации() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("АдресРесурса", "");
	Параметры.Вставить("АдресРезультата", "");
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПроверокОпераций - Массив из Структура:
//  * ИдентификаторУчетнойЗаписи - Строка
//  * АдресРесурса - Строка
//  * АдресРезультата - Строка
//
// Возвращаемое значение:
//  Массив из см. НоваяАсинхроннаяОперация
//
Функция ПроверитьВыполнениеАсинхронныхОпераций(ПараметрыПроверокОпераций) Экспорт
	
	АсинхронныеОперации = Новый Массив; // См. ПроверитьВыполнениеАсинхронныхОпераций
	
	Для Каждого ПроверкаОперации Из ПараметрыПроверокОпераций Цикл
		АсинхроннаяОперация = ПроверитьВыполнениеАсинхроннойОперации(
			ПроверкаОперации.ИдентификаторУчетнойЗаписи, ПроверкаОперации.АдресРесурса, ПроверкаОперации.АдресРезультата);
		АсинхронныеОперации.Добавить(АсинхроннаяОперация);
	КонецЦикла;
	
	Возврат АсинхронныеОперации;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  АдресРесурса - Строка
//  АдресРезультата - Строка - Адрес временного хранилища.
// 
// Возвращаемое значение:
//  См. НоваяАсинхроннаяОперация
//
Функция ПроверитьВыполнениеАсинхроннойОперации(ИдентификаторУчетнойЗаписи, АдресРесурса, АдресРезультата)
	
	ПараметрыВыполненияМетодаСервиса = ПараметрыВыполненияМетодаСервиса(ИдентификаторУчетнойЗаписи, Истина);
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполненияМетодаСервиса);
	ПараметрыЗапроса.АдресРесурса = АдресРесурса;
	
	РезультатСервисаАсинхронно = ПроверитьГотовностьРезультатаОбработкиМетодаСервиса(ПараметрыЗапроса);
	
	АсинхроннаяОперация = АсинхроннаяОперацияПоРезультатуСервисаАсинхронно(ИдентификаторУчетнойЗаписи,
		РезультатСервисаАсинхронно, АдресРезультата);
	
	Если ПустаяСтрока(АсинхроннаяОперация.АдресРезультата) Тогда
		УдалитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
	Возврат АсинхроннаяОперация;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
//  РезультатСервисаАсинхронно - см. РезультатОбработкиМетодаСервисаАсинхронно
//  АдресРезультата - Строка, Неопределено - адрес временного хранилища.
// 
// Возвращаемое значение:
//  См. НоваяАсинхроннаяОперация
Функция АсинхроннаяОперацияПоРезультатуСервисаАсинхронно(ИдентификаторУчетнойЗаписи, РезультатСервисаАсинхронно, АдресРезультата = "") Экспорт
	
	АсинхроннаяОперация = НоваяАсинхроннаяОперация();
	АсинхроннаяОперация.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
	
	Если Не РезультатСервисаАсинхронно.РезультатПолучен Тогда
		АсинхроннаяОперация.Статус = "Выполняется";
		АсинхроннаяОперация.АдресРесурса = РезультатСервисаАсинхронно.АдресРесурса;
		АсинхроннаяОперация.ПовторитьПосле = РезультатСервисаАсинхронно.ПовторитьПосле;
		Возврат АсинхроннаяОперация;
	КонецЕсли;
	
	РезультатСервиса = РезультатСервисаАсинхронно.РезультатСервиса; // См. РезультатОбработкиМетодаСервиса
	
	Если РезультатСервиса.ЕстьОшибка Тогда
		АсинхроннаяОперация.Статус = "Ошибка";
		АсинхроннаяОперация.КраткоеПредставлениеОшибки = РезультатСервиса.ТекстОшибки;
		АсинхроннаяОперация.ПодробноеПредставлениеОшибки = РезультатСервиса.ТекстОшибки;
		Возврат АсинхроннаяОперация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		АсинхроннаяОперация.АдресРезультата = ПоместитьВоВременноеХранилище(
			РезультатСервиса.РезультатМетода, АдресРезультата);
	КонецЕсли;
	
	Возврат АсинхроннаяОперация;
	
КонецФункции

// Параметры:
//  ПараметрыЗапроса - см. ПараметрыЗапросаВСервис
// 
// Возвращаемое значение:
//  См. РезультатОбработкиМетодаСервисаАсинхронно
//
Функция ПроверитьГотовностьРезультатаОбработкиМетодаСервиса(ПараметрыЗапроса)
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса);
	
	РезультатОбработки = РезультатОбработкиМетодаСервисаАсинхронно(ПараметрыЗапроса, РезультатОтправки);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Параметры:
//  ПараметрыЗапроса  - см. ПараметрыЗапросаВСервис
//  РезультатОтправки - см. ОтправитьВСервис
// 
// Возвращаемое значение:
//  Структура:
//  * РезультатПолучен - Булево
//  * АдресРесурса     - Строка
//  * ПовторитьПосле - Число - количество секунд, через которое нужно повторить загрузку результата.
//  * РезультатСервиса - Неопределено
//                     - см. РезультатОбработкиМетодаСервиса
//
Функция РезультатОбработкиМетодаСервисаАсинхронно(ПараметрыЗапроса, РезультатОтправки)
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПолучен", Ложь);
	Результат.Вставить("АдресРесурса", "");
	Результат.Вставить("ПовторитьПосле", 0);
	Результат.Вставить("РезультатСервиса", Неопределено);
	
	ОтветСервиса = РезультатОтправки.ОтветСервиса;
	
	Если РезультатОтправки.ЕстьОшибка
		ИЛИ ОтветСервиса.КодСостояния <> 202 Тогда
		Результат.РезультатПолучен = Истина;
		Результат.РезультатСервиса = РезультатОбработкиМетодаСервиса(РезультатОтправки);
	КонецЕсли;
	
	АдресРесурса = ОтветСервиса.Заголовки["Location"]; // Строка
	Если ЗначениеЗаполнено(АдресРесурса) Тогда
		Результат.АдресРесурса = АдресРесурса;
	КонецЕсли;
	
	ПовторитьПосле = ОтветСервиса.Заголовки["Retry-After"]; // Строка
	Если ЗначениеЗаполнено(ПовторитьПосле) Тогда
		Результат.ПовторитьПосле = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПовторитьПосле);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // АсинхроннаяОперация

#Область СинхроннаяОперация

//@skip-check method-too-many-params
//
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияМетодаСервиса
//  ИмяМетода - Строка
//  Параметр1 - Неопределено
//            - Строка
//            - Число
//            - Булево
//            - Массив из Число
//            - Массив из Строка
//            - Массив из Булево
//            - Массив из Структура
//            - Структура
//  Параметр2 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр3 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр4 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр5 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр6 - см. ВыполнитьМетодСервиса.Параметр1
//  Параметр7 - см. ВыполнитьМетодСервиса.Параметр1
// 
// Возвращаемое значение:
//  См. РезультатОбработкиМетодаСервиса
//  
Функция ВыполнитьМетодСервиса(ПараметрыВыполнения, ИмяМетода, Параметр1 = Неопределено,
	Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено,
	Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено) Экспорт
	
	ПараметрыВызова = СписокПараметровМетодаСервиса(Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7);
	
	ОписаниеМетода = ОписаниеМетодаСервиса(ИмяМетода, ПараметрыВызова);
	
	РезультатСервиса = ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода);
	
	Возврат РезультатСервиса;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияМетодаСервиса
//  ОписаниеМетода - см. ОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  См. РезультатОбработкиМетодаСервиса
Функция ВыполнитьМетодСервисаПоОписанию(ПараметрыВыполнения, ОписаниеМетода) Экспорт
	
	ОписанияМетодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеМетода);
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения);
	ПараметрыЗапроса.Событие = СобытиеЗапросаПоОписаниямМетодов(ОписанияМетодов);
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов);
	
	РезультатСервиса = РезультатОбработкиМетодаСервиса(РезультатОтправки);
	
	Возврат РезультатСервиса;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЕстьОшибка - Булево
//  * ТекстОшибки - Строка
//  * РезультатМетода - Неопределено
//                    - Структура
//                    - Массив из Структура
//
Функция НовыйРезультатОбработкиМетодаСервиса()
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("РезультатМетода", Неопределено);
	Возврат Результат;
КонецФункции

// Параметры:
//  РезультатОтправки - см. ОтправитьВСервис
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиМетодаСервиса
//
Функция РезультатОбработкиМетодаСервиса(РезультатОтправки)
	
	Результат = НовыйРезультатОбработкиМетодаСервиса();
	
	Содержание = СодержаниеОтветаСервиса(РезультатОтправки);
	Если Содержание.ЭтоОшибка Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = Содержание.ТекстОтвета;
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ДанныеСервиса = РезультатВызоваМетодаСервиса(Содержание.ТекстОтвета); 
	Исключение
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставление = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибкуПриВыполненииМетодаСервиса(РезультатОтправки.Событие,
			КраткоеПредставление, ПодробноеПредставление);
		Возврат Результат;
	КонецПопытки;
	
	Ошибка = ОшибкаИсполненияМетодаПоДаннымСервиса(ДанныеСервиса);
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = Ошибка.Текст;
		Возврат Результат;
	КонецЕсли;
	
	Результат.РезультатМетода = РезультатМетодаПоДаннымСервиса(ДанныеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатОтправки - см. ОтправитьВСервис;
// 
// Возвращаемое значение:
//  Структура:
//  * ЭтоОшибка - Булево
//  * ТекстОтвета - Строка
Функция СодержаниеОтветаСервиса(РезультатОтправки)
	
	Содержание = Новый Структура;
	Содержание.Вставить("ЭтоОшибка", Ложь);
	Содержание.Вставить("ТекстОтвета", "");
	
	Если РезультатОтправки.ЕстьОшибка Тогда
		Содержание.ЭтоОшибка = Истина;
		Содержание.ТекстОтвета = РезультатОтправки.ТекстОшибки;
		Возврат Содержание;
	КонецЕсли;
	
	ОтветСервиса = РезультатОтправки.ОтветСервиса;
	Если ОтветСервиса = Неопределено Тогда
		Содержание.ЭтоОшибка = Истина;
		Содержание.ТекстОтвета = НСтр("ru='Не удалось получить ответ от сервиса'");
		Возврат Содержание;
	КонецЕсли;
	
	Содержание.ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
	
	Если ОтветСервиса.КодСостояния <> 200 Тогда
		Содержание.ЭтоОшибка = Истина;
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

// Параметры:
//  ТелоОтвета - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * result - Неопределено
//           - Структура
//           - Массив из Структура
//  * error - Неопределено
//          - Структура:
//  ** code - Число
//  ** message - Строка
//  * id - Неопределено,Строка,Число
Функция РезультатВызоваМетодаСервиса(ТелоОтвета)
	
	РезультатВызова = ОбщегоНазначенияБЭД.JSONЗначение(ТелоОтвета); // см. РезультатВызоваМетодаСервиса
	
	Возврат РезультатВызова;
	
КонецФункции

// Параметры:
//  ДанныеСервиса - Структура
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура
Функция РезультатМетодаПоДаннымСервиса(ДанныеСервиса)
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОшибки = Неопределено;
	Если ДанныеСервиса.Свойство("error", ОписаниеОшибки)
		И ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;

	ДанныеСервиса.Свойство("result", Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторМетода - Число,Строка
//  * Код - Число
//  * Текст - Строка
Функция НоваяОшибкаИсполненияМетода()
	Ошибка = Новый Структура;
	Ошибка.Вставить("ИдентификаторМетода", 0);
	Ошибка.Вставить("Код", 0);
	Ошибка.Вставить("Текст", "");
	Возврат Ошибка;
КонецФункции

// Параметры:
//  ДанныеСервиса - Структура
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НоваяОшибкаИсполненияМетода
Функция ОшибкаИсполненияМетодаПоДаннымСервиса(ДанныеСервиса)
	
	ОшибкаВФорматеСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСервиса, "error"); // Структура
	Если Не ЗначениеЗаполнено(ОшибкаВФорматеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ошибка = НоваяОшибкаИсполненияМетода();
	
	ЗначениеСвойства = Неопределено;
	Если ОшибкаВФорматеСервиса.Свойство("id", ЗначениеСвойства) Тогда
		Ошибка.ИдентификаторМетода = ЗначениеСвойства;
	КонецЕсли;
	
	Если ОшибкаВФорматеСервиса.Свойство("code", ЗначениеСвойства) Тогда
		Ошибка.Код = ЗначениеСвойства;
	КонецЕсли;
	
	Если ОшибкаВФорматеСервиса.Свойство("message", ЗначениеСвойства) Тогда
		Ошибка.Текст = ЗначениеСвойства;
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполненияМетодаСервиса
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиПакетаМетодовСервиса
Функция ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ОписанияМетодов)
	
	ПараметрыЗапроса = ПараметрыЗапросаВСервис(ПараметрыВыполнения);
	ПараметрыЗапроса.Событие = СобытиеЗапросаПоОписаниямМетодов(ОписанияМетодов);
	
	РезультатОтправки = ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов);
	
	РезультатСервиса = РезультатОбработкиПакетаМетодовСервиса(РезультатОтправки);
	
	Возврат РезультатСервиса;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ошибки - Массив из Строка
//  * РезультатыМетодов - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор запроса.
//  ** Значение - Структура - результат метода.
Функция НовыйРезультатОбработкиПакетаМетодовСервиса()
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("РезультатыМетодов", Новый Соответствие);
	Возврат Результат;
КонецФункции

// Параметры:
//  РезультатОтправки - см. ОтправитьВСервис
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиПакетаМетодовСервиса
//
Функция РезультатОбработкиПакетаМетодовСервиса(РезультатОтправки)
	
	Результат = НовыйРезультатОбработкиПакетаМетодовСервиса();
	
	Содержание = СодержаниеОтветаСервиса(РезультатОтправки);
	Если Содержание.ЭтоОшибка Тогда
		Результат.Ошибки.Добавить(Содержание.ТекстОтвета);
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		РезультатВызоваПакетаМетодов = РезультатВызоваПакетаМетодовСервиса(Содержание.ТекстОтвета);
	Исключение
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставление = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибкуПриВыполненииМетодаСервиса(РезультатОтправки.Событие,
			КраткоеПредставление, ПодробноеПредставление);
		Возврат Результат;
	КонецПопытки;
	
	Для Каждого РезультатВызоваМетода Из РезультатВызоваПакетаМетодов Цикл
		
		Ошибка = ОшибкаИсполненияМетодаПоДаннымСервиса(РезультатВызоваМетода);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Результат.Ошибки.Добавить(Ошибка.Текст);
			Продолжить;
		КонецЕсли;
		
		РезультатМетода = РезультатМетодаПоДаннымСервиса(РезультатВызоваМетода);
		Если ЗначениеЗаполнено(РезультатМетода) Тогда
			Результат.РезультатыМетодов.Вставить(РезультатВызоваМетода.id, РезультатМетода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТелоОтвета - Строка
// 
// Возвращаемое значение:
//  Массив из см. РезультатВызоваМетодаСервиса
Функция РезультатВызоваПакетаМетодовСервиса(ТелоОтвета)
	
	РезультатВызова = ОбщегоНазначенияБЭД.JSONЗначение(ТелоОтвета); // см. РезультатВызоваМетодаСервиса, Массив из см. РезультатВызоваМетодаСервиса
	
	Если ТипЗнч(РезультатВызова) <> Тип("Массив") Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РезультатВызова);
	КонецЕсли;
	
	Возврат РезультатВызова;
	
КонецФункции

#КонецОбласти // СинхроннаяОперация

#Область ЗапросВСервис

// Отправляет запрос в сервис и возвращает ответ.
// 
// Параметры:
//  ПараметрыЗапроса - см. ПараметрыЗапросаВСервис
//  ОписанияМетодов - Неопределено
//                  - Массив из см. ОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Структура:
//  * ЕстьОшибка - Булево
//  * ТекстОшибки - Строка
//  * Событие - Строка
//  * ОтветСервиса - Неопределено
//                - HTTPОтвет
Функция ОтправитьВСервис(ПараметрыЗапроса, ОписанияМетодов = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Событие", ПараметрыЗапроса.Событие);
	Результат.Вставить("ОтветСервиса", Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторУчетнойЗаписи) Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = НСтр("ru='Ошибка аутентификации. Не заполнен идентификатор учетной записи облачного ЭДО.'");
		Возврат Результат;
	КонецЕсли;
	
	СтрокаАутентификации = БизнесСеть.СтрокаАутентификации(ПараметрыЗапроса.ИдентификаторУчетнойЗаписи,,,Ложь);
	
	Если Не ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка аутентификации по учетной записи %1'"),
			ПараметрыЗапроса.ИдентификаторУчетнойЗаписи);
		Возврат Результат;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыЗапроса.АдресРесурса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрокаАутентификации);
	Заголовки.Вставить("Content-Type", "application/json");
	
	Если ПараметрыЗапроса.Асинхронно Тогда
		Заголовки.Вставить("Prefer", "respond-async");
	КонецЕсли;
	
	Соединение = СоединениеССервисом(СтруктураURI);
	ЗапросКСервису = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	
	ЗаполнитьОписанияМетодовВЗапросКСервису(ЗапросКСервису, ОписанияМетодов, ПараметрыЗапроса.МетодЗапроса);
	
	Попытка
		Результат.ОтветСервиса = ВызватьHTTPМетодРасширенный(ПараметрыЗапроса.МетодЗапроса, ЗапросКСервису,
			Соединение, ПараметрыЗапроса.Событие);
	Исключение
		КраткоеПредставление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставление = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибкуПриВыполненииМетодаСервиса(ПараметрыЗапроса.Событие, КраткоеПредставление, ПодробноеПредставление);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Вызывает HTTP метод с логированием.
// 
// Параметры:
//  Метод - Строка - HTTP Метод
//  Запрос - HTTPЗапрос
//  Соединение - HTTPСоединение
//  Событие - Строка - Событие
// 
// Возвращаемое значение:
//  HTTPОтвет
Функция ВызватьHTTPМетодРасширенный(Метод, Запрос, Соединение, Событие) Экспорт
	
	ИмяКомпонентыЛогирования = "ЛогированиеHTTP";
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ИмяКомпонентыЛогирования) Тогда
		МодульЛогированиеHTTP = ОбщегоНазначения.ОбщийМодуль(ИмяКомпонентыЛогирования);
		//@skip-check dynamic-access-method-not-found
		Ответ = МодульЛогированиеHTTP.ВызватьHTTPМетодРасширенный(Метод, Запрос,
			Соединение, Событие); // HTTPОтвет
	Иначе
		Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Параметры:
//  ИспользоватьМетодGET - Булево
// 
// Возвращаемое значение:
//  Строка - Метод http запроса в сервис.
Функция МетодЗапросаВСервис(ИспользоватьМетодGET = Ложь)
	Возврат ?(ИспользоватьМетодGET, "GET", "POST");
КонецФункции

// Возвращает параметры запроса по указанной организации.
// 
// Параметры:
//  ПараметрыВыполнения - См. ПараметрыВыполненияМетодаСервиса
// 
// Возвращаемое значение:
//  Структура:
//  * ИдентификаторУчетнойЗаписи - Строка
//  * АдресРесурса - Строка
//  * Асинхронно - Булево
//  * МетодЗапроса - Строка
//  * Событие - Строка
// 
Функция ПараметрыЗапросаВСервис(ПараметрыВыполнения)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторУчетнойЗаписи", "");
	Параметры.Вставить("АдресРесурса", "");
	Параметры.Вставить("Асинхронно", Ложь);
	Параметры.Вставить("МетодЗапроса", "");
	Параметры.Вставить("Событие", "");
	
	Параметры.МетодЗапроса = МетодЗапросаВСервис(ПараметрыВыполнения.ИспользоватьМетодGET);
	Параметры.ИдентификаторУчетнойЗаписи = ПараметрыВыполнения.ИдентификаторУчетнойЗаписи;
	Параметры.АдресРесурса = АдресРесурса(Параметры.ИдентификаторУчетнойЗаписи);
	
	Возврат Параметры;
	
КонецФункции

// Параметры:
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
// 
// Возвращаемое значение:
//  Строка
Функция СобытиеЗапросаПоОписаниямМетодов(ОписанияМетодов)
	
	НаборСтрок = Новый Массив; // Массив из Строка
	
	Для Каждого ОписаниеМетода Из ОписанияМетодов Цикл
		ИмяМетода = ОписаниеМетода.method;
		Позиция = СтрНайти(ИмяМетода, ".", НаправлениеПоиска.СКонца);
		Если Позиция > 0 Тогда
			Позиция = Позиция + 1;
		КонецЕсли;
		НаборСтрок.Добавить(Сред(ИмяМетода, Позиция));
	КонецЦикла;
	
	Возврат СтрСоединить(НаборСтрок, ", ");
	
КонецФункции

// Возвращает адрес сервиса.
// 
// Возвращаемое значение:
//  Строка - Адрес сервиса.
Функция АдресСервиса() Экспорт
	Возврат Константы.АдресСервисаОблачногоЭДО.Получить();
КонецФункции

// Возвращает соединение с сервисом.
// 
// Параметры:
//  СтруктураURI - см. ОбщегоНазначенияКлиентСервер.СтруктураURI
// 
// Возвращаемое значение:
//  HTTPСоединение
Функция СоединениеССервисом(СтруктураURI)
	
	Таймаут = 30;
 
	Если СтруктураURI.Схема = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,
		СтруктураURI.Логин,
		СтруктураURI.Пароль,
		Прокси,
		Таймаут,
		ЗащищенноеСоединение);
	
	Возврат HTTPСоединение;
	
КонецФункции

// Возвращает адрес ресурса для вызова удаленных методов.
// 
// Параметры:
//  ИдентификаторОрганизации - Строка
// 
// Возвращаемое значение:
//  Строка
Функция АдресРесурса(ИдентификаторОрганизации)
	Возврат СтрШаблон("%1/%2/edo/rpc", АдресСервиса(), ИдентификаторОрганизации);
КонецФункции

// Возвращает идентификатор организации в сервисе.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Строка - Идентификатор организации в сервисе
Функция ИдентификаторОрганизацииВСервисе(Организация) Экспорт
	Возврат БизнесСеть.ИдентификаторОрганизации(Организация);
КонецФункции

// Обработать ошибку при выполнении метода сервиса.
// 
// Параметры:
//  Событие - Строка
//  КраткоеПредставление - Строка - Краткое представление ошибки.
//  ПодробноеПредставление - Строка - Подробное представление ошибки.
Процедура ОбработатьОшибкуПриВыполненииМетодаСервиса(Событие, КраткоеПредставление = "", ПодробноеПредставление = "")
	ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось выполнить метод сервиса %1 по причине:'"), Событие);
	ПодробноеПредставление = ТекстОшибки + Символы.ПС + ПодробноеПредставление;
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставление,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
КонецПроцедуры

// Параметры:
//  ЗапросКСервису - HTTPЗапрос
//  ОписанияМетодов - Массив из см. НовоеОписаниеМетодаСервиса
//  МетодЗапроса - Строка - метод http запроса.
//
Процедура ЗаполнитьОписанияМетодовВЗапросКСервису(ЗапросКСервису, ОписанияМетодов, МетодЗапроса)
	
	Если Не ЗначениеЗаполнено(ОписанияМетодов) Тогда
		Возврат;
	КонецЕсли;
	
	Количество = ОписанияМетодов.Количество();
	
	Если МетодЗапроса = "GET" И Количество = 1 Тогда
		ОписаниеМетодаСтрокой = ОписаниеМетодаВСтрокуПараметровЗапроса(ОписанияМетодов[0]);
		ЗапросКСервису.АдресРесурса = ЗапросКСервису.АдресРесурса + "?" + ОписаниеМетодаСтрокой;
	Иначе
		ДанныеЗапроса = ?(Количество = 1, ОписанияМетодов[0], ОписанияМетодов);
		ДанныеЗапросаСтрокой = ОбщегоНазначенияБЭД.JSONСтрока(ДанныеЗапроса);
		ЗапросКСервису.УстановитьТелоИзСтроки(ДанныеЗапросаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗапросВСервис

#КонецОбласти
