#Область ПрограммныйИнтерфейс

//см. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасширеннаяВерсияГосИС("ИСМП") Тогда
		МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
		МодульИнтеграцияИСМПКлиент.ПодключитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЗЕРНО") Тогда
		МодульИнтеграцияЗЕРНОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияЗЕРНОКлиент");
		МодульИнтеграцияЗЕРНОКлиент.ПослеНачалаРаботыСистемы();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		МодульОбщегоНазначенияЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияЕГАИСКлиент");
		МодульОбщегоНазначенияЕГАИСКлиент.ПослеНачалаРаботыСистемы();
	КонецЕсли;
	
	ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноИС"]       = Ложь;
	ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"] = Новый Соответствие();
	
КонецПроцедуры

// Обработка внешнего события.
// 
// Параметры:
//  Источник - Произвольный
//  Событие - Произвольный
//  Данные - Произвольный
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	Если ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"][Данные] <> Неопределено Тогда
		ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"].Удалить(Данные);
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноИС"] = Ложь;
	
КонецПроцедуры

#Область РаботаСИнтерфейсом

// Разворачивает на форме дерево или его группу со всеми вложенными группами
//
// Параметры:
//  СтрокаДерева - ДеревоЗначений, СтрокаДереваЗначений - разворачиваемая корневая группа
//  ЭлементФормы - ТаблицаФормы - связанный с деревом элемент управляемой формы
//
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы) Экспорт
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
// Параметры:
//  ИдентификаторНазначения    - УникальныйИдентификатор, Неопределено - уникальный идентификатор формы для показа сообщения.
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
// 	см ОбщегоНазначенияКлиентСервер.СообщитьПользователю.
//
Процедура СообщитьПользователюВФорму(
		Знач ИдентификаторНазначения = Неопределено,
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Если ИдентификаторНазначения <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Сообщение.КлючДанных = КлючДанных;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Открывает форму сообщения обмена с государственной информационной системой
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - источник события
//  ИмяПодсистемы   - Строка - краткое имя библиотеки
//  ВыбраннаяСтрока - Произвольный - выбранная строка таблицы
//  ПоказатьГруппу  - Булево - показать документ-источник сообщения
//
Процедура ПоказатьСообщенияОперации(Форма, ИмяПодсистемы, ВыбраннаяСтрока, ПоказатьГруппу = Истина) Экспорт
	
	ДанныеСтроки = Форма.Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		ИмяФормы = СтрШаблон("Справочник.%1ПрисоединенныеФайлы.Форма.ФормаЗапросОтвет", ИмяПодсистемы);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			ИмяФормы,
			ПараметрыФормы,
			Форма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПоказатьГруппу И ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		
		ПоказатьЗначение(,ДанныеСтроки.Документ);
		
	Иначе
		
		ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	ИменаПараметров        = ОбщегоНазначенияИСКлиентСерверПовтИсп.ИменаПараметровРаботыКлиентаВыборТипаПодписиБСП();
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ПараметрыРаботыКлиента[ИменаПараметров.ИмяПараметраПриложения] = ИменаПараметров.ЗначениеПараметраВыборТипаПодписиЗадаетсяПеречислением Тогда
		
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.БазоваяCAdESBES");
		МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение, ТипПодписи);
		
	ИначеЕсли ПараметрыРаботыКлиента[ИменаПараметров.ИмяПараметраПриложения] = ИменаПараметров.ЗначениеПараметраВыборТипаПодписиИспользуетКонструктор Тогда
		
		//@skip-check unknown-method-property
		ТипПодписи = МодульЭлектроннаяПодписьКлиент.НовыйТипПодписи(
			ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.БазоваяCAdESBES"));
		
		МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение, ТипПодписи);
		
	Иначе
		
		МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет был ли пароль сертификата установлен на время сеанса,
// либо с помощью процедуры УстановитьПарольСертификата,
// либо после успешной операции со включенным флажком Сохранить пароль.
//
// Параметры:
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                        для которого проверяется наличие пароля.
//
// Возвращаемое значение:
//  Булево - если Ложь, пароль не установлен, иначе установлен.
//
Функция ПарольСертификатаУстановлен(СертификатСсылка) Экспорт
	
	Возврат ЭлектроннаяПодписьКлиент.ПарольСертификатаУстановлен(СертификатСсылка);
	
КонецФункции

Функция ЭтоРасширеннаяВерсияГосИС(Подсистема = Неопределено) Экспорт
	
	Если Подсистема = Неопределено Тогда
		Подсистема = "БазоваяФункциональность";
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(СтрШаблон("ГосИС.%1.Расширенная", Подсистема));
	
КонецФункции

#Область ПрисоединенныеФайлы

// Проверить возможность пользовательского действия по текущей строке
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма в которой происходит проверка
//  Действие           - Строка - дальнейшее действие (группа)
//  ДальнейшееДействие - Произвольный - фактическое дальнейшее действие (исходящий)
// Возвращаемое значение:
//  Булево - Истина если передача данных сообщения допустима
//
Функция ПроверитьВозможностьДействия(Форма, Действие, ДальнейшееДействие) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат Ложь;
	КонецЕсли;
	
	ДальнейшееДействие = Неопределено;
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Форма.Действия[Действие].Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			ДальнейшееДействие = ЭлементСписка.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти