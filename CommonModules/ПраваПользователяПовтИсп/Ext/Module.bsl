
#Область СлужебныеПроцедурыИФункции

// см. ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь
Функция ЭтоПартнер() Экспорт
	Возврат ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
КонецФункции

// Проверяет наличие у пользователя роли ВводИнформацииПоНоменклатуреБезКонтроля
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ВводИнформацииПоНоменклатуреБезКонтроля(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ВводИнформацииПоНоменклатуреБезКонтроля", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ВводИнформацииПоПартнеруБезКонтроля
// 
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ВводИнформацииПоПартнеруБезКонтроля(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ВводИнформацииПоПартнеруБезКонтроля", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ДобавлениеИзменениеНастройкиПечатиОбъектов
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ДобавлениеИзменениеНастройкиПечатиОбъектов(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНастройкиПечатиОбъектов", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ДобавлениеИзменениеИндивидуальныхСоглашенийСКлиентами
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ИзменениеИндивидуальныхСоглашений(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеИндивидуальныхСоглашенийСКлиентами", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ДобавлениеИзменениеТиповыхСоглашенийСКлиентами
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ИзменениеТиповыхСоглашений(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеТиповыхСоглашенийСКлиентами", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ЗаписьВыданнойДоверенностиВОкончательномСтатусе
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ЗаписьВыданнойДоверенностиВОкончательномСтатусе(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ЗаписьВыданнойДоверенностиВОкончательномСтатусе", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ЗачетОплаты
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ЗачетОплаты(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ЗачетОплаты", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ОтгрузкаПартнерамЗапрещенныхСегментов
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ОтгрузкаПартнерамЗапрещенныхСегментов(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ОтгрузкаПартнерамЗапрещенныхСегментов", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ОтклонениеОтУсловийЗакупок
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ОтклонениеОтУсловийЗакупок(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ОтклонениеОтУсловийЗакупок", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ОтклонениеОтУсловийПродаж
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ОтклонениеОтУсловийПродаж(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ОтклонениеОтУсловийОплаты
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ОтклонениеОтУсловийОплаты(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ОтклонениеОтУсловийОплаты", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ДобавлениеИзменениеДоступностиДляРасписанияРаботы
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ПравоНаВводГрафиковРаботыРЦ(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДоступностиДляРасписанияРаботы", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ДобавлениеИзменениеДоступностиДляГрафикаПроизводства
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ПравоНаВводДоступностиВидовРЦ(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДоступностиДляГрафикаПроизводства", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ВзятиеРасходногоОрдераВРаботу
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ВзятиеРасходногоОрдераВРаботу(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ВзятиеРасходногоОрдераВРаботу", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли РазрешитьОтключениеКонтроляТоваровОрганизацийНаВремяСеанса
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция РазрешитьОтключениеКонтроляТоваровОрганизацийНаВремяСеанса(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("РазрешитьОтключениеКонтроляТоваровОрганизацийНаВремяСеанса", Пользователь, Ложь);
КонецФункции

// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//  Булево - Истина, если пользователю доступна роль для отключения контроля резервов товаров по заказам.
Функция РазрешитьОтключениеКонтроляРезервовТоваровПоЗаказамНаВремяСеанса(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("РазрешитьОтключениеКонтроляРезервовТоваровПоЗаказамНаВремяСеанса", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли РазрешитьОтключениеКонтроляРетроБонусовНаВремяСеанса
// 
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// 	
// Возвращаемое значение:
//	Булево - наличие роли
//
Функция РазрешитьОтключениеКонтроляРетроБонусовНаВремяСеанса(Пользователь = Неопределено) Экспорт
	
	Возврат Пользователи.РолиДоступны("РазрешитьОтключениеКонтроляРетроБонусовНаВремяСеанса", Пользователь, Ложь);
	
КонецФункции

// Проверяет наличие у пользователя роли РеализацияСверхЗаказа
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция РеализацияСверхЗаказа(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("РеализацияСверхЗаказа", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли ВнутреннееПотреблениеСверхЗаказа
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ВнутреннееПотреблениеСверхЗаказа(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ВнутреннееПотреблениеСверхЗаказа", Пользователь, Ложь);
КонецФункции


// Проверяет наличие у пользователя роли РедактированиеВидовЗапасовДокументов
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция РедактированиеВидовЗапасовДокументов(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("РедактированиеВидовЗапасовДокументов", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли СогласованиеЗаявокНаКомандировку
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция СогласованиеЗаявокНаКомандировку(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("СогласованиеЗаявокНаКомандировку", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли СогласованиеЗаявокНаРасходованиеДенежныхСредств
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция СогласованиеЗаявокНаРасходованиеДенежныхСредств(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("СогласованиеЗаявокНаРасходованиеДенежныхСредств", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли СогласованиеРаспоряженийНаПеремещениеДенежныхСредств
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция СогласованиеРаспоряженийНаПеремещениеДенежныхСредств(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("СогласованиеРаспоряженийНаПеремещениеДенежныхСредств", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли СозданиеАктовВыполненныхРаботБезЗаказа
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция СозданиеАктовВыполненныхРаботБезЗаказа(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("СозданиеАктовВыполненныхРаботБезЗаказа", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли СозданиеРеализацииТоваровУслугБезЗаказа
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция СозданиеРеализацииТоваровУслугБезЗаказа(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("СозданиеРеализацииТоваровУслугБезЗаказа", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли СохранениеНастроекПечатиОбъектовПоУмолчанию
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция СохранениеНастроекПечатиОбъектовПоУмолчанию(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("СохранениеНастроекПечатиОбъектовПоУмолчанию", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли УстановкаЦенНоменклатурыБезСогласования
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция УстановкаЦенНоменклатурыБезСогласования(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("УстановкаЦенНоменклатурыБезСогласования", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли УтверждениеЗаявокНаРасходованиеДенежныхСредств
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция УтверждениеЗаявокНаРасходованиеДенежныхСредств(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("УтверждениеЗаявокНаРасходованиеДенежныхСредств", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя роли УтверждениеРаспоряженийНаПеремещениеДенежныхСредств
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция УтверждениеРаспоряженийНаПеремещениеДенежныхСредств(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("УтверждениеРаспоряженийНаПеремещениеДенежныхСредств", Пользователь, Ложь);
КонецФункции

// Проверяет наличие у пользователя права просмотра обработки ПечатьЭтикетокИЦенников
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ПечатьЭтикетокИЦенников(Пользователь = Неопределено) Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников);
КонецФункции

// Проверяет наличие у пользователя права добавления в справочник Партнеры
// Возвращаемое значение:
//	Булево - наличие права
Функция ПравоСозданияПартнера() Экспорт
	Возврат ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры);
КонецФункции 

// Проверяет наличие у пользователя роли УтверждениеАвансовыхОтчетов
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция УтверждениеАвансовыхОтчетов(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("УтверждениеАвансовыхОтчетов", Пользователь, Ложь);
КонецФункции

// Возвращает имена ролей с правом добавления
// Параметры:
// 	ИмяОбъектаМетаданных - Строка - Имя объекта медатанных
// Возвращаемое значение:
//	Массив из Строка - Имена ролей
Функция ИменаРолейСПравомДобавления(ИмяОбъектаМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваРолей.Роль.Имя КАК ИмяРоли
	|ИЗ
	|	РегистрСведений.ПраваРолей КАК ПраваРолей
	|ГДЕ
	|	НЕ ПраваРолей.Роль.ПометкаУдаления
	|	И НЕ ПраваРолей.ОбъектМетаданных.ПометкаУдаления
	|	И ПраваРолей.ПравоДобавление
	|	И ПраваРолей.ОбъектМетаданных.ПолноеИмя = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ИмяОбъектаМетаданных);
	
	МассивРолей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРоли");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивРолей;
	
КонецФункции



// Проверяет наличие у пользователя роли ЗаказНаВнутреннееПотреблениеБезСогласования
// Параметры:
// 	Пользователь - ПользовательИнформационнойБазы
// Возвращаемое значение:
//	Булево - наличие роли
Функция ЗаказНаВнутреннееПотреблениеБезСогласования(Пользователь = Неопределено) Экспорт
	Возврат Пользователи.РолиДоступны("ЗаказНаВнутреннееПотреблениеБезСогласования", Пользователь, Ложь);
КонецФункции

#КонецОбласти
