#Область ПрограммныйИнтерфейс

Функция ТекстНадписиПоляИнтеграцииВФормеДокументаОснования(Знач ДокументОснование) Экспорт
	
	ТекстНадписи = "";
	
	// Получим структуру вида ИмяДокументаЗЕРНО - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовЗЕРНО.СтатусыДокументовЗЕРНОПоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	// Получим структуру вида ИмяДокументаЗЕРНО - Массив(ДокументыЗЕРНОДанногоВида)
	ДокументыЗЕРНО = ДокументыЗЕРНОПоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокументаЗЕРНО = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокументаЗЕРНО).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ИнтеграцияЗЕРНО.ОписаниеОформленныхДокументовЗЕРНО(МетаданныеДокументаЗЕРНО, ДокументОснование, ДокументыЗЕРНО, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	Возврат ТекстНадписи;
	
КонецФункции

// Функция - Документы ЗЕРНО по документу основанию
//
// Параметры:
//  ДокументОснование - ДокументСсылка - основание по которому надо получить документы ЗЕРНО
// 
// Возвращаемое значение:
//  См. ИнтеграцияИС.ДокументыИСПоДокументуОснованию
//
Функция ДокументыЗЕРНОПоДокументуОснованию(ДокументОснование) Экспорт
	
	ДокументыЗЕРНО = ИнтеграцияИС.ДокументыИСПоДокументуОснованию(
		ДокументОснование,
		Метаданные.РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО,
		"ОбъектСинхронизации",
		"И ИдентификаторСтроки = """"");
	
	Возврат ДокументыЗЕРНО;
	
КонецФункции

// Возвращает имена документов ЗЕРНО, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовЗЕРНО - документ-основание для документа ЗЕРНО
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ЗЕРНО
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияЗЕРНО.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

#Область ДлительныеОперации

// Подготавливает сообщения к передаче в сервис.
//
// Параметры:
//  ВходящиеДанные - Массив Из (См. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений)
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура - см. ИнтеграцияЗЕРНОВызовСервера.НоваяСтруктураРезультатовОбмена
//
Функция ПодготовитьКПередаче(ВходящиеДанные, УникальныйИдентификатор = Неопределено) Экспорт
	
	ПараметрыОбмена = ИнтеграцияЗЕРНО.ПараметрыОбмена(Неопределено, УникальныйИдентификатор);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = НоваяСтруктураРезультатовОбмена();
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ФГИС ""Зерно""'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ВходящиеДанные",          ВходящиеДанные);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",         ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",       ИнтеграцияЗЕРНОСлужебный.ПараметрыСеансаИС());
		ПараметрыФоновогоЗадания.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеУниверсально(
			ВходящиеДанные,
			ПараметрыОбмена,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбмен(ЗначениеОтбора = Неопределено, УникальныйИдентификатор = Неопределено, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = НоваяСтруктураРезультатовОбмена();
	
	ПараметрыОбмена = ИнтеграцияЗЕРНО.ПараметрыОбмена(ЗначениеОтбора, УникальныйИдентификатор);
	
	ВыполнитьОбработкуОчередиСообщений = ИнтеграцияЗЕРНОСлужебный.ПодготовитьДанныеКПередачеПоНастройкеРегламентногоЗадания(ПараметрыОбмена);
	
	Если Не ВыполнитьОбработкуОчередиСообщений Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент);
	
	Если УникальныйИдентификатор <> Неопределено И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ФГИС ""Зерно""'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",   ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС", ИнтеграцияЗЕРНОСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияЗЕРНОСлужебный.ВыполнитьОбменДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ВыполнитьОбменУниверсально(ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбмена(ПодписанныеДанныеПоОрганизациям, АдресВоВременномХранилище) Экспорт
	
	ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	// Установка параметров сеанса выполняется НЕ в фоновом задании.
	ПодписанныеСообщенияПоОрганизациям     = Неопределено;
	Если ПодписанныеДанныеПоОрганизациям <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПодписанныеДанныеПоОрганизациям Цикл
			
			Организация = КлючИЗначение.Ключ;
			Сообщения   = КлючИЗначение.Значение;
			
			ПодписанныеСообщения = Новый Массив;
			
			Для Каждого Сообщение Из Сообщения Цикл
				ПодписанныеСообщения.Добавить(Сообщение);
			КонецЦикла;
			
			Если ПодписанныеСообщения.Количество() > 0 Тогда
				Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
					ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
				КонецЕсли;
				ПодписанныеСообщенияПоОрганизациям.Вставить(Организация, ПодписанныеСообщения);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// В процессе установки ключа сессии могли произойти ошибки.
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
			ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
	
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено
		И Не ИнтеграцияИС.РежимРаботыБезФоновыхЗаданий() Тогда
		
		ВозвращаемоеЗначение = НоваяСтруктураРезультатовОбмена();

		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбмена.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение обмена с ФГИС ""Зерно""'");
		
		ПараметрыФоновогоЗадания = Новый Структура;
		ПараметрыФоновогоЗадания.Вставить("ПодписанныеСообщенияПоОрганизациям", ПодписанныеСообщенияПоОрганизациям);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыОбмена",                    ПараметрыОбмена);
		ПараметрыФоновогоЗадания.Вставить("ПараметрыСеансаИС",                  ИнтеграцияЗЕРНОСлужебный.ПараметрыСеансаИС());
		
		ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
		ВозвращаемоеЗначение.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"ИнтеграцияЗЕРНОСлужебный.ПродолжитьВыполнениеОбменаДлительнаяОперация",
			ПараметрыФоновогоЗадания, ПараметрыВыполнения);
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ПродолжитьВыполнениеОбменаУниверсально(
			ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураИзменения()
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	ОчередьСообщений = РегистрыСведений.ОчередьСообщенийЗЕРНО.ОчередьСообщенийПоДокументу(ДокументСсылка);
	
	Если ОчередьСообщений.Количество() = 0 Тогда
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		Возврат ЗаполнитьИзменения(ДокументСсылка);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементОчереди Из ОчередьСообщений Цикл
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЭлементОчереди.Сообщение);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди, ТекстОшибки);
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураИзменения -
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЗЕРНОПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "Передано");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибки = "";
	Попытка
		ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ДанныеПоследнегоСообщения.Сообщение);
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения, ТекстОшибки);
	
КонецФункции

#КонецОбласти

Функция ВестиУчетПродукции() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетЗернаИПродуктовПереработкиЗЕРНО");
	
КонецФункции

// Возвращает виды продукции, по которым доступно заполнение документа ЗЕРНО
//
// Параметры:
//   ПолноеИмяДокумента - Строка - создаваемый вводом на основании документ
//   Ссылка - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовЗЕРНО - документ по которому происходит обработка заполнения
//   КорректировочныйДокумент - Булево - Истина, если необходимо передать в структуру флаг создания Корректировочного документа
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - различные виды продукции в документе ЗЕРНО, заполненном 
//     по основанию без фильтра по виду продукции.
Функция ВидыПродукцииДанныхЗаполнения(ПолноеИмяДокумента, Ссылка, КорректировочныйДокумент = Ложь) Экспорт
	
	ДоступныеВидыПродукции = Новый Массив;
	
	Если НЕ ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ВестиУчетПродукции() Тогда
		Возврат ДоступныеВидыПродукции;
	КонецЕсли;
	
	ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
	Предзаполнение = Документы[ИмяДокумента].СоздатьДокумент();
	
	Если КорректировочныйДокумент Тогда
		СтруктураДанных = Новый Структура("Корректировочный, Основание", КорректировочныйДокумент, Ссылка);
		Предзаполнение.Заполнить(СтруктураДанных);
	Иначе
		Предзаполнение.Заполнить(Ссылка);
	КонецЕсли;
	
	Товары = Предзаполнение.Товары.Выгрузить(, "Номенклатура");
	
	Возврат ИнтеграцияЗЕРНО.ВидыПродукцииПоТаблицеНоменклатуры(Товары);
	
КонецФункции

// Возвращает ссылку на значение справочника с видом классификатора ОКДП2
//
// Параметры:
//  ОКПД2 - Строка - код ОКДП2
//
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторНСИЗЕРНО
Функция ЗначениеКлассификатораОКДП2ЗЕРНО(ОКПД2) Экспорт
	
	Возврат Справочники.КлассификаторНСИЗЕРНО.ЗначениеКлассификатораОКДП2ЗЕРНО(ОКПД2);
	
КонецФункции

// Возвращает идентификатор справочника НСИ
//
// Параметры:
//  СправочникСсылка - СправочникСсылка.КлассификаторНСИЗЕРНО
//  ВидКлассификатора - ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО
//
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторНСИЗЕРНО
Функция ИдентификаторПоСсылкеКлассификатораНСИЗЕРНО(СправочникСсылка, ВидКлассификатора) Экспорт
	
	Возврат Справочники.КлассификаторНСИЗЕРНО.ИдентификаторПоСсылкеКлассификатораНСИЗЕРНО(СправочникСсылка, ВидКлассификатора);
	
КонецФункции

Функция ПараметрыОптимизации() Экспорт
	
	Возврат ИнтеграцияЗЕРНО.ПараметрыОптимизации();
	
КонецФункции

Функция ЗагрузитьИзменения(ПараметрыЗагрузки) Экспорт
	
	Если Не ПараметрыЗагрузки.Свойство("Подразделение") Тогда
		ПараметрыЗагрузки.Вставить("Подразделение", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Подразделение"));
	КонецЕсли;
	
	Возврат ИнтеграцияЗЕРНОСлужебный.ЗагрузитьИзменения(ПараметрыЗагрузки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сообщения в очереди требующие подписания.
// 
// Параметры:
//  ОрганизацииПодразделения - Неопределено - Отбор по организациям не используется
//                           - Массив из ОпределяемыйТип.Организация - организации
//                           - см. ИнтеграцияЗЕРНО.НоваяТаблицаОтбораСообщенийКПодписанию
//  Сообщение - Неопределено, Строка - Отбор по сообщению
// 
// Возвращаемое значение:
//  Структура - Сообщения в очереди требующие подписания:
// * СообщенияКПодписанию - Соответствие из КлючИЗначение -
// * ДоступныеСертификаты - Соответствие из КлючИЗначение  -
Функция СообщенияВОчередиТребующиеПодписания(ОрганизацииПодразделения = Неопределено, Сообщение = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	СообщенияКПодписанию = Новый Соответствие();
	ДоступныеСертификаты = Новый Соответствие();
	
	ВозвращаемоеЗначение.Вставить("СообщенияКПодписанию", СообщенияКПодписанию);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
	
	ИсходнаяТаблица = ИнтеграцияЗЕРНО.НоваяТаблицаОтбораСообщенийКПодписанию();
	
	Если ОрганизацииПодразделения <> Неопределено Тогда
		
		Если ТипЗнч(ОрганизацииПодразделения) = Тип("Массив") Тогда
			
			Если ОрганизацииПодразделения.Количество() Тогда
				
				Для Каждого Организация Из ОрганизацииПодразделения Цикл
					НоваяСтрока = ИсходнаяТаблица.Добавить();
					НоваяСтрока.Организация          = Организация;
					НоваяСтрока.УчитыватьОрганизацию = Истина;
				КонецЦикла;
			
			Иначе
				
				НоваяСтрока = ИсходнаяТаблица.Добавить();
				НоваяСтрока.УчитыватьОрганизацию = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаТаблицы Из ОрганизацииПодразделения Цикл
				НоваяСтрока = ИсходнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.Организация,
		|	ИсходнаяТаблица.Подразделение,
		|	ИсходнаяТаблица.УчитыватьОрганизацию,
		|	ИсходнаяТаблица.УчитыватьПодразделение
		|ПОМЕСТИТЬ ИсходнаяТаблица
		|ИЗ
		|	&ИсходнаяТаблица КАК ИсходнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОчередьСообщенийЗЕРНО.Сообщение КАК Сообщение
		|ПОМЕСТИТЬ Сообщения
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходнаяТаблица КАК ИсходнаяТаблица
		|	ПО ИсходнаяТаблица.Организация  = ОчередьСообщенийЗЕРНО.Организация
		|	И ИсходнаяТаблица.Подразделение = ОчередьСообщенийЗЕРНО.Подразделение
		|	И ИсходнаяТаблица.УчитыватьОрганизацию
		|	И ИсходнаяТаблица.УчитыватьПодразделение
		|ГДЕ
		|	ОчередьСообщенийЗЕРНО.ТребуетсяПодписать
		|	И ВЫБОР
		|		КОГДА &ОтборПоСообщению
		|			ТОГДА ОчередьСообщенийЗЕРНО.Сообщение В (&Сообщение)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьСообщенийЗЕРНО.Сообщение
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходнаяТаблица КАК ИсходнаяТаблица
		|	ПО ИсходнаяТаблица.Организация = ОчередьСообщенийЗЕРНО.Организация
		|	И ИсходнаяТаблица.УчитыватьОрганизацию
		|	И НЕ ИсходнаяТаблица.УчитыватьПодразделение
		|ГДЕ
		|	ОчередьСообщенийЗЕРНО.ТребуетсяПодписать
		|	И ВЫБОР
		|		КОГДА &ОтборПоСообщению
		|			ТОГДА ОчередьСообщенийЗЕРНО.Сообщение В (&Сообщение)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьСообщенийЗЕРНО.Сообщение
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходнаяТаблица КАК ИсходнаяТаблица
		|	ПО ИсходнаяТаблица.Подразделение = ОчередьСообщенийЗЕРНО.Подразделение
		|	И НЕ ИсходнаяТаблица.УчитыватьОрганизацию
		|	И ИсходнаяТаблица.УчитыватьПодразделение
		|ГДЕ
		|	ОчередьСообщенийЗЕРНО.ТребуетсяПодписать
		|	И ВЫБОР
		|		КОГДА &ОтборПоСообщению
		|			ТОГДА ОчередьСообщенийЗЕРНО.Сообщение В (&Сообщение)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьСообщенийЗЕРНО.Сообщение
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходнаяТаблица КАК ИсходнаяТаблица
		|	ПО ИСТИНА
		|	И НЕ ИсходнаяТаблица.УчитыватьОрганизацию
		|	И НЕ ИсходнаяТаблица.УчитыватьПодразделение
		|ГДЕ
		|	ОчередьСообщенийЗЕРНО.ТребуетсяПодписать
		|	И ВЫБОР
		|		КОГДА &ОтборПоСообщению
		|			ТОГДА ОчередьСообщенийЗЕРНО.Сообщение В (&Сообщение)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сообщение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОчередьСообщенийЗЕРНО.Сообщение                    КАК Сообщение,
		|	ОчередьСообщенийЗЕРНО.Организация                  КАК Организация,
		|	ОчередьСообщенийЗЕРНО.Подразделение                КАК Подразделение,
		|	ОчередьСообщенийЗЕРНО.ВидПродукции                 КАК ВидПродукции,
		|	ОчередьСообщенийЗЕРНО.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ОчередьСообщенийЗЕРНО.ДатаСоздания                 КАК ДатаСоздания,
		|	ОчередьСообщенийЗЕРНО.ТекущееДействие              КАК ТекущееДействие,
		|	ОчередьСообщенийЗЕРНО.РеквизитыИсходящегоСообщения КАК РеквизитыИсходящегоСообщения,
		|	ОчередьСообщенийЗЕРНО.Операция                     КАК Операция,
		|	ОчередьСообщенийЗЕРНО.СсылкаНаОбъект               КАК СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщенийЗЕРНО
		|ГДЕ
		|	ОчередьСообщенийЗЕРНО.Сообщение В
		|		(ВЫБРАТЬ
		|			Сообщения.Сообщение
		|		ИЗ
		|			Сообщения КАК Сообщения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ДатаСоздания";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица",  ИсходнаяТаблица);
	Запрос.УстановитьПараметр("ОтборПоСообщению", (Сообщение <> Неопределено));
	Запрос.УстановитьПараметр("Сообщение",        Сообщение);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоллекцияПоОрганизации = ИнтеграцияЗЕРНОСлужебный.МассивИзСоответствияПоКлючу(
			СообщенияКПодписанию, ВыборкаДетальныеЗаписи.Организация);
		РеквизитыИсходящегоСообщения = ВыборкаДетальныеЗаписи.РеквизитыИсходящегоСообщения.Получить();
		
		ЭлементОчереди = Новый Структура;
		
		ЭлементОчереди.Вставить("Сообщение",                    ВыборкаДетальныеЗаписи.Сообщение);
		ЭлементОчереди.Вставить("РеквизитыИсходящегоСообщения", РеквизитыИсходящегоСообщения);
		ЭлементОчереди.Вставить("Организация",                  ВыборкаДетальныеЗаписи.Организация);
		ЭлементОчереди.Вставить("Подразделение",                ВыборкаДетальныеЗаписи.Подразделение);
		ЭлементОчереди.Вставить("ТекущееДействие",              ВыборкаДетальныеЗаписи.ТекущееДействие);
		ЭлементОчереди.Вставить("Операция",                     ВыборкаДетальныеЗаписи.Операция);
		ЭлементОчереди.Вставить("ДатаСоздания",                 ВыборкаДетальныеЗаписи.ДатаСоздания);
		ЭлементОчереди.Вставить("СсылкаНаОбъект",               ВыборкаДетальныеЗаписи.СсылкаНаОбъект);
		ЭлементОчереди.Вставить("ДатаМодификацииУниверсальная", ВыборкаДетальныеЗаписи.ДатаМодификацииУниверсальная);
		ЭлементОчереди.Вставить("ДоступныСертификаты",          Ложь);
		
		ЭлементОчереди.Вставить(
			"ПредставлениеОперации",
			ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ОписаниеОперацииПоДействиюССообщением(
				ВыборкаДетальныеЗаписи.Операция,
				ВыборкаДетальныеЗаписи.ТекущееДействие,
				РеквизитыИсходящегоСообщения.ДополнительноеОписание,
				РеквизитыИсходящегоСообщения.Версия,
				ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПредставлениеНомераСтраницы(РеквизитыИсходящегоСообщения.НомерСтраницы)));
		
		КоллекцияПоОрганизации.Добавить(ЭлементОчереди);
		
	КонецЦикла;
	
	ИнтеграцияЗЕРНОСлужебный.ДоступныеСертификаты(ВозвращаемоеЗначение.СообщенияКПодписанию, ВозвращаемоеЗначение.ДоступныеСертификаты);
	
	Для Каждого КлючИЗначение Из ВозвращаемоеЗначение.ДоступныеСертификаты Цикл
		
		Если КлючИЗначение.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СообщениеКПодписанию Из ВозвращаемоеЗначение.СообщенияКПодписанию[КлючИЗначение.Ключ] Цикл
			СообщениеКПодписанию.ДоступныСертификаты = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗаписатьРезультаПодписиВОчередьСообщений(Сообщения, ИсходныеДатыМодификацииПоСообщениям) Экспорт
	
	Если Сообщения.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаБлокировки = Новый ТаблицаЗначений();
	ТаблицаБлокировки.Колонки.Добавить(
		"Сообщение",
		Метаданные.РегистрыСведений.ОчередьСообщенийЗЕРНО.Измерения.Сообщение.Тип);
		
	Для Каждого Сообщение Из Сообщения Цикл
		НоваяСтрока = ТаблицаБлокировки.Добавить();
		НоваяСтрока.Сообщение = Сообщение.Идентификатор;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ОчередьСообщенийЗЕРНО.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		Для Каждого Сообщение Из Сообщения Цикл
			
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(Сообщение.Идентификатор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0
				И НаборЗаписей[0].ДатаМодификацииУниверсальная = ИсходныеДатыМодификацииПоСообщениям[Сообщение.Идентификатор] Тогда
				
				ПараметрыОбновленияОчереди = ИнтеграцияЗЕРНОСлужебный.ПараметрыОбновленияОчереди();
				ПараметрыОбновленияОчереди.ТребуетсяПодписать           = Ложь;
				ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения = Сообщение;
				ПараметрыОбновленияОчереди.Сертификат                   = Сообщение.Сертификат;
				
				ИнтеграцияЗЕРНОСлужебный.ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При записи подписанного сообщения возникла ошибка:
			           |Текст ошибки: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ТекстОшибкиПользователю = СтрШаблон(
			НСтр("ru = 'При записи подписанного сообщения возникла ошибка:
			           |Текст ошибки: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПользователю);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Определяет включение режима использования тестового контура ЗЕРНО.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром.
//
Функция РежимРаботыСТестовымКонтуромЗЕРНО() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РежимРаботыСТестовымКонтуромЗЕРНО");
	
КонецФункции

Процедура ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена) Экспорт
	
	ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.ДанныеЛогаЗапросовПоАдресуВременногоХранилища(РезультатОбмена.АдресДанныхЛогаЗапроса);
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("ДанныеЛогаЗапросов", ДанныеЛогаЗапросов);
	
	ЛогированиеЗапросовИС.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(
		ДанныеДляЗаписи,
		ЛогированиеЗапросовЗЕРНО.ПараметрыЛогированияЗапросов());
	
КонецПроцедуры

// Новая структура результатов обмена.
// 
// Возвращаемое значение:
//  Структура - Новая структура результатов обмена:
// * ДоступныеСертификаты - Неопределено -
// * ТребуетсяПодписание - Неопределено -
// * Изменения - Массив -
// * ДлительнаяОперация - Неопределено -
// * Ожидать - Неопределено -
// * АдресВоВременномХранилище - Неопределено -
// * ИзвлекатьДанныеЛогаЗапросов - Булево -
Функция НоваяСтруктураРезультатовОбмена() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("СообщенияПослеПодписания",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресДанныхЛогаЗапроса",         Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере());
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполняет изменения для обработанного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//  ЭлементОчереди - Неопределено,
//                   СтрокаТаблицыЗначений с колонками:
//                     Сообщение - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор сообщения.
//                     Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция.
//                     Организация - ОпределяемыйТип.Организация - организация.
//  ТекстОшибки - Строка.
// 
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураИзменения()
Функция ЗаполнитьИзменения(ДокументСсылка, ЭлементОчереди = Неопределено, ТекстОшибки = "")
	
	Изменения = Новый Массив;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияЗЕРНОСлужебный.СтруктураИзменения(ЭлементОчереди);
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	СтрокаРезультата.Объект.Добавить(ДокументСсылка);
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//  СообщениеПрерывания - Строка, СправочникСсылка.ЗЕРНОПрисоединенныеФайлы - Сообщение на котором необходимо закончить процесс расчета статусов.
// Возвращаемое значение:
// 	ПеречислениеСсылка.СтатусыОбработкиОформлениеСДИЗЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиМестФормированияПартийЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиСведенийОСобаранномУрожаеЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиРезультатовИсследованийЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО,
//  ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - Рассчитанный статус.
Функция ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, СообщениеПрерывания = Неопределено) Экспорт
	
	НаборПоДокументу = ИнтеграцияЗЕРНО.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка,, СообщениеПрерывания);
	
	Возврат НаборПоДокументу[0].Статус;
	
КонецФункции

Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Возврат РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.Архивировать(ДокументыКАрхивированию);
	
КонецФункции

// Архивирует (убирает из интерфейса к обработке) записи из регистра по переданным документам.
//
// Параметры:
//   Основания - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовЗЕРНО - массив распоряжений
//   Документ  - ОпределяемыйТип.ДокументыЗЕРНОПоддерживающиеСтатусыОформления - документ, данные по которому
//                                                                              необходимо архивировать.
// Возвращаемое значение:
//   Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураИзменения - данные по измененным статусам распоряжений.
Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовЗЕРНО.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

// Заполняет структуру реквизитов по организациям контрагентам с учетом обособленных подразделений.
// Заполняемая колонка в таблице - РеквизитыОрганизацииКонтрагента (исходящий).
// Параметры:
//  ТаблицаОрганизацияКонтрагентПодразделение - см. ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение
//  ЗаполнитьКодыРАФП - булево - дополнять реквизиты данными кода РАФП.
Процедура РеквизитыОрганизацийКонтрагентов(ТаблицаОрганизацияКонтрагентПодразделение, ЗаполнитьКодыРАФП = Истина) Экспорт
	
	Если ТаблицаОрганизацияКонтрагентПодразделение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОрганизацияКонтрагентПодразделение.Индексы.Добавить("ОрганизацияКонтрагент, Подразделение");
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииРеквизитовОрганизацийКонтрагентов(ТаблицаОрганизацияКонтрагентПодразделение);
	
	Если Не ЗаполнитьКодыРАФП Тогда
		Возврат;
	КонецЕсли;
	
	ИностранныеОрганизации = ТаблицаОрганизацияКонтрагентПодразделение.СкопироватьКолонки(
		"ОрганизацияКонтрагент, Подразделение, КодРАФП");
	СоответствиеСтрок = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОрганизацияКонтрагентПодразделение Цикл
		
		ТипОрганизации = СтрокаТаблицы.ТипОрганизации;
		Если ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация
			Или ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизацияБезРегистрацииВРФ Тогда
			
			СтрокаДляЗаполнения = ИностранныеОрганизации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, СтрокаТаблицы);
			СоответствиеСтрок.Вставить(СтрокаТаблицы, СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИностранныеОрганизации.Количество() Тогда
		
		Отбор = Новый Структура("ОрганизацияКонтрагент, Подразделение");
		КодыРАФП = РегистрыСведений.КодыРАФПЗЕРНО.КодыРАФППоВладельцу(ИностранныеОрганизации);
		Для Каждого ЭлементКоллекции Из КодыРАФП Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ЭлементКоллекции);
			СтрокиОрганизации = ТаблицаОрганизацияКонтрагентПодразделение.НайтиСтроки(Отбор);
			Для Каждого СтрокаОрганизации Из СтрокиОрганизации Цикл
				СтрокаОрганизации.КодРАФП = ЭлементКоллекции.КодРАФП;
				СоответствиеСтрок.Удалить(СтрокаОрганизации);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаполнитьКодыРАФППоДаннымСервиса(СоответствиеСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьКодыРАФППоДаннымСервиса(СоответствиеСтрок, СохранятьДанные = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстыОшибок", Новый Соответствие);
	Результат.Вставить("ТекстОшибки", "");
	
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		
		Попытка
			
			РеквизитыОрганизации = КлючИЗначение.Значение;
			СведенияЮрЛицаПоДаннымСервиса = РегистрыСведений.КодыРАФПЗЕРНО.ПолучитьКодРАФППоДаннымСервиса(
				РеквизитыОрганизации.ИНН,
				РеквизитыОрганизации.КПП);
			
			Если СведенияЮрЛицаПоДаннымСервиса <> Неопределено Тогда
				Если ЗначениеЗаполнено(СведенияЮрЛицаПоДаннымСервиса.ОписаниеОшибки) Тогда
					Результат.ТекстыОшибок.Вставить(КлючИЗначение.Ключ, СведенияЮрЛицаПоДаннымСервиса.ОписаниеОшибки);
					Если СтрНайти(
						СведенияЮрЛицаПоДаннымСервиса.ОписаниеОшибки,
						НСтр("ru = 'не подключена.'")) > 0 Тогда
						Результат.ТекстОшибки = СведенияЮрЛицаПоДаннымСервиса.ОписаниеОшибки;
						Прервать;
					КонецЕсли;
				Иначе
					РеквизитыОрганизации.КодРАФП = СведенияЮрЛицаПоДаннымСервиса.КодРАФП;
					Если СохранятьДанные Тогда
						РегистрыСведений.КодыРАФПЗЕРНО.СохранитьДанныеРАФППоОрганизацииПодразделению(
							РеквизитыОрганизации.ОрганизацияКонтрагент,
							РеквизитыОрганизации.Подразделение,
							РеквизитыОрганизации.КодРАФП);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			Результат.ТекстОшибки = ТекстОшибки;
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ДанныеВыбораОКПД2(Текст, ВидПродукции) Экспорт
	
	Возврат ИнтеграцияЗЕРНО.ДанныеВыбораОКПД2(Текст, ВидПродукции);
	
КонецФункции

Функция ДанныеВыбораКодТНВЭД(Текст, ОКПД2, Знач ДанныеКэша = Неопределено) Экспорт
	
	Возврат ИнтеграцияЗЕРНО.ДанныеВыбораКодТНВЭД(Текст, ОКПД2, ДанныеКэша);
	
КонецФункции

// Возвращает представления объектов, сопоставленных с ключами.
//
// Параметры:
//  КлючиРеквизитовОрганизаций - Неопределено -
//                             - Соответствие из КлючИЗначение:
//                                * Ключ - СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО - Ключ организации
//                                * Значение - См. ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления - Параметры формирования гиперссылки
//  КлючиАдресов               - Неопределено
//                             - Соответствие из КлючИЗначение:
//                                * Ключ - СправочникСсылка.КлючиАдресовЗЕРНО - Ключ организации
//                                * Значение - См. ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления - Параметры формирования гиперссылки
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.КлючиАдресовЗЕРНО               - Переданный ключ адреса
//         - СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО - Переданный ключ реквизитов организаций
//  * Значение - Структура - Структура со свойствами ключа:
//		** Представление - ФорматированнаяСтрока - форматированная строка, содержащая  представление сопоставленного объекта и навигационную ссылку.
//		** Ссылка - СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО, Неопределено - ссылка на сопоставленный объект или Неопределено.
//		          - СправочникСсылка.КлючиАдресовЗЕРНО, Неопределено - ссылка на сопоставленный объект или Неопределено.
//
Функция ПредставленияСопоставлений(КлючиРеквизитовОрганизаций = Неопределено, КлючиАдресов = Неопределено) Экспорт
	
	ПустаяСтрока         = Новый ФорматированнаяСтрока("");
	ВозвращаемоеЗначение = Новый Соответствие();
	
	Если КлючиРеквизитовОрганизаций <> Неопределено Тогда
		
		ЗначенияКлючейРеквизитовОрганизаций = Новый Массив();
		
		Для Каждого КлючИЗначение Из КлючиРеквизитовОрганизаций Цикл
			Ключ = КлючИЗначение.Ключ;
			ЗначениеВозврата = Новый Структура("Представление, Ссылка", ПустаяСтрока);
			ВозвращаемоеЗначение[Ключ] = ЗначениеВозврата;
			Если ЗначениеЗаполнено(Ключ) Тогда
				ЗначенияКлючейРеквизитовОрганизаций.Добавить(Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ЗначенияСопоставлений = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(
			ЗначенияКлючейРеквизитовОрганизаций);
		
		Для Каждого КлючИЗначение Из ЗначенияСопоставлений Цикл
			ЗначениеВозврата = ВозвращаемоеЗначение[КлючИЗначение.Ключ];
			ЗначенияПоСсылке = Новый Массив;
			Если ЗначениеЗаполнено(КлючИЗначение.Значение.Организация) Тогда
				Если ЗначениеЗаполнено(КлючИЗначение.Значение.Подразделение) Тогда
					СоставноеЗначение = Новый Массив();
					СоставноеЗначение.Добавить(КлючИЗначение.Значение.Организация);
					СоставноеЗначение.Добавить(КлючИЗначение.Значение.Подразделение);
					ЗначенияПоСсылке.Добавить(СоставноеЗначение);
				Иначе
					ЗначенияПоСсылке.Добавить(КлючИЗначение.Значение.Организация);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(КлючИЗначение.Значение.Контрагент) Тогда
				ЗначенияПоСсылке.Добавить(КлючИЗначение.Значение.Контрагент);
			КонецЕсли;
			ПараметрыФормированияГиперссылки = КлючиРеквизитовОрганизаций[КлючИЗначение.Ключ];
			ЗаполнитьСсылкуИПредставлениеКлючаРеквизитов(
				КлючИЗначение.Ключ,
				ЗначениеВозврата,
				ЗначенияПоСсылке,
				ПараметрыФормированияГиперссылки.ОбязательноеЗаполнение);
			ВозвращаемоеЗначение[КлючИЗначение.Ключ] = ЗначениеВозврата;
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючиАдресов <> Неопределено Тогда
		
		ЗначенияКлючейАдресов = Новый Массив();
		Для Каждого КлючИЗначение Из КлючиАдресов Цикл
			Ключ = КлючИЗначение.Ключ;
			ЗначениеВозврата = Новый Структура("Представление, Ссылка", ПустаяСтрока);
			ВозвращаемоеЗначение[Ключ] = ЗначениеВозврата;
			Если ЗначениеЗаполнено(Ключ) Тогда
				ЗначенияКлючейАдресов.Добавить(Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ЗначенияСопоставлений = Справочники.КлючиАдресовЗЕРНО.СкладыКонтрагентыПоКлючам(
			ЗначенияКлючейАдресов);
		
		Для Каждого КлючИЗначение Из ЗначенияСопоставлений Цикл
			ЗначениеВозврата = ВозвращаемоеЗначение[КлючИЗначение.Ключ];
			ЗначенияПоСсылке = Новый Массив;
			Для Каждого ДанныеСопоставления Из КлючИЗначение.Значение Цикл
				Если ЗначениеЗаполнено(ДанныеСопоставления.Склад) Тогда
					ЗначенияПоСсылке.Добавить(ДанныеСопоставления.Склад);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСопоставления.Контрагент) Тогда
					ЗначенияПоСсылке.Добавить(ДанныеСопоставления.Контрагент);
				КонецЕсли;
			КонецЦикла;
			ПараметрыФормированияГиперссылки = КлючиАдресов[КлючИЗначение.Ключ];
			ЗаполнитьСсылкуИПредставлениеКлючаРеквизитов(
				КлючИЗначение.Ключ,
				ЗначениеВозврата,
				ЗначенияПоСсылке,
				ПараметрыФормированияГиперссылки.ОбязательноеЗаполнение);
			ВозвращаемоеЗначение[КлючИЗначение.Ключ] = ЗначениеВозврата;
		КонецЦикла;
	
	КонецЕсли;
		
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьСсылкуИПредставлениеКлючаРеквизитов(ЗначениеКлюча, СсылкаИПредставление, СопоставленныеОбъекты = Неопределено, ОбязательноеЗаполнение = Ложь)
	
	Если СопоставленныеОбъекты = Неопределено Тогда
		СопоставленоОбъектов = 0;
	Иначе
		СопоставленоОбъектов = СопоставленныеОбъекты.Количество();
	КонецЕсли;
	Если СопоставленоОбъектов = 0 Тогда
		
		Если ОбязательноеЗаполнение Тогда
			ЦветГиперссылки = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
		КонецЕсли;
		
		СсылкаИПредставление.Представление = Новый ФорматированнаяСтрока(
			НСтр("ru = '<не сопоставлено>'"),,
			ЦветГиперссылки,,
			ПолучитьНавигационнуюСсылку(ЗначениеКлюча));
		
	Иначе
		
		ДанныеПредставления = Новый Массив();
		
		СопоставленныйОбъект = СопоставленныеОбъекты[0];
		
		Если ТипЗнч(СопоставленныйОбъект) = Тип("Массив") Тогда
			
			Для Каждого ЭлементСсылки Из СопоставленныйОбъект Цикл
				
				Если ДанныеПредставления.Количество() Тогда
					ДанныеПредставления.Добавить(" ");
				КонецЕсли;
				
				ДанныеПредставления.Добавить(
					Новый ФорматированнаяСтрока(
						СтрШаблон(НСтр("ru = '%1'"), ЭлементСсылки),,,,
						ПолучитьНавигационнуюСсылку(ЭлементСсылки)));
					
			КонецЦикла;
			
		Иначе
			
			ДанныеПредставления.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(НСтр("ru = '%1'"), СопоставленныйОбъект),,,,
					ПолучитьНавигационнуюСсылку(СопоставленныйОбъект)));
			
		КонецЕсли;
		
		Если СопоставленоОбъектов > 1 Тогда
			
			ДанныеПредставления.Добавить(" ");
			ДанныеПредставления.Добавить(СтрШаблон(НСтр("ru = '( + еще %1 )'"), СопоставленоОбъектов - 1));
			
		КонецЕсли;
		
		СсылкаИПредставление.Представление = Новый ФорматированнаяСтрока(ДанныеПредставления);
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(СопоставленныеОбъекты);
		СсылкаИПредставление.Ссылка = Список;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПлощадьЗемельногоУчастка(Ссылка) Экспорт
	
	ПлощадьЗемельногоУчастка = 0;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗемельныеУчасткиИС") Тогда
			ПлощадьЗемельногоУчастка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПлощадьЗемельногоУчастка");
		Иначе
			ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииПлощадиЗемельногоУчастка(Ссылка, ПлощадьЗемельногоУчастка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПлощадьЗемельногоУчастка;
	
КонецФункции

#Область РаботаСАдресами

Функция ЗначенияПолейКонтактнойИнформации(Представление, ВидКонтактнойИнформации) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
КонецФункции

Функция ДанныеАдресаОбъекта(Ссылка, ТребуютсяИдентификаторы = Ложь) Экспорт
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("ВладелецАдреса",      Ссылка);
	ДанныеАдреса.Вставить("Адрес",               Неопределено);
	ДанныеАдреса.Вставить("ПредставлениеАдреса", Неопределено);
	ДанныеАдреса.Вставить("КомментарийАдреса",   Неопределено);
	ДанныеАдреса.Вставить("Идентификатор",       Неопределено);
	ДанныеАдреса.Вставить("ОКТМО",               Неопределено);
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗемельныеУчасткиИС") Тогда
		ДанныеАдресаЗемельногоУчастка = ИнтеграцияЗЕРНО.ДанныеЗемельногоУчастка(Ссылка);
		ЗаполнитьЗначенияСвойств(ДанныеАдреса, ДанныеАдресаЗемельногоУчастка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КлючиАдресовЗЕРНО") Тогда
		ДанныеАдреса.ПредставлениеАдреса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Идентификатор");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО") Тогда
		ДанныеАдреса.ПредставлениеАдреса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЮридическийАдрес");
	Иначе
		СобытияФормЗЕРНОПереопределяемый.ДанныеАдресаОбъекта(ДанныеАдреса);
		ДанныеАдреса.КомментарийАдреса = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(ДанныеАдреса.Адрес);
	КонецЕсли;
	
	Если ТребуютсяИдентификаторы Тогда
		
		Если ДанныеАдреса.Адрес = Неопределено И ЗначениеЗаполнено(ДанныеАдреса.ПредставлениеАдреса) Тогда
			ДанныеАдреса.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
				ДанныеАдреса.ПредставлениеАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЕсли;
		
		ИдентификаторыАдреса = ИдентификаторыАдресаПоДаннымJSON(ДанныеАдреса.Адрес);
		ЗаполнитьЗначенияСвойств(ДанныеАдреса, ИдентификаторыАдреса);
		
	КонецЕсли;
	
	Возврат ДанныеАдреса;
	
КонецФункции

Функция ИдентификаторыАдресаПоДаннымJSON(ДанныеАдресаJSON) Экспорт
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("Идентификатор",       Неопределено);
	ДанныеАдреса.Вставить("ОКТМО",               Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодыАдреса", Истина);

	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеАдресаJSON, ДополнительныеПараметры);
	Если ТипЗнч(СведенияОбАдресе.ДополнительныеКоды) = Тип("Структура")
		И СведенияОбАдресе.ДополнительныеКоды.Свойство("ОКТМО") Тогда
		ДанныеАдреса.ОКТМО = СведенияОбАдресе.ДополнительныеКоды.ОКТМО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторДома) Тогда
		ДанныеАдреса.Идентификатор = СведенияОбАдресе.ИдентификаторДома;
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторАдресногоОбъекта) Тогда
		ДанныеАдреса.Идентификатор = СведенияОбАдресе.ИдентификаторАдресногоОбъекта;
	КонецЕсли;
	
	Возврат ДанныеАдреса;
	
КонецФункции

Функция СписокВыбораИдентификаторовАдресовОбъектов(Объекты) Экспорт
	
	ВозвращаемоеЗначение         = Новый СписокЗначений();
	ЦветТекстаНеТребуетВнимания = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	
	Для Каждого Объект Из Объекты Цикл
		
		ДанныеАдреса = ДанныеАдресаОбъекта(Объект, Истина);
		
		Если Не ЗначениеЗаполнено(ДанныеАдреса.Идентификатор)
			И Не ЗначениеЗаполнено(ДанныеАдреса.ОКТМО) Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = Новый Структура;
		Данные.Вставить("Действие",      Неопределено);
		Данные.Вставить("ОКТМО",         ДанныеАдреса.ОКТМО);
		Данные.Вставить("Идентификатор", ДанныеАдреса.Идентификатор);
		
		ДанныеПредставления = Новый Массив;
		ДанныеПредставления.Добавить(Строка(ДанныеАдреса.ПредставлениеАдреса));
		
		ДополнительныеДанныеПредставления = Новый Массив;
		Если ТипЗнч(Объект) <> Тип("СправочникСсылка.КлючиАдресовЗЕРНО") Тогда
			ДополнительныеДанныеПредставления.Добавить(Строка(Объект));
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеАдреса.Идентификатор) Тогда
			ДополнительныеДанныеПредставления.Добавить(СтрШаблон("%1: %2", НСтр("ru = 'ГАР'"), ДанныеАдреса.Идентификатор));
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеАдреса.ОКТМО) Тогда
			ДополнительныеДанныеПредставления.Добавить(СтрШаблон("%1: %2", НСтр("ru = 'ОКТМО'"), ДанныеАдреса.ОКТМО));
		КонецЕсли;
		
		ДанныеПредставления.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(" (%1)", СтрСоединить(ДополнительныеДанныеПредставления, ", ")),,
				ЦветТекстаНеТребуетВнимания));
		
		ВозвращаемоеЗначение.Добавить(
			Данные, 
			Новый ФорматированнаяСтрока(ДанныеПредставления));
		
	КонецЦикла;
	
	Данные = Новый Структура;
	Данные.Вставить("Действие",      "ОткрытьФормуКонтактнойИнформации");
	Данные.Вставить("ОКТМО",         Неопределено);
	Данные.Вставить("Идентификатор", Неопределено);
	
	ВозвращаемоеЗначение.Добавить(
		Данные, 
		Новый ФорматированнаяСтрока(
					НСтр("ru = 'Уточнить адрес объекта'"),,,,
					"ОткрытьФормуКонтактнойИнформации"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти