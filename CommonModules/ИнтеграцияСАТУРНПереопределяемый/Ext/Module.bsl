#Область ПрограммныйИнтерфейс

//Дополнительные действия прикладной конфигурации при изменении статуса документа.
//
//Параметры:
//   ДокументСсылка   - ДокументСсылка     - ссылка на документ с изменением статуса.
//   ПредыдущийСтатус - ПеречислениеСсылка - предыдущий статус обработки.
//   НовыйСтатус      - ПеречислениеСсылка - новый статус обработки.
//   ПараметрыОбновленияСтатуса - Структура, Неопределено - (См. ИнтеграцияСАТУРН.ПараметрыОбновленияСтатуса).
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт

	Возврат;

КонецПроцедуры

#Область ОбработчикиСобытийДокументов

//Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
//Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый документ,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипОбъекта = ТипЗнч(ДокументОбъект);
	Если ТипОбъекта = Тип("ДокументОбъект.АктИнвентаризацииСАТУРН") Тогда
		ИнтеграцияСАТУРНУТ.ОбработкаЗаполненияДокументаАктИнвентаризацииСАТУРН(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктПримененияСАТУРН") Тогда
		ИнтеграцияСАТУРНУТ.ОбработкаЗаполненияДокументаАктПримененияСАТУРН(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.НакладнаяСАТУРН") Тогда
		ИнтеграцияСАТУРНУТ.ОбработкаЗаполненияДокументаНакладнаяСАТУРН(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПроизводственнаяОперацияСАТУРН") Тогда
		ИнтеграцияСАТУРНУТ.ОбработкаЗаполненияДокументаПроизводственнаяОперацияСАТУРН(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИмпортПродукцииСАТУРН") Тогда
		ИнтеграцияСАТУРНУТ.ОбработкаЗаполненияДокументаИмпортПродукцииСАТУРН(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив из Строка- массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив из Строка - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ПриОпределенииОбработкиПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктИнвентаризацииСАТУРН")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.НакладнаяСАТУРН")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияСАТУРН")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИмпортПродукцииСАТУРН")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АктПримененияСАТУРН")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПланПримененияСАТУРН") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		ПараметрыУказанияСерий = Документы[ДокументОбъект.Метаданные().Имя].ПараметрыУказанияСерий(ДокументОбъект);
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияСАТУРН") Тогда
			
			ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
			ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы", "");
			ПараметрыПроверки.Вставить("ИмяТЧ",                   "Сырье");
			НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
			
			НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары, Отказ, МассивНепроверяемыхРеквизитов);
			НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Сырье, Отказ, МассивНепроверяемыхРеквизитов);
			
		Иначе
			
			НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросОстатковПартийСАТУРН") Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы", "");
		ПараметрыПроверки.Вставить("ИмяТЧ",                   "ОстаткиПоДаннымСАТУРН");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// В процедуре требуется дополнить в переданной таблице по Организации/контрагенту
// данные ИНН из информационной базы.
// КоллекцияОрганизацийПодразделений индексирован по "ОрганизацияКонтрагент".
//
// Параметры:
//  КоллекцияОрганизаций - см. ИнтеграцияСАТУРН.НоваяТаблицаОрганизацияКонтрагент
Процедура ПриОпределенииРеквизитовОрганизацийКонтрагентов(КоллекцияОрганизаций) Экспорт
	
	Если КоллекцияОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", КоллекцияОрганизаций);
	
	Запрос.Текст  = "ВЫБРАТЬ
	|	ТаблицаОтбора.ОрганизацияКонтрагент КАК ОрганизацияКонтрагент
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.ИНН     КАК ИНН,
	|	Контрагенты.Ссылка  КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Контрагенты.Ссылка = ТаблицаОтбора.ОрганизацияКонтрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.ИНН     КАК ИНН,
	|	Организации.Ссылка  КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Организации.Ссылка = ТаблицаОтбора.ОрганизацияКонтрагент
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("ОрганизацияКонтрагент");
	Пока Выборка.Следующий() Цикл
		
		Отбор.ОрганизацияКонтрагент = Выборка.Ссылка;
		
		НайденныеСтроки = КоллекцияОрганизаций.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Определение ссылок на организации и контрагенты по реквизитам. Переданной таблице реквизитов необходимо заполнить
// колонки:
//  - Организация - Ссылка на организацию, найденную по переданным реквизитам
//  - Контрагент  - Ссылка на контрагент, найденного по переданным реквизитам
// Параметры:
//  ТаблицаРеквизитов - см. Справочники.КлассификаторОрганизацийСАТУРН.НоваяТаблицаРеквизитовКлассификатораОрганизаций
Процедура ПриОпределенииКонтрагентовОрганизацийПоРеквизитам(ТаблицаРеквизитов) Экспорт
	
	Если ТаблицаРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРеквизитов.Колонки.Найти("ИндексИсходнойСтроки") = Неопределено Тогда
		ТаблицаРеквизитов.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		СтрокаТаблицы.ИндексИсходнойСтроки = ТаблицаРеквизитов.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаРеквизитов);
	
	Запрос.Текст  = "ВЫБРАТЬ
	|	ТаблицаОтбора.ИНН                  КАК ИНН,
	|	ТаблицаОтбора.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка                  КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО                        КАК Организация,
	|	ТаблицаОтбора.ИндексИсходнойСтроки  КАК ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Контрагенты.ИНН = ТаблицаОтбора.ИНН
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	Организации.Ссылка,
	|	ТаблицаОтбора.ИндексИсходнойСтроки
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО Организации.ИНН = ТаблицаОтбора.ИНН
	|	И НЕ Организации.ПометкаУдаления
	|
	|";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		СтрокаИсходнойТаблицы = ТаблицаРеквизитов.Получить(СтрокаДанных.ИндексИсходнойСтроки);
		Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			СтрокаИсходнойТаблицы.Контрагент = СтрокаДанных.Контрагент;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.Организация) Тогда
			СтрокаИсходнойТаблицы.Организация = СтрокаДанных.Организация;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определение текста запроса для получения списка организаций Сатурн, соответствующих собственным организациям.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса, для получения организаций, соответствующих собственным организациям в ФГИС "Сатурн".
//                          В полях запроса должно присутствовать поле Ссылка - СправочникСсылка.КлассификаторОрганизацийСАТУРН
Процедура ТекстЗапросаСобственныхОрганизацийПоРеквизитам(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникСАТУРН.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийСАТУРН КАК СправочникСАТУРН
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО НЕ Организации.ПометкаУдаления
	|		И (СправочникСАТУРН.Контрагент = Организации.Ссылка
	|			ИЛИ СправочникСАТУРН.ИНН = Организации.ИНН)";
	
КонецПроцедуры

// Определение текста запроса для получения списка организаций Сатурн, соответствующих сторонним организациям.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса, для получения организаций, соответствующих сторонним организациям в ФГИС "Сатурн".
//                          В полях запроса должно присутствовать поле Ссылка - СправочникСсылка.КлассификаторОрганизацийСАТУРН
Процедура ТекстЗапросаСтороннихОрганизацийПоРеквизитам(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникСАТУРН.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийСАТУРН КАК СправочникСАТУРН
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО НЕ Контрагенты.ПометкаУдаления
	|		И (СправочникСАТУРН.Контрагент = Контрагенты.Ссылка
	|			ИЛИ СправочникСАТУРН.ИНН = Контрагенты.ИНН)";
	
КонецПроцедуры

// Процедура определяет использование транспортных средств
//
// Параметры:
//  Указывается - Булево - Признак использования транспортных средств.
Процедура УказываетсяТранспортноеСредство(Указывается) Экспорт
	
	Указывается = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	
КонецПроцедуры

// Заполняет данные транспортного средства
//
// Параметры:
//  Реквизиты - Структура из КлючИЗначение - возможные реквизиты транспортного средства:
//   Ключи: НомерТранспортногоСредства
//  ТранспортноеСредство - ОпределяемыйТип.ТранспортныеСредстваИС - транспортное средство
Процедура ПриОпределенииРеквизитовТранспортногоСредства(Реквизиты, ТранспортноеСредство) Экспорт
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство, "Код, ГосударственныйНомерПрицепа");
		
		// Группы символов, разделяемые пробелами для ВЕТИС
		ГруппаСимволовЦифры = "0123456789";
		ГруппаСимволовРусские = "АВЕКМНОРСТУХ";
		
		// Латинские символы в российских госномерах, подменяемые русскими
		Замена = Новый Соответствие;
		Замена.Вставить("A","А");
		Замена.Вставить("B","В");
		Замена.Вставить("E","Е");
		Замена.Вставить("K","К");
		Замена.Вставить("M","М");
		Замена.Вставить("H","Н");
		Замена.Вставить("O","О");
		Замена.Вставить("P","Р");
		Замена.Вставить("C","С");
		Замена.Вставить("T","Т");
		Замена.Вставить("Y","У");
		Замена.Вставить("X","Х");
		
		НомерДоРазбиенияПоГруппам = СтрЗаменить(ВРег(ЗначенияРеквизитов.Код), " ", "");
		ЭтоРоссийскийНомер = Прав(НомерДоРазбиенияПоГруппам,3) = "RUS";
		Номер = "";
		ВидСимволаГруппы = -1;
		Для Индекс = 1 По СтрДлина(НомерДоРазбиенияПоГруппам) Цикл
			Символ = Сред(НомерДоРазбиенияПоГруппам, Индекс, 1);
			Если ЭтоРоссийскийНомер И Замена.Получить(Символ)<>Неопределено Тогда
				Символ = Замена.Получить(Символ);
			КонецЕсли;
			ВидСимвола = 0;
			Если СтрНайти(ГруппаСимволовЦифры, Символ)>0 Тогда
				ВидСимвола = 1;
			ИначеЕсли СтрНайти(ГруппаСимволовРусские, Символ)>0 Тогда
				ВидСимвола = 2;
			КонецЕсли;
			Номер = Номер + ?(ВидСимволаГруппы = ВидСимвола,""," ") + Символ;
			ВидСимволаГруппы = ВидСимвола;
		КонецЦикла;
		Реквизиты.НомерТранспортногоСредства = Сред(Номер, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствие госконтракту  дату, номер и номер закупки ЕИС.
//
// Параметры:
//  МассивСсылок - Массив Из ОпределяемыйТип.ГосударственныеКонтрактыИС - массив ссылок государственные контракты.
//  
//  ВозвращаемоеСоответствие - Соответствие из ОпределяемыйТип.ГосударственныеКонтрактыИС:
//                             * Ключ - ОпределяемыйТип.ГосударственныеКонтрактыИС - ссылка на ссылка на гос.контракт.
//                             * Значение - Структура:
//                               ** НомерГосКонтракта - Строка.
//                               ** ДатаГосКонтракта  - Дата.
//
Процедура ПриОпределенииРеквизитовГосКонтракта(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	ВозвращаемоеСоответствие = ИнтеграцияИСУТ.ДанныеГосударственногоКонтракта(МассивСсылок);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет параметры поиска организации САТУРН по элементу справочника конфигурации
//
// Параметры:
//  ДанныеКонтрагента - (См. ИнтеграцияСАТУРН.ДанныеКонтрагентаДляПоискаОрганизацииСАТУРН)
//  Контрагент        - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на контрагента информационной базы
Процедура ЗаполнитьДанныеКонтрагентаДляПоискаОрганизацийСАТУРН(ДанныеКонтрагента, Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Контрагенты.ИНН          КАК ИНН,
		|	Контрагенты.КПП          КАК КПП,
		|	""""                     КАК ОГРН,
		|	Контрагенты.Наименование КАК Наименование,
		|	""""                     КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ИЛИ  Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийСАТУРН.ЮридическоеЛицо)
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийСАТУРН.ИндивидуальныйПредприниматель)
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийСАТУРН.ФизическоеЛицо)
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Организации.ИНН          КАК ИНН,
		|	Организации.КПП          КАК КПП,
		|	""""                     КАК ОГРН,
		|	Организации.Наименование КАК Наименование,
		|	""""                     КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ИЛИ  Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийСАТУРН.ЮридическоеЛицо)
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийСАТУРН.ИндивидуальныйПредприниматель)
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОрганизацийСАТУРН.ФизическоеЛицо)
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Контрагент";
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет возможные идентификаторы партии при оформлении накладной.
// Идентификаторы партии - это значения, которые помогают покупателю и продавцу идентифицировать строку партии.
// Например:
// 	 Партия - Номер серии, Дата серии
// 
// Параметры:
//  ПараметрыИдентификации  - см. ИнтеграцияСАТУРНКлиентСервер.ПараметрыИдентификацииТовараПартии 
//  ИдентификаторыПартии    - СписокЗначений из Строка - Значение и представления идентификатора партии для выбора в форме накладной
Процедура ПриЗаполненииДанныхИдентификацииТовараПартии(ПараметрыИдентификации, ИдентификаторыПартии) Экспорт
	
	//++ НЕ ГОСИС
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",   ПараметрыИдентификации.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыИдентификации.Характеристика);
	Запрос.УстановитьПараметр("Серия",          ПараметрыИдентификации.Серия);
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Наименование КАК Значение,
		|	""Серия""                      КАК Представление
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Ссылка = &Серия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииНоменклатуры.ДатаПроизводства,
		|	""Дата производства""
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Ссылка = &Серия
		|	И СерииНоменклатуры.ДатаПроизводства <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииНоменклатуры.ГоденДо,
		|	""Срок годности""
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Ссылка = &Серия
		|	И СерииНоменклатуры.ГоденДо <> ДАТАВРЕМЯ(1, 1, 1)",
		"ИдентификаторыПартии");
		
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ВыборкаИдентификаторыПартии = РезультатЗапроса["ИдентификаторыПартии"].Выбрать();
	
	Пока ВыборкаИдентификаторыПартии.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаИдентификаторыПартии.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыПартии.Добавить(
			Формат(ВыборкаИдентификаторыПартии.Значение, "ДФ=dd.MM.yyyy;"),
			СтрШаблон("%1: %2", ВыборкаИдентификаторыПартии.Представление, Формат(ВыборкаИдентификаторыПартии.Значение, "ДФ=dd.MM.yyyy;")));
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти