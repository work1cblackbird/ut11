////////////////////////////////////////////////////////////////////////////////
// Модуль "ДоставкаТоваров", содержит процедуры и функции для
// управления доставкой.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ рассчитывает и записывает в регистр сведений состояние заказа.
//
//	Параметры:
//		РаспоряженияСсылки - Массив из ДокументСсылка, ДокументСсылка - ссылки на документы, по которым
//					нужно рассчитать состояние отгрузки.
//					В модуле менеджера документов должна быть определена функция ТекстЗапросаРеквизитыДоставки()
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПроведения - Булево - признак обработки удаления проведения.
//
Процедура ОтразитьСостояниеДоставки(РаспоряженияСсылки, Отказ = Ложь, УдалениеПроведения = Ложь) Экспорт
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РаспоряженияСсылки)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(РаспоряженияСсылки) = Тип("Массив") Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(РаспоряженияСсылки);
		
		МассивДоговоровРаспоряжений = Новый Массив;
		
		ДоговорРаспоряжение = ПолучитьДоговорРаспоряжение(РаспоряженияСсылки);
		
		Если ДоговорРаспоряжение <> Неопределено Тогда
			
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РаспоряженияСсылки, "Договор");
			
			МассивСсылок.Добавить(Договор);
			МассивДоговоровРаспоряжений.Добавить(Договор);
			
		КонецЕсли;
		
	Иначе
		
		МассивСсылок = РаспоряженияСсылки;
		МассивДоговоровРаспоряжений = Новый Массив;
		
		ДоговорРаспоряжение = ПолучитьДоговорРаспоряжение(РаспоряженияСсылки);
		
		Если ДоговорРаспоряжение <> Неопределено Тогда
			
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РаспоряженияСсылки, "Договор");
			
			МассивСсылок.Добавить(Договор);
			МассивДоговоровРаспоряжений.Добавить(Договор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УдалениеПроведения Тогда
		Для Каждого Ссылка Из МассивСсылок Цикл
			Набор = РегистрыСведений.СостоянияИРеквизитыДоставки.СоздатьНаборЗаписей();
			Набор.Отбор.Распоряжение.Установить(Ссылка);
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать(Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
	
	ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(МассивСсылок[0]);
	
	ТаблицаРаспоряжений = Новый ТаблицаЗначений;
	ТаблицаРаспоряжений.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип);
	СоответствиеТипов = Новый Соответствие;
	ТекстЗапроса = "";
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(Ссылка) Тогда
			
			ПараметрыПриемки = ПолучитьПараметрыПриемки(Ссылка);
			
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СпособДоставки");
			
			ДоставкаОпределенаВДоговоре = ДоставкаОпределенаВДоговоре(Ссылка);
			
			Если ((ПараметрыПриемки.СоглашениеЯвляетсяРаспоряжением
					Или ДоставкаОпределенаВДоговоре
						И ПараметрыПриемки.ДоговорЯвляетсяРаспоряжением)
					И ПараметрыПриемки.ЭтоРаспоряжение)
				Или
					(Не ПараметрыПриемки.ЭтоДокументПоступление
					И ДоставкаТоваровКлиентСервер.ДоставкаИспользуется(СпособДоставки,
						ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками)) Тогда
				
				Набор = РегистрыСведений.СостоянияИРеквизитыДоставки.СоздатьНаборЗаписей();
				Набор.Отбор.Распоряжение.Установить(Ссылка);
				Набор.Записать(Истина);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРаспоряжений.Добавить();
		НоваяСтрока.Ссылка = Ссылка;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Продолжить; // Использование договора как распоряжения определяется в документах
		КонецЕсли;
		
		ТипСсылки = ТипЗнч(Ссылка);
		Если СоответствиеТипов[ТипСсылки] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеТипов.Вставить(ТипСсылки,Истина);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		ТекстЗапросаПоДокументу = МенеджерОбъекта.ТекстЗапросаРеквизитыДоставки();
		Если ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(Ссылка) Тогда
			ПараметрыПриемки = ПолучитьПараметрыПриемки(Ссылка);
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "&ЭтоРаспоряжение", ?(ПараметрыПриемки.ЭтоРаспоряжение, "ИСТИНА", "ЛОЖЬ"));
		КонецЕсли;
		Если ТекстЗапроса = "" Тогда
			ПоложениеИЗ = СтрНайти(ТекстЗапросаПоДокументу, "ИЗ");
			ТекстЗапроса = Лев(ТекстЗапросаПоДокументу,ПоложениеИЗ - 1)
						+ " ПОМЕСТИТЬ ДанныеРаспоряжений
						|" + Прав(ТекстЗапросаПоДокументу,СтрДлина(ТекстЗапросаПоДокументу) - ПоложениеИЗ + 1);
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстЗапросаПоДокументу;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапросаПоДокументу) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
	+
	"ВЫБРАТЬ
	|	ТаблицаРаспоряжений.Ссылка КАК Ссылка,
	|	ТаблицаРаспоряжений.Ссылка ССЫЛКА Документ.ПоручениеЭкспедитору КАК ЭтоПоручениеЭкспедитору
	|ПОМЕСТИТЬ ТаблицаРаспоряжений
	|ИЗ
	|	&ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|	ТоварыКДоставке.Склад КАК Склад,
	|	ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|	ТоварыКДоставке.Характеристика КАК Характеристика,
	|	ТоварыКДоставке.Назначение КАК Назначение,
	|	ТоварыКДоставке.Серия КАК Серия,
	|	ТоварыКДоставке.Количество КАК Количество,
	|	ТоварыКДоставке.ВсеТовары КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыКДоставке
	|ИЗ
	|	РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ПО (ТаблицаРаспоряжений.Ссылка = ТоварыКДоставке.Распоряжение)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ДокументЗаданиеНаПеревозку
	|		ПО (ДокументЗаданиеНаПеревозку.Ссылка = ТоварыКДоставке.ЗаданиеНаПеревозку)
	|			И (ДокументЗаданиеНаПеревозку.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Склад,
	|	ЗаданиеНаПеревозку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияЗаданий.Распоряжение КАК Ссылка,
	|	РаспоряженияЗаданий.Склад КАК Склад,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыКДоставке.ЗаданиеНаПеревозку ЕСТЬ NULL
	|					И ЗаданиеНаПеревозкуШапка.Проведен
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВсеПроведенныеЗаданияБезТоваров,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ТоварыКДоставке.ВсеТовары
	|						И ЗаданиеНаПеревозкуШапка.Проведен
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ), МАКСИМУМ(ТаблицаРаспоряжений.ЭтоПоручениеЭкспедитору)) КАК ВсеТоварыВДоставке,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЗаданиеНаПеревозкуШапка.Проведен
	|					И ЗаданиеНаПеревозкуШапка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)
	|					И РаспоряженияЗаданий.Доставлено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВсеЗаданияЗакрыты,
	|	МАКСИМУМ(ЗаданиеНаПеревозкуШапка.Проведен
	|				И РаспоряженияЗаданий.Доставлено) КАК ЕстьДоставленныеТовары,
	|	МАКСИМУМ(ЗаданиеНаПеревозкуШапка.Проведен
	|				И НЕ РаспоряженияЗаданий.Доставлено) КАК ЕстьНедоставленныеТовары,
	|	МАКСИМУМ(ЗаданиеНаПеревозкуШапка.Проведен) КАК ЕстьПроведенныеЗадания,
	|	МАКСИМУМ(ТаблицаРаспоряжений.ЭтоПоручениеЭкспедитору) КАК ЭтоПоручениеЭкспедитору
	|ПОМЕСТИТЬ ТаблицаПроверкиЗаданийИТоваровВДоставке
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозкуШапка
	|		ПО РаспоряженияЗаданий.Ссылка = ЗаданиеНаПеревозкуШапка.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ПО (ТаблицаРаспоряжений.Ссылка = РаспоряженияЗаданий.Распоряжение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКДоставке КАК ТоварыКДоставке
	|		ПО РаспоряженияЗаданий.Распоряжение = ТоварыКДоставке.Распоряжение
	|			И РаспоряженияЗаданий.Склад = ТоварыКДоставке.Склад
	|			И РаспоряженияЗаданий.Ссылка = ТоварыКДоставке.ЗаданиеНаПеревозку
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияЗаданий.Распоряжение,
	|	РаспоряженияЗаданий.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Склад,
	|	ЕстьПроведенныеЗадания";
	
	Если ЭтоДоставкаНаНашСклад Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ЕстьТоварыНеВключенныеВЗадания,
		|	Т.Распоряжение КАК Ссылка,
		|	Т.Склад
		|ПОМЕСТИТЬ РаспоряженияЧастичноВДоставке
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
		|		ТоварыКДоставке.Склад КАК Склад,
		|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
		|		ТоварыКДоставке.Характеристика КАК Характеристика,
		|		ТоварыКДоставке.Назначение КАК Назначение,
		|		ТоварыКДоставке.Серия КАК Серия,
		|		-ТоварыКДоставке.Количество КАК Количество
		|	ИЗ
		|		ТоварыКДоставке КАК ТоварыКДоставке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ТоварыКДоставке.Склад)
		|				И (ТаблицаПроверки.Ссылка = ТоварыКДоставке.Распоряжение)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|				И НЕ ТаблицаПроверки.ЭтоПоручениеЭкспедитору
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеРаспоряженийПоТоварам.Ссылка,
		|		ДанныеРаспоряженийПоТоварам.Склад,
		|		ДанныеРаспоряженийПоТоварам.Номенклатура,
		|		ДанныеРаспоряженийПоТоварам.Характеристика,
		|		ДанныеРаспоряженийПоТоварам.Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|		ДанныеРаспоряженийПоТоварам.Количество
		|	ИЗ
		|		Документ.ЗаказПоставщику.Товары КАК ДанныеРаспоряженийПоТоварам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ДанныеРаспоряженийПоТоварам.Склад)
		|				И (ТаблицаПроверки.Ссылка = ДанныеРаспоряженийПоТоварам.Ссылка)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеРаспоряженийПоТоварам.Ссылка,
		|		ДанныеРаспоряженийПоТоварам.Склад,
		|		ДанныеРаспоряженийПоТоварам.Номенклатура,
		|		ДанныеРаспоряженийПоТоварам.Характеристика,
		|		ДанныеРаспоряженийПоТоварам.Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|		ДанныеРаспоряженийПоТоварам.Количество
		|	ИЗ
		|		Документ.ПриобретениеТоваровУслуг.Товары КАК ДанныеРаспоряженийПоТоварам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ДанныеРаспоряженийПоТоварам.Склад)
		|				И (ТаблицаПроверки.Ссылка = ДанныеРаспоряженийПоТоварам.Ссылка)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеРаспоряженийПоТоварам.Ссылка,
		|		ДанныеРаспоряженийПоТоварам.Склад,
		|		ДанныеРаспоряженийПоТоварам.Номенклатура,
		|		ДанныеРаспоряженийПоТоварам.Характеристика,
		|		ДанныеРаспоряженийПоТоварам.Назначение,
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|		ДанныеРаспоряженийПоТоварам.Количество
		|	ИЗ
		|		Документ.ПриемкаТоваровНаХранение.Товары КАК ДанныеРаспоряженийПоТоварам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ДанныеРаспоряженийПоТоварам.Склад)
		|				И (ТаблицаПроверки.Ссылка = ДанныеРаспоряженийПоТоварам.Ссылка)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Распоряжение,
		|	Т.Склад,
		|	Т.Характеристика,
		|	Т.Назначение,
		|	Т.Серия,
		|	Т.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК НетОстатка,
		|	ТоварыКПоступлениюОбороты.ДокументПоступления КАК ДокументОтгрузкиПоступления,
		|	ТоварыКПоступлениюОбороты.Склад КАК Склад
		|ПОМЕСТИТЬ ОстаткиКОтгрузкеКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , , ДокументПоступления В (&Ссылки)) КАК ТоварыКПоступлениюОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&Ссылки)) КАК ОстаткиТоварыКПоступлению
		|		ПО ТоварыКПоступлениюОбороты.ДокументПоступления = ОстаткиТоварыКПоступлению.ДокументПоступления
		|			И ТоварыКПоступлениюОбороты.Склад = ОстаткиТоварыКПоступлению.Склад
		|ГДЕ
		|	ТоварыКПоступлениюОбороты.КОформлениюОрдеровПриход > 0
		|	И ОстаткиТоварыКПоступлению.КОформлениюОрдеровОстаток ЕСТЬ NULL";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ЕстьТоварыНеВключенныеВЗадания,
		|	Т.Распоряжение КАК Ссылка,
		|	Т.Склад
		|ПОМЕСТИТЬ РаспоряженияЧастичноВДоставке
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
		|		ТоварыКДоставке.Склад КАК Склад,
		|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
		|		ТоварыКДоставке.Характеристика КАК Характеристика,
		|		ТоварыКДоставке.Назначение КАК Назначение,
		|		ТоварыКДоставке.Серия КАК Серия,
		|		-ТоварыКДоставке.Количество КАК Количество
		|	ИЗ
		|		ТоварыКДоставке КАК ТоварыКДоставке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ТоварыКДоставке.Склад)
		|				И (ТаблицаПроверки.Ссылка = ТоварыКДоставке.Распоряжение)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|				И НЕ ТаблицаПроверки.ЭтоПоручениеЭкспедитору
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТоварыКОтгрузке.ДокументОтгрузки,
		|		ТоварыКОтгрузке.Склад,
		|		ТоварыКОтгрузке.Номенклатура,
		|		ТоварыКОтгрузке.Характеристика,
		|		ТоварыКОтгрузке.Назначение,
		|		ТоварыКОтгрузке.Серия,
		|		ТоварыКОтгрузке.КОтгрузкеПриход
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки В (&Ссылки)) КАК ТоварыКОтгрузке
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
		|			ПО (ТаблицаПроверки.Склад = ТоварыКОтгрузке.Склад)
		|				И (ТаблицаПроверки.Ссылка = ТоварыКОтгрузке.ДокументОтгрузки)
		|				И НЕ ТаблицаПроверки.ВсеТоварыВДоставке
		|				И ТаблицаПроверки.ЕстьПроведенныеЗадания
		|	ГДЕ
		|		ТоварыКОтгрузке.КОтгрузкеПриход > 0) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Распоряжение,
		|	Т.Склад,
		|	Т.Характеристика,
		|	Т.Назначение,
		|	Т.Серия,
		|	Т.Номенклатура
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК НетОстатка,
		|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузкиПоступления,
		|	ТоварыКОтгрузкеОбороты.Склад КАК Склад
		|ПОМЕСТИТЬ ОстаткиКОтгрузкеКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки В (&Ссылки)) КАК ТоварыКОтгрузкеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&Ссылки)) КАК ОстаткиТоварыКОтгрузке
		|		ПО ТоварыКОтгрузкеОбороты.ДокументОтгрузки = ОстаткиТоварыКОтгрузке.ДокументОтгрузки
		|			И ТоварыКОтгрузкеОбороты.Склад = ОстаткиТоварыКОтгрузке.Склад
		|ГДЕ
		|	ТоварыКОтгрузкеОбороты.КОтгрузкеПриход > 0
		|	И ОстаткиТоварыКОтгрузке.КОтгрузкеОстаток ЕСТЬ NULL";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ТаблицаРаспоряжений.Ссылка КАК Распоряжение,
	|	ДанныеРаспоряжений.Номер,
	|	ДанныеРаспоряжений.Дата,
	|	ЕСТЬNULL(ДанныеРаспоряжений.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ДанныеРаспоряжений.ПолучательОтправитель,
	|	ДанныеРаспоряжений.Перевозчик,
	|	ДанныеРаспоряжений.СпособДоставки,
	|	ДанныеРаспоряжений.Зона,
	|	ДанныеРаспоряжений.Адрес,
	|	ДанныеРаспоряжений.АдресЗначенияПолей,
	|	ДанныеРаспоряжений.ВремяС,
	|	ДанныеРаспоряжений.ВремяПо,
	|	ДанныеРаспоряжений.ДополнительнаяИнформация,
	|	ДанныеРаспоряжений.ДоставитьПолностью,
	|	ДанныеРаспоряжений.ОсобыеУсловияПеревозки,
	|	ДанныеРаспоряжений.ОсобыеУсловияПеревозкиОписание,
	|	ДанныеРаспоряжений.РазбиватьРасходныеОрдераПоРаспоряжениям,
	|	ВЫБОР
	|		КОГДА ДанныеРаспоряжений.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеРаспоряжений.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ИЛИ НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ДанныеРаспоряжений.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ИЛИ НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|				И ДанныеРаспоряжений.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ИЛИ ДанныеРаспоряжений.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|				И (НЕ ДанныеРаспоряжений.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ИЛИ ДанныеРаспоряжений.Дата < ДанныеРаспоряжений.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеРаспоряжений.Проведен = ЛОЖЬ
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаПроверки.ВсеПроведенныеЗаданияБезТоваров
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаПроверки.ВсеЗаданияЗакрыты = ИСТИНА
	|				И ОстаткиКОтгрузкеКПоступлению.НетОстатка
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТаблицаПроверки.ВсеЗаданияЗакрыты = ИСТИНА
	|				И РаспоряженияЧастичноВДоставке.Ссылка ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|
	|		КОГДА ЕстьNULL(ТаблицаПроверки.ЕстьПроведенныеЗадания,Ложь)
	|				И НЕ ЕстьNULL(РаспоряженияЧастичноВДоставке.ЕстьТоварыНеВключенныеВЗадания,Ложь)
	|				И ЕСТЬNULL(ТаблицаПроверки.ЕстьДоставленныеТовары, ЛОЖЬ)
	|				И НЕ ЕСТЬNULL(ТаблицаПроверки.ЕстьНедоставленныеТовары, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ПолностьюВДоставке)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка)
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаспоряжений КАК ДанныеРаспоряжений
	|		ПО ДанныеРаспоряжений.Ссылка = ТаблицаРаспоряжений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроверкиЗаданийИТоваровВДоставке КАК ТаблицаПроверки
	|		ПО ДанныеРаспоряжений.Склад = ТаблицаПроверки.Склад
	|			И ДанныеРаспоряжений.Ссылка = ТаблицаПроверки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияЧастичноВДоставке КАК РаспоряженияЧастичноВДоставке
	|		ПО ДанныеРаспоряжений.Склад = РаспоряженияЧастичноВДоставке.Склад
	|			И ДанныеРаспоряжений.Ссылка = РаспоряженияЧастичноВДоставке.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКОтгрузкеКПоступлению КАК ОстаткиКОтгрузкеКПоступлению
	|		ПО ДанныеРаспоряжений.Склад = ОстаткиКОтгрузкеКПоступлению.Склад
	|			И ДанныеРаспоряжений.Ссылка = ОстаткиКОтгрузкеКПоступлению.ДокументОтгрузкиПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРаспоряжений.Ссылка,
	|	ЕСТЬNULL(ДанныеРаспоряжений.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))";
	
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Запрос.УстановитьПараметр("ДоговораРаспоряженияНаПоступление", МассивДоговоровРаспоряжений);
	Запрос.УстановитьПараметр("ТаблицаРаспоряжений", ТаблицаРаспоряжений);
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	Запрос.УстановитьПараметр("ИспользуемыеСпособыДоставки", ДоставкаТоваровКлиентСервер.ИспользуемыеСпособыДоставки(
		ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
		
		НаборСостояние = РегистрыСведений.СостоянияИРеквизитыДоставки.СоздатьНаборЗаписей();
		НаборСостояние.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
		
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			
			Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
				ЗаполнитьЗначенияСвойств(НаборСостояние.Добавить(), Выборка);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборСостояние.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Получает список перевозчиков и помещает их во временное хранилище.
//
// Параметры:
//  ПараметрыЗадания - Массив - содержит параметрвы вызова
//  АдресХранилища - Строка - адрес временного хранилища, по которому будет помещен результат выполнения.
//
Процедура ПолучитьСписокПеревозчиковВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	МассивОтправителей = ПолучитьСписокПеревозчиков(ПараметрыЗадания[0], ПараметрыЗадания[1]);
	
	ПоместитьВоВременноеХранилище(МассивОтправителей, АдресХранилища);
	
КонецПроцедуры

// Устанавливает свойства форм документов, в которых имеются реквизиты доставки при чтении, создании.
//
// Параметры:
//  ЭлементыФормы		 - ВсеЭлементыФормы	 - все элементы формы для управления свойствами и переключения закладок, может содержать:
//  							* ОсобыеУсловияПеревозкиОписание - ПолеФормы - обязательное
//  							* ОсобыеУсловияПеревозкиОписание1 - ПолеФормы - необязательное
//  							* ОсобыеУсловияПеревозкиОписание2 - ПолеФормы - необязательное
//  							* ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком - ПолеФормы - необязательное
//  ДокОбъект			       - ДанныеФормыСтруктура	 - объект, реквизиты которого используются при заполнении свойств,
//  НакладнаяПоЗаказу	       - Булево				 - Истина, если ДокОбъект является накладной и по заказам, иначе Ложь,
//  ПараметрыЗаполнения	       - Структура			 - структуру см. ПараметрыЗаполненияРеквизитов
//  СводнаяИнформация          - Строка				 - реквизит формы, для заполнения сводной информации по доставке.
//  ЗаполнятьПеревозчиковВФоне - Булево				 - признак, что заполнение перевозчиков заполняется в фоне.
// Возвращаемое значение:
//  Структура                  - см. ДлительныеОперации.ВыполнитьВФоне или пустая стуктура.
//
Функция ПриЧтенииСозданииРаспоряженийНаСервере(ЭлементыФормы,
	ДокОбъект, НакладнаяПоЗаказу = Ложь, ПараметрыЗаполнения = Неопределено, СводнаяИнформация = Неопределено,
	ЗаполнятьПеревозчиковВФоне = Ложь) Экспорт
	
	ПараметрыПриемки         = Неопределено;
	РаспоряжениеПоСоглашению = Ложь;
	РаспоряжениеПоДоговору   = Ложь;
	РезультатФоновогоЗадания = Новый Структура();
	
	ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект);
	
	Если ЭтоДоставкаНаНашСклад И ДокОбъект.Свойство("Ссылка") И ДокОбъект.Свойство("ВариантПриемкиТоваров") Тогда
		ПараметрыПриемки = ПолучитьПараметрыПриемки(ДокОбъект, ДокОбъект.ВариантПриемкиТоваров, НакладнаяПоЗаказу);
	КонецЕсли;
	
	Если Не УстановитьВидимостьЭлементовДоставки(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказу, ПараметрыПриемки, ЭтоДоставкаНаНашСклад) Тогда
		Возврат РезультатФоновогоЗадания;
	КонецЕсли;
	
	УстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементыФормы);
	
	Если ЗаполнятьПеревозчиковВФоне Тогда
		
	
		Если НЕ ЭлементыФормы.Найти("ПеревозчикПартнер") = Неопределено Тогда
			
			ПроцедураРасчета = "ДоставкаТоваров.ПолучитьСписокПеревозчиковВФоне";
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.ВыгрузитьЗначения());
			Если ДокОбъект <> Неопределено Тогда
				ПараметрыЗадания.Добавить(ПолучательОтправитель(ДокОбъект).Значение);
			Иначе
				ПараметрыЗадания.Добавить(Неопределено);
			КонецЕсли;
			
			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
			ПараметрыВыполнения.ОжидатьЗавершение = 0;
			ПараметрыВыполнения.ЗапуститьВФоне = Истина;
			
			РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ПроцедураРасчета,
																			ПараметрыЗадания,
																			ПараметрыВыполнения);
			
		КонецЕсли;
	
	Иначе
		
		ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы,ДокОбъект);
		
	КонецЕсли;
	
	СпособДоставки = ДокОбъект.СпособДоставки;
	
	Если СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
		ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, ДокОбъект);
	КонецЕсли;
	ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, ДокОбъект);
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		
		ДоставкаОпределенаВДоговоре = Ложь;
		
		Если ЭтоДоставкаНаНашСклад Тогда
			РаспоряжениеПоСоглашению    = ЭтоРаспоряжениеПоСоглашению(ДокОбъект, ПараметрыПриемки);
			ДоставкаОпределенаВДоговоре = ДоставкаОпределенаВДоговоре(ДокОбъект);
			Если ДоставкаОпределенаВДоговоре И ДокОбъект.Свойство("Договор") И ЭлементыФормы.Найти("ГруппаСводнаяИнформацияПоДоставке") <> Неопределено Тогда
				СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Договор, "СпособДоставки");
				СводнаяИнформация = СформироватьСводнуюИнформациюПоДоставке(ДокОбъект.Договор);
				ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, ДокОбъект);
			ИначеЕсли РаспоряжениеПоСоглашению И ДокОбъект.Свойство("Соглашение") И ЭлементыФормы.Найти("ГруппаСводнаяИнформацияПоДоставке") <> Неопределено Тогда
				СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Соглашение, "СпособДоставки");
				СводнаяИнформация = СформироватьСводнуюИнформациюПоДоставке(ДокОбъект.Соглашение);
				ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, ДокОбъект);
			КонецЕсли;
		КонецЕсли;
		
		ЭтоДоговорСоглашение = ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			Или ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками");
		
		РаспоряжениеПоДоговору = Не ЭтоДоговорСоглашение И ДоставкаОпределенаВДоговоре;
		
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы,
			СпособДоставки,
			ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками,
			РаспоряжениеПоСоглашению,
			РаспоряжениеПоДоговору);
		Если ЭлементыФормы.Найти("СтраницаДоставкаПеревозчиком") <> Неопределено Тогда
			ЭлементыФормы.ОсобыеУсловияПеревозкиДоставкаПеревозчиком.Видимость         = ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками;
			ЭлементыФормы.ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком.Видимость = ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками;
		КонецЕсли;
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

// В зависимости от ФО РедактироватьАдресаДоставкиТолькоВДиалоге для элементов-адресов доставки
//	устанавливается признак РедактированиеТекста.
//
// Параметры:
//	ЭлементыФормы - ВсеЭлементыФормы - элементы формы, для которых осуществляется изменение свойств.
//
Процедура УстановитьДоступностьАдресовДоставки(ЭлементыФормы) Экспорт
	
	РедактированиеРазрешено = Не ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	Если РедактированиеРазрешено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
		 И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода
		 И СтрНайти(НРег(ЭлементФормы.Имя), НРег("Адрес")) > 0 Тогда
			ЭлементФормы.РедактированиеТекста = РедактированиеРазрешено;
			ЭлементФормы.КнопкаОчистки = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// В зависимости от ФО РедактироватьАдресаДоставкиТолькоВДиалоге для элементов-адресов доставки
//	устанавливается признак РедактированиеТекста и заполняется список выбора.
//
// Параметры:
//	ЭлементыФормы - ВсеЭлементыФормы - элементы формы, для которых осуществляется изменение свойств.
//
Процедура УстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементыФормы) Экспорт
	
	РедактированиеРазрешено = Не ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	Если ЭлементыФормы.Найти("СтраницаДоставка") <> Неопределено Тогда
		ЭлементыДляОбхода = ЭлементыФормы.СтраницаДоставка.ПодчиненныеЭлементы;
	Иначе
		ЭлементыДляОбхода = ЭлементыФормы;
	КонецЕсли;
	
	РекурсивноУстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементыДляОбхода, РедактированиеРазрешено);
	
КонецПроцедуры

// Возвращает параметры заполнения реквизитов доставки
// 
// Возвращаемое значение:
//  Структура - с ключом:
//  * ИсточникСтатистики - ДокументМенеджер - менеджеры документов,
//  из которых будет извлекаться статистика для заполнения реквизитов доставки.
//
Функция ПараметрыЗаполненияРеквизитов() Экспорт
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ИсточникСтатистики", Неопределено);
	Возврат ПараметрыЗаполнения;
КонецФункции

// Заполняет реквизиты доставки в зависимости от элемента формы, в котором производятся изменения.
//
// Параметры:
//	ЭлементыФормы - ВсеЭлементыФормы - все элементы формы, в которых производятся изменения,
//	ИмяЭлементаФормы - Строка - имя элемента формы, в котором произошли изменения,
//	ДокОбъект - ДанныеФормыСтруктура - объект, реквизиты которого используются при заполнении,
//	ПараметрыЗаполнения - см. ПараметрыЗаполненияРеквизитов
//
Процедура ЗаполнитьРеквизитыДоставки(ЭлементыФормы, ИмяЭлементаФормы, ДокОбъект, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	
	Если ИмяЭлементаФормы = ПолучательОтправитель.ИмяПоля Тогда
		
		ПриИзмененииПолучателяОтправителя(ЭлементыФормы, ДокОбъект, ПараметрыЗаполнения);
		
	Иначе
		
		Если СтрНайти(ИмяЭлементаФормы,"СпособДоставки") > 0
			Или СтрНайти(ИмяЭлементаФормы,"МестоПередачи") > 0 Тогда
			
			ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект);
			
			
		ИначеЕсли СтрНайти(ИмяЭлементаФормы,"ПеревозчикПартнер") > 0 Тогда
			
			ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет необходимые действия при изменении способа доставки в распоряжениях на доставку,
//	заполняет списки выбора, реквизиты доставки, настраивает элементы формы.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, в которой производятся изменения,
//	ДокОбъект - ДанныеФормыСтруктура, СправочникОбъект - объект, реквизиты которого используются при заполнении.
//
Процедура ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект.Ссылка);
	
	РеквизитыДоставки = РеквизитыДоставки(ДокОбъект);
	
	ДопИнфоИзмененоПользователем = ДоставкаТоваровКлиентСервер.ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект);
	
	ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);
	
	Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
		И ЗначениеЗаполнено(РеквизитыДоставки.ПеревозчикПартнер) Тогда
		ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, РеквизитыДоставки);
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);
	КонецЕсли;
	
	Если РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиентаКурьером Тогда
		
		ДатаДокумента = ДокОбъект.Дата;
		Если ДокОбъект.Дата - НачалоДня(ДокОбъект.Дата) = 0 Тогда
			ДатаДокумента = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ДатаОтгрузки = ДатаДокумента;
		
		Если (ТипЗнч(ДокОбъект) = Тип("ДанныеФормыСтруктура")
			Или ТипЗнч(ДокОбъект) = Тип("Структура")) Тогда
			
			Если ДокОбъект.Свойство("ДатаОтгрузки") Тогда
				
				Если ЗначениеЗаполнено(ДокОбъект.ДатаОтгрузки) Тогда
					ДатаОтгрузки = ДокОбъект.ДатаОтгрузки;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОтгрузки", ДокОбъект.Метаданные()) Тогда
			
			Если ЗначениеЗаполнено(ДокОбъект.ДатаОтгрузки) Тогда
				ДатаОтгрузки = ДокОбъект.ДатаОтгрузки;
			КонецЕсли;
			
		КонецЕсли;
		
		НастройкиСклада = СкладыСервер.НастройкиСкладаДляСборкиИДоставки(ДокОбъект.Склад, ДатаДокумента);
		
		Если НастройкиСклада <> Неопределено 
			И НастройкиСклада.НормативныйСрокДоставкиЗаказов > 0 
			И НачалоДня(ДатаОтгрузки) = НачалоДня(ДатаДокумента) Тогда
			
			РеквизитыДоставки.ВремяДоставкиС = ДатаДокумента;
			РеквизитыДоставки.ВремяДоставкиПо = ДатаДокумента + НастройкиСклада.НормативныйСрокДоставкиЗаказов*60;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыДоставки);
	
	ЭтоДоговорСоглашение = ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками");
	
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		РаспоряжениеПоСоглашению = ЭтоДоставкаНаНашСклад И ЭтоРаспоряжениеПоСоглашению(ДокОбъект);
		ДоставкаОпределенаВДоговоре = ЭтоДоставкаНаНашСклад И ДоставкаОпределенаВДоговоре(ДокОбъект);
		
		РаспоряжениеПоДоговору = Не ЭтоДоговорСоглашение И ДоставкаОпределенаВДоговоре;
		
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы,
			ДокОбъект.СпособДоставки,
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"),
			РаспоряжениеПоСоглашению,
			РаспоряжениеПоДоговору);
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

// Перезаполняет реквизиты доставки при изменении реквизиты формы.
//
// Параметры:
//	ЭлементыФормы - ВсеЭлементыФормы - все элементы формы, в которой производятся изменения,
//	ДокОбъект - ДанныеФормыСтруктура, СправочникОбъект - объект, реквизиты которого используются при заполнении,
//	ПараметрыЗаполнения - Структура, Неопределено - параметры заполнения реквизитов доставки. 
//		См. ПараметрыЗаполненияРеквизитов.
//
Процедура ПриИзмененииПолучателяОтправителя(ЭлементыФормы, ДокОбъект, ПараметрыЗаполнения = Неопределено)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияРеквизитов();
	КонецЕсли;
	
	РеквизитыДоставки = РеквизитыДоставки(ДокОбъект);
	
	ПолучательОтправитель = РеквизитыДоставки.ПолучательОтправитель;
	
	ИмяЭлементаАдрес = ИмяЭлементаАдрес(ЭлементыФормы);
	ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, РеквизитыДоставки);
	Если ЗначениеЗаполнено(ПолучательОтправитель.Значение) Тогда
		
		ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, РеквизитыДоставки);
		Если ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Количество() > 0 Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора[0].Значение;
			РеквизитыДоставки.АдресДоставки = ПерваяСтруктураВСписке.АдресДоставки;
			РеквизитыДоставки.АдресДоставкиЗначенияПолей = ПерваяСтруктураВСписке.АдресДоставкиЗначенияПолей;
		КонецЕсли;
		
		ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы, РеквизитыДоставки);
		// Получим значения по статистике
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ИсточникСтатистики) Тогда
			СсылкаДляСтатистики = ПараметрыЗаполнения.ИсточникСтатистики.ПустаяСсылка();
		Иначе
			СсылкаДляСтатистики = РеквизитыДоставки.Ссылка;
		КонецЕсли;
		
		ОписаниеРеквизитов = Новый Структура;
		Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
		Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = ПолучательОтправитель.ИмяПоля;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Автор", СсылкаДляСтатистики.Метаданные()) Тогда
			Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
			Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
		КонецЕсли;
		ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "СпособДоставки", Параметры);
		РеквизитыДляОтбора = Новый Структура(ПолучательОтправитель.ИмяПоля, ПолучательОтправитель.Значение);
		ЗаполняемыеРеквизиты = ЗаполнениеОбъектовПоСтатистике.ПолучитьЗначенияРеквизитов(СсылкаДляСтатистики,
			ОписаниеРеквизитов, РеквизитыДляОтбора);
		
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.СпособДоставки) Тогда
			РеквизитыДоставки.СпособДоставки = ЗаполняемыеРеквизиты.СпособДоставки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.СпособДоставки) Тогда
			
			ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, РеквизитыДоставки);
			
			Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
					Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
				И ЗначениеЗаполнено(РеквизитыДоставки.ПеревозчикПартнер) Тогда
				ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, РеквизитыДоставки);
				ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыДоставки);
	
	РаспоряжениеПоСоглашению = ЭтоРаспоряжениеПоСоглашению(ДокОбъект);
	ЭтоДоговорСоглашение = ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками");
	
	ДоставкаОпределенаВДоговоре = ДоставкаОпределенаВДоговоре(ДокОбъект);
	
	РаспоряжениеПоДоговору = Не ЭтоДоговорСоглашение И ДоставкаОпределенаВДоговоре;
	
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы,
		ДокОбъект.СпособДоставки,
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"),
		РаспоряжениеПоСоглашению,
		РаспоряжениеПоДоговору);
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

// Добавляет в структуру РеквизитыШапки реквизиты доставки в зависимости от способа доставки,
// используется при вводе Реализации товаров и услуг на основании Заказов клиента.
//
// Параметры:
//	РеквизитыШапки - Структура - структура, в которую добавляются реквизиты, связанные с доставкой;
//	ВыборкаРеквизитыШапки - ВыборкаИзРезультатаЗапроса - выборка из результатов запроса, в которой содержатся 
//		данные по доставке.
//
Процедура ДополнитьРеквизитамиДоставкиДанныеЗаполнения(РеквизитыШапки,ВыборкаРеквизитыШапки) Экспорт
	
	РеквизитыШапки.Вставить("СпособДоставки",                        ВыборкаРеквизитыШапки.СпособДоставки);
	Если ВыборкаРеквизитыШапки.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз 
		ИЛИ ЗначениеЗаполнено(ВыборкаРеквизитыШапки.АдресДоставки) Тогда //наследуем, если заполнен АдресДоставки
		
		РеквизитыШапки.Вставить("АдресДоставки",                         ВыборкаРеквизитыШапки.АдресДоставки);
		РеквизитыШапки.Вставить("АдресДоставкиЗначенияПолей",            ВыборкаРеквизитыШапки.АдресДоставкиЗначенияПолей);
		
		Если ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
			Или ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			РеквизитыШапки.Вставить("ЗонаДоставки",                          ВыборкаРеквизитыШапки.ЗонаДоставки);
			РеквизитыШапки.Вставить("ВремяДоставкиС",                        ВыборкаРеквизитыШапки.ВремяДоставкиС);
			РеквизитыШапки.Вставить("ВремяДоставкиПо",                       ВыборкаРеквизитыШапки.ВремяДоставкиПо);
			РеквизитыШапки.Вставить("ДополнительнаяИнформацияПоДоставке",    ВыборкаРеквизитыШапки.ДополнительнаяИнформацияПоДоставке);
		КонецЕсли;
		Если ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
			Или ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			РеквизитыШапки.Вставить("ПеревозчикПартнер",                     ВыборкаРеквизитыШапки.ПеревозчикПартнер);
			Если ВыборкаРеквизитыШапки.ПеревозчикПартнер <> Справочники.Партнеры.ПустаяСсылка()
					И ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
				РеквизитыШапки.Вставить("АдресДоставкиПеревозчика",              ВыборкаРеквизитыШапки.АдресДоставкиПеревозчика);
				РеквизитыШапки.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", ВыборкаРеквизитыШапки.АдресДоставкиПеревозчикаЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// При изменении флага "По заказам" в накладной меняет видимость элементов управления доставкой, меняет способ доставки.
//
// Параметры:
//	ЭлементыФормы		 - ЭлементыФормы			- все элементы формы;
//	ДокОбъект			 - ДокументОбъект			- документ, в котором осуществляются изменения;
//	НакладнаяПоЗаказам	 - Булево					- Истина - документ является накладной по заказам.
//
Процедура ПриИзмененииФлагаПоЗаказам(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам) Экспорт
	
	Если НакладнаяПоЗаказам Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками")
			Или ДокОбъект.СпособДоставки <> Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект));
		КонецЕсли;
		УстановитьВидимостьЭлементовДоставки(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам);
	Иначе
		ПриЧтенииСозданииРаспоряженийНаСервере(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам);
	КонецЕсли;
	
КонецПроцедуры

// Подбирает из Заданий на перевозку значения последних реквизитов доставки по получателю или партнеру.
// Параметры:
//	ПолучательОтправитель - СправочникСсылка.Партнеры, СправочникСсылка.Склады - необязательный, если указан Перевозчик,
//	Перевозчик - СправочникСсылка.Партнеры - необязательный, если указан ПолучательОтправитель.
//
// Возвращаемое значение:
//	ТаблицаЗначений - содержит три последних набора реквизитов доставки по Партнеру или Перевозчику.
//		Колонки:
//		АдресДоставки,
//		АдресДоставкиЗначенияПолей,
//		ЗонаДоставки,
//		ВремяС,
//		ВремяПо,
//		ДополнительнаяИнформация.
//
Функция ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель = Неопределено, Перевозчик = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки,
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата,
	|	ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяС,
	|	ЗаданиеНаПеревозкуРаспоряжения.ВремяПо,
	|	ЗаданиеНаПеревозкуРаспоряжения.ДополнительнаяИнформация,
	|	ЗаданиеНаПеревозкуМаршрут.Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.АдресЗначенияПолей
	|ПОМЕСТИТЬ ВТ_ЗаданиеНаПеревозкуСтроки
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО (ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи)
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	|	И (ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель = &ПолучательОтправитель
	|			ИЛИ &ПолучательОтправитель = НЕОПРЕДЕЛЕНО)
	|	И (ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = &Перевозчик
	|			ИЛИ &Перевозчик = НЕОПРЕДЕЛЕНО
	|				И ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 3
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес КАК Адрес,
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
	|ИЗ
	|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|ГДЕ
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.Адрес,
	|	ЗаданиеНаПеревозкуМаршрут.Зона,
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Дата
	|ПОМЕСТИТЬ ВТ_МаршрутыСНужнымиАдресами
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ПО ВТ_ПоследниеАдреса.Адрес = ЗаданиеНаПеревозкуМаршрут.Адрес
	|ГДЕ
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.Адрес,
	|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихЗонПоАдресам
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
	|		ПО ВТ_ПоследниеАдреса.Адрес = ВТ_МаршрутыСНужнымиАдресами.Адрес
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдреса.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.Зона) КАК Зона,
	|	ВТ_ДатыПоследнихЗонПоАдресам.Адрес
	|ПОМЕСТИТЬ ВТ_ПоследниеЗоныПоАдресам
	|ИЗ
	|	ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПоследнихЗонПоАдресам КАК ВТ_ДатыПоследнихЗонПоАдресам
	|		ПО (ВТ_ДатыПоследнихЗонПоАдресам.Адрес = ВТ_МаршрутыСНужнымиАдресами.Адрес)
	|			И (ВТ_ДатыПоследнихЗонПоАдресам.Дата = ВТ_МаршрутыСНужнымиАдресами.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДатыПоследнихЗонПоАдресам.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.Адрес,
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи) КАК КлючСвязи
	|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязи
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.Адрес = ВТ_ПоследниеАдреса.Адрес)
	|			И (ВТ_ЗаданиеНаПеревозкуСтроки.Дата = ВТ_ПоследниеАдреса.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдреса.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи,
	|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
	|ИЗ
	|	ВТ_ПоследниеАдресаКлючиСвязи КАК ВТ_ПоследниеАдресаКлючиСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдресаКлючиСвязи.Адрес,
	|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес              КАК АдресДоставки,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ВТ_ПоследниеЗоныПоАдресам.Зона                 КАК ЗонаДоставки,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяС             КАК ВремяДоставкиС,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяПо            КАК ВремяДоставкиПо,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.ДополнительнаяИнформация КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок КАК ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
	|		ПО ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.КлючСвязи
	|			И ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.НомерСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеЗоныПоАдресам КАК ВТ_ПоследниеЗоныПоАдресам
	|		ПО (ВТ_ПоследниеЗоныПоАдресам.Адрес = ВТ_ЗаданиеНаПеревозкуСтроки.Адрес)
	|
	|ГДЕ
	|	ВЫРАЗИТЬ(ВТ_ЗаданиеНаПеревозкуСтроки.АдресЗначенияПолей КАК СТРОКА(10)) = """"
	|	ИЛИ
	|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>""
	|	ИЛИ
	|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресЗначенияПолей ПОДОБНО ""%}""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Дата УБЫВ,
	|	ВТ_ЗаданиеНаПеревозкуСтроки.Адрес";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПолучательОтправитель", ПолучательОтправитель);
	Запрос.УстановитьПараметр("Перевозчик", Перевозчик);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращает порядок доставки по получателю из задания на перевозку.
// Если получатель упоминается несколько раз - берется номер первого пункта,
// если получателя нет в задании, вместо пункта пишется ?
//
// Параметры:
//	ЗаданиеНаПеревозку	 - ДокументСсылка.ЗаданиеНаПеревозку - ссылка на документ задания на перевозку;
//	Получатель			 - ОпределяемыйТип.ОтправительПолучательДоставки - получатель груза.
//
// Возвращаемое значение:
//	Строка - порядок доставки в формате "%НомерПункта% из %КоличествоПунктов%".
//
Функция ПорядокДоставкиВЗаданииНаПеревозку(ЗаданиеНаПеревозку, Получатель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ЗаданиеНаПеревозкуМаршрут.НомерСтроки) КАК НомерСтроки,
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НомерПункта
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|		ПО ЗаданиеНаПеревозкуМаршрут.Ссылка = ЗаданиеНаПеревозкуРаспоряжения.Ссылка
	|			И ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи
	|ГДЕ
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка = &ЗаданиеНаПеревозку
	|	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &ЗаданиеНаПеревозку
	|	И ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель = &Получатель
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуМаршрут.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозку.КоличествоПунктов,
	|	ЕСТЬNULL(НомерПункта.НомерСтроки, 0) КАК НомерПункта
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомерПункта КАК НомерПункта
	|		ПО НомерПункта.Ссылка = ЗаданиеНаПеревозку.Ссылка
	|ГДЕ
	|	ЗаданиеНаПеревозку.Ссылка = &ЗаданиеНаПеревозку";
	
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПорядокДоставки = НСтр("ru = '%НомерПункта% из %КоличествоПунктов%'");	
		ПорядокДоставки = СтрЗаменить(ПорядокДоставки, "%НомерПункта%", ?(Выборка.НомерПункта = 0, "?", Формат(Выборка.НомерПункта,"ЧЦ=2; ЧВН=")));
		ПорядокДоставки = СтрЗаменить(ПорядокДоставки, "%КоличествоПунктов%", Формат(Выборка.КоличествоПунктов,"ЧЦ=2; ЧВН="));
	Иначе
		ПорядокДоставки = "";	
	КонецЕсли;
	
	Возврат ПорядокДоставки;
КонецФункции

// Проверяет, что для переданной складской операции предусмотрена доставка.
//
// Параметры:
//  СкладскаяОперация	 - ПеречислениеСсылка.СкладскиеОперации	 - складская операция.
// 
// Возвращаемое значение:
//  Булево - Истина - предусмотрена доставка для переданной складской операции.
//
Функция ЕстьДоставкаПоСкладскойОперации(СкладскаяОперация) Экспорт
	
	ТекстЗапроса = СкладыСервер.ТекстЗапросаСкладскаяОперацияТипДокумента() + " 
	|ВЫБРАТЬ
	|	СкладскаяОперацияТипДокумента.СкладскаяОперация
	|ИЗ
	|	СкладскаяОперацияТипДокумента КАК СкладскаяОперацияТипДокумента
	|
	|ГДЕ
	|	СкладскаяОперацияТипДокумента.СкладскаяОперация = &СкладскаяОперация
	|	И СкладскаяОперацияТипДокумента.Тип В (&ТипРаспоряжениеНаДоставку)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СкладскаяОперация", СкладскаяОперация); 
	Запрос.УстановитьПараметр("ТипРаспоряжениеНаДоставку", Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип.Типы());
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Возвращает значение коэффициента из константы, проверяет и выдает сообщение при незаполненности.
// 
// Возвращаемое значение:
//  Число - значение коэффициента.
//
Функция КоэффициентПересчетаВТонны() Экспорт
	
	Возврат НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
КонецФункции

// Возвращает значение коэффициента из константы, проверяет и выдает сообщение при незаполненности.
// Возвращаемое значение:
//		Число
//
Функция КоэффициентПересчетаВКубическиеМетры() Экспорт
	
	Возврат НоменклатураСервер.КоэффициентПересчетаВКубическиеМетры(Константы.ЕдиницаИзмеренияОбъема.Получить());
	
КонецФункции

// Перезаполняет список распоряжений на доставку на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обновить список распоряжений на доставку;
//	ОбновляемыеРаспоряжения - ТаблицаЗначений, Неопределено - фильтр для частичного перезаполнения списка только 
//		по переданным в таблице распоряжениям.
//
Процедура ОбновитьСписокРаспоряженийНаДоставку(Форма, ОбновляемыеРаспоряжения = Неопределено) Экспорт
	
	ДопустимоеОтклонениеПроцент = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	РаспоряженияНаДоставку 		= Форма.РаспоряженияНаДоставку;
	ТоварыРаспоряженийКДоставке = Форма.ТоварыРаспоряженийКДоставке;
	ОтборПоТипуИсполнителей 	= Форма.ОтборПоТипуИсполнителей;
	Зона 						= Форма.Зона;
	Склад 						= Форма.Склад;
	ДатаРаспоряжений 			= Форма.ДатаРаспоряжений;
	ЗонаГруппаИлиПустая 		= НЕ ЗначениеЗаполнено(Зона) ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Зона,"ЭтоГруппа");
	
	ВыборочноеОбновление = (ОбновляемыеРаспоряжения <> Неопределено);
	
	ВесОбъемРаспоряженийПоДатам = Новый ТаблицаЗначений;
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Вес", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Объем", ОбщегоНазначения.ОписаниеТипаЧисло(18,6));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	КешДобавляемыхСтрок = Новый Массив;
	
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы();
	ВесОбъем = Новый Структура;
	
	Если Не ВыборочноеОбновление Тогда
		ВесОбъем.Вставить("ИтогоВес", 0);
		ВесОбъем.Вставить("ИтогоОбъем",0);
		КоллекцияРаспоряжений.Очистить();
		ТоварыРаспоряженийКДоставке.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура("Склад, Распоряжение");
		
		Для Каждого Стр Из ОбновляемыеРаспоряжения Цикл
			
			// При выборочном обновлении сначала нужно удалить строки обновляемых распоряжений,
			// для этого воспользуемся списком товаров по распоряжениям.
			ПредыдущийИдентификатор = Неопределено;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Стр);
			
			НайденныеСтроки = ТоварыРаспоряженийКДоставке.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТовары Из НайденныеСтроки Цикл
				Идентификатор = СтрокаТовары.ИдентификаторВДеревеРаспоряжений;
				Если ПредыдущийИдентификатор = Идентификатор
					Или Не ЗначениеЗаполнено(Идентификатор) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРаспоряжение = РаспоряженияНаДоставку.НайтиПоИдентификатору(Идентификатор);
				Если СтрокаРаспоряжение <> Неопределено Тогда
					Если ЗонаГруппаИлиПустая Тогда
						ТекущаяВетка = СтрокаРаспоряжение.ПолучитьРодителя();
						КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
						// Если удаляем последний элемент в ветке, удалим родителя.
						Если КоллекцияТекущаяВетка.Количество() = 1 Тогда
							КоллекцияРаспоряжений.Удалить(ТекущаяВетка);
						Иначе
							ТекущаяВетка.Вес = ТекущаяВетка.Вес - СтрокаРаспоряжение.Вес;
							ТекущаяВетка.Объем = ТекущаяВетка.Объем - СтрокаРаспоряжение.Объем;
							КоллекцияТекущаяВетка.Удалить(СтрокаРаспоряжение);
						КонецЕсли;
					Иначе
						КоллекцияРаспоряжений.Удалить(СтрокаРаспоряжение);
					КонецЕсли;
				КонецЕсли;
				ТоварыРаспоряженийКДоставке.Удалить(СтрокаТовары);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураЗадание = Новый Структура("ЗаданиеНаПеревозку", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураЗадание, Форма);
	
	Запрос = Новый Запрос;
	ИсходящаяДоставка = Форма.ВидДоставки = Перечисления.ВидыДоставки.СоСклада;
	
	ЕстьОрдерныйНаОтгрузкуСклад      = Ложь;
	ЕстьНеОрдерныйНаОтгрузкуСклад    = Ложь;
	ЕстьОрдерныйНаПоступлениеСклад   = Ложь;
	ЕстьНеОрдерныйНаПоступлениеСклад = Ложь;
	
	Если ИсходящаяДоставка Тогда
		ЕстьОрдерныйНаОтгрузкуСклад = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(Склад);
		ЕстьНеОрдерныйНаОтгрузкуСклад = СкладыСервер.ЕстьНеОрдерныйНаОтгрузкуСклад(Склад);
	Иначе
		ЕстьОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад(Склад);
		ЕстьНеОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьНеОрдерныйНаПоступлениеСклад(Склад);
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если ИсходящаяДоставка Тогда
		
		ТекстЗапроса = ТекстЗапросаРаспоряженияНаДоставку(ВыборочноеОбновление,
			ЕстьОрдерныйНаОтгрузкуСклад,
			ЕстьНеОрдерныйНаОтгрузкуСклад,
			Истина);
		
		Запрос.УстановитьПараметр("СпособыДоставкиНашимиСиламиКПолучателю", СпособыДоставкиНашимиСиламиКПолучателю());
		Запрос.УстановитьПараметр("СпособыДоставкиПеревозчикомКПолучателю", СпособыДоставкиПеревозчикомКПолучателю());
		
	Иначе
		
		ТекстЗапроса = ТекстЗапросаРаспоряженияНаДоставку(ВыборочноеОбновление,
			ЕстьОрдерныйНаПоступлениеСклад,
			ЕстьНеОрдерныйНаПоступлениеСклад,
			Ложь);
		
		Запрос.УстановитьПараметр("ДатаОтбора", НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("СпособыДоставкиНашимиСиламиОтОтправителя", СпособыДоставкиНашимиСиламиОтОтправителя());
		Запрос.УстановитьПараметр("СпособыДоставкиПеревозчикомОтОтправителя", СпособыДоставкиПеревозчикомОтОтправителя());
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	БезОтбораПоЗоне = Зона = Справочники.ЗоныДоставки.ПустаяСсылка();
	
	Запрос.УстановитьПараметр("Зона",                              Зона);
	Запрос.УстановитьПараметр("Склад",                             Склад);
	Запрос.УстановитьПараметр("БезОтбораПоЗоне",                   БезОтбораПоЗоне);
	Запрос.УстановитьПараметр("ОбновляемыеРаспоряжения",           ОбновляемыеРаспоряжения);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуПодбор",          СтруктураЗадание.ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуПустаяСсылка",    Документы.ЗаданиеНаПеревозку.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусЗаданияЗакрыто",              Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	Запрос.УстановитьПараметр("ОтборПоТипуИсполнителей",           ОтборПоТипуИсполнителей);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса",                 ТекущаяДатаСеанса());
	
	Пакет = Запрос.ВыполнитьПакет();
	РезультатЗапроса = Пакет[Пакет.ВГраница()-1]; // РезультатЗапроса
	ДвиженияКРаспределению = РезультатЗапроса.Выгрузить();
	
	ПоляОтбораДвижений = Новый Массив();
	ПоляОтбораДвижений.Добавить("Распоряжение");
	ПоляОтбораДвижений.Добавить("Склад");
	ПоляОтбораДвижений.Добавить("Номенклатура");
	ПоляОтбораДвижений.Добавить("Характеристика");
	ПоляОтбораДвижений.Добавить("Назначение");
	Если ДвиженияКРаспределению.Колонки.Найти("Серия") <> Неопределено Тогда
		ПоляОтбораДвижений.Добавить("Серия");
	КонецЕсли;
	ПоляОтбораДвиженийКРаспределению = СтрСоединить(ПоляОтбораДвижений, ",");
	
	Если ИсходящаяДоставка
		Или ЕстьОрдерныйНаПоступлениеСклад Тогда
		ДвиженияКРаспределению.Индексы.Добавить(ПоляОтбораДвиженийКРаспределению);
	КонецЕсли;
	
	РезультатЗапроса = Пакет[Пакет.ВГраница()]; // РезультатЗапроса
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Зона") Цикл
		
		Если ВыборочноеОбновление Тогда
			
		ИначеЕсли ЗонаГруппаИлиПустая Тогда
			ТекущаяВетка = КоллекцияРаспоряжений.Добавить();
			ТекущаяВетка.Адрес = Строка(Выборка.Зона);
			ТекущаяВетка.Зона = Выборка.Зона;
			КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
		Иначе
			КоллекцияТекущаяВетка = КоллекцияРаспоряжений;
		КонецЕсли;
		
		ВесПоЗоне = 0;
		ОбъемПоЗоне = 0;
		
		Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
			
			Если ВыборочноеОбновление Тогда
				СтруктураЗонаАдрес = Новый Структура("Зона, Адрес");
				ЗаполнитьЗначенияСвойств(СтруктураЗонаАдрес, Выборка);
				ПозицияДляВставки = ПолучитьПозициюДляВставки(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая, СтруктураЗонаАдрес);
				Если ЗонаГруппаИлиПустая Тогда
					ТекущаяВетка = КоллекцияРаспоряжений[ПозицияДляВставки.Зона];
					КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
				Иначе
					КоллекцияТекущаяВетка = КоллекцияРаспоряжений;
				КонецЕсли;
				ПозицияДляВставки = ПозицияДляВставки.Распоряжение;
			КонецЕсли;
			
			Если Выборка.ВидРаспоряжения = Тип("ДокументСсылка.ПоручениеЭкспедитору") Тогда
				
				Если ЗначениеЗаполнено(ДатаРаспоряжений)
					И ЗначениеЗаполнено(Выборка.Дата)
					И НачалоДня(Выборка.Дата) > ДатаРаспоряжений Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыборочноеОбновление Тогда
					СтрокаРаспоряжение = КоллекцияТекущаяВетка.Вставить(ПозицияДляВставки);
					ПозицияДляВставки = ПозицияДляВставки + 1;
				Иначе
					СтрокаРаспоряжение = КоллекцияТекущаяВетка.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
				СтрокаРаспоряжение.ПолучательОтправительПредставление = Выборка.ПолучательОтправитель;
				СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС, Выборка.ВремяПо);
				
				СтрокаДляХраненияИдентификатора = ТоварыРаспоряженийКДоставке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляХраненияИдентификатора, Выборка);
				СтрокаДляХраненияИдентификатора.ИдентификаторВДеревеРаспоряжений = СтрокаРаспоряжение.ПолучитьИдентификатор();
				
				Продолжить;
				
			КонецЕсли;
			
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				
				Номенклатура   = Неопределено;
				Характеристика = Неопределено;
				Назначение     = Неопределено;
				Серия          = Неопределено;
				
				ВесОбъемРаспоряженийПоДатам.Очистить();
				КешДобавляемыхСтрок.Очистить();
				ПотребностьПоТовару = 0;
				ПроверитьОтклонение = Ложь;
				
				Пока Выборка.Следующий() Цикл
					
					Если Номенклатура      <> Выборка.Номенклатура
						Или Характеристика <> Выборка.Характеристика
						Или Назначение     <> Выборка.Назначение
						Или Серия          <> Выборка.Серия Тогда
						// перешли к другому товару
						
						Номенклатура   = Выборка.Номенклатура;
						Характеристика = Выборка.Характеристика;
						Назначение     = Выборка.Назначение;
						Серия          = Выборка.Серия;
						
						Если ПроверитьОтклонение Тогда
							ДопустимоеОтклонение = ДопустимоеОтклонениеПроцент/100 * ПотребностьПоТовару;
							// Не нужно выводить строки с мерным товаром, если остаток к доставке не превысил допустимое отклонение;
							Для Каждого Стр Из КешДобавляемыхСтрок Цикл
								Если Стр.Количество <= ДопустимоеОтклонение Тогда
									ВесОбъемРаспоряженийПоДатам.Удалить(Стр);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						КешДобавляемыхСтрок.Очистить();
						ПотребностьПоТовару = 0;
						
						ПроверитьОтклонение = Выборка.МернаяЕдиницаИзмерения И ДопустимоеОтклонениеПроцент > 0;
						
					КонецЕсли;
					
					Если ИсходящаяДоставка Тогда
						
						ОсталосьРаспределить = Выборка.Количество;
						
						ПараметрыОтбора = Новый Структура(ПоляОтбораДвиженийКРаспределению);
						ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
						ДетальныеДанные = ДвиженияКРаспределению.НайтиСтроки(ПараметрыОтбора);
						Для Каждого СтрокаДетальныхДанных Из ДетальныеДанные Цикл
							Списываем = Мин(ОсталосьРаспределить, СтрокаДетальныхДанных.Количество);
							ОсталосьРаспределить = ОсталосьРаспределить - Списываем;
							СтрокаДетальныхДанных.Количество = СтрокаДетальныхДанных.Количество - Списываем;
							
							Если ОсталосьРаспределить = 0 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ОсталосьРаспределить > 0 Тогда
							ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка);
							ТекущаяСтрокаВесОбъем.Количество = ОсталосьРаспределить;
							ТекущаяСтрокаВесОбъем.Вес = ОсталосьРаспределить * (Выборка.Вес / Выборка.Количество);
							ТекущаяСтрокаВесОбъем.Объем = ОсталосьРаспределить * (Выборка.Объем / Выборка.Количество);
							
							КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
							ПотребностьПоТовару = ПотребностьПоТовару + ОсталосьРаспределить;
						КонецЕсли;
						
					ИначеЕсли Не ЕстьОрдерныйНаПоступлениеСклад Тогда
						
						ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка);
						КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
						ПотребностьПоТовару = ПотребностьПоТовару + Выборка.Количество;
						
					Иначе
						
						ПараметрыОтбора = Новый Структура(ПоляОтбораДвиженийКРаспределению);
						ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
						ДетальныеДанные = ДвиженияКРаспределению.НайтиСтроки(ПараметрыОтбора);
						
						ОсталосьРаспределить = Выборка.Количество;
						// Распределение товаров по датам поступления;
						Для Каждого СтрокаДетальныхДанных Из ДетальныеДанные Цикл
							
							Списываем = Мин(ОсталосьРаспределить, СтрокаДетальныхДанных.Количество);
							ОсталосьРаспределить = ОсталосьРаспределить - Списываем;
							
							ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка,,"Количество,Вес,Объем");
							ТекущаяСтрокаВесОбъем.Дата = СтрокаДетальныхДанных.Период;
							ТекущаяСтрокаВесОбъем.Количество = Списываем;
							ТекущаяСтрокаВесОбъем.Вес = Списываем * СтрокаДетальныхДанных.Вес / СтрокаДетальныхДанных.Количество;
							ТекущаяСтрокаВесОбъем.Объем = Списываем * СтрокаДетальныхДанных.Объем / СтрокаДетальныхДанных.Количество;
							КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
							
							Если ОсталосьРаспределить <= 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Если ОсталосьРаспределить > 0 Тогда
							ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка,,"Количество,Вес,Объем");
							ТекущаяСтрокаВесОбъем.Дата = НачалоДня(ТекущаяДатаСеанса());
							ТекущаяСтрокаВесОбъем.Количество = ОсталосьРаспределить;
							ТекущаяСтрокаВесОбъем.Вес = ОсталосьРаспределить 	* Выборка.Вес 	/ Выборка.Количество;
							ТекущаяСтрокаВесОбъем.Объем = ОсталосьРаспределить 	* Выборка.Объем / Выборка.Количество;
							КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
						КонецЕсли;
						ПотребностьПоТовару = ПотребностьПоТовару + Выборка.Количество;
					КонецЕсли;
				КонецЦикла;
				
				// Нужно проверить последний добавленный товар распоряжения;
				Если ПроверитьОтклонение Тогда
					ДопустимоеОтклонение = ДопустимоеОтклонениеПроцент/100 * ПотребностьПоТовару;
					// Не нужно выводить строки с мерным товаром, если остаток к доставке не превысил допустимое отклонение;
					Для Каждого Стр Из КешДобавляемыхСтрок Цикл
						Если Стр.Количество <= ДопустимоеОтклонение Тогда
							ВесОбъемРаспоряженийПоДатам.Удалить(Стр);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ВесОбъемРаспоряженийПоДатам.Сортировать("Дата");
				
				ТекущаяДата = Неопределено;
				
				Для Каждого СтрокаВесОбъемДата Из ВесОбъемРаспоряженийПоДатам Цикл
					
					Если ЗначениеЗаполнено(ДатаРаспоряжений)
						И СтрокаВесОбъемДата.Дата > ДатаРаспоряжений Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаТовар = ТоварыРаспоряженийКДоставке.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовар, Выборка);
					ЗаполнитьЗначенияСвойств(СтрокаТовар, СтрокаВесОбъемДата);
					
					Если ТекущаяДата <> СтрокаВесОбъемДата.Дата Тогда
						
						ТекущаяДата = СтрокаВесОбъемДата.Дата;
						
						Если ВыборочноеОбновление Тогда
							СтрокаРаспоряжение = КоллекцияТекущаяВетка.Вставить(ПозицияДляВставки);
							ПозицияДляВставки = ПозицияДляВставки + 1;
						Иначе
							СтрокаРаспоряжение = КоллекцияТекущаяВетка.Добавить();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
						
						Если СтрокаРаспоряжение.Свойство("АдресДоставкиЗначенияПолей") Тогда
							СтрокаРаспоряжение.АдресДоставкиЗначенияПолей = Выборка.АдресЗначенияПолей;
						КонецЕсли;
						
						СтрокаРаспоряжение.Дата = ТекущаяДата;
						СтрокаРаспоряжение.Вес = 0;
						СтрокаРаспоряжение.Объем = 0;
						
						СтрокаРаспоряжение.ПолучательОтправительПредставление = ДоставкаТоваровКлиентСервер.ПредставлениеПолучателяОтправителя(Выборка.ПолучательОтправитель, Выборка.Перевозчик, Форма.ВидДоставки);
						СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС, Выборка.ВремяПо);
						
						ИдентификаторВДеревеРаспоряжений = СтрокаРаспоряжение.ПолучитьИдентификатор();
						
					КонецЕсли;
					
					СтрокаТовар.ИдентификаторВДеревеРаспоряжений = ИдентификаторВДеревеРаспоряжений;
					
					СтрокаРаспоряжение.Вес = СтрокаРаспоряжение.Вес + СтрокаВесОбъемДата.Вес;
					СтрокаРаспоряжение.Объем = СтрокаРаспоряжение.Объем + СтрокаВесОбъемДата.Объем;
					
					ВесПоЗоне   = ВесПоЗоне   + СтрокаВесОбъемДата.Вес;
					ОбъемПоЗоне = ОбъемПоЗоне + СтрокаВесОбъемДата.Объем;
					
				КонецЦикла;
				
			КонецЦикла; // Склад
		КонецЦикла; // Распоряжение
		
		Если Не ВыборочноеОбновление Тогда
			ВесОбъем.ИтогоВес = ВесОбъем.ИтогоВес + ВесПоЗоне;
			ВесОбъем.ИтогоОбъем = ВесОбъем.ИтогоОбъем  + ОбъемПоЗоне;
		КонецЕсли;
		
		Если ЗонаГруппаИлиПустая Тогда
			
			Если КоллекцияТекущаяВетка.Количество() = 0 Тогда
				КоллекцияРаспоряжений.Удалить(ТекущаяВетка);
			Иначе
				Если ВыборочноеОбновление Тогда
					ТекущаяВетка.Вес   = ТекущаяВетка.Вес + ВесПоЗоне;
					ТекущаяВетка.Объем = ТекущаяВетка.Объем + ОбъемПоЗоне;
				Иначе
					ТекущаяВетка.Вес   = ВесПоЗоне;
					ТекущаяВетка.Объем = ОбъемПоЗоне;
				КонецЕсли;
				ТекущаяВетка.ОформлениеСтроки = 5;
				ТекущаяВетка.Зона = Выборка.Зона;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла; // Зона
	
	ЗаполнитьЗначенияСвойств(Форма, ВесОбъем);
	ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая);
	
КонецПроцедуры

// Заполняет признаки оформления в дереве распоряжений на доставку.
// Параметры:
//	РаспоряженияНаДоставку - ДанныеФормыДерево - распоряжения на доставку,
//  ЗонаГруппаИлиПустая - Булево - признак того, что в отборе по зоне доставки установлена группа или этот отбор не заполнен.
//
Процедура ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая) Экспорт
	
	ВерхниеСтрокиДерева = РаспоряженияНаДоставку.ПолучитьЭлементы();
	Если ЗонаГруппаИлиПустая Тогда
		Для каждого СтрокаЗонаДоставки Из ВерхниеСтрокиДерева Цикл
			ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(СтрокаЗонаДоставки.ПолучитьЭлементы())
		КонецЦикла;
	Иначе
		ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(ВерхниеСтрокиДерева)
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет задание на перевозку в соответствии со связанными расходными ордерами на товары.
//
// Параметры:
//  ЗаданиеОбъект	 - ДокументОбъект.ЗаданиеНаПеревозку - документ задания на перевозку;
//  ТоварыКДоставке	 - ДанныеФормыКоллекция, Неопределено	 - коллекция с данными по доставляемым товарам.
// 
// Возвращаемое значение:
//  Булево - признак корректного перезаполнения.
//
Функция ПерезаполнитьЗаданиеНаПеревозкуПоРасходнымОрдерам(ЗаданиеОбъект, ТоварыКДоставке = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("ЕстьИзменения, ");
	
	Запрос = Новый Запрос(ТекстЗапросаЗаполненияЗаданияНаПеревозкуПоРасходнымОрдерам());
	Запрос.УстановитьПараметр("Ссылка", ЗаданиеОбъект.Ссылка);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуРаспоряжения", ЗаданиеОбъект.Распоряжения.Выгрузить());
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуМаршрут", ЗаданиеОбъект.Маршрут.Выгрузить());
	Запрос.УстановитьПараметр("ДатаВремяРейсаПланС", ЗаданиеОбъект.ДатаВремяРейсаПланС);
	СпособыДоставки = Новый Массив;
	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	КонецЕсли;
	Запрос.УстановитьПараметр("СпособыДоставки", СпособыДоставки);
	Запрос.УстановитьПараметр("ДоставкаСиламиПеревозчикаПоАдресу", Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	
	Результат = Запрос.ВыполнитьПакет();
	ВГраница = Результат.ВГраница();
	
	ЕстьИзменения = Ложь;
	
	// Изменяем
	Выборка = Результат[ВГраница-2].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжений = ЗаданиеОбъект.Распоряжения[Выборка.НомерСтроки - 1];
		СтрокаМаршрута = ЗаданиеОбъект.Маршрут[Выборка.МаршрутНомерСтроки - 1];
		СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + (Выборка.Вес - СтрокаРаспоряжений.Вес);
		СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + (Выборка.Объем - СтрокаРаспоряжений.Объем);
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжений, Выборка);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Удаляем строки распоряжений
	// Выборка упорядочена по убыванию номеров строк распоряжений.
	Выборка = Результат[ВГраница-4].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжений = ЗаданиеОбъект.Распоряжения[Выборка.НомерСтроки - 1];
		СтрокаМаршрута = ЗаданиеОбъект.Маршрут[Выборка.МаршрутНомерСтроки - 1];
		СтрокаМаршрута.Вес = СтрокаМаршрута.Вес - СтрокаРаспоряжений.Вес;
		СтрокаМаршрута.Объем = СтрокаМаршрута.Объем - СтрокаРаспоряжений.Объем;
		ЗаданиеОбъект.Распоряжения.Удалить(Выборка.НомерСтроки - 1);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Удаляем пункты маршрута
	// Выборка упорядочена по убыванию номеров строк маршрута.
	Выборка = Результат[ВГраница-3].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаданиеОбъект.Маршрут.Удалить(Выборка.МаршрутНомерСтроки - 1);
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Добавляем новые
	Выборка = Результат[ВГраница-1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРаспоряжений = ЗаданиеОбъект.Распоряжения.Добавить();
		СтрокаМаршрута = ДобавитьИзменитьПунктПоРеквизитамДоставки(ЗаданиеОбъект.Маршрут, Выборка, ЗаданиеОбъект.ДатаВремяРейсаПланС);
		ЗаполнитьЗначенияСвойств(СтрокаРаспоряжений, Выборка);
		СтрокаРаспоряжений.КлючСвязи = СтрокаМаршрута.КлючСвязи;
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	ТаблицаТоварыКДоставке = Результат[ВГраница].Выгрузить();
	// Заполняем ТоварыКДоставке
	Если ТоварыКДоставке <> Неопределено Тогда
		
		ТоварыКДоставке.Загрузить(ТаблицаТоварыКДоставке);
		
	Иначе
		
		ЗаданиеОбъект.ДополнительныеСвойства.Вставить("ТоварыКДоставке", ТаблицаТоварыКДоставке);
		
	КонецЕсли;
	
	Для Каждого Стр Из ЗаданиеОбъект.Распоряжения Цикл
		Стр.ДоставляетсяПолностью = Ложь;
	КонецЦикла;
	ЗаполнитьПризнакДоставляетсяПолностью(ТаблицаТоварыКДоставке, ЗаданиеОбъект.Распоряжения);
	
	Возврат ЕстьИзменения;
	
КонецФункции

// Добавляет или изменяет пункт доставки в соответствии в реквизитами доставки распоряжения на доставку.
//
// Параметры:
//  КоллекцияМаршрут	 - ДанныеФормыКоллекция - коллекция, в которую добавляем пункт;
//  РеквизитыДоставки	 - Структура, ВыборкаИзРезультатаЗапроса, ДанныеФормыЭлементДерева	 - со свойствами:
//  	* Адрес - Строка - адрес доставки;
//  	* Вес - Число - вес груза;
//  	* Объем - Число - объем груза.
//  ДатаВремяРейсаПланС	 - Дата - дата планового начала рейса.
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементДерева, ДанныеФормыЭлементКоллекции - строка-пункт доставки. Содержит в том числе:
//  	* Ссылка - ДокументСсылка.ЗаданиеНаПеревозку
//
Функция ДобавитьИзменитьПунктПоРеквизитамДоставки(КоллекцияМаршрут, РеквизитыДоставки, ДатаВремяРейсаПланС) Экспорт
	
	СтруктураРеквизиты = Новый Структура("Адрес, АдресДоставки, АдресЗначенияПолей, Зона, ЗонаДоставки, ДополнительнаяИнформация, ДополнительнаяИнформацияПоДоставке, Вес, Объем, ВремяС, ВремяПо");
	ЗаполнитьЗначенияСвойств(СтруктураРеквизиты, РеквизитыДоставки);
	СтруктураРеквизиты.Адрес = ?(ЗначениеЗаполнено(СтруктураРеквизиты.АдресДоставки),СтруктураРеквизиты.АдресДоставки, СтруктураРеквизиты.Адрес);
	СтруктураРеквизиты.Зона = ?(ЗначениеЗаполнено(СтруктураРеквизиты.ЗонаДоставки),СтруктураРеквизиты.ЗонаДоставки, СтруктураРеквизиты.Зона);
	СтруктураРеквизиты.ДополнительнаяИнформация = ?(ЗначениеЗаполнено(СтруктураРеквизиты.ДополнительнаяИнформацияПоДоставке),СтруктураРеквизиты.ДополнительнаяИнформацияПоДоставке, СтруктураРеквизиты.ДополнительнаяИнформация);
	
	АдресСравнения = Врег(СокрЛП(СтруктураРеквизиты.Адрес));
	АдресСравнения = СтрЗаменить(АдресСравнения," ","");
	
	Для Каждого СтрокаМаршрута Из КоллекцияМаршрут Цикл
		
		АдресСравненияМаршрут = СтрЗаменить(Врег(СокрЛП(СтрокаМаршрута.Адрес))," ","");
					
		Если АдресСравнения = АдресСравненияМаршрут Тогда
			
			СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + СтруктураРеквизиты.Вес;
			СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + СтруктураРеквизиты.Объем;
			СтрокаМаршрута.ДополнительнаяИнформация = ДополнитьТекстРаспоряжениемИДопИнфо(СтрокаМаршрута.ДополнительнаяИнформация,
				СтруктураРеквизиты.ДополнительнаяИнформация,РеквизитыДоставки.Распоряжение);
				
			Возврат СтрокаМаршрута;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаМаршрута = КоллекцияМаршрут.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаМаршрута, СтруктураРеквизиты);
	СтрокаМаршрута.КлючСвязи = Новый УникальныйИдентификатор;
	
	СтрокаМаршрута.ДополнительнаяИнформация = ДополнитьТекстРаспоряжениемИДопИнфо("",
				СтруктураРеквизиты.ДополнительнаяИнформация,РеквизитыДоставки.Распоряжение);
	
	Если КоллекцияМаршрут.Количество() = 1 Тогда
		
		СтрокаМаршрута.ВремяС = ДатаВремяРейсаПланС;
		СтрокаМаршрута.ВремяПо = СтрокаМаршрута.ВремяС;
		
	Иначе
		
		СтрокаМаршрута.ВремяС = КоллекцияМаршрут[КоллекцияМаршрут.Индекс(СтрокаМаршрута) - 1].ВремяПо;
		СтрокаМаршрута.ВремяПо = СтрокаМаршрута.ВремяС;
	
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияМаршрут) = Тип("ДанныеФормыКоллекция") Тогда
		СтрокаМаршрута.ВремяСБезДаты  = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрута.ВремяС);
		СтрокаМаршрута.ВремяПоБезДаты = ДоставкаТоваровКлиентСервер.ВремяБезДаты(СтрокаМаршрута.ВремяПо);
	КонецЕсли;
	
	Возврат СтрокаМаршрута;
	
КонецФункции

// Рассчитывает и возвращает максимальное время планируемого окончания доставки по пунктам.
//
// Параметры:
//	Объект - ДокументОбъект.ЗаданиеНаПеревозку, ДанныеФормыСтруктура - документ задания на перевозку.
//
// Возвращаемое значение:
//	Дата - время окончания доставки по пунктам.
//
Функция МаксимальноеВремяПо(Объект) Экспорт
	
	Если Объект.Маршрут.Количество() <> 0 Тогда
		ТаблицаМаршрута = Объект.Маршрут.Выгрузить();
		ТаблицаМаршрута.Сортировать("ВремяПо Убыв");
		
		Возврат Макс(Объект.ДатаВремяРейсаПланС, ТаблицаМаршрута[0].ВремяПо);
	Иначе
		Возврат Объект.ДатаВремяРейсаПланС;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу значений с колонками, скопированными из переданной коллекции.
//
// Параметры:
//  Коллекция	 - ДанныеФормыДерево, ДанныеФормыКоллекция, ТаблицаЗначений	 - источник данных, колонки которого
//  	необходимо копировать.
//  ИменаКолонок - Строка													 - имена копируемых колонок, перечисленные через запятую.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - скопированная таблица.
//
Функция СкопироватьКолонкиКоллекции(Коллекция, ИменаКолонок) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ДанныеФормыДерево") Тогда
		ЭлементыДерева = Коллекция.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() > 0 Тогда
			СтрокаДляКопированияТипов = ЭлементыДерева[0];
		Иначе
			КоллекцияДляКопирования = ДанныеФормыВЗначение(Коллекция, Тип("ДеревоЗначений")).Строки; // ДеревоЗначений, ТаблицаЗначений
			СтрокаДляКопированияТипов = КоллекцияДляКопирования.Добавить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекция") Тогда
		Если Коллекция.Количество() > 0 Тогда
			СтрокаДляКопированияТипов = Коллекция[0];
		Иначе
			Возврат ДанныеФормыВЗначение(Коллекция, Тип("ТаблицаЗначений"));
		КонецЕсли;
	Иначе // ТаблицаЗначений
		Возврат Коллекция.СкопироватьКолонки();
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура(ИменаКолонок);
	ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаДляКопированияТипов);
	
	Таблица = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив(1);
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если КлючИЗначение.Ключ = "Распоряжение" Тогда
			Таблица.Колонки.Добавить(КлючИЗначение.Ключ, Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип);
		ИначеЕсли  КлючИЗначение.Ключ = "ПолучательОтправитель" Тогда
			Таблица.Колонки.Добавить(КлючИЗначение.Ключ, Метаданные.ОпределяемыеТипы.ОтправительПолучательДоставки.Тип);
		Иначе
			МассивТипов[0] = ТипЗнч(КлючИЗначение.Значение);
			Таблица.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

// Добавляет или замещает записи в регистре сведений ТоварыКДоставке по заданию на перевозку.
//
// Параметры:
//	ТоварыРаспоряжений - ТаблицаЗначений, ДанныеФормыКоллекция - источник данных для заполнения;
//	ТЧРаспоряжения - ДанныеФормыКоллекция - табличная часть с распоряжениями;
//	ЗаданиеНаПеревозку - ДокументСсылка.ЗаданиеНаПеревозку - ссылка на документ задания на перевозку.
//
Процедура ЗаписатьТоварыКДоставке(ТоварыРаспоряжений, ТЧРаспоряжения, ЗаданиеНаПеревозку) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	ИСТИНА КАК ВсеТовары
	|ПОМЕСТИТЬ ПолностьюДоставляемыеРаспоряжения
	|ИЗ
	|	&ПолностьюДоставляемыеРаспоряжения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ПОМЕСТИТЬ ВТТоварыЗадания
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТоварыЗадания.Распоряжение,
	|	ВТТоварыЗадания.Склад,
	|	ВТТоварыЗадания.ВсеТовары
	|ПОМЕСТИТЬ РаспоряженияЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК ВТТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия,
	|	СУММА(Т.Количество) КАК Количество,
	|	МАКСИМУМ(Т.ВсеТовары) КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|		ТоварыКДоставке.Склад КАК Склад,
	|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставке.Характеристика КАК Характеристика,
	|		ТоварыКДоставке.Назначение КАК Назначение,
	|		ТоварыКДоставке.Серия КАК Серия,
	|		ТоварыКДоставке.Количество КАК Количество,
	|		1 КАК СчетИзмененныхСтрок
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|	ГДЕ
	|		ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыЗадания.Распоряжение,
	|		ТоварыЗадания.Склад,
	|		ТоварыЗадания.Номенклатура,
	|		ТоварыЗадания.Характеристика,
	|		ТоварыЗадания.Назначение,
	|		ТоварыЗадания.Серия,
	|		-ТоварыЗадания.Количество,
	|		-1
	|	ИЗ
	|		ТоварыЗадания КАК ТоварыЗадания) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия,
	|	Т.Номенклатура,
	|	Т.Склад
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Т.Количество) <> 0
	|		ИЛИ СУММА(Т.СчетИзмененныхСтрок) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеРаспоряжения.Распоряжение,
	|	ИзмененныеРаспоряжения.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряженияСвернутые
	|ИЗ
	|	ИзмененныеРаспоряжения КАК ИзмененныеРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ИзмененныеРаспоряженияСвернутые.Распоряжение,
	|	ИзмененныеРаспоряженияСвернутые.Склад,
	|	ТоварыЗадания.Номенклатура,
	|	ТоварыЗадания.Характеристика,
	|	ТоварыЗадания.Назначение,
	|	ТоварыЗадания.Серия,
	|	ТоварыЗадания.Количество,
	|	ЕСТЬNULL(ПолностьюДоставляемыеРаспоряжения.ВсеТовары, ТоварыЗадания.ВсеТовары) КАК ВсеТовары,
	|	ТоварыЗадания.ПолучательОтправитель,
	|	ВЫБОР
	|		КОГДА ТоварыЗадания.Распоряжение ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ИзмененныеРаспоряженияСвернутые КАК ИзмененныеРаспоряженияСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ТоварыЗадания.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ТоварыЗадания.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПолностьюДоставляемыеРаспоряжения КАК ПолностьюДоставляемыеРаспоряжения
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ПолностьюДоставляемыеРаспоряжения.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ПолностьюДоставляемыеРаспоряжения.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыЗадания.Распоряжение,
	|	ТоварыЗадания.Склад";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ПолностьюДоставляемыеРаспоряжения",
		ТЧРаспоряжения.Выгрузить(Новый Структура("ДоставляетсяПолностью", Истина), "Распоряжение,Склад"));
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыРаспоряжений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			
			НаборЗаписейУдалить = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписейУдалить.Отбор.Склад.Установить(Выборка.Склад);
			НаборЗаписейУдалить.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			НаборЗаписейУдалить.Отбор.Номенклатура.Установить(Справочники.Номенклатура.ПустаяСсылка());
			НаборЗаписейУдалить.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			НаборЗаписейУдалить.Отбор.Назначение.Установить(Справочники.Назначения.ПустаяСсылка());
			НаборЗаписейУдалить.Отбор.Серия.Установить(Справочники.СерииНоменклатуры.ПустаяСсылка());
			НаборЗаписейУдалить.Записать();
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
				
				НаборЗаписейУдалить = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
				НаборЗаписейУдалить.Отбор.Склад.Установить(Выборка.Склад);
				НаборЗаписейУдалить.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
				НаборЗаписейУдалить.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписейУдалить.Отбор.Характеристика.Установить(Выборка.Характеристика);
				НаборЗаписейУдалить.Отбор.Назначение.Установить(Выборка.Назначение);
				НаборЗаписейУдалить.Отбор.Серия.Установить(Выборка.Серия);
				НаборЗаписейУдалить.Записать();
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(ЗаданиеНаПеревозку);
			НаборЗаписей.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			Если Не Выборка.Удалить Тогда
				Если Выборка.ВсеТовары Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка,"ЗаданиеНаПеревозку,ПолучательОтправитель,Склад,Распоряжение,ВсеТовары");
				Иначе
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает, полностью ли доставляется распоряжение по складу и заполняет соответствующий признак.
//
// Параметры:
//	ТоварыРаспоряжений - ТаблицаЗначений - товары распоряжений на доставку;
//	ТЧРаспоряжения - ДанныеФормыКоллекция - табличная часть с распоряжениями для заполнения признака ДоставляетсяПолностью;
//	СтрокиТЧКЗаполнению - Массив, Неопределено - строки, табличной части распоряжения.
//
Процедура ЗаполнитьПризнакДоставляетсяПолностью(ТоварыРаспоряжений,
	ТЧРаспоряжения, СтрокиТЧКЗаполнению = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.Распоряжение,
	|	Т.Склад,
	|	Т.ДоставляетсяПолностью
	|ПОМЕСТИТЬ ТЧРаспоряжения
	|ИЗ
	|	&ТЧРаспоряжения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ПОМЕСТИТЬ ВТТоварыЗадания
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТоварыЗадания.Распоряжение,
	|	ВТТоварыЗадания.Склад,
	|	ВТТоварыЗадания.ВсеТовары
	|ПОМЕСТИТЬ РаспоряженияЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК ВТТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение КАК Распоряжение,
	|	Т.ПолучательОтправитель КАК ПолучательОтправитель,
	|	Т.Склад КАК Склад,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Назначение КАК Назначение,
	|	Т.Серия КАК Серия,
	|	СУММА(Т.Количество) КАК Количество,
	|	МАКСИМУМ(Т.ВсеТовары) КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад";
	
	ШаблонТекстаЗапросаПоРаспоряжению =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шапка.Ссылка,
	|	Шапка.Партнер КАК ПолучательОтправитель,
	|	ТЧ.Склад КАК Склад,
	|	ТЧ.Номенклатура,
	|	ТЧ.Характеристика,
	|	ТЧ.Назначение КАК Назначение,
	|	ТЧ.Серия,
	|	ТЧ.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыРаспоряжений
	|ИЗ
	|	Документ.ЗаказКлиента КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТЧ
	|		ПО Шапка.Ссылка = ТЧ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияЗадания КАК РаспоряженияЗадания
	|		ПО (РаспоряженияЗадания.Распоряжение = Шапка.Ссылка)
	|			И (РаспоряженияЗадания.Склад = ТЧ.Склад)
	|			И (НЕ РаспоряженияЗадания.ВсеТовары)";
	
	ТекстРаспоряженияНаДоставку = "";
	
	ТекстОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЭтоПервый = Истина;
	ОписанияРаспоряженийНаДоставку = ДоставкаТоваровКлиентСервер.ОписанияРаспоряженийНаДоставку();
	Для Каждого Описание Из ОписанияРаспоряженийНаДоставку Цикл
		
		ТекстПоРаспоряжению = СтрЗаменить(ШаблонТекстаЗапросаПоРаспоряжению, "ЗаказКлиента", Описание.Имя);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, ".Товары",                    "." + Описание.ИмяТЧ);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "Партнер КАК ПолучательОтправитель",     Описание.ИмяПоляПолучательОтправитель + " КАК ПолучательОтправитель");
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ТЧ.Склад",                   Описание.ИмяПоляСклад);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ТЧ.Назначение",              Описание.ИмяПоляНазначение);
		ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ТЧ.Серия",                   Описание.ИмяПоляСерия);
		
		Если ЭтоПервый Тогда
			ЭтоПервый = Ложь;
		Иначе
			ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "РАЗРЕШЕННЫЕ", "");
			ТекстПоРаспоряжению = СтрЗаменить(ТекстПоРаспоряжению, "ПОМЕСТИТЬ ТоварыРаспоряжений","");
			ТекстРаспоряженияНаДоставку = ТекстРаспоряженияНаДоставку + ТекстОбъединитьВсе;
		КонецЕсли;
		
		ТекстРаспоряженияНаДоставку = ТекстРаспоряженияНаДоставку + ТекстПоРаспоряжению;
		
	КонецЦикла;
	
	ТекстЗапросаПоСоглашениям =
	"ВЫБРАТЬ
	|	СоглашенияСПоставщиками.Ссылка,
	|	СоглашенияСПоставщиками.Партнер,
	|	СоглашенияСПоставщиками.Склад,
	|	ТоварыКПоступлениюОстатки.Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика,
	|	ТоварыКПоступлениюОстатки.Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияЗадания КАК РаспоряженияЗадания
	|		ПО (РаспоряженияЗадания.Распоряжение = СоглашенияСПоставщиками.Ссылка)
	|			И (НЕ РаспоряженияЗадания.ВсеТовары)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, ) КАК ТоварыКПоступлениюОстатки
	|		ПО СоглашенияСПоставщиками.Ссылка = ТоварыКПоступлениюОстатки.ДокументПоступления
	|			И СоглашенияСПоставщиками.Склад = ТоварыКПоступлениюОстатки.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО СоглашенияСПоставщиками.Ссылка = СостоянияИРеквизитыДоставки.Распоряжение";
	
	ТекстЗапросаПоДоговорам =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Партнер,
	|	ТоварыКПоступлениюОстатки.Склад,
	|	ТоварыКПоступлениюОстатки.Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика,
	|	ТоварыКПоступлениюОстатки.Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияЗадания КАК РаспоряженияЗадания
	|		ПО (РаспоряженияЗадания.Распоряжение = ДоговорыКонтрагентов.Ссылка)
	|			И (НЕ РаспоряженияЗадания.ВсеТовары)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, ) КАК ТоварыКПоступлениюОстатки
	|		ПО ДоговорыКонтрагентов.Ссылка = ТоварыКПоступлениюОстатки.ДокументПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО ДоговорыКонтрагентов.Ссылка = СостоянияИРеквизитыДоставки.Распоряжение";
	
	ТекстРаспоряженияНаДоставку = ТекстРаспоряженияНаДоставку 
		+ ТекстОбъединитьВсе 
		+ ТекстЗапросаПоСоглашениям 
		+ ТекстОбъединитьВсе 
		+ ТекстЗапросаПоДоговорам;
	
	ТекстЗапроса = ТекстЗапроса 
		+ ОбщегоНазначения.РазделительПакетаЗапросов() 
		+ ТекстРаспоряженияНаДоставку 
		+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыЗадания.Распоряжение КАК Распоряжение,
	|		ТоварыЗадания.ПолучательОтправитель КАК ПолучательОтправитель,
	|		ТоварыЗадания.Склад КАК Склад,
	|		ТоварыЗадания.Номенклатура КАК Номенклатура,
	|		ТоварыЗадания.Характеристика КАК Характеристика,
	|		ТоварыЗадания.Назначение КАК Назначение,
	|		ТоварыЗадания.Серия КАК Серия,
	|		-ТоварыЗадания.Количество КАК Количество
	|	ИЗ
	|		ТоварыЗадания КАК ТоварыЗадания
	|	ГДЕ
	|		НЕ ТоварыЗадания.ВсеТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.ПолучательОтправитель,
	|		Т.Склад,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Назначение,
	|		Т.Серия,
	|		Т.Количество
	|	ИЗ
	|		ТоварыРаспоряжений КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаспоряженияЗадания.Распоряжение,
	|	РаспоряженияЗадания.Склад,
	|	ИСТИНА КАК ВсеТовары
	|ПОМЕСТИТЬ ПолностьюДоставляемыеРаспоряжения
	|ИЗ
	|	РаспоряженияЗадания КАК РаспоряженияЗадания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК ОстаткиПоРаспоряжению
	|		ПО РаспоряженияЗадания.Распоряжение = ОстаткиПоРаспоряжению.Распоряжение
	|			И РаспоряженияЗадания.Склад = ОстаткиПоРаспоряжению.Склад
	|ГДЕ
	|	ОстаткиПоРаспоряжению.Распоряжение ЕСТЬ NULL" + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ТЧРаспоряжения.НомерСтроки
	|ИЗ
	|	ПолностьюДоставляемыеРаспоряжения КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЧРаспоряжения КАК ТЧРаспоряжения
	|		ПО (ТЧРаспоряжения.Распоряжение = Т.Распоряжение)
	|			И (ТЧРаспоряжения.Склад = Т.Склад)
	|			И НЕ ТЧРаспоряжения.ДоставляетсяПолностью";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыРаспоряжений);
	
	Если СтрокиТЧКЗаполнению = Неопределено Тогда
		Запрос.УстановитьПараметр("ТЧРаспоряжения",
			ТЧРаспоряжения.Выгрузить(,"НомерСтроки, Распоряжение, Склад, ДоставляетсяПолностью"));
	Иначе
		Запрос.УстановитьПараметр("ТЧРаспоряжения",
			ТЧРаспоряжения.Выгрузить(СтрокиТЧКЗаполнению,"НомерСтроки, Распоряжение, Склад, ДоставляетсяПолностью"));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧРаспоряжения[Выборка.НомерСтроки - 1].ДоставляетсяПолностью = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив непроверяемых реквизитов распоряжения на доставку в зависимости от способа доставки.
//
// Параметры:
//  ДокументОбъект					 - ДокументОбъект	- распоряжение, в котором проверяется заполнение реквизитов;
//  МассивНепроверяемыхРеквизитов	 - Массив			- массив реквизитов, заполнение которых не обязательно;
//  Отказ							 - Булево			- Истина - признак отказа выполнения заполнения реквизитов;
//  НакладнаяПоЗаказам				 - Булево			- Истина - ДокументОбъект является накладной по заказу.
//
Процедура ПроверитьЗаполнениеРеквизитовДоставки(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, НакладнаяПоЗаказам = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие реквизитов доставки заказов и накладных
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	Поле = "СпособДоставки";
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда
		
		Если НакладнаяПоЗаказам
			И ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			// Проверим, что в заказах по накладной указан корректный способ доставки
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК Ссылка
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ) КАК ТоварыКОтгрузкеОбороты
			|ГДЕ
			|	ТоварыКОтгрузкеОбороты.Регистратор = &Ссылка
			|	И ТоварыКОтгрузкеОбороты.ДокументОтгрузки.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = НСтр("ru = 'Способ доставки в связанном документе %Ссылка% не соответствует указанному в накладной.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			КонецЦикла;
			
		Иначе
			// Проверим, что в накладных по заказу указан корректный способ доставки
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТоварыКОтгрузкеОбороты.Регистратор КАК Ссылка
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ДокументОтгрузки = &Ссылка) КАК ТоварыКОтгрузкеОбороты
			|ГДЕ
			|	ТоварыКОтгрузкеОбороты.Регистратор <> ТоварыКОтгрузкеОбороты.ДокументОтгрузки
			|	И ТоварыКОтгрузкеОбороты.КОформлениюРасход > 0";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СиламиПеревозчика = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика");
				ЕстьСпособДоставки = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Выборка.Ссылка, "СпособДоставки");
				Если ЕстьСпособДоставки Тогда
					СпособДоставкиСвязанногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "СпособДоставки");
					Если ДокументОбъект.СпособДоставки = СиламиПеревозчика
						И СпособДоставкиСвязанногоДокумента <> СиламиПеревозчика
						Или ДокументОбъект.СпособДоставки <> СиламиПеревозчика
						И СпособДоставкиСвязанногоДокумента = СиламиПеревозчика Тогда
						
						ТекстСообщения = НСтр("ru = 'Способ доставки в связанном документе %Ссылка% не соответствует указанному в заказе.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументОбъект, "ОсобыеУсловияПеревозки")
		И Не ДокументОбъект.ОсобыеУсловияПеревозки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОсобыеУсловияПеревозкиОписание");
	КонецЕсли;
	
	// Доставка не требуется
	Если Не ЗначениеЗаполнено(ДокументОбъект.СпособДоставки)
		  Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении
		  Или (НакладнаяПоЗаказам И Не ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика)
		  Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
		  Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	// Доставка от нас
	
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
		Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
		Или  ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиентаКурьером
	// Доставка к нам
	
		Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
		Или ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда

		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		
	ИначеЕсли ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении реквизита "Особые условия перевозки".
//
// Параметры:
//	ЭлементыФормы - ВсеЭлементыФормы - элементы формы, в которых осуществляется изменение свойств;
//	ДокОбъект - ДанныеФормыСтруктура - объект, реквизиты которого используются при изменении 
//		значения реквизита "Особые условия перевозки".
//
Процедура ОсобыеУсловияПеревозкиПриИзменении(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если НЕ ДокОбъект.ОсобыеУсловияПеревозки Тогда
		ДокОбъект.ОсобыеУсловияПеревозкиОписание = "";
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

// Дополняет контактную информацию телефонами контактного лица, перевозчика, отправителя или получателя.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект, в котором данные по доставке заполняются контактной информацией.
//
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Объект) Экспорт
	
	ТипыКИ = Новый Массив;
	ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	ИсточникиКИ = Новый Массив;
	КонтактноеЛицо = Неопределено;
	Объект.Свойство("КонтактноеЛицо", КонтактноеЛицо);
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		ИсточникиКИ.Добавить(КонтактноеЛицо);
	КонецЕсли;
	
	СпособДоставки = Неопределено;
	Объект.Свойство("СпособДоставки",СпособДоставки);
	
	Если СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи
		Или СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
		ПеревозчикПартнер = Объект.ПеревозчикПартнер;
		ИсточникиКИ.Добавить(ПеревозчикПартнер);
	Иначе
		ПолучательОтправитель = ПолучательОтправитель(Объект);
		ИсточникиКИ.Добавить(ПолучательОтправитель.Значение);
	КонецЕсли;
	
	Для Каждого Источник Из ИсточникиКИ Цикл
		Если Не ЗначениеЗаполнено(Источник) Тогда
			Продолжить;
		КонецЕсли;
		ИсточникПараметр = Новый Массив;
		ИсточникПараметр.Добавить(Источник);
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникПараметр, ТипыКИ, , ТекущаяДатаСеанса());
		КонтактнаяИнформацияЗаполнена = Ложь;
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ТекстТелефоны = Строка(Источник) + ": ";
			Для Каждого Стр Из КонтактнаяИнформация Цикл
				Если ЗначениеЗаполнено(Стр.Представление) Тогда
					КонтактнаяИнформацияЗаполнена = Истина;
					ТекстТелефоны = ТекстТелефоны + Стр.Представление + ", ";
				КонецЕсли;
			КонецЦикла;
			ТекстТелефоны = Лев(ТекстТелефоны, СтрДлина(ТекстТелефоны)-2) + ".";
			Если КонтактнаяИнформацияЗаполнена
				И СтрНайти(Объект.ДополнительнаяИнформацияПоДоставке, ТекстТелефоны) = 0 Тогда
				Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформацияПоДоставке) Тогда
					Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + Символы.ПС;
				КонецЕсли;
				Объект.ДополнительнаяИнформацияПоДоставке = Объект.ДополнительнаяИнформацияПоДоставке + ТекстТелефоны;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты транспортного средства.
//
// Параметры:
//  ТранспортноеСредство - СправочникСсылка.ТранспортныеСредства, СправочникСсылка.ТипыТранспортныхСредств	 - транспортное средство,
//  	реквизиты которого нужно получить.
// 
// Возвращаемое значение:
//  Структура - с полями:
//  *ВместимостьПредставление - Строка - вместимость
//  *ГрузоподъемностьВЕдПользователя - Число - грузоподъемность
//  *ВместимостьВЕдПользователя - Число - вместимость в пользовательских единицах измерения
//  *ГрузоподъемностьВТоннах - Число - грузоподъемность в тоннах
//  *ВместимостьВКубическихМетрах - Число - вместимость в кубических метрах.
//
Функция РеквизитыТС(ТранспортноеСредство) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		РеквизитыТС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство,
			"ВместимостьПредставление, ГрузоподъемностьВТоннах, ВместимостьВКубическихМетрах");
		
		СтруктураВозврата.Вставить("ВместимостьПредставление", РеквизитыТС.ВместимостьПредставление);
		СтруктураВозврата.Вставить("ГрузоподъемностьВЕдПользователя", РеквизитыТС.ГрузоподъемностьВТоннах / КоэффициентПересчетаВТонны());
		СтруктураВозврата.Вставить("ВместимостьВЕдПользователя", РеквизитыТС.ВместимостьВКубическихМетрах / КоэффициентПересчетаВКубическиеМетры());
		СтруктураВозврата.Вставить("ГрузоподъемностьВТоннах", РеквизитыТС.ГрузоподъемностьВТоннах);
		СтруктураВозврата.Вставить("ВместимостьВКубическихМетрах", РеквизитыТС.ВместимостьВКубическихМетрах);
		
	Иначе
		
		СтруктураВозврата.Вставить("ВместимостьПредставление", "");
		СтруктураВозврата.Вставить("ГрузоподъемностьВЕдПользователя", 0);
		СтруктураВозврата.Вставить("ВместимостьВЕдПользователя", 0);
		СтруктураВозврата.Вставить("ГрузоподъемностьВТоннах", 0);
		СтруктураВозврата.Вставить("ВместимостьВКубическихМетрах", 0);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует текстовое представление реквизитов доставки для вывода на форму.
//
// Параметры:
//  КонтейнерРеквизитовДоставки	 - СправочникСсылка.СоглашенияСПоставщиками, СправочникСсылка.ДоговорыКонтрагентов - 
//  									договор или соглашение, содержащее информацию по реквизитам доставки.
// 
// Возвращаемое значение:
//  Строка - текстовое представление реквизитов доставки.
//
Функция СформироватьСводнуюИнформациюПоДоставке(КонтейнерРеквизитовДоставки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КонтейнерРеквизитовДоставки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыДоставкиПредставление = Неопределено;
	
	РеквизитыДоставки = РеквизитыДоставки(КонтейнерРеквизитовДоставки);
	
	ОписаниеРеквизитов = Новый Соответствие;
	ОписаниеРеквизитов.Вставить("СпособДоставки"					, "Способ доставки");
	ОписаниеРеквизитов.Вставить("ВремяДоставки"						, "Желаемое время доставки");
	ОписаниеРеквизитов.Вставить("АдресДоставки"						, "Адрес доставки");
	ОписаниеРеквизитов.Вставить("ПеревозчикПартнер"					, "Перевозчик");
	ОписаниеРеквизитов.Вставить("АдресДоставкиПеревозчика"			, "Адрес пункта передачи");
	ОписаниеРеквизитов.Вставить("ЗонаДоставки"						, "Зона доставки");
	ОписаниеРеквизитов.Вставить("ДополнительнаяИнформацияПоДоставке", "Дополнительная информация по доставке");
	
	РеквизитыДоставкиПредставление = "";
	
	Если ЗначениеЗаполнено(РеквизитыДоставки.ВремяДоставкиС) И ЗначениеЗаполнено(РеквизитыДоставки.ВремяДоставкиПо) Тогда
		Шаблон = НСтр("ru='с %1 до %2'");
		ПредставлениеВремениДоставки = СтрШаблон(Шаблон,
			Формат(РеквизитыДоставки.ВремяДоставкиС	, НСтр("ru='ДФ=''HH"":""mm'''")),
			Формат(РеквизитыДоставки.ВремяДоставкиПо, НСтр("ru='ДФ=''HH"":""mm'''")));
		РеквизитыДоставки.Вставить("ВремяДоставки", ПредставлениеВремениДоставки);
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДоставки.ВремяДоставкиС) Тогда
		Шаблон = НСтр("ru='после %1'");
		ПредставлениеВремениДоставки = СтрШаблон(Шаблон,
			Формат(РеквизитыДоставки.ВремяДоставкиС	, НСтр("ru='ДФ=''HH"":""mm'''")));
		РеквизитыДоставки.Вставить("ВремяДоставки", ПредставлениеВремениДоставки);
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДоставки.ВремяДоставкиПо) Тогда
		Шаблон = НСтр("ru='до %1'");
		ПредставлениеВремениДоставки = СтрШаблон(Шаблон,
			Формат(РеквизитыДоставки.ВремяДоставкиПо, НСтр("ru='ДФ=''HH"":""mm'''")));
		РеквизитыДоставки.Вставить("ВремяДоставки", ПредставлениеВремениДоставки);
	КонецЕсли;
	
	Для Каждого РеквизитДоставки Из РеквизитыДоставки Цикл
		ПредставлениеРеквизита = ОписаниеРеквизитов[РеквизитДоставки.Ключ]; 
		Если ПредставлениеРеквизита <> Неопределено И ЗначениеЗаполнено(РеквизитДоставки.Значение) Тогда 
			РеквизитыДоставкиПредставление = РеквизитыДоставкиПредставление
			+ ПредставлениеРеквизита + ": " + РеквизитДоставки.Значение + Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыДоставкиПредставление;
	
КонецФункции

// Вызывается после завершения вызова процедуры Печать менеджера печати объекта, имеет те же параметры.
// Используется для печати комплекта документов в соответствии с порядком документов в "Задании на перевозку".
// 
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - информация для заполнения письма при отправке печатной формы по электронной почте.
//                                     Содержит следующие поля (описание см. в общем модуле конфигурации
//                                     РаботаСПочтовымиСообщениямиКлиент в процедуре СоздатьНовоеПисьмо):
//    * Получатель - Строка,
//    * Тема - Строка,
//    * Текст - Строка.
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если КоллекцияПечатныхФорм.Количество() И КоллекцияПечатныхФорм[0].ИмяМакета = "КомплектДокументов" 
		И МассивОбъектов.Количество()И ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		Задание = МассивОбъектов[0];
		ДокументыПоЗаданию = Документы.ЗаданиеНаПеревозку.ПолучитьНакладныеПоЗаданиюНаПеревозку(Задание);
		Соответствие = Новый Соответствие;
		ОбъектыПечатиРезультат = Новый СписокЗначений;
		ЗаполнитьЗначенияСвойств(ОбъектыПечатиРезультат.Добавить(), ОбъектыПечати[0]);
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			Индекс = ДокументыПоЗаданию.Найти(ОбъектПечати.Значение);
			Если Индекс <> Неопределено Тогда
				Соответствие.Вставить(Индекс, ОбъектПечати.Значение);
			КонецЕсли;
		КонецЦикла;
		Для Сч = 0 По Соответствие.Количество() - 1 Цикл 
			ЭлементСписка = ОбъектыПечати.НайтиПоЗначению(Соответствие[Сч]);
			ЗаполнитьЗначенияСвойств(ОбъектыПечатиРезультат.Добавить(), ЭлементСписка);
		КонецЦикла;
		ОбъектыПечати = ОбъектыПечатиРезультат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаЗаполненияЗаданияНаПеревозкуПоРасходнымОрдерам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаданияНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение,
	|	ЗаданияНаПеревозкуРаспоряжения.Склад КАК Склад,
	|	ЗаданияНаПеревозкуРаспоряжения.НомерСтроки КАК НомерСтроки,
	|	ЗаданияНаПеревозкуРаспоряжения.Вес КАК Вес,
	|	ЗаданияНаПеревозкуРаспоряжения.Объем КАК Объем,
	|	ЗаданияНаПеревозкуРаспоряжения.ДоставляетсяПолностью КАК ДоставляетсяПолностью,
	|	ЗаданияНаПеревозкуРаспоряжения.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ЗаданияНаПеревозкуРаспоряжения
	|ИЗ
	|	&ЗаданиеНаПеревозкуРаспоряжения КАК ЗаданияНаПеревозкуРаспоряжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияНаПеревозкуМаршрут.НомерСтроки КАК НомерСтроки,
	|	ЗаданияНаПеревозкуМаршрут.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ЗаданияНаПеревозкуМаршрут
	|ИЗ
	|	&ЗаданиеНаПеревозкуМаршрут КАК ЗаданияНаПеревозкуМаршрут
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Склад
	|ПОМЕСТИТЬ ОрдераФильтр
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|	И РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.Характеристика,
	|	ТоварыОрдеров.Назначение,
	|	ТоварыОрдеров.Серия,
	|	ТоварыОрдеров.Распоряжение,
	|	СУММА(ТоварыОрдеров.Количество) КАК Количество,
	|	ОрдераФильтр.Склад
	|ПОМЕСТИТЬ ТоварыОрдеров
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыОрдеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрдераФильтр КАК ОрдераФильтр
	|		ПО ТоварыОрдеров.Ссылка = ОрдераФильтр.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрдеров.Распоряжение,
	|	ТоварыОрдеров.Назначение,
	|	ТоварыОрдеров.Характеристика,
	|	ТоварыОрдеров.Номенклатура,
	|	ТоварыОрдеров.Серия,
	|	ОрдераФильтр.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение,
	|	ОрдераФильтр.Склад
	|ПОМЕСТИТЬ РаспоряженияВОрдерах
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрдераФильтр КАК ОрдераФильтр
	|		ПО (ОрдераФильтр.Ссылка = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Назначение КАК Назначение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Серия КАК Серия,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	ТоварыКОтгрузке.КОтгрузкеПриход КАК КОтгрузкеПриход,
	|	ТоварыОрдеров.Распоряжение КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрдеров.Количество, 0) > ТоварыКОтгрузке.КОтгрузкеПриход
	|			ТОГДА ТоварыКОтгрузке.КОтгрузкеПриход
	|		ИНАЧЕ ТоварыОрдеров.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрдеров.Количество, 0) > ТоварыКОтгрузке.КОтгрузкеПриход
	|			ТОГДА ТоварыКОтгрузке.КОтгрузкеПриход * &ТекстЗапросаВесУпаковки
	|		ИНАЧЕ ТоварыОрдеров.Количество * &ТекстЗапросаВесУпаковки
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыОрдеров.Количество, 0) > ТоварыКОтгрузке.КОтгрузкеПриход
	|			ТОГДА ТоварыКОтгрузке.КОтгрузкеПриход * &ТекстЗапросаОбъемУпаковки
	|		ИНАЧЕ ТоварыОрдеров.Количество * &ТекстЗапросаОбъемУпаковки
	|	КОНЕЦ КАК Объем
	|ПОМЕСТИТЬ ТоварыОрдеровИКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
	|			,
	|			,
	|			,
	|			(ДокументОтгрузки, Склад) В
	|				(ВЫБРАТЬ
	|					РаспоряженияВОрдерах.Распоряжение,
	|					РаспоряженияВОрдерах.Склад
	|				ИЗ
	|					РаспоряженияВОрдерах)) КАК ТоварыКОтгрузке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОрдеров КАК ТоварыОрдеров
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ТоварыОрдеров.Распоряжение
	|			И ТоварыКОтгрузке.Склад = ТоварыОрдеров.Склад
	|			И ТоварыКОтгрузке.Номенклатура = ТоварыОрдеров.Номенклатура
	|			И ТоварыКОтгрузке.Характеристика = ТоварыОрдеров.Характеристика
	|			И ТоварыКОтгрузке.Назначение = ТоварыОрдеров.Назначение
	|			И ТоварыКОтгрузке.Серия = ТоварыОрдеров.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТоварыКОтгрузке.Номенклатура)
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеПриход > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрдеровИКОтгрузке.Склад,
	|	ТоварыОрдеровИКОтгрузке.Распоряжение,
	|	ТоварыОрдеровИКОтгрузке.Получатель,
	|	СУММА(ТоварыОрдеровИКОтгрузке.Вес) КАК Вес,
	|	СУММА(ТоварыОрдеровИКОтгрузке.Объем) КАК Объем
	|ПОМЕСТИТЬ ВесОбъемПоРаспоряжениям
	|ИЗ
	|	ТоварыОрдеровИКОтгрузке КАК ТоварыОрдеровИКОтгрузке
	|ГДЕ
	|	ТоварыОрдеровИКОтгрузке.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрдеровИКОтгрузке.Склад,
	|	ТоварыОрдеровИКОтгрузке.Распоряжение,
	|	ТоварыОрдеровИКОтгрузке.Получатель" + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	
	ШаблонТекстаЗапросаПоРаспоряжению =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспоряженияНаДоставку.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Ссылка) КАК ВидРаспоряжения,
	|	РаспоряженияНаДоставку.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки = &ДоставкаСиламиПеревозчикаПоАдресу
	|			ТОГДА РаспоряженияНаДоставку.АдресДоставкиПеревозчика
	|		ИНАЧЕ РаспоряженияНаДоставку.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
	|	РаспоряженияНаДоставку.ЗонаДоставки КАК ЗонаДоставки,
	|	РаспоряженияНаДоставку.ПеревозчикПартнер КАК ПеревозчикПартнер,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.СпособДоставки = &ДоставкаСиламиПеревозчикаПоАдресу
	|			ТОГДА РаспоряженияНаДоставку.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ РаспоряженияНаДоставку.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	РаспоряженияНаДоставку.ВремяДоставкиС КАК ВремяДоставкиС,
	|	РаспоряженияНаДоставку.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	РаспоряженияНаДоставку.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	Документ.ЗаказКлиента КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияВОрдерах КАК РаспоряженияВОрдерах
	|		ПО (РаспоряженияВОрдерах.Распоряжение = РаспоряженияНаДоставку.Ссылка)
	|ГДЕ
	|	РаспоряженияНаДоставку.СпособДоставки В(&СпособыДоставки)
	|	И РаспоряженияНаДоставку.Проведен";
	
	ЭтоПервый = Истина;
	
	Для Каждого ТипРаспоряжениеНаДоставку Из Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип.Типы() Цикл
		
		// Текст запроса собирается по документам, а не по регистру СостоянияИРеквизитыДоставки,
		// чтобы поддержать перезаполнение закрытых заданий,
		// т.к. данные регистра по распоряжениям очищаются после закрытия заданий на перевозку по этим распоряжениям.
		Если ТипРаспоряжениеНаДоставку = Тип("СправочникСсылка.СоглашенияСПоставщиками")
			Или ТипРаспоряжениеНаДоставку = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРаспоряжения = Метаданные.НайтиПоТипу(ТипРаспоряжениеНаДоставку);
		ПолноеИмяДокумента = МетаданныеРаспоряжения.ПолноеИмя();
		ТекстЗапросаПоРаспоряжению = СтрЗаменить(ШаблонТекстаЗапросаПоРаспоряжению, "Документ.ЗаказКлиента", ПолноеИмяДокумента);
		
		Если ЭтоПервый Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "КАК ДополнительнаяИнформацияПоДоставке",
				"КАК ДополнительнаяИнформацияПоДоставке
				|ПОМЕСТИТЬ РаспоряженияНаДоставку");
			
			ЭтоПервый = Ложь;
		Иначе
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РАЗРЕШЕННЫЕ", "");
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("АдресДоставкиПеревозчика", МетаданныеРаспоряжения) Тогда
			// Не во всех распоряжениях полный состав реквизитов доставки
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "АдресДоставкиПеревозчика", "АдресДоставки");
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "АдресДоставкиПеревозчикаЗначенияПолей", "АдресДоставкиЗначенияПолей");
		КонецЕсли;
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ЗонаДоставки", МетаданныеРаспоряжения) Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ЗонаДоставки", "ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)");
		КонецЕсли;
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ВремяДоставкиС", МетаданныеРаспоряжения) Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ВремяДоставкиС", "ДАТАВРЕМЯ(1,1,1)");
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ВремяДоставкиПо", "ДАТАВРЕМЯ(1,1,1)");
		КонецЕсли;
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ПеревозчикПартнер", МетаданныеРаспоряжения) Тогда
			ТекстЗапросаПоРаспоряжению = СтрЗаменить(ТекстЗапросаПоРаспоряжению, "РаспоряженияНаДоставку.ПеревозчикПартнер", "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоРаспоряжению;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспоряженияНаДоставку.Ссылка" + ОбщегоНазначения.РазделительПакетаЗапросов() + 
	"ВЫБРАТЬ
	|	РаспоряженияУдалить.НомерСтроки КАК НомерСтроки,
	|	Маршрут.НомерСтроки КАК МаршрутНомерСтроки
	|ИЗ
	|	ЗаданияНаПеревозкуРаспоряжения КАК РаспоряженияУдалить
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО РаспоряженияУдалить.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение
	|			И РаспоряженияУдалить.Склад = ВесОбъемПоРаспоряжениям.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуМаршрут КАК Маршрут
	|		ПО (РаспоряженияУдалить.КлючСвязи = Маршрут.КлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСклады
	|		ПО (СправочникСклады.Ссылка = РаспоряженияУдалить.Склад)
	|			И (СправочникСклады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (&ДатаВремяРейсаПланС >= СправочникСклады.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|ГДЕ
	|	ВесОбъемПоРаспоряжениям.Распоряжение ЕСТЬ NULL
	|	И НЕ РаспоряженияУдалить.Распоряжение ССЫЛКА Документ.ПоручениеЭкспедитору
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияУдалить.НомерСтроки,
	|	Маршрут.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаспоряженияУдалить.НомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиМаршрутаУдалить.НомерСтроки КАК МаршрутНомерСтроки
	|ИЗ
	|	ЗаданияНаПеревозкуМаршрут КАК СтрокиМаршрутаУдалить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуРаспоряжения КАК ЗаданияНаПеревозкуРаспоряжения
	|		ПО (ЗаданияНаПеревозкуРаспоряжения.КлючСвязи = СтрокиМаршрутаУдалить.КлючСвязи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО (ЗаданияНаПеревозкуРаспоряжения.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение)
	|			И (ЗаданияНаПеревозкуРаспоряжения.Склад = ВесОбъемПоРаспоряжениям.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСклады
	|		ПО (СправочникСклады.Ссылка = ЗаданияНаПеревозкуРаспоряжения.Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиМаршрутаУдалить.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ВесОбъемПоРаспоряжениям.Распоряжение ЕСТЬ NULL 
	|					ИЛИ НЕ СправочникСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					ИЛИ &ДатаВремяРейсаПланС < СправочникСклады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|					ИЛИ ЗаданияНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.ПоручениеЭкспедитору
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутНомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияИзменить.НомерСтроки КАК НомерСтроки,
	|	ВесОбъемПоРаспоряжениям.Вес КАК Вес,
	|	ВесОбъемПоРаспоряжениям.Объем КАК Объем,
	|	Маршрут.НомерСтроки КАК МаршрутНомерСтроки
	|ИЗ
	|	ЗаданияНаПеревозкуРаспоряжения КАК РаспоряженияИзменить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО РаспоряженияИзменить.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение
	|			И РаспоряженияИзменить.Склад = ВесОбъемПоРаспоряжениям.Склад
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуМаршрут КАК Маршрут
	|		ПО (Маршрут.КлючСвязи = РаспоряженияИзменить.КлючСвязи)
	|ГДЕ
	|	(ВесОбъемПоРаспоряжениям.Вес <> РаспоряженияИзменить.Вес
	|			ИЛИ ВесОбъемПоРаспоряжениям.Объем <> РаспоряженияИзменить.Объем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВесОбъемПоРаспоряжениям.Вес КАК Вес,
	|	ВесОбъемПоРаспоряжениям.Объем КАК Объем,
	|	ВесОбъемПоРаспоряжениям.Склад КАК Склад,
	|	ВесОбъемПоРаспоряжениям.Распоряжение КАК Распоряжение,
	|	НовыеРаспоряжения.ВидРаспоряжения,
	|	НовыеРаспоряжения.Номер,
	|	НовыеРаспоряжения.АдресДоставки,
	|	НовыеРаспоряжения.СпособДоставки,
	|	НовыеРаспоряжения.ЗонаДоставки,
	|	ВесОбъемПоРаспоряжениям.Получатель КАК ПолучательОтправитель,
	|	НовыеРаспоряжения.ПеревозчикПартнер,
	|	НовыеРаспоряжения.АдресДоставкиЗначенияПолей,
	|	НовыеРаспоряжения.ВремяДоставкиС КАК ВремяС,
	|	НовыеРаспоряжения.ВремяДоставкиПо КАК ВремяПо,
	|	НовыеРаспоряжения.ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	РаспоряженияНаДоставку КАК НовыеРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО НовыеРаспоряжения.Ссылка = ВесОбъемПоРаспоряжениям.Распоряжение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаданияНаПеревозкуРаспоряжения КАК ЗаданияНаПеревозкуРаспоряжения
	|		ПО (ЗаданияНаПеревозкуРаспоряжения.Распоряжение = ВесОбъемПоРаспоряжениям.Распоряжение)
	|			И (ЗаданияНаПеревозкуРаспоряжения.Склад = ВесОбъемПоРаспоряжениям.Склад)
	|ГДЕ
	|	ЗаданияНаПеревозкуРаспоряжения.Распоряжение ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Получатель КАК ПолучательОтправитель,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ЛОЖЬ КАК ВсеТовары,
	|	ТоварыКДоставке.Количество
	|ИЗ
	|	ТоварыОрдеровИКОтгрузке КАК ТоварыКДоставке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВесОбъемПоРаспоряжениям КАК ВесОбъемПоРаспоряжениям
	|		ПО (ВесОбъемПоРаспоряжениям.Склад = ТоварыКДоставке.Склад)
	|			И (ВесОбъемПоРаспоряжениям.Распоряжение = ТоварыКДоставке.Распоряжение)
	|ГДЕ
	|	ТоварыКДоставке.Количество > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(КоллекцияСтрокДерева)
	
	ПредыдущийАдресИлиПеревозчик = Неопределено;
	Подсвечиваем = 0;
	Для каждого Строка Из КоллекцияСтрокДерева Цикл
		Если (Строка.ПолеУпорядочения <> ПредыдущийАдресИлиПеревозчик)
			И (ПредыдущийАдресИлиПеревозчик <> Неопределено) Тогда
			Подсвечиваем = Макс(Подсвечиваем-1,-Подсвечиваем+1);
		КонецЕсли;
		Строка.ОформлениеСтроки = Подсвечиваем;
		ПредыдущийАдресИлиПеревозчик = Строка.ПолеУпорядочения;
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - где:
// * ИмяПоля - Строка - Имя поля
// * Значение - ОпределяемыйТип.ОтправительПолучательДоставки
//
Функция ПолучательОтправитель(ДокОбъект)
	Заполнение = Новый Структура("Партнер,СкладПолучатель,Пункт",0,0,0);
	ЗаполнитьЗначенияСвойств(Заполнение,ДокОбъект);
	Если Заполнение.СкладПолучатель <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","СкладПолучатель",ДокОбъект.СкладПолучатель);
	ИначеЕсли Заполнение.Пункт <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","Пункт",ДокОбъект.Пункт);
	ИначеЕсли Заполнение.Партнер <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","Партнер",ДокОбъект.Партнер);
	Иначе
		ВызватьИсключение НСтр("ru = 'Получатель (отправитель) не определен.'");
	КонецЕсли;
КонецФункции

Функция ИмяЭлементаАдрес(ЭлементыФормы)
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		Возврат "АдресДоставкиПолучателя";
	ИначеЕсли ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		Возврат "АдресПоставщика";
	ИначеЕсли ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		Возврат "АдресПункта";
	Иначе
		ВызватьИсключение НСтр("ru = 'Элемент адреса не определен'");
	КонецЕсли;
	
КонецФункции

// Заполняет реквизиты доставки по известным получателю и способу доставки
//
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы - все элементы формы для получения/заполнения списков выбора, управления закладками доставки.
//		ДокОбъект - ДокументОбъект - документ-объект, реквизиты которого изменяются.
//
Процедура ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем = Ложь)
	
	ПустыеРеквизиты = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПустыеРеквизиты,
		"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо, Курьер");
	
	Если Не ДопИнфоИзмененоПользователем Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
	КонецЕсли;
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
			
		Если ЭлементыФормы.Найти("ПеревозчикПартнер") <> Неопределено
			И ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() > 0
			И ДокОбъект.ПеревозчикПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
			ДокОбъект.ПеревозчикПартнер = ЭлементыФормы.ПеревозчикПартнер.СписокВыбора[0].Значение;
		КонецЕсли;
		
	Иначе
		
		ДокОбъект.ПеревозчикПартнер = Справочники.Партнеры.ПустаяСсылка();
		
	КонецЕсли;
	
	ИмяЭлементаАдрес = ИмяЭлементаАдрес(ЭлементыФормы);
	
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		
		Если Не ДопИнфоИзмененоПользователем Тогда
			
			Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
				НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора,
					"АдресДоставки", ДокОбъект.АдресДоставки);
				Если Не НайденныйЭлементСЗ = Неопределено Тогда
					ДокОбъект.ДополнительнаяИнформацияПоДоставке = НайденныйЭлементСЗ.Значение.ДополнительнаяИнформацияПоДоставке;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте 
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиентаКурьером Тогда
		
		Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора,
				"АдресДоставки", ДокОбъект.АдресДоставки);
			Если Не НайденныйЭлементСЗ = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДокОбъект, НайденныйЭлементСЗ.Значение,
					"ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо")
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
		
		Если ЭлементыФормы.АдресПоставщика.СписокВыбора.Количество() > 0 Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора[0].Значение;
			ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,,"ДополнительнаяИнформацияПоДоставке");
			Если Не ДопИнфоИзмененоПользователем Тогда
				ДокОбъект.ДополнительнаяИнформацияПоДоставке = ПерваяСтруктураВСписке.ДополнительнаяИнформацияПоДоставке;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ДокОбъект.СпособДоставки)
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда
		
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
		ДокОбъект.ОсобыеУсловияПеревозки = Ложь;
		ДокОбъект.ОсобыеУсловияПеревозкиОписание = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем = Ложь)
	
	ПустыеРеквизиты = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПустыеРеквизиты,
		"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");
	Если Не ДопИнфоИзмененоПользователем Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокОбъект.ПеревозчикПартнер)
			И ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Количество() > 0 Тогда
		ПерваяСтруктураВСписке = ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора[0].Значение;
		ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,
			"ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");
		ДокОбъект.АдресДоставкиПеревозчика = ПерваяСтруктураВСписке.АдресДоставки;
		ДокОбъект.АдресДоставкиПеревозчикаЗначенияПолей = ПерваяСтруктураВСписке.АдресДоставкиЗначенияПолей;
		Если Не ДопИнфоИзмененоПользователем Тогда
			ДокОбъект.ДополнительнаяИнформацияПоДоставке = ПерваяСтруктураВСписке.ДополнительнаяИнформацияПоДоставке;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет список выбора у поля выбора способа доставки при изменении склада отгрузки.
//
// Параметры:
//	ПолеВыбораФормы - ПолеФормы - поле ввода времени доставки
//	ЕстьПоддержкаДоставкиСвоимиКурьерами - Булево
//
Процедура ОбновитьСписокВыбораСпособаДоставкиДляСкладаОтгрузки(ПолеВыбораФормы, ЕстьПоддержкаДоставкиСвоимиКурьерами) Экспорт
	
	СписокВыбора = ПолеВыбораФормы.СписокВыбора;
	ИскомоеЗначение = СписокВыбора.НайтиПоЗначению(Перечисления.СпособыДоставки.ДоКлиентаКурьером);
	
	Если ЕстьПоддержкаДоставкиСвоимиКурьерами Тогда
		
		Если ИскомоеЗначение = Неопределено Тогда
			
			ИскомоеЗначениеНачала = СписокВыбора.НайтиПоЗначению(Перечисления.СпособыДоставки.ДоКлиента);
			Если ИскомоеЗначениеНачала <> Неопределено Тогда
				ИндексДляВставки = СписокВыбора.Индекс(ИскомоеЗначениеНачала)+1;
				СписокВыбора.Вставить(ИндексДляВставки, Перечисления.СпособыДоставки.ДоКлиентаКурьером,
					НСтр("ru='Наш курьер до клиента'"));
			Иначе
				СписокВыбора.Добавить(Перечисления.СпособыДоставки.ДоКлиентаКурьером,
					НСтр("ru='Наш курьер до клиента'"));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИскомоеЗначение <> Неопределено Тогда
		
		СписокВыбора.Удалить(ИскомоеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Получение списка перевозчиков.
//
// Параметры:
//  СписокПеревозчиков - Массив из СправочникСсылка.Партнеры - содержит перевозчиков
//  ПолучательОтправитель - ОпределяемыйТип.ОтправительПолучательДоставки
//  Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Партнеры - содержит перевозчиков
//
Функция ПолучитьСписокПеревозчиков(Знач СписокПеревозчиков, ПолучательОтправитель, Склад = Неопределено)
	
	ЕстьУсловиеПоCкладу = Склад <> Неопределено;
	ЕстьУсловиеПоПолучателюОтправителю = ПолучательОтправитель <> Неопределено;
	ДатаОграничения = ДобавитьМесяц(ТекущаяДатаСеанса(), -12);
	ТекстЗапроса = ТекстЗапросаПеревозчиков(ЕстьУсловиеПоCкладу, ЕстьУсловиеПоПолучателюОтправителю);
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Если ЕстьУсловиеПоCкладу Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Если ЕстьУсловиеПоПолучателюОтправителю Тогда
		Запрос.УстановитьПараметр("ПолучательОтправитель",ПолучательОтправитель);
		Запрос.УстановитьПараметр("ДатаОграничения", ДатаОграничения);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СписокПеревозчиков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Перевозчик");
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПеревозчиков = СписокПеревозчиков.Количество();
	Если КоличествоПеревозчиков < 5 Тогда
		// Если список не полный, попытаемся дополнить его, устранив ограничение по получателю.
		ТекстЗапроса = ТекстЗапросаПеревозчиков(ЕстьУсловиеПоCкладу, Ложь);
		Если ЕстьУсловиеПоCкладу Тогда
			Запрос.УстановитьПараметр("Склад", Склад);
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаОграничения", ДатаОграничения);
				
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() > 0 Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока КоличествоПеревозчиков < 5 Цикл
				Если Выборка.Следующий() Тогда
					Если СписокПеревозчиков.Найти(Выборка.Перевозчик) = Неопределено Тогда
						СписокПеревозчиков.Добавить(Выборка.Перевозчик);
						КоличествоПеревозчиков = КоличествоПеревозчиков + 1;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокПеревозчиков;
	
КонецФункции

Функция ТекстЗапросаПеревозчиков(ЕстьУсловиеПоСкладу, ЕстьУсловиеПоПолучателюОтправителю)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
	|	Т.Перевозчик КАК Перевозчик,
	|	МАКСИМУМ(Т.Дата) КАК РаспоряжениеДата
	|ИЗ
	|	РегистрСведений.СостоянияИРеквизитыДоставки КАК Т
	|ГДЕ
	|	&УсловиеПоДате
	|	И &УсловиеПоСкладу
	|	И &УсловиеПоПолучателюОтправителю
	|	И Т.Перевозчик <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Т.Перевозчик
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Т.Дата) УБЫВ";
	
	Если ЕстьУсловиеПоСкладу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу", "Т.Склад = &Склад");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкладу", "Истина");
	КонецЕсли;
	
	Если ЕстьУсловиеПоПолучателюОтправителю Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПолучателюОтправителю", "Т.ПолучательОтправитель = &ПолучательОтправитель");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПолучателюОтправителю", "Истина");
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате", "Т.Дата > &ДатаОграничения");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет список перевозчиков в форме.
//
// Параметры:
//  ЭлементыФормы		 - ВсеЭлементыФормы	 - все элементы формы для управления свойствами и переключения закладок, может содержать:
//  							* ПеревозчикПартнер - ПолеФормы - обязательное
//  ДокОбъект			 - ДанныеФормыСтруктура	 - объект, реквизиты которого используются при заполнении свойств,
//  Склад				 - СправочникСсылка.Склады
//
Процедура ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы, ДокОбъект = Неопределено, Склад = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти("ПеревозчикПартнер") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПеревозчиков = ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.ВыгрузитьЗначения();
	
	ПолучательОтправитель = ?(ДокОбъект <> Неопределено,
			ПолучательОтправитель(ДокОбъект).Значение,
			Неопределено);
		
	МассивПеревозчиков = ПолучитьСписокПеревозчиков(МассивПеревозчиков, ПолучательОтправитель, Склад);
	
	ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.ЗагрузитьЗначения(МассивПеревозчиков);
	
	// Так как формируется список выбора по статистике, информация по истории является излишней, дублирующей.
	ЭлементыФормы.ПеревозчикПартнер.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, ДокОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти("АдресДоставкиПеревозчика") <> Неопределено Тогда
		ИмяЭлементаАдрес = "АдресДоставкиПеревозчика";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПеревозчикПартнер = ДокОбъект.ПеревозчикПартнер;
	
	Если Не ЗначениеЗаполнено(ПеревозчикПартнер) Тогда
		ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект).Значение;
	ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель,ПеревозчикПартнер);
	// Получим последние использованные реквизиты доставки перевозчика по получателю
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	
	Если СписокВыбора.Количество() < 3 Тогда
		ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(,ПеревозчикПартнер);
		// Если список не полный, попытаемся дополнить его, устранив ограничение по получателю.
		Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокВыбора.Количество() < 5 Тогда
		ПоследниеРеквизитыДоставкиИзРаспоряжений = ПоследниеРеквизитыДоставкиИзРаспоряжений(ДокОбъект.Ссылка, , ПеревозчикПартнер);
		Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзРаспоряжений Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПеревозчикПартнер);
	Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
		ИначеЕсли Не ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Стр.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСписокЗначений(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора, СписокВыбора)
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, ДокОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект).Значение;
		
	Если Не ЗначениеЗаполнено(ПолучательОтправитель) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы);
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	
	ПоследниеРеквизитыДоставкиИзРаспоряжений = ПоследниеРеквизитыДоставкиИзРаспоряжений(ДокОбъект.Ссылка, ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзРаспоряжений Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
		Иначе
			ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
		КонецЕсли;
	КонецЦикла;
	
	Если (ТипЗнч(ПолучательОтправитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ПолучательОтправитель) <> Тип("Строка")) Тогда
		
		АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель);
		Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭлементыФормы.Найти("АдресДоставкиСамовывоз") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиСамовывоз.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя1") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПоставщика.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПункта.СписокВыбора, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураВыбора()
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("АдресДоставки", "");
	СтруктураВыбора.Вставить("АдресДоставкиЗначенияПолей", "");
	СтруктураВыбора.Вставить("ЗонаДоставки", Справочники.ЗоныДоставки.ПустаяСсылка());
	СтруктураВыбора.Вставить("ВремяДоставкиС", Дата(1,1,1));
	СтруктураВыбора.Вставить("ВремяДоставкиПо", Дата(1,1,1));
	СтруктураВыбора.Вставить("ДополнительнаяИнформацияПоДоставке", "");
	
	Возврат СтруктураВыбора;
	
КонецФункции

Функция ПоследниеРеквизитыДоставкиИзРаспоряжений(ОбъектСсылка, ПолучательОтправитель = Неопределено, Перевозчик = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОбъекта = ОбъектСсылка.Метаданные();
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПоручениеЭкспедитору") Тогда
		Возврат ПоследниеРеквизитыПорученийЭкспедиторам(ПолучательОтправитель)
	КонецЕсли;
	
	СвязанныеДокументы = Новый Соответствие;
	
	ГруппаДокументов = Новый Массив;
	ГруппаДокументов.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	ГруппаДокументов.Добавить(Метаданные.Документы.ЗаказКлиента);
	ГруппаДокументов.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ГруппаДокументов.Добавить(Метаданные.Документы.ПередачаТоваровХранителю);
	
	СвязанныеДокументы.Вставить(1, ГруппаДокументов);
	
	ГруппаДокументов = Новый Массив;
	ГруппаДокументов.Добавить(Метаданные.Документы.ЗаказНаПеремещение);
	ГруппаДокументов.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	
	СвязанныеДокументы.Вставить(2, ГруппаДокументов);
	
	ГруппаДокументов = Новый Массив;
	ГруппаДокументов.Добавить(Метаданные.Документы.ЗаказПоставщику);
	ГруппаДокументов.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	ГруппаДокументов.Добавить(Метаданные.Документы.ПриемкаТоваровНаХранение);
	
	СвязанныеДокументы.Вставить(3, ГруппаДокументов);
	
	
	
	ГруппаДокументов = Новый Массив;
	ГруппаДокументов.Добавить(МетаданныеОбъекта);
	
	СвязанныеДокументы.Вставить(6, ГруппаДокументов);
	
	Для каждого КлючЗначениеСвязанныхДокументов из СвязанныеДокументы Цикл
		
		Если КлючЗначениеСвязанныхДокументов.Значение.Найти(МетаданныеОбъекта) <> Неопределено Тогда
			ТекущаяГруппаДокументов = КлючЗначениеСвязанныхДокументов.Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	ВЫБОР КОГДА Док.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА Док.АдресДоставкиПеревозчика
	|		ИНАЧЕ Док.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	МАКСИМУМ(Док.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И (Док.Партнер = &ПолучательОтправитель
	|		ИЛИ &ПолучательОтправитель = НЕОПРЕДЕЛЕНО)
	|	И (Док.ПеревозчикПартнер = &Перевозчик
	|			И Док.АдресДоставкиПеревозчика <> """"
	|		ИЛИ &Перевозчик = НЕОПРЕДЕЛЕНО
	|			И Док.АдресДоставки <> """")
	|	И Док.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Док.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА Док.АдресДоставкиПеревозчика
	|		ИНАЧЕ Док.АдресДоставки
	|	КОНЕЦ
	|";
	
	ТекстЗапроса = "";
		
	Для Каждого МетаданныеДокумента Из ТекущаяГруппаДокументов Цикл
		
		ТекстПоДокументу = "";
		
		ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
		
		Если МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено Тогда
			ИмяПоляПолучатель = "Партнер";
		Иначе
			ИмяПоляПолучатель = "СкладПолучатель";
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			ИмяПоляАктуальныйОбъект = "Док.Проведен";
		Иначе
			ИмяПоляАктуальныйОбъект = "НЕ Док.ПометкаУдаления";
		КонецЕсли;
				
		ТекстПоДокументу = СтрЗаменить(ШаблонЗапроса	, "Документ.РеализацияТоваровУслуг"	, ИмяДокумента);
		ТекстПоДокументу = СтрЗаменить(ТекстПоДокументу	, "Док.Проведен"					, ИмяПоляАктуальныйОбъект);
		ТекстПоДокументу = СтрЗаменить(ТекстПоДокументу	, "Док.Партнер"						, "Док." + ИмяПоляПолучатель);
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстПоДокументу = СтрЗаменить(ТекстПоДокументу,"ПОМЕСТИТЬ ВТ_ПоследниеАдреса", "");
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|" + ТекстПоДокументу;
		Иначе
			ТекстЗапроса = ТекстПоДокументу;
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Док.Дата) УБЫВ
	|;" + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПоследниеАдреса.Ссылка) КАК Ссылка,
	|	ПоследниеАдреса.АдресДоставки
	|ПОМЕСТИТЬ ВТ_СсылкиПоАдресам
	|ИЗ #Текст_ВТ_СсылкиПоАдресам КАК ПоследниеАдреса
	|СГРУППИРОВАТЬ ПО
	|	ПоследниеАдреса.АдресДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" +
	"ВЫБРАТЬ ВТ_СсылкиПоАдресам.Ссылка,ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки,
	|	ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта),
	|	ВТ_ПоследниеАдреса.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВТ_СсылкиПоАдресам.Ссылка.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта)
	|			И &Перевозчик = НЕОПРЕДЕЛЕНО
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.ЗонаДоставки
	|		ИНАЧЕ Значение(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта)
	|			И &Перевозчик = НЕОПРЕДЕЛЕНО
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиС
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР КОГДА ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоКонечногоПункта)
	|			И &Перевозчик = НЕОПРЕДЕЛЕНО
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.СпособДоставки В (&СпособыДоставкиДоМестаПередачи)
	|			И &Перевозчик <> НЕОПРЕДЕЛЕНО
	|		ТОГДА ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ КАК ВремяДоставкиПо
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СсылкиПоАдресам КАК ВТ_СсылкиПоАдресам
	|		ПО (ВТ_СсылкиПоАдресам.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
	|
	|ГДЕ
	|	(ВЫРАЗИТЬ(ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей КАК СТРОКА(10)) = """"
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>""
	|	И ВЫРАЗИТЬ(ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(10)) = """"
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	ИЛИ
	|	(ВЫРАЗИТЬ(ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей КАК СТРОКА(10)) = """"
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей ПОДОБНО ""%}""
	|	И ВЫРАЗИТЬ(ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(10)) = """"
	|		ИЛИ ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%}"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПоследниеАдреса.Дата УБЫВ";
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	ВТ_ПоследниеАдреса.АдресДоставки КАК АдресДоставки
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Док
	|		ПО ВТ_ПоследниеАдреса.Дата = Док.Дата
	|			И (ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставки
	|				ИЛИ ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставкиПеревозчика)
	|";
	Текст_ВТ_СсылкиПоАдресам = "";
	Для Каждого МетаданныеДокумента Из ТекущаяГруппаДокументов Цикл
		ТекстПоДокументу = "";
		ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
		ТекстПоДокументу = СтрЗаменить(ШаблонЗапроса,"Документ.РеализацияТоваровУслуг", ИмяДокумента);
		Если ЗначениеЗаполнено(Текст_ВТ_СсылкиПоАдресам) Тогда
			Текст_ВТ_СсылкиПоАдресам = Текст_ВТ_СсылкиПоАдресам + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|" + ТекстПоДокументу;
		Иначе
			Текст_ВТ_СсылкиПоАдресам = ТекстПоДокументу;
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#Текст_ВТ_СсылкиПоАдресам","("+Текст_ВТ_СсылкиПоАдресам+")");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПолучательОтправитель",ПолучательОтправитель);
	Запрос.УстановитьПараметр("Перевозчик",Перевозчик);
	СпособыДоставкиДоМестаПередачи = Новый Массив;
	СпособыДоставкиДоМестаПередачи.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	СпособыДоставкиДоМестаПередачи.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	Запрос.УстановитьПараметр("СпособыДоставкиДоМестаПередачи",СпособыДоставкиДоМестаПередачи);
	
	СпособыДоставкиДоКонечногоПункта = Новый Массив;
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособыДоставкиДоКонечногоПункта.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	Запрос.УстановитьПараметр("СпособыДоставкиДоКонечногоПункта",СпособыДоставкиДоКонечногоПункта);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПоследниеРеквизитыПорученийЭкспедиторам(ПолучательОтправитель)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 3
	|	Док.АдресДоставки,
	|	МАКСИМУМ(Док.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
	|ИЗ
	|	Документ.ПоручениеЭкспедитору КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И Док.Пункт = &ПолучательОтправитель
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.АдресДоставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Док.Дата) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Док.Ссылка) КАК Ссылка,
	|	ВТ_ПоследниеАдреса.АдресДоставки
	|ПОМЕСТИТЬ ВТ_СсылкиПоАдресам
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору КАК Док
	|		ПО ВТ_ПоследниеАдреса.Дата = Док.Дата
	|			И ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПоследниеАдреса.АдресДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеАдреса.АдресДоставки КАК АдресДоставки,
	|	ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ВТ_СсылкиПоАдресам.Ссылка.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	|	ВТ_СсылкиПоАдресам.Ссылка.ЗонаДоставки КАК ЗонаДоставки,
	|	ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_СсылкиПоАдресам.Ссылка.ВремяДоставкиПо КАК ВремяДоставкиПо
	|ИЗ
	|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СсылкиПоАдресам КАК ВТ_СсылкиПоАдресам
	|		ПО (ВТ_СсылкиПоАдресам.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПоследниеАдреса.Дата УБЫВ";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ПолучательОтправитель",ПолучательОтправитель);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК АдресДоставки,
		|	КонтактнаяИнформация.Вид.Представление КАК Вид,
		|	КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		|	&ЗонаДоставки КАК ЗонаДоставки
		|ИЗ
		|	&СправочникПолучательОтправительКонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ПолучательОтправитель
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СправочникПолучательОтправительКонтактнаяИнформация", "Справочник." + ПолучательОтправитель.Метаданные().Имя + ".КонтактнаяИнформация");
	Запрос.УстановитьПараметр("ПолучательОтправитель", ПолучательОтправитель);
	Если ТипЗнч(ПолучательОтправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗонаДоставки", "КонтактнаяИнформация.Ссылка.ЗонаДоставки");
	Иначе	
		Запрос.УстановитьПараметр("ЗонаДоставки", Справочники.ЗоныДоставки.ПустаяСсылка());
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьСписокЗначений(СписокПриемник, СписокИсточник)
	
	СписокПриемник.Очистить();
	Для Каждого Элемент Из СписокИсточник Цикл
		СписокПриемник.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьПустыеСвойства(СтруктураПриемник, Источник);
	
	СтруктураЗаполнения = Новый Структура;
	Для Каждого Элемент Из СтруктураПриемник Цикл
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			СтруктураЗаполнения.Вставить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Источник);
	ЗаполнитьЗначенияСвойств(СтруктураПриемник, СтруктураЗаполнения);
	
КонецПроцедуры

Функция УстановитьВидимостьЭлементовДоставки(ЭлементыФормы, ДокОбъект, НакладнаяПоЗаказам, ПараметрыПриемки = Неопределено, ЭтоДоставкаНаНашСклад = Неопределено)
	
	Если ЭтоДоставкаНаНашСклад = Неопределено Тогда
		ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект.Ссылка); 
	КонецЕсли;
	
	Если ЭтоДоставкаНаНашСклад И ПараметрыПриемки = Неопределено Тогда
		ПараметрыПриемки = ПолучитьПараметрыПриемки(ДокОбъект,,НакладнаяПоЗаказам);
	КонецЕсли;
	
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	
	ВидимостьДоставки = Ложь;
	
	Если ИспользоватьУправлениеДоставкой Тогда
		Если ЭтоДоставкаНаНашСклад Тогда 
			ВидимостьДоставки = ПараметрыПриемки.ЭтоДоговорКонтрагента
								Или ПараметрыПриемки.СоглашениеЯвляетсяРаспоряжением
								Или ПараметрыПриемки.ДоговорЯвляетсяРаспоряжением
								Или ПараметрыПриемки.ЭтоДокументПоступление
								Или ПараметрыПриемки.ЭтоРаспоряжение;
		Иначе
			ВидимостьДоставки = Не НакладнаяПоЗаказам 
								Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ТипДоговора = ДокОбъект.ТипДоговора;
		ИспользоватьОформлениеЗакупок = (ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			Или ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
			Или ТипДоговора = Перечисления.ТипыДоговоров.Импорт);
			
		ВидимостьДоставки = ВидимостьДоставки И ИспользоватьОформлениеЗакупок;
	КонецЕсли;
	
	Если ЭлементыФормы.Найти("СтраницаДоставка") <> Неопределено Тогда
		ЭлементыФормы.СтраницаДоставка.Видимость = ВидимостьДоставки;
		ЭлементыФормы.СпособДоставки.ТолькоПросмотр = НакладнаяПоЗаказам
			И ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика;
	КонецЕсли;
	
	Возврат ВидимостьДоставки;
	
КонецФункции

Функция ЭтоРаспоряжениеПоСоглашению(ДокОбъект, ПараметрыПриемки = Неопределено)
	
	Если ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			И ДокОбъект.Свойство("Соглашение")
			И ЗначениеЗаполнено(ДокОбъект.Соглашение) Тогда
		
		Если ПараметрыПриемки = Неопределено Тогда
			
			ПараметрыПриемки = ПолучитьПараметрыПриемки(ДокОбъект);
			
		КонецЕсли;
		
		Возврат ПараметрыПриемки.СоглашениеЯвляетсяРаспоряжением И Не ПараметрыПриемки.ЭтоДокументПоступление;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДоставкаОпределенаВДоговоре(ДокОбъект)
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоДоговор  = (ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	РаспоряжениеНаДоставкуНаНашСклад = Ложь;
	
	Если ТипЗнч(ДокОбъект) = Тип("ДанныеФормыСтруктура")
		Или ТипЗнч(ДокОбъект) = Тип("Структура") Тогда
		РаспоряжениеНаДоставкуНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			И ДокОбъект.Свойство("Договор")
			И ЗначениеЗаполнено(ДокОбъект.Договор);
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ДокОбъект.Ссылка));
		ЕстьДоговор = ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеОбъекта);
		
		РаспоряжениеНаДоставкуНаНашСклад = 
			(ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			 И ЭтоДоговор)
			Или (ЕстьДоговор
				И ЗначениеЗаполнено(ДокОбъект.Договор));
	КонецЕсли;
	
	Если РаспоряжениеНаДоставкуНаНашСклад Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЭтоДоговор Тогда
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Ссылка, "СпособДоставки");
		Иначе
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Договор, "СпособДоставки");
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		СпособыДоставки = Новый Массив;

		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда
			СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
		КонецЕсли;

		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
		
		ДоставкаИспользуется = СпособыДоставки.Найти(СпособДоставки) <> Неопределено;
		
		Возврат ДоставкаИспользуется;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДоговорРаспоряжение(РаспоряженияСсылки)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(РаспоряженияСсылки, "Договор")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(РаспоряженияСсылки, "ВариантПриемкиТоваров") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РаспоряженияСсылки, "Договор, ВариантПриемкиТоваров");
		
		ДоговорИспользуетсяПриПриемке = Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(РеквизитыОбъекта.ВариантПриемкиТоваров);
		
		Если ДоговорИспользуетсяПриПриемке Тогда
			ВозвращаемоеЗначение = РеквизитыОбъекта.Договор;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьПараметрыПриемки(ОбъектСсылка, Знач ВариантПриемкиТоваров = Неопределено, НакладнаяПоЗаказам = Ложь)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектСсылка)) Тогда
		Ссылка = ОбъектСсылка;
	Иначе
		Ссылка = ОбъектСсылка.Ссылка;
	КонецЕсли;
	
	Если ВариантПриемкиТоваров = Неопределено Тогда
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			
			ВариантПриемкиТоваров = ?(ЗначениеЗаполнено(Ссылка),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВариантПриемкиТоваров"),
				Константы.ВариантПриемкиТоваров.Получить());
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ВариантПриемкиТоваров = ?(ЗначениеЗаполнено(Ссылка),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВариантПриемкиТоваров"),
				Константы.ВариантПриемкиТоваров.Получить());
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
			И ТипЗнч(ОбъектСсылка) = Тип("ДанныеФормыСтруктура") Тогда
			
			ВариантПриемкиТоваров = ОбъектСсылка.ВариантПриемкиТоваров;
			НакладнаяПоЗаказам    = ОбъектСсылка.ПоступлениеПоЗаказам;
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
			И ТипЗнч(ОбъектСсылка) = Тип("ДанныеФормыСтруктура") Тогда
			
			ВариантПриемкиТоваров = ОбъектСсылка.ВариантПриемкиТоваров;
			НакладнаяПоЗаказам    = Ложь;
			
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПриобретениеТоваровУслуг.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
			|	ПриобретениеТоваровУслуг.Ссылка                КАК Ссылка,
			|	ПриобретениеТоваровУслуг.ПоступлениеПоЗаказам  КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
			|ГДЕ
			|	ПриобретениеТоваровУслуг.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказПоставщику.ВариантПриемкиТоваров         КАК ВариантПриемкиТоваров,
			|	ЗаказПоставщику.Ссылка                        КАК Ссылка,
			|	ЛОЖЬ                                          КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.Ссылка = &Ссылка");
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
			Иначе
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ВариантПриемкиТоваров	= Выборка.ВариантПриемкиТоваров;
				НакладнаяПоЗаказам		= Выборка.ПоступлениеПоЗаказам;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура(
	"ДокументПоступление,
	|СоглашениеЯвляетсяРаспоряжением,
	|ДоговорЯвляетсяРаспоряжением,
	|ЭтоДоговорКонтрагента,
	|ЭтоРаспоряжение,
	|ЭтоДокументПоступление,
	|СкладСоглашения");
	
	СтруктураВозврата.СоглашениеЯвляетсяРаспоряжением = Ложь;
	СтруктураВозврата.ДоговорЯвляетсяРаспоряжением    = (Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(ВариантПриемкиТоваров));
	СтруктураВозврата.ЭтоДоговорКонтрагента           = (ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Договор = Неопределено;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Договор = Ссылка;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Ссылка, "Договор") Тогда
		Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Договор");
	КонецЕсли;
	
	РаспоряжениеНаПриемку = Неопределено;
	
	Если Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(ВариантПриемкиТоваров) Тогда
		
		Если ВариантПриемкиТоваров = ПредопределенноеЗначение("Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным") Тогда
			
			СтруктураВозврата.ДокументПоступление		= Тип("СправочникСсылка.СоглашенияСПоставщиками");
			РаспоряжениеНаПриемку						= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
			
		ИначеЕсли ВариантПриемкиТоваров = ПредопределенноеЗначение("Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным") Тогда
			
			СтруктураВозврата.ДокументПоступление		= Тип("СправочникСсылка.СоглашенияСПоставщиками");
			РаспоряжениеНаПриемку						= Тип("ДокументСсылка.ЗаказПоставщику");
			
		ИначеЕсли ВариантПриемкиТоваров = ПредопределенноеЗначение("Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных") Тогда 
			
			СтруктураВозврата.ДокументПоступление		= Тип("СправочникСсылка.СоглашенияСПоставщиками");
			РаспоряжениеНаПриемку						= Тип("Неопределено");
			
		КонецЕсли;
		
		СтруктураВозврата.СоглашениеЯвляетсяРаспоряжением = Истина;
		
	ИначеЕсли Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(ВариантПриемкиТоваров)
		И ДоставкаОпределенаВДоговоре(Договор) Тогда
		
		Если ВариантПриемкиТоваров = ПредопределенноеЗначение("Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных") Тогда
			
			СтруктураВозврата.ДокументПоступление		= Тип("СправочникСсылка.ДоговорыКонтрагентов");
			РаспоряжениеНаПриемку						= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
			
		ИначеЕсли ВариантПриемкиТоваров = ПредопределенноеЗначение("Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных") Тогда
			
			СтруктураВозврата.ДокументПоступление		= Тип("СправочникСсылка.ДоговорыКонтрагентов");
			РаспоряжениеНаПриемку						= Тип("ДокументСсылка.ЗаказПоставщику");
			
		ИначеЕсли ВариантПриемкиТоваров = ПредопределенноеЗначение("Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных") Тогда 
			
			СтруктураВозврата.ДокументПоступление		= Тип("СправочникСсылка.ДоговорыКонтрагентов");
			РаспоряжениеНаПриемку						= Тип("Неопределено");
			
		КонецЕсли;
		
	ИначеЕсли ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(ВариантПриемкиТоваров) Тогда
		
		СтруктураВозврата.ДокументПоступление			= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		РаспоряжениеНаПриемку							= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") И Не НакладнаяПоЗаказам Тогда
		
		СтруктураВозврата.ДокументПоступление			= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		РаспоряжениеНаПриемку							= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриемкаТоваровНаХранение") И Не НакладнаяПоЗаказам Тогда
		
		СтруктураВозврата.ДокументПоступление			= Тип("ДокументСсылка.ПриемкаТоваровНаХранение");
		РаспоряжениеНаПриемку							= Тип("ДокументСсылка.ПриемкаТоваровНаХранение");
		
	ИначеЕсли ЗакупкиСервер.РаспоряжениеНаПриемкуТовараЗаказ(ВариантПриемкиТоваров) Тогда 
		
		СтруктураВозврата.ДокументПоступление			= Тип("ДокументСсылка.ЗаказПоставщику");
		РаспоряжениеНаПриемку							= Тип("ДокументСсылка.ЗаказПоставщику");
		
	Иначе
		
		СтруктураВозврата.ДокументПоступление			= Тип("ДокументСсылка.ЗаказПоставщику");
		РаспоряжениеНаПриемку							= Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
		
	КонецЕсли;
	
	СтруктураВозврата.ЭтоРаспоряжение					= ТипЗнч(Ссылка) = РаспоряжениеНаПриемку;
	СтруктураВозврата.ЭтоДокументПоступление			= ТипЗнч(Ссылка) = СтруктураВозврата.ДокументПоступление;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьПозициюДляВставки(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая, СтрокаИсточник)
	
	Адрес = СтрокаИсточник.Адрес;
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
	Если ЗонаГруппаИлиПустая Тогда
		Для Каждого СтрокаЗона Из КоллекцияРаспоряжений Цикл
			Если СтрокаИсточник.Зона = СтрокаЗона.Зона Тогда
				Ветка = СтрокаЗона.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
				Для Каждого СтрокаРаспоряжение Из Ветка Цикл
					Если Адрес < СтрокаРаспоряжение.Адрес Тогда
						Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(СтрокаЗона), Ветка.Индекс(СтрокаРаспоряжение));
					КонецЕсли;
				КонецЦикла;
				Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(СтрокаЗона), Макс(0,Ветка.Количество()));
			ИначеЕсли Строка(СтрокаИсточник.Зона) < Строка(СтрокаЗона.Зона) Тогда
				НоваяСтрока = КоллекцияРаспоряжений.Вставить(КоллекцияРаспоряжений.Индекс(СтрокаЗона));
				НоваяСтрока.Зона  = СтрокаИсточник.Зона;
				НоваяСтрока.Адрес = СтрокаИсточник.Зона;
				НоваяСтрока.ОформлениеСтроки = 5;
				Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(НоваяСтрока), 0);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = КоллекцияРаспоряжений.Добавить();
		НоваяСтрока.Зона  = СтрокаИсточник.Зона;
		НоваяСтрока.Адрес = СтрокаИсточник.Зона;
		НоваяСтрока.ОформлениеСтроки = 5;
		Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Количество() - 1, 0);
	Иначе
		Для Каждого СтрокаРаспоряжение Из КоллекцияРаспоряжений Цикл
			Если Адрес < СтрокаРаспоряжение.Адрес Тогда
				Возврат Новый Структура("Зона, Распоряжение", 0, КоллекцияРаспоряжений.Индекс(СтрокаРаспоряжение));
			КонецЕсли;
		КонецЦикла;
		Возврат Новый Структура("Зона, Распоряжение", 0, КоллекцияРаспоряжений.Количество());
	КонецЕсли;
	
КонецФункции

Процедура РекурсивноУстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементыФормы, РедактированиеРазрешено)
	
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы")
			Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			РекурсивноУстановитьДоступностьАдресовЗаполнитьСпискиВремени(ЭлементФормы.ПодчиненныеЭлементы, РедактированиеРазрешено);
		ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
			И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			ИмяЭлемента = ВРег(ЭлементФормы.Имя);
			Если Не РедактированиеРазрешено
				И СтрНайти(ИмяЭлемента, "АДРЕС") > 0
				И ИмяЭлемента <> "АДРЕСДОСТАВКИДЛЯПОСТАВЩИКА" Тогда
				ЭлементФормы.РедактированиеТекста = Ложь;
				ЭлементФормы.КнопкаОчистки = Истина;
			КонецЕсли;
			Если СтрНайти(ИмяЭлемента, "ВРЕМЯДОСТАВКИ") > 0 Тогда
				ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(ЭлементФормы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыДоставки(ДокОбъект)
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	РеквизитыДоставки = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
	РеквизитыДоставки.Вставить(ПолучательОтправитель.ИмяПоля, ПолучательОтправитель.Значение);
	РеквизитыДоставки.Вставить("Ссылка");
	ЗаполнитьЗначенияСвойств(РеквизитыДоставки, ДокОбъект);
	РеквизитыДоставки.Вставить("ПолучательОтправитель", ПолучательОтправитель);
	
	Возврат РеквизитыДоставки;
	
КонецФункции

// Перезаполняет реквизиты доставки при изменении реквизиты формы
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы - все элементы формы, в которой производятся изменения,
//		ДокОбъект - ДанныеФормыСтруктура - объект, реквизиты которого используются при заполнении.
//
Процедура ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	Если (ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
			Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи) Тогда
			
		ДопИнфоИзмененоПользователем = ДоставкаТоваровКлиентСервер.ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект);
	    ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, ДокОбъект);
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнитьТекстРаспоряжениемИДопИнфо(Знач ДопИнфоИзменяемое, ДопИнфоДляДобавления, Распоряжение)
	
	Результат = ДопИнфоИзменяемое;
	
	Если Не ПустаяСтрока(ДопИнфоДляДобавления) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Номер, Дата");
		ТекстДопИнфо = НСтр("ru = '%Распоряжение% %Номер% от %Дата%: %ДопИнфо%'");
		
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо,"%Распоряжение%",Строка(ТипЗнч(Распоряжение)));
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо,"%Номер%",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо, "%Дата%", Формат(Реквизиты.Дата,"ДФ=dd.MM.yy"));
		ТекстДопИнфо = СтрЗаменить(ТекстДопИнфо, "%ДопИнфо%", ДопИнфоДляДобавления);
		
		Если СтрНайти(ДопИнфоИзменяемое, ТекстДопИнфо) = 0 Тогда
			Результат = Результат + ?(ЗначениеЗаполнено(Результат), Символы.ПС, "") + ТекстДопИнфо;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект)
	
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписание") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсобыеУсловияПеревозки = ДокОбъект.ОсобыеУсловияПеревозки;
	ЭлементыФормы.ОсобыеУсловияПеревозкиОписание.Доступность = ОсобыеУсловияПеревозки;
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписание1") <> Неопределено Тогда
		ЭлементыФормы.ОсобыеУсловияПеревозкиОписание1.Доступность = ОсобыеУсловияПеревозки;
	КонецЕсли;
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписание2") <> Неопределено Тогда
		ЭлементыФормы.ОсобыеУсловияПеревозкиОписание2.Доступность = ОсобыеУсловияПеревозки;
	КонецЕсли;
	Если ЭлементыФормы.Найти("ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком") <> Неопределено Тогда
		ЭлементыФормы.ОсобыеУсловияПеревозкиОписаниеДоставкаПеревозчиком.Доступность = ОсобыеУсловияПеревозки;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаРаспоряженияНаДоставку(ВыборочноеОбновление, ЕстьОрдерныйСклад, ЕстьНеОрдерныйСклад, ДоставкаПолучателям)
	
	Если ВыборочноеОбновление Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбновляемыеРаспоряжения.Распоряжение,
		|	ОбновляемыеРаспоряжения.Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения
		|ИЗ
		|	&ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО КАК Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		ТекстЗапросаВтРаспоряженияНаДоставку(ДоставкаПолучателям);
	
	ШаблонВыборкаДвиженийКРаспределению = ?(ДоставкаПолучателям,
		"ВЫБРАТЬ
		|	ТаблицыИсточника.Склад                  КАК Склад,
		|	ТаблицыИсточника.Распоряжение           КАК Распоряжение,
		|	ТаблицыИсточника.ПолучательОтправитель  КАК ПолучательОтправитель,
		|	ТаблицыИсточника.СпособДоставки         КАК СпособДоставки,
		|	ТаблицыИсточника.Зона                   КАК Зона,
		|	ТаблицыИсточника.Перевозчик             КАК Перевозчик,
		|	ТаблицыИсточника.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
		|	ТаблицыИсточника.Номенклатура           КАК Номенклатура,
		|	ТаблицыИсточника.Характеристика         КАК Характеристика,
		|	ТаблицыИсточника.Назначение             КАК Назначение,
		|	ТаблицыИсточника.Серия                  КАК Серия,
		|	ТаблицыИсточника.Количество             КАК Количество
		|ИЗ
		|	ИмяТаблицыИсточника КАК ТаблицыИсточника",
		"ВЫБРАТЬ
		|	ТаблицыИсточника.Период         КАК Период,
		|	ТаблицыИсточника.Распоряжение   КАК Распоряжение,
		|	ТаблицыИсточника.Номенклатура   КАК Номенклатура,
		|	ТаблицыИсточника.Характеристика КАК Характеристика,
		|	ТаблицыИсточника.Назначение     КАК Назначение,
		|	ТаблицыИсточника.Склад          КАК Склад,
		|	ТаблицыИсточника.Количество     КАК Количество,
		|	ТаблицыИсточника.Вес            КАК Вес,
		|	ТаблицыИсточника.Объем          КАК Объем
		|ИЗ
		|	ИмяТаблицыИсточника КАК ТаблицыИсточника");
	
	ШаблонВыборкаРаспоряжений = 
	"ВЫБРАТЬ
	|	ТаблицыИсточника.Дата                   КАК Дата,
	|	ТаблицыИсточника.Номенклатура           КАК Номенклатура,
	|	ТаблицыИсточника.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
	|	ТаблицыИсточника.Характеристика         КАК Характеристика,
	|	ТаблицыИсточника.Назначение             КАК Назначение,
	|	ТаблицыИсточника.Серия                  КАК Серия,
	|	ТаблицыИсточника.Количество             КАК Количество,
	|	ТаблицыИсточника.Вес                    КАК Вес,
	|	ТаблицыИсточника.Объем                  КАК Объем,
	|	ТаблицыИсточника.Склад                  КАК Склад,
	|	ТаблицыИсточника.Распоряжение           КАК Распоряжение,
	|	ТаблицыИсточника.ПолучательОтправитель  КАК ПолучательОтправитель,
	|	ТаблицыИсточника.ВидРаспоряжения        КАК ВидРаспоряжения,
	|	ТаблицыИсточника.Номер                  КАК Номер,
	|	ТаблицыИсточника.Адрес                  КАК Адрес,
	|	ТаблицыИсточника.АдресЗначенияПолей     КАК АдресЗначенияПолей,
	|	ТаблицыИсточника.СпособДоставки         КАК СпособДоставки,
	|	ТаблицыИсточника.Картинка               КАК Картинка,
	|	ТаблицыИсточника.Зона                   КАК Зона,
	|	ТаблицыИсточника.ЗонаПредставление      КАК ЗонаПредставление,
	|	ТаблицыИсточника.Перевозчик             КАК Перевозчик,
	|	ТаблицыИсточника.ВремяС                 КАК ВремяС,
	|	ТаблицыИсточника.ВремяПо                КАК ВремяПо,
	|	ТаблицыИсточника.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ТаблицыИсточника.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	ТаблицыИсточника.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ТаблицыИсточника.ПолеУпорядочивания     КАК ПолеУпорядочивания
	|ИЗ
	|	ИмяТаблицыИсточника КАК ТаблицыИсточника";
	
	ТекстИсточникиДвиженийКРаспределению = "";
	ТекстИсточникиРаспоряжений = "";
	
	Если ЕстьОрдерныйСклад Тогда
		
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначения.РазделительПакетаЗапросов()
			+ ?(ДоставкаПолучателям,
				ТекстЗапросаРаспоряженияНаДоставкуПолучателямПоОрдернойСхеме(),
				ТекстЗапросаРаспоряженияНаДоставкуОтОтправителейПоОрдернойСхеме());
		
		ИмяТаблицыКРаспределению = "ВтДвиженияКРаспределениюПоОрдернойСхеме";
		ИмяТаблицыРаспоряжений = ?(ДоставкаПолучателям,
			"ВтРаспоряженияНаДоставкуПолучателямПоОрдернойСхеме",
			"ВтРаспоряженияНаДоставкуОтОтправителейПоОрдернойСхеме");
		
		ТекстИсточникДвиженийКРаспределению = СтрЗаменить(ШаблонВыборкаДвиженийКРаспределению,
			"ИмяТаблицыИсточника",
			ИмяТаблицыКРаспределению);
		ТекстИсточникРаспоряжений = СтрЗаменить(ШаблонВыборкаРаспоряжений,
			"ИмяТаблицыИсточника",
			ИмяТаблицыРаспоряжений);
		
		ТекстИсточникиДвиженийКРаспределению = ТекстИсточникДвиженийКРаспределению;
		ТекстИсточникиРаспоряжений = ТекстИсточникРаспоряжений;
		
	КонецЕсли;
	
	Если ЕстьНеОрдерныйСклад Тогда
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначения.РазделительПакетаЗапросов()
			+ ?(ДоставкаПолучателям,
				ТекстЗапросаРаспоряженияНаДоставкуПолучателямБезОрдернойСхемы(),
				ТекстЗапросаРаспоряженияНаДоставкуОтОтправителейБезОрдернойСхемы());
		
		ИмяТаблицыКРаспределению = "ВтДвиженияКРаспределениюБезОрдернойСхемы";
		ИмяТаблицыРаспоряжений = ?(ДоставкаПолучателям,
			"ВтРаспоряженияНаДоставкуПолучателямБезОрдернойСхемы",
			"ВтРаспоряженияНаДоставкуОтОтправителейБезОрдернойСхемы");
		
		ТекстИсточникДвиженийКРаспределению = СтрЗаменить(ШаблонВыборкаДвиженийКРаспределению,
			"ИмяТаблицыИсточника",
			ИмяТаблицыКРаспределению);
		ТекстИсточникРаспоряжений = СтрЗаменить(ШаблонВыборкаРаспоряжений,
			"ИмяТаблицыИсточника",
			ИмяТаблицыРаспоряжений);
		
		ТекстИсточникиДвиженийКРаспределению = ?(ПустаяСтрока(ТекстИсточникиДвиженийКРаспределению),
			ТекстИсточникДвиженийКРаспределению,
			ТекстИсточникиДвиженийКРаспределению
			+ "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+ ТекстИсточникДвиженийКРаспределению);
			
		ТекстИсточникиРаспоряжений = ?(ПустаяСтрока(ТекстИсточникиРаспоряжений),
			ТекстИсточникРаспоряжений,
			ТекстИсточникиРаспоряжений
			+ "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+ ТекстИсточникРаспоряжений);
		
	КонецЕсли;
	
	ТекстИсключенныхРаспоряжений =
		"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТаблицаИсключенныхРаспоряжений
		|		ПО ТаблицаИсключенныхРаспоряжений.ЗаданиеНаПеревозку = ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|			И ТаблицыИсточника.Склад = ТаблицаИсключенныхРаспоряжений.Склад
		|			И ТаблицыИсточника.Распоряжение = ТаблицаИсключенныхРаспоряжений.Распоряжение
		|			И ТаблицыИсточника.Номенклатура = ТаблицаИсключенныхРаспоряжений.Номенклатура
		|			И ТаблицыИсточника.Характеристика = ТаблицаИсключенныхРаспоряжений.Характеристика
		|			И ТаблицыИсточника.Назначение = ТаблицаИсключенныхРаспоряжений.Назначение
		|			И &УсловиеПоСерии
		|
		|ГДЕ
		|	ТаблицаИсключенныхРаспоряжений.ЗаданиеНаПеревозку ЕСТЬ NULL";
		
	Если ДоставкаПолучателям Тогда
		УсловиеПоСерии = "ТаблицыИсточника.Серия = ТаблицаИсключенныхРаспоряжений.Серия";
	Иначе
		УсловиеПоСерии = "ИСТИНА";
	КонецЕсли;
	
	ТекстИсключенныхРаспоряжений = СтрЗаменить(ТекстИсключенныхРаспоряжений,
		"&УсловиеПоСерии",
		УсловиеПоСерии);
	
	ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению = 
		СтрЗаменить(ШаблонВыборкаДвиженийКРаспределению,
			"ИмяТаблицыИсточника",
			"("
			+ ТекстИсточникиДвиженийКРаспределению
			+ ")");
	
	ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению = ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению
		+ ТекстИсключенныхРаспоряжений;
	
	Если Не ДоставкаПолучателям Тогда
		ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению = ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению
			+
			"
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицыИсточника.Период";
	КонецЕсли;
	
	ФинальныйТекстЗапросаИсточникиРаспоряжений = 
		СтрЗаменить(ШаблонВыборкаРаспоряжений,
			"ИмяТаблицыИсточника",
			"("
			+ ТекстИсточникиРаспоряжений
			+ ")");
	
	ФинальныйТекстЗапросаИсточникиРаспоряжений = ФинальныйТекстЗапросаИсточникиРаспоряжений
		+ ТекстИсключенныхРаспоряжений;
	
	ТекстЗапросаУпорядочивание = "";
	Если Не ДоставкаПолучателям
		И ЕстьОрдерныйСклад Тогда
		ТекстЗапросаУпорядочивание = 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицыИсточника.ЗонаПредставление,
		|	ТаблицыИсточника.Зона,
		|	ТаблицыИсточника.Распоряжение,
		|	ТаблицыИсточника.Склад,
		|	ТаблицыИсточника.Номенклатура,
		|	ТаблицыИсточника.Характеристика,
		|	ТаблицыИсточника.Назначение,
		|	ТаблицыИсточника.Серия,
		|	ТаблицыИсточника.Дата";
	Иначе
		ТекстЗапросаУпорядочивание = 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицыИсточника.ЗонаПредставление,
		|	ТаблицыИсточника.Зона,
		|	ТаблицыИсточника.ПолеУпорядочивания,
		|	ТаблицыИсточника.ПолучательОтправитель,
		|	ТаблицыИсточника.Распоряжение,
		|	ТаблицыИсточника.Склад,
		|	ТаблицыИсточника.Номенклатура,
		|	ТаблицыИсточника.Характеристика,
		|	ТаблицыИсточника.Назначение,
		|	ТаблицыИсточника.Серия,
		|	ТаблицыИсточника.Дата";
	КонецЕсли;
	
	ФинальныйТекстЗапросаИсточникиРаспоряжений = ФинальныйТекстЗапросаИсточникиРаспоряжений
		+ ТекстЗапросаУпорядочивание;
	
	ТекстЗапроса = ТекстЗапроса
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ФинальныйТекстЗапросаИсточникиРаспоряжений;
		
	Если Не ВыборочноеОбновление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения",
		"ЛЕВОЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРаспоряженияНаДоставку(ДоставкаПолучателям)
	
	ТекстЗапроса = "";
	
	Если ДоставкаПолучателям Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспоряженияНаДоставку.Распоряжение КАК Распоряжение,
		|	РаспоряженияНаДоставку.Склад КАК Склад,
		|	(РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|		И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДатаСеанса) КАК ЭтоОрдерныйСклад,
		|	РаспоряженияНаДоставку.ПолучательОтправитель,
		|	РаспоряженияНаДоставку.СпособДоставки,
		|	РаспоряженияНаДоставку.Зона,
		|	РаспоряженияНаДоставку.Перевозчик,
		|	РаспоряженияНаДоставку.Дата,
		|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
		|ПОМЕСТИТЬ РаспоряженияНаДоставку
		|ИЗ
		|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
		|		ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
		|			И (ТоварыКДоставке.Склад = РаспоряженияНаДоставку.Склад)
		|			И (ТоварыКДоставке.ВсеТовары)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения
		|		ПО РаспоряженияНаДоставку.Распоряжение = ОбновляемыеРаспоряжения.Распоряжение
		|			И РаспоряженияНаДоставку.Склад = ОбновляемыеРаспоряжения.Склад
		|ГДЕ
		|	(ТоварыКДоставке.Распоряжение ЕСТЬ NULL
		|			ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПодбор
		|			ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)
		|			ИЛИ НЕ ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
		|	И РаспоряженияНаДоставку.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка)
		|	И ВЫБОР
		|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба)
		|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиКПолучателю)
		|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомКПолучателю)
		|			ИНАЧЕ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиКПолучателю)
		|					ИЛИ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомКПолучателю)
		|		КОНЕЦ
		|	И (&БезОтбораПоЗоне
		|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
		|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
		|			ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ (&Склад))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.Распоряжение,
		|	РаспоряженияНаДоставку.Склад,
		|	(РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|		И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДатаСеанса) КАК ЭтоОрдерныйСклад,
		|	РаспоряженияНаДоставку.ПолучательОтправитель,
		|	РаспоряженияНаДоставку.СпособДоставки,
		|	РаспоряженияНаДоставку.Зона,
		|	РаспоряженияНаДоставку.Перевозчик,
		|	РаспоряженияНаДоставку.Дата,
		|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
		|ИЗ
		|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗадания
		|		ПО (РаспоряженияЗадания.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
		|			И (РаспоряженияЗадания.Склад = РаспоряженияНаДоставку.Склад)
		|			И (РаспоряженияЗадания.Ссылка = &ЗаданиеНаПеревозкуПодбор)
		|			И (РаспоряженияНаДоставку.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка))
		|ГДЕ
		|	(&БезОтбораПоЗоне
		|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
		|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
		|			ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ (&Склад))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Склад";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспоряженияНаДоставку.Распоряжение КАК Распоряжение,
		|	РаспоряженияНаДоставку.Склад КАК Склад,
		|	(РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДатаСеанса) КАК ЭтоОрдерныйСклад,
		|	РаспоряженияНаДоставку.ПолучательОтправитель,
		|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение) КАК ВидРаспоряжения,
		|	РаспоряженияНаДоставку.Номер КАК Номер,
		|	РаспоряженияНаДоставку.Дата КАК Дата,
		|	РаспоряженияНаДоставку.Адрес КАК Адрес,
		|	РаспоряженияНаДоставку.АдресЗначенияПолей КАК АдресЗначенияПолей,
		|	РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
		|	РаспоряженияНаДоставку.Зона КАК Зона,
		|	РаспоряженияНаДоставку.Перевозчик КАК Перевозчик,
		|	РаспоряженияНаДоставку.ВремяС КАК ВремяС,
		|	РаспоряженияНаДоставку.ВремяПо КАК ВремяПо,
		|	РаспоряженияНаДоставку.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
		|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
		|	ВЫБОР
		|		КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(РаспоряженияНаДоставку.Перевозчик)
		|		ИНАЧЕ РаспоряженияНаДоставку.Адрес
		|	КОНЕЦ КАК ПолеУпорядочения
		|ПОМЕСТИТЬ РаспоряженияНаДоставку
		|ИЗ
		|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
		|		ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
		|			И (ТоварыКДоставке.Склад = РаспоряженияНаДоставку.Склад)
		|			И (ТоварыКДоставке.ВсеТовары)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения
		|		ПО РаспоряженияНаДоставку.Распоряжение = ОбновляемыеРаспоряжения.Распоряжение
		|			И РаспоряженияНаДоставку.Склад = ОбновляемыеРаспоряжения.Склад
		|ГДЕ
		|	(ТоварыКДоставке.Распоряжение ЕСТЬ NULL
		|			ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПодбор
		|			ИЛИ НЕ ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен)
		|	И РаспоряженияНаДоставку.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка)
		|	И ВЫБОР
		|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба)
		|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиОтОтправителя)
		|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомОтОтправителя)
		|			ИНАЧЕ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиОтОтправителя)
		|					ИЛИ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомОтОтправителя)
		|		КОНЕЦ
		|	И (&БезОтбораПоЗоне
		|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
		|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
		|			ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ (&Склад))
		|	И (НЕ (РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|			И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДатаСеанса)
		|		ИЛИ (НЕ РаспоряженияНаДоставку.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
		|			 И НЕ РаспоряженияНаДоставку.Распоряжение ССЫЛКА Справочник.ДоговорыКонтрагентов)
		|		)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.Распоряжение КАК Распоряжение,
		|	РаспоряженияНаДоставку.Склад КАК Склад,
		|	(РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДатаСеанса) КАК ЭтоОрдерныйСклад,
		|	РаспоряженияНаДоставку.ПолучательОтправитель,
		|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение) КАК ВидРаспоряжения,
		|	РаспоряженияНаДоставку.Номер,
		|	РаспоряженияНаДоставку.Дата,
		|	РаспоряженияНаДоставку.Адрес,
		|	РаспоряженияНаДоставку.АдресЗначенияПолей,
		|	РаспоряженияНаДоставку.СпособДоставки,
		|	РаспоряженияНаДоставку.Зона,
		|	РаспоряженияНаДоставку.Перевозчик,
		|	РаспоряженияНаДоставку.ВремяС,
		|	РаспоряженияНаДоставку.ВремяПо,
		|	РаспоряженияНаДоставку.ДополнительнаяИнформация,
		|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
		|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
		|	ВЫБОР
		|		КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(РаспоряженияНаДоставку.Перевозчик)
		|		ИНАЧЕ РаспоряженияНаДоставку.Адрес
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗадания
		|		ПО (РаспоряженияЗадания.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
		|			И (РаспоряженияЗадания.Склад = РаспоряженияНаДоставку.Склад)
		|			И (РаспоряженияЗадания.Ссылка = &ЗаданиеНаПеревозкуПодбор)
		|			И (РаспоряженияНаДоставку.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияДоставки.ТребуетсяДоставка))
		|ГДЕ
		|	(&БезОтбораПоЗоне
		|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
		|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
		|			ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ (&Склад))
		|	И (НЕ (РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|			И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДатаСеанса)
		|		ИЛИ (НЕ РаспоряженияНаДоставку.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
		|			 И НЕ РаспоряженияНаДоставку.Распоряжение ССЫЛКА Справочник.ДоговорыКонтрагентов)
		|		)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.Распоряжение,
		|	РаспоряженияНаДоставку.Склад,
		|	(РаспоряженияНаДоставку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|		И РаспоряженияНаДоставку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении <= &ТекущаяДатаСеанса) КАК ЭтоОрдерныйСклад,
		|	РаспоряженияНаДоставку.ПолучательОтправитель,
		|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение) КАК ВидРаспоряжения,
		|	NULL КАК Номер,
		|	РаспоряженияНаДоставку.Дата,
		|	NULL КАК Адрес,
		|	NULL КАК АдресЗначенияПолей,
		|	РаспоряженияНаДоставку.СпособДоставки,
		|	РаспоряженияНаДоставку.Зона,
		|	РаспоряженияНаДоставку.Перевозчик,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.СостоянияИРеквизитыДоставки КАК РаспоряженияНаДоставку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения
		|		ПО РаспоряженияНаДоставку.Распоряжение = ОбновляемыеРаспоряжения.Распоряжение
		|			И РаспоряженияНаДоставку.Склад = ОбновляемыеРаспоряжения.Склад
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.НашаТранспортнаяСлужба)
		|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиОтОтправителя)
		|			КОГДА &ОтборПоТипуИсполнителей = ЗНАЧЕНИЕ(Перечисление.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик)
		|				ТОГДА РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомОтОтправителя)
		|			ИНАЧЕ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиНашимиСиламиОтОтправителя)
		|					ИЛИ РаспоряженияНаДоставку.СпособДоставки В (&СпособыДоставкиПеревозчикомОтОтправителя)
		|		КОНЕЦ
		|	И (&БезОтбораПоЗоне
		|			ИЛИ РаспоряженияНаДоставку.Зона В ИЕРАРХИИ (&Зона))
		|	И (РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
		|			ИЛИ РаспоряженияНаДоставку.Склад В ИЕРАРХИИ (&Склад))
		|	И (РаспоряженияНаДоставку.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
		|		ИЛИ РаспоряженияНаДоставку.Распоряжение ССЫЛКА Справочник.ДоговорыКонтрагентов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Склад";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспоряженияНаДоставкуПолучателямПоОрдернойСхеме()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧастичноДоставленныеЗаказы.Склад             КАК Склад,
	|	ЧастичноДоставленныеЗаказы.Распоряжение      КАК Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель КАК ПолучательОтправитель,
	|	РаспоряженияНаДоставку.СпособДоставки        КАК СпособДоставки,
	|	РаспоряженияНаДоставку.Зона                  КАК Зона,
	|	РаспоряженияНаДоставку.Перевозчик            КАК Перевозчик,
	|	NULL                                         КАК ОсобыеУсловияПеревозки,
	|	ЧастичноДоставленныеЗаказы.Номенклатура      КАК Номенклатура,
	|	ЧастичноДоставленныеЗаказы.Характеристика    КАК Характеристика,
	|	ЧастичноДоставленныеЗаказы.Назначение        КАК Назначение,
	|	ЧастичноДоставленныеЗаказы.Серия             КАК Серия,
	|	СУММА(ЧастичноДоставленныеЗаказы.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтДвиженияКРаспределениюПоОрдернойСхеме
	|ИЗ
	|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ЧастичноДоставленныеЗаказы
	|		ПО РаспоряженияНаДоставку.Распоряжение = ЧастичноДоставленныеЗаказы.Распоряжение
	|			И РаспоряженияНаДоставку.Склад = ЧастичноДоставленныеЗаказы.Склад
	|			И (НЕ ЧастичноДоставленныеЗаказы.ВсеТовары)
	|			И (РаспоряженияНаДоставку.ЭтоОрдерныйСклад
	|				ИЛИ РаспоряженияНаДоставку.СпособДоставки
	|					= ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗадания
	|		ПО ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку = РаспоряженияЗадания.Ссылка
	|			И ЧастичноДоставленныеЗаказы.Распоряжение = РаспоряженияЗадания.Распоряжение
	|ГДЕ
	|	(ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку <> &ЗаданиеНаПеревозкуПодбор
	|		И ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку.Проведен
	|		И ВЫБОР
	|				КОГДА РаспоряженияЗадания.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)
	|					ТОГДА РаспоряженияЗадания.Доставлено
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			ИЛИ ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧастичноДоставленныеЗаказы.Склад,
	|	ЧастичноДоставленныеЗаказы.Распоряжение,
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	РаспоряженияНаДоставку.Зона,
	|	РаспоряженияНаДоставку.Перевозчик,
	|	ЧастичноДоставленныеЗаказы.Номенклатура,
	|	ЧастичноДоставленныеЗаказы.Характеристика,
	|	ЧастичноДоставленныеЗаказы.Назначение,
	|	ЧастичноДоставленныеЗаказы.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЧастичноДоставленныеЗаказы.Количество) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОтгрузкеДетально.ДатаОтгрузки КАК Дата,
	|	ТоварыКОтгрузкеДетально.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеДетально.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
	|	ТоварыКОтгрузкеДетально.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеДетально.Назначение КАК Назначение,
	|	ТоварыКОтгрузкеДетально.Серия КАК Серия,
	|	ТоварыКОтгрузкеДетально.Количество КАК Количество,
	|	ТоварыКОтгрузкеДетально.Вес КАК Вес,
	|	ТоварыКОтгрузкеДетально.Объем КАК Объем,
	|	ТоварыКОтгрузкеДетально.Склад КАК Склад,
	|	ТоварыКОтгрузкеДетально.Распоряжение КАК Распоряжение,
	|	ТоварыКОтгрузкеДетально.ПолучательОтправитель КАК ПолучательОтправитель,
	|	ТИПЗНАЧЕНИЯ(ТоварыКОтгрузкеДетально.Распоряжение) КАК ВидРаспоряжения,
	|	СостоянияИРеквизитыДоставки.Номер КАК Номер,
	|	СостоянияИРеквизитыДоставки.Адрес КАК Адрес,
	|	СостоянияИРеквизитыДоставки.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	ТоварыКОтгрузкеДетально.СпособДоставки КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеДетально.ЭтоПоручениеЭкспедитору
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыКОтгрузкеДетально.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))
	|					ТОГДА 0
	|				КОГДА ТоварыКОтгрузкеДетально.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозки
	|					ТОГДА 3
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка,
	|	ТоварыКОтгрузкеДетально.Зона КАК Зона,
	|	ТоварыКОтгрузкеДетально.Зона.Наименование КАК ЗонаПредставление,
	|	ТоварыКОтгрузкеДетально.Перевозчик КАК Перевозчик,
	|	СостоянияИРеквизитыДоставки.ВремяС КАК ВремяС,
	|	СостоянияИРеквизитыДоставки.ВремяПо КАК ВремяПо,
	|	СостоянияИРеквизитыДоставки.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеДетально.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТоварыКОтгрузкеДетально.Перевозчик)
	|		ИНАЧЕ СостоянияИРеквизитыДоставки.Адрес
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ВтРаспоряженияНаДоставкуПолучателямПоОрдернойСхеме
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МАКСИМУМ(
	|			ВЫБОР КОГДА
	|				НАЧАЛОПЕРИОДА(ТоварыСУчетомДоставленных.Период, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|					ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ТоварыСУчетомДоставленных.Период, ДЕНЬ)
	|			КОНЕЦ) КАК ДатаОтгрузки,
	|		ВЫБОР КОГДА
	|			НАЧАЛОПЕРИОДА(ТоварыСУчетомДоставленных.Период, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|				ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ТоварыСУчетомДоставленных.Период, ДЕНЬ)
	|		КОНЕЦ КАК ПолеГруппировкиПросроченныхДатОтгрузки,
	|		ТоварыСУчетомДоставленных.Номенклатура КАК Номенклатура,
	|		ТоварыСУчетомДоставленных.Характеристика КАК Характеристика,
	|		ТоварыСУчетомДоставленных.Назначение КАК Назначение,
	|		ТоварыСУчетомДоставленных.Серия КАК Серия,
	|		РаспоряженияНаДоставку.Склад                 КАК Склад,
	|		РаспоряженияНаДоставку.Распоряжение          КАК Распоряжение,
	|		РаспоряженияНаДоставку.ПолучательОтправитель КАК ПолучательОтправитель,
	|		РаспоряженияНаДоставку.СпособДоставки        КАК СпособДоставки,
	|		РаспоряженияНаДоставку.Зона                  КАК Зона,
	|		РаспоряженияНаДоставку.Перевозчик            КАК Перевозчик,
	|		СУММА(ТоварыСУчетомДоставленных.КОтгрузке) КАК Количество,      // Количество
	|		СУММА(ТоварыСУчетомДоставленных.КОтгрузке * &ТекстЗапросаВесУпаковки) КАК Вес,
	|		СУММА(ТоварыСУчетомДоставленных.КОтгрузке * &ТекстЗапросаОбъемУпаковки) КАК Объем,
	|		ЛОЖЬ КАК ЭтоПоручениеЭкспедитору,
	|		ТоварыСУчетомДоставленных.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК МернаяЕдиницаИзмерения
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке КАК ТоварыСУчетомДоставленных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО ТоварыСУчетомДоставленных.ДокументОтгрузки = РаспоряженияНаДоставку.Распоряжение
	|			И ТоварыСУчетомДоставленных.Склад = РаспоряженияНаДоставку.Склад
	|			И РаспоряженияНаДоставку.ЭтоОрдерныйСклад
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО ТоварыСУчетомДоставленных.Номенклатура = СправочникНоменклатура.Ссылка
	|	ГДЕ
	|		ТоварыСУчетомДоставленных.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА
	|			НАЧАЛОПЕРИОДА(ТоварыСУчетомДоставленных.Период, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|				ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ТоварыСУчетомДоставленных.Период, ДЕНЬ)
	|		КОНЕЦ,
	|		РаспоряженияНаДоставку.Склад,
	|		РаспоряженияНаДоставку.Распоряжение,
	|		РаспоряженияНаДоставку.Зона,
	|		РаспоряженияНаДоставку.ПолучательОтправитель,
	|		РаспоряженияНаДоставку.СпособДоставки,
	|		РаспоряженияНаДоставку.Перевозчик,
	|		ТоварыСУчетомДоставленных.Номенклатура,
	|		ТоварыСУчетомДоставленных.Характеристика,
	|		ТоварыСУчетомДоставленных.Назначение,
	|		ТоварыСУчетомДоставленных.Серия,
	|		ТоварыСУчетомДоставленных.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|	ИМЕЮЩИЕ
	|		СУММА(ТоварыСУчетомДоставленных.КОтгрузке) > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(РаспоряженияНаДоставку.Дата, ДЕНЬ),
	|		НАЧАЛОПЕРИОДА(РаспоряженияНаДоставку.Дата, ДЕНЬ),
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		РаспоряженияНаДоставку.Склад,
	|		РаспоряженияНаДоставку.Распоряжение,
	|		РаспоряженияНаДоставку.ПолучательОтправитель,
	|		РаспоряженияНаДоставку.СпособДоставки,
	|		РаспоряженияНаДоставку.Зона,
	|		NULL,
	|		0,
	|		0,
	|		0,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|			ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|	ГДЕ
	|		ТоварыКДоставке.Распоряжение ЕСТЬ NULL
	|		И РаспоряженияНаДоставку.СпособДоставки В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуСоСклада),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте)
	|			)
	|	) КАК ТоварыКОтгрузкеДетально
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|	ПО ТоварыКОтгрузкеДетально.Распоряжение = СостоянияИРеквизитыДоставки.Распоряжение
	|		И ТоварыКОтгрузкеДетально.Склад = СостоянияИРеквизитыДоставки.Склад";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспоряженияНаДоставкуПолучателямБезОрдернойСхемы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧастичноДоставленныеЗаказы.Склад              КАК Склад,
	|	ЧастичноДоставленныеЗаказы.Распоряжение       КАК Распоряжение,
	|	NULL                                          КАК ПолучательОтправитель,
	|	РаспоряженияНаДоставку.СпособДоставки         КАК СпособДоставки,
	|	NULL                                          КАК Зона,
	|	NULL                                          КАК Перевозчик,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	ЧастичноДоставленныеЗаказы.Номенклатура       КАК Номенклатура,
	|	ЧастичноДоставленныеЗаказы.Характеристика     КАК Характеристика,
	|	ЧастичноДоставленныеЗаказы.Назначение         КАК Назначение,
	|	ЧастичноДоставленныеЗаказы.Серия              КАК Серия,
	|	СУММА(ЧастичноДоставленныеЗаказы.Количество)  КАК Количество
	|ПОМЕСТИТЬ ВтДвиженияКРаспределениюБезОрдернойСхемы
	|ИЗ
	|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ЧастичноДоставленныеЗаказы
	|		ПО РаспоряженияНаДоставку.Распоряжение = ЧастичноДоставленныеЗаказы.Распоряжение
	|			И РаспоряженияНаДоставку.Склад = ЧастичноДоставленныеЗаказы.Склад
	|			И НЕ РаспоряженияНаДоставку.ЭтоОрдерныйСклад
	|			И (НЕ ЧастичноДоставленныеЗаказы.ВсеТовары)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК РаспоряженияЗадания
	|		ПО ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку = РаспоряженияЗадания.Ссылка
	|			И ЧастичноДоставленныеЗаказы.Распоряжение = РаспоряженияЗадания.Распоряжение
	|ГДЕ
	|	(ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку <> &ЗаданиеНаПеревозкуПодбор
	|		И ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку.Проведен
	|		И ВЫБОР
	|				КОГДА РаспоряженияЗадания.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыто)
	|					ТОГДА РаспоряженияЗадания.Доставлено
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			ИЛИ ЧастичноДоставленныеЗаказы.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧастичноДоставленныеЗаказы.Склад,
	|	ЧастичноДоставленныеЗаказы.Распоряжение,
	|	РаспоряженияНаДоставку.СпособДоставки,
	|	РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|	ЧастичноДоставленныеЗаказы.Номенклатура,
	|	ЧастичноДоставленныеЗаказы.Характеристика,
	|	ЧастичноДоставленныеЗаказы.Назначение,
	|	ЧастичноДоставленныеЗаказы.Серия
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЗ.Дата КАК Дата,
	|	ВЗ.Номенклатура КАК Номенклатура,
	|	ВЗ.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК МернаяЕдиницаИзмерения,
	|	ВЗ.Характеристика КАК Характеристика,
	|	ВЗ.Назначение КАК Назначение,
	|	ВЗ.Серия КАК Серия,
	|	ВЗ.Количество КАК Количество,
	|	ВЗ.Количество * &ТекстЗапросаВесУпаковки КАК Вес,
	|	ВЗ.Количество * &ТекстЗапросаОбъемУпаковки КАК Объем,
	|	ВЗ.Склад КАК Склад,
	|	ВЗ.Распоряжение КАК Распоряжение,
	|	ДопРеквизиты.ПолучательОтправитель КАК ПолучательОтправитель,
	|	ТИПЗНАЧЕНИЯ(ВЗ.Распоряжение) КАК ВидРаспоряжения,
	|	ДопРеквизиты.Номер КАК Номер,
	|	ДопРеквизиты.Адрес КАК Адрес,
	|	ДопРеквизиты.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	ВЗ.СпособДоставки КАК СпособДоставки,
	|	ВЗ.Картинка КАК Картинка,
	|	ЕСТЬNULL(ДопРеквизиты.Зона, ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)) КАК Зона,
	|	ДопРеквизиты.Зона.Наименование КАК ЗонаПредставление,
	|	ДопРеквизиты.Перевозчик КАК Перевозчик,
	|	ДопРеквизиты.ВремяС КАК ВремяС,
	|	ДопРеквизиты.ВремяПо КАК ВремяПо,
	|	ДопРеквизиты.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ДопРеквизиты.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	ДопРеквизиты.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ВЫБОР
	|		КОГДА ВЗ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ДопРеквизиты.Перевозчик)
	|		ИНАЧЕ ДопРеквизиты.Адрес
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ВтРаспоряженияНаДоставкуПолучателямБезОрдернойСхемы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ) КАК Дата,
	|		РаспоряженияНаДоставку.Распоряжение КАК Распоряжение,
	|		РаспоряженияНаДоставку.Склад КАК Склад,
	|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|		ТоварыКОтгрузке.Назначение КАК Назначение,
	|		ТоварыКОтгрузке.Серия КАК Серия,
	|		РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
	|		СУММА(ТоварыКОтгрузке.КОтгрузке) КАК Количество,
	|		ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))
	|				ТОГДА 0
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ + ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Картинка
	|	ИЗ
	|		РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|			ПО РаспоряженияНаДоставку.Распоряжение = ТоварыКОтгрузке.ДокументОтгрузки
	|				И РаспоряженияНаДоставку.Склад = ТоварыКОтгрузке.Склад
	|				И НЕ РаспоряженияНаДоставку.ЭтоОрдерныйСклад
	|	ГДЕ
	|		ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ТоварыКОтгрузке.Период, ДЕНЬ),
	|		РаспоряженияНаДоставку.Распоряжение,
	|		РаспоряженияНаДоставку.Склад,
	|		ТоварыКОтгрузке.Номенклатура,
	|		ТоварыКОтгрузке.Характеристика,
	|		ТоварыКОтгрузке.Назначение,
	|		ТоварыКОтгрузке.Серия,
	|		РаспоряженияНаДоставку.СпособДоставки,
	|		ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))
	|				ТОГДА 0
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ + ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ТоварыКОтгрузке.КОтгрузке) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(РаспоряженияНаДоставку.Дата, ДЕНЬ),
	|		РаспоряженияНаДоставку.Распоряжение,
	|		РаспоряженияНаДоставку.Склад,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		РаспоряженияНаДоставку.СпособДоставки,
	|		NULL,
	|		4
	|	ИЗ
	|		РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|			ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|	ГДЕ
	|		РаспоряженияНаДоставку.СпособДоставки В
	|			(ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуСоСклада),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|		И ТоварыКДоставке.Распоряжение ЕСТЬ NULL
	|	) КАК ВЗ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК ДопРеквизиты
	|	ПО ВЗ.Распоряжение = ДопРеквизиты.Распоряжение
	|		И ВЗ.Склад = ДопРеквизиты.Склад
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО ВЗ.Номенклатура = СправочникНоменклатура.Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспоряженияНаДоставкуОтОтправителейПоОрдернойСхеме()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКПоступлениюОстатки.Склад КАК Склад,
	|	ТоварыКПоступлениюОстатки.ДокументПоступления КАК Распоряжение,
	|	ТоварыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика КАК Характеристика,
	|	ТоварыКПоступлениюОстатки.Назначение КАК Назначение,
	|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток КАК Количество
	|ПОМЕСТИТЬ ТоварыКДоставкеОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			(Склад, ДокументПоступления) В
	|				(ВЫБРАТЬ
	|					РаспоряженияНаДоставку.Склад,
	|					РаспоряженияНаДоставку.Распоряжение
	|				ИЗ
	|					РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|				ГДЕ
	|					РаспоряженияНаДоставку.ЭтоОрдерныйСклад)) КАК ТоварыКПоступлениюОстатки
	|ГДЕ
	|	ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДетальныеДанные.Склад КАК Склад,
	|	ДетальныеДанные.Распоряжение КАК Распоряжение,
	|	ДетальныеДанные.Номенклатура КАК Номенклатура,
	|	ДетальныеДанные.Характеристика КАК Характеристика,
	|	ДетальныеДанные.Назначение КАК Назначение,
	|	СУММА(ДетальныеДанные.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСУчетомДоставленных
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКДоставкеОстатки.Склад КАК Склад,
	|		ТоварыКДоставкеОстатки.Распоряжение КАК Распоряжение,
	|		ТоварыКДоставкеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставкеОстатки.Характеристика КАК Характеристика,
	|		ТоварыКДоставкеОстатки.Назначение КАК Назначение,
	|		ТоварыКДоставкеОстатки.Количество КАК Количество
	|	ИЗ
	|		ТоварыКДоставкеОстатки КАК ТоварыКДоставкеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКДоставкеОстатки.Склад,
	|		ТоварыКДоставкеОстатки.Распоряжение,
	|		ТоварыКДоставкеОстатки.Номенклатура,
	|		ТоварыКДоставкеОстатки.Характеристика,
	|		ТоварыКДоставкеОстатки.Назначение,
	|		-ЕСТЬNULL(ТоварыКДоставке.Количество, 0)
	|	ИЗ
	|		ТоварыКДоставкеОстатки КАК ТоварыКДоставкеОстатки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|			ПО ТоварыКДоставкеОстатки.Склад = ТоварыКДоставке.Склад
	|				И ТоварыКДоставкеОстатки.Распоряжение = ТоварыКДоставке.Распоряжение
	|				И ТоварыКДоставкеОстатки.Номенклатура = ТоварыКДоставке.Номенклатура
	|				И ТоварыКДоставкеОстатки.Характеристика = ТоварыКДоставке.Характеристика
	|				И ТоварыКДоставкеОстатки.Назначение = ТоварыКДоставке.Назначение
	|	ГДЕ
	|		(ТоварыКДоставке.ЗаданиеНаПеревозку <> &ЗаданиеНаПеревозкуПодбор
	|					И ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен
	|				ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПустаяСсылка)
	|		И НЕ ТоварыКДоставке.ВсеТовары) КАК ДетальныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ДетальныеДанные.Склад,
	|	ДетальныеДанные.Распоряжение,
	|	ДетальныеДанные.Номенклатура,
	|	ДетальныеДанные.Характеристика,
	|	ДетальныеДанные.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДетальныеДанные.Количество) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКПоступлению.Период КАК Период,
	|	ТоварыКПоступлению.ДокументПоступления КАК Распоряжение,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Назначение КАК Назначение,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	СУММА(ЕСТЬNULL(ТоварыКПоступлению.КОформлениюОрдеров, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТоварыКПоступлению.КОформлениюОрдеров, 0) * &ТекстЗапросаВесУпаковки) КАК Вес,
	|	СУММА(ЕСТЬNULL(ТоварыКПоступлению.КОформлениюОрдеров, 0) * &ТекстЗапросаОбъемУпаковки) КАК Объем
	|ПОМЕСТИТЬ ВтДвиженияКРаспределениюПоОрдернойСхеме
	|ИЗ
	|	ТоварыСУчетомДоставленных КАК ТоварыСУчетомДоставленных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|		ПО ТоварыСУчетомДоставленных.Распоряжение = ТоварыКПоступлению.ДокументПоступления
	|			И ТоварыСУчетомДоставленных.Склад = ТоварыКПоступлению.Склад
	|			И ТоварыСУчетомДоставленных.Номенклатура = ТоварыКПоступлению.Номенклатура
	|			И ТоварыСУчетомДоставленных.Характеристика = ТоварыКПоступлению.Характеристика
	|			И ТоварыСУчетомДоставленных.Назначение = ТоварыКПоступлению.Назначение
	|			И (ТоварыКПоступлению.Период >= &ДатаОтбора)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыСУчетомДоставленных.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Период,
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Назначение,
	|	ТоварыКПоступлению.Склад
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКПоступлению.КОформлениюОрдеров) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СостоянияИРеквизитыДоставки.ПолучательОтправитель, НЕОПРЕДЕЛЕНО) КАК ПолучательОтправитель,
	|	ТоварыСУчетомДоставленных.Номенклатура КАК Номенклатура,
	|	ТоварыСУчетомДоставленных.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК МернаяЕдиницаИзмерения,
	|	ТоварыСУчетомДоставленных.Характеристика КАК Характеристика,
	|	ТоварыСУчетомДоставленных.Назначение КАК Назначение,
	|	ТоварыСУчетомДоставленных.Количество КАК Количество,
	|	ТоварыСУчетомДоставленных.Количество * &ТекстЗапросаВесУпаковки КАК Вес,
	|	ТоварыСУчетомДоставленных.Количество * &ТекстЗапросаОбъемУпаковки КАК Объем,
	|	ТоварыСУчетомДоставленных.Склад КАК Склад,
	|	ТоварыСУчетомДоставленных.Распоряжение КАК Распоряжение,
	|	ТИПЗНАЧЕНИЯ(ТоварыСУчетомДоставленных.Распоряжение) КАК ВидРаспоряжения,
	|	СостоянияИРеквизитыДоставки.Номер КАК Номер,
	|	СостоянияИРеквизитыДоставки.Адрес КАК Адрес,
	|	СостоянияИРеквизитыДоставки.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	СостоянияИРеквизитыДоставки.СпособДоставки КАК СпособДоставки,
	|	СостоянияИРеквизитыДоставки.Зона КАК Зона,
	|	СостоянияИРеквизитыДоставки.Зона.Наименование КАК ЗонаПредставление,
	|	СостоянияИРеквизитыДоставки.Перевозчик КАК Перевозчик,
	|	СостоянияИРеквизитыДоставки.ВремяС КАК ВремяС,
	|	СостоянияИРеквизитыДоставки.ВремяПо КАК ВремяПо,
	|	ВЫБОР
	|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада))
	|			ТОГДА 0
	|		КОГДА СостоянияИРеквизитыДоставки.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозки
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка,
	|	СостоянияИРеквизитыДоставки.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	СостоянияИРеквизитыДоставки.Дата КАК Дата,
	|	NULL КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ВтРаспоряженияНаДоставкуОтОтправителейПоОрдернойСхеме
	|ИЗ
	|	ТоварыСУчетомДоставленных КАК ТоварыСУчетомДоставленных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО ТоварыСУчетомДоставленных.Склад = СостоянияИРеквизитыДоставки.Склад
	|			И ТоварыСУчетомДоставленных.Распоряжение = СостоянияИРеквизитыДоставки.Распоряжение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыСУчетомДоставленных.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаспоряженияНаДоставку.ПолучательОтправитель,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	0,
	|	РаспоряженияНаДоставку.Склад,
	|	РаспоряженияНаДоставку.Распоряжение,
	|	ТИПЗНАЧЕНИЯ(РаспоряженияНаДоставку.Распоряжение),
	|	СостоянияИРеквизитыДоставки.Номер,
	|	СостоянияИРеквизитыДоставки.Адрес,
	|	СостоянияИРеквизитыДоставки.АдресЗначенияПолей,
	|	СостоянияИРеквизитыДоставки.СпособДоставки,
	|	СостоянияИРеквизитыДоставки.Зона,
	|	СостоянияИРеквизитыДоставки.Зона.Наименование,
	|	СостоянияИРеквизитыДоставки.Перевозчик,
	|	СостоянияИРеквизитыДоставки.ВремяС,
	|	СостоянияИРеквизитыДоставки.ВремяПо,
	|	4,
	|	СостоянияИРеквизитыДоставки.ДополнительнаяИнформация,
	|	СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозки,
	|	СостоянияИРеквизитыДоставки.ОсобыеУсловияПеревозкиОписание,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаДоставку.Распоряжение ССЫЛКА Документ.ПоручениеЭкспедитору
	|			ТОГДА НАЧАЛОПЕРИОДА(СостоянияИРеквизитыДоставки.Дата, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	РаспоряженияНаДоставку.ПолеУпорядочения
	|ИЗ
	|	РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|		ПО РаспоряженияНаДоставку.Распоряжение = ТоварыКДоставке.Распоряжение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИРеквизитыДоставки КАК СостоянияИРеквизитыДоставки
	|		ПО РаспоряженияНаДоставку.Распоряжение = СостоянияИРеквизитыДоставки.Распоряжение
	|ГДЕ
	|	ТоварыКДоставке.Распоряжение ЕСТЬ NULL
	|	И РаспоряженияНаДоставку.СпособДоставки В (
	|		ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуНаСклад),
	|		ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспоряженияНаДоставкуОтОтправителейБезОрдернойСхемы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Распоряжение КАК Распоряжение,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.КоличествоВДоставке) > СУММА(ВложенныйЗапрос.КоличествоПринято)
	|			ТОГДА СУММА(ВложенныйЗапрос.КоличествоВДоставке)
	|		ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПринято)
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ТоварыКВычетуИзДоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|		ТоварыКДоставке.Склад КАК Склад,
	|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставке.Характеристика КАК Характеристика,
	|		ТоварыКДоставке.Назначение КАК Назначение,
	|		ТоварыКДоставке.Количество КАК КоличествоВДоставке,
	|		0 КАК КоличествоПринято
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение
	|				И ТоварыКДоставке.Склад = РаспоряженияНаДоставку.Склад
	|				И НЕ РаспоряженияНаДоставку.ЭтоОрдерныйСклад
	|				И (НЕ ТоварыКДоставке.ВсеТовары)
	|	ГДЕ
	|		(ТоварыКДоставке.ЗаданиеНаПеревозку <> &ЗаданиеНаПеревозкуПодбор
	|					И ТоварыКДоставке.ЗаданиеНаПеревозку.Проведен
	|				ИЛИ ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозкуПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКПоступлениюОбороты.ДокументПоступления,
	|		ТоварыКПоступлениюОбороты.Склад,
	|		ТоварыКПоступлениюОбороты.Номенклатура,
	|		ТоварыКПоступлениюОбороты.Характеристика,
	|		ТоварыКПоступлениюОбороты.Назначение,
	|		0,
	|		ТоварыКПоступлениюОбороты.КОформлениюОрдеровРасход
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Обороты(, , , 
	|			(ДокументПоступления, Склад) В (
	|				ВЫБРАТЬ
	|					РаспоряженияНаДоставку.Распоряжение,
	|					РаспоряженияНаДоставку.Склад
	|				ИЗ
	|					РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|				ГДЕ
	|					НЕ РаспоряженияНаДоставку.ЭтоОрдерныйСклад)
	|			) КАК ТоварыКПоступлениюОбороты
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Распоряжение,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВложенныйЗапрос.Распоряжение,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	NULL КАК Период,
	|	NULL КАК Распоряжение,
	|	NULL КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	NULL КАК Назначение,
	|	NULL КАК Склад,
	|	0 КАК Количество,
	|	0 КАК Вес,
	|	0 КАК Объем
	|ПОМЕСТИТЬ ВтДвиженияКРаспределениюБезОрдернойСхемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДетальныеДанные.Дата КАК Дата,
	|	ДетальныеДанные.Номенклатура КАК Номенклатура,
	|	ДетальныеДанные.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
	|	ДетальныеДанные.Характеристика КАК Характеристика,
	|	ДетальныеДанные.Назначение КАК Назначение,
	|	ДетальныеДанные.Серия КАК Серия,
	|	ДетальныеДанные.НачальнаяПотребностьПоДатам - ДетальныеДанные.ВычетТоварыКДоставке КАК Количество,
	|	ДетальныеДанные.НачальнаяПотребностьПоДатамВес - ДетальныеДанные.ВычетТоварыКДоставкеВес КАК Вес,
	|	ДетальныеДанные.НачальнаяПотребностьПоДатамОбъем - ДетальныеДанные.ВычетТоварыКДоставкеОбъем КАК Объем,
	|	ДетальныеДанные.Склад КАК Склад,
	|	ДетальныеДанные.Распоряжение КАК Распоряжение,
	|	ДетальныеДанные.ПолучательОтправитель КАК ПолучательОтправитель,
	|	ДетальныеДанные.ВидРаспоряжения КАК ВидРаспоряжения,
	|	ДетальныеДанные.Номер КАК Номер,
	|	ДетальныеДанные.Адрес КАК Адрес,
	|	ДетальныеДанные.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|	ДетальныеДанные.СпособДоставки КАК СпособДоставки,
	|	ДетальныеДанные.Картинка КАК Картинка,
	|	ДетальныеДанные.Зона КАК Зона,
	|	ДетальныеДанные.ЗонаПредставление КАК ЗонаПредставление,
	|	ДетальныеДанные.Перевозчик КАК Перевозчик,
	|	ДетальныеДанные.ВремяС КАК ВремяС,
	|	ДетальныеДанные.ВремяПо КАК ВремяПо,
	|	ДетальныеДанные.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ДетальныеДанные.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	ДетальныеДанные.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ДетальныеДанные.ПолеУпорядочения КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ВтРаспоряженияНаДоставкуОтОтправителейБезОрдернойСхемы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТоварыКДоставкеПоРегистраторам.Период, ДЕНЬ) КАК Дата,
	|		ТоварыКДоставкеПоРегистраторам.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставкеПоРегистраторам.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук) КАК МернаяЕдиницаИзмерения,
	|		ТоварыКДоставкеПоРегистраторам.Характеристика КАК Характеристика,
	|		ТоварыКДоставкеПоРегистраторам.Назначение КАК Назначение,
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|		ТоварыКДоставкеПоРегистраторам.КОформлениюОрдеровПриход КАК НачальнаяПотребностьПоДатам,
	|		ТоварыКДоставкеПоРегистраторам.КОформлениюОрдеровПриход * &ТекстЗапросаВесУпаковки КАК НачальнаяПотребностьПоДатамВес,
	|		ТоварыКДоставкеПоРегистраторам.КОформлениюОрдеровПриход * &ТекстЗапросаОбъемУпаковки КАК НачальнаяПотребностьПоДатамОбъем,
	|		ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) КАК ВычетТоварыКДоставке,
	|		ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаВесУпаковки КАК ВычетТоварыКДоставкеВес,
	|		ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаОбъемУпаковки КАК ВычетТоварыКДоставкеОбъем,
	|		РаспоряженияНаДоставку.Склад КАК Склад,
	|		РаспоряженияНаДоставку.Распоряжение КАК Распоряжение,
	|		РаспоряженияНаДоставку.ПолучательОтправитель КАК ПолучательОтправитель,
	|		РаспоряженияНаДоставку.ВидРаспоряжения КАК ВидРаспоряжения,
	|		РаспоряженияНаДоставку.Номер КАК Номер,
	|		РаспоряженияНаДоставку.Адрес КАК Адрес,
	|		РаспоряженияНаДоставку.АдресЗначенияПолей КАК АдресЗначенияПолей,
	|		РаспоряженияНаДоставку.СпособДоставки КАК СпособДоставки,
	|		ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|				ТОГДА 0
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуНаСклад), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ + ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Картинка,
	|		РаспоряженияНаДоставку.Зона КАК Зона,
	|		РаспоряженияНаДоставку.Зона.Наименование КАК ЗонаПредставление,
	|		РаспоряженияНаДоставку.Перевозчик КАК Перевозчик,
	|		РаспоряженияНаДоставку.ВремяС КАК ВремяС,
	|		РаспоряженияНаДоставку.ВремяПо КАК ВремяПо,
	|		РаспоряженияНаДоставку.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|		РаспоряженияНаДоставку.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|		РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|		РаспоряженияНаДоставку.ПолеУпорядочения КАК ПолеУпорядочения
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Обороты(, , Регистратор, 
	|			(ДокументПоступления, Склад) В (
	|				ВЫБРАТЬ
	|					РаспоряженияНаДоставку.Распоряжение,
	|					РаспоряженияНаДоставку.Склад
	|				ИЗ
	|					РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|				ГДЕ
	|					НЕ РаспоряженияНаДоставку.ЭтоОрдерныйСклад
	|				)
	|			) КАК ТоварыКДоставкеПоРегистраторам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКВычетуИзДоставки КАК ТоварыКВычетуИзДоставки
	|			ПО (ТоварыКВычетуИзДоставки.Распоряжение = ТоварыКДоставкеПоРегистраторам.Регистратор)
	|				И (ТоварыКВычетуИзДоставки.Склад = ТоварыКДоставкеПоРегистраторам.Склад)
	|				И (ТоварыКВычетуИзДоставки.Номенклатура = ТоварыКДоставкеПоРегистраторам.Номенклатура)
	|				И (ТоварыКВычетуИзДоставки.Характеристика = ТоварыКДоставкеПоРегистраторам.Характеристика)
	|				И (ТоварыКВычетуИзДоставки.Назначение = ТоварыКДоставкеПоРегистраторам.Назначение)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО (СправочникНоменклатура.Ссылка = ТоварыКДоставкеПоРегистраторам.Номенклатура)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ПО ТоварыКДоставкеПоРегистраторам.Регистратор = РаспоряженияНаДоставку.Распоряжение
	|				И ТоварыКДоставкеПоРегистраторам.Склад = РаспоряженияНаДоставку.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗоныДоставки КАК Зоны
	|			ПО (Зоны.Ссылка = РаспоряженияНаДоставку.Зона)
	|	ГДЕ
	|		ТоварыКДоставкеПоРегистраторам.КОформлениюОрдеровПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТоварыКДоставкеПоДням.Период, ДЕНЬ),
	|		ТоварыКДоставкеПоДням.Номенклатура,
	|		ТоварыКДоставкеПоДням.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
	|		ТоварыКДоставкеПоДням.Характеристика,
	|		ТоварыКДоставкеПоДням.Назначение,
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|		ТоварыКДоставкеПоДням.Количество,
	|		ТоварыКДоставкеПоДням.Количество * &ТекстЗапросаВесУпаковки,
	|		ТоварыКДоставкеПоДням.Количество * &ТекстЗапросаОбъемУпаковки,
	|		ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0),
	|		ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаВесУпаковки,
	|		ЕСТЬNULL(ТоварыКВычетуИзДоставки.Количество, 0) * &ТекстЗапросаОбъемУпаковки,
	|		РаспоряженияНаДоставку.Склад,
	|		РаспоряженияНаДоставку.Распоряжение,
	|		РаспоряженияНаДоставку.ПолучательОтправитель,
	|		РаспоряженияНаДоставку.ВидРаспоряжения,
	|		РаспоряженияНаДоставку.Номер,
	|		РаспоряженияНаДоставку.Адрес,
	|		РаспоряженияНаДоставку.АдресЗначенияПолей,
	|		РаспоряженияНаДоставку.СпособДоставки,
	|		ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада))
	|				ТОГДА 0
	|			КОГДА РаспоряженияНаДоставку.СпособДоставки В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи))
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ + ВЫБОР
	|			КОГДА РаспоряженияНаДоставку.ОсобыеУсловияПеревозки
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		РаспоряженияНаДоставку.Зона,
	|		РаспоряженияНаДоставку.Зона.Наименование,
	|		РаспоряженияНаДоставку.Перевозчик,
	|		РаспоряженияНаДоставку.ВремяС,
	|		РаспоряженияНаДоставку.ВремяПо,
	|		РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|		РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|		РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|		РаспоряженияНаДоставку.ПолеУпорядочения
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Т.Ссылка КАК Ссылка,
	|			Т.ДатаПоступления КАК Период,
	|			Т.Склад КАК Склад,
	|			Т.Номенклатура КАК Номенклатура,
	|			Т.Характеристика КАК Характеристика,
	|			Т.Назначение КАК Назначение,
	|			СУММА(Т.Количество) КАК Количество
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК Т
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|				ПО Т.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|					И Т.Склад = РаспоряженияНаДоставку.Склад
	|					И (НЕ Т.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|						ИЛИ Т.ДатаПоступления < Т.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.Ссылка,
	|			Т.ДатаПоступления,
	|			Т.Склад,
	|			Т.Номенклатура,
	|			Т.Характеристика,
	|			Т.Назначение
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Т.Ссылка,
	|			Т.Ссылка.Дата,
	|			Т.Склад,
	|			Т.Номенклатура,
	|			Т.Характеристика,
	|			Т.Назначение,
	|			СУММА(Т.Количество)
	|		ИЗ
	|			Документ.ПриобретениеТоваровУслуг.Товары КАК Т
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|				ПО Т.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|					И Т.Склад = РаспоряженияНаДоставку.Склад
	|					И (НЕ Т.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|						ИЛИ Т.Ссылка.Дата < Т.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.Ссылка,
	|			Т.Склад,
	|			Т.Номенклатура,
	|			Т.Характеристика,
	|			Т.Назначение,
	|			Т.Ссылка.Дата
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Т.Ссылка,
	|			Т.Ссылка.Дата,
	|			Т.Склад,
	|			Т.Номенклатура,
	|			Т.Характеристика,
	|			Т.Назначение,
	|			СУММА(Т.Количество)
	|		ИЗ
	|			Документ.ПриемкаТоваровНаХранение.Товары КАК Т
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|				ПО Т.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|					И Т.Склад = РаспоряженияНаДоставку.Склад
	|					И (НЕ Т.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|						ИЛИ Т.Ссылка.Дата < Т.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Т.Ссылка,
	|			Т.Склад,
	|			Т.Номенклатура,
	|			Т.Характеристика,
	|			Т.Назначение,
	|			Т.Ссылка.Дата
	|	) КАК ТоварыКДоставкеПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКВычетуИзДоставки КАК ТоварыКВычетуИзДоставки
	|		ПО (ТоварыКВычетуИзДоставки.Распоряжение = ТоварыКДоставкеПоДням.Ссылка)
	|			И (ТоварыКВычетуИзДоставки.Склад = ТоварыКДоставкеПоДням.Склад)
	|			И (ТоварыКВычетуИзДоставки.Номенклатура = ТоварыКДоставкеПоДням.Номенклатура)
	|			И (ТоварыКВычетуИзДоставки.Характеристика = ТоварыКДоставкеПоДням.Характеристика)
	|			И (ТоварыКВычетуИзДоставки.Назначение = ТоварыКДоставкеПоДням.Назначение)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ТоварыКДоставкеПоДням.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|		ПО ТоварыКДоставкеПоДням.Ссылка = РаспоряженияНаДоставку.Распоряжение
	|			И ТоварыКДоставкеПоДням.Склад = РаспоряженияНаДоставку.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(РаспоряженияНаДоставку.Дата, ДЕНЬ),
	|		НЕОПРЕДЕЛЕНО,
	|		ЛОЖЬ,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		РаспоряженияНаДоставку.Склад,
	|		РаспоряженияНаДоставку.Распоряжение,
	|		РаспоряженияНаДоставку.ПолучательОтправитель,
	|		РаспоряженияНаДоставку.ВидРаспоряжения,
	|		РаспоряженияНаДоставку.Номер,
	|		РаспоряженияНаДоставку.Адрес,
	|		РаспоряженияНаДоставку.АдресЗначенияПолей,
	|		РаспоряженияНаДоставку.СпособДоставки,
	|		4,
	|		РаспоряженияНаДоставку.Зона,
	|		РаспоряженияНаДоставку.Зона.Наименование,
	|		РаспоряженияНаДоставку.Перевозчик,
	|		РаспоряженияНаДоставку.ВремяС,
	|		РаспоряженияНаДоставку.ВремяПо,
	|		РаспоряженияНаДоставку.ДополнительнаяИнформация,
	|		РаспоряженияНаДоставку.ОсобыеУсловияПеревозки,
	|		РаспоряженияНаДоставку.ОсобыеУсловияПеревозкиОписание,
	|		РаспоряженияНаДоставку.ПолеУпорядочения
	|	ИЗ
	|		РаспоряженияНаДоставку КАК РаспоряженияНаДоставку
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|			ПО (ТоварыКДоставке.Распоряжение = РаспоряженияНаДоставку.Распоряжение)
	|	ГДЕ
	|		РаспоряженияНаДоставку.СпособДоставки В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуНаСклад),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПоручениеЭкспедиторуВПункте))
	|		И ТоварыКДоставке.Распоряжение ЕСТЬ NULL
	|	) КАК ДетальныеДанные
	|ГДЕ
	|	(ДетальныеДанные.НачальнаяПотребностьПоДатам = 0
	|			ИЛИ ДетальныеДанные.НачальнаяПотребностьПоДатам - ДетальныеДанные.ВычетТоварыКДоставке > 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СпособыДоставкиНашимиСиламиКПолучателю()
	
	СпособыДоставкиНашимиСиламиКПолучателю = Новый Массив;
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада);
	СпособыДоставкиНашимиСиламиКПолучателю.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	
	Возврат СпособыДоставкиНашимиСиламиКПолучателю;
	
КонецФункции

Функция СпособыДоставкиПеревозчикомКПолучателю()
	
	СпособыДоставкиПеревозчикомКПолучателю = Новый Массив;
	СпособыДоставкиПеревозчикомКПолучателю.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчика);
	СпособыДоставкиПеревозчикомКПолучателю.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	СпособыДоставкиПеревозчикомКПолучателю.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	
	Возврат СпособыДоставкиПеревозчикомКПолучателю;	
	
КонецФункции

Функция СпособыДоставкиНашимиСиламиОтОтправителя()
	
	СпособыДоставкиНашимиСиламиОтОтправителя = Новый Массив;
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад);
	СпособыДоставкиНашимиСиламиОтОтправителя.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	
	Возврат СпособыДоставкиНашимиСиламиОтОтправителя;
	
КонецФункции

Функция СпособыДоставкиПеревозчикомОтОтправителя()
	
	СпособыДоставкиПеревозчикомОтОтправителя = Новый Массив;
	СпособыДоставкиПеревозчикомОтОтправителя.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
	СпособыДоставкиПеревозчикомОтОтправителя.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
	СпособыДоставкиПеревозчикомОтОтправителя.Добавить(Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте);
	Возврат СпособыДоставкиПеревозчикомОтОтправителя;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьУдалитьИзВременногоХранилища(Адрес) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Адрес);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
