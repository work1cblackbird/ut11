#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	МеханизмыДокумента.Добавить("ИнтеграцияЕГАИС");
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                            КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Ссылка,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.ЧекККМВозврат.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	(НЕ &Архивный)
	|	И ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|	И (ТаблицаАкцизныеМарки.ЧастичноеВыбытиеВариантУчета = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
	|		ИЛИ ТаблицаАкцизныеМарки.ВыбытиеБутылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// БГосИС 1.3 работает на старом механизме проведения и в документах, проводимых библиотекой, требует адаптационный код
//
// Параметры:
//   ДокументСсылка         - ДокументСсылка.ЧекККМ - допроводимый документ
//   ДополнительныеСвойства - Структура             - возвращаемые таблицы движений для допроведения
//   Регистры               - Неопределено          - не используется в адаптационных целях
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.ЧекККМВозврат.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос,
																							ТекстыЗапроса,
																							Неопределено);
	
	ДополнительныеСвойства = Новый Структура("ТаблицыДляДвижений", ТаблицыДляДвижений);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМВозврат - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Объект.ОрганизацияЕГАИС = ИнтеграцияЕГАИСУТ.ОрганизацияЕГАИСПоОрганизацииИСкладу(Объект.Организация, Объект.Склад);
	Объект.АкцизныеМарки.Очистить();
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	ИнтеграцияЕГАИСУТ.СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	
	// КМ-3
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиентЛокализация.ПечатьКМ3";
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКМ3";
	КомандаПечати.Идентификатор = "КМ3";
	КомандаПечати.Представление = НСтр("ru = 'КМ-3'");

	// Товарный чек
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТоварногоЧека";
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Фискализация

//++ Локализация

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация, КассаККМ");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, "Склад, Подразделение");
	
	НалогообложениеНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(РеквизитыДокумента.Организация, ТекущаяДатаСеанса(), РеквизитыКассыККМ.Склад, РеквизитыКассыККМ.Подразделение).НалогообложениеНДСРозничнойПродажи;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
		СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	Иначе
		СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Получить основные данные по таблице товаров для чека о розничной продаже
//
// Параметры:
//  ДокументСсылка - ДокументОбъект.ЧекККМВозврат - Документ.
// 
// Возвращаемое значение:
//  Массив - Данные о продажах.
//
Функция ПредметыРасчетовПоДокументу(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ЦенаВключаетНДС,Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	Товары.НоменклатураЕГАИС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.КоличествоУпаковок <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки,
	|	АкцизныеМарки.НомерСтроки,
	|	АкцизныеМарки.КодАкцизнойМарки,
	|	АкцизныеМарки.АкцизнаяМарка                  КАК ШтрихкодУпаковки,
	|	АкцизныеМарки.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
	|	АкцизныеМарки.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
	|	АкцизныеМарки.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	АкцизныеМарки.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество
	|ПОМЕСТИТЬ ТаблицаАкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМВозврат.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки,
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриоритетыШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетыШтрихКода КАК ПриоритетыШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриоритетыШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриоритетыШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриоритетыШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриоритетыШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|
	|	СпрНоменклатура.ТипНоменклатуры                    КАК ТипНоменклатуры,
	|	СпрНоменклатура.ПодакцизныйТовар                   КАК ПодакцизныйТовар,
	|	СпрНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
	|	СпрНоменклатура.ОсобенностьУчета                   КАК ОсобенностьУчета,
	|
	|	ВЫБОР КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			И ЕСТЬNULL(Товары.Характеристика.Принципал, СпрНоменклатура.Принципал) <> НЕОПРЕДЕЛЕНО
	|			И ЕСТЬNULL(Товары.Характеристика.Принципал, СпрНоменклатура.Принципал) <> &Организация
	|	ТОГДА ЕСТЬNULL(Товары.Характеристика.Контрагент, СпрНоменклатура.Контрагент)
	|	ИНАЧЕ ЕСТЬNULL(СпрНоменклатура.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ                                              КАК Агент,
	|	
	|	СпрНоменклатура.КодТРУ                             КАК КодТРУ,
	|	
	|	СпрНоменклатура.НаименованиеПолное       КАК НоменклатураНаименование,
	|	Товары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	Товары.Упаковка.Наименование             КАК УпаковкаНаименование,
	|	СпрНоменклатура.ЕдиницаИзмерения         КАК БазоваяУпаковка,
	|	
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА Товары.Цена
	|		КОГДА Товары.КоличествоУпаковок = 0 И &ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		КОГДА Товары.КоличествоУпаковок = 0 И НЕ &ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма + Товары.СуммаНДС
	|		ИНАЧЕ (Товары.Сумма + Товары.СуммаНДС) / Товары.КоличествоУпаковок
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК СуммаСНДС,
	|	0 КАК СуммаСкидки,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	ВЫБОР 
	|		КОГДА НЕ СпрНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|			ТОГДА ВЫБОР 
	|				КОГДА Товары.Штрихкод <> """"
	|					ТОГДА Товары.Штрихкод
	|					ИНАЧЕ ШтрихкодыНоменклатуры.Штрихкод
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Штрихкод,
	|	СпрНоменклатура.КодВидаНоменклатурнойКлассификации
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = Товары.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО    ШтрихкодыНоменклатуры.Номенклатура   = Товары.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка       = Товары.Упаковка
	|
	|;
	|УНИЧТОЖИТЬ Штрихкоды;
	|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры;
	|УНИЧТОЖИТЬ ПриоритетыШтрихКода;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.НомерСтроки КАК НомерСтроки,
	|	Серии.Серия КАК СерияТаблицыСерий,
	|	Серии.Количество КАК КоличествоУпаковок,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ЧекККМВозврат.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	Товары.ТипНоменклатуры,
	|	Товары.ПодакцизныйТовар,
	|	Товары.АлкогольнаяПродукцияВоВскрытойТаре,
	|	Товары.ОсобенностьУчета,
	|	Товары.Агент,
	|	Товары.КодТРУ,
	|	Товары.НоменклатураНаименование,
	|	Товары.ХарактеристикаНаименование,
	|	Товары.УпаковкаНаименование,
	|	Товары.БазоваяУпаковка,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.СуммаСНДС,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСкидки,
	|	Товары.Штрихкод,
	|	Товары.КодВидаНоменклатурнойКлассификации
	|ИЗ Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Ссылка"			, ДокументСсылка);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС" , РеквизитыДокумента.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("Организация" , РеквизитыДокумента.Организация);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
	Если НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ДанныеКИЗиЕГАИС(ДокументСсылка, Товары);
	КонецЕсли;
	
	ДанныеДляИСМП = РозничныеПродажиЛокализация.ДанныеДляИСМП(ДокументСсылка, МенеджерВременныхТаблиц);
	ФормированиеФискальныхЧековСерверПереопределяемый.ТаблицаТоваровСРаспределениемКодовМаркировкиИСМП(Товары, ДанныеДляИСМП);
	
	Возврат Товары;
	
КонецФункции

// Возвращает массив товаров ФСС к оплате, находящиеся в документе.
// 
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - Товары в документе
//  ЦенаВключаетНДС - Булево - Цена включает НДС
// 
// Возвращаемое значение:
//  Массив ИЗ Структура - массив товаров ФСС в документе к оплате:
//	* Номенклатура - СправочникСсылка.Номенклатура -
//	* КодТовараТРУ - Строка -
//	* Количество - Число -
//	* Цена - Число -
//	* Сумма - Число -
//
Функция ТоварыФССВДокументеКОплате(ТаблицаТоваров, ЦенаВключаетНДС) Экспорт
	
	ТоварыФССКОплате = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.КоличествоУпаковок,
	|	ЧекККМТовары.Цена КАК Цена,
	|	ЧекККМТовары.Сумма КАК Сумма,
	|	ЧекККМТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ЧекККМТовары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Номенклатура.КодТРУ КАК КодТРУ,
	|	ЧекККМТовары.КоличествоУпаковок КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Цена
	|		КОГДА ЧекККМТовары.КоличествоУпаковок = 0 И &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма
	|		КОГДА ЧекККМТовары.КоличествоУпаковок = 0 И НЕ &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|		ИНАЧЕ (ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС) / ЧекККМТовары.КоличествоУпаковок
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА ЧекККМТовары.Сумма
	|		ИНАЧЕ ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|	КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Сумма
	|ИЗ
	|	ТаблицаТоваров КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Номенклатура.КодТРУ <> """"
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаЗапроса.КодТРУ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТоварнаяПозиция = Новый Структура();
		ТоварнаяПозиция.Вставить("Номенклатура", ВыборкаЗапроса.Номенклатура);
		ТоварнаяПозиция.Вставить("КодТовараТРУ", ВыборкаЗапроса.КодТРУ);
		ТоварнаяПозиция.Вставить("Количество"  , ВыборкаЗапроса.Количество);
		ТоварнаяПозиция.Вставить("Цена"        , ВыборкаЗапроса.Цена);
		ТоварнаяПозиция.Вставить("Сумма"       , ВыборкаЗапроса.Сумма);
		ТоварыФССКОплате.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	Возврат ТоварыФССКОплате;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

#Область Фискализация

// Получить данные для передачи кодов КИЗ и ЕГАИС в ККТ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекККМВозврат - Документ.
//	ДанныеПоТоварам - ТаблицаЗначений - Данные по номенклатуре для вывода в позиции чека
//
Процедура ДанныеКИЗиЕГАИС(ДокументСсылка, ДанныеПоТоварам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.КоличествоУпаковок <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Серия КАК Серия,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ЧекККМВозврат.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	АкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка
	|ПОМЕСТИТЬ АкцизныеМарки
	|ИЗ
	|	Документ.ЧекККМВозврат.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	СправочникСерии.НомерКиЗГИСМ КАК ШтрихкодСтрока,
	|	Серии.Количество КАК Количество
	|ИЗ
	|	Серии КАК Серии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерии
	|		ПО Серии.Серия = СправочникСерии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Серии.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СправочникСерии.НомерКиЗГИСМ КАК ШтрихкодСтрока,
	|	Товары.Количество
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерии
	|		ПО Товары.Серия = СправочникСерии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	(НЕ Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		И СправочникНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха))";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	
	ТоварыРазобранные = ДанныеПоТоварам.СкопироватьКолонки();
	
	Для Каждого СтрокаТовары Из ДанныеПоТоварам Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		
		МассивМаркированныхТоваров = ШтрихкодыУпаковок.НайтиСтроки(СтруктураОтбора);
		
		Если МассивМаркированныхТоваров.Количество() = 0 Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрокМассиваМаркированныхТоваров = МассивМаркированныхТоваров.Количество(); 
		ТекущаяСтрока = 1;
		
		Пока КоличествоСтрокМассиваМаркированныхТоваров >= ТекущаяСтрока Цикл
			Если СтрокаТовары.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			МаркированныйТовар = МассивМаркированныхТоваров[КоличествоСтрокМассиваМаркированныхТоваров - ТекущаяСтрока];
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			
			СтрокаТоварыРазобранные.Штрихкод = МаркированныйТовар.ШтрихкодСтрока;
			
			СтрокаТоварыРазобранные.КоличествоУпаковок 	= 1;
			СтрокаТоварыРазобранные.Количество      	= 1;
			СтрокаТоварыРазобранные.СуммаСкидки 		= Окр(СтрокаТовары.СуммаСкидки / СтрокаТовары.Количество, 2);
			СтрокаТоварыРазобранные.СуммаНДС 			= Окр(СтрокаТовары.СуммаНДС / СтрокаТовары.Количество, 2);
			СтрокаТоварыРазобранные.СуммаСНДС 			= Окр(СтрокаТовары.СуммаСНДС / СтрокаТовары.Количество, 2);
			СтрокаТоварыРазобранные.Цена	 			= СтрокаТоварыРазобранные.СуммаСНДС - СтрокаТоварыРазобранные.СуммаСкидки;
			
			СтрокаТовары.Количество 	    = СтрокаТовары.Количество - СтрокаТоварыРазобранные.Количество;
			СтрокаТовары.СуммаСкидки 		= СтрокаТовары.СуммаСкидки - СтрокаТоварыРазобранные.СуммаСкидки;
			СтрокаТовары.СуммаНДС 			= СтрокаТовары.СуммаНДС - СтрокаТоварыРазобранные.СуммаНДС;
			СтрокаТовары.СуммаСНДС 			= СтрокаТовары.СуммаСНДС - СтрокаТоварыРазобранные.СуммаСНДС;
			
			ШтрихкодыУпаковок.Удалить(МаркированныйТовар);
			
			ТекущаяСтрока = ТекущаяСтрока + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеПоТоварам = ТоварыРазобранные;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
//
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//
// Возвращаемое значение:
//  см. ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций.
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - см. ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧекаНаВозврат(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
//
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции


Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМВозврат КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.ОрганизацияЕГАИС = КлассификаторОрганизацийЕГАИС.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	-Товары.Цена                   КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.Номенклатура            КАК Номенклатура,
		|	Товары.Характеристика          КАК Характеристика,
		|	Товары.Серия                   КАК Серия,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем,
		|	ЕСТЬNULL(Товары.Номенклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.КоличествоУпаковок <> 0
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
		|	null                                         КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                      КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка                 КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки              КАК ШтрихкодРодительскойУпаковки,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
		|	ТабличнаяЧасть.ВыбытиеБутылки                 КАК ВыбытиеБутылки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМВозврат.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка = Неопределено;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМВозврат КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.Склад = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	Товары.Цена                    КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.Номенклатура            КАК Номенклатура,
		|	Товары.Характеристика          КАК Характеристика,
		|	Товары.Серия                   КАК Серия,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем,
		|	ЕСТЬNULL(Товары.Номенклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.КоличествоУпаковок <> 0
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
		|	null                                         КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                      КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка                 КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки              КАК ШтрихкодРодительскойУпаковки,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеКоличество     КАК ЧастичноеВыбытиеКоличество,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеВариантУчета   КАК ЧастичноеВыбытиеВариантУчета,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеНоменклатура   КАК ЧастичноеВыбытиеНоменклатура,
		|	ТабличнаяЧасть.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
		|	ТабличнаяЧасть.ВыбытиеБутылки                 КАК ВыбытиеБутылки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМВозврат.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка = Неопределено;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса,
		МенеджерВременныхТаблиц, Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	
КонецФункции

// Создает элементы справочника ШтрихкодыУпаковокТоваров и заполняет табличную часть АкцизныеМарки исходящей ТТН.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЧекККМВозврат - Чек на возврат.
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  СтруктураДействий - Структура - действия с табличной частью после заполнения.
//  КэшированныеЗначения - Неопределено, Структура - кэшированные значения
//
// Возвращаемое значение:
//  Структура - результат заполнения:
//   * КоличествоМаркированныхТоваров - Число - количество маркированных товаров,
//   * ВложенныеШтрихкоды - Массив - вложенные штрихкоды,
//   * ХешСумма - Строка - хеш-сумма,
//   * РодительУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - добавленная родительская упаковка.
Функция ЗаполнитьАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ШтрихкодыУпаковок, СтруктураДействий, КэшированныеЗначения=Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КоличествоМаркированныхТоваров", 0);
	ВозвращаемоеЗначение.Вставить("ВложенныеШтрихкоды",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("ХешСумма",                       "");
	ВозвращаемоеЗначение.Вставить("РодительУпаковки",               Неопределено);
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками = СтруктураДействий.СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействийСИзмененнымиСтроками = СтруктураДействий.СтруктураДействийСИзмененнымиСтроками;
	
	ДанныеДляРасчетаХешСуммы = Новый СписокЗначений;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Результат = ЗаполнитьАкцизныеМарки(
			ДокументОбъект,
			СтрокаДерева,
			ШтрихкодыУпаковок,
			СтруктураДействий,
			КэшированныеЗначения);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		ПараметрыОтбора.Вставить("ХешСумма", Результат.ХешСумма);
		НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда
			
			ШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0].Ссылка;
			
		Иначе
			
			ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
			ДанныеНовойУпаковки.Штрихкод     = СтрокаДерева.Штрихкод;
			ДанныеНовойУпаковки.ХешСумма     = Результат.ХешСумма;
			ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
			ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
			ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				ДанныеНовойУпаковки.Количество = Результат.КоличествоМаркированныхТоваров;
			КонецЕсли;
			
			ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки, Результат.ВложенныеШтрихкоды);
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ДанныеДляРасчетаХешСуммы.Добавить(СтрокаДерева.Штрихкод);
		Иначе
			ДанныеДляРасчетаХешСуммы.Добавить(Результат.ХешСумма);
		КонецЕсли;
		
		ВозвращаемоеЗначение.ВложенныеШтрихкоды.Добавить(ШтрихкодУпаковки);
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ВозвращаемоеЗначение.КоличествоМаркированныхТоваров = ВозвращаемоеЗначение.КоличествоМаркированныхТоваров + 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат.РодительУпаковки) Тогда
			ВозвращаемоеЗначение.РодительУпаковки = ШтрихкодУпаковки;
		Иначе
			ВозвращаемоеЗначение.РодительУпаковки = Результат.РодительУпаковки;
		КонецЕсли;
		
		Если СтрокаДерева.Родитель = Неопределено
			Или (ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений")
			И ДеревоУпаковок.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки) Тогда
			ИдентификаторСтроки = СтрокаДерева.ИдентификаторСтроки;
			Если НЕ ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
				ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;
			КоличествоАкцизныхМарок = ?(СтрокаДерева.КоличествоАкцизныхМарок=0, 1, СтрокаДерева.КоличествоАкцизныхМарок);
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
			
			СтрокиАкцизы = ДокументОбъект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			Если СтрокиАкцизы.Количество() = 0 Тогда
				СтрокаТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.Добавить();
				СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = ШтрихкодУпаковки;
				СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
				СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = ИдентификаторСтроки;
				Если ШтрихкодУпаковки <> ВозвращаемоеЗначение.РодительУпаковки Тогда
					СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки = ВозвращаемоеЗначение.РодительУпаковки;
				КонецЕсли;
			КонецЕсли;
			
			СтрокиТовары = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТовары.Количество() = 0 Тогда
				СтрокаТЧТовары = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаДерева,,"Серия");
				СтрокаТЧТовары.ИдентификаторСтроки = ИдентификаторСтроки;
				СтрокаТЧТовары.НоменклатураЕГАИС = СтрокаДерева.АлкогольнаяПродукция;
				СтрокаТЧТовары.Количество = КоличествоАкцизныхМарок;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействийСДобавленнымиСтроками, КэшированныеЗначения);
				Если СтрокаТЧТовары.СтатусУказанияСерий > 10 Тогда
					СтрокаТЧТовары.Серия = СтрокаДерева.Серия;
				КонецЕсли;
			Иначе
				СтрокаТЧТовары = СтрокиТовары[0];
				Если СтрокаТЧТовары.Количество < КоличествоАкцизныхМарок Тогда
					СтрокаТЧТовары.Количество = КоличествоАкцизныхМарок;
				КонецЕсли;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействийСИзмененнымиСтроками, КэшированныеЗначения);
			КонецЕсли;
			Если СтрокаТЧТовары.СтатусУказанияСерий < 10 Тогда
				СтруктураПоискаСерий = Новый Структура("Номенклатура, Характеристика, Серия");
				СтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(СтруктураПоискаСерий);
				Если СтрокиСерии.Количество() = 0 Тогда
					СтрокаТЧСерии = ДокументОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧСерии, СтруктураПоискаСерий);
					СтрокаТЧСерии.Количество = КоличествоАкцизныхМарок;
				Иначе
					СтрокаТЧСерии = СтрокиСерии[0];
					Если СтрокаТЧСерии.Количество < КоличествоАкцизныхМарок Тогда
						СтрокаТЧСерии.Количество = КоличествоАкцизныхМарок;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений") Тогда
		Если ДанныеДляРасчетаХешСуммы.Количество() <> 0 Тогда
			ВозвращаемоеЗначение.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.НоменклатураЕГАИС                                   КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                               КАК Серия,
	|	ТабличнаяЧасть.Количество                                          КАК Количество
	|ПОМЕСТИТЬ
	|	ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                               КАК Серия,
	|	ТабличнаяЧасть.Количество                                          КАК Количество
	|ПОМЕСТИТЬ
	|	ВТСерии
	|ИЗ
	|	&Серии КАК ТабличнаяЧасть;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция                                КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ЕСТЬNULL(ТаблицаСерии.Серия, ТабличнаяЧасть.Серия)                 КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)                    КАК Справка2,
	|	СУММА(ЕСТЬNULL(ТаблицаСерии.Количество,ТабличнаяЧасть.Количество)) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)               КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСерии КАК ТаблицаСерии
	|		ПО ТаблицаСерии.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТабличнаяЧасть.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка
	|ГДЕ
	|	Не СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И СправочникНоменклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Характеристика,
	|	ЕСТЬNULL(ТаблицаСерии.Серия, ТабличнаяЧасть.Серия),
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Параметры:
//	ДокументСсылка - см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу.ДокументСсылка
//	ЗаполнитьСправки2ИзРегистра - см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу.
//
// Возвращаемое значение:
//	см. ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу
//
Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Возврат ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, ЗаполнитьСправки2ИзРегистра);
	
КонецФункции

// Функция предназначена для обработки считанного штрихкода для разного вида упаковки и видов продукции.
// Параметры:
//	Форма - ФормаКлиентскогоПриложения
//	ДанныеШтрихкода - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ДанныеШтрихкода
//	ПараметрыСканирования - см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.ПараметрыСканирования
//	ВложенныеШтрихкоды - см. ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции.ДеревоУпаковок
//
// Возвращаемое значение:
//	см. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		Результат = ОбработатьДанныеШтрихкодаЛогистическойУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
		Результат = ОбработатьДанныеШтрихкодаСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов.
//
// Параметры:
//	Форма - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаПотребительскойУпаковки.Форма
//	ДанныеШтрихкода - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаПотребительскойУпаковки.ДанныеШтрихкода
//	ПараметрыСканирования - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаПотребительскойУпаковки.ПараметрыСканирования
//
// Возвращаемое значение:
//	см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаПотребительскойУпаковки
//
Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Возврат ЧекККМЛокализация.ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецФункции

// Параметры:
//	Форма - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции.Форма
//	ДанныеШтрихкода - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции.ДанныеШтрихкода
//	ВложенныеШтрихкоды - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции.ВложенныеШтрихкоды
//	ПараметрыСканирования - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции.ПараметрыСканирования
//	
// Возвращаемое значение:
//	см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции
//
Функция ОбработатьДанныеШтрихкодаЛогистическойУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Возврат ЧекККМЛокализация.ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
КонецФункции

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца.
//
// Параметры:
//	Форма - ЧекККМЛокализация.ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией.Форма
//	ДанныеШтрихкода - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией.ДанныеШтрихкода
//	ПараметрыСканирования - см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией.ПараметрыСканирования
//
// Возвращаемое значение:
//	см. ЧекККМЛокализация.ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией
//
Функция ОбработатьДанныеШтрихкодаСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования)
	
	Возврат ЧекККМЛокализация.ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	ЧекККМЛокализация.ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня);
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#КонецОбласти
