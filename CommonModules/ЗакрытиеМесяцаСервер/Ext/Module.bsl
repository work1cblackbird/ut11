
#Область ПрограммныйИнтерфейс

#Область ОписаниеДереваЭтапов

#Область ОписаниеГруппЭтапов

// Заполнение таблицы групп этапов закрытия месяца.
// Элементы данной таблицы являются элементами верхнего уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// ТаблицаГруппЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияГруппЭтапов 
//
Процедура ЗаполнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов) Экспорт
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРучныеОперации();
	НоваяСтрока.Наименование = НСтр("ru='Данные операции требуется выполнить вручную'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыВзаиморасчеты();
	НоваяСтрока.Наименование = НСтр("ru='Взаиморасчеты и переоценка валютных средств'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеЗатрат();
	НоваяСтрока.Наименование = НСтр("ru='Формирование затрат'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыПроизводственныеЗатраты();
	НоваяСтрока.Наименование = НСтр("ru='Распределение производственных затрат'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыСебестоимость();
	НоваяСтрока.Наименование = НСтр("ru='Расчет себестоимости'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	НоваяСтрока.Наименование = НСтр("ru='Формирование финансового результата'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРегламентированныйУчет();
	НоваяСтрока.Наименование = НСтр("ru='Регламентированный учет'");

	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыБлокировкаОтИзменений();
	НоваяСтрока.Наименование = НСтр("ru='Блокировка от изменений'");
	
	ЗакрытиеМесяцаЛокализация.ДополнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов);
	
КонецПроцедуры

#Область ИдентификаторыГруппЭтапов

// В данной области расположены идентификаторы групп этапов закрытия месяца.
// Для групп этапов используются строковые идентификаторы, т.к. для них нет потребности в ссылочных идентификаторах.

// Идентификатор группы ручные операции.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы ручные операции
Функция ИдентификаторГруппыРучныеОперации() Экспорт
	Возврат "РучныеОперации";
КонецФункции

// Идентификатор группы взаиморасчеты.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы взаиморасчеты
Функция ИдентификаторГруппыВзаиморасчеты() Экспорт
	Возврат "Взаиморасчеты";
КонецФункции

// Идентификатор группы формирование затрат.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы формирование затрат
Функция ИдентификаторГруппыФормированиеЗатрат() Экспорт
	Возврат "ФормированиеЗатрат";
КонецФункции

// Идентификатор группы производственные затраты.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы производственные затраты
Функция ИдентификаторГруппыПроизводственныеЗатраты() Экспорт
	Возврат "ПроизводственныеЗатраты";
КонецФункции

// Идентификатор группы себестоимость.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы себестоимость
Функция ИдентификаторГруппыСебестоимость() Экспорт
	Возврат "Себестоимость";
КонецФункции

// Идентификатор группы формирование финансового результата.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы формирование финансового результата
Функция ИдентификаторГруппыФормированиеФинансовогоРезультата() Экспорт
	Возврат "ФормированиеФинансовогоРезультата";
КонецФункции

// Идентификатор группы регламентированный учет.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы регламентированный учет
Функция ИдентификаторГруппыРегламентированныйУчет() Экспорт
	Возврат "РегламентированныйУчет";
КонецФункции

// Идентификатор группы международный учет.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы международный учет
Функция ИдентификаторГруппыМеждународныйУчет() Экспорт
	Возврат "МеждународныйУчет";
КонецФункции

// Идентификатор группы блокировка от изменений.
// 
// Возвращаемое значение:
//  Строка - Идентификатор группы блокировка от изменений
Функция ИдентификаторГруппыБлокировкаОтИзменений() Экспорт
	Возврат "БлокировкаОтИзменений";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОписаниеЭтапов

// Заполнение таблицы этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
//
Процедура ЗаполнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов) Экспорт

	#Область Группа_РучныеОперации
	
	ТекущийРодитель = ИдентификаторГруппыРучныеОперации();
	
	// Переход на новые режимы учета.
	ДобавитьЭтап_ПереходНаНовыеРежимыРаботы(ТаблицаЭтапов, ТекущийРодитель);
	
	// Ошибки в данных.
	РасчетСебестоимостиКорректировкаСтоимости.ДобавитьЭтап_ОчисткаДвиженийПриОтключенномУчетеСебестоимости(ТаблицаЭтапов, ТекущийРодитель);
	ЗапасыСервер.ДобавитьЭтап_ИсправлениеДублейВидовЗапасов(ТаблицаЭтапов, ТекущийРодитель);
	ДобавитьЭтап_ИсправлениеОшибокВИсходныхДанных(ТаблицаЭтапов, ТекущийРодитель);
	
	// Невыполненные регламентные операции.
	ЗапасыСервер.ДобавитьЭтап_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ТаблицаЭтапов,ТекущийРодитель);
	ДоходыИРасходыСервер.ДобавитьЭтап_РаспределениеРасходовБудущихПериодов(ТаблицаЭтапов, ТекущийРодитель);
	ЗапасыСервер.ДобавитьЭтап_ОформлениеПередачТоваров(ТаблицаЭтапов,ТекущийРодитель);
	ЗапасыСервер.ДобавитьЭтап_ОформлениеОстатковТоваровКПередаче(ТаблицаЭтапов,ТекущийРодитель);
	ЗапасыСервер.ДобавитьЭтап_ОформлениеВыкупаТоваров(ТаблицаЭтапов,ТекущийРодитель);
	ЗапасыСервер.ДобавитьЭтап_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ТаблицаЭтапов,ТекущийРодитель);
	ЗапасыСервер.ДобавитьЭтап_ОформлениеОтчетовКомитентамОСписании(ТаблицаЭтапов,ТекущийРодитель);
	ФинансовыеИнструменты.ДобавитьЭтап_НачисленияПоКредитамДепозитамИВыданнымЗаймам(ТаблицаЭтапов,ТекущийРодитель);
	ДенежныеСредстваСервер.ДобавитьЭтап_ПроверкаКурсовЗачетаВАвансовыхОтчетах(ТаблицаЭтапов, ТекущийРодитель);
	#КонецОбласти
	
	#Область Группа_Взаиморасчеты
	
	ТекущийРодитель = ИдентификаторГруппыВзаиморасчеты();
	
	ВзаиморасчетыСервер.ДобавитьЭтап_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаЭтапов,ТекущийРодитель);
	
	Документы.РасчетПроцентныхРасходовДисконтирования.ДобавитьЭтап_РасчетПроцентныхРасходовДисконтирования(ТаблицаЭтапов, ТекущийРодитель);
	
	Документы.РасчетКурсовыхРазниц.ДобавитьЭтап_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ТаблицаЭтапов,ТекущийРодитель);
	
	Документы.РасчетКурсовыхРазниц.ДобавитьЭтап_ПереоценкаРасчетовСКомитентомКомиссионером(ТаблицаЭтапов,ТекущийРодитель);
	
	#КонецОбласти
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеЗатрат();
	
	#КонецОбласти

	#Область Группа_ПроизводственныеЗатраты
	
	ТекущийРодитель = ИдентификаторГруппыПроизводственныеЗатраты();
	ЗатратыСервер.ДобавитьЭтап_НастройкаРаспределенияРасходов(ТаблицаЭтапов, ТекущийРодитель);
	ЗатратыСервер.ДобавитьЭтап_НастройкаРаспределенияРасходовВручную(ТаблицаЭтапов, ТекущийРодитель);
	
	#КонецОбласти
	
	#Область Группа_Себестоимость
	
	ТекущийРодитель = ИдентификаторГруппыСебестоимость();
	
	РасчетСебестоимостиКорректировкаСтоимости.ДобавитьЭтап_РасчетПартийИСебестоимости(ТаблицаЭтапов, ТекущийРодитель);
	УчетНДСУП.ДобавитьЭтап_РаспределениеНДС(ТаблицаЭтапов,ТекущийРодитель);
	
	#КонецОбласти
	
	#Область Группа_ФормированиеФинансовогоРезультата
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	
	
	УчетНДСУП.ДобавитьЭтап_ФормированиеДвиженийПоНДС(ТаблицаЭтапов, ТекущийРодитель);
			

	Документы.РаспределениеПрочихЗатрат.ДобавитьЭтап_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(
		ТаблицаЭтапов,
		ТекущийРодитель);
		
	Документы.РаспределениеПрочихЗатрат.ДобавитьЭтап_РаспределениеРасходовПоНаправлениямДеятельности(
		ТаблицаЭтапов,
		ТекущийРодитель);
	
	Документы.РаспределениеДоходовПоНаправлениямДеятельности.ДобавитьЭтап_РаспределениеДоходовПоНаправлениямДеятельности(
		ТаблицаЭтапов,
		ТекущийРодитель);

	#КонецОбласти
	
	
	#Область Группа_БлокировкаОтИзменений
	
	ТекущийРодитель = ИдентификаторГруппыБлокировкаОтИзменений();
	
	ДобавитьЭтап_ЗаблокироватьОтИзменений(ТаблицаЭтапов, ТекущийРодитель);
	
	#КонецОбласти
	
	ЗакрытиеМесяцаЛокализация.ДополнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

// В данной области расположены:
// 1. Тексты процедур-обработчиков событий этапов закрытия месяца.
// Сами этапы описываются в ЗаполнитьОписаниеЭтаповЗакрытияМесяца().
// 2. Описание проверок состояния системы, относящиеся к этапам закрытия месяца.
// Описания проверок используется в ЗаполнитьПроверкиДляРегистрации().
// 3. Тексты процедур-проверок состояния учета.

#Область Группа_РучныеОперации

#Область ПереходНаНовыеРежимыРаботы

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ПереходНаНовыеРежимыРаботы(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереходНаНовыеРежимыУчета);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.Информационный = Истина;
	НоваяСтрока.ТекстПодробнее     = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереходНаНовыеРежимыРаботы");
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьСправкуОбъекта(
		Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.ФормаСправкиПереходНаНовыеРежимыРаботы);
	
КонецПроцедуры

Процедура Использование_ПереходНаНовыеРежимыРаботы(ПараметрыОбработчика) Экспорт
	
	СтатусПоУмолчанию = Перечисления.ВажностьПроблемыУчета.Предупреждение;
	ТекстГиперссылкиПоУмолчанию = НСтр("ru='Перейти'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	//++ Локализация
	
	// Партионный учет.
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") И РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21() Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru='Партионный учет (версия 2.2)'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.ФинансовыйРезультатИКонтроллинг.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	//-- Локализация
	
	// Взаиморасчеты.
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru='Взаиморасчеты (онлайн)'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.Казначейство.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	
	
	// Учетные политики: метод оценки стоимости ФИФО (взвешенная).
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		ШаблонТекста = НСтр("ru='Для организации ""%1"" использовать метод оценки стоимости ""ФИФО (скользящая оценка)""'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ШаблонТекста = НСтр("ru='Для организации ""%1"" использовать метод оценки стоимости ""Средняя за месяц""'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц, 
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК Т
	|		ПО ГоловныеОрганизации.Организация = Т.Организация
	|ГДЕ
	|	Т.МетодОценкиСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(Метаданные.Справочники.Организации.Формы.ФормаЭлемента.ПолноеИмя());
		ОписаниеДействия.ПараметрыФормы.Вставить("Ключ", Выборка.Организация);
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.Организация),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия,
			СтатусПоУмолчанию);
		
	КонецЦикла;
	
	Если НЕ СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Устаревшие режимы работы не используются.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеОшибокВИсходныхДанных

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ИсправлениеОшибокВИсходныхДанных(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстПодробнее     = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьРезультатыПроверки(,, НоваяСтрока.Код);
	
КонецПроцедуры

Процедура ОписаниеПроверок_ИсправлениеОшибокВИсходныхДанных(ТаблицаПроверок)
	
	// Корректность реализации, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьРеализацииУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗапасыСервер.ПроверкаКорректностьРеализацииУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность реализации, указанной в возврате.'"),
		НСтр("ru='При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.'"));
	
	// Корректность передачи, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьПередачиУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьПередачиУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность реализации, указанной в возврате.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru='При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	// Заполнение номеров ГТД в возвратах.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьЗаполненияНомеровГТДВВозвратах",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьЗаполненияНомеровГТДВВозвратах");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность указания номеров ГТД, указанных в возврате.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru='Были оформлены возвраты товаров, для которых включен учет по номерам ГТД, но номера ГТД не были указаны.
			|В этом случае в документе возврата необходимо указать номера ГТД.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// Устаревшие виды запасов с остатками.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗапасыСервер.УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Актуализация регистра сведений ""Устаревшие виды запасов с остатками""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru='Регистр сведений содержит список устаревших видов запасов,
		|по которым еще есть остатки в регистре ""Товары организаций"" и которые должны быть списаны при расходе.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	
	// Заполнение суммовых показателей в отчетах по комиссии между организациями.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьЗаполненияСуммВОтчетахПоКомиссииМеждуОрганизациями",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗапасыСервер.ПроверкаКорректностиЗаполненияСуммВОтчетахПоКомиссииМеждуОрганизациями");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность заполнения суммовых показателей в документе ""Отчет по комиссии между организациями"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru='Оформлены отчеты по комиссии между организациями, у которых суммовые показатели табличной части ""Товары"" не соответствуют данным табличной части ""Виды запасов"".
			|Это проявление ранее исправленной ошибки № 00-00190359.
			|Проблемные документы необходимо перепровести, после этого, возможно, потребуется повторно выполнить закрытие периода.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Выполняет проверку корректности указания документов передачи товаров между организациями возвращаемых товаров
// в документах возврата товаров между организациями.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметры проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки.
//
Процедура ПроверкаКорректностьПередачиУказаннойВВозврате(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация КАК Организация,
	|	Т.Регистратор КАК Возврат,
	|	Т.ДокументИсточник КАК Передача,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыОтгрузки,
	|	Т.ВидЗапасов КАК ВидЗапасовОтгрузки,
	|	Т.КорАналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.КорВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТВсеДвиженияВозвратов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возвраты
	|		ПО Т.Регистратор = Возвраты.Ссылка
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Возвраты.Организация В(&МассивОрганизаций)
	|	И Т.Организация = Возвраты.ОрганизацияПолучатель
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Организация,
	|	Т.Возврат КАК Возврат,
	|	Т.Передача КАК Передача,
	|	Т.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатурыОтгрузки,
	|	Т.ВидЗапасовОтгрузки КАК ВидЗапасовОтгрузки,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияВозвратов
	|ИЗ
	|	ВТВсеДвиженияВозвратов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
	|		ПО Т.Передача = Передачи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК Возвраты
	|		ПО Т.Возврат = Возвраты.Ссылка
	|			И Т.АналитикаУчетаНоменклатуры = Возвраты.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Возвраты.ВидЗапасов
	|ГДЕ
	|	Возвраты.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПередачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Передача,
	|	АналитикаУчетаНоменклатурыОтгрузки,
	|	ВидЗапасовОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Передача КАК Передача,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПередачи
	|ИЗ
	|	ВТДвиженияВозвратов КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Передача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Передачи.Организация КАК Организация,
	|	Т.Регистратор КАК Передача,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияПередач
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПередачи КАК Передачи
	|		ПО Т.Регистратор = Передачи.Передача
	|			И Т.Организация <> Передачи.Организация
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период <= &КонецПериода
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Передача,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация КАК Организация,
	|	Возвраты.Возврат КАК Возврат,
	|	Возвраты.Передача КАК Передача,
	|	Возвраты.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатуры,
	|	Возвраты.ВидЗапасовОтгрузки КАК ВидЗапасов,
	|	Передачи.АналитикаУчетаНоменклатуры КАК А1,
	|	Передачи.ВидЗапасов КАК В1
	|ПОМЕСТИТЬ ВТРасхожденияВозвратов
	|ИЗ
	|	ВТДвиженияВозвратов КАК Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПередач КАК Передачи
	|		ПО Возвраты.Организация = Передачи.Организация
	|			И Возвраты.Передача = Передачи.Передача
	|			И Возвраты.АналитикаУчетаНоменклатурыОтгрузки = Передачи.АналитикаУчетаНоменклатуры
	|			И Возвраты.ВидЗапасовОтгрузки = Передачи.ВидЗапасов
	|ГДЕ
	|	Передачи.Передача ЕСТЬ NULL";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru='Организация'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Возврат",						НСтр("ru='Документ возврата'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Передача",					НСтр("ru='Документ передачи продукции'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияВозвратов",
		НСтр("ru='Обнаружены возвращенные от организации ""%1"" товары, отсутствующие в документе передачи товаров'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Возврат");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Выполняет проверку корректности указания номеров ГТД возвращаемых товаров в документах возврата товаров
// между организациями.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметры проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки.
//
Процедура ПроверкаКорректностьЗаполненияНомеровГТДВВозвратах(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Ссылка КАК Возврат
	|ПОМЕСТИТЬ ПустыеНомераГТДВДокументахВозврата
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	ДанныеШапки.Проведен
	|	И ДанныеШапки.Организация В(&МассивОрганизаций)
	|	И ДанныеШапки.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеШапки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И ТоварыДокумента.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ((СправочникНоменклатура.ПрослеживаемыйТовар
	|			И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|			И НАЧАЛОПЕРИОДА(ДанныеШапки.Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров)
	|		ИЛИ (СправочникНоменклатура.ВестиУчетПоГТД
	|			И &ЗапретитьПоступлениеТоваровБезНомеровГТД)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Ссылка КАК Возврат
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СправочникСоглашения
	|		ПО ДанныеШапки.Соглашение = СправочникСоглашения.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	ДанныеШапки.Проведен
	|	И ДанныеШапки.Организация В(&МассивОрганизаций)
	|	И ДанныеШапки.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеШапки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И ТоварыДокумента.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И СправочникНоменклатура.ПрослеживаемыйТовар
	|	И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|	И НАЧАЛОПЕРИОДА(ДанныеШапки.Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|	И ЕСТЬNULL(СправочникСоглашения.КомиссионерВедетУчетПоРНПТ, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Ссылка КАК Возврат
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ДанныеШапки.Проведен
	|	И ДанныеШапки.Организация В(&МассивОрганизаций)
	|	И ДанныеШапки.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТоварыДокумента.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ((СправочникНоменклатура.ПрослеживаемыйТовар
	|			И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|			И НАЧАЛОПЕРИОДА(ДанныеШапки.Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров)
	|		ИЛИ (СправочникНоменклатура.ВестиУчетПоГТД
	|			И &ЗапретитьПоступлениеТоваровБезНомеровГТД)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Ссылка КАК Возврат
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	ДанныеШапки.Проведен
	|	И ДанныеШапки.Организация В(&МассивОрганизаций)
	|	И ДанныеШапки.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ДанныеШапки.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			)
	|	И ТоварыДокумента.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ((СправочникНоменклатура.ПрослеживаемыйТовар
	|			И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|			И НАЧАЛОПЕРИОДА(ДанныеШапки.Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров)
	|		ИЛИ (СправочникНоменклатура.ВестиУчетПоГТД
	|			И &ЗапретитьПоступлениеТоваровБезНомеровГТД)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Ссылка КАК Возврат
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровОтХранителя КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СправочникСоглашения
	|		ПО ДанныеШапки.Соглашение = СправочникСоглашения.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	ДанныеШапки.Проведен
	|	И ДанныеШапки.Организация В(&МассивОрганизаций)
	|	И ДанныеШапки.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеШапки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И ТоварыДокумента.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И СправочникНоменклатура.ПрослеживаемыйТовар
	|	И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|	И НАЧАЛОПЕРИОДА(ДанныеШапки.Дата, МЕСЯЦ) >= &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|	И ЕСТЬNULL(СправочникСоглашения.КомиссионерВедетУчетПоРНПТ, ЛОЖЬ)
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Возврат", 	НСтр("ru='Документ возврата'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ПустыеНомераГТДВДокументахВозврата",
		НСтр("ru='Обнаружены возвращенные товары без номеров ГТД в организацию 
			|""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Возврат");
		
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить(
		"ЗапретитьПоступлениеТоваровБезНомеровГТД",
		Константы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Получить());
	ДополнительныеПараметрыЗапроса.Вставить(
		"ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров",
		УчетПрослеживаемыхТоваровЛокализация.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров());
	ДополнительныеПараметрыЗапроса.Вставить(
		"ИспользоватьУчетПрослеживаемыхИмпортныхТоваров",
		УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(Дата(1, 1, 1)));
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДополнительныеПараметрыЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Группа_БлокировкаОтИзменений

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ЗаблокироватьОтИзменений(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ЗаблокироватьОтИзменений);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.Информационный = Истина;
	НоваяСтрока.ВыполняетсяПриПредварительномЗакрытииМесяца = Ложь;
	НоваяСтрока.ТекстПодробнее = НСтр("ru = 'Заблокировать'");

	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ЗаблокироватьОтИзменений");
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.НастройкаБлокировкиОтИзменений.Формы.ФормаНастройки.ПолноеИмя(),, Истина);
	
КонецПроцедуры

// Использование заблокировать от изменений.
// 
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура Использование_ЗаблокироватьОтИзменений(ПараметрыОбработчика) Экспорт
	
	НастройкиБлокировок = РегистрыСведений.НастройкаБлокировкиОтИзменений.СведенияОБлокировкеОтИзменений(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	Если НЕ НастройкиБлокировок.ИспользоватьМеханизмБлокировкиОтИзменений Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Механизм блокировки изменений не используется.'"));
			
	ИначеЕсли НастройкиБлокировок.ПериодМожноЗаблокировать Тогда
		
		Если ЕстьПравоУправленияБлокировкойПериода() Тогда
			УстановитьСостояниеВыполненСОшибками(
				ПараметрыОбработчика,
				НСтр("ru='Основные операции закрытия месяца выполнены, период можно заблокировать от изменений.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				,
				,
				Перечисления.ВажностьПроблемыУчета.Информация);
		Иначе
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru='Нет прав на управление блокировкой периодов.'"));
		КонецЕсли;
		
	Иначе
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Есть невыполненные операции, блокировка невозможна.'"));
			
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МетодыДляОписанияПроверокСостоянияСистемы

// Добавляет новую проверку состояния системы в таблицу проверок и заполняет ее ключевые поля.
//
// Параметры:
//	ТаблицаПроверок              - см. АудитСостоянияСистемы.ТаблицаПроверокСостоянияСистемы
//	Идентификатор 				 - Строка - уникальный строковый идентификатор (код) проверки
//	КонтекстПроверокВеденияУчета 			 - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца (владелец), к которому относится проверка
//	УточнениеКонтекстаПроверокВеденияУчета - ПеречислениеСсылка.МоментЗапускаПроверкиОперацииЗакрытияМесяца - когда надо выполнять проверку
//	Обработчик 					 - Строка - полное имя экспортной процедуры-обработчика, вызываемого для выполнения проверки
//	ВажностьПроблемы 					 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус по умолчанию для результатов выполнения проверки.
// 
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная строка таблицы проверок.
//
Функция ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, Идентификатор, КонтекстПроверокВеденияУчета,
			УточнениеКонтекстаПроверокВеденияУчета, Обработчик, ВажностьПроблемы = Неопределено) Экспорт
	
	ОписаниеПроверки = ТаблицаПроверок.Добавить();
	
	ОписаниеПроверки.Идентификатор 				  = Идентификатор;
	ОписаниеПроверки.ИдентификаторРодителя 		 = "Группа" + "_" + ОбщегоНазначения.ИмяЗначенияПеречисления(КонтекстПроверокВеденияУчета);
	ОписаниеПроверки.КонтекстПроверокВеденияУчета 		  = КонтекстПроверокВеденияУчета;
	ОписаниеПроверки.УточнениеКонтекстаПроверокВеденияУчета = УточнениеКонтекстаПроверокВеденияУчета;
	ОписаниеПроверки.Обработчик 				  = Обработчик;
	ОписаниеПроверки.ВажностьПроблемы 					  =
		?(ЗначениеЗаполнено(ВажностьПроблемы), ВажностьПроблемы, Перечисления.ВажностьПроблемыУчета.Ошибка);
		
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Ложь;
	ОписаниеПроверки.ВозможноИзменениеВажности   = Истина;
	
	ОписаниеПроверки.ДетализацияДоОрганизации    = Истина;
	ОписаниеПроверки.ДетализацияДоПериода        = Истина;
	ОписаниеПроверки.Использование			     = Ложь;
	
	Возврат ОписаниеПроверки;
	
КонецФункции

// Заполняет текстовые поля описания проверки состояния системы.
//
// Параметры:
//	ОписаниеПроверки - СтрокаТаблицыЗначений - строка таблицы проверок, добавленная в ДобавитьОписаниеНовойПроверки()
//	Наименование 	 - Строка - пользовательское представление проверки
//	Комментарий 	 - Строка - подробное описание проверки.
//
Процедура ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, Наименование, Комментарий = "") Экспорт
	
	ОписаниеПроверки.Наименование = Наименование;
	ОписаниеПроверки.Причины = Комментарий;
	
КонецПроцедуры

// Возвращает имя формы для вывода результатов выполнения указанной проверки.
// По умолчанию результаты всех проверок отображаются с использованием формы Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки
// Если при выводе результатов надо предусмотреть нестандартное поведение, то в этой функции надо указать имя своей,
// особой формы.
//
// Параметры:
//	Проверка - СправочникСсылка.ПравилаПроверкиУчета - проверка состояния системы.
//
// Возвращаемое значение:
//	Строка, Неопределено - переопределенное имя формы для проверки; если форма не переопределяется, то возвращается Неопределено.
//
Функция ИмяФормыРасшифровкиРезультатовПроверки(Проверка) Экспорт
	
	ИмяФормы = Неопределено;
	
	// Для проверки можно переопределить открываемую по умолчанию форму.
	
	Возврат ИмяФормы;
	
КонецФункции

#КонецОбласти

#Область МетодыДляОписанияЭтапов

// Добавляет строку в таблицу этапов.
//
// Параметры:
//	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
//	Родитель - Строка - идентификатор группы, в которую входит данный этап, см. функции вида ИдентификаторГруппы...
//	Этап - ПеречислениеСсылка.ОперацииЗакрытияМесяца - добавляемый этап закрытия месяца
//	ОперативныйУчет - Булево - признак принадлежности этапа к оперативному учету
//	РегламентированныйУчет - Булево - признак принадлежности этапа к регламентированному учету
//	МеждународныйУчет - Булево - признак принадлежности этапа к международному учету.
//	ПредшествующийЭтап - ПеречислениеСсылка.ОперацииЗакрытияМесяца - предыдущий этап закрытия месяца для целей упорядочивания.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная строка таблицы этапов с колонками:
//	* ПредшествующиеЭтапы - ТаблицаЗначений
//
Функция ДобавитьЭтапВТаблицу(ТаблицаЭтапов, Родитель, Этап, ОперативныйУчет = Истина,
			РегламентированныйУчет = Ложь, МеждународныйУчет = Ложь, ПредшествующийЭтап = Неопределено) Экспорт
	
	НоваяСтрока = ТаблицаЭтапов.Добавить();
	
	НоваяСтрока.Родитель 		  		= Родитель;
	НоваяСтрока.Код 			  		= Этап;
	НоваяСтрока.СледуетЗаЭтапом			= ПредшествующийЭтап;
	НоваяСтрока.ОперативныйУчет 		= ОперативныйУчет;
	НоваяСтрока.РегламентированныйУчет  = РегламентированныйУчет;
	НоваяСтрока.МеждународныйУчет 		= МеждународныйУчет;
	
	Возврат НоваяСтрока;
	
КонецФункции

#Область ОписанияВозможныхДействийЭтапов

// Описание шаблонов обработчиков событий этапа закрытия месяца.
// Используются для свойств "Действие..." этапа закрытия месяца.

// Описание действия "Выполнить указанную произвольную процедуру".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной процедуре обработчика действия.
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_СервернаяПроцедура(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьПроцедуруНаСервере;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Выполнить указанную произвольную процедуру".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной функции обработчика действия.
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_КлиентскаяПроцедура(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьПроцедуруНаКлиенте;
	Описание.Обработчик  = Обработчик;
	Описание.НаКлиенте   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Выполнить расчет этапа".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной процедуре обработчика действия.
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ВыполнитьРасчет(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьРасчет;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть справку объекта".
//
// Параметры:
//	ОбъектМетаданных - Строка - полное имя объекта метаданных, справку которого надо открыть
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ОткрытьСправкуОбъекта(ОбъектМетаданных) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия 		  = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьСправкуОбъекта;
	Описание.ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Описание.НаКлиенте   		  = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть результаты проверки указанного этапа".
//
// Параметры:
//	Проверка 		   - СправочникСсылка.ПравилаПроверкиУчета - проверка состояния системы; если не указана, то отображаются результаты всех проверок
//	Проблема 		   - УникальныйИдентификатор - проблема, найденная проверкой; если не указана, то отображаются все проблемы
//	КонтекстПроверокВеденияУчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца (владелец), к которому относится проверки.
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ОткрытьРезультатыПроверки(Проверка = Неопределено, Проблема = Неопределено, КонтекстПроверокВеденияУчета = Неопределено) Экспорт
	Перем ИмяФормы;
	
	Описание = СтруктураОписанияДействия();
	
	Если ЗначениеЗаполнено(Проверка) Тогда
		ИмяФормы = ИмяФормыРасшифровкиРезультатовПроверки(Проверка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		ИмяФормы = Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки.ПолноеИмя();
	КонецЕсли;
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	Описание.ПараметрыФормы.Вставить("Проверка", 		   Проверка);
	Описание.ПараметрыФормы.Вставить("Проблема", 		   ОбщегоНазначенияУТКлиентСервер.Массив(Проблема));
	Описание.ПараметрыФормы.Вставить("КонтекстПроверокВеденияУчета", КонтекстПроверокВеденияУчета);
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть произвольную форму".
//
// Параметры:
//	ИмяФормы 				 - Строка - имя открываемой формы 
//	ПараметрыВСтруктуреОтбор - Булево - признак того, что параметры открываемой формы надо передать внутри параметра Отбор с типом Структура.
//	ОткрыватьФормуСБлокированием - Булево - открывать форму с блокировкой владельца
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ОткрытьФорму(ИмяФормы, ПараметрыВСтруктуреОтбор = Ложь, ОткрыватьФормуСБлокированием = Ложь) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	Описание.ОткрыватьФормуСБлокированием = ОткрыватьФормуСБлокированием;
	
	ПоляПараметровФормы = "Организация, МассивОрганизаций, ПериодРегистрации, Период, НачалоПериода, КонецПериода, ДатаОкончанияПериода";
	Если ПараметрыВСтруктуреОтбор Тогда
		Описание.ПараметрыФормы.Вставить("Отбор", Новый Структура(ПоляПараметровФормы));
	Иначе
		Описание.Вставить("ПараметрыФормы", Новый Структура(ПоляПараметровФормы));
	КонецЕсли;
	
	Описание.ПараметрыФормы.Вставить(ИмяСлужебногоСвойстваОткрываемыхФорм(), Истина);
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Показать ошибки указанного этапа в журнале регистрации".
//
// Параметры:
//	РассчитываемыйЭтап - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//
// Возвращаемое значение:
// см. ЗакрытиеМесяцаСервер.СтруктураОписанияДействия
//
Функция ОписаниеДействия_ОткрытьЖурналРегистрации(РассчитываемыйЭтап) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации;
	Описание.ИмяФормы    = Метаданные.Обработки.ЖурналРегистрации.Формы.ЖурналРегистрации.ПолноеИмя();
	Описание.НаКлиенте   = Истина;
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	СобытияЖурнала = Новый Массив;
	СобытияЖурнала.Добавить(ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.ИмяЗначенияПеречисления(РассчитываемыйЭтап)));
	
	Описание.ПараметрыФормы.Вставить("ДатаНачала");
	Описание.ПараметрыФормы.Вставить("ДатаОкончания");
	Описание.ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	Описание.ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытияЖурнала);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область МетодыДляПроверкиСостоянияЭтаповИВыполненияЭтапов

#Область РаботаСЗапросами

// Устанавливает общие параметры и менеджер временных таблиц для запросов, используемых в механизме закрытия месяца.
//
// Параметры:
//	Запрос 									- Запрос - используемый запрос
//	ПараметрыОбработчикаИлиПараметрыРасчета - Структура - параметры обработчика события этапа или параметры расчета этапа.
//
// Возвращаемое значение:
//	Булево - признак того, что в параметре обработчика был передан менеджер временных таблиц;
//		если менеджер не был передан, то он буден добавлен в параметры обработчика для его использования в следующих обработчиках.
//
Функция ИнициализироватьЗапрос(Запрос, ПараметрыОбработчикаИлиПараметрыРасчета) Экспорт
	
	ЭтоПараметрыОбработчика = ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("ПараметрыРасчета");
	
	Если ЭтоПараметрыОбработчика Тогда
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета.ПараметрыРасчета;
	Иначе
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("НачалоПериода") Тогда
		НачалоПериода = ПараметрыРасчета.НачалоПериода;
		КонецПериода  = ПараметрыРасчета.КонецПериода;
	Иначе
		НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
		КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецЕсли;
	
	// Общие параметры запроса.
	Запрос.УстановитьПараметр("НачалоПериода",				  	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				  	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода",	  	НачалоМесяца(НачалоПериода - 1));
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода",	  	НачалоПериода - 1);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",	  	КонецПериода + 1);
	
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",		  	Новый Граница(НачалоПериода, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ГраницаКонецПериода",		  	Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",	Новый Граница(НачалоПериода - 1, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("МассивОрганизаций",			  	ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящая",		РасчетСебестоимостиПовтИсп.ОрганизацииСМетодомОценкиФИФО(НачалоПериода));
	Запрос.УстановитьПараметр("ОрганизацииПоСредней",			РасчетСебестоимостиПовтИсп.ОрганизацииСМетодомОценкиПоСредней(НачалоПериода));
	Запрос.УстановитьПараметр("ОрганизацииСДетализациейЗатрат",	РасчетСебестоимостиПовтИсп.ОрганизацииСДетализациейЗатратВСебестоимости(НачалоПериода));
	
	// Параметры-значения функциональных опций.
	Запрос.УстановитьПараметр("ПартионныйУчетНеИспользуется",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии21",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	Запрос.УстановитьПараметр("ИспользоватьРеглУчет", 
		ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	
	
	// Менеджер временных таблиц.
	ДанныеИнициализированы = ЭтоПараметрыОбработчика И ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("МенеджерВременныхТаблиц");
	
	Если ДанныеИнициализированы Тогда
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	ИначеЕсли ЭтоПараметрыОбработчика Тогда
		
		ПараметрыОбработчикаИлиПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Возврат ДанныеИнициализированы;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеПроверки

// Проверяет наличие заданий в регистре сведений вида "ЗаданияК...".
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ВыполнятьССамогоРаннего 	- Булево - признак того, что пересчет должен выполняться с самого первого задания до рассчитываемого периода
//									если Ложь, то анализируется только наличие заданий в рассчитываемом периоде
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора регистра заданий по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//									если таблица не указана, то отбираются все организации из свойства МассивОрганизаций
//	ИмяРегистраЗаданий 			- Строка - имя регистра сведений с заданиями к пересчету
//									если регистра не указан, то выбираются данные регистра ЗаданияКЗакрытиюМесяца.
//	ДействиеПодробнее 	 		- Строка - см. функции вида "ОписаниеДействия_..."
//	
// Возвращаемое значение:
//	Булево - признак наличия записей регистра.
//
Функция ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, ВыполнятьССамогоРаннего,
			ИмяТаблицыОтбораОрганизаций = "", ИмяРегистраЗаданий = "", ДействиеПодробнее = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация,
	|	НАЧАЛОПЕРИОДА(МИНИМУМ(Задания.Месяц), МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТОрганизацииСЗаданиямиКЗакрытиюМесяца
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	&ТекстУсловиеПериод
	|	И (Задания.Организация В (&МассивОрганизаций)
	|	  ИЛИ НЕ Задания.Организация.ПометкаУдаления)
	|	И &ТекстУсловиеОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), НЕОПРЕДЕЛЕНО) КАК Месяц
	|ИЗ
	|	ВТОрганизацииСЗаданиямиКЗакрытиюМесяца КАК Задания";
	
	Если НЕ ЗначениеЗаполнено(ИмяРегистраЗаданий) Тогда
		
		// Проверяем регистр ЗаданияКЗакрытиюМесяца 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловиеОтбора", "Задания.Операция = &РассчитываемыйЭтап");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
		Запрос.УстановитьПараметр("РассчитываемыйЭтап", ПараметрыОбработчика.ДанныеЭтапа.Код);
		
	Иначе
		
		// Проверяем указанный регистр
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаданияКЗакрытиюМесяца", ИмяРегистраЗаданий);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловиеОтбора", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
	КонецЕсли;
	
	Если НЕ ВыполнятьССамогоРаннего Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловиеПериод", "Задания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода")
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловиеПериод", "Задания.Месяц <= &КонецПериода")
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос,
		"ВТОрганизацииСЗаданиямиКЗакрытиюМесяца"
			+ ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
	Если ЗначениеЗаполнено(Выборка.Месяц) Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = Выборка.Месяц;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется пересчет операции %1 %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				?(ВыполнятьССамогоРаннего, НСтр("ru='начиная с периода'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru='за период'", ОбщегоНазначения.КодОсновногоЯзыка())),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Выборка.Месяц)),
				?(ЗначениеЗаполнено(ДействиеПодробнее),ТекстПодробнееПоУмолчанию(),""),
				ДействиеПодробнее);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие регламентного документа указанного вида.
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ИмяДокумента 				- Строка - имя регламентного документа, как оно указано в метаданных
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора документов по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//									если таблица не указана, то отбираются все организации из свойства МассивОрганизаций.
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, ИмяДокумента, ИмяТаблицыОтбораОрганизаций = "") Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК Т
	|		ПО Организации.Ссылка = Т.Организация
	|			И (Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (Т.Проведен)";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДокумента", "Документ." + ИмяДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='За период %1 нет заданий для расчета данной операции и отсутствуют документы ""%2"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				Метаданные.Документы[ИмяДокумента].Синоним));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции


#КонецОбласти

#Область ОпределениеИУстановкаСостоянияЭтапов

// Устанавливает состояние этапа "Не требуется".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус пояснения, по умолчанию "Информация".
//
Процедура УстановитьСостояниеНеТребуется(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	 ИЛИ ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		Возврат; // если были диагностированы проблемы, то этап требует пересчета
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Отключен".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус пояснения, по умолчанию "Информация".
//
Процедура УстановитьСостояниеОтключено(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ПараметрыОбработчика.ДанныеЭтапа.Отключено = Истина;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Не выполнен".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус пояснения, по умолчанию "Ошибка".
//
Процедура УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВажностьПроблемыУчета.Ошибка;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Выполнен с ошибками".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус пояснения, по умолчанию "Предупреждение".
//
Процедура УстановитьСостояниеВыполненСОшибками(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВажностьПроблемыУчета.Предупреждение;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры


// Проверяет, что состояние этапа отличается от незаполненного состояния по умолчанию.
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак того, что состояния этапа отличается от "Неопределено".
//
Функция СостояниеЭтапаОпределено(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено;
	
КонецФункции

// Проверяет, что состояние этапа отличается от "Выполнен успешно" и "Не требуется".
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак необходимости пересчета этапа.
//
Функция ТребуетсяПересчетЭтапа(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
		И ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции

// Проверяет, что состояние этапа равно "Не требуется".
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак этапа расчет которого не требуется.
//
Функция РасчетЭтапаНеТребуется(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции


// Добавляет поясняющую информацию к этапу.
// В дереве операций закрытия месяца отображается на третьем уровне.
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус пояснения, по умолчанию "Информация".
//
Процедура ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение,
			ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ОписаниеПояснения = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеПояснения.Код 				= Новый УникальныйИдентификатор;
	ОписаниеПояснения.Состояние	 		= ?(ЗначениеЗаполнено(Состояние),
		Состояние,
		Перечисления.ВажностьПроблемыУчета.Информация);
	ОписаниеПояснения.Родитель 			= ПараметрыОбработчика.ДанныеЭтапа.Код;
	
	ОписаниеПояснения.Наименование 		= Пояснение;
	ОписаниеПояснения.ТекстПодробнее 	= ТекстПодробнее;
	ОписаниеПояснения.ДействиеПодробнее = ДействиеПодробнее;
	
КонецПроцедуры

// Устанавливает состояние этапа по данным указанной временной таблицы.
//
// Параметры:
//	ПараметрыОбработчика 		 - Структура - параметры обработчика события этапа
//	ШаблонТекста 		 		 - Строка - шаблон текста пояснение, формируемого для каждой строки временной таблицы;
//									в шаблоне параметр %1 заменяется на организацию, а %2 - на рассчитываемый период
//	Запрос 				 		 - Запрос - запрос с менеджером временных таблиц
//	ИмяВременнойТаблицы  		 - Строка - имя временной таблицы для установки состояния этапа;
//									обязательная колонка временной таблицы - "Организация"
//	ПоРассчитываемымОрганизациям - Булево - признак отбора строк временной таблицы по организациям из свойства МассивОрганизаций
//	ЭтоОшибка 			 		 - Булево - признак того, что строки указанной временной таблицы содержат ошибки;
//									если Истина, то будет установлено состояние этапа "Не выполнен", иначе - "Не требуется".
//
Процедура ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(ПараметрыОбработчика, ШаблонТекста, Запрос,
			ИмяВременнойТаблицы, ПоРассчитываемымОрганизациям, ЭтоОшибка = Ложь) Экспорт
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяВременнойТаблицы КАК РезультатПроверки
	|		ПО Т.Ссылка = РезультатПроверки.Организация
	|ГДЕ
	|	Т.Ссылка В(&МассивОрганизаций)
	|	И ВЫБОР КОГДА РезультатПроверки.Организация ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	  КОНЕЦ = &ПоРассчитываемымОрганизациям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.УстановитьПараметр("ПоРассчитываемымОрганизациям", ПоРассчитываемымОрганизациям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			Выборка.Организация,
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		
		Если ЭтоОшибка Тогда
			УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, ТекстРезультата);
		Иначе
			УстановитьСостояниеНеТребуется(ПараметрыОбработчика, ТекстРезультата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Определяет состояние указанных этапов закрытия месяца.
//
// Параметры:
//  Этапы 							  - ПеречислениеСсылка.ОперацииЗакрытияМесяца, Массив - операции закрытия месяца
//	Период 							  - Дата - рассчитываемый период
//	МассивОрганизаций 				  - СправочникСсылка.Организации, Массив - рассчитываемые организации
//	УчетСостоянияПредшествующихЭтапов - Булево - учитывать состояние предыдущих этапов, от которых зависят указанные этапы
//	ВыполнятьПроверкиДоЭтапа 		  - Булево - выполнять проверки состояния системы, относящиеся к данной этапу.
//	ОбновитьТолькоОдинЭтап			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - экспресс-проверка состояния только указанного этапа
//										 при этом не проверяется определение состояния предшествующих этапов, влияющих на указанный этап
//
// Возвращаемое значение:
//	Соответствие
//		Ключ - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап
//		Значение - ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - состояние этапа
//	Если в параметр Этапы передан один этап, то возвращается не Соответствие, а значение с типом ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца.
//
Функция ОпределитьСостояниеЭтаповРасчета(Этапы, Период, МассивОрганизаций = Неопределено,
			УчетСостоянияПредшествующихЭтапов = Истина, ВыполнятьПроверкиДоЭтапа = Ложь, ОбновитьТолькоОдинЭтап = Неопределено) Экспорт
	
	// Заполним состояния этапов.
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных,, ОбновитьТолькоОдинЭтап);
	
	ПараметрыЗапускаОбновленияСостояния.УчетСостоянияПредшествующихЭтапов = УчетСостоянияПредшествующихЭтапов;
	ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа 		  = ВыполнятьПроверкиДоЭтапа;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	// Вернем состояние требуемых этапов.
	МассивЭтапов = ОбщегоНазначенияУТКлиентСервер.Массив(Этапы);
	СостоянияЭтапов = Новый Соответствие;
	
	Для Каждого Этап Из МассивЭтапов Цикл
		
		СтрокаЭтапа = СтруктураДанных.ТаблицаЭтапы.Найти(Этап, "Код");
		
		Если СтрокаЭтапа <> Неопределено Тогда
			СостоянияЭтапов.Вставить(Этап, СтрокаЭтапа.Состояние);
		Иначе
			СостоянияЭтапов.Вставить(Этап, Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЭтапов.Количество() = 1 Тогда
		Возврат СостоянияЭтапов[МассивЭтапов[0]];
	КонецЕсли;
	
	Возврат СостоянияЭтапов;
	
КонецФункции

#КонецОбласти

#Область ОбменДаннымиМеждуОбработчикамиЭтапа

// Устанавливает доп. свойство обработчика этапа для передачи его в следующие за ним обработчики этапа.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ИмяСвойства 		 - Строка - ключ доп. свойства
//	ЗначениеСвойства 	 - Произвольный - значение доп. свойства.
//
Процедура УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеСвойства = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	
КонецПроцедуры

// Возвращает доп. свойство обработчика этапа, установленное в предшествующих обработчиках этапа.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ИмяСвойства 		 - Строка - ключ доп. свойства
//	ЗначениеПоУмолчанию  - Произвольный - возвращаемое значение в случае, если доп. свойство с указанным именем не существует.
//
// Возвращаемое значение:
//	Произвольный -
Функция ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если НЕ ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства[ИмяСвойства];
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗаданияЗапускаемыеВЭтапах

// Запустить подчиненное фоновое задание этапа расчета.
// 
// Параметры:
//  ИдентификаторРасчета - УникальныйИдентификатор - Идентификатор расчета
//  ИмяМетода - Строка - Имя метода
//  ПараметрыОбработчикаЗадания - Массив Из Произвольный -  Параметры обработчика задания
//  КлючЗадания - Строка, Неопределено -  Ключ задания
//  Наименование - Строка -  Наименование
// 
// Возвращаемое значение:
//  ФоновоеЗадание -  подчиненное фоновое задание этапа расчета
Функция ЗапуститьПодчиненноеФоновоеЗаданиеЭтапаРасчета(ИдентификаторРасчета, ИмяМетода, ПараметрыОбработчикаЗадания = Неопределено,
			КлючЗадания = Неопределено, Наименование = "") Экспорт

	Задание = ФоновыеЗадания.Выполнить(
		ИмяМетода,
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
		Наименование);
	
	ЗапущеноПодчиненноеФоновоеЗаданиеЭтапаРасчета(ИдентификаторРасчета, Задание.УникальныйИдентификатор);
	
	Возврат Задание;
	
КонецФункции

// Запущено подчиненное фоновое задание этапа расчета.
// 
// Параметры:
//  ИдентификаторРасчета - УникальныйИдентификатор -  Идентификатор расчета
//  ИдентификаторЗадания - УникальныйИдентификатор -  Идентификатор задания
Процедура ЗапущеноПодчиненноеФоновоеЗаданиеЭтапаРасчета(ИдентификаторРасчета, ИдентификаторЗадания) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторРасчета) Тогда
		
		ЗаписьРегистра = РегистрыСведений.ЗапущенныеФоновыеЗаданияЭтаповЗакрытияМесяца.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.ИдентификаторРасчета = ИдентификаторРасчета;
		ЗаписьРегистра.ИдентификаторФоновогоЗадания = ИдентификаторЗадания;
		ЗаписьРегистра.ДатаНачала = ТекущаяДатаСеанса();
		
		ЗаписьРегистра.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МетодыДляРаботыСПроблемамиСостоянияСистемы

#Область РегистрацияПроблемОбнаруженныхПриПроверкеСостоянияСистемы

// Формирует описание данных, на основании которых надо зарегистрировать найденные проблемы.
//
// Параметры:
//	ИмяВременнойТаблицы 	  - Строка - имя временной таблицы, в которой хранится информация о найденных проблемах
//								обязательное поле - "Организация"
//	ШаблонТекстаОшибки  	  - Строка - шаблон текста описания проблемы
//								в шаблоне параметр %1 заменяется на организацию, а %2 - на рассчитываемый период
//	СписокПолей 			  - СписокЗначений - список полей временной таблицы; Значение - имя поля, Представление (необязательный) - представление поля
//	ИмяПоляОбъекта 			  - Строка - имя поля, в котором хранится объект для расшифровки проблемы
//	ИмяРегистраДляРасшифровки - Строка - имя регистра, в котором зафиксирована проблема
//
// Возвращаемое значение:
//	Массив - массив описаний проблем, см. код ДополнитьПараметрыРегистрацииПроблемПроверки
//
Функция ИнициализироватьПараметрыРегистрацииПроблемПроверки(ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "", ИмяРегистраДляРасшифровки = "") Экспорт
	
	ПараметрыРегистрации = Новый Массив;
	
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта, ИмяРегистраДляРасшифровки);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Добавляет к ранее сформированному описанию новые данные, на основании которых надо зарегистрировать найденные проблемы.
//
// Параметры:
//	ПараметрыРегистрации 	  - Массив - результат функции ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяВременнойТаблицы  	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ШаблонТекстаОшибки   	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	СписокПолей 		 	  - СписокЗначений - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяПоляОбъекта 		 	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяРегистраДляРасшифровки - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//
Процедура ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "", ИмяРегистраДляРасшифровки = "") Экспорт
	
	// Описание регистрации ошибки.
	ОписаниеРегистрации = Новый Структура;
	ОписаниеРегистрации.Вставить("ИмяВременнойТаблицы", 	  ИмяВременнойТаблицы);
	ОписаниеРегистрации.Вставить("ШаблонТекстаОшибки",  	  ШаблонТекстаОшибки);
	ОписаниеРегистрации.Вставить("СписокПолей", 			  СписокПолей);
	ОписаниеРегистрации.Вставить("ИмяПоляОбъекта", 	 		  ИмяПоляОбъекта);
	ОписаниеРегистрации.Вставить("ИмяРегистраДляРасшифровки", ИмяРегистраДляРасшифровки);
	ОписаниеРегистрации.Вставить("ТекстЗапросаВыборки", 	  "");
	
	// Текст запроса для выборки данных.
	ТекстПоляЗапроса = "";
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ТекстПоляЗапроса = ТекстПоляЗапроса + ?(ТекстПоляЗапроса = "", "", ",
			|	") + "Т." + ЭлементСписка.Значение;
	КонецЦикла;
	
	ТекстЗапросаВыборки =
	"ВЫБРАТЬ
	|	&ТекстПоля
	|ИЗ
	|	ИмяТаблицы КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	&ТекстПоля
	|
	|ИТОГИ ПО
	|	Организация";
	
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, "&ТекстПоля", ТекстПоляЗапроса);
	ТекстЗапросаВыборки = СтрЗаменить(ТекстЗапросаВыборки, "ИмяТаблицы", ИмяВременнойТаблицы);
	
	ОписаниеРегистрации.ТекстЗапросаВыборки = ТекстЗапросаВыборки;
	
	ПараметрыРегистрации.Добавить(ОписаниеРегистрации);
	
КонецПроцедуры

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении проверки этапа закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки 			   - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//	ПараметрыРегистрации 		   - Массив - результат функции ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ТекстЗапросаФормированияТаблиц - Строка - текст запроса для формирования временной таблицы с информацией о найденных проблемах
//	ДополнительныеПараметрыЗапроса - Структура - дополнительные параметры для запроса формирования временной таблицы, используемые только в данной проверке.
//	ВажностьПроблемы	 	  	   - ПеречислениеСсылка.ВажностьПроблемыУчета - статус проблемы; по умолчанию "Ошибка"
//
Процедура ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации,
			ТекстЗапросаФормированияТаблиц = "", ДополнительныеПараметрыЗапроса = Неопределено, ВажностьПроблемы = Неопределено) Экспорт
	
	ПроверкаДоРасчета    = ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "ПроверкаДоРасчета",    Ложь);
	ПроверкаПослеРасчета = ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "ПроверкаПослеРасчета", Ложь);
	
	Если ПроверкаДоРасчета ИЛИ ПроверкаПослеРасчета Тогда
		
		ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки);
		
		Если ПроверкаДоРасчета И РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
		
	Иначе
		
		ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
		
	КонецЕсли;
	
	МаксКоличествоОшибок = КоличествоРегистрируемыхОднотипныхОшибок();
	
	Запрос = Новый Запрос;
	
	ИнициализироватьЗапрос(
		Запрос,
		?(ПроверкаДоРасчета ИЛИ ПроверкаПослеРасчета, ПараметрыОбработчика, ПараметрыРасчета)); // получим МенеджерВременныхТаблиц
	
	ОбщегоНазначенияУТ.УстановитьПараметрыЗапроса(
		Запрос,
		ДополнительныеПараметрыЗапроса); // установим уникальные доп. параметры для проверки
	
	Если ЗначениеЗаполнено(ТекстЗапросаФормированияТаблиц) Тогда
		
		// Таблица с данными формируется не в процедуре проверки использования этапа - сформируем ее здесь.
		Запрос.Текст = ТекстЗапросаФормированияТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Для Каждого ОписаниеРегистрации Из ПараметрыРегистрации Цикл
		
		Запрос.Текст = ОписаниеРегистрации.ТекстЗапросаВыборки;
		
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			// Зарегистрируем проблему.
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеРегистрации.ШаблонТекстаОшибки,
				ВыборкаОрганизаций.Организация,
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации));
			
			АудитСостоянияСистемы.ДобавитьСтрокуВТаблицуВыявленныхПроблем(
				ПараметрыПроверки,
				ВыборкаОрганизаций.Организация,
				ПараметрыРасчета.ПериодРегистрации,
				ТекстОшибки,
				ВажностьПроблемы);
			
			Выборка = ВыборкаОрганизаций.Выбрать();
			
			НомерОшибки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерОшибки = НомерОшибки + 1;
				
				Если МаксКоличествоОшибок > 0 И НомерОшибки > МаксКоличествоОшибок Тогда
					
					КоличествоНезарегистрированных = Выборка.Количество() - МаксКоличествоОшибок;
					
					ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						ТекстОшибки,
						КоличествоНезарегистрированных);
					
					Прервать;
					
				КонецЕсли;
					
				// Добавим расшифровку проблемы по объектам.
				Если ЗначениеЗаполнено(ОписаниеРегистрации.ИмяПоляОбъекта) Тогда
					
					ДобавитьОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяПоляОбъекта);
					
				Иначе
					
					ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяРегистраДляРасшифровки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополнительные параметры проверки, переданные в нее механизмом закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки.
//
// Возвращаемое значение:
//	Структура: 
// 	* Период - СтандартныйПериод - структура дополнительных параметров запуска проверки; если проверка вызвана вне механизма закрытия месяца, то возвращается пустая структура.
//
Функция ДополнительныеПараметрыПроверки(ПараметрыПроверки) Экспорт
	
	Если ТипЗнч(ПараметрыПроверки.ДополнительныеПараметры) <> Тип("Структура")
	 И ТипЗнч(ПараметрыПроверки.ДополнительныеПараметры) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыПроверки.ДополнительныеПараметры;
	
КонецФункции

// Возвращает значение указанного дополнительного параметра проверки, переданного в нее механизмом закрытия месяца.
// Если параметра с таким именем нет, то возвращается значение параметра по умолчанию.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//	ИмяПараметра - Строка - ключ структуры дополнительных параметров
//	ЗначениеПоУмолчанию - Произвольный - значение, возвращаемое функцией если доп. параметра с указанным именем нет.
//
// Возвращаемое значение:
//	Произвольный - значение дополнительного параметра проверки.
//
Функция ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	Если ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Возврат ДополнительныеПараметры[ИмяПараметра];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает признак того, что проверка вызвана механизмом закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки.
//
// Возвращаемое значение:
//	Булево - проверка вызвана из Обработка.ОперацииЗакрытияМесяца.ВыполнитьПроверкиЭтапа().
//
Функция ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Экспорт
	
	Возврат ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "Состояние", Null) <> Null;
	
КонецФункции

// Инициализирует параметры обработчика этапа закрытия месяца для проверки
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ПараметрыРасчета        - Структура - параметры расчета.
//   * ДанныеЭтапа - Структура - содержит:
//      ** Наименование - Строка - намиенование.
//   * ТаблицаПояснения        - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуПоясненийКЭтапам
//   * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки) Экспорт
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрыРасчета", ПараметрыРасчета);
	ПараметрыОбработчика.Вставить("ДанныеЭтапа",	  СформироватьОписаниеДанныхЭтапа(ПараметрыПроверки.КонтекстПроверокВеденияУчета));
	ПараметрыОбработчика.Вставить("ТаблицаПояснения", Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуПоясненийКЭтапам());
	
	Если ДополнительныеПараметры.Свойство("МенеджерВременныхТаблиц") Тогда
		// Данные для проверки уже подготовлены - ее надо выполнить безусловно.
		ПараметрыОбработчика.Вставить("МенеджерВременныхТаблиц", ДополнительныеПараметры.МенеджерВременныхТаблиц);
	Иначе
		Если ДополнительныеПараметры.Свойство("Состояние")
		 И СостояниеЭтапаОпределено(ДополнительныеПараметры) И ТребуетсяПересчетЭтапа(ДополнительныеПараметры) Тогда
			// Проверять состояние уже не надо - оно известно (требуется пересчет этапа)
		Иначе
			// Проверим использование этапа расчета (необходимость выполнения проверки)
			// и заодно подготовим необходимые данные для проверки в процедуре проверки использования этапа.
			Обработки.ОперацииЗакрытияМесяца.ПроверитьИспользованиеЭтапа(ПараметрыОбработчика);
		КонецЕсли;
	КонецЕсли;
	 
	Возврат ПараметрыОбработчика;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПроблемОбнаруженныхПриРасчетеЭтапа

// Добавляет информацию о проблеме, диагностированной в ходе расчета, в общий список проблем расчета этапа.
// Запись информации о проблемах из этого списка будет выполнена централизованно самим механизмом закрытия месяца, после
// окончания расчета этапа. Использовать данную процедуру следует в случае, если в месте возникновения проблемы
// доступен универсальный параметр обработчика расчета - ПараметрыОбработчика.
// Если при расчете этапа этот параметр недоступен, то алгоритм расчета этапа
// должен регистрировать проблему самостоятельно, через ЗарегистрироватьПроблемуВыполненияРасчета().
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
//	ТекстПодробно 		 - Строка - подробное описание проблемы; выводится в форме расшифровки проблем из формы закрытия месяца
//	Организация 		 - СправочникСсылка.Организации, Массив - организации, к которым относится данная ошибка; если не указано, то ошибка относится к каждой из рассчитываемых организаций
//	Период 				 - Дата - период, к которому относится ошибка; если не указано, то ошибка относится к периоду расчета
//	ВажностьПроблемы	 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус проблемы; по умолчанию "Ошибка"
//	Объект 				 - Произвольный - объект для расшифровки проблемы.
//	
Процедура ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстПодробно,
			Организация = Неопределено, Период = Неопределено, ВажностьПроблемы = Неопределено, Объект = Неопределено) Экспорт
	
	ОписаниеОшибки = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеОшибки.Родитель 		 = ПараметрыОбработчика.ДанныеЭтапа.Код;
	ОписаниеОшибки.Наименование 	 = ТекстПодробно;
	ОписаниеОшибки.Состояние 		 = ВажностьПроблемы;
	ОписаниеОшибки.Организация 		 = Организация;
	ОписаниеОшибки.Период 			 = Период;
	ОписаниеОшибки.РасшифровкаОшибки = Объект;
	
КонецПроцедуры

// Формирует описание данных, на основании которых надо зарегистрировать проблему выполнения расчета.
//
// Параметры:
//  ЭтапРасчета	- ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//	Организация - СправочникСсылка.Организации, Массив - организации, к которым относится данная проблема
//					если не указано, то проблема относится к каждой из рассчитываемых организаций
//  Период		- Дата - период расчета.
//
// Возвращаемое значение:
//	Структура - параметры регистрации проблемы расчета.
//
Функция ИнициализироватьПараметрыРегистрацииПроблемыРасчета(ЭтапРасчета, Организация, Период) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("ЭтапРасчета", ЭтапРасчета);
	ПараметрыРегистрации.Вставить("Организация", Организация);
	ПараметрыРегистрации.Вставить("Период", 	 Период);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении расчета этапа закрытия месяца.
// Использовать данную процедуру следует в случае, если в месте возникновения проблемы
// недоступен универсальный параметр обработчика расчета - ПараметрыОбработчика.
// Если при расчете этапа этот параметр доступен, то алгоритм расчета этапа
// должен передавать информацию о проблеме механизму закрытия месяца через ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета().
//
// Параметры:
//	ПараметрыРегистрации - Структура - результат функции ИнициализироватьПараметрыРегистрацииПроблемыРасчета()
//	ТекстКратко 		 - Строка - краткая информация о проблеме; выводится в форме закрытия месяца
//	ВажностьПроблемы 			 - ПеречислениеСсылка.ВажностьПроблемыУчета - статус проблемы; по умолчанию "Ошибка"
//	ТекстПодробно 		 - Строка - подробное описание проблемы; проблемы в форме закрытия месяца группируются по ТекстКратко + ВажностьПроблемы, а данный текст выводится в форме расшифровки проблем
//	Объект 				 - Произвольный - объект для расшифровки проблемы.
//	
Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРегистрации, ТекстКратко,
			ВажностьПроблемы = Неопределено, ТекстПодробно = "", Объект = Неопределено) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда		
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРегистрации.Организация) Тогда
		МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	Иначе			
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ПараметрыРегистрации.Организация);
	КонецЕсли;
	
	Проверка = СлужебнаяПроверкаЭтапа(ПараметрыРегистрации.ЭтапРасчета);
	
	Если НЕ ЗначениеЗаполнено(ВажностьПроблемы) Тогда
		ВажностьПроблемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "ВажностьПроблемы");
	КонецЕсли;
	
	ОрганизацияОбъекта = Неопределено;
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	Если ОбъектМетаданных <> Неопределено
		И ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ОбъектМетаданных) Тогда 
		ОрганизацияОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		Если ЗначениеЗаполнено(ОрганизацияОбъекта)
			И ОрганизацияОбъекта <> ТекущаяОрганизация Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстКратко,
			СокрЛП(ТекущаяОрганизация),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРегистрации.Период));
		
		ОписаниеПроблемы = АудитСостоянияСистемы.СформироватьОписаниеПроблемы(
			ТекстПроблемы,
			ВажностьПроблемы,
			ТекстПодробно,
			Объект);
		
		АудитСостоянияСистемы.ЗарегистрироватьПроблему(
			Проверка,
			ТекущаяОрганизация,
			НачалоДня(ПараметрыРегистрации.Период),
			ОписаниеПроблемы);
			
		Если ЗначениеЗаполнено(ТекстПодробно) Тогда
			ПродублироватьВЖурналРегистрации(
				ПараметрыРегистрации.ЭтапРасчета,
				ВажностьПроблемы,
				ТекстПроблемы + ":" + Символы.ПС + ТекстПодробно);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие ошибок, зарегистрированных при выполнении расчета указанного этапа закрытия месяца.
//
// Параметры:
//  ЭтапРасчета	 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//  МассивОрганизаций - СправочникСсылка.Организации, Массив - проверяемые организаций.
//  Период		 	  - Дата - период расчета.
// 
// Возвращаемое значение:
//  Булево - признак наличия ошибок расчета.
//
Функция ЕстьОшибкиВыполненияРасчета(ЭтапРасчета, МассивОрганизаций, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Проверка = &Проверка
	|	И Проблемы.Организация В(&МассивОрганизаций)
	|	И НАЧАЛОПЕРИОДА(Проблемы.ПроверяемыйПериод, МЕСЯЦ) = &Период
	|	И Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Ошибка)";
	
	Запрос.УстановитьПараметр("Проверка", 	 	   СлужебнаяПроверкаЭтапа(ЭтапРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	Запрос.УстановитьПараметр("Период", 	 	   НачалоМесяца(Период));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Очистить проблемы выполнения расчета.
// 
// Параметры:
//  ЭтапРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Этап расчета
//  МассивОрганизаций - Массив из СправочникСсылка.Организации - Массив организаций
//  НачалоПериода - Дата - Начало периода
//  КонецПериода - Дата, Неопределено - Конец периода
Процедура ОчиститьПроблемыВыполненияРасчета(ЭтапРасчета, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(
		ЭтапРасчета,
		Неопределено,
		Истина); // все контекстные проверки
		
	АудитСостоянияСистемы.ОчиститьРезультатыПроверок(
		ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
		МассивОрганизаций,
		НачалоМесяца(НачалоПериода),
		КонецМесяца(?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода)));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Функция ДублироватьНайденныеПроблемыВЖурналеРегистрации()
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.ДублироватьНайденныеПроблемыВЖурналеРегистрации;
	
КонецФункции

Процедура ПродублироватьВЖурналРегистрации(ЭтапРасчета, ИсточникОпределенияВажностиПроблемы, ТекстОшибки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	ИначеЕсли НЕ ДублироватьНайденныеПроблемыВЖурналеРегистрации() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсточникОпределенияВажностиПроблемы) Тогда
		ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.Ошибка;
	ИначеЕсли ТипЗнч(ИсточникОпределенияВажностиПроблемы) = Тип("ПеречислениеСсылка.ВажностьПроблемыУчета") Тогда
		ВажностьПроблемы = ИсточникОпределенияВажностиПроблемы;
	Иначе
		ВажностьПроблемы = РасчетСебестоимостиПовтИсп.ВажностьПроверкиСостоянияСистемы(ИсточникОпределенияВажностиПроблемы);
	КонецЕсли;
	
	Если ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.Ошибка Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.Предупреждение
	 ИЛИ ВажностьПроблемы = Перечисления.ВажностьПроблемыУчета.ВажнаяИнформация Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
	Иначе
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.ИмяЗначенияПеречисления(ЭтапРасчета)),
		УровеньЖР,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область МетодыДляРаботыСЗаданияКЗакрытиюМесяца

// Возвращает текущее значение константы "НомерЗаданияК...".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания; если не задано, то "НомерЗаданияКЗакрытиюМесяца".
//
// Возвращаемое значение:
//	Число - значение константы "НомерЗаданияКЗакрытиюМесяца". Определяет текущий номер задания для которого будет производиться расчет.
//		Все последующие действия пользователей информационной базы в целях актуализации расчетов будут писаться под более высоким номером задания.
//
Функция ТекущийНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Увеличивает значение константы "НомерЗаданияК...".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания; если не задано, то "НомерЗаданияКЗакрытиюМесяца".
//	ШагУвеличения - Число - на сколько надо увеличить значение константы
//
// Возвращаемое значение:
//	Число - исходный номер задания.
//
Функция УвеличитьНомерЗадания(Знач ИмяКонстанты = "", ШагУвеличения = 1) Экспорт
	
	НомерДоРасчета = 0;
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		НомерДоРасчета = ТекущийНомерЗадания(ИмяКонстанты);
		МенеджерКонстанты = Константы[ИмяКонстанты]; // КонстантаМенеджер.НомерЗаданияКЗакрытиюМесяца
		МенеджерКонстанты.Установить(НомерДоРасчета + ШагУвеличения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ " " + НСтр("ru = 'Значение константы'") + " " + ИмяКонстанты + " = " + НомерДоРасчета;
		
		ЗаписьЖурналаРегистрации(
		    ИмяСобытияЖурналаРегистрации(НСтр("ru='Увеличение номера задания для расчета'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке);
			
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	ОперацияРасчета   - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца
//	КонецРасчета 	  - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	НомерЗадания 	  - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//						Записи выбираются только те, которые не превышают указанного номера задания.
//	МассивОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
//
Функция НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания = Неопределено, МассивОрганизаций = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	(Задания.Месяц <= &КонецРасчета
	|		ИЛИ &КонецРасчета = ДАТАВРЕМЯ(1,1,1))
	|	И Задания.Операция = &ОперацияРасчета
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("КонецРасчета", 	    КонецРасчета);
	Запрос.УстановитьПараметр("ОперацияРасчета", 	ОперацияРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	
	Если НЕ ЗначениеЗаполнено(НомерЗадания) Тогда
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Иначе
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачалоРасчета;
	ИначеЕсли КонецРасчета <> '000101010000' Тогда
		Возврат КонецМесяца(КонецРасчета) + 1;
	Иначе
		Возврат '000101010000';
	КонецЕсли;
	
КонецФункции

// Проверяет соответствие константы НомерЗаданияКЗакрытиюМесяца и записей в регистре ЗаданияКЗакрытиюМесяца.
// В некоторых случаях записи в регистре могут иметь номер больший, чем хранится в константе.
// Из-за этого функция НачалоРасчета() может возвращать неправильный результат.
Процедура ПроверитьНомерЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Задания.НомерЗадания) КАК НомерЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.НомерЗадания > &НомерЗадания
	|";
	
	Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НомерЗадания) Тогда
		УвеличитьНомерЗадания(, Выборка.НомерЗадания - Запрос.Параметры.НомерЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует удачный пересчет. Вызывается когда выполнен пересчет, для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	СледующийМесяц - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	ОперацияРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой производился расчет;
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит таблицу КэшГраниц.
//
Процедура ЗафиксироватьРасчет(СледующийМесяц, ОперацияРасчета, ВременныеТаблицы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СледующийМесяц                   КАК Месяц,
	|	Границы.Операция                  КАК Операция,
	|	Границы.Организация               КАК Организация,
	|	МАКСИМУМ(Границы.НомерЗадания)    КАК НомерЗадания,
	|	НЕОПРЕДЕЛЕНО                      КАК Документ
	|ИЗ
	|	КэшГраниц КАК Границы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ПО &СледующийМесяц = Задания.Месяц
	|		И Границы.Операция = Задания.Операция
	|		И Границы.Организация = Задания.Организация
	|		И Границы.НомерЗадания = Задания.НомерЗадания
	|		И НЕОПРЕДЕЛЕНО = Задания.Документ
	|ГДЕ
	|	Задания.Месяц ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Операция,
	|	Границы.Организация";
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("СледующийМесяц", СледующийМесяц);
	
	Результат = Запрос.ВыполнитьПакет(); 
	Выборка = Результат.Получить(0).Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Операция.Установить(Выборка.Операция);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); // Очистили рассчитанные аналитики в прошлом периоде
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СледующийМесяц) Тогда
		Выборка = Результат.Получить(1).Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.Операция.Установить(Выборка.Операция);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина); // Перенесли рассчитанные аналитики в новый период
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации 		  - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	Операция 			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция, по которой блокируется регистр заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, Операция) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ЭлементБлокировки.УстановитьЗначение("Операция", Операция);
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Считывает записи регистра "Задания к закрытию месяца" во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Дата - Начало периода выборки данных.
//	КонецПериода  - Дата - Конец периода выборки данных.
//	НомерЗадания  - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//							Записи выбираются только те, которые не превышают указанного номера задания.
//	Организации   - Массив, СправочникСсылка.Организации - Фильтр по организации.
//	Операция 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Фильтр по типу операции.
//
// Возвращаемое значение:
//	Структура:
//		* Организация - Массив из СправочникСсылка.Организации - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//		* НомерЗадания - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//		* ПериодРасчета - Дата - Начало периода за который формируем задания.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, КонецПериода, НомерЗадания, Организации, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	(Задания.Месяц >= &НачалоПериода
	|		 ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1,1,1))
	|	И (Задания.Месяц <= &КонецПериода
	|		 ИЛИ &КонецПериода = ДАТАВРЕМЯ(1,1,1))
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  		КонецПериода);
	Запрос.УстановитьПараметр("НомерЗадания",  		НомерЗадания);
	Запрос.УстановитьПараметр("Операция", 	   		Операция);
	Запрос.УстановитьПараметр("Организации",   		Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("Организация", 		Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	ИсходныеДанные.Вставить("НомерЗадания", 	НомерЗадания);
	ИсходныеДанные.Вставить("ПериодРасчета", 	НачалоПериода);
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Формирует записи в регистр заданий к закрытию месяца, при изменении записей в регистрах.
//
// Параметры:
//	ИсточникСвойствДокумента - ДокументОбъект, Структура - проводимый документ или результат функции ПроведениеДокументов.ЭмуляцияДокумента() для пакетного формирования заданий
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицы изменений регистров.
//
Процедура ОтразитьЗаданияКЗакрытиюМесяца(ИсточникСвойствДокумента, МенеджерВременныхТаблиц) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца");

	ОтменаПроведения = ПроведениеДокументов.СвойстваДокумента(ИсточникСвойствДокумента).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("ТаблицыКонтрольныхРегистров", Новый Структура);
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Операция     КАК Операция,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Документ     КАК Документ
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|";
	
	ТекстВложенногоЗапроса = "";
	ТекстЗапросаВременныхТаблиц = "";
	ИменаВременныхТаблиц = "";
	
	УчетНДСУП.ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(
		Запрос,
		ТекстВложенногоЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц,
		ИсточникСвойствДокумента);
	
	ВзаиморасчетыСервер.ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(
		Запрос,
		ТекстВложенногоЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
		
	
	Документы.РасчетКурсовыхРазниц.ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, 
		ТекстВложенногоЗапроса, 
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
	
	
	ЗакрытиеМесяцаЛокализация.ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(
		Запрос,
		ТекстВложенногоЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
		
	
	
	//++ Локализация

		
	//-- Локализация

	ТекстУничтожитьВт = ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		
		//++ Локализация
		ЗакрытиеМесяцаЛокализация.ПроверитьКонтрольныеРегистрыВИсточникахДанныхДляЗаданийЗакрытияМесяца(Запрос);
		//-- Локализация
		
		Запрос.Текст = ТекстЗапросаВременныхТаблиц
			+ СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Возвращает дату задания на текущий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка - документ задания.
// 	Период - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаТекущийПериод(Операция, Организация, ДокументЗадания, Знач Период) Экспорт
	
	Месяц = НачалоМесяца(Период);
	Месяц = ЗакрытиеМесяцаЛокализация.ДатаЗаданияНаТекущийПериод(Операция, Организация, ДокументЗадания, Месяц);
	Возврат Месяц
КонецФункции

// Возвращает дату задания на следующий период в зависимости от операции.
// 
// Параметры:
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция закрытия месяца.
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДокументЗадания - ДокументСсылка - документ задания.
// 	СледующийМесяц - Дата - дата задания.
// Возвращаемое значение:
// 	Дата - дата задания
//
Функция ДатаЗаданияНаСледующийПериод(Операция, Организация, ДокументЗадания, Знач СледующийМесяц) Экспорт
	
	ДатаЗадания = ЗакрытиеМесяцаЛокализация.ДатаЗаданияНаСледующийПериод(Операция, Организация, ДокументЗадания, СледующийМесяц);
	
	
	Возврат ДатаЗадания
	
КонецФункции

// Дополняет текст запроса по формированию заданий.
// 
// Параметры:
// 	ИмяТаблицы - Строка - имя таблица для поиска в менеджере временных таблиц.
// 	ТекстыЗапросов - См. ИнициализироватьСтруктуруТекстовЗапросов
// 	Таблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
//
Процедура ДополнитьТекстЗапросаЗаданий(ИмяТаблицы, ТекстыЗапросов, Таблицы, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	Если Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстыЗапросов.ТекстЗапроса;
		ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ТекстыЗапросов.ТекстЗапросаВременныхТаблиц;
		Если ЗначениеЗаполнено(ТекстыЗапросов.ИменаВременныхТаблиц) Тогда
			ИменаВременныхТаблиц = ИменаВременныхТаблиц + ", " + ТекстыЗапросов.ИменаВременныхТаблиц;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Дополняет информацию об используемых временных таблицах.
// 
// Параметры:
//  Запрос - Запрос - Запрос
//  ИмяТаблицы - Строка - Имя таблицы
Процедура ДополнитьНазванияТаблицДляЗаданий(Запрос, ИмяТаблицы) Экспорт
	
	Если Запрос.Параметры.Свойство("ТаблицыКонтрольныхРегистров") Тогда
		Запрос.Параметры.ТаблицыКонтрольныхРегистров.Вставить(ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса по уничтожению временных таблиц.
// 
// Параметры:
// 	ИменаВременныхТаблиц - Строка - имена уничтожаемых временных таблиц, разделенных запятой.
//
// Возвращаемое значение:
// 	Строка - текст запроса.
//
Функция ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц) Экспорт
	
	Таблицы = СтрСоединить(СтрРазделить(ИменаВременныхТаблиц, ",", Ложь), ",");
	Таблицы = Новый Структура(Таблицы);
	ТестЗапроса = "";
	ШаблонЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %1;
	|";
	
	Для каждого КлючИЗначение Из Таблицы Цикл
		ТестЗапроса = ТестЗапроса + СтрШаблон(ШаблонЗапроса, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ТестЗапроса;
	
КонецФункции

// Инициализирует структуру текстов запросов
// 
// Параметры:
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстЗапроса - Строка - строка с текстом запроса.
// * ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// * ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
//
Функция ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса, ТекстЗапросаВременныхТаблиц = "", ИменаВременныхТаблиц = "") Экспорт
	СтруктураТекстовЗапросов = Новый Структура("ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц",
		ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов
КонецФункции

// Удаляет задания к расчету закрытия месяца за период, указанный в обработчике.
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
//	ДанныеКРасчету - см. ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц 
//	
Процедура УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика, ДанныеКРасчету = Неопределено) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	ДоступныеОрганизации = ДоступныеДляРасчетаОрганизации(ПараметрыРасчета.КонецПериода, ПараметрыРасчета.МассивОрганизаций);
	
	НачатьТранзакцию();
	
	Попытка
		
		НомерЗадания = ?(ДанныеКРасчету = Неопределено, УвеличитьНомерЗадания(), ДанныеКРасчету.НомерЗадания);
	
		ЗаблокироватьРегистрЗаданий(
			НомерЗадания,
			ДоступныеОрганизации,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		Если ДанныеКРасчету = Неопределено Тогда
			ДанныеКРасчету = ЗаданияКРасчетуЗаМесяц(
				ПараметрыРасчета.НачалоПериода,
				ПараметрыРасчета.КонецПериода,
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
		КонецЕсли;
		
		ЗафиксироватьРасчет(Неопределено, ПараметрыОбработчика.ДанныеЭтапа.Код, ДанныеКРасчету.ВременныеТаблицы);
		
		РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
			ДанныеКРасчету.ВременныеТаблицы,
			КонецМесяца(ДанныеКРасчету.ПериодРасчета) + 1);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеПериодаРасчета = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДанныеКРасчету.ПериодРасчета);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПредставлениеПериодаРасчета,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ДоступныеОрганизации,
			ДанныеКРасчету.ПериодРасчета);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыДляУстановкиОтборовВОткрываемыхФормах

// Проверяет режим открытия формы - открыта из обработки "Операции закрытия месяца" или не из нее.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка документов.
//
// Возвращаемое значение:
//	Булево - признак открытия формы из механизма закрытия месяца.
//
Функция ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Экспорт
	
	Возврат Форма.Параметры.Свойство(ИмяСлужебногоСвойстваОткрываемыхФорм());
	
КонецФункции


// Устанавливает отборы в формах регламентных документов регламентированного и международного учета,
// открываемых из формы операций закрытия месяца.
//
// Параметры:
//	Форма 					  - ФормаКлиентскогоПриложения - форма списка документов
//	Список 					  - ДинамическийСписок - список документов в этой форме
//	ИмяПоляДляОтбораПоПериоду - Строка - имя поля для отбора по периоду, по умолчанию "Дата".
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца.
//
Функция УстановитьОтборыВФормеСпискаРегламентныхДокументов(Форма, Список, ИмяПоляДляОтбораПоПериоду = "Дата") Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Форма.Параметры.Отбор.Очистить();
	
	// Отбор по организации.
	Если Список.Параметры.Элементы.Найти("МассивОрганизаций") <> Неопределено Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра("МассивОрганизаций", Форма.Параметры.МассивОрганизаций);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Организация",
			Форма.Параметры.МассивОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_Организация");
		
	КонецЕсли;
	
	// Отбор по периоду.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		ИмяПоляДляОтбораПоПериоду,
		НачалоМесяца(Форма.Параметры.ПериодРегистрации),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_НачалоПериода");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоляДляОтбораПоПериоду,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(Форма.Параметры.ПериодРегистрации),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_КонецПериода");
	
	// Отбор по типу операции.
	Если Форма.Параметры.Свойство("ТипОперации") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ТипОперации",
			Форма.Параметры.ТипОперации,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_ТипОперации");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Очищает ранее установленные отборы в формах регламентных документов регламентированного и международного учета,
// открываемых из формы операций закрытия месяца.
//
// Параметры:
//	Форма     - ФормаКлиентскогоПриложения - форма списка документов
//	Список    - ДинамическийСписок - список документов в этой форме
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - параметр процедуры ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца.
//
Функция ОчиститьРанееУстановленныеОтборыВФормеСпискаРегламентныхДокументов(Форма, Список, Настройки) Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохраняемыеНастройки = Новый Структура; // имена см. в УстановитьОтборыВФормеСпискаРегламентныхДокументов
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_Организация");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_НачалоПериода");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_КонецПериода");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_ТипОперации");
	
	Для Каждого КлючИЗначение Из СохраняемыеНастройки Цикл
		
		ОтборКомпоновки = Настройки.Элементы.Найти(КлючИЗначение.Ключ);
		
		Если ОтборКомпоновки <> Неопределено Тогда
			ОтборКомпоновки.Использование = Ложь;
			ОтборКомпоновки.ИдентификаторПользовательскойНастройки = "";
			ОтборКомпоновки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


// Устанавливает отборы в формах списков регистров, открываемых из формы ошибок, найденных при проверке.
//
// Параметры:
//	Форма 					  - ФормаКлиентскогоПриложения - форма списка регистра
//	Список 					  - ДинамическийСписок - записи регистра в этой форме
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца
//
Функция УстановитьОтборыВФормеСпискаРегистра(Форма, Список) Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Форма.Параметры.Отбор.Очистить();
	
	ОтборДляРасшифровки = Форма.Параметры.ОтборДляРасшифровки;
	
	// Отбор по периоду.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Период",
		НачалоМесяца(ОтборДляРасшифровки.Период),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		СокрЛП(Новый УникальныйИдентификатор));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Период",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(ОтборДляРасшифровки.Период),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		СокрЛП(Новый УникальныйИдентификатор));
	
	// Отбор по остальным полям расшифровки.
	Для Каждого КлючИЗначение Из ОтборДляРасшифровки Цикл
		
		Если НРег(КлючИЗначение.Ключ) = НРег("Период") Тогда
			Продолжить; // этот отбор уже установлен
		ИначеЕсли Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить; // нет такого поля в списке
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			КлючИЗначение.Ключ,
			КлючИЗначение.Значение,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			СокрЛП(Новый УникальныйИдентификатор));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область ОбщиеТекстыЗапросов


// Возвращает тексты запросов для получения таблицы изменений набора записей регистра накопления при его записи.
// Запросы составляются на основании метаданных регистра: измерений, ресурсов и реквизитов.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - метаданные регистра, для которого составляется таблица изменений;
//	Отбор - Структура -
//	ДополнительныеПараметры - см. Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения 
//
// Возвращаемое значение:
//	Структура - Описание:
//	* ТекстВыборкиНачальныхДанных - Строка - запрос для выполнения в событии "ПередЗаписью" набора данных регистра накопления.
//		Формирует текущие записи регистра и сохраняет их во временную таблицу "НачальныеЗаписи";
//	* ТекстВыборкиТаблицыИзменений - Строка - запрос для получения итоговой таблицы изменений. Выполняется в событии "ПриЗаписи".
//		Составляется объединением таблицы НачальныеЗаписи и новой таблицы записей регистра. Выводятся только записи, по которым есть разницы (Сумма ресурсов не равна 0).
//
Функция ТекстыЗапросовДляПолученияТаблицыИзмененийРегистра(МетаданныеРегистра, Отбор, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
	КонецЕсли;
	
	ТаблицаРегистра = МетаданныеРегистра.ПолноеИмя();
	ЭтоРегистрБухгалтерии = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеРегистра) = "РегистрыБухгалтерии";
	
	Если ЭтоРегистрБухгалтерии Тогда
		
		ТаблицаРегистра = ТаблицаРегистра + ".ДвиженияССубконто(, , Регистратор = &Регистратор, , )";
		
	КонецЕсли;
	
	ТекстЗапросаВыборкиНачальныхЗаписей =
	"ВЫБРАТЬ
	|	&ВыборкаПолей
	|ПОМЕСТИТЬ #НачальныеЗаписи
	|ИЗ
	|	#ТаблицаРегистра КАК Записи
	|ГДЕ
	|	&УсловияОтбораПоРегистру
	|ИНДЕКСИРОВАТЬ ПО
	|	&ВыборкаИндексов";
	
	ТекстЗапросаВыборкиИзменений =
	"ВЫБРАТЬ
	|	&ВыборкаПолейТаблицыИзменений
	|ПОМЕСТИТЬ #ТаблицаИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ВыборкаПолейНачальныхЗаписей
	|	ИЗ
	|		#НачальныеЗаписи КАК НачальныеЗаписи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ВыборкаПолейНовыхЗаписей
	|	ИЗ
	|		#ТаблицаРегистра КАК Записи
	|	ГДЕ
	|		&УсловияОтбораПоРегистру) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	&ВыборкаПолейГруппировки";
	
	ВыборкаПолей = Новый Массив;
	ВыборкаПолейТаблицыИзменений = Новый Массив;
	ВыборкаПолейНачальныхЗаписей = Новый Массив;
	ВыборкаПолейНовыхЗаписей = Новый Массив;
	ВыборкаПолейГруппировки = Новый Массив;
	ВыборкаПолейФильтра = Новый Массив;
	ВыборкаУсловийОтбораПоРегистру = Новый Массив;
	
	ИмяВременнойТаблицы = "ТаблицаИзменений"+МетаданныеРегистра.Имя;
	
	ПоляКоллекции = Тестирование.СтруктураПолейКоллекции(МетаданныеРегистра, ДополнительныеПараметры);
	МассивПолей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Измерения, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Ресурсы, Истина);	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Реквизиты, Истина);
	МассивРесурсов = ПоляКоллекции.ЧисловыеПоля;
	МассивПолейИндексов = ПоляКоллекции.Измерения;
	
	Для каждого Поле Из МассивПолей Цикл
		
		ТекстПоля = "." + Поле + " КАК " + Поле;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + Поле);
		
	КонецЦикла;
	
	Для каждого Ресурс Из МассивРесурсов Цикл
		
		ТекстПоля = "." + Ресурс + " КАК " + Ресурс;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица." + Ресурс + ") КАК " + Ресурс); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи"+ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("-Записи"+ТекстПоля);
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица." + Ресурс + ") <> 0");
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ВыборкаУсловийОтбораПоРегистру.Добавить("Записи." + ЭлементОтбора.Имя + " = " + "&" + ЭлементОтбора.Имя);
			ИндексМассива = МассивПолейИндексов.Найти(ЭлементОтбора.Имя);
			Если ИндексМассива <> Неопределено Тогда
				// удалим из индексов поле, по которому накладывается отбор
				МассивПолейИндексов.Удалить(ИндексМассива);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаУсловийОтбораПоРегистру.Количество() = 0 Тогда
		ВыборкаУсловийОтбораПоРегистру.Добавить("ИСТИНА");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПроверятьКонтрольнуюСумму Тогда
		// Добавим проверку на контрольную сумму (на случай когда числовых ресурсов нет или они равны 0.
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица.КонтрольнаяСумма) КАК КонтрольнаяСумма");
		ВыборкаПолейНачальныхЗаписей.Добавить("1 КАК КонтрольнаяСумма");
		ВыборкаПолейНовыхЗаписей.Добавить("-1 КАК КонтрольнаяСумма");
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица.КонтрольнаяСумма) <> 0");
	КонецЕсли;
	
	ТекстВыборкиПолей = СтрСоединить(ВыборкаПолей, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейТаблицыИзменений = СтрСоединить(ВыборкаПолейТаблицыИзменений, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейНачальныхЗаписей = СтрСоединить(ВыборкаПолейНачальныхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейНовыхЗаписей = СтрСоединить(ВыборкаПолейНовыхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейГруппировки = СтрСоединить(ВыборкаПолейГруппировки, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейФильтра = СтрСоединить(ВыборкаПолейФильтра, Символы.ПС + Символы.Таб + "ИЛИ ");
	ТекстВыборкиПолейИндексов = СтрСоединить(МассивПолейИндексов, "," + Символы.ПС + Символы.Таб);
	
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаПолей", ТекстВыборкиПолей);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#ТаблицаРегистра", ТаблицаРегистра);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.УсловияОтбораДо) Тогда
		ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей,
			"&УсловияОтбораПоРегистру", ДополнительныеПараметры.УсловияОтбораДо);
	Иначе
		ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей,
			"&УсловияОтбораПоРегистру", СтрСоединить(ВыборкаУсловийОтбораПоРегистру, Символы.ПС + Символы.Таб + "И "));
	КонецЕсли;
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаИндексов", ТекстВыборкиПолейИндексов);
	Если МассивПолейИндексов.Количество() = 0 Тогда
		ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, Символы.ПС + "ИНДЕКСИРОВАТЬ ПО" + Символы.ПС + Символы.Таб, "");
	КонецЕсли;
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНачальныхЗаписей", ТекстВыборкиПолейНачальныхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНовыхЗаписей", ТекстВыборкиПолейНовыхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейТаблицыИзменений", ТекстВыборкиПолейТаблицыИзменений);
	Если ЗначениеЗаполнено(ДополнительныеПараметры.УсловияОтбораПосле) Тогда
		ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&УсловияОтбораПоРегистру",
			ДополнительныеПараметры.УсловияОтбораПосле);
	Иначе
		ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&УсловияОтбораПоРегистру",
			СтрСоединить(ВыборкаУсловийОтбораПоРегистру, Символы.ПС + Символы.Таб + Символы.Таб + "И "));
	КонецЕсли;
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаРегистра", ТаблицаРегистра);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаИзменений", ИмяВременнойТаблицы);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейГруппировки", ТекстВыборкиПолейГруппировки);
	Если ЗначениеЗаполнено(ТекстВыборкиПолейФильтра) Тогда
		ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + "ИМЕЮЩИЕ" + Символы.ПС + Символы.Таб + ТекстВыборкиПолейФильтра;
	КонецЕсли;
	
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #НачальныеЗаписи";
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);

	Результат = Новый Структура;
	Результат.Вставить("ТекстВыборкиНачальныхДанных", ТекстЗапросаВыборкиНачальныхЗаписей);
	Результат.Вставить("ТекстВыборкиТаблицыИзменений", ТекстЗапросаВыборкиИзменений);
	Результат.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеТекстовыеДанные

// Возвращает текст по умолчанию для гиперссылки "Подробнее".
//
// Возвращаемое значение:
//	Строка - текст "Подробнее"
//
Функция ТекстПодробнееПоУмолчанию() Экспорт
	Возврат НСтр("ru='Подробнее'");
КонецФункции

// Возвращает имя события журнала регистрации для произвольного действия операции закрытия месяца.
//
// Параметры:
//	ДополнениеИмени - Строка - выполняемое действие.
//
// Возвращаемое значение:
//	Строка - имя события
//
Функция ИмяСобытияЖурналаРегистрации(ДополнениеИмени) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Закрытие месяца.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ДополнениеИмени);
	
КонецФункции

// Возвращает служебный символ, означающий что исключение было обработано в обработчике этапа закрытия месяца.
//
// Возвращаемое значение:
//	Строка - служебный символ
//
Функция СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета() Экспорт
	
	Возврат Символы.ПС + "#ИсключениеУжеЗафиксировано" + Символы.ПС;
	
КонецФункции

// Возвращает имя служебного свойства, передаваемого в параметры всех открываемых форм.
//
// Возвращаемое значение:
//	Строка - имя служебного свойства.
//
Функция ИмяСлужебногоСвойстваОткрываемыхФорм() Экспорт
	
	Возврат "ЗакрытиеМесяца";
	
КонецФункции

#КонецОбласти


#Область УстановкаБлокировкиФункционалаПриОбновленииИБ

// Проверяет возможность выполнения операции в зависимости от текущего состояния обновления ИБ.
// Если все входящие данные операции еще не обработаны, то операцию выполнять нельзя.
// В этом случае в журнал регистрации будет записана информация о необработанных данных и вызвано исключение.
//
// Параметры:
//	ВходящиеДанные 		  - Соответствие из КлючИЗначение:
//							  * Ключ - Строка, ОбъектМетаданных - входящие данные, используемые  операцией
//							  * Значение - ЛюбаяСсылка, Структура, Неопределено, Массив из ЛюбаяСсылка - отбор
//	ПредставлениеОперации - Строка - пользовательское представление выполняемой операции.
//
Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации) Экспорт
	
	Если НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОшибкиДляИсключение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
			|Подробнее см. в Журнале регистрации.'"),
		ПредставлениеОперации);
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
		    |Корректное выполнение операции будет возможно после того,
			|когда будут успешно завершены все обработчики обновление исходных данных для этой операции.'"),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	ОбработчикиОбновления   = БлокировкаЗакрытияМесяцаОбработчикамиОбновления();
	
	ДанныеЗаблокированы = Ложь;
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		
		БлокирующийОбработчик = ОбработчикиОбновления.Получить(ОбъектМетаданных);
		Если БлокирующийОбработчик = Неопределено Тогда
			БлокирующийОбработчик = Истина;
		КонецЕсли;
		
		Отбор = ?(ТипЗнч(ОписаниеДанных.Значение) = Тип("Булево"), Неопределено, ОписаниеДанных.Значение);
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если БлокирующийОбработчик И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ПредставлениеОперации,
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектМетаданных,
					Отбор,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
			
		ИначеЕсли БлокирующийОбработчик Тогда

			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		// Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru='Необходимо дождаться завершения обработки всех данных следующих типов:'");
			
			Для Каждого ИмяОбъектаМетаданных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработанные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ИмяОбъектаМетаданных;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОтборПоСсылкам,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ВызватьИсключение ТекстОшибкиДляИсключение;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает информацию о важности обработчиков обновления.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//	 * Ключ - ОбъектМетаданных - обрабатываемые метаданные
//	 * Значение - Булево - признак блокировки при закрытии месяца
Функция БлокировкаЗакрытияМесяцаОбработчикамиОбновления() Экспорт
	
	Результат = Новый Соответствие;
	ОбработчикиОбновления = ЗакрытиеМесяцаПовтИсп.БлокировкаЗакрытияМесяцаОбработчикамиОбновления();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.ИмяОбработчика КАК ИмяОбработчика,
	|	Т.ИзменяемыеОбъекты КАК ИзменяемыеОбъекты
	|ИЗ
	|	РегистрСведений.ОбработчикиОбновления КАК Т
	|ГДЕ
	|	Т.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработчиковОбновления.Выполнен)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БлокируетЗакрытиеМесяца = ОбработчикиОбновления.Получить(НРег(Выборка.ИмяОбработчика));
		БлокируетЗакрытиеМесяца = ?(БлокируетЗакрытиеМесяца = Неопределено, Истина, БлокируетЗакрытиеМесяца);
		
		МассивИменМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Выборка.ИзменяемыеОбъекты), ",", Истина, Истина);
		
		Для Каждого ИмяОбъектаМетаданных Из МассивИменМетаданных Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(ОбъектМетаданных, БлокируетЗакрытиеМесяца);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обработчики обновления блокирующие закрытие месяца.
// 
// Возвращаемое значение:
//  Строка - Обработчики обновления блокирующие закрытие месяца
Функция ОбработчикиОбновленияБлокирующиеЗакрытиеМесяца() Экспорт

	// Каждый обработчик обновления указывается на новой строке, запятые в конце строки не нужны	
	Обработчики = "
	|РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюУдалениеДублей
	|";
	
	ЗакрытиеМесяцаЛокализация.ОбработчикиОбновленияБлокирующиеЗакрытиеМесяца(Обработчики);
	
	Возврат Обработчики;
	
КонецФункции

// Обработчики обновления не влияющие на закрытие месяца.
// 
// Возвращаемое значение:
//  Строка - Обработчики обновления не влияющие на закрытие месяца
Функция ОбработчикиОбновленияНеВлияющиеНаЗакрытиеМесяца() Экспорт
	
	// Каждый обработчик обновления указывается на новой строке, запятые в конце строки не нужны	
	Обработчики = "
	|Справочники.НастройкиРМК.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Справочники.СкидкиНаценки.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Справочники.УсловияПредоставленияСкидокНаценок.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.ЗаданияКРаспределениюРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.ЗаданияКРаспределениюРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсиюУдалитьДублированиеСтрок
	|РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.ЧислоЗаписейРегистраторовРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыСведений.РеестрДокументов.ОбработатьДанныеРегистраДляПереходаНаНовуюВерсию
	|РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЭтапПроизводства2_2
	|РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.ЗапасыИПотребности.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСКлиентами.УдалитьДвиженияПоПередачеНаХранение
	|РегистрыНакопления.РасчетыСПоставщикамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСКлиентамиПланОплат.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСПоставщикамиПланПоставок.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.ПодтверждениеЗачисленияЗарплаты.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.УдалитьРегистраторГрафикаДвиженияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.ПервичныйДокумент.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|Документы.РаспределениеПрочихЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|УправлениеСвойствамиПереопределяемый.ОбработатьДанныеДляПереходаНаНовуюВерсию
	|
	|
	|";
	
	ЗакрытиеМесяцаЛокализация.ОбработчикиОбновленияНеВлияющиеНаЗакрытиеМесяца(Обработчики);
	
	Возврат Обработчики;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыФоновыхЗаданий

// Методы, содержащиеся в данной области, используются в качестве параметра
// платформенного механизма фоновых заданий ФоновыеЗадания.Выполнить()

// Вспомогательный метод формы обработки ОперацииЗакрытияМесяца.
// Выполняет заполнение состояния этапов в фоне.
//
Процедура ЗаполнитьСостоянияЭтаповВФоновомЗадании(ПараметрыЗапуска) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапуска);
	
КонецПроцедуры

// Вспомогательный метод формы обработки ОперацииЗакрытияМесяца.
// Выполняет расчет этапов в фоне.
//
Процедура ВыполнитьРасчетЭтаповВФоновомЗадании(ПараметрыЗапуска) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапуска);
	
КонецПроцедуры

// Вспомогательный метод регламентного задания "ЗакрытиеМесяца".
// Выполняет регламентное задание "ЗакрытиеМесяца" в фоне.
// 
// Параметры:
//	ОписаниеЗадания - Структура -
//	ИдентификаторРасчета - УникальныйИдентификатор
//
Процедура ВыполнитьЗакрытиеМесяцаВФоновомЗадании(ОписаниеЗадания, ИдентификаторРасчета) Экспорт
	
	ЗакрываемыеПериоды = Новый Массив;
	Если ОписаниеЗадания.ДатаНачалаЗакрытияПрошлогоПериода <= День(ТекущаяДатаСеанса()) Тогда
		ЗакрываемыеПериоды.Добавить(ДобавитьМесяц(КонецМесяца(ТекущаяДатаСеанса()), -1));
	КонецЕсли;
	ПоследнийПериод = НачалоДня(ТекущаяДатаСеанса());
	ЗакрываемыеПериоды.Добавить(ПоследнийПериод);
	
	// Последовательное закрытие месяцев.
	Для Каждого ТекущийПериод Из ЗакрываемыеПериоды Цикл
		
		Если ТекущийПериод < ПоследнийПериод Тогда
			ЗакрыватьОУ = ОписаниеЗадания.ЗакрыватьОперативныйУчетВПрошломПериоде;
			ЗакрыватьРУ = ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВПрошломПериоде;
			ЗакрыватьМУ = ОписаниеЗадания.ЗакрыватьМеждународныйУчетВПрошломПериоде;
			РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие;
		Иначе
			ЗакрыватьОУ = ОписаниеЗадания.ЗакрыватьОперативныйУчетВТекущемПериоде;
			ЗакрыватьРУ = ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВТекущемПериоде;
			ЗакрыватьМУ = Ложь;
			РежимЗакрытияМесяца = ОписаниеЗадания.РежимЗакрытияТекущегоПериода;
		КонецЕсли;
		
		Если НЕ ЗакрыватьОУ И НЕ ЗакрыватьРУ И НЕ ЗакрыватьМУ Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьПризнакЗапускаРасчета(
			ОписаниеЗадания.Организация,
			ИдентификаторРасчета,
			НСтр("ru='регламентное задание ""Закрытие месяца""'"),
			ТекущийПериод);
		
		// Заполним состояния этапов.
		СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
			ТекущийПериод,
			ОписаниеЗадания.Организация,
			Неопределено, // СтруктураДанных
			РежимЗакрытияМесяца);
			
		ДопСвойства = Новый Структура;
		ДопСвойства.Вставить("ОперативныйУчет",        ЗакрыватьОУ);
		ДопСвойства.Вставить("РегламентированныйУчет", ЗакрыватьРУ);
		ДопСвойства.Вставить("МеждународныйУчет",      ЗакрыватьМУ);
		ДопСвойства.Вставить("РежимЗакрытияМесяца",    РежимЗакрытияМесяца);
		
		ПараметрыЗапускаОбновленияСостояния =
			Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных,
			"", // Адрес хранилища
			Неопределено, // Обновить только один этап
			ДопСвойства);
		
		ПараметрыЗапускаОбновленияСостояния.ПроверятьДатуЗапрета 	 = Истина;
		ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок  = Истина;
		ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа = Истина;
		
		Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
		
		ИмяСобытия = НСтр("ru = 'Закрытие месяца'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Если СтруктураДанных.ИзмененияЗапрещены Тогда
			
			Если ЗначениеЗаполнено(ОписаниеЗадания.Организация) Тогда
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Регламентное задание закрытия месяца %1 по организации %2 не выполнялось.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(ТекущийПериод),
					СокрЛП(ОписаниеЗадания.Организация));
				
			Иначе
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Регламентное задание закрытия месяца %1 по организациям %2 не выполнялось.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(ТекущийПериод),
					РасчетСебестоимостиПрикладныеАлгоритмы.ПредставлениеОрганизаций(СтруктураДанных.ПараметрыРасчета.МассивОрганизаций, ","));
				
			КонецЕсли;
			
			ТекстДляПротокола = ТекстДляПротокола + Символы.ПС + СтруктураДанных.ПоясненияКЗапретуИзменений;
			 
			ЗаписьЖурналаРегистрации(
			 	ИмяСобытия
				,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.ЗакрытиеМесяца,
				,
				ТекстДляПротокола);
			
			Продолжить;
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.ЗаблокированныеОрганизации) Тогда
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Регламентное задание закрытия месяца %1 не выполнялось по заблокированным организациям: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(ТекущийПериод),
				РасчетСебестоимостиПрикладныеАлгоритмы.ПредставлениеОрганизаций(СтруктураДанных.ЗаблокированныеОрганизации, ","));
			
			 ЗаписьЖурналаРегистрации(
			 	ИмяСобытия
				,
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегламентныеЗадания.ЗакрытиеМесяца,
				,
				ТекстДляПротокола);
				
		КонецЕсли;
		
		// Последовательно выполним все этапы.
		Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
			
			Если ТекущаяСтрока.ВыполняетсяВручную Тогда
				Продолжить;
			КонецЕсли;
			
			Если РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие
			 И НЕ ТекущаяСтрока.ВыполняетсяПриПредварительномЗакрытииМесяца Тогда
				Продолжить;
			КонецЕсли;
			
			Если (НЕ ЗакрыватьОУ И ТекущаяСтрока.ОперативныйУчет)
			 ИЛИ (НЕ ЗакрыватьРУ И ТекущаяСтрока.РегламентированныйУчет)
			 ИЛИ (НЕ ЗакрыватьМУ И ТекущаяСтрока.МеждународныйУчет) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
				СтруктураДанных,
				ТекущаяСтрока.Код,
				СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код,
				РежимЗакрытияМесяца);
			
			Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Метод регламентного задания "РасчетКурсовыхРазниц".
//
Процедура ВыполнитьПереоценку() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетКурсовыхРазниц);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Возврат;
	КонецЕсли;
	
	Документы.РасчетКурсовыхРазниц.ВыполнитьПереоценку(ТекущаяДатаСеанса());
	
КонецПроцедуры

// Метод регламентного задания "ЗакрытиеМесяца".
//
Процедура ВыполнитьЗакрытиеМесяца(Организация = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
	
	Обработки.ОперацииЗакрытияМесяца.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	
	ОписаниеЗадания = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолучитьРегламентноеЗаданиеПоОрганизации(Организация);
	
	Если НЕ ОписаниеЗадания.НастройкаСуществует Тогда
		ВызватьИсключение НСтр("ru='Не задана настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	// Проверим возможность запуска расчета.
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьСостояниеАктивныхРасчетов();
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания и в регистр выполнения операций
	
	Если ОписаниеЗадания.ДатаНачалаЗакрытияПрошлогоПериода <= День(ТекущаяДатаСеанса())
	 И (ОписаниеЗадания.ЗакрыватьОперативныйУчетВПрошломПериоде
	 ИЛИ ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВПрошломПериоде
	 ИЛИ ОписаниеЗадания.ЗакрыватьМеждународныйУчетВПрошломПериоде) Тогда
		ПервыйПериод = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), -1);
	Иначе
		ПервыйПериод = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
		ОписаниеЗадания.Организация,
		ИдентификаторРасчета,
		НСтр("ru='регламентное задание ""Закрытие месяца""'"),
		ПервыйПериод);
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		ВызватьИсключение АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	ОписаниеЗадания.Удалить("Задание");
	ОписаниеЗадания.Удалить("СостояниеЗадания");
	
	// Запустим расчет в фоновом задании.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ОписаниеЗадания);
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдентификаторРасчета);
	
	ФоновыеЗадания.Выполнить(
		"ЗакрытиеМесяцаСервер.ВыполнитьЗакрытиеМесяцаВФоновомЗадании",
		ПараметрыЭкспортнойПроцедуры,
		ИмяФоновогоЗадания(ИдентификаторРасчета),
		НСтр("ru='Регламентное задание закрытия месяца'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Вызывается из подписки на события ПередЗаписьюОтносительныхКурсовВалют.
//
// Параметры:
//	ОтносительныеКурсыВалют - РегистрСведенийНаборЗаписей.ОтносительныеКурсыВалют - записываемый набор
//	Движения   - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ 	   - Булево - Признак отказа от проведения документа.
//
Процедура СчитатьКурсыВалютПередЗаписью(ОтносительныеКурсыВалют, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Курсы.Период    КАК Период,
	|	Курсы.Валюта    КАК Валюта,
	|	Курсы.БазоваяВалюта КАК БазоваяВалюта,
	|	Курсы.КурсЧислитель КАК КурсЧислитель,
	|	Курсы.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ОтносительныеКурсыВалютПередЗаписью
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют КАК Курсы
	|ГДЕ
	|	Курсы.Период = &Период";
	
	ОтносительныеКурсыВалют.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос.МенеджерВременныхТаблиц = ОтносительныеКурсыВалют.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ОтносительныеКурсыВалют.Отбор.Период.Значение);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Вызывается из подписки на события ПроверитьНеобходимостьПереоценки.
// Если изменены курсы валют, то необходимо переоценить денежные и валютные средства, и пересчитать взаиморасчеты.
//
// Параметры:
//	ОтносительныеКурсыВалют - РегистрСведенийНаборЗаписей.ОтносительныеКурсыВалют - записываемый набор
//	Движения   - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ 	   - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьНеобходимостьПереоценки(ОтносительныеКурсыВалют, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка не выполняется поскольку данный механизм отрабатывает при получении данных в РИБ.
	
	// Проверка на запись набора при обновлении информационной базы
	Если ОтносительныеКурсыВалют.ДополнительныеСвойства.Свойство("ЗаписьПриОбновленииИнформационнойБазы") Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбменДаннымиУТ.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = ОтносительныеКурсыВалют.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ОтносительныеКурсыВалют.Отбор.Период.Значение);
	Запрос.УстановитьПараметр("Валюта", ОтносительныеКурсыВалют.Отбор.Валюта.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Организация КАК Организация,
	|	ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта
	|ПОМЕСТИТЬ ВалютаВРегистрах
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств = &Валюта
	|	И ДенежныеСредства.Период >= &Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Организация КАК Организация,
	|	ДенежныеСредства.Касса.ВалютаДенежныхСредств КАК Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Касса.ВалютаДенежныхСредств = &Валюта
	|	И ДенежныеСредства.Период >= &Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Организация КАК Организация,
	|	ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств КАК Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств = &Валюта
	|	И ДенежныеСредства.Период >= &Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Организация КАК Организация,
	|	ДенежныеСредства.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВПути КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Валюта = &Валюта
	|	И ДенежныеСредства.Период >= &Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Организация КАК Организация,
	|	ДенежныеСредства.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Валюта = &Валюта
	|	И ДенежныеСредства.Период >= &Период
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КредитыДепозитыЗаймыАренда.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	КредитыДепозитыЗаймыАренда.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК КредитыДепозитыЗаймыАренда
	|ГДЕ
	|	КредитыДепозитыЗаймыАренда.Валюта = &Валюта
	|	И КредитыДепозитыЗаймыАренда.Период >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц,
	|	Т.Валюта КАК Валюта,
	|	Т.БазоваяВалюта КАК БазоваяВалюта
	|ПОМЕСТИТЬ ВТИзмененныеКурсы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Период КАК Период,
	|		Т.Валюта КАК Валюта,
	|		Т.БазоваяВалюта КАК БазоваяВалюта
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Т.Период КАК Период,
	|			Т.Валюта КАК Валюта,
	|			Т.БазоваяВалюта КАК БазоваяВалюта,
	|			Т.КурсЧислитель КАК КурсЧислитель,
	|			Т.КурсЗнаменатель КАК КурсЗнаменатель
	|		ИЗ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК Т
	|		ГДЕ
	|			Т.Период = &Период
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Т.Период,
	|			Т.Валюта,
	|			Т.БазоваяВалюта,
	|			-Т.КурсЧислитель,
	|			-Т.КурсЗнаменатель
	|		ИЗ
	|			ОтносительныеКурсыВалютПередЗаписью КАК Т) КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Период,
	|		Т.Валюта,
	|		Т.БазоваяВалюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(Т.КурсЧислитель) <> 0
	|			ИЛИ СУММА(Т.КурсЗнаменатель) <> 0)) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТИзмененныеКурсы.Месяц КАК Месяц
	|ИЗ
	|	ВТИзмененныеКурсы КАК ВТИзмененныеКурсы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВалютаВРегистрах
	|	ПО ВТИзмененныеКурсы.Валюта = ВалютаВРегистрах.Валюта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // курсы не изменились.
	КонецЕсли;
	
	// Создадим задания к закрытию месяца.
	Запрос.УстановитьПараметр("МассивОрганизаций", Справочники.Организации.ДоступныеОрганизации());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Политики.Период, МЕСЯЦ)) КАК НачалоВеденияУчета
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК Политики
	|		ПО (Политики.Организация = Организации.ГоловнаяОрганизация)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВалютаВРегистрах КАК ВалютаВРегистрах
	|		ПО Организации.Ссылка = ВалютаВРегистрах.Организация
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ИзмененныеКурсы.Месяц КАК Месяц,
	|	ИзмененныеКурсы.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеКурсы КАК ИзмененныеКурсы
	|		ПО Организации.НачалоВеденияУчета <= ИзмененныеКурсы.Месяц
	|			И Организации.ВалютаРегламентированногоУчета = ИзмененныеКурсы.БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов) КАК Операция
	|ИЗ
	|	ВТИзменения КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // нет данных для формирования заданий к расчету
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКЗакрытиюМесяца");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц",       "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Операция",    "Операция");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		Блокировка.Заблокировать(); 
		
		РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
		
	Исключение
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать задания к закрытию месяца по причине: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Проверка необходимости переоценки денежных и валютных средств.'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	// Создадим задания к распределению расчетов.
	Если НЕ Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Валюта КАК Валюта
	|ИЗ
	|	ВТИзменения КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРаспределениюРасчетовСКлиентами""      КАК ИмяРегистраЗаданий,
	|	Клиенты.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
	|	Клиенты.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
	|	Клиенты.ОбъектРасчетов                           КАК ОбъектРасчетов,
	|	&НачалоМесяца                                    КАК Месяц
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Клиенты
	|ГДЕ
	|	Клиенты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И Клиенты.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРаспределениюРасчетовСПоставщиками""      КАК ИмяРегистраЗаданий,
	|	Поставщики.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
	|	Поставщики.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
	|	Поставщики.ОбъектРасчетов                           КАК ОбъектРасчетов,
	|	&НачалоМесяца                                       КАК Месяц
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Поставщики
	|ГДЕ
	|	Поставщики.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И Поставщики.Валюта = &Валюта";
	
	Пока Выборка.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Валюта", 	  Выборка.Валюта);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Месяц));
		Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Выборка.Месяц));
		
		ВыборкаРасчетов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРасчетов.Следующий() Цикл
			Задания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].СоздатьМенеджерЗаписи(); // РегистрСведенийМенеджерЗаписи.ЗаданияКРаспределениюРасчетовСКлиентами, РегистрСведенийМенеджерЗаписи.ЗаданияКРаспределениюРасчетовСПоставщиками  
			ЗаполнитьЗначенияСвойств(Задания, ВыборкаРасчетов);
			Задания.НомерЗадания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].ПолучитьНомерЗадания();
			Задания.Записать();
		КонецЦикла;
		
	КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из подписки на события "ОчиститьЗаданияПередУдалениемДокумента".
// Производится очистка измерения "Документ" по регистрам "Задания...",
// где в текущих записях используется удаляемый документ.
//
// Параметры:
//  Источник - ДокументОбъект - удаляемый документ.
//	Отказ 	 - Булево - Признак необходимости прерывания удаления объекта.
//
Процедура ОчиститьЗаданияПередУдалениемДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	Если НЕ ЗакрытиеМесяцаПовтИсп.ДокументМожетФормироватьЗадания(Источник.Метаданные().Имя) Тогда
		Возврат;
	КонецЕсли;
	//-- Локализация
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.ИмяРегистра               КАК ИмяРегистра,
	|	Задания.Месяц                     КАК Месяц,
	|	Задания.НомерЗадания              КАК НомерЗадания,
	|	Задания.Документ                  КАК Документ,
	|	Задания.Операция                  КАК Операция,
	|	Задания.Организация               КАК Организация,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	Задания.НомерПакета               КАК НомерПакета,
	|	Задания.ОбъектУчета               КАК ОбъектУчета,
	|	Задания.ОсновноеСредство          КАК ОсновноеСредство,
	|	Задания.Пропускать                КАК ПропускатьПриЗаписи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуСебестоимости"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		НЕОПРЕДЕЛЕНО         КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И Задания.Организация = Дубли.Организация
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКЗакрытиюМесяца"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		Задания.Операция     КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.Операция = Дубли.Операция
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация              КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.Организация = Дубли.Организация
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.Организация = Дубли.Организация
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|	) КАК Задания
	|ИТОГИ ПО
	|	Задания.ИмяРегистра
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ВыборкаЗаданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаданий.Следующий() Цикл
		ЗаданияКОчистке = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей.ЗаданияКЗакрытиюМесяца
		ЗаданияКОчистке.Отбор.Документ.Установить(Источник.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКОчистке, Истина);
		
		ЗаданияКЗаписи = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ВыборкаЗаписей = ВыборкаЗаданий.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл 
			Если Не ВыборкаЗаписей.ПропускатьПриЗаписи Тогда
				КЗаписи = ЗаданияКЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(КЗаписи, ВыборкаЗаписей);
			КонецЕсли;
		КонецЦикла;
		Попытка
			Если ЗаданияКЗаписи.Количество() <> 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКЗаписи, Ложь);
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление помеченных объектов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Задания к закрытию месяца перед записью.
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей.ЗаданияКРасчетуСебестоимости, РегистрСведенийНаборЗаписей.ЗаданияКЗакрытиюМесяца, РегистрСведенийНаборЗаписей.ЗаданияКРасчетуАмортизацииОС, РегистрСведенийНаборЗаписей.ЗаданияКРасчетуСтоимостиВНА, РегистрСведенийНаборЗаписей.ЗаданияКРаспределениюРасчетовСКлиентами, РегистрСведенийНаборЗаписей.ЗаданияКФормированиюДвиженийПоВНА, РегистрСведенийНаборЗаписей.ЗаданияКРаспределениюРасчетовСПоставщиками, РегистрСведенийНаборЗаписей.ОтражениеДокументовВМеждународномУчете, РегистрСведенийНаборЗаписей.ЗаданияКФормированиюДвиженийПоНДС, РегистрСведенийНаборЗаписей.ЗаданияКРасчетуАмортизацииНМА - Источник
//  Отказ - Булево - Отказ
//  Замещение - Булево - Замещение
Процедура ЗаданияКЗакрытиюМесяцаПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка И НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоОбменРИБ") Тогда
		// Если задание к закрытию месяца пришло по обмену РИБ, то его надо проверить на вхождение в заблокированный период
		Возврат;
	КонецЕсли;

	Если НЕ РегистрыСведений.НастройкаБлокировкиОтИзменений.ИспользоватьМеханизмБлокировкиОтИзменений()
	 ИЛИ НЕ ПроверятьБлокировкуПериодаДляНабораЗаписей(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.Метаданные().Измерения.Найти("Месяц") <> Неопределено Тогда
		ИмяПоляПериод = "Месяц";
	Иначе
		ИмяПоляПериод = "ДатаОтражения";
	КонецЕсли;
	
	ИменаПолей = ИмяПоляПериод + "," + "Организация";
	
	ТаблицаЗаданий = Источник.Выгрузить(, ИменаПолей);
	ТаблицаЗаданийПоМесяцам = Источник.Выгрузить(, ИменаПолей);
	
	Для Каждого ТекСтр Из ТаблицаЗаданийПоМесяцам Цикл
		ТекСтр[ИмяПоляПериод] = НачалоМесяца(ТекСтр[ИмяПоляПериод]);		
	КонецЦикла;
	
	ТаблицаЗаданий.Свернуть(ИменаПолей, "");
	ТаблицаЗаданий.Сортировать(ИменаПолей);
	
	ТаблицаЗаданийПоМесяцам.Свернуть(ИменаПолей, "");
	ТаблицаЗаданийПоМесяцам.Сортировать(ИменаПолей);
	ТаблицаЗаданийПоМесяцам.Колонки.Добавить("ОшибкаЗафиксирована", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОрганизаций = ТаблицаЗаданий.Скопировать(, "Организация");
	ТаблицаОрганизаций.Свернуть("Организация", "");
	
	ДатыПоОрганизациям = РегистрыСведений.НастройкаБлокировкиОтИзменений.ДатыБлокировкиПоОрганизациям(ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"));
	
	
	Для Каждого ТекСтр Из ТаблицаЗаданий Цикл
		
		ЗаблокироватьПо = ДатыПоОрганизациям.Получить(ТекСтр.Организация);

		Если ЗначениеЗаполнено(ЗаблокироватьПо) И НачалоМесяца(ТекСтр[ИмяПоляПериод]) <= ЗаблокироватьПо Тогда

			СтрокаЗаМесяц = ТаблицаЗаданийПоМесяцам.НайтиСтроки(Новый Структура(ИменаПолей, НачалоМесяца(ТекСтр[ИмяПоляПериод]), ТекСтр.Организация));
			Если СтрокаЗаМесяц[0].ОшибкаЗафиксирована Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрироватьОшибку = Истина;
			
			Если РегистрироватьОшибку Тогда
				ДобавитьИнформациюОЗаданииВЗаблокированномПериоде(ТекСтр.Организация, ТекСтр[ИмяПоляПериод], ЗаблокироватьПо, Источник.Метаданные().Имя, Отказ);
				СтрокаЗаМесяц[0].ОшибкаЗафиксирована = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПроверокСостоянияСистемы

// Заполняет группы проверок, выполняемых в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаГруппПроверок - см. АудитСостоянияСистемы.ТаблицаГруппПроверокСостоянияСистемы
//
Процедура ЗаполнитьГруппыПроверокДляРегистрации(ТаблицаГруппПроверок) Экспорт
	
	ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
	ОписаниеГруппыПроверок.ИдентификаторРодителя = "";
	ОписаниеГруппыПроверок.Наименование = НСтр("ru='Закрытие месяца'");
	ОписаниеГруппыПроверок.КонтекстПроверокВеденияУчета = Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка();
	ОписаниеГруппыПроверок.Идентификатор = "ЗакрытиеМесяца";
	
	ТаблицаЭтапов = Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца();
	
	ВсеЭтапы = Новый Соответствие;
	Для Каждого ОперацияЗакрытияМесяца Из Перечисления.ОперацииЗакрытияМесяца Цикл
		ВсеЭтапы.Вставить(ОперацияЗакрытияМесяца, Истина);
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТаблицаЭтапов Цикл
		
		ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
		ОписаниеГруппыПроверок.ИдентификаторРодителя = "ЗакрытиеМесяца";
		ОписаниеГруппыПроверок.Наименование = ТекущаяСтрока.Наименование;
		ОписаниеГруппыПроверок.КонтекстПроверокВеденияУчета = ТекущаяСтрока.Код;
		ОписаниеГруппыПроверок.Идентификатор = "Группа" + "_" + ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущаяСтрока.Код);
		
		ВсеЭтапы.Удалить(ТекущаяСтрока.Код);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ВсеЭтапы Цикл
		
		ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
		ОписаниеГруппыПроверок.ИдентификаторРодителя = "ЗакрытиеМесяца";
		ОписаниеГруппыПроверок.Наименование = СокрЛП(КлючИЗначение.Ключ);
		ОписаниеГруппыПроверок.КонтекстПроверокВеденияУчета = КлючИЗначение.Ключ;
		ОписаниеГруппыПроверок.Идентификатор = "Группа" + "_" + ОбщегоНазначения.ИмяЗначенияПеречисления(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет проверки, выполняемые в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации.
//
Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	
	// Заполним проверки операций закрытия месяца.
	РасчетСебестоимостиКорректировкаСтоимости.ОписаниеПроверок_РасчетПартийИСебестоимости(ТаблицаПроверок);
	ОписаниеПроверок_ИсправлениеОшибокВИсходныхДанных(ТаблицаПроверок);
	ЗапасыСервер.ОписаниеПроверок_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ТаблицаПроверок);
	ДоходыИРасходыСервер.ОписаниеПроверок_РаспределениеРасходовБудущихПериодов(ТаблицаПроверок);
	ЗапасыСервер.ОписаниеПроверок_ОформлениеПередачТоваров(ТаблицаПроверок);
	ЗапасыСервер.ОписаниеПроверок_ОформлениеОстатковТоваровКПередаче(ТаблицаПроверок);
	ЗапасыСервер.ОписаниеПроверок_ОформлениеВыкупаТоваров(ТаблицаПроверок);
	ЗапасыСервер.ОписаниеПроверок_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ТаблицаПроверок);
	ЗапасыСервер.ОписаниеПроверок_ОформлениеОтчетовКомитентамОСписании(ТаблицаПроверок);
	ЗатратыСервер.ОписаниеПроверок_НастройкаРаспределенияРасходов(ТаблицаПроверок);
	ЗатратыСервер.ОписаниеПроверок_НастройкаРаспределенияРасходовВручную(ТаблицаПроверок);
	Документы.РаспределениеПрочихЗатрат.ОписаниеПроверок_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(ТаблицаПроверок);
	Документы.РаспределениеПрочихЗатрат.ОписаниеПроверок_РаспределениеРасходовПоНаправлениямДеятельности(ТаблицаПроверок);
	Документы.РаспределениеДоходовПоНаправлениямДеятельности.ОписаниеПроверок_РаспределениеДоходовПоНаправлениямДеятельности(ТаблицаПроверок);	
	ЗакрытиеМесяцаЛокализация.ДополнитьПроверкиДляРегистрации(ТаблицаПроверок);
	ВзаиморасчетыСервер.ОписаниеПроверок_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаПроверок);
	
	// Также создадим служебные контекстные проверки,
	// к которым можно записывать сообщения о проблемах, диагностированных при выполнении расчета.
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ОперацииЗакрытияМесяца.ЗначенияПеречисления Цикл
		
		ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			ИдентификаторСлужебнойПроверкиЭтапа(Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя]),
			Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя],
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ВоВремяРасчета,
			"");
		ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
		
		ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Проблемы, диагностированные при выполнении операции ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				МетаЗначение.Синоним),
			НСтр("ru='Служебная контекстная проверка для регистрации проблем, диагностированных в ходе расчета.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает служебную проверку этапа закрытия месяца.
// К таким проверкам можно записывать сообщения о проблемах, диагностированных при выполнении расчета.
//
// Параметры:
//	ЭтапРасчета 				- ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца
//	ВыдаватьОшибкуПриОтсутствии - Булево - выдавать ошибку если служебная проверка этапа не найдена.
//
// Возвращаемое значение:
//	СправочникСсылка.ПравилаПроверкиУчета - служебная проверка этапа закрытия месяца.
//
Функция СлужебнаяПроверкаЭтапа(ЭтапРасчета, ВыдаватьОшибкуПриОтсутствии = Истина) Экспорт
	
	Проверка = АудитСостоянияСистемы.НайтиПроверкуПоКлючевымПолям(
		ЭтапРасчета,
		ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета));
	
	Если НЕ ЗначениеЗаполнено(Проверка) И ВыдаватьОшибкуПриОтсутствии Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдена служебная контекстная проверка для операции ""%1""'"),
			СокрЛП(ЭтапРасчета));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

// Возвращает идентификатор служебной проверки этапа закрытия месяца.
//
// Параметры:
//	ЭтапРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//
// Возвращаемое значение:
//	Строка - идентификатор служебной проверки.
//
Функция ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета) Экспорт
	
	Идентификатор =
		"СлужебнаяКонтекстнаяПоОрганизациямПоПериодам_"
		+ ОбщегоНазначения.ИмяЗначенияПеречисления(ЭтапРасчета);
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровОперацийЗакрытияМесяца

// Формирует описание группа технологических параметров механизма закрытия месяца.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ИнициализироватьОписаниеГруппПараметровОперации в модуле менеджера значения константы НастройкиЗакрытияМесяца.
//
Функция ОписаниеГруппПараметровОперацииЗакрытияМесяца() Экспорт
	
	ЭтоФайловаяИБ    = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	ОписаниеГруппПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеГруппПараметровОперации();
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "РегистрацияОшибок";
	ОписаниеГруппы.Наименование = НСтр("ru='Регистрация ошибок'");
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Параметры, влияющие на регистрацию ошибок при расчете этапов закрытия месяца.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ОграниченияФЗ";
	ОписаниеГруппы.Наименование = НСтр("ru='Управление многопоточностью'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть 		= ЭтоФайловаяИБ ИЛИ ЭтоОбластьДанных;
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Параметры, накладывающие ограничения на фоновые задания, используемые в операциях закрытия месяца.
		|Используются только в клиент-серверной информационной базе,
		|т.к. в файловом режиме Платформа не поддерживает параллельную работу фоновых заданий.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "Отладка";
	ОписаниеГруппы.Наименование = НСтр("ru='Настройки для технического специалиста'");
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Параметры, используемые для отладки этапов закрытия месяца.
		|Изменять данные параметры рекомендуется только в тестовых информационных базах!'");
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ЭтапыПредварительногоЗакрытияМесяца";
	ОписаниеГруппы.Наименование = НСтр("ru='Предварительное закрытие месяца'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть		= НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Включение / выключение отдельных этапов предварительного закрытия месяца.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ЭтапыОкончательногоЗакрытияМесяца";
	ОписаниеГруппы.Наименование = НСтр("ru='Окончательное закрытие месяца'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть		= НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Параметры этапов окончательного закрытия месяца.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "БлокировкаОтИзменений";
	ОписаниеГруппы.Наименование = НСтр("ru='Блокировка от изменений'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Настройки механизма блокировки закрываемого периода от изменений.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ОписаниеГруппПараметров;
	
КонецФункции

// Формирует описание технологических параметров механизма закрытия месяца.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ИнициализироватьОписаниеПараметровОперации в модуле менеджера значения константы НастройкиЗакрытияМесяца.
//
Функция ОписаниеТехнологическихПараметровЗакрытияМесяца() Экспорт
	
	ЭтоФайловаяИБ    = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	
	#Область РегистрацияОшибок

	Родитель = "РегистрацияОшибок";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "КоличествоРегистрируемыхОднотипныхОшибок";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Количество регистрируемых ошибок одного вида'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 100;
	ОписаниеПараметра.Описание =
		НСтр("ru='Предназначен для ускорения обновления состояния и выполнения расчета операций.
		|Если в результате выполнения какой-либо проверки найдено большое количество однотипных ошибок,
		|то как правило нет смысла регистрировать их все - надо разбираться с причинами возникновения этих ошибок.
		|Если указано значение 0, то будут зарегистрированы все найденные ошибки.'");
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ДублироватьНайденныеПроблемыВЖурналеРегистрации";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Дублировать найденные проблемы в журнале регистрации'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание =
		НСтр("ru='Определяет поведение механизма закрытия месяца в части работы с журналом регистрации.
		|Если установлено значение Истина, то информация о всех найденных проблемах, регистрируемые в механизме ""Аудит состояния системы"",
		|будет дублироваться в журнале регистрации.'");
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "КоличествоПопытокВыполненияПроверки";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество выполнения проверки'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 1;
	ОписаниеПараметра.ДиапазонПо    	  = 5;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 3;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Если при записи результатов выполнения проверки возникает ошибка блокировки записи данных, то этапу закрытия месяца будет установлено состояние ""Требуется выполнение"", даже если нет реальных ошибок в данном этапе.
		|Чтобы попытаться исправить подобную проблему попытка записи результатов выполнения проверки может выполняться несколько раз, в соответствии со значением данного параметра.'");
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ИгнорироватьОшибкиАварийногоЗавершенияПроверки";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Игнорировать ошибку аварийного завершения проверки'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Если при выполнении проверки возникает ошибка, например, из-за ошибки в коде самой проверки, то этапу закрытия месяца будет установлено состояние ""Требуется выполнение"", даже если нет реальных ошибок в данном этапе.
		|Чтобы игнорировать подобную проблему до выхода исправительной сборки конфигурации можно установить значение данного параметра равным ""Да"".'");
	
	#КонецОбласти
	
	#Область ОграниченияФЗ
	
	Родитель = "ОграниченияФЗ";
	
	// МаксимальноеКоличествоФЗФормированияДокументов
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоФЗФормированияДокументов";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Максимальное количество одновременно выполняемых потоков формирования служебных документов'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 1, 5));
	ОписаниеПараметра.Описание =
		НСтр("ru='Максимальное количество одновременно запущенных фоновых заданий для пакетного формирования служебных документов.
		|Используется в некоторых этапах закрытия месяца, задачей которых является формирование документов.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	#КонецОбласти
	
	#Область Отладка
	
	Родитель = "Отладка";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Не проверять окончание обновления информационной базы'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Описание =
		НСтр("ru='Позволяет пропустить проверку окончания обновления информационной базы.
		|Если это свойство не установлено и обновление входящих данных механизма расчета еще не завершено,
		|то расчет выполняться не будет, т.к. его входящие данные могут быть некорректны.'");
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "РежимОтладки";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Режим отладки расчета'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Описание =
		НСтр("ru='Позволяет устанавливать служебные параметры операций закрытия месяца
		|Служебные параметры предназначены только для расследования проблем расчета.
		|Чтобы данный параметр вступил в силу нужно сохранить параметры и повторно открыть форму настройки параметров.'");
	
	#КонецОбласти
	
	#Область ЭтапыПредварительногоЗакрытияМесяца
	
		Родитель = "ЭтапыПредварительногоЗакрытияМесяца";
		
		// РаспределениеДопРасходовМеждуПартиямиИТоварами
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РаспределениеДопРасходовМеждуПартиямиИТоварами";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Распределение дополнительных расходов по товарам'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Скрыть			  = НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
		ОписаниеПараметра.Описание =
			НСтр("ru='Выполнение операции распределения дополнительных расходов по товарам.
			|Позволяет получить себестоимость товаров с учетом зарегистрированных дополнительных расходов.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		// РаспределениеПостатейныхРасходовНаПродажу
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РаспределениеПостатейныхРасходовНаПродажу";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Распределение расходов на продажу'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Скрыть			  = НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
		ОписаниеПараметра.Описание =
			НСтр("ru='Выполнение операции распределения постатейных расходов на продажу.
			|Позволяет получить валовую прибыль с учетом зарегистрированных расходов на продажу.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
	#КонецОбласти
	
	#Область ЭтапыОкончательногоЗакрытияМесяца
	
		Родитель = "ЭтапыОкончательногоЗакрытияМесяца";
		
		// ВосстанавливатьХронологическуюПоследовательностьСписанияПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ВосстанавливатьХронологическуюПоследовательностьСписанияПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Восстанавливать хронологическую последовательность списания партий по ""ФИФО""'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru='Будет выполнено полное распределение партий без сохранения результатов предварительного расчета.
			|Позволяет восстановить хронологическую последовательность списания партий по ""ФИФО"".
			|Имеет смысл если в текущем месяце после предварительного закрытия месяца были изменения документов ""задним числом"" и это
			|привело к нарушению хронологической последовательности списания партий.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		// ВыделятьОтклоненияСебестоимостиОкончательногоРасчета
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ВыделятьОтклоненияСебестоимостиОкончательногоРасчета";
		ОписаниеПараметра.Наименование 		  = НСтр("ru='Выделять отклонения себестоимости окончательного расчета от результата предварительного расчета'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru='При расчете себестоимости будут рассчитаны отклонения окончательного расчета от результата предварительного расчета.
			|Отклонения будут отражены отдельными записями в регистрах накопления:
			|""Себестоимость товаров"", ""Выручка и себестоимость продаж"", ""Прочие расходы"" со ссылкой на служебный документ ""Регистратор расчета себестоимости"".
			|Включение данного параметра увеличивает количество движений в регистрах и может приводить к увеличению времени закрытия месяца.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	#КонецОбласти

	#Область БлокировкаОтИзменений
	
	Родитель = "БлокировкаОтИзменений";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ИспользоватьМеханизмБлокировкиОтИзменений";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Использовать механизм блокировки закрытия месяца от изменений'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание =
		НСтр("ru='Позволяет включить/отключить использование механизма блокировки'");
	
	#КонецОбласти
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Возвращает значение технологического параметра РежимОтладки.
//
// Возвращаемое значение:
//	Булево - значение режима отладки
//
Функция РежимОтладкиРасчета() Экспорт
	
	Возврат РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка()).РежимОтладки;
	
КонецФункции

// Возвращает значения общих технологических параметров закрытия месяца.
//
// Возвращаемое значение:
//	Структура - значения параметров
//		Ключ - имя параметра
//		Значение - значение параметра;
// 
Функция ОбщиеПараметрыЗакрытияМесяца() Экспорт
	
	Возврат РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
	
КонецФункции

#КонецОбласти

#Область МетодыДляОписанияЭтапов

// Структура описания действия.
// 
// Возвращаемое значение:
//  Структура - Структура описания действия:
// * ВидДействия - ПеречислениеСсылка.ВидыДействийРасшифровкиОперацийЗакрытияМесяца -
// * Обработчик - Строка -
// * ИмяФормы - Строка -
// * ИмяОбъектаМетаданных - Строка -
// * НаКлиенте - Булево -
// * НаСервере - Булево -
// * ОткрыватьВместоЖР - Булево -
// * НеТребуетсяПриУспешномВыполнении - Булево -
// * ОткрыватьФормуСБлокированием - Булево -
// * ПараметрыФормы - Структура -:
Функция СтруктураОписанияДействия() Экспорт
	
	Описание = Новый Структура;
	
	Описание.Вставить("ВидДействия", 					  Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ПустаяСсылка());
	Описание.Вставить("Обработчик",  					  "");
	Описание.Вставить("ИмяФормы",    					  "");
	Описание.Вставить("ИмяОбъектаМетаданных",			  "");
	Описание.Вставить("НаКлиенте",   					  Ложь);
	Описание.Вставить("НаСервере",   					  Ложь);
	Описание.Вставить("ОткрыватьВместоЖР", 				  Ложь);
	Описание.Вставить("НеТребуетсяПриУспешномВыполнении", Ложь);
	Описание.Вставить("ОткрыватьФормуСБлокированием", 	  Ложь);
	
	Описание.Вставить("ПараметрыФормы", 				  Новый Структура);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область МетодыДляРаботыСПроблемамиСостоянияСистемы

Функция КоличествоРегистрируемыхОднотипныхОшибок() Экспорт
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.КоличествоРегистрируемыхОднотипныхОшибок;
	
КонецФункции

Функция ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки) Экспорт
	
	// Подготовка параметров расчета.
	ПараметрыРасчета = Новый Структура("ПериодРегистрации, МассивОрганизаций, РежимЗакрытияМесяца");
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	// Отбор по периоду.
	Если ДополнительныеПараметры.Свойство("Период") Тогда
		Если ТипЗнч(ДополнительныеПараметры.Период) = Тип("СтандартныйПериод") Тогда
			Период = ДополнительныеПараметры.Период; //СтандартныйПериод
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(Период.ДатаНачала);
		Иначе // тип значения - Дата
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.Свойство("ПериодРегистрации") Тогда
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.ПериодРегистрации);
	Иначе
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("НачалоПериода") Тогда
		ПараметрыРасчета.Вставить("НачалоПериода", ДополнительныеПараметры.НачалоПериода);
		ПараметрыРасчета.Вставить("КонецПериода", ДополнительныеПараметры.КонецПериода);
	КонецЕсли;
	
	// Отбор по организациям.
	Если ДополнительныеПараметры.Свойство("МассивОрганизаций") Тогда
		ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ДополнительныеПараметры.МассивОрганизаций);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций) Тогда
		ПараметрыРасчета.МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;
	
	// Заполним отборы в параметрах проверки.
	ПараметрыПроверки.Отборы.Очистить();
	
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		НоваяСтрока = ПараметрыПроверки.Отборы.Добавить();
		НоваяСтрока.Организация 	  = ТекущаяОрганизация;
		НоваяСтрока.ПроверяемыйПериод = ПараметрыРасчета.ПериодРегистрации;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("РежимЗакрытияМесяца") Тогда
		ПараметрыРасчета.Вставить("РежимЗакрытияМесяца", ДополнительныеПараметры.РежимЗакрытияМесяца);
	Иначе
		ПараметрыРасчета.Вставить("РежимЗакрытияМесяца", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция СформироватьОписаниеДанныхЭтапа(Код) Экспорт
	
	ТаблицаЭтапы = Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца();
	СтрокаЭтапа  = ТаблицаЭтапы.Найти(Код, "Код"); 
	
	Если СтрокаЭтапа = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдено описание операции закрытия месяца ""%1""'"),
			СокрЛП(Код));
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ДанныеЭтапа = ОбщегоНазначенияУТ.ПреобразоватьСтрокуТаблицыВСтруктуру(СтрокаЭтапа);
	
	Возврат ДанныеЭтапа;
	
КонецФункции


Процедура ДобавитьОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяПоляОбъекта) Экспорт
	
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) И ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """
				+ СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		ИсточникДанных[ИмяПоляОбъекта],
		Представление);
		
	Если НЕ ПараметрыПроверки.Свойство("ДополнительныеПараметры")
	 ИЛИ НЕ ПараметрыПроверки.ДополнительныеПараметры.Свойство("РезультатВЖурналРегистрации")
	 ИЛИ ПараметрыПроверки.ДополнительныеПараметры.РезультатВЖурналРегистрации Тогда
		ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстПроверокВеденияУчета, ПараметрыПроверки.Проверка, Представление);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяРегистраДляРасшифровки = "") Экспорт
	
	Расшифровка   = Новый Структура("ИмяРегистраДляРасшифровки, СписокПолейДляРасшифровки", ИмяРегистраДляРасшифровки, СписокПолей);
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Если ЗначениеПоля = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка.Вставить(ИмяПоля, ЗначениеПоля);
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) И ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """
				+ СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Расшифровка,
		Представление);
	
	Если НЕ ПараметрыПроверки.Свойство("ДополнительныеПараметры")
	 ИЛИ НЕ ПараметрыПроверки.ДополнительныеПараметры.Свойство("РезультатВЖурналРегистрации")
	 ИЛИ ПараметрыПроверки.ДополнительныеПараметры.РезультатВЖурналРегистрации Тогда
		ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстПроверокВеденияУчета, ПараметрыПроверки.Проверка, Представление);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(ПараметрыПроверки, ОписаниеПроблемы, КоличествоОбъектов) Экспорт
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Еще найдено аналогичных проблем: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(КоличествоОбъектов));
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Неопределено,
		Представление);
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	Если НЕ ПараметрыПроверки.Свойство("ДополнительныеПараметры")
	 ИЛИ НЕ ПараметрыПроверки.ДополнительныеПараметры.Свойство("РезультатВЖурналРегистрации")
	 ИЛИ ПараметрыПроверки.ДополнительныеПараметры.РезультатВЖурналРегистрации Тогда
		ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстПроверокВеденияУчета, ПараметрыПроверки.Проверка, Представление);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыДляРаботыСЗаданияКЗакрытиюМесяца

#Область МетодыДляРаботыСФоновымиЗаданиямиЗакрытияМесяца

Функция ТекущееСостояниеФоновогоЗадания(КлючИлиИдентификаторЗадания) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "");
	Результат.Вставить("НеНайдено", Ложь);
	Результат.Вставить("Активно", Ложь);
	Результат.Вставить("Завершено", Ложь);
	Результат.Вставить("ЗавершеноАварийно", Ложь);
	Результат.Вставить("Отменено", Ложь);
	Результат.Вставить("Начало");
	Результат.Вставить("Конец");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Задание");
	
	Если ТипЗнч(КлючИлиИдентификаторЗадания) = Тип("Строка") Тогда
		
		ОтборЗаданий = Новый Структура("Ключ", КлючИлиИдентификаторЗадания);
		Задания      = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
		
		Если Задания.Количество() = 0 Тогда
			Задание = Неопределено;
		Иначе
			Задание = Задания[0];
		КонецЕсли;
		
	Иначе
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИлиИдентификаторЗадания);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		
		Результат.НеНайдено = Истина;
		
		Если ТипЗнч(КлючИлиИдентификаторЗадания) = Тип("Строка") Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Фоновое задание с ключом ""%1"" не найдено.'"),
				СокрЛП(КлючИлиИдентификаторЗадания));
		Иначе
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Фоновое задание с идентификатором ""%1"" не найдено.'"),
				СокрЛП(КлючИлиИдентификаторЗадания));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Задание 	   = Задание;
	Результат.Наименование = Задание.Наименование;
	Результат.Начало 	   = Задание.Начало;
	Результат.Конец 	   = Задание.Конец;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Активно = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.Завершено = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ЗавершеноАварийно = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Отменено = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗадания) Экспорт 
	
	СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
	
	Если СостояниеЗадания.Активно Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			СостояниеЗадания.Задание.Отменить();
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Отмена выполнения фонового задания'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает имя уникального фонового задания закрытия месяца
//
// Возвращаемое значение:
//	Строка - Имя фонового задания с идентификатором расчета.
//
Функция ИмяФоновогоЗадания(ИдентификаторРасчета) Экспорт
	
	Возврат "ЗакрытиеМесяца_" + СокрЛП(ИдентификаторРасчета);
	
КонецФункции

#КонецОбласти

#Область МетодыДляРаботыСРегистрамиЗаданий

// Регистры заданий для закрытия месяца.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//	* Ключ - ОбъектМетаданныхРегистрСведений -
//  * Значение - Булево, Неопределено -
Функция РегистрыЗаданийДляЗакрытияМесяца() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами, НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	Результат.Вставить(Метаданные.РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками, НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	Результат.Вставить(Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца);
	Результат.Вставить(Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости);
	Результат.Вставить(Метаданные.РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС);


	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область МетодыДляЗамераПроизводительности

Процедура УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных = 1) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных);
	
КонецПроцедуры

Функция РазмерыВременныхТаблиц(КонтейнерВременныхТаблиц, ПараметрыОбработчика = Неопределено) Экспорт
	
	РазмерыВременныхТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерыВременныхТаблиц(КонтейнерВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика) Тогда
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РазмерыВременныхТаблиц.ОбщийРазмерТаблиц);
	КонецЕсли;
	
	Возврат РазмерыВременныхТаблиц;
	
КонецФункции

Функция РазмерВременнойТаблицы(КонтейнерВременныхТаблиц, ИмяТаблицы, ПараметрыОбработчика = Неопределено) Экспорт
	
	КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(КонтейнерВременныхТаблиц, ИмяТаблицы);
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика) Тогда
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных);
	КонецЕсли;
	
	Возврат КоличествоДанных;
	
КонецФункции

#КонецОбласти

#Область МетодыДляТестированияЗакрытияМесяца

#Область ПроверкаРасчетаЭтапов

// Выполняется в фоновом задании, создаваемом в обработке ТестированиеОперацийЗакрытийМесяца.
//
// Параметры:
//	Период - Дата - тестируемый период.
//
Процедура ТестированиеЗакрытияМесяца(Период) Экспорт
	
	// Проверим возможность запуска расчета.
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьСостояниеАктивныхРасчетов();
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания и в регистр выполнения операций
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
		,
		ИдентификаторРасчета,
		НСтр("ru = 'Тестирование операций закрытия месяца'"),
		Период);
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		ВызватьИсключение АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Заполним состояния этапов.
	СтруктураДанных = ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период);
	
	Если СтруктураДанных.ИзмененияЗапрещены Тогда
		
		 Шаблон1 = НСтр("ru = '%Парам1%'", ОбщегоНазначения.КодОсновногоЯзыка());
		 Шаблон1 = СтрЗаменить(Шаблон1, "%Парам1%", "ЗакрытиеМесяца");
		 
		 ЗаписьЖурналаРегистрации(Шаблон1
			,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
			,
			СтруктураДанных.ПоясненияКЗапретуИзменений);
		
		Возврат;
		
	КонецЕсли;
	
	// Последовательно выполним все этапы (в т.ч. этапы в статусе "Выполнен успешно").
	Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 И ТекущаяСтрока.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			
			СтруктураПоиска = Новый Структура("Родитель", ТекущаяСтрока.Код);
			СтрокиПояснений = СтруктураДанных.ТаблицаПоясненияЭтапов.НайтиСтроки(СтруктураПоиска);

			Для Каждого СтрокаПояснения Из СтрокиПояснений Цикл
				
				Если СтрокаПояснения.Состояние <> Перечисления.ВажностьПроблемыУчета.Ошибка Тогда
					Продолжить;
				КонецЕсли;
				
				// Продублируем проблемы, диагностированные для ручной операции, в журнале регистрации для последующего анализа.
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(
						ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущаяСтрока.Код)),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтрокаПояснения.Наименование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 ИЛИ ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		
		ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
			СтруктураДанных,
			ТекущаяСтрока.Код,
			СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код,
			Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие);
		
		ПараметрыЗапускаРасчета.АвтоматическоеТестирование = Истина;
		
		Если ЭтоФайловаяИБ Тогда
			
			Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
			
		Иначе
			
			// Запустим расчет этапа в фоновом задании.
			ПараметрыЭкспортнойПроцедуры = Новый Массив;
			ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗапускаРасчета);
			
			Задание = ФоновыеЗадания.Выполнить(
				"ЗакрытиеМесяцаСервер.ВыполнитьТестированиеЭтапаВФоновомЗадании",
				ПараметрыЭкспортнойПроцедуры,
				ИмяФоновогоЗадания(ИдентификаторРасчета),
				НСтр("ru = 'Тестирование этапа закрытия месяца'"));
			
			ТекстОшибки = "";
			МассивЗаданий = Новый Массив;
			МассивЗаданий.Добавить(Задание);
			
			Попытка
				
				МассивЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий);
				Задание = МассивЗаданий[0];
				
				Если Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда

					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Фоновое задание расчета этапа %1 %2:
						|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
						"""" + СокрЛП(ТекущаяСтрока.Код) + """",
						?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено,
							НСтр("ru = 'отменено'", ОбщегоНазначения.КодОсновногоЯзыка()),
							НСтр("ru = 'завершено аварийно'", ОбщегоНазначения.КодОсновногоЯзыка())),
						?(Задание.ИнформацияОбОшибке = Неопределено,
							НСтр("ru = '<Нет описания ошибки>'", ОбщегоНазначения.КодОсновногоЯзыка()),
							ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
							
				КонецЕсли;
				
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры

// Выполняет в фоновом задании тестирование этапа закрытия месяца.
//
// Параметры:
//	ПараметрыЗапускаРасчета - Структура - параметры запуска расчета.
//
Процедура ВыполнитьТестированиеЭтапаВФоновомЗадании(ПараметрыЗапускаРасчета) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияЭтапов

// Определяет состояние этапов закрытия месяца для целей тестирования.
//
// Параметры:
//	Период 			  - Дата - тестируемый период
//	МассивОрганизаций - СправочникСсылка.Организации, Массив - организации для тестирования.
//
// Возвращаемое значение:
//	см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов
//
Функция ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период, МассивОрганизаций = Неопределено) Экспорт
	
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных);
	
	ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок    = Истина;
	ПараметрыЗапускаОбновленияСостояния.АвтоматическоеТестирование = Истина;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Сохраняет информацию о состоянии закрытия месяца в файлы.
// Сохраняются значимые колонки таблиц ТаблицаЭтапы и ТаблицаСгруппированныхПояснений.
// Сравнив выгруженные файлы разных версий можно получить различия в состоянии этапов закрытия месяца
// и таким образом выявить "раскрывшиеся" периоды, которые в предыдущей версии были закрыты.
//
// Сохраняемые файлы имеют формат имени "<Тип выгруженных данных>_<Тестируемый период>.mxl",
// поэтому выгрузку данных одного и того же периода в разных ИБ надо выполнять в разные каталоги,
// иначе вторая выгрузка затрет результаты первой.
//
// Параметры:
//	КаталогДляВыгрузки - Строка - путь к каталогу для сохранения данных
//	Период 			   - Дата - тестируемый период
//	МассивОрганизаций  - СправочникСсылка.Организации, Массив - организации для тестирования.
//
// Возвращаемое значение:
//	Строка - информация об ошибке записи файла; если ошибок не было то возвращается пустая строка.
//
Функция СохранитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(КаталогДляВыгрузки, Период, МассивОрганизаций = Неопределено) Экспорт
	
	// Проверим некорректный вызов процедуры.
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
		Возврат НСтр("ru='Не указаны обязательные параметры'");
	КонецЕсли;
	
	// Заполним состояния этапов.
	СтруктураДанных = ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период, МассивОрганизаций);
	
	ТаблицаЭтапы = СтруктураДанных.ТаблицаЭтапы.Скопировать(, "Код, Состояние");
	ТаблицаСгруппированныхПояснений = СтруктураДанных.ТаблицаСгруппированныхПояснений.Скопировать(, "Родитель, Наименование, Состояние");
	
	// Колонку этапа сохраним в виде имени значения перечисления.
	ЗаполнитьКолонкуИмениЭтапаДляТестирования(ТаблицаЭтапы, "Код");
	ТаблицаЭтапы.Колонки.Удалить("Код");
	
	ЗаполнитьКолонкуИмениЭтапаДляТестирования(ТаблицаСгруппированныхПояснений, "Родитель");
	ТаблицаСгруппированныхПояснений.Колонки.Удалить("Родитель");
	
	ТаблицаЭтапы.Сортировать("Этап, Состояние");
	ТаблицаСгруппированныхПояснений.Сортировать("Этап, Наименование, Состояние");
	
	// Сохраним таблицы в файлах.
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки));
	
	СоздатьКаталог(Каталог);
	
	ИменаФайлов = ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		ТаблицаЭтапы,
		Каталог + ИменаФайлов.ТаблицаЭтапы);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		ТаблицаСгруппированныхПояснений,
		Каталог + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Сравнивает две выгрузки состояний операций закрытия месяца.
// Выгрузка выполняется функцией СохранитьСостояниеЭтаповЗакрытияМесяцаДляТестирования().
//
// Параметры:
//	Период 			      - Дата - тестируемый период
//	КаталогДляВыгрузки1   - Строка - путь к каталогу для сохранения данных №1
//	КаталогДляВыгрузки2   - Строка - путь к каталогу для сохранения данных №2
//	НеВыводитьНовыеЭтапы  - Булево - если Истина, то не будет выводиться отличие в операции,
//									 которая есть только в одной из версий сравниваемых конфигураций
//	НеВыводитьНеИзменившиесяЭтапы - Булево - если Истина, то не будут выводиться операции с одинаковым статусом.
//
// Возвращаемое значение:
//	Строка - информация о сравнении выгрузок, может быть одного из следующих видов:
//		информация об ошибке сравнения, если что-то не так с файлами выгрузки
//		отчет о сравнении, содержащий описание отличий в состоянии/пояснениях операций
//		пустая строка, если нет ни ошибок, ни отличий.
//
Функция СравнитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период,
			КаталогДляВыгрузки1, КаталогДляВыгрузки2, НеВыводитьНовыеЭтапы = Ложь, НеВыводитьНеИзменившиесяЭтапы = Ложь) Экспорт
	
	ТекстыСообщений = Новый Массив;
	
	#Область ПроверкаФайлов
	
	Каталог1 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки1));
	Каталог2 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки2));
	
	Если НРег(Каталог1) = НРег(Каталог2) Тогда
		ТекстыСообщений.Добавить(НСтр("ru='Имена каталогов выгрузки №1 И №2 не должны совпадать'"));
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	// Проверим наличие файлов выгрузки данных за указанные периоды в указанных каталогах.
	ИменаФайлов = ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог1,
		ИменаФайлов.ТаблицаЭтапы,
		НСтр("ru='операций'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог1,
		ИменаФайлов.ТаблицаСгруппированныхПояснений,
		НСтр("ru='пояснений'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог2,
		ИменаФайлов.ТаблицаЭтапы,
		НСтр("ru='операций'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог2,
		ИменаФайлов.ТаблицаСгруппированныхПояснений,
		НСтр("ru='пояснений'"),
		ТекстыСообщений);
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеФайлов
	
	// Прочитаем таблицы из файлов.
	ТаблицаЭтапы1 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог1 + ИменаФайлов.ТаблицаЭтапы);
	
	Если ТипЗнч(ТаблицаЭтапы1) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаЭтапы1);
	КонецЕсли;
	
	ТаблицаСгруппированныхПояснений1 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог1 + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ТипЗнч(ТаблицаСгруппированныхПояснений1) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаСгруппированныхПояснений1);
	КонецЕсли;
	
	ТаблицаЭтапы2 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог2 + ИменаФайлов.ТаблицаЭтапы);
	
	Если ТипЗнч(ТаблицаЭтапы2) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаЭтапы2);
	КонецЕсли;
	
	ТаблицаСгруппированныхПояснений2 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог2 + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ТипЗнч(ТаблицаСгруппированныхПояснений2) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаСгруппированныхПояснений2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СравнениеФайлов
	
	// Сформируем таблицы различий.
	ТаблицаОтличийЭтапы = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ТаблицаЭтапы1,
		ТаблицаЭтапы2);
	
	Если ТипЗнч(ТаблицаОтличийЭтапы) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Невозможно сравнить таблицы состояния этапов:
					|%1'"),
				ТаблицаОтличийЭтапы));
	КонецЕсли;
	
	ТаблицаОтличийПояснения = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ТаблицаСгруппированныхПояснений1,
		ТаблицаСгруппированныхПояснений2);
	
	Если ТипЗнч(ТаблицаОтличийПояснения) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Невозможно сравнить таблицы пояснений к этапам:
					|%1'"),
				ТаблицаОтличийПояснения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	ИначеЕсли ТаблицаОтличийЭтапы.Количество() = 0 И ТаблицаОтличийПояснения.Количество() = 0 Тогда
		Возврат ""; // нет отличий
	КонецЕсли;
	
	// Добавим индексы для поиска по таблицам.
	ТаблицаЭтапы1.Индексы.Добавить("Этап");
	ТаблицаОтличийЭтапы.Индексы.Добавить("Этап");
	ТаблицаОтличийПояснения.Индексы.Добавить("Этап");
	
	#КонецОбласти
	
	#Область ФормированиеМассиваОтличающихсяЭтапов
	
	Этапы = ТаблицаОтличийЭтапы.Скопировать(, "Этап");
	Этапы.Свернуть("Этап", "");
	
	МассивЭтапов = Этапы.ВыгрузитьКолонку("Этап");
	
	Этапы = ТаблицаОтличийПояснения.Скопировать(, "Этап");
	Этапы.Свернуть("Этап", "");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивЭтапов, 
		Этапы.ВыгрузитьКолонку("Этап"), Истина);
	
	#КонецОбласти
	
	#Область ФормированиеОтчета
	
	ТекстыСообщений.Очистить();
	
	ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(МассивЭтапов);
	
	Для Каждого ТекущийЭтап Из МассивЭтапов Цикл
		
		Состояние1 = Неопределено;
		Состояние2 = Неопределено;
		
		// Проверим изменение состояния этапа.
		СтрокиЭтапа = ТаблицаОтличийЭтапы.НайтиСтроки(Новый Структура("Этап", ТекущийЭтап));
		
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			
			Если СтрокаЭтапа.СчетчикСтрокСравниваемыхТаблиц > 0 Тогда
				Состояние1 = СтрокаЭтапа.Состояние;
			Иначе
				Состояние2 = СтрокаЭтапа.Состояние;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Состояние1) И НЕ ЗначениеЗаполнено(Состояние2) Тогда
			
			// Состояние не изменилось - прочитаем его из исходной таблицы.
			СтрокаИсходнойТаблицы = ТаблицаЭтапы1.Найти(ТекущийЭтап, "Этап");
			
			Если СтрокаИсходнойТаблицы = Неопределено Тогда
				
				ТекстыСообщений.Добавить("");
				ТекстыСообщений.Добавить("////////////////////////////////////////////////////////////////////////////////");
		
				ТекстыСообщений.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка: операция ""%1"" отсутствует в таблице выгрузки операций'"),
						ТекущийЭтап));
				
				Продолжить;
				
			КонецЕсли;
			
			Состояние1 = СтрокаИсходнойТаблицы.Состояние;
			Состояние2 = Состояние1;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Состояние1) И ЗначениеЗаполнено(Состояние2) Тогда
			
			Если НеВыводитьНовыеЭтапы Тогда
				Продолжить; // этап есть только в выгрузке №2
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция присутствует только в выгрузке №2: ""%1""'"),
				Состояние2);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Состояние2) И ЗначениеЗаполнено(Состояние1) Тогда
			
			Если НеВыводитьНовыеЭтапы Тогда
				Продолжить; // этап есть только в выгрузке №1
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция присутствует только в выгрузке №1: ""%1""'"),
				Состояние1);
				
		ИначеЕсли Состояние1 <> Состояние2 Тогда
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменилось состояние операции: ""%1"" - ""%2""'"),
				Состояние1,
				Состояние2);
		Иначе
			
			Если НеВыводитьНеИзменившиесяЭтапы Тогда
				Продолжить; // этап не изменился
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Состояние операции не изменилось: ""%1""'"),
				Состояние1);
			
		КонецЕсли;
		
		ТекстыСообщений.Добавить("");
		ТекстыСообщений.Добавить("////////////////////////////////////////////////////////////////////////////////");
		
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция ""%1""'"),
				ТекущийЭтап));
		
		ТекстыСообщений.Добавить(ТекстОтличия);
		
		// Проверим изменение пояснений этапа.
		
		СтрокиЭтапа = ТаблицаОтличийПояснения.НайтиСтроки(Новый Структура("Этап", ТекущийЭтап));
		
		Если СтрокиЭтапа.Количество() = 0 Тогда 
			ТекстыСообщений.Добавить(НСтр("ru='Отличий в пояснениях к этапу нет'"));
			Продолжить;
		КонецЕсли;
		
		ТекстыСообщений.Добавить(НСтр("ru='Изменились пояснения к этапу'") + ":");
		
		ШаблонТекстОтличия = "	" + НСтр("ru='Есть только в выгрузке №%1: ""%2"" - ""%3""'");
		
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			
			Если СтрокаЭтапа.СчетчикСтрокСравниваемыхТаблиц > 0 Тогда
				ТекстВыгрузка = "1";
			Иначе
				ТекстВыгрузка = "2";
			КонецЕсли;
			
			ТекстыСообщений.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстОтличия,
					ТекстВыгрузка,
					СтрокаЭтапа.Состояние,
					СтрокаЭтапа.Наименование));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекстыСообщений.Количество() = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ТекстыСообщений.Вставить(0,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отчет о сравнении состояний операций закрытия месяца.
			|В отчет включены только операции, имеющие различия в состоянии и/или в описании проблем (пояснениях).
			|
			|Проверяемый период: %1
			|Выгрузка №1: ""%2""
			|Выгрузка №2: ""%3""'"),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Период),
			Каталог1,
			Каталог2));
		
	ТекстыСообщений.Добавить("");
	
	#КонецОбласти
	
	Возврат СтрСоединить(ТекстыСообщений, Символы.ПС);
	
КонецФункции

// Вспомогательные методы.

// Заполняет колонку "Этап" именем значения перечисления ОперацииЗакрытияМесяца.
// 
// Параметры:
// 	Таблица - ТаблицаЗначений -
// 	КолонкаЭтапа - Строка -
//
Процедура ЗаполнитьКолонкуИмениЭтапаДляТестирования(Таблица, КолонкаЭтапа)
	
	Таблица.Колонки.Вставить(0, "Этап", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Этап = ОбщегоНазначения.ИмяЗначенияПеречисления(Строка[КолонкаЭтапа]);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имена файлов для выгрузки состояний и пояснений операций закрытия месяца.
//
Функция ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период)
	
	СуффиксИмениФайла = "_" + Формат(Период, "ДФ=MM-yy") + ".mxl";
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТаблицаЭтапы",
		"ЗакрытиеМесяца_ТаблицаЭтапы" + СуффиксИмениФайла);
	Результат.Вставить("ТаблицаСгруппированныхПояснений",
		"ЗакрытиеМесяца_ТаблицаСгруппированныхПояснений" + СуффиксИмениФайла);
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие файлов выгрузки состояний/пояснений операций закрытия месяца.
//
Процедура ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(Каталог, ИмяФайла, НазначениеФайла, ТекстыСообщений)
	
	Файлы = НайтиФайлы(Каталог, ИмяФайла, Ложь);
	
	Если Файлы.Количество() <> 1 Тогда
		
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден файл выгрузки таблицы %1 ""%2""'"),
				НазначениеФайла,
				Каталог + ИмяФайла));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отладка

Функция НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ()
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область МетодыБлокировкиПериода

// Параметры:
//  ИмяПараметра - Строка
//  УстановленныеПараметры - Массив из Строка
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "СформированныеЗаданияЗакрытияМесяца" Тогда
		ОчиститьПараметрСеансаСформированныеЗадания();
		УстановленныеПараметры.Добавить("СформированныеЗаданияЗакрытияМесяца");
	КонецЕсли;
	
КонецПроцедуры

// Очистить параметр сеанса сформированные задания.
//
// Параметры:
//  ИзменяемыйДокумент - ДокументСсылка, Неопределено - изменяемый документ
Процедура ОчиститьПараметрСеансаСформированныеЗадания(ИзменяемыйДокумент = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ИзменяемыйДокумент) Тогда
		ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца = Новый ХранилищеЗначения(Неопределено);
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца.Получить();
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменяемыеДокументы = СтруктураДанных.ИзменяемыеДокументы; //Массив
	
	Если ИзменяемыеДокументы.Количество() = 1 Тогда
		ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца = Новый ХранилищеЗначения(Неопределено);
		Возврат;
	КонецЕсли;
	
	ИзменяемыеДокументы.Удалить(ИзменяемыеДокументы.Найти(ИзменяемыйДокумент));
	
	ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца = Новый ХранилищеЗначения(СтруктураДанных);
	
КонецПроцедуры

// Инициализировать параметр сеанса сформированные задания.
// 
// Параметры:
//  Документ - ДокументОбъект - изменяемый документ
Процедура ИнициализироватьПараметрСеансаСформированныеЗадания(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанных = ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца.Получить();
	
	Если СтруктураДанных = Неопределено Тогда
		
		ТаблицаЗаданий = Новый ТаблицаЗначений;
		ТаблицаЗаданий.Колонки.Добавить("Организация");
		ТаблицаЗаданий.Колонки.Добавить("ПериодЗадания");
		ТаблицаЗаданий.Колонки.Добавить("ПериодБлокировки");
		ТаблицаЗаданий.Колонки.Добавить("ИмяРегистраЗаданий");
		
		ИзменяемыеДокументы = Новый Массив;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ИзменяемыеДокументы",	ИзменяемыеДокументы);
		СтруктураДанных.Вставить("ТаблицаЗаданий", ТаблицаЗаданий);
		
	Иначе
		
		ИзменяемыеДокументы = СтруктураДанных.ИзменяемыеДокументы;
		
	КонецЕсли;
	
	ИзменяемыеДокументы.Добавить(Документ.Ссылка);
	
	ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца = Новый ХранилищеЗначения(СтруктураДанных);
	
КонецПроцедуры

// Добавить информацию о задании в заблокированном периоде.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  ПериодЗадания - Дата - Период задания
//  ПериодБлокировки - Дата - Период блокировки
//  ИмяРегистраЗаданий - Строка - Имя регистра заданий
//  Отказ - Булево - Отказ
Процедура ДобавитьИнформациюОЗаданииВЗаблокированномПериоде(Организация, ПериодЗадания, ПериодБлокировки, ИмяРегистраЗаданий, Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДанных = ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца.Получить();
	
	Если СтруктураДанных = Неопределено Тогда
		
		// Задание сформировано не из модуля ПроведениеДокументов
		ТекстОшибки = ТекстОшибкиЗаписиЗаданияВЗаблокированномПериоде(Организация, ПериодЗадания, ПериодБлокировки, ИмяРегистраЗаданий);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Изменение данных в заблокированном периоде'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.Найти(ИмяРегистраЗаданий),
			,
			ТекстОшибки);
		
		Возврат;
		
	КонецЕсли;

	ТаблицаЗаданий = СтруктураДанных.ТаблицаЗаданий; //ТаблицаЗначений
	
	НовСтр = ТаблицаЗаданий.Добавить();
	НовСтр.Организация 		  = Организация;
	НовСтр.ПериодЗадания 	  = НачалоМесяца(ПериодЗадания);
	НовСтр.ПериодБлокировки   = НачалоМесяца(ПериодБлокировки);
	НовСтр.ИмяРегистраЗаданий = ИмяРегистраЗаданий;
	
	ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца = Новый ХранилищеЗначения(СтруктураДанных);
	
КонецПроцедуры

// Проверить сформированные задания при проведении документа.
// 
// Параметры:
//  Документ - ДокументОбъект - изменяемый документ
//  Отказ - Булево - Отказ
Процедура ПроверитьСформированныеЗаданияПриПроведенииДокумента(Документ, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИзменяемыйДокумент = Документ.Ссылка;
	СтруктураДанных    = ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца.Получить();
	ТаблицаЗаданий     = СтруктураДанных.ТаблицаЗаданий; //ТаблицаЗначений
	
	ОчиститьПараметрСеансаСформированныеЗадания(ИзменяемыйДокумент);
	
	Если ТаблицаЗаданий.Количество() = 0 Тогда
		// Нет сформированных заданий в заблокированном периоде
		Возврат;
	КонецЕсли;
	
	// Добавим ошибку в журнал регистрации
	ТаблицаЗаданий.Свернуть("Организация, ПериодЗадания, ПериодБлокировки, ИмяРегистраЗаданий");
	ТаблицаЗаданий.Сортировать("Организация, ПериодЗадания, ПериодБлокировки, ИмяРегистраЗаданий");
	
	МассивОшибок = Новый Массив;
	Для Каждого ТекСтр Из ТаблицаЗаданий Цикл
		
		МассивОшибок.Добавить(
			ТекстОшибкиЗаписиЗаданияВЗаблокированномПериоде(ТекСтр.Организация, ТекСтр.ПериодЗадания, ТекСтр.ПериодБлокировки, ТекСтр.ИмяРегистраЗаданий));
		
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Невозможно изменение документа'", ОбщегоНазначения.КодОсновногоЯзыка()) + " "
		+ СокрЛП(ИзменяемыйДокумент) + ":" + Символы.ПС
		+ СтрСоединить(МассивОшибок, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Изменение данных в заблокированном периоде'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		ИзменяемыйДокумент.Метаданные(),
		ИзменяемыйДокумент,
		ТекстОшибки);
	
	// Сообщим об ошибке пользователю
	ТаблицаЗаданийСвернутая = ТаблицаЗаданий.Скопировать(, "Организация, ПериодЗадания, ПериодБлокировки");
	ТаблицаЗаданийСвернутая.Свернуть("Организация, ПериодЗадания, ПериодБлокировки");
	ТаблицаЗаданийСвернутая.Сортировать("Организация, ПериодЗадания, ПериодБлокировки");
	
	ТекущаяОрганизация = Неопределено;
	
	Для Каждого ТекСтр Из ТаблицаЗаданийСвернутая Цикл
		
		Если ТекущаяОрганизация <> ТекСтр.Организация Тогда
			
			// Сообщим о самом раннем периоде заданий, формируемых документом
			ТекстОшибки = ТекстОшибкиЗаписиЗаданияВЗаблокированномПериоде(ТекСтр.Организация, ТекСтр.ПериодЗадания, ТекСтр.ПериодБлокировки,, ИзменяемыйДокумент);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
			ТекущаяОрганизация = ТекСтр.Организация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанных = ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца.Получить();
	
	Если СтруктураДанных <> Неопределено Тогда

		ТаблицаЗаданий = СтруктураДанных.ТаблицаЗаданий; //ТаблицаЗначений
		ТаблицаЗаданий.Очистить();
		
		ПараметрыСеанса.СформированныеЗаданияЗакрытияМесяца = Новый ХранилищеЗначения(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Текст ошибки записи задания в заблокированном периоде.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  ПериодЗадания - Дата - Период задания
//  ПериодБлокировки - Дата - Период блокировки
//  ИмяРегистраЗаданий - Строка - Имя регистра заданий
//  ИзменяемыйДокумент - ДокументСсылка - изменяемый документ
// 
// Возвращаемое значение:
//  Строка - Текст ошибки записи задания в заблокированном периоде
Функция ТекстОшибкиЗаписиЗаданияВЗаблокированномПериоде(Организация, ПериодЗадания, ПериодБлокировки, ИмяРегистраЗаданий = Неопределено, ИзменяемыйДокумент = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяРегистраЗаданий) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно изменение документа ""%1"" организации %2 в периоде %3: установлена блокировка от изменения до периода %4'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИзменяемыйДокумент,
			Организация,
			ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(ПериодЗадания),
			ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(КонецМесяца(ПериодБлокировки) + 1));
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно добавить запись в регистр %1 по организации %2 в периоде %3: установлена блокировка от изменения до периода %4'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяРегистраЗаданий,
			Организация,
			ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(ПериодЗадания),
			ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(КонецМесяца(ПериодБлокировки) + 1));
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Отключить проверку блокировку периода для набора записей.
// 
// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей - Набор записей
Процедура ОтключитьПроверкуБлокировкуПериодаДляНабораЗаписей(НаборЗаписей) Экспорт
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуБлокировкиПериода", Истина);
	
КонецПроцедуры

// Проверять блокировку периода для набора записей.
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ЗаданияКРасчетуСебестоимости, РегистрСведенийНаборЗаписей.ЗаданияКЗакрытиюМесяца, РегистрСведенийНаборЗаписей.ЗаданияКРасчетуАмортизацииОС, РегистрСведенийНаборЗаписей.ЗаданияКРасчетуСтоимостиВНА, РегистрСведенийНаборЗаписей.ЗаданияКРаспределениюРасчетовСКлиентами, РегистрСведенийНаборЗаписей.ЗаданияКФормированиюДвиженийПоВНА, РегистрСведенийНаборЗаписей.ЗаданияКРаспределениюРасчетовСПоставщиками, РегистрСведенийНаборЗаписей.ОтражениеДокументовВМеждународномУчете, РегистрСведенийНаборЗаписей.ЗаданияКФормированиюДвиженийПоНДС, РегистрСведенийНаборЗаписей.ЗаданияКРасчетуАмортизацииНМА - Набор записей
// 
// Возвращаемое значение:
//  Булево - Проверять блокировку периода для набора записей
Функция ПроверятьБлокировкуПериодаДляНабораЗаписей(НаборЗаписей) Экспорт

	Возврат НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ОтключитьПроверкуБлокировкиПериода");
	
КонецФункции

// Доступные для расчета организации.
// 
// Параметры:
//  Период - Дата - Период
//  МассивОрганизаций - Массив из СправочникСсылка.Организации - Массив организаций
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Организации - Доступные для расчета организации
Функция ДоступныеДляРасчетаОрганизации(Период, МассивОрганизаций) Экспорт
	
	ДатыПоОрганизациям = РегистрыСведений.НастройкаБлокировкиОтИзменений.ДатыБлокировкиПоОрганизациям(МассивОрганизаций);
	ДоступныеОрганизации = Новый Массив;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		ЗаблокироватьПо = ДатыПоОрганизациям.Получить(ТекущаяОрганизация);

		Если НЕ ЗначениеЗаполнено(ЗаблокироватьПо) ИЛИ НачалоМесяца(Период) > ЗаблокироватьПо Тогда
			ДоступныеОрганизации.Добавить(ТекущаяОрганизация);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

// Есть право управления блокировкой периода.
// 
// Возвращаемое значение:
//  Булево - Есть право управления блокировкой периода
Функция ЕстьПравоУправленияБлокировкойПериода() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаБлокировкиОтИзменений);
	
КонецФункции


#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ЗакрытиеМесяцаСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("74d98af1-b1ee-4187-ab5e-67accc16c9cf");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЗакрытиеМесяцаСервер.ЗарегистрироватьДанныеКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Очищает неиспользуемые данные в служебных регистрах механизма закрытия месяца'");
	
	ЧитаемыеИзменяемые = РегистрыОбрабатываемыеПриОбновленииИБ();
	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(ЧитаемыеИзменяемые, ",");
	Обработчик.ИзменяемыеОбъекты = Обработчик.ЧитаемыеОбъекты;

КонецПроцедуры

// Регистрирует данные к обновлению
//
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработке(Параметры) Экспорт

	Изменяемые = РегистрыОбрабатываемыеПриОбновленииИБ();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НеиспользуемыеОперации", Перечисления.ОперацииЗакрытияМесяца.НеиспользуемыеОперации());
	Запрос.УстановитьПараметр("ТекущаяВерсия", СокрЛП(Метаданные.Версия));
	
	// Порядок запросов должен соответствовать порядку регистров в РегистрыОбрабатываемыеПриОбновленииИБ()
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Операция
	|ИЗ
	|	РегистрСведений.ВыполнениеОперацийЗакрытияМесяца КАК Т
	|ГДЕ
	|	Т.Операция В (&НеиспользуемыеОперации)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Операция
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Т
	|ГДЕ
	|	Т.Операция В (&НеиспользуемыеОперации)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.НомерВерсии КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.КэшДанныхПартионногоУчета КАК Т
	|ГДЕ
	|	Т.НомерВерсии <> &ТекущаяВерсия
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Для НомерРегистра = 0 По 2 Цикл
		
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
		ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
		ДополнительныеПараметры.ПолноеИмяРегистра = Изменяемые[НомерРегистра];
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса[НомерРегистра].Выгрузить(), ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Изменяемые = РегистрыОбрабатываемыеПриОбновленииИБ();
	ОбработкаЗавершена = Истина;
	
	Для НомерРегистра = 0 По 2 Цикл
		
		ПолноеИмяРегистра = Изменяемые[НомерРегистра];
		КраткоеИмяРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра).Имя;
		ИмяИзмерения = ?(НомерРегистра = 2, "НомерВерсии", "Операция");
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗначениеИзмерения = Выборка[ИмяИзмерения];
				Блокировка = Новый БлокировкаДанных;
				
				// Блокировка регистра распределения запасов.
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.УстановитьЗначение(ИмяИзмерения, ЗначениеИзмерения);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений[КраткоеИмяРегистра].СоздатьНаборЗаписей();
				НаборЗаписей.Отбор[ИмяИзмерения].Установить(ЗначениеИзмерения, Истина);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ОбработкаЗавершена = Ложь;
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Неопределено);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Функция РегистрыОбрабатываемыеПриОбновленииИБ()

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.КэшДанныхПартионногоУчета.ПолноеИмя());
	
	Возврат Изменяемые;
	
КонецФункции

#КонецОбласти

#КонецОбласти
