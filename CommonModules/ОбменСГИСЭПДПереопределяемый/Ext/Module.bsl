#Область ПрограммныйИнтерфейс

//@skip-check module-empty-method
Процедура ОбработкаЗаполненияЭТрН(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт

	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ТипЗначения = ТипЗнч(ДанныеЗаполнения);
		Если ТипЗначения = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ДокументыОснования") И ЭтотОбъект <> Неопределено Тогда
				Для Каждого ДокументОснование Из ДанныеЗаполнения.ДокументыОснования Цикл
					ДобавитьДокументОснование(ЭтотОбъект, ДокументОснование.ДокументОснование);
				КонецЦикла;
				ДанныеЗаполнения.Удалить("ДокументыОснования");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-check module-empty-method
Процедура ОбработкаЗаполненияЭСВ(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
Процедура ОбработкаЗаполненияЭЗН(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ТипЗначения = ТипЗнч(ДанныеЗаполнения);
		Если ТипЗначения = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("ДокументыОснования") И ЭтотОбъект <> Неопределено Тогда
				Для Каждого ДокументОснование Из ДанныеЗаполнения.ДокументыОснования Цикл
					ДобавитьДокументОснование(ЭтотОбъект, ДокументОснование.ДокументОснование);
				КонецЦикла;
				ДанныеЗаполнения.Удалить("ДокументыОснования");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//@skip-check module-empty-method
Процедура ОбработкаЗаполненияЭЗЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
Процедура ОбработкаЗаполненияЭПЛ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
КонецПроцедуры

//@skip-check module-empty-method
Процедура ОбработкаЗаполненияЭДФ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
КонецПроцедуры

// Обработчик события получения входящего титула ЭПД.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка.ЭлектроннаяТранспортнаяНакладная -
//			- ДокументСсылка.ЭлектроннаяСопроводительнаяВедомость -
//          - ДокументСсылка.ЭлектронныйЗаказНаряд - документ ЭПД.
//   ПолученныйТитул - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО - полученный титул документа.
//   ЭтоИсправление - Булево - признак исправления титула
//
//@skip-check module-empty-method
Процедура СобытиеПолучениеТитулаЭПД(ДокументСсылка, ПолученныйТитул, ЭтоИсправление) Экспорт
КонецПроцедуры

// Имя печатной формы ЭТрН.
// 
// Параметры:
//  ДатаДокумента - Дата - документа
// 
// Возвращаемое значение:
//  Строка - Имя печатной формы э тр Н
Функция ИмяПечатнойФормыЭТрН(ДатаДокумента) Экспорт

	Возврат "Документ.ЭлектроннаяТранспортнаяНакладная.ПФ_MXL_ТранспортнаяНакладная2116"
		
КонецФункции

Функция ИмяПечатнойФормыЭПЛ(ДатаДокумента) Экспорт

	Возврат "Документ.ЭлектронныйПутевойЛист.ПФ_MXL_ПутевойЛист"
		
КонецФункции

Функция ВидФактическийАдресКонтрагента() Экспорт
	
	Возврат ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента");
	
КонецФункции

Функция ИмяТипаБанковскиеСчетаОрганизации() Экспорт
	
	Возврат "СправочникСсылка.БанковскиеСчетаОрганизаций";
	
КонецФункции

#Область ПрограммныйИнтерфейсЭТН

// Создает электронные транспортные накладные по распоряжениям.
// 
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка - массив документов-распоряжений, для которых нужно создать электронные транспотные накладные;
//  ВыделенныеСтрокиАдресов - Массив из Число - если в МассивОбъектов передано задание на перевозку, то в этом параметре можно передать номера строк маршрута,
// по которым нужно проверить возможность создания транспортных накладных.
//  ТранспортнаяНакладнаяОбъект - ДокументОбъект.ЭлектроннаяТранспортнаяНакладная - для вызова из обработчика заполнения транспортной накладной
//  ОбъектыПоКоторымЭПДУжеСозданы - Массив из ДокументСсылка - массив документов-распоряжений, по которым накладные уже созданы;
// 
// Возвращаемое значение:
//  Массив из Структура --- данные для заполнения документов ЭТН
Функция ЗначенияЗаполненияЭлектронныеТранспортныеНакладные(МассивОбъектов, 
												ВыделенныеСтрокиАдресов = Неопределено, 
												ТранспортнаяНакладнаяОбъект = Неопределено, 
												ОбъектыПоКоторымЭПДУжеСозданы = Неопределено) Экспорт

	ДанныеДляЗаполненияЭПД	= Новый Массив;
	ЗначенияЗаполнения = ЗначенияЗаполненияЭТН();
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	Если МассивОбъектов.Количество() > 1
		И ТранспортнаяНакладнаяОбъект <> Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В режиме, когда нужно заполнить переданный объект электронной транспортной накладной, может быть передан только один документ-основание.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ПодготовитьДанныеДляСозданияЭлектронныхТранспортныхНакладных(МассивОбъектов, 
												ВыделенныеСтрокиАдресов, 
												ОбъектыПоКоторымЭПДУжеСозданы);
	
	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	ТекущаяНакладная				= Неопределено;
	ТекущиеЗначения					= Новый Структура(ДанныеДляЗаполнения.ПоляГруппировкиПоНакладным);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Константы.ВалютаУправленческогоУчета.Получить(), "Ссылка, Код, Наименование");
	
	Для Каждого ТекущийДокументОснование Из ДанныеДляЗаполнения.ДанныеПоДокументамОснованиям Цикл
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеЗначения, ТекущийДокументОснование) Тогда
			
			// заполнения данных по грузам
			ДанныеПоГрузу = Новый ТаблицаЗначений();
			ДанныеПоГрузу.Колонки.Добавить("ОтгрузочноеНаименованиеГруза", Новый ОписаниеТипов("Строка"));
			ДанныеПоГрузу.Колонки.Добавить("ДанныеГруза");
			ДанныеПоГрузу.Индексы.Добавить("ОтгрузочноеНаименованиеГруза");

			Если ТипЗнч(ТекущийДокументОснование.СсылкаТитулГрузоотправителяВалюта) = Тип("СправочникСсылка.Валюты")
				И ДанныепоВалюте.Ссылка <> ТекущийДокументОснование.СсылкаТитулГрузоотправителяВалюта Тогда
				ДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументОснование.СсылкаТитулГрузоотправителяВалюта, "Ссылка, Код, Наименование");
			КонецЕсли;
			
			Если ТекущаяНакладная <> Неопределено Тогда
				ДанныеДляЗаполненияЭПД.Добавить(ЗначенияЗаполнения);
				
				ЗначенияЗаполнения = ЗначенияЗаполненияЭТН();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ТекущийДокументОснование);
			ЗаполнитьЗначенияСвойств(ТекущиеЗначения, ТекущийДокументОснование);
			
			ЗначенияЗаполнения.ТитулГрузоотправителяКодВалюты = ДанныепоВалюте.Код;
			ЗначенияЗаполнения.ТитулГрузоотправителяНаименованиеВалюты = ДанныепоВалюте.Наименование;

			// заполнение данных по свойствам контрагентов
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ЗначенияЗаполнения, 
				ДанныеЗаполненияАдрес(ТекущийДокументОснование.АдресПогрузкиЗначенияПолей, "ТитулГрузоотправителяАдресПогрузки"),
				Истина);
	
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ЗначенияЗаполнения, 
				ДанныеЗаполненияАдрес(ТекущийДокументОснование.АдресДоставкиЗначенияПолей, "ТитулГрузоотправителяГрузополучательАдресДоставки"),
				Истина);
	
			// Перевозчик
			ПеревозчикКонтрагент = ЗначенияЗаполнения.СсылкаТитулГрузоотправителяПеревозчик;
			Если Не ЗначениеЗаполнено(ПеревозчикКонтрагент) И ЗначениеЗаполнено(ТекущийДокументОснование.ПеревозчикПартнер) Тогда
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ТекущийДокументОснование.ПеревозчикПартнер, ПеревозчикКонтрагент);
				Если ЗначениеЗаполнено(ПеревозчикКонтрагент) Тогда
					ЗначенияЗаполнения.СсылкаТитулГрузоотправителяПеревозчик = ПеревозчикКонтрагент;
				КонецЕсли;
			КонецЕсли;

			ОписаниеФормы = ИнициализироватьОписаниеФормы();
			ОписаниеФормы.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", ЗначенияЗаполнения.СсылкаТитулГрузоотправителяГрузоотправитель);
			ОписаниеФормы.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", ЗначенияЗаполнения.СсылкаТитулГрузоотправителяГрузополучатель);
			ОписаниеФормы.Вставить("СсылкаТитулГрузоотправителяПеревозчик", ЗначенияЗаполнения.СсылкаТитулГрузоотправителяПеревозчик);
			ОписаниеФормы.Вставить("ПрефиксТитула", "ТитулГрузоотправителя");
			ОписаниеФормы.Вставить("СтруктураРеквизитовЗаполнение", Новый Структура("ТитулГрузоотправителя", Новый Массив()));
			ОписаниеФормы.СтруктураРеквизитовЗаполнение.ТитулГрузоотправителя.Добавить(ЗначенияЗаполнения);
			
			ОписаниеФормы.ОписаниеРеквизитовФормы.Вставить("ПараметрыФормы","СсылкаТитулГрузоотправителяГрузоотправитель");
			ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыПоСсылке(
				Новый Структура("Имя", "СсылкаТитулГрузоотправителяГрузоотправитель"), 
				ОписаниеФормы);
			
			ОписаниеФормы.ОписаниеРеквизитовФормы.Вставить("ПараметрыФормы","СсылкаТитулГрузоотправителяГрузополучатель");
			ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыПоСсылке(
				Новый Структура("Имя", "СсылкаТитулГрузоотправителяГрузополучатель"), 
				ОписаниеФормы);
			
			ОписаниеФормы.ОписаниеРеквизитовФормы.Вставить("ПараметрыФормы","СсылкаТитулГрузоотправителяПеревозчик");
			ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыПоСсылке(
				Новый Структура("Имя", "СсылкаТитулГрузоотправителяПеревозчик"), 
				ОписаниеФормы);
			
			// Водители
			Если ЗначениеЗаполнено(ТекущийДокументОснование.ВодительФИО) Тогда
				
				НоваяСтрока = ЗначенияЗаполненияВодителиЭТН();
				НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ФизическиеЛицаКлиентСервер.ЧастиИмени(ТекущийДокументОснование.ВодительФИО));
				НоваяСтрока.ХранимыеДанныеВодитель = ТекущийДокументОснование.ВодительФИО;
				НоваяСтрока.НомерВУ = ТекущийДокументОснование.УдостоверениеНомер;
				НоваяСтрока.СерияВУ = ТекущийДокументОснование.УдостоверениеСерия;
				 
				ЗначенияЗаполнения.ТитулГрузоотправителяВодители.Добавить(НоваяСтрока);
				
			КонецЕсли;
			
			// Прицепы
			Если ЗначениеЗаполнено(ТекущийДокументОснование.Прицеп) Тогда
				НоваяСтрока = ЗначенияЗаполненияПрицепыЭТН();
				НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				НоваяСтрока.РегистрационныйНомер = ТекущийДокументОснование.ГосударственныйНомерПрицепа;
				ЗначенияЗаполнения.ТитулГрузоотправителяПрицепы.Добавить(НоваяСтрока);
			КонецЕсли;
			
		ИначеЕсли ТекущаяНакладная = ТекущийДокументОснование.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяНакладная = ТекущийДокументОснование.Ссылка;

		ЗначенияЗаполнения.ТитулГрузоотправителяСтоимостьГруза = 0;
		ОтборПоГрузу = Новый Структура();
		СтрокиПоГрузу = ДанныеДляЗаполнения.ДанныеПоГрузу.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокументОснование.Ссылка));
		Для Каждого НайденнаяСтрокаПоГрузу Из СтрокиПоГрузу Цикл
			ЗначенияЗаполнения.ТитулГрузоотправителяМассаБруттоГруза = ЗначенияЗаполнения.ТитулГрузоотправителяМассаБруттоГруза + НайденнаяСтрокаПоГрузу.МассаБрутто;

			НайденнаяСтрокаИндекса = ДанныеПоГрузу.Найти(НайденнаяСтрокаПоГрузу.ОтгрузочноеНаименованиеГруза, "ОтгрузочноеНаименованиеГруза");
			Если НайденнаяСтрокаИндекса = Неопределено Тогда
				
				НайденнаяСтрока = ЗначенияЗаполненияТитулГрузоотправителяГрузы();
				НайденнаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				НайденнаяСтрока.ОтгрузочноеНаименованиеГруза = НайденнаяСтрокаПоГрузу.ОтгрузочноеНаименованиеГруза;
				НайденнаяСтрока.ХранимыеДанныеГруз = НайденнаяСтрокаПоГрузу.ОтгрузочноеНаименованиеГруза;
				
				НайденнаяСтрока.КодВалютыСтоимости = ДанныепоВалюте.Код;
				НайденнаяСтрока.НаименованиеВалютыСтоимости = ДанныепоВалюте.Наименование;

				НайденнаяСтрокаИндекса = ДанныеПоГрузу.Добавить();
				НайденнаяСтрокаИндекса.ОтгрузочноеНаименованиеГруза = НайденнаяСтрока.ХранимыеДанныеГруз;

				СтрокаПоМаркировке = ЗначенияЗаполненияТитулГрузоотправителяПереченьМаркировокГруза();
				СтрокаПоМаркировке.ИдентификаторСтрокиРодителя = НайденнаяСтрока.ИдентификаторСтроки;
				ЗначенияЗаполнения.ТитулГрузоотправителяПереченьМаркировокГруза.Добавить(СтрокаПоМаркировке);
				
			Иначе
				
				НайденнаяСтрока = НайденнаяСтрокаИндекса.ДанныеГруза;
				
			КонецЕсли;
			
			НайденнаяСтрока.МассаБрутто = НайденнаяСтрока.МассаБрутто + НайденнаяСтрокаПоГрузу.МассаБрутто;
			НайденнаяСтрока.МассаНетто = НайденнаяСтрока.МассаНетто + НайденнаяСтрокаПоГрузу.МассаНетто;
			НайденнаяСтрока.ОбъемГруза = НайденнаяСтрока.ОбъемГруза + НайденнаяСтрокаПоГрузу.ОбъемУпаковки;
			Если Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(НайденнаяСтрокаПоГрузу.ЕдиницаИзмеренияУпаковка) Тогда
				НайденнаяСтрока.КоличествоГрузовыхМест = НайденнаяСтрока.КоличествоГрузовыхМест + НайденнаяСтрокаПоГрузу.КоличествоУпаковок;
			Иначе
				НайденнаяСтрока.КоличествоГрузовыхМест = НайденнаяСтрока.КоличествоГрузовыхМест + 1;
			КонецЕсли;
			НайденнаяСтрока.СтоимостьГруза = НайденнаяСтрока.СтоимостьГруза + НайденнаяСтрокаПоГрузу.СтоимостьГруза;
			
			ЗначенияЗаполнения.ТитулГрузоотправителяСтоимостьГруза = ЗначенияЗаполнения.ТитулГрузоотправителяСтоимостьГруза + НайденнаяСтрока.СтоимостьГруза;
			
			НайденнаяСтрокаИндекса.ДанныеГруза = НайденнаяСтрока;
		КонецЦикла;
		ЗначенияЗаполнения.ТитулГрузоотправителяГрузы = ДанныеПоГрузу.ВыгрузитьКолонку("ДанныеГруза");
		
		ЗначенияЗаполнения.ДокументыОснования.Добавить(Новый Структура("ДокументОснование", ТекущийДокументОснование.Ссылка));
		Если Не ТекущийДокументОснование.ЗаданиеНаперевозку.Пустая() Тогда
			ЗначенияЗаполнения.ДокументыОснования.Добавить(Новый Структура("ДокументОснование", ТекущийДокументОснование.ЗаданиеНаперевозку));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполненияЭПД.Добавить(ЗначенияЗаполнения);
		
	УстановитьПривилегированныйРежим(Ложь); 
	
	Возврат ДанныеДляЗаполненияЭПД;
		
КонецФункции

// Функция-конструктор параметров формирования электронных транспортных накладных по документам-основаниям.
//
// Возвращаемое значение:
//  Структура - параметры формирования транспортных накладных по документам-основаниям:
// 	* Реквизиты - Структура - описание получения значений кэшируемых в транспортной накладной реквизитов документов-оснований (ключ - имя реквизита транспортной накладной, значение - путь к данным в документе основании). Поля структуры:
//    ** Организация - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.Организация"
//    ** Дата - Дата - значение по умолчанию "ОснованиеТранспортнойНакладной.Дата"
//    ** СсылкаТитулГрузоотправителяГрузополучатель - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.Грузополучатель"
//    ** СсылкаТитулГрузоотправителяГрузоотправитель - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.Организация"
//    ** СсылкаТитулГрузоотправителяФХЖБанковскиеРеквизиты - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.БанковскийСчетГрузоотправителя"
//    ** ТитулГрузоотправителяДоверенностьНомер - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.ДоверенностьНомер"
//    ** ТитулГрузоотправителяДоверенностьДата - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.ДоверенностьДата"
//    ** АдресДоставки - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.АдресДоставки"
//    ** АдресДоставкиЗначенияПолей - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.АдресДоставкиЗначенияПолей"
//    ** ПометкаУдаления - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.ПометкаУдаления"
//    ** ПеревозчикПартнер - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.ПеревозчикПартнер" 
//  * ЕстьЗаказы - Булево
//  * ИмяПоляЗаказВТЧТовары - Строка
//  * ИмяПоляНакладнаяПоЗаказу - Строка
//  * ИмяТЧТовары - Строка - значение по умолчанию "Товары"
//  * ИмяПоляСклад - Строка - значение по умолчанию "Склад"
//  * ИспользоватьРасширенныеВозможностиЗаказа - Булево - Истина - признак того, что документ основание зависит от настройки
//                                               использования функциональной опции ИспользоватьРасширенныеВозможностиЗаказаКлиента.
//                                               По умолчанию значение "Ложь".
//  * ТекстУсловияИспользоватьРасширенныеВозможностиЗаказа - Строка - текст условия определения использования расширенных возможностей заказов клиента,
//                                                                    используется совместно с ИспользоватьРасширенныеВозможностиЗаказа.
//
Функция ПараметрыФормированияЭлектронныхТранспортныхНакладных() Экспорт
	
	ПараметрыФормирования = Новый Структура;
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("Организация", "ОснованиеТранспортнойНакладной.Организация");
	Реквизиты.Вставить("Дата", "ОснованиеТранспортнойНакладной.Дата");
	Реквизиты.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", "ОснованиеТранспортнойНакладной.Грузополучатель");
	Реквизиты.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", "ОснованиеТранспортнойНакладной.Организация");
	Реквизиты.Вставить("СсылкаТитулГрузоотправителяФХЖБанковскиеРеквизиты", "ОснованиеТранспортнойНакладной.БанковскийСчетОрганизации");
	Реквизиты.Вставить("ТитулГрузоотправителяДоверенностьНомер", "ОснованиеТранспортнойНакладной.ДоверенностьНомер");
	Реквизиты.Вставить("ТитулГрузоотправителяДоверенностьДата", "ОснованиеТранспортнойНакладной.ДоверенностьДата");
	Реквизиты.Вставить("АдресДоставки", "ОснованиеТранспортнойНакладной.АдресДоставки");
	Реквизиты.Вставить("АдресДоставкиЗначенияПолей", "ОснованиеТранспортнойНакладной.АдресДоставкиЗначенияПолей");
	Реквизиты.Вставить("ПеревозчикПартнер", "ОснованиеТранспортнойНакладной.ПеревозчикПартнер"); 
	Реквизиты.Вставить("СсылкаТитулГрузоотправителяВалюта", "ОснованиеТранспортнойНакладной.Валюта"); 

	ПараметрыФормирования.Вставить("Реквизиты", Реквизиты);
	
	// Если есть заказы - то адрес доставки, и перевозчик получается из заказа, указанного в ТЧ Товары
	
	ПараметрыФормирования.Вставить("ЕстьЗаказы", Ложь);
	ПараметрыФормирования.Вставить("ИмяПоляЗаказВТЧТовары", "");
	ПараметрыФормирования.Вставить("ИмяПоляНакладнаяПоЗаказу", "");
	ПараметрыФормирования.Вставить("ИмяТЧТовары", "Товары");
	ПараметрыФормирования.Вставить("ИмяПоляСклад", "Склад");
	ПараметрыФормирования.Вставить("ИмяПоляСуммы", "СуммаСНДС");
	
	ПараметрыФормирования.Вставить("ИспользоватьРасширенныеВозможностиЗаказа", Ложь);
	ПараметрыФормирования.Вставить("ТекстУсловияИспользоватьРасширенныеВозможностиЗаказа", "");
	ПараметрыФормирования.Вставить("ЕстьДополнительнаяПроверкаВозможностиСозданияНакладной", Ложь);
	ПараметрыФормирования.Вставить("ИменаРеквизитовДляДополнительнойПроверки", Новый Массив);
	
	РеквизитыШапкиДляПечати = Новый Структура;
	РеквизитыШапкиДляПечати.Вставить("ХозяйственнаяОперация", "ОснованиеТранспортнойНакладной.ХозяйственнаяОперация");
	РеквизитыШапкиДляПечати.Вставить("Валюта", "ОснованиеТранспортнойНакладной.Валюта");
	
	Возврат ПараметрыФормирования;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсЭЗН

// Значения заполнения электронные заказ наряды.
// 
// Параметры:
//  МассивОбъектов			 - Массив из ДокументСсылка - массив документов-распоряжений, для которых нужно создать электронные заказ наряды;
//  ВыделенныеСтрокиАдресов	 - Массив из Число - если в МассивОбъектов передано задание на перевозку, то в этом параметре можно передать номера строк маршрута,
//  	по которым нужно проверить возможность создания транспортных накладных.
//  ТранспортнаяНакладнаяОбъект	 - ДокументОбъект.ЭлектронныйЗаказНаряд - для вызова из обработчика заполнения транспортной накладной 
//  ОбъектыПоКоторымЭПДУжеСозданы	- Массив из ДокументСсылка - массив документов-распоряжений, по которым накладные уже созданы;
// 
// Возвращаемое значение:
//  Массив из см. ЗначенияЗаполненияЭЗН - Значения заполнения электронные заказ наряды
Функция ЗначенияЗаполненияЭлектронныеЗаказНаряды(МассивОбъектов, 
										ВыделенныеСтрокиАдресов = Неопределено, 
										ТранспортнаяНакладнаяОбъект = Неопределено, 
										ОбъектыПоКоторымЭПДУжеСозданы = Неопределено) Экспорт
	
	ДанныеДляЗаполненияЭПД	= Новый Массив;
	ЗначенияЗаполнения = ЗначенияЗаполненияЭЗН();
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;
	
	Если МассивОбъектов.Количество() > 1
		И ТранспортнаяНакладнаяОбъект <> Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В режиме, когда нужно заполнить переданный объект электронного заказ наряда, может быть передан только один документ-основание.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ДанныеДляЗаполнения = ПодготовитьДанныеДляСозданияЭлектронныхЗаказНарядов(МассивОбъектов, 
												ВыделенныеСтрокиАдресов, 
												ОбъектыПоКоторымЭПДУжеСозданы);

	Если ДанныеДляЗаполнения = Неопределено Тогда
		Возврат ДанныеДляЗаполненияЭПД;
	КонецЕсли;

	ТекущаяНакладная				= Неопределено;
	ТекущиеЗначения					= Новый Структура(ДанныеДляЗаполнения.ПоляГруппировкиПоНакладным);

	УстановитьПривилегированныйРежим(Истина);
	
	ДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Константы.ВалютаУправленческогоУчета.Получить(), "Ссылка, Код, Наименование");
	
	Для Каждого ТекущийДокументОснование Из ДанныеДляЗаполнения.ДанныеПоДокументамОснованиям Цикл
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеЗначения, ТекущийДокументОснование) Тогда
			
			Если ТипЗнч(ТекущийДокументОснование.СсылкаТитулФрахтователяВалютаОбщейСтоимости) = Тип("СправочникСсылка.Валюты")
				И ДанныепоВалюте.Ссылка <> ТекущийДокументОснование.СсылкаТитулФрахтователяВалютаОбщейСтоимости Тогда
				
				ДанныепоВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокументОснование.СсылкаТитулФрахтователяВалютаОбщейСтоимости, "Ссылка, Код, Наименование");
			КонецЕсли;
			
			Если ТекущаяНакладная <> Неопределено Тогда
				ДанныеДляЗаполненияЭПД.Добавить(ЗначенияЗаполнения);
				
				ЗначенияЗаполнения = ЗначенияЗаполненияЭЗН();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ТекущийДокументОснование);
			ЗаполнитьЗначенияСвойств(ТекущиеЗначения, ТекущийДокументОснование); 
			
			// заполнение данных по свойствам контрагентов
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ЗначенияЗаполнения, 
				ДанныеЗаполненияАдрес(ТекущийДокументОснование.АдресПогрузкиЗначенияПолей, "ТитулФрахтователяМестаПодачиТСАдрес"),
				Истина);
			
			// Перевозчик
			ПеревозчикКонтрагент = ЗначенияЗаполнения.СсылкаТитулФрахтователяФрахтовщик;
			Если Не ЗначениеЗаполнено(ПеревозчикКонтрагент) И ЗначениеЗаполнено(ТекущийДокументОснование.ПеревозчикПартнер) Тогда
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ТекущийДокументОснование.ПеревозчикПартнер, ПеревозчикКонтрагент);
				Если ЗначениеЗаполнено(ПеревозчикКонтрагент) Тогда
					ЗначенияЗаполнения.СсылкаТитулФрахтователяФрахтовщик = ПеревозчикКонтрагент;
				КонецЕсли;
			КонецЕсли;

			ОписаниеФормы = ИнициализироватьОписаниеФормы();
			ОписаниеФормы.Вставить("СсылкаТитулФрахтователяФрахтователь", ЗначенияЗаполнения.СсылкаТитулФрахтователяФрахтователь);
			ОписаниеФормы.Вставить("СсылкаТитулФрахтователяФрахтовщик", ЗначенияЗаполнения.СсылкаТитулФрахтователяФрахтовщик);
			ОписаниеФормы.Вставить("ПрефиксТитула", "ТитулФрахтователя");
			ОписаниеФормы.Вставить("СтруктураРеквизитовЗаполнение", Новый Структура("ТитулФрахтователя", Новый Массив()));
			ОписаниеФормы.СтруктураРеквизитовЗаполнение.ТитулФрахтователя.Добавить(ЗначенияЗаполнения);
			
			ОписаниеФормы.ОписаниеРеквизитовФормы.Вставить("ПараметрыФормы","СсылкаТитулФрахтователяФрахтователь");
			ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыПоСсылке(
				Новый Структура("Имя", "СсылкаТитулФрахтователяФрахтователь"), 
				ОписаниеФормы);
	
			ОписаниеФормы.ОписаниеРеквизитовФормы.Вставить("ПараметрыФормы","СсылкаТитулФрахтователяФрахтовщик");
			ОбменСГИСЭПДКлиентСервер.ЗаполнитьРеквизитыПоСсылке(
				Новый Структура("Имя", "СсылкаТитулФрахтователяФрахтовщик"), 
				ОписаниеФормы);
			
			// Водители
			Если ЗначениеЗаполнено(ТекущийДокументОснование.ВодительФИО) Тогда
				
				НоваяСтрока = ЗначенияЗаполненияВодителиЭТН();
				НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ФизическиеЛицаКлиентСервер.ЧастиИмени(ТекущийДокументОснование.ВодительФИО));
				НоваяСтрока.ХранимыеДанныеВодитель = ТекущийДокументОснование.ВодительФИО;
				НоваяСтрока.НомерВУ = ТекущийДокументОснование.УдостоверениеНомер;
				НоваяСтрока.СерияВУ = ТекущийДокументОснование.УдостоверениеСерия;
				 
				ЗначенияЗаполнения.ТитулФрахтовщикаСведенияОВодителе.Добавить(НоваяСтрока);
				
			КонецЕсли;
		
		ИначеЕсли ТекущаяНакладная = ТекущийДокументОснование.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяНакладная = ТекущийДокументОснование.Ссылка;

		// заполнения данных по грузам
		ДанныеПоГрузу = Новый ТаблицаЗначений();
		ДанныеПоГрузу.Колонки.Добавить("ОтгрузочноеНаименованиеГруза", Новый ОписаниеТипов("Строка"));
		ДанныеПоГрузу.Колонки.Добавить("ДанныеГруза");
		ДанныеПоГрузу.Индексы.Добавить("ОтгрузочноеНаименованиеГруза");

		ЗначенияЗаполнения.ТитулФрахтователяСтоимостьЦенностьГрузаСНалогомВсего = 0;
		ОтборПоГрузу = Новый Структура();
		СтрокиПоГрузу = ДанныеДляЗаполнения.ДанныеПоГрузу.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокументОснование.Ссылка));
		Для Каждого НайденнаяСтрокаПоГрузу Из СтрокиПоГрузу Цикл
			НайденнаяСтрокаИндекса = ДанныеПоГрузу.Найти(НайденнаяСтрокаПоГрузу.ОтгрузочноеНаименованиеГруза, "ОтгрузочноеНаименованиеГруза");
			Если НайденнаяСтрокаИндекса = Неопределено Тогда
				
				НайденнаяСтрока = ЗначенияЗаполненияТитулФрахтователяОписаниеГруза();
				НайденнаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
				НайденнаяСтрока.ОтгрузочноеНаименованиеГруза = НайденнаяСтрокаПоГрузу.ОтгрузочноеНаименованиеГруза;
				НайденнаяСтрока.ХранимыеДанныеГруз = НайденнаяСтрокаПоГрузу.ОтгрузочноеНаименованиеГруза;
				
				НайденнаяСтрока.КодВалютыСтоимости = ДанныепоВалюте.Код;
				НайденнаяСтрока.НаименованиеВалютыСтоимости = ДанныепоВалюте.Наименование;

				НайденнаяСтрокаИндекса = ДанныеПоГрузу.Добавить();
				НайденнаяСтрокаИндекса.ОтгрузочноеНаименованиеГруза = НайденнаяСтрока.ХранимыеДанныеГруз;

			Иначе
				
				НайденнаяСтрока = НайденнаяСтрокаИндекса.ДанныеГруза;
				
			КонецЕсли;
			
			НайденнаяСтрока.МассаГрузаБруттоВКилограммах = НайденнаяСтрока.МассаГрузаБруттоВКилограммах + НайденнаяСтрокаПоГрузу.МассаБрутто;
			НайденнаяСтрока.МассаГрузаНеттоВКилограммах = НайденнаяСтрока.МассаГрузаНеттоВКилограммах + НайденнаяСтрокаПоГрузу.МассаНетто;
			НайденнаяСтрока.УказаниеОбъемаГрузовыхМестВКубическихМетрах = НайденнаяСтрока.УказаниеОбъемаГрузовыхМестВКубическихМетрах + НайденнаяСтрокаПоГрузу.ОбъемУпаковки;
			Если Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(НайденнаяСтрокаПоГрузу.ЕдиницаИзмеренияУпаковка) Тогда
				НайденнаяСтрока.УказаниеКоличестваГрузовыхМест = НайденнаяСтрока.УказаниеКоличестваГрузовыхМест + НайденнаяСтрокаПоГрузу.КоличествоУпаковок;
			Иначе
				НайденнаяСтрока.УказаниеКоличестваГрузовыхМест = НайденнаяСтрока.УказаниеКоличестваГрузовыхМест + 1;
			КонецЕсли;
			НайденнаяСтрока.СтоимостьЦенностьГрузаСНалогомВсего = НайденнаяСтрока.СтоимостьЦенностьГрузаСНалогомВсего + НайденнаяСтрокаПоГрузу.СтоимостьГруза;
			ЗначенияЗаполнения.ТитулФрахтователяСтоимостьЦенностьГрузаСНалогомВсего = ЗначенияЗаполнения.ТитулФрахтователяСтоимостьЦенностьГрузаСНалогомВсего + НайденнаяСтрокаПоГрузу.СтоимостьГруза;
			
			НайденнаяСтрокаИндекса.ДанныеГруза = НайденнаяСтрока;
			
		КонецЦикла;

		ЗначенияЗаполнения.ТитулФрахтователяОписаниеГруза = ДанныеПоГрузу.ВыгрузитьКолонку("ДанныеГруза");
		
		ЗначенияЗаполнения.ДокументыОснования.Добавить(Новый Структура("ДокументОснование", ТекущийДокументОснование.Ссылка));
		Если Не ТекущийДокументОснование.ЗаданиеНаперевозку.Пустая() Тогда
			ЗначенияЗаполнения.ДокументыОснования.Добавить(Новый Структура("ДокументОснование", ТекущийДокументОснование.ЗаданиеНаперевозку));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполненияЭПД.Добавить(ЗначенияЗаполнения);
		
	УстановитьПривилегированныйРежим(Ложь); 
	
	Возврат ДанныеДляЗаполненияЭПД;
		
КонецФункции

// Функция-конструктор параметров формирования электронных заказ нарядов по документам-основаниям.
//
// Возвращаемое значение:
//  Структура - параметры формирования электронных заказ нарядов по документам-основаниям:
// 	* Реквизиты - Структура - описание получения значений кэшируемых в транспортной накладной реквизитов документов-оснований (ключ - имя реквизита транспортной накладной, значение - путь к данным в документе основании). Поля структуры:
//    ** Организация - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.Организация"
//    ** Дата - Дата - значение по умолчанию "ОснованиеТранспортнойНакладной.Дата"
//    ** СсылкаТитулФрахтователяФрахтователь - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.Грузоотправитель"
//    ** ПометкаУдаления - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.ПометкаУдаления"
//    ** ПеревозчикПартнер - Строка - значение по умолчанию "ОснованиеТранспортнойНакладной.ПеревозчикПартнер" 
//  * ЕстьЗаказы - Булево
//  * ИмяПоляЗаказВТЧТовары - Строка
//  * ИмяПоляНакладнаяПоЗаказу - Строка
//  * ИмяТЧТовары - Строка - значение по умолчанию "Товары"
//  * ИмяПоляСклад - Строка - значение по умолчанию "Склад"
//  * ИспользоватьРасширенныеВозможностиЗаказа - Булево - Истина - признак того, что документ основание зависит от настройки
//                                               использования функциональной опции ИспользоватьРасширенныеВозможностиЗаказаКлиента.
//                                               По умолчанию значение "Ложь".
//  * ЕстьДополнительнаяПроверкаВозможностиСозданияНакладной - Булево - Истина - признак того, что используются дополнительные проверки
//                                                                               создания электронного заказ наряда.
//                                                                               По умолчанию значение "Ложь".
//  * ИменаРеквизитовДляДополнительнойПроверки - Массив из Строка - массив имен реквизитов, используемых для дополнительной проверки
//
Функция ПараметрыФормированияЭлектронныхЗаказНарядов() Экспорт
	
	ПараметрыФормирования = Новый Структура;
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("Организация", "ОснованиеТранспортнойНакладной.Организация");
	Реквизиты.Вставить("Дата", "ОснованиеТранспортнойНакладной.Дата");
	Реквизиты.Вставить("СсылкаТитулФрахтователяФрахтователь", "ОснованиеТранспортнойНакладной.Организация");
	Реквизиты.Вставить("ПеревозчикПартнер", "ОснованиеТранспортнойНакладной.ПеревозчикПартнер"); 
	Реквизиты.Вставить("СсылкаТитулФрахтователяВалютаОбщейСтоимости", "ОснованиеТранспортнойНакладной.Валюта"); 

	ПараметрыФормирования.Вставить("Реквизиты", Реквизиты);
	
	// Если есть заказы - то адрес доставки, и перевозчик получается из заказа, указанного в ТЧ Товары
	ПараметрыФормирования.Вставить("ЕстьЗаказы", Ложь);
	ПараметрыФормирования.Вставить("ИмяПоляЗаказВТЧТовары", "");
	ПараметрыФормирования.Вставить("ИмяПоляНакладнаяПоЗаказу", "");
	ПараметрыФормирования.Вставить("ИмяТЧТовары", "Товары");
	ПараметрыФормирования.Вставить("ИмяПоляСклад", "Склад");
	
	ПараметрыФормирования.Вставить("ЕстьДополнительнаяПроверкаВозможностиСозданияНакладной", Ложь);
	ПараметрыФормирования.Вставить("ИменаРеквизитовДляДополнительнойПроверки", Новый Массив);
	
	Возврат ПараметрыФормирования;
	
КонецФункции

#КонецОбласти

// Получает типы ЭПД
//
// Возвращаемое значение:
//  СписокЗначений из Строка
//
Функция ТипыДокументовЭПД() Экспорт
	
	СписокДокументов = Новый СписокЗначений();

	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная) Тогда
		СписокДокументов.Добавить(Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная"), "Электронная транспортная накладная");
	КонецЕсли;
		
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронныйЗаказНаряд) Тогда
		СписокДокументов.Добавить(Тип("ДокументСсылка.ЭлектронныйЗаказНаряд"), "Электронный заказ-наряд");
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

// Проверить и создать на сервере.

// Получает количество ЭПД по документу основания
//
// Параметры:
//  ДокументОснование - ДокументСсылка
// 
// Возвращаемое значение:
//  Число
//
Функция КоличествоЭлектронныхДокументов(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Обработки.ЭлектронныеПеревозочныеДокументы.ЗапросПоДокументуОснования();
	
	Обработки.ЭлектронныеПеревозочныеДокументы.ЗаполнитьОбязательныеПараметрыЗапроса(Запрос.Параметры);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("НачалоПериода",     Дата(1,1,1));
	Запрос.УстановитьПараметр("КонецПериода",      Дата(1,1,1));
	
	УстановитьПривилегированныйРежим(Истина); 
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь); 
	
	Возврат ТаблицаРезультат.Количество();
	
КонецФункции

// Проверить и создать на сервере.
// 
// Параметры:
//  ТипЭПД - Тип -
//  ПроверяемыеОбъекты - Массив из ДокументСсылка, ДокументОбъект.ЭлектроннаяТранспортнаяНакладная, ДокументОбъект.ЭлектронныйЗаказНаряд -
// 
// Возвращаемое значение:
//  Структура -- Проверить и создать на сервере::
// * ДокументыДляСозданияЭПД - Массив из ДокументСсылка -
// * ДокументыПоКоторомуУжеСозданыЭПД - Массив из ДокументСсылка -
// * СозданныеЭПД - Массив из ДокументСсылка -
// * ДанныеДляЗаполнения - Массив из Структура -
Функция ПроверитьИСоздатьНаСервере(ТипЭПД, ПроверяемыеОбъекты) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДокументыДляСозданияЭПД", Новый Массив());
	Результат.Вставить("ДокументыПоКоторомуУжеСозданыЭПД", Новый Массив());
	Результат.Вставить("СозданныеЭПД", Новый Массив());
	Результат.Вставить("ДанныеДляЗаполнения", Новый Массив());
	
	РезультатПроверки = ПроверитьДокументыОснования(ТипЭПД, ПроверяемыеОбъекты);
	
	Результат.ДокументыДляСозданияЭПД = ОбщегоНазначения.СкопироватьРекурсивно(РезультатПроверки.ЗаданияНаПеревозкуДляСозданияЭПД);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ДокументыДляСозданияЭПД, РезультатПроверки.ОбъектыПоКоторымМожноИНужноСоздатьЭПД, Истина);

	Результат.ДокументыПоКоторомуУжеСозданыЭПД = ОбщегоНазначения.СкопироватьРекурсивно(РезультатПроверки.ЗаданияНаПеревозкуПоКоторымЭПДУжеСозданы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ДокументыПоКоторомуУжеСозданыЭПД, РезультатПроверки.ОбъектыПоКоторымЭПДУжеСозданы, Истина);
	
	Результат.СозданныеЭПД = ОбщегоНазначения.СкопироватьРекурсивно(РезультатПроверки.УжеСозданныеЭПД);
	
	ШаблонОшибкиТНСозданы = НСтр("ru = 'Для документа ""%Документ%"" не требуется оформлять ЭТН, т.к. они уже оформлены или в задании на перевозку нет ни одного маршрута.'");
	Для Каждого СтрМас из РезультатПроверки.ЗаданияНаПеревозкуПоКоторымЭПДУжеСозданы Цикл
	
		ТекстСообщения = СтрЗаменить(ШаблонОшибкиТНСозданы, "%Документ%", СтрМас);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрМас);
		
	КонецЦикла;
	
	ШаблонОшибкиТНСозданы = НСтр("ru = 'Для документа ""%Документ%"" не требуется оформлять ЭТН, т.к. она уже оформлена.'");
	Для Каждого СтрМас из РезультатПроверки.ОбъектыПоКоторымЭПДУжеСозданы Цикл
	
		ТекстСообщения = СтрЗаменить(ШаблонОшибкиТНСозданы, "%Документ%", СтрМас);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрМас);
		
	КонецЦикла;
	
	Если Результат.ДокументыДляСозданияЭПД.Количество() Тогда
		
		Если ТипЭПД = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
			Результат.ДанныеДляЗаполнения = ЗначенияЗаполненияЭлектронныеТранспортныеНакладные(Результат.ДокументыДляСозданияЭПД);
		ИначеЕсли ТипЭПД = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда
			Результат.ДанныеДляЗаполнения = ЗначенияЗаполненияЭлектронныеЗаказНаряды(Результат.ДокументыДляСозданияЭПД);
		КонецЕсли;
		
		Если Результат.ДанныеДляЗаполнения.Количество() > 1 Тогда
			
			Если ТипЭПД = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") 
				Или ТипЭПД = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда
				
				Для Каждого СтрокаРезультата Из Результат.ДанныеДляЗаполнения Цикл
					
					Результат.ДокументыПоКоторомуУжеСозданыЭПД.Добавить(СоздатьЭПД(ТипЭПД, СтрокаРезультата));
						
				КонецЦикла;
	
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ДокументыПоКоторомуУжеСозданыЭПД, 
														Результат.ДокументыДляСозданияЭПД);
				
		КонецЕсли;
	
		Результат.ДокументыДляСозданияЭПД.Очистить();
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Добавление команд создания ЭПД.
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ОбменСГИСЭПДКлиентПереопределяемый.ПроверитьИСоздатьЭПДКоманда";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьЭТН";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Электронная транспортная накладная'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбменЭД";
	КонецЕсли;
		
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронныйЗаказНаряд) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ОбменСГИСЭПДКлиентПереопределяемый.ПроверитьИСоздатьЭПДКоманда";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьЭЗН";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Электронный заказ-наряд'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьОбменЭД";
		
	КонецЕсли;
	
КонецПроцедуры

// Разрешена работа ЭПД.
// 
// Возвращаемое значение:
//  Булево - Разрешена работа ЭПД
Функция РазрешенаРаботаЭПД() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЭлектронныеПеревозочныеДокументы);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеСвойствДокумента

// Инициализировать описание формы.
// 
// Возвращаемое значение:
//  Структура -- Инициализировать описание формы::
// * ОписаниеРеквизитовФормы - Структура -::
// ** ЕстьОбъект - Булево -
// ** ОписаниеТаблицФормы - Структура -
// * Модифицированность - Булево -
// * ИзмененСоставУчастников - Булево -
// * Элементы - Массив -
Функция ИнициализироватьОписаниеФормы()

	ОписаниеФормы = Новый Структура();
	ОписаниеРеквизитовФормы = Новый Структура();
	
	ОписаниеРеквизитовФормы.Вставить("ЕстьОбъект", Ложь);
	
	ОписаниеФормы.Вставить("ОписаниеРеквизитовФормы", ОписаниеРеквизитовФормы);
	ОписаниеФормы.Вставить("СтруктураРеквизитов", Неопределено);
	ОписаниеФормы.Вставить("ИзмененСоставУчастников", Ложь);
	ОписаниеФормы.Вставить("Элементы", Новый Массив());
	ОписаниеФормы.Вставить("ПрефиксТитула", "");
	ОписаниеФормы.Вставить("НомерВерсии", 0);
	ОписаниеФормы.Вставить("СтруктураРеквизитовЗаполнение", Неопределено);
	
	Возврат ОписаниеФормы;
	
КонецФункции

Функция ДанныеЗаполненияАдрес(Адрес, Префикс)
	
	ДанныеЗаполнения = Новый Структура;

	СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(Адрес);
	
	Если СтруктураАдреса.ТипАдреса = "ВСвободнойФорме" Тогда
		ДанныеЗаполнения.Вставить(Префикс + "Представление",   СтруктураАдреса.Представление);
		ДанныеЗаполнения.Вставить(Префикс + "КодСтраны",       СтруктураАдреса.КодСтраны);
	Иначе	
		ДанныеЗаполнения.Вставить(Префикс + "Индекс",          СтруктураАдреса.Индекс);
		ДанныеЗаполнения.Вставить(Префикс + "КодРегиона",      СтруктураАдреса.КодРегиона);
		ДанныеЗаполнения.Вставить(Префикс + "Город",           СтруктураАдреса.Город + ?(СтруктураАдреса.ГородТипКраткий = "", "", " ") + СтруктураАдреса.ГородТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "Район",           СтруктураАдреса.Район + ?(СтруктураАдреса.РайонТипКраткий = "", "", " ") + СтруктураАдреса.РайонТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "НаселенныйПункт", СтруктураАдреса.НаселенныйПункт + ?(СтруктураАдреса.НаселенныйПунктТипКраткий = "", "", " ") + СтруктураАдреса.НаселенныйПунктТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "Улица",           СтруктураАдреса.Улица + ?(СтруктураАдреса.УлицаТипКраткий = "", "", " ") + СтруктураАдреса.УлицаТипКраткий);
		ДанныеЗаполнения.Вставить(Префикс + "Дом",             СтруктураАдреса.Здание.Номер);
		Если СтруктураАдреса.Корпуса.Количество() > 0 Тогда
			ДанныеЗаполнения.Вставить(Префикс + "Корпус",      СтруктураАдреса.Корпуса[0].Номер);
		КонецЕсли;
	КонецЕсли;

	Возврат ДанныеЗаполнения;
КонецФункции
 
 Процедура ДобавитьДокументОснование(ТранспортнаяНакладнаяОбъект, ДокументОснованиеСсылка)
	
	Если ДокументОснованиеСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйДокумент = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Найти(ДокументОснованиеСсылка, "ДокументОснование");
	Если НайденныйДокумент = Неопределено Тогда
		НоваяСтрокаОснований = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Добавить();
		НоваяСтрокаОснований.ДокументОснование = ДокументОснованиеСсылка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭТН


// Подготавливает данные для создания электронных транспортных накладных.
// 
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка - массив документов-распоряжений, для которых нужно создать электронные транспотные накладные;
//  ВыделенныеСтрокиАдресов - Массив из Число - если в МассивОбъектов передано задание на перевозку, то в этом параметре можно передать номера строк маршрута,
// по которым нужно проверить возможность создания транспортных накладных.
// ТранспортнаяНакладнаяОбъект	 - ДокументОбъект.ЭлектроннаяТранспортнаяНакладная - для вызова из обработчика заполнения транспортной накладной
//  ОбъектыПоКоторымЭПДУжеСозданы - Массив из ДокументСсылка - массив документов-распоряжений, по которым накладные уже созданы;
// 
// Возвращаемое значение:
//  Структура - Подготовить данные для создания электронных транспортных накладных:
// * ДанныеПоГрузу - ТаблицаЗначений, ДеревоЗначений -
// * ДанныеПоДокументамОснованиям - ТаблицаЗначений, ДеревоЗначений -
// * ПоляГруппировкиПоНакладным - Строка -
Функция ПодготовитьДанныеДляСозданияЭлектронныхТранспортныхНакладных(МассивОбъектов, 
												ВыделенныеСтрокиАдресов = Неопределено, 
												ОбъектыПоКоторымЭПДУжеСозданы = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Истина);
	
	ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	ЗаданияНаПеревозку = ТипыОбъектов.Получить(Тип("ДокументСсылка.ЗаданиеНаПеревозку"));
	
	Если ЗаданияНаПеревозку <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗаданияНаПеревозку", ЗаданияНаПеревозку);
	Иначе
		Запрос.УстановитьПараметр("ЗаданияНаПеревозку", Новый Массив);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов",   ВыделенныеСтрокиАдресов);
	Запрос.УстановитьПараметр("ВсеСтрокиАдресов", НЕ ЗначениеЗаполнено(ВыделенныеСтрокиАдресов));
		
	Если ЗаданияНаПеревозку <> Неопределено Тогда
		// Если функция вызвана для заданий на перевозку, то получим список накладных, разберем их по типам
		УстановитьПривилегированныйРежим(Истина); 
		РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		УстановитьПривилегированныйРежим(Ложь); 
		
		НакладныеПоЗаданиямНаПеревозку = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить().ВыгрузитьКолонку("Накладная");

		Если ОбъектыПоКоторымЭПДУжеСозданы <> Неопределено Тогда 
			НакладныеПоЗаданиямНаПеревозку = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НакладныеПоЗаданиямНаПеревозку, ОбъектыПоКоторымЭПДУжеСозданы);
		КонецЕсли;
		
		Если НакладныеПоЗаданиямНаПеревозку.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(НакладныеПоЗаданиямНаПеревозку);
	Иначе
		// Если функция вызвана для накладных, то просто создадим пустую временную таблицу НакладныеПоЗаданиямНаПеревозку 
		УстановитьПривилегированныйРежим(Истина); 
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;
	
	ВыбираемыеРеквизитыОснований = Новый Массив;
	
	РеквизитыОснований = ПараметрыФормированияЭлектронныхТранспортныхНакладных().Реквизиты;
	
	Для Каждого КлючЗначение Из РеквизитыОснований Цикл
		ВыбираемыеРеквизитыОснований.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку = ПоляЗаполняемыеПоЗаданиямНаПеревозкуЭТН();
	
	ТекстыВыборкиДанныхИзОснований = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипОбъекта        = КлючЗначение.Ключ; 
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		ПолноеИмяОснования = МетаданныеОбъекта.ПолноеИмя();
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмяОснования);
		
		Если МодульЛокализации = Неопределено Тогда
			МодульЛокализации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОснования);
		КонецЕсли;
		
		ПараметрыФормированияДокументовЭПД = МодульЛокализации.ПараметрыФормированияЭлектронныхТранспортныхНакладных();
		ЕстьСпособДоставки = ЕстьСпособДоставки(ТипОбъекта);
		
		ТекстВыборкиДанныхОснования =
		"	ВЫБРАТЬ
		|		ОснованиеТранспортнойНакладной.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(СкладыКонтактнаяИнформация.Представление, """") КАК ТитулГрузоотправителяГрузоотправительАдресПредставление,
		|		ЕСТЬNULL(СкладыКонтактнаяИнформация.ЗначенияПолей, """") КАК АдресПогрузкиЗначенияПолей,
		|		&ТекстВыборкиПолейДокументаОснования
		|	ИЗ
		|		&ПолноеИмяОснования КАК ОснованиеТранспортнойНакладной
		|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
		|		ПО ОснованиеТранспортнойНакладной.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
		|		ПО &ОснованиеТранспортнойНакладнойСклад = СкладыКонтактнаяИнформация.Ссылка 
		|			И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
		|	ГДЕ
		|		ОснованиеТранспортнойНакладной.Ссылка В(&МассивОбъектов)
		|		И (НЕ &ТекстПолученияСпособаДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку)
		|			ИЛИ НЕ НакладныеПоЗаданиямНаПеревозку.Накладная ЕСТЬ NULL)";
		
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
										"&ПолноеИмяОснования",ПолноеИмяОснования);
										
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
								"&ОснованиеТранспортнойНакладнойСклад",
								"ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляСклад);
								
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
										"&ТекстВыборкиПолейДокументаОснования", 
										ТекстВыборкиПолейДокументаОснования(ВыбираемыеРеквизитыОснований, 
																			ПараметрыФормированияДокументовЭПД, 
																			Ложь, 
																			Истина, 
																			ЕстьСпособДоставки));

		Если ЕстьСпособДоставки Тогда
			ТекстПолученияСпособаДоставки = "ОснованиеТранспортнойНакладной.СпособДоставки";
		Иначе
			ТекстПолученияСпособаДоставки = "ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)";
		КонецЕсли;	
		
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, "&ТекстПолученияСпособаДоставки", ТекстПолученияСпособаДоставки);
		
		Если ПараметрыФормированияДокументовЭПД.ЕстьЗаказы Тогда
			ТекстВыборкиДанныхОснования = ТекстВыборкиДанныхОснования + "
		|		И НЕ ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляНакладнаяПоЗаказу;
		КонецЕсли;
		
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, "&МассивОбъектов", "&МассивОбъектов" + МетаданныеОбъекта.Имя); 
		ТекстыВыборкиДанныхИзОснований.Добавить(ТекстВыборкиДанныхОснования);
		
		Если ПараметрыФормированияДокументовЭПД.ЕстьЗаказы Тогда
			ТекстВыборкиДанныхОснования =
			"	ВЫБРАТЬ
			|		ДокументТовары.Ссылка КАК Ссылка,
			|		ЕСТЬNULL(СкладыКонтактнаяИнформация.Представление, """") КАК ТитулГрузоотправителяГрузоотправительАдресПредставление,
			|		ЕСТЬNULL(СкладыКонтактнаяИнформация.ЗначенияПолей, """") КАК АдресПогрузкиЗначенияПолей,
			|		&ТекстВыборкиПолейДокументаОснования
			|	ИЗ
			|		&ПолноеИмяОснования КАК ОснованиеТранспортнойНакладной
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ИмяТЧТовары КАК ДокументТовары
			|		ПО ОснованиеТранспортнойНакладной.Ссылка = ДокументТовары.Ссылка 
			|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
			|		ПО ДокументТовары.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
			|			И &ИмяПоляЗаказВТЧТоварыОсновная = НакладныеПоЗаданиямНаПеревозку.Распоряжение
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
			|		ПО &ОснованиеТранспортнойНакладнойСклад = СкладыКонтактнаяИнформация.Ссылка 
			|			И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
			|	ГДЕ
			|		ОснованиеТранспортнойНакладной.Ссылка В(&МассивОбъектов)
			|		И &ОснованиеТранспортнойНакладнойНакладнаяПоЗаказу
			|		И (НЕ &ИмяПоляЗаказВТЧТоварыСпособДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку)
			|			ИЛИ НЕ НакладныеПоЗаданиямНаПеревозку.Накладная ЕСТЬ NULL)";

			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ПолноеИмяОснования",ПолноеИмяОснования);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ОснованиеТранспортнойНакладнойСклад",
									"ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляСклад);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ОснованиеТранспортнойНакладнойНакладнаяПоЗаказу",
									"ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляНакладнаяПоЗаказу );
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ИмяПоляЗаказВТЧТоварыОсновная",
									"ДокументТовары." + ПараметрыФормированияДокументовЭПД.ИмяПоляЗаказВТЧТовары);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ИмяПоляЗаказВТЧТоварыСпособДоставки",
									"ДокументТовары." + ПараметрыФормированияДокументовЭПД.ИмяПоляЗаказВТЧТовары + ".СпособДоставки");
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ИмяТЧТовары",
									ПолноеИмяОснования + "." + ПараметрыФормированияДокументовЭПД.ИмяТЧТовары);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
										"&ТекстВыборкиПолейДокументаОснования", 
										ТекстВыборкиПолейДокументаОснования(ВыбираемыеРеквизитыОснований, 
																			ПараметрыФормированияДокументовЭПД, 
																			Истина, 
																			Истина, 
																			ЕстьСпособДоставки)); 
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, "&МассивОбъектов", "&МассивОбъектов" + МетаданныеОбъекта.Имя); 
			ТекстыВыборкиДанныхИзОснований.Добавить(ТекстВыборкиДанныхОснования);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОбъектов" + МетаданныеОбъекта.Имя, КлючЗначение.Значение);
	КонецЦикла;
	
	ТекстВыборкиДанныхПоГрузу             = ТекстВТДанныхПоГрузуИзОснований(ТипыОбъектов, Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВнутренныйЗапрос.Ссылка КАК Ссылка,
	|	ВнутренныйЗапрос.ТитулГрузоотправителяГрузоотправительАдресПредставление КАК ТитулГрузоотправителяГрузоотправительАдресПредставление,
	|	ВнутренныйЗапрос.АдресПогрузкиЗначенияПолей КАК АдресПогрузкиЗначенияПолей,
	|	&ТекстВыборкиРеквизитов1
	|ПОМЕСТИТЬ ПараметрыТТН
	|ИЗ
	|	#ТекстВыборкиДанныхИзОснований КАК ВнутренныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстВыборкиДанныхПоГрузу + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыТТН.Ссылка КАК Ссылка,
	|	ПараметрыТТН.ТитулГрузоотправителяГрузоотправительАдресПредставление КАК ТитулГрузоотправителяГрузоотправительАдресПредставление,
	|	ПараметрыТТН.АдресПогрузкиЗначенияПолей КАК АдресПогрузкиЗначенияПолей,
	|	ЕСТЬNULL(НакладныеПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)) КАК ЗаданиеНаПеревозку,
	|	&ТекстВыборкиРеквизитов2,
	|	&ТекстВыборкиРеквизитов3
	|ИЗ
	|	ПараметрыТТН КАК ПараметрыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
	|		ПО ПараметрыТТН.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
	|
	|УПОРЯДОЧИТЬ ПО 
	| &ПоляГруппировкиПоНакладным";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиРеквизитов1", 
								ТекстВыборкиРеквизитов("ВнутренныйЗапрос", ВыбираемыеРеквизитыОснований, Истина));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиРеквизитов2", 
								ТекстВыборкиРеквизитов("НакладныеПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку", 
														ПоляЗаполняемыеПоЗаданиямНаПеревозку, Истина));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиРеквизитов3", 
								ТекстВыборкиРеквизитов("ПараметрыТТН", ВыбираемыеРеквизитыОснований, Истина));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстВыборкиДанныхИзОснований", "(" + 
												СтрСоединить(ТекстыВыборкиДанныхИзОснований, 
															ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())
												+")");
	
	ПоляГруппировки = Новый Массив();
	ПоляГруппировки.Добавить("ТитулГрузоотправителяГрузоотправительАдресПредставление");
	ПоляГруппировки.Добавить("АдресДоставки");
	ПоляГруппировки.Добавить("Организация");
	ПоляГруппировки.Добавить("СсылкаТитулГрузоотправителяГрузоотправитель");
	ПоляГруппировки.Добавить("СсылкаТитулГрузоотправителяГрузополучатель");
	ПоляГруппировки.Добавить("ПеревозчикПартнер");
	ПоляГруппировки.Добавить("ЗаданиеНаПеревозку");
	
	ПоляГруппировкиПоНакладным = СтрСоединить(ПоляГруппировки, ",");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировкиПоНакладным", ПоляГруппировкиПоНакладным);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("СпособыДоставкиПоЗаданиюНаПеревозку", 
		ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками")));
			
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ДанныеПоГрузу", РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить());
	ДанныеДляЗаполнения.Вставить("ДанныеПоДокументамОснованиям", РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить());
	ДанныеДляЗаполнения.Вставить("ПоляГруппировкиПоНакладным", ПоляГруппировкиПоНакладным);

	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПоляЗаполняемыеПоЗаданиямНаПеревозкуЭТН()
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку = Новый Структура;
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("СсылкаТитулГрузоотправителяПеревозчик",			"Контрагент");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("СсылкаТитулПеревозчикаФХЖБанковскиеРеквизиты",	"БанковскийСчетПеревозчика");
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ВодительФИО",                              "ВодительФИО");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("УдостоверениеНомер",                       "УдостоверениеНомер");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("УдостоверениеСерия",                       "УдостоверениеСерия");
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ХранимыеДанныеТитулГрузоотправителяТранспортноеСредство",	"ТранспортноеСредство");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулГрузоотправителяТранспортноеСредствоРегистрационныйНомер",	"АвтомобильГосударственныйНомер");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулГрузоотправителяТранспортноеСредствоМарка",	"АвтомобильМарка");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулГрузоотправителяТранспортноеСредствоТип",	"АвтомобильТип");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулГрузоотправителяТранспортноеСредствоВместимость",	"АвтомобильВместимостьВКубическихМетрах");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулГрузоотправителяТранспортноеСредствоГрузоподъемность",	"АвтомобильГрузоподъемностьВТоннах");
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("Прицеп",                                   "Прицеп");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ГосударственныйНомерПрицепа",              "ГосударственныйНомерПрицепа");
	
	Возврат ПоляЗаполняемыеПоЗаданиямНаПеревозку;

КонецФункции

Функция ЗначенияЗаполненияЭТН()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяГрузополучатель", Справочники.Контрагенты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяГрузоотправитель", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяФХЖБанковскиеРеквизиты", Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяДоверенностьНомер", "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяДоверенностьДата", Дата(1,1,1));
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяВалюта", Справочники.Валюты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяКодВалюты", "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяНаименованиеВалюты", "");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяСтоимостьГруза", 0);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяМассаБруттоГруза", 0);
	ЗначенияЗаполнения.Вставить("СсылкаТитулГрузоотправителяПеревозчик", Неопределено);
	ЗначенияЗаполнения.Вставить("ЭтоКонтейнернаяПеревозка", Ложь);
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяПодписантКодСтатуса", "1");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяЛицоИмеющееПолномочияПереадресовки", "Грузоотправитель");
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяСпособПередачиУказанияНаПереадресовку", "Электронное уведомление перевозчика о переадресовке");

	// табличные части
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяВодители", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяПрицепы", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяГрузы", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулГрузоотправителяПереченьМаркировокГруза", Новый Массив());
	ЗначенияЗаполнения.Вставить("ДокументыОснования", Новый Массив());

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияВодителиЭТН()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ИдентификаторСтроки", "");
	ЗначенияЗаполнения.Вставить("ХранимыеДанныеВодитель", "");
	ЗначенияЗаполнения.Вставить("Фамилия", "");
	ЗначенияЗаполнения.Вставить("Имя", "");
	ЗначенияЗаполнения.Вставить("Отчество", "");
	ЗначенияЗаполнения.Вставить("ДатаВыдачиВУ", Дата(1,1,1));
	ЗначенияЗаполнения.Вставить("НомерВУ", "");
	ЗначенияЗаполнения.Вставить("СерияВУ", "");
	ЗначенияЗаполнения.Вставить("ФЛ_ИНН", "");

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияПрицепыЭТН()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ИдентификаторСтроки", "");
	ЗначенияЗаполнения.Вставить("VIN", "");
	ЗначенияЗаполнения.Вставить("Вместимость", 0);
	ЗначенияЗаполнения.Вставить("Грузоподъемность", 0);
	ЗначенияЗаполнения.Вставить("Марка", "");
	ЗначенияЗаполнения.Вставить("НомерСТС", "");
	ЗначенияЗаполнения.Вставить("РегистрационныйНомер", "");
	ЗначенияЗаполнения.Вставить("Тип", "");
	ЗначенияЗаполнения.Вставить("ТипВладения", "");

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияТитулГрузоотправителяГрузы()
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ИдентификаторСтроки", "");
	ЗначенияЗаполнения.Вставить("ХранимыеДанныеГруз", "");
	ЗначенияЗаполнения.Вставить("ОтгрузочноеНаименованиеГруза", "");
	ЗначенияЗаполнения.Вставить("ВидТары", "00");
	ЗначенияЗаполнения.Вставить("СостояниеГруза", "Надлежащее");
	ЗначенияЗаполнения.Вставить("СпособУпаковки", "Без упаковки");
	ЗначенияЗаполнения.Вставить("МассаБрутто", 0);
	ЗначенияЗаполнения.Вставить("МассаНетто", 0);
	ЗначенияЗаполнения.Вставить("КоличествоГрузовыхМест", 0);
	ЗначенияЗаполнения.Вставить("СтоимостьГруза", 0);
	ЗначенияЗаполнения.Вставить("ОбъемГруза", 0);
	ЗначенияЗаполнения.Вставить("Плотность", 0);
	ЗначенияЗаполнения.Вставить("СсылкаВалютаСтоимости", Справочники.Валюты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("КодВалютыСтоимости", "");
	ЗначенияЗаполнения.Вставить("НаименованиеВалютыСтоимости", "");
	ЗначенияЗаполнения.Вставить("Ширина", 0);
	ЗначенияЗаполнения.Вставить("Высота", 0);
	ЗначенияЗаполнения.Вставить("Длина", 0);
	ЗначенияЗаполнения.Вставить("ИмеетУчетВГИС", Ложь);
	ЗначенияЗаполнения.Вставить("ЗаполнитьТитулГрузоотправителяПереченьМаркировокГруза", "Отсутствует");

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияТитулГрузоотправителяПереченьМаркировокГруза()
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ИдентификаторСтрокиРодителя", "");
	ЗначенияЗаполнения.Вставить("МаркировкаГруза", "Отсутствует");

	Возврат ЗначенияЗаполнения
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭЗН

// Подготавливает данные для создания электронных заказ-нарядов.
// 
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка - массив документов-распоряжений, для которых нужно создать электронные закаказ-наряды;
//  ВыделенныеСтрокиАдресов - Массив из Число - если в МассивОбъектов передано задание на перевозку, то в этом параметре можно передать номера строк маршрута,
// по которым нужно проверить возможность создания транспортных накладных.
// ТранспортнаяНакладнаяОбъект	 - ДокументОбъект.ЭлектронныйЗаказНаряд - для вызова из обработчика заполнения транспортной накладной
//  ОбъектыПоКоторымЭПДУжеСозданы - Массив из ДокументСсылка - массив документов-распоряжений, по которым накладные уже созданы;
// 
// Возвращаемое значение:
//  Структура -- Подготовить данные для создания электронных закаказ-нарядов:
// * ДанныеПоГрузу - ТаблицаЗначений, ДеревоЗначений -
// * ДанныеПоДокументамОснованиям - ТаблицаЗначений, ДеревоЗначений -
// * ПоляГруппировкиПоНакладным - Строка -
Функция ПодготовитьДанныеДляСозданияЭлектронныхЗаказНарядов(МассивОбъектов, 
												ВыделенныеСтрокиАдресов = Неопределено, 
												ОбъектыПоКоторымЭПДУжеСозданы = Неопределено)
	

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Истина);
	
	ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	ЗаданияНаПеревозку = ТипыОбъектов.Получить(Тип("ДокументСсылка.ЗаданиеНаПеревозку"));
	
	Если ЗаданияНаПеревозку <> Неопределено Тогда
		Запрос.УстановитьПараметр("ЗаданияНаПеревозку", ЗаданияНаПеревозку);
	Иначе
		Запрос.УстановитьПараметр("ЗаданияНаПеревозку", Новый Массив);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов",   ВыделенныеСтрокиАдресов);
	Запрос.УстановитьПараметр("ВсеСтрокиАдресов", НЕ ЗначениеЗаполнено(ВыделенныеСтрокиАдресов));
		
	Если ЗаданияНаПеревозку <> Неопределено Тогда
		// Если функция вызвана для заданий на перевозку, то получим список накладных, разберем их по типам
		УстановитьПривилегированныйРежим(Истина); 
		РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		УстановитьПривилегированныйРежим(Ложь); 
		
		НакладныеПоЗаданиямНаПеревозку = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить().ВыгрузитьКолонку("Накладная");

		Если ОбъектыПоКоторымЭПДУжеСозданы <> Неопределено Тогда 
			НакладныеПоЗаданиямНаПеревозку = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НакладныеПоЗаданиямНаПеревозку, ОбъектыПоКоторымЭПДУжеСозданы);
		КонецЕсли;
		
		Если НакладныеПоЗаданиямНаПеревозку.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(НакладныеПоЗаданиямНаПеревозку);
	Иначе
		// Если функция вызвана для накладных, то просто создадим пустую временную таблицу НакладныеПоЗаданиямНаПеревозку 
		УстановитьПривилегированныйРежим(Истина); 
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;
	
	ВыбираемыеРеквизитыОснований = Новый Массив;
	
	РеквизитыОснований = ПараметрыФормированияЭлектронныхЗаказНарядов().Реквизиты;
	
	Для Каждого КлючЗначение Из РеквизитыОснований Цикл
		ВыбираемыеРеквизитыОснований.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку = ПоляЗаполняемыеПоЗаданиямНаПеревозкуЭЗН();
	
	ТекстыВыборкиДанныхИзОснований = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипОбъекта        = КлючЗначение.Ключ; 
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		ПолноеИмяОснования = МетаданныеОбъекта.ПолноеИмя();
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмяОснования);
		
		Если МодульЛокализации = Неопределено Тогда
			МодульЛокализации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОснования);
		КонецЕсли;
		
		ПараметрыФормированияДокументовЭПД = МодульЛокализации.ПараметрыФормированияЭлектронныхЗаказНарядов();
		ЕстьСпособДоставки = ЕстьСпособДоставки(ТипОбъекта);
		
		ТекстВыборкиДанныхОснования =
		"	ВЫБРАТЬ
		|		ОснованиеТранспортнойНакладной.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(СкладыКонтактнаяИнформация.Представление, """") КАК ТитулФрахтователяМестоПодачиТСАдресПредставление,
		|		ЕСТЬNULL(СкладыКонтактнаяИнформация.ЗначенияПолей, """") КАК АдресПогрузкиЗначенияПолей,
		|		&ТекстВыборкиПолейДокументаОснования
		|	ИЗ
		|		&ПолноеИмяОснования КАК ОснованиеТранспортнойНакладной
		|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
		|		ПО ОснованиеТранспортнойНакладной.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
		|		ПО &ОснованиеТранспортнойНакладнойСклад = СкладыКонтактнаяИнформация.Ссылка 
		|			И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
		|	ГДЕ
		|		ОснованиеТранспортнойНакладной.Ссылка В(&МассивОбъектов)
		|		И (НЕ &ТекстПолученияСпособаДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку)
		|			ИЛИ НЕ НакладныеПоЗаданиямНаПеревозку.Накладная ЕСТЬ NULL)";
		
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
										"&ПолноеИмяОснования",ПолноеИмяОснования);
										
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
								"&ОснованиеТранспортнойНакладнойСклад",
								"ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляСклад);
								
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
										"&ТекстВыборкиПолейДокументаОснования", 
										ТекстВыборкиПолейДокументаОснования(ВыбираемыеРеквизитыОснований, 
																			ПараметрыФормированияДокументовЭПД, 
																			Ложь, 
																			Истина, 
																			ЕстьСпособДоставки));

		Если ЕстьСпособДоставки Тогда
			ТекстПолученияСпособаДоставки = "ОснованиеТранспортнойНакладной.СпособДоставки";
		Иначе
			ТекстПолученияСпособаДоставки = "ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)";
		КонецЕсли;	
		
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, "&ТекстПолученияСпособаДоставки", ТекстПолученияСпособаДоставки);
		
		Если ПараметрыФормированияДокументовЭПД.ЕстьЗаказы Тогда
			ТекстВыборкиДанныхОснования = ТекстВыборкиДанныхОснования + "
		|		И НЕ ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляНакладнаяПоЗаказу;
		КонецЕсли;
		
		ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, "&МассивОбъектов", "&МассивОбъектов" + МетаданныеОбъекта.Имя); 
		ТекстыВыборкиДанныхИзОснований.Добавить(ТекстВыборкиДанныхОснования);
		
		Если ПараметрыФормированияДокументовЭПД.ЕстьЗаказы Тогда
			ТекстВыборкиДанныхОснования =
			"	ВЫБРАТЬ
			|		ДокументТовары.Ссылка КАК Ссылка,
			|		ЕСТЬNULL(СкладыКонтактнаяИнформация.Представление, """") КАК ТитулФрахтователяМестоПодачиТСАдресПредставление,
			|		ЕСТЬNULL(СкладыКонтактнаяИнформация.ЗначенияПолей, """") КАК АдресПогрузкиЗначенияПолей,
			|		&ТекстВыборкиПолейДокументаОснования
			|	ИЗ
			|		&ПолноеИмяОснования КАК ОснованиеТранспортнойНакладной
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ИмяТЧТовары КАК ДокументТовары
			|		ПО ОснованиеТранспортнойНакладной.Ссылка = ДокументТовары.Ссылка 
			|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
			|		ПО ДокументТовары.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
			|			И &ИмяПоляЗаказВТЧТоварыОсновная = НакладныеПоЗаданиямНаПеревозку.Распоряжение
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
			|		ПО &ОснованиеТранспортнойНакладнойСклад = СкладыКонтактнаяИнформация.Ссылка 
			|			И СкладыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)
			|	ГДЕ
			|		ОснованиеТранспортнойНакладной.Ссылка В(&МассивОбъектов)
			|		И &ОснованиеТранспортнойНакладнойНакладнаяПоЗаказу
			|		И (НЕ &ИмяПоляЗаказВТЧТоварыСпособДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку)
			|			ИЛИ НЕ НакладныеПоЗаданиямНаПеревозку.Накладная ЕСТЬ NULL)";

			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ПолноеИмяОснования",ПолноеИмяОснования);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ОснованиеТранспортнойНакладнойСклад",
									"ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляСклад);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ОснованиеТранспортнойНакладнойНакладнаяПоЗаказу",
									"ОснованиеТранспортнойНакладной." + ПараметрыФормированияДокументовЭПД.ИмяПоляНакладнаяПоЗаказу );
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ИмяПоляЗаказВТЧТоварыОсновная",
									"ДокументТовары." + ПараметрыФормированияДокументовЭПД.ИмяПоляЗаказВТЧТовары);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ИмяПоляЗаказВТЧТоварыСпособДоставки",
									"ДокументТовары." + ПараметрыФормированияДокументовЭПД.ИмяПоляЗаказВТЧТовары + ".СпособДоставки");
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
									"&ИмяТЧТовары",
									ПолноеИмяОснования + "." + ПараметрыФормированияДокументовЭПД.ИмяТЧТовары);
			
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, 
										"&ТекстВыборкиПолейДокументаОснования", 
										ТекстВыборкиПолейДокументаОснования(ВыбираемыеРеквизитыОснований, 
																			ПараметрыФормированияДокументовЭПД, 
																			Истина, 
																			Истина, 
																			ЕстьСпособДоставки)); 
			ТекстВыборкиДанныхОснования = СтрЗаменить(ТекстВыборкиДанныхОснования, "&МассивОбъектов", "&МассивОбъектов" + МетаданныеОбъекта.Имя); 
			ТекстыВыборкиДанныхИзОснований.Добавить(ТекстВыборкиДанныхОснования);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОбъектов" + МетаданныеОбъекта.Имя, КлючЗначение.Значение);
	КонецЦикла;
	
	ТекстВыборкиДанныхПоГрузу             = ТекстВТДанныхПоГрузуИзОснований(ТипыОбъектов, Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВнутренныйЗапрос.Ссылка КАК Ссылка,
	|	ВнутренныйЗапрос.ТитулФрахтователяМестоПодачиТСАдресПредставление КАК ТитулФрахтователяМестоПодачиТСАдресПредставление,
	|	ВнутренныйЗапрос.АдресПогрузкиЗначенияПолей КАК АдресПогрузкиЗначенияПолей,
	|	&ТекстВыборкиРеквизитов1
	|ПОМЕСТИТЬ ПараметрыТТН
	|ИЗ
	|	#ТекстВыборкиДанныхИзОснований КАК ВнутренныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ТекстВыборкиДанныхПоГрузу + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыТТН.Ссылка КАК Ссылка,
	|	ПараметрыТТН.ТитулФрахтователяМестоПодачиТСАдресПредставление КАК ТитулФрахтователяМестоПодачиТСАдресПредставление,
	|	ПараметрыТТН.АдресПогрузкиЗначенияПолей КАК АдресПогрузкиЗначенияПолей,
	|	ЕСТЬNULL(НакладныеПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку, ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)) КАК ЗаданиеНаПеревозку,
	|	&ТекстВыборкиРеквизитов2,
	|	&ТекстВыборкиРеквизитов3
	|ИЗ
	|	ПараметрыТТН КАК ПараметрыТТН
	|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
	|		ПО ПараметрыТТН.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
	|
	|УПОРЯДОЧИТЬ ПО 
	| &ПоляГруппировкиПоНакладным";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиРеквизитов1", 
								ТекстВыборкиРеквизитов("ВнутренныйЗапрос", ВыбираемыеРеквизитыОснований, Истина));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиРеквизитов2", 
								ТекстВыборкиРеквизитов("НакладныеПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку", 
														ПоляЗаполняемыеПоЗаданиямНаПеревозку, Истина));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиРеквизитов3", 
								ТекстВыборкиРеквизитов("ПараметрыТТН", ВыбираемыеРеквизитыОснований, Истина));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстВыборкиДанныхИзОснований", "(" + 
												СтрСоединить(ТекстыВыборкиДанныхИзОснований, 
															ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())
												+")");
	
	ПоляГруппировки = Новый Массив();
	ПоляГруппировки.Добавить("ТитулФрахтователяМестоПодачиТСАдресПредставление");
	ПоляГруппировки.Добавить("Организация");
	ПоляГруппировки.Добавить("СсылкаТитулФрахтователяФрахтовщик");
	ПоляГруппировки.Добавить("ПеревозчикПартнер");
	ПоляГруппировки.Добавить("ЗаданиеНаПеревозку");
	
	ПоляГруппировкиПоНакладным = СтрСоединить(ПоляГруппировки, ",");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировкиПоНакладным", ПоляГруппировкиПоНакладным);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("СпособыДоставкиПоЗаданиюНаПеревозку", 
		ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками")));
			
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДанныеПоГрузу = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить();
	ДанныеПоДокументамОснованиям = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ДанныеПоГрузу", РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить());
	ДанныеДляЗаполнения.Вставить("ДанныеПоДокументамОснованиям", РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить());
	ДанныеДляЗаполнения.Вставить("ПоляГруппировкиПоНакладным", ПоляГруппировкиПоНакладным);

	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПоляЗаполняемыеПоЗаданиямНаПеревозкуЭЗН()
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку = Новый Структура;
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("СсылкаТитулФрахтователяФрахтовщик",		"Контрагент");
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ВодительФИО",                              "ВодительФИО");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("УдостоверениеНомер",                       "УдостоверениеНомер");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("УдостоверениеСерия",                       "УдостоверениеСерия");
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ХранимыеДанныеТитулФрахтовщикаТранспортноеСредство",	"ТранспортноеСредство");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтовщикаТранспортноеСредствоРегистрационныйНомер",	"АвтомобильГосударственныйНомер");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтовщикаТранспортноеСредствоМарка",	"АвтомобильМарка");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтовщикаТранспортноеСредствоТип",	"АвтомобильТип");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтовщикаТранспортноеСредствоВместимость",	"АвтомобильВместимостьВКубическихМетрах");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтовщикаТранспортноеСредствоГрузоподъемность",	"АвтомобильГрузоподъемностьВТоннах");
	
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ХранимыеДанныеТитулФрахтователяПараметрыНеобходимогоТС",	"ТранспортноеСредство");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтователяПараметрыНеобходимогоТСМарка",	"АвтомобильМарка");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтователяПараметрыНеобходимогоТСТип",	"АвтомобильТип");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтователяПараметрыНеобходимогоТСВместимость",	"АвтомобильВместимостьВКубическихМетрах");
	ПоляЗаполняемыеПоЗаданиямНаПеревозку.Вставить("ТитулФрахтователяПараметрыНеобходимогоТСГрузоподъемность",	"АвтомобильГрузоподъемностьВТоннах");
	
	Возврат ПоляЗаполняемыеПоЗаданиямНаПеревозку;

КонецФункции

Функция ЗначенияЗаполненияЭЗН()

	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("СсылкаТитулФрахтователяФрахтователь", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулФрахтователяФрахтовщик", Справочники.Контрагенты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("СсылкаТитулФрахтователяВалютаОбщейСтоимости", Справочники.Валюты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ТитулФрахтователяСтоимостьЦенностьГрузаСНалогомВсего", 0);
	ЗначенияЗаполнения.Вставить("АдресПогрузкиЗначенияПолей", "");

	// табличные части
	ЗначенияЗаполнения.Вставить("ТитулФрахтовщикаСведенияОВодителе", Новый Массив());
	ЗначенияЗаполнения.Вставить("ТитулФрахтователяОписаниеГруза", Новый Массив());
	ЗначенияЗаполнения.Вставить("ДокументыОснования", Новый Массив());

	Возврат ЗначенияЗаполнения
	
КонецФункции

Функция ЗначенияЗаполненияТитулФрахтователяОписаниеГруза()
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("ИдентификаторСтроки", "");
	ЗначенияЗаполнения.Вставить("ХранимыеДанныеГруз", "");
	ЗначенияЗаполнения.Вставить("ОтгрузочноеНаименованиеГруза", "");
	ЗначенияЗаполнения.Вставить("ВидТары", "00");
	ЗначенияЗаполнения.Вставить("СостояниеГруза", "Надлежащее");
	ЗначенияЗаполнения.Вставить("СпособУпаковки", "Без упаковки");
	ЗначенияЗаполнения.Вставить("МассаГрузаБруттоВКилограммах", 0);
	ЗначенияЗаполнения.Вставить("МассаГрузаНеттоВКилограммах", 0);
	ЗначенияЗаполнения.Вставить("УказаниеКоличестваГрузовыхМест", 0);
	ЗначенияЗаполнения.Вставить("СтоимостьЦенностьГрузаСНалогомВсего", 0);
	ЗначенияЗаполнения.Вставить("УказаниеОбъемаГрузовыхМестВКубическихМетрах", 0);
	ЗначенияЗаполнения.Вставить("Плотность", 0);
	ЗначенияЗаполнения.Вставить("СсылкаВалютаСтоимости", Справочники.Валюты.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("КодВалютыСтоимости", "");
	ЗначенияЗаполнения.Вставить("НаименованиеВалютыСтоимости", "");
	ЗначенияЗаполнения.Вставить("ЗаполнитьТитулФрахтователяМаркировка", "Отсутствует");
	ЗначенияЗаполнения.Вставить("Ширина", 0);
	ЗначенияЗаполнения.Вставить("Высота", 0);
	ЗначенияЗаполнения.Вставить("Длина", 0);

	Возврат ЗначенияЗаполнения
	
КонецФункции

#КонецОбласти

#Область Прочее

// Создать ЭПД.
// 
// Параметры:
//  ТипЭПД		 - ОпределяемыйТип.ДокументыЭПД
//  ЗначенияЗаполнения - Структура - Значения заполнения
// 
// Возвращаемое значение:
//  ДокументСсылка.ЭлектроннаяТранспортнаяНакладная -- Создать ЭПД
Функция СоздатьЭПД(ТипЭПД, ЗначенияЗаполнения)

	Если ТипЭПД = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		
		ЭПДОбъект = Документы.ЭлектроннаяТранспортнаяНакладная.СоздатьДокумент();
		Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
		ТитулСтрока = "ТитулГрузоотправителя";
		
	ИначеЕсли ТипЭПД = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда 

		ЭПДОбъект = Документы.ЭлектронныйЗаказНаряд.СоздатьДокумент();
		Титул = Перечисления.ТипыЭлементовРегламентаЭДО.ЭЗН_Титул1;
		ТитулСтрока = "ТитулФрахтователя";

	КонецЕсли;

	ЭПДОбъект.Дата = ТекущаяДатаСеанса();
	
	ВерсияТитула = Новый Структура();
	ВерсияТитула.Вставить("ДатаВерсии",ТекущаяДатаСеанса());
	ВерсияТитула.Вставить("ИдентификаторФайла","");
	ВерсияТитула.Вставить("НомерВерсии",0);
	ВерсияТитула.Вставить("Титул", Титул);
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ДанныеЗаполнения.Вставить("ЗначениеКопирования", ЭПДОбъект.Ссылка);
		
	СтруктураРеквизитов = Новый Структура();
	ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитовПоПараметрамФормы(ДанныеЗаполнения, СтруктураРеквизитов);
	ЭПДОбъект.ДополнительныеСвойства.Вставить("СтруктураРеквизитов", СтруктураРеквизитов[ТитулСтрока][0]);
	ЭПДОбъект.ДополнительныеСвойства.Вставить("ВерсияТитула", ВерсияТитула);
	
	ЗаполнитьЗначенияСвойств(ЭПДОбъект, ЗначенияЗаполнения);

	Для Каждого ДокументОснование Из ЗначенияЗаполнения.ДокументыОснования Цикл
		ДобавитьДокументОснование(ЭПДОбъект, ДокументОснование.ДокументОснование);
	КонецЦикла;
	
	ЗначенияЗаполнения.Удалить("ДокументыОснования");
	
	ЭПДОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ЭПДОбъект.Ссылка;
	
КонецФункции

// Проверяет возможность создания ЭПД по переданным объектам
//
// Параметры:
//  ТипЭПД		 - ОпределяемыйТип.ДокументыЭПД
//  ПроверяемыеОбъекты		 - Массив из ДокументСсылка, ДокументОбъект.ЭлектроннаяТранспортнаяНакладная, ДокументОбъект.ЭлектронныйЗаказНаряд
//  ВыделенныеСтрокиАдресов	 - Массив из Число - если в МассивОбъектов передано задание на перевозку, то в этом параметре можно передать номера строк маршрута,
//  	для которых нужно проверить возможность создания транспортных накладных.
//  ВыдаватьСообщения		 - Булево 
// 
// Возвращаемое значение:
//  Структура - результаты проверки, поля:
//  * ОбъектыПоКоторымМожноИНужноСоздатьЭПД - Массив из ДокументСсылка
//  * ОбъектыПоКоторымСоздаватьЭПДНельзя - Массив из ДокументСсылка
//  * ОбъектыПоКоторымЭПДУжеСозданы - Массив из ДокументСсылка
//  * ЗаданияНаПеревозкуДляСозданияЭПД - Массив из ДокументСсылка.ЗаданиеНаПеревозку - если в МассивОбъектов переданы задания не перевозку, то в этом
//		параметре возвращаются задания, по которым можно создавать транспортные накладные.
//  * ЗаданияНаПеревозкуПоКоторымЭПДУжеСозданы - Массив из ДокументСсылка
//  * УжеСозданныеЭПД - Массив из ДокументСсылка
//
Функция ПроверитьДокументыОснования(ТипЭПД, ПроверяемыеОбъекты, ВыделенныеСтрокиАдресов = Неопределено, ВыдаватьСообщения = Истина)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОбъектыПоКоторымМожноИНужноСоздатьЭПД", Новый Массив);
	Результат.Вставить("ОбъектыПоКоторымСоздаватьЭПДНельзя", Новый Массив);
	Результат.Вставить("ОбъектыПоКоторымЭПДУжеСозданы", Новый Массив);
	Результат.Вставить("ЗаданияНаПеревозкуДляСозданияЭПД", Новый Массив);
	Результат.Вставить("ЗаданияНаПеревозкуПоКоторымЭПДУжеСозданы", Новый Массив);
	Результат.Вставить("УжеСозданныеЭПД", Новый Массив);
	
	ПараметрыЗаменыЗапроса = Новый Структура();
	
	Если ТипЭПД = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
		ПараметрыЗаменыЗапроса.Вставить("ТекстТипЭПД", "Документ.ЭлектроннаяТранспортнаяНакладная");
		ПараметрыЗаменыЗапроса.Вставить("ТекстАдресаДоставки", "NULL");
	ИначеЕсли ТипЭПД = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда 
		ПараметрыЗаменыЗапроса.Вставить("ТекстТипЭПД", "Документ.ЭлектронныйЗаказНаряд");
		ПараметрыЗаменыЗапроса.Вставить("ТекстАдресаДоставки", "NULL");
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыеОбъекты) = Тип("Массив") Тогда
		МассивОбъектов       = ПроверяемыеОбъекты;
		ПроверяемаяНакладная = Неопределено;
	ИначеЕсли ТипЗнч(ПроверяемыеОбъекты) = ТипЭпд Тогда
		МассивОбъектов       = ПроверяемыеОбъекты.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
		ПроверяемаяНакладная = ?(ПроверяемыеОбъекты.ЭтоНовый(), Неопределено, ПроверяемыеОбъекты);
	Иначе
		ТекстИсключения = НСтр("ru = 'Неподдерживаемый тип параметра ПроверяемыеОбъекты'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивОбъектов) Тогда
		Возврат Результат;
	КонецЕсли;

	НакладныеПоЗаданиямНаПеревозку = Неопределено;
	ТипыОбъектов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивОбъектов);
	
	ЭПД = ТипыОбъектов.Получить(ТипЭПД);
	
	Если ЭПД <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭПДДокументыОснования.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	&ТипЭПД КАК ЭПДДокументыОснования
		|ГДЕ
		|	ЭПДДокументыОснования.Ссылка В (&ЭПД)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
									"&ТипЭПД",
									ПараметрыЗаменыЗапроса.ТекстТипЭПД + ".ДокументыОснования");
		
		Запрос.УстановитьПараметр("ЭПД", ЭПД);
		
		ТипыДокументовОснований = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
		
		ТипыОбъектов.Удалить(ТипЭПД);
		
		Для Каждого ТипОснования Из ТипыДокументовОснований Цикл
			
			Если ТипыОбъектов.Получить(ТипОснования.Ключ) <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыОбъектов.Получить(ТипОснования.Ключ), ТипОснования.Значение);
			Иначе
				ТипыОбъектов.Вставить(ТипОснования.Ключ, ТипОснования.Значение);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаданияНаПеревозку = ТипыОбъектов.Получить(Тип("ДокументСсылка.ЗаданиеНаПеревозку"));
	
	Если ЗаданияНаПеревозку <> Неопределено Тогда
		ТекстЗапроса = Документы.ЗаданиеНаПеревозку.ТекстЗапросаПолученияСпискаНакладныхИзЗаданийНаПеревозку(Истина)
		+ ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ЭПДДокументыОснования.Ссылка КАК ЭПД,
		|	ЭПДДокументыОснования.ДокументОснование КАК ЗаданиеНаПеревозку
		|ПОМЕСТИТЬ ЭПДПоЗаданиямНаПеревозку
		|ИЗ
		|	&ТипЭПД КАК ЭПДДокументыОснования
		|ГДЕ
		|	ЭПДДокументыОснования.ДокументОснование В(&ЗаданияНаПеревозку)
		|	И (НЕ ЭПДДокументыОснования.Ссылка.ПометкаУдаления)
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭПД"
		+ ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ЭПДПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	&АдресДоставки КАК АдресДоставки,
		|	ЭПДДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ЭПДДокументыОснования
		|ИЗ
		|	ЭПДПоЗаданиямНаПеревозку КАК ЭПДПоЗаданиямНаПеревозку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТипЭПД КАК ЭПДДокументыОснования
		|		ПО ЭПДПоЗаданиямНаПеревозку.ЭПД = ЭПДДокументыОснования.Ссылка
		|			И ЭПДПоЗаданиямНаПеревозку.ЗаданиеНаПеревозку <> ЭПДДокументыОснования.ДокументОснование
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаданиеНаПеревозку"
		+ ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ЗаданияНаПеревозку.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Накладные.Накладная ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНакладные,
		|	СУММА(ВЫБОР
		|			КОГДА ЭПДДокументыОснования.ДокументОснование ЕСТЬ NULL 
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоНеоформленныхТранспортныхНакладных,
		|	ЗаданияНаПеревозку.Проведен КАК Проведен,
		|	ЗаданияНаПеревозку.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ЗаданияНаПеревозку
		|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК Накладные
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЭПДДокументыОснования КАК ЭПДДокументыОснования
		|			ПО Накладные.ЗаданиеНаПеревозку = ЭПДДокументыОснования.ЗаданиеНаПеревозку
		|				И &СвязьПоАдресуДоставки
		|				И (ЭПДДокументыОснования.ДокументОснование = Накладные.Накладная)
		|		ПО ЗаданияНаПеревозку.Ссылка = Накладные.ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданияНаПеревозку.Ссылка В(&ЗаданияНаПеревозку)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаданияНаПеревозку.Ссылка,
		|	ЗаданияНаПеревозку.Проведен,
		|	ЗаданияНаПеревозку.ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА Накладные.Накладная ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТипЭПД",
									ПараметрыЗаменыЗапроса.ТекстТипЭПД + ".ДокументыОснования");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&АдресДоставки",
									ПараметрыЗаменыЗапроса.ТекстАдресаДоставки);
		
		Если ПараметрыЗаменыЗапроса.ТекстАдресаДоставки = "NULL" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
										"&СвязьПоАдресуДоставки",
										"Истина");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
										"&СвязьПоАдресуДоставки",
										"Накладные.АдресДоставки = ЭПДДокументыОснования.АдресДоставки");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ЗаданияНаПеревозку",        ЗаданияНаПеревозку);
		
		Запрос.УстановитьПараметр("ВсеСтрокиАдресов", ВыделенныеСтрокиАдресов = Неопределено);
		Если ВыделенныеСтрокиАдресов = Неопределено Тогда
			Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов",   Новый Массив);
		Иначе
			Запрос.УстановитьПараметр("ВыделенныеСтрокиАдресов",   ВыделенныеСтрокиАдресов);
		КонецЕсли;	
		УстановитьПривилегированныйРежим(Истина);
		РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		УстановитьПривилегированныйРежим(Ложь);
		
		ШаблонОшибкиНеПроведен         = НСтр("ru = 'Документ ""%Документ%"" не проведен. Невозможно оформить транспортные накладные.'");
		ШаблонОшибкиПомеченНаУдаление  = НСтр("ru = 'Документ ""%Документ%"" помечен на удаление. Невозможно оформить транспортные накладные.'");
		
		Если ЗначениеЗаполнено(ВыделенныеСтрокиАдресов) Тогда 
			ШаблонОшибкиНетНакладных = НСтр("ru = 'По распоряжениям, относящимся к выделенным адресам, из документа ""%Документ%"" не оформленно ни одной накладной. Оформление транспортных накладных в таком случае невозможно.'");	
		Иначе		
			ШаблонОшибкиНетНакладных = НСтр("ru = 'По распоряжениям из документа ""%Документ%"" не оформленно ни одной накладной. Оформление транспортных накладных в таком случае невозможно.'");	
		КонецЕсли;
		
		Выборка = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПометкаУдаления Тогда
				Если ВыдаватьСообщения Тогда
					ТекстСообщения = СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Не Выборка.Проведен Тогда
				Если ВыдаватьСообщения Тогда
					ТекстСообщения = СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Не Выборка.ЕстьНакладные Тогда
				Если ВыдаватьСообщения Тогда
					ТекстСообщения = СтрЗаменить(ШаблонОшибкиНетНакладных, "%Документ%", Выборка.Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Выборка.КоличествоНеоформленныхТранспортныхНакладных = 0 Тогда
				Результат.ЗаданияНаПеревозкуПоКоторымЭПДУжеСозданы.Добавить(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Результат.ЗаданияНаПеревозкуДляСозданияЭПД.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
		Если ЗаданияНаПеревозку <> Неопределено Тогда
			НакладныеПоЗаданиямНаПеревозку = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 4].Выгрузить(); // ТаблицаЗначений
		Иначе
			НакладныеПоЗаданиямНаПеревозку = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 2].Выгрузить(); // ТаблицаЗначений
		КонецЕсли;
		ТипыДокументовОснований = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(НакладныеПоЗаданиямНаПеревозку.ВыгрузитьКолонку("Накладная"));
		
		Для Каждого ТипОснования Из ТипыДокументовОснований Цикл
			Если ТипыОбъектов.Получить(ТипОснования.Ключ) <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыОбъектов.Получить(ТипОснования.Ключ), ТипОснования.Значение);
			Иначе
				ТипыОбъектов.Вставить(ТипОснования.Ключ, ТипОснования.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ТипыОбъектов.Удалить(Тип("ДокументСсылка.ЗаданиеНаПеревозку"));
		
	КонецЕсли;
	
	ПроверкаСоставаТранспортнойНакладной = ПроверяемаяНакладная <> Неопределено;
	
	Если ПроверкаСоставаТранспортнойНакладной Тогда
		ШаблонСообщенияНакладнаяСпособДоставки = НСтр("ru = 'Документ ""%Документ%"" со способом доставки ""%СпособДоставки%"" может быть добавлен только в транспортную накладную по заданию на перевозку.'");
		ШаблонСообщенияЗаказСпособДоставки     = НСтр("ru = 'В заказе, по которому создан документ ""%Документ%"" указан способ доставки ""%СпособДоставки%"". Документ может быть добавлен только в транспортную накладную по заданию на перевозку.'");
	Иначе	
		ШаблонСообщенияНакладнаяСпособДоставки = НСтр("ru = 'По документу ""%Документ%"" не сформированы транспортные накладные, при этом указан способ доставки ""%СпособДоставки%"". Транспортные накладные нужно сформировать из задания на перевозку.'");
		ШаблонСообщенияЗаказСпособДоставки     = НСтр("ru = 'По документу ""%Документ%"" не сформированы транспортные накладные, при этом в заказе, по которому создан этот документ указан способ доставки ""%СпособДоставки%"". Транспортные накладные нужно сформировать из задания на перевозку.'");
	КонецЕсли;
	
	ШаблонСообщенияНетТоваров              = НСтр("ru = 'В документе ""%Документ%"" нет номенклатуры с типом ""Товар"" или ""Многооборотная тара"". Создание и печать транспортных накладных по этому документу не требуется.'");
	ШаблонСообщенияОснованиеНеПроведен     = НСтр("ru = 'Документ ""%Документ%"" не проведен. Создание и печать транспортных накладных по этому документу не возможна.'");
	
	МассивОбъектов.Очистить();
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипОбъекта        = КлючЗначение.Ключ; 
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СсылкиНаДокументы = КлючЗначение.Значение;

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектов, СсылкиНаДокументы, Истина);
		
		ПолноеИмяОснования = МетаданныеОбъекта.ПолноеИмя();
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмяОснования);
		
		Если МодульЛокализации = Неопределено Тогда
			МодульЛокализации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОснования);
		КонецЕсли;
		
		Если ТипЭПД = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная") Тогда
			ПараметрыФормированияЭПД = ОбменСГИСЭПДПереопределяемый.ПараметрыФормированияЭлектронныхТранспортныхНакладных();
		ИначеЕсли ТипЭПД = Тип("ДокументСсылка.ЭлектронныйЗаказНаряд") Тогда 
			ПараметрыФормированияЭПД = ОбменСГИСЭПДПереопределяемый.ПараметрыФормированияЭлектронныхЗаказНарядов();
		КонецЕсли;
		
		Если ПараметрыФормированияЭПД.ЕстьДополнительнаяПроверкаВозможностиСозданияНакладной Тогда
			ТекстВыборкиРеквизитов = ТекстВыборкиРеквизитов("ДанныеДокументовОснований", ПараметрыФормированияЭПД.ИменаРеквизитовДляДополнительнойПроверки, Истина); 
		Иначе
			ТекстВыборкиРеквизитов = "";
		КонецЕсли;
		
		ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ДанныеДокументовОснований.Ссылка КАК Ссылка,
		|		ДанныеДокументовОснований.Проведен КАК Проведен,
		|		ЛОЖЬ КАК ПоЗаказу,
		| "+ ?(ПустаяСтрока(ТекстВыборкиРеквизитов), "", ТекстВыборкиРеквизитов + ",") + "
		|		&ТекстПолученияСпособаДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку) КАК ПоЗаданиюНаПеревозку, 
		|		&ТекстПолученияСпособаДоставки КАК СпособДоставки 
		|	ПОМЕСТИТЬ ДанныеДокументовОснований
		|	ИЗ
		|		" + ПолноеИмяОснования + " КАК ДанныеДокументовОснований
		|	ГДЕ
		|		ДанныеДокументовОснований.Ссылка В(&МассивОбъектов)";
		
		
		Если ЕстьСпособДоставки(ТипОбъекта) Тогда
			ТекстПолученияСпособаДоставки = "ДанныеДокументовОснований.СпособДоставки";
		Иначе
			ТекстПолученияСпособаДоставки = "ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)";
		КонецЕсли;	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолученияСпособаДоставки", ТекстПолученияСпособаДоставки);
		
		Если ПараметрыФормированияЭПД.ЕстьЗаказы Тогда
			ТекстЗапроса = ТекстЗапроса + "
		|		И НЕ ДанныеДокументовОснований." + ПараметрыФормированияЭПД.ИмяПоляНакладнаяПоЗаказу;
		КонецЕсли;
		
		Если ПараметрыФормированияЭПД.ЕстьЗаказы Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
			"	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ДокументТовары.Ссылка КАК Ссылка,
			|		ДанныеДокументовОснований.Проведен КАК Проведен,
			|		" + ПараметрыФормированияЭПД.ИмяПоляНакладнаяПоЗаказу + " КАК ПоЗаказу,
			| "+ ?(ПустаяСтрока(ТекстВыборкиРеквизитов), "", ТекстВыборкиРеквизитов + ",") + "
			|		ДокументТовары." +  ПараметрыФормированияЭПД.ИмяПоляЗаказВТЧТовары + ".СпособДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку) КАК ПоЗаданиюНаПеревозку, 
			|		ДокументТовары." +  ПараметрыФормированияЭПД.ИмяПоляЗаказВТЧТовары + ".СпособДоставки КАК СпособДоставки 
			|	ИЗ
			|		" + ПолноеИмяОснования + " КАК ДанныеДокументовОснований
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ПолноеИмяОснования + "." + ПараметрыФормированияЭПД.ИмяТЧТовары + " КАК ДокументТовары
			|		ПО ДанныеДокументовОснований.Ссылка = ДокументТовары.Ссылка 
			|	ГДЕ
			|		ДанныеДокументовОснований.Ссылка В(&МассивОбъектов)
			|		И ДанныеДокументовОснований." + ПараметрыФормированияЭПД.ИмяПоляНакладнаяПоЗаказу;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДокументТовары.Ссылка КАК Ссылка
		|	ПОМЕСТИТЬ ДокументыОснованияСТоварами
		|	ИЗ
		|	" +	ПолноеИмяОснования + "." + ПараметрыФормированияЭПД.ИмяТЧТовары + " КАК ДокументТовары
		|	ГДЕ
		|		ДокументТовары.Ссылка В(&МассивОбъектов)
		|		И ДокументТовары.Номенклатура.ТипНоменклатуры В(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ЭПДДокументыОснования.Ссылка КАК ЭПД,
		|		ЭПДДокументыОснования.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		&ТипЭПД КАК ЭПДДокументыОснования
		|	ГДЕ
		|		ЭПДДокументыОснования.ДокументОснование В(&МассивОбъектов)";

		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ"; 
		Если Не ПроверкаСоставаТранспортнойНакладной Тогда
			ТекстЗапроса = ТекстЗапроса + "
		|	НЕ ЭПДДокументыОснования.ДокументОснование ЕСТЬ NULL КАК ЕстьЭПД,
		|	ЭПДДокументыОснования.Ссылка КАК ЭПД,";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
		|	ИСТИНА КАК ЕстьЭПД,";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	ДанныеДокументовОснований.Ссылка КАК Ссылка,
		|	ДанныеДокументовОснований.ПоЗаказу КАК ПоЗаказу,
		|	ДанныеДокументовОснований.Проведен КАК Проведен,
		| "+ ?(ПустаяСтрока(ТекстВыборкиРеквизитов), "", ТекстВыборкиРеквизитов + ",") + "
		|	ДанныеДокументовОснований.ПоЗаданиюНаПеревозку КАК ПоЗаданиюНаПеревозку,
		|	ДанныеДокументовОснований.СпособДоставки КАК СпособДоставки,
		|	ДокументыОснованияСТоварами.Ссылка ЕСТЬ NULL КАК НетТоваров
		|ИЗ
		|	ДанныеДокументовОснований КАК ДанныеДокументовОснований
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОснованияСТоварами КАК ДокументыОснованияСТоварами
		|		ПО ДанныеДокументовОснований.Ссылка = ДокументыОснованияСТоварами.Ссылка";
		
		Если Не ПроверкаСоставаТранспортнойНакладной Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ТипЭПД КАК ЭПДДокументыОснования
			|		ПО ДанныеДокументовОснований.Ссылка = ЭПДДокументыОснования.ДокументОснование
			|			И (НЕ ЭПДДокументыОснования.Ссылка.ПометкаУдаления)
			|ГДЕ
			|	ЭПДДокументыОснования.ДокументОснование ЕСТЬ NULL
			|	ИЛИ НЕ ДанныеДокументовОснований.Проведен
			|	ИЛИ ДокументыОснованияСТоварами.Ссылка ЕСТЬ NULL";
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТипЭПД",
									ПараметрыЗаменыЗапроса.ТекстТипЭПД + ".ДокументыОснования");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("МассивОбъектов", СсылкиНаДокументы);
		Запрос.УстановитьПараметр("СпособыДоставкиПоЗаданиюНаПеревозку", 
			ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(
				ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками")));
	
		УстановитьПривилегированныйРежим(Истина);
		РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		УстановитьПривилегированныйРежим(Ложь);

		УжеСозданныеЭПД = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выгрузить();
		Выборка = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МожноСоздатьТранспортнуюНакладную = Истина;
			Если ПроверкаСоставаТранспортнойНакладной Тогда
				НайденнаяСтрока = ПроверяемаяНакладная.ДокументыОснования.Найти(Выборка.Ссылка,"ДокументОснование");
				ПутьКПолю       = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования",
																					НайденнаяСтрока.НомерСтроки,
																					"ДокументОснование");
			Иначе
				ПутьКПолю = "";
			КонецЕсли;
		
			Если Выборка.ПоЗаданиюНаПеревозку
				И (Не ПроверкаСоставаТранспортнойНакладной
						И Не Выборка.ЕстьЭПД
						И НакладныеПоЗаданиямНаПеревозку = Неопределено
					Или ПроверкаСоставаТранспортнойНакладной 
						И Не ЗначениеЗаполнено(ПроверяемаяНакладная.ЗаданиеНаПеревозку)) Тогда
				Если ВыдаватьСообщения Тогда		
					Если Выборка.ПоЗаказу Тогда
						ТекстСообщения = ШаблонСообщенияЗаказСпособДоставки;
					Иначе
						ТекстСообщения = ШаблонСообщенияНакладнаяСпособДоставки;
					КонецЕсли;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособДоставки%", Выборка.СпособДоставки);
					
					Если ПустаяСтрока(ПутьКПолю) Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Иначе
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПроверяемаяНакладная, ПутьКПолю);
					КонецЕсли;
				КонецЕсли;
				МожноСоздатьТранспортнуюНакладную = Ложь;
			КонецЕсли;
			
			Если ПараметрыФормированияЭПД.ЕстьДополнительнаяПроверкаВозможностиСозданияНакладной Тогда
				Если Не МодульЛокализации.МожноСоздаватьТранспортнуюНакладную(Выборка.Ссылка, Выборка, ВыдаватьСообщения, ПутьКПолю) Тогда
					МожноСоздатьТранспортнуюНакладную = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.НетТоваров Тогда
				
				Если ВыдаватьСообщения Тогда		
					ТекстСообщения = ШаблонСообщенияНетТоваров;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
					Если ПустаяСтрока(ПутьКПолю) Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Иначе
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ПроверяемаяНакладная,ПутьКПолю);
					КонецЕсли;
				КонецЕсли;
				
				МожноСоздатьТранспортнуюНакладную = Ложь;
				
			КонецЕсли;
			
			Если Не Выборка.Проведен Тогда
			
				Если ВыдаватьСообщения Тогда		
					ТекстСообщения = ШаблонСообщенияОснованиеНеПроведен;
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Ссылка);
					Если ПустаяСтрока(ПутьКПолю) Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Иначе
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ПроверяемаяНакладная,ПутьКПолю);
					КонецЕсли;
				КонецЕсли;
				МожноСоздатьТранспортнуюНакладную = Ложь;
				
			КонецЕсли;
			
			Если Не Выборка.ЕстьЭПД Тогда
				Если МожноСоздатьТранспортнуюНакладную Тогда
					Результат.ОбъектыПоКоторымМожноИНужноСоздатьЭПД.Добавить(Выборка.Ссылка);
				Иначе
					Результат.ОбъектыПоКоторымСоздаватьЭПДНельзя.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Результат.ОбъектыПоКоторымСоздаватьЭПДНельзя.Количество() > 0
		И Результат.ОбъектыПоКоторымМожноИНужноСоздатьЭПД.Количество() = 0
		И НакладныеПоЗаданиямНаПеревозку <> Неопределено Тогда
		
		НакладныеПоЗаданиямНаПеревозку.Индексы.Добавить("Накладная");
		
		Для Каждого СтрМас Из Результат.ОбъектыПоКоторымСоздаватьЭПДНельзя Цикл
			НайденныеСтроки = НакладныеПоЗаданиямНаПеревозку.НайтиСтроки(Новый Структура("Накладная", СтрМас));
			
			Для Каждого СтрМас Из НайденныеСтроки Цикл
				ИндексЗадания = Результат.ЗаданияНаПеревозкуДляСозданияЭПД.Найти(СтрМас.ЗаданиеНаПеревозку);
				Если ИндексЗадания <> Неопределено Тогда
					Результат.ЗаданияНаПеревозкуДляСозданияЭПД.Удалить(ИндексЗадания);
					Если ВыдаватьСообщения Тогда
						ТекстСообщения = НСтр("ru = 'Из-за проблем в оформлении документов-оснований транспортные накладные по заданию на перевозку ""%ЗаданиеНаПеревозку%"" не формировались.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаданиеНаПеревозку%", СтрМас.ЗаданиеНаПеревозку);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрМас.ЗаданиеНаПеревозку);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.ОбъектыПоКоторымЭПДУжеСозданы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
						(ОбщегоНазначенияКлиентСервер.РазностьМассивов(
											МассивОбъектов,
											Результат.ОбъектыПоКоторымСоздаватьЭПДНельзя)),
						Результат.ОбъектыПоКоторымМожноИНужноСоздатьЭПД);
	
						
	Если УжеСозданныеЭПД <> Неопределено Тогда
		УжеСозданныеЭПД.Свернуть("ЭПД");
		Результат.УжеСозданныеЭПД = УжеСозданныеЭПД.ВыгрузитьКолонку("ЭПД");
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ТекстВыборкиПолейДокументаОснования(Реквизиты, ПараметрыФормированияЭПД, ПолучатьРеквизитыИзЗаказа, ПолучатьРеквизитыЗадания, ЕстьСпособДоставки)
	
	ТекстыЗапросаПолейДокументаОснования = Новый Массив;
	
	Для Каждого ИмяРеквизита Из Реквизиты Цикл
		
		Если (ИмяРеквизита = "АдресДоставки"
			Или ИмяРеквизита = "АдресДоставкиЗначенияПолей"
			Или ИмяРеквизита = "ПеревозчикПартнер")
			И ЕстьСпособДоставки Тогда
			
			Если ПараметрыФормированияЭПД.ЕстьЗаказы Тогда
				ТекстПоля =
				"ВЫБОР КОГДА ОснованиеТранспортнойНакладной." + ПараметрыФормированияЭПД.ИмяПоляНакладнаяПоЗаказу + " ТОГДА
				|	" + ?(Не ПолучатьРеквизитыИзЗаказа,"""""",
				"ВЫБОР
				|		КОГДА ДокументТовары." + ПараметрыФормированияЭПД.ИмяПоляЗаказВТЧТовары + ".СпособДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку) ТОГДА
				|			" + ?(ПолучатьРеквизитыЗадания,ЗаменитьСинонимТаблицы("НакладныеПоЗаданиямНаПеревозку", ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита]), """""") + "
				|		ИНАЧЕ
				|			" + ЗаменитьСинонимТаблицы("ДокументТовары." + ПараметрыФормированияЭПД.ИмяПоляЗаказВТЧТовары, ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита]) + "
				|		КОНЕЦ") + "
				|	ИНАЧЕ
				|		ВЫБОР
				|			КОГДА ОснованиеТранспортнойНакладной.СпособДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку) ТОГДА
				|			" + ?(ПолучатьРеквизитыЗадания,ЗаменитьСинонимТаблицы("НакладныеПоЗаданиямНаПеревозку", ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита]), """""") + "
				|		ИНАЧЕ
				|				" + ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита] + "
				|		КОНЕЦ 
				|КОНЕЦ КАК " + ИмяРеквизита;
			Иначе
				ТекстПоля = 
				"ВЫБОР
				|	КОГДА ОснованиеТранспортнойНакладной.СпособДоставки В (&СпособыДоставкиПоЗаданиюНаПеревозку) ТОГДА
				|		" + ?(ПолучатьРеквизитыЗадания,ЗаменитьСинонимТаблицы("НакладныеПоЗаданиямНаПеревозку", ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита]), """""") + "
				|	ИНАЧЕ
				|		" + ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита] + "
				|	КОНЕЦ КАК " + ИмяРеквизита;
			КонецЕсли;
			
		Иначе
			ТекстПоля = ПараметрыФормированияЭПД.Реквизиты[ИмяРеквизита] + " КАК " + ИмяРеквизита;
		КонецЕсли;
		
		ТекстыЗапросаПолейДокументаОснования.Добавить(ТекстПоля);
		
	КонецЦикла;
	
	Возврат СтрСоединить(ТекстыЗапросаПолейДокументаОснования, "," + Символы.ПС); 

КонецФункции

Функция ТекстВыборкиРеквизитов(СинонимТаблицы, Реквизиты, ДобавлятьСиноним)
	
	ТекстыОписанияРеквизитов = Новый Массив;
	
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		Для Каждого СтрМас Из Реквизиты Цикл
			
			ТекстРеквизита = ЗаменитьСинонимТаблицы(СинонимТаблицы, СтрМас) + ?(ДобавлятьСиноним, " КАК " + СтрМас, "");
			ТекстыОписанияРеквизитов.Добавить(ТекстРеквизита);
			
		КонецЦикла;
	Иначе
		Для Каждого КлючЗначение Из Реквизиты Цикл
			
			ТекстРеквизита = ?(ЗначениеЗаполнено(КлючЗначение.Значение), 
									ЗаменитьСинонимТаблицы(СинонимТаблицы, КлючЗначение.Значение),
									ЗаменитьСинонимТаблицы(СинонимТаблицы, КлючЗначение.Ключ)) 
							+ ?(ДобавлятьСиноним, " КАК " + КлючЗначение.Ключ, "");
			ТекстыОписанияРеквизитов.Добавить(ТекстРеквизита);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстыОписанияРеквизитов, "," + Символы.ПС);
	
КонецФункции

Функция ТекстВТДанныхПоГрузуИзОснований(ТипыОбъектов, Запрос)
	
	ТекстыВыборкиМассы		= Новый Массив;
	
	ИспользоватьРасширенныеВозможностиЗаказа = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	Для Каждого КлючЗначение Из ТипыОбъектов Цикл
		
		ТипОбъекта			= КлючЗначение.Ключ; 
		МетаданныеОбъекта	= Метаданные.НайтиПоТипу(ТипОбъекта);
		
		ПолноеИмяОснования	= МетаданныеОбъекта.ПолноеИмя();
		МодульЛокализации	= ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмяОснования);
		
		Если МодульЛокализации = Неопределено Тогда
			МодульЛокализации = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОснования);
		КонецЕсли;
		
		ПараметрыФормированияЭПД = МодульЛокализации.ПараметрыФормированияЭлектронныхТранспортныхНакладных();

		ТекстСтоимостьГруза = "0";
		Если Не ПустаяСтрока(ПараметрыФормированияЭПД.ИмяПоляСуммы) Тогда
			ТекстСтоимостьГруза = "СУММА(ДокументТовары." + ПараметрыФормированияЭПД.ИмяПоляСуммы + ")";
		КонецЕсли;
		
		ТекстВыборкиДанныхПоГрузу = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
		|			ТОГДА ЕСТЬNULL(ДокументТовары.Номенклатура.ВидНоменклатуры.НаименованиеДляПечати, """")
		|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
		|	КОНЕЦ КАК ОтгрузочноеНаименованиеГруза,
		|	&ТекстЗапросаЕдиницыИзмеренияУпаковки КАК ЕдиницаИзмеренияУпаковка,
		|	СУММА(ВЫБОР
		|			КОГДА &ЗаполненаЕдиницаИзмеренияВеса
		|				ТОГДА ВЫБОР
		|						КОГДА ДокументТовары.Упаковка.Вес ЕСТЬ NULL
		|							ТОГДА ДокументТовары.Количество
		|						ИНАЧЕ ДокументТовары.КоличествоУпаковок
		|					КОНЕЦ * &ТекстЗапросаВесУпаковки
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК МассаБрутто,
		|	СУММА(ВЫБОР
		|			КОГДА &ЗаполненаЕдиницаИзмеренияОбъема
		|				ТОГДА ВЫБОР
		|						КОГДА ДокументТовары.Упаковка.Объем ЕСТЬ NULL
		|							ТОГДА ДокументТовары.Количество
		|						ИНАЧЕ ДокументТовары.КоличествоУпаковок
		|					КОНЕЦ * &ТекстЗапросаОбъемУпаковки
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОбъемУпаковки,
		|	СУММА(ДокументТовары.Количество * &ТекстЗапросаОбъемНоменклатуры) КАК Объем,
		|	СУММА(ДокументТовары.Количество * &ТекстЗапросаВесНоменклатуры) КАК МассаНетто,
		|	&СтоимостьГруза КАК СтоимостьГруза,
		|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	ДокументТовары.Ссылка КАК Ссылка 
		|ИЗ
		|	" + ПолноеИмяОснования + "." + ПараметрыФормированияЭПД.ИмяТЧТовары + " КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Ссылка В(&МассивОбъектов)
		|	//&УсловиеИспользованияЗаказов
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
		|			ТОГДА ЕСТЬNULL(ДокументТовары.Номенклатура.ВидНоменклатуры.НаименованиеДляПечати, """")
		|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
		|	КОНЕЦ,
		|	&ТекстЗапросаЕдиницыИзмеренияУпаковки";
		
		ТекстУсловиеИспользованияЗаказов = ?(ПараметрыФормированияЭПД.ЕстьЗаказы,
											"И НЕ ДокументТовары.Ссылка." + ПараметрыФормированияЭПД.ИмяПоляНакладнаяПоЗаказу,
											"");
		
		ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
										"&МассивОбъектов",
										"&МассивОбъектов" + МетаданныеОбъекта.Имя);
		ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
										"//&УсловиеИспользованияЗаказов",
										ТекстУсловиеИспользованияЗаказов);
		
		ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
										"&СтоимостьГруза",
										ТекстСтоимостьГруза);
		
		ТекстыВыборкиМассы.Добавить(ТекстВыборкиДанныхПоГрузу);
		
		Если ПараметрыФормированияЭПД.ЕстьЗаказы Тогда
			ТекстВыборкиДанныхПоГрузу = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
			|			ТОГДА ЕСТЬNULL(ДокументТовары.Номенклатура.ВидНоменклатуры.НаименованиеДляПечати, """")
			|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
			|	КОНЕЦ КАК ОтгрузочноеНаименованиеГруза,
			|	&ТекстЗапросаЕдиницыИзмеренияУпаковки КАК ЕдиницаИзмеренияУпаковка,
			|	СУММА(ВЫБОР
			|			КОГДА &ЗаполненаЕдиницаИзмеренияВеса
			|				ТОГДА ВЫБОР
			|						КОГДА ДокументТовары.Упаковка.Вес ЕСТЬ NULL
			|							ТОГДА ДокументТовары.Количество
			|						ИНАЧЕ ДокументТовары.КоличествоУпаковок
			|					КОНЕЦ * &ТекстЗапросаВесУпаковки
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК МассаБрутто,
			|	СУММА(ВЫБОР
			|			КОГДА &ЗаполненаЕдиницаИзмеренияОбъема
			|				ТОГДА ВЫБОР
			|						КОГДА ДокументТовары.Упаковка.Объем ЕСТЬ NULL
			|							ТОГДА ДокументТовары.Количество
			|						ИНАЧЕ ДокументТовары.КоличествоУпаковок
			|					КОНЕЦ * &ТекстЗапросаОбъемУпаковки
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОбъемУпаковки,
			|	СУММА(ДокументТовары.Количество * &ТекстЗапросаОбъемНоменклатуры) КАК Объем,
			|	СУММА(ДокументТовары.Количество * &ТекстЗапросаВесНоменклатуры) КАК МассаНетто,
			|	&СтоимостьГруза КАК СтоимостьГруза,
			|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	ДокументТовары.Ссылка КАК Ссылка
			|ИЗ
			|	" + ПолноеИмяОснования + "." + ПараметрыФормированияЭПД.ИмяТЧТовары + " КАК ДокументТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ НакладныеПоЗаданиямНаПеревозку КАК НакладныеПоЗаданиямНаПеревозку
			|		ПО ДокументТовары.Ссылка = НакладныеПоЗаданиямНаПеревозку.Накладная
			|			//&УсловиеСоединенияНакладных
			|			И ДокументТовары." + ПараметрыФормированияЭПД.ИмяПоляЗаказВТЧТовары + " = НакладныеПоЗаданиямНаПеревозку.Распоряжение
			|ГДЕ
			|	ДокументТовары.Ссылка В(&МассивОбъектов)
			|	И ДокументТовары.Ссылка." + ПараметрыФормированияЭПД.ИмяПоляНакладнаяПоЗаказу + "
			|	И (НЕ ДокументТовары." + ПараметрыФормированияЭПД.ИмяПоляЗаказВТЧТовары + ".СпособДоставки В(&СпособыДоставкиПоЗаданиюНаПеревозку)
			|		ИЛИ НЕ НакладныеПоЗаданиямНаПеревозку.Накладная ЕСТЬ NULL
			|		//&УсловиеИспользованияЗаказов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументТовары.Ссылка,
			|	ВЫБОР
			|		КОГДА ДокументТовары.Номенклатура.ВидНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
			|			ТОГДА ЕСТЬNULL(ДокументТовары.Номенклатура.ВидНоменклатуры.НаименованиеДляПечати, """")
			|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
			|	КОНЕЦ,
			|	&ТекстЗапросаЕдиницыИзмеренияУпаковки";
			
			ТекстУсловияИспользоватьРасширенныеВозможностиЗаказа = ?(ПараметрыФормированияЭПД.ТекстУсловияИспользоватьРасширенныеВозможностиЗаказа = "",
												"ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказа",
												"ИЛИ " + ПараметрыФормированияЭПД.ТекстУсловияИспользоватьРасширенныеВозможностиЗаказа);
			
			ТекстУсловиеИспользованияЗаказов = ?(ПараметрыФормированияЭПД.ИспользоватьРасширенныеВозможностиЗаказа,
												ТекстУсловияИспользоватьРасширенныеВозможностиЗаказа,
												"");
			
			ТекстУсловиеСоединенияНакладных = ?(НРег(ПолноеИмяОснования) = "документ.реализациятоваровуслуг",
												"И ДокументТовары.Склад = НакладныеПоЗаданиямНаПеревозку.Склад",
												"");
											
			ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
											"&МассивОбъектов",
											"&МассивОбъектов" + МетаданныеОбъекта.Имя);
			ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
											"//&УсловиеИспользованияЗаказов",
											ТекстУсловиеИспользованияЗаказов);
			ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
											"//&УсловиеСоединенияНакладных",
											ТекстУсловиеСоединенияНакладных);
			
			ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
											"&СтоимостьГруза",
											ТекстСтоимостьГруза);
			
			ТекстыВыборкиМассы.Добавить(ТекстВыборкиДанныхПоГрузу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОбъектов" + МетаданныеОбъекта.Имя, КлючЗначение.Значение);
		
	КонецЦикла;
	
	ТекстВыборкиДанныхПоГрузу = СтрСоединить(ТекстыВыборкиМассы, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
									"&ТекстЗапросаВесУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
										"ДокументТовары.Упаковка",
										"ДокументТовары.Номенклатура",
										Ложь));
	ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
									"&ТекстЗапросаОбъемУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
										"ДокументТовары.Упаковка",
										"ДокументТовары.Номенклатура",
										Ложь));
	ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
									"&ТекстЗапросаВесНоменклатуры",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
										"ДокументТовары.Номенклатура.ЕдиницаИзмерения",
										"ДокументТовары.Номенклатура",
										Ложь));
	ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу,
									"&ТекстЗапросаОбъемНоменклатуры",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
										"ДокументТовары.Номенклатура.ЕдиницаИзмерения",
										"ДокументТовары.Номенклатура",
										Ложь));
	
	ТекстВыборкиДанныхПоГрузу = СтрЗаменить(ТекстВыборкиДанныхПоГрузу, 
									"&ТекстЗапросаЕдиницыИзмеренияУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
									"Ссылка",
									"ДокументТовары.Упаковка",
									"ДокументТовары.Номенклатура"));
	
	Запрос.УстановитьПараметр("ЗаполненаЕдиницаИзмеренияВеса", ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()));
	Запрос.УстановитьПараметр("ЗаполненаЕдиницаИзмеренияОбъема", ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияОбъема.Получить()));
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказа", ИспользоватьРасширенныеВозможностиЗаказа);
	Запрос.УстановитьПараметр("НаименованиеДляПечатиВидовНоменклатуры", 
										?(ПустаяСтрока(Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить()),
														"Товары народного потребления",
														Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить()));
	
	Возврат ТекстВыборкиДанныхПоГрузу;
	
КонецФункции

Функция ЕстьСпособДоставки(ТипРаспоряжения)
	Возврат Метаданные.ОпределяемыеТипы.РаспоряжениеНаДоставку.Тип.СодержитТип(ТипРаспоряжения);
КонецФункции

Функция ЗаменитьСинонимТаблицы(СинонимТаблицы, ТекстПоля)
	
	ЧастиСтроки = СтрРазделить(ТекстПоля, ".");
	Если ЧастиСтроки.Количество() = 2 Тогда
		ЧастиСтроки[0] = СинонимТаблицы;
		Возврат СтрСоединить(ЧастиСтроки, ".");
	ИначеЕсли ЧастиСтроки.Количество() = 1 Тогда
		Возврат СинонимТаблицы + "." + ТекстПоля;
	Иначе
		Возврат ТекстПоля;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#КонецОбласти
