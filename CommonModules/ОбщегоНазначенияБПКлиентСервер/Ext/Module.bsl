
// Функция проверяет, что две переданные даты находятся между разными элементами 
// упорядоченного массива.
//
// Параметры:
//	Дата1 - Дата - Первая проверяемая дата.
//  Дата2 - Дата - Вторая проверяемая дата.
//	ИнтервалДат - Массив - Упорядоченный массив дат, каждый элемент которого определяет
//							новую границу интервала.
//
// Возвращаемое значение:
//	Булево - Истина, если даты принадлежат разным интервалам.
//
Функция ДатыПринадлежатРазнымИнтервалам(Знач Дата1, Знач Дата2, ИнтервалДат) Экспорт

	Результат = Ложь;

	Индекс1 = -1;
	
	Индекс2 = -1;
	
	Дата1 = НачалоДня(Дата1);
	Дата2 = НачалоДня(Дата2);
	
	ВГраницаИнтервалаДат = ИнтервалДат.ВГраница();
	Для ТекИндекс = 0 По ВГраницаИнтервалаДат Цикл
		ДатаИнтервала = НачалоДня(ИнтервалДат[ТекИндекс]);
	
		Если ДатаИнтервала <= Дата1 Тогда
			Индекс1 = ТекИндекс;
		КонецЕсли;
		
		Если ДатаИнтервала <= Дата2 Тогда
			Индекс2 = ТекИндекс;
		КонецЕсли;
		
	КонецЦикла;

	Если Индекс1 <> Индекс2 Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаСтрока
// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаЧисло.
// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
//
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//  ЗнакЧисла				- ДопустимыйЗнак, знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов - для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаДата.
// Служебная функция, предназначенная для получения описания типов даты.
//
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов даты.
//
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции // ПолучитьОписаниеТиповДаты()

// Устарела. Следует использовать ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения
// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список.
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность.
//  Параметр1     - Строка - имя поля.
//  Параметр2     - Строка - номер строки.
//  Параметр3     - Строка - имя списка.
//  Параметр4     - Строка - текст сообщения о некорректности заполнения.
//
// Возвращаемое значение:
//   Строка - Текст сообщения.
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

КонецФункции // ПолучитьТекстСообщения()


// Дополняет URL параметрами (элемент query rfc 3986)
//
// Параметры:
//  URL          - Строка - URL без элементов query и fragment (без символов ? и #)
//  ПараметрыURL - Массив - имена и значения параметров в виде "key=value".
//                          Они будут включены в URL с разделителями &
// 
// Возвращаемое значение:
//  Строка - дополненный URL
//
Функция ДополнитьURLПараметрами(URL, ПараметрыURL) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыURL) Тогда
		Возврат URL;
	КонецЕсли;
	
	ПараметрыURLСтрокой = СтрСоединить(ПараметрыURL, "&");
	Возврат СтрШаблон("%1?%2", URL, ПараметрыURLСтрокой);
	
КонецФункции

// Параметры UTM (Urchin Tracking Module) для материалов на its.1c.ru
// 
// Возвращаемое значение:
//  Массив из Строка - каждый элемент - имя и значение параметра, разделенные символом "="
//
Функция ИТС_ПараметрыUTM() Экспорт
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("utm_medium=prog");
	ПараметрыURL.Добавить("utm_source=bp30");
	Возврат ПараметрыURL;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает наименование организации по сокращенному.
//
// Параметры:
//   СокращенноеНаименование - Строка - Сокращенное наименование организации.
//
// Возвращаемое значение: 
//   Наименование - Строка - Наименование организации, полученное из сокращенного.
//
Функция НаименованиеПоСокращенномуНаименованию(СокращенноеНаименование) Экспорт
	
	СтруктураНаименования = РазложитьСтрокуНаименования(СокращенноеНаименование);
	
	Возврат СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;
	
КонецФункции

// Возвращает разницу между двумя датами.
// Аналогично функции языка запросов игнорирует младшие части дат,
// которые меньше, чем параметр Периодичность.
//
// Например:
//	РазностьДат('2019-12-31', '2020-01-01', Перечисления.Периодичность.Год) = 1
//	РазностьДат('2019-08-24', '2020-05-17', Перечисления.Периодичность.Месяц) = 9
//
// Параметры:
//   ДатаНачала - Дата - начальная дата периода
//   ДатаОкончания - Дата - конечная дата периода
//   Периодичность - ПеречислениеСсылка.Периодичность - вариант расчета разности дат.
//
// Возвращаемое значение:
//   Число - количество между двумя датами.
//
Функция РазностьДат(ДатаНачала, ДатаОкончания, Периодичность) Экспорт
	
	Разность = 0;
	
	День = 24 * 60 * 60; // Количество секунд в дне
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		Разность = Год(ДатаОкончания) - Год(ДатаНачала);
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		Разность =
			?(Месяц(ДатаОкончания) > 6, 2, 1) - ?(Месяц(ДатаНачала) > 6, 2, 1) + 2 * (Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		Разность = Цел(Месяц(НачалоКвартала(ДатаОкончания)) / 3) - Цел(Месяц(НачалоКвартала(ДатаНачала)) / 3)
			+ 4 * (Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		Разность = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 12 * (Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		Разность = Цел((ДатаОкончания - ДатаНачала) / (10 * День));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		Разность =
			Цел((НачалоНедели(ДатаОкончания) - НачалоНедели(ДатаНачала)) / (7 * День));
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Разность = (ДатаОкончания - ДатаНачала) / День;
		
	КонецЕсли;
	
	Возврат Разность;
	
КонецФункции

// Возвращает синоним из имени реквизита объекта. 
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита объекта, строки-идентификаторы, разделенные точками 
//                          (например: ОсновноеСредство.ГруппаОС, Номенклатура.Артикул). 
// 
// Возвращаемое значение:
//  Строка - синоним из имени реквизита объекта.
//
Функция СинонимИзИмени(ИмяРеквизита) Экспорт
	
	ДопустимыеАббревиатуры = Новый Массив;
	ДопустимыеАббревиатуры.Добавить("ИНН");
	ДопустимыеАббревиатуры.Добавить("КПП");
	ДопустимыеАббревиатуры.Добавить("НДС");
	ДопустимыеАббревиатуры.Добавить("ОС");
	ДопустимыеАббревиатуры.Добавить("НМА");
	
	СловаСинонима = Новый Массив;
	
	УровниИмени = СтрРазделить(ИмяРеквизита, ".", Истина);
	Для каждого УровеньИмени Из УровниИмени Цикл
		
		ЧастьСинонима = СтрокаСПробеламиИзСтиляТРегБезПробелов(УровеньИмени, ДопустимыеАббревиатуры); 
		
		СловаСинонима.Добавить(КапитализироватьСтроку(ЧастьСинонима));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СловаСинонима, ".");
	
КонецФункции

// Возвращает строку из слов, разделенных пробелами из строки в стиле ТРег без пробелов 
// (когда несколько слов пишутся слитно без пробелов, при этом каждое слово пишется с прописной буквы). 
//
// Параметры:
//  СтрокаВСтилеТРегБезПробелов   - Строка - строка в стиле ТРег без пробелов.
//  МассивАббревиатур             - Массив - массив из строк - аббревиатур, которые не преобразовываются.
//  ДекапитализироватьПервоеСлово - Булево - преобразовать первую букву первого слова строки в нижний 
//                                           регистр, по-умолчанию - Ложь.
// 
// Возвращаемое значение:
//  Строка - строка из слов, разделенных пробелами.
//
Функция СтрокаСПробеламиИзСтиляТРегБезПробелов(СтрокаВСтилеТРегБезПробелов, МассивАббревиатур, ДекапитализироватьПервоеСлово = Ложь)
	
	ПервоеСлово = "";
	ОстатокСлова = СтрокаВСтилеТРегБезПробелов;
	Результат = Новый Массив;
	ДекапитализироватьСлово = ДекапитализироватьПервоеСлово;
	
	Пока ЗначениеЗаполнено(ОстатокСлова) Цикл
		ПервоеСлово = ПолучитьПервоеСловоИзСтрокиВСтилеТРегБезПробелов(ОстатокСлова, МассивАббревиатур, ДекапитализироватьСлово);
		Если СтрДлина(ПервоеСлово) <= СтрДлина(ОстатокСлова) Тогда
			ОстатокСлова = Сред(ОстатокСлова, СтрДлина(ПервоеСлово) + 1);
		Иначе
			ОстатокСлова = "";
		КонецЕсли;
		Результат.Добавить(ПервоеСлово);
		ДекапитализироватьСлово = Истина;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

// Возвращает количество полных (целых) лет между двумя датами.
//
// Например:
//	КоличествоЦелыхЛет('2019-12-31', '2020-01-01') = 0
//
// Параметры:
//   ДатаНачала - Дата - начальная дата периода
//   ДатаОкончания - Дата - конечная дата периода
//
// Возвращаемое значение:
//	Число - количество полных (целых) лет.
//
Функция КоличествоЦелыхЛет(ДатаНачала, ДатаОкончания) Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаНачала)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания)
		ИЛИ ДатаОкончания <= ДатаНачала Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = Год(ДатаОкончания) - Год(ДатаНачала);
	
	Месяц1 = Месяц(ДатаНачала);
	Месяц2 = Месяц(ДатаОкончания);
	
	Если Месяц1 > Месяц2 Тогда
		Результат = Результат - 1;
	ИначеЕсли Месяц1 = Месяц2 
		И День(ДатаНачала) > День(ДатаОкончания) Тогда
		Результат = Результат - 1;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает количество полных (целых) месяцев между двумя датами.
//
// Например:
//	КоличествоЦелыхМесяцев('2019-08-24', '2020-05-17') = 8
//
// Параметры:
//   ДатаНачала - Дата - начальная дата периода
//   ДатаОкончания - Дата - конечная дата периода
//
// Возвращаемое значение:
//	Число - количество полных (целых) месяцев.
//
Функция КоличествоЦелыхМесяцев(ДатаНачала, ДатаОкончания) Экспорт

	Если НЕ ЗначениеЗаполнено(ДатаНачала)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания)
		ИЛИ ДатаОкончания <= ДатаНачала Тогда
		Возврат 0;
	КонецЕсли;

	Результат = (Год(ДатаОкончания) - Год(ДатаНачала)) * 12 + (Месяц(ДатаОкончания) - Месяц(ДатаНачала));

	Если День(ДатаНачала) > День(ДатаОкончания) Тогда
		Результат = Результат - 1;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает номер квартала, которому принадлежит переданная дата.
//
// Параметры:
//   Дата - Дата - дата, для которой необходимо вычислить номер квартала
//
// Возвращаемое значение:
//   Число - номер квартала
//
Функция НомерКвартала(Дата) Экспорт
	
	Возврат Месяц(КонецКвартала(Дата)) / 3;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

// Устанавливает значение поля организации.
//
// Параметры:
//	ПолеОрганизация - РеквизитФормы - Реквизит формы, в котором нужно установить значение.
//	Организация - СправочникСсылка.Организации - Организация, для которой нужно установить реквизит.
//	ВключатьОбособленныеПодразделения - Булево - Признак, что нужно включать обособленные подразделения.
//
Процедура УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Организация, ВключатьОбособленныеПодразделения) Экспорт
	
	Ключ = СтрЗаменить(Строка(ВключатьОбособленныеПодразделения) + Организация.УникальныйИдентификатор(), "-", "");
	ПолеОрганизация = Ключ;
	
КонецПроцедуры

// Устанавливает значения выбранных реквизитов при отказе от выбора значения (выборе пустого значения).
//
// Параметры:
//	ПолеОрганизация - РеквизитФормы - Реквизит формы, в котором нужно установить значение.
//	Организация - СправочникСсылка.Организации - Организация, для которой нужно установить реквизит.
//	ВключатьОбособленныеПодразделения - Булево - Признак, что нужно включать обособленные подразделения.
//
Процедура ОбработкаОтменыВыбораОрганизации(ПолеОрганизация, Организация, ВключатьОбособленныеПодразделения) Экспорт
	
	Если ЗначениеЗаполнено(ПолеОрганизация) Тогда 
		Возврат;
	КонецЕсли;
	
	Организация                       = Неопределено;
	ВключатьОбособленныеПодразделения = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СТРОКОВЫЕ ФУНКЦИИ

// Капитализирует строку - приводит к принятому в полных предложениях написанию:
// первый символ в верхнем регистре, остальные - без изменения.
// Например:
//  "это тест"      -> "Это тест"
//  "тест Тьюринга" -> "Тест Тьюринга"
//  "/test.txt"     -> "/test.txt"
//
// Параметры:
//  ИсходнаяСтрока - Строка - строка, текст полного предложения.
// 
// Возвращаемое значение:
//  Строка - капитализированная строка.
//
Функция КапитализироватьСтроку(ИсходнаяСтрока) Экспорт
	Возврат ВРег(Лев(ИсходнаяСтрока, 1)) + Сред(ИсходнаяСтрока, 2);
КонецФункции

// Декапитализирует строку - изменяет регистр первого символа с верхнего на нижний.
// первый символ в нижнем регистре, остальные - без изменения.
// Например:
//  "Это тест"      -> "это тест"
//  "тест Тьюринга" -> "тест Тьюринга"
//  "/test.txt"     -> "/test.txt"
//
// Параметры:
//  ИсходнаяСтрока - Строка - строка, текст полного предложения.
// 
// Возвращаемое значение:
//  Строка - декапитализированная строка.
//
Функция ДекапитализироватьСтроку(ИсходнаяСтрока) Экспорт
	Возврат НРег(Лев(ИсходнаяСтрока, 1)) + Сред(ИсходнаяСтрока, 2);
КонецФункции

// Функция возвращает строку, которая содержит только цифры из исходной строки.
//
// Параметры:
//	ИсходнаяСтрока - Строка - Исходная строка.
//
// Возвращаемое значение:
//	Строка - Строка, содержащая только цифры.
//
Функция ОставитьВСтрокеТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	СтрокаРезультат = "";
	
	Для а = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, а, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			СтрокаРезультат = СтрокаРезультат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция возвращает истину, если в переданной строке содержатся одни нули.
//
// Параметры:
//	Строка - Строка - анализируемая строка.
//
// Возвращаемое значение:
//	Булево - Если, если в переданной строке есть только 0, в противном случае - ложь.
//
Функция ТолькоНулиВСтроке(Строка) Экспорт
	
	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
	Возврат ПустаяСтрока(ЗначащиеСимволы);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру, содержащую наименование юридического лица, его организационно-правовую форму 
// полную и сокращенную, а так же признак ВыводитьКавычки
//
// Параметры:
//   Наименование - Строка - исходная строка Наименования
// 
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Наименование - Строка - наименование без организационно-правовой формы.
//      * ОрганизационноПравоваяФорма - Строка - организационно-правовая форма юридического лица.
//      * ОрганизационноПравоваяФормаСокращенно - Строка - сокращенная организационно-правовая форма юридического лица.
//      * ВыводитьКавычки - Булево - признак, что следует выводить ковычки.
//
Функция РазложитьСтрокуНаименования(Знач Наименование) Экспорт
	
	Результат = Новый Структура(
		"Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно,ВыводитьКавычки");
	
	Наименование    = СокрЛП(Наименование);
	ВыводитьКавычки = Истина;
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ПАО'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Публичное акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ПАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='АО'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='АО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ИП'");
		ВыводитьКавычки = Ложь;
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Публичное акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Публичное акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ПАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='АО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма             = НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно   = НСтр("ru='ИП'");
		ВыводитьКавычки = Ложь;
	Иначе
		ОрганизационноПравоваяФорма             = "";
		ОрганизационноПравоваяФормаСокращенно   = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки    = СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование    = Наименование;
			
			ПозицияКавычки      = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование        = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки          = СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если Не КоличествоКавычек % 2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование                          = СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма           = ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно = ОрганизационноПравоваяФормаСокращенно;
	Результат.ВыводитьКавычки                       = ВыводитьКавычки;
	
	Возврат Результат;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования         = СтрДлина(Наименование);
	ДлинаОрганизационнойФормы = СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование = СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат    = Истина;
	КонецЕсли;
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование = СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат    = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПервоеСловоИзСтрокиВСтилеТРегБезПробелов(СтрокаВСтилеТРегБезПробелов, МассивАббревиатур, ДекапитализироватьСтроку)
	
	Если СтрДлина(СтрокаВСтилеТРегБезПробелов) <= 1 Тогда
		Если ДекапитализироватьСтроку Тогда
			Возврат ДекапитализироватьСтроку(СтрокаВСтилеТРегБезПробелов);
		Иначе	
			Возврат СтрокаВСтилеТРегБезПробелов;	
		КонецЕсли;
	КонецЕсли;
	
	ПервыйСимвол = Лев(СтрокаВСтилеТРегБезПробелов,1);
	
	ПродолжениеСтроки = Сред(СтрокаВСтилеТРегБезПробелов, 2);
	ПродолжениеСтрокиНижРег = НРег(ПродолжениеСтроки);
	
	Если ПродолжениеСтроки = ПродолжениеСтрокиНижРег Тогда
		Если ДекапитализироватьСтроку Тогда
			Возврат ДекапитализироватьСтроку(СтрокаВСтилеТРегБезПробелов);
		Иначе	
			Возврат СтрокаВСтилеТРегБезПробелов;	
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПродолжениеСтроки,1) <> НРег(Лев(ПродолжениеСтроки,1)) Тогда
		АббревиатураНайдена = Ложь;
		Для каждого Аббревиатура Из МассивАббревиатур Цикл
			Если СтрНачинаетсяС(СтрокаВСтилеТРегБезПробелов, Аббревиатура) Тогда
				ПервоеСлово = Аббревиатура;
				АббревиатураНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//Аббревиатура не декапитализируется
		Если АббревиатураНайдена Тогда
			Возврат ПервоеСлово;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Сч = 1 По СтрДлина(ПродолжениеСтроки) Цикл
		
		Если Сред(ПродолжениеСтроки, Сч, 1) = Сред(ПродолжениеСтрокиНижРег, Сч, 1) Тогда
			Продолжить;	
		КонецЕсли;
		
		ПервоеСлово = Лев(СтрокаВСтилеТРегБезПробелов, Сч);
		Если ДекапитализироватьСтроку Тогда
			ПервоеСлово = ДекапитализироватьСтроку(ПервоеСлово);
		КонецЕсли;
	    Прервать;
		
	КонецЦикла;
	
	Возврат ПервоеСлово;

КонецФункции

#КонецОбласти
