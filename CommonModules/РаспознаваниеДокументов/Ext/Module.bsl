#Область ПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Возвращает номер версии библиотеки.
//
// Возвращаемое значение:
//  Строка - номер версии библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.4.7.5";
	
КонецФункции

// Возвращает номер версии протокола обмена с сервисом распознавания.
//
// Возвращаемое значение:
//  Строка - номер версии протокола обмена .
//
Функция ВерсияПротоколаОбмена() Экспорт
	
	Возврат "1.2";
	
КонецФункции

Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат "БиблиотекаРаспознаванияДокументов";
	
КонецФункции

#КонецОбласти

#Область СервисРаспознавания

// Функциональная опция ИспользоватьРаспознаваниеДокументов включена,
// информационная база зарегистрирована в сервисе распознавания документов,
// активация учетной записи выполнена
//
// Возвращаемое значение:
//  Булево
//
Функция ИспользованиеДоступно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	
	Если Не АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не АктивацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьАвторизациюПоЛогинуПаролю(Логин, Пароль) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		ВызватьИсключение НСтр("ru = 'Распознавание документов отключено. Обратитесь к Администратору.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	Если АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	Область = ОбластьАвторизации();
	Область.ТипАутентификации = "ПоЛогинуПаролю";
	
	РезультатАвторизации = РаспознаваниеДокументовКоннекторСлужебный.ВыполнитьАвторизациюПоЛогинуПаролю(
		Логин,
		Пароль,
		Область,
		ПараметрыАвторизации.ИдентификаторИБ);
	
	ПараметрыАвторизации.ИдентификаторИБ = РезультатАвторизации.ИдентификаторИБ;
	ПараметрыАвторизации.ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	ПараметрыАвторизации.Состояние = РезультатАвторизации.Состояние;
	ПараметрыАвторизации.ТипАутентификации = "ПоЛогинуПаролю";
	ПараметрыАвторизации.Логин = Логин;
	
	ЗаписатьПараметрыАвторизации(ПараметрыАвторизации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьАдресЭлектроннойПочты();
	
КонецПроцедуры

Процедура ВыполнитьАвторизациюПоТикетуИТС() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		ВызватьИсключение НСтр("ru = 'Распознавание документов отключено. Обратитесь к Администратору.'");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	Если АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат;
	КонецЕсли;

	ВладелецТикета = "DocumentRecognition";
	РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	
	Если ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось получить тикет авторизации с Портала 1С:ИТС
			           |по причине:
			           |%1'"),
			РезультатПолученияТикета.СообщениеОбОшибке
		);
		Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, , ,
				ТекстСообщения
			);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПолученияТикета.КодОшибки = "НеверныйЛогинИлиПароль"
	 Или РезультатПолученияТикета.КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось получить тикет авторизации с Портала 1С:ИТС
			           |по причине:
			           |%1
			           |
			           |Перейдите в настройки интернет-поддержки и измените данные авторизации.'"),
			РезультатПолученияТикета.СообщениеОбОшибке
		);
		
	КонецЕсли;

	Область = ОбластьАвторизации();
	Область.ТипАутентификации = "ПоТикетуИТС";

	Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
		
		РезультатАвторизации = РаспознаваниеДокументовКоннекторСлужебный.ВыполнитьАвторизациюПоТикетуИТС(
			РезультатПолученияТикета.Тикет,
			Область,
			ПараметрыАвторизации.ИдентификаторИБ);

	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Логин  = ДанныеАутентификации.Логин;
			Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатАвторизации = РаспознаваниеДокументовКоннекторСлужебный.ВыполнитьАвторизациюПоЛогинуПаролюИТС(
			Логин,
			Пароль,
			Область,
			ПараметрыАвторизации.ИдентификаторИБ);
		
	КонецЕсли;
	
	
	ПараметрыАвторизации.ИдентификаторИБ = РезультатАвторизации.ИдентификаторИБ;
	ПараметрыАвторизации.ТокенДоступа = РезультатАвторизации.ТокенДоступа;
	ПараметрыАвторизации.Состояние = РезультатАвторизации.Состояние;
	ПараметрыАвторизации.ТипАутентификации = "ПоТикетуИТС";
	ПараметрыАвторизации.Логин = "";

	ЗаписатьПараметрыАвторизации(ПараметрыАвторизации);

	УстановитьПривилегированныйРежим(Ложь);

	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьАдресЭлектроннойПочты();
	
КонецПроцедуры

Процедура УдалитьДанныеАвторизации(УдалитьИдентификаторИБ = Ложь) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Удалять данные авторизации доступно только Администратору.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	
	ПараметрыАвторизации.ТокенДоступа = "";
	ПараметрыАвторизации.ТипАутентификации = "НеВыполнена";
	ПараметрыАвторизации.Состояние = "Ожидает";
	Если УдалитьИдентификаторИБ Тогда
		ПараметрыАвторизации.ИдентификаторИБ = "";
	КонецЕсли;
	ПараметрыАвторизации.Логин = "";
	
	ЗаписатьПараметрыАвторизации(ПараметрыАвторизации);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ПодключеноКСервисуРаспознавания(ПытатьсяПодключитьсяПриПроверке = Истина, ВыбрасыватьИсключение = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыАвторизацииПереопределяемые = Новый Структура("Логин, Пароль");
	РаспознаваниеДокументовПереопределяемый.ПриВыполненииАвторизации(ПараметрыАвторизацииПереопределяемые);
	Если ЗначениеЗаполнено(ПараметрыАвторизацииПереопределяемые.Логин) Тогда
		Попытка
			ВыполнитьАвторизациюПоЛогинуПаролю(
				ПараметрыАвторизацииПереопределяемые.Логин,
				ПараметрыАвторизацииПереопределяемые.Пароль);
		Исключение
			Если ВыбрасыватьИсключение Тогда
				ВызватьИсключение;
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Попытка автоматической авторизации по переопределенным логину и паролю не удалось
					           |по причине:
					           |%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение, , ,
					ТекстОшибки);
				
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
		
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПытатьсяПодключитьсяПриПроверке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Попытка
			ВыполнитьАвторизациюПоТикетуИТС();
		Исключение
			Если ВыбрасыватьИсключение Тогда
				ВызватьИсключение;
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Попытка автоматической авторизации по тикету с Портала 1С:ИТС не удалось
					           |по причине:
					           |%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение, , ,
					ТекстОшибки);
				
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция АккаунтАвторизован() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	Возврат АвторизацияВыполнена(ПараметрыАвторизации);
	
КонецФункции

Функция АккаунтАктивирован(ВыбрасыватьИсключение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	
	Если Не АвторизацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если АктивацияВыполнена(ПараметрыАвторизации) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Результат = РаспознаваниеДокументовКоннекторСлужебный.СостояниеАктивацииУчетнойЗаписи();
		Если Результат.Состояние = "Активирован" Тогда
			ПараметрыАвторизации.Состояние = Результат.Состояние;
			ЗаписатьПараметрыАвторизации(ПараметрыАвторизации);
		КонецЕсли;
	Исключение
		Если ВыбрасыватьИсключение Тогда
			ВызватьИсключение;
		Иначе
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Попытка проверки активации аккаунта Портала 1С:ИТС не удалось
				           |по причине:
				           |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, , ,
				ТекстОшибки);
			
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Возврат Результат.Состояние = "Активирован";
	
КонецФункции

// Возвращает данные из безопасного хранилища.
// Для использования требуется привилегированный режим.
//
// Возвращаемое значение:
//  - Неопределено - если данные отсутствуют - Неопределенно.
//  - Произвольный - если указан один ключ, то возвращается его значение, иначе структура.
//  - Структура: 
//        * Логин - Строка - строка с логином текущей авторизации.
//        * ИдентификаторИБ - Строка- числовой идентификатор текущей ИБ.
//        * ТокенДоступа - Строка - токен доступа.
//        * Состояние - Строка - текущее состояние авторизации.
//        * ТипАутентификации - Строка - описание типа текущей авторизации НеВыполнена, ПоТикетуИТС, ПоЛогинуПаролю.
//
Функция ТекущиеПараметрыАвторизации() Экспорт
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы(),
		"ИдентификаторИБ, ТокенДоступа, ТипАутентификации, Логин, Состояние");
	
	Если ДанныеВБезопасномХранилище.ИдентификаторИБ <> Неопределено
		И ДанныеВБезопасномХранилище.ТокенДоступа <> Неопределено
		И ДанныеВБезопасномХранилище.ТипАутентификации <> Неопределено Тогда
		
		Если ДанныеВБезопасномХранилище.Состояние = Неопределено Тогда
			ДанныеВБезопасномХранилище.Состояние = "Активирован";
		КонецЕсли;
		
		Возврат ДанныеВБезопасномХранилище;
	КонецЕсли;
	
	Возврат НовыеПараметрыАвторизации();
	
КонецФункции

Функция ЗагрузитьРаспознанныйДокументПоИдентификаторуРезультата(ИдентификаторРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Загружено", Ложь);
	Результат.Вставить("КраткоеПредставлениеОшибки", "");
	
	РезультатыОбработки = Новый Структура;
	РезультатыОбработки.Вставить("ИменаФайлов", "");
	РезультатыОбработки.Вставить("ФайлыДокумента", Новый Массив);
	РезультатыОбработки.Вставить("ИдентификаторРезультата", ИдентификаторРезультата);
	РезультатыОбработки.Вставить("Источник", Перечисления.ИсточникиПолученияФайлов.ВнешняяСистема);
	
	Выборка = Новый Структура;
	Выборка.Вставить("ИдентификаторЗадания", "");
	
	ДатаСоздания = ТекущаяУниверсальнаяДата();
	
	ДанныеСервиса = РаспознаваниеДокументовКоннекторСлужебный.ПолучитьРезультатПоИдентификатору(ИдентификаторРезультата);
	Если ДанныеСервиса = Неопределено Тогда
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Не удалось получить данные с сервиса распознавания.'");
		Возврат Результат;
	КонецЕсли;
	
	ДесериализованноеЗначение = ДанныеСервиса.ДесериализованноеЗначение.Получить("result");
	Если ТипЗнч(ДесериализованноеЗначение) <> Тип("Соответствие") Тогда
		Результат.КраткоеПредставлениеОшибки = СтрШаблон(
			НСтр("ru = 'При попытке получить данные распознанного документа возникла ошибка:
			           |%1'"),
		ДанныеСервиса.Ответ);
		Возврат Результат;
	КонецЕсли;
	
	БылиОшибки = Ложь;
	
	НачатьТранзакцию();
	Попытка
		ДокументСсылка = Документы.РаспознанныйДокумент.СоздатьРаспознанныйДокумент(
			ДанныеСервиса,
			Выборка,
			РезультатыОбработки,
			ДатаСоздания
		);
		Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда 
			ВызватьИсключение
				НСтр("ru = 'При попытке создать распознанный документ по загруженным данным возникла непредвиденная ошибка.'");
		КонецЕсли;
		
		Результат.Загружено = Истина;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РаспознанныйДокумент,
			ДокументСсылка,
			НСтр("ru = 'Записан документ с идентификатором:'") + Символы.ПС +
			РезультатыОбработки.ИдентификаторРезультата
		);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		БылиОшибки = Истина;
		Результат.КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не БылиОшибки Тогда 
		ДокументыБезОшибок = Новый Массив;
		ДокументыБезОшибок.Добавить(ДокументСсылка);
		ОбратнаяСвязьПоСозданнымДокументам(ДокументыБезОшибок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьРаспознанныеДокументы(АдресРезультата = Неопределено, СостоянияПоБалансу = Неопределено, ВыполнятьЗагрузкуДокументов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаспознаваниеДокументовСлужебный.УстановитьИПроверитьВыполняетсяЗагрузкаРаспознанныхДокументов() Тогда
		// Блокировка конкурентной загрузки.
		Возврат;
	КонецЕсли;
	
	ДополнитьСтатусыЗаданийДаннымиИзСервиса();
	
	СостояниеЗаданийРаспознавания = СостояниеЗаданийРаспознавания();
	
	ДокументыБезОшибок = Новый Массив;
	
	Для Каждого ИдентификаторЗадания Из СостояниеЗаданийРаспознавания.ЗаданияКОбработке Цикл
		
		Попытка
			
			СостояниеЗадания = РаспознаваниеДокументовSDK.ПолучитьСостояниеОбработкиЗадания(ИдентификаторЗадания);
			
		Исключение
			
			РегистрыСведений.СостоянияЗаданийРаспознаваниеДокументов.ИзменитьСтатусОбработкиЗадания(
				ИдентификаторЗадания,
				Перечисления.СтатусыНаСервисеРаспознаваниеДокументов.Ошибка
			);
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстДляПользователя =
				НСтр("ru = 'Произошла ошибка при попытке загрузить документы.
				           |Подробности см. в журнале регистрации.'");
			
			РегистрацияОшибкиЗагрузки(ИдентификаторЗадания, ИдентификаторЗадания, ТекстОшибки, ТекстДляПользователя);
			
			ОбновитьПредставлениеЗадания(ИдентификаторЗадания, 0, 0, 0);
			
			Продолжить;
			
		КонецПопытки;
		
		Для Каждого РаспознанныйДокумент Из СостояниеЗадания.РаспознанныеДокументы Цикл
			
			ДокументУжеОбработан = (СостояниеЗаданийРаспознавания.ЗагруженныеДокументы.Найти(
				РаспознанныйДокумент.ИдентификаторДокумента) <> Неопределено);
			
			Если ДокументУжеОбработан Тогда
				Продолжить;
			КонецЕсли;
			
			КлючеваяОперация = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
				"РаспознаваниеДокументов.ЗагрузитьРаспознанныеДокументы.ЗагрузкаДокумента");
			
			ЗагрузкаДокумента(
				ИдентификаторЗадания,
				РаспознанныйДокумент,
				СостояниеЗадания,
				ДокументыБезОшибок
			);
			
			ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
				КлючеваяОперация,
				1,
				,
				РаспознанныйДокумент.ИдентификаторДокумента
			);
			
		КонецЦикла;
		
		Если СостояниеЗадания.ОбработкаЗавершена Тогда
			РегистрыСведений.СостоянияЗаданийРаспознаваниеДокументов.ИзменитьСтатусОбработкиЗадания(
				ИдентификаторЗадания,
				Перечисления.СтатусыНаСервисеРаспознаваниеДокументов.Загружено
			);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбратнаяСвязьПоСозданнымДокументам(ДокументыБезОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыОписанияПараметровСозданияНоменклатуры

Функция ОписаниеРеквизита(МетаданныеОбъекта = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", "");
	Результат.Вставить("Синоним", "");
	Результат.Вставить("Тип", Новый ОписаниеТипов());
	Результат.Вставить("ПроверкаЗаполнения", ПроверкаЗаполнения.НеПроверять);
	
	Если Не МетаданныеОбъекта = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, МетаданныеОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЭлемента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.МобильныеПриложенияРаспознаванияДокументов, Истина);
	Списки.Вставить(Метаданные.Документы.РаспознанныйДокумент, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
//
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.РаспознанныйДокумент.Чтение.Организации
	|Документ.РаспознанныйДокумент.Изменение.Организации
	|РегистрСведений.СвязанныеОбъектыРаспознаниеДокументов.Чтение.Организации
	|РегистрСведений.СвязанныеОбъектыРаспознаниеДокументов.Изменение.Организации";
	
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки()
//
Процедура ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	Если ДанныеПользователя = Неопределено Тогда 
		// При удалени данных аутентификации пользователя интернет-поддержки.
		
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПараметрыАвторизации.ТипАутентификации = "ПоТикетуИТС" Тогда
			УдалитьДанныеАвторизации();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Зависимости - см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.Настройки
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.УдалениеУстаревшихРаспознанныхДокументов;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьРаспознаваниеДокументов;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомРаспознаванияДокументов;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьРаспознаваниеДокументов;
	Зависимость.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.УдалениеУстаревшихРаспознанныхДокументов.Имя);
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомРаспознаванияДокументов.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.УдалениеУстаревшихРаспознанныхДокументов.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомРаспознаванияДокументов.ИмяМетода);
	
КонецПроцедуры

// Регистрирует список сервисов, которые доступны для
// использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив    - массив структур, описывающий сервисы доступные для использовании в конфигурации;
//     Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = РаспознаваниеДокументовСлужебныйКлиентСервер.ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.РаспознаваниеДокументов72;
	ОписательСервиса.Наименование    = НСтр("ru = '1С:Распознавание первичных документов'");
	ОписательСервиса.Описание        = НСтр("ru = 'Вы можете подключить бесплатно 250 страниц для тестирования сервиса.'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура УдалениеУстаревшихРаспознанныхДокументов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеУстаревшихРаспознанныхДокументов);
	
	Документы.РаспознанныйДокумент.УдалитьУстаревшиеДокументы();
	
КонецПроцедуры

Процедура ОбменССервисомРаспознаванияДокументов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеУстаревшихРаспознанныхДокументов);
	
	РаспознаваниеДокументовОбменССервисом.ВыполнитьОбмен();
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

//
// Планируются к удалению начиная с версии
// Библиотеки Распознавания Документиов 2.0.*
//

// Устарела. Следует использовать См. РаспознаваниеДокументов.ВыполнитьАвторизациюПоЛогинуПаролю
//
// Параметры:
//  Логин - Строка - строка с логином для авторизации.
//  Пароль - Строка - строка с паролем для авторизации.
//  
// Возвращаемое значение:
//  Структура: 
//        * Логин - Строка - строка с логином для авторизации.
//        * Пароль - Строка - строка с паролем для авторизации.
//
Функция ПараметрыАвторизации(Логин, Пароль) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	
	Возврат Результат;
	
КонецФункции

// Устарела. Следует использовать См. РаспознаваниеДокументов.ВыполнитьАвторизациюПоЛогинуПаролю
//
// Параметры:
//  ПараметрыАвторизации - см. РаспознаваниеДокументов.ПараметрыАвторизации.
// 
// Возвращаемое значение:
//  Структура: 
//        * ВыполненоУспешно – Булево - признак выполнения авторизации.
//        * ТекстОшибки - Строка- текст с описанием ошибки авторизации.
//        * ВозвращаемыеДанные - Строка - см. РаспознаваниеДокументов.ТекущиеПараметрыАвторизации().ИдентификаторИБ.
//
Функция ВыполнитьАвторизациюНаСервисе(ПараметрыАвторизации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполненоУспешно", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ВозвращаемыеДанные", "");
	
	Попытка
		ВыполнитьАвторизациюПоЛогинуПаролю(ПараметрыАвторизации.Логин, ПараметрыАвторизации.Пароль);
		Результат.ВыполненоУспешно = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат.ВозвращаемыеДанные = ПараметрыАвторизации.ИдентификаторИБ;
	Исключение
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Устарела. Следует использовать См. РаспознаваниеДокументов.ТекущиеПараметрыАвторизации.
// 
// Возвращаемое значение:
//  Строка - токен доступа авторизации.
//
Функция ПолучитьТокенАвторизации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = ТекущиеПараметрыАвторизации();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыАвторизации.ТокенДоступа;
	
КонецФункции

// Устарела. Следует использовать Обработки.РаспознаваниеДокументов.ОтправитьФайлыНаРаспознавание
// 
// Параметры:
//  Файлы - Массив из Структура - список файлов для распознавания.
//  Источник - ПеречислениеСсылка.ИсточникиПолученияФайлов - описание источника получения файлов.
//  ИдентификаторИсточникаРаспознавания - Число, Неопределено - числовой идентификатор источника получения файлов.
//   По умолчанию Неопределено.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры для задания распознавания. 
//   По умолчанию Неопределено.
//
// Возвращаемое значение:
//  Произвольный - числовой идентификатор созданного задания.
//
Функция СоздатьЗаданиеДляРаспознавания(
		Файлы,
		Источник,
		ИдентификаторИсточникаРаспознавания = Неопределено,
		ДополнительныеПараметры = Неопределено
	) Экспорт
	
	ИменаФайлов = Новый Массив;
	ФайлыСтрокой = "";
	Для Каждого ТекСтр Из Файлы Цикл
		ИменаФайлов.Добавить(ТекСтр.ИмяФайла);
		ФайлыСтрокой = ФайлыСтрокой + ", " + ТекСтр.ИмяФайла;
	КонецЦикла;
	ФайлыСтрокой = Сред(ФайлыСтрокой, 3);
	
	ТекДата = ТекущаяУниверсальнаяДата();
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Отправлены файлы для распознования:'") + Символы.ПС +
		ФайлыСтрокой
	);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("files", ИменаФайлов);
	ПараметрыЗапроса.Вставить("create_time", ТекДата);
	
	ОтветСервиса = РаспознаваниеДокументовКоннекторСлужебный.СоздатьНовуюЗадачу(ПараметрыЗапроса);
	Если ОтветСервиса = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИдентификаторЗадания = ОтветСервиса.ДесериализованноеЗначение;
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Получен идентификатор нового задания:'") + Символы.ПС +
		ИдентификаторЗадания
	);
	
	Запись = РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторЗадания = ИдентификаторЗадания;
	Запись.ДатаЗагрузки = ТекДата;
	Запись.ВОбработке = ИменаФайлов.Количество();
	Запись.ФайлыСтрокой = ФайлыСтрокой;
	Запись.Источник = Источник;
	Запись.Представление = СформироватьПредставлениеЗадания(
	Новый Структура("ДатаЗагрузки, ФайлыСтрокой, ВОбработке, Загружено, Ошибок", ТекДата, ФайлыСтрокой, Запись.ВОбработке, 0, 0));
	Запись.Записать();
	
	ОтветСервиса = РаспознаваниеДокументовКоннекторСлужебный.ПолучитьРезультатПоИдентификатору(ИдентификаторЗадания);
	Если ОтветСервиса = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	мАдресов = ОтветСервиса.ДесериализованноеЗначение["info"]["upload_path"];
	
	КоличествоФайлов = мАдресов.Количество();
	
	Ид = 0;
	Для Каждого ТекАдрес Из мАдресов Цикл
		Если Ид = 0 Тогда
			ЗаписьСостояния = РегистрыСведений.СостоянияЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
			ЗаписьСостояния.ИдентификаторЗадания = ИдентификаторЗадания;
			ЗаписьСостояния.Статус = Перечисления.СтатусыНаСервисеРаспознаваниеДокументов.Обрабатывается;
			Если ЗначениеЗаполнено(ИдентификаторИсточникаРаспознавания) Тогда
				ЗаписьСостояния.ИдентификаторИсточникаРаспознавания = ИдентификаторИсточникаРаспознавания;
			КонецЕсли;
			ЗаписьСостояния.Записать();
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(, СтрШаблон(
			НСтр("ru = 'Отправка файла %1 (%2 из %3)...'"),
			Файлы[Ид].ИмяФайла,
			Ид + 1,
			КоличествоФайлов
		));
		
		ДвоичныеДанные = Файлы[Ид].ДвоичныеДанные;
		ОтветСервиса = РаспознаваниеДокументовКоннекторСлужебный.ЗагрузкаИзображенияПоАдресу(
			ТекАдрес,
			ДвоичныеДанные
		);
		Если ОтветСервиса = Неопределено Тогда
			// Не удалось загрузить файл по адресу, который выдал сервис
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторФайла = ОтветСервиса.ДесериализованноеЗначение;
		Запись.ИдентификаторЗадания = ИдентификаторЗадания;
		Запись.ДатаЗагрузки = ТекДата;
		Запись.ИмяФайла = Файлы[Ид].ИмяФайла;
		Запись.ИсходныйФайл = Новый ХранилищеЗначения(ДвоичныеДанные);
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Запись, ДополнительныеПараметры);
		КонецЕсли;
		Запись.ВОбработке = Истина;
		Запись.Записать();
		
		Ид = Ид + 1;
	КонецЦикла;
	
	Если Ид = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Возврат ИдентификаторЗадания;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОтправитьОбратнуюСвязьRecognitionResult(ДокументОбъект) Экспорт
	
	// Обработка параметра ДополнительныеСвойства
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	Автозаполнение = (ДополнительныеСвойства.Свойство("Автозаполнение") И ДополнительныеСвойства.Автозаполнение);
	Если ДополнительныеСвойства.Свойство("ДанныеСтраниц") И ДополнительныеСвойства.ДанныеСтраниц <> Неопределено Тогда
		ДанныеСтраниц = ДополнительныеСвойства.ДанныеСтраниц;
	Иначе
		ДанныеСтраниц = Новый Массив;
	КонецЕсли;
	
	// Инициализация частей результата
	СлужебныеПоля = Новый Структура;
	Шапка = Новый Структура;
	Таблицы = Новый Структура;
	
	ПометкаУдаленияУстановелнаРегЗаданием = ДокументОбъект.ДополнительныеСвойства.Свойство("ПометкаУдаленияУстановелнаРегЗаданием");
	
	// СлужебныеПоля
	СлужебныеПоля.Вставить("База", НРег(СтрокаСоединенияИнформационнойБазы()));
	СлужебныеПоля.Вставить("Область", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ЗаполнитьДанныеПользователя(СлужебныеПоля);
	
	СлужебныеПоля.Вставить("ПометкаУдаления", ДокументОбъект.ПометкаУдаления);
	СлужебныеПоля.Вставить("ПометкаУдаленияУстановелнаРегЗаданием", ПометкаУдаленияУстановелнаРегЗаданием);
	СлужебныеПоля.Вставить("ИдентификаторЗадания", ДокументОбъект.ИдентификаторЗадания);
	СлужебныеПоля.Вставить("ИдентификаторРезультата", ДокументОбъект.ИдентификаторРезультата);
	СлужебныеПоля.Вставить("Автозаполнение", Автозаполнение);
	СлужебныеПоля.Вставить("ОшибкаОтСервиса", ДокументОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка);
	СлужебныеПоля.Вставить("ОписаниеОшибкиОтСервиса", ДокументОбъект.ОписаниеОшибки);
	СлужебныеПоля.Вставить("ОшибкаОтПользователя", ДокументОбъект.ОшибкаОтПользователя);
	СлужебныеПоля.Вставить("КомментарийПользователя", ДокументОбъект.Комментарий);
	
	СлужебныеПоля.Вставить("ТипРаспознанногоДокумента", Строка(ДокументОбъект.ТипДокумента));
	СлужебныеПоля.Вставить("Направление", Строка(ДокументОбъект.Направление));
	СлужебныеПоля.Вставить("НомерДокумента1С", ДокументОбъект.Номер);
	СлужебныеПоля.Вставить("ДатаДокумента1С", ДокументОбъект.Дата);
	СлужебныеПоля.Вставить("ОбщееЧислоСтрок", 0); // Заполняется при аналзе таблиц
	
	// ДанныеСтраниц - массив соответствий, в котором есть ключи: file, file_id, page_index
	// file - содержит имя файла, из которого получился документ
	// page_index - номер страницы в файле file
	// file_id - идентификатор файла, который сгенерировал сервер
	
	// Для статистики file будет иметь структуру: GuidВложенияОткудаВзялиФайл/НомерПовтора/ОригинальноеИмяФайла
	// В качестве разделителя выбран "/", поскольку этот символ не может быть в имени файла в Windows/Mac/Linux
	// Нужно проверить, если в file есть "/", тогда нужно GuidВложенияОткудаВзялиФайл записать в file_id, а ОригинальноеИмяФайла в file
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	Для Каждого ИнфоСтраницы Из ДанныеСтраниц Цикл
		ИмяФайла = ИнфоСтраницы.Получить("file");
		Если ИмяФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивЧастейФайла = СтрРазделить(ИмяФайла, "/");
		Если МассивЧастейФайла.Количество() <> 3 Тогда
			ИнфоСтраницы.Вставить("repeat_number", 1);
			Продолжить;
		КонецЕсли;
		
		ИнфоСтраницы.Вставить("file_id", МассивЧастейФайла[0]);
		ИнфоСтраницы.Вставить("file", МассивЧастейФайла[2]);
		ИнфоСтраницы.Вставить("repeat_number", ОписаниеТипаЧисло.ПривестиЗначение(МассивЧастейФайла[1]));
	КонецЦикла;
	
	СлужебныеПоля.Вставить("pages_info", ДанныеСтраниц);
	
	Если НЕ СлужебныеПоля.ОшибкаОтСервиса Тогда
		Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			ИсключитьДоговор = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		ИначеЕсли ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			ИсключитьДоговор = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
		КонецЕсли;
		
		ИсключитьСклад = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
		
		СопоставлениеРеквизитовОбщее = Новый Структура("Шапка, Таблица");
		ЗаполнитьТаблицуРеквизитовПоТипам(ДокументОбъект.ТипДокумента, СопоставлениеРеквизитовОбщее.Шапка, СопоставлениеРеквизитовОбщее.Таблица);
		ПроблемныеРеквизиты = РаспознаваниеДокументовСлужебный.ПроблемныеРеквизиты(ДокументОбъект);
		
		// Шапка
		Для Каждого Реквизит Из ДокументОбъект.РеквизитыДокумента Цикл
			НайденнаяСтрока = СопоставлениеРеквизитовОбщее.Шапка.Найти(Реквизит.ИмяРеквизита, "ИмяРеквизита");
			Если (НайденнаяСтрока <> Неопределено И НайденнаяСтрока.НеОтображать = Ложь)
				Или Реквизит.ИмяРеквизита = "СуммаВключаетНДС" Тогда // убрать эту проверку, когда СуммаВключаетНДС будет в УПД, ТОРГ12, СФ
				// Проверим, виден ли реквизит в зависимости от направления
				Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
					ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
					ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
					ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
					
					Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
						Если Реквизит.ИмяРеквизита = "Продавец" ИЛИ Реквизит.ИмяРеквизита = "ПокупательОрганизация" Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Если Реквизит.ИмяРеквизита = "Покупатель" ИЛИ Реквизит.ИмяРеквизита = "ПродавецОрганизация" Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
					
					Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
						Если Реквизит.ИмяРеквизита = "Продавец"
							ИЛИ Реквизит.ИмяРеквизита = "ПокупательОрганизация"
							ИЛИ Реквизит.ИмяРеквизита = "БанковскийСчетКонтрагента" Тогда
							
							Продолжить;
						КонецЕсли;
					Иначе
						Если Реквизит.ИмяРеквизита = "Покупатель"
							ИЛИ Реквизит.ИмяРеквизита = "ПродавецОрганизация"
							ИЛИ Реквизит.ИмяРеквизита = "Исполнитель"
							ИЛИ Реквизит.ИмяРеквизита = "БанковскийСчетОрганизации" Тогда
						
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Проверим, виден ли реквизит в зависимости от функциональных опций
				Если (ИсключитьДоговор И Реквизит.ИмяРеквизита = "Договор")
					ИЛИ (ИсключитьСклад И Реквизит.ИмяРеквизита = "Склад") Тогда
					
					Продолжить;
				КонецЕсли;
				
				ДополнитьРезультатОбратнойСвязи(Шапка, ДокументОбъект, Реквизит, СопоставлениеРеквизитовОбщее, ПроблемныеРеквизиты);
			КонецЕсли;
		КонецЦикла;
		
		// СуммаВключаетНДС есть не во всех документах. Там где ее нет, заполним значением Ложь.
		Если НЕ Шапка.Свойство("СуммаВключаетНДС") Тогда
			ДанныеПоля = Новый Структура;
			ДанныеПоля.Вставить("RecognizedValue", "");
			ДанныеПоля.Вставить("SelectedValue", Ложь);
			Шапка.Вставить("СуммаВключаетНДС", ДанныеПоля);
		КонецЕсли;
		
		// Таблицы
		Для Каждого Реквизит Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
			Если Реквизит.СтрокаУдалена Тогда
				Продолжить;
			КонецЕсли;
			Если СлужебныеПоля.ОбщееЧислоСтрок < Реквизит.ПорядокСтроки Тогда
				СлужебныеПоля.ОбщееЧислоСтрок = Реквизит.ПорядокСтроки;
			КонецЕсли;
			
			НайденнаяСтрока = СопоставлениеРеквизитовОбщее.Таблица.Найти(Реквизит.ИмяРеквизита, "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.НеОтображать = Ложь Тогда
				
				// Доработать "Содержание", которое видно не всегда
				ДополнитьРезультатОбратнойСвязи(Таблицы, ДокументОбъект, Реквизит, СопоставлениеРеквизитовОбщее, ПроблемныеРеквизиты);
			КонецЕсли;
		КонецЦикла;
		
		// Поля Цена и Сумма будут массивами, которые содержат значения с НДС и без НДС.
		Для Каждого Таблица Из Таблицы Цикл
			Для Каждого СтрокаТаблицыКлючИЗначение Из Таблица.Значение Цикл
				СтрокаТаблицы = СтрокаТаблицыКлючИЗначение.Значение;
				СтавкаНДСЧислом = Неопределено;
				Если СтрокаТаблицы.Свойство("СтавкаНДС") Тогда
					Если СтрокаТаблицы.СтавкаНДС.SelectedValue.Свойство("СтавкаНДС") Тогда
						СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС.SelectedValue.СтавкаНДС);
						СтрокаТаблицы.СтавкаНДС.SelectedValue.Вставить("СтавкаНДС", Строка(СтрокаТаблицы.СтавкаНДС.SelectedValue.СтавкаНДС));
					КонецЕсли;
					Если СтрокаТаблицы.СтавкаНДС.FoundValue.Свойство("СтавкаНДС") Тогда
						СтрокаТаблицы.СтавкаНДС.FoundValue.Вставить("СтавкаНДС", Строка(СтрокаТаблицы.СтавкаНДС.FoundValue.СтавкаНДС));
					КонецЕсли;
				КонецЕсли;
				
				ПоляПо2НДС = Новый Массив;
				ПоляПо2НДС.Добавить("Цена");
				ПоляПо2НДС.Добавить("Сумма");
				
				Для Каждого Поле2НДС Из ПоляПо2НДС Цикл
					Если Не СтрокаТаблицы.Свойство(Поле2НДС) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтавкаНДСЧислом = Неопределено Тогда
						ЗначениеБезНДС = СтрокаТаблицы[Поле2НДС].SelectedValue;
						ЗначениеСНДС = СтрокаТаблицы[Поле2НДС].SelectedValue;
					ИначеЕсли Шапка.СуммаВключаетНДС.SelectedValue Тогда
						ЗначениеБезНДС = Окр(СтрокаТаблицы[Поле2НДС].SelectedValue*100/(100+СтавкаНДСЧислом), 2);
						ЗначениеСНДС = СтрокаТаблицы[Поле2НДС].SelectedValue;
					Иначе
						ЗначениеБезНДС = СтрокаТаблицы[Поле2НДС].SelectedValue;
						ЗначениеСНДС = Окр(СтрокаТаблицы[Поле2НДС].SelectedValue*(100+СтавкаНДСЧислом)/100, 2);
					КонецЕсли;
					
					МассивЧисел = Новый Массив;
					МассивЧисел.Добавить(ЗначениеБезНДС);
					МассивЧисел.Добавить(ЗначениеСНДС);
					СтрокаТаблицы[Поле2НДС].Вставить("SelectedValue", МассивЧисел);
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("СлужебныеПоля", СлужебныеПоля);
	Результат.Вставить("Шапка", Шапка);
	Результат.Вставить("Таблицы", Таблицы);
	
	Пакет = Новый Структура("recognition_result", Результат);
	Возврат РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ДокументОбъект.ИдентификаторРезультата, Пакет);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеПользователя(СлужебныеПоля)
	
	ВладелецКИ = Пользователи.ТекущийПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВладелецКИ, "Наименование, ИдентификаторПользователяИБ, ИдентификаторПользователяСервиса");
	
	ТипИлиВидЭлектроннойПочты = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя");
	ДополнительныеПараметры = Новый Структура("ТолькоПервая", Истина);
	
	ЭлектроннаяПочтаПользователя = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ВладелецКИ,
		ТипИлиВидЭлектроннойПочты, , ТекущаяДатаСеанса(), ДополнительныеПараметры);
	
	СлужебныеПоля.Вставить("username", ДанныеПользователя.Наименование);
	СлужебныеПоля.Вставить("infobase_user_id", Строка(ДанныеПользователя.ИдентификаторПользователяИБ));
	СлужебныеПоля.Вставить("service_user_id", Строка(ДанныеПользователя.ИдентификаторПользователяСервиса));
	СлужебныеПоля.Вставить("user_email", ЭлектроннаяПочтаПользователя);
	СлужебныеПоля.Вставить("user_is_admin", Пользователи.ЭтоПолноправныйПользователь());
	
КонецПроцедуры

Функция ЗначениеРеквизитаТабличнойЧасти(Ссылка, Знач Реквизит, ВыбратьРазрешенные = Ложь) Экспорт
	
	Попытка
		ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя(); 
	Исключение
		ВызватьИсключение НСтр("ru = 'Неверный первый параметр Ссылка: 
		|- Значение должно быть ссылкой или именем предопределенного элемента'");	
	КонецПопытки;
	
	ПозицияСкобки = СтрНайти(Реквизит, "[");
	ИмяТаблицы = Лев(Реквизит, ПозицияСкобки - 1);
	ИмяРеквизита = Сред(Реквизит, ПозицияСкобки + 1);
	ПозицияСкобки = СтрНайти(ИмяРеквизита, "]");
	ИндексСтроки = РаспознаваниеДокументовСериализацияСлужебныйКлиентСервер.ПривестиКЧислу(Лев(ИмяРеквизита, ПозицияСкобки - 1));
	ИмяРеквизита = Сред(ИмяРеквизита, ПозицияСкобки + 2);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
	|" + ИмяРеквизита + " КАК ЗначениеРеквизита
	|ИЗ
	|	" + ПолноеИмяОбъектаМетаданных + "." + ИмяТаблицы + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И Таблица.НомерСтроки = &НомерСтроки
	|";
	
	// Выполнение запроса.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомерСтроки", ИндексСтроки + 1);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ЗначениеРеквизита;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОбратнаяСвязь

Процедура ОбратнаяСвязьПоСозданнымДокументам(МассивДокументов)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	РаспознанныйДокумент.Ссылка В(&МассивДокументов)";
	
	РеквизитыШапки = Неопределено;
	РеквизитыТаблицы = Неопределено;
	ЭтоПерваяТаблица = Истина;
	ТипыДокументов = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТипыДокументов Цикл
		ЗаполнитьТаблицуРеквизитовПоТипам(СтрокаТаблицы.ТипДокумента, РеквизитыШапки, РеквизитыТаблицы, ЭтоПерваяТаблица);
		Если ЭтоПерваяТаблица Тогда
			ЭтоПерваяТаблица = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("РеквизитыШапки", РеквизитыШапки);
	Запрос.УстановитьПараметр("РеквизитыТаблицы", РеквизитыТаблицы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыШапки.ТипДокумента КАК ТипДокумента,
		|	РеквизитыШапки.ИмяРеквизита КАК ИмяРеквизита,
		|	РеквизитыШапки.НеОтображать КАК НеОтображать,
		|	РеквизитыШапки.НетНаПечатнойФорме КАК НетНаПечатнойФорме
		|ПОМЕСТИТЬ РеквизитыШапки
		|ИЗ
		|	&РеквизитыШапки КАК РеквизитыШапки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеквизитыТаблицы.ТипДокумента КАК ТипДокумента,
		|	РеквизитыТаблицы.ИмяРеквизита КАК ИмяРеквизита,
		|	РеквизитыТаблицы.НеОтображать КАК НеОтображать,
		|	РеквизитыТаблицы.НетНаПечатнойФорме КАК НетНаПечатнойФорме
		|ПОМЕСТИТЬ РеквизитыТаблицы
		|ИЗ
		|	&РеквизитыТаблицы КАК РеквизитыТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспознанныйДокумент.Ссылка КАК Ссылка,
		|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
		|	РаспознанныйДокумент.ИдентификаторРезультата КАК ИдентификаторРезультата
		|ПОМЕСТИТЬ ВсеДокументы
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	РаспознанныйДокумент.Ссылка В(&МассивДокументов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.РаспознанныйДокумент КАК РаспознанныйДокумент,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.ИмяРеквизита КАК ИмяРеквизита,
		|	МАКСИМУМ(СписокВыбораРеквизитовРаспознаваниеДокументов.Уверенность) КАК Уверенность
		|ПОМЕСТИТЬ СписокВыбораРеквизитов
		|ИЗ
		|	ВсеДокументы КАК ВсеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписокВыбораРеквизитовРаспознаваниеДокументов КАК СписокВыбораРеквизитовРаспознаваниеДокументов
		|		ПО ВсеДокументы.Ссылка = СписокВыбораРеквизитовРаспознаваниеДокументов.РаспознанныйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.РаспознанныйДокумент,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.ИмяРеквизита
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент КАК РаспознанныйДокумент,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ТабличнаяЧасть КАК ТабличнаяЧасть,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ИмяРеквизита КАК ИмяРеквизита,
		|	МАКСИМУМ(СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Уверенность) КАК Уверенность
		|ПОМЕСТИТЬ СписокВыбораТабличныхЧастей
		|ИЗ
		|	ВсеДокументы КАК ВсеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов КАК СписокВыбораТабличныхЧастейРаспознаваниеДокументов
		|		ПО ВсеДокументы.Ссылка = СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ТабличнаяЧасть,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НомерСтрокиТЧ,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ИмяРеквизита
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеДокументы.ТипДокумента КАК ТипДокумента,
		|	ВсеДокументы.ИдентификаторРезультата КАК ИдентификаторРезультата,
		|	РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита КАК ИмяРеквизита,
		|	РаспознанныйДокументРеквизитыДокумента.Значение КАК Значение,
		|	ЕСТЬNULL(СписокВыбораРеквизитов.Уверенность, 0) КАК Уверенность
		|ПОМЕСТИТЬ ДанныеШапки
		|ИЗ
		|	ВсеДокументы КАК ВсеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК РаспознанныйДокументРеквизитыДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ СписокВыбораРеквизитов КАК СписокВыбораРеквизитов
		|			ПО РаспознанныйДокументРеквизитыДокумента.Ссылка = СписокВыбораРеквизитов.РаспознанныйДокумент
		|				И РаспознанныйДокументРеквизитыДокумента.ИмяРеквизита = СписокВыбораРеквизитов.ИмяРеквизита
		|		ПО ВсеДокументы.Ссылка = РаспознанныйДокументРеквизитыДокумента.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеДокументы.ТипДокумента КАК ТипДокумента,
		|	ВсеДокументы.ИдентификаторРезультата КАК ИдентификаторРезультата,
		|	РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита КАК ИмяРеквизита,
		|	РаспознанныйДокументРеквизитыТабличныхЧастей.Значение КАК Значение,
		|	ЕСТЬNULL(СписокВыбораТабличныхЧастей.Уверенность, 0) КАК Уверенность
		|ПОМЕСТИТЬ ДанныеТаблицы
		|ИЗ
		|	ВсеДокументы КАК ВсеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
		|			ЛЕВОЕ СОЕДИНЕНИЕ СписокВыбораТабличныхЧастей КАК СписокВыбораТабличныхЧастей
		|			ПО РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка = СписокВыбораТабличныхЧастей.РаспознанныйДокумент
		|				И РаспознанныйДокументРеквизитыТабличныхЧастей.ТабличнаяЧасть = СписокВыбораТабличныхЧастей.ТабличнаяЧасть
		|				И РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ = СписокВыбораТабличныхЧастей.НомерСтрокиТЧ
		|				И РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита = СписокВыбораТабличныхЧастей.ИмяРеквизита
		|		ПО ВсеДокументы.Ссылка = РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеШапки.ИдентификаторРезультата КАК ИдентификаторРезультата,
		|	ДанныеШапки.ТипДокумента КАК ТипДокумента,
		|	0 КАК ЭтоТаблица,
		|	ДанныеШапки.ИмяРеквизита КАК ИмяРеквизита,
		|	ДанныеШапки.Значение КАК Значение,
		|	ДанныеШапки.Уверенность КАК Уверенность
		|ИЗ
		|	ДанныеШапки КАК ДанныеШапки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыШапки КАК РеквизитыШапки
		|		ПО ДанныеШапки.ТипДокумента = РеквизитыШапки.ТипДокумента
		|			И ДанныеШапки.ИмяРеквизита = РеквизитыШапки.ИмяРеквизита
		|			И (НЕ РеквизитыШапки.НеОтображать)
		|			И (НЕ РеквизитыШапки.НетНаПечатнойФорме)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеТаблицы.ИдентификаторРезультата,
		|	ДанныеТаблицы.ТипДокумента,
		|	1,
		|	ДанныеТаблицы.ИмяРеквизита,
		|	ДанныеТаблицы.Значение,
		|	ДанныеТаблицы.Уверенность
		|ИЗ
		|	ДанныеТаблицы КАК ДанныеТаблицы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыТаблицы КАК РеквизитыТаблицы
		|		ПО ДанныеТаблицы.ТипДокумента = РеквизитыТаблицы.ТипДокумента
		|			И ДанныеТаблицы.ИмяРеквизита = РеквизитыТаблицы.ИмяРеквизита
		|			И (НЕ РеквизитыТаблицы.НеОтображать)
		|			И (НЕ РеквизитыТаблицы.НетНаПечатнойФорме)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторРезультата,
		|	ЭтоТаблица
		|";
	
	ИдентификаторРезультата = "";
	РезультатШапки = Неопределено;
	РезультатТаблицы = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ИдентификаторРезультата <> Выборка.ИдентификаторРезультата Тогда
			Если ИдентификаторРезультата <> "" Тогда
				ОтправитьОбратнуюСвязьПоСозданнымДокументам(ИдентификаторРезультата, РезультатШапки, РезультатТаблицы);
			КонецЕсли;
			РезультатШапки = СтруктураОбратнойСвязиСозданногоДокумента();
			РезультатТаблицы = СтруктураОбратнойСвязиСозданногоДокумента();
			ИдентификаторРезультата = Выборка.ИдентификаторРезультата;
		КонецЕсли;
		
		Если Выборка.ЭтоТаблица Тогда
			Счетчик = РезультатТаблицы;
		Иначе
			Счетчик = РезультатШапки;
		КонецЕсли;
		
		Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Выборка.Значение)) Тогда
			Счетчик.confident = Счетчик.confident + 1;
		Иначе
			Если Выборка.Уверенность >= РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаУверенныхЗначений() Тогда
				Счетчик.confident = Счетчик.confident + 1;
			ИначеЕсли Выборка.Уверенность >= РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаПроблемныхЗначений() Тогда
				Счетчик.nonconfident = Счетчик.nonconfident + 1;
			Иначе
				Счетчик.empty = Счетчик.empty + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторРезультата <> "" Тогда
		ОтправитьОбратнуюСвязьПоСозданнымДокументам(ИдентификаторРезультата, РезультатШапки, РезультатТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьОбратнуюСвязьПоСозданнымДокументам(ИдентификаторРезультата, РезультатШапки, РезультатТаблицы)
	
	Результат = Новый Структура;
	Результат.Вставить("base", РезультатШапки);
	Результат.Вставить("table", РезультатТаблицы);
	
	Пакет = Новый Структура("statistics", Результат);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ИдентификаторРезультата, Пакет);
	
КонецПроцедуры

Процедура ОтправитьОбратнуюСвязьПоОшибкеЗагрузки(ИдентификаторРезультата, ПодробноеПредставлениеОшибкиОбработкиДокумента)
	
	Результат = Новый Структура("error_message", ПодробноеПредставлениеОшибкиОбработкиДокумента);
	Пакет = Новый Структура("download_error", Результат);	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ИдентификаторРезультата, Пакет);
	
КонецПроцедуры

Функция СтруктураОбратнойСвязиСозданногоДокумента()
	Возврат Новый Структура("confident, nonconfident, empty", 0, 0, 0);
КонецФункции

Функция СтруктураОбратнойСвязиИзмененногоПоля(ДляПримитивногоТипа = Ложь) Экспорт
	
	КлючиСтруктуры = "RecognizedValue, SelectedValue";
	Если Не ДляПримитивногоТипа Тогда
		КлючиСтруктуры = КлючиСтруктуры + ", Confidence, FoundValue, SelectedNewCreated";
	КонецЕсли;
	Возврат Новый Структура(КлючиСтруктуры);
	
КонецФункции

Процедура ЗаполнитьТаблицуРеквизитовПоТипам(ТипДокумента, РеквизитыШапки, РеквизитыТаблицы, ЭтоПерваяТаблица = Истина) Экспорт
	
	РеквизитыТипа = РаспознаваниеДокументовСлужебный.ПолучитьСопоставлениеРеквизитовИСвойствJSON(ТипДокумента);
	Если ЭтоПерваяТаблица Тогда
		РеквизитыТипа.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовРаспознаваниеДокументов"));
		РеквизитыШапки = РеквизитыТипа.СкопироватьКолонки();
		РеквизитыТаблицы = РеквизитыТипа.СкопироватьКолонки();
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из РеквизитыТипа Цикл
		Если СтрНайти(СтрокаРеквизита.Адрес, ".Строка.") <> 0 Тогда
			НоваяСтрока = РеквизитыТаблицы.Добавить();
			НоваяСтрока.Адрес = СтрЗаменить(СтрокаРеквизита.Адрес, ".Строка.", ".");
		Иначе
			НоваяСтрока = РеквизитыШапки.Добавить();
			НоваяСтрока.Адрес = СтрокаРеквизита.Адрес;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеквизита, , "Адрес");
		НоваяСтрока.ТипДокумента = ТипДокумента;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбратнаяСвязьRecognitionResult

Процедура ДополнитьРезультатОбратнойСвязи(ЭлементОбратнойСвязи, ДокументОбъект, Реквизит, СопоставлениеРеквизитовОбщее, ПроблемныеРеквизиты)
	
	Если ТипЗнч(Реквизит) = Тип("ДокументТабличнаяЧастьСтрока.РаспознанныйДокумент.РеквизитыДокумента") Тогда
		КлючСтрокиТаблицы = Неопределено;
	Иначе
		КлючСтрокиТаблицы = Реквизит.НомерСтрокиТЧ;
	КонецЕсли;
	
	ВыбранноеЗначение = Реквизит.Значение;
	
	Если КлючСтрокиТаблицы = Неопределено Тогда
		СопоставлениеРеквизитов = СопоставлениеРеквизитовОбщее.Шапка;
		ОбластьДобавления = ЭлементОбратнойСвязи;
	Иначе
		ИмяТаблицы = Реквизит.ТабличнаяЧасть;
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			ИмяТаблицы = "Таблица";
		КонецЕсли;
		
		Если НЕ ЭлементОбратнойСвязи.Свойство(ИмяТаблицы) Тогда
			ЭлементОбратнойСвязи.Вставить(ИмяТаблицы, Новый Соответствие);
		КонецЕсли;
		СопоставлениеРеквизитов = СопоставлениеРеквизитовОбщее.Таблица;
		
		ПорядокСтрокиТекст = Формат(Реквизит.ПорядокСтроки, "ЧН=; ЧГ=");
		ОбластьДобавления = ЭлементОбратнойСвязи[ИмяТаблицы].Получить(ПорядокСтрокиТекст);
		Если ОбластьДобавления = Неопределено Тогда
			ЭлементОбратнойСвязи[ИмяТаблицы].Вставить(ПорядокСтрокиТекст, Новый Структура);
			ОбластьДобавления = ЭлементОбратнойСвязи[ИмяТаблицы].Получить(ПорядокСтрокиТекст);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение));
	Если ЭтоПримитивныйТип Тогда
		Если ОбластьДобавления.Свойство(Реквизит.ИмяРеквизита) Тогда
			// Нельзя дважды заполнять один и тот же реквизит
			ВызватьИсключение НСтр("ru = 'Ошибка обратной связи'");
		Иначе
			ДанныеПоля = СтруктураОбратнойСвязиИзмененногоПоля(Истина);
			ДанныеПоля.RecognizedValue = Реквизит.РаспознанныйТекст;
			ДанныеПоля.SelectedValue = ВыбранноеЗначение;
			
			Если КлючСтрокиТаблицы = Неопределено Тогда
				Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", Реквизит.ИмяРеквизита, 0);
			Иначе
				Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", Реквизит.ИмяРеквизита, КлючСтрокиТаблицы);
			КонецЕсли;
			ПроблемныеСтроки = ПроблемныеРеквизиты.НайтиСтроки(Отбор);
			Если ПроблемныеСтроки.Количество() <> 0 Тогда
				ДанныеПоля.Вставить("Marked", Истина);
			КонецЕсли;
			
			ОбластьДобавления.Вставить(Реквизит.ИмяРеквизита, ДанныеПоля);
		КонецЕсли;
	Иначе
		ПараметрыДополнения = Новый Структура("СвязанныхКолонокНет, ДобавитьНаименованиеПолное");
		СвязанныеКолонки = РаспознаваниеДокументовСлужебный.ПараметрыСозданияНовогоЭлемента(Реквизит.ИмяРеквизита, ДокументОбъект.ТипДокумента, ДокументОбъект.Направление);
		ПараметрыДополнения.СвязанныхКолонокНет = (СвязанныеКолонки.Количество() = 0);
		Если ПараметрыДополнения.СвязанныхКолонокНет Тогда
			СвязанныеКолонки.Добавить(Новый Структура("ИмяРеквизита, Реквизит", Реквизит.ИмяРеквизита, Реквизит.ИмяРеквизита));
		КонецЕсли;
		
		ПараметрыДополнения.ДобавитьНаименованиеПолное = Ложь;
		КлючиСтруктуры = "";
		ДанныеПоля = СтруктураОбратнойСвязиИзмененногоПоля();
		ДанныеПоля.RecognizedValue = Новый Структура;
		ДанныеПоля.FoundValue = Новый Структура;
		ДанныеПоля.Confidence = 0;
		ДанныеПоля.SelectedValue = Новый Структура;
		ДанныеПоля.SelectedNewCreated = Ложь;

		Если КлючСтрокиТаблицы = Неопределено Тогда
			Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", Реквизит.ИмяРеквизита, 0);
		Иначе
			Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", Реквизит.ИмяРеквизита, КлючСтрокиТаблицы);
		КонецЕсли;
		ПроблемныеСтроки = ПроблемныеРеквизиты.НайтиСтроки(Отбор);
		Если ПроблемныеСтроки.Количество() <> 0 Тогда
			ДанныеПоля.Вставить("Marked", Истина);
		КонецЕсли;
		
		Для Каждого Колонка Из СвязанныеКолонки Цикл
			Если Колонка.Свойство("ИмяРеквизита") И ЗначениеЗаполнено(Колонка.ИмяРеквизита) Тогда
				Если Колонка.Реквизит = "Наименование" Тогда
					ПараметрыДополнения.ДобавитьНаименованиеПолное = ВыбранноеЗначение.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено;
				КонецЕсли;
				
				СтрокаСопоставления = СопоставлениеРеквизитов.Найти(Колонка.ИмяРеквизита, "ИмяРеквизита");
				Если СтрокаСопоставления = Неопределено Тогда
					Продолжить;
				Иначе
					Если КлючСтрокиТаблицы = Неопределено Тогда
						Отбор = Новый Структура("ИмяРеквизита", Колонка.ИмяРеквизита);
						НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
					Иначе
						Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", Колонка.ИмяРеквизита, КлючСтрокиТаблицы);
						НайденныеСтроки = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
					КонецЕсли;
					Если НайденныеСтроки.Количество() <> 0 Тогда
						ДанныеПоля.RecognizedValue.Вставить(Колонка.Реквизит, НайденныеСтроки[0].РаспознанныйТекст);
					Иначе
						ДанныеПоля.RecognizedValue.Вставить(Колонка.Реквизит, Неопределено);
					КонецЕсли;
				КонецЕсли;
				КлючиСтруктуры = КлючиСтруктуры + "," + Колонка.Реквизит;
			КонецЕсли;
		КонецЦикла;
		КлючиСтруктуры = Сред(КлючиСтруктуры, 2);
		
		Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
			ЗаполнитьДанныеСтруктурыПоСсылке(ДанныеПоля.SelectedValue, Реквизит.Значение, КлючиСтруктуры, ПараметрыДополнения);
			Если Реквизит.ЭлементСоздан Тогда
				ДанныеПоля.SelectedNewCreated = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизит.НайденноеЗначение) Тогда
			ЗаполнитьДанныеСтруктурыПоСсылке(ДанныеПоля.FoundValue, Реквизит.НайденноеЗначение, КлючиСтруктуры, ПараметрыДополнения);
			ДанныеПоля.Confidence = Реквизит.УверенностьНайденногоЗначения;
		КонецЕсли;
		
		ОбластьДобавления.Вставить(Реквизит.ИмяРеквизита, ДанныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСтруктурыПоСсылке(ДанныеСтруктуры, Ссылка, КлючиСтруктуры, ПараметрыДополнения)
	
	Если ПараметрыДополнения.СвязанныхКолонокНет Тогда
		ДанныеСтруктуры = Новый Структура(КлючиСтруктуры, Ссылка);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ДанныеСтруктуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, КлючиСтруктуры + ?(ПараметрыДополнения.ДобавитьНаименованиеПолное, ",НаименованиеПолное", ""));
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ПараметрыДополнения.ДобавитьНаименованиеПолное Тогда
		ОбъединитьНаименованиеПолное(ДанныеСтруктуры);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеСтруктуры Цикл
		ТипЭтогоЗначения = ТипЗнч(КлючЗначение.Значение); 
		
		Если КлючЗначение.Значение = Null Тогда 
			ДанныеСтруктуры[КлючЗначение.Ключ] = Неопределено;
		КонецЕсли;         
		
		Если ТипЭтогоЗначения = Тип("Массив") Тогда
			Для Индекс = 0 По КлючЗначение.Значение.ВГраница() Цикл
				Если ДанныеСтруктуры[КлючЗначение.Ключ][Индекс] = Null Тогда 
					ДанныеСтруктуры[КлючЗначение.Ключ][Индекс] = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЭтогоЗначения) И ТипЭтогоЗначения <> Тип("Массив") Тогда
			// СтавкаНДС должна быть только в строках и возвращаться ссылкой для массива цен: с НДС и без НДС
			Если ДанныеСтруктуры.Свойство("СтавкаНДС") И ДанныеСтруктуры.Количество() = 1 Тогда
				ДанныеСтруктуры[КлючЗначение.Ключ] = КлючЗначение.Значение;
			Иначе
				ДанныеСтруктуры[КлючЗначение.Ключ] = Строка(КлючЗначение.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединитьНаименованиеПолное(СтруктураДанных)
	
	// Приведение к строке - это дополнительная проверка на случай,
	// если будет null (НаименованиеПолное для группы дает null)
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Строка(СтруктураДанных.Наименование));
	МассивЗначений.Добавить(Строка(СтруктураДанных.НаименованиеПолное));
	СтруктураДанных.Вставить("Наименование", МассивЗначений);
	СтруктураДанных.Удалить("НаименованиеПолное");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ОбновитьПредставлениеЗадания(ИдентификаторЗадания, ВОбработке, Загружено, Ошибок)
	
	Запись = РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторЗадания = ИдентификаторЗадания;
	Запись.Прочитать();
	Если Запись.ИдентификаторЗадания = "" Тогда
		Запись.ИдентификаторЗадания = ИдентификаторЗадания;
		Запись.ДатаЗагрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	Запись.ВОбработке = ВОбработке;
	Запись.Загружено = Запись.Загружено + Загружено;
	Запись.Ошибок = Запись.Ошибок + Ошибок;
	ПараметрыЗаписи = Новый Структура("ДатаЗагрузки, ФайлыСтрокой, ВОбработке, Загружено, Ошибок");
	ЗаполнитьЗначенияСвойств(ПараметрыЗаписи, Запись);
	Запись.Представление = СформироватьПредставлениеЗадания(ПараметрыЗаписи);
	Запись.Записать();
	
КонецПроцедуры

Процедура ИзменитьСтатусОбработкиЗадания(ИдентификаторЗадания, Статус) Экспорт
	
	Запись = РегистрыСведений.СостоянияЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторЗадания = ИдентификаторЗадания;
	Запись.Прочитать();
	Если Запись.ИдентификаторЗадания = "" Тогда
		Запись.ИдентификаторЗадания = ИдентификаторЗадания;
	КонецЕсли;
	Запись.Статус = Статус;
	Запись.Записать();
	
КонецПроцедуры

Процедура ДополнитьСтатусыЗаданийДаннымиИзСервиса()
	
	ТокенАвторизации = ПолучитьТокенАвторизации();
	Если ПустаяСтрока(ТокенАвторизации) Тогда 
		Возврат;
	КонецЕсли;
	
	ОтветСервиса = РаспознаваниеДокументовКоннекторСлужебный.ПолучитьИдентификаторыЗаданий(ТокенАвторизации);
	
	Если ОтветСервиса = Неопределено Или ОтветСервиса.КодСостояния <> 200 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЗаданий = ОтветСервиса.ДесериализованноеЗначение;
	
	ТаблицаЗаданий = Новый ТаблицаЗначений;
	ТаблицаЗаданий.Колонки.Добавить("ИдЗадания", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	Для Каждого КлючЗначение Из ИдентификаторыЗаданий Цикл
		СтрокаТаблицы = ТаблицаЗаданий.Добавить();
		СтрокаТаблицы.ИдЗадания = КлючЗначение.Ключ;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаЗаданий", ТаблицаЗаданий);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаЗаданий.ИдЗадания КАК ИдЗадания
			|ПОМЕСТИТЬ ТаблицаЗаданий
			|ИЗ
			|	&ТаблицаЗаданий КАК ТаблицаЗаданий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЗаданий.ИдЗадания КАК ИдЗадания
			|ИЗ
			|	ТаблицаЗаданий КАК ТаблицаЗаданий
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаданийРаспознаваниеДокументов КАК СостоянияЗаданийРаспознаваниеДокументов
			|		ПО ТаблицаЗаданий.ИдЗадания = СостоянияЗаданийРаспознаваниеДокументов.ИдентификаторЗадания
			|ГДЕ
			|	СостоянияЗаданийРаспознаваниеДокументов.ИдентификаторЗадания ЕСТЬ NULL";
		
		ДатаЗагрузки = ТекущаяДатаСеанса();
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.СостоянияЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
			Запись.ИдентификаторЗадания = Выборка.ИдЗадания;
			Запись.Статус = Перечисления.СтатусыНаСервисеРаспознаваниеДокументов.Обрабатывается;
			Запись.Записать();
			
			МассивРезультатов = ИдентификаторыЗаданий.Получить(Выборка.ИдЗадания);
			Запись = РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
			Запись.ИдентификаторЗадания = Выборка.ИдЗадания;
			Запись.ДатаЗагрузки = ДатаЗагрузки;
			Запись.ВОбработке = МассивРезультатов.Количество();
			Запись.ФайлыСтрокой = "";
			Запись.Представление = СформироватьПредставлениеЗадания(
			Новый Структура("ДатаЗагрузки, ФайлыСтрокой, ВОбработке, Загружено, Ошибок", ДатаЗагрузки, "", Запись.ВОбработке, 0, 0));
			Запись.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьПредставлениеЗадания(Параметры) Экспорт
	
	ДатаЗагрузкиСтрокой = Формат(Параметры.ДатаЗагрузки, НСтр("ru = 'ДФ=''yyyy.MM.dd HH:mm:ss'''"));
	
	Текст = СтрШаблон(
		НСтр("ru = 'Дата загрузки: %1. В обработке файлов: %2, загружено: %3, с ошибкой: %4.'"),
		ДатаЗагрузкиСтрокой,
		Параметры.ВОбработке,
		Параметры.Загружено,
		Параметры.Ошибок
	);
	
	Если Не ПустаяСтрока(Параметры.ФайлыСтрокой)Тогда 
		Текст = Текст + СтрШаблон(НСтр("ru = 'Исходные файлы: %1'"), Параметры.ФайлыСтрокой);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает имя события журнала регистрации подсистемы Взаимодействия.
//
// Возвращаемое значение:
//  Строка - имя события журнала регистрации подсистемы Взаимодействия.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'РаспознаваниеДокументов'");
	
КонецФункции

Функция ОписаниеОбратнойСвязи(Статус) Экспорт
	
	РезультатОбратнойСвязи = Новый Структура;
	РезультатОбратнойСвязи.Вставить("Статус", Статус);
	Если Статус = "Проведен" Тогда
		РезультатОбратнойСвязи.Вставить("IdСозданногоДокумента", "");
	КонецЕсли;
	РезультатОбратнойСвязи.Вставить("ДатаИзмененияСтатуса", ТекущаяУниверсальнаяДата());
	РезультатОбратнойСвязи.Вставить("НомерРаспознанногоДокумента", "");
	РезультатОбратнойСвязи.Вставить("ЭтоВходящийДокумент", Ложь);
	РезультатОбратнойСвязи.Вставить("НомерДокумента", "");
	РезультатОбратнойСвязи.Вставить("ДатаДокумента", "01.01.0001");
	РезультатОбратнойСвязи.Вставить("СуммаДокумента", 0);
	РезультатОбратнойСвязи.Вставить("Контрагент", "");
	РезультатОбратнойСвязи.Вставить("Организация", "");
	РезультатОбратнойСвязи.Вставить("ТипРаспознанногоДокумента", "");
	РезультатОбратнойСвязи.Вставить("ИмяКоманды", "");
	РезультатОбратнойСвязи.Вставить("ВариантРегистрации", "");
	
	Возврат РезультатОбратнойСвязи;
	
КонецФункции

Процедура ЗаполнитьСпискиВыбораНаСервере(ДокументОбъект, ДокументСсылка, Повторно = Ложь) Экспорт

	НаборЗаписей = РегистрыСведений.СписокВыбораРеквизитовРаспознаваниеДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РаспознанныйДокумент.Установить(ДокументСсылка);
	Для Каждого СтрокаТаблицы Из ДокументОбъект.РеквизитыДокумента Цикл
		ПроверяемыйТип = СтрокаТаблицы.Значение;
		Если (НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) Или Повторно) И Не РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(ПроверяемыйТип)) Тогда
			мЗначений = ВыполнитьНечеткийПоиск(СтрокаТаблицы.РаспознанныйТекст, ПроверяемыйТип);
			Ид = 0;
			Для Каждого СтрВыбор Из мЗначений Цикл
				Ид = Ид + 1;
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РаспознанныйДокумент = ДокументСсылка;
				НоваяЗапись.ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
				НоваяЗапись.ПорядковыйНомер = Ид;
				НоваяЗапись.Значение = СтрВыбор[0];
				НоваяЗапись.Уверенность = СтрВыбор[1];
				НоваяЗапись.НайденВТаблицеСоответствий = СтрВыбор[2];
				Если Ид = 1 Тогда
					СтрокаТаблицы.НайденноеЗначение = НоваяЗапись.Значение;
					СтрокаТаблицы.УверенностьНайденногоЗначения = НоваяЗапись.Уверенность;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РаспознанныйДокумент.Установить(ДокументСсылка);
	Для Каждого СтрокаТаблицы Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
		ПроверяемыйТип = СтрокаТаблицы.Значение;
		Если (НЕ ЗначениеЗаполнено(СтрокаТаблицы.Значение) Или Повторно) И Не РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(ПроверяемыйТип)) Тогда
			мЗначений = ВыполнитьНечеткийПоиск(СтрокаТаблицы.РаспознанныйТекст, ПроверяемыйТип);
			Ид = 0;
			Для Каждого СтрВыбор Из мЗначений Цикл
				Ид = Ид + 1;
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.РаспознанныйДокумент = ДокументСсылка;
				НоваяЗапись.ТабличнаяЧасть = СтрокаТаблицы.ТабличнаяЧасть;
				НоваяЗапись.НомерСтрокиТЧ = СтрокаТаблицы.НомерСтрокиТЧ;
				НоваяЗапись.ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
				НоваяЗапись.ПорядковыйНомер = Ид;
				НоваяЗапись.Значение = СтрВыбор[0];
				НоваяЗапись.Уверенность = СтрВыбор[1];
				НоваяЗапись.НайденВТаблицеСоответствий = СтрВыбор[2];
				Если Ид = 1 Тогда
					СтрокаТаблицы.НайденноеЗначение = НоваяЗапись.Значение;
					СтрокаТаблицы.УверенностьНайденногоЗначения = НоваяЗапись.Уверенность;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
	РаспознаваниеДокументовСлужебный.ДобавитьВариантыНайденныеПоискомПоНесколькимРеквизитам(ДокументОбъект, ДокументСсылка);

КонецПроцедуры

Процедура ЗаполнитьИзРегистраСоответствий(мЗначений, СтрокаПоиска, ТипСтрокой)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантСохраненияСоответствий", РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки().ВариантСохраненияСоответствий);
	Запрос.УстановитьПараметр("ТипЗначения", ТипСтрокой);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоответствующееЗначение КАК Ссылка,
	|	100 КАК Вес,
	|	СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.РаспознаннаяСтрока КАК Наименование
	|ИЗ
	|	РегистрСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов КАК СоответствиеРаспознанныхСтрокРаспознаваниеДокументов
	|ГДЕ
	|	СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.ТипЗначения = &ТипЗначения
	|	И &ВариантСохраненияСоответствий <> ЗНАЧЕНИЕ(Перечисление.ВариантыСохраненияСоответствийБРД.НеСохранятьИНеЗадаватьВопрос)
	|	И (СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.ИзмененоВручную
	|			ИЛИ &ВариантСохраненияСоответствий = ЗНАЧЕНИЕ(Перечисление.ВариантыСохраненияСоответствийБРД.ЗадаватьВопрос)
	|			ИЛИ &ВариантСохраненияСоответствий = ЗНАЧЕНИЕ(Перечисление.ВариантыСохраненияСоответствийБРД.СохранятьАвтоматически)
	|				И СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.КоличествоПовторений > 1)";
	
	Кандидаты = Запрос.Выполнить().Выгрузить();
	
	ПараметрыНечеткогоПоиска = РаспознаваниеДокументовНечеткийПоискСлужебный.ПараметрыНечеткогоПоискаОбщие();
	РаспознанныеРеквизиты = Новый Структура;
	РаспознанныеРеквизиты.Вставить(
		"Наименование", 
		РаспознаваниеДокументовНечеткийПоискСлужебный.ОчиститьСтроку(СтрокаПоиска)
	);
	РаспознаваниеДокументовНечеткийПоискСлужебный.РанжированиеКандидатовПоСхожести(
		Кандидаты,
		РаспознанныеРеквизиты,
		ПараметрыНечеткогоПоиска
	);
	
	РаспознаваниеДокументовНечеткийПоискСлужебный.ИсключитьСтрокиСоЗначениемНиже(
		Кандидаты,
		"Вес",
		0.9
	);
	
	Если Кандидаты.Количество() Тогда
		мСсылкаПредставление = Новый Массив(3);
		мСсылкаПредставление[0] = Кандидаты[0].Ссылка;
		мСсылкаПредставление[1] = 100;
		мСсылкаПредставление[2] = Истина;
		мЗначений.Добавить(мСсылкаПредставление);
	КонецЕсли;
	
КонецПроцедуры

#Область НечеткийПоиск

Функция ВыполнитьНечеткийПоиск(СтрокаПоиска, ТипСсылкой)
	
	мЗначений = Новый Массив;
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат мЗначений;
	КонецЕсли;
	
	ТипРеквизита = ТипЗнч(ТипСсылкой);
	МетаданныеТипа = ТипСсылкой.Метаданные();
	ИмяТаблицыЗапроса = МетаданныеТипа.ПолноеИмя();
	
	// Соответствия
	Если ИмяТаблицыЗапроса <> "Справочник.Организации" Или Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЗаполнитьИзРегистраСоответствий(мЗначений, СокрЛП(СтрокаПоиска), ИмяТаблицыЗапроса);
	КонецЕсли;
	
	Если мЗначений.Количество() = 0 Тогда
		ИсключитьИзПоиска = Неопределено;
	Иначе
		ИсключитьИзПоиска = мЗначений[0][0];
	КонецЕсли;
	
	// Патч для отключения поиска по конкретным справочникам
	Если ИмяТаблицыЗапроса = "Справочник.Контрагенты"
		Или ИмяТаблицыЗапроса = "Справочник.Организации" 
		Или ИмяТаблицыЗапроса = "Справочник.КлассификаторБанков" 
		Или ИмяТаблицыЗапроса = "Справочник.Номенклатура" 
		Или ИмяТаблицыЗапроса = "Справочник.СтраныМира" 
		Или ИмяТаблицыЗапроса = "Справочник.УпаковкиЕдиницыИзмерения"
		Или ИмяТаблицыЗапроса = "Справочник.СтавкиНДС" Тогда 
		
		Возврат мЗначений;
	КонецЕсли;
	
	// Здесь все еще происходит поиск по справочнику НомераГТД (как минимум)
	ТекСтрокаПоиска = РаспознаваниеДокументовНечеткийПоискСлужебный.ОчиститьСтроку(СтрокаПоиска);
	
	Если ПустаяСтрока(ТекСтрокаПоиска) Тогда
		Возврат мЗначений;
	КонецЕсли;
	
	НачалоИмени = Лев(ИмяТаблицыЗапроса, 10);
	Если ИмяТаблицыЗапроса = "Справочник.Организации" Или ИмяТаблицыЗапроса = "Справочник.Контрагенты"
		Или ИмяТаблицыЗапроса = "Справочник.Номенклатура" Или ИмяТаблицыЗапроса = "Справочник.Валюты" Тогда
		
		КорректироватьПоДлине = Истина;
		РеквизитПоиска = "НаименованиеПолное";
	Иначе
		КорректироватьПоДлине = Истина;
		Если НачалоИмени = "Справочник" Тогда
			Если МетаданныеТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
				РеквизитПоиска = "Код";
			Иначе
				РеквизитПоиска = "Наименование";
			КонецЕсли;
		ИначеЕсли НачалоИмени = "ПланВидовХ" Тогда
			Если МетаданныеТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
				РеквизитПоиска = "Код";
			Иначе
				РеквизитПоиска = "Наименование";
			КонецЕсли;
		ИначеЕсли НачалоИмени = "ПланСчетов" Тогда
			Если МетаданныеТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета.ВВидеКода Тогда
				РеквизитПоиска = "Код";
			Иначе
				РеквизитПоиска = "Наименование";
			КонецЕсли;
		ИначеЕсли НачалоИмени = "ПланВидовР" Тогда
			Если МетаданныеТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаРасчета.ВВидеКода Тогда
				РеквизитПоиска = "Код";
			Иначе
				РеквизитПоиска = "Наименование";
			КонецЕсли;
		ИначеЕсли Лев(НачалоИмени, 6) = "Задача" Тогда
			Если МетаданныеТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеЗадачи.ВВидеНомера Тогда
				РеквизитПоиска = "Номер";
			Иначе
				РеквизитПоиска = "Наименование";
			КонецЕсли;
		Иначе
			РеквизитПоиска = "Наименование";
		КонецЕсли;
	КонецЕсли;
	
	Если НачалоИмени = "Справочник" Тогда
		Иерархический = (МетаданныеТипа.Иерархический И МетаданныеТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
	ИначеЕсли НачалоИмени = "ПланВидовХ" Тогда
		Иерархический = МетаданныеТипа.Иерархический;
	Иначе
		Иерархический = Ложь;
	КонецЕсли;
	Если НачалоИмени = "Перечислен" Тогда
		
		// Патч для НДС
		Если ИмяТаблицыЗапроса = "Перечисление.СтавкиНДС" Тогда 
			ТекСтрокаПоиска = СокрЛП(СтрокаПоиска); // Нужно брать строку до очистки (удаления запятых)
			Позиция = СтрНайти(ТекСтрокаПоиска, ",");
			Если Позиция > 0 Тогда 
				ТекСтрокаПоиска = Лев(ТекСтрокаПоиска, Позиция - 1);
			КонецЕсли;
			Позиция = СтрНайти(ТекСтрокаПоиска, ".");
			Если Позиция > 0 Тогда 
				ТекСтрокаПоиска = Лев(ТекСтрокаПоиска, Позиция - 1);
			КонецЕсли;
		КонецЕсли;
		
		ТЗ = ПолучитьВарианты(ТекСтрокаПоиска, ИмяТаблицыЗапроса, "Синоним", Иерархический, КорректироватьПоДлине, ИсключитьИзПоиска, МетаданныеТипа.ЗначенияПеречисления);
	Иначе
		ТЗ = ПолучитьВарианты(ТекСтрокаПоиска, ИмяТаблицыЗапроса, РеквизитПоиска, Иерархический, КорректироватьПоДлине, ИсключитьИзПоиска);
	КонецЕсли;
	
	Для Каждого СтрТЗ Из ТЗ Цикл
		мСсылкаПредставление = Новый Массив(3);
		мСсылкаПредставление[0] = СтрТЗ.Ссылка;
		мСсылкаПредставление[1] = Окр(СтрТЗ.ПроцентСовпаденияСтроки);
		мСсылкаПредставление[2] = Ложь;
		мЗначений.Добавить(мСсылкаПредставление);
	КонецЦикла;
	
	Возврат мЗначений;
	
КонецФункции

Функция УбратьОрганизационнуюФорму(Знач СтрокаПоиска) Экспорт
	
	МассивЗамен = Новый Массив;
	МассивЗамен.Добавить("ОБЩЕСТВО С ОГРАНИЧЕННОЙ ОТВЕТСТВЕННОСТЬЮ");
	МассивЗамен.Добавить("ПУБЛИЧНОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО");
	МассивЗамен.Добавить("ОТКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО");
	МассивЗамен.Добавить("ЗАКРЫТОЕ АКЦИОНЕРНОЕ ОБЩЕСТВО");
	МассивЗамен.Добавить("АКЦИОНЕРНОЕ ОБЩЕСТВО");
	МассивЗамен.Добавить("ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ");
	МассивЗамен.Добавить("ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ УНИТАРНОЕ ПРЕДПРИЯТИЕ");
	
	СтрокаПоискаВРег = ВРег(СтрокаПоиска);
	Для Каждого СтрокаЗамены Из МассивЗамен Цикл
		ДлинаЗамены = СтрДлина(СтрокаЗамены);
		Если Лев(СтрокаПоискаВРег, ДлинаЗамены) = СтрокаЗамены Тогда
			СтрокаПоиска = СокрЛП(Сред(СтрокаПоиска, ДлинаЗамены + 1));
		КонецЕсли;
		Если Прав(СтрокаПоискаВРег, ДлинаЗамены) = СтрокаЗамены Тогда
			СтрокаПоиска = СокрЛП(Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - ДлинаЗамены));
		КонецЕсли;
	КонецЦикла;
	
	Подстрока = Лев(СтрокаПоиска, 4);
	Если Подстрока = "ООО " Или Подстрока = "ПАО " Или Подстрока = "ОАО "  Или Подстрока = "ЗАО " Тогда
		СтрокаПоиска = Сред(СтрокаПоиска, 5);
	Иначе
		Подстрока = Лев(СтрокаПоиска, 3);
		Если Подстрока = "АО " Или Подстрока = "ИП " Тогда
			СтрокаПоиска = Сред(СтрокаПоиска, 4);
		ИначеЕсли Лев(СтрокаПоиска, 5) = "ФГУП " Тогда
			СтрокаПоиска = Сред(СтрокаПоиска, 6);
		КонецЕсли;
	КонецЕсли;
	
	Подстрока = Прав(СтрокаПоиска, 4);
	Если Подстрока = " ООО" Или Подстрока = " ПАО" Или Подстрока = " ОАО"  Или Подстрока = " ЗАО" Тогда
		СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 4);
	Иначе
		Подстрока = Прав(СтрокаПоиска, 3);
		Если Подстрока = " АО" Или Подстрока = " ИП" Тогда
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 3);
		ИначеЕсли Прав(СтрокаПоиска, 5) = " ФГУП" Тогда
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 5);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаПоиска);
	
КонецФункции

Функция ПолучитьВарианты(СтрокаПоиска, ИмяТаблицыЗапроса, РеквизитПоиска, Иерархический, КорректироватьПоДлине, ИсключитьИзПоиска, ЗначенияПеречисления = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантСохраненияСоответствий", РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки().ВариантСохраненияСоответствий);
	Запрос.УстановитьПараметр("ТипЗначения", ИмяТаблицыЗапроса);
	Запрос.УстановитьПараметр("ИсключитьИзПоиска", ИсключитьИзПоиска);
	Запрос.УстановитьПараметр("ЗаполнитьИзСоответствий", (ИмяТаблицыЗапроса <> "Справочник.Организации" Или Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоответствующееЗначение КАК Ссылка,
	|	СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.РаспознаннаяСтрока КАК "+РеквизитПоиска+"
	|ПОМЕСТИТЬ ВсеЗначения
	|ИЗ
	|	РегистрСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов КАК СоответствиеРаспознанныхСтрокРаспознаваниеДокументов
	|ГДЕ
	|	&ЗаполнитьИзСоответствий
	|	И СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.ТипЗначения = &ТипЗначения
	|	И СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоответствующееЗначение <> &ИсключитьИзПоиска
	|	И &ВариантСохраненияСоответствий <> ЗНАЧЕНИЕ(Перечисление.ВариантыСохраненияСоответствийБРД.НеСохранятьИНеЗадаватьВопрос)
	|	И (СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.ИзмененоВручную
	|			ИЛИ &ВариантСохраненияСоответствий = ЗНАЧЕНИЕ(Перечисление.ВариантыСохраненияСоответствийБРД.ЗадаватьВопрос)
	|			ИЛИ &ВариантСохраненияСоответствий = ЗНАЧЕНИЕ(Перечисление.ВариантыСохраненияСоответствийБРД.СохранятьАвтоматически)
	|				И СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.КоличествоПовторений > 1)";
	
	Если ЗначенияПеречисления <> Неопределено Тогда
		Для Каждого ТекЭл Из ЗначенияПеречисления Цикл
			Если ПредопределенноеЗначение(ИмяТаблицыЗапроса+"."+ТекЭл.Имя) = ИсключитьИзПоиска Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ("+ИмяТаблицыЗапроса+"."+ТекЭл.Имя+") КАК Ссылка,
			|	"""+ТекЭл.Синоним+""" КАК Синоним
			|";
			
		КонецЦикла;
		ЕстьПометкаУдаления = Ложь;
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Таб.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(Таб."+РеквизитПоиска+" КАК СТРОКА(1024))
		|ИЗ
		|	"+ИмяТаблицыЗапроса+" КАК Таб
		|ГДЕ
		|	НЕ Таб.ПометкаУдаления
		|	И Таб.Ссылка <> &ИсключитьИзПоиска
		|	"+?(Иерархический, "И НЕ Таб.ЭтоГруппа", "")+"";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|;
	|";
	
	ДлинаСтроки = СтрДлина(СтрокаПоиска);
	Если ДлинаСтроки = 1 Тогда
		ДлинаПодстроки = 1;
	ИначеЕсли ДлинаСтроки < 20 Тогда
		ДлинаПодстроки = 3;
	ИначеЕсли ДлинаСтроки < 100 Тогда
		ДлинаПодстроки = Цел(ДлинаСтроки / 10) + 1;
	Иначе
		ДлинаПодстроки = 10;
	КонецЕсли;
	
	Ид = 0;
	ПозПоиска = 1;
	Пока ПозПоиска <= ДлинаСтроки Цикл
		ТекСтрПоиска = Сред(СтрокаПоиска, ПозПоиска, ДлинаПодстроки);
		// Одиночную кавычку меняем на двойную, чтобы подставить в текст запроса
		ТекСтрПоиска = СтрЗаменить(ТекСтрПоиска, """", """""");
		Если ПозПоиска <> 1 Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Таб.Ссылка КАК Ссылка,
		|	Таб."+РеквизитПоиска+",
		|	1 КАК Количество
		|"+?(ПозПоиска = 1, "ПОМЕСТИТЬ ВсеВарианты", "")+"
		|ИЗ
		|	ВсеЗначения КАК Таб
		|ГДЕ
		|	Таб."+РеквизитПоиска+" ПОДОБНО ""%"+ТекСтрПоиска+"%""";
		
		Ид = Ид + 1;
		ПозПоиска = ПозПоиска + ДлинаПодстроки;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МаксСумма", Ид);
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|ВЫБРАТЬ
	|	ВсеВарианты."+РеквизитПоиска+",
	|	ВсеВарианты.Ссылка,
	|	100 * СУММА(ВсеВарианты.Количество)/&МаксСумма КАК ПроцентСовпаденияСтроки
	//|	ВЫРАЗИТЬ(100 * СУММА(ВсеВарианты.Количество)/&МаксСумма КАК ЧИСЛО(3, 0)) КАК Процент
	|ПОМЕСТИТЬ ВариантыИПроценты
	|ИЗ
	|	ВсеВарианты КАК ВсеВарианты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВарианты.Ссылка,
	|	ВсеВарианты."+РеквизитПоиска+"
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 5
	|	ВариантыИПроценты.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВариантыИПроценты.ПроцентСовпаденияСтроки) КАК ПроцентСовпаденияСтроки
	|ПОМЕСТИТЬ ИтогБезРеквизитаПоиска
	|ИЗ
	|	ВариантыИПроценты КАК ВариантыИПроценты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыИПроценты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцентСовпаденияСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогБезРеквизитаПоиска.Ссылка КАК Ссылка,
	|	ИтогБезРеквизитаПоиска.ПроцентСовпаденияСтроки КАК ПроцентСовпаденияСтроки,
	|	МАКСИМУМ(ВариантыИПроценты."+РеквизитПоиска+") КАК "+РеквизитПоиска+"
	|ИЗ
	|	ИтогБезРеквизитаПоиска КАК ИтогБезРеквизитаПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыИПроценты КАК ВариантыИПроценты
	|		ПО ИтогБезРеквизитаПоиска.Ссылка = ВариантыИПроценты.Ссылка
	|			И ИтогБезРеквизитаПоиска.ПроцентСовпаденияСтроки = ВариантыИПроценты.ПроцентСовпаденияСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогБезРеквизитаПоиска.Ссылка,
	|	ИтогБезРеквизитаПоиска.ПроцентСовпаденияСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИтогБезРеквизитаПоиска.ПроцентСовпаденияСтроки УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	ТЗ = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если КорректироватьПоДлине Тогда
		ДлинаПоиска = СтрДлина(СтрокаПоиска);
		Для Каждого СтрТЗ Из ТЗ Цикл
			НормСтрока = РаспознаваниеДокументовНечеткийПоискСлужебный.ОчиститьСтроку(СтрТЗ[РеквизитПоиска]);
			ТекДлина = СтрДлина(НормСтрока);
			Если ДлинаПоиска > ТекДлина Тогда
				СтрТЗ.ПроцентСовпаденияСтроки = СтрТЗ.ПроцентСовпаденияСтроки*Sqrt(ТекДлина/ДлинаПоиска);
			Иначе
				СтрТЗ.ПроцентСовпаденияСтроки = СтрТЗ.ПроцентСовпаденияСтроки*Sqrt(ДлинаПоиска/ТекДлина);
			КонецЕсли;
		КонецЦикла;
		ТЗ.Сортировать("ПроцентСовпаденияСтроки Убыв");
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьКандидатов(
		ПараметрыПоиска,
		ТипСсылкой,
		ПараметрыОбъединенныхРеквизитов = Неопределено,
		Отбор = Неопределено,
		ИдентификаторРезультата = ""
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаспознаваниеДокументовНечеткийПоискСлужебный.НечеткийПоиск(ТипСсылкой.Метаданные(), ПараметрыПоиска, Отбор, ИдентификаторРезультата);
	
КонецФункции

#КонецОбласти

#Область ОбработкаФайловИзКаталога

Процедура ОтправитьФайлыИзКаталогаНаРаспознавание(ПараметрыПоиска) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла", Метаданные.РегистрыСведений.ОбработанныеФайлыРаспознаваниеДокументов.Измерения.ИмяФайла.Тип);
	ТаблицаФайлов.Колонки.Добавить("ДатаИзменения", Метаданные.РегистрыСведений.ОбработанныеФайлыРаспознаваниеДокументов.Измерения.ДатаИзменения.Тип);
	ТаблицаФайлов.Колонки.Добавить("Каталог", Метаданные.РегистрыСведений.ОбработанныеФайлыРаспознаваниеДокументов.Измерения.Каталог.Тип);
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмяФайла", Новый ОписаниеТипов("Строка"));
	
	МассивФайлов = НайтиФайлы(ПараметрыПоиска.Каталог, ПолучитьМаскуВсеФайлы(), ПараметрыПоиска.ИскатьВПодкаталогах);
	Для Каждого ЭлементФайл Из МассивФайлов Цикл
		Если ЭлементФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаФайлов.Добавить();
		СтрокаТаблицы.ИмяФайла = ЭлементФайл.Имя;
		СтрокаТаблицы.Каталог = ЭлементФайл.Путь;
		СтрокаТаблицы.ДатаИзменения = ЭлементФайл.ПолучитьВремяИзменения();
		СтрокаТаблицы.ПолноеИмяФайла = ЭлементФайл.ПолноеИмя;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФайлов", ТаблицаФайлов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаФайлов.ИмяФайла КАК ИмяФайла,
	|	ТаблицаФайлов.ДатаИзменения КАК ДатаИзменения,
	|	ТаблицаФайлов.Каталог КАК Каталог,
	|	ТаблицаФайлов.ПолноеИмяФайла КАК ПолноеИмяФайла
	|ПОМЕСТИТЬ ВсеФайлы
	|ИЗ
	|	&ТаблицаФайлов КАК ТаблицаФайлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеФайлы.ИмяФайла КАК ИмяФайла,
	|	ВсеФайлы.ДатаИзменения КАК ДатаИзменения,
	|	ВсеФайлы.Каталог КАК Каталог,
	|	ВсеФайлы.ПолноеИмяФайла КАК ПолноеИмяФайла
	|ИЗ
	|	ВсеФайлы КАК ВсеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеФайлыРаспознаваниеДокументов КАК ОбработанныеФайлы
	|		ПО ВсеФайлы.ИмяФайла = ОбработанныеФайлы.ИмяФайла
	|			И ВсеФайлы.ДатаИзменения = ОбработанныеФайлы.ДатаИзменения
	|			И ВсеФайлы.Каталог = ОбработанныеФайлы.Каталог
	|ГДЕ
	|	ОбработанныеФайлы.ИмяФайла ЕСТЬ NULL
	|";
	
	Файлы = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Файлы.Добавить(Новый Структура("ИмяФайла, ДатаИзменения, Каталог, ДвоичныеДанные", Выборка.ИмяФайла, Выборка.ДатаИзменения, Выборка.Каталог, Новый ДвоичныеДанные(Выборка.ПолноеИмяФайла)));
		Исключение
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Если Файлы.Количество() <> 0 Тогда
		СоздатьЗаданиеДляРаспознавания(Файлы, Перечисления.ИсточникиПолученияФайлов.ИзПапки);
		
		Для Каждого СтруктураФайл Из Файлы Цикл
			Запись = РегистрыСведений.ОбработанныеФайлыРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
			Запись.ИмяФайла = СтруктураФайл.ИмяФайла;
			Запись.ДатаИзменения = СтруктураФайл.ДатаИзменения;
			Запись.Каталог = СтруктураФайл.Каталог;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВложенийИзПочты

Процедура ОтправитьВложенияИзПочтыНаРаспознавание(ДанныеУчетнойЗаписи) Экспорт
	
	// -----------------------------------------------------------------
	// Сформируем почтовый профиль и подключимся к почтовому серверу.
	
	Профиль = ИнтернетПочтовыйПрофиль(ДанныеУчетнойЗаписи.Ссылка, Истина);
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, Протокол);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	Если Протокол = ПротоколИнтернетПочты.POP3 Тогда
		ОбработатьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта);
	Иначе
		ОбработатьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта);
	КонецЕсли;
	
	Почта.Отключиться();
	
КонецПроцедуры

Процедура ОбработатьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта)

	// Получим идентификаторы сообщений на сервере.
	Идентификаторы = Почта.ПолучитьИдентификаторы();
	
	// -----------------------------------------------------------------
	// Определим какие сообщения нужно получать.
	ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
	
	ОбработатьПисьмаПоМассивуИдентификаторов(Почта, ДанныеУчетнойЗаписи, ИдЗагружать, ТекущаяДатаСеанса());
	
КонецПроцедуры

Функция ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись)

	// Получим список сообщений которые не были раньше получены.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись",          УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОбработанныхЭлектронныхПисемРаспознаваниеДокументов КАК ИдентификаторыОбработанныхЭлектронныхПисемРаспознаваниеДокументов
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыОбработанныхЭлектронныхПисемРаспознаваниеДокументов.Идентификатор
	|			И (ИдентификаторыОбработанныхЭлектронныхПисемРаспознаваниеДокументов.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыОбработанныхЭлектронныхПисемРаспознаваниеДокументов.УчетнаяЗапись ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(100)));
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторов;
	
КонецФункции

Процедура ОбработатьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта)
	
	МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
	ДатаПоследнейОбработкиВложений = ТекущаяДатаСеанса();
	
	Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура;
		
		ПредыдущаяДатаОбработкиВложений = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки().ДатаПоследнейОбработкиВложений;
		Если Не ПредыдущаяДатаОбработкиВложений = Дата(1,1,1) Тогда 
			ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДатаПоследнейОбработкиВложений);
		Иначе
			ПараметрыОтбора.Вставить("Удаленные", Ложь);
		КонецЕсли;
		
		Попытка
			Идентификаторы = Почта.ПолучитьИдентификаторы(,ПараметрыОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
		
		ОбработатьПисьмаПоМассивуИдентификаторов(Почта, ДанныеУчетнойЗаписи, ИдЗагружать, ДатаПоследнейОбработкиВложений);
		
	КонецЦикла;

	УстановитьДатуПоследнейЗагрузкиПисем(ДатаПоследнейОбработкиВложений);

КонецПроцедуры

Функция МассивИменАктивныхПапок(Почта)

	МассивИменАктивныхПапок = Новый Массив;
	 
	ИменаАктивныхПапок     = Почта.ПолучитьПочтовыеЯщикиПоПодписке();
	Если ИменаАктивныхПапок.Количество() = 0 Тогда
		ИменаАктивныхПапок = Почта.ПолучитьПочтовыеЯщики();
	КонецЕсли;
	
	Разделитель = ""; 
	Попытка
		Разделитель = Почта.СимволРазделитель;
	Исключение
		// Некоторые почтовые сервера не поддерживают эту команду.
	КонецПопытки;
	
	МассивИгнорируемыхИмен  = МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем();
	
	Для Каждого ИмяАктивнойПапки Из ИменаАктивныхПапок Цикл
		
		Если Не ПустаяСтрока(Разделитель) Тогда
			
			МассивСтрокИмениПапки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяАктивнойПапки,Разделитель);
			Если МассивСтрокИмениПапки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяПапкиБезРазделителя = МассивСтрокИмениПапки[МассивСтрокИмениПапки.Количество()-1];
			Если ПустаяСтрока(ИмяПапкиБезРазделителя) Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(ИмяПапкиБезРазделителя,1) = "[" И Прав(ИмяПапкиБезРазделителя,1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяПапкиБезРазделителя)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Лев(ИмяАктивнойПапки,1) = "[" И Прав(ИмяАктивнойПапки,1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяАктивнойПапки)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивИменАктивныхПапок.Добавить(ИмяАктивнойПапки);
		
	КонецЦикла;

	Возврат МассивИменАктивныхПапок;
	
КонецФункции

Функция МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем()

	МассивИмен = Новый Массив;
	МассивИмен.Добавить("спам");
	МассивИмен.Добавить("удаленные");
	МассивИмен.Добавить("черновики");
	МассивИмен.Добавить("корзина");
	МассивИмен.Добавить("spam");
	МассивИмен.Добавить("trash");
	МассивИмен.Добавить("drafts");
	МассивИмен.Добавить("draftBox");
	МассивИмен.Добавить("deleted");
	МассивИмен.Добавить("junk");
	МассивИмен.Добавить("bulk mail");
	Возврат МассивИмен;

КонецФункции

Процедура ОбработатьПисьмаПоМассивуИдентификаторов(Почта, ДанныеУчетнойЗаписи, ИдЗагружать, ДатаПоследнейОбработкиВложений)
	
	Получено = 0;
	
	Если ИдЗагружать.Количество() <> 0 Тогда
		
		КоличествоОшибокПриЗаписи = 0;
		КоличествоНеАктуальныхСообщений = 0;
		
		Пока ИдЗагружать.Количество() > (Получено + КоличествоОшибокПриЗаписи + КоличествоНеАктуальныхСообщений) Цикл
			
			КоличествоВПорции = 0;
			МассивИдентификаторовПорцииДляЗагрузки = Новый Массив;
			
			Для Инд = (Получено + КоличествоОшибокПриЗаписи) По ИдЗагружать.Количество() - 1 Цикл
				
				МассивИдентификаторовПорцииДляЗагрузки.Добавить(ИдЗагружать.Получить(Инд));
				КоличествоВПорции = КоличествоВПорции + 1;
				
				Если КоличествоВПорции = 10 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Получим нужные сообщения
			Сообщения = Почта.Выбрать(Ложь, 
			                          МассивИдентификаторовПорцииДляЗагрузки,
			                          ?(ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP",Ложь, Истина));
			
			КоличествоНеАктуальныхСообщений = КоличествоНеАктуальныхСообщений + (КоличествоВПорции - Сообщения.Количество());
			
			Файлы = Новый Массив;
			Для Каждого Сообщение Из Сообщения Цикл
				Получено = Получено + 1;
				Для Каждого Вложение Из Сообщение.Вложения Цикл
					Файлы.Добавить(Новый Структура("ИмяФайла, ДвоичныеДанные", Вложение.ИмяФайла, Вложение.Данные));
				КонецЦикла;
				
				Если Файлы.Количество() <> 0 Тогда
					
					ДополнительныеПараметры = Новый Структура("Отправитель", Строка(Сообщение.Отправитель.Адрес));
					
					СоздатьЗаданиеДляРаспознавания(Файлы,
						Перечисления.ИсточникиПолученияФайлов.ЭлектроннаяПочта,,
						ДополнительныеПараметры);
					Файлы.Очистить();
				КонецЕсли;
			КонецЦикла;
			
			ЗаписатьИдентификаторыПисем(ДанныеУчетнойЗаписи.Ссылка,
				МассивИдентификаторовПорцииДляЗагрузки,
				ДатаПоследнейОбработкиВложений);
			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторыПисем(УчетнаяЗапись, Идентификаторы, ДатаПолучения)
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		Запись = РегистрыСведений.ИдентификаторыОбработанныхЭлектронныхПисемРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		Запись.УчетнаяЗапись = УчетнаяЗапись;
		Запись.Идентификатор = Идентификатор;
		Запись.ДатаПолучения = ДатаПолучения;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДатуПоследнейЗагрузкиПисем(ДатаПоследнейОбработкиВложений)
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ДатаПоследнейОбработкиВложений = ДатаПоследнейОбработкиВложений;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработатьИсходныеФайлы(ИдентификаторЗадания, ОбрабатываемыеФайлы, Отправитель)
	
	Для Каждого ОбрабатываемыйФайл Из ОбрабатываемыеФайлы Цикл
		Менеджер = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		Менеджер.ИдентификаторФайла = ОбрабатываемыйФайл;
		Менеджер.Прочитать();
		
		Если НЕ Менеджер.Выбран() Тогда
			Результат = РаспознаваниеДокументовКоннекторСлужебный.ПолучитьСведенияОФайлеССервера(ОбрабатываемыйФайл);
			Если НЕ Результат = Неопределено Тогда
				СохранитьИнформациюОбИсходномФайле(
					ИдентификаторЗадания,
					ОбрабатываемыйФайл,
					Результат.ДесериализованноеЗначение,
					Отправитель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьИнформациюОбИсходномФайле(ИдентификаторЗадания, ИдентификаторФайла, Данные, Отправитель)
	
	Менеджер = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	Менеджер.ИдентификаторФайла = ИдентификаторФайла;
	Менеджер.ИдентификаторЗадания = ИдентификаторЗадания;
	Менеджер.ДатаЗагрузки = Данные["create_time"];
	Менеджер.ИмяФайла = Данные["file_name"];
	Если Отправитель <> Неопределено Тогда
		Менеджер.Отправитель = Отправитель;
		Менеджер.ИдентификаторКлиента = Строка(Данные["sub_client_id"]);
		Менеджер.МобильноеПриложение = Справочники.МобильныеПриложенияРаспознаванияДокументов.НайтиПоКоду(Менеджер.ИдентификаторКлиента);
		
		Если ЗначениеЗаполнено(Менеджер.МобильноеПриложение) Тогда
			Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Менеджер.МобильноеПриложение, "Ответственный");
		Иначе
			Ответственный = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		Менеджер.Пользователь = Ответственный;
		
	КонецЕсли;
	Если Данные.Получить("full_img") <> Неопределено Тогда
		Менеджер.ИсходныйФайл = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(Данные["full_img"]);
	Иначе
		Менеджер.ИсходныйФайл = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(Данные["source"]);
	КонецЕсли;
	Менеджер.ВОбработке = Истина;
	Менеджер.Записать();
	
КонецПроцедуры

#Область РаботаСПочтовымиСообщениямиСлужебный

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверИсходящейПочты КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP,ТолькоЗащищеннаяАутентификацияIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь,ТолькоЗащищеннаяАутентификацияPOP3";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP,ТолькоЗащищеннаяАутентификацияSMTP";
		
		//УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
		//УстановитьПривилегированныйРежим(Ложь);
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				Результат.ПарольIMAP = Пароли.Пароль;
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Результат.ПарольSMTP = Пароли.ПарольSMTP;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
				Результат.Пароль = Пароли.Пароль;
			КонецЕсли;
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + "," + СписокСвойствIMAP;
				Результат.ПарольIMAP =Пароли.Пароль;
			КонецЕсли;
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЭлектронноеВзаимодействиеСлужебный

// Удаляет временные файлы или каталог.
//
// Параметры:
//  Путь - Строка - полный путь к файлу или каталогу
//  Маска - Строка - маска для выбора удаляемых файлов,
//        - Неопределено - удаляются все файлы и каталог <Путь>.
//
Процедура УдалитьВременныеФайлы(Путь, Маска = Неопределено) Экспорт
	
	Попытка
		УдалитьФайлы(Путь, Маска);
	Исключение
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Авторизация


Функция НовыеПараметрыАвторизации()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторИБ", "");
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("Состояние", "Ожидает");
	Результат.Вставить("ТипАутентификации", "НеВыполнена"); // ПоТикетуИТС, ПоЛогинуПаролю
	Результат.Вставить("Логин", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьПараметрыАвторизации(Параметры)
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.ИдентификаторИБ,
			"ИдентификаторИБ");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.ТокенДоступа,
			"ТокенДоступа");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.Состояние,
			"Состояние");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.ТипАутентификации,
			"ТипАутентификации");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			Параметры.Логин,
			"Логин");
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Состояние", Параметры.Состояние);
	ПараметрыАвторизации.Вставить("ТипАутентификации", Параметры.ТипАутентификации);
	
	РаспознаваниеДокументовПереопределяемый.ПриИзмененииДанныхАвторизации(ПараметрыАвторизации);
	
КонецПроцедуры

Функция АвторизацияВыполнена(ПараметрыАвторизации)
	
	Возврат ПараметрыАвторизации.ТипАутентификации <> "НеВыполнена";
	
КонецФункции

Функция АктивацияВыполнена(ПараметрыАвторизации)
	
	Возврат ПараметрыАвторизации.ТипАутентификации = "ПоЛогинуПаролю"
		Или ПараметрыАвторизации.Состояние = "Активирован";
	
КонецФункции

Функция ОбластьАвторизации()
	
	Попытка
		АбонентЭтогоПриложения = ПрограммныйИнтерфейсСервиса.АбонентЭтогоПриложения().Наименование;
	Исключение
		АбонентЭтогоПриложения = "<Неопределено>";
	КонецПопытки;
	
	Попытка
		АдресПриложения = ПрограммныйИнтерфейсСервиса.СвойстваПриложения(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса()).АдресПриложения;
	Исключение
		АдресПриложения = "";
	КонецПопытки;
	
	ИнформацияМоделиСервиса = Новый Структура;
	ИнформацияМоделиСервиса.Вставить("РазделениеВключено", РаботаВМоделиСервиса.РазделениеВключено());
	ИнформацияМоделиСервиса.Вставить("ДоступноИспользованиеРазделенныхДанных", РаботаВМоделиСервиса.ДоступноИспользованиеРазделенныхДанных());
	ИнформацияМоделиСервиса.Вставить("ЗначениеРазделителяСеанса", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	ИнформацияМоделиСервиса.Вставить("АбонентЭтогоПриложения", АбонентЭтогоПриложения);
	ИнформацияМоделиСервиса.Вставить("АдресПриложения", АдресПриложения);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации <> Неопределено Тогда
		ЛогинПользователяИТС  = ДанныеАутентификации.Логин;
	Иначе
		ЛогинПользователяИТС = "<Неопределено>";
	КонецЕсли;
	
	ИнформацияИТС = Новый Структура;
	ИнформацияИТС.Вставить("ЛогинПользователяИТС", ЛогинПользователяИТС);
	
	Результат = Новый Структура;
	Результат.Вставить("Конфигурация", Метаданные.Имя);
	Результат.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Результат.Вставить("ВерсияБиблиотеки", ВерсияБиблиотеки());
	Результат.Вставить("ИнформацияМоделиСервиса", ИнформацияМоделиСервиса);
	Результат.Вставить("ИнформацияИТС", ИнформацияИТС);
	Результат.Вставить("ТекущаяУниверсальнаяДата", ЗаписатьДатуJSON(ТекущаяУниверсальнаяДата(), ФорматДатыJSON.ISO));
	Результат.Вставить("ТипАутентификации", "<Неопределено>");
	Результат.Вставить("ИдентификаторИнформационнойБазы", СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьАдресЭлектроннойПочты()
	
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	
	Если Не ПустаяСтрока(ТекущиеНастройки.АдресЭлПочты) Тогда
		Попытка
			РаспознаваниеДокументовКоннекторСлужебный.УстановитьАдресЭлектроннойПочты(ТекущиеНастройки.АдресЭлПочты);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, , , 
				НСтр("ru = 'Обновление адреса электронной почты не удалось, адрес электронной почты очищен.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.АдресЭлПочты = "";
			МенеджерЗаписи.Записать();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти    

#Область ЗагрузкаДокументов

Функция СостоянияПоСтатусам() Экспорт
	
	Запрос = Новый Запрос;
	Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(1) КАК ФайловКОбработке
		|ИЗ
		|	РегистрСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов КАК ИсходныеДанныеЗаданийРаспознаваниеДокументов
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаданийРаспознаваниеДокументов КАК СостоянияЗаданийРаспознаваниеДокументов
		|		ПО ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторЗадания = СостоянияЗаданийРаспознаваниеДокументов.ИдентификаторЗадания
		|ГДЕ
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ВОбработке
		|	И СостоянияЗаданийРаспознаваниеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНаСервисеРаспознаваниеДокументов.Обрабатывается)
		|	%1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ФайловСОшибкой,
		|	СУММА(ВЫБОР
		|			КОГДА РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
		|					ИЛИ РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Изменен)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ФайловНовых,
		|	СУММА(ВЫБОР
		|			КОГДА РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДокументовОбработано
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	НЕ РаспознанныйДокумент.ПометкаУдаления
		|	%2";
	
	Если ОбщегоНазначенияУТВызовСервера.ЭтоПолноправныйПользователь() Тогда  
		Запрос.Текст = СтрШаблон(Текст, "", "");
	Иначе
		Запрос.Текст = СтрШаблон(Текст, "И ИсходныеДанныеЗаданийРаспознаваниеДокументов.Пользователь = &Пользователь",
		"И РаспознанныйДокумент.Ответственный = &Пользователь");
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	ФайловКОбработке = 0;
	ФайловСОшибкой = 0;
	ФайловНовых = 0;
	ДокументовОбработано = 0;
	ЧековЗарегистрировано = 0;
	
	Результаты = Запрос.ВыполнитьПакет();
	Выборка = Результаты[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ФайловКОбработке = ?(Выборка.ФайловКОбработке = Null, 0, Выборка.ФайловКОбработке);
	КонецЕсли;
	
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ФайловСОшибкой = ?(Выборка.ФайловСОшибкой = Null, 0, Выборка.ФайловСОшибкой);
		ФайловНовых = ?(Выборка.ФайловНовых = Null, 0, Выборка.ФайловНовых);
		ДокументовОбработано = ?(Выборка.ДокументовОбработано = Null, 0, Выборка.ДокументовОбработано);
	КонецЕсли;
	
//	РаспознаваниеДокументовПереопределяемый.КоличествоЧековЗарегистрировано(ЧековЗарегистрировано);
	
	Результат = Новый Структура;
	Результат.Вставить("ФайловКОбработке", ФайловКОбработке);
	Результат.Вставить("ФайловСОшибкой", ФайловСОшибкой);
	Результат.Вставить("ФайловНовых", ФайловНовых);
	Результат.Вставить("ДокументовОбработано", ДокументовОбработано);
	Результат.Вставить("ЧековЗарегистрировано", ЧековЗарегистрировано);
	
	Возврат Результат;
	
КонецФункции

Функция СостоянияПоБалансу() Экспорт
	
	СостояниеБаланса = "ПроверкаСтатусаПодключения";
	// Возможные состояния:
	// * НеПоказыватьБаланс
	// * ПроверкаСтатусаПодключения
	// * Ошибка
	// * НеАвторизован
	// * НеАктивирован
	// * ПилотныйРежим
	// * ПилотныйРежимДатаОкончания
	// * ПилотныйРежимДатаОкончанияНаступила
	// * БалансНулевой
	// * БалансПоложительный
	// * БалансПоложительныйДатаОкончания
	// * БалансОтрицательный
	// * СервисОтключен
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеБаланса", СостояниеБаланса);
	Результат.Вставить("АдресЭлПочты", "");
	Результат.Вставить("ДатаОкончания", Дата("00010101"));
	Результат.Вставить("Баланс", 0);
	Результат.Вставить("Кредит", 0);
	Результат.Вставить("Использовано", 0);
	Результат.Вставить("ПоказатьТребованиеВключитьИТС", Ложь);
	Результат.Вставить("ПоказатьПредупреждениеНулевойБаланс", Ложь);
	Результат.Вставить("ПоказатьПредупреждениеСервисОтключен", Ложь);
	Результат.Вставить("ВыполнятьЗагрузкуРезультатов", Истина);
	Результат.Вставить("ПодключениеТестовогоПериодаДоступно", Ложь);

	Если АвторизацияПереопределена() Тогда
		Результат.СостояниеБаланса = "НеПоказыватьБаланс";
		Возврат Результат;
	КонецЕсли;
	
	Если Не АккаунтАвторизован() Тогда
		Результат.СостояниеБаланса = "НеАвторизован";
		Результат.ВыполнятьЗагрузкуРезультатов = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Если Не АккаунтАктивирован() Тогда
		Результат.СостояниеБаланса = "НеАктивирован";
		Результат.АдресЭлПочты = СохраненныйАдресЭлПочты();
		Результат.ВыполнятьЗагрузкуРезультатов = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		ТекущийБаланс = РаспознаваниеДокументовSDK.ТекущийБаланс();
	Исключение
		Результат.СостояниеБаланса = "Ошибка";
		Возврат Результат;
	КонецПопытки;
	
	Если ТекущийБаланс.АвторизацияТикетИТС Тогда
		Результат.ПодключениеТестовогоПериодаДоступно = ПодключениеТестовогоПериодаДоступно();
	КонецЕсли;
	
	Если ТекущийБаланс.АвторизацияТикетИТС Или ТекущийБаланс.ТарификацияВключена Тогда
		
		Если ТекущийБаланс.Баланс = 0 Тогда
			
			Результат.СостояниеБаланса = "БалансНулевой";
			Результат.ДатаОкончания = ТекущийБаланс.ДатаОкончания;
			
			Если ЗначениеЗаполнено(Результат.ДатаОкончания) Тогда
				Результат.ПоказатьПредупреждениеНулевойБаланс = Истина;
			КонецЕсли;
			
		ИначеЕсли ТекущийБаланс.Баланс > 0 Тогда
			
			Если ЗначениеЗаполнено(ТекущийБаланс.ДатаОкончания) Тогда
				Результат.СостояниеБаланса = "БалансПоложительныйДатаОкончания";
				Результат.ДатаОкончания = ТекущийБаланс.ДатаОкончания;
				Результат.Баланс = ТекущийБаланс.Баланс;
			Иначе
				Результат.СостояниеБаланса = "БалансПоложительный";
				Результат.Баланс = ТекущийБаланс.Баланс;
			КонецЕсли;
			
		Иначе // ТекущийБаланс.Баланс < 0
			
			Если ТекущийБаланс.Лимит > 0 Тогда
				
				Результат.СостояниеБаланса = "БалансОтрицательный";
				Результат.ДатаОкончания = ТекущийБаланс.ДатаОкончания;
				Результат.Кредит = ТекущийБаланс.Лимит - ТекущийБаланс.Баланс;
				Результат.Использовано = -ТекущийБаланс.Баланс;
				
				Если ЗначениеЗаполнено(Результат.ДатаОкончания) Тогда
					Результат.ПоказатьПредупреждениеНулевойБаланс = Истина;
				КонецЕсли;
				
			Иначе // ТекущийБаланс.Лимит <= 0
				
				Результат.СостояниеБаланса = "СервисОтключен";
				Результат.ДатаОкончания = ТекущийБаланс.ДатаОкончания;
				Результат.Использовано = -ТекущийБаланс.Баланс;
				
				Результат.ПоказатьПредупреждениеСервисОтключен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Не ТекущийБаланс.АвторизацияТикетИТС И Не ТекущийБаланс.ТарификацияВключена
		
		Если Не ЗначениеЗаполнено(ТекущийБаланс.ДатаОкончания) Тогда
			
			Результат.СостояниеБаланса = "ПилотныйРежим";
			
		ИначеЕсли ТекущийБаланс.ДатаОкончания > ТекущаяУниверсальнаяДата() Тогда
			
			Результат.СостояниеБаланса = "ПилотныйРежимДатаОкончания";
			Результат.ДатаОкончания = ТекущийБаланс.ДатаОкончания;
			
		Иначе
			Результат.СостояниеБаланса = "ПилотныйРежимДатаОкончанияНаступила";
			Результат.ДатаОкончания = ТекущийБаланс.ДатаОкончания;
			Результат.ПоказатьТребованиеВключитьИТС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АвторизацияПереопределена()
	
	ПараметрыАвторизацииПереопределяемые = Новый Структура("Логин, Пароль");
	РаспознаваниеДокументовПереопределяемый.ПриВыполненииАвторизации(ПараметрыАвторизацииПереопределяемые);
	Возврат ЗначениеЗаполнено(ПараметрыАвторизацииПереопределяемые.Логин);
	
КонецФункции

Функция СохраненныйАдресЭлПочты()
	
	Настройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Возврат Настройки.АдресЭлПочты;
	
КонецФункции

Функция ПодключениеТестовогоПериодаДоступно()
	
	ИдентификаторСервиса = РаспознаваниеДокументовСлужебныйКлиентСервер.ИдентификаторСервиса();
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСервиса);
	ОписательДоступности = ПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
	Если Не ОписательДоступности.Ошибка Тогда
		Возврат ОписательДоступности.СервисыСопровождения[ИдентификаторСервиса] = "Доступно";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СостояниеЗаданийРаспознавания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЗаданийРаспознаваниеДокументов.ИдентификаторЗадания КАК ИдентификаторЗадания,
		|	СостоянияЗаданийРаспознаваниеДокументов.ИдентификаторИсточникаРаспознавания КАК ИдентификаторИсточникаРаспознавания
		|ПОМЕСТИТЬ ВТ_ЗаданияКОбработке
		|ИЗ
		|	РегистрСведений.СостоянияЗаданийРаспознаваниеДокументов КАК СостоянияЗаданийРаспознаваниеДокументов
		|ГДЕ
		|	СостоянияЗаданийРаспознаваниеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНаСервисеРаспознаваниеДокументов.Обрабатывается)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторРезультата КАК ИдентификаторРезультата
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов КАК РезультатыОбработкиЗаданийРаспознаваниеДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданияКОбработке КАК ЗаданияКОбработке
		|		ПО РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторЗадания = ЗаданияКОбработке.ИдентификаторЗадания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданияКОбработке.ИдентификаторЗадания КАК ИдентификаторЗадания
		|ИЗ
		|	ВТ_ЗаданияКОбработке КАК ЗаданияКОбработке";
	
	РезультатРаспознавания = Новый Структура;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ЗагруженныеДокументы = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("ИдентификаторРезультата");
	ЗаданияКОбработке = РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("ИдентификаторЗадания");
	
	Результат = Новый Структура;
	Результат.Вставить("ЗагруженныеДокументы", ЗагруженныеДокументы);
	Результат.Вставить("ЗаданияКОбработке", ЗаданияКОбработке);
	
	Возврат Результат;
	
КонецФункции

Процедура РегистрацияОшибкиЗагрузки(ИдентификаторЗадания, ИдентификаторДокумента, ТекстОшибки, ТекстДляПользователя)
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, ,
		ИдентификаторДокумента,
		ТекстДляПользователя + Символы.ПС + ТекстОшибки
	);
	
	Документы.РаспознанныйДокумент.СоздатьРаспознанныйДокументСОшибкойЗагрузки(
		ИдентификаторЗадания,
		ИдентификаторДокумента,
		ТекстДляПользователя
	);
	
	Попытка
		ОтправитьОбратнуюСвязьПоОшибкеЗагрузки(ИдентификаторДокумента, ТекстОшибки);
	Исключение
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, ,
			ИдентификаторДокумента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаДокумента(
		ИдентификаторЗадания,
		РаспознанныйДокумент,
		СостояниеЗадания,
		ДокументыБезОшибок
	)
	
	ОбработатьИсходныеФайлы(
		ИдентификаторЗадания,
		РаспознанныйДокумент.ИдентификаторыФайлов,
		СостояниеЗадания.ИдентификаторМобильногоПриложения
	);
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, ,
		ИдентификаторЗадания,
		НСтр("ru = 'Завершено распознавание документа:'") + Символы.ПС + РаспознанныйДокумент.ИдентификаторДокумента
	);
	
	Попытка
		Если РаспознанныйДокумент.Тип = РаспознаваниеДокументовSDK.ТипыДокумента().УниверсальныйФормат Тогда
			
			ЗагрузкаДокументаV2(
				ИдентификаторЗадания,
				РаспознанныйДокумент,
				СостояниеЗадания,
				ДокументыБезОшибок
			);
			
		Иначе
			
			ЗагрузкаДокументаV1(
				ИдентификаторЗадания,
				РаспознанныйДокумент,
				СостояниеЗадания,
				ДокументыБезОшибок
			);
			
		КонецЕсли;
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстДляПользователя = 
			НСтр("ru = 'Произошла ошибка при распознавании документа.
			           |Попробуйте загрузить документ на распознавание еще раз.'");
		
		РегистрацияОшибкиЗагрузки(
			ИдентификаторЗадания,
			РаспознанныйДокумент.ИдентификаторДокумента,
			ТекстОшибки,
			ТекстДляПользователя
		);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаДокументаV1(ИдентификаторЗадания, РаспознанныйДокумент, СостояниеЗадания, ДокументыБезОшибок)
	
	// Адаптер в старый формат загрузки, вызывает v1 и обрабатывает его.
	
	ДатаСоздания = СостояниеЗадания.ДатаСоздания;
	ИдентификаторДокумента = РаспознанныйДокумент.ИдентификаторДокумента;
	
	ДанныеСервиса = РаспознаваниеДокументовКоннекторСлужебный.ПолучитьРезультатПоИдентификатору(ИдентификаторДокумента);
	Если ДанныеСервиса = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при получении информации о распознавании. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Выборка = Новый Структура;
	Выборка.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	РезультатыОбработки = Новый Структура;
	РезультатыОбработки.Вставить("ИдентификаторРезультата", РаспознанныйДокумент.ИдентификаторДокумента);
	РезультатыОбработки.Вставить("ИменаФайлов", СтрСоединить(РаспознанныйДокумент.ИменаФайлов, ","));
	РезультатыОбработки.Вставить("ФайлыДокумента", РаспознанныйДокумент.ИдентификаторыФайлов);
	
	ДанныеСтраниц = Новый Массив;
	Для Каждого ИмяФайла Из РаспознанныйДокумент.ИменаФайлов Цикл
		ДанныеСтраницы = Новый Соответствие;
		ДанныеСтраницы.Вставить("file", ИмяФайла);
		ДанныеСтраниц.Добавить(ДанныеСтраницы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеСервиса.ДесериализованноеЗначение["document"])
	   И ЗначениеЗаполнено(ДанныеСервиса.ДесериализованноеЗначение["document"]["error"]) Тогда
		
		Документы.РаспознанныйДокумент.СоздатьРаспознанныйДокументСОшибкой(
			ДанныеСервиса,
			Выборка,
			РезультатыОбработки, ,
			ДатаСоздания,
			ДанныеСтраниц
		);
	Иначе
		
		ДокументСсылка = Документы.РаспознанныйДокумент.СоздатьРаспознанныйДокумент(
			ДанныеСервиса,
			Выборка,
			РезультатыОбработки,
			ДатаСоздания,
			ДанныеСтраниц
		);
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РаспознанныйДокумент,
			ДокументСсылка,
			НСтр("ru = 'Записан документ с идентификатором:'") + Символы.ПС +
			ИдентификаторДокумента
		);
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументыБезОшибок.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаДокументаV2(ИдентификаторЗадания, РаспознанныйДокумент, СостояниеЗадания, ДокументыБезОшибок)
	
	// Адаптер в новый формат загрузки, вызывает v2 и обрабатывает его.
	
	СвойстваРаспознанногоДокумента = РаспознаваниеДокументовSDK.ПолучитьСвойстваРаспознанногоДокумента(
		РаспознанныйДокумент.ИдентификаторДокумента
	);
	
	ДокументСсылка = Документы.РаспознанныйДокумент.СоздатьРаспознанныйДокументV2(
		СвойстваРаспознанногоДокумента,
		РаспознанныйДокумент,
		ИдентификаторЗадания,
		СостояниеЗадания
	);
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РаспознанныйДокумент,
		ДокументСсылка,
		НСтр("ru = 'Записан документ с идентификатором:'") + Символы.ПС +
		РаспознанныйДокумент.ИдентификаторДокумента
	);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ДокументыБезОшибок.Добавить(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

#КонецОбласти

#КонецОбласти
