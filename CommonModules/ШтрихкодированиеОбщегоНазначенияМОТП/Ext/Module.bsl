
#Область ПрограммныйИнтерфейс

#Область ОбработкаДанныхКодовМаркировки

// Дополняет базовую таблицу "ДанныеКодовМаркировки" необходимыми колонками для табачной продукции.
// 
// Параметры:
//  ДанныеПоШтрихкодам    - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ДанныеКодовМаркировки - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки
Процедура ДобавитьКолонкиТаблицыДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования = Неопределено, ДанныеКодовМаркировки = Неопределено) Экспорт
	
	ОбязательныеКолонки = Новый Структура;
	ОбязательныеКолонки.Вставить("Владелец",                  Неопределено);
	ОбязательныеКолонки.Вставить("Производитель",             Неопределено);
	ОбязательныеКолонки.Вставить("ИННПроизводителя",          Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("ПредставлениеСтатуса",      Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ОбязательныеКолонки.Вставить("GTIN",                      Новый ОписаниеТипов("Строка"));
	ОбязательныеКолонки.Вставить("ТребуетсяВыборСерии",       Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ЕстьВПулеКодовМаркировки",  Новый ОписаниеТипов("Булево"));
	ОбязательныеКолонки.Вставить("ПолныйКодМаркировки",       Новый ОписаниеТипов("Строка"));
	
	ОбязательныеКолонки.Вставить("ТребуетсяУточнениеЧастичногоВыбытия", Новый ОписаниеТипов("Булево"));
	
	Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
		
	Если ПараметрыСканирования <> Неопределено Тогда
		
		ПараметрыДерева = ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам);
		КоллекцияДополнительныхКолонокДереваУпаковокМОТП(ПараметрыДерева, ОбязательныеКолонки);
		
		ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки);
		
	КонецЕсли;
	
	НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(ДанныеКодовМаркировки, ОбязательныеКолонки);
	
КонецПроцедуры

Функция КоллекцияДополнительныхКолонокДереваУпаковокИСМП(ПараметрыДерева, КоллекцияДополнительныхКолонок = Неопределено, ДляВложенныхСтрокДерева = Ложь) Экспорт
	
	Если КоллекцияДополнительныхКолонок = Неопределено Тогда
		КоллекцияДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ИННВладельца",         Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ИННПроизводителя",     Новый ОписаниеТипов("Строка"));
	
	КоллекцияДополнительныхКолонок.Вставить("РодительскаяУпаковка", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ДатаПроизводства",     Новый ОписаниеТипов("Дата"));
	
	Если Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
		КоллекцияДополнительныхКолонок.Вставить("КоличествоГрупповыхУпаковок",       Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если Не ДляВложенныхСтрокДерева И ПараметрыДерева.ЗаполнятьСрокГодности Тогда
		КоллекцияДополнительныхКолонок.Вставить("ГоденДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатуры",   Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатурыРР", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("Статус",                      ОписаниеТиповКолонкиСтатус());
	КоллекцияДополнительныхКолонок.Вставить("ОсобоеСостояние",             ОписаниеТиповКолонкиСтатус());
	
	// В изделиях из натурального меха номер КИЗ не содержит GTIN
	КоллекцияДополнительныхКолонок.Вставить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	Если ПараметрыДерева.ТребуетсяЧастичноеВыбытие Тогда
		
		ТипыЧислоИБулево = Новый Массив();
		ТипыЧислоИБулево.Добавить("Булево");
		ТипыЧислоИБулево.Добавить("Число");
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытие",                    Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВариантУчета",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
		КоллекцияДополнительныхКолонок.Вставить("ЕмкостьПотребительскойУпаковки",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено",            ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеОстаток",             Новый ОписаниеТипов(ТипыЧислоИБулево));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеОстатокГИСМТ",        Новый ОписаниеТипов(ТипыЧислоИБулево));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	ИначеЕсли ПараметрыДерева.ЧастичноеВыбытиеПрименимо Тогда
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено",     ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВариантУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
		
	КонецЕсли;
	
	ДополнитьРасширенныеКолонкиДереваУпаковокИСМП(КоллекцияДополнительныхКолонок);
	
	Возврат КоллекцияДополнительныхКолонок;
	
КонецФункции

Функция КоллекцияДополнительныхКолонокДереваУпаковокМОТП(ПараметрыДерева, КоллекцияДополнительныхКолонок = Неопределено, ДляВложенныхСтрокДерева = Ложь) Экспорт
	
	Если КоллекцияДополнительныхКолонок = Неопределено Тогда
		КоллекцияДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ИННВладельца",         Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ИННПроизводителя",     Новый ОписаниеТипов("Строка"));
	
	КоллекцияДополнительныхКолонок.Вставить("РодительскаяУпаковка", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ДатаПроизводства",     Новый ОписаниеТипов("Дата"));
	
	Если Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
		КоллекцияДополнительныхКолонок.Вставить("КоличествоГрупповыхУпаковок",       Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ПараметрыДерева.УчитыватьМРЦ И Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("МРЦ", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ПараметрыДерева.ИспользуетсяСераяЗона И Не ДляВложенныхСтрокДерева Тогда
		КоллекцияДополнительныхКолонок.Вставить("ВСеройЗоне",        Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("СодержитСерыеКоды", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатуры",   Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("ПредставлениеНоменклатурыРР", Новый ОписаниеТипов("Строка"));
	КоллекцияДополнительныхКолонок.Вставить("Статус",                      ОписаниеТиповКолонкиСтатус());
	
	Если ПараметрыДерева.ТребуетсяЧастичноеВыбытие Тогда
		
		ТипыЧислоИБулево = Новый Массив();
		ТипыЧислоИБулево.Добавить("Булево");
		ТипыЧислоИБулево.Добавить("Число");
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытие",                    Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВариантУчета",        Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
		КоллекцияДополнительныхКолонок.Вставить("ЕмкостьПотребительскойУпаковки",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено",            ОбщегоНазначения.ОписаниеТипаЧисло(10));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеОстаток",             Новый ОписаниеТипов(ТипыЧислоИБулево));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеОстатокГИСМТ",        Новый ОписаниеТипов(ТипыЧислоИБулево));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Новый ОписаниеТипов("Булево"));
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеНоменклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеХарактеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		
	ИначеЕсли ПараметрыДерева.ЧастичноеВыбытиеПрименимо Тогда
		
		КоллекцияДополнительныхКолонок.Вставить("ЧастичноеВыбытиеВыведено", ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	КонецЕсли;
	
	ДополнитьРасширенныеКолонкиДереваУпаковокИСМП(КоллекцияДополнительныхКолонок);
	
	Возврат КоллекцияДополнительныхКолонок;
	
КонецФункции

Функция НормализироватьДанныеДереваУпаковокПоПереданнымКолонкам(Коллекция, КоллекцияДополнительныхКолонок, ДобавленныеКолонки = Неопределено) Экспорт
	
	Если ДобавленныеКолонки = Неопределено Тогда
		ДобавленныеКолонки = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из КоллекцияДополнительныхКолонок Цикл
		
		ИмяКолонки    = КлючЗначение.Ключ;
		ОписаниеТипов = КлючЗначение.Значение;
		
		Если Коллекция.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Коллекция.Колонки.Добавить(ИмяКолонки, ОписаниеТипов);
			ДобавленныеКолонки.Вставить(ИмяКолонки, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеКолонки;
	
КонецФункции

// Рассчитывает инвариантный хэш: из кода исключается МРЦ, убираются скобки
// 
// Параметры:
//  СтрокаДанных  - Массив из СтрокаТаблицыЗначений: См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодама
//                - Структура - Строка данных для расчета.
//  ДанныеРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
Процедура РассчитатьХэшСуммуНормализации(СтрокаДанных, ДанныеРазбора) Экспорт
	
	Если ДанныеРазбора = Неопределено
		Или СтрокаДанных.СоставКодаМаркировки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ХешСуммаНормализации)
		И ЗначениеЗаполнено(СтрокаДанных.НормализованныйШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ВключаяТабачнуюПродукцию = Истина;
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ДанныеРазбора.ВидыПродукции, ВключаяТабачнуюПродукцию) Тогда
		
		Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
				ДанныеРазбора.ВидУпаковки, ДанныеРазбора) Тогда
			
			ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации(
				СтрокаДанных.ВидПродукции);
			НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеРазбора, СтрокаДанных.ВидПродукции, ПараметрыНормализацииКМ);
			
			СтрокаДанных.НормализованныйШтрихкод = НормализованныйШтрихкод;
			СтрокаДанных.ХешСуммаНормализации = ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) Тогда
			ВидПродукции = СтрокаДанных.ВидПродукции;
		ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() Тогда
			ВидПродукции = ДанныеРазбора.ВидыПродукции.Получить(0);
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляХэшаНормализации();
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "КодМаркировки";
		
		СтрокаДанных.НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеРазбора, ВидПродукции, ПараметрыНормализацииКМ);
		СтрокаДанных.ХешСуммаНормализации = ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДанных.НормализованныйШтрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиКода

// Возвращает результат обработки штрихкода с описанием ошибки.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  См. ШтрихкодированиеОбщегоНазначенияИСМП.ИнициализироватьРезультатОбработкиШтрихкода
Функция РезультатОбработкиКодаМаркировкиПриОшибках(ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = ШтрихкодированиеОбщегоНазначенияИСМП.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатДобавления.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатДобавления, ДанныеШтрихкода);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции) Тогда
		Если РезультатДобавления.ВидыПродукции.Найти(ДанныеШтрихкода.ВидПродукции) = Неопределено Тогда
			РезультатДобавления.ВидыПродукции.Добавить(ДанныеШтрихкода.ВидПродукции);
		КонецЕсли;
	Иначе
		Для Каждого ВидПродукции Из ДанныеШтрихкода.ВидыПродукцииКодаМаркировки Цикл
			Если РезультатДобавления.ВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
				РезультатДобавления.ВидыПродукции.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Выполняет проверки перед формированием данных по штрихкодам. 
// 
// Параметры:
//  ДанныеПоШтрихкодам - См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - В случае удачного прохождения проверок - возвращает пустое соответствие,
//    В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		ТребуетсяАвторизацияИСМП = Модуль.ТребуетсяАвторизацияПользователя(ПараметрыСканирования);
		
		Если Не ТребуетсяАвторизацияИСМП Тогда
			Возврат РезультатыПроверок;
		КонецЕсли;
		
	Иначе
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	ВидПродукцииТабак               = Перечисления.ВидыПродукцииИС.Табак;
	ВидПродукцииАльтернативныйТабак = Перечисления.ВидыПродукцииИС.АльтернативныйТабак;
	ВидПродукцииНСП                 = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		// Например, в заказе на Эмиссию можно сканировать EAN и сканирование КМ не требуется
		Если Не ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки
			И СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			И Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции)
			Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Количество() = 1 // Проверка на упаковку с 1 видом продукции.
			Или СтрокаДанных.ПрисутствуетТабачнаяПродукция // Неопределено: АТП или классический табак
			Тогда
			
			ВидыПродукцииПоКоду = Новый Массив;
			Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииТабак) <> Неопределено Тогда
				ВидыПродукцииПоКоду.Добавить(ВидПродукцииТабак);
			КонецЕсли;
			Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииАльтернативныйТабак) <> Неопределено Тогда
				ВидыПродукцииПоКоду.Добавить(ВидПродукцииАльтернативныйТабак);
			КонецЕсли;
			Если СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(ВидПродукцииНСП) <> Неопределено Тогда
				ВидыПродукцииПоКоду.Добавить(ВидПродукцииНСП);
			КонецЕсли;
			Если ВидыПродукцииПоКоду.Количество() > 0 Тогда
				РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
				РезультатОбработкиШтрихкода.ВидыПродукции.Очистить();
				Для Каждого ВидПродукции Из ВидыПродукцииПоКоду Цикл
					РезультатОбработкиШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
				РезультатОбработкиШтрихкода.ТребуетсяАвторизацияИСМП = Истина;
				ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии = Истина;
				СтрокаДанных.ОбработанСОшибками = Истина;
				РезультатыПроверок.Вставить(СтрокаДанных.Штрихкод, РезультатОбработкиШтрихкода);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ПравилаПроверкиНаОшибки = ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив из Структура:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
	ПредставленияСтатусов = Неопределено;
	
	ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(
		ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки,
		ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки")
		И ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Количество() > 0 Тогда
		
		Для Каждого ЭлементДанных Из ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки Цикл
			
			Если ЗначениеЗаполнено(ЭлементДанных.СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДанных.СтрокаДанных.ТекстОшибки = ЭлементДанных.ТекстОшибки;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
		И ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Количество() > 0 Тогда
		
		Если ПредставленияСтатусов = Неопределено Тогда
			ПредставленияСтатусов = ШтрихкодированиеОбщегоНазначенияИСМП.ПредставленияСтатусов();
		КонецЕсли;
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДанных.Статус);
			Если ПредставлениеСтатуса = Неопределено Тогда
				ПредставлениеСтатуса = НСтр("ru='<Неопределен>'");
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ПредставлениеСтатуса);
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			СтрокаДанных.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
			
			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
				
				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				
				ЗапретитьОтключениеКонтроляСтатусов = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
					СтрокаДанных.ВидПродукции,
					ПараметрыСканирования.ВидОперацииИСМП,
					ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
				
				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.Статус                              = СтрокаДанных.Статус;
				ВидДополнения.ВидОперацииИСМП                     = ПараметрыСканирования.ВидОперацииИСМП;
				ВидДополнения.ЗапретитьОтключениеКонтроляСтатусов = ЗапретитьОтключениеКонтроляСтатусов;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборот")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот Цикл
			
			Если ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Способ ввода в оборот: %1'"),
				СтрокаДерева.СпособВводаВОборот);
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборот.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСпособаВводаВОборотОффлайн")
		И ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Количество() > 0 Тогда
		
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн Цикл
			
			Если ЗначениеЗаполнено(СтрокаДерева.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.ТекстОшибки = НСтр("ru = 'Способ ввода в оборот: маркировка остатков'");
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольСпособаВводаВОборотОффлайн.Очистить();
		
	КонецЕсли;
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = (ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимДатаЗапросаГИСМТ)
				И Не ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимИдентификаторЗапросаГИСМТ));
			
			Если ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				ИННВладельцаПредставление = НСтр("ru = 'Отсутствует'");
			Иначе
				ИННВладельцаПредставление = СтрокаДанных.ИННВладельца;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Владелец: %1 (%2)'"),
					СтрокаДанных.Владелец,
					ИННВладельцаПредставление);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1'"),
					ИННВладельцаПредставление);
			Иначе
				ТекстОшибки = НСтр("ru = 'Владелец неопределен'");
			КонецЕсли;
			
			СтрокаДанных.ТекстОшибки = ТекстОшибки;
			СтрокаДанных.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
			
			Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
				
				//@skip-check wrong-string-literal-content
				Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
				
				ВидДополнения = Модуль.ВидДополненияПредставленияОшибки();
				ВидДополнения.Владелец                            = Истина;
				ВидДополнения.ВидОперацииИСМП                     = ПараметрыСканирования.ВидОперацииИСМП;
				Модуль.ДополнитьПредставлениеОшибки(СтрокаДанных, ВидДополнения);
			
			КонецЕсли;
			
		КонецЦикла;
		
		ПравилаПроверкиНаОшибки.КонтрольВладельца.Очистить();
		
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ОписаниеОшибокКонтроляЧастичногоВыбытия(ПравилаПроверкиНаОшибки, ПараметрыСканирования, Истина);
	
	ШтрихкодированиеОбщегоНазначенияИС.ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
		ПравилаПроверкиНаОшибки, ПараметрыСканирования);
	
КонецПроцедуры

// Инициализирует структуру правил для проверки на ошибки данных по кодам маркировки.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Структура - Описание:
// * КонтрольВладельца - Массив - коллекция, куда требуется поместить строки с ошибками при контроле владельца.
// * КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП - Массив - коллекция, куда требуется поместить строки с ошибками при контроле состава упаковок.
// * КонтрольСпособаВводаВОборот - Массив - коллекция, куда требуется поместить строки с ошибками при контроле способа ввода в оборот.
// * КонтрольСерий - Массив - коллекция, куда требуется поместить строки с ошибками при контроле серий.
// * КонтрольСтатусов - Массив - коллекция, куда требуется поместить строки с ошибками при контроле допустимых статусов.
Функция ПравилаПроверкиНаОшибки(ПараметрыСканирования, ДанныеПоШтрихкодам)
	
	ПравилаПроверкиНаОшибки = Новый Структура;
	ПравилаПроверкиНаОшибки.Вставить("ПроверенныеШтрихкоды", Новый Соответствие);
	
	Если ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
		Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.Свойство("ДопустимыеСтатусыМОТП") Тогда
		Возврат ПравилаПроверкиНаОшибки;
	КонецЕсли;
	
	НеобходимыПроверкиРозничнойПродажи = Ложь;
	
	Для Каждого ДопустимыйВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
		
		Если ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(ДопустимыйВидПродукции,
			ПараметрыСканирования.ВидОперацииИСМП,
			ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
			
			НеобходимыПроверкиРозничнойПродажи = Истина;
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыМОТП.Количество() > 0
		И (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
			ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи)
		И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("СтрокиСОшибками",  Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольПустыхУпаковок
		И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП
		И Не ПараметрыСканирования.РазрешенаОбработкаНеНайденныхЛогистическихУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхУпаковок", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДопустимыйСпособВводаВОборот) Тогда
		Если (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
				ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи)
			И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборот",        Новый Массив);
		Иначе
			ПравилаПроверкиНаОшибки.Вставить("КонтрольСпособаВводаВОборотОффлайн", Новый Массив);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСканирования.КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьРасхождениеСоставаУпаковокМеждуИБиИСМП", Новый Массив);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец)
		И (ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(
			ПараметрыСканирования, ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции) Или НеобходимыПроверкиРозничнойПродажи)
		И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж() Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП
		Или НеобходимыПроверкиРозничнойПродажи Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПолногоКодаМаркировки", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтролироватьСоставАгрегатов Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставЛогистическихУпаковок",             Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьСоставГрупповыхУпаковок",                 Новый Массив);
		ПравилаПроверкиНаОшибки.Вставить("КонтролироватьВложенныеТипыШтрихкодаГрупповыхУпаковок", Новый Массив);
	КонецЕсли;
	
	ПравилаПроверкиНаОшибки.Вставить("ПолноеВыбытиеНевозможноРанееВыбывалЧастично",    Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КодМаркировкиВыбывалЧастичноОперацияНевозможна", Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("ОшибкаНастройкиПараметровЧастичногоВыбытия",     Новый Массив);
	ПравилаПроверкиНаОшибки.Вставить("КонтрольУжеДобавленоВДокумент",                  Новый Массив);
	
	Возврат ПравилаПроверкиНаОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеТиповКолонкиСтатус() Экспорт
	
	ТипыЗначенийКолонкиСтатус = Новый Массив();
	ТипыЗначенийКолонкиСтатус.Добавить(Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));
	ТипыЗначенийКолонкиСтатус.Добавить(Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП"));
	
	Возврат Новый ОписаниеТипов(ТипыЗначенийКолонкиСтатус);
	
КонецФункции

Функция ПараметрыПостроенияДерева(ПараметрыСканирования, ДанныеПоШтрихкодам = Неопределено) Экспорт
	
	ПараметрыДерева = Новый Структура();
	ПараметрыДерева.Вставить("ВариантПолученияМРЦ",                  "ВычислениеИЗапрос");
	ПараметрыДерева.Вставить("Организация",                           Неопределено);
	ПараметрыДерева.Вставить("ЭтоПроверкаКодовМаркировкиИСМП",        Ложь);
	ПараметрыДерева.Вставить("ЭтоОтчетПроизводственнойЛинии",         Ложь);
	ПараметрыДерева.Вставить("УчитыватьМРЦ",                          ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ());
	ПараметрыДерева.Вставить("ИспользуетсяСераяЗона",                 Ложь);
	ПараметрыДерева.Вставить("ПроверятьДублиКодовМаркировки",         Неопределено);
	ПараметрыДерева.Вставить("ЗаполнятьСрокГодности",                 Ложь);
	ПараметрыДерева.Вставить("ТребуетсяЧастичноеВыбытие",             Ложь);
	ПараметрыДерева.Вставить("ЧастичноеВыбытиеПрименимо",             Ложь);
	
	Если ПараметрыСканирования <> Неопределено Тогда
		
		Если Не ПараметрыДерева.УчитыватьМРЦ
			И (ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП
			Или ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии) Тогда
			ПараметрыДерева.УчитыватьМРЦ = Истина;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ВариантПолученияМРЦ") Тогда
			ПараметрыДерева.ВариантПолученияМРЦ = ПараметрыСканирования.ВариантПолученияМРЦ;
		КонецЕсли;
		
		ПараметрыДерева.Организация                    = ПараметрыСканирования.Организация;
		ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП = ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП;
		ПараметрыДерева.ЭтоОтчетПроизводственнойЛинии  = ПараметрыСканирования.ЭтоОтчетПроизводственнойЛинии;
		
		Если ПараметрыСканирования.Свойство("ДопустимыПроверкиСеройЗоныМОТП") Тогда
			ПараметрыДерева.ИспользуетсяСераяЗона = ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ПроверятьДублиКодовМаркировки")
			И (ПараметрыДерева.ЭтоПроверкаКодовМаркировкиИСМП
				Или ПараметрыДерева.ЭтоОтчетПроизводственнойЛинии) Тогда
			ПараметрыДерева.ПроверятьДублиКодовМаркировки = ПараметрыСканирования.ПроверятьДублиКодовМаркировки;
		КонецЕсли;
		
		Если ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
				Или ПараметрыСканирования.Свойство("КонтролироватьОкончаниеСрокаГодности") Тогда
			ПараметрыДерева.ЗаполнятьСрокГодности = ПараметрыСканирования.ЗаполнятьСрокГодности
				Или ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности;
		КонецЕсли;
		
		ПараметрыДерева.ТребуетсяЧастичноеВыбытие = ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(
			ПараметрыСканирования,
			ДанныеПоШтрихкодам);
		
		Если Не ПараметрыДерева.ТребуетсяЧастичноеВыбытие Тогда
			Для Каждого ВидПродукции Из ПараметрыСканирования.ДопустимыеВидыПродукции Цикл
				Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции) Тогда
					ПараметрыДерева.ЧастичноеВыбытиеПрименимо = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыДерева;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Модуль.ДобавитьРасширенныеКолонкиТаблицыДанныхКодовМаркировки(ПараметрыСканирования, ОбязательныеКолонки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьРасширенныеКолонкиДереваУпаковокИСМП(КоллекцияДополнительныхКолонок)
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Модуль.ДополнитьРасширенныеКолонкиДереваУпаковокИСМП(КоллекцияДополнительныхКолонок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Модуль.РасширеннаяПроверкаНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасширенныеПроверкиПоСтрокеДанныхМОТП(СтрокаДанных, ПараметрыСканирования, ПравилаПроверкиНаОшибки, ЕстьОшибки)
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		Модуль.РасширенныеПроверкиПоСтрокеДанныхМОТП(СтрокаДанных, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив - Массив структур:
//     * СтрокиСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Коллекция строк, где были выявлены
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиТаблицуДанныеКодовМаркировки(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	ВладелецМожетБытьПустым = Ложь;
	
	Если ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
		ВладелецМожетБытьПустым = Модуль.ЭтоДокументПриобретения(ПараметрыСканирования.СсылкаНаОбъект);
		
	КонецЕсли;
	
	КэшМаркируемойПродукции           = Неопределено;
	ПроверятьСтруктуруКодовМаркировки = ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки;
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
		
		Если СтрокаДанных.ЭтоШтрихкодНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДанных.ВидПродукции)
			И Не СтрокаДанных.ПрисутствуетТабачнаяПродукция Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДанных.СтрокаДерева = Неопределено И Не СтрокаДанных.Входящий Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда
			Если ШтрихкодированиеОбщегоНазначенияИСМП.ТребуетсяВыборСерии(СтрокаДанных, ПараметрыСканирования) Тогда
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(СтрокаДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.ПроверенныеШтрихкоды.Получить(СтрокаДанных.Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихкодированиеОбщегоНазначенияИСМП.ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
			КонтролироватьВладельцевКодовМаркировки = ПараметрыСканирования.КонтролироватьВладельцевКодовМаркировкиИСМП;
		Иначе
			КонтролироватьВладельцевКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьВладельцевКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП)
		КонецЕсли;
		
		ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = (ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимДатаЗапросаГИСМТ)
			И Не ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимИдентификаторЗапросаГИСМТ));
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И КонтролироватьВладельцевКодовМаркировки Тогда
			
			Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
				И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
				ВыполнятьКонтрольСУчетомСеройЗоны = Не СтрокаДанных.ВСеройЗоне;
			Иначе
				ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаПроизводства)
				И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
				ДатаПроизводстваДопускаетКонтроль = СтрокаДанных.ДатаПроизводства >= ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
			Иначе
				ДатаПроизводстваДопускаетКонтроль = Истина;
			КонецЕсли;
			
			Если ВладелецМожетБытьПустым И Не ЗначениеЗаполнено(СтрокаДанных.ИННВладельца) Тогда
			ИначеЕсли Не ШтрихкодированиеОбщегоНазначенияИСМП.ИННСоответствуетОперации(СтрокаДанных.ИННВладельца, ДанныеПоШтрихкодам, ПараметрыСканирования)
				И Не ПродажаРазрешенаВОтсутствиеОтветаГИСМТ
				И ДатаПроизводстваДопускаетКонтроль
				И СтрокаДанных.Статус <> Неопределено
				И СтрокаДанных.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеОбщегоНазначенияИСМП.ЭтоСканированиеВФормеПроверкиИПодбора(ДанныеПоШтрихкодам, ПараметрыСканирования) Тогда
			КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.КонтролироватьСтатусыКодовМаркировкиИСМП;
		Иначе
			КонтролироватьСтатусыКодовМаркировки = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
				СтрокаДанных.ВидПродукции,
				ПараметрыСканирования.ВидОперацииИСМП,
				ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ);
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И КонтролироватьСтатусыКодовМаркировки
			И ЗначениеЗаполнено(СтрокаДанных.Статус) Тогда
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыУпаковокМОТП;
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП;
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП <> Неопределено Тогда
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыНаборовМОТП;
			Иначе
				ДопустимыеСтатусыМОТП = ПараметрыСканирования.ДопустимыеСтатусыМОТП;
			КонецЕсли;
			
			ОтсутствуетДопустимыйСтатус = ДопустимыеСтатусыМОТП.Найти(СтрокаДанных.Статус) = Неопределено;
			
			Если СтрокаДанных <> Неопределено И СтрокаДанных.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен И ЗначениеЗаполнено(СтрокаДанных.РазрешительныйРежимДатаЗапросаГИСМТ) Тогда
				// табачная продукция в статусе Нанесен, владелец не указан, но указан производитель
				Если ШтрихкодированиеОбщегоНазначенияИСМП.ИННСоответствуетОперации(СтрокаДанных.ИННПроизводителя, ДанныеПоШтрихкодам, ПараметрыСканирования, Ложь) Тогда
					ОтсутствуетДопустимыйСтатус = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
				ОтсутствуетДопустимыйСтатус = Ложь;
			КонецЕсли;
			
			Если ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП
				И ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП Тогда
				ВыполнятьКонтрольСУчетомСеройЗоны = Не СтрокаДанных.ВСеройЗоне;
			Иначе
				ВыполнятьКонтрольСУчетомСеройЗоны = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаПроизводства)
				И ВыполнятьКонтрольСУчетомСеройЗоны Тогда
				ДатаПроизводстваДопускаетКонтроль = СтрокаДанных.ДатаПроизводства >= ПараметрыСканирования.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП;
			Иначе
				ДатаПроизводстваДопускаетКонтроль = Истина;
			КонецЕсли;
			
			Если ОтсутствуетДопустимыйСтатус
				И ДатаПроизводстваДопускаетКонтроль Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.СтрокиСОшибками.Добавить(СтрокаДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
			И ШтрихкодированиеОбщегоНазначенияИСМП.СтрокаСодержитОшибкиЧастичногоВыбытия(
				СтрокаДанных,
				ПараметрыСканирования,
				ПравилаПроверкиНаОшибки,
				КэшМаркируемойПродукции) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		РасширенныеПроверкиПоСтрокеДанныхМОТП(СтрокаДанных, ПараметрыСканирования, ПравилаПроверкиНаОшибки, ЕстьОшибки);
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПолногоКодаМаркировки") Тогда
			
			ВыполнятьКонтроль = (ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов
				И СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
					Или Не ПараметрыСканирования.ОперацияНанесенияТолькоДляНаборов;
			
			ДанныеРазбора = СтрокаДанных.ДанныеРазбора;
			Если ВыполнятьКонтроль
				И ДанныеРазбора <> Неопределено
				И (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
						ДанныеРазбора.ВидУпаковки, ДанныеРазбора)) Тогда
				
				СоставКодаМаркировки   = ДанныеРазбора.СоставКодаМаркировки;
				КодВключаетКриптоХвост = Ложь;
				
				Если СоставКодаМаркировки <> Неопределено Тогда
					Если СоставКодаМаркировки.Свойство("ВключаетКриптоХвост") Тогда
						КодВключаетКриптоХвост = СоставКодаМаркировки.ВключаетКриптоХвост;
					КонецЕсли;
				КонецЕсли;
				
				Если Не КодВключаетКриптоХвост
					И Не СтрокаДанных.ЕстьВПулеКодовМаркировки
					И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ПродукцияПодлежитОбязательнойОнлайнПроверкеПередРозничнойПродажей(
						СтрокаДанных.ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП, ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ) Тогда
					
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных,
							НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
							|Отсканируйте полный код маркировки.'")));
					
				ИначеЕсли Не КодВключаетКриптоХвост
					И ПроверятьСтруктуруКодовМаркировки Тогда
					
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных,
							НСтр("ru = 'В структуре кода маркировки отсутствует криптохвост.
							|Отсканируйте полный код маркировки или в настройках сканирования отключите опцию ""Проверять структуру кодов маркировки"".'")));
					
				ИначеЕсли ПроверятьСтруктуруКодовМаркировки
					И КодВключаетКриптоХвост
					И ДанныеРазбора.Детализация.ВключаетИдентификаторыПрименения
					И Не ДанныеРазбора.Детализация.СодержитРазделительGS Тогда
					
					ЕстьОшибки = Истина;
					ПравилаПроверкиНаОшибки.КонтрольПолногоКодаМаркировки.Добавить(
						Новый Структура(
							"СтрокаДанных, ТекстОшибки",
							СтрокаДанных, НСтр("ru = 'В структуре кода маркировки отстутствуют разделители GS'")));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру, описывающую результат обработки кода маркировки.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода)
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
//  КэшОбщихМодулей - Неопределено, Структура - Кешированные значения модулей
// Возвращаемое значение:
//  Структура - содержит в себе информацию по результату обработки штрихкодов табачной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено, КэшОбщихМодулей = Неопределено) Экспорт

	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИСМП.ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
	РезультатОбработки.ДанныеШтрихкода = ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);

	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда

		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;

	КонецЕсли;

	ШтрихкодированиеОбщегоНазначенияИСМП.ЗаполнитьРезультатОбработкиШтрихкодаЧастичноеВыбытие(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);

	ШтрихкодированиеОбщегоНазначенияИСМП.ЗаполнитьРезультатОбработкиШтрихкодаПроверкаСредствамиККТ(
		ДанныеШтрихкода, РезультатОбработки, ПараметрыСканирования);

 	Если Не РезультатОбработки.ТребуетсяУточнениеДанных
		И Не (РезультатОбработки.ТребуетсяПроверкаСредствамиККТ
			  И Не РезультатОбработки.ПроверкаСредствамиККТЗавершена)
		И Форма <> Неопределено Тогда

		РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);

	ИначеЕсли ПараметрыСканирования.РасширеннаяВерсияГосИС Тогда

		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначенияИС.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный", КэшОбщихМодулей);
		МодульШтрихкодированиеИСМПСлужебный.СохранениеКодаМаркировкиВПул(РезультатОбработки, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти
