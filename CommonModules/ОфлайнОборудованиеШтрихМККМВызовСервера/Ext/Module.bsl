
#Область ПрограммныйИнтерфейс

// Загружаемые данные из ККМ.
// 
// Параметры:
//  ТекстСодержания - Строка -  Текст содержания
//  ВыходныеПараметры - Структура -Выходные параметры
// 
// Возвращаемое значение:
//  Булево - Загружаемые данные из ККМ
Функция ЗагружаемыеДанныеИзККМ(ТекстСодержания, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВсегоСтрок = ТекстСодержания.КоличествоСтрок();
	
	ЗагружаемыеДанныеИзККМ = МенеджерОфлайнОборудованияКлиентСервер.ЗагружаемыеДанныеИзККМ();
	
	ПродолжатьЧтениеФайла = Ложь;
	ТекстОшибки = "";
	Строка = ТекстСодержания.ПолучитьСтроку(1);
	
	// Проверяем обработанность файла.
	Если Строка = "#" Тогда
		Индекс = 4;
		ПродолжатьЧтениеФайла = Истина;
	ИначеЕсли Строка = "@" Тогда
		ТекстОшибки = НСтр("ru='Файл загрузки был обработан ранее.'");
		Результат = Ложь;
	Иначе
		ТекстОшибки = НСтр("ru='Загрузка невозможна. Неизвестный формат отчета.'");
		Результат = Ложь;
	КонецЕсли;
	
	Смены = Новый Массив;
	ТекущаяСмена = Неопределено;
	ОткрытТэг = Ложь;
	СтрокаJSON = "";
	Транзакция = Неопределено;
	
	// В цикле читаем транзакции.
	Пока ПродолжатьЧтениеФайла Цикл
		
		// Получаем строку с очередной транзакцией.
		Строка = ТекстСодержания.ПолучитьСтроку(Индекс);
		
		Если Строка = "#" Тогда
			Индекс = Индекс + 3;
			Продолжить;
		КонецЕсли;
		
		// Все строки с тэгами и внутри тэгов пропускаются.
		Если Лев(Строка, 2) = "</" Тогда
			ОткрытТэг = Ложь;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
			РезультатЧтения = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			СтрокаJSON = ""; 
			РазобратьJSONСтруктуру(РезультатЧтения, Транзакция, ТекущаяСмена);
			Индекс = Индекс + 1;
			Продолжить;
		ИначеЕсли Лев(Строка, 1) = "<" Тогда
			ОткрытТэг = Истина;
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		Если ОткрытТэг Тогда
			СтрокаJSON = СтрокаJSON + Строка;
			Индекс = Индекс + 1;
			Продолжить;
			КонецЕсли;
		
		// Если транзакция существует.
		Если ПустаяСтрока(Строка) Тогда
			
			Если Индекс <= ВсегоСтрок Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			ПродолжатьЧтениеФайла = Ложь;
			
		Иначе
			
			Транзакция = ПустаяТранзакция();
			
			// Раскладываем транзакцию на поля.
			
			ТранзакцияЗаполнена = ТранзакцияЗаполнена(СтрЗаменить(Строка, ";", Символы.ПС), Транзакция, ТекстОшибки);
			
			Если НЕ ТранзакцияЗаполнена Тогда
				
				Индекс = Индекс + 1;
				Продолжить;
				
			КонецЕсли;
			
			Если Транзакция.Тип = 1 ИЛИ Транзакция.Тип = 11 Тогда
				// Продажа товара.
				ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция);
			ИначеЕсли Транзакция.Тип = 2 ИЛИ Транзакция.Тип = 12 Тогда
				// Сторно продажи/возврата товара.
				Если НЕ УдалитьТранзакциюИзЧека(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
					ПродолжатьЧтениеФайла = Ложь;
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли Транзакция.Тип = 3 ИЛИ Транзакция.Тип = 4 ИЛИ Транзакция.Тип = 13 ИЛИ Транзакция.Тип = 14 Тогда
				// Возврат товара.
				ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция);
			ИначеЕсли Транзакция.Тип = 40 Тогда
				// Оплата.
				ДобавитьТранзакциюВЧек(ТекущаяСмена, Смены, Транзакция, Истина);
			ИначеЕсли Транзакция.Тип = 15 ИЛИ Транзакция.Тип = 16 ИЛИ Транзакция.Тип = 17 ИЛИ Транзакция.Тип = 18 Тогда
				// Скидка / надбавка на товар.
				Если НЕ ДобавитьСкидкуНаТовар(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
					ПродолжатьЧтениеФайла = Ложь;
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли Транзакция.Тип = 35 ИЛИ Транзакция.Тип = 36 ИЛИ Транзакция.Тип = 37 ИЛИ Транзакция.Тип = 38 Тогда
				// Скидка / надбавка на чек.
				Если НЕ ДобавитьСкидкуНаЧек(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
					ПродолжатьЧтениеФайла = Ложь;
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли Транзакция.Тип = 55 Тогда
				// Закрытие чека.
				Если НЕ ЗакрытьЧек(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
					ПродолжатьЧтениеФайла = Ложь;
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли Транзакция.Тип = 56 ИЛИ Транзакция.Тип = 58 Тогда
				// Отмена чека.
				УдалитьЧек(ТекущаяСмена, Транзакция, ТекстОшибки);
			ИначеЕсли Транзакция.Тип = 61 ИЛИ Транзакция.Тип = 63 Тогда
				// Z-отчет (закрытие смены).
				ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
			ИначеЕсли Транзакция.Тип = 80 Тогда
				// Возврат по номерам чека и транзакции.
				Если НЕ ВозвратПоНомеруЧека(ТекущаяСмена, Смены, Транзакция, ТекстОшибки) Тогда
					ПродолжатьЧтениеФайла = Ложь;
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли Транзакция.Тип = 160 ИЛИ Транзакция.Тип = 180 Тогда
				// Акцизный товар.
				Если НЕ ДобавитьШтрихкодМарки(ТекущаяСмена, Транзакция, ТекстОшибки) Тогда
					ПродолжатьЧтениеФайла = Ложь;
					Результат = Ложь;
				КонецЕсли;
			ИначеЕсли Транзакция.Тип = 186  Тогда
				// Акцизный товар.
				ДобавитьПостановкуНаКран(ТекущаяСмена, Смены, Транзакция, ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если Результат Тогда
		
		// Если текущая смена не закрыта, закрываем ее.
		Если НЕ ТекущаяСмена = Неопределено И НЕ ЗначениеЗаполнено(ТекущаяСмена.ДатаЗакрытия) Тогда
			ЗакрытьСмену(ТекущаяСмена, Смены, Транзакция);
		КонецЕсли;
		
		// Перебираем смены.
		Для Каждого Смена Из Смены Цикл
			
			ОтчетОПродажахККМ = МенеджерОфлайнОборудованияКлиентСервер.ОтчетОПродажахККМ();
			
			ОтчетОПродажахККМ.НомерСмены = Смена.Номер;
			ОтчетОПродажахККМ.ДатаОткрытияСмены = Смена.ДатаОткрытия;
			ОтчетОПродажахККМ.ДатаЗакрытияСмены = Смена.ДатаЗакрытия;
			
			// Перебираем все чеки смены.
			Для Каждого Чек Из Смена.Чеки Цикл
				
				// Если чек закрыт.
				Если Чек.Закрыт Тогда
					
					Если Чек.ТипОперации = 186 Тогда
						
						ВскрытиеТарыККМ = МенеджерОфлайнОборудованияКлиентСервер.ВскрытиеТарыККМ();
						
						ВскрытиеТарыККМ.Дата  = Чек.ДатаЧека;
						ВскрытиеТарыККМ.Номер = Чек.НомерЧека;
						
						Если Чек.Товары.Количество() > 1 Тогда
							
							ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
							
							ЧекККМ.ДатаЧека = Чек.ДатаЧека;
							ЧекККМ.НомерЧека = Чек.НомерЧека;
							
						КонецЕсли;
						
						Для Каждого Товар Из Чек.Товары Цикл
							
							Если Товар.Свойство("Код") Тогда
								
								Если НЕ Товар.Количество = 0 Тогда
									
									ТоварЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
									
									ТоварЧекаККМ.Код 		= Товар.Код;
									ТоварЧекаККМ.Цена 		= Товар.Цена;
									ТоварЧекаККМ.Сумма 		= Товар.Сумма;
									ТоварЧекаККМ.Количество = Товар.Количество;
									
									Если ЗначениеЗаполнено(Товар.ШтрихкодАлкогольнойПродукции) Тогда
										ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(Товар.ШтрихкодАлкогольнойПродукции);
									КонецЕсли;
									
									ТоварЧекаККМ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
									
									ЧекККМ.Товары.Добавить(ТоварЧекаККМ);
									
								КонецЕсли;
								
							Иначе
								
								ТоварВскрытияККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварВскрытияТарыККМ();
								
								ТоварВскрытияККМ.Код 		= Чек.Код;
								ТоварВскрытияККМ.Количество = Товар.Количество;
								ТоварВскрытияККМ.ШтрихкодАлкогольнойПродукции.Добавить(Товар.КодМаркировки);
								
								ВскрытиеТарыККМ.НомерДокумента = Чек.НомерДокумента;
								ВскрытиеТарыККМ.ПостановкаНаКран = Товар.ПостановкаНаКран;
								
								ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияККМ);
							КонецЕсли;
							
						КонецЦикла;
						
						ЗагружаемыеДанныеИзККМ.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
						
						Для Каждого Оплата Из Чек.Оплаты Цикл
							
							ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
							
							Если Оплата.ТипОплаты = "0" Тогда
								ОплатаЧекаККМ.СуммаНаличнойОплаты = Оплата.Сумма;
							Иначе
								ОплатаЧекаККМ.СуммаЭлектроннойОплаты = Оплата.Сумма;
							КонецЕсли;
							
							ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
							
						КонецЦикла;
						
						ОпределитьТипРасчетаЧека(ЧекККМ);
						
						ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
						
					Иначе
						
						ЧекККМ = МенеджерОфлайнОборудованияКлиентСервер.ЧекККМ();
						
						ЧекККМ.ДатаЧека = Чек.ДатаЧека;
						ЧекККМ.НомерЧека = Чек.НомерЧека;
						
						// Перебираем продажи/возвраты товаров чека.
						Для Каждого Товар Из Чек.Товары Цикл
							
							Если НЕ Товар.Количество = 0 Тогда
								
								ТоварЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ТоварЧекаККМ();
								
								ТоварЧекаККМ.Код 		= Товар.Код;
								ТоварЧекаККМ.Цена 		= Товар.Цена;
								ТоварЧекаККМ.Сумма 		= Товар.Сумма;
								ТоварЧекаККМ.Количество = Товар.Количество;
								
								Если ЗначениеЗаполнено(Товар.ШтрихкодАлкогольнойПродукции) Тогда
									ТоварЧекаККМ.ШтрихкодыМаркированнойПродукции.Добавить(Товар.ШтрихкодАлкогольнойПродукции);
								КонецЕсли;
								
								ТоварЧекаККМ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
								
								ЧекККМ.Товары.Добавить(ТоварЧекаККМ);
								
							КонецЕсли;
							
						КонецЦикла;
						
						Для Каждого Оплата Из Чек.Оплаты Цикл
							
							ОплатаЧекаККМ = МенеджерОфлайнОборудованияКлиентСервер.ОплатаЧекаККМ();
							
							Если Оплата.ТипОплаты = "0" Тогда
								ОплатаЧекаККМ.СуммаНаличнойОплаты = Оплата.Сумма;
							Иначе
								ОплатаЧекаККМ.СуммаЭлектроннойОплаты = Оплата.Сумма;
							КонецЕсли;
							
							ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
							
						КонецЦикла;
						
						ОпределитьТипРасчетаЧека(ЧекККМ);
						
						ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗагружаемыеДанныеИзККМ.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат Тогда
		ВыходныеПараметры.Добавить(ЗагружаемыеДанныеИзККМ);
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Файл очистки данных.
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Файл очистки данных
Функция ФайлОчисткиДанных() Экспорт
	
	#Если Не МобильноеПриложениеСервер Тогда
	Файл = Новый ТекстовыйДокумент();
	
	ПерваяСтрока = "##@@&&";
	Файл.ДобавитьСтроку(ПерваяСтрока + "$$$CLR {COM_GR_TOV}");
	Файл.ДобавитьСтроку("#");
	
	Возврат Файл;
	#КонецЕсли
	
КонецФункции

// Выгружаемые данные ВККМ.
// 
// Параметры:
//  РасширеннаяВыгрузка - Булево - Расширенная выгрузка
//  ЧастичнаяВыгрузка - Булево - Частичная выгрузка
//  Товары - Массив - Товары
//  ФорматОбмена - Строка - Формат обмена
//  ВыходныеПараметры - Структура - Выходные параметры.
// 
// Возвращаемое значение:
//  ТекстовыйДокумент - Выгружаемые данные ВККМ
Функция ВыгружаемыеДанныеВККМ(РасширеннаяВыгрузка, ЧастичнаяВыгрузка, Товары, ФорматОбмена, ВыходныеПараметры) Экспорт
	
	#Если Не МобильноеПриложениеСервер Тогда
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	
	Разделитель = Разделитель();
	
	Если ЧастичнаяВыгрузка Тогда
		ТекстовыйДокумент.ДобавитьСтроку("##@@&&$$$RPL");
		ТекстовыйДокумент.ДобавитьСтроку("#");
	Иначе
		
		ПерваяСтрока = "##@@&&";
		
		Если РасширеннаяВыгрузка Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ПерваяСтрока + "$$$CLR {COM_GR_TOV}" + " $$$ADD");
		Иначе
			ТекстовыйДокумент.ДобавитьСтроку(ПерваяСтрока + "$$$CLR" + " $$$ADD");
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку("#");
		
	КонецЕсли;
	
	Если РасширеннаяВыгрузка Тогда
		
		Для Каждого ТекГруппа Из Товары.ГруппыТоваров Цикл
			
			ДанныеДляЗаполнения = Новый Структура;
			ДанныеДляЗаполнения.Вставить("Код", Формат(ТекГруппа.Код, "ЧН=0; ЧГ=0"));
			ДанныеДляЗаполнения.Вставить("Наименование", ИсходнаяСтрока(ТекГруппа.Наименование));
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(ТекГруппа.КодГруппы, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(ТекстовыйДокумент, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	БлокДополнительныхАтрибутов = "";
	
	Для Каждого ТекТовар Из Товары.Товары Цикл
		
			Параметры = Новый Структура;
			
			Параметры.Вставить("Разделитель",			Разделитель);
			Параметры.Вставить("Уровень",				"Номенклатура");
			Параметры.Вставить("Источник",				ТекТовар);
			Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
			Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
			
			Если ЗначениеЗаполнено(ТекТовар.КодЕдиницыИзмерения) Тогда
				
				Для Каждого ЕИ Из Товары.ЕдиницыИзмерения Цикл
					
					Если ЕИ.Код = ТекТовар.КодЕдиницыИзмерения Тогда
						Параметры.Вставить("БазоваяЕИ", ЕИ.Наименование);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Параметры.Вставить("БазоваяЕИ", "");
			КонецЕсли;
			
			ДополнитьФайл(, ТекстовыйДокумент, Параметры, БлокДополнительныхАтрибутов, ВыходныеПараметры);
		
	КонецЦикла;
	
	Если ФорматОбмена=0 И НЕ ПустаяСтрока(БлокДополнительныхАтрибутов) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(БлокДополнительныхАтрибутов);
	КонецЕсли;
	
	СформироватьСтавкиНДС(ТекстовыйДокумент, ФорматОбмена);
	
	Возврат ТекстовыйДокумент;
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииРаботыСТранзакциями

Функция ПустаяТранзакция()
	
	Транзакция = Новый Структура;
	
	Транзакция.Вставить("Номер", 0);
	
	Транзакция.Вставить("ДатаИВремя", Дата(1,1,1));
	
	// Тип транзакции.
	Транзакция.Вставить("Тип", 0);
	
	// Номер чека транзакции.
	Транзакция.Вставить("НомерЧека", 0);
	
	// Поле №8.
	Транзакция.Вставить("Поле8", "");
	
	// Поле №9.
	Транзакция.Вставить("Поле9", 0);
	
	// Поле №10.
	Транзакция.Вставить("Поле10", 0);
	
	// Поле №11.
	Транзакция.Вставить("Поле11", 0);
	
	// Поле №12.
	Транзакция.Вставить("Поле12", 0);
	
	Возврат Транзакция;
	
КонецФункции

Функция ТранзакцияЗаполнена(Строка, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	// Номер транзакции.
	Попытка
		Транзакция.Номер = Число(СтрПолучитьСтроку(Строка, 1));
	Исключение
		Транзакция.Номер = 0;
	КонецПопытки;
	
	// Дата и время транзакции.
	
	ДатаТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 2), ".", Символы.ПС);
	ВремяТранзакции = СтрЗаменить(СтрПолучитьСтроку(Строка, 3), ":", Символы.ПС);
	
	Год = Число(СтрПолучитьСтроку(ДатаТранзакции, 3));
	Если Год < 100 Тогда
		Год = 2000 + Год;
	КонецЕсли;
	
	Попытка
		
		Транзакция.ДатаИВремя = 
			Дата(Год,
				Число(СтрПолучитьСтроку(ДатаТранзакции, 2)),
				Число(СтрПолучитьСтроку(ДатаТранзакции, 1)),
				Число(СтрПолучитьСтроку(ВремяТранзакции, 1)),
				Число(СтрПолучитьСтроку(ВремяТранзакции, 2)),
				Число(СтрПолучитьСтроку(ВремяТранзакции, 3)));
			
	Исключение
		Транзакция.ДатаИВремя = Дата(1,1,1);
	КонецПопытки;
	
	// Тип транзакции.
	Попытка
		Транзакция.Тип = Число(СтрПолучитьСтроку(Строка, 4));
	Исключение
		Транзакция.Тип = 0;
	КонецПопытки;
	
	// Номер чека транзакции.
	Попытка
		Транзакция.НомерЧека = Число(СтрПолучитьСтроку(Строка, 6));
	Исключение
		Транзакция.НомерЧека = 0;
	КонецПопытки;
	
	// Поле №8.
	Попытка
		Транзакция.Поле8 = СтрПолучитьСтроку(Строка, 8);
	Исключение
		Транзакция.Поле8 = "";
	КонецПопытки;
	
	// Поле №9.
	Попытка
		Транзакция.Поле9 = Число(СтрПолучитьСтроку(Строка, 9));
	Исключение
		Транзакция.Поле9 = 0;
	КонецПопытки;
	
	// Поле №10.
	Попытка
		Транзакция.Поле10 = Число(СтрПолучитьСтроку(Строка, 10));
	Исключение
		Транзакция.Поле10 = 0;
	КонецПопытки;
	
	// Поле №11.
	Попытка
		Транзакция.Поле11 = Число(СтрПолучитьСтроку(Строка, 11));
	Исключение
		Транзакция.Поле11 = 0;
	КонецПопытки;
	
	// Поле №12.
	Попытка
		Транзакция.Поле12 = Число(СтрПолучитьСтроку(Строка, 12));
	Исключение
		Транзакция.Поле12 = 0;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Транзакция.Тип) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьТранзакциюВЧек(Смена, Смены, Транзакция, Оплата = Ложь)
	
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		
		ОткрытьЧек(Смена, Смены, Транзакция);
		ТекущийЧек = Смена.Чеки[Смена.Чеки.Количество()-1];
		
	КонецЕсли;
	
	Если Оплата Тогда
		
		ОплатыЧека = ТекущийЧек.Оплаты;
		
		НайденныеОплаты = НайтиСтроки(ОплатыЧека, Новый Структура("КодВидаОплаты", Транзакция.Поле11));
		
		Если НайденныеОплаты.Количество() > 0 Тогда
			
			Оплата = ОплатыЧека[НайденныеОплаты[0].ИндексВМассиве];
			Оплата.Сумма = Оплата.Сумма + Транзакция.Поле12 - Транзакция.Поле10;	// Сумма оплаты = Сумма оплаты + Сумма оплаты транзакции - Сумма сдачи транзакции.
			
		Иначе
			
			НоваяОплата = Новый Структура;
			
			НоваяОплата.Вставить("ТипОплаты", ?(Транзакция.Поле11 = 1, "0", "1")); // 1 - предопределенный тип оплаты "наличные".
			НоваяОплата.Вставить("КодВидаОплаты", Транзакция.Поле11);
			НоваяОплата.Вставить("Сумма", Транзакция.Поле12 - Транзакция.Поле10);
			
			ОплатыЧека.Добавить(НоваяОплата);
			
		КонецЕсли;
		
	Иначе
		
		НовыйТовар = Новый Структура;
		
		НовыйТовар.Вставить("Код", Транзакция.Поле8);
		НовыйТовар.Вставить("Количество", Транзакция.Поле11);
		НовыйТовар.Вставить("Цена", Транзакция.Поле10);
		НовыйТовар.Вставить("Сумма", Транзакция.Поле12);
		НовыйТовар.Вставить("НомерТранзакции", Транзакция.Номер);
		НовыйТовар.Вставить("ДатаИВремяТранзакции", Транзакция.ДатаИВремя);
		НовыйТовар.Вставить("ШтрихкодАлкогольнойПродукции", "");
		
		ТекущийЧек.Товары.Добавить(НовыйТовар);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьТранзакциюИзЧека(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено ИЛИ ТекущийЧек.Товары.Количество()=0 Тогда
		Результат = Ложь;
	Иначе
		
		СторнируемаяТранзакция = Неопределено;
		
		Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
			
			Если ТекТовар.Свойство("Код") И ТекТовар.Код = Транзакция.Поле8 И ТекТовар.Количество = -1*Транзакция.Поле11 И ТекТовар.Цена = Транзакция.Поле10 Тогда
				СторнируемаяТранзакция = ТекТовар;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СторнируемаяТранзакция<>Неопределено Тогда
			ТекущийЧек.Товары.Удалить(ТекущийЧек.Товары.Найти(СторнируемаяТранзакция));
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЧеками

Процедура ОткрытьЧек(Смена, Смены, Транзакция)
	
	// Проверяем инициализированность текущей смены.
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Чек = Новый Структура;
	
	Чек.Вставить("Закрыт", Ложь);
	Чек.Вставить("НомерЧека", Транзакция.НомерЧека);
	Чек.Вставить("ДатаЧека"); // заполняется при закрытии чека
	Чек.Вставить("Товары", Новый Массив);
	Чек.Вставить("Оплаты", Новый Массив);
	Чек.Вставить("ТипОперации", Транзакция.Тип);
	
	Смена.Чеки.Добавить(Чек);
	
КонецПроцедуры

Функция ЗакрытьЧек(Смена, Транзакция, ТекстОшибки)
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.НомерЧека, "ЧГ=0"));
		Результат = Ложь;
	Иначе
		ТекущийЧек.Закрыт = Истина;
		ТекущийЧек.ДатаЧека = Транзакция.ДатаИВремя;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЧек(Смена, НомерЧека)
	
	НайденныеЧеки = НайтиСтроки(Смена.Чеки, Новый Структура("НомерЧека", НомерЧека));
	
	Если НайденныеЧеки.Количество()>0 Тогда
		Возврат Смена.Чеки[НайденныеЧеки[0].ИндексВМассиве];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция УдалитьЧек(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек<>Неопределено Тогда
		Смена.Чеки.Удалить(Смена.Чеки.Найти(ТекущийЧек));
	Иначе
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВозвратПоНомеруЧека(Смена, Смены, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	Если Смена=Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено Тогда
		ОткрытьЧек(Смена, Смены, Транзакция);
		ТекущийЧек = Смена.Чеки[Смена.Чеки.Количество()-1];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСоСменами

Процедура ОткрытьСмену(Смена, Смены, Транзакция)
	
	// Если предыдущая смена не закрыта, закрываем ее.
	Если Смена<>Неопределено И НЕ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ЗакрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Смена = Новый Структура;
	
	Смена.Вставить("Номер");
	Смена.Вставить("ДатаОткрытия", Транзакция.ДатаИВремя);
	Смена.Вставить("ДатаЗакрытия");
	Смена.Вставить("Чеки", Новый Массив);
	
КонецПроцедуры

Процедура ЗакрытьСмену(Смена, Смены, Транзакция)
	
	// Если смена не открыта/закрыта, открываем ее.
	Если Смена = Неопределено ИЛИ ЗначениеЗаполнено(Смена.ДатаЗакрытия) Тогда
		ОткрытьСмену(Смена, Смены, Транзакция);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Смена.Номер) Тогда
		Смена.Номер = Транзакция.Поле8;
	КонецЕсли;
	
	Смена.ДатаЗакрытия = Транзакция.ДатаИВремя;
	Смены.Добавить(Смена);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСНалогами

Функция КодНалогаПоСтавкеНДС(СтавкаНДС)
	
	КодНалога = Неопределено;
	
	Если СтавкаНДС = "0" Тогда
		
		КодНалога = 4;
		
	ИначеЕсли СтавкаНДС = "10" Тогда
		
		КодНалога = 2;
		
	ИначеЕсли СтавкаНДС = "18" Тогда
		
		КодНалога = 5;
		
	ИначеЕсли СтавкаНДС = "none" Тогда
		
		КодНалога = 3;
		
	ИначеЕсли СтавкаНДС = "20" Тогда
		
		КодНалога = 1;
		
	Иначе
		
		Возврат "";
	КонецЕсли;
	
	Возврат КодНалога;
	
КонецФункции

Процедура СформироватьСтавкиНДС(ТекстовыйФайл, ФорматОбмена)
	
	Результат = Истина;
	
	Налоги = СпискиНалоговИКомбинацийНалогов();
	
	БлокСтавок = "";
	БлокГрупп = "";
	
	Если Налоги.Количество() = 0 Тогда
		Результат = Ложь;
	Иначе
		
		Для Каждого ТекНалог Из Налоги Цикл
			
			Если ТекНалог.Ставки.Количество() = 0 Тогда
				Результат = Ложь;
				Прервать;
			Иначе
				
				Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
					
					Если ТекСтавка.Значение = 18 И ФорматОбмена = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					Код = Формат(ТекСтавка.Код, "ЧЦ=2; ЧДЦ=; ЧГ=0");
					Текст30 = ?(СтрДлина(ТекСтавка.Текст)>30, Лев(ТекСтавка.Текст, 30), ТекСтавка.Текст);
					Текст25 = ?(СтрДлина(ТекСтавка.Текст)>25, Лев(ТекСтавка.Текст, 25), ТекСтавка.Текст);
					
					БлокГрупп = БлокГрупп + ?(ЗначениеЗаполнено(БлокГрупп), Символы.ПС, "") + "*"
								+ Код + ";"		// Код группы налогов.
								+ Текст25 + ";"	// Название группы налогов.
								+ Код + ";"		// Номер налога в группе.
								+ Код + ";";	// Код налога.
					
					БлокСтавок = БлокСтавок + ?(ЗначениеЗаполнено(БлокСтавок), Символы.ПС, "") + "+"
								+ Код + ";"																	// Код налога.
								+ Текст25 + ";"																// Название налога.
								+ Текст30 + ";"																// Текст для печати.
								+ Формат(ТекСтавка.Значение, "ЧЦ=5; ЧДЦ=1; ЧРД=.; ЧН=0; ЧГ=0") + ";"		// Процентная ставка налога.
								+ Код;																		// Номер налога в ККМ.
							
				КонецЦикла;
								
			КонецЕсли;
					
		КонецЦикла;
			
	КонецЕсли;
	
	БлокНалогов = БлокГрупп + Символы.ПС + БлокСтавок;
	
	БлокНастроек = БлокНалогов;
	
	Если Результат Тогда
		
		Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
			
			// Определяем и удаляем блок видов оплаты.
			ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(3);
			
			Если Лев(ТекущаяСтрока, 1) = "*" Тогда
				
				ИндексПервойСтроки = 3;
				
				Для ИндексСтроки = ИндексПервойСтроки По ТекстовыйФайл.КоличествоСтрок() Цикл
					
					ИндексПоследнейСтроки = ИндексСтроки;
					ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
					
					Если Лев(ТекущаяСтрока, 1) <> "*" И Лев(ТекущаяСтрока, 1) <> "+" Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ИндексПоследнейСтроки = ИндексПоследнейСтроки - 1;
				
				Пока ИндексПоследнейСтроки>=ИндексПервойСтроки Цикл
					
					ТекстовыйФайл.УдалитьСтроку(ИндексПоследнейСтроки);
					ИндексПоследнейСтроки = ИндексПоследнейСтроки - 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстовыйФайл.ВставитьСтроку(3, БлокНастроек);
			
			ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(1);
			
			Если Сред(ТекущаяСтрока, 7, 6) = "$$$CLR" Тогда
				
				Если Найти(ТекущаяСтрока, "{NAL} {GR_NL}")=0 Тогда
					ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "$$$CLR", "$$$CLR {NAL} {GR_NL}"));
				КонецЕсли;
				
			ИначеЕсли Сред(ТекущаяСтрока, 7, 6) = "$$$RPL" Тогда
				
				Если Найти(ТекущаяСтрока, "{NAL} {GR_NL}")=0 Тогда
					ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "$$$RPL", "$$$RPL {NAL} {GR_NL}"));
				КонецЕсли;
				
			Иначе
				ТекстовыйФайл.ЗаменитьСтроку(1, СтрЗаменить(ТекущаяСтрока, "##@@&&","##@@&&$$$CLR {NAL} {GR_NL} "));
			КонецЕсли;
			
		Иначе
			
			// Выгружаем в новый файл
			ТекстовыйФайл.ДобавитьСтроку("##@@&&$$$CLR {NAL} {GR_NL}");
			ТекстовыйФайл.ДобавитьСтроку("#");
			ТекстовыйФайл.ДобавитьСтроку(БлокНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СпискиНалоговИКомбинацийНалогов()
	
	Налоги = Новый Массив;
	
	НалогНДС = Новый Структура;
	
	НалогНДС.Вставить("Код");
	НалогНДС.Вставить("Наименование");
	НалогНДС.Вставить("Ставки", Новый Массив);
	
	НалогНДС.Код = "1";
	НалогНДС.Наименование = "НДС";
	
	// 20%
	СтавкаНалога20 = Новый Структура;
	СтавкаНалога20.Вставить("Код", 1);
	СтавкаНалога20.Вставить("Текст", НСтр("ru = 'НДС 20%'"));
	СтавкаНалога20.Вставить("Значение", 20);
	НалогНДС.Ставки.Добавить(СтавкаНалога20);
	
	// 10%
	СтавкаНалога10 = Новый Структура;
	СтавкаНалога10.Вставить("Код", 2);
	СтавкаНалога10.Вставить("Текст", НСтр("ru = 'НДС 10%'"));
	СтавкаНалога10.Вставить("Значение", 10);
	НалогНДС.Ставки.Добавить(СтавкаНалога10);
	
	// Без НДС
	СтавкаНалогаБезНДС = Новый Структура;
	СтавкаНалогаБезНДС.Вставить("Код", 3);
	СтавкаНалогаБезНДС.Вставить("Текст", НСтр("ru = 'Без НДС'"));
	СтавкаНалогаБезНДС.Вставить("Значение", 0);
	НалогНДС.Ставки.Добавить(СтавкаНалогаБезНДС);
	
	// 0%
	СтавкаНалога0 = Новый Структура;
	СтавкаНалога0.Вставить("Код", 4);
	СтавкаНалога0.Вставить("Текст", НСтр("ru = 'НДС 0%'"));
	СтавкаНалога0.Вставить("Значение", 0);
	НалогНДС.Ставки.Добавить(СтавкаНалога0);
	
	// 18%
	СтавкаНалога18 = Новый Структура;
	СтавкаНалога18.Вставить("Код", 5);
	СтавкаНалога18.Вставить("Текст", НСтр("ru = 'НДС 18%'"));
	СтавкаНалога18.Вставить("Значение", 18);
	НалогНДС.Ставки.Добавить(СтавкаНалога18);
	
	Налоги.Добавить(НалогНДС);
	
	Возврат Налоги;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФискальнымиПризнаками

Процедура ОпределитьТипРасчетаЧека(ЧекККМ)
	
	// если оплата с минусом, то это чек на возврат
	
	ЭтоВозврат = Ложь;
	
	Для Каждого Оплата Из ЧекККМ.Оплаты Цикл
		
		Если Оплата.СуммаНаличнойОплаты < 0 ИЛИ Оплата.СуммаЭлектроннойОплаты < 0 Тогда
			
			ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
			ЭтоВозврат = Истина;
			
			Прервать;
		Иначе
			ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
			Прервать;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если НЕ ЭтоВозврат Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Оплата Из ЧекККМ.Оплаты Цикл
		
		Если Оплата.СуммаНаличнойОплаты < 0 Тогда
			Оплата.СуммаНаличнойОплаты = -Оплата.СуммаНаличнойОплаты;
		КонецЕсли;
		
		Если Оплата.СуммаЭлектроннойОплаты < 0 Тогда
			Оплата.СуммаЭлектроннойОплаты = -Оплата.СуммаЭлектроннойОплаты;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТовар Из ЧекККМ.Товары Цикл
		
		Если СтрокаТовар.Количество < 0 Тогда
			СтрокаТовар.Количество = -СтрокаТовар.Количество;
		КонецЕсли;
		
		Если СтрокаТовар.Сумма < 0 Тогда
			СтрокаТовар.Сумма = -СтрокаТовар.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСоСкидками

Функция ДобавитьСкидкуНаЧек(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено Тогда
		Результат = Ложь;
	Иначе
		
		Знак = ?(Транзакция.Тип = 35 ИЛИ Транзакция.Тип = 37, -1, 1);
		
		Если Транзакция.Тип = 35 ИЛИ Транзакция.Тип = 36 Тогда
			// Абсолютная скидка/надбавка.
			
			СуммаСкидки = Транзакция.Поле12;
			
			СуммаТоваров = 0;
			// Определяем общую сумму по товарам.
			Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
				СуммаТоваров = СуммаТоваров + ТекТовар.Сумма;
			КонецЦикла;
			
			Если СуммаТоваров>0 Тогда
				
				Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
					ТекТовар.Сумма = ТекТовар.Сумма + Знак*СуммаСкидки*(ТекТовар.Сумма/СуммаТоваров);
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			// Относительная скидка/надбавка.
			
			СуммаЧекаСоСкидкойРасчетная = 0;
			СуммаЧекаДоСкидокНаЧек = 0;
			
			Для Каждого ТекТовар Из ТекущийЧек.Товары Цикл
				
				СуммаЧекаДоСкидокНаЧек = СуммаЧекаДоСкидокНаЧек + ТекТовар.Сумма;
				
				ТекТовар.Сумма = ТекТовар.Сумма + Знак*ТекТовар.Сумма*Транзакция.Поле11/100;
				
				СуммаЧекаСоСкидкойРасчетная = СуммаЧекаСоСкидкойРасчетная + ТекТовар.Сумма;
				
			КонецЦикла;
			
			// Если есть погрешность - учитывается в последней позиции чека
			Если НЕ (СуммаЧекаСоСкидкойРасчетная = СуммаЧекаДоСкидокНаЧек - Транзакция.Поле12) Тогда
				ПогрешностьСкидкиНаЧек = СуммаЧекаСоСкидкойРасчетная - (СуммаЧекаДоСкидокНаЧек - Транзакция.Поле12);
				
				СтрокаТоваров = ТекущийЧек.Товары[ТекущийЧек.Товары.Количество()-1];
				СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - ПогрешностьСкидкиНаЧек;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьСкидкуНаТовар(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
	
	Если ТекущийЧек=Неопределено Тогда
		Результат = Ложь;
	Иначе
		
		НайденныеТовары = НайтиСтроки(ТекущийЧек.Товары, Новый Структура("Код", Транзакция.Поле8));
		
		Если НайденныеТовары.Количество()>0 Тогда
			
			Знак = ?(Транзакция.Тип = 15 ИЛИ Транзакция.Тип = 17, -1, 1);
			
			Товар = НайденныеТовары[НайденныеТовары.Количество()-1];
			
			Товар.Сумма = Товар.Сумма + Знак*Транзакция.Поле12;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ТекстОшибки = НСтр("ru='Операция прервана. Ошибка при загрузке транзакции №%1%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.Номер, "ЧГ=0"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСТекстовымиДокументамиИСтроками

Процедура ДополнитьФайл(Результат, Файл, Параметры, БлокДополнительныхАтрибутов, ВыходныеПараметры, Знач ДанныеДляЗаполнения = Неопределено)

	Разделитель			= Параметры.Разделитель;
	Уровень				= Параметры.Уровень;
	Источник			= Параметры.Источник;
	ФорматОбмена		= Параметры.ФорматОбмена;
	РасширеннаяВыгрузка = Параметры.РасширеннаяВыгрузка;
	БазоваяЕИ			= Параметры.БазоваяЕИ;
	
	Если Уровень = "Номенклатура" Тогда
		
		ДанныеДляЗаполнения = Новый Структура;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("Наименование", ИсходнаяСтрока(Источник.Наименование));
		// КодРодительскойГруппы
		ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(Источник.КодГруппы, "ЧДЦ=; ЧГ=0"));
		// Артикул
		ДанныеДляЗаполнения.Вставить("Артикул", ИсходнаяСтрока(Источник.Артикул));
		
		// Ставка НДС
		ДанныеДляЗаполнения.Вставить("СтавкаНДС", Источник.СтавкаНДС);
		
		// ВесовойТовар
		ДанныеДляЗаполнения.Вставить("ВесовойТовар", Источник.ЭтоВесовойТовар);
		// РазрешитьДробноеКоличество
		ДанныеДляЗаполнения.Вставить("РазрешитьДробноеКоличество", ?(Источник.ЭтоВесовойТовар, "1", "0"));
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", "1.000");
		
		ДанныеДляЗаполнения.Вставить("ПризнакПредметаРасчета", КодПризнакаПредметаРасчета(Источник.ПризнакПредметаРасчета));
		
		ДанныеДляЗаполнения.Вставить("ЕдиницаИзмерения", "");
		
		Если ЗначениеЗаполнено(Источник.ЭтоАлкоголь) И Источник.ЭтоАлкоголь Тогда
			
			АлкогольныеРеквизиты = Источник.АлкогольныеРеквизиты;
			
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Истина);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", АлкогольныеРеквизиты.Маркируемый);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции);
			// ЕмкостьТары
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", Формат(АлкогольныеРеквизиты.ЕмкостьТары, "ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", Формат(АлкогольныеРеквизиты.Крепость, "ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			Если Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0013");
				ДанныеДляЗаполнения.ПризнакПредметаРасчета = 33;
				ДанныеДляЗаполнения.Маркируемый = Ложь; 
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Пиво") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0023");
				ДанныеДляЗаполнения.Маркируемый = Ложь;
			Иначе
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Источник.ЭтоМаркированнаяПродукция) И Источник.ЭтоМаркированнаяПродукция Тогда
			
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			ДанныеДляЗаполнения.Вставить("Маркируемый", Истина);
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			ДанныеДляЗаполнения.Вставить("Крепость"   , "");
			Если Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0002");
			ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0003");
			ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Табак") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0005");
			ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Обувь") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "1520");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0004");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Духи") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0006");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Шины") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0007");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Фотоаппараты") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0008");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0009");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Велосипеды") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0011");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КреслаКоляски") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0010");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.УпакованнаяВода") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0012"); 
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.РазливноеПиво") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0013");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0014");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0015");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.БАДы") Тогда  // АПК:1036 - устоявшиеся сокращения
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0016");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Антисептики") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0017");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КонсервированнаяПродукция")
				ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.КормаДляЖивотных") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0018");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0020");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.БезалкогольныеНапитки") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0021");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Пиво") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0023"); 
				АлкогольныеРеквизиты = Источник.АлкогольныеРеквизиты;
				Если ЗначениеЗаполнено(АлкогольныеРеквизиты) Тогда
					ДанныеДляЗаполнения.Алкоголь = Ложь;
					ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции = АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
					ДанныеДляЗаполнения.ЕмкостьТары = Формат(АлкогольныеРеквизиты.ЕмкостьТары, "ЧДЦ=3; ЧГ=0");
					ДанныеДляЗаполнения.Крепость = Формат(АлкогольныеРеквизиты.Крепость, "ЧГ=0");
				КонецЕсли;
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.СоковаяПродукция") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0024");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Морепродукты") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0025");
			ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.МедицинскиеИзделия") Тогда
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "0026");
			Иначе
				ДанныеДляЗаполнения.Вставить("ТипМаркировки", "");
			КонецЕсли;
			
		Иначе
			
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			ДанныеДляЗаполнения.Вставить("Крепость"   , "");
			ДанныеДляЗаполнения.Вставить("ТипМаркировки", "");
			
		КонецЕсли;
		
		МераКоличестваПредметаРасчета = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.МераКоличестваПредметаРасчетаПоКодуЕдиницыИзмерения(Источник.КодЕдиницыИзмерения);
		Если МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "0";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Грамм") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "10";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килограмм") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "11";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Тонна") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "12";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Сантиметр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "20";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Дециметр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "21";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Метр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "22";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйСантиметр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "30";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйДециметр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "31";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КвадратныйМетр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "32";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Миллилитр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "40";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Литр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "41";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КубическийМетр") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "42";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.КиловаттЧас") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "50";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигакалория") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "51";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.СуткиДень") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "70";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Час") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "71";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Минута") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "72";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Секунда") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "73";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Килобайт") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "80";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Мегабайт") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "81";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Гигабайт") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "82";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Терабайт") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "83";
		ИначеЕсли МераКоличестваПредметаРасчета = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.ИныеЕдиницыИзмерения") Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "255";
		Иначе
			ДанныеДляЗаполнения.Вставить("МераКоличестваПредметаРасчета", 0);
		КонецЕсли; 
		
		Если ДанныеДляЗаполнения.ТипМаркировки = "0013" Тогда
			ДанныеДляЗаполнения.ЕдиницаИзмерения = "41";
		КонецЕсли;
		
		Если Источник.ИмеетУпаковки Тогда
			
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
				
				// Штрихкод
				Штрихкоды = Новый Массив;
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
					
					Штрихкоды = РазложенныйШтрихкод(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Если Источник.Штрихкоды.Количество() = 0 Тогда 
						Штрихкоды.Добавить("");
					Иначе
						Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
							Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
						КонецЦикла;
					КонецЕсли;
				Иначе
					Штрихкоды.Добавить("");
				КонецЕсли;
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
				НачалоИнтервала = 1;
				
				Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
					
					ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
					ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Упаковка");
				Параметры.Вставить("Источник",				ТекУпаковка);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				Параметры.Вставить("БазоваяЕИ",				БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		ИначеЕсли Источник.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Источник.Характеристики Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Характеристика");
				Параметры.Вставить("Источник",				ТекХарактеристика);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				Параметры.Вставить("БазоваяЕИ",				БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Штрихкод
			Штрихкоды = Новый Массив;
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
				
				Штрихкоды = РазложенныйШтрихкод(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Если Источник.Штрихкоды.Количество() = 0 Тогда 
					Штрихкоды.Добавить("");
				Иначе
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Штрихкоды.Добавить("");
			КонецЕсли;
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
			НачалоИнтервала = 1;
			
			Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
				
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Источник.ИмеетУпаковки Тогда
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ИсходнаяСтрока(Источник.Наименование));
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
				
				// Штрихкод
				Штрихкоды = Новый Массив;
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
					
					Штрихкоды = РазложенныйШтрихкод(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Если Источник.Штрихкоды.Количество() = 0 Тогда 
						Штрихкоды.Добавить("");
					Иначе
						Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
							Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
						КонецЦикла;
					КонецЕсли;
				Иначе
					Штрихкоды.Добавить("");
				КонецЕсли;
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
				НачалоИнтервала = 1;
				
				Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
					
					ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
					ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель",			Разделитель);
				Параметры.Вставить("Уровень",				"Упаковка");
				Параметры.Вставить("Источник",				ТекУпаковка);
				Параметры.Вставить("ФорматОбмена",			ФорматОбмена);
				Параметры.Вставить("РасширеннаяВыгрузка",	РасширеннаяВыгрузка);
				Параметры.Вставить("БазоваяЕИ",				БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, Параметры, , ВыходныеПараметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ИсходнаяСтрока(Источник.Наименование));
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
			
			// Штрихкод
			Штрихкоды = Новый Массив;
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
				
				Штрихкоды = РазложенныйШтрихкод(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Если Источник.Штрихкоды.Количество() = 0 Тогда 
					Штрихкоды.Добавить("");
				Иначе
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Штрихкоды.Добавить("");
			КонецЕсли;
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
			НачалоИнтервала = 1;
			
			Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
				
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("НаименованиеУпаковки", ИсходнаяСтрока(Источник.Наименование));
		
		// Код
		ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
		// Цена
		ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0"));
		// Остаток
		ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		
		// Штрихкод
		Штрихкоды = Новый Массив;
		Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") И НЕ ПустаяСтрока(Источник.Штрихкоды) Тогда
			
			Штрихкоды = РазложенныйШтрихкод(Источник.Штрихкоды);
			
		ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
			
			Если Источник.Штрихкоды.Количество() = 0 Тогда 
				Штрихкоды.Добавить("");
			Иначе
				Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
					Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Штрихкоды.Добавить("");
		КонецЕсли;
		
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", Формат(1, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0"));
		ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[0], "ЧДЦ=; ЧГ=0"));
		ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь);
		НачалоИнтервала = 1;
		
		Для Индекс = НачалоИнтервала По Штрихкоды.Количество()-1 Цикл
			
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкоды[Индекс], "ЧДЦ=; ЧГ=0"));
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Ложь, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, ЭтоГруппа = Ложь, ДопШтрихкод = Ложь)
	
	ФорматШтрихМКассир = 0;
	
	Наименование = ДанныеДляЗаполнения.Наименование;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеХарактеристики") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеХарактеристики;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеУпаковки") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеУпаковки;
	КонецЕсли;
	
	Наименование = Лев(Наименование, 100);
	
	Если ДопШтрихкод Тогда
		
		Строка = "# "
			+ ДанныеДляЗаполнения.Код + Разделитель			//	 1. Код
			+ ДанныеДляЗаполнения.Штрихкод + Разделитель	//	 2. Штрихкод
			+ Наименование + Разделитель					//	 3. Наименование
			+ Наименование + Разделитель					//	 4. Наименование для кассы
			+ ДанныеДляЗаполнения.Цена + Разделитель		//	 5. Цена
			+ Разделитель									//	 6. Не используется
			+ Разделитель									//	 7. Не используется
			+ Разделитель									//	 8. Не используется
			+ Разделитель									//	 9. Не используется
			+ ДанныеДляЗаполнения.Коэффициент;				//	10. Коэффициент
			
		Файл.ДобавитьСтроку(Строка);
		
	Иначе
		
		БлокДополнительныхАтрибутов = "";
		
		Если ЭтоГруппа Тогда
			
			Строка =														//   №. Значение для Штрих-М: Кассир / значение для Штрих-М: Кассир miniPOS.
				ДанныеДляЗаполнения.Код + Разделитель						//	 1. Код.
				+ Разделитель												//	 2. Штрихкод.
				+ Наименование + Разделитель								//	 3. Наименование.
				+ Разделитель												//	 4. Текст для чека.
				+ Разделитель												//	 5. Цена.
				+ Разделитель												//	 6. Остаток.
				+ Разделитель												//	 7. Код группы скидок / схема автоматической скидки.
				+ Разделитель												//	 8. Разрешить дробное количество / контроль продажи дробного количества.
				+ Разделитель												//	 9. Номер секции.
				+ Разделитель												//	10. Максимальный процент скидки.
				+ Разделитель												//	11. Код группы налогов / код налоговой схемы.
				+ Разделитель												//	12. Артикул.
				+ Разделитель												//	13. Запрашивать марку / код ценника.
				+ Разделитель												//	14. Не используется / Страна производитель.
				+ Разделитель												//	15. Не используется / Единица измерения.
				+ ДанныеДляЗаполнения.КодРодительскойГруппы + Разделитель	//	16. Код родительской группы.
				+ "0" + Разделитель											//	17. Товар или группа (1 - товар, 0 - группа).
				+ Разделитель												//	18. Список кодов скидочных групп.
				+ Разделитель												//	19. Подакцизный товар / категории блюд.
				+ Разделитель												//	20. Количество модификаторов.
				+ Разделитель												//	21. Комплект.
				+ Разделитель												//	22. Направления печати.
				+ Разделитель												//	23. Отключить контроль остатка.
				+ Разделитель												//	24. Учет по дополнительным характеристикам.
				+ Разделитель												//	25. Макс процент бонуса.
				+ Разделитель												//	26. Признак предмета расчета.
				+ Разделитель												//	27. Группа связанных товаров.
				+ Разделитель												//	28. Тип маркировки.
				+ Разделитель;												//	29. Единица измерения.

					
		Иначе
			
			Строка =																									//	 №. Значение для Штрих-М: Кассир / значение для Штрих-М: Кассир miniPOS.
				ДанныеДляЗаполнения.Код + Разделитель																	//	 1. Код.
				+ ДанныеДляЗаполнения.Штрихкод + Разделитель															//	 2. Штрихкод
				+ Наименование + Разделитель																			//	 3. Наименование
				+ Наименование + Разделитель																			//	 4. Текст для чека
				+ ДанныеДляЗаполнения.Цена + Разделитель																//	 5. Цена
				+ ДанныеДляЗаполнения.Остаток + Разделитель																//	 6. Остаток
				+ Разделитель																							//	 7. Код группы скидок / схема автоматической скидки.
				+ ДанныеДляЗаполнения.РазрешитьДробноеКоличество + Разделитель											//	 8. Разрешить дробное количество / контроль продажи дробного количества.
				+ Разделитель																							//	 9. Номер секции
				+ Разделитель																							//	10. Максимальный процент скидки
				+ КодНалогаПоСтавкеНДС(ДанныеДляЗаполнения.СтавкаНДС) + Разделитель								//	11. Код группы налогов / код налоговой схемы.
				+ ДанныеДляЗаполнения.Артикул + Разделитель																//	12. Артикул
				+ ?(ФорматОбмена = ФорматШтрихМКассир, ?(ДанныеДляЗаполнения.Алкоголь, "1", "0"), "") + Разделитель		//	13. Запрашивать марку / код ценника.
				+ Разделитель																							//	14. Не используется / Страна производитель.
				+ Разделитель																							//	15. Не используется / Единица измерения.
				+ ДанныеДляЗаполнения.КодРодительскойГруппы + Разделитель												//	16. Код родительской группы
				+ "1" + Разделитель																						//	17. Товар или группа (1 - товар, 0 - группа).
				+ Разделитель																							//	18. Список кодов скидочных групп.
				+ ?(ФорматОбмена > ФорматШтрихМКассир, "", ?(ДанныеДляЗаполнения.Маркируемый, "1", "0")) + Разделитель	//	19. Подакцизный товар / категории блюд.
				+ Разделитель																							//	20. Количество модификаторов.
				+ Разделитель																							//	21. Комплект.
				+ Разделитель																							//	22. Направления печати.
				+ Разделитель																							//	23. Отключить контроль остатка.
				+ Разделитель																							//	24. Учет по дополнительным характеристикам.
				+ Разделитель																							//	25. Макс процент бонуса.
				+ ДанныеДляЗаполнения.ПризнакПредметаРасчета + Разделитель												//	26. Признак предмета расчета.
				+ Разделитель																							//	27. Группа связанных товаров.
				+ ДанныеДляЗаполнения.ТипМаркировки + Разделитель														//	28. Тип маркировки.
				+ ДанныеДляЗаполнения.ЕдиницаИзмерения + Разделитель													//	29. Единица измерения.
				+ "";																									//	30. Код товара для ОФД.
				
			Если ДанныеДляЗаполнения.Алкоголь Тогда
				БлокДополнительныхАтрибутов =
					"<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""22"">" + ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""23"">" + ДанныеДляЗаполнения.ЕмкостьТары + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""24"">" + ?(ДанныеДляЗаполнения.Маркируемый, "0", "1") + "</goods_attr>" + Символы.ПС
				  + "<goods_attr id=""" + ДанныеДляЗаполнения.Код + """ attr_id=""27"">" + ДанныеДляЗаполнения.Крепость + "</goods_attr>";
			КонецЕсли;
			
		КонецЕсли;
		
		Файл.ДобавитьСтроку(Строка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БлокДополнительныхАтрибутов) Тогда
		
		Файл.ДобавитьСтроку(БлокДополнительныхАтрибутов);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает строку для выгрузки.
Функция ИсходнаяСтрока(Знач ИсходнаяСтрока)
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), Разделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, 100);
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция РазложенныйШтрихкод(ШтрихкодСтрокой)
	
	Штрихкод = СокрЛП(ШтрихкодСтрокой);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель Из СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Пока Найти(Штрихкод, Разделитель) > 0 Цикл
		
		ИндексВхождения = Найти(Штрихкод, Разделитель);
		Результат.Добавить(Лев(Штрихкод, ИндексВхождения - 1));
		Штрихкод = Прав(Штрихкод, СтрДлина(Штрихкод) - ИндексВхождения);
		
	КонецЦикла;
	
	Результат.Добавить(Штрихкод);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает разделитель полей таблицы содержащейся в файле.
//
Функция Разделитель()
	
	Возврат ";";
	
КонецФункции

Функция НайтиСтроки(МассивПоиска, ПараметрыОтбора)
	
	Результат = Новый Массив;
	
	Для ВремИндекс = 0 По МассивПоиска.Количество()-1 Цикл
		
		ЭлементМассива = МассивПоиска[ВремИндекс];
		ПолноеСовпадение = Истина;
		
		Для каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			
			Если ЭлементМассива.Свойство(ЭлементОтбора.Ключ) 
				И НЕ ЭлементОтбора.Значение = ЭлементМассива[ЭлементОтбора.Ключ] Тогда
				ПолноеСовпадение = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолноеСовпадение Тогда
			ЭлементМассива.Вставить("ИндексВМассиве", ВремИндекс);
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьШтрихкодМарки(Смена, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);	
	
	Если ТекущийЧек = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.НомерЧека, "ЧГ=0"));
		Результат = Ложь;
	Иначе
		
		Если ТекущийЧек.Товары.Количество()>0 Тогда
			ПоследнийТовар = ТекущийЧек.Товары[ТекущийЧек.Товары.Количество()-1];
			ПоследнийТовар.ШтрихкодАлкогольнойПродукции = Транзакция.Поле8;
		Иначе
			ТекстОшибки = НСтр("ru='Неверный формат файла. Невозможно найти чек №%1%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Формат(Транзакция.НомерЧека, "ЧГ=0"));
			Результат = Ложь;
		КонецЕсли;
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьПостановкуНаКран(Смена, Смены, Транзакция, ТекстОшибки)
	
	Результат = Истина;
	
	ОткрытьЧек(Смена, Смены, Транзакция);
	ТекущийЧек = Смена.Чеки[Смена.Чеки.Количество()-1];
	
	НоваяПостановкаНаКран = Новый Структура;
	
	НоваяПостановкаНаКран.Вставить("Дата",				Транзакция.ДатаИВремя);
	НоваяПостановкаНаКран.Вставить("Количество",		Транзакция.Поле11);
	НоваяПостановкаНаКран.Вставить("ПостановкаНаКран",	?(Транзакция.Тип = 186, Истина, Ложь));
	НоваяПостановкаНаКран.Вставить("КодМаркировки",		Транзакция.Поле8);
	
	МассивТоваровЧекаСмены = Смена.Чеки[Смена.Чеки.Количество()-1].Товары; //Массив - 
	МассивТоваровЧекаСмены.Добавить(НоваяПостановкаНаКран); 
	
	Возврат Результат;
	
КонецФункции

Функция КодПризнакаПредметаРасчета(ПризнакПредметаРасчета)
	
	//	Признак предмета расчета:
	// 0 – не используется;
	// 1 – товар, кроме подакцизного;
	// 2 – подакцизный товар;
	// 3 – работа;
	// 4 – услуга;
	// 13 – иной товар;
	
	Если ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар") 
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ")
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ") Тогда
		ПризнакПредметаРасчетаКод = 1;
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар") 
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ") 
		Или ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ") Тогда
		ПризнакПредметаРасчетаКод = 2;
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа") Тогда
		ПризнакПредметаРасчетаКод = 3;
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
		ПризнакПредметаРасчетаКод = 4;
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 13;
	Иначе
		ПризнакПредметаРасчетаКод = 1;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчетаКод;
	
КонецФункции

Процедура РазобратьJSONСтруктуру(Результат, Транзакция, Смена)
	
	Если Результат.Наименование = "ПостановкаКегаНаКран" Тогда
		
		ТекущийЧек = ПолучитьЧек(Смена, Транзакция.НомерЧека);
		ТекущийЧек.Вставить("Код",				Результат.ТЧ.СоставДокумента[0].КодТовара);
		ТекущийЧек.Вставить("НомерДокумента",	Результат.Номер);
		ЗакрытьЧек(Смена, Транзакция, "");
		Смена.Чеки[ТекущийЧек.ИндексВМассиве] = ТекущийЧек;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти
