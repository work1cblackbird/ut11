
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(Объект);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив из Строка - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Перем Ошибки;
	
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	НепроверяемыеРеквизиты = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, ВсеРеквизиты, РеквизитыОперации);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		ВсеРеквизиты, РеквизитыОперации, НепроверяемыеРеквизиты);
	
	РасшифровкаБезРазбиения = Ложь;
	Если Объект.ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения")
		И Объект.ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Не ((Объект.ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛ ИЛИ Объект.ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛСПревышения) И Объект.НДФЛПоВедомостям) Тогда
		
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Ведомость");
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Подразделение");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "СчетПоГосконтракту") <> Истина Тогда
		НепроверяемыеРеквизиты.Добавить("СтатьяЦелевыхСредств");
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	КонецЕсли;
	
	Если Не Объект.СписокКонтрагентов Тогда
		
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
		
	Иначе
		
		Если Объект.ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		КонецЕсли;
	
	КонецЕсли;
	
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы");
		НепроверяемыеРеквизиты.Добавить("ДоговорСУчастникомГОЗ");
		НепроверяемыеРеквизиты.Добавить("ТипПлатежаФЗ275");
		НепроверяемыеРеквизиты.Добавить("ПредметОплаты");
		НепроверяемыеРеквизиты.Добавить("ВариантОплаты");
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.ВидДокумента");
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.Файл");
	
	РеквизитыПлатежаВБюджет = Новый Массив;
	РеквизитыПлатежаВБюджет.Добавить("ВидПеречисленияВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("ПеречислениеВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("КодБК");
	РеквизитыПлатежаВБюджет.Добавить("КодОКАТО");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательДаты");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательНомера");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательОснования");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательПериода");
	РеквизитыПлатежаВБюджет.Добавить("СтатусСоставителя");
	
	РеквизитыДокумента = Объект.Метаданные().Реквизиты;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	Если ДатаНачалаПримененияПриказа126н <> '00010101' И Объект.Дата >= ДатаНачалаПримененияПриказа126н Тогда
		НепроверяемыеРеквизиты.Добавить("ПоказательТипа");
	Иначе
		РеквизитыПлатежаВБюджет.Добавить("ПоказательТипа");
	КонецЕсли;
	
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		НепроверяемыеРеквизиты.Добавить(РеквизитПлатежаВБюджет);
		Если Объект.ПеречислениеВБюджет Тогда
			Если Не ЗначениеЗаполнено(Объект[РеквизитПлатежаВБюджет]) Тогда
				Реквизит = РеквизитыДокумента.Найти(РеквизитПлатежаВБюджет);
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), Реквизит.Синоним);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, НепроверяемыеРеквизиты);
		ДенежныеСредстваСерверЛокализация.ПроверитьИННиКППНаСоответствие148н(Объект, Отказ);
	КонецЕсли;
	
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеКодаВидаДохода(Объект,
																		Объект.ХозяйственнаяОперацияПоЗарплате,
																		Отказ);
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеДокументаСФлагомСамозанятого(Объект, Отказ);
	
	ПодарочныеСертификатыСервер.ОбработкаПроверкиЗаполнения(Объект, Отказ);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения);
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
		ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		ЗаполнитьПоОперацииПоЯндексКассе(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
	
	
	ИначеЕсли ТипОснования = Тип("Массив") И ДанныеЗаполнения.Количество() > 0 Тогда
		ТипОснования = ТипЗнч(ДанныеЗаполнения[0]);
		Если ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
			ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, ДанныеЗаполнения[0], ДанныеЗаполнения);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
			ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, ДанныеЗаполнения[0], ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
		ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
	КонецЕсли;
	
	
	Если ТипОснования = Тип("Структура")
		И Не ДанныеЗаполнения.Свойство("ОперацияССамозанятым") Тогда
		
		Если ДанныеЗаполнения.Свойство("Договор")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Договор)
			И ТипЗнч(ДанныеЗаполнения.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ДанныеЗаполнения.Вставить("ОперацияССамозанятым",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Договор, "ДоговорССамозанятым"));
		ИначеЕсли Не ДанныеЗаполнения.Свойство("ОперацияССамозанятым") Тогда
			
			ДанныеЗаполнения.Вставить("ОперацияССамозанятым", Ложь);
			ОписаниеРеквизитов = Новый Структура;
			ДенежныеСредстваСерверЛокализация.ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов);
			ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(Объект, ДанныеЗаполнения, ОписаниеРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(Объект, ДанныеЗаполнения);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	НеиспользуемыеРеквизиты = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
			И (Объект.ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛ ИЛИ Объект.ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛСПревышения)) Тогда
		НеиспользуемыеРеквизиты.Добавить("НДФЛПоВедомостям");
	КонецЕсли;
	
	
	Если Не Объект.СписокКонтрагентов Тогда
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	Иначе
		Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого НеиспользуемыйРеквизит Из НеиспользуемыеРеквизиты Цикл
		УдаляемыйРеквизит = МассивРеквизитовОперации.Найти(НеиспользуемыйРеквизит);
		Если УдаляемыйРеквизит <> Неопределено Тогда
			МассивРеквизитовОперации.Удалить(УдаляемыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	Если Не (Объект.ФормаОплатыБезналичная
		И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		Или Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю
		И ЭтоФизЛицо)) Тогда
		Объект.КодВидаДохода = "";
	КонецЕсли;
	
	Если Не (Объект.ФормаОплатыБезналичная
		И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		Или Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) Тогда
		Объект.КодВыплат = "";
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ОчиститьНеиспользуемыеРеквизитыОплатыСамозанятым(Объект);
	
	
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	Если ПроведениеДокументов.СвойстваДокумента(Объект).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(Объект);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	ДенежныеСредстваСерверЛокализация.ПриИзмененииПравилПлатежейВБюджет(Объект, ОбъектКопирования.Дата, ТекущаяДатаСеанса());
	ДенежныеСредстваСерверЛокализация.ИнициализироватьБанковскиеСчетаСпискаКонтрагентов(Объект);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация

	
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	Если ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		// Платежное поручение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.СписаниеБезналичныхДенежныхСредств";
		КомандаПечати.Идентификатор = "ПлатежноеПоручение";
		КомандаПечати.Представление = НСтр("ru = 'Образец платежного поручения'");
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	ТабличныйДокумент = Новый ТабличныйДокумент;
	

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Прочее
//++ Локализация

// Определяет свойства полей формы в зависимости от данных
// 
// Параметры:
//  Настройки - см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы.
// 
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Операции = Перечисления.ХозяйственныеОперации;
	
	ОтборВыплатаСамозанятому = ДенежныеСредстваСервер.ОтборВыплатаСамозанятому();
	ОтборДопускаетсяБезналичнаяОплата = ДенежныеСредстваСервер.ОтборБезналичнаяОплатаЗаявки();
	
	#Область Шапка
	//
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ОплатаНДСВБюджетПоОтдельнымОперациям", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	
	// НадписьРеквизитыПлательщика
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлательщика");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Элемент.Свойства.Вставить("Видимость");
	
	// СПАРКРиски
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаИндексыСПАРКРиски");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// Получатель
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Получатель");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область Реквизиты
	// Только просмотр
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НДФЛПоВедомостям");
	Элемент.Поля.Добавить("ПеречислениеВБюджет");
	Элемент.Поля.Добавить("ПлатежиПо275ФЗ");
	Элемент.Поля.Добавить("ПлатежиПо275ФЗВыплатаЗарплаты");
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ТипПлатежаФЗ275");
	Элемент.Поля.Добавить("ПредметОплаты");
	Элемент.Поля.Добавить("ВариантОплаты");
	Элемент.Поля.Добавить("ПунктКонтрактаПредмета");
	Элемент.Поля.Добавить("ПунктКонтрактаОплаты");
	Элемент.Поля.Добавить("ПодтверждающиеДокументы");
	Элемент.Поля.Добавить("КодВидаДохода");
	Элемент.Поля.Добавить("КодВыплат");
	Элемент.Поля.Добавить("СтатьяЦелевыхСредств");
	Элемент.Поля.Добавить("СписокКонтрагентовОтключено");
	Элемент.Поля.Добавить("СписокКонтрагентовВключено");
	Элемент.Поля.Добавить("Получатель");
	Элемент.Поля.Добавить("ЛокализацияГруппаОперацияССамозанятым");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ГруппаИли, "Закрыта", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.Модифицированность", Ложь);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьПоПредыдущемуПлатежу");
	Элемент.Поля.Добавить("НадписьРеквизитыПлатежаВБюджет");
	Элемент.Поля.Добавить("ЗаполнитьВедомостиПоОстаткам");
	Элемент.Поля.Добавить("ЗаполнитьПодтверждающиеДокументы");
	Элемент.Поля.Добавить("НадписьРеквизитыПлательщика");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	// Номер и дата ведомости на выплату зарплаты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьСинхронизациюДанных", Ложь);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// НДФЛПоВедомостям
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НДФЛПоВедомостям");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Справочники.ВидыНалоговВзносов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Справочники.ВидыНалоговВзносов.НДФЛСПревышения);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// ПеречислениеВБюджет
	ОтборОперацийПеречисленияВБюджет = Новый ОтборКомпоновкиДанных();
	ГруппаИли = Финансы.НовыйОтбор(ОтборОперацийПеречисленияВБюджет,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИлиИ = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИлиИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Финансы.НовыйОтбор(ГруппаИлиИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИлиИ, "ОперацияССамозанятым", Ложь);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПеречислениеВБюджет");
	Элемент.Поля.Добавить("Декорация1");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлатежаВБюджет");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// УИП
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИП'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИН'"));
	
	// Код вида дохода
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВидаДохода");
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыБезналичная", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ДействуетУказание2019_5286У", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// Код выплат
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВыплат");
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыБезналичная", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Элемент.Свойства.Вставить("Видимость");
	
	// Рублевый платеж
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Поля.Добавить("КодВидаДохода");
	Элемент.Поля.Добавить("КодВыплат");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйПлатеж", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	
	#Область РасшифровкаПлатежа
	// Ведомость
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Ведомость");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВедомость");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Справочники.ВидыНалоговВзносов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Справочники.ВидыНалоговВзносов.НДФЛСПревышения);
	
	Финансы.НовыйОтбор(ГруппаИ, "НДФЛПоВедомостям", Истина);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область БанковскиеСчетаКонтрагентов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область Команды
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате, , ВидСравненияКомпоновкиДанных.Равно);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммСотруднику");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммСотруднику");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьВедомостиПоОстаткам");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	ДенежныеСредстваСерверЛокализация.ЗаполнитьНастройкиПолейФормы(Настройки);
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	Объект - ДокументОбъект - Объект заявка
//	МассивВсехРеквизитов - Массив из Строка - Массив всех реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив из Строка - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	
	МассивВсехРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ИдентификаторПлатежа");
	МассивВсехРеквизитов.Добавить("ИННПлательщика");
	МассивВсехРеквизитов.Добавить("КПППлательщика");
	МассивВсехРеквизитов.Добавить("РегистрацияВНалоговомОргане");
	МассивВсехРеквизитов.Добавить("НДФЛПоВедомостям");
	МассивВсехРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ПеречислениеВБюджет");
	МассивВсехРеквизитов.Добавить("ПоказательДаты");
	МассивВсехРеквизитов.Добавить("ПоказательНомера");
	МассивВсехРеквизитов.Добавить("ПоказательОснования");
	МассивВсехРеквизитов.Добавить("ПоказательПериода");
	МассивВсехРеквизитов.Добавить("ПоказательТипа");
	МассивВсехРеквизитов.Добавить("СтатусСоставителя");
	МассивВсехРеквизитов.Добавить("ТекстПлательщика");
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
	
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		МассивРеквизитовОперации.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
		
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
	
	КонецЕсли;
	
	ДопускаетсяПеречислениеВБюджет =
		(ДенежныеСредстваСерверЛокализация.МассивОперацийПеречисленияВБюджет().Найти(ХозяйственнаяОперация) <> Неопределено);
	
	Если ДопускаетсяПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ПеречислениеВБюджет");
	КонецЕсли;
	
	Если ДопускаетсяПеречислениеВБюджет И (ПеречислениеВБюджет = Неопределено Или ПеречислениеВБюджет) Тогда
		МассивРеквизитовОперации.Добавить("ВидПеречисленияВБюджет");
		МассивРеквизитовОперации.Добавить("КодБК");
		МассивРеквизитовОперации.Добавить("КодОКАТО");
		МассивРеквизитовОперации.Добавить("ПоказательДаты");
		МассивРеквизитовОперации.Добавить("ПоказательНомера");
		МассивРеквизитовОперации.Добавить("ПоказательОснования");
		МассивРеквизитовОперации.Добавить("ПоказательПериода");
		МассивРеквизитовОперации.Добавить("ПоказательТипа");
		МассивРеквизитовОперации.Добавить("СтатусСоставителя");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)                   КАК ФормаОплатыЗаявки,
	|	ЛОЖЬ                           КАК ФормаОплатыНаличная,
	|	ИСТИНА                         КАК ФормаОплатыБезналичная
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = Выборка.Валюта;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация    КАК Организация,
	|	&ТекущаяДата                   КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаНДС,
	|	&Ссылка                        КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)                   КАК ФормаОплатыЗаявки,
	|	ЛОЖЬ                           КАК ФормаОплатыНаличная,
	|	ИСТИНА                         КАК ФормаОплатыБезналичная
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоОперацииПоЯндексКассе(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ТекущаяДата КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	|
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Эквайер КАК Контрагент,
	|
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Заявку на расходование денежных средств на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("НазначениеПлатежа",
		 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		 НСтр("ru = 'Возврат средств по договору %1 по переводу № %2 пользователя № %3, без НДС'"),
		 НСтр("ru = '<номер и дата Договора с Яндексом>'"),
		 Формат(ДанныеЗаполнения.ИдентификаторТранзакции, "ЧГ="),
		 НСтр("ru = '<номер, присвоенный Плательщику Оператором>'")));
	
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
	НоваяСтрока.Сумма 					= Выборка.Сумма;
	НоваяСтрока.СуммаВзаиморасчетов 	= Выборка.Сумма;
	НоваяСтрока.Партнер 				= Выборка.Партнер;
	НоваяСтрока.СтатьяРасходов 			= Выборка.СтатьяРасходов; 
	НоваяСтрока.АналитикаРасходов 		= Выборка.АналитикаРасходов; 
	НоваяСтрока.СтавкаНДС 				= Справочники.СтавкиНДС.БезНДС;
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры




Процедура ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(Объект)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	
	
	СтрокаСчетаФактуры = СчетаФактуры.Добавить();
	СтрокаСчетаФактуры.СчетФактура = Объект.ДокументОснование;
	СтрокаСчетаФактуры.СуммаОплаты = Объект.СуммаДокумента;
	
	УчетНДСРФ.ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, Объект.ТипНалога, Объект.Ссылка, Истина);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(Объект, ДанныеЗаполнения = Неопределено)
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(Объект);
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ИННПлательщика") Тогда
			Объект.ИННПлательщика = РеквизитыПлательщика.ИННПлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("КПППлательщика") Тогда
			Объект.КПППлательщика = РеквизитыПлательщика.КПППлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ТекстПлательщика") Тогда
			Объект.ТекстПлательщика = РеквизитыПлательщика.ТекстПлательщика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ОперацияССамозанятым")
		И ДанныеЗаполнения.ОперацияССамозанятым Тогда
		
		Объект.ОперацияССамозанятым = ДанныеЗаполнения.ОперацияССамозанятым;
		
		Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			Объект.ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Контрагент")
			И Не Объект.СписокКонтрагентов Тогда
			Объект.Контрагент = ДанныеЗаполнения.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Объект.ОперацияССамозанятым) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Объект.ПеречислениеВБюджет = Ложь;
		Объект.ПлатежиПо275ФЗ = Ложь;
		ДенежныеСредстваСерверЛокализация.УстановитьКодВидаДоходаСамозанятого(Объект);
		
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ИнициализироватьБанковскиеСчетаСпискаКонтрагентов(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

// Функция определяет доступную для хозяйственной операции форму оплаты
//
// Параметры:
//    Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция, для которой производится проверка.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ФормыОплаты, Неопределено - Ограничение по форме оплаты, либо Неопределено, если нет ограничений.
//
Функция ОграничениеФормыОплаты(Операция) Экспорт
	
	Ограничения = Новый Соответствие;
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне, Перечисления.ФормыОплаты.Безналичная);
	
	Возврат Ограничения.Получить(Операция);
	
КонецФункции

// Дополняет переданную структуру значениями реквизитов доступных формы оплаты в зависимости от хозяйственной операции.
//
// Параметры:
//    ДанныеЗаполнения - Структура - Структура, содержащая хоз. операцию.
//
Процедура ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		
		ФормаОплаты = ОграничениеФормыОплаты(ДанныеЗаполнения.ХозяйственнаяОперация);
		
		Если ФормаОплаты <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",         (ФормаОплаты = Перечисления.ФормыОплаты.Наличная));
			ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная",      (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная));
			ДанныеЗаполнения.Вставить("ФормаОплатыПлатежнаяКарта",   (ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта));
			ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",           ФормаОплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

#КонецОбласти
