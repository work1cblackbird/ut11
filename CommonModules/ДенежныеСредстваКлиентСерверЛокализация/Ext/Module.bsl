
#Область ПрограммныйИнтерфейс

// Проверка корректности банковского счета
//
// Параметры:
//  Номер        - Строка - Номер банковского счета.
//  ВалютныйСчет - Булево - Признак, является ли счет валютным.
//  ТекстОшибки  - Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Булево - Истина - контрольный ключ верен, Ложь - контрольный ключ не верен.
//
Функция ПроверитьКорректностьНомераСчета(Знач Номер, ВалютныйСчет = Ложь, ТекстОшибки = "") Экспорт
	
	Результат = Истина;
	
	//++ Локализация
	Номер = СокрЛП(Номер);
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ДлинаНомера = СтрДлина(Номер);
	Если Не ВалютныйСчет И Не (ДлинаНомера = 20 Или ДлинаНомера = 11) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ")
			+ СтрШаблон(НСтр("ru = 'Номер счета должен состоять из 20 или 11 разрядов. Введено %1 разрядов'"), ДлинаНомера);
		Результат = Ложь;
	ИначеЕсли ДлинаНомера = 20 И Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ")
			+ НСтр("ru = 'В номере банковского счета присутствуют не только цифры.
				|Возможно, номер указан неверно.'");
		Результат = Ложь;
	КонецЕсли;
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что переданный номер счета является казначейским.
//
// Параметры:
//  НомерСчета - Строка
//  
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКазначейскийСчет(НомерСчета) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	НачинаетсяНаНоль = СтрНачинаетсяС(НомерСчета, "0");
	
	КодВалютыРубль = Сред(НомерСчета, 6,3) = "643";
	
	ДлинаНомераСчетаВерна = СтрДлина(НомерСчета) = 20;
	
	Результат = НачинаетсяНаНоль И ДлинаНомераСчетаВерна И КодВалютыРубль;
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что переданный БИК является кодом Территориального органа Федерального казначейства.
//
// Параметры:
//  КодБанка - Строка
//  
// Возвращаемое значение:
//  Булево
//
Функция ЭтоБИКТОФК(КодБанка) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	ПервыеЦифрыБИК = Лев(КодБанка, 2);
	
	Результат = СтрДлина(СокрЛП(КодБанка)) = 9
		И (ПервыеЦифрыБИК = "00" Или ПервыеЦифрыБИК = "01" Или ПервыеЦифрыБИК = "02");
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что переданный номер счета является единым казначейским счетом.
//
// Параметры:
//  НомерСчета - Строка
//  
// Возвращаемое значение:
//  Булево
///
Функция ЭтоЕдиныйКазначейскийСчет(НомерСчета) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	Результат = Лев(НомерСчета, 5) = "40102";
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

//++ Локализация

// Возращает признак возможного применения валютного контроля.
//
// Параметры:
//  ЮрФизЛицо - ПеречислениеСсылка.ЮрФизЛицо - вид контрагента.
//  Валюта - СправочникСсылка.Валюты - текущая валюта.
//  ВалютаРеглУчета - СправочникСсылка.Валюты - валюта регламентированного учета.
//  ОплатаВВалюте - Булево - признак оплаты в валюте.
//
// Возвращаемое значение:
//   Булево - признак применения валютного контроля.
//
Функция ПрименяетсяВалютныйКонтроль(ЮрФизЛицо, Валюта, ВалютаРеглУчета, ОплатаВВалюте) Экспорт

	Возврат ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
			И ((ЗначениеЗаполнено(Валюта)
			И ЗначениеЗаполнено(ВалютаРеглУчета)
			И Валюта <> ВалютаРеглУчета)
			Или ОплатаВВалюте);

КонецФункции

// Проверяет корректность уникального номера валютного контракта.
//  1 – 2: две последние цифры года, в котором контракту присвоен уникальный номер;
//  3 – 4: месяц, в котором контракту присвоен уникальный номер (числа от 01 до 12);
//  5 – 8: порядковый номер (от 0001 до 9999) контракта, принятого на учет с присвоением уникального номера банком УК в течение календарного месяца, по виду контракта, код которого указан в четвертой части уникального номера контракта.
//  Если банком УК является головной офис уполномоченного банка:
//  9 – 12: регистрационный номер кредитной организации в соответствии с КГРКО.
//  13 – 16: нули.
//  Если банком УК является филиал уполномоченного банка:
//  9 – 12: регистрационный номер кредитной организации.
//  13 – 16: порядковый номер филиала в соответствии с КГРКО.
//  17: код вида контракта.
//  18: признак резидента, являющегося стороной по контракту:
//    •	1 - юридическое лицо или его филиал;
//    •	2 - физическое лицо - индивидуальный предприниматель;
//    •	3 - физическое лицо, занимающееся в установленном законодательством Российской Федерации порядке частной практикой.
//
// Параметры:
//  Объект - СправочникОбъект.ДоговорыКонтрагентов, СправочникОбъект.ДоговорыКредитовИДепозитов,
//  СправочникОбъект.ДоговорыАренды, СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыКредитовИДепозитов,
//   СправочникСсылка.ДоговорыАренды - ключ данных.
//  НомерКонтракта - Строка - проверяемый номер контракта.
//  Отказ - Булево - признак ошибки.
//
Процедура ПроверитьУникальныйНомерВалютногоКонтракта(Объект, НомерКонтракта, Отказ = Ложь) Экспорт

	СписокОшибок = Новый Массив;
	
	НомерКонтракта = СтрЗаменить(НомерКонтракта, " ", "");
	
	Если НомерКонтракта = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПрочихСимволовВНомереКонтракта(НомерКонтракта, СписокОшибок);
	
	ЧастиНомера = СтрРазделить(НомерКонтракта, "/");
	ВсегоЧастей = ЧастиНомера.Количество();
	
	Если ВсегоЧастей = 1
		И СтрДлина(НомерКонтракта) <> 18 Тогда
		
		ТекстСообщения = НСтр("ru = '- номер не соответствует формату ХХХХХХХХ/ХХХХ/ХХХХ/Х/Х'");
		СписокОшибок.Добавить(ТекстСообщения);
		
	ИначеЕсли ВсегоЧастей = 1 Тогда
		
		ЧастиНомера = Новый Массив;
		ЧастиНомера.Добавить(Лев(НомерКонтракта, 8));
		ЧастиНомера.Добавить(Сред(НомерКонтракта, 9, 4));
		ЧастиНомера.Добавить(Сред(НомерКонтракта, 13, 4));
		ЧастиНомера.Добавить(Сред(НомерКонтракта, 17, 1));
		ЧастиНомера.Добавить(Сред(НомерКонтракта, 18, 1));
		
		НомерКонтракта = СтрСоединить(ЧастиНомера, "/");
		
	КонецЕсли;
	
	КонтрольДлины = КоличествоСимволовВЧастяхУНК();
	ТекущаяЧасть = 1;
	
	Пока ТекущаяЧасть <= ВсегоЧастей Цикл
		
		ЧастьНомера = ЧастиНомера[ТекущаяЧасть - 1];
		ДлинаЧастиНомера = СтрДлина(ЧастьНомера);
		
		Если КонтрольДлины[ТекущаяЧасть] <> ДлинаЧастиНомера Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = '- количество разрядов в %1 части должно соответствовать %2'"),
				ТекущаяЧасть,
				КонтрольДлины[ТекущаяЧасть]);
			СписокОшибок.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если ТекущаяЧасть = 1
			И КонтрольДлины[ТекущаяЧасть] = ДлинаЧастиНомера Тогда
			
			МесяцНомера = Сред(ЧастьНомера, 3, 2);
			
			Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(МесяцНомера)
				И (Число(МесяцНомера) = 0
				Или Число(МесяцНомера) > 12) Тогда
				
				ТекстСообщения = НСтр("ru = '- ошибка в 3 и 4 разряде 1 части номера'");
				СписокОшибок.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяЧасть = ТекущаяЧасть + 1;
		
	КонецЦикла;
	
	Если СписокОшибок.Количество() <> 0 Тогда
		
		ТекстОшибки = СтрСоединить(СписокОшибок, Символы.ПС + Символы.Таб);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Значение в поле ""УНК"" введено не корректно: 
								|	%1'"), ТекстОшибки), Объект, "УникальныйНомерВалютногоКонтроля", "Объект", Отказ);
		
	КонецЕсли;

КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//++ Локализация

// Проверяет, может ли номер счета соответствовать Российскому банку
// 
// Параметры:
// 	НомерСчета - Строка - номер счета 
// Возвращаемое значение:
// 	Булево - если Истина, то счет может принадлежать Российскому банку.
Функция СтрокаСоответствуетФорматуБанковскогоСчетаРФ(НомерСчета) Экспорт
	
	Если Не СтрДлина(НомерСчета) = 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСчета) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем особый случай: алфавитный символ в номере счета
	
	ЗаведомоЦифровыеСимволы = Лев(НомерСчета, 5) + Сред(НомерСчета, 7);
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗаведомоЦифровыеСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АлфавитныйСимвол = Сред(НомерСчета, 6, 1);
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АлфавитныйСимвол) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЦифраШестогоРазряда = СтрНайти(ДопустимыеАлфавитныеСимволыНомераБанковскогоСчетаРФ(), АлфавитныйСимвол);
	Возврат ЦифраШестогоРазряда <> Неопределено;
	
КонецФункции


// Проверяет соответвие значения номера счета формату банковского счета РФ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПроверитьФорматСчетаРФ(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.НомерСчета)
		И Форма.СтранаБанка = ПредопределенноеЗначение("Справочник.СтраныМира.Россия")
		И НЕ СтрокаСоответствуетФорматуБанковскогоСчетаРФ(Форма.Объект.НомерСчета) Тогда
		
		Форма.Элементы.ОшибкаВНомереСчета.Заголовок = НСтр("ru = 'Номер не соответствует формату банковского счета РФ'");
		Форма.Элементы.ГруппаОшибкаВНомереСчета.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет чтение файла-реестра по зарплатному проекту.
// 
// Параметры:
//  ИмяФайла - Строка, ДвоичныеДанные - имя файла, либо файл, предствиленный в виде двоичных данных.
//  ТекстСообщения - Строка - текст сообщения.
//  ДанныеФайла - Структура, Неопределено - данные основных реквизитов файла.
//
Процедура ПрочитатьФайлРеестраОбменаСБанком(ИмяФайла, ТекстСообщения = "", ДанныеФайла = Неопределено) Экспорт

	#Если ВебКлиент Тогда
		Возврат;
	#Иначе
	
		ЧтениеXML = Новый ЧтениеXML;
		
		Если ТипЗнч(ИмяФайла) = Тип("ДвоичныеДанные") Тогда
			ЧтениеXML.ОткрытьПоток(ИмяФайла.ОткрытьПотокДляЧтения());
		Иначе
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
		КонецЕсли;
		
		ГлобальнаяФабрикаXDTO = ФабрикаXDTO;
		
		Попытка
			ОбъектXDTOФайл = ГлобальнаяФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Исключение
			
			ТекстСообщения = НСтр("ru = '<Неверный формат файла.>'");
			Возврат;
			
		КонецПопытки;
		
		КоллекцияСвойствXDTOФайл = ОбъектXDTOФайл.Свойства(); // КоллекцияСвойствXDTO
		
		Если КоллекцияСвойствXDTOФайл.Получить("РезультатЗачисленияЗарплаты") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = '<Нет сведений о результатах зачисления денежных средств.>'");
			Возврат;
			
		КонецЕсли;
		
		Если КоллекцияСвойствXDTOФайл.Получить("ИдПервичногоДокумента") = Неопределено
			Или Не ЗначениеЗаполнено(ОбъектXDTOФайл.ИдПервичногоДокумента) Тогда
			
			ТекстСообщения = НСтр("ru = '<Не указан ИдПервичногоДокумента в загружаемом файле.>'");
			Возврат;
			
		КонецЕсли;
		
		Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбъектXDTOФайл.ИдПервичногоДокумента)
			Или ОбъектXDTOФайл.ИдПервичногоДокумента = "00000000-0000-0000-0000-000000000000" Тогда
			
			ТекстСообщения = НСтр("ru = '<Неверный ИдПервичногоДокумента в загружаемом файле (ожидается не пустой GUID).>'");
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеФайла = Неопределено Тогда
			ДанныеФайла = Новый Структура("Заголовок, СписокСчетов, РасчетныеСчета, ДокументыВыписки, ОшибкиРазбора");
		КонецЕсли;
		
		Заголовок = Новый Структура;
		Заголовок.Вставить("ДатаФормирования", '00010101');
		Заголовок.Вставить("НомерРеестра", "");
		Заголовок.Вставить("ДатаРеестра", '00010101');
		Заголовок.Вставить("НомерДоговора", "");
		Заголовок.Вставить("ДатаДоговора", '00010101');
		
		СписокСчетов = Новый Массив;
		РасчетныеСчета = Новый Массив;
		ДокументыВыписки = Новый Массив;
		
		Для Каждого ЭлементСтруктуры Из Заголовок Цикл
			
			Если КоллекцияСвойствXDTOФайл.Получить(ЭлементСтруктуры.Ключ) <> Неопределено
				И ОбъектXDTOФайл[ЭлементСтруктуры.Ключ] <> Неопределено Тогда
				
				Если ТипЗнч(Заголовок[ЭлементСтруктуры.Ключ]) = Тип("Дата")
					И ТипЗнч(ОбъектXDTOФайл[ЭлементСтруктуры.Ключ]) = Тип("Строка") Тогда
					Заголовок[ЭлементСтруктуры.Ключ] = XMLЗначение(Тип("Дата"), ОбъектXDTOФайл[ЭлементСтруктуры.Ключ]);
				Иначе
					Заголовок[ЭлементСтруктуры.Ключ] = ОбъектXDTOФайл[ЭлементСтруктуры.Ключ];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоллекцияСвойствXDTOФайл.Получить("РасчетныйСчетОрганизации") <> Неопределено
			И ОбъектXDTOФайл.РасчетныйСчетОрганизации <> Неопределено Тогда
			ЗаполнитьСведенияОРасчетномСчете(ОбъектXDTOФайл.РасчетныйСчетОрганизации,
												Заголовок.ДатаФормирования,
												СписокСчетов,
												РасчетныеСчета);
		Иначе
			
			БанковскийСчет = ДенежныеСредстваВызовСервераЛокализация.БанковскийСчетПодтвержденияПоПервичномуДокументу(ОбъектXDTOФайл.ИдПервичногоДокумента);
			
			Если Не ПустаяСтрока(БанковскийСчет) Тогда
				ЗаполнитьСведенияОРасчетномСчете(БанковскийСчет,
												 Заголовок.ДатаФормирования,
												 СписокСчетов,
												 РасчетныеСчета);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеФайла.Вставить("СписокСчетов", СписокСчетов);
		ДанныеФайла.Вставить("РасчетныеСчета", РасчетныеСчета);
		ДанныеФайла.Вставить("Заголовок", Заголовок);
		ДанныеФайла.Вставить("ДокументыВыписки", ДокументыВыписки);
		
		ЧтениеXML.Закрыть();
	
	#КонецЕсли

КонецПроцедуры

// Процедура устанавливает параметры выбора для получателей.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма документа.
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода контрагента.
//	Партнер - СправочникСсылка.Партнеры, Неопределено - отбор по партнеру.
//
Процедура УстановитьПараметрыВыбораПолучателя(Форма, Объект, Элемент, Партнер = Неопределено) Экспорт
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику")
		И Объект.ОперацияССамозанятым Тогда
		
		МассивПараметров = Новый Массив;
		
		Если Форма.ИспользованиеПартнеровКакКонтрагентов Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		КонецЕсли;
		
		МассивПараметров.Добавить(
			Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо",
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")));
		
		Если Партнер <> Неопределено Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", Партнер));
		КонецЕсли;
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Функция ДопустимыеАлфавитныеСимволыНомераБанковскогоСчетаРФ()
	// Символы приведены в порядке, определенном письмом ЦБР от 8 сентября 1997 г. N 515
	// См. также ПроверитьКонтрольныйКлючВНомереБанковскогоСчета
	Возврат "ABCEHKMPTX";
КонецФункции

Процедура ЗаполнитьСведенияОРасчетномСчете(РасчетныйСчет, ДатаФормирования, СписокСчетов, РасчетныеСчета)
	
	СписокСчетов.Добавить(РасчетныйСчет);
	
	СведенияРасчетногоСчета = ДенежныеСредстваКлиентСервер.ДанныеРасчетногоСчета();
	СведенияРасчетногоСчета.РасчСчет = РасчетныйСчет;
	
	СведенияРасчетногоСчета.ДатаНачала = ДатаФормирования;
	СведенияРасчетногоСчета.ДатаКонца = ДатаФормирования;
	
	РасчетныеСчета.Добавить(СведенияРасчетногоСчета);
	
КонецПроцедуры

Процедура ПроверкаПрочихСимволовВНомереКонтракта(НомерКонтракта, СписокОшибок)

	НомерБезРазделителей = СтрЗаменить(НомерКонтракта, "/", "");
	
	ВсегоСимволов = СтрДлина(НомерБезРазделителей);
	ТекущаяПозиция = 1;
	
	Пока ТекущаяПозиция <= ВсегоСимволов Цикл
		
		ПроверяемыйСимвол = Сред(НомерБезРазделителей, ТекущаяПозиция, 1);
		
		Если СтрНайти("0123456789", ПроверяемыйСимвол) = 0 Тогда
			
			ТекстСообщения = НСтр("ru = '- номер может состоять только из цифр и разделителя ""/""'");
			СписокОшибок.Добавить(ТекстСообщения);
			Прервать;
			
		КонецЕсли;
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
	КонецЦикла;

КонецПроцедуры

Функция КоличествоСимволовВЧастяхУНК()

	Результат = Новый Соответствие;
	Результат.Вставить(1, 8);
	Результат.Вставить(2, 4);
	Результат.Вставить(3, 4);
	Результат.Вставить(4, 1);
	Результат.Вставить(5, 1);
	
	Возврат Результат;

КонецФункции

//-- Локализация

#КонецОбласти
