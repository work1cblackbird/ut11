
#Область ПрограммныйИнтерфейс

#Область ПереопределяемыеКоманды_НоменклатурыКонтрагентов

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.Подключаемый_ВыполнитьПереопределяемуюКоманду_НоменклатурыКонтрагентов
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду_НоменклатурыКонтрагентов(Форма, Команда) Экспорт
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(Форма, Команда);
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.Подключаемый_ВыполнитьКомандуИнтеграции_НоменклатурыКонтрагентов
Процедура Подключаемый_ВыполнитьКомандуИнтеграции_НоменклатурыКонтрагентов(Команда, Форма, Источник) Экспорт

	//++ Локализация
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Источник);
	//-- Локализация

КонецПроцедуры

#Область РаботаСФайлами

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.Подключаемый_КомандаПанелиПрисоединенныхФайлов_НоменклатурыКонтрагентов
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов_НоменклатурыКонтрагентов(Форма, Команда) Экспорт
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.Подключаемый_КомандаПанелиПрисоединенныхФайлов_НоменклатурыКонтрагентов
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания_НоменклатурыКонтрагентов(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.Подключаемый_КомандаПанелиПрисоединенныхФайлов_НоменклатурыКонтрагентов
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание_НоменклатурыКонтрагентов(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.Подключаемый_КомандаПанелиПрисоединенныхФайлов_НоменклатурыКонтрагентов
Процедура Подключаемый_ПолеПредпросмотраНажатие_НоменклатурыКонтрагентов(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий_ФормыНоменклатурыКонтрагентов

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ПослеЗаписи_ФормаЭлементаНоменклатурыКонтрагентов
Процедура ПослеЗаписи_ФормаЭлементаНоменклатурыКонтрагентов(Форма, ПараметрыЗаписи) Экспорт
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ПриОткрытии_ФормаЭлементаНоменклатурыКонтрагентов
Процедура ПриОткрытии_ФормаЭлементаНоменклатурыКонтрагентов(Форма, Отказ) Экспорт

КонецПроцедуры

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ОбработкаОповещения_ФормаЭлементаНоменклатурыКонтрагентов
Процедура ОбработкаОповещения_ФормаЭлементаНоменклатурыКонтрагентов(Форма, ИмяСобытия, Параметр, Источник) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОткрытиеФорм

// Открывает прайс лист номенклатуры поставщика.
//
// Параметры:
//  ПараметрКоманды            - СправочникСсылка.НоменклатураКонтрагентов - номенклатура контрагента.
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды                - структура, передаваемая в обработчик команды.
//
Процедура ОткрытьПрайсЛистПоставщика(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НоменклатураПартнера", ПараметрКоманды);
	
	ОткрытьФорму("Обработка.ПрайсЛистПоставщика.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно,
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

//++ Локализация

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ОткрытьФормуНоменклатуры
Процедура ОткрытьФормуНоменклатуры(Знач Параметры, Знач Владелец, Знач Уникальность, Знач ОповещениеОЗакрытии) Экспорт
	
	//++ НЕ ГОСИС
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",
		Параметры, Владелец, Уникальность,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ ГОСИС
	
КонецПроцедуры

//-- Локализация

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ОткрытьФормуВыбораНоменклатуры
Процедура ОткрытьФормуВыбораНоменклатуры(Знач Параметры, Знач Владелец, Знач Уникальность) Экспорт
	
	//++ НЕ ГОСИС
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", 
		Параметры, Владелец, Уникальность,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Открывает форму списка номенклатуры партнера с отбором по владельцу, номенклатуре, характеристике, упаковке.
//
// Параметры:
//  Партнер               - СправочникСсылка.Партнеры   - владелец номенклатуры поставщика
//  Ссылка                - ДокументСсылка              - ссылка на документ, из формы которого вызывается процедура
//  ТекущаяСтрока         - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары.
//  ПредставлениеПартнера - Строка                      - имя поля, для которого необходимо выдать ошибку.
//  ПредставлениеСписка   - Строка
//
Процедура ПоказатьНоменклатуруПартнера(Партнер, Ссылка, ТекущаяСтрока, ПредставлениеПартнера, ПредставлениеСписка = "Товары") Экспорт
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Если ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		
		ОчиститьСообщения();
		
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""%1"" не заполнено'", ПредставлениеПартнера), Ссылка, "Объект.Партнер");
		КонецЕсли;
		
		Если ТекущаяСтрока = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выберите строку таблицы ""%1""'"),
					ПредставлениеСписка),
					Ссылка,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.%1", ПредставлениеСписка));
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнена колонка ""Номенклатура""'"),
				Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"));
		КонецЕсли;
		
	Иначе
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ВладелецНоменклатуры", Партнер);
		СтруктураПараметров.Вставить("Номенклатура"        , ТекущаяСтрока.Номенклатура);
		СтруктураПараметров.Вставить("Характеристика"      , ТекущаяСтрока.Характеристика);
		СтруктураПараметров.Вставить("Упаковка"            , ТекущаяСтрока.Упаковка);
		
		ОткрытьФорму("Справочник.НоменклатураКонтрагентов.Форма.ФормаСписка",
			Новый Структура("Отбор", СтруктураПараметров), , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму списка номенклатуры партнера с отбором по владельцу, номенклатуре, характеристике, упаковке.
//
// Параметры:
//  ВладелецФормы                     - ФормаКлиентскогоПриложения  - владелец формы.
//  Партнер                           - СправочникСсылка.Партнеры   - владелец номенклатуры поставщика
//  ТекущаяСтрока                     - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары.
//  ПредставлениеНоменклатурыПартнера - Строка                      - имя поля, которое необходимо отображать при открытие формы.
//  ОповещениеОЗакрытие               - ОписаниеОповещения          - оповещения, которое необходимо выполнить после закрытия формы.
//  АктВыполненныхРабот               - Булево                      - признак, что заполняем АкВыполненныхРабот.
//
Процедура ОткрытьФормуВыбораНоменклатурыПартнера(ВладелецФормы, Партнер, ТекущаяСтрока, ПредставлениеНоменклатурыПартнера, ОповещениеОЗакрытие, АктВыполненныхРабот = Ложь) Экспорт
	
	ЕдиницаИзмерения = ЗначениеЕдиницыИзмеренияПоСтрока(ТекущаяСтрока);
	
	ПараметрыОтбора = Новый Структура;
	
	Если ТипЗнч(ОповещениеОЗакрытие) = Тип("ОписаниеОповещения")
		И ЗначениеЗаполнено(ОповещениеОЗакрытие.ДополнительныеПараметры)
		И ОповещениеОЗакрытие.ДополнительныеПараметры.Свойство("ЭлементФормы") Тогда 
		ПараметрыВыбора = ОповещениеОЗакрытие.ДополнительныеПараметры.ЭлементФормы.ПараметрыВыбора;
		Для Каждого ПараметрВыбора Из ПараметрыВыбора Цикл
			ПозицияРазделителя = СтрНайти(ПараметрВыбора.Имя, ".", НаправлениеПоиска.СКонца);
			ДлинаИмяПараметра = СтрДлина(ПараметрВыбора.Имя);
			Если ПозицияРазделителя < ДлинаИмяПараметра Тогда
				ИмяПараметра = Прав(ПараметрВыбора.Имя, ДлинаИмяПараметра - ПозицияРазделителя);
			Иначе
				ИмяПараметра = ПараметрВыбора.Имя;
			КонецЕсли;
			ПараметрыОтбора.Вставить(ИмяПараметра, ПараметрВыбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ВладелецНоменклатуры", Партнер);
	ПараметрыОтбора.Вставить("Номенклатура"        , ТекущаяСтрока.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика"      , ТекущаяСтрока.Характеристика);
	ПараметрыОтбора.Вставить("Упаковка"            , ЕдиницаИзмерения);
	ПараметрыОтбора.Вставить("АктВыполненныхРабот" , АктВыполненныхРабот);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаголовокФормы", ПредставлениеНоменклатурыПартнера);
	СтруктураПараметров.Вставить("РежимВыбора"   , Истина);
	СтруктураПараметров.Вставить("Отбор"         , ПараметрыОтбора);
	СтруктураПараметров.Вставить("ТекущаяСтрока" , ТекущаяСтрока.НоменклатураПартнера);
	
	ОткрытьФорму("Справочник.НоменклатураКонтрагентов.Форма.ФормаВыбора",
		СтруктураПараметров, ВладелецФормы, , , , ОповещениеОЗакрытие);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНоменклатуройКонтрагентов

//++ Локализация

// См. СопоставлениеНоменклатурыКонтрагентовКлиентПереопределяемый.ПриСозданииНоменклатурыПоДаннымКонтрагента
Процедура ПриСозданииНоменклатурыПоДаннымКонтрагента(Знач НаборНоменклатурыКонтрагентов, Знач ОповещениеОЗавершении, СтандартнаяОбработка = Истина) Экспорт
	
	ЭлектронноеВзаимодействиеУТКлиент.ПриСозданииНоменклатурыПоДаннымКонтрагента(НаборНоменклатурыКонтрагентов, ОповещениеОЗавершении, СтандартнаяОбработка);
	
КонецПроцедуры

//-- Локализация

// При попытке выбора номенклатуры партнера в строке таблицы пользователь получает сообщение о незаполненности партнера.
//
// Параметры:
//  Объект                - ДанныеФормыСтруктура - документ, для выдачи сообщения об ошибках
//  Поле                  - ПолеФормы            - поле, в котором пользователь осуществляет выбор
//  ИмяПроверяемогоПоля   - Строка               - имя поля, для которого необходимо выдать ошибку.
//  ПредставлениеПартнера - Строка               - представление поля, для которого необходимо выдать ошибку.
//
Процедура ПриВыбореНоменклатурыПартнера(Объект, Поле, ИмяПроверяемогоПоля, ПредставлениеПартнера) Экспорт
	
	Если Поле.Имя = ИмяПроверяемогоПоля Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
			
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Поле ""%ПредставлениеПартнера%"" не заполнено'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеПартнера%", ПредставлениеПартнера);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Партнер");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует список выбора номенклатуры партнера с отбором по номенклатуре, характеристике, упаковке.
//
// Параметры:
//  Партнер       - СправочникСсылка.Партнеры   - владелец номенклатуры поставщика
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары
//  СписокВыбора  - СписокЗначений из СправочникСсылка.НоменклатураКонтрагентов - список выбора номенклатуры поставщика.
//
Процедура ЗаполнитьСписокВыбораНоменклатурыПартнера(Партнер, ТекущаяСтрока, СписокВыбора) Экспорт
	
	Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		Или Не ЗначениеЗаполнено(Партнер) Тогда
		СписокВыбора.Очистить();
	Иначе
		
		Упаковка = Неопределено;
		Если ТекущаяСтрока.Свойство("Упаковка") Тогда
			Упаковка = ТекущаяСтрока.Упаковка;
		ИначеЕсли ТекущаяСтрока.Свойство("ЕдиницаИзмерения") Тогда
			Упаковка = ТекущаяСтрока.ЕдиницаИзмерения;
		КонецЕсли;

		МассивЗначений = Новый Массив();
		// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
		МассивЗначений = СопоставлениеНоменклатурыКонтрагентовКлиент.СформироватьСписокВыбораНоменклатурыКонтрагента(
			Партнер,
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			Упаковка);
		// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
		
		СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры выбора упаковки.
//
// Параметры:
//  ПараметрыВыбора - Структура             - параметры выбора строки.
//  ТекущиеДанные   - ДанныеФормыЭлементКоллекции - текущая строка.
//
Процедура УстановитьПараметрыВыбораУпаковки(ПараметрыВыбора, ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли; 
	
	НовыеПараметрыВыбора = Новый Массив;
	КлючПараметраВыбора  = "Отбор.Упаковка";
	
	Для Каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя <> КлючПараметраВыбора Тогда
			НовыеПараметрыВыбора.Добавить(ПараметрВыбора);
		КонецЕсли;
	КонецЦикла;
	
	ЕдиницаИзмерения = ЗначениеЕдиницыИзмеренияПоСтрока(ТекущиеДанные);
	
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора(КлючПараметраВыбора, ЕдиницаИзмерения));
	
	ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область ОбработчикиСобытий_ЭлементыФормы

// См. ЭлектронноеВзаимодействиеКлиентПереопределяемый.ЭлементФормыПодсистемыОбработкаВыбора
Процедура ЭлементФормыПодсистемыОбработкаВыбора(Контекст, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Элемент.Имя = "СопоставлениеУпаковка" И Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ОчиститьСообщения();
		
		ТекущиеДанные = Контекст.Форма.Элементы.Сопоставление.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru ='Для выбора упаковок или единиц измерения номенклатура должна быть заполнена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеЕдиницыИзмеренияПоСтрока(ТекущиеДанные)
	
	Если ТекущиеДанные.Свойство("Упаковка")
		И ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		ЕдиницаИзмерения = ТекущиеДанные.Упаковка;
		
	ИначеЕсли ТекущиеДанные.Свойство("ЕдиницаИзмерения")
		И ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
		
	Иначе
		ЕдиницаИзмерения = НоменклатураВызовСервера.ЕдиницаХраненияНоменклатуры(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции
	
#КонецОбласти
