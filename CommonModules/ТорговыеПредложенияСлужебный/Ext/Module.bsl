////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияСлужебный.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполнение команды сервиса.
//
// Параметры:
//   ЗапросСервиса - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
//   Ошибка - Неопределено - на выходе это структура содержащая информацию об ошибке.
// Возвращаемое значение:
//   Строка, Массив из Структура, Структура, Неопределено - возвращаемые данные сервиса.
//
Функция ВыполнитьЗапрос(ЗапросСервиса, Отказ, Ошибка = Неопределено) Экспорт
	
	// Проверка отказа заполнения параметров.
	Если Не ТорговыеПредложения.ПравоПоискаТорговыхПредложений(Не ЗапросСервиса.БлокироватьСообщенияОбОшибках) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Ошибка = Новый Структура("ТекстОшибки", "ПодробныйТекстОшибки");
	
	// Инициализация параметров соединения.
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ПолныйАдрес) Тогда
		ПараметрыСоединения = ПараметрыСоединенияИзПолногоАдреса(ЗапросСервиса);
	Иначе
		ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения("ТорговаяПлощадка");
	КонецЕсли;
	
	ЗапросСервиса.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
	
	СтрокаАутентификации = БизнесСеть.СтрокаАутентификацииДляВыполненияКомандыСервиса(
		ЗапросСервиса, ПараметрыСоединения, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		
		ТекстОшибки = НСтр("ru='Отсутствует соединение с сервисом 1С:Бизнес-сеть'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1. %2", 
			ТекстОшибки, 
			БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ПодробноеПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2%3", 
			ТекстОшибки, 
			Символы.ПС, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки, Подсистема);
		
		Ошибка.Вставить("ТекстОшибки", ТекстСообщения);
		Ошибка.Вставить("ПодробныйТекстОшибки", ПодробноеПредставлениеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);
	
	// Получение тикета сервиса.
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Запрос.Заголовки.Вставить("Authorization", СтрокаАутентификации);
	КонецЕсли;
	
	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТипКонтента(Запрос, ЗапросСервиса);
	
	РезультатВыполнения = ВыполнитьHTTPМетодСервиса(Соединение, ЗапросСервиса, Запрос, Ошибка, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Истек срок токена обновления.
	НеАвторизированныйЗапрос = 401;
	Если РезультатВыполнения.Ответ.КодСостояния = НеАвторизированныйЗапрос 
		И ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		
		СтрокаАутентификации = БизнесСеть.СтрокаАутентификации(ЗапросСервиса.ИдентификаторОрганизации, Истина, Отказ);
		
		Если Отказ Или ПустаяСтрока(СтрокаАутентификации) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.Заголовки.Вставить("Authorization", СтрокаАутентификации);
		
		РезультатВыполнения = ВыполнитьHTTPМетодСервиса(Соединение, ЗапросСервиса, Запрос, Ошибка, Отказ);
		
		Если Отказ ИЛИ РезультатВыполнения.Ответ.КодСостояния = 401 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = РезультатВыполнения.Ответ;
	Данные = РезультатВыполнения.Данные;
	
	ОтветСервиса = ОбработатьОтветСервиса(Соединение, ЗапросСервиса, Ответ, Данные, Ошибка, Отказ);
	
	Если ЗапросСервиса.ВозвращатьЗаголовки = Истина Тогда
		Результат = Новый Структура;
		Результат.Вставить("Заголовки", Ответ.Заголовки);
		Результат.Вставить("Результат", ОтветСервиса);
	Иначе
		Результат = ОтветСервиса;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Чтение торгового предложения.
//
// Параметры:
//  Организация		 - СправочникСсылка.Организации - организация.
//  Идентификатор	 - Строка - идентификатор торгового предложения.
//  Валюта			 - СправочникСсылка.Валюты - валюта.
//  Отказ			 - Булево - результат метода.
// 
// Возвращаемое значение:
//  Структура - полученное значение торгового предложения:
//   * Идентификатор              - Строка - идентификатор.
//   * ВнутреннийИдентификатор    - Строка - внутренний идентификатор.
//   * ДатаПубликации             - Дата - дата публикации.
//   * ИдентификаторКатегорииСервиса    - Строка - идентификатор категории сервиса.
//   * НаименованиеКатегорииСервиса     - Строка - наименование категории сервиса.
//   * ИдентификаторНоменклатурыСервиса - Строка - идентификатор номенклатуры сервиса.
//   * ПредставлениеНоменклатурыСервиса - Строка - представление номенклатуры сервиса.
//   * ОписаниеСервиса            - Строка - описание сервиса.
//   * ИдентификаторХарактеристикиСервиса - Строка - идентификатор характеристики сервиса.
//   * ПредставлениеХарактеристикиСервиса - Строка - представление характеристики сервиса.
//   * ШтрихкодыСервиса           - Массив из Строка - штрихкоды сервиса.
//   * АртикулПроизводителя       - Строка - артикул производителя.
//   * АдресаКартинокСервиса      - Массив - адреса картинок сервиса.
//   * КодЕдиницыИзмеренияСервиса - Строка - код единицы измерения сервиса.
//   * ИдентификаторПроизводителя - Строка - идентификатор производителя.
//   * НаименованиеПроизводителя  - Строка - наименование производителя.
//   * ИдентификаторМаркиСервиса  - Строка - идентификатор марки сервиса.
//   * НаименованиеМаркаСервиса   - Строка - наименование марка сервиса.
//   * СвойстваСервиса            - ТаблицаЗначений - свойства сервиса, колонки:
//     ** Идентификатор - Строка - идентификатор.
//     ** Наименование  - Строка - наименование.
//     ** Значение      - Строка - значение.
//     ** Представление - Строка - представление.
//   * ИдентификаторНоменклатуры  - Строка - идентификатор номенклатуры.
//   * НаименованиеНоменклатуры   - Строка - наименование номенклатуры.
//   * Описание               - Строка - описание.
//   * Марка                  - Строка - марка.
//   * Производитель          - Строка - производитель.
//   * Артикул                - Массив из Строка - артикул.
//   * Штрихкоды              - Массив из Строка - штрихкоды.
//   * КодЕдиницыИзмерения    - Строка - код единицы измерения.
//   * ИдентификаторКатегории - Строка - идентификатор категории.
//   * НаименованиеКатегории  - Строка - наименование категории.
//   * Свойства - Массив из Структура - свойства товара, где:
//     ** Идентификатор - Строка - идентификатор.
//     ** Наименование  - Строка - наименование.
//     ** Значение      - Строка - значение.
//     ** Представление - Строка - представление.
//   * Заголовок                - Строка - заголовок.
//   * ДополнительноеОписание   - Строка - дополнительное описание.
//   * ИдентификаторКонтрагента - Строка - идентификатор контрагента.
//   * ИННКонтрагента           - Строка - ИНН контрагента.
//   * КППКонтрагента           - Строка - КПП контрагента.
//   * НаименованиеКонтрагента  - Строка - наименование контрагента.
//   * ПредставлениеКонтакта    - Строка - представление контакта.
//   * Телефон              - Строка - телефон.
//   * ЭлектроннаяПочта     - Строка - электронная почта.
//   * УпаковкаНаименование - Строка - упаковка наименование.
//   * ЧислительУпаковки    - Число - числитель упаковки.
//   * ЗнаменательУпаковки  - Число - знаменатель упаковки.
//   * КоличествоЕдиниц     - Число - количество единиц.
//   * СрокПоставки         - Число - срок поставки.
//   * Валюта               - СправочникСсылка - валюта.
//   * СтавкаНДС            - ПеречислениеСсылка - ставка НДС.
//   * ЦенаВключаетНДС      - Булево - цена включает НДС.
//   * Цены                 - ТаблицаЗначений - цены:
//     ** Количество  - Число - количество.
//     ** Цена        - Число - цена.
//     ** Комментарий - Строка - комментарий.
//   * КратностьУпаковки    - Число - кратность упаковки.
//   * Наличие              - Число - наличие.
//   * РегионыДоставки      - Массив - регионы доставки.
//   * АдресаСамовывоза     - Массив - адреса самовывоза.
//   * ВалютаПоиска         - СправочникСсылка - валюта поиска.
//   * ЦеныПоВалюте         - ТаблицаЗначений - цены по валюте:
//     ** Количество  - Число - количество.
//     ** Цена        - Число - цена.
//     ** Комментарий - Строка - комментарий.
//   * ЦенаПубликации - Число - цена публикации.
//   * Цена - Число - цена.
//
Функция ПолучитьТорговоеПредложение(Организация, Идентификатор, Валюта, Отказ) Экспорт
	
	// Запрос торгового предложения.
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("Идентификатор", Идентификатор);
	ПараметрыЗапроса.Вставить("Валюта",        Валюта);
	ПараметрыЗапроса.Вставить("Организация",   Организация);
	
	ЗапросСервиса = ЗапросСервисаПолучениеТорговогоПредложения(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Добавление цены товара по валюте публикации.
	Результат.Вставить("ЦенаПубликации", 0);
	Если ЗначениеЗаполнено(Результат.Цены) И Результат.Цены.Количество() Тогда
		Результат.Цены.Сортировать("Количество");
		Результат.ЦенаПубликации = Результат.Цены[0].Цена;
	КонецЕсли;
	
	// Добавление цены по валюте запроса.
	Результат.Вставить("Цена", 0);
	Если ЗначениеЗаполнено(Результат.ЦеныПоВалюте) И Результат.ЦеныПоВалюте.Количество() Тогда
		Результат.ЦеныПоВалюте.Сортировать("Количество");
		Результат.Цена = Результат.ЦеныПоВалюте[0].Цена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Поиск торговых предложения по отбору.
//
// Параметры:
//  ПараметрыЗапроса - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами.
//  Отказ			 - Булево	 - результат выполнения.
// 
// Возвращаемое значение:
//  Структура - возвращаемые данные, состав:
//   * Страницы - Структура - страницы:
//     ** Страница - Число - страница.
//     ** РазмерСтраницы - Число - размер страницы.
//     ** КоличествоСтрок - Число - количество строк.
//     ** КоличествоСтраниц - Число - количество страниц.
//   * Список - ТаблицаЗначений - список:
//     ** Идентификатор - Строка - идентификатор.
//     ** НаименованиеНоменклатуры - Строка - наименование номенклатуры.
//     ** ИдентификаторКатегории - Строка - идентификатор категории.
//     ** НаименованиеКатегории - Строка - наименование категории.
//     ** КодЕдиницыИзмерения - Строка - код единицы измерения.
//     ** АртикулПроизводителя - Строка - артикул производителя.
//     ** АртикулПоставщика - Строка - артикул поставщика.
//     ** СрокПоставки - Число - срок поставки.
//     ** НаименованиеУпаковки - Строка - наименование упаковки.
//     ** ЧислительУпаковки - Число - числитель упаковки.
//     ** ЗнаменательУпаковки - Число - знаменатель упаковки.
//     ** КратностьУпаковки - Число - кратность упаковки.
//     ** Наличие - Число - наличие.
//     ** СтавкаНДС - Ссылка - ставка НДС.
//     ** ЦенаВключаетНДС - Булево - цена включает НДС.
//     ** ИдентификаторКонтрагента - Строка - идентификатор контрагента.
//     ** ИННКонтрагента - Строка - ИНН контрагента.
//     ** КППКонтрагента - Строка - КПП контрагента.
//     ** НаименованиеКонтрагента - Строка - наименование контрагента.
//     ** ПредставлениеКонтакта - Строка - представление контакта.
//     ** Телефон - Строка - телефон.
//     ** ЭлектроннаяПочта - Строка - электронная почта.
//     ** Валюта - Ссылка - валюта.
//     ** Цена - Число - цена.
//     ** ВалютаПредложения - Ссылка - валюта предложения.
//     ** ЦеныВВалютеПредложения - ТаблицаЗначений - цены в валюте предложения:
//        *** Количество - Число - количество.
//        *** Цена - Число - цена.
//        *** Комментарий - Строка - комментарий.
//
Функция ПоискТорговыхПредложенийПоОтбору(Знач ПараметрыЗапроса, Отказ) Экспорт
	
	ЗапросСервиса = ЗапросСервисаПоискТорговыхПредложенийСОтборами(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавитьЦеныПредложения(Результат);
	
	ДополнитьДаннымиКатегорий(Результат, ПараметрыЗапроса);
	
	ДополнитьДаннымиКорзины(Результат, ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Поиск торговых предложений по списку.
//
// Параметры:
//  ПараметрыЗапроса - см. НовыеПараметрыПоискаТорговыхПредложенийПоСписку.
//  Отказ			 - Булево	 - признак результата выполнения.
// 
// Возвращаемое значение:
// Структура: 
//  * Статистика - ТаблицаЗначений:
//   ** НомерСтроки - Число
//   ** МаксимальнаяЦена - Число
//   ** МаксимальнаяЦенаВалюта - Число
//   ** МинимальнаяЦена - Число
//   ** МинимальнаяЦенаВалюта - Число
//   ** МаксимальныйСрокПоставки - Число
//   ** МинимальныйСрокПоставки - Число
//   ** КоличествоПредложений - Число
//  * Контрагенты - ТаблицаЗначений:
//   ** ИдентификаторКонтрагента - Строка
//   ** ИННКонтрагента - Строка
//   ** КППКонтрагента - Строка
//   ** НаименованиеКонтрагента - Строка
//   ** НайденныеСтроки - ТаблицаЗначений
//   ** ПредставлениеКонтакта - Строка
//   ** Телефон - Неопределено, Строка - телефон контакта.
//   ** ЭлектроннаяПочта - Строка
//
Функция ПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса, Отказ) Экспорт
	
	ЗапросСервиса = ЗапросСервисаПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установка представления единиц измерения по коду.
//
// Параметры:
//  Коллекция				 - ТаблицаЗначений - таблица для заполнения.
//  РеквизитКода			 - Строка - имя реквизита с кодом единицы измерения.
//  РеквизитПредставление	 - Строка - имя реквизита для установки представления.
//
Процедура УстановитьПредставлениеЕдиницИзмерения(Коллекция, РеквизитКода, РеквизитПредставление) Экспорт
	
	Если ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		
		Если Коллекция.Колонки.Найти(РеквизитПредставление) = Неопределено Тогда
			Коллекция.Колонки.Добавить(РеквизитПредставление, Новый ОписаниеТипов("Строка"), НСтр("ru = 'Единица измерения'"));
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из Коллекция Цикл
			
			Если ЗначениеЗаполнено(ЭлементКоллекции[РеквизитПредставление]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции[РеквизитКода]) Тогда
				// Не заполнен код единицы измерения.
				Продолжить;
			КонецЕсли;
			
			ЭлементКоллекции[РеквизитПредставление]
				= ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(ЭлементКоллекции[РеквизитКода]).Представление;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверка использования функционал публикации.
// 
// Возвращаемое значение:
//  Булево - признак использования функционала.
//
Функция ИспользоватьФункционалПубликации() Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип
		<> Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

// Проверка публикации товаров поставщика в сервисе 1С:Бизнес-сеть.
// 
// Возвращаемое значение:
//  Булево - признак публикации товаров поставщика.
//
Функция ПубликоватьИзображенияТоваровПоставщика() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПубликоватьИзображения = Константы.НеВыгружатьИзображенияТорговыхПредложений.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ ПубликоватьИзображения;
	
КонецФункции

// Получить список организаций торговых предложений.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.Организация - список организаций.
//  ТолькоОпубликованные - Булево - если нужно получить организации только уже опубликованных ТП.
//
Функция ПолучитьОрганизацииОпубликованныхТорговыхПредложений(ТолькоОпубликованные = Ложь) Экспорт
	
	СписокОрганизацийТорговыхПредложений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияСинхронизацииТорговыеПредложения.Организация
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	&ТолькоОпубликованные";
	
	Если ТолькоОпубликованные Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТолькоОпубликованные", 
			"СостоянияСинхронизацииТорговыеПредложения.Идентификатор <> """"");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&ТолькоОпубликованные", 
			"Истина");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизацийТорговыхПредложений.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Возврат СписокОрганизацийТорговыхПредложений;

КонецФункции

// Получить список публикуемых товаров торгового предложения, 
// у которых кратность количества упаковок больше значения по умолчанию равного 1.
// 
// Параметры:
//  ПрайсЛист 				- ОпределяемыйТип.ТорговоеПредложение - Прайс лист.
// 
// Возвращаемое значение:
//  Массив из Структура см. НовыеДанныеКратностиУпаковок - Данные кратности упаковок публикуемых торговых предложений, см.НовыеДанныеКратностиУпаковок.
//
Функция ДанныеКратностиУпаковокПубликуемыхТорговыхПредложений(ПрайсЛист) Экспорт
	
	Возврат РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.
		ДанныеКратностиУпаковокПубликуемыхТорговыхПредложений(ПрайсЛист);
	
КонецФункции

// См. РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.ПубликуемаяНоменклатураТорговыхПредложений
//
Функция ПубликуемаяНоменклатураТорговыхПредложений() Экспорт
	Результат = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.ПубликуемаяНоменклатураТорговыхПредложений();
	Возврат Результат;
КонецФункции

Функция НайтиКонтрагентаПоИНН(ИНН) Экспорт
	
	ИмяПрикладногоСправочника = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		ИмяПрикладногоСправочника = "Контрагенты";
	КонецЕсли;
	ПараметрКонтрагенты = СтрШаблон("Справочник.%1", ИмяПрикладногоСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	%1 КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ПараметрКонтрагенты);
	Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Контрагент = Результат.Ссылка;
	Иначе
		Контрагент = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Картинка товара торгового предложения.
// 
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныеФайлыИзображенийТорговоеПредложение
//  КартинкаПоумолчанию - Неопределено
// 
// Возвращаемое значение:
//  Картинка, Неопределено - Картинка товара торгового предложения
//
Функция КартинкаТовараТорговогоПредложения(ПрисоединенныйФайл, КартинкаПоумолчанию = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат КартинкаПоумолчанию;
	КонецЕсли;
	
	КартинкаНоменклатуры = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	
	Если ТипЗнч(КартинкаНоменклатуры) = Тип("Картинка") Тогда
		КартинкаПоумолчанию = КартинкаНоменклатуры;
	ИначеЕсли ТипЗнч(КартинкаНоменклатуры) = Тип("ДвоичныеДанные") Тогда
		КартинкаПоумолчанию = Новый Картинка(КартинкаНоменклатуры);
	КонецЕсли;
	
	Возврат КартинкаПоумолчанию;
	
КонецФункции

#Область АдресаРегионы

Функция АдресаРегионыТорговогоПредложения(Организация, ТорговоеПредложение) Экспорт
	
	ТекущаяЗапись = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ЗаписьСостояниеСинхронизации(
		Организация, ТорговоеПредложение);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Регионы", Новый Массив);
	Результат.Вставить("Адреса",  Новый Массив);
	
	Если ТекущаяЗапись = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Регионы = ?(
		ЗначениеЗаполнено(ТекущаяЗапись.РегионыДоставки),
		БизнесСеть.ЗначениеИзСтрокиJSON(ТекущаяЗапись.РегионыДоставки),
		Новый Массив);
	
	Адреса = ?(
		ЗначениеЗаполнено(ТекущаяЗапись.РегионыСамовывоза),
		БизнесСеть.ЗначениеИзСтрокиJSON(ТекущаяЗапись.РегионыСамовывоза),
		Новый Массив);
	
	Результат.Регионы = Регионы;
	Результат.Адреса = Адреса;
		
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьДанныеРегионовВСостояниеСинхронизации(
			Организация, 
			ТорговоеПредложение, 
			РегионыДоставки, 
			АдресаСамовывоза) Экспорт
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	
	Если ЗначениеЗаполнено(РегионыДоставки) Тогда
		Регионы = БизнесСеть.ЗначениеВJSON(РегионыДоставки, ПараметрыЗаписиJSON);
	Иначе
		Регионы = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресаСамовывоза) Тогда
		Адреса  = БизнесСеть.ЗначениеВJSON(АдресаСамовывоза, ПараметрыЗаписиJSON);
	Иначе
		Адреса = "";
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СостоянияСинхронизацииТорговыеПредложения");
		ЭлементБлокировкиДанных.УстановитьЗначение("ТорговоеПредложение", ТорговоеПредложение);
		ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТорговоеПредложение.Установить(ТорговоеПредложение);
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			ЗаписьРедактирования = НаборЗаписей[0];
		Иначе
			ЗаписьРедактирования = НаборЗаписей.Добавить();
		КонецЕсли;
		
		ЗаписьРедактирования.РегионыДоставки = Регионы;
		ЗаписьРедактирования.РегионыСамовывоза = Адреса;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Торговые предложения.Ошибка при записи данных регионов доставки и адресов самовывоза'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,, 
			ТорговоеПредложение, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Параметры запроса поиска торговых предложений по списку.
// Метод: GET /search-groups.
// Модель: SearchTradeOffersGroupsQueryV1.
// 
// Возвращаемое значение:
//  Структура - Параметры поиска:
// * КоличествоКонтрагентов - Число
// * ОтклонениеЦены - Число
// * СрокОтгрузки - Число
// * Валюта - СправочникСсылка
// * Товары - ТаблицаЗначений:
// ** Наименование - Строка
// ** Производитель - Строка
// ** ЦенаОт - Число
// ** ЦенаДо - Число
// ** ЕдиницаИзмерения - СправочникСсылка
// ** Количество- Число
// ** Артикулы - Массив
// ** Штрихкоды - Массив
// ** Контрагенты - Массив
// ** ИдентификаторКатегории - Строка
// ** ИдентификаторНоменклатурыСервиса - Строка
// ** ИдентификаторХарактеристикиСервиса - Строка
// ** Сортировка - Строка
// * РегионыПоиска - Массив
// * ПолучитьДанныеКорзины - Булево
// * АдресКорзины - Строка
// * Организация - СправочникСсылка
//
Функция НовыеПараметрыПоискаТорговыхПредложенийПоСписку() Экспорт
	
	Результат = Новый Структура;
	
	// Общие параметры.
	Результат.Вставить("КоличествоКонтрагентов", 0); // maxSuppliersNumber
	Результат.Вставить("ОтклонениеЦены",         0); // priceDeviationPercent
	Результат.Вставить("СрокОтгрузки",           0); // maxShippingDays
	Результат.Вставить("Валюта", Неопределено); // priceCurrencyCode
	
	// Отборы для поиска. SearchTradeOfferCriteria
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Наименование",  Типы().Строка); // query
	Товары.Колонки.Добавить("Производитель", Типы().Строка); // manufacturerOrBrand
	Товары.Колонки.Добавить("ЦенаОт",        Типы().Число);  // priceFrom
	Товары.Колонки.Добавить("ЦенаДо",        Типы().Число);  // priceTo
	Товары.Колонки.Добавить("ЕдиницаИзмерения");             // unitOkeiCode (ссылка)
	Товары.Колонки.Добавить("Количество",    Типы().Число);  // demandedUnitsNumber
	Товары.Колонки.Добавить("Артикулы",      Типы().Массив); // partNumbers (строки)
	Товары.Колонки.Добавить("Штрихкоды",     Типы().Массив); // barCodes (строки)
	Товары.Колонки.Добавить("Контрагенты",   Типы().Массив); // suppliers (ссылки контрагенты)
	Товары.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка); // categoryId
	Товары.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка); // nomenclatureId
	Товары.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка); // nomenclatureCharacteristicId
	Товары.Колонки.Добавить("Сортировка",    Типы().Строка); // resultSorting
	
	Результат.Вставить("Товары",             Товары);
	Результат.Вставить("РегионыПоиска",      Новый Массив);
	
	// Чтение корзины
	Результат.Вставить("Организация", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения("ТорговаяПлощадка");
	
	Протокол = ?(ПараметрыСоединения.ЗащищенноеСоединение <> Неопределено, "HTTPS", "HTTP");
	Адрес    = ПараметрыСоединения.Сервер;
	Порт     = ПараметрыСоединения.Порт;
	Описание = НСтр("ru = 'Публикация, поиск, заказы торговых предложений в сервисе 1С:Торговая площадка.'");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПрофилиБезопасности

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой

// Подготовка данных для регистрации сопоставления.
//  В методе выполняется запись данных для публикации в служебный регистр сведений
//  и выполняется подготовка запроса для получения данных по публикуемым товарам.
//  В составе возвращаемых полей в запросе должны быть Номенклатура, Характеристика.
//
// Параметры:
//  Запрос	 - Запрос - объект запроса.
//
Процедура ПодготовитьДанныеИЗапросРегистрацииСопоставленияНоменклатуры(Запрос) Экспорт
	
	// Создание новых записей в регистре.
	СоздатьЗаписиТорговыхПредложенийДляПоискаСоответствия();
	
	// Инициализация запроса.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется";
	
КонецПроцедуры

// Подготовка запроса сопоставления и поиска номенклатуры.
//  По входящему запросу производится добавление источника данных и соединение
//  по полям Номенклатура и Характеристика для механизма сопоставления
//  номенклатуры с сервисом 1С:Номенклатура.
//
// Параметры:
//  Запрос	 - Запрос - запрос для компоновки.
//
Процедура ПодготовитьЗапросСопоставленияНоменклатуры(Запрос) Экспорт
	
	ПолеСТекстомЗапроса = "Текст";
	Если ТипЗнч(Запрос) = Тип("ДинамическийСписок") Тогда
		ПолеСТекстомЗапроса = "ТекстЗапроса";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос[ПолеСТекстомЗапроса]);
	
	ТекущийЗапрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ЭтоПодсчетСтатистики = ТекущийЗапрос.Колонки.Найти("Количество") <> Неопределено;
	
	Если ЭтоПодсчетСтатистики Тогда
		
		СтрокаУсловия = 
			"ИСТИНА В
			|(ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
			|ГДЕ
			|	СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
			|	И СоответствиеНоменклатурыРаботаСНоменклатурой.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
			|	И ТорговыеПредложенияТорговойПлощадки.Публикуется)";
		
		ТекущийЗапрос.Операторы[0].Отбор.Добавить(СтрокаУсловия);
		
	Иначе
		
		ОператорЗапроса = ТекущийЗапрос.Операторы[0];
		
		ОператорЗапроса.ВыбиратьРазличные = Истина;
		СоответствиеНоменклатуры          = ОператорЗапроса.Источники[0];
		СоответствиеПоиска                = ОператорЗапроса.Источники.Добавить(
			"РегистрСведений.ТорговыеПредложенияТорговойПлощадки", "ТорговыеПредложенияТорговойПлощадки");
		
		СоответствиеНоменклатуры.Соединения.Очистить();
		СоответствиеПоиска.Соединения.Очистить();
		
		СоответствиеНоменклатуры.Соединения.Добавить(СоответствиеПоиска,
		СтрШаблон("%1.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
			|И %1.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
			|И ТорговыеПредложенияТорговойПлощадки.Публикуется",
			СоответствиеНоменклатуры.Источник.Псевдоним));
			
		СоответствиеНоменклатуры.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;	
			
	КонецЕсли;
	
	Запрос[ПолеСТекстомЗапроса] = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

// ЭлектронноеВзаимодействие.БизнесСеть

Процедура ПриЗаписиКонстантыИспользоватьБизнесСеть(Значение) Экспорт
	
	Использование = ПолучитьФункциональнуюОпцию("ПоказыватьРекомендацииБизнесСеть") И Значение;
	БизнесСеть.ИзменитьРегламентноеЗадание(
		Метаданные.РегламентныеЗадания.ОбновлениеПодсказокТорговыеПредложения.Имя, "Использование", Использование);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.БизнесСеть

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКорзиной

#Область СозданиеКорзины

Функция СоздатьПрочитатьКорзинуВФоне(ПараметрыМетода, УникальныйИдентификатор) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Чтение корзины.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.СоздатьПрочитатьКорзинуСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
		
КонецФункции

Процедура СоздатьПрочитатьКорзинуСохранитьРезультат(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеКорзины", Неопределено);
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыПроцедуры.АдресКорзины) Тогда
		
		ДанныеКорзины = ПолучитьДанныеКорзины(
			ПараметрыПроцедуры.Организация, 
			ПараметрыПроцедуры.АдресКорзины, 
			Отказ);
		
	Иначе
		
		ДанныеКорзины = СоздатьПрочитатьКорзину(ПараметрыПроцедуры.Организация, Отказ);
		
	КонецЕсли;
	
	Результат.ДанныеКорзины = ДанныеКорзины;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура СоздатьКорзинуИЗаполнитьКоманды(Организация, АдресКорзины, АдресКомандыДобавитьТовар, Отказ = Ложь) Экспорт
	
	ДанныеКорзины = СоздатьПрочитатьКорзину(Организация, Отказ);
	
	Если Отказ ИЛИ Не ЗначениеЗаполнено(ДанныеКорзины) Тогда
		Возврат;
	КонецЕсли;
	
	АдресКорзины              = ДанныеКорзины.АдресКорзины;
	АдресКомандыДобавитьТовар = ДанныеКорзины.АдресаКоманд.ДобавитьТовар;
	
	СохранитьАдресКорзиныВЛокальномХранилище(АдресКорзины);
	
КонецПроцедуры

Функция СоздатьПрочитатьКорзину(Организация, Отказ) Экспорт
	
	АдресКорзины = СоздатьКорзинуПокупателя(Организация, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ПолучитьДанныеКорзины(
		Организация, 
		АдресКорзины, 
		Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьКорзинуПокупателя(Организация, Отказ)
	
	Результат = "";
	
	ПараметрыКоманды = ОписаниеЗапросаНаСозданиеКорзины(Организация);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);

	Если Не Отказ Тогда
		Результат = ДанныеСервиса.Заголовки["Location"];
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЗапросаНаСозданиеКорзины(Организация)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование        = НСтр("ru = 'Создание корзины покупателя'");
	ЗапросСервиса.Адрес               = "/shopping-carts";
	ЗапросСервиса.Метод               = "POST";
	ЗапросСервиса.ВозвращатьЗаголовки = Истина;
	ЗапросСервиса.РезультатВСоответствие = Истина;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, Организация);
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ЛокальноеХранение

Функция КлючХраненияКорзиныПокупателя()
	
	Результат = "КорзинаПользователяБизнесСеть";
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьАдресКорзиныВЛокальномХранилище(АдресКорзины)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючХраненияКорзиныПокупателя(), 
		"АдресКорзины", 
		АдресКорзины);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция АдресКорзиныИзЛокальногоХранилища() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючХраненияКорзиныПокупателя(), 
		"АдресКорзины",
		"");
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьАдресКорзиныИзЛокальногоХранилища() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючХраненияКорзиныПокупателя(), 
		"АдресКорзины",
		"");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеКорзины

Функция ПолучитьДанныеКорзины(
			Знач Организация, 
			Знач АдресКорзины,
			Отказ,
			КорзинаОтсутствует = Ложь,
			БлокироватьСообщенияОбОшибках = Ложь)
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(АдресКорзины) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыКоманды = ОписаниеЗапросаНаЧтениеКорзины(Организация, АдресКорзины, БлокироватьСообщенияОбОшибках);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);

	Если ДанныеСервиса = 404 Тогда
		КорзинаОтсутствует = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ДанныеКорзиныИзДанныхСервиса(ДанныеСервиса);
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("АдресКорзины", АдресКорзины);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЗапросаНаЧтениеКорзины(Организация, АдресКорзины, БлокироватьСообщенияОбОшибках)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование       = НСтр("ru = 'Чтение корзины покупателя'");
	ЗапросСервиса.Метод              = "GET";
	ЗапросСервиса.РасширятьКонтент   = Ложь;
	ЗапросСервиса.Контент            = "application/vnd.1cbn.v1+json";
	ЗапросСервиса.РезультатВСоответствие = Истина;
	ЗапросСервиса.БлокироватьСообщенияОбОшибках = БлокироватьСообщенияОбОшибках;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, Организация);
	УстановитьАдресЗапроса(ЗапросСервиса, АдресКорзины);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Процедура ПеречитатьКорзину(АдресКорзины, АдресКомандыДобавитьТовар, ДанныеКорзины, ТаблицаТоваров) Экспорт
	
	Если АдресКорзины <> ДанныеКорзины.АдресКорзины Тогда
		АдресКорзины = ДанныеКорзины.АдресКорзины;
		СохранитьАдресКорзиныВЛокальномХранилище(АдресКорзины);
	КонецЕсли;
	
	АдресКомандыДобавитьТовар = ДанныеКорзины.АдресаКоманд.ДобавитьТовар;
	
	ЗаполнитьТоварыПоДаннымКорзины(ТаблицаТоваров, ДанныеКорзины);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоДаннымКорзины(ТаблицаТоваров, ДанныеКорзины = Неопределено, АдресДанныхКорзины = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеКорзины)
		И Не ЗначениеЗаполнено(АдресДанныхКорзины) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров.Очистить();
	
	Если ЗначениеЗаполнено(АдресДанныхКорзины) Тогда
		
		ДанныеСервиса = ПолучитьИзВременногоХранилища(АдресДанныхКорзины);
		
		Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеКорзины = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСервиса, "ДанныеКорзины");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКорзины)
		ИЛИ Не ЗначениеЗаполнено(ДанныеКорзины.Заказы) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийЗаказ Из ДанныеКорзины.Заказы Цикл
		
		Для Каждого ТекущийТовар Из ТекущийЗаказ.Товары Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			
			НоваяСтрока.Количество               = ТекущийТовар.Количество;
			НоваяСтрока.Цена                     = ТекущийТовар.Цена;
			НоваяСтрока.СуммаНДС                 = ТекущийТовар.Итоги.СуммаНДС;
			НоваяСтрока.Сумма                    = ТекущийТовар.Итоги.СуммаСНДС;
			НоваяСтрока.Идентификатор            = ТекущийТовар.Идентификатор;
			НоваяСтрока.ЦенаВключаетНДС          = ТекущийТовар.ЦенаВключаетНДС;
			НоваяСтрока.СтавкаНДС                = ТекущийТовар.СтавкаНДС;
			НоваяСтрока.АдресКомандыУдалить      = ТекущийТовар.АдресаКоманд.УдалитьТовар;
			НоваяСтрока.АдресКомандыИзменитьКоличество = ТекущийТовар.АдресаКоманд.УстановитьКоличество;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеЗаказов

Процедура СоздатьЗаказПеречитатьКорзинуСохранитьРезультат(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПроцедуры) Тогда
		Возврат;
	КонецЕсли;
		
	Отказ = Ложь;
	
	СоздатьЗаказКорзины(ПараметрыПроцедуры, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКорзины = ПолучитьДанныеКорзины(
		ПараметрыПроцедуры.Организация, ПараметрыПроцедуры.АдресКорзины, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Результат = Новый Структура;
	
	Результат.Вставить("ДанныеКорзины", ДанныеКорзины);

	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция СоздатьЗаказПеречитатьКорзинуВФоне(ПараметрыСозданияЗаказа, УникальныйИдентификатор) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Отправка заказа поставщику.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.СоздатьЗаказПеречитатьКорзинуСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыСозданияЗаказа, ПараметрыВыполнения);
		
КонецФункции

Функция ОписаниеПараметровСозданияЗаказаКорзины() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация",            Неопределено);
	Результат.Вставить("АдресКоманды",           "");
	Результат.Вставить("АдресКорзины",           "");
	Результат.Вставить("НомерДокумента",         "");
	Результат.Вставить("НаименованиеПокупателя", "");
	Результат.Вставить("ЭлектроннаяПочта",       "");
	Результат.Вставить("Телефон",                "");
	Результат.Вставить("СпособДоставки",         "Доставка"); // "Доставка", "Самовывоз"
	Результат.Вставить("ИдентификаторФИАС",      "");
	Результат.Вставить("КодСтраны",              "");
	Результат.Вставить("ПредставлениеАдреса",    "");
	Результат.Вставить("КомментарийКЗаказу",     "");
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьЗаказКорзины(ПараметрыМетода, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСозданияЗаказа = ОписаниеПараметровСозданияЗаказаКорзины();
	
	ЗаполнитьЗначенияСвойств(ПараметрыСозданияЗаказа, ПараметрыМетода);
	
	ПараметрыКоманды = ОписаниеЗапросаНаСозданиеЗаказаКорзины(ПараметрыСозданияЗаказа);
		
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ОписаниеЗапросаНаСозданиеЗаказаКорзины(ПараметрыСозданияЗаказа)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование       = НСтр("ru = 'Создание заказа корзины'");
	ЗапросСервиса.Метод              = "POST";
	ЗапросСервиса.РасширятьКонтент   = Ложь;
	ЗапросСервиса.Контент            = "application/vnd.1cbn.v1+json";
	ЗапросСервиса.Данные             = ДанныеЗаказаКорзиныВJSON(ПараметрыСозданияЗаказа);
	ЗапросСервиса.РезультатВСоответствие = Истина;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, ПараметрыСозданияЗаказа.Организация);
	УстановитьАдресЗапроса(ЗапросСервиса, ПараметрыСозданияЗаказа.АдресКоманды);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ДанныеЗаказаКорзиныВJSON(ПараметрыСозданияЗаказа)
	
	ДанныеЗаказа = Новый Структура;
		
	КонтактныеДанные = Новый Структура;
	
	ДобавитьЗначение(КонтактныеДанные, "name",  ПараметрыСозданияЗаказа.НаименованиеПокупателя);
	ДобавитьЗначение(КонтактныеДанные, "email",  ПараметрыСозданияЗаказа.ЭлектроннаяПочта);
	ДобавитьЗначение(КонтактныеДанные, "phone",  ПараметрыСозданияЗаказа.Телефон);
	
	Доставка = Новый Структура;
	
	ДобавитьЗначение(Доставка, "fiasCode",         ПараметрыСозданияЗаказа.ИдентификаторФИАС);
	ДобавитьЗначение(Доставка, "title",            ПараметрыСозданияЗаказа.ПредставлениеАдреса);
	ДобавитьЗначение(Доставка, "countryOksmCode",  ПараметрыСозданияЗаказа.КодСтраны);
		
	ПолеДоставки = "deliveryTo";
	
	Если ПараметрыСозданияЗаказа.СпособДоставки = "Самовывоз" Тогда
		ПолеДоставки = "pickupFrom";
	КонецЕсли;
	
	ДанныеДоставки = Новый Структура;
	
	ДобавитьЗначение(ДанныеДоставки, ПолеДоставки, Доставка, Истина);
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыСозданияЗаказа.Организация);
	
	ДобавитьЗначение(ДанныеЗаказа, "documentNumber", ПараметрыСозданияЗаказа.НомерДокумента);
	ДобавитьЗначение(ДанныеЗаказа, "customerOrganizationId", ИдентификаторОрганизации, Истина);
	ДобавитьЗначение(ДанныеЗаказа, "comment",        ПараметрыСозданияЗаказа.КомментарийКЗаказу);
	ДобавитьЗначение(ДанныеЗаказа, "contacts",       КонтактныеДанные, Истина);
	
	Если ЗначениеЗаполнено(Доставка) Тогда
		ДобавитьЗначение(ДанныеЗаказа, "deliveryOptions", ДанныеДоставки, Истина);
	Иначе
		ДобавитьЗначение(ДанныеЗаказа, "deliveryOptions", Неопределено, Истина);
	КонецЕсли;
	
	Результат = ЗначениеВJSON(ДанныеЗаказа);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МоделиДанныхКорзины

Функция ДанныеКорзиныИзДанныхСервиса(ДанныеСервиса)
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Заказы",       ЗаказыКорзины(ДанныеСервиса,       "content"));
	Результат.Вставить("АдресаКоманд", АдресаКомандКорзины(ДанныеСервиса, "_links"));
	
	Возврат Результат;
	
КонецФункции

Функция ЗаказыКорзины(ДанныеСервиса, ИмяСвойства)
	
	ДанныеЗаказов = Новый ТаблицаЗначений;
	
	ДанныеЗаказов.Колонки.Добавить("Поставщик",            Типы().Структура);
	ДанныеЗаказов.Колонки.Добавить("Товары",               Типы().Таблица);
	ДанныеЗаказов.Колонки.Добавить("ДанныеДоставки",       Типы().Структура);
	ДанныеЗаказов.Колонки.Добавить("ДоступныеОрганизации", Типы().Таблица);
	ДанныеЗаказов.Колонки.Добавить("Итоги",                Типы().Структура);
	ДанныеЗаказов.Колонки.Добавить("НарушенияОграничений", Типы().Таблица);
	ДанныеЗаказов.Колонки.Добавить("АдресаКоманд",         Типы().Структура);
	
	ДанныеЗаказовСервиса = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Если Не ЗначениеЗаполнено(ДанныеЗаказовСервиса) Тогда
		Возврат ДанныеЗаказов;
	КонецЕсли;
	
	// Заполнение данных
	
	Для каждого ТекущийЗаказ Из ДанныеЗаказовСервиса Цикл
		
		НоваяСтрока = ДанныеЗаказов.Добавить();
		
		НоваяСтрока.Поставщик            = ПоставщикЗаказаКорзины(ТекущийЗаказ,            "supplier");
		НоваяСтрока.НарушенияОграничений = НарушенияОграниченийЗаказаКорзины(ТекущийЗаказ, "makeOrderViolations");
		НоваяСтрока.Товары               = ТоварыЗаказаКорзины(ТекущийЗаказ,               "items", НоваяСтрока.НарушенияОграничений);
		НоваяСтрока.ДанныеДоставки       = ДанныеДоставкиЗаказаКорзины(ТекущийЗаказ,       "deliveryOptions");
		НоваяСтрока.ДоступныеОрганизации = ОрганизацииЗаказаКорзины(ТекущийЗаказ,          "customersAudience");
		НоваяСтрока.Итоги                = ИтогиКорзины(ТекущийЗаказ,                      "orderTotal");
		НоваяСтрока.АдресаКоманд         = АдресаКомандЗаказаКорзины(ТекущийЗаказ,         "_links");

	КонецЦикла;
		
	Возврат ДанныеЗаказов;
	
КонецФункции

Функция ОрганизацииЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	ДоступныеОрганизации = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",            Типы().Строка);
	Результат.Колонки.Добавить("Наименование",             Типы().Строка);
	Результат.Колонки.Добавить("НатуральныйИдентификатор", Типы().Строка);
	
	Если Не ЗначениеЗаполнено(ДоступныеОрганизации) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Заполнение данных
	
	Для каждого ЭлементКоллекции Из ДоступныеОрганизации Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Идентификатор            = ЗначениеСервиса(ЭлементКоллекции, "id", "");
		НоваяСтрока.Наименование             = ЗначениеСервиса(ЭлементКоллекции, "name", "");
		НоваяСтрока.НатуральныйИдентификатор = ЗначениеСервиса(ЭлементКоллекции, "legalId", "");
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДоставкиЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	ДанныеДоставки = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	ОписаниеАдресов = Новый ТаблицаЗначений;
	
	ОписаниеАдресов.Колонки.Добавить("ИдентификаторФИАС",   Типы().Строка);
	ОписаниеАдресов.Колонки.Добавить("ПредставлениеАдреса", Типы().Строка);
	ОписаниеАдресов.Колонки.Добавить("КодСтраны",           Типы().Строка);
	
	Результат = Новый Структура;
	
	Результат.Вставить("АдресаСамовывоза", ОписаниеАдресов);
	Результат.Вставить("РегионыДоставки",  ОписаниеАдресов.Скопировать());
		
	Если Не ЗначениеЗаполнено(ДанныеДоставки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Заполнение данных
	
	Для каждого ТекущееЗначение Из ЗначениеСервиса(ДанныеДоставки, "pickupPoints", Новый Массив) Цикл
		
		НоваяСтрока = Результат.АдресаСамовывоза.Добавить();
		
		НоваяСтрока.ИдентификаторФИАС   = ЗначениеСервиса(ТекущееЗначение, "fiasCode");
		НоваяСтрока.ПредставлениеАдреса = ЗначениеСервиса(ТекущееЗначение, "title");
		НоваяСтрока.КодСтраны           = ЗначениеСервиса(ТекущееЗначение, "countryOksmCode");
		
	КонецЦикла;
	
	Для каждого ТекущееЗначение Из ЗначениеСервиса(ДанныеДоставки, "deliveryZones", Новый Массив) Цикл
		
		НоваяСтрока = Результат.РегионыДоставки.Добавить();
		
		НоваяСтрока.ИдентификаторФИАС   = ЗначениеСервиса(ТекущееЗначение, "fiasCode");
		НоваяСтрока.ПредставлениеАдреса = ЗначениеСервиса(ТекущееЗначение, "title");
		НоваяСтрока.КодСтраны           = ЗначениеСервиса(ТекущееЗначение, "countryOksmCode");

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПоставщикЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	ДанныеПоставщика = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат= Новый Структура;
	
	Результат.Вставить("Наименование",     ЗначениеСервиса(ДанныеПоставщика, "name", ""));
	Результат.Вставить("ИНН",              ЗначениеСервиса(ДанныеПоставщика, "inn", ""));
	Результат.Вставить("КПП",              ЗначениеСервиса(ДанныеПоставщика, "kpp", ""));
	Результат.Вставить("Телефон",          ЗначениеСервиса(ДанныеПоставщика, "phone", ""));
	Результат.Вставить("ЭлектроннаяПочта", ЗначениеСервиса(ДанныеПоставщика, "email", ""));
	
	Возврат Результат;
	
КонецФункции

Функция ТоварыЗаказаКорзины(ДанныеЗаказа, ИмяСвойства, НарушениеОграниченийЗаказа)
	
	ДанныеТоваров = ЗначениеСервиса(ДанныеЗаказа, ИмяСвойства);
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("НаименованиеТовара",      Типы().Строка);
	Результат.Колонки.Добавить("ОписаниеТовара",          Типы().Строка);
	Результат.Колонки.Добавить("Штрихкоды",               Типы().Массив);
	Результат.Колонки.Добавить("Артикул",                 Типы().Строка);
	Результат.Колонки.Добавить("ЕдиницаИзмерения",        Типы().Структура);
	Результат.Колонки.Добавить("ОписаниеУпаковки",        Типы().Строка);
	Результат.Колонки.Добавить("АдресаИзображений",       Типы().Массив);
	Результат.Колонки.Добавить("Количество",              Типы().Число);
	Результат.Колонки.Добавить("Цена",                    Типы().Число);
	Результат.Колонки.Добавить("ЦенаВключаетНДС",         Типы().Булево);
	Результат.Колонки.Добавить("ЦенаДоСкидки",            Типы().Число);
	Результат.Колонки.Добавить("СтавкаНДС",               Типы().Ссылка);
	Результат.Колонки.Добавить("Итоги",                   Типы().Структура);
	Результат.Колонки.Добавить("КоличествоДнейПоставки",  Типы().Число);
	Результат.Колонки.Добавить("СтатусДоступностиТовара", Типы().Строка);
	Результат.Колонки.Добавить("АдресаКоманд",            Типы().Структура);
	Результат.Колонки.Добавить("Идентификатор",           Типы().Строка);
	Результат.Колонки.Добавить("КратностьУпаковки",       Типы().Число);
	Результат.Колонки.Добавить("МинимальноеКоличество",   Типы().Число);
	
	Если Не ЗначениеЗаполнено(ДанныеТоваров) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Заполнение данных
	
	Для каждого ТекущийТовар Из ДанныеТоваров Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.НаименованиеТовара      = ЗначениеСервиса(ТекущийТовар,                   "productName", "");
		НоваяСтрока.ОписаниеТовара          = ЗначениеСервиса(ТекущийТовар,                   "productDescription", "");
		НоваяСтрока.Штрихкоды               = ЗначениеСервиса(ТекущийТовар,                   "barCodes", Новый Массив);
		НоваяСтрока.Артикул                 = ЗначениеСервиса(ТекущийТовар,                   "partNumber", "");
		НоваяСтрока.ЕдиницаИзмерения        = ЕдиницаИзмеренияЗаказаКорзины(ТекущийТовар,     "unitOkei");
		НоваяСтрока.ОписаниеУпаковки        = ЗначениеСервиса(ТекущийТовар,                   "packaging", "");
		НоваяСтрока.АдресаИзображений       = ЗначениеСервиса(ТекущийТовар,                   "АдресаИзображений", Новый Массив);
		НоваяСтрока.Количество              = ЗначениеСервиса(ТекущийТовар,                   "quantity", 0);
		НоваяСтрока.Цена                    = ЦенаОбъектаКорзины(ТекущийТовар,                "price");
		НоваяСтрока.ЦенаВключаетНДС         = ЗначениеСервиса(ТекущийТовар,                   "priceIncludesVAT", Ложь);
		НоваяСтрока.ЦенаДоСкидки            = ЗначениеСервиса(ТекущийТовар,                   "priceBeforeDiscount", 0) / 100;
		НоваяСтрока.СтавкаНДС               = СтавкаНДСЗаказаКорзины(ТекущийТовар,            "vat");
		НоваяСтрока.Итоги                   = ИтогиКорзины(ТекущийТовар,                      "itemTotal");
		НоваяСтрока.КоличествоДнейПоставки  = ЗначениеСервиса(ТекущийТовар,                   "maxDaysForShipment", 0);
		НоваяСтрока.АдресаКоманд            = АдресаКомандТовараКорзины(ТекущийТовар,         "_links");
		НоваяСтрока.Идентификатор           = ЗначениеСервиса(ТекущийТовар,                   "tradeOfferId", 0);
		НоваяСтрока.КратностьУпаковки       = ЗначениеСервиса(ТекущийТовар,                   "orderQtyStep", 0);
		НоваяСтрока.МинимальноеКоличество   = ЗначениеСервиса(ТекущийТовар,                   "orderQtyMin", 0);
		
		НоваяСтрока.СтатусДоступностиТовара = ДоступностьТовараЗаказаКорзины(НоваяСтрока.Идентификатор, НарушениеОграниченийЗаказа);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НарушенияОграниченийЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	НарушенияОграничений = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ТекстСообщения",           Типы().Строка);
	Результат.Колонки.Добавить("ИдентификаторПредложения", Типы().Строка);
	Результат.Колонки.Добавить("КодНарушения",             Типы().Строка);
	
	Если Не ЗначениеЗаполнено(НарушенияОграничений) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из НарушенияОграничений Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.ТекстСообщения           = ЗначениеСервиса(ЭлементКоллекции, "message", "");
		НоваяСтрока.ИдентификаторПредложения = ЗначениеСервиса(ЭлементКоллекции, "tradeOfferId", "");
		НоваяСтрока.КодНарушения             = ЗначениеСервиса(ЭлементКоллекции, "code", "");
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступностьТовараЗаказаКорзины(ИдентификаторПредложения, НарушениеОграниченийЗаказа)
	
	Результат = НСтр("ru = 'Доступно для заказа'");
	
	Если Не ЗначениеЗаполнено(ИдентификаторПредложения)
		ИЛИ Не ЗначениеЗаполнено(НарушениеОграниченийЗаказа) Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	СтрокиСообщений = НарушениеОграниченийЗаказа.НайтиСтроки(Новый Структура("ИдентификаторПредложения", ИдентификаторПредложения));
		
	Если Не ЗначениеЗаполнено(СтрокиСообщений) Тогда
		Возврат Результат;
	КонецЕсли;
		
	Результат = СтрокиСообщений[0].ТекстСообщения;
	
	Возврат Результат;
	
КонецФункции

Функция ИтогиКорзины(ДанныеСервиса, ИмяСвойства)
	
	Итоги = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат = Новый Структура;
	
	Результат.Вставить("СуммаСНДС", ЦенаОбъектаКорзины(Итоги, "total"));
	Результат.Вставить("СуммаНДС",  ЦенаОбъектаКорзины(Итоги, "totalVat"));
	Результат.Вставить("КодВалюты", ЗначениеСервиса(Итоги, "currencyCode", ""));
	Результат.Вставить("Валюта",    Неопределено);
	
	Если ЗначениеЗаполнено(Результат.КодВалюты) Тогда
		Результат.Валюта = ТорговыеПредложенияПовтИсп.ПолучитьВалюту(Результат.КодВалюты, Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЦенаОбъектаКорзины(ДанныеСервиса, ИмяСвойства)
	
	// Цены из сервиса приходят в минимальных единицах валюты
	
	ЗначениеЦены = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства, 0);
	
	Результат = 0;
	
	Если ТипЗнч(ЗначениеЦены) <> Тип("Число") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ЗначениеЦены/100;
	
	Возврат Результат;
	
КонецФункции

Функция СтавкаНДСЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	СтавкаНДС = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат ТорговыеПредложенияПовтИсп.ПолучитьСтавкуНДС(Неопределено);
	КонецЕсли;

	Если СтавкаНДС = "VAT_WITHOUT" Тогда
		СтавкаСтрокой = "БезНДС";
	Иначе
		СтавкаСтрокой = СтрЗаменить(СтавкаНДС, "VAT_", "НДС");
	КонецЕсли;
	
	Результат = ТорговыеПредложенияПовтИсп.ПолучитьСтавкуНДС(СтавкаСтрокой);
	
	Возврат Результат;
	
КонецФункции

Функция ЕдиницаИзмеренияЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	ЕдиницаИзмерения = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат = Новый Структура;
	
	Результат.Вставить("КраткоеНаименование", ЗначениеСервиса(ЕдиницаИзмерения, "nsymb", ""));
	Результат.Вставить("Код",                 ЗначениеСервиса(ЕдиницаИзмерения, "code", ""));
	Результат.Вставить("ПолноеНаименование",  ЗначениеСервиса(ЕдиницаИзмерения, "name", ""));
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСервиса(ДанныеСервиса, ИмяПоля, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСервиса) = Тип("Соответствие") Тогда
		Результат = ДанныеСервиса[ИмяПоля];
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область АдресаКоманд

Функция АдресаКомандЗаказаКорзины(ДанныеСервиса, ИмяСвойства)
	
	АдресаКоманд = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат = Новый Структура;
	
	СоздатьЗаказ     = ЗначениеСервиса(АдресаКоманд, "marketplace:make-order");
	СоздатьЗапросЦен = ЗначениеСервиса(АдресаКоманд, "marketplace:request-for-price");
	АдресЗаказа      = ЗначениеСервиса(АдресаКоманд, "self");
	
	Результат.Вставить("СоздатьЗаказ",     ЗначениеСервиса(СоздатьЗаказ, "href", ""));
	Результат.Вставить("СоздатьЗапросЦен", ЗначениеСервиса(СоздатьЗапросЦен, "href", ""));
	Результат.Вставить("АдресЗаказа",      ЗначениеСервиса(АдресЗаказа, "href", ""));
	
	Возврат Результат;
	
КонецФункции

Функция АдресаКомандКорзины(ДанныеСервиса, ИмяСвойства)
	
	АдресаКоманд = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
	
	Результат = Новый Структура;
	
	КомандаДобавитьТовар = ЗначениеСервиса(АдресаКоманд, "marketplace:shopping-cart-add-item");
	
	Результат.Вставить("ДобавитьТовар", ЗначениеСервиса(КомандаДобавитьТовар, "href", ""));
	
	Возврат Результат;
	
КонецФункции

Функция АдресаКомандТовараКорзины(ДанныеСервиса, ИмяСвойства)
	
	АдресаКоманд = ЗначениеСервиса(ДанныеСервиса, ИмяСвойства);
		
	Результат = Новый Структура;
	
	КомандаУдалить              = ЗначениеСервиса(АдресаКоманд, "marketplace:shopping-cart-remove-item");
	КомандаУстановитьКоличество = ЗначениеСервиса(АдресаКоманд, "marketplace:shopping-cart-update-item-quantity");
	КомандаТорговоеПредложение  = ЗначениеСервиса(АдресаКоманд, "marketplace:trade-offer-view");
	
	Результат.Вставить("УдалитьТовар",         ЗначениеСервиса(КомандаУдалить, "href", ""));
	Результат.Вставить("УстановитьКоличество", ЗначениеСервиса(КомандаУстановитьКоличество, "href", ""));
	Результат.Вставить("ТорговоеПредложение",  ЗначениеСервиса(КомандаТорговоеПредложение, "href", ""));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДобавлениеВКорзину

Функция ВыполнитьДействиеСТоваромКорзиныВФоне(ПараметрыМетода, УникальныйИдентификатор) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Добавление товара в корзину.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.ВыполнитьДействиеСТоваромКорзиныСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

Процедура ВыполнитьДействиеСТоваромКорзиныСохранитьРезультат(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыПроцедуры.ВидОперации = "Добавление" Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПроцедуры.АдресКомандыИзменитьКоличество) Тогда
			ИзменитьКоличествоТовараВКорзине(
				ПараметрыПроцедуры.Организация,
				ПараметрыПроцедуры.АдресКомандыИзменитьКоличество, 
				ПараметрыПроцедуры.Количество, 
				Отказ);
			
		Иначе
			ДобавитьТоварВКорзину(
				ПараметрыПроцедуры.Организация,
				ПараметрыПроцедуры.АдресКомандыДобавить,
				ПараметрыПроцедуры.ИдентификаторТорговогоПредложения,
				ПараметрыПроцедуры.Количество, 
				Отказ);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПроцедуры.ВидОперации = "Удаление" Тогда
		УдалитьТоварИзКорзины(ПараметрыПроцедуры.Организация, ПараметрыПроцедуры.АдресКомандыУдалить, Отказ);
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный вид операции с товаром корзины'");
	КонецЕсли;
	
	ДанныеКорзины = Неопределено;
	
	Если ПараметрыПроцедуры.ПрочитатьКорзину И ЗначениеЗаполнено(ПараметрыПроцедуры.АдресКорзины) Тогда
		ДанныеКорзины = ПолучитьДанныеКорзины(
			ПараметрыПроцедуры.Организация, 
			ПараметрыПроцедуры.АдресКорзины, 
			Отказ);
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Отказ", Отказ);
	Результат.Вставить("ДанныеКорзины", ДанныеКорзины);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Создать корзину добавить товар в фоне.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ДанныеПредложений - см. ТорговыеПредложенияСлужебныйКлиент.НовыйПараметрыПредложения
//  УникальныйИдентификатор - Строка
// 
// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьВФоне
//
Функция СоздатьКорзинуДобавитьТоварВФоне(Организация, ДанныеПредложений, УникальныйИдентификатор) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Создание корзины и добавление товаров в корзину.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.СоздатьКорзинуДобавитьТовар";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеПредложений", ДанныеПредложений);
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

// Создать корзину добавить товар.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура
//  АдресРезультата - Строка
//
Процедура СоздатьКорзинуДобавитьТовар(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	АдресКомандыДобавитьТовар = "";
	ДанныеКорзины = Неопределено;
	Организация = ПараметрыПроцедуры.Организация;
	
	АдресКорзины = АдресКорзиныИзЛокальногоХранилища();
	
	Если ПустаяСтрока(АдресКорзины) Тогда
		
		СоздатьКорзинуИЗаполнитьКоманды(Организация, АдресКорзины, АдресКомандыДобавитьТовар, Отказ);
		
	Иначе
		
		ДанныеКорзины = ПолучитьДанныеКорзины(Организация, АдресКорзины, Отказ);
		Если ДанныеКорзины <> Неопределено Тогда
			АдресКомандыДобавитьТовар = ДанныеКорзины.АдресаКоманд.ДобавитьТовар;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресКомандыДобавитьТовар) Тогда
		
		ДанныеПредложений = ПараметрыПроцедуры.ДанныеПредложений; // Массив
		ОтказДобавленияТовара = Ложь;
		Для Каждого ДанныеПредложения Из ДанныеПредложений Цикл
			
			// Добавляем товары в корзину
			ДобавитьТоварВКорзину(
				Организация,
				АдресКомандыДобавитьТовар,
				ДанныеПредложения.ИдентификаторПредложения,
				ДанныеПредложения.Количество, 
				ОтказДобавленияТовара);
			
		КонецЦикла;
		
		ДанныеКорзины = ПолучитьДанныеКорзины(Организация, АдресКорзины, Отказ);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКорзины", ДанныеКорзины);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
	Если Отказ Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании корзины были ошибки.%1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрШаблон(ШаблонСообщения, БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТоварВКорзину(
			Организация, 
			АдресКоманды, 
			ИдентификаторТорговогоПредложения, 
			Количество, 
			Отказ = Ложь)
	
	Результат = Неопределено;
	
	ПараметрыКоманды = ОписаниеЗапросаНаДобавлениеТовараВКорзину(
		Организация,
		АдресКоманды, 
		ИдентификаторТорговогоПредложения, 
		Количество);
		
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ОписаниеЗапросаНаДобавлениеТовараВКорзину(
			Организация, 
			АдресКоманды, 
			ИдентификаторТорговогоПредложения, 
			Количество)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование       = НСтр("ru = 'Добавление товара в корзину'");
	ЗапросСервиса.Метод              = "POST";
	ЗапросСервиса.РасширятьКонтент   = Ложь;
	ЗапросСервиса.Контент            = "application/vnd.1cbn.v1+json";
	ЗапросСервиса.Данные             = ТоварДляДобавленияВКорзинуВJSON(ИдентификаторТорговогоПредложения, Количество);
	ЗапросСервиса.РезультатВСоответствие = Истина;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, Организация);
	УстановитьАдресЗапроса(ЗапросСервиса, АдресКоманды);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ТоварДляДобавленияВКорзинуВJSON(ИдентификаторТорговогоПредложения, Количество)
	
	ТоварДляДобавления = Новый Структура;
	
	ТоварДляДобавления.Вставить("tradeOfferId", ИдентификаторТорговогоПредложения);
	ТоварДляДобавления.Вставить("quantity",     Количество);
	
	Результат = ЗначениеВJSON(ТоварДляДобавления);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УдалениеКорзины

Функция УдалитьКорзинуВФоне(ПараметрыМетода, УникальныйИдентификатор) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Удаление корзины.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.УдалитьКорзинуСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
		
КонецФункции

Процедура УдалитьКорзинуСохранитьРезультат(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	УдалитьКорзину(ПараметрыПроцедуры.Организация, ПараметрыПроцедуры.АдресКорзины, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("КорзинаУдалена", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура УдалитьКорзину(Организация, АдресКоманды, Отказ = Ложь)
	
	ПараметрыКоманды = ОписаниеЗапросаНаУдалениеКорзины(Организация, АдресКоманды);
	ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ОписаниеЗапросаНаУдалениеКорзины(Организация, АдресКоманды)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование           = НСтр("ru = 'Удаление товара из корзины'");
	ЗапросСервиса.Метод                  = "DELETE";
	ЗапросСервиса.РезультатВСоответствие = Истина;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, Организация);
	УстановитьАдресЗапроса(ЗапросСервиса, АдресКоманды);
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область УдалениеИзКорзины

Процедура УдалитьТоварИзКорзины(Организация, АдресКоманды, Отказ = Ложь)
	
	ПараметрыКоманды = ОписаниеЗапросаНаУдалениеТовараИзКорзины(Организация, АдресКоманды);
	ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ОписаниеЗапросаНаУдалениеТовараИзКорзины(Организация, АдресКоманды)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование           = НСтр("ru = 'Удаление товара из корзины'");
	ЗапросСервиса.Метод                  = "DELETE";
	ЗапросСервиса.РезультатВСоответствие = Истина;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, Организация);
	УстановитьАдресЗапроса(ЗапросСервиса, АдресКоманды);
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ИзменениеКоличестваТовараВКорзине

Процедура ИзменитьКоличествоТовараВКорзине(Организация, АдресКоманды, Количество, Отказ = Ложь)
	
	ПараметрыКоманды = ОписаниеЗапросаНаИзменениеКоличестваТовараВКорзине(Организация, АдресКоманды, Количество);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ОписаниеЗапросаНаИзменениеКоличестваТовараВКорзине(Организация, АдресКоманды, Количество)
	
	ЗапросСервиса = НовыйЗапросСервиса();
		
	ЗапросСервиса.Наименование       = НСтр("ru = 'Изменение количества товара в корзине'");
	ЗапросСервиса.Метод              = "PUT";
	ЗапросСервиса.РасширятьКонтент   = Ложь;
	ЗапросСервиса.Контент            = "application/vnd.1cbn.v1+json";
	ЗапросСервиса.Данные             = ИзменениеКоличестваВКорзинеВJSON(Количество);
	ЗапросСервиса.РезультатВСоответствие = Истина;
	
	УстановитьПризнакАутентификации(ЗапросСервиса, Организация);
	УстановитьАдресЗапроса(ЗапросСервиса, АдресКоманды);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ИзменениеКоличестваВКорзинеВJSON(Количество)
	
	Данные = Новый Структура;
	
	Данные.Вставить("quantity", Количество);
	
	Результат = ЗначениеВJSON(Данные);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ЭтоПолныйАдрес(Адрес)
	
	Результат = СтрНачинаетсяС(СокрЛП(Адрес), "http://")
		ИЛИ СтрНачинаетсяС(СокрЛП(Адрес), "https://");
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьАдресЗапроса(ЗапросСервиса, Адрес)
	
	Если ЭтоПолныйАдрес(Адрес) Тогда
		ЗапросСервиса.ПолныйАдрес = Адрес;
	Иначе
		ЗапросСервиса.Адрес = Адрес;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакАутентификации(ЗапросСервиса, Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	КонецЕсли;
	
	ЗапросСервиса.Аутентификация = ЗначениеЗаполнено(ЗапросСервиса.ИдентификаторОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область СервисРекомендаций

#Область ДеактивироватьРекомендацию

Функция ДеактивироватьРекомендациюАсинхронно(Организация, УникальныйИдентификатор, АдресРесурса) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Отмена демонстрации подсказки.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.ДеактивироватьРекомендациюСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("Организация",  Организация);
	ПараметрыПроцедуры.Вставить("АдресРесурса", АдресРесурса);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);	
	
КонецФункции

Процедура ДеактивироватьРекомендациюСохранитьРезультат(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПроцедуры.АдресРесурса) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ДеактивироватьРекомендацию(ПараметрыПроцедуры.Организация, ПараметрыПроцедуры.АдресРесурса, Отказ);
	
	Результат = Новый Структура;
	
	Результат.Вставить("РекомендацияОтменена", Не Отказ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ДеактивироватьРекомендацию(Организация, АдресРесурса, Отказ)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
	
	ПараметрыКоманды = ПараметрыКомандыДеактивироватьРекомендацию(Организация, СтруктураURI.ПутьНаСервере, Отказ);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ПараметрыКомандыДеактивироватьРекомендацию(Организация, АдресРесурса, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
		ЗапросСервиса.Аутентификация = Истина;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не передана организация'"));
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отмена показа рекомендации'");
	ЗапросСервиса.Адрес = АдресРесурса;
	ЗапросСервиса.Метод = "POST";
	
	// Тип контента не передается, поскольку нет тела запроса
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ПолучитьРекомендации

Функция РекомендацииСервиса(Организация = Неопределено, ПоказыватьСсылкуДеактивации = Ложь) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьРекомендации(Организация);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	Если Отказ ИЛИ ДанныеСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = РекомендацииИзДанныхСервиса(ДанныеСервиса, ПоказыватьСсылкуДеактивации);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыПолучитьРекомендации(Организация)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ИдентификаторОрганизации = "";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ЗапросСервиса.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ЗапросСервиса.Аутентификация = Истина;
	Иначе
		ЗапросСервиса.Аутентификация = Ложь;
	КонецЕсли;
	
	ЗапросСервиса.Наименование     = НСтр("ru = 'Получение рекомендаций'");
	ЗапросСервиса.Адрес            = "notices";
	ЗапросСервиса.Метод            = "GET";
	ЗапросСервиса.Контент          = "application/vnd.1cbn.v1+json";
	ЗапросСервиса.РасширятьКонтент = Ложь;
	ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ОтразитьОткликНаРекомендацию

Функция ОтразитьОткликНаРекомендациюАсинхронно(Организация, УникальныйИдентификатор, АдресРесурса) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Отработка рекомендации.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.ОтразитьОткликНаРекомендациюСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("Организация",  Организация);
	ПараметрыПроцедуры.Вставить("АдресРесурса", АдресРесурса);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);	
	
КонецФункции

Процедура ОтразитьОткликНаРекомендациюСохранитьРезультат(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПроцедуры.АдресРесурса) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОтразитьОткликНаРекомендацию(ПараметрыПроцедуры.Организация, ПараметрыПроцедуры.АдресРесурса, Отказ);
	
	Результат = Новый Структура("ОткликОтражен", Не Отказ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ОтразитьОткликНаРекомендацию(Организация, АдресРесурса, Отказ)
		
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
	
	ПараметрыКоманды = ПараметрыКомандыОтразитьОткликНаРекомендацию(Организация, СтруктураURI.ПутьНаСервере);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

Функция ПараметрыКомандыОтразитьОткликНаРекомендацию(Организация, АдресРесурса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
		ЗапросСервиса.Аутентификация = Истина;
	Иначе
		ЗапросСервиса.Аутентификация = Ложь;
	КонецЕсли;
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отражение отклика на рекомендацию'");
	ЗапросСервиса.Адрес = АдресРесурса;
	ЗапросСервиса.Метод = "POST";
	
	// Тип контента не передается, поскольку нет тела запроса
		
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область РаботаСДанными

Функция РекомендацииИзДанныхСервиса(ДанныеСервиса, ПоказыватьСсылкуДеактивации)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса.notices Цикл
		
		ТипРекомендацииСервиса = ТипРекомендации(ЭлементКоллекции.noticeType);
		
		Если ТипРекомендацииСервиса = "ДляПродавца"
			ИЛИ Не ЗначениеЗаполнено(ТипРекомендацииСервиса) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(РекомендацияСервиса(ЭлементКоллекции, ПоказыватьСсылкуДеактивации));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РекомендацияСервиса(ДанныеСервиса, ПоказыватьСсылкуДеактивации)
		
	Рекомендация = Новый Структура;
	
	Рекомендация.Вставить("Основание", Неопределено);
	
	// Параметры сервиса
	
	Рекомендация.Вставить("ПоказыватьСсылкуДеактивации", ПоказыватьСсылкуДеактивации);
	Рекомендация.Вставить("ИдентификаторОрганизации",    ЗначениеАтрибута(ДанныеСервиса, "organizationId"));
	Рекомендация.Вставить("ТекстРекомендации",           ЗначениеАтрибута(ДанныеСервиса, "message"));
	Рекомендация.Вставить("ТипРекомендации",             ТипРекомендации(ДанныеСервиса.noticeType));
	
	ЗаполнитьДополнительныеПараметрыРекомендации(Рекомендация, ДанныеСервиса);
	
	ЗаполнитьСсылки(Рекомендация, ДанныеСервиса);
		
	Возврат Рекомендация;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПараметрыРекомендации(Рекомендация, ДанныеСервиса)
	
	Рекомендация.Вставить("ДополнительныеПараметры", Новый Структура("Номенклатура", Новый Массив));
	
	Если Не ДанныеСервиса.Свойство("noticeParameters") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРекомендации = ДанныеСервиса.noticeParameters;
	
	Если Не ПараметрыРекомендации.Свойство("nomenclatures") Тогда
		Возврат;
	КонецЕсли;	
		
	КоллекцияНоменклатуры = Рекомендация.ДополнительныеПараметры.Номенклатура;
	
	Для каждого ЭлементКоллекции Из ПараметрыРекомендации.nomenclatures Цикл
		
		ОписаниеНоменклатуры = Новый Структура("Артикул, Штрихкоды", 
			ЗначениеАтрибута(ЭлементКоллекции, "partNumber"),
			ЗначениеАтрибута(ЭлементКоллекции, "barCodes"));
			
		Если ТипЗнч(ОписаниеНоменклатуры.Штрихкоды) <> Тип("Массив") Тогда
			ОписаниеНоменклатуры.Штрихкоды = Новый Массив;
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(ОписаниеНоменклатуры.Артикул)
			И Не ЗначениеЗаполнено(ОписаниеНоменклатуры.Штрихкоды) Тогда
			
			Продолжить;
		КонецЕсли;
		
		КоллекцияНоменклатуры.Добавить(ОписаниеНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылки(Рекомендация, ДанныеСервиса)
	
	ОписаниеСсылок = Новый Структура;
	
	ОписаниеСсылок.Вставить("АдресОтклика",     "");
	ОписаниеСсылок.Вставить("АдресДеактивации", "");
	ОписаниеСсылок.Вставить("АдресСайта",       "");
	
	Рекомендация.Вставить("Ссылки", ОписаниеСсылок);
	
	Если Не ДанныеСервиса.Свойство("_links") Тогда
		Возврат;
	КонецЕсли;
	
	Ссылки = ДанныеСервиса["_links"];
	
	Если Ссылки.Свойство("follow") Тогда
		Рекомендация.Ссылки.АдресОтклика = Ссылки.follow.href;
	КонецЕсли;
	
	Если Ссылки.Свойство("ignore") Тогда
		Рекомендация.Ссылки.АдресДеактивации = Ссылки.ignore.href;
	КонецЕсли;
	
	Если Ссылки.Свойство("webpage") Тогда
		Рекомендация.Ссылки.АдресСайта = Ссылки.webpage.href;
	КонецЕсли;
		
КонецПроцедуры

Функция ТипРекомендации(СтрокаДействия)
	
	Результат = "";
	
	ВходящаяСтрока = ВРег(СтрокаДействия);
	
	Если ВходящаяСтрока = ВРег("Admin") Тогда
		Результат = "Административный";
	ИначеЕсли ВходящаяСтрока = ВРег("AbilityToBuy") Тогда
		Результат = "ДляПокупателя";
	ИначеЕсли ВходящаяСтрока = ВРег("AbilityToSell") Тогда
		Результат = "ДляПродавца";
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ЗначениеАтрибута(Данные, ИмяАтрибута)
	
	Результат = "";
	
	Если ТипЗнч(Данные) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Данные.Свойство(ИмяАтрибута) Тогда
		Результат = Данные[ИмяАтрибута];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Штрихкоды

Функция ОписаниеТаблицыШтрихкодовДляВыгрузки()
	
	Штрихкоды = Новый ТаблицаЗначений;
	
	Штрихкоды.Колонки.Добавить("Организация",     Новый ОписаниеТипов("Неопределено"));
	Штрихкоды.Колонки.Добавить("Штрихкод",        Новый ОписаниеТипов("Строка"));
	Штрихкоды.Колонки.Добавить("Наименование",    Новый ОписаниеТипов("Строка"));
	Штрихкоды.Колонки.Добавить("РежимПоставщика", Новый ОписаниеТипов("Булево"));
	Штрихкоды.Колонки.Добавить("РежимПокупателя", Новый ОписаниеТипов("Булево"));
	Штрихкоды.Колонки.Добавить("Артикул",         Новый ОписаниеТипов("Строка"));
	Штрихкоды.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("Неопределено"));
	
	Возврат Штрихкоды;
	
КонецФункции

Функция ОписаниеСтруктурыШтрихкодов()

	Результат = Новый Структура;
	
	Результат.Вставить("organizationId", "");
	Результат.Вставить("items",          Новый Массив);

	Возврат Результат;
	
КонецФункции

Функция ОписаниеСтруктурыНоменклатурыШтрихкодов()
		
	Результат = Новый Структура;
	
	Результат.Вставить("externalId",       "");
	Результат.Вставить("productName",      "");
	Результат.Вставить("partNumber",       "");
	Результат.Вставить("barCodes",         Новый Массив);
	Результат.Вставить("isBuying",         Ложь);
	Результат.Вставить("isSelling",        Ложь);
	Результат.Вставить("customCategories", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьШтрихкодыДляПодсказок() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть")
		Или Не ИспользоватьФункционалПубликации() 
		Или Не ТорговыеПредложения.ПоказыватьРекомендации() Тогда
		Возврат;
	КонецЕсли;
	
	Организации = БизнесСеть.ИдентификаторыОрганизаций().ВыгрузитьКолонку("Организация");
	
	Штрихкоды = ОписаниеТаблицыШтрихкодовДляВыгрузки();
	
	ТорговыеПредложенияПереопределяемый.ЗаполнитьШтрихкодыДляВыгрузки(Организации, Истина, Истина, Штрихкоды);
	
	Если Не ЗначениеЗаполнено(Штрихкоды) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Организация Из Организации Цикл
		
		ШтрихкодыОрганизации = ОписаниеТаблицыШтрихкодовДляВыгрузки();
		
		СтрокиПоОрганизации = Штрихкоды.НайтиСтроки(Новый Структура("Организация", Организация));
		
		Если СтрокиПоОрганизации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из СтрокиПоОрганизации Цикл
			ЗаполнитьЗначенияСвойств(ШтрихкодыОрганизации.Добавить(), ЭлементКоллекции);
		КонецЦикла;
		
		Отказ = Ложь;
		
		ВыгрузитьШтрихкодыОрганизации(Организация, ШтрихкодыОрганизации, Отказ);
		
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка отправки штрихкодов'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ДанныеДляОтправки)

	ПараметрыКоманды = БизнесСеть.ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ДанныеДляОтправки.organizationId;
	
	ПараметрыКоманды.Адрес          = "/lru-nomenclatures";
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Выгрузка штрихкодов номенклатуры'");
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Данные         = ЗначениеВJSON(ДанныеДляОтправки);
	ПараметрыКоманды.Аутентификация = Истина;
	ПараметрыКоманды.ТипКонтента    = "application/vnd.1cbn.v1+json";
	
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка выгрузки штрихкодов номенклатуры.'"));
	
	Возврат ПараметрыКоманды;

КонецФункции

Функция РазмерПорцииДанныхНоменклатурыДляРекомендаций()
	
	Результат = 3000;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьШтрихкодыОрганизации(Организация, ШтрихкодыОрганизации, Отказ)
	
	ДанныеДляОтправки = ОписаниеСтруктурыШтрихкодов();
	
	ДанныеДляОтправки.organizationId = БизнесСеть.ИдентификаторОрганизации(Организация);
	
	Номенклатура = ШтрихкодыОрганизации.Скопировать();
	
	КлючевыеРеквизиты = "Наименование, ВидНоменклатуры, Артикул, РежимПокупателя, РежимПоставщика";
	
	Номенклатура.Свернуть(КлючевыеРеквизиты);
	
	РазмерПорции = РазмерПорцииДанныхНоменклатурыДляРекомендаций();
	
	Счетчик = 1;
	
	Для каждого ТекущаяНоменклатура Из Номенклатура Цикл
		
		СтрокаНоменклатуры = ДанныеНоменклатурыДляОтправкиВСервисРекомендаций(
			ТекущаяНоменклатура, 
			ШтрихкодыОрганизации,
			КлючевыеРеквизиты);
		
		Если СтрокаНоменклатуры = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		ДанныеДляОтправки.items.Добавить(СтрокаНоменклатуры);
		
		Если Счетчик = РазмерПорции Тогда
			
			ПараметрыКоманды = ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ДанныеДляОтправки);
			БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеДляОтправки.items.Очистить();
			
			Счетчик = 1;
			
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Если ДанныеДляОтправки.items.Количество() Тогда
		ПараметрыКоманды = ПараметрыКомандыВыгрузкаШтрихкодовДляПодсказок(ДанныеДляОтправки);
		БизнесСеть.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеНоменклатурыДляОтправкиВСервисРекомендаций(ТекущаяНоменклатура, ШтрихкодыОрганизации, КлючевыеРеквизиты)
	
	СтрокаНоменклатуры = ОписаниеСтруктурыНоменклатурыШтрихкодов();
	
	СтрокаНоменклатуры.externalId  = ТекущаяНоменклатура.Наименование;
	СтрокаНоменклатуры.productName = ТекущаяНоменклатура.Наименование;
	СтрокаНоменклатуры.partNumber  = ТекущаяНоменклатура.Артикул;
	СтрокаНоменклатуры.isBuying    = ТекущаяНоменклатура.РежимПокупателя;
	СтрокаНоменклатуры.isSelling   = ТекущаяНоменклатура.РежимПоставщика;
	
	// Категории
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура.ВидНоменклатуры) Тогда
		Если ТипЗнч(ТекущаяНоменклатура.ВидНоменклатуры) = Тип("Строка") Тогда
			СтрокаНоменклатуры.customCategories.Добавить(ТекущаяНоменклатура.ВидНоменклатуры);
		ИначеЕсли ТипЗнч(ТекущаяНоменклатура.ВидНоменклатуры) = Тип("Массив") Тогда	
			СтрокаНоменклатуры.customCategories = ТекущаяНоменклатура.ВидНоменклатуры;
		КонецЕсли;
	Иначе
		СтрокаНоменклатуры.Удалить("customCategories");
	КонецЕсли;
	
	// Штрихкоды, артикулы
	
	ОтборНоменклатуры = Новый Структура(КлючевыеРеквизиты);
	
	ЗаполнитьЗначенияСвойств(ОтборНоменклатуры, ТекущаяНоменклатура);
	
	СтрокиШтрихкоды = ШтрихкодыОрганизации.НайтиСтроки(ОтборНоменклатуры);
	
	Для каждого ТекущийШтрихкод Из СтрокиШтрихкоды Цикл
		
		Штрихкод = СокрЛП(ТекущийШтрихкод.Штрихкод);
		
		Если Не ЗначениеЗаполнено(Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНоменклатуры.barcodes.Добавить(Штрихкод);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаНоменклатуры.barcodes)
		И Не ЗначениеЗаполнено(СтрокаНоменклатуры.partNumber) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаНоменклатуры.partNumber) Тогда
		СтрокаНоменклатуры.Удалить("partNumber");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаНоменклатуры.barcodes) Тогда
		СтрокаНоменклатуры.Удалить("barcodes");
	КонецЕсли;
	
	Возврат СтрокаНоменклатуры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗапросыСервиса

// Получение прайс-листов.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. НовыеПараметрыПолученияПрайсЛистов.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.ИдентификаторОрганизации = ПараметрыЗапроса.ИдентификаторОрганизации;
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение прайс-листов'");
	ЗапросСервиса.Адрес = "trade-offers/placement/price-lists";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.РазрешенныеСостояния.Добавить(404);
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/PriceListPageV1");
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ВнутреннийИдентификатор) Тогда
		ЗапросСервиса.Адрес = СтрШаблон("%1/search/by-external-code", ЗапросСервиса.Адрес);
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "code", ПараметрыЗапроса.ВнутреннийИдентификатор);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор) Тогда
		ЗапросСервиса.Адрес = СтрШаблон("%1/%2", ЗапросСервиса.Адрес, ПараметрыЗапроса.Идентификатор);
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/PriceListV1");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "PageParameters", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "sort", ПараметрыЗапроса.Сортировка);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Удаление прайса-листа.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. НовыеПараметрыПолученияПрайсЛистов.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаУдалениеПрайсЛиста(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.ИдентификаторОрганизации = ПараметрыЗапроса.ИдентификаторОрганизации;
	ЗапросСервиса.Наименование = НСтр("ru = 'Удаление прайс-листа'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/price-lists/%1", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "DELETE";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Удаление торгового предложения в сервисе.
//
// Параметры:
//  Идентификатор - Срока - идентификатор торгового предложения.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаУдалениеТорговогоПредложения(Идентификатор, ИдентификаторОрганизации, РежимСнятияСПубликации = Ложь)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	Если Не РежимСнятияСПубликации Тогда
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Удаление торгового предложения'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1", Идентификатор);
		ЗапросСервиса.Метод = "DELETE";
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		
	Иначе
		
		ЗапросСервиса.Наименование = НСтр("ru = 'Снятие с публикации торгового предложения'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1/temporarily-out-of-sale", Идентификатор);
		ЗапросСервиса.Метод = "PUT";
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.Контент = "application/vnd.1cbn.v1+json";
		ЗапросСервиса.Данные = "{""outOfSale"": true}";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найдено торговое предложение в сервисе с идентификатором %1'"),
			Идентификатор));
		
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Получение торговых предложений.
//
// Параметры:
//  ПараметрыЗапроса	 - Структура - параметры поиска, см. НовыеПараметрыПолученияТорговыхПредложений.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПолучениеТорговыхПредложений(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.ИдентификаторОрганизации = ПараметрыЗапроса.ИдентификаторОрганизации;
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение торговых предложений'");
	ЗапросСервиса.Адрес = "trade-offers/placement/offers";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc+json";
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ВнутреннийИдентификаторПрайсЛиста) Тогда
		ЗапросСервиса.Адрес = СтрШаблон("%1/search/by-price-list", ЗапросСервиса.Адрес);
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceListExternalCode",
			ПараметрыЗапроса.ВнутреннийИдентификаторПрайсЛиста);
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOffersPageV1");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ВнутреннийИдентификатор) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "code", ПараметрыЗапроса.ВнутреннийИдентификатор);
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOffersPageV1");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор) Тогда
		ЗапросСервиса.Адрес = СтрШаблон("%1/%2", ЗапросСервиса.Адрес, ПараметрыЗапроса.Идентификатор);
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOfferV1");
	Иначе
		// Запрос с отборами.
		ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Placement/TradeOffersPageV1");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "sort", ПараметрыЗапроса.Сортировка);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Создание прайс-листа.
//
// Параметры:
//  ПараметрыЗапроса        - Структура - параметры поиска, см. НовыеПараметрыСозданияПрайсЛиста.
//  ИдентификаторПрайсЛиста - Строка    - идентификатор прайс листа.
//  Отказ                   - Булево    - флаг отказа.
// 
// Возвращаемое значение:
//  Структура - Запрос сервиса создание обновления прайс листа см. НовыйЗапросСервиса
//
Функция ЗапросСервисаСозданиеОбновленияПрайсЛиста(ПараметрыЗапроса, ИдентификаторПрайсЛиста, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если ЗначениеЗаполнено(ИдентификаторПрайсЛиста) Тогда
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление прайс-листа'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/price-lists/%1", ИдентификаторПрайсЛиста);
		ЗапросСервиса.Метод = "PUT";
		ЗапросСервиса.Контент = "application/vnd.1cbn.v1+json";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найден прайс-лист в сервисе с идентификатором %1'"),
			ИдентификаторПрайсЛиста));
			
	Иначе
		ЗапросСервиса.Наименование = НСтр("ru = 'Создание прайс-листа'");
		ЗапросСервиса.Адрес = "trade-offers/placement/price-lists";
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.Контент = "application/json";	
		ЗапросСервиса.РазрешенныеСостояния.Добавить(201);
		ЗапросСервиса.Ошибки.Вставить(422, СтрШаблон(НСтр("ru = 'Данные прайс-листа %1 не прошли проверку в сервисе'"),
			ПараметрыЗапроса.Наименование));
	КонецЕсли;
	
	ЗапросСервиса.Аутентификация = Истина;
	
	ПроверитьДанныеПрайсЛистаПередПубликацией(ПараметрыЗапроса, Не ЗначениеЗаполнено(ИдентификаторПрайсЛиста), Отказ);
	
	Если Отказ Тогда
		Возврат ЗапросСервиса;
	КонецЕсли;
	
	НачалоДействия = ПараметрыЗапроса.НачалоДействия;
	Если Не ЗначениеЗаполнено(НачалоДействия) Тогда
		НачалоДействия = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// По умолчанию дата окончания действия через 12 месяцев.
	ОкончаниеДействия = ПараметрыЗапроса.ОкончаниеДействия;
	Если Не ЗначениеЗаполнено(ОкончаниеДействия) Тогда
		ОкончаниеДействия = ДобавитьМесяц(Макс(ПараметрыЗапроса.НачалоДействия, ТекущаяДатаСеанса()), 12);
	КонецЕсли;
	
	Данные = Новый Структура;
	СтрокаФормата = "ДФ=yyyy-MM-dd";
	ДобавитьЗначение(Данные, "dateActualFrom", Формат(НачалоДействия, СтрокаФормата), Истина);
	ДобавитьЗначение(Данные, "dateActualTo",   Формат(ОкончаниеДействия, СтрокаФормата), Истина);
	ДобавитьЗначение(Данные, "name",           ПараметрыЗапроса.Наименование);
	ДобавитьЗначение(Данные, "currencyCode",   ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта));
	ДобавитьЗначение(Данные, "externalCode",   ПараметрыЗапроса.ВнутреннийИдентификатор);
	ДобавитьЗначение(Данные, "description",	   ПараметрыЗапроса.ДополнительноеОписание);
	
	Контакты = Новый Структура;
	ДобавитьЗначение(Контакты, "personName", ПараметрыЗапроса.ПредставлениеКонтакта);
	ДобавитьЗначение(Контакты, "phone",      ПараметрыЗапроса.Телефон);
	ДобавитьЗначение(Контакты, "email",      ПараметрыЗапроса.ЭлектроннаяПочта);
	
	ДобавитьЗначение(Данные, "contacts", Контакты);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.АдресаРегионов)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗапроса.АдресаСамовывоза) Тогда

		АдресаАбонентов = Новый Структура;
		
		Если ЗначениеЗаполнено(ПараметрыЗапроса.АдресаРегионов) Тогда
			АдресаАбонентов.Вставить("deliveryRegions", ПараметрыЗапроса.АдресаРегионов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗапроса.АдресаСамовывоза) Тогда
			АдресаАбонентов.Вставить("pickupFrom", ПараметрыЗапроса.АдресаСамовывоза);
		КонецЕсли;
		
		Если АдресаАбонентов.Количество() Тогда
			ДобавитьЗначение(Данные, "deliveryDescription" , АдресаАбонентов);
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.МинимальнаяСуммаЗаказа) Тогда
		
		МинимальнаяСуммаЗаказа = Новый Структура("sum", Новый Структура);
		
		МинимальнаяСуммаЗаказа.sum.Вставить("minimum",     ПараметрыЗапроса.МинимальнаяСуммаЗаказа * 100);
		МинимальнаяСуммаЗаказа.sum.Вставить("includesVAT", ПараметрыЗапроса.ЦенаВключаетНДС);

		ДобавитьЗначение(Данные, "orderRestrictions" , МинимальнаяСуммаЗаказа);
	
	КонецЕсли;

	// Создание белого списка контрагентов (заполнение ИНН, КПП).
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Ссылка");
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	Для каждого ЭлементКонтрагентов Из ПараметрыЗапроса.Контрагенты Цикл
		НоваяСтрокаКонтрагентов = ТаблицаКонтрагентов.Добавить();
		НоваяСтрокаКонтрагентов.Ссылка = ЭлементКонтрагентов;
	КонецЦикла;
	Если ТаблицаКонтрагентов.Количество() Тогда
		БизнесСеть.ЗаполнитьРеквизитыКонтрагентов(ТаблицаКонтрагентов);
		ПроверитьРеквизитыКонтрагентов(ТаблицаКонтрагентов, ПараметрыЗапроса.Ссылка, Отказ);
		СписокКонтрагентовСервиса = Новый Массив;
		Для каждого ЭлементДанныхКонтрагентов Из ТаблицаКонтрагентов Цикл
			КонтрагентСервиса = Новый Структура();
			КонтрагентСервиса.Вставить("inn", ЭлементДанныхКонтрагентов.ИНН);
			Если ЗначениеЗаполнено(ЭлементДанныхКонтрагентов.КПП) Тогда 
				КонтрагентСервиса.Вставить("kpp", ЭлементДанныхКонтрагентов.КПП);
			Иначе
				КонтрагентСервиса.Вставить("kpp", "0");
			КонецЕсли;
			СписокКонтрагентовСервиса.Добавить(КонтрагентСервиса);
		КонецЦикла;
		ДобавитьЗначение(Данные, "audience",
			Новый Структура("whiteList", СписокКонтрагентовСервиса));
	Иначе
		ДобавитьЗначение(Данные, "audience", Неопределено, Истина);
	КонецЕсли;
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыЗапроса.Организация);
	
	ДобавитьЗначение(Данные, "supplierPartyId", ИдентификаторОрганизации, Истина);
	
	ЗапросСервиса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Поиск торговых предложений с отборами.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПоискТорговыхПредложенийСОтборами(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Поиск торговых предложений с отборами'");
	ЗапросСервиса.Адрес = "trade-offers/storefront/search";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd.1cbn-trade-offer-query.v1+json";
	ЗапросСервиса.Ошибки.Вставить(422, НСтр("ru = 'Заданы некорректные критерии поиска.'"));
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Организация) Тогда
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыЗапроса.Организация);
	Иначе
		ЗапросСервиса.Аутентификация = Ложь;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Search/TradeOffersListPageV1");
	
	ЗапросСервиса.РазрешенныеСостояния.Добавить(404);
	ЗапросСервиса.РазрешенныеСостояния.Добавить(401);
	
	// Параметры в адресе.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;
	
	// Заполнение данных запроса.
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "query", ПараметрыЗапроса.Наименование);
	ДобавитьЗначение(Данные, "priceCurrencyCode", ПараметрыЗапроса.Валюта);
	ДобавитьЗначение(Данные, "priceFrom",   ПараметрыЗапроса.ЦенаОт * 100);
	ДобавитьЗначение(Данные, "priceTo",     ПараметрыЗапроса.ЦенаДо * 100);
	ДобавитьЗначение(Данные, "partNumbers", ПараметрыЗапроса.Артикулы);
	ДобавитьЗначение(Данные, "barCodes",    ПараметрыЗапроса.Штрихкоды);
	
	Если ПараметрыЗапроса.СоСкидкой Тогда
		ДобавитьЗначение(Данные, "hasDiscount", Истина);
	КонецЕсли;
	
	Если ПараметрыЗапроса.СИзображением Тогда
		ДобавитьЗначение(Данные, "withImages", Истина);
	КонецЕсли;
	
	Если ПараметрыЗапроса.ВНаличии Тогда
		ДобавитьЗначение(Данные, "inStock", Истина);
		ДобавитьЗначение(Данные, "inSales", Истина);
	Иначе
		ДобавитьЗначение(Данные, "inSales", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Контрагенты) Тогда
		МассивКонтрагентов = Новый Массив;
		Для каждого ЭлементКонтрагенты Из ПараметрыЗапроса.Контрагенты Цикл
			ОтборКонтрагента = Новый Структура;
			Если ЗначениеЗаполнено(ЭлементКонтрагенты.ИНН) Тогда
				ДобавитьЗначение(ОтборКонтрагента, "inn", ЭлементКонтрагенты.ИНН);
				ДобавитьЗначение(ОтборКонтрагента, "kpp", ЭлементКонтрагенты.КПП);
			Иначе
				ДобавитьЗначение(ОтборКонтрагента, "name", ЭлементКонтрагенты.Наименование);
			КонецЕсли;
			МассивКонтрагентов.Добавить(ОтборКонтрагента);
		КонецЦикла;
		ДобавитьЗначение(Данные, "suppliers", МассивКонтрагентов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Свойства) Тогда
		МассивСвойств = Новый Массив;
		Для каждого ЭлементСвойства Из ПараметрыЗапроса.Свойства Цикл
			СтруктураСвойства = Новый Структура;
			СтруктураСвойства.Вставить("requisiteId", ЭлементСвойства.Идентификатор);
			СтруктураСвойства.Вставить("requisiteValue", ЭлементСвойства.Значение);
			МассивСвойств.Добавить(СтруктураСвойства);
		КонецЦикла;
		ДобавитьЗначение(Данные, "categoryRequisitesFilter", МассивСвойств);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.НоменклатураСервиса) Тогда
		МассивНоменклатурыСервиса = Новый Массив;
		Для каждого ЭлементНоменклатурыСервиса Из ПараметрыЗапроса.НоменклатураСервиса Цикл
			НоменклатурыСервиса = Новый Структура;
			ДобавитьЗначение(НоменклатурыСервиса, "nomenclatureId",
				ЭлементНоменклатурыСервиса.ИдентификаторНоменклатуры);
			ДобавитьЗначение(НоменклатурыСервиса, "nomenclatureCharacteristicId",
				ЭлементНоменклатурыСервиса.ИдентификаторХарактеристики);
			МассивНоменклатурыСервиса.Добавить(НоменклатурыСервиса);
		КонецЦикла;
		ДобавитьЗначение(Данные, "productSpecificationIds", МассивНоменклатурыСервиса);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "categoryId", ПараметрыЗапроса.ИдентификаторКатегории);

	// Регионы поиска.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РегионыПоиска) Тогда
		РегионыСамовывоза = Новый Массив;
		РегионыДоставки = Новый Массив;
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.РегионыПоиска Цикл
			РегионОтбора = Новый Структура;
			ДобавитьЗначение(РегионОтбора, "countryOksmCode", ЭлементКоллекции.КодСтраны);
			ДобавитьЗначение(РегионОтбора, "regionFiasCode",  ЭлементКоллекции.Идентификатор);
			Если ЭлементКоллекции.ДляСамовывоза Тогда
				РегионыСамовывоза.Добавить(РегионОтбора);
			КонецЕсли;
			Если ЭлементКоллекции.ДляДоставки Тогда
				РегионыДоставки.Добавить(РегионОтбора);
			КонецЕсли;
		КонецЦикла;
		ДобавитьЗначение(Данные, "deliveryRegionCodes", РегионыДоставки);
		ДобавитьЗначение(Данные, "pickupRegionCodes", РегионыСамовывоза);
	КонецЕсли;
	
	// Сортировка.
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		Если ПараметрыЗапроса.Сортировка = "СортировкаЦенаВозрастание" Тогда
			РежимСортировки = "PRICE_ASC";
		ИначеЕсли ПараметрыЗапроса.Сортировка = "СортировкаЦенаУбывание" Тогда
			РежимСортировки = "PRICE_DESC";
		Иначе
			РежимСортировки = "RELEVANCE";
		КонецЕсли;
		ДобавитьЗначение(Данные, "resultSorting", РежимСортировки);
	КонецЕсли;
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Поиск торговых предложений по списку товаров.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийПоСписку.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса) Экспорт
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = НСтр("ru = 'Поиск торговых предложений по списку'");
	ЗапросСервиса.Адрес = "trade-offers/storefront/search/product-suppliers";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd.1cbn-search-product-suppliers-query.v1+json";
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Организация) 
		И ИнтеграцияТорговыеПредложения.ОрганизацияПодключена(ПараметрыЗапроса.Организация) Тогда
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыЗапроса.Организация);
	Иначе
		ЗапросСервиса.Аутентификация = Ложь;
	КонецЕсли;
	
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Search/TradeOfferGroupsListV1");
	
	// Заполнение данных запроса.
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "maxSuppliersNumber",    ПараметрыЗапроса.КоличествоКонтрагентов);
	ДобавитьЗначение(Данные, "priceDeviationPercent", ПараметрыЗапроса.ОтклонениеЦены);
	ДобавитьЗначение(Данные, "maxShippingDays",       ПараметрыЗапроса.СрокОтгрузки);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Валюта) Тогда
		КодВалюты = ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта);
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceCurrencyCode", КодВалюты);
	КонецЕсли;
	
	МассивТоваровЗапроса = Новый Массив;
	Для каждого СтрокаТовары Из ПараметрыЗапроса.Товары Цикл
		
		ЗапросТовары = Новый Структура;
		ДобавитьЗначение(ЗапросТовары, "productName",         СтрокаТовары.Наименование);
		
		ДобавитьЗначение(ЗапросТовары, "partNumbers", СтрокаТовары.Артикулы);
		ДобавитьЗначение(ЗапросТовары, "barCodes", СтрокаТовары.Штрихкоды);
		
		НоменклатураСервиса = Новый Структура;
		ДобавитьЗначение(НоменклатураСервиса, "nomenclatureId", СтрокаТовары.ИдентификаторНоменклатурыСервиса);
		ДобавитьЗначение(НоменклатураСервиса, "nomenclatureCharacteristicId", СтрокаТовары.ИдентификаторХарактеристикиСервиса);
		Если ЗначениеЗаполнено(НоменклатураСервиса) Тогда
			ДобавитьЗначение(ЗапросТовары, "productSpecificationIds", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НоменклатураСервиса));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗапросТовары) Тогда
			МассивТоваровЗапроса.Добавить(ЗапросТовары);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "productsSpecification", МассивТоваровЗапроса);
	
	// Регионы поиска
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РегионыПоиска) Тогда
		РегионыСамовывоза = Новый Массив;
		РегионыДоставки = Новый Массив;
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.РегионыПоиска Цикл
			РегионОтбора = Новый Структура;
			ДобавитьЗначение(РегионОтбора, "countryOksmCode", ЭлементКоллекции.КодСтраны);
			ДобавитьЗначение(РегионОтбора, "regionFiasCode",  ЭлементКоллекции.Идентификатор);
			Если ЭлементКоллекции.ДляСамовывоза Тогда
				РегионыСамовывоза.Добавить(РегионОтбора);
			КонецЕсли;
			Если ЭлементКоллекции.ДляДоставки Тогда
				РегионыДоставки.Добавить(РегионОтбора);
			КонецЕсли;
		КонецЦикла;
		ДобавитьЗначение(Данные, "deliveryRegionCodes", РегионыДоставки);
		ДобавитьЗначение(Данные, "pickupRegionCodes", РегионыСамовывоза);
	КонецЕсли;
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Получение торгового предложения.
//
// Параметры:
//  ПараметрыЗапроса - Структура:
//    * Идентификатор - Строка - идентификатор торгового предложения.
//    * Валюта - Ссылка - валюта для конвертации цены.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаПолучениеТорговогоПредложения(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение торгового предложения'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/storefront/%1", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc.v1+json";
	
	ИдентификаторОрганизации = "";
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Организация) Тогда
		ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПараметрыЗапроса.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ЗапросСервиса.Аутентификация = Истина;
		ЗапросСервиса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	Иначе
		ЗапросСервиса.Аутентификация = Ложь;
	КонецЕсли;
		
	ДобавитьКолонкиТаблицыОписания(ЗапросСервиса.Обработка, "Search/TradeOfferV1");
	
	ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найдено торговое предложение по идентификатору %1'"),
		ПараметрыЗапроса.Идентификатор));
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Валюта) Тогда
		КодВалюты = ТорговыеПредложенияПовтИсп.КодВалюты(ПараметрыЗапроса.Валюта);
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceCurrencyCode", КодВалюты);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Создание номенклатуры поставщика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры поиска, см. НоваяНоменклатураБизнесСети.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(Организация, ПараметрыЗапроса, Идентификатор, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
	ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление номенклатуры поставщика'");
		ЗапросСервиса.Адрес = СтрШаблон("supplier-nomenclatures/placement/nomenclatures/%1", Идентификатор);
		ЗапросСервиса.Метод = "PUT";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, Ложь);
	Иначе
		ЗапросСервиса.Наименование = НСтр("ru = 'Создание номенклатуры поставщика'");
		ЗапросСервиса.Адрес = "supplier-nomenclatures/placement/nomenclatures";
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(201);
		ЗапросСервиса.Обработка = "id";
	КонецЕсли;
	
	ЗапросСервиса.Контент = "application/vnd.1cbn-rsc.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	
	Данные = Новый Структура;
	Продукт = Новый Структура;
	
	// Заполнение на основании данных сервиса 1С:Номенклатура.
	ОписаниеКатегории = Новый Структура;
	ДобавитьЗначение(ОписаниеКатегории, "categoryId",     ПараметрыЗапроса.ИдентификаторКатегории);
	ДобавитьЗначение(ОписаниеКатегории, "manufacturerId", ПараметрыЗапроса.ИдентификаторПроизводителя);
	ДобавитьЗначение(ОписаниеКатегории, "tradeMarkId",    ПараметрыЗапроса.ИдентификаторТорговойМарки);
	
	Свойства = Новый Массив;
	Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Свойства Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеСвойство = Новый Структура;
		НовоеСвойство.Вставить("id", ЭлементКоллекции.ИдентификаторРеквизита);
		Если ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторЗначения) Тогда
			НовоеСвойство.Вставить("value", ЭлементКоллекции.ИдентификаторЗначения);
		Иначе
			НовоеСвойство.Вставить("value", Формат(ЭлементКоллекции.Значение, "ЧРД=.; ЧН=0; ЧГ=; БЛ=false; БИ=true"));
		КонецЕсли;
		Свойства.Добавить(НовоеСвойство);
	КонецЦикла;
	ДобавитьЗначение(ОписаниеКатегории, "requisiteValues", Свойства);
	
	ДобавитьЗначение(Продукт, "ref1cNomenclature", ОписаниеКатегории, Истина);
	
	// Описание товара.
	Товар = Новый Структура; // supplierNomenclature
	
	НаименованиеНоменклатуры = ПараметрыЗапроса.НаименованиеНоменклатуры
		+ ?(ПустаяСтрока(ПараметрыЗапроса.Характеристика), "", СтрШаблон(", %1", ПараметрыЗапроса.Характеристика));
	ДобавитьЗначение(Товар, "productName",        НаименованиеНоменклатуры);
	ДобавитьЗначение(Товар, "productDescription", ПараметрыЗапроса.ОписаниеНоменклатуры);
	
	ДанныеПроизводителя = Новый Структура;
	ДобавитьЗначение(ДанныеПроизводителя, "tradeMark", ПараметрыЗапроса.ТорговаяМарка);
	ДобавитьЗначение(ДанныеПроизводителя, "name",      ПараметрыЗапроса.Производитель);
	ДобавитьЗначение(Товар, "manufacturer", ДанныеПроизводителя);
	
	ДобавитьЗначение(Товар, "partNumber",      ПараметрыЗапроса.Артикул);
	ДобавитьЗначение(Товар, "baseUnitOkeiCode",
		ТорговыеПредложенияПовтИсп.КодЕдиницыИзмерения(ПараметрыЗапроса.ЕдиницаИзмерения), Истина);
	ДобавитьЗначение(Товар, "barCodes",        ПараметрыЗапроса.Штрихкоды);
	
	ДобавитьЗначение(Продукт, "supplierNomenclature", Товар);
	ДобавитьЗначение(Данные, "product", Продукт, Истина);
	
	ДобавитьЗначение(Данные, "supplierId", БизнесСеть.ИдентификаторОрганизации(Организация), Истина);
	
	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	ЗапросСервиса.Детализация = СтрШаблон(
		"%1%2", 
		НаименованиеНоменклатуры, 
		?(ПустаяСтрока(ПараметрыЗапроса.ЕдиницаИзмерения), "", СтрШаблон("(%1)", ПараметрыЗапроса.ЕдиницаИзмерения)));
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Отправка торгового предложения.
//
// Параметры:
//  ИдентификаторОрганизации - Строка
//  ПараметрыЗапроса - Структура
//  Идентификатор - Неопределено, Строка - идентификатор.
//  Отказ - Булево
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(
			ИдентификаторОрганизации, 
			ПараметрыЗапроса, 
			Идентификатор, 
			Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ЗапросСервиса.Наименование = НСтр("ru = 'Обновление торгового предложения'");
		ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1", Идентификатор);
		ЗапросСервиса.Метод = "PUT";
		ЗапросСервиса.Контент = "application/vnd.1cbn.v1+json";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
		ЗапросСервиса.Ошибки.Вставить(404, СтрШаблон(НСтр("ru = 'Не найдено торговое предложение в сервисе с идентификатором %1'"),
			Идентификатор));
	Иначе
		ЗапросСервиса.Наименование = НСтр("ru = 'Создание торгового предложения'");
		ЗапросСервиса.Адрес = "trade-offers/placement/offers";
		ЗапросСервиса.Метод = "POST";
		ЗапросСервиса.Контент = "application/vnd.1cbn.v1+json";
		ЗапросСервиса.РазрешенныеСостояния.Добавить(201);
	КонецЕсли;
	
	ЗапросСервиса.Аутентификация = Истина;
	
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "priceListId", ПараметрыЗапроса.ИдентификаторПрайсЛиста, Истина);
	
	Продукт = Новый Структура;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторНоменклатурыСервиса) Тогда
		НоменклатураСервиса = Новый Структура;
		ДобавитьЗначение(НоменклатураСервиса, "productSpecificationId",  ПараметрыЗапроса.ИдентификаторНоменклатурыСервиса);
		ДобавитьЗначение(НоменклатураСервиса, "productCharacteristicId", ПараметрыЗапроса.ИдентификаторХарактеристикиСервиса);
		ДобавитьЗначение(Продукт, "ref1cNomenclature", НоменклатураСервиса);
	Иначе
		НоменклатураПоставщика = Новый Структура;
		ДобавитьЗначение(НоменклатураПоставщика, "productSpecificationId", ПараметрыЗапроса.ИдентификаторНоменклатуры);
		ДобавитьЗначение(Продукт, "refSupplierNomenclature", НоменклатураПоставщика);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "product", Продукт, Истина);
	
	// Описание
	Описание = Новый Структура;
	Заголовок = СтрШаблон(
		"%1%2", 
		ПараметрыЗапроса.НаименованиеНоменклатуры, 
		?(ЗначениеЗаполнено(ПараметрыЗапроса.НаименованиеХарактеристики), 
			СтрШаблон(" ,%1", ПараметрыЗапроса.НаименованиеХарактеристики), 
			""));
	ДобавитьЗначение(Описание, "title", Заголовок);
	ДобавитьЗначение(Данные, "offerDescription", Описание);
				
	// Данные о продажах.
	УсловияПродаж = Новый Структура; // termsOfSale
	
	// Упаковка в условиях продаж termsOfSale.
	Упаковка = Новый Структура; // packaging
	ДобавитьЗначение(Упаковка, "description",      ПараметрыЗапроса.НаименованиеУпаковки);
	ДобавитьЗначение(Упаковка, "unitsNumerator",   ПараметрыЗапроса.ЧислительУпаковки, Истина);
	ДобавитьЗначение(Упаковка, "unitsDenominator", ПараметрыЗапроса.ЗнаменательУпаковки, Истина);
	
	ДобавитьЗначение(УсловияПродаж, "packaging", Упаковка, Истина);
	
	МатрицаЦен = Новый Массив; // matrix
	
	// Скидка простая, на процент или сумму.
	СкидкиПроцентСумма = ПараметрыЗапроса.СкидкиПроцентСумма;
	Если СкидкиПроцентСумма.Количество() > 0 Тогда
		
		СтрокаЦены = СкидкиПроцентСумма[0];
		ДобавитьЭлементМатрицыЦен(МатрицаЦен, СтрокаЦены);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Цена) Тогда
		
		НоваяЦена = Новый Структура;
		ДобавитьЗначение(НоваяЦена, "fromPackages", 1);
		ДобавитьЗначение(НоваяЦена, "price", ПараметрыЗапроса.Цена * 100, Истина); // Цена хранится в копейках.
		МатрицаЦен.Добавить(НоваяЦена);
		
	КонецЕсли;
	
	// Скидки за объем продаж.
	ТаблицаИсточникМатрицаЦен = ПараметрыЗапроса.СкидкиЗаОбъемПродаж;
	Для Каждого СтрокаЦены Из ТаблицаИсточникМатрицаЦен Цикл
		Если СтрокаЦены.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЭлементМатрицыЦен(МатрицаЦен, СтрокаЦены);
	КонецЦикла;
	
	Цена = Новый Структура; // price
	ДобавитьЗначение(Цена, "vat",         ТорговыеПредложенияПовтИсп.СтавкаНДССериализованная(ПараметрыЗапроса.СтавкаНДС), Истина);
	ДобавитьЗначение(Цена, "includesVAT", ПараметрыЗапроса.ЦенаВключаетНДС, Истина);
	
	Если ЗначениеЗаполнено(МатрицаЦен) Тогда
		ДобавитьЗначение(Цена, "matrix",      МатрицаЦен);
	КонецЕсли;
	
	ДобавитьЗначение(УсловияПродаж, "price", Цена);
	
	// Ограничение сервиса на минимальный срок поставки.
	Если ПараметрыЗапроса.СрокПоставки = 0 Тогда
		ПараметрыЗапроса.СрокПоставки = 1;
	КонецЕсли;
	
	ДобавитьЗначение(УсловияПродаж, "packageMultiplicity", ПараметрыЗапроса.КратностьУпаковки, Истина);
	ДобавитьЗначение(УсловияПродаж, "maxDaysForShipment",  ПараметрыЗапроса.СрокПоставки,
		?(ПараметрыЗапроса.СрокПоставки = 0, Истина, Ложь));
	
	ДобавитьЗначение(Данные, "termsOfSale", УсловияПродаж, Истина);
	
	Наличие = Неопределено;
	Если ПараметрыЗапроса.Наличие = 1 Тогда
		Наличие = "LOW";
	ИначеЕсли ПараметрыЗапроса.Наличие = 2 Тогда
		Наличие = "MEDIUM";
	ИначеЕсли ПараметрыЗапроса.Наличие = 3 Тогда
		Наличие = "HIGH";
	КонецЕсли;
	
	Остатки = Новый Структура; // stock
	ИтогиПоОстаткам = Новый Структура; // stockBalanceSummary
	
	Если ЗначениеЗаполнено(Наличие)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗапроса.Количество) Тогда
		
		ДобавитьЗначение(ИтогиПоОстаткам, "level", Наличие);
		
		Если ПараметрыЗапроса.Количество <> Неопределено И ТипЗнч(ПараметрыЗапроса.Количество) = Тип("Число") Тогда
			Количество = Окр(ПараметрыЗапроса.Количество);
		Иначе
			Количество = ПараметрыЗапроса.Количество;
		КонецЕсли;
		ДобавитьЗначение(ИтогиПоОстаткам, "amount", Количество);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогиПоОстаткам) Тогда
		ДобавитьЗначение(Остатки, "stockBalanceSummary", ИтогиПоОстаткам, Истина);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Остатки) Тогда 
		ДобавитьЗначение(Данные,  "stock", Остатки);
	КонецЕсли;
	
	ДобавитьЗначение(Данные,  "externalCode", ПараметрыЗапроса.ВнутреннийИдентификатор);

	ЗапросСервиса.Данные = БизнесСеть.ЗначениеВJSON(Данные);
	
	ЗапросСервиса.Детализация = СтрШаблон(
		"%1%2", 
		Заголовок, 
		?(ПустаяСтрока(ПараметрыЗапроса.НаименованиеУпаковки), 
			"", СтрШаблон("(%1)", ПараметрыЗапроса.НаименованиеУпаковки)));
	
	Возврат ЗапросСервиса;
	
КонецФункции

Процедура ДобавитьЭлементМатрицыЦен(МатрицаЦен, СтрокаЦены)
	
	НоваяЦена = Новый Структура;
	ДобавитьЗначение(НоваяЦена, "fromPackages", СтрокаЦены.Количество);
	
	ЦенаДоСкидки = СтрокаЦены.ЦенаДоСкидки;
	
	// Цена хранится в копейках.
	КоличествоКопеек = 100;
	
	Если СтрокаЦены.Цена = 0 Тогда
		ДобавитьЗначение(НоваяЦена, "price", СтрокаЦены.ЦенаДоСкидки * КоличествоКопеек, Истина);
	Иначе
		ДобавитьЗначение(НоваяЦена, "price", СтрокаЦены.Цена * КоличествоКопеек, Истина);
	КонецЕсли;
	
	Если СтрокаЦены.Цена <> 0 И ЦенаДоСкидки > 0 Тогда
		ДобавитьЗначение(НоваяЦена, "priceBeforeDiscount", ЦенаДоСкидки * КоличествоКопеек, Истина);
	КонецЕсли;
	
	ДобавитьЗначение(НоваяЦена, "notes", СтрокаЦены.Комментарий); //Текстовое описание данного ценового условия.
	МатрицаЦен.Добавить(НоваяЦена);
	
КонецПроцедуры

// Актуализация проекции данных торгового предложения в сервисе.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор торгового предложения.
// 
// Возвращаемое значение:
//  Структура - данные запроса.
//
Функция ЗапросСервисаАктуализацияДанныхТорговогоПредложения(ДанныеПредложения, Идентификатор, Отказ)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ДанныеПредложения.ПрайсЛист.Организация);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Актуализация данных торгового предложения в сервисе'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/offers/%1/refresh", Идентификатор);
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/json";
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
	ЗапросСервиса.Ошибки.Вставить(400, НСтр("ru = 'Сервис не может обработать запрос. Подробности в журнале регистрации'"));
			
	ЗапросСервиса.Аутентификация = Истина;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаСозданиеОбновлениеИзображенияНоменклатурыПоставщика(
			Организация, 
			ИдентификаторНоменклатуры,
			ИдентификаторИзображения, 
			ДвоичныеДанныеФайла, 
			ТипКонтента)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление изображения номенклатуры поставщика'");
	ЗапросСервиса.Адрес = СтрШаблон("supplier-nomenclatures/placement/nomenclatures/%1/images/%2",
		ИдентификаторНоменклатуры,
		ИдентификаторИзображения);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.РазрешенныеСостояния.Добавить(201); // Изображение размещено.
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204); // Изображение изменено.
	ЗапросСервиса.Ошибки.Вставить(404, Ложь);
	ЗапросСервиса.Ошибки.Вставить(403, НСтр("ru = 'Номенклатура не принадлежит субъекту доступа.'"));
	ЗапросСервиса.Ошибки.Вставить(413, НСтр("ru = 'Изображение слишком большого размера.'"));
	ЗапросСервиса.Ошибки.Вставить(415, НСтр("ru = 'Тип изображения не поддерживается.'"));
	ЗапросСервиса.Ошибки.Вставить(422, НСтр("ru = 'Передано невалидное изображение (неопознанный формат или ошибка формата, слишком маленький размер).'"));
	
	ЗапросСервиса.Контент        = ТипКонтента;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.Данные         = ДвоичныеДанныеФайла;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаУдалениеИзображенияНоменклатурыПоставщика(ИдентификаторОрганизации, ИдентификаторНоменклатуры, ИдентификаторИзображения)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Удаление изображения номенклатуры поставщика'");
	ЗапросСервиса.Адрес = СтрШаблон("supplier-nomenclatures/placement/nomenclatures/%1/images/%2",
		ИдентификаторНоменклатуры,
		ИдентификаторИзображения);
	ЗапросСервиса.Метод = "DELETE";
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204); // Изображение удалено.
	ЗапросСервиса.Ошибки.Вставить(404, НСтр("ru = 'Данные изображения не найдены.'"));
	ЗапросСервиса.Ошибки.Вставить(403, НСтр("ru = 'Номенклатура не принадлежит субъекту доступа.'"));
	ЗапросСервиса.Аутентификация  = Истина;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросХарактеристикиКатегорииТорговыхПредложений(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.Наименование = 
		НСтр("ru = 'Получение параметров характеристик товаров для заданной категории рубрикатора'");
	
	ЗапросСервиса.Адрес = "trade-offers/storefront/product-offers";
	
	ЗапросСервиса.Метод            = "GET";
	ЗапросСервиса.Аутентификация   = Ложь;
	ЗапросСервиса.Контент          = "application/vnd.1cbn.v1+json";
	ЗапросСервиса.РасширятьКонтент = Ложь;
	
	Если Не ПустаяСтрока(ПараметрыЗапроса.ИдентификаторКатегории) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "categoryId", ПараметрыЗапроса.ИдентификаторКатегории);
	КонецЕсли;
	
	Если ПараметрыЗапроса.Контрагенты.Количество() Тогда
		
		// Отбор по контрагенту
		ИдентификаторыКонтрагентов = БизнесСеть.ИдентификаторыКонтрагентов(ПараметрыЗапроса.Контрагенты);
		ИдентификаторыКонтрагентов = ИдентификаторыКонтрагентов.Данные.ВыгрузитьКолонку("Идентификатор");
		
		// Отбор по организации
		Для Каждого Контрагент Из ПараметрыЗапроса.Контрагенты Цикл
			
			ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Контрагент);
			
			Если Не ПустаяСтрока(ИдентификаторОрганизации) Тогда
				ИдентификаторыКонтрагентов.Добавить(ИдентификаторОрганизации);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторыКонтрагентов.Количество() > 0 Тогда
			ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "suppliers", ИдентификаторыКонтрагентов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.ВНаличии Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "inStock", ПараметрыЗапроса.ВНаличии);
	КонецЕсли;
	
	Если ПараметрыЗапроса.СоСкидкой Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "hasDiscount", ПараметрыЗапроса.СоСкидкой);
	КонецЕсли;
	
	Если ПараметрыЗапроса.СИзображением Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "withImages", ПараметрыЗапроса.СИзображением);
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЦенаОт > 0 Тогда
		Значение = ПараметрыЗапроса.ЦенаОт * 100; // в копейках
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceFrom", Значение);
	КонецЕсли;
	
	Если ПараметрыЗапроса.ЦенаДо > 0 Тогда
		Значение = ПараметрыЗапроса.ЦенаДо * 100; // в копейках
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "priceTo", Значение);
	КонецЕсли;
	
	// Регионы поиска.
	Для Каждого ЭлементКоллекции Из ПараметрыЗапроса.РегионыПоиска Цикл
		
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "country", ЭлементКоллекции.КодСтраны);
		
		Если ЭлементКоллекции.ДляДоставки Тогда
			ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "pickupArea", ЭлементКоллекции.Идентификатор);
		КонецЕсли;
		
		Если ЭлементКоллекции.ДляСамовывоза Тогда
			ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "deliveryArea", ЭлементКоллекции.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросПоставщиковТорговыхПредложений(СтрокаПоиска)
	
	Результат = НовыйЗапросСервиса();
	
	Результат.Наименование     = НСтр("ru = 'Получение списка поставщиков'");
	Результат.Адрес            = СтрШаблон("/trade-offers/storefront/suppliers?q=%1", СтрокаПоиска);
	Результат.Метод            = "GET";
	Результат.Аутентификация   = Ложь;
	Результат.Контент          = "application/vnd.1cbn.v1+json";
	Результат.РасширятьКонтент = Ложь;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросДереваКатегорийТорговыхПредложений(ПараметрыЗапросаДерева, Отказ)
	
	Поставщики = Новый Массив;
	
	Если ЗначениеЗаполнено(ПараметрыЗапросаДерева.Поставщик) 
		И СтрДлина(ПараметрыЗапросаДерева.Поставщик) >= 3 Тогда
		
		Поставщики = ПоставщикиТорговыхПредложений(ПараметрыЗапросаДерева.Поставщик, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	СтрокиПараметров = Новый Массив;
	
	Если ЗначениеЗаполнено(Поставщики) Тогда
		
		ИдентификаторыПоставщиков = Новый Массив;
		
		Для каждого ЭлементКоллекции Из Поставщики Цикл
			ИдентификаторыПоставщиков.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЦикла;
		
		СтрокаДанных = СтрСоединить(ИдентификаторыПоставщиков, ",");
		
		СтрокиПараметров.Добавить(СтрШаблон("suppliers=%1", СтрокаДанных));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапросаДерева.РегионДоставки) Тогда
		СтрокиПараметров.Добавить(СтрШаблон("deliveryArea=%1", ПараметрыЗапросаДерева.РегионДоставки));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапросаДерева.РегионСамовывоза) Тогда
		СтрокиПараметров.Добавить(СтрШаблон("pickupArea=%1", ПараметрыЗапросаДерева.РегионСамовывоза));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапросаДерева.КодСтраны) Тогда
		СтрокиПараметров.Добавить(СтрШаблон("country=%1", ПараметрыЗапросаДерева.КодСтраны));
	КонецЕсли;
	
	Если ПараметрыЗапросаДерева.ВНаличии Тогда
		СтрокиПараметров.Добавить("inStock=true");
		СтрокиПараметров.Добавить("inSales=true");
	КонецЕсли;
	
	Если ПараметрыЗапросаДерева.СоСкидкой Тогда
		СтрокиПараметров.Добавить("hasDiscount=true");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыЗапросаДерева.Наименование) Тогда
		СтрокиПараметров.Добавить(СтрШаблон("q=%1", ПараметрыЗапросаДерева.Наименование));
	КонецЕсли;
	
	Если ПараметрыЗапросаДерева.Штрихкоды.Количество() > 0 Тогда
		СтрокаШтрихкодов = СтрСоединить(ПараметрыЗапросаДерева.Штрихкоды, ",");
		СтрокиПараметров.Добавить(СтрШаблон("barCodes=%1", СтрокаШтрихкодов));
	КонецЕсли;
	
	Если ПараметрыЗапросаДерева.Артикулы.Количество() > 0 Тогда
		СтрокаАртикулов = СтрСоединить(ПараметрыЗапросаДерева.Артикулы, ",");
		СтрокиПараметров.Добавить(СтрШаблон("partNumbers=%1", СтрокаАртикулов));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыЗапросаДерева.ИдентификаторНоменклатуры1СН) Тогда
		СтрокиПараметров.Добавить(СтрШаблон("nomenclatureId=%1", ПараметрыЗапросаДерева.ИдентификаторНоменклатуры1СН));
	КонецЕсли;
	
	СтрокаПараметров = "";
	
	Если ЗначениеЗаполнено(СтрокиПараметров) Тогда
		СтрокаПараметров = СтрШаблон("?%1", СтрСоединить(СтрокиПараметров, "&"));
	КонецЕсли;
	
	Результат = НовыйЗапросСервиса();
	Результат.Наименование = НСтр("ru = 'Получение дерева категорий'", ОбщегоНазначения.КодОсновногоЯзыка());
	Результат.Адрес = СтрШаблон("/trade-offers/storefront/product-offers-categories%1", СтрокаПараметров);
	Результат.Метод            = "GET";
	
	Организация = ПараметрыЗапросаДерева.Организация;
	Если Не Организация.Пустая() Тогда
		Результат.Аутентификация = Истина;
		Результат.ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(Организация);
	КонецЕсли;
	
	Результат.РазрешенныеСостояния.Добавить(401);
	Результат.Контент          = "application/vnd.1cbn.v1+json";
	Результат.РасширятьКонтент = Ложь;
	
	Возврат Результат;
	
КонецФункции

// Запрос сервиса получение ссылки фида прайс листа.
// 
// Параметры:
//  ПараметрыЗапроса - см. НовыеПараметрыПолученияПрайсЛистов.
// 
// Возвращаемое значение:
//  См. НовыйЗапросСервиса
//
Функция ЗапросСервисаПолучениеСсылкиФидаПрайсЛиста(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.ИдентификаторОрганизации = ПараметрыЗапроса.ИдентификаторОрганизации;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение ссылки на скачивание фида прайс-листа'");
	ЗапросСервиса.Адрес = СтрШаблон("trade-offers/placement/price-lists/%1/feeds", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	
	ТекстОшибки = НСтр("ru = 'Прайс-лист не найден. Подробности в журнале регистрации'"); 
	
	ЗапросСервиса.Ошибки.Вставить(404, ТекстОшибки);
			
	Возврат ЗапросСервиса;
	
КонецФункции

// Запрос сервиса обновление ссылки фида прайс листа.
// 
// Параметры:
//  ПараметрыЗапроса - см. НовыеПараметрыПолученияПрайсЛистов.
// 
// Возвращаемое значение:
//  См. НовыйЗапросСервиса
//
Функция ЗапросСервисаОбновлениеСсылкиФидаПрайсЛиста(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.ИдентификаторОрганизации = ПараметрыЗапроса.ИдентификаторОрганизации;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление ссылки на скачивание фида прайс-листа'");
	ЗапросСервиса.Адрес = 
		СтрШаблон("trade-offers/placement/price-lists/%1/feeds/refresh", ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.РазрешенныеСостояния.Добавить(204);
	
	ТекстОшибки = НСтр("ru = 'Прайс-лист не найден. Подробности в журнале регистрации'"); 
	
	ЗапросСервиса.Ошибки.Вставить(404, ТекстОшибки);			
		
	Возврат ЗапросСервиса;
	
КонецФункции


#КонецОбласти

#Область МетодыСервиса

#Область ПоставщикиТорговыхПредложений

Функция ПоставщикиТорговыхПредложений(СтрокаПоиска, Отказ)
	
	ПараметрыКоманды = ЗапросПоставщиковТорговыхПредложений(СтрокаПоиска);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	Результат = Неопределено;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПоставщикиИзДанныхСервиса(ДанныеСервиса._embedded.suppliers);
	
	Возврат Результат;
	
КонецФункции

Функция ПоставщикиИзДанныхСервиса(ДанныеСервиса)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса Цикл
		
		ДанныеПоставщика = Новый Структура;
		
		ДанныеПоставщика.Вставить("Идентификатор",            ЭлементКоллекции.id);
		ДанныеПоставщика.Вставить("НатуральныйИдентификатор", ЭлементКоллекции.legalId);
		ДанныеПоставщика.Вставить("Наименование",             ЭлементКоллекции.name);
		
		Результат.Добавить(ДанныеПоставщика);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДеревоКатегорийТорговыхПредложений

// Дополнить данными категорий.
// 
// Параметры:
//  Результат - Структура
//  ПараметрыЗапроса - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами
//
Процедура ДополнитьДаннымиКатегорий(Результат, ПараметрыЗапроса)
	
	Результат.Вставить("ДеревоКатегорий", Неопределено);
	
	Если Не ПараметрыЗапроса.ПолучитьДеревоКатегорий Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаКатегорий = НовыйПараметрыЗапросаДереваКатегорий();
	
	ЗаполнитьПараметрыДереваКатегорийПоПараметрамПоискаПредложений(ПараметрыЗапросаКатегорий, ПараметрыЗапроса);
	
	Отказ = Ложь;
	
	ДеревоКатегорий = ДеревоКатегорийТорговыхПредложений(ПараметрыЗапросаКатегорий, Отказ);
	
	Если Не Отказ Тогда
		Результат.ДеревоКатегорий = ДеревоКатегорий;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить параметры дерева категорий по параметрам поиска предложений.
// 
// Параметры:
//  ПараметрыЗапросаКатегорий - см. НовыйПараметрыЗапросаДереваКатегорий
//  ПараметрыПоиска - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами
//
Процедура ЗаполнитьПараметрыДереваКатегорийПоПараметрамПоискаПредложений(ПараметрыЗапросаКатегорий, ПараметрыПоиска)
	
	Поставщик = "";
	
	Если ЗначениеЗаполнено(ПараметрыПоиска.Контрагенты) Тогда
		
		СтрокаКонтрагента = ПараметрыПоиска.Контрагенты[0];
		
		Если ЗначениеЗаполнено(СтрокаКонтрагента.ИНН) Тогда
			Поставщик = ПараметрыПоиска.Контрагенты[0].ИНН;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКонтрагента.Наименование) Тогда	
			Поставщик = ПараметрыПоиска.Контрагенты[0].Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗапросаКатегорий.Поставщик = Поставщик;
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыЗапросаКатегорий, 
		ПараметрыПоиска, 
		"ВНаличии, СоСкидкой, Организация, Наименование, Штрихкоды, Артикулы");
	
	Если ЗначениеЗаполнено(ПараметрыПоиска.НоменклатураСервиса) Тогда
		ПараметрыЗапросаКатегорий.ИдентификаторНоменклатуры1СН = 
			ПараметрыПоиска.НоменклатураСервиса[0].ИдентификаторНоменклатуры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПоиска.РегионыПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из ПараметрыПоиска.РегионыПоиска Цикл
		Если ЭлементКоллекции.ДляДоставки Тогда
			ПараметрыЗапросаКатегорий.РегионДоставки = ЭлементКоллекции.Идентификатор;
		ИначеЕсли ЭлементКоллекции.ДляСамовывоза Тогда
			ПараметрыЗапросаКатегорий.РегионСамовывоза = ЭлементКоллекции.Идентификатор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.КодСтраны) И ЭлементКоллекции.КодСтраны <> КодСтраныРоссия() Тогда
			ПараметрыЗапросаКатегорий.КодСтраны = ЭлементКоллекции.КодСтраны;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодСтраныРоссия()
	
	Возврат "643";
	
КонецФункции

// Описание параметров дерева категорий.
// 
// Возвращаемое значение:
//  Структура:
// * Организация - Произвольный, ОпределяемыйТип.Организация - ссылка на организацию.
// * Поставщик - Строка
// * РегионДоставки - Строка
// * РегионСамовывоза - Строка
// * КодСтраны - Строка
// * СоСкидкой - Булево
// * ВНаличии - Булево
// * Наименование - Строка
// * Артикулы - Массив из Строка - артикулы номенклатуры.
// * Штрихкоды - Массив из Строка - штрихкода номенклатуры.
// * ИдентификаторНоменклатуры1СН - Строка - идентификатор номенклатуры.
//
Функция НовыйПараметрыЗапросаДереваКатегорий()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Результат.Вставить("Поставщик",        "");
	Результат.Вставить("РегионДоставки",   "");
	Результат.Вставить("РегионСамовывоза", "");
	Результат.Вставить("КодСтраны",        "");
	Результат.Вставить("СоСкидкой",        Ложь);
	Результат.Вставить("ВНаличии",         Ложь);
	Результат.Вставить("Наименование",     "");
	Результат.Вставить("Артикулы",         Новый Массив);
	Результат.Вставить("Штрихкоды",        Новый Массив);
	Результат.Вставить("ИдентификаторНоменклатуры1СН", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКатегорииТорговыхПредложенийВФоне(УникальныйИдентификатор) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Получение категорий торговых предложений.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.ПолучитьКатегорииТорговыхПредложенийСохранитьРезультат";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

Процедура ПолучитьКатегорииТорговыхПредложенийСохранитьРезультат(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыДереваКатегорий = НовыйПараметрыЗапросаДереваКатегорий();
	
	ДеревоКатегорий = ДеревоКатегорийТорговыхПредложений(ПараметрыДереваКатегорий, Отказ);
	
	ПоместитьВоВременноеХранилище(ДеревоКатегорий, АдресРезультата);
	
КонецПроцедуры

// Дерево категорий торговых предложений.
// 
// Параметры:
//  ПараметрыЗапросаДерева - см. НовыйПараметрыЗапросаДереваКатегорий
//  Отказ - Булево
// 
// Возвращаемое значение:
//  Неопределено, ДеревоЗначений - Дерево категорий торговых предложений:
// * Наименование - Строка
// * Идентификатор - Строка
// * ИндексКартинки - Число
// * ЛистоваяКатегория - Булево
// * КоличествоТорговыхПредложений - Число
// * ИдентификаторРодителя - Строка
//
Функция ДеревоКатегорийТорговыхПредложений(ПараметрыЗапросаДерева, Отказ)
	
	Результат = Неопределено;
	
	ПараметрыКоманды = ЗапросДереваКатегорийТорговыхПредложений(ПараметрыЗапросаДерева, Отказ);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ДеревоТорговыхПредложенийИзДанныхСервиса(ДанныеСервиса.categories);
	
	Возврат Результат;
	
КонецФункции

// Дерево торговых предложений из данных сервиса.
// 
// Параметры:
//  ДанныеСервиса - Структура
// 
// Возвращаемое значение:
//  ДеревоЗначений - см. ОписаниеДереваКатегорийТорговыхПредложений
//
Функция ДеревоТорговыхПредложенийИзДанныхСервиса(ДанныеСервиса)
	
	ТаблицаКатегорий = ТаблицаКатегорийИзМассива(ДанныеСервиса);
	
	ДеревоКатегорий = ОписаниеДереваКатегорийТорговыхПредложений();
	
	ВсеКатегории = ДеревоКатегорий.Строки.Добавить();
	
	ВсеКатегории.Наименование = НСтр("ru = 'Все категории'");
	ВсеКатегории.ИндексКартинки = 12;
	
	ЗаполнитьДеревоКатегорий(ВсеКатегории.Строки, ТаблицаКатегорий, "");
	
	Возврат ДеревоКатегорий;
	
КонецФункции

Функция ТаблицаКатегорийИзМассива(ДанныеСервиса)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор",                 Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Наименование",                  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КоличествоТорговыхПредложений", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ЛистоваяКатегория",             Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИндексКартинки",                Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ИдентификаторРодителя",         Новый ОписаниеТипов("Строка"));
	
	Результат.Индексы.Добавить("ИдентификаторРодителя");
	
	Для каждого СтрокаСервиса Из ДанныеСервиса Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Идентификатор                 = СтрокаСервиса.id;
		НоваяСтрока.Наименование                  = СтрокаСервиса.name;
		НоваяСтрока.КоличествоТорговыхПредложений = СтрокаСервиса.offers;
		НоваяСтрока.ЛистоваяКатегория             = СтрокаСервиса.isLeaf;
		НоваяСтрока.ИндексКартинки                = ?(НоваяСтрока.ЛистоваяКатегория, 3, 0);
		НоваяСтрока.ИдентификаторРодителя         = СтрокаСервиса.parentId;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Описание дерева категорий торговых предложений.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Описание дерева категорий торговых предложений:
// * Наименование - Строка
// * Идентификатор - Строка
// * ИндексКартинки - Число
// * ЛистоваяКатегория - Булево
// * КоличествоТорговыхПредложений - Число
// * ИдентификаторРодителя - Строка
//
Функция ОписаниеДереваКатегорийТорговыхПредложений()
	
	Результат = Новый ДеревоЗначений;
	
	Результат.Колонки.Добавить("Наименование",                  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Идентификатор",                 Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИндексКартинки",                Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ЛистоваяКатегория",             Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КоличествоТорговыхПредложений", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ИдентификаторРодителя",         Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДеревоКатегорий(СтрокиДанных, ДеревоДляПостроения, ИдентификаторРодителя)
	
	НайденныеСтроки = ДеревоДляПостроения.НайтиСтроки(
		Новый Структура("ИдентификаторРодителя", ИдентификаторРодителя));
	
	Для каждого ЭлементКоллекции Из НайденныеСтроки Цикл
		
		НоваяСтрока = СтрокиДанных.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		Если НЕ ЭлементКоллекции.ЛистоваяКатегория Тогда
			ЗаполнитьДеревоКатегорий(НоваяСтрока.Строки, ДеревоДляПостроения, НоваяСтрока.Идентификатор)
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

#Область ДополнительныеРеквизитыКатегорий

// Получить характеристики категории в фоне.
// 
// Параметры:
//  ПараметрыЗапроса - см. ТорговыеПредложенияСлужебныйКлиент.НовыйПараметрыЗапросаХарактеристикКатегорий
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы.
//  ИдентификаторЗадания     - Строка - идентификатор задания.
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ПолучитьХарактеристикиКатегорииВФоне(
		ПараметрыЗапроса, УникальныйИдентификатор, ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = "";
	
	НаименованиеЗадания = НСтр("ru = 'Торговые предложения. Получение характеристик категории торговых предложений.'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.ПолучитьХарактеристикиКатегории";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗапроса, ПараметрыВыполнения);
	
КонецФункции

// Получить характеристики категории.
// 
// Параметры:
//  ПараметрыЗапроса - см. ТорговыеПредложенияСлужебныйКлиент.НовыйПараметрыЗапросаХарактеристикКатегорий
//  АдресРезультата - Строка
//
Процедура ПолучитьХарактеристикиКатегории(ПараметрыЗапроса, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыКоманды = ЗапросХарактеристикиКатегорииТорговыхПредложений(ПараметрыЗапроса);
	ДанныеСервиса = ВыполнитьЗапрос(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатТаблицаЗначений = ОбработатьДанныеСервисаХарактеристикиКатегорий(ДанныеСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатТаблицаЗначений);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ОбработатьДанныеСервисаХарактеристикиКатегорий(ДанныеСервиса, Отказ)
	
	ДополнительныеРеквизиты = Неопределено;
	ДиапазонЦен = Неопределено;
	Если Не ЕстьСвойство(ДанныеСервиса, "_embedded") 
		Или Не ЕстьСвойство(ДанныеСервиса._embedded.summary, "features", ДополнительныеРеквизиты) 
		Или Не ТипЗнч(ДополнительныеРеквизиты) = Тип("Массив") 
		Или Не ЕстьСвойство(ДанныеСервиса._embedded.summary, "priceRange", ДиапазонЦен) Тогда
		
		Отказ = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаДополнительныхРеквизитов = ОписаниеТаблицыДополнительныхРеквизитов();
	
	Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		
		СписокЗначений = Неопределено;
		
		Если ЕстьСвойство(ДополнительныйРеквизит, "numberValues",       СписокЗначений) 
			Или ЕстьСвойство(ДополнительныйРеквизит, "dateValues",    СписокЗначений) Тогда
			
			СтрокаДополнительныхРеквизитов = ДобавитьИнтервалВТаблицуДополнительныхРеквизитов(
				СписокЗначений, ТаблицаДополнительныхРеквизитов);
			
		ИначеЕсли ЕстьСвойство(ДополнительныйРеквизит, "booleanValues", СписокЗначений) Тогда
			
			СтрокаДополнительныхРеквизитов = ДобавитьБулевоЗначениеВТаблицуДополнительныхРеквизитов(
				СписокЗначений, ТаблицаДополнительныхРеквизитов);
			
		ИначеЕсли ЕстьСвойство(ДополнительныйРеквизит, "enumValues",    СписокЗначений) Тогда
			
			СтрокаДополнительныхРеквизитов = ДобавитьСписокЗначенийВТаблицуДополнительныхРеквизитов(
				СписокЗначений, ТаблицаДополнительныхРеквизитов);
			
		КонецЕсли;
		
		Если СтрокаДополнительныхРеквизитов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДополнительныхРеквизитов.Идентификатор = ДополнительныйРеквизит.featureId;
		СтрокаДополнительныхРеквизитов.Наименование = ДополнительныйРеквизит.featureName;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДиапазонЦен) Тогда
		
		СтрокаДиапазонаЦен = ТаблицаДополнительныхРеквизитов.Добавить();
		СтрокаДиапазонаЦен.МинимальноеЗначение = Окр(ДиапазонЦен.min/100, 4);
		СтрокаДиапазонаЦен.МаксимальноеЗначение = Окр(ДиапазонЦен.max/100, 4);
		СтрокаДиапазонаЦен.Идентификатор = "piceRange";
		СтрокаДиапазонаЦен.Наименование = "ДиапазонЦен";
		
	КонецЕсли;
	
	Возврат ТаблицаДополнительныхРеквизитов;

КонецФункции

Функция ОписаниеТаблицыДополнительныхРеквизитов()
	
	ТаблицаДополнительныхРеквизитов = Новый ТаблицаЗначений();
	
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("Идентификатор",         Типы().Строка);  // featureId.
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("Наименование",          Типы().Строка);  // featureName.
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("МинимальноеЗначение",   Типы().Простой); // min.
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("МаксимальноеЗначение",  Типы().Простой); // max.
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("ИнтервалОт",            Типы().Простой); // max в формате даты.
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("ИнтервалДо",            Типы().Простой); // max в формате даты
	
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("СписокВыбора",          Типы().Массив);  // enumValues.
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("ТипЗначенияВыбора",     Типы().Строка);  // Тип значения списка выбора.
	
	// Наименование значения характеристики (в тех случаях, когда значение определяется ограниченным набором/словарем/справочником)/
	ТаблицаДополнительныхРеквизитов.Колонки.Добавить("ИмяЗначения",           Типы().Строка); // valueName.
	
	Возврат ТаблицаДополнительныхРеквизитов;
	
КонецФункции

Функция ДобавитьИнтервалВТаблицуДополнительныхРеквизитов(СписокЗначений, Таблица)
	
	НоваяСтрока = Неопределено;
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат НоваяСтрока;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.МинимальноеЗначение  = СписокЗначений.min;
	НоваяСтрока.МаксимальноеЗначение = СписокЗначений.max;
	
	Если ТипЗнч(СписокЗначений.min) = Тип("Строка") Тогда
		ИнтервалОт  = ДатаИзСтроки(СписокЗначений.min);
	ИначеЕсли ТипЗнч(СписокЗначений.min) = Тип("Число") Тогда
		ИнтервалОт = СписокЗначений.min;
	Иначе
		ИнтервалОт = "";
	КонецЕсли;
	
	Если ТипЗнч(СписокЗначений.max) = Тип("Строка") Тогда
		ИнтервалДо  = ДатаИзСтроки(СписокЗначений.max);
	ИначеЕсли ТипЗнч(СписокЗначений.max) = Тип("Число") Тогда
		ИнтервалДо = СписокЗначений.max;
	Иначе
		ИнтервалДо = "";
	КонецЕсли;
	
	НоваяСтрока.ИнтервалОт  = ИнтервалОт;
	НоваяСтрока.ИнтервалДо = ИнтервалДо;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьБулевоЗначениеВТаблицуДополнительныхРеквизитов(СписокЗначений, Таблица)
	
	НоваяСтрока = Неопределено;
	
	СтрокаПустоеЗначение = СписокЗначений.Найти(Неопределено);
	Если СтрокаПустоеЗначение <> Неопределено Тогда
		СписокЗначений.Удалить(СтрокаПустоеЗначение);
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.СписокВыбора = СписокЗначений;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьСписокЗначенийВТаблицуДополнительныхРеквизитов(СписокЗначений, Таблица)
	
	НоваяСтрока = Неопределено;
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат НоваяСтрока;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	
	СписокВыбора = Новый Массив;
	Для Каждого Значение Из СписокЗначений Цикл
		
		Если Значение.valueId = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеВыбора = Новый Структура("Идентификатор, Наименование");
		ЗначениеВыбора.Идентификатор = Значение.valueId;
		ЗначениеВыбора.Наименование  = Значение.ValueName;
		
		СписокВыбора.Добавить(ЗначениеВыбора);
		
	КонецЦикла;
	
	НоваяСтрока.СписокВыбора = СписокВыбора;
	
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ДополнитьДаннымиКорзины(Результат, ПараметрыЗапроса)
	
	Результат.Вставить("ДанныеКорзины", Неопределено);
	
	Если Не ПараметрыЗапроса.ПолучитьДанныеКорзины Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.АдресКорзины) Тогда
		АдресКорзины = ПараметрыЗапроса.АдресКорзины;
	Иначе
		
		АдресКорзины = СоздатьКорзинуПокупателя(ПараметрыЗапроса.Организация, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КорзинаОтсутствует = Ложь;
	
	ДанныеКорзины = ПолучитьДанныеКорзины(
		ПараметрыЗапроса.Организация, 
		АдресКорзины, 
		Ложь, 
		КорзинаОтсутствует, 
		Истина);
		
	Если КорзинаОтсутствует Тогда
		ДанныеКорзины = СоздатьПрочитатьКорзину(ПараметрыЗапроса.Организация, Отказ);
	КонецЕсли;
	
	Результат.ДанныеКорзины = ДанныеКорзины;
	
КонецПроцедуры

Процедура ПроверитьДанныеПрайсЛистаПередПубликацией(ПараметрыЗапроса, ЭтоСозданиеПрайсЛиста, Отказ)
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ОкончаниеДействия) 
		И ПараметрыЗапроса.ОкончаниеДействия < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		ВидОперации = НСтр("ru = 'Публикация торговых предложений'");
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Период публикации ""%1"" завершен.'"), ПараметрыЗапроса.Ссылка);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстОшибки, "ТорговыеПредложения", ПараметрыЗапроса.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	// В соответствии со спецификацией "PUT ​/price-lists​/{id}", обязательно к заполнению поле телефон или email.
	Если ПустаяСтрока(ПараметрыЗапроса.ЭлектроннаяПочта) Тогда
		
		ШаблонТекст = 
			НСтр("ru = 'Необходимо заполнить поле ""Уведомление по эл.почте"" для торгового предложения ""%1""'");
		ТекстОшибки = СтрШаблон(ШаблонТекст, ПараметрыЗапроса.Наименование);
		
		ВидОперации = НСтр("ru = 'Публикация торговых предложений'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстОшибки, "ТорговыеПредложения");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение количества торговых предложений участника сервиса.
//
// Параметры:
//   ПараметрыМетода - См. БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов.
//   Отказ - Булево - признак результата выполнения.
//
// Возвращаемое значение:
//   Число - количество торговых предложений.
//
Функция ПолучитьКоличествоТорговыхПредложений(ПараметрыМетода, Отказ) Экспорт
	
	Валюта = Неопределено;
	КлючНастроекФормы = "Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		Валюта = Настройки.Получить("Валюта");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		ТорговыеПредложенияПереопределяемый.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыПоискаТорговыхПредложенийСОтборами();
	
	ПараметрыЗапроса.РазмерСтраницы = 1;
	ПараметрыЗапроса.Валюта = ТорговыеПредложенияПовтИсп.КодВалюты(Валюта);
	ПараметрыЗапроса.Организация = ПараметрыМетода.Организация;
	
	СтрокаПараметрыКонтрагента = ПараметрыЗапроса.Контрагенты.Добавить();
	Если ЗначениеЗаполнено(ПараметрыМетода.ИНН) Тогда
		СтрокаПараметрыКонтрагента.ИНН = ПараметрыМетода.ИНН;
		СтрокаПараметрыКонтрагента.КПП = ПараметрыМетода.КПП;
	Иначе
		СтрокаПараметрыКонтрагента.Наименование = ПараметрыМетода.Наименование;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПоискТорговыхПредложенийСОтборами(ПараметрыЗапроса);
	ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
	
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Количество = Результат.Страницы.КоличествоСтрок;

	Возврат Количество;
	
КонецФункции

// Длительная операция получение табличного документа по карточке торгового предложения.
//
Процедура СформироватьПредставлениеТорговогоПредложения(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Валюта        = ПараметрыПроцедуры.Валюта;
	Идентификатор = ПараметрыПроцедуры.Идентификатор;
	Организация   = ПараметрыПроцедуры.Организация;
	
	Результат = ПолучитьТорговоеПредложение(Организация, Идентификатор, Валюта, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных торгового предложения.'");
		ПодробнаяИнформация = СтрШаблон(
			НСтр("ru = '%1%2Идентификатор %3.'"),
			ТекстСообщения, Символы.ПС, Идентификатор);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
			ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода = Новый Структура;
	
	ПараметрыВывода.Вставить("ВнутреннийИдентификатор", Результат.ВнутреннийИдентификатор);
	
	Если ЕстьСвойство(Результат, "ДатаПубликации") Тогда
		ДатаПубликации = ПрочитатьДатуJSON(Результат.ДатаПубликации, ФорматДатыJSON.ISO);
		ПараметрыВывода.Вставить("ДатаПубликации", ДатаПубликации);
	КонецЕсли;
	
	ПараметрыВывода.Вставить("Наименование", "");
	Если ЗначениеЗаполнено(Результат.НаименованиеНоменклатуры) Тогда
		ПараметрыВывода.Наименование = Результат.НаименованиеНоменклатуры;
	ИначеЕсли ЗначениеЗаполнено(Результат.Заголовок) Тогда
		ПараметрыВывода.Наименование = Результат.Заголовок;
	ИначеЕсли ЗначениеЗаполнено(Результат.ПредставлениеНоменклатурыСервиса) Тогда
		ПараметрыВывода.Наименование = СтрШаблон("%1%2", 
			Результат.ПредставлениеНоменклатурыСервиса, 
			?(ЗначениеЗаполнено(Результат.ПредставлениеХарактеристикиСервиса), 
				СтрШаблон(", %1", Результат.ПредставлениеХарактеристикиСервиса), 
				""));
	Иначе
		ПараметрыВывода.Наименование = НСтр("ru = 'не заполнено'");
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ИдентификаторНоменклатурыСервиса");
	ПараметрыВывода.Вставить("ПредставлениеНоменклатурыСервиса");
	ПараметрыВывода.Вставить("ИдентификаторХарактеристикиСервиса");
	ПараметрыВывода.Вставить("ПредставлениеХарактеристикиСервиса");
	ПараметрыВывода.Вставить("ОписаниеНоменклатурыСервиса", "");
	ПараметрыВывода.Вставить("АдресаКартинок",              Новый Массив);
	ПараметрыВывода.Вставить("ДанныеИзображений",           Новый СписокЗначений);
	Если ЗначениеЗаполнено(Результат.ИдентификаторНоменклатурыСервиса) Тогда
		ПараметрыВывода.ИдентификаторНоменклатурыСервиса   = Результат.ИдентификаторНоменклатурыСервиса;
		ПараметрыВывода.ПредставлениеНоменклатурыСервиса   = Результат.ПредставлениеНоменклатурыСервиса;
		ПараметрыВывода.ИдентификаторХарактеристикиСервиса = Результат.ИдентификаторХарактеристикиСервиса;
		ПараметрыВывода.ПредставлениеХарактеристикиСервиса = Результат.ПредставлениеХарактеристикиСервиса;
		ПараметрыВывода.ОписаниеНоменклатурыСервиса = СтрШаблон("%1%2%3", 
			ПараметрыВывода.ПредставлениеНоменклатурыСервиса, 
			?(ПустаяСтрока(ПараметрыВывода.ПредставлениеХарактеристикиСервиса), "", ", "), 
			ПараметрыВывода.ПредставлениеХарактеристикиСервиса);
		ПараметрыВывода.АдресаКартинок = Результат.АдресаКартинокСервиса;
		ИдентификаторКатегории         = Результат.ИдентификаторКатегорииСервиса;
		Свойства                       = Результат.СвойстваСервиса;
		ОтносительныеАдресаКартинок    = Ложь;
	Иначе
		ПараметрыВывода.АдресаКартинок = Результат.АдресаКартинок;
		ИдентификаторКатегории         = Результат.ИдентификаторКатегории;
		Свойства                       = Результат.Свойства;
		ОтносительныеАдресаКартинок    = Истина;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ОтносительныеАдресаКартинок", ОтносительныеАдресаКартинок);
	ПараметрыВывода.Вставить("Описание",                    Результат.Описание);
	ПараметрыВывода.Вставить("ИННКонтрагента",           Результат.ИННКонтрагента);
	ПараметрыВывода.Вставить("КППКонтрагента",           ?(Результат.КППКонтрагента = "0", "", Результат.КППКонтрагента));
	ПараметрыВывода.Вставить("ИдентификаторКонтрагента", Результат.ИдентификаторКонтрагента);
	ПараметрыВывода.Вставить("НаименованиеКонтрагента",  Результат.НаименованиеКонтрагента);
	ПараметрыВывода.Вставить("ПредставлениеКонтакта",    Результат.ПредставлениеКонтакта);
	ПараметрыВывода.Вставить("Телефон",                  Результат.Телефон);
	ПараметрыВывода.Вставить("ЭлектроннаяПочта",         Результат.ЭлектроннаяПочта);
	
	// Получить данные поставщика в сервисе.
	ПараметрыМетода = БизнесСетьКлиентСервер.ОписаниеИдентификацииОрганизацииКонтрагентов();
	ПараметрыМетода.ИНН = Результат.ИННКонтрагента;
	ПараметрыМетода.КПП = Результат.КППКонтрагента;
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.ИдентификаторКонтрагента);
	
	ДанныеСервиса = БизнесСеть.ДанныеОрганизацийПоИдентификаторам(Идентификаторы, Отказ);
	
	РеквизитыКонтрагента = Неопределено;
	
	Если Отказ Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСервиса) Тогда
		РеквизитыКонтрагента = ДанныеСервиса[0];
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		ТекстСообщения = НСтр("ru = 'Поставщик не найден.'");
		ПодробнаяИнформация = СтрШаблон(
			НСтр("ru = '%1%2Идентификатор торгового предложения %3%2Поставщик ИНН/КПП %4/%5.'"), 
			ТекстСообщения, Символы.ПС, Идентификатор, Результат.ИННКонтрагента, Результат.КППКонтрагента);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
			ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
	КонецЕсли;
	
	ПараметрыВывода.Вставить("СайтКонтрагента",             "");
	ПараметрыВывода.Вставить("ТелефонКонтрагента",          "");
	ПараметрыВывода.Вставить("ЭлектроннаяПочтаКонтрагента", "");
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
		РеквизитыКонтрагента.Свойство("Сайт",    ПараметрыВывода.СайтКонтрагента);
		РеквизитыКонтрагента.Свойство("Телефон", ПараметрыВывода.ТелефонКонтрагента);
		РеквизитыКонтрагента.Свойство("ЭлектроннаяПочта", ПараметрыВывода.ЭлектроннаяПочтаКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Заголовок) Тогда 
		ПараметрыВывода.Вставить("Заголовок", Результат.Заголовок);
	Иначе	
		ПараметрыВывода.Вставить("Заголовок");
		ПараметрыВывода.Заголовок = СтрШаблон(НСтр("ru = '%1, %2'"),
			ПараметрыВывода.Наименование,
			ПараметрыВывода.НаименованиеКонтрагента);
	КонецЕсли;
	ПараметрыВывода.Заголовок = СтрШаблон(НСтр("ru = '%1 (Торговое предложение)'"),
		ПараметрыВывода.Заголовок);
	
	ПараметрыВывода.Вставить("Артикул", 
		СтрШаблон("%1%2%3", 
			Строка(Результат.АртикулПроизводителя), 
			?(ЗначениеЗаполнено(Результат.АртикулПроизводителя) И ЗначениеЗаполнено(Результат.Артикул), " / ", ""), 
			Результат.Артикул));
	
	// Определение сроков поставки.
	ПараметрыВывода.Вставить("СрокПоставки",           Результат.СрокПоставки);
	ПараметрыВывода.Вставить("ДополнительноеОписание", Результат.ДополнительноеОписание);
	
	ПараметрыВывода.Вставить("Поставка");
	Если ПараметрыВывода.СрокПоставки = Неопределено Тогда
		ПараметрыВывода.Поставка = НСтр("ru = 'По запросу'")
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВывода.СрокПоставки) И ПараметрыВывода.СрокПоставки >= 1 Тогда
		ПараметрыВывода.Поставка = СтрШаблон(НСтр("ru = '%1 дн.'"), ПараметрыВывода.СрокПоставки);
	Иначе
		ПараметрыВывода.Поставка = НСтр("ru = 'В наличии'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.КодЕдиницыИзмеренияСервиса) Тогда
		КодЕдиницыИзмерения = Результат.КодЕдиницыИзмеренияСервиса;
	Иначе
		КодЕдиницыИзмерения = Результат.КодЕдиницыИзмерения;
	КонецЕсли;
	
	ЕдиницаИзмерения = ТорговыеПредложенияПовтИсп.ПараметрыЕдиницыИзмеренияПоКоду(КодЕдиницыИзмерения).Представление;
	
	ПараметрыВывода.Вставить("КраткоеПредставлениеЕдиницыИзмерения", ЕдиницаИзмерения);
	
	ПараметрыВывода.Вставить("ПредставлениеЕдиницыИзмерения", ЕдиницаИзмерения);	
	
	Если ЗначениеЗаполнено(Результат.УпаковкаНаименование)
			И ВРег(Результат.УпаковкаНаименование) <> ВРег(ПараметрыВывода.ПредставлениеЕдиницыИзмерения) Тогда
		
		ПараметрыВывода.ПредставлениеЕдиницыИзмерения = СтрШаблон(
			"%1 (%2%3%4)", 
			Результат.УпаковкаНаименование, 
			?(Результат.ЧислительУпаковки > 1 И Результат.ЗнаменательУпаковки <= 1, 
				СтрШаблон("%1 ", Строка(Результат.ЧислительУпаковки)), ""), 
			?(Результат.ЧислительУпаковки > 1 И Результат.ЗнаменательУпаковки > 1, 
				СтрШаблон("%1/%2", Строка(Результат.ЧислительУпаковки), Результат.ЗнаменательУпаковки), ""), 
			ПараметрыВывода.ПредставлениеЕдиницыИзмерения);
		
	КонецЕсли;
	
	ПредставлениеОстатков = ПредставлениеОстатков(
		Результат.Наличие, Результат.Количество, ЕдиницаИзмерения, Истина, Результат.СнятоСПродажи);
	ПараметрыВывода.Вставить("Наличие", ПредставлениеОстатков);
	
	МатрицаЦен = ?(ЗначениеЗаполнено(Результат.Цены), 
		ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат.Цены), 
		Неопределено);
	
	ПараметрыВывода.Вставить("ЦенаПубликации",          Результат.ЦенаПубликации);
	ПараметрыВывода.Вставить("Цена",                    Результат.Цена);
	ПараметрыВывода.Вставить("МатрицаЦен",              МатрицаЦен);
	
	РежимПоЗапросу = Не ЗначениеЗаполнено(Результат.Цена);
	
	Если ЗначениеЗаполнено(Результат.ШтрихкодыСервиса) Тогда
		ПараметрыВывода.Вставить("Штрихкоды", Результат.ШтрихкодыСервиса);
	Иначе
		ПараметрыВывода.Вставить("Штрихкоды", Результат.Штрихкоды);
	КонецЕсли;
	
	ПараметрыВывода.Вставить("СтавкаНДС",       Результат.СтавкаНДС);
	ПараметрыВывода.Вставить("ЦенаВключаетНДС", Результат.ЦенаВключаетНДС);
	ПараметрыВывода.Вставить("ИнформацияНДС");
	Если ПараметрыВывода.ЦенаВключаетНДС = Неопределено Тогда
		ПараметрыВывода.ИнформацияНДС = Строка(ПараметрыВывода.СтавкаНДС);
	Иначе
		ПараметрыВывода.ИнформацияНДС = СтрШаблон("%1, %2", Строка(ПараметрыВывода.СтавкаНДС),
			?(ПараметрыВывода.ЦенаВключаетНДС, НСтр("ru = 'входит в стоимость'"), НСтр("ru = 'не входит в стоимость'")));
	КонецЕсли;
	
	// Способ доставки.
	ПараметрыВывода.Вставить("СпособДоставки",   Неопределено);
	ПараметрыВывода.Вставить("АдресаСамовывоза", Новый Массив);
	ПараметрыВывода.Вставить("РегионыДоставки",  Новый Массив);
	
	Если ЗначениеЗаполнено(Результат.АдресаСамовывоза) Тогда
		ПараметрыВывода.АдресаСамовывоза = Результат.АдресаСамовывоза;
		ПараметрыВывода.СпособДоставки = НСтр("ru = 'Самовывоз'");
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат.РегионыДоставки) Тогда
		
		ПараметрыВывода.РегионыДоставки = Результат.РегионыДоставки;
		
		Если ПараметрыВывода.СпособДоставки = Неопределено Тогда
			ПараметрыВывода.СпособДоставки = НСтр("ru = 'Доставка'");
		Иначе
			ПараметрыВывода.СпособДоставки = СтрШаблон(НСтр("ru = '%1, доставка'"), ПараметрыВывода.СпособДоставки);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ЦенаСтрокой", "");
	ПараметрыВывода.Вставить("ЦенаПубликацииСтрокой", "");
	ПараметрыВывода.Вставить("ВалютаПубликации");
	ПараметрыВывода.Вставить("ВалютаПоиска", Валюта);
	
	Если ТипЗнч(Результат.Валюта) = Тип("Структура") Тогда
		Результат.Валюта.Свойство("Наименование", ПараметрыВывода.ВалютаПубликации);
	Иначе
		ПараметрыВывода.ВалютаПубликации = Результат.Валюта;
	КонецЕсли;
	
	Если РежимПоЗапросу Тогда // Цена по запросу
		
		Если ЗначениеЗаполнено(Результат.Цены) И Результат.Цены.Количество() > 1 Тогда
			Результат.Цены.Сортировать("Цена Возр");
			ПараметрыВывода.ЦенаСтрокой = СтрШаблон(НСтр("ru = 'от %1 %2'"), Результат.Цены[0].Цена, ПараметрыВывода.ВалютаПубликации);
		Иначе
			ПараметрыВывода.ЦенаСтрокой = НСтр("ru = 'по запросу'");
		КонецЕсли;
		
	Иначе
		
		ПараметрыВывода.ЦенаСтрокой = СтрШаблон("%1 %2", 
				ПредставлениеЦены(ПараметрыВывода.Цена), 
				Валюта);
		
		ПараметрыВывода.ЦенаПубликацииСтрокой = 
			СтрШаблон("%1 %2", 
				ПредставлениеЦены(Результат.ЦенаПубликации), 
				ПараметрыВывода.ВалютаПубликации);
		
	КонецЕсли;
	
	ПараметрыВывода.Вставить("МинимальнаяСуммаЗаказа", НСтр("ru = 'Любая'"));
	
	Если ЗначениеЗаполнено(Результат.МинимальнаяСуммаЗаказа) Тогда
		ПараметрыВывода.МинимальнаяСуммаЗаказа = СтрШаблон("%1 %2", 
			Формат(Результат.МинимальнаяСуммаЗаказа, "ЧЦ=15; ЧДЦ=2"), 
			ПараметрыВывода.ВалютаПубликации);
	КонецЕсли;
	
	ПараметрыВывода.Вставить("КратностьУпаковки", НСтр("ru = 'Любой'"));
	
	Если ЕстьСвойство(Результат, "КратностьУпаковки")
		И ЗначениеЗаполнено(Результат.КратностьУпаковки) 
		И Результат.КратностьУпаковки > 1 Тогда
		ПараметрыВывода.КратностьУпаковки = Формат(Результат.КратностьУпаковки, "ЧЦ=10;");
	КонецЕсли;
	
	ПараметрыВывода.Вставить("ИдентификаторКатегории");
	ПараметрыВывода.Вставить("ПредставлениеКатегории");
	
	Если НЕ ПустаяСтрока(ИдентификаторКатегории) Тогда
		
		ЗаполнитьПредставлениеКатегории(
			ИдентификаторКатегории, 
			Идентификатор, 
			Результат.РодительскиеКатегории, 
			ПараметрыВывода, 
			Отказ);
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВывода.Вставить("Свойства");
	Если Свойства <> Неопределено Тогда
		ПараметрыВывода.Свойства = Новый СписокЗначений;
		Для Каждого ЭлементКоллекции Из Свойства Цикл
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.Представление) Тогда
				Значение = ЭлементКоллекции.Представление;
			Иначе
				Значение = ЭлементКоллекции.Значение;
			КонецЕсли;
			
			Если ЭлементКоллекции.Тип = "date" Тогда
				Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение);
				Если Дата <> Дата(1,1,1) Тогда
					Значение = Формат(Дата, "ДЛФ=D;");
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыВывода.Свойства.Добавить(Значение, ЭлементКоллекции.Наименование);
			
		КонецЦикла;
	КонецЕсли;
	
	РодительскиеКатегории = Новый Массив;
	Если ЗначениеЗаполнено(Результат.РодительскиеКатегории) Тогда
		РодительскиеКатегории = ОбщегоНазначения.ВыгрузитьКолонку(Результат.РодительскиеКатегории, "Идентификатор");
	КонецЕсли;
	ПараметрыВывода.Вставить("РодительскиеКатегории", РодительскиеКатегории);
	
	ТабличныйДокумент = СформироватьТабличныйДокументТорговогоПредложения(ПараметрыВывода);
	
	РезультатЗадания = Новый Структура;
	РезультатЗадания.Вставить("Реквизиты", ПараметрыВывода);
	РезультатЗадания.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	
	ПоместитьВоВременноеХранилище(РезультатЗадания, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеКатегории(ИдентификаторКатегории, ИдентификаторТорговогоПредложения, РодительскиеКатегории, ПараметрыВывода, Отказ)
	
	ПутьДоКатегорий = Неопределено;
	
	ПараметрыВывода.ИдентификаторКатегории = ИдентификаторКатегории;
	
	Если ЗначениеЗаполнено(РодительскиеКатегории) Тогда
		
		ПутьДоКатегорий = РодительскиеКатегории;
		
	Иначе
			
		ЕстьПодсистемаРаботаСНоменклатурой = 
			ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
		ЕстьПодключениеКИнтернетПоддержке = 
			ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Если Не ЕстьПодсистемаРаботаСНоменклатурой ИЛИ Не ЕстьПодключениеКИнтернетПоддержке Тогда
			Возврат;
		КонецЕсли;
			
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(ИдентификаторКатегории);
		
		Отказ = Ложь;
		
		МодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
		
		ПараметрыКоманды  = МодульРаботаСНоменклатуройСлужебный.ПараметрыЗапросаВсеРодительскиеКатегории(МассивИдентификаторов);
		КатегорииСервиса  = МодульРаботаСНоменклатуройСлужебный.ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка чтения категории торгового предложения.'");
			ПодробнаяИнформация = СтрШаблон(
				НСтр("ru = '%1%2Идентификатор %3.%2Идентификатор категории %4.'"), 
				ТекстСообщения, Символы.ПС, ИдентификаторТорговогоПредложения, ИдентификаторКатегории);
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Чтение торгового предложения.'"),
				ПодробнаяИнформация, ТекстСообщения, "ТорговыеПредложения");
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(КатегорииСервиса) = Тип("Массив")
			И ЗначениеЗаполнено(КатегорииСервиса) Тогда
			
			ПутьДоКатегорий = КатегорииСервиса[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеКатегории = ПредставлениеПутиККатегории(ПутьДоКатегорий);
	
	Если ЗначениеЗаполнено(ПредставлениеКатегории) Тогда
		ПараметрыВывода.ПредставлениеКатегории = ПредставлениеКатегории;
	Иначе
		ПараметрыВывода.ПредставлениеКатегории = НСтр("ru = 'Все категории'");
		ПараметрыВывода.ИдентификаторКатегории = "";
	КонецЕсли;
			
КонецПроцедуры

Функция ПредставлениеПутиККатегории(ПутьДоКатегорий)
	
	ПредставлениеКатегории = "";
	
	Если Не ЗначениеЗаполнено(ПутьДоКатегорий) Тогда
		Возврат ПредставлениеКатегории;
	КонецЕсли;
	
	КоличествоКатегорий = ПутьДоКатегорий.Количество();
	
	ПоследнийПутьДоКатегории = ПутьДоКатегорий[КоличествоКатегорий - 1].Наименование;
	ПредставлениеКатегории   = ПутьДоКатегорий[0].Наименование;
	ДлинаПутиКатегории       = СтрДлина(ПутьДоКатегорий[0].Наименование) + СтрДлина(ПоследнийПутьДоКатегории);
	МаксимальнаяДлина        = 100;
	
	Для Индекс = 1 По КоличествоКатегорий - 1 Цикл
		
		СледующийПутьККатегории = ПутьДоКатегорий[Индекс].Наименование;
		
		Если ДлинаПутиКатегории + СтрДлина(СледующийПутьККатегории) <= МаксимальнаяДлина Тогда
			ПредставлениеКатегории = СтрШаблон("%1 \ %2", ПредставлениеКатегории, СледующийПутьККатегории);
		Иначе
			ПредставлениеКатегории = СтрШаблон("%1 \...\ %2", ПредставлениеКатегории, ПоследнийПутьДоКатегории);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставлениеКатегории;
	
КонецФункции

// Выполняет регламентное задание по синхронизации торговых предложений с сервисом.
//
Процедура СинхронизацияТорговыхПредложенийОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	
	СинхронизацияТорговыхПредложений(Неопределено, Неопределено);
	
КонецПроцедуры

// Синхронизация торговых предложений с сервисом.
// Экспортная процедура, запускается по регламентному заданию.
//
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
//
Процедура СинхронизацияТорговыхПредложений(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыводитьПрогресс = ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("ВыводитьПрогресс")
		И ПараметрыПроцедуры.ВыводитьПрогресс = Истина;
	
	ЧастичнаяСинхронизация = Ложь;
	
	Если ВыводитьПрогресс Тогда
		ДлительныеОперации.СообщитьПрогресс(Неопределено, НСтр("ru = 'Подготовка данных'"));
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияСинхронизации.ТорговоеПредложение КАК Ссылка,
	|	СостоянияСинхронизации.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА СостоянияСинхронизации.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииТорговыеПредложения.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РежимУдаления,
	|	ВЫБОР
	|		КОГДА СостоянияСинхронизации.Отключено
	|				ИЛИ СостоянияСинхронизации.ТорговоеПредложение.ПометкаУдаления
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отключено,
	|	СостоянияСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	СостоянияСинхронизации.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ОрганизацииБизнесСеть.Организация ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОрганизацияЗарегистрирована,
	|	СостоянияСинхронизации.Состояние КАК Состояние,
	|	СостоянияСинхронизации.РегионыДоставки КАК РегионыДоставки,
	|	СостоянияСинхронизации.РегионыСамовывоза КАК РегионыСамовывоза,
	|	СостоянияСинхронизации.ПубликоватьРегионыДоступностиТоваров КАК ПубликоватьРегионыДоступностиТоваров
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО СостоянияСинхронизации.Организация = ОрганизацииБизнесСеть.Организация";
	
	ЗапросПрайсЛисты = Новый Запрос;
	ЗапросПрайсЛисты.Текст = ТекстЗапроса;
	
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	Если ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("ПозицииТорговогоПредложения") Тогда
		
		ПозицииТорговогоПредложения = Новый ТаблицаЗначений;
		ПозицииТорговогоПредложения.Колонки.Добавить("ПрайсЛист", Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип);
		ПозицииТорговогоПредложения.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
		ПозицииТорговогоПредложения.Колонки.Добавить(
			"Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
		ПозицииТорговогоПредложения.Колонки.Добавить(
			"Упаковка", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
		
		Для Каждого ПозицияТорговогоПредложения Из ПараметрыПроцедуры.ПозицииТорговогоПредложения Цикл
			ЗаполнитьЗначенияСвойств(ПозицииТорговогоПредложения.Добавить(), ПозицияТорговогоПредложения);
		КонецЦикла;
		
		ДополнитьТекстЗапросаТаблицаЗначений(Запрос, "ПозицииТорговогоПредложения", 
			ПозицииТорговогоПредложения, Истина);
		
		ОбщегоНазначенияБЭД.ОбъединитьЗапросы(Запрос, ТекстЗапросаПозицииТорговогоПредложения());
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ЗапросПрайсЛисты.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("СостоянияСинхронизации.ТорговоеПредложение В(&ТорговыеПредложения)");
		ЗапросПрайсЛисты.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		ИспользуемыеТорговыеПредложения = ПозицииТорговогоПредложения.ВыгрузитьКолонку("ПрайсЛист");
		СписокТорговыеПредложения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИспользуемыеТорговыеПредложения);
		
		ЗапросПрайсЛисты.УстановитьПараметр("ТорговыеПредложения", СписокТорговыеПредложения);
		
		ЧастичнаяСинхронизация = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПроцедуры) 
		И ПараметрыПроцедуры.Свойство("ПрайсЛист") 
		И ПараметрыПроцедуры.ПрайсЛист <> Неопределено Тогда
		
		ПрайсЛист = ПараметрыПроцедуры.ПрайсЛист;
		
		СписокТорговыеПредложения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрайсЛист);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ЗапросПрайсЛисты.Текст);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			"СостоянияСинхронизации.ТорговоеПредложение В(&ТорговыеПредложения)");
		ЗапросПрайсЛисты.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		ЗапросПрайсЛисты.УстановитьПараметр("ТорговыеПредложения", СписокТорговыеПредложения);
		
	КонецЕсли;
	
	ВыборкаПрайсЛисты = ЗапросПрайсЛисты.Выполнить().Выбрать();
	
	Отказ = Ложь;
	СчетчикТорговыхПредложений = 0;
	КоличествоТорговыхПредложений = ВыборкаПрайсЛисты.Количество();

	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	КоличествоОпубликовано         = 0;
	КоличествоОпубликованоЧастично = 0;
	КоличествоНеОпубликовано       = 0;
	
	Пока ВыборкаПрайсЛисты.Следующий() Цикл
		
		СчетчикТорговыхПредложений = СчетчикТорговыхПредложений + 1;
		
		КоличествоОпубликованных = 0;
		
		Если ВыборкаПрайсЛисты.Отключено
			И ВыборкаПрайсЛисты.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыводитьПрогресс Тогда
			ДополнительныеПараметры = Новый Структура("ТорговоеПредложениеСинхронизации", ВыборкаПрайсЛисты.Ссылка);
			ТекстСообщения = СтрШаблон(
				НСтр("ru = '%1 (%2 из %3)'"), 
				ВыборкаПрайсЛисты.Ссылка, 
				СчетчикТорговыхПредложений, 
				КоличествоТорговыхПредложений);
			ДлительныеОперации.СообщитьПрогресс(Неопределено, ТекстСообщения, ДополнительныеПараметры);
		КонецЕсли;
		
		Запрос.Параметры.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
		
		РезультирующиеТаблицы = РезультирующиеТаблицы();
		УдаляемыеТаблицы = Неопределено;
		ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Истина);
		РезультатПакетаЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		ТаблицаПрайсЛисты = РезультатПакетаЗапросов[РезультирующиеТаблицы.ПрайсЛистыСлужебный].Выгрузить();
		ПрайсЛист = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаПрайсЛисты[0]);
		
		КонтактныеДанные = РезультатПакетаЗапросов[РезультирующиеТаблицы.Контакты].Выгрузить();
		
		ПрайсЛист.Вставить(
			"Контрагенты", 
			РезультатПакетаЗапросов[РезультирующиеТаблицы.Контрагенты].Выгрузить().ВыгрузитьКолонку("Контрагент"));
		
		ПрайсЛист.Вставить("Товары",      РезультатПакетаЗапросов[РезультирующиеТаблицы.ТоварыСлужебный].Выгрузить());
		
		Если РезультирующиеТаблицы.СкидкиЗаОбъемПродаж <> Неопределено Тогда
			ПрайсЛист.Вставить(
				"СкидкиЗаОбъемПродаж", 
				РезультатПакетаЗапросов[РезультирующиеТаблицы.СкидкиЗаОбъемПродаж].Выгрузить());
		КонецЕсли;
		
		Если РезультирующиеТаблицы.СкидкиЗаОбъемПродажВидыЦен <> Неопределено Тогда
			ПрайсЛист.Вставить(
				"СкидкиЗаОбъемПродажВидыЦен", 
				РезультатПакетаЗапросов[РезультирующиеТаблицы.СкидкиЗаОбъемПродажВидыЦен].Выгрузить());
		КонецЕсли;
		
		Если РезультирующиеТаблицы.СкидкиПроцентСумма <> Неопределено Тогда
			ПрайсЛист.Вставить(
				"СкидкиПроцентСумма", 
				РезультатПакетаЗапросов[РезультирующиеТаблицы.СкидкиПроцентСумма].Выгрузить());
		КонецЕсли;
		
		Если РезультирующиеТаблицы.СкидкиПроцентСуммаВидыЦен <> Неопределено Тогда
			ПрайсЛист.Вставить(
				"СкидкиПроцентСуммаВидыЦен", 
				РезультатПакетаЗапросов[РезультирующиеТаблицы.СкидкиПроцентСуммаВидыЦен].Выгрузить());
		КонецЕсли;
		
		ПрайсЛист.Вставить("Свойства",    РезультатПакетаЗапросов[РезультирующиеТаблицы.СвойстваСлужебный].Выгрузить());
		ПрайсЛист.Вставить("Штрихкоды",   РезультатПакетаЗапросов[РезультирующиеТаблицы.Штрихкоды].Выгрузить());
		ПрайсЛист.Вставить("Изображения", РезультатПакетаЗапросов[РезультирующиеТаблицы.ИзображенияСлужебный].Выгрузить());
		ПрайсЛист.Вставить(
			"УстаревшиеПредложения", 
			РезультатПакетаЗапросов[РезультирующиеТаблицы.УстаревшиеПредложения].Выгрузить());
		ПрайсЛист.Вставить("Отключено",              ВыборкаПрайсЛисты.Отключено);
		ПрайсЛист.Вставить("ВыводитьПрогресс",       ВыводитьПрогресс);
		ПрайсЛист.Вставить("ЧастичнаяСинхронизация", ЧастичнаяСинхронизация);
		
		Отказ = Ложь;
		
		ТекстОшибки = "";
		Если Не ВыборкаПрайсЛисты.ОрганизацияЗарегистрирована Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Организация %1 не зарегистрирована в сервисе.'"),
				СокрЛП(ВыборкаПрайсЛисты.Организация));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		ЧастичнаяПубликация = Ложь;
		ХешПрайсЛиста       = "";
		
		ПараметрыСозданияПрайсЛиста = ДанныеПрайсЛиста(ПрайсЛист, КонтактныеДанные[0], ПрайсЛист.Контрагенты);
		
		ХешПрайсЛиста = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ПараметрыСозданияПрайсЛиста);
		
		Если Не Отказ Тогда
			Если ВыборкаПрайсЛисты.РежимУдаления Тогда
				Если ЗначениеЗаполнено(ПрайсЛист.Идентификатор) Тогда
					УдалитьПрайсЛист(ПрайсЛист, Отказ);
					Если Не Отказ Тогда
						ОчиститьУстаревшиеИдентификаторыТорговыхПредложений(Отказ);
						Если Не Отказ Тогда
							ОчиститьУстаревшуюНоменклатуруПоставщика(Отказ);
						КонецЕсли;
					Иначе
						ТекстОшибки = НСтр("ru = 'Ошибка удаления прайс-листа.'")
					КонецЕсли;
				Иначе
					ОтменитьПубликациюТорговыхПредложений(ПрайсЛист);
				КонецЕсли;
			Иначе
				// Выгрузка торговых предложений.
				ОбработатьВыгрузкуПрайсЛиста(
					ПрайсЛист, ТекстОшибки, ЧастичнаяПубликация, 
					КоличествоОпубликованных, ПараметрыСозданияПрайсЛиста, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
			
			Отбор = Новый Структура("ПрайсЛист", ВыборкаПрайсЛисты.Ссылка);
			
			ОбщийМодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
			ОбщийМодульРаботаСНоменклатуройСлужебный.ВыполнитьПолныйПересчетСтатистикиКатегорий(Отбор);
			
		КонецЕсли;
		
		// Сохранение нового состояния.
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = ВыборкаПрайсЛисты.Ссылка;
		МенеджерЗаписи.Организация         = ВыборкаПрайсЛисты.Организация;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление Тогда
			Если Не Отказ И МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Состояние         = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
				МенеджерЗаписи.ОписаниеОшибки    = ТекстОшибки;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		ИначеЕсли ВыборкаПрайсЛисты.Отключено И МенеджерЗаписи.Отключено
			И МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
			Продолжить;
		ИначеЕсли ЧастичнаяСинхронизация Тогда
				
				СписокНоменклатуры = ПубликуемаяНоменклатураТорговыхПредложений();
				МенеджерЗаписи.КоличествоОпубликованных = СписокНоменклатуры.Количество();
			
			Если Отказ Тогда
				Если МенеджерЗаписи.КоличествоОпубликованных > 0 Тогда
					МенеджерЗаписи.Состояние  = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
				Иначе
					МенеджерЗаписи.Состояние  = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				КонецЕсли;
				МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
				КоличествоНеОпубликовано      = КоличествоНеОпубликовано + 1;
			ИначеЕсли МенеджерЗаписи.КоличествоОпубликованных = ПрайсЛист.ВсегоКоличествоТоваров Тогда
				МенеджерЗаписи.Состояние      = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано;
				КоличествоОпубликовано        = КоличествоОпубликовано + 1;
			Иначе
				МенеджерЗаписи.Состояние       = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
				КоличествоОпубликованоЧастично = КоличествоОпубликованоЧастично + 1;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
		Иначе
			МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.ПустаяСсылка();
			МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
			Если Отказ Тогда
				МенеджерЗаписи.Состояние      = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
				МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
				МенеджерЗаписи.Хеш            = ХешПрайсЛиста;
				КоличествоНеОпубликовано      = КоличествоНеОпубликовано + 1;
			ИначеЕсли ЧастичнаяПубликация Тогда
				МенеджерЗаписи.Состояние      = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично;
				МенеджерЗаписи.ОписаниеОшибки = "";
				МенеджерЗаписи.Хеш            = ХешПрайсЛиста;
				КоличествоОпубликованоЧастично = КоличествоОпубликованоЧастично + 1;
			Иначе
				МенеджерЗаписи.Состояние      = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано;
				МенеджерЗаписи.ОписаниеОшибки = "";
				МенеджерЗаписи.Хеш            = ХешПрайсЛиста;
				КоличествоОпубликовано        = КоличествоОпубликовано + 1;
			КонецЕсли;
			МенеджерЗаписи.Идентификатор            = ПрайсЛист.Идентификатор;
			
			Если Не КоличествоОпубликованных = Неопределено Тогда
				МенеджерЗаписи.КоличествоОпубликованных = КоличествоОпубликованных;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Если ВыводитьПрогресс Тогда
			ДлительныеОперации.СообщитьПрогресс(Неопределено, НСтр("ru = 'Завершение синхронизации'"));
		КонецЕсли;
		ОбщийМодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
		ОбщийМодульРаботаСНоменклатуройСлужебный.ОбновитьИнформациюРеквизитовСервиса();
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОчиститьНоменклатуруБезОрганизаций();
	КонецЕсли;
	
	Если Не АдресРезультата = Неопределено Тогда
		
		СтатистикаПубликации = Новый Структура;
		СтатистикаПубликации.Вставить("КоличествоОпубликовано",         КоличествоОпубликовано);
		СтатистикаПубликации.Вставить("КоличествоОпубликованоЧастично", КоличествоОпубликованоЧастично);
		СтатистикаПубликации.Вставить("КоличествоНеОпубликовано",       КоличествоНеОпубликовано);
		
		ПоместитьВоВременноеХранилище(СтатистикаПубликации, АдресРезультата);
	
	КонецЕсли;
	
КонецПроцедуры

// Получение внешних прайс-листов в фоне.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПолученияПрайсЛистов.
//  АдресРезультата	 - Строка - адрес временного хранилища сохранения результата выполнения.
//
Процедура ПолучитьВнешниеПрайсЛисты(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	// Получение всех зарегистрированных организаций.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииБизнесСеть.Идентификатор КАК ИдентификаторОрганизации,
	|	СостоянияСинхронизацииТорговыеПредложения.Идентификатор КАК ИдентификаторПрайсЛиста,
	|	ОрганизацииБизнесСеть.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ПО ОрганизацииБизнесСеть.Организация = СостоянияСинхронизацииТорговыеПредложения.Организация
	|ГДЕ
	|	ОрганизацииБизнесСеть.Идентификатор <> """"";
	
	УстановитьПривилегированныйРежим(Истина);
	Идентификаторы = Запрос.Выполнить().Выгрузить();
		
	ИдентификаторыОрганизаций = Идентификаторы.Скопировать(, "ИдентификаторОрганизации, Организация");
	
	ИдентификаторыОрганизаций.Свернуть("ИдентификаторОрганизации, Организация");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Идентификатор");
	Таблица.Колонки.Добавить("ИдентификаторОрганизации");
	Таблица.Колонки.Добавить("Организация");
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("ДатаНачала");
	Таблица.Колонки.Добавить("ДатаОкончания");
	Таблица.Колонки.Добавить("КонтактноеЛицо");
	Таблица.Колонки.Добавить("Телефон");
	Таблица.Колонки.Добавить("ЭлектроннаяПочта");

	Для каждого ТекущаяОрганизация Из ИдентификаторыОрганизаций Цикл
		
		ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов(ТекущаяОрганизация.ИдентификаторОрганизации);
		ПараметрыЗапроса.РазмерСтраницы = 1000;
		
		ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
		
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из Результат.Список Цикл
			
			// Пропуск прайс-листов, опубликованных в информационной базе.
			
			Если Идентификаторы.Найти(
				ЭлементКоллекции.Идентификатор, "ИдентификаторПрайсЛиста") <> Неопределено Тогда
				
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Идентификатор    = ЭлементКоллекции.Идентификатор;
			НоваяСтрока.ИдентификаторОрганизации = ЭлементКоллекции.ИдентификаторОрганизации;
			НоваяСтрока.Организация      = ТекущаяОрганизация.Организация;
			НоваяСтрока.Наименование     = ЭлементКоллекции.Наименование;
			НоваяСтрока.ДатаНачала       = ЭлементКоллекции.ДатаНачала;
			НоваяСтрока.ДатаОкончания    = ЭлементКоллекции.ДатаОкончания;
			НоваяСтрока.КонтактноеЛицо   = ЭлементКоллекции.КонтактноеЛицо;
			НоваяСтрока.Телефон          = ЭлементКоллекции.Телефон;
			НоваяСтрока.ЭлектроннаяПочта = ЭлементКоллекции.ЭлектроннаяПочта;
		
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Таблица, АдресРезультата);
	
КонецПроцедуры

// Формирование табличного документа представления торгового предложения.
//
// Параметры:
//  ПараметрыВывода	 - Структура - параметры макета вывода торгового предложения,
//    см.Обработки.ТорговыеПредложения.ПФ_MXL_КарточкаТорговогоПредложения.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - представление торгового предложения.
//
Функция СформироватьТабличныйДокументТорговогоПредложения(ПараметрыВывода)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = Обработки.ТорговыеПредложения.ПолучитьМакет("ПФ_MXL_КарточкаТорговогоПредложения");
	
	// Область Шапка.
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(Шапка.Параметры, ПараметрыВывода);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, Шапка, "Шапка");
	
	// Штрихкоды
	
	ВывестиШтрихкоды(Макет, ТабличныйДокумент, ПараметрыВывода.Штрихкоды);
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	
	Если ЗначениеЗаполнено(ПараметрыВывода.ПредставлениеКатегории)
		И ЕстьПодсистемаРаботаСНоменклатурой Тогда
		
		// Область КатегорияСервиса.
		ОбластьКатегорияСервиса = Макет.ПолучитьОбласть("КатегорияСервиса");
		ЗаполнитьЗначенияСвойств(ОбластьКатегорияСервиса.Параметры, ПараметрыВывода);
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьКатегорияСервиса, "КатегорияСервиса");
	Иначе
		ОбластьПустаяОбласть = Макет.ПолучитьОбласть("ПустаяОбласть");
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			ОбластьПустаяОбласть, "ПустаяОбласть");
	КонецЕсли;
	
	// Если есть описания номенклатуры из сервиса 1С:Номенклатура - используется оно, 
	// в обратном случае выводится описание номенклатуры поставщика.
	Если ЗначениеЗаполнено(ПараметрыВывода.ОписаниеНоменклатурыСервиса)
		И ЕстьПодсистемаРаботаСНоменклатурой Тогда
		
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		Если МодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы() Тогда
			// Область НоменклатураСервиса.
			ОбластьНоменклатураСервиса = Макет.ПолучитьОбласть("НоменклатураСервиса");
			ЗаполнитьЗначенияСвойств(ОбластьНоменклатураСервиса.Параметры, ПараметрыВывода);
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
				ОбластьНоменклатураСервиса, "НоменклатураСервиса");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыВывода.Описание) Тогда	
		ОбластьОписаниеНоменклатуры = Макет.ПолучитьОбласть("ОписаниеНоменклатуры");
		ОбластьОписаниеНоменклатуры.Параметры.ОписаниеНоменклатуры = ПараметрыВывода.Описание;
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьОписаниеНоменклатуры, "ОписаниеНоменклатуры");
	КонецЕсли;
	
	ВысотаВставки = ТабличныйДокумент.ВысотаТаблицы;
	
	// Область условия продажи заголовок.
	ОбластьУсловияПродажи = Макет.ПолучитьОбласть("УсловияПродажи|Лево");
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьУсловияПродажи, "УсловияПродажи");
	
	// Область цена до скидки.
	Если ПараметрыВывода.МатрицаЦен <> Неопределено Тогда
			
			ЦенаДоСкидки = ПараметрыВывода.МатрицаЦен[0].ЦенаДоСкидки;
			Если ЦенаДоСкидки <> Неопределено Тогда
			
				ОбластьЦенаДоСкидки = Макет.ПолучитьОбласть("ЦенаДоСкидки|Лево");
				ОбластьЦенаДоСкидки.Параметры.ЦенаДоСкидки = СтрШаблон(
					"%1 %2", 
					ПредставлениеЦены(ЦенаДоСкидки), 
					ПараметрыВывода.ВалютаПубликации);
				
				ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(
					ТабличныйДокумент, ОбластьЦенаДоСкидки, "ЦенаДоСкидки");
				
			КонецЕсли;
			
	КонецЕсли;
	
	// Область Цена (левая колонка).
	ОбластьЦена = Макет.ПолучитьОбласть("Цена|Лево");
	ОбластьЦена.Параметры.ЦенаСтрокой = ПараметрыВывода.ЦенаПубликацииСтрокой;
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьЦена, "Цена");
	
	// Область зависимость цены от объема закупки.
	ВывестиМатрицуЦен(Макет, ТабличныйДокумент, ПараметрыВывода);
	
	// Область Условия.
	ОбластьУсловия = Макет.ПолучитьОбласть("Условия|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьУсловия.Параметры, ПараметрыВывода);
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьУсловия, "Условия");
	
	// Область Регионы доставки
	ВывестиАдресаДоставки(Макет, ТабличныйДокумент, 
		ПараметрыВывода.РегионыДоставки, НСтр("ru = 'Регионы доставки'"), "name");
	
	// Область Адреса самовывоза
	ВывестиАдресаДоставки(Макет, ТабличныйДокумент, 
		ПараметрыВывода.АдресаСамовывоза, НСтр("ru = 'Адреса самовывоза'"), "address");

	// Область Описание.
	Если ЗначениеЗаполнено(ПараметрыВывода.ДополнительноеОписание) Тогда
		ОбластьОписание = Макет.ПолучитьОбласть("Описание|Лево");
		ЗаполнитьЗначенияСвойств(ОбластьОписание.Параметры, ПараметрыВывода);
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьОписание, "Описание");
	КонецЕсли;
	
	// Область Поставщик (правая колонка).
	ОбластьПраво = Макет.ПолучитьОбласть("Контрагент|Лево");
	ЗаполнитьЗначенияСвойств(ОбластьПраво.Параметры, ПараметрыВывода);
	ОбластьВставки = ТабличныйДокумент.Область(ВысотаВставки + 1, ОбластьЦена.ШиринаТаблицы + 1,
		ВысотаВставки + ОбластьПраво.ВысотаТаблицы, ОбластьЦена.ШиринаТаблицы + ОбластьПраво.ШиринаТаблицы);
	ОбщегоНазначенияБЭД.ВставитьОбластьВТабличныйДокумент(
		ТабличныйДокумент, ОбластьПраво, "Контрагент",, ОбластьВставки);
		
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.КППКонтрагента) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьКППКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ТелефонКонтрагента) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьТелефонКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ЭлектроннаяПочтаКонтрагента) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьЭлектроннаяПочтаКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.СайтКонтрагента) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьСайтКонтрагента,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	ВывестиКонтактнуюИнформацию(ТабличныйДокумент, ОбластьПраво);
	
	// Область Картинка.
	ОбластьКартинка = Макет.ПолучитьОбласть("Картинка");
	ВывестиИзображения(ПараметрыВывода.АдресаКартинок,
		ОбластьКартинка, ТабличныйДокумент, ПараметрыВывода.ДанныеИзображений, ПараметрыВывода.ОтносительныеАдресаКартинок);
		
	// Область Свойства.
	Если ПараметрыВывода.Свойства <> Неопределено Тогда
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
			Макет.ПолучитьОбласть("СвойстваШапка"), "СвойстваШапка");
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		Для Каждого Свойство Из ПараметрыВывода.Свойства Цикл
			СвойстваСтрока = Макет.ПолучитьОбласть("СвойстваСтрока");
			ЗаполнитьЗначенияСвойств(СвойстваСтрока.Параметры, Свойство);
			ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(
				ТабличныйДокумент, СвойстваСтрока, "СвойстваСтрока",, 1);
		КонецЦикла;
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	КонецЕсли;
	
	ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(0);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиКонтактнуюИнформацию(ТабличныйДокумент, ОбластьПраво)
	
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ПредставлениеКонтакта) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьПредставлениеКонтакта,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.Телефон) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьТелефон,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ЭлектроннаяПочта) Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьЭлектроннаяПочта,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ЭлектроннаяПочта)
		И Не ЗначениеЗаполнено(ОбластьПраво.Параметры.Телефон)
		И Не ЗначениеЗаполнено(ОбластьПраво.Параметры.ПредставлениеКонтакта) Тогда
		
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Области.ОбластьКонтактнаяИнформация,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМатрицуЦен(Макет, ТабличныйДокумент, ПараметрыВывода)
	
	Если ПараметрыВывода.МатрицаЦен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВывода.МатрицаЦен.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЦеныДляОтображения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ПараметрыВывода.МатрицаЦен Цикл
		
		Если ЭлементКоллекции.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦеныДляОтображения.Добавить(ЭлементКоллекции);
		
	КонецЦикла;
	
	Если ЦеныДляОтображения.Количество() <= 1  Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьШапкаМатрицаЦен = Макет.ПолучитьОбласть("ШапкаМатрицыЦен|Лево");
	
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(
		ТабличныйДокумент, ОбластьШапкаМатрицаЦен, "ШапкаМатрицыЦен");
		
	Для каждого ТекущаяЦена Из ЦеныДляОтображения Цикл
		
		ОбластьСтрокаМатрицаЦен = Макет.ПолучитьОбласть("СтрокаМатрицыЦен|Лево");
		
		ПредставлениеКоличества = СтрШаблон(НСтр("ru = 'От %1 %2.'"), 
			ТекущаяЦена.Количество, ПараметрыВывода.КраткоеПредставлениеЕдиницыИзмерения);
		
		ПредставлениеЦены = СтрШаблон(НСтр("ru = '%1 %2'"), 
			ТекущаяЦена.Цена, ПараметрыВывода.ВалютаПубликации);
		
		ОбластьСтрокаМатрицаЦен.Параметры.Количество   = ПредставлениеКоличества;
		ОбластьСтрокаМатрицаЦен.Параметры.Цена         = ПредставлениеЦены;
		
		Если ЗначениеЗаполнено(ТекущаяЦена.ЦенаДоСкидки) Тогда
			
			ПредставлениеЦеныДоСкидки = СтрШаблон(НСтр("ru = '%1 %2'"), 
				ТекущаяЦена.ЦенаДоСкидки, ПараметрыВывода.ВалютаПубликации);
			
			ОбластьСтрокаМатрицаЦен.Параметры.ЦенаДоСкидки = ПредставлениеЦеныДоСкидки;
			
		КонецЕсли;
		
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(
			ТабличныйДокумент, ОбластьСтрокаМатрицаЦен, "СтрокаМатрицыЦен");
			
	КонецЦикла;	
	
	ОбластьПустаяОбласть = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент,
		ОбластьПустаяОбласть, "ПустаяСтрока");
	
КонецПроцедуры

Процедура ВывестиШтрихкоды(Макет, ТабличныйДокумент, Штрихкоды)
	
	Если Не ЗначениеЗаполнено(Штрихкоды) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьШтрихкоды = Макет.ПолучитьОбласть("Штрихкоды");
	
	ОбработанныеШтрихкоды = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Штрихкоды Цикл
		ОбработанныеШтрихкоды.Добавить(СокрЛП(ЭлементКоллекции));
	КонецЦикла;
	
	ШтрихкодыСтрокой = СтрСоединить(ОбработанныеШтрихкоды, "; ");
	
	ОбластьШтрихкоды.Параметры.Штрихкоды = ШтрихкодыСтрокой;
	
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьШтрихкоды, "Штрихкоды");	
	
КонецПроцедуры

Процедура ВывестиАдресаДоставки(Макет, ТабличныйДокумент, КоллекцияАдресов, ЗаголовокРаздела, ИмяПоляПредставления)
	
	Если Не ЗначениеЗаполнено(КоллекцияАдресов) Тогда
		Возврат;
	КонецЕсли;
	
	АдресаДляОтображения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из КоллекцияАдресов Цикл
		
		ЭтоСтрана = ЗначениеЗаполнено(ЭлементКоллекции.countryOksmCode)
			И Не ЗначениеЗаполнено(ЭлементКоллекции[ИмяПоляПредставления])
			И Не ЗначениеЗаполнено(ЭлементКоллекции.fiasCodes);
		
		Если ЭтоСтрана Тогда
			ЭлементКоллекции[ИмяПоляПредставления] = 
				УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ЭлементКоллекции.countryOksmCode);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции[ИмяПоляПредставления]) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресаДляОтображения.Добавить(ЭлементКоллекции);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(АдресаДляОтображения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьАдресаЗаголовок = Макет.ПолучитьОбласть("АдресаДоставкиЗаголовок|Лево");
	ОбластьАдресаЗаголовок.Параметры.ВидАдресов = ЗаголовокРаздела;
	ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьАдресаЗаголовок, "АдресаДоставкиЗаголовок");
	
	Для каждого ЭлементКоллекции Из АдресаДляОтображения Цикл
		
		ОбластьАдресаДанные = Макет.ПолучитьОбласть("АдресаДоставкиДанные|Лево");
		ОбластьАдресаДанные.Параметры.АдресДоставки = ЭлементКоллекции[ИмяПоляПредставления];
		ОбщегоНазначенияБЭД.ВывестиОбластьВТабличныйДокумент(ТабличныйДокумент, ОбластьАдресаДанные, "АдресаДоставкиДанные");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИзображения(Изображения, ОбластьКартинка, ТабличныйДокумент, ДанныеИзображений, ОтносительныеАдресаКартинок)
	
	Если Не ЗначениеЗаполнено(Изображения) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Изображение Из Изображения Цикл
		Адрес = АдресИзображенияВХранилище(Изображение, ОтносительныеАдресаКартинок);
		Если Не ПустаяСтрока(Адрес) Тогда
			ДанныеИзображений.Добавить(ПолучитьИзВременногоХранилища(Адрес));
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеИзображений.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьКартинка.Рисунки.ИзображениеПредложения.Картинка = Новый Картинка(ДанныеИзображений[0].Значение);
	
	Если Изображения.Количество() > 1 Тогда
		
		ОбластьКартинка.Области.ЗаголовокИзображения.Текст = 
			СтрШаблон("Изображение (%1/%2)", 1, Изображения.Количество());
		
	Иначе
		
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Картинка    = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.ПредыдущееИзображение.Гиперссылка = Ложь;
		ОбластьКартинка.Рисунки.СледующееИзображение.Картинка     = БиблиотекаКартинок.Пустая;
		ОбластьКартинка.Рисунки.СледующееИзображение.Гиперссылка  = Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьКартинка);
	
КонецПроцедуры

// Создание прайс-листа.
//
// Параметры:
//  ПрайсЛист - Структура - параметры прайс-листа.
//  ПараметрыСозданияПрайсЛиста - см. ДанныеПрайсЛиста
//  Отказ - Булево - результат выполнения метода.
//
Процедура СоздатьОбновитьПрайсЛист(ПрайсЛист, ПараметрыСозданияПрайсЛиста, Отказ)
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПрайсЛист.Организация);
	ВнутреннийИдентификатор = ПараметрыСозданияПрайсЛиста.ВнутреннийИдентификатор;
	
	Если Не ЗначениеЗаполнено(ПрайсЛист.Идентификатор) Тогда
		
		// Получение прайс-листа по внутреннему идентификатору.
		Результат = ИдентификаторПрайсЛистаПоВнутреннемуИдентификатору(
			ВнутреннийИдентификатор, 
			ИдентификаторОрганизации, 
			Отказ);
		
		Если Отказ Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
			ПрайсЛист.Идентификатор = Неопределено;
		Иначе
			ПрайсЛист.Идентификатор = Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновленияПрайсЛиста(
		ПараметрыСозданияПрайсЛиста, ПрайсЛист.Идентификатор, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ И Результат = 404 Тогда // Не найден прайс-лист с таким идентификатором 
		
		// Попробуем идентификатор прайс-листа получить по внутреннему идентификатору
		ПрайсЛист.Идентификатор = "";
		Отказ = Ложь;
		ИдентификаторПрайсЛиста = ИдентификаторПрайсЛистаПоВнутреннемуИдентификатору(
			ВнутреннийИдентификатор, ИдентификаторОрганизации, Отказ);
		ЗапросСервиса = ЗапросСервисаСозданиеОбновленияПрайсЛиста(
			ПараметрыСозданияПрайсЛиста, ИдентификаторПрайсЛиста, Отказ);
		// Если получили идентификатор, то обновим, иначе создадим новый прайс-лист
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если ЗначениеЗаполнено(ИдентификаторПрайсЛиста) Тогда
			Результат = ИдентификаторПрайсЛиста;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ И Не ЗначениеЗаполнено(ПрайсЛист.Идентификатор) Тогда
		
		ПрайсЛист.Идентификатор = Результат;
		
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТорговоеПредложение = ПрайсЛист.Ссылка;
		МенеджерЗаписи.Организация = ПрайсЛист.Организация;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Идентификатор = Результат;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаление прайс листа по идентификатору.
//
// Параметры:
//  ПрайсЛист	 - Структура - параметры прайс-листа:
//    * Идентификатор - Строка - идентификатор прайс-листа в сервисе.
//    * Ссылка        - ОпределяемыйТип.ТорговоеПредложение - публикуемый прайс-лист (торговое предложение).
//
Процедура УдалитьПрайсЛист(Знач ПрайсЛист, Отказ)
	
	// Получение прайс-листа по идентификатору.
	ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов( 
		ПрайсЛист.ИдентификаторОрганизации, 
		ПрайсЛист.Идентификатор);
	ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ И Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление прайс-листа в сервисе.
	ЗапросСервиса = ЗапросСервисаУдалениеПрайсЛиста(ПараметрыЗапроса);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.УдалитьПрайсЛист(ПрайсЛист.Ссылка, Отказ);
	
КонецПроцедуры

// Получить ссылку фида прайс-листа.
// 
// Параметры:
//  ПрайсЛист	 - ОпределяемыйТип.ТорговоеПредложение - Прайс-лист прикладного решения
//  Обновить	 - Булево - Признак необходимости обновления ссылки в сервисе
//
// Возвращаемое значение:
// 		Строка - Текст со ссылкой сервиса на фид прайс-листа 
//
Функция СсылкаФидаПрайсЛиста(ПрайсЛист, Обновить = Ложь) Экспорт

	РезультатМетода = "";
	
	Отказ = Ложь;
	
	Идентификаторы = ТорговыеПредложения.ИдентификаторыПрайсЛистаОрганизации(ПрайсЛист);
	
	// Получение прайс-листа по идентификатору.
	ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов(
			Идентификаторы.ИдентификаторОрганизации,
			Идентификаторы.ИдентификаторПрайсЛиста);	

	ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
	
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат РезультатМетода;
	КонецЕсли;

	Если Обновить Тогда
		
		// Обновление ссылки на фид прайс-листа в сервисе.
		ЗапросСервиса = ЗапросСервисаОбновлениеСсылкиФидаПрайсЛиста(ПараметрыЗапроса);
		
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
			Возврат РезультатМетода;	
		КонецЕсли;
		
	КонецЕсли;
	
	// Получение ссылки на фид прайс-листа в сервисе.
	ЗапросСервиса = ЗапросСервисаПолучениеСсылкиФидаПрайсЛиста(ПараметрыЗапроса);
		
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);

	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат РезультатМетода;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РезультатМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "feedYml", "");
	КонецЕсли;
	
	Возврат РезультатМетода;
			
КонецФункции

// Проверяет Запрос на наличие в тексте запроса таблицы с переданным
//   в параметре ИмяВременнойТаблицы именем.
//
// Параметры:
//  Запрос              - Запрос - проверяемый запрос
//  ИмяВременнойТаблицы - Строка - имя проверяемой временной таблицы
// 
// Возвращаемое значение:
//  Булево - признак наличия запроса помещения временной таблицы
//             в тексте запроса.
//               - Истина - таблица присутствует в тексте запроса
//               - Ложь   - таблица отсутствует в тексте запроса
//
Функция ВременнаяТаблицаПрисутствуетВЗапросе(Запрос, ИмяВременнойТаблицы)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для каждого ПакетЗапросов Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросВыбораСхемыЗапроса")
					И ВРег(ПакетЗапросов.ТаблицаДляПомещения) = ВРег(ИмяВременнойТаблицы) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет в текст запроса запрос на выборку с помещением переданной таблицы значений
//   во временную таблицу.
//
// Параметры:
//  Запрос              - Запрос - запрос в который требуется добавить выборку
//  ТаблицаЗначений     - ТаблицаЗначений - помещаемая во временную таблицу таблица
//                                          значений
//  ИмяВременнойТаблицы - Строка - имя временной таблицы для помещения таблицы значений
//
Процедура ДобавитьТаблицуВЗапрос(Запрос, ТаблицаЗначений, ИмяВременнойТаблицы)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИмяПараметра = СтрШаблон("ВТ_Параметр_%1", ИмяВременнойТаблицы);
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ПакетЗапросов.ТаблицаДляПомещения = ИмяВременнойТаблицы;
	
	ОператорЗапроса = ПакетЗапросов.Операторы[0];
	Источник = ОператорЗапроса.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), 
		СтрШаблон("&%1", ИмяПараметра), "ТаблицаЗначений");
	
	Источник.Соединения.Очистить();
	
	Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Источник.Источник.ДоступныеПоля.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		ОператорЗапроса.ВыбираемыеПоля.Добавить(СтрШаблон("ТаблицаЗначений.%1", Колонка.Имя));
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр(ИмяПараметра, ТаблицаЗначений);
	
КонецПроцедуры

// Дополнение запроса служебными таблицами и дополнительными полями.
//
// Параметры:
//  Запрос	 - Запрос - запрос, полученный в методе ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров()
// 
// В тексте запроса определяются временные таблицы возвращаемые в переопределяемом методе.
// Для временных таблиц добавляются служебные поля.
//
// Например, таблица ПрайсЛисты (ПрайсЛистыСлужебный)
//  * Идентификатор - Строка - идентификатор прайс-листа в сервисе.
//  * ПубликоватьЦены - Булево - признак публикации цен.
//  * ПубликоватьСрокиПоставки - Булево - признак публикации сроков поставки.
//  * ПубликоватьОстатки - Булево - признак публикации остатков (наличия товаров на складе).
//
Процедура ДополнитьЗапросСлужебнымиТаблицами(Запрос)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("РегистрСведений.ТорговыеПредложенияТорговойПлощадки");
	
	// Добавляем поле "ПричинаИсключенияИзПубликации" с сохранением обратной совместимости
	УстановитьПолеВременнойТаблицыЗапросаЕслиПолеОтсутствует(Запрос.Текст, "Товары", "ПричинаИсключенияИзПубликации",
		"&ПустаяПричинаИсключенияИзПубликации");
	
	ИмяТаблицыИзображения = "Изображения";
	
	// Проверка наличия таблицы "Изображения" в тексте запроса для обеспечения обратной совместимости
	Если Не ВременнаяТаблицаПрисутствуетВЗапросе(Запрос, ИмяТаблицыИзображения) Тогда
		
		МетаданныеИзмерений = Метаданные.РегистрыСведений.ИзображенияТорговойПлощадки.Измерения;
		
		ТаблицаИзображений = Новый ТаблицаЗначений;
		ТаблицаИзображений.Колонки.Добавить("Номенклатура"   , МетаданныеИзмерений.Номенклатура.Тип);
		ТаблицаИзображений.Колонки.Добавить("Характеристика" , МетаданныеИзмерений.Характеристика.Тип);
		ТаблицаИзображений.Колонки.Добавить("ФайлИзображения", МетаданныеИзмерений.ФайлИзображения.Тип);
		
		ДобавитьТаблицуВЗапрос(Запрос, ТаблицаИзображений, ИмяТаблицыИзображения);
		
	КонецЕсли;
	
	// Новый текст запроса
	ТекстЗапросаСлужебный =
	"ВЫБРАТЬ
	|	Товары.ПрайсЛист КАК ПрайсЛист,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура) КАК ВсегоКоличествоТоваров
	|ПОМЕСТИТЬ ВсегоТоваровПрайсЛиста
	|ИЗ
	|	Товары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрайсЛисты.Ссылка КАК Ссылка,
	|	ПрайсЛисты.Наименование КАК Наименование,
	|	ПрайсЛисты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ПрайсЛисты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ПрайсЛисты.Организация КАК Организация,
	|	ПрайсЛисты.Валюта КАК Валюта,
	|	ПрайсЛисты.МинимальнаяСуммаЗаказа КАК МинимальнаяСуммаЗаказа,
	|	ПрайсЛисты.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СостоянияСинхронизацииТорговыеПредложения.Идентификатор КАК Идентификатор,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьЦены КАК ПубликоватьЦены,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьСрокиПоставки КАК ПубликоватьСрокиПоставки,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки КАК ПубликоватьОстатки,
	|	СостоянияСинхронизацииТорговыеПредложения.ДополнительноеОписание КАК ДополнительноеОписание,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьРегионыДоступностиТоваров КАК
	|		ПубликоватьРегионыДоступностиТоваров,
	|	СостоянияСинхронизацииТорговыеПредложения.РегионыДоставки КАК РегионыДоставки,
	|	СостоянияСинхронизацииТорговыеПредложения.РегионыСамовывоза КАК РегионыСамовывоза,
	|	СостоянияСинхронизацииТорговыеПредложения.ВариантПубликацииОстатков КАК ВариантПубликацииОстатков,
	|	ВЫБОР
	|		КОГДА
	|			СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииТорговыеПредложения.Удаление)
	|		ИЛИ
	|			СостоянияСинхронизацииТорговыеПредложения.ДействиеСинхронизации = ЗНАЧЕНИЕ(Перечисление.ДействияСинхронизацииТорговыеПредложения.Отключение)
	|		ИЛИ СостоянияСинхронизацииТорговыеПредложения.Отключено
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отключено,
	|	ОрганизацииБизнесСеть.Идентификатор КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА ОрганизацииБизнесСеть.Организация ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОрганизацияЗарегистрирована,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьСкидкиЗаРазовыйОбъемПродаж КАК
	|		ПубликоватьСкидкиЗаРазовыйОбъемПродаж,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьЦенуДоСкидки КАК ПубликоватьЦенуДоСкидки,
	|	СостоянияСинхронизацииТорговыеПредложения.ВариантПубликацииСкидкиЗаОпт КАК ВариантПубликацииСкидкиЗаОпт,
	|	СостоянияСинхронизацииТорговыеПредложения.ВариантПубликацииСкидки КАК ВариантПубликацииСкидки,
	|	СостоянияСинхронизацииТорговыеПредложения.АдресЭлектроннойПочты,
	|	СостоянияСинхронизацииТорговыеПредложения.ПубликоватьКратностьУпаковок,
	|	ВсегоТоваровПрайсЛиста.ВсегоКоличествоТоваров
	|ПОМЕСТИТЬ ПрайсЛистыСлужебный
	|ИЗ
	|	ПрайсЛисты КАК ПрайсЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК
	|			СостоянияСинхронизацииТорговыеПредложения
	|		ПО ПрайсЛисты.Ссылка = СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО ПрайсЛисты.Организация = ОрганизацииБизнесСеть.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсегоТоваровПрайсЛиста КАК ВсегоТоваровПрайсЛиста
	|		ПО ПрайсЛисты.Ссылка = ВсегоТоваровПрайсЛиста.ПрайсЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ПрайсЛист КАК ПрайсЛист,
	|	ПрайсЛистыСлужебный.Организация КАК Организация,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Товары.Артикул КАК Артикул,
	|	Товары.ОписаниеНоменклатуры КАК ОписаниеНоменклатуры,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	Товары.ЧислительУпаковки КАК ЧислительУпаковки,
	|	Товары.ЗнаменательУпаковки КАК ЗнаменательУпаковки,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьКратностьУпаковок
	|			ТОГДА ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.КратностьУпаковки, 1)
	|		ИНАЧЕ Товары.КратностьУпаковки
	|	КОНЕЦ КАК КратностьУпаковки,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Товары.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.ПричинаИсключенияИзПубликации, """") КАК
	|		ТекущаяПричинаИсключенияИзПубликации,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений, """") КАК
	|		ТекущееСостояниеПубликацииТорговыхПредложений,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьЦены
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьСрокиПоставки
	|			ТОГДА Товары.СрокПоставки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СрокПоставки,
	|	ПрайсЛистыСлужебный.ВариантПубликацииОстатков КАК ВариантПубликацииОстатков,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьОстатки
	|		И ПрайсЛистыСлужебный.ВариантПубликацииОстатков В
	|		(ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.Наличие),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.КоличествоИНаличие),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.ПустаяСсылка))
	|			ТОГДА Товары.Наличие
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Наличие,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.ПубликоватьОстатки
	|		И ПрайсЛистыСлужебный.ВариантПубликацииОстатков В
	|		(ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.Количество),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.КоличествоИНаличие))
	|			ТОГДА Товары.Количество
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Количество,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.Родитель КАК Родитель,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектСопоставления,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторКатегории,
	|	НЕОПРЕДЕЛЕНО КАК КатегорияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеНоменклатурыСервиса,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторНоменклатурыСервиса,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеХарактеристикиСервиса,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторХарактеристикиСервиса,
	|	ЕСТЬNULL(НоменклатураТорговойПлощадки.Идентификатор, """") КАК ИдентификаторНоменклатуры,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.Идентификатор, """") КАК ИдентификаторПредложения,
	|	ЕСТЬNULL(НоменклатураТорговойПлощадки.Хеш, """") КАК ХешНоменклатуры,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.Хеш, """") КАК ХешПредложения,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.ХешНоменклатуры, """") КАК ХешНоменклатурыПредложения,
	|	ПрайсЛистыСлужебный.Идентификатор КАК ИдентификаторПрайсЛиста,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.Публикуется, ЛОЖЬ) КАК Публикуется,
	|	ВЫБОР
	|		КОГДА ПрайсЛистыСлужебный.Отключено
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ Товары.ПричинаИсключенияИзПубликации = &ПустаяПричинаИсключенияИзПубликации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтключитьПубликацию,
	|	ПрайсЛистыСлужебный.Отключено КАК Отключено,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(32)) КАК ХешИзображений,
	|	ЕСТЬNULL(ТорговыеПредложенияТорговойПлощадки.ХешИзображений, """") КАК ХешИзображенийПредложения,
	|	ПрайсЛистыСлужебный.ПубликоватьСкидкиЗаРазовыйОбъемПродаж,
	|	ПрайсЛистыСлужебный.ПубликоватьЦенуДоСкидки,
	|	ПрайсЛистыСлужебный.ПубликоватьЦены
	|ПОМЕСТИТЬ ТоварыСлужебный
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрайсЛистыСлужебный КАК ПрайсЛистыСлужебный
	|		ПО Товары.ПрайсЛист = ПрайсЛистыСлужебный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураТорговойПлощадки КАК НоменклатураТорговойПлощадки
	|		ПО Товары.Номенклатура = НоменклатураТорговойПлощадки.Номенклатура
	|		И Товары.Характеристика = НоменклатураТорговойПлощадки.Характеристика
	|		И ПрайсЛистыСлужебный.Организация = НоменклатураТорговойПлощадки.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО Товары.ПрайсЛист = ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	|		И Товары.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|		И Товары.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|		И Товары.Упаковка = ТорговыеПредложенияТорговойПлощадки.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Идентификатор КАК ИдентификаторПредложения,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется КАК Публикуется
	|ПОМЕСТИТЬ УстаревшиеПредложения
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрайсЛистыСлужебный КАК ПрайсЛистыСлужебный
	|		ПО ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = ПрайсЛистыСлужебный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО ТорговыеПредложенияТорговойПлощадки.Номенклатура = ТоварыСлужебный.Номенклатура
	|		И ТорговыеПредложенияТорговойПлощадки.Характеристика = ТоварыСлужебный.Характеристика
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Публикуется
	|	И ТоварыСлужебный.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПрайсЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Свойства.Номенклатура КАК Номенклатура,
	|	Свойства.Характеристика КАК Характеристика,
	|	Свойства.Свойство КАК Свойство,
	|	Свойства.Значение КАК Значение,
	|	ТоварыСлужебный.ОбъектСопоставления КАК ОбъектСопоставления,
	|	"""" КАК Наименование,
	|	"""" КАК ИдентификаторРеквизита,
	|	"""" КАК ИдентификаторЗначения,
	|	"""" КАК ТипРеквизитаКатегории,
	|	"""" КАК МинимальноеЗначение,
	|	"""" КАК МаксимальноеЗначение
	|ПОМЕСТИТЬ СвойстваСлужебный
	|ИЗ
	|	Свойства КАК Свойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО Свойства.Номенклатура = ТоварыСлужебный.Номенклатура
	|		И Свойства.Характеристика = ТоварыСлужебный.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Свойства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСлужебный.ПрайсЛист КАК ПрайсЛист,
	|	Изображения.Номенклатура КАК Номенклатура,
	|	Изображения.Характеристика КАК Характеристика,
	|	Изображения.ФайлИзображения КАК ФайлИзображения,
	|	ТоварыСлужебный.Организация КАК Организация
	|ПОМЕСТИТЬ ИзображенияВременная
	|ИЗ
	|	Изображения КАК Изображения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО Изображения.Номенклатура = ТоварыСлужебный.Номенклатура
	|		И Изображения.Характеристика = ТоварыСлужебный.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзображенияВременная.ПрайсЛист КАК ПрайсЛист,
	|	ИзображенияВременная.Номенклатура КАК Номенклатура,
	|	ИзображенияВременная.Характеристика КАК Характеристика,
	|	ИзображенияВременная.ФайлИзображения КАК ФайлИзображения,
	|	ЕСТЬNULL(ИзображенияТорговойПлощадки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ИзображенияТорговойПлощадки.Хеш, """") КАК Хеш,
	|	ЕСТЬNULL(ИзображенияТорговойПлощадки.ИдентификаторНоменклатуры, """") КАК ИдентификаторНоменклатуры
	|ПОМЕСТИТЬ ИзображенияСлужебный
	|ИЗ
	|	ИзображенияВременная КАК ИзображенияВременная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.НеВыгружатьИзображенияТорговыхПредложений КАК
	|			НеВыгружатьИзображенияТорговыхПредложений
	|		ПО НЕ НеВыгружатьИзображенияТорговыхПредложений.Значение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
	|		ПО ИзображенияВременная.Номенклатура = ИзображенияТорговойПлощадки.Номенклатура
	|		И ИзображенияВременная.Характеристика = ИзображенияТорговойПлощадки.Характеристика
	|		И ИзображенияВременная.ФайлИзображения = ИзображенияТорговойПлощадки.ФайлИзображения
	|		И ИзображенияВременная.Организация = ИзображенияТорговойПлощадки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Изображения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиПроцентСуммаВидыЦен.Номенклатура,
	|	СкидкиПроцентСуммаВидыЦен.Характеристика,
	|	СкидкиПроцентСуммаВидыЦен.Количество,
	|	СкидкиПроцентСуммаВидыЦен.Цена
	|ПОМЕСТИТЬ СкидкиПроцентСуммаВидыЦенВр
	|ИЗ
	|	СкидкиПроцентСуммаВидыЦен КАК СкидкиПроцентСуммаВидыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиЗаОбъемПродажВидыЦен.ВидыЦен,
	|	СкидкиЗаОбъемПродажВидыЦен.Номенклатура,
	|	СкидкиЗаОбъемПродажВидыЦен.Характеристика,
	|	СкидкиЗаОбъемПродажВидыЦен.Количество,
	|	СкидкиЗаОбъемПродажВидыЦен.Цена
	|ПОМЕСТИТЬ СкидкиЗаОбъемПродажВидыЦенВр
	|ИЗ
	|	СкидкиЗаОбъемПродажВидыЦен КАК СкидкиЗаОбъемПродажВидыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСлужебный.ПрайсЛист КАК ПрайсЛист,
	|	ТоварыСлужебный.Организация КАК Организация,
	|	ТоварыСлужебный.Номенклатура КАК Номенклатура,
	|	ТоварыСлужебный.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ТоварыСлужебный.Характеристика КАК Характеристика,
	|	ТоварыСлужебный.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТоварыСлужебный.Артикул КАК Артикул,
	|	ТоварыСлужебный.ОписаниеНоменклатуры КАК ОписаниеНоменклатуры,
	|	ТоварыСлужебный.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыСлужебный.Упаковка КАК Упаковка,
	|	ТоварыСлужебный.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ТоварыСлужебный.ЧислительУпаковки КАК ЧислительУпаковки,
	|	ТоварыСлужебный.ЗнаменательУпаковки КАК ЗнаменательУпаковки,
	|	ТоварыСлужебный.КратностьУпаковки КАК КратностьУпаковки,
	|	ТоварыСлужебный.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыСлужебный.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТоварыСлужебный.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации,
	|	ТоварыСлужебный.ТекущаяПричинаИсключенияИзПубликации КАК ТекущаяПричинаИсключенияИзПубликации,
	|	ТоварыСлужебный.ТекущееСостояниеПубликацииТорговыхПредложений КАК ТекущееСостояниеПубликацииТорговыхПредложений,
	|	ТоварыСлужебный.Цена КАК Цена,
	|	ТоварыСлужебный.СрокПоставки КАК СрокПоставки,
	|	ТоварыСлужебный.ВариантПубликацииОстатков КАК ВариантПубликацииОстатков,
	|	ТоварыСлужебный.Наличие КАК Наличие,
	|	ТоварыСлужебный.Количество КАК Количество,
	|	ТоварыСлужебный.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТоварыСлужебный.Родитель КАК Родитель,
	|	ТоварыСлужебный.ОбъектСопоставления КАК ОбъектСопоставления,
	|	ТоварыСлужебный.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	ТоварыСлужебный.КатегорияНаименование КАК КатегорияНаименование,
	|	ТоварыСлужебный.ПредставлениеНоменклатурыСервиса КАК ПредставлениеНоменклатурыСервиса,
	|	ТоварыСлужебный.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	ТоварыСлужебный.ПредставлениеХарактеристикиСервиса КАК ПредставлениеХарактеристикиСервиса,
	|	ТоварыСлужебный.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	ТоварыСлужебный.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ТоварыСлужебный.ИдентификаторПредложения КАК ИдентификаторПредложения,
	|	ТоварыСлужебный.ХешНоменклатуры КАК ХешНоменклатуры,
	|	ТоварыСлужебный.ХешПредложения КАК ХешПредложения,
	|	ТоварыСлужебный.ХешНоменклатурыПредложения КАК ХешНоменклатурыПредложения,
	|	ТоварыСлужебный.ИдентификаторПрайсЛиста КАК ИдентификаторПрайсЛиста,
	|	ТоварыСлужебный.Публикуется КАК Публикуется,
	|	ТоварыСлужебный.ОтключитьПубликацию КАК ОтключитьПубликацию,
	|	ТоварыСлужебный.Отключено КАК Отключено,
	|	ТоварыСлужебный.ХешИзображений КАК ХешИзображений,
	|	ТоварыСлужебный.ХешИзображенийПредложения КАК ХешИзображенийПредложения,
	|	ЕСТЬNULL(ИзображенияСлужебный.ФайлИзображения, НЕОПРЕДЕЛЕНО) КАК ФайлИзображения,
	|	ЕСТЬNULL(СкидкиПроцентСуммаВидыЦенВр.Количество, 0) КАК КоличествоСкидкаВидЦены,
	|	ЕСТЬNULL(СкидкиПроцентСуммаВидыЦенВр.Цена, 0) КАК ЦенаСкидкаВидЦены,
	|	ЕСТЬNULL(СкидкиЗаОбъемПродажВидыЦенВр.ВидыЦен, Неопределено) КАК ВидЦеныОбъемПродаж,
	|	ЕСТЬNULL(СкидкиЗаОбъемПродажВидыЦенВр.Количество, 0) КАК КоличествоСкидкаОбъемПродаж,
	|	ЕСТЬNULL(СкидкиЗаОбъемПродажВидыЦенВр.Цена, 0) КАК ЦенаСкидкаОбъемПродаж,
	|	ТоварыСлужебный.ПубликоватьСкидкиЗаРазовыйОбъемПродаж,
	|	ТоварыСлужебный.ПубликоватьЦенуДоСкидки,
	|	ТоварыСлужебный.ПубликоватьЦены
	|ПОМЕСТИТЬ ТоварыСлужебныйСИзображениями
	|ИЗ
	|	ТоварыСлужебный КАК ТоварыСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзображенияСлужебный КАК ИзображенияСлужебный
	|		ПО ТоварыСлужебный.ПрайсЛист = ИзображенияСлужебный.ПрайсЛист
	|		И ТоварыСлужебный.Номенклатура = ИзображенияСлужебный.Номенклатура
	|		И ТоварыСлужебный.Характеристика = ИзображенияСлужебный.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкидкиПроцентСуммаВидыЦенВр КАК СкидкиПроцентСуммаВидыЦенВр
	|		ПО ТоварыСлужебный.Номенклатура = СкидкиПроцентСуммаВидыЦенВр.Номенклатура
	|		И ТоварыСлужебный.Характеристика = СкидкиПроцентСуммаВидыЦенВр.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкидкиЗаОбъемПродажВидыЦенВр КАК СкидкиЗаОбъемПродажВидыЦенВр
	|		ПО ТоварыСлужебный.Номенклатура = СкидкиЗаОбъемПродажВидыЦенВр.Номенклатура
	|		И ТоварыСлужебный.Характеристика = СкидкиЗаОбъемПродажВидыЦенВр.Характеристика";
	
	ОбщегоНазначенияБЭД.ОбъединитьЗапросы(Запрос, ТекстЗапросаСлужебный);
	
	ЕстьПодсистемаРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если ЕстьПодсистемаРаботаСНоменклатурой Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ПараметрыЗапроса           = Новый Структура;
		ТекстСопоставления         = МодульРаботаСНоменклатурой.ТекстЗапросаСоответствияДляПубликацииТорговыхПредложений(ПараметрыЗапроса);
		ОбщегоНазначенияБЭД.ОбъединитьЗапросы(Запрос, ТекстСопоставления);
		Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получение идентификатора прайс-листа по внутреннему идентификатору.
//
// Параметры:
//  ВнутреннийИдентификатор	 - Строка - идентификатор прайс-листа в информационной базе.
//  Отказ					 - Булево - результат выполнения.
// 
// Возвращаемое значение:
//  Строка - идентификатор прайс-листа в сервисе.
//
Функция ИдентификаторПрайсЛистаПоВнутреннемуИдентификатору(Знач ВнутреннийИдентификатор, Знач ИдентификаторОрганизации, Отказ)
	
	ПараметрыЗапроса = НовыеПараметрыПолученияПрайсЛистов(ИдентификаторОрганизации);
	ПараметрыЗапроса.ВнутреннийИдентификатор = ВнутреннийИдентификатор;
	ЗапросСервиса = ЗапросСервисаПолучениеПрайсЛистов(ПараметрыЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ ИЛИ Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	ИначеЕсли Результат.Список.Количество() Тогда
		Возврат Результат.Список[0].Идентификатор;
	КонецЕсли;
	
КонецФункции

// Поиск торговых предложения по отбору.
//
// Параметры:
//  ПараметрыЗапроса - см. НовыеПараметрыПоискаТорговыхПредложенийСОтборами.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПоискТорговыхПредложенийПоОтборуВФоне(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Результат = ПоискТорговыхПредложенийПоОтбору(ПараметрыЗапроса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПредставлениеЕдиницИзмерения(Результат.Список, "КодЕдиницыИзмерения", "ЕдиницаИзмерения");
	
	УстановитьПредставлениеОстатков(Результат.Список);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура УстановитьПредставлениеОстатков(ДанныеСервиса)
	
	ДанныеСервиса.Колонки.Добавить("ПредставлениеОстатков", Новый ОписаниеТипов("Строка"));
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса Цикл

		ЭлементКоллекции.ПредставлениеОстатков = 
			ПредставлениеОстатков(
				ЭлементКоллекции.Наличие, ЭлементКоллекции.Количество, , , ЭлементКоллекции.СнятоСПродажи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОстатков(
	Наличие, Количество, ЕдиницаИзмерения = Неопределено, ПервыйСимволВВерхнемРегистре = Ложь, СнятоСПродажи = Ложь)
	
	Если СнятоСПродажи <> Неопределено И СнятоСПродажи Тогда
		Наличие = 0;
		Возврат НСтр("ru = 'Снято с продажи'");
	КонецЕсли;
	
	ПредставлениеОтносительногоОстатка = ПредставлениеОтносительногоОстатка(Наличие);
	
	Результат = ПредставлениеОстатковПоЗапросу();
	
	Если ЗначениеЗаполнено(ПредставлениеОтносительногоОстатка)
		И ПредставлениеОтносительногоОстатка <> ПредставлениеОстатковПоЗапросу()
		И ЗначениеЗаполнено(Количество) Тогда
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			
			Результат = СтрШаблон("%1 %2 (%3)", 
				Количество, 
				ЕдиницаИзмерения,
				ПредставлениеОтносительногоОстатка);
						
		Иначе
				
			Результат = СтрШаблон("%1 (%2)", 
				Количество, 
				ПредставлениеОтносительногоОстатка);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Количество) Тогда
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Результат = СтрШаблон("%1 %2", Количество, ЕдиницаИзмерения);
		Иначе
			Результат = Количество;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПредставлениеОтносительногоОстатка) Тогда	
		
		Если ПервыйСимволВВерхнемРегистре Тогда
			ПредставлениеОтносительногоОстатка = СтрШаблон("%1%2", 
				ВРег(Лев(ПредставлениеОтносительногоОстатка, 1)), 
				Сред(ПредставлениеОтносительногоОстатка, 2));
		КонецЕсли;
		
		Результат = ПредставлениеОтносительногоОстатка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеОстатковПоЗапросу()
	
	Результат = НСтр("ru = 'Нет на складе'");
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеОтносительногоОстатка(КодНаличия)
	
	Результат = ПредставлениеОстатковПоЗапросу();
	
	Если КодНаличия = 1 Тогда
		Результат = НСтр("ru = 'мало'");
	ИначеЕсли КодНаличия = 2 Тогда
		Результат = НСтр("ru = 'достаточно'");
	ИначеЕсли КодНаличия = 3 Тогда
		Результат = НСтр("ru = 'много'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Поиск торговых предложений по списку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыПоискаТорговыхПредложенийПоСписку.
//  АдресРезультата	 - Строка - адрес хранилища с результатом, см. ПоискТорговыхПредложенийПоСписку.
//
Процедура ПоискТорговыхПредложенийПоСпискуВФоне(ПараметрыЗапроса, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	Результат = ПоискТорговыхПредложенийПоСписку(ПараметрыЗапроса, Отказ);
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

КонецПроцедуры

Процедура ЗаполнитьАдресаРегионовДоступностиТоваров(Адреса, ДанныеАдресов)
	
	Если Не ЗначениеЗаполнено(ДанныеАдресов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияАдресов = ЗначениеИзСтрокиJSON(ДанныеАдресов);
	
	Для Каждого АдресНастройки Из ЗначенияАдресов Цикл
		
		СтруктураАдреса = Новый Структура();
		
		СтруктураАдреса.Вставить("countryOksmCode" , АдресНастройки.КодСтраны);
		
		Если ЗначениеЗаполнено(АдресНастройки.Идентификатор) Тогда
			СтруктураАдреса.Вставить("fiasCode", АдресНастройки.Идентификатор);
		КонецЕсли;
		
		Адреса.Добавить(СтруктураАдреса);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Параметры запроса получения прайс-листов.
Функция НовыеПараметрыПолученияПрайсЛистов(ИдентификаторОрганизации, ИдентификаторПрайсЛиста = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",            ИдентификаторПрайсЛиста);
	Результат.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Результат.Вставить("ВнутреннийИдентификатор",  "");
	Результат.Вставить("Страница",                 0);
	Результат.Вставить("РазмерСтраницы",           0);
	Результат.Вставить("Сортировка",               "");
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров страниц сервиса.
//
// Параметры:
//  РазмерСтраницы	 - Число - количество записей на одной странице для запроса.
//  Страница		 - Число - номер страницы для запроса.
// 
// Возвращаемое значение:
//  Структура - 
//    * Страница - Число - установленное значение.
//    * РазмерСтраницы - Число - установленное значение.
//    * КоличествоСтрок - Число - количество строк в ответе.
//    * КоличествоСтраниц - Число - количество страниц в ответе.
//
Функция НовыеПараметрыСтраницСервиса(РазмерСтраницы = 0, Страница = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Страница",          Страница); // Номер страницы для запроса.
	Результат.Вставить("РазмерСтраницы",    РазмерСтраницы); // Количество записей на одной странице для запроса.
	Результат.Вставить("КоличествоСтрок",   0); // Количество строк в сервисе.
	Результат.Вставить("КоличествоСтраниц", 0); // Количество страниц в сервисе.
	
	Возврат Результат;
	
КонецФункции

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - данные для запроса:
// * Наименование - Строка - Полное наименование метода.
// * Адрес - Строка - Адрес URI метода.
// * Метод - Строка - Метод HTTP соединения, например POST.
// * Таймаут - Число - Длительность ожидания ответа.
// * Данные - ДвоичныеДанные, Строка - данные запроса.
// * Аутентификация - Булево - признак необходимости аутентификация.
// * БлокироватьСообщенияОбОшибках - Булево - Не выводить сообщения об ошибках.
// * Результат - Строка - Свойство возврата результата, например "path[0].cat".
// * Обработка - ТаблицаЗначений - Описание обработки данных результата, см. ОбработатьОтветСервиса
// * ДополнительныеПараметры - Структура - дополнительные параметры запроса.
// * Ошибки - Соответствие из КлючИЗначение - Соответствие ошибок, например: (404, "Не найдено").
// 	* Ключ - Число
// 	* Значение - Строка
// * РазрешенныеСостояния - Массив из Строка - Коды ответов, получение которых не является ошибкой.
// * Обработка - Строка, ТаблицаЗначений - метод обработки ответа.
// * Контент - Строка - Описание контента (передается в заголовке).
// * РасширятьКонтент - Булево - Включать "application/json" в заголовок Accept GET-запросов.
// * Детализация - Строка - Дополнительная информация для описания деталей запроса.
// * ВозвращатьЗаголовки - Булево - Возвращать заголовки ответа.
// * ОтветДвоичныеДанные - Булево - Получать тело ответа, как двоичные данные.
// * ИдентификаторОрганизации - Строка
// * ВременныйТокен - Строка - используется для выполнения запросов по токенам, не сохраненных в ИБ
// * ПолныйАдрес - Строка - URI адрес стендом и портом
// * РезультатВСоответствие - Булево - результат выполнения запроса будет помещен в соответствие.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Наименование", "");
	ЗапросСервиса.Вставить("Адрес",        "");
	ЗапросСервиса.Вставить("Метод",        "");
	ЗапросСервиса.Вставить("Таймаут",      0);
	ЗапросСервиса.Вставить("Данные");
	ЗапросСервиса.Вставить("Аутентификация", Ложь);
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь);
	ЗапросСервиса.Вставить("Результат");
	ЗапросСервиса.Вставить("Обработка");
	ЗапросСервиса.Вставить("ДополнительныеПараметры");
	ЗапросСервиса.Вставить("Ошибки",       Новый Соответствие);
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив); // Массив из Число
	ЗапросСервиса.Вставить("Контент", "");
	ЗапросСервиса.Вставить("РасширятьКонтент", Истина);
	ЗапросСервиса.Вставить("Детализация",  "");
	ЗапросСервиса.Вставить("ВозвращатьЗаголовки", Ложь);
	ЗапросСервиса.Вставить("ОтветДвоичныеДанные", Ложь);
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", "");
	ЗапросСервиса.Вставить("ВременныйТокен", "");
	ЗапросСервиса.Вставить("ПолныйАдрес",    "");
	ЗапросСервиса.Вставить("РезультатВСоответствие", Ложь);
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Параметры запроса создания прайс-листа.
Функция НовыеПараметрыСозданияПрайсЛиста(Организация, ВнутреннийИдентификатор) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоДействия"          , Дата(1,1,1));             // dateActualFrom
	Результат.Вставить("ОкончаниеДействия"       , Дата(1,1,1));             // dateActualTo
	Результат.Вставить("Наименование"            , "");                      // name
	Результат.Вставить("Валюта"                  , Неопределено);            // currencyCode
	Результат.Вставить("ВнутреннийИдентификатор" , ВнутреннийИдентификатор); // externalCode
	Результат.Вставить("Контрагенты"             , Новый Массив);            // audience
	Результат.Вставить("АдресаРегионов"          , Новый Массив);            // deliveryRegions
	Результат.Вставить("АдресаСамовывоза"        , Новый Массив);            // pickupFrom
	Результат.Вставить("Организация"             , Организация);             // supplierPartyId
	Результат.Вставить("ПредставлениеКонтакта"   , "");                      // personName
	Результат.Вставить("Телефон"                 , "");                      // phone
	Результат.Вставить("ЭлектроннаяПочта"        , "");                      // email
	Результат.Вставить("МинимальнаяСуммаЗаказа"  , 0);                       // orderRestrictions.sum.minimum
	Результат.Вставить("ЦенаВключаетНДС"         , Ложь);                    // orderRestrictions.sum.includesVAT
	Результат.Вставить("Ссылка");                                            // Основание прайс-листа.
	Результат.Вставить("ДополнительноеОписание"	 , "");						 // description
	
	Возврат Результат;
	
КонецФункции

// Параметры запроса получения товаров.
Функция НовыеПараметрыПолученияТорговыхПредложений(ВнутреннийИдентификатор = "")
	
	Результат = Новый Структура;
	Результат.Вставить("ВнутреннийИдентификатор", КодироватьСтроку(ВнутреннийИдентификатор, СпособКодированияСтроки.КодировкаURL)); // code Внутренний идентификатор
	Результат.Вставить("ВнутреннийИдентификаторПрайсЛиста", ""); // priceListExternalCode
	Результат.Вставить("Идентификатор",  ""); // id
	Результат.Вставить("Страница",       0);  // page
	Результат.Вставить("РазмерСтраницы", 0);  // size
	Результат.Вставить("Сортировка",     ""); // sort
	Результат.Вставить("ИдентификаторОрганизации", "");
	
	Возврат Результат;
	
КонецФункции

// Параметры запроса поиска торговых предложений с отборами.
Функция НовыеПараметрыПоискаТорговыхПредложенийСОтборами(Организация = Неопределено) Экспорт
	
	// productSpecificationIds
	ТаблицаНоменклатурыСервиса = Новый ТаблицаЗначений;
	ТаблицаНоменклатурыСервиса.Колонки.Добавить("ИдентификаторНоменклатуры",
		Новый ОписаниеТипов("Строка")); // nomenclatureId
	ТаблицаНоменклатурыСервиса.Колонки.Добавить("ИдентификаторХарактеристики",
		Новый ОписаниеТипов("Строка")); // nomenclatureCharacteristicId
	
	// categoryRequisitesFilter
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Идентификатор", Типы().Строка); // requisiteId
	ТаблицаСвойств.Колонки.Добавить("Значение",      Типы().Строка); // value
	
	// Таблица контрагентов.
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Ссылка");
	ТаблицаКонтрагентов.Колонки.Добавить("Наименование", Типы().Строка);
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН", Типы().Строка);
	ТаблицаКонтрагентов.Колонки.Добавить("КПП", Типы().Строка);
	
	Результат = Новый Структура;
	
	// Страничный отбор.
	Результат.Вставить("Страница",       0);  // page
	Результат.Вставить("РазмерСтраницы", 0);  // size
	Результат.Вставить("Сортировка",     ""); // sort, например: СортировкаНаименованиеВозрастание,
	// СортировкаНаименованиеУбывание, СортировкаЦенаВозрастание, СортировкаЦенаУбывание
	
	// Отборы для поиска.
	Результат.Вставить("Наименование",            ""); 							// query
	Результат.Вставить("Производитель",           ""); 							// manufacturerOrBrand
	Результат.Вставить("Валюта",                  ""); 							// priceCurrencyCode (код валюты)
	Результат.Вставить("ЦенаОт",                  0); 							// priceFrom
	Результат.Вставить("ЦенаДо",                  0); 							// priceTo
	Результат.Вставить("СоСкидкой",               Ложь); 						// hasDiscount
	Результат.Вставить("ЕдиницаИзмерения",        Неопределено); 				// unitOkeiCode (ссылка)
	Результат.Вставить("Количество",              0); 							// demandedUnitsNumber
	Результат.Вставить("Артикулы",                Новый Массив); 				// partNumbers (строки)
	Результат.Вставить("Штрихкоды",               Новый Массив); 				// barCodes (строки)
	Результат.Вставить("Контрагенты",             ТаблицаКонтрагентов); 		// suppliers (ссылки контрагенты)
	Результат.Вставить("КодСтраны",               "");
	Результат.Вставить("РегионыПоиска",           Новый Массив); 				// deliveryRegionFiasCodes
	Результат.Вставить("ИдентификаторКатегории",  ""); 							// categoryId
	Результат.Вставить("Свойства",                ТаблицаСвойств); 				// categoryRequisitesFilter
	Результат.Вставить("НоменклатураСервиса",     ТаблицаНоменклатурыСервиса); 	// productSpecificationIds
	Результат.Вставить("ПорядокСортировки",       ""); 							// resultSorting
	Результат.Вставить("Организация",             Организация);
	Результат.Вставить("СИзображением",           Ложь);
	Результат.Вставить("ВНаличии",                Ложь);
	Результат.Вставить("ПолучитьДеревоКатегорий", Ложь);
	
	// Чтение корзины
	Результат.Вставить("ПолучитьДанныеКорзины", Ложь);
	Результат.Вставить("АдресКорзины", "");
	
	Возврат Результат;
	
КонецФункции

// Параметры открытия формы формирования заказов
//
Функция НовыеПараметрыФормированияЗаказов() Экспорт
	
	Результат = Новый Структура;
	
	// Общие параметры.
	Результат.Вставить("РежимЗапросаЦен", Типы().Булево);
	Результат.Вставить("Организация");
	Результат.Вставить("ЗапросКоммерческихПредложений");
	Результат.Вставить("Валюта");
	Результат.Вставить("ТаблицаТоваров", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Данные товаров торговых предложений и кратности количества их упаковок.
// 
// Возвращаемое значение:
//  Структура - данные кратности упаковок:
// * Номенклатура - ОпределяемыйТип.НоменклатураБЭД - товар торгового предложения.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика товара торгового предложения.
// * Упаковка - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка.
// * КратностьУпаковки - Число - значение кратности.
//
Функция НовыеДанныеКратностиУпаковок() Экспорт
	
	МетаданныеИзмерений = Метаданные.РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.Измерения;
	
	ДанныеКратностиУпаковок = Новый Структура;
	ДанныеКратностиУпаковок.Вставить("Номенклатура", МетаданныеИзмерений.Номенклатура.Тип.ПривестиЗначение());
	ДанныеКратностиУпаковок.Вставить("Характеристика", МетаданныеИзмерений.Характеристика.Тип.ПривестиЗначение());
	ДанныеКратностиУпаковок.Вставить("Упаковка", МетаданныеИзмерений.Упаковка.Тип.ПривестиЗначение());
	ДанныеКратностиУпаковок.Вставить("КратностьУпаковки", 0);
	
	//@skip-warning
	Возврат ДанныеКратностиУпаковок;
	
КонецФункции

Функция НоваяТаблицаОтборов()

	ТаблицаОтборов = Новый ТаблицаЗначений;
	
	ТаблицаОтборов.Колонки.Добавить("ИмяТаблицы"     , Новый ОписаниеТипов("Строка"));
	ТаблицаОтборов.Колонки.Добавить("ИмяПоля"        , Новый ОписаниеТипов("Строка"));
	ТаблицаОтборов.Колонки.Добавить("ЗначениеОтбора");
	
	Возврат ТаблицаОтборов;

КонецФункции

Функция НоваяНоменклатураПоставщика()
	
	// Свойства.
	Свойства = Новый ТаблицаЗначений;
	Свойства.Колонки.Добавить("Наименование",           Типы().Строка);
	Свойства.Колонки.Добавить("Значение",               Неопределено);
	Свойства.Колонки.Добавить("ИдентификаторРеквизита", Типы().Строка);
	Свойства.Колонки.Добавить("ИдентификаторЗначения",  Типы().Строка);
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",               Неопределено);
	Результат.Вставить("НаименованиеНоменклатуры",   "");           // productName
	Результат.Вставить("Характеристика",             Неопределено);
	Результат.Вставить("НаименованиеХарактеристики", "");           // productName
	Результат.Вставить("ЕдиницаИзмерения",           Неопределено);
	Результат.Вставить("КодЕдиницыИзмерения",        Неопределено); // baseUnitOkeiCode
	Результат.Вставить("Артикул",                    "");           // partNumber
	Результат.Вставить("ТорговаяМарка",              Неопределено); // manufacturer.tradeMark
	Результат.Вставить("Производитель",              Неопределено); // manufacturer.name
	Результат.Вставить("ИдентификаторКатегории",     "");           // categoryId
	Результат.Вставить("ИдентификаторПроизводителя", "");           // manufacturerId
	Результат.Вставить("ИдентификаторТорговойМарки", "");           // tradeMarkId
	Результат.Вставить("Штрихкоды",                  Новый Массив); // barCodes
	Результат.Вставить("Свойства",                   Свойства);     // ref1cNomenclature.requisiteValues
	Результат.Вставить("ОписаниеНоменклатуры",       "");           // productDescription
	
	Возврат Результат;
	
КонецФункции

Функция НовоеТорговоеПредложение()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",           "");
	Результат.Вставить("ИдентификаторПрайсЛиста", "");
	Результат.Вставить("НаименованиеУпаковки",    "");
	Результат.Вставить("ЧислительУпаковки",       1);
	Результат.Вставить("ЗнаменательУпаковки",     1);
	Результат.Вставить("КратностьУпаковки",       1);
	Результат.Вставить("СтавкаНДС",               Неопределено);
	Результат.Вставить("ЦенаВключаетНДС",         Неопределено);
	Результат.Вставить("Цена",                    0);
	Результат.Вставить("СрокПоставки",            0);
	Результат.Вставить("Наличие",                 Неопределено);
	Результат.Вставить("ДополнительноеОписание",  "");
	Результат.Вставить("Заголовок",               "");
	Результат.Вставить("ИдентификаторНоменклатуры",          "");
	Результат.Вставить("ИдентификаторНоменклатурыСервиса",   "");
	Результат.Вставить("ИдентификаторХарактеристикиСервиса", "");
	Результат.Вставить("ХешНоменклатуры",            "");
	Результат.Вставить("ВнутреннийИдентификатор",    "");
	Результат.Вставить("НаименованиеНоменклатуры",   "");
	Результат.Вставить("НаименованиеХарактеристики", "");
	Результат.Вставить("Количество",                 0);
	Результат.Вставить("СкидкиЗаОбъемПродаж",        НовыйМатрицаЦен());
	Результат.Вставить("СкидкиПроцентСумма",         НовыйМатрицаЦен());
	
	// Объектная модель хранения данных.
	Результат.Вставить("ПрайсЛист",      Неопределено);
	Результат.Вставить("Номенклатура",   Неопределено);
	Результат.Вставить("Характеристика", Неопределено);
	Результат.Вставить("Упаковка",       Неопределено);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСервиса

// Обработка ответа сервиса.
//
// Параметры:
//  Соединение		 - HTTPСоединение
//  ЗапросСервиса	 - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  HTTPОтвет		 - HTTPОтвет
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Ошибка			 - Структура
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(Соединение, ЗапросСервиса, HTTPОтвет, Данные, Ошибка, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = HTTPОтвет.КодСостояния;
	
	ЗапросСервиса.Ошибки.Вставить(503, НСтр("ru = 'Сервис временно недоступен. Попробуйте выполнить действие позднее.'"));

	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		Если КодСостояния >= 500 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Внутренняя ошибка сервиса'"));
		ИначеЕсли КодСостояния >= 400 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Ошибка параметров запроса'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Ошибка, Отказ);
	КонецЕсли;
	
	Если ЗапросСервиса.ОтветДвоичныеДанные Тогда
		Результат = Данные;
	Иначе
		
		Если ЗначениеЗаполнено(ЗапросСервиса.Результат) Тогда
			Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(
				ЗначениеИзСтрокиJSON(Данные, ЗапросСервиса.РезультатВСоответствие),
				ЗапросСервиса.Результат, 
				Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат КодСостояния;
		КонецЕсли;
		
		Если ЗапросСервиса.Обработка <> Неопределено Тогда
			
			Если ЗапросСервиса.РезультатВСоответствие Тогда
				ВызватьИсключение НСтр("ru = 'Установлены несовместимые параметры запроса'");
			КонецЕсли;
			
			Результат = ОбработатьОтветСервисаПродолжение(ЗапросСервиса.Обработка, КодСостояния, Данные, Отказ);
		Иначе
			Результат = ЗначениеИзСтрокиJSON(Данные, ЗапросСервиса.РезультатВСоответствие);
		КонецЕсли;
		
		// Для метода POST идентификатор созданного объекта возвращается в заголовке.
		Если ЗапросСервиса.Метод = "POST"
			И Не ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(HTTPОтвет.Заголовки["Location"]) Тогда
			СсылкаСервиса = HTTPОтвет.Заголовки["Location"];
			Результат = Сред(СсылкаСервиса, СтрНайти(СсылкаСервиса, "/", НаправлениеПоиска.СКонца) +1);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Если ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) <> Неопределено Тогда
				Если КодСостояния = 404 Тогда
					Результат = Неопределено;
				Иначе
					Результат = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  Обработка		 - ТаблицаЗначений, Строка - данные для обработки
//  ЗапросСервиса	 - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервисаПродолжение(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		КонвертироватьЗначениеСервиса(ЗначениеДанных, Неопределено, Обработка);
		Результат = ЗначениеДанных;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка ошибки сервиса.
//
// Параметры:
//  Соединение		 - HTTPСоединение
//  ЗапросСервиса	 - Структура - данные запроса, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния	 - Строка - код ответа HTTP-соединения.
//  Данные			 - Структура, Строка - возвращаемые данные сервиса.
//  Ошибка			 - Строка
//  Отказ			 - Булево - результат проверки.
// 
Функция ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Ошибка, Отказ)
	
	ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат КодСостояния;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Обработка ошибки сервиса.'");
	КонецЕсли;
	
	Отказ = Истина;
	
	Если Не ПустаяСтрока(ЗапросСервиса.Наименование) Тогда
		ТекстОшибки = СтрШаблон("%1 (%2).", ТекстОшибки, ЗапросСервиса.Наименование);
	КонецЕсли;
	
	ОшибкаСервиса = ТекстОшибкиИзДанныхСервиса(Данные, ТекстОшибки);
	
	АдресСоединенияURL = БизнесСеть.АдресСоединенияURL(Соединение.Сервер, Соединение.Порт, ЗапросСервиса.Адрес,
		Соединение.Защищенное);
	
	ПодробныйТекстОшибки = СтрШаблон(
		НСтр("ru = '%1%2%3 %4%2Код состояния: %5%6%7'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		ТекстОшибки, Символы.ПС, ЗапросСервиса.Метод, АдресСоединенияURL, КодСостояния, 
		?(ОшибкаСервиса = "", "", СтрШаблон("%1%2", Символы.ПС, ОшибкаСервиса)), 
		?(ПустаяСтрока(ЗапросСервиса.Детализация), "", 
			СтрШаблон("%1Детализация: %2", Символы.ПС, ЗапросСервиса.Детализация)));
	
	Если Не (ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках")
		И ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина) Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ПодробностиВЖурналеРегистрации = БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации();
			ТекстОшибки = СтрШаблон("%1%2", ТекстОшибки, ПодробностиВЖурналеРегистрации);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ТекстОшибки", ТекстОшибки);
	Ошибка.Вставить("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
	
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробныйТекстОшибки, 
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения);
	
	Возврат КодСостояния;
	
КонецФункции

Функция ТекстОшибкиИзДанныхСервиса(Данные, ТекстОшибки)
	
	ОшибкаСервиса = "";

	Если ТипЗнч(Данные) <> Тип("Структура") 
		И ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Возврат ОшибкаСервиса;
	КонецЕсли;

	ЗначениеСвойства = "";
	
	// Ошибка токена.
	Если ЕстьСвойство(Данные, "error", ЗначениеСвойства) И ЗначениеСвойства = "invalid_token" Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1%2Попробуйте выполнить операцию еще раз.'"), ТекстОшибки, Символы.ПС);
		// Сброс токена пользователя.
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Пользователи.ТекущийПользователь(), "ТорговыеПредложенияТикет");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ЕстьСвойство(Данные, "title", ЗначениеСвойства) Тогда
		ОшибкаСервиса = ЗначениеСвойства;
	КонецЕсли;
	
	Если ЕстьСвойство(Данные, "detail", ЗначениеСвойства) Тогда
		ОшибкаСервиса = СтрШаблон(
			НСтр("ru = '%1Описание ошибки: %2'"), 
			?(ПустаяСтрока(ОшибкаСервиса), "", СтрШаблон("%1%2", ОшибкаСервиса, Символы.ПС)), 
			ЗначениеСвойства);
	КонецЕсли;
	
	Если ЕстьСвойство(Данные, "requestTraceId", ЗначениеСвойства) Тогда
		ОшибкаСервиса = СтрШаблон(
			НСтр("ru = '%1Идентификатор запроса: %2'"), 
			?(ПустаяСтрока(ОшибкаСервиса), "", СтрШаблон("%1%2", ОшибкаСервиса, Символы.ПС)), 
			ЗначениеСвойства);
	КонецЕсли;
	
	Если ЕстьСвойство(Данные, "message", ЗначениеСвойства) Тогда
		ОшибкаСервиса = СтрШаблон(
			"%1%2", 
			?(ПустаяСтрока(ОшибкаСервиса), "", СтрШаблон("%1%2", ОшибкаСервиса, Символы.ПС)), 
			ЗначениеСвойства);
		
	ИначеЕсли ЕстьСвойство(Данные, "error_description", ЗначениеСвойства) Тогда
		ОшибкаСервиса = ЗначениеСвойства;
	ИначеЕсли ЕстьСвойство(Данные, "ПодробныйТекстОшибки", ЗначениеСвойства) Тогда
		ОшибкаСервиса = ЗначениеСвойства;
	ИначеЕсли ЕстьСвойство(Данные, "validationError", ЗначениеСвойства) И ТипЗнч(ЗначениеСвойства) = Тип("Массив") Тогда
		ОшибкиВложенные = "";
		Для каждого СтрокаОшибки Из ЗначениеСвойства Цикл
			
			ЗначениеПоля = "";
			ПредставлениеПоля = "";
			
			Если ЕстьСвойство(СтрокаОшибки, "field", ЗначениеПоля) Тогда
				ПредставлениеПоля = СтрШаблон(" (%1)", ЗначениеПоля);
			КонецЕсли;
			
			ЗначениеСообщения = "";
			
			ЕстьСвойство(СтрокаОшибки, "message", ЗначениеСообщения);
			
			ОшибкиВложенные = СтрШаблон(
				"%1%2 - %3%4", 
				ОшибкиВложенные, 
				?(ПустаяСтрока(ОшибкиВложенные), "", Символы.ПС), 
				ЗначениеСообщения, 
				ПредставлениеПоля);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОшибкиВложенные) Тогда
			ОшибкаСервиса = СтрШаблон(
				НСтр("ru = '%1Дополнительное описание: %2'"), 
				?(ПустаяСтрока(ОшибкаСервиса), "", СтрШаблон("%1%2", ОшибкаСервиса, Символы.ПС)), 
				ОшибкиВложенные);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОшибкаСервиса;
	
КонецФункции

Функция ЕстьСвойство(Коллекция, ИмяСвойства, ЗначениеСвойства = Неопределено)
	
	Результат = Ложь;
	
	Если ТипЗнч(Коллекция) = Тип("Структура") Тогда
		Результат = Коллекция.Свойство(ИмяСвойства);
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Соответствие") Тогда	
		Результат = Коллекция[ИмяСвойства] <> Неопределено;
	КонецЕсли;
	
	Если Результат Тогда
		ЗначениеСвойства = Коллекция[ИмяСвойства];
	Иначе
		ЗначениеСвойства = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирование строки параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//  Адрес	 - Строка - адрес ресурса.
//  Имя		 - Строка - имя параметра.
//  Значение - Строка - значение параметра.
//
Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Значение = СтрСоединить(Значение, ",");
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			Значение = "True";
		Иначе
			Значение = "False";
		КонецЕсли;
		
	КонецЕсли;
	
	Адрес = СтрШаблон("%1%2%3=%4", Адрес, ?(СтрНайти(Адрес, "?") = 0, "?", "&"), Имя, Значение);
	
КонецПроцедуры

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  ВнешнийАдрес - Строка - адрес URL картинки.
//  ОтносительныеАдресаКартинок - Булево - признак относительного адреса.
// 
// Возвращаемое значение:
//  Структура - см. ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище
//
Функция ДанныеФайлаПоВнешнейСсылке(Знач ВнешнийАдрес, ОтносительныеАдресаКартинок) Экспорт
	
	Если ОтносительныеАдресаКартинок Тогда
		
		БазовыеПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения("ТорговаяПлощадка");
		ЗащищенноеСоединение       = Не (БазовыеПараметрыСоединения.ЗащищенноеСоединение = Неопределено);
		
		// url файла в формате [Протокол://]<Сервер>/<Путь к файлу на сервере>.
		ШаблонВнешнегоАдреса = "%1://%2%3";
		Протокол = ?(ЗащищенноеСоединение, "https", "http");
		ВнешнийАдрес = СтрШаблон(ШаблонВнешнегоАдреса, Протокол, БазовыеПараметрыСоединения.Сервер, ВнешнийАдрес);
		
	КонецЕсли;
	
	Ответ = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ВнешнийАдрес, Неопределено, Истина);
	Возврат Ответ;
	
КонецФункции

Функция ВыполнитьHTTPМетодСервиса(Соединение, ЗапросСервиса, Запрос, Ошибка, Отказ)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ответ", Неопределено);
	Результат.Вставить("Данные", Неопределено);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, Запрос);
		Если ЗапросСервиса.ОтветДвоичныеДанные Тогда
			Данные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			Данные = Ответ.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(Данные) Тогда
				Данные = ЗначениеИзСтрокиJSON(Данные, ЗапросСервиса.РезультатВСоответствие);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить("Ответ",  Ответ);
		Результат.Вставить("Данные", Данные);
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		АдресРесурса = СтрШаблон("%1/%2", Соединение.Сервер, ЗапросСервиса.Адрес);
		ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2%3", 
			ТекстОшибки, 
			Символы.ПС, 
			АдресРесурса, 
			Символы.ПС, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках") 
			И ЗапросСервиса.БлокироватьСообщенияОбОшибках Тогда
			Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения;
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробныйТекстОшибки, Подсистема);
		Иначе
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ЗапросСервиса.Наименование,
				ПодробныйТекстОшибки, ТекстОшибки, "ТорговыеПредложения");
		КонецЕсли;
		
		Ошибка.Вставить("ТекстОшибки", ТекстОшибки);
		Ошибка.Вставить("ПодробныйТекстОшибки", ПодробныйТекстОшибки);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьТипКонтента(Запрос, ЗапросСервиса)
	
	Если Не ЗначениеЗаполнено(ЗапросСервиса.Контент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапросСервиса.Метод = "GET" Тогда
		
		Значение = ЗапросСервиса.Контент;
		Если ЗапросСервиса.РасширятьКонтент Тогда
			Значение = СтрШаблон("%1, application/json", ЗапросСервиса.Контент);
		КонецЕсли;
		
		Запрос.Заголовки.Вставить("Accept", Значение);
		
	ИначеЕсли ЗапросСервиса.Метод = "POST" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PUT" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PATCH" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "DELETE" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
		Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьКолонкиТаблицыОписания(ТаблицаИсточник, Имя, Префикс = "")
	
	Таблица = Новый ТаблицаЗначений;
	
	Если Имя = "PageParameters" Тогда
		
		Таблица.Колонки.Добавить("Страница",          Типы().Число, "number");
		Таблица.Колонки.Добавить("РазмерСтраницы",    Типы().Число, "size");
		Таблица.Колонки.Добавить("КоличествоСтрок",   Типы().Число, "totalElements");
		Таблица.Колонки.Добавить("КоличествоСтраниц", Типы().Число, "totalPages");
		
	ИначеЕсли Имя = "Placement/TradeOffersPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Placement/TradeOffersPageV1_ListItem");
		
	ИначеЕсли Имя = "Placement/PriceListPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Placement/PriceListV1");
		
	ИначеЕсли Имя = "Placement/PriceListV1" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("ДатаНачала",    Типы().Дата,   "dateActualFrom*ДесериализацияДаты");
		Таблица.Колонки.Добавить("ДатаОкончания", Типы().Дата,   "dateActualTo*ДесериализацияДаты");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("КодВалюты",     Типы().Строка, "currencyCode");
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("КонтактноеЛицо",   Типы().Строка, "contacts.personName");
		Таблица.Колонки.Добавить("Телефон",          Типы().Строка, "contacts.phone");
		Таблица.Колонки.Добавить("ЭлектроннаяПочта", Типы().Строка, "contacts.email");
		Таблица.Колонки.Добавить("Контрагенты",      Типы().Строка, "audience*audience");
		Таблица.Колонки.Добавить("ИдентификаторОрганизации", Типы().Строка, "supplierPartyId");
		
	ИначеЕсли Имя = "Placement/TradeOfferV1" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторПрайса", Типы().Строка, "priceListId");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product", "product");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_TermsOfSale", "termsOfSale");
		Таблица.Колонки.Добавить("Наличие", Типы().Число, "stock.stockBalanceSummary.level*ДесериализацияНаличие"); // LOW, ENOUGH, HIGH // Складские остатки.
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
	
	ИначеЕсли Имя = "Placement/TradeOffersPageV1_ListItem" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка,  "id");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product", "product");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_TermsOfSale", "termsOfSale");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product" Тогда
		
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product_1CNomenclature",       "ref1cNomenclature");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Placement/TradeOfferDescriptionV1_Product_SupplierNomenclature", "supplierNomenclature");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product_1CNomenclature" Тогда
		
		// Данные сервиса 1С:Номенклатура
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка,  "productSpecificationId");
		Таблица.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка,  "productCharacteristicId");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_Product_SupplierNomenclature" Тогда
		
		// Данные контрагента.
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыПоставщика", Типы().Строка,  "productSpecificationId");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_TermsOfSale" Тогда
		
		// Условия поставки.
		Таблица.Колонки.Добавить("НаименованиеУпаковки", Типы().Строка, "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",    Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",  Типы().Число,  "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("СтавкаНДС",         Типы().Ссылка,    "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("Цены",              Типы().Таблица,   "price.matrix|Placement/TradeOfferDescriptionV1_TermsOfSale_PriceMatrixRow");
		Таблица.Колонки.Добавить("КратностьУпаковки", Типы().Число,     "packageMultiplicity");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",   Типы().Булево,    "includesVAT");
		Таблица.Колонки.Добавить("СрокПоставки",      Типы().Число,     "maxDaysForShipment");
		Таблица.Колонки.Добавить("НеПубликуется",     Типы().Булево,    "temporarilyOutOfSales");
		
	ИначеЕсли Имя = "Placement/TradeOfferDescriptionV1_TermsOfSale_PriceMatrixRow" Тогда
		
		Таблица.Колонки.Добавить("Количество",   Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",         Типы().Число,  "price");
		Таблица.Колонки.Добавить("ЦенаДоСкидки", Типы().Число,  "priceBeforeDiscount");
		Таблица.Колонки.Добавить("Комментарий",  Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/TradeOfferV1" Тогда
			
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("ВнутреннийИдентификатор", Типы().Строка, "externalCode");
		Таблица.Колонки.Добавить("ДатаПубликации", Типы().Дата, "publicationDate");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Product_1CNomenclature", "product.ref1cNomenclature"); // Описание товара в ТП в по схеме 1СН.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Product_SupplierSpecificNomenclature", "product.supplierNomenclature"); // Номенклатура контрагента.
		Таблица.Колонки.Добавить("Заголовок", Типы().Строка, "offerDescription.title");
		Таблица.Колонки.Добавить("ДополнительноеОписание", Типы().Строка, "offerDescription.description");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_TermsOfSale", "termsOfSale"); // Условия поставки.
		Таблица.Колонки.Добавить("Наличие", Типы().Число, "stock.stockBalanceSummary.level*ДесериализацияНаличие"); // LOW, ENOUGH, HIGH // Складские остатки.
		Таблица.Колонки.Добавить("Количество", Типы().Число, "stock.stockBalanceSummary.amount");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_DeliveryDescription", "deliveryDescription"); // Условия доставки.
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceMatrixProjection", "requestedPriceProjection"); // Цены.
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1_Item_Summary" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode*ЕдиницаИзмеренияПоКоду");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены
		
	ИначеЕсли Имя = "Search/TradeOffersListPageV1" Тогда
		
		Таблица.Колонки.Добавить("Страницы", Типы().Структура, "page|PageParameters");
		Таблица.Колонки.Добавить("Список",   Типы().Таблица,   "_embedded.items|Search/TradeOffersListPageV1_Item");
	ИначеЕсли Имя = "Search/TradeOfferV1_Price" Тогда
		
		Таблица.Колонки.Добавить("ВалютаПредложения",, "CurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("ЦеныВВалютеПредложения", Типы().Таблица, "matrix|Search/PriceMatrixRow"); // PriceMatrixRow
		
	ИначеЕсли Имя = "Search/TradeOffersListPageV1_Item" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор",            Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры", Типы().Строка, "productName");
		Таблица.Колонки.Добавить("Заголовок",                Типы().Строка, "offerTitle");
		Таблица.Колонки.Добавить("ИдентификаторКатегории",   Типы().Строка, "ref1cNomenclatureCategoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",    Типы().Строка, "ref1cNomenclatureCategoryName");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения",      Типы().Строка, "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("АртикулПроизводителя",     Типы().Строка, "productPartNumber");
		Таблица.Колонки.Добавить("АртикулПоставщика",        Типы().Строка, "supplierPartNumber");
		Таблица.Колонки.Добавить("СрокПоставки",             Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("НаименованиеУпаковки",     Типы().Строка, "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",        Типы().Число,  "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",      Типы().Число,  "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("КратностьУпаковки",        Типы().Число,  "packageMultiplicity");
		Таблица.Колонки.Добавить("Наличие",                  Типы().Число,  "stock.stockBalanceSummary.level*ДесериализацияНаличие");
		Таблица.Колонки.Добавить("Количество",               Типы().Число,  "stock.stockBalanceSummary.amount");
		Таблица.Колонки.Добавить("СнятоСПродажи",            Типы().Булево, "temporarilyOutOfSales");
		Таблица.Колонки.Добавить("СтавкаНДС",                Типы().Ссылка, "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",          Типы().Булево, "price.includesVAT");
		Таблица.Колонки.Добавить("АдресаКартинок",           Типы().Массив,  "imageUrls");
		Таблица.Колонки.Добавить("РодительскиеКатегории",    Типы().Массив,  "categoryAncestorsIds");
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагент (поставщик).
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_RequestedPriceProjection", "priceProjection"); // Цены в валюте запроса
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Price", "price"); // Цены в валюте предложения
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Audience", "audience"); // Список организаций, для которых доступно данное предложение.
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Audience" Тогда
		
		Таблица.Колонки.Добавить("ЦелевыеКонтрагенты", Типы().Таблица, "|Search/TradeOfferAudienceOrganization"); // TradeOfferAudienceOrganization
		
	ИначеЕсли Имя = "Search/TradeOfferAudienceOrganization" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКонтрагента", Типы().Строка, "id");
		Таблица.Колонки.Добавить("НаименованиеКонтрагента",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("ИНН_КПП",                  Типы().Строка, "legalId"); // ИНН:КПП - для юридических лиц - ИНН - для индивидуальных предпринимателей
		
	ИначеЕсли Имя = "Search/TradeOfferV1_RequestedPriceProjection" Тогда
		
		Таблица.Колонки.Добавить("Валюта",                         ,   "requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("Цена",         Типы().Число, "price*ДесериализацияЦены");
		Таблица.Колонки.Добавить("ЦенаДоСкидки", Типы().Число, "priceBeforeDiscount*ДесериализацияЦены");
		Таблица.Колонки.Добавить("ЦеныВВалютеЗапроса", Типы().Таблица, "matrix|Search/PriceMatrixRow"); // PriceMatrixRowForPriceProjection
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Product_1CNomenclature" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКатегорииСервиса", Типы().Строка,  "categoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегорииСервиса",  Типы().Строка,  "categoryName");
		Таблица.Колонки.Добавить("ИдентификаторНоменклатурыСервиса",   Типы().Строка, "productSpecificationId");
		Таблица.Колонки.Добавить("ПредставлениеНоменклатурыСервиса",   Типы().Строка, "productName");
		Таблица.Колонки.Добавить("ОписаниеСервиса",                    Типы().Строка, "productDescription");
		Таблица.Колонки.Добавить("ИдентификаторХарактеристикиСервиса", Типы().Строка, "productCharacteristicId");
		Таблица.Колонки.Добавить("ПредставлениеХарактеристикиСервиса", Типы().Строка, "productCharacteristicName");
		Таблица.Колонки.Добавить("ШтрихкодыСервиса",           Типы().Массив,  "productBarCodes");
		Таблица.Колонки.Добавить("АртикулПроизводителя",       Типы().Строка,  "productPartNumber");
		Таблица.Колонки.Добавить("АдресаКартинокСервиса",      Типы().Массив,  "imageUrls");
		Таблица.Колонки.Добавить("КодЕдиницыИзмеренияСервиса", Типы().Строка,  "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("ИдентификаторПроизводителя", Типы().Строка,  "manufacturer.Id");
		Таблица.Колонки.Добавить("НаименованиеПроизводителя",  Типы().Строка,  "manufacturer.name");
		Таблица.Колонки.Добавить("ИдентификаторМаркиСервиса",  Типы().Строка,  "manufacturer.tradeMarkId");
		Таблица.Колонки.Добавить("НаименованиеМаркаСервиса",   Типы().Строка,  "manufacturer.tradeMark");
		Таблица.Колонки.Добавить("СвойстваСервиса",            Типы().Таблица, "requisites|Свойства-Товара");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Product_SupplierSpecificNomenclature" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторНоменклатуры", Типы().Строка, "productSpecificationId");
		Таблица.Колонки.Добавить("НаименованиеНоменклатуры",  Типы().Строка, "productName");
		Таблица.Колонки.Добавить("Описание",      Типы().Строка, "productDescription");
		Таблица.Колонки.Добавить("Марка",         Типы().Строка, "manufacturer.tradeMark");
		Таблица.Колонки.Добавить("Производитель", Типы().Строка, "manufacturer.name");
		Таблица.Колонки.Добавить("Артикул",       Типы().Массив, "productPartNumber");
		Таблица.Колонки.Добавить("Штрихкоды",     Типы().Массив, "productBarCodes");
		Таблица.Колонки.Добавить("КодЕдиницыИзмерения", Типы().Строка, "baseUnitOkeiCode");
		Таблица.Колонки.Добавить("ИдентификаторКатегории", Типы().Строка,  "ref1Cn.categoryId");
		Таблица.Колонки.Добавить("НаименованиеКатегории",  Типы().Строка,  "ref1Cn.categoryName");
		Таблица.Колонки.Добавить("РодительскиеКатегории",  Типы().Таблица,  "ref1Cn.parentCategories|РодительскиеКатегории");
		Таблица.Колонки.Добавить("АдресаКартинок",         Типы().Массив,  "imageUrls");
		Таблица.Колонки.Добавить("Свойства",      Типы().Массив, "ref1Cn.requisites|Свойства-Товара");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_Supplier" Тогда
		
		Таблица.Колонки.Добавить("ИдентификаторКонтрагента",    Типы().Строка, "bnetInternalId");
		Таблица.Колонки.Добавить("ИННКонтрагента",              Типы().Строка, "inn");
		Таблица.Колонки.Добавить("КППКонтрагента",              Типы().Строка, "kpp");
		Таблица.Колонки.Добавить("НаименованиеКонтрагента",     Типы().Строка, "name");
		Таблица.Колонки.Добавить("ПредставлениеКонтакта",   Типы().Строка, "contactPerson.name");
		Таблица.Колонки.Добавить("Телефон",          Типы().Строка, "contactPerson.phone");
		Таблица.Колонки.Добавить("ЭлектроннаяПочта", Типы().Строка, "contactPerson.email");

	ИначеЕсли Имя = "Search/TradeOfferV1_TermsOfSale" Тогда
		
		Таблица.Колонки.Добавить("УпаковкаНаименование",   Типы().Строка,  "packaging.description");
		Таблица.Колонки.Добавить("ЧислительУпаковки",      Типы().Число,   "packaging.unitsNumerator");
		Таблица.Колонки.Добавить("ЗнаменательУпаковки",    Типы().Число,   "packaging.unitsDenominator");
		Таблица.Колонки.Добавить("КоличествоЕдиниц",       Типы().Число,   "packaging.units");
		Таблица.Колонки.Добавить("СрокПоставки",           Типы().Число,   "maxDaysForShipment");
		Таблица.Колонки.Добавить("Валюта",                 Типы().Ссылка,  "price.currencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("СтавкаНДС",              Типы().Ссылка,  "price.vat*ДесериализацияСтавкиНДС");
		Таблица.Колонки.Добавить("ЦенаВключаетНДС",        Типы().Булево,  "price.includesVAT");
		Таблица.Колонки.Добавить("Цены",                   Типы().Таблица, "price.matrix|Search/PriceMatrixRow");
		Таблица.Колонки.Добавить("КратностьУпаковки",      Типы().Число,   "packageMultiplicity");
		Таблица.Колонки.Добавить("МинимальнаяСуммаЗаказа", Типы().Число, "orderRestrictions.sum.minimum*ДесериализацияЦены");
		Таблица.Колонки.Добавить("СнятоСПродажи",          Типы().Булево, "temporarilyOutOfSales");
		
	ИначеЕсли Имя = "Search/TradeOfferV1_DeliveryDescription" Тогда
		
		Таблица.Колонки.Добавить("РегионыДоставки",  Типы().Массив, "deliveryRegions*get-TradeOfferV1_DeliveryDescription"); // Список регионов доставки
		Таблица.Колонки.Добавить("АдресаСамовывоза", Типы().Массив, "pickupFrom*get-fias"); // Список адресов самовывоза
		
	ИначеЕсли Имя = "Search/TradeOfferV1_RequestedPriceMatrixProjection" Тогда
		
		Таблица.Колонки.Добавить("ВалютаПоиска",, "requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("ЦеныПоВалюте", Типы().Таблица, "matrix|Search/PriceMatrixRowCurrency"); // PriceMatrixRowCurrency
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1" Тогда
		
		Таблица.Колонки.Добавить("Контрагенты", Типы().Таблица, "groups|Search/TradeOfferGroupsListV1-groups");
		Таблица.Колонки.Добавить("Статистика",  Типы().Таблица, "tradeOffersStatisticsByGroup|Search/TradeOfferGroupsListV1_Statistics");
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1-groups" Тогда
		
		ДобавитьКолонкиТаблицыОписания(Таблица, "Search/TradeOfferV1_Supplier", "supplier"); // Контрагенты
		Таблица.Колонки.Добавить("НайденныеСтроки", Типы().Таблица, "supplierTradeOffersByNomenclatures|Search/supplierTradeOffersByNomenclatures");
		
	ИначеЕсли Имя = "Search/supplierTradeOffersByNomenclatures" Тогда
		
		Таблица.Колонки.Добавить("НомерСтроки", Типы().Число,   "searchRequestNomenclatureCorrelationIndex");
		Таблица.Колонки.Добавить("Товары",      Типы().Таблица, "tradeOffers|Search/TradeOfferGroupsListV1_Item_Summary");
		
	ИначеЕсли Имя = "Search/PriceMatrixRow" Тогда
		
		Таблица.Колонки.Добавить("Количество",   Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",         Типы().Число,  "price*ДесериализацияЦены");
		Таблица.Колонки.Добавить("ЦенаДоСкидки", Типы().Число,  "priceBeforeDiscount*ДесериализацияЦены");
		Таблица.Колонки.Добавить("Комментарий",  Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/PriceMatrixRowCurrency" Тогда
		
		Таблица.Колонки.Добавить("Количество",  Типы().Число,  "fromPackages");
		Таблица.Колонки.Добавить("Цена",        Типы().Число,  "price*ДесериализацияЦены");
		Таблица.Колонки.Добавить("Комментарий", Типы().Строка, "notes");
		
	ИначеЕсли Имя = "Search/TradeOfferGroupsListV1_Statistics" Тогда
		
		// Статистика поиска торговых предложений по списку.
		Таблица.Колонки.Добавить("НомерСтроки",             Типы().Число,  "searchRequestNomenclatureCorrelationIndex");
		Таблица.Колонки.Добавить("МинимальнаяЦена",         Типы().Число,  "minPriceProjection.price");
		Таблица.Колонки.Добавить("МинимальнаяЦенаВалюта",   Типы().Ссылка, "minPriceProjection.requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("МаксимальнаяЦена",        Типы().Число,  "maxPriceProjection.price");
		Таблица.Колонки.Добавить("МаксимальнаяЦенаВалюта",  Типы().Ссылка, "maxPriceProjection.requestedCurrencyCode*ДесериализацияВалюты");
		Таблица.Колонки.Добавить("МинимальныйСрокПоставки", Типы().Число,  "minDaysForShipment");
		Таблица.Колонки.Добавить("МаксимальныйСрокПоставки",Типы().Число,  "maxDaysForShipment");
		Таблица.Колонки.Добавить("КоличествоПредложений",   Типы().Число,  "totalTradeOffers");
		
	ИначеЕсли Имя = "Свойства-Товара" Тогда
		
		// Используется для спецификаций Search и Placement.
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "id");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "name");
		Таблица.Колонки.Добавить("Значение",      Типы().Строка, "value*ДесериализацияЗначенийСвойств");
		Таблица.Колонки.Добавить("Представление", Типы().Строка, "valueName");
		Таблица.Колонки.Добавить("Тип",           Типы().Строка, "valueType");
		
	ИначеЕсли Имя = "РодительскиеКатегории" Тогда
		
		Таблица.Колонки.Добавить("Идентификатор", Типы().Строка, "categoryId");
		Таблица.Колонки.Добавить("Наименование",  Типы().Строка, "categoryName");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдено описание данных сервиса %1'"), Имя);
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Префикс <> "" Тогда
		Префикс = СтрШаблон("%1.", Префикс);
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица.Колонки Цикл
		ТаблицаИсточник.Колонки.Добавить(
			ЭлементКоллекции.Имя, 
			ЭлементКоллекции.ТипЗначения, 
			СтрШаблон("%1%2", Префикс, ЭлементКоллекции.Заголовок));
	КонецЦикла;
	
КонецПроцедуры

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Значение		- Произвольный - данные, полученные из сервиса.
//  Свойство		- Строка - имя свойства, если значением является ТаблицаЗначений.
//  Правило			- Строка - имя обработчика значения.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Процедура КонвертироватьЗначениеСервиса(Значение, Свойство, Правило)
	
	Если Правило = "ДесериализацияСтавкиНДС" Тогда
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
					Если ЭлементКоллекции[Свойство] = "VAT_WITHOUT" Тогда
						СтавкаСтрокой = "БезНДС";
					Иначе
						СтавкаСтрокой = СтрЗаменить(ЭлементКоллекции[Свойство], "VAT_", "НДС");
					КонецЕсли;
					СтавкаНДС = ТорговыеПредложенияПовтИсп.ПолучитьСтавкуНДС(СтавкаСтрокой);
				Иначе
					СтавкаНДС = ТорговыеПредложенияПовтИсп.ПолучитьСтавкуНДС(Неопределено);
				КонецЕсли;
				ЭлементКоллекции[Свойство] = СтавкаНДС;
			КонецЦикла;
		КонецЕсли
		
	ИначеЕсли Правило = "ДесериализацияДаты" Тогда
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			Для каждого ЭлементКоллекции Из Значение Цикл
				Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
					ЭлементКоллекции[Свойство] = ДатаИзСтроки(ЭлементКоллекции[Свойство]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Значение = ДатаИзСтроки(Значение);
		КонецЕсли;
		
	ИначеЕсли Правило = "ДесериализацияВалюты" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				ЭлементКоллекции[Свойство] = ТорговыеПредложенияПовтИсп.ПолучитьВалюту(ЭлементКоллекции[Свойство], Истина);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияЦены" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				ЭлементКоллекции[Свойство] = Окр(ЭлементКоллекции[Свойство]/100, 4);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияНаличие" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеСвойства = ЭлементКоллекции[Свойство];
			Если ЗначениеСвойства = "LOW" Тогда
				НовоеЗначение = 1;
			ИначеЕсли ЗначениеСвойства = "MEDIUM" Тогда
				НовоеЗначение = 2;
			ИначеЕсли ЗначениеСвойства = "HIGH" Тогда
				НовоеЗначение = 3;
			Иначе
				Продолжить;
			КонецЕсли;
			ЭлементКоллекции[Свойство] = НовоеЗначение;
			
		КонецЦикла;
		
	ИначеЕсли Правило = "ДесериализацияЗначенийСвойств" Тогда
		
		Для каждого ЭлементКоллекции Из Значение Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции[Свойство]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементКоллекции.valueType = "number" Тогда
				ЭлементКоллекции[Свойство] = Типы().Число.ПривестиЗначение(ЭлементКоллекции[Свойство]);
			ИначеЕсли ЭлементКоллекции.valueType= "boolean" Тогда
				ЭлементКоллекции[Свойство] = Типы().Булево.ПривестиЗначение(ЭлементКоллекции[Свойство]);
			ИначеЕсли ЭлементКоллекции.valueType = "date" Тогда
				ЭлементКоллекции[Свойство] = ДатаИзСтроки(ЭлементКоллекции[Свойство]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Правило = "get-TradeOfferV1_DeliveryDescription" Или  Правило = "get-fias" Тогда
		
		// Преобразование не выполняется.
		
	ИначеЕсли ТипЗнч(Правило) = Тип("Строка") Тогда
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			ВложенныеСвойства = СтрРазделить(Правило, ".");
			Для каждого ЭлементКоллекции Из Значение Цикл
				ЭлементКоллекции[Свойство] = ЗначениеСвойстваСтруктурыВРекурсии(ЭлементКоллекции[Свойство], ВложенныеСвойства);
			КонецЦикла;
		Иначе
			Значение = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СтрРазделить(Правило, "."));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации значения'");
		
	КонецЕсли;
	
КонецПроцедуры

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение, РезультатВСоответствие = Ложь)
	
	Если ТипЗнч(Значение) <> Тип("Строка")
		Или ПустаяСтрока(Значение)
		Или Лев(Значение, 1) = "<" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON, РезультатВСоответствие);
		ЧтениеJSON.Закрыть();
	Исключение
		ТекстОшибки = НСтр("ru = 'Преобразование данных JSON в формат данных 1С.'");
		ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2%3", 
			ТекстОшибки, 
			Символы.ПС, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробныйТекстОшибки, Подсистема);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение     - Произвольный - значения обработки.
//  СвойстваПути - Массив из Строка - элементы пути, например "pathToRoot[0]", "categories".
//  Отказ        - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование массива структур в таблицу значений, структуры в структуру.
//
// Параметры:
//  Коллекция				 - Массив из Структура - коллекция преобразования.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция ПреобразоватьКоллекциюПоТаблицеЗначений(Знач Источник, Знач ОписаниеТаблицыЗначений, ТипРезультата = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") И НЕ ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеТаблицыЗначений.Скопировать().Добавить());
	КонецЕсли;
	
	Если ТипРезультата = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			ТипРезультата = Тип("ТаблицаЗначений");
		Иначе
			ТипРезультата = ТипЗнч(Источник);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Соответствие; // Реквизиты, получаемые через точку.
	ПравилаКонвертации  = Новый Соответствие; // Список конвертаций значений "*".
	ВложенныеКоллекции  = Новый Соответствие; // Список вложенных коллекций "|".
	
	// Создание колонок без типов.
	ВременнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "*");
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		РазделительОписание = СтрНайти(ИмяСвойстваИсточника, "|");
		Если РазделительОписание <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительОписание - 1));
			ИмяОписания = Сред(КолонкаТаблицыОписания.Заголовок, РазделительОписание + 1);
		КонецЕсли;
		
		НовоеИмяСвойстваИсточника = ИмяСвойстваИсточника;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			НовоеИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыЧерезТочку.Вставить(ИмяСвойстваИсточника, НовоеИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила конвертации.
		Если РазделительПравила <> 0 Тогда
			ПравилаКонвертации.Вставить(НовоеИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		// Добавления описание вложенной коллекции.
		Если РазделительОписание <> 0 Тогда
			ВложенныеКоллекции.Вставить(НовоеИмяСвойстваИсточника, ИмяОписания);
		КонецЕсли;
		
		ВременнаяТаблица.Колонки.Добавить(НовоеИмяСвойстваИсточника, , КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		
		// Источником данных является массив структур.
		
		Для каждого СтрокаИсточника Из Источник Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			КонецЕсли;
			
			// Заполнение реквизитов в структуре.
			Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
				СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
				НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника, СоставСтруктурыРеквизита);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		// Источником данных является структура.
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		
		// Заполнение реквизитов в структуре.
		Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
			СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
			НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(Источник, СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка по правилам преобразования "*".
	Для каждого ЭлементПреобразования Из ПравилаКонвертации Цикл
		КонвертироватьЗначениеСервиса(ВременнаяТаблица, ЭлементПреобразования.Ключ, ЭлементПреобразования.Значение);
	КонецЦикла;
	
	// Обработка по описаниям вложенных коллекций "|".
	Для каждого ЭлементОписания Из ВложенныеКоллекции Цикл
		
		ТаблицаОписанияДанных = Неопределено;
		ДобавитьКолонкиТаблицыОписания(ТаблицаОписанияДанных, ЭлементОписания.Значение);
		Для каждого ЭлементКоллекции Из ВременнаяТаблица Цикл
			ОбработанныеЗначения = ПреобразоватьКоллекциюПоТаблицеЗначений(
				ЭлементКоллекции[ЭлементОписания.Ключ], ТаблицаОписанияДанных);
			ЭлементКоллекции[ЭлементОписания.Ключ] = ОбработанныеЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ВременнаяТаблица.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Финальная подготовка результата преобразования.
	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		
		// Заполнение таблицы результата.
		Результат = ОписаниеТаблицыЗначений.Скопировать();
		Для каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипРезультата = Тип("Структура") И ВременнаяТаблица.Количество() = 1 Тогда
		
		// Заполнение структуры
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВременнаяТаблица[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзСтроки(СтрокаДанных)
	
	Результат = Дата(1,1,1);
	
	Если Не ЗначениеЗаполнено(СтрокаДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СтрокаДанных, "-") > 1 Тогда // ожидается формат "YYYY-MM-DDThh:mm:ss" или "YYYY-MM-DD"
		Результат = ПрочитатьДатуJSON(СтрокаДанных, ФорматДатыJSON.ISO);
	Иначе
		
		ЧислоИзСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		
		Если ЧислоИзСтроки <> Неопределено Тогда
			Результат = МестноеВремя(Дата(1970, 1, 1, 0 ,0, 0) + ЧислоИзСтроки / 1000);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Добавление значение в структуру с учетом обязательности заполнения.
//
// Параметры:
//  Результат			 - Структура - переменная для добавления значения.
//  Поле				 - Строка	 - имя добавляемого поля.
//  Значение			 - Произвольный	 - добавляемое значение
//  ОбязательныйРеквизит - Булево		 - признак обязательности значения.
//
Процедура ДобавитьЗначение(Результат, Знач Поле, Знач Значение, ОбязательныйРеквизит = Ложь)
	
	Если Не ОбязательныйРеквизит И Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Поле, ".");
	Если ПозицияРазделителя > 0 Тогда
		МассивПолей = СтрРазделить(Поле, ".");
		ИмяСвойства = МассивПолей[0];
		Результат.Вставить(ИмяСвойства);
		ДобавитьЗначение(Результат[ИмяСвойства], Сред(Поле, ПозицияРазделителя + 1), Значение, ОбязательныйРеквизит);
		Возврат;
	КонецЕсли;
	
	Результат.Вставить(Поле, Значение);
	
КонецПроцедуры

// Преобразование запрос по временным таблицам.
//
// Параметры:
//  Запрос						 - Запрос - запрос для преобразования.
//  РезультирующиеТаблицы		 - Структура - ключи определяют возвращаемые временные таблицы.
//  УдаляемыеТаблицы			 - Структура - ключи определяют удаляемые временные таблицы.
//  ИспользоватьВременныеТаблицы - Булево - если Истина, то помещение во временные таблицы не выполняется.
//
Процедура ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы = Неопределено,
	ИспользоватьВременныеТаблицы = Ложь)
	
	Если УдаляемыеТаблицы = Неопределено Тогда
		УдаляемыеТаблицы = Новый Структура;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ВременныеТаблицы = ОбщегоНазначения.СкопироватьРекурсивно(РезультирующиеТаблицы);
	СтрокиРезультатов = ОбщегоНазначения.СкопироватьРекурсивно(РезультирующиеТаблицы);
	ИндексыУдаляемыхТаблиц = Новый Массив;
	Для каждого ЭлементКоллекции Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		ИначеЕсли ВременныеТаблицы.Свойство(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			// Сохранение строки коллекции для определения индекса.
			СтрокиРезультатов[ЭлементКоллекции.ТаблицаДляПомещения] = ЭлементКоллекции;
			// Очистка кэша.
			ВременныеТаблицы.Удалить(ЭлементКоллекции.ТаблицаДляПомещения);
			// Если не требуются временные таблицы очистка признака.
			Если Не ИспользоватьВременныеТаблицы Тогда
				ЭлементКоллекции.ТаблицаДляПомещения = "";
			КонецЕсли;
		Иначе
			Если ВременныеТаблицы.Количество() = 0
				ИЛИ Не ИспользоватьВременныеТаблицы И ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения)
				ИЛИ (Не ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения)
					И УдаляемыеТаблицы.Свойство(ЭлементКоллекции.ТаблицаДляПомещения)) Тогда
				ИндексыУдаляемыхТаблиц.Вставить(0, СхемаЗапроса.ПакетЗапросов.Индекс(ЭлементКоллекции))
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление неиспользуемых таблиц.
	Для каждого ЭлементКоллекции Из ИндексыУдаляемыхТаблиц Цикл
		СхемаЗапроса.ПакетЗапросов.Удалить(ЭлементКоллекции);
	КонецЦикла;
	
	// Получение индексов результатов для последующего обращения к выборкам.
	Для каждого ЭлементКоллекции Из СтрокиРезультатов Цикл
		Если ЭлементКоллекции.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РезультирующиеТаблицы[ЭлементКоллекции.Ключ] = СхемаЗапроса.ПакетЗапросов.Индекс(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
КонецПроцедуры

Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Идентификаторы

Процедура ОбработатьВыгрузкуПрайсЛиста(
		Знач ПрайсЛист, ТекстОшибки, ЧастичнаяПубликация, КоличествоОпубликованных, ПараметрыСозданияПрайсЛиста, Отказ)
	
	Если ПрайсЛист.Товары.Количество() = 0 Тогда
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Отсутствует товар для публикации.'");
		Возврат;
	КонецЕсли;
	
	// Создание или обновить прайс-листа.
	СоздатьОбновитьПрайсЛист(ПрайсЛист, ПараметрыСозданияПрайсЛиста, Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации прайс-листа.'");
		Возврат;
	КонецЕсли;
	
	ОчиститьУстаревшиеИзображенияНоменклатурыПоставщикаИзСервиса(ПрайсЛист, Ложь);
	
	Если ПрайсЛист.Отключено Тогда
		// Снятие с публикации торговых-предложений, так как прайс-лист отключен.
		ОбработатьСнятиеСПубликацииТорговыеПредложения(ПрайсЛист, КоличествоОпубликованных, Отказ);
	Иначе
		// Обработка и публикация торговых предложений.
		ОбработатьТорговыеПредложения(ПрайсЛист, ЧастичнаяПубликация, КоличествоОпубликованных, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений.'");
		Возврат;
	ИначеЕсли ПрайсЛист.ЧастичнаяСинхронизация Тогда
		Возврат;
	КонецЕсли;
	
	// Снятие с публикации непубликуемых торговых предложений
	ОтменитьПубликациюНеактуальныхТорговыхПредложений(ПрайсЛист);
	
	// Очистка устаревших данных торговых предложений.
	ОчиститьУстаревшиеИдентификаторыТорговыхПредложений(Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка удаления устаревших данных торговых предложений.'");
		Возврат;
	КонецЕсли;
	
	// Очистка устаревших данных номенклатуры.
	ОчиститьУстаревшуюНоменклатуруПоставщика(Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка удаления устаревшей номенклатуры поставщика.'");
		Возврат;
	КонецЕсли;
	
	// Удаление неиспользуемых торговых предложений в сервисе.
	ОчиститьНеиспользуемыеТорговыеПредложенияВСервисе(ПрайсЛист, Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка удаления устаревших торговых предложений.'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСнятиеСПубликацииТорговоеПредложение(СтрокаТовара, КоличествоОпубликованных, ИдентификаторОрганизации, Отказ = Ложь)
	
	// Снятие с публикации торгового предложения.
	ЗапросСервиса = ЗапросСервисаУдалениеТорговогоПредложения(СтрокаТовара.ИдентификаторПредложения, ИдентификаторОрганизации, Истина);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ И Не Результат = 404 Тогда
		Возврат;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
	Если СтрокаТовара.Публикуется = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Снятие с публикации в регистре.
	Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СтрокаТовара);
	Запись.Прочитать();
	
	Если Запись.СостояниеПубликацииТорговыхПредложений = 
			Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано Тогда
		КоличествоОпубликованных = КоличествоОпубликованных - 1;
	КонецЕсли;
	
	Запись.Публикуется                            = Ложь;
	Запись.Хеш                                    = Неопределено;
	Запись.ДатаИзменения                          = ТекущаяУниверсальнаяДата();
	Если Запись.СостояниеПубликацииТорговыхПредложений = 
		Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано Тогда
		
		Запись.СостояниеПубликацииТорговыхПредложений = 
			Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации;
		
	КонецЕсли;
	
	Запись.Записать(Истина);

КонецПроцедуры

Процедура ОбработатьСнятиеСПубликацииТорговыеПредложения(ПрайсЛист, КоличествоОпубликованных, Отказ)
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПрайсЛист.Организация);
	Для каждого ЭлементКоллекции Из ПрайсЛист.Товары Цикл
		ОбработатьСнятиеСПубликацииТорговоеПредложение(ЭлементКоллекции, КоличествоОпубликованных, ИдентификаторОрганизации, Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПозициюТорговогоПредложения(ПараметрыОбработкиТорговогоПредложения)
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработкиТорговогоПредложения.СтрокаТовары.ИдентификаторНоменклатурыСервиса) Тогда
		
		Обновлено = Ложь;
		ПроверитьНоменклатуруПоставщика(
			ПараметрыОбработкиТорговогоПредложения, 
			Обновлено, 
			ПараметрыОбработкиТорговогоПредложения.ТекстОшибки, 
			ПараметрыОбработкиТорговогоПредложения.ОтказПубликацииТорговогоПредложения);
			
		ПараметрыОбработкиТорговогоПредложения.ДанныеПредложения.ХешНоменклатуры = 
			ПараметрыОбработкиТорговогоПредложения.СтрокаТовары.ХешНоменклатуры;
		
		ПараметрыОбработкиТорговогоПредложения.ХешНовый = 
			ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ПараметрыОбработкиТорговогоПредложения.ДанныеПредложения);
		
		Если ПараметрыОбработкиТорговогоПредложения.ОтказПубликацииТорговогоПредложения Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТовары = ПараметрыОбработкиТорговогоПредложения.СтрокаТовары;
		
		ПараметрыОбработкиТорговогоПредложения.ДанныеПредложения.ИдентификаторНоменклатуры = 
			СтрокаТовары.ИдентификаторНоменклатуры;
		
		// Установка хеша для всех аналогичных товаров.
		СтрокиПоНоменклатуре = ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.Товары.НайтиСтроки(
			Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения",
			СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика, СтрокаТовары.ЕдиницаИзмерения));
		
		Если СтрокиПоНоменклатуре.Количество() > 1 Тогда
			Для Каждого СтрокаОдинаковойНоменклатуры Из СтрокиПоНоменклатуре Цикл
				СтрокаОдинаковойНоменклатуры.ХешНоменклатуры = СтрокаТовары.ХешНоменклатуры;
				СтрокаОдинаковойНоменклатуры.ИдентификаторНоменклатуры =
					ПараметрыОбработкиТорговогоПредложения.СтрокаТовары.ИдентификаторНоменклатуры;
			КонецЦикла;
		КонецЕсли;
		
		ОпубликоватьИзображенияТоваровПоставщика(
			ПараметрыОбработкиТорговогоПредложения.СтрокаТовары,
			ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.Изображения);
		
	КонецЕсли;
	
	ПроверитьТорговоеПредложение(ПараметрыОбработкиТорговогоПредложения);
	
КонецПроцедуры

Процедура ОбработатьТорговыеПредложения(ПрайсЛист, ЧастичнаяПубликация, КоличествоОпубликованных, Отказ)
	
	ЕстьУспешные = Ложь;
	ЕстьНеУспешные = Ложь;
	
	ДатаПубликации = ДатаПубликацииИдентификаторовТорговойПлощадки();
	
	// Получение манифеста изменений торговых предложений в сервисе.
	МанифестИзмененныхПредложений = Новый Массив;
	МанифестУдаленныхПредложений  = Новый Массив;
	ЗагрузитьМанифестТорговыхПредложений(ДатаПубликации, МанифестИзмененныхПредложений, МанифестУдаленныхПредложений);
	
	// Получение манифеста изменений номенклатуры поставщика в сервисе.
	МанифестИзмененийНоменклатуры = Новый Массив;
	МанифестУдаленнойНоменклатуры = Новый Массив;
	ЗагрузитьМанифестНоменклатуры(ДатаПубликации, МанифестИзмененийНоменклатуры, МанифестУдаленнойНоменклатуры);
	
	ПериодичностьОбновленияПрогресса = Цел(ПрайсЛист.Товары.Количество() / 10);
	
	Если ПериодичностьОбновленияПрогресса = 0 Тогда
		ПериодичностьОбновленияПрогресса = 1;
	КонецЕсли;
	
	СчетчикПозиций = 0;
	КоличествоПозиций = ПрайсЛист.Товары.Количество();
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПрайсЛист.Организация);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьБлокировкуТорговыхПредложений(ПрайсЛист.Товары);
		
		Для Каждого СтрокаТовары Из ПрайсЛист.Товары Цикл
			
			СчетчикПозиций = СчетчикПозиций + 1;
			
			Если ПрайсЛист.ВыводитьПрогресс И СчетчикПозиций % ПериодичностьОбновленияПрогресса = 0 Тогда
				ДополнительныеПараметры = Новый Структура("ТорговоеПредложениеСинхронизации", ПрайсЛист.Ссылка);
				ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикПозиций / КоличествоПозиций * 100, 0), ПрайсЛист.Ссылка, ДополнительныеПараметры);
			КонецЕсли;
			
			ТребуетсяПубликовать = НЕ ЗначениеЗаполнено(СтрокаТовары.ПричинаИсключенияИзПубликации) И НЕ СтрокаТовары.ОтключитьПубликацию;
			УстанавливаемыеРеквизиты = Новый Структура;
			
			Если СтрокаТовары.Публикуется И НЕ ТребуетсяПубликовать Тогда
				ОбработатьСнятиеСПубликацииТорговоеПредложение(СтрокаТовары, КоличествоОпубликованных, ИдентификаторОрганизации);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовары.ПричинаИсключенияИзПубликации) 
				И Не СтрокаТовары.ТекущееСостояниеПубликацииТорговыхПредложений = 
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка Тогда
				
				УстанавливаемыеРеквизиты.Вставить("СостояниеПубликацииТорговыхПредложений", 
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовары.ПричинаИсключенияИзПубликации) 
				И НЕ СтрокаТовары.ПричинаИсключенияИзПубликации = СтрокаТовары.ТекущаяПричинаИсключенияИзПубликации Тогда
				УстанавливаемыеРеквизиты.Вставить("ПричинаИсключенияИзПубликации", СтрокаТовары.ПричинаИсключенияИзПубликации);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТовары.ПричинаИсключенияИзПубликации) Тогда
				ЕстьНеУспешные = Истина;
			КонецЕсли;
			
			Если УстанавливаемыеРеквизиты.Количество() <> 0 Тогда
				
				НаборЗаписей = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПрайсЛист.Установить(СтрокаТовары.ПрайсЛист);
				НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТовары.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТовары.Характеристика);
				НаборЗаписей.Отбор.Упаковка.Установить(СтрокаТовары.Упаковка);
				
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаТовары);
				Иначе
					Запись = НаборЗаписей[0];
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Запись, УстанавливаемыеРеквизиты);
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтатистики");
				
				Запись.ДатаИзменения  = ТекущаяУниверсальнаяДата();
				
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
			
			Если НЕ ТребуетсяПубликовать Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПредложения = НовоеТорговоеПредложение();
			ЗаполнитьЗначенияСвойств(ДанныеПредложения, СтрокаТовары, , "КратностьУпаковки");
			ДанныеПредложения.ИдентификаторПрайсЛиста = ПрайсЛист.Идентификатор;
			ДанныеПредложения.ДополнительноеОписание  = ПрайсЛист.ДополнительноеОписание;
			
			ЗаполнитьСкидкиЗаОбъемПродаж(ПрайсЛист, ДанныеПредложения);
			ЗаполнитьСкидкиПроцентСумма(ПрайсЛист, ДанныеПредложения);
			
			Если ПрайсЛист.ПубликоватьКратностьУпаковок Тогда
				ДанныеПредложения.КратностьУпаковки = СтрокаТовары.КратностьУпаковки;
			КонецЕсли;
			
			ПараметрыОбработкиТорговогоПредложения = Новый Структура;
			ПараметрыОбработкиТорговогоПредложения.Вставить("ДанныеПредложения"                   , ДанныеПредложения);
			ПараметрыОбработкиТорговогоПредложения.Вставить("СтрокаТовары"                        , СтрокаТовары);
			ПараметрыОбработкиТорговогоПредложения.Вставить("ПрайсЛист"                           , ПрайсЛист);
			ПараметрыОбработкиТорговогоПредложения.Вставить("МанифестИзмененийНоменклатуры"       , МанифестИзмененийНоменклатуры);
			ПараметрыОбработкиТорговогоПредложения.Вставить("МанифестИзмененныхПредложений"       , МанифестИзмененныхПредложений);
			ПараметрыОбработкиТорговогоПредложения.Вставить("ХешНовый"                            , "");
			ПараметрыОбработкиТорговогоПредложения.Вставить("ТекстОшибки"                         , "");
			ПараметрыОбработкиТорговогоПредложения.Вставить("ОтказПубликацииТорговогоПредложения" , Ложь);
			ПараметрыОбработкиТорговогоПредложения.Вставить("НовыйИдентификатор"                  , "");
			ПараметрыОбработкиТорговогоПредложения.Вставить("ПозицияОбновлена"                    , Ложь);
			
			ОбработатьПозициюТорговогоПредложения(ПараметрыОбработкиТорговогоПредложения);
			
			ОтказПубликацииТорговогоПредложения = ПараметрыОбработкиТорговогоПредложения.ОтказПубликацииТорговогоПредложения;
			
			// Обновление данных в регистре
			НаборЗаписей = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрайсЛист.Установить(СтрокаТовары.ПрайсЛист);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТовары.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТовары.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(СтрокаТовары.Упаковка);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаТовары);
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыОбработкиТорговогоПредложения.НовыйИдентификатор) Тогда
				Запись.Идентификатор = ПараметрыОбработкиТорговогоПредложения.НовыйИдентификатор;
			КонецЕсли;
			
			// Объектная модель хранения данных о товаре.
			Запись.ПрайсЛист       = СтрокаТовары.ПрайсЛист;
			Запись.Номенклатура    = СтрокаТовары.Номенклатура;
			Запись.Характеристика  = СтрокаТовары.Характеристика;
			Запись.Упаковка        = СтрокаТовары.Упаковка;
			Запись.Публикуется     = НЕ ОтказПубликацииТорговогоПредложения;
			Если ПараметрыОбработкиТорговогоПредложения.ПозицияОбновлена Тогда
				Запись.ДатаИзменения  = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
			Если ОтказПубликацииТорговогоПредложения Тогда
				
				Если ПрайсЛист.ЧастичнаяСинхронизация
					И Запись.СостояниеПубликацииТорговыхПредложений = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано Тогда
					КоличествоОпубликованных = КоличествоОпубликованных - 1;
				КонецЕсли;
				
				Запись.СостояниеПубликацииТорговыхПредложений =
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка;
				Запись.ЕстьОшибки          = Истина;
				Запись.ОписаниеОшибки      = ПараметрыОбработкиТорговогоПредложения.ТекстОшибки;
				ЕстьНеУспешные             = Истина;
				
			Иначе
				
				Если НЕ ПрайсЛист.ЧастичнаяСинхронизация
					ИЛИ НЕ Запись.СостояниеПубликацииТорговыхПредложений =
						Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано Тогда
					КоличествоОпубликованных = КоличествоОпубликованных + 1;
				КонецЕсли;
				
				Запись.СостояниеПубликацииТорговыхПредложений =
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано;
				Запись.Хеш                 = ПараметрыОбработкиТорговогоПредложения.ХешНовый;
				Запись.ХешНоменклатуры     = СтрокаТовары.ХешНоменклатуры;
				Запись.ХешИзображений      = СтрокаТовары.ХешИзображений;
				Запись.ЕстьОшибки          = Ложь;
				Запись.ОписаниеОшибки      = "";
				ЕстьУспешные               = Истина;
				Запись.ОтключитьПубликацию = Ложь;
				
			КонецЕсли;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтатистики");
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Торговые предложения.Обработать Торговые Предложения.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,, 
			ПрайсЛист, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Проверка, если остались записи в манифестах изменения.
	Для каждого ЭлементКоллекции Из МанифестИзмененийНоменклатуры Цикл
		МанифестУдаленнойНоменклатуры.Добавить(ЭлементКоллекции);
	КонецЦикла;
	Если МанифестУдаленнойНоменклатуры.Количество() Тогда
		ОчиститьИдентификаторыНоменклатуры(МанифестУдаленнойНоменклатуры);
	КонецЕсли;
	
	// Проверка, если остались записи в манифестах изменения.
	Для каждого ЭлементКоллекции Из МанифестИзмененныхПредложений Цикл
		МанифестУдаленныхПредложений.Добавить(ЭлементКоллекции);
	КонецЦикла;
	Если МанифестУдаленныхПредложений.Количество() Тогда
		ОчиститьИдентификаторыТорговыхПредложений(МанифестУдаленныхПредложений);
	КонецЕсли;
	
	ДатаПубликации = ТекущаяУниверсальнаяДата();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИдентификаторыТорговойПлощадки", "ДатаПубликации", ДатаПубликации);
	
	Если ЕстьУспешные И ЕстьНеУспешные Тогда
		ЧастичнаяПубликация = Истина;
	ИначеЕсли ЕстьНеУспешные Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМанифестТорговыхПредложений(
	ДатаПубликации, МанифестИзмененныхПредложений, МанифестУдаленныхПредложений)
	
	// Загрузка манифеста временно не поддерживается в сервисе.
	Возврат;
	
КонецПроцедуры

Процедура ЗагрузитьМанифестНоменклатуры(ДатаПубликации, МанифестИзмененийНоменклатуры, МанифестУдаленнойНоменклатуры)
	
	// Загрузка манифеста временно не поддерживается в сервисе.
	Возврат;
	
КонецПроцедуры

Функция ДатаПубликацииИдентификаторовТорговойПлощадки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТорговыеПредложенияТорговойПлощадки.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзменения УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	МинимальнаяДатаПубликации = Дата(1, 1, 1);
	Если Выборка.Следующий() Тогда
		МинимальнаяДатаПубликации = Выборка.ДатаИзменения;
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	НастройкиОбщегоХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИдентификаторыТорговойПлощадки", "ДатаПубликации", ПустаяДата);
	ДатаПубликации = Макс(МинимальнаяДатаПубликации, НастройкиОбщегоХранилища);
	
	Возврат ДатаПубликации;
	
КонецФункции

Процедура ЗаполнитьСкидкиЗаОбъемПродаж(ПрайсЛист, ДанныеПредложения)
	
	ВариантПубликацииСкидкиЗаОпт = ПрайсЛист.ВариантПубликацииСкидкиЗаОпт;
	
	Если Не ПрайсЛист.ПубликоватьЦены 
		Или Не ПрайсЛист.ПубликоватьСкидкиЗаРазовыйОбъемПродаж 
		Или ВариантПубликацииСкидкиЗаОпт.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиЗаОбъемПродаж = Неопределено;
	Если ВариантПубликацииСкидкиЗаОпт = Перечисления.ВариантыПубликацииСкидок.ВидыСкидок Тогда
		СкидкиЗаОбъемПродаж = 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПрайсЛист, "СкидкиЗаОбъемПродаж");
	ИначеЕсли ВариантПубликацииСкидкиЗаОпт = Перечисления.ВариантыПубликацииСкидок.ВидыЦен Тогда
		СкидкиЗаОбъемПродаж = 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПрайсЛист, "СкидкиЗаОбъемПродажВидыЦен");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкидкиЗаОбъемПродаж) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ДанныеПредложения.Номенклатура);
	
	СтрокиСкидки = СкидкиЗаОбъемПродаж.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаСкидки Из СтрокиСкидки Цикл
		
		НоваяСтрока = ДанныеПредложения.СкидкиЗаОбъемПродаж.Добавить();
		
		Если ПрайсЛист.ПубликоватьЦенуДоСкидки Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки, , "ЦенаДоСкидки");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСкидкиПроцентСумма(ПрайсЛист, ДанныеПредложения)
	
	СкидкиПроцентСумма = Неопределено;
	ВариантПубликацииСкидки = ПрайсЛист.ВариантПубликацииСкидки;
	
	Если Не ПрайсЛист.ПубликоватьЦены 
		Или Не ПрайсЛист.ПубликоватьЦенуДоСкидки 
		Или ВариантПубликацииСкидки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантПубликацииСкидки = Перечисления.ВариантыПубликацииСкидок.ВидыСкидок Тогда
		СкидкиПроцентСумма = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПрайсЛист, "СкидкиПроцентСумма");
	ИначеЕсли ВариантПубликацииСкидки = Перечисления.ВариантыПубликацииСкидок.ВидыЦен Тогда
		СкидкиПроцентСумма = 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПрайсЛист, "СкидкиПроцентСуммаВидыЦен");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкидкиПроцентСумма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ДанныеПредложения.Номенклатура);
	
	СтрокиСкидки = СкидкиПроцентСумма.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаСкидки Из СтрокиСкидки Цикл
		
		НоваяСтрока = ДанныеПредложения.СкидкиПроцентСумма.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		НоваяСтрока.ЦенаДоСкидки = ДанныеПредложения.Цена;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНоменклатуруПоставщика(ПараметрыОбработкиТорговогоПредложения, Обновлено, ТекстОшибки, Отказ)
	
	Организация                   = ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.Организация;
	СтрокаТовары                  = ПараметрыОбработкиТорговогоПредложения.СтрокаТовары;
	Штрихкоды                     = ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.Штрихкоды;
	Свойства                      = ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.Свойства;
	МанифестИзмененийНоменклатуры = ПараметрыОбработкиТорговогоПредложения.МанифестИзмененийНоменклатуры;
	
	ДанныеНоменклатуры = НоваяНоменклатураПоставщика();
	ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СтрокаТовары);
	
	ДанныеНоменклатуры.КодЕдиницыИзмерения = ТорговыеПредложенияПовтИсп.КодЕдиницыИзмерения(СтрокаТовары.ЕдиницаИзмерения);
	
	// Заполнение штрихкодов.
	СтрокиШтрихкода = Штрихкоды.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
		СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
	Для каждого ЭлементКоллекции Из СтрокиШтрихкода Цикл
		ДанныеНоменклатуры.Штрихкоды.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	// Заполнение свойств.
	СтрокиСвойства = Свойства.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
		СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
	Для каждого ЭлементКоллекции Из СтрокиСвойства Цикл
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры.Свойства.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	ХешНоменклатуры = СтрокаТовары.ХешНоменклатуры;
	ХешНовый = Неопределено;
	ТребуетсяОбновление = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторНоменклатуры)
		И МанифестИзмененийНоменклатуры.Найти(СтрокаТовары.ИдентификаторНоменклатуры) <> Неопределено Тогда
		ТребуетсяОбновление = Истина;
		МанифестИзмененийНоменклатуры.Удалить(СтрокаТовары.ИдентификаторНоменклатуры);
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(Организация, ДанныеНоменклатуры, Неопределено, Отказ);
	ХешНовый = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗапросСервиса.Данные);
	
	Если ХешНовый <> ХешНоменклатуры Тогда
		ТребуетсяОбновление = Истина;
		СтрокаТовары.ХешНоменклатуры = ХешНовый;
	КонецЕсли;
	
	Если НЕ СтрокаТовары.Публикуется Тогда
		ТребуетсяОбновление = Истина;
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		СохранитьНоменклатуруПоставщика(Организация, СтрокаТовары.ИдентификаторНоменклатуры, ХешНовый, ДанныеНоменклатуры,
			ТекстОшибки, Отказ);
		Если Не Отказ Тогда
			СтрокаТовары.ХешНоменклатуры = ХешНовый;
			Обновлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНоменклатуруПоставщика(Организация, Идентификатор, ХешНовый, ДанныеНоменклатуры, ТекстОшибки, Отказ)
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		// Запрос к сервису обновления номенклатуры поставщика.
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(
			Организация, 
			ДанныеНоменклатуры,
			Идентификатор, 
			Отказ);

		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		НовыйИдентификатор = Идентификатор;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) ИЛИ Результат = 404 Тогда
		// Запрос к сервису создания новой номенклатуры поставщика.
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(
			Организация, 
			ДанныеНоменклатуры, 
			Неопределено, 
			Отказ);
			
		НовыйИдентификатор = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если Не Отказ И НЕ ЗначениеЗаполнено(Идентификатор) Тогда
			Идентификатор = НовыйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации номенклатуры поставщика'");
		Возврат;
	КонецЕсли;
	
	// Обновление данных в регистре
	Запись = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
	
	Запись.Организация    = Организация;
	Запись.Номенклатура   = ДанныеНоменклатуры.Номенклатура;
	Запись.Характеристика = ДанныеНоменклатуры.Характеристика;
	
	Запись.Идентификатор  = НовыйИдентификатор;
	Запись.Хеш            = ХешНовый;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыНоменклатуры(МассивИдентификаторовНоменклатуры)
	
	Для каждого ЭлементКоллекции Из МассивИдентификаторовНоменклатуры Цикл
		
		Запись = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ЭлементКоллекции;
		Запись.Прочитать();
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыТорговыхПредложений(МассивИдентификаторовПредложений)
	
	Для каждого ЭлементКоллекции Из МассивИдентификаторовПредложений Цикл
		
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ЭлементКоллекции;
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТорговоеПредложение(ПараметрыОбработкиТорговогоПредложения)
	
	СтрокаТовары               = ПараметрыОбработкиТорговогоПредложения.СтрокаТовары;
	
	ИдентификаторПредложения   = СтрокаТовары.ИдентификаторПредложения;
	ХешПредложения             = СтрокаТовары.ХешПредложения;
	ХешНоменклатуры            = СтрокаТовары.ХешНоменклатуры;
	ХешНоменклатурыПредложения = СтрокаТовары.ХешНоменклатурыПредложения;
	ХешИзображений             = СтрокаТовары.ХешИзображений;
	ХешИзображенийПредложения  = СтрокаТовары.ХешИзображенийПредложения;
	
	ТребуетсяОбновление = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПредложения) ИЛИ Не ЗначениеЗаполнено(ХешПредложения) Тогда
		ТребуетсяОбновление= Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторПредложения)
		И ПараметрыОбработкиТорговогоПредложения.МанифестИзмененныхПредложений.Найти(ИдентификаторПредложения) <> Неопределено Тогда
		ТребуетсяОбновление= Истина;
		ПараметрыОбработкиТорговогоПредложения.МанифестИзмененныхПредложений.Удалить(ИдентификаторПредложения);
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(
		ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.ИдентификаторОрганизации,
		ПараметрыОбработкиТорговогоПредложения.ДанныеПредложения, 
		Неопределено, 
		ПараметрыОбработкиТорговогоПредложения.ОтказПубликацииТорговогоПредложения);
		
	ПараметрыОбработкиТорговогоПредложения.ХешНовый = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗапросСервиса.Данные);
	
	Если ПараметрыОбработкиТорговогоПредложения.ХешНовый <> ХешПредложения 
		Или Не ЗначениеЗаполнено(ИдентификаторПредложения)
		Или ХешНоменклатуры <> ХешНоменклатурыПредложения
		Или ХешИзображений <> ХешИзображенийПредложения Тогда
		
		ТребуетсяОбновление = Истина;
	КонецЕсли;
	
	Если ТребуетсяОбновление Тогда
		
		ХешиПредложения = Новый Структура();
		ХешиПредложения.Вставить("ХешПредложенияНовый"             , ПараметрыОбработкиТорговогоПредложения.ХешНовый);
		ХешиПредложения.Вставить("ХешНоменклатурыПредложенияНовый" , ХешНоменклатуры);
		ХешиПредложения.Вставить("ХешПредложения"                  , ХешПредложения);
		ХешиПредложения.Вставить("ХешНоменклатурыПредложения"      , ХешНоменклатурыПредложения);
		ХешиПредложения.Вставить("ХешИзображенийНовый"             , ХешИзображений);
		ХешиПредложения.Вставить("ХешИзображенийПредложения"       , ХешИзображенийПредложения);
		
		ПараметрыОбработкиТорговогоПредложения.ДанныеПредложения.ВнутреннийИдентификатор = СтрШаблон("%1#%2#%3#%4",
			ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.Ссылка.УникальныйИдентификатор(),
			СтрокаТовары.Номенклатура.УникальныйИдентификатор(),
			?(ЗначениеЗаполнено(СтрокаТовары.Характеристика), СтрокаТовары.Характеристика.УникальныйИдентификатор(), ""),
			?(ЗначениеЗаполнено(СтрокаТовары.Упаковка), СтрокаТовары.Упаковка.УникальныйИдентификатор(), ""));
		
		СохранитьОбновитьТорговоеПредложение(
			ПараметрыОбработкиТорговогоПредложения.ПрайсЛист.ИдентификаторОрганизации,
			ПараметрыОбработкиТорговогоПредложения.ДанныеПредложения, 
			ИдентификаторПредложения,
			ХешиПредложения, ПараметрыОбработкиТорговогоПредложения.ТекстОшибки, 
			ПараметрыОбработкиТорговогоПредложения.ПозицияОбновлена,
			ПараметрыОбработкиТорговогоПредложения.ОтказПубликацииТорговогоПредложения);
		
		СтрокаТовары.ИдентификаторПредложения = ИдентификаторПредложения;
		ПараметрыОбработкиТорговогоПредложения.НовыйИдентификатор = ИдентификаторПредложения;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьОбновитьТорговоеПредложение(
			ИдентификаторОрганизации,
			ДанныеПредложения, 
			Идентификатор, 
			ХешиПредложения, 
			ТекстОшибки, 
			ПозицияОбновлена, 
			Отказ)
	
	Если ХешиПредложения.ХешПредложенияНовый <> ХешиПредложения.ХешПредложения 
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда 
		
		Идентификатор = ПолучитьИдентификаторТорговогоПредложения(
			ИдентификаторОрганизации, 
			ДанныеПредложения,
			Идентификатор, 
			ХешиПредложения, 
			ТекстОшибки, 
			ПозицияОбновлена,
			Отказ);
			
	ИначеЕсли ХешиПредложения.ХешНоменклатурыПредложенияНовый <> ХешиПредложения.ХешНоменклатурыПредложения
		ИЛИ ХешиПредложения.ХешИзображенийНовый <> ХешиПредложения.ХешИзображенийПредложения Тогда
		
		АктуализироватьДанныеТорговогоПредложения(ДанныеПредложения, Идентификатор, ТекстОшибки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИдентификаторТорговогоПредложения(
			ИдентификаторОрганизации, 
			ДанныеПредложения, 
			Идентификатор, 
			ХешиПредложения, 
			ТекстОшибки, 
			ПозицияОбновлена, 
			Отказ)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		
		// Запрос к сервису создания нового торгового предложения.
		Ошибка = Неопределено;
		
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(
			ИдентификаторОрганизации, 
			ДанныеПредложения, 
			Неопределено, 
			Отказ);
			
		ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Ошибка);
		
		Если Отказ И Результат = 422 Тогда
			
			// Если при создании получена ошибка 422, возможно существует предложение с таким внутренним идентификатором.
			
			// Проверка существующего торгового предложения.
			Отказ = Ложь;
			ПараметрыЗапроса = НовыеПараметрыПолученияТорговыхПредложений(ДанныеПредложения.ВнутреннийИдентификатор);
			ПараметрыЗапроса.ИдентификаторОрганизации = ИдентификаторОрганизации;
			ЗапросСервиса = ЗапросСервисаПолучениеТорговыхПредложений(ПараметрыЗапроса);
			РезультатПоиска = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			Если Не Отказ И ЗначениеЗаполнено(РезультатПоиска) Тогда
				
				Если РезультатПоиска.Список.Количество() Тогда
					// Обновление торгового предложения.
					Идентификатор = РезультатПоиска.Список[0].Идентификатор;
					СохранитьОбновитьТорговоеПредложение(
						ИдентификаторОрганизации, 
						ДанныеПредложения,
						Идентификатор, 
						ХешиПредложения, 
						ТекстОшибки, 
						ПозицияОбновлена, 
						Отказ);
				Иначе
					Если ЗначениеЗаполнено(Ошибка) Тогда 
						ОбщегоНазначения.СообщитьПользователю(Ошибка.ТекстОшибки);
					КонецЕсли;
					ТекстОшибки = НСтр("ru = 'Ошибка данных при публикации торговых предложений'");
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			Возврат Идентификатор;
		ИначеЕсли Отказ Тогда
			Если ЗначениеЗаполнено(Ошибка) Тогда 
				ОбщегоНазначения.СообщитьПользователю(Ошибка.ТекстОшибки);
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений'");
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияОбновлена = Истина;
		НовыйИдентификатор = Результат;
		
	Иначе
		
		// Запрос к сервису обновления торгового предложения.
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(
			ИдентификаторОрганизации, 
			ДанныеПредложения, 
			Идентификатор, 
			Отказ);
			
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		Если Отказ И Результат = 404 Тогда
			// Торговое предложение отсутствует, создание нового.
			ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(
				ИдентификаторОрганизации, 
				ДанныеПредложения, 
				Неопределено, 
				Отказ);
				
			Отказ = Ложь;
			Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			Если Отказ Тогда
				Возврат Неопределено;
			КонецЕсли;
			НовыйИдентификатор = Результат;
			ПозицияОбновлена = Истина;
		ИначеЕсли Отказ Тогда
			Возврат Неопределено;
		Иначе
			ПозицияОбновлена = Истина;
			НовыйИдентификатор = Идентификатор;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйИдентификатор;
	
КонецФункции

Процедура ОпубликоватьИзображенияТоваровПоставщика(ДанныеНоменклатуры, ТаблицаИзображенийТоваров)
	
	СтрокиИзображений = ТаблицаИзображенийТоваров.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика",
		ДанныеНоменклатуры.Номенклатура,
		ДанныеНоменклатуры.Характеристика));
	
	ДанныеИзображений = Новый Массив;
	Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
		
		ИзображениеТовара = СтрокаИзображения.ФайлИзображения;
		ХешИзображения    = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ИзображениеТовара);
		
		ДанныеИзображений.Добавить(ХешИзображения);
		
		Если СтрокаИзображения.Хеш = ХешИзображения Тогда // Данные изображения не изменены.
			Продолжить;
		КонецЕсли;
		
		Отказ                    = Ложь;
		ИдентификаторИзображения = ИзображениеТовара.УникальныйИдентификатор();
		ДвоичныеДанныеФайла      = РаботаСФайлами.ДвоичныеДанныеФайла(ИзображениеТовара, Ложь);
		РасширениеФайла          = ИзображениеТовара.Расширение;
		
		ТипКонтента = ТипыСодержимогоИзображения().Получить(РасширениеФайла);

		Если ТипКонтента = Неопределено Тогда
			// Расширение файла не поддерживается.
			Продолжить;
		КонецЕсли;
		
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеИзображенияНоменклатурыПоставщика(
			ДанныеНоменклатуры.Организация,
			ДанныеНоменклатуры.ИдентификаторНоменклатуры,
			ИдентификаторИзображения,
			ДвоичныеДанныеФайла,
			ТипКонтента);
			
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если НЕ Отказ И Результат = Истина Тогда
			
			// Сохраняем успешно выгруженные изображения.
			ЗаписьМенеджера = РегистрыСведений.ИзображенияТорговойПлощадки.СоздатьМенеджерЗаписи();
			ЗаписьМенеджера.Организация               = ДанныеНоменклатуры.Организация;
			ЗаписьМенеджера.Номенклатура              = ДанныеНоменклатуры.Номенклатура;
			ЗаписьМенеджера.Характеристика            = ДанныеНоменклатуры.Характеристика;
			ЗаписьМенеджера.ФайлИзображения           = ИзображениеТовара;
			ЗаписьМенеджера.ИдентификаторИзображения  = ИдентификаторИзображения;
			ЗаписьМенеджера.ИдентификаторНоменклатуры = ДанныеНоменклатуры.ИдентификаторНоменклатуры;
			ЗаписьМенеджера.Хеш                       = ХешИзображения;
			ЗаписьМенеджера.Записать(Истина);
			
		КонецЕсли;
	КонецЦикла;
	
	ДанныеНоменклатуры.ХешИзображений = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеИзображений);
	ДанныеИзображений                 = Неопределено;
	
КонецПроцедуры

Процедура АктуализироватьДанныеТорговогоПредложения(ДанныеПредложения, Идентификатор, ТекстОшибки, Отказ)
	
	ЗапросСервиса = ЗапросСервисаАктуализацияДанныхТорговогоПредложения(ДанныеПредложения, Идентификатор, Отказ);
	Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	Если Отказ Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений'");
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйМатрицаЦен()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Число", , ,    Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("Цена",         Новый ОписаниеТипов("Число", , ,    Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ЦенаДоСкидки", Новый ОписаниеТипов("Число", , ,    Новый КвалификаторыЧисла(20, 2, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("Комментарий",  Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200)));
	
	Возврат Таблица;
	
КонецФункции

Процедура ОтменитьПубликациюНеактуальныхТорговыхПредложений(ПрайсЛист)
	
	// Получение неактуальных торговых предложений, по которым не публикуются товары.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.ПрайсЛист КАК ПрайсЛист,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Упаковка КАК Упаковка,
	|	Товары.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТорговыеПредложенияТорговойПлощадки.Номенклатура = Товары.Номенклатура
	|			И ТорговыеПредложенияТорговойПлощадки.Характеристика = Товары.Характеристика
	|			И ТорговыеПредложенияТорговойПлощадки.Упаковка = Товары.Упаковка
	|			И ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = Товары.ПрайсЛист
	|ГДЕ
	|	(Товары.Номенклатура ЕСТЬ NULL
	|			ИЛИ НЕ Товары.ПричинаИсключенияИзПубликации = &ПустаяПричинаИсключенияИзПубликации)
	|	И ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = &ПрайсЛист
	|	И ТорговыеПредложенияТорговойПлощадки.Публикуется";
	
	Запрос.УстановитьПараметр("Товары"                             , ПрайсЛист.Товары);
	Запрос.УстановитьПараметр("ПрайсЛист"                          , ПрайсЛист.Ссылка);
	Запрос.УстановитьПараметр("ПустаяПричинаИсключенияИзПубликации", ПустаяПричинаИсключенияИзПубликации());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Снятие с публикации торговых предложений.
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Запись.Публикуется   = Ложь;
		Запись.Хеш           = "";
		Запись.ДатаИзменения = ТекущаяУниверсальнаяДата();
		
		Запись.ОтключитьПубликацию = Истина;
		Запись.СостояниеПубликацииТорговыхПредложений = 
			Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации;
		
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеИдентификаторыТорговыхПредложений(Отказ) Экспорт
	
	КоличествоМесяцевХранения = 6;
	
	// Получение устаревших идентификаторов торговых предложений.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Упаковка КАК Упаковка,
	|	ТорговыеПредложенияТорговойПлощадки.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(ОрганизацииБизнесСеть.Идентификатор, """") КАК ИдентификаторОрганизации
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|			ПО СостоянияСинхронизацииТорговыеПредложения.Организация = ОрганизацииБизнесСеть.Организация
	|		ПО ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение
	|ГДЕ
	|	(ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
	|				И ТорговыеПредложенияТорговойПлощадки.ДатаИзменения < &ПериодХранения
	|			ИЛИ СостоянияСинхронизацииТорговыеПредложения.Состояние ЕСТЬ NULL)
	|	И НЕ(ТорговыеПредложенияТорговойПлощадки.Идентификатор <> """"
	|				И ЕСТЬNULL(ОрганизацииБизнесСеть.Идентификатор, """") = """")";
	
	Запрос.УстановитьПараметр("ПериодХранения", ДобавитьМесяц(НачалоДня(ТекущаяУниверсальнаяДата()), - КоличествоМесяцевХранения));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		Если ЗначениеЗаполнено(Выборка.Идентификатор) 
			И ЗначениеЗаполнено(Выборка.ИдентификаторОрганизации) Тогда
			
			// Запрос к сервису удаления торговых предложений.
			ЗапросСервиса = ЗапросСервисаУдалениеТорговогоПредложения(Выборка.Идентификатор, Выборка.ИдентификаторОрганизации, Ложь);
			ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина;
			Ответ = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			
			Если Ответ = 404 Тогда
				Отказ = Ложь;
			ИначеЕсли Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	

		// Удаление записи в регистре сведений.
		Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьПубликациюТорговыхПредложений(ПрайсЛист)
	
	НачатьТранзакцию();
	
	Попытка
		
		// Удаление торговых предложений прайс-листа в информационной базе.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТорговыеПредложенияТорговойПлощадки");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрайсЛист", ПрайсЛист.Ссылка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрайсЛист.Установить(ПрайсЛист.Ссылка);
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Отмена публикации торговых предложений.'");
		ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2%3", 
			ТекстОшибки, 
			Символы.ПС, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения;
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробныйТекстОшибки, Подсистема);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеТорговыеПредложенияВСервисе(ПрайсЛист, Отказ)
	
	ИдентификаторОрганизации = БизнесСеть.ИдентификаторОрганизации(ПрайсЛист.Организация);
	
	ПараметрыЗапроса = НовыеПараметрыПолученияТорговыхПредложений();
	ПараметрыЗапроса.ВнутреннийИдентификаторПрайсЛиста = Строка(ПрайсЛист.Ссылка.УникальныйИдентификатор());
	РазмерСтраницы = 1000;
	ПараметрыЗапроса.РазмерСтраницы = РазмерСтраницы;
	ПараметрыЗапроса.ИдентификаторОрганизации = ИдентификаторОрганизации;
	
	// Удаление всех торговых предложений в цикле.
	НомерСтраницы = 0;
	Пока НомерСтраницы < 100 Цикл
		
		ПараметрыЗапроса.Страница = НомерСтраницы;
		
		ЗапросСервиса = ЗапросСервисаПолучениеТорговыхПредложений(ПараметрыЗапроса);
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.Список.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из Результат.Список Цикл
			Если ЭлементКоллекции.НеПубликуется = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИдентификаторПредложения", ЭлементКоллекции.Идентификатор);
			Строки = ПрайсЛист.Товары.НайтиСтроки(СтруктураОтбора);
			Если НЕ Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Удаление торгового предложения.
			ЗапросСервиса = ЗапросСервисаУдалениеТорговогоПредложения(ЭлементКоллекции.Идентификатор, ИдентификаторОрганизации, Истина);
			ВыполнитьЗапрос(ЗапросСервиса, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		
		КонецЦикла;
		
		Если Результат.Список.Количество() < РазмерСтраницы Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшуюНоменклатуруПоставщика(Отказ)
	
	КоличествоМесяцевХранения = 6;
	
	// Получение устаревшей номенклатуры поставщика и их изображений.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодХранения", ДобавитьМесяц(НачалоДня(ТекущаяУниверсальнаяДата()), - КоличествоМесяцевХранения));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураТорговойПлощадки.Организация КАК Организация,
	|	НоменклатураТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	НоменклатураТорговойПлощадки.Характеристика КАК Характеристика,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НЕ ТорговыеПредложенияТорговойПлощадки.Публикуется
	|						И ТорговыеПредложенияТорговойПлощадки.ДатаИзменения < &ПериодХранения
	|					ИЛИ ТорговыеПредложенияТорговойПлощадки.Идентификатор ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК УстаревшиеТовары
	|ПОМЕСТИТЬ ГруппировкаТоваров
	|ИЗ
	|	РегистрСведений.НоменклатураТорговойПлощадки КАК НоменклатураТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО (НоменклатураТорговойПлощадки.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура)
	|			И (НоменклатураТорговойПлощадки.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика)
	|			И (НоменклатураТорговойПлощадки.Хеш = ТорговыеПредложенияТорговойПлощадки.ХешНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураТорговойПлощадки.Номенклатура,
	|	НоменклатураТорговойПлощадки.Характеристика,
	|	НоменклатураТорговойПлощадки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппировкаТоваров.Организация КАК Организация,
	|	ГруппировкаТоваров.Номенклатура КАК Номенклатура,
	|	ГруппировкаТоваров.Характеристика КАК Характеристика,
	|	ИзображенияТорговойПлощадки.ФайлИзображения КАК ФайлИзображения
	|ИЗ
	|	ГруппировкаТоваров КАК ГруппировкаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
	|		ПО (ГруппировкаТоваров.Номенклатура = ИзображенияТорговойПлощадки.Номенклатура)
	|			И (ГруппировкаТоваров.Характеристика = ИзображенияТорговойПлощадки.Характеристика)
	|			И (ГруппировкаТоваров.Организация = ИзображенияТорговойПлощадки.Организация)
	|ГДЕ
	|	ГруппировкаТоваров.УстаревшиеТовары";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Запись = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		Запись.Удалить();
		
		Запись = РегистрыСведений.ИзображенияТорговойПлощадки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеИзображенияНоменклатурыПоставщикаИзСервиса(ПрайсЛист, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изображения", ПрайсЛист.Изображения);
	Запрос.УстановитьПараметр("ПрайсЛист", ПрайсЛист.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изображения.Номенклатура КАК Номенклатура,
	|	Изображения.Характеристика КАК Характеристика,
	|	Изображения.ФайлИзображения КАК ФайлИзображения
	|ПОМЕСТИТЬ ТаблицаИзображений
	|ИЗ
	|	&Изображения КАК Изображения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ФайлИзображения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзображенияТорговойПлощадки.Организация,
	|	ИзображенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ИзображенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ИзображенияТорговойПлощадки.ИдентификаторИзображения КАК ИдентификаторИзображения,
	|	ИзображенияТорговойПлощадки.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ИзображенияТорговойПлощадки.ФайлИзображения КАК ФайлИзображения
	|ПОМЕСТИТЬ ИзображенияНеПопавшиеВВыгрузку
	|ИЗ
	|	РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзображений КАК ТаблицаИзображений
	|		ПО ИзображенияТорговойПлощадки.Номенклатура = ТаблицаИзображений.Номенклатура
	|		И ИзображенияТорговойПлощадки.Характеристика = ТаблицаИзображений.Характеристика
	|		И ИзображенияТорговойПлощадки.ФайлИзображения = ТаблицаИзображений.ФайлИзображения
	|ГДЕ
	|	ТаблицаИзображений.Номенклатура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаИзображений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзображенияНеПопавшиеВВыгрузку.ИдентификаторИзображения КАК ИдентификаторИзображения,
	|	ИзображенияНеПопавшиеВВыгрузку.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ИзображенияНеПопавшиеВВыгрузку.Номенклатура КАК Номенклатура,
	|	ИзображенияНеПопавшиеВВыгрузку.Характеристика КАК Характеристика,
	|	ИзображенияНеПопавшиеВВыгрузку.ФайлИзображения КАК ФайлИзображения,
	|	ПРЕДСТАВЛЕНИЕ(ИзображенияНеПопавшиеВВыгрузку.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ИзображенияНеПопавшиеВВыгрузку.ФайлИзображения) КАК ФайлИзображенияПредставление,
	|	ИзображенияНеПопавшиеВВыгрузку.Организация
	|ИЗ
	|	ИзображенияНеПопавшиеВВыгрузку КАК ИзображенияНеПопавшиеВВыгрузку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО ИзображенияНеПопавшиеВВыгрузку.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|		И ИзображенияНеПопавшиеВВыгрузку.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = &ПрайсЛист
	|	И ТорговыеПредложенияТорговойПлощадки.Публикуется";
	
	РезультатЗапроса   = Запрос.Выполнить();
	ВыборкаИзображений = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИзображений.Следующий() Цикл
		
		// Удаление неактуальной номенклатуры поставщика в сервисе.
		ЗапросСервиса = ЗапросСервисаУдалениеИзображенияНоменклатурыПоставщика(
			ПрайсЛист.ИдентификаторОрганизации,
			ВыборкаИзображений.ИдентификаторНоменклатуры,
			ВыборкаИзображений.ИдентификаторИзображения);
		Результат = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если НЕ Отказ И Результат = Истина Тогда
			Запись = РегистрыСведений.ИзображенияТорговойПлощадки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаИзображений);
			Запись.Удалить();
		ИначеЕсли НЕ Отказ Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьИдентификаторыНоменклатурыСервиса(Список) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
	
	Список.ЗаполнитьЗначения("", "ИдентификаторНоменклатурыСервиса, ИдентификаторХарактеристикиСервиса");
	
	МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
	
	СписокПоиска = Список.Скопировать( , "Номенклатура, Характеристика");
	ДанныеСервиса = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(СписокПоиска);
	
	Для каждого СтрокаДанныхСервиса Из ДанныеСервиса Цикл
		Строки = Список.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			СтрокаДанныхСервиса.Номенклатура, СтрокаДанныхСервиса.Характеристика));
		Для каждого ЭлементКоллекции Из Строки Цикл
			ЭлементКоллекции.ИдентификаторНоменклатурыСервиса = СтрокаДанныхСервиса.ИдентификаторНоменклатуры;
			ЭлементКоллекции.ИдентификаторХарактеристикиСервиса = СтрокаДанныхСервиса.ИдентификаторХарактеристики;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПредставлениеЦены(Цена) Экспорт
	
	СтрокаФормата = "ЧЦ=15; ЧДЦ=2";

	Если Окр(Цена, 3) <> Окр(Цена, 2) Тогда
		СтрокаФормата = "ЧЦ=17; ЧДЦ=4";
	КонецЕсли;
	
	Результат = Формат(Цена, СтрокаФормата);
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьЦеныПредложения(ДанныеСервиса)
	
	Для Каждого ТекущееПредложение Из ДанныеСервиса.Список Цикл
		
		ТекущееПредложение.Цена = 0;
		ТекущееПредложение.ЦенаДоСкидки = 0;
		ЦеныВВалютеЗапроса = ТекущееПредложение.ЦеныВВалютеЗапроса;
		
		Если Не ЗначениеЗаполнено(ЦеныВВалютеЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦеныВВалютеЗапроса.Сортировать("Цена Возр");
		
		Если ЗначениеЗаполнено(ЦеныВВалютеЗапроса[0].Цена) Тогда
			ТекущееПредложение.Цена = ЦеныВВалютеЗапроса[0].Цена;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЦеныВВалютеЗапроса[0].ЦенаДоСкидки) Тогда
			ТекущееПредложение.ЦенаДоСкидки = ЦеныВВалютеЗапроса[0].ЦенаДоСкидки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСоединенияИзПолногоАдреса(ЗапросСервиса)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ЗапросСервиса.ПолныйАдрес);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Сервер",                 СтруктураURI.Хост);
	Результат.Вставить("Порт",                   СтруктураURI.Порт);
	Результат.Вставить("Аутентификация",         Истина);
	Результат.Вставить("Таймаут",                30);
	Результат.Вставить("Прокси",                 Неопределено);
	Результат.Вставить("ЗащищенноеСоединение",   Неопределено);
	Результат.Вставить("ИдентификаторПрограммы", Неопределено);
	
	ЗащищенноеСоединение = СтруктураURI.Схема = "https";
	
	Если ЗащищенноеСоединение Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(,
			Новый СертификатыУдостоверяющихЦентровОС);
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	Иначе
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	КонецЕсли;
	
	ЗапросСервиса.Адрес = СтруктураURI.ПутьНаСервере;
	
	Возврат Результат;
	
КонецФункции

// Инициализация отчета публикуемых товаров.
//
// Параметры:
//  СхемаКомпоновкиДанных	 - СхемаКомпоновкиДанных - схема для формирования отчета.
//
Процедура ИнициализацияОтчетаПубликуемыхТоваров(СхемаКомпоновкиДанных) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	РезультирующиеТаблицы = Новый Структура("ТоварыСлужебныйСИзображениями");
	УдаляемыеТаблицы = Новый Структура(
		"Контакты, Контрагенты, СвойстваСлужебный, Штрихкоды, УстаревшиеПредложения, СвойстваСлужебный");
	ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Ложь);
	
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = Запрос.Текст;
	
	Для каждого ЭлементКоллекции Из Запрос.Параметры Цикл
		Если СхемаКомпоновкиДанных.Параметры.Найти(ЭлементКоллекции.Ключ) = Неопределено Тогда
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
			НовыйПараметр.Имя = ЭлементКоллекции.Ключ;
			НовыйПараметр.Значение = ЭлементКоллекции.Значение;
			НовыйПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновление статистики по синхронизации торговых предложений.
//
Процедура ОбновитьСтатистикуСинхронизации(Знач Параметры, Знач АдресРезультата) Экспорт
	
	Статистика = Новый Структура;
	
	Если Параметры.ИспользоватьСтатистикуСопоставления Тогда
	
		// Получение данных
		ИспользоватьСопоставление1СНоменклатура = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой")
			И ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
		
		Запрос = Новый Запрос;
		ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
		ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
		
		// Дополнение служебными данными.
		ДополнитьЗапросСлужебнымиТаблицами(Запрос);
		
		РезультирующиеТаблицы = Новый Структура("ТоварыСлужебный");
		УдаляемыеТаблицы = Новый Структура("Штрихкоды, СвойстваСлужебный");
		ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Истина);
		
		Если ИспользоватьСопоставление1СНоменклатура Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(Товары.ИдентификаторНоменклатурыСервиса, """") КАК ИдентификаторНоменклатурыСервиса,
			|	ЕСТЬNULL(Товары.ИдентификаторКатегории, """") КАК ИдентификаторКатегории
			|ПОМЕСТИТЬ УникальныеПозиции
			|ИЗ
			|	ТоварыСлужебный КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(УникальныеПозиции.Номенклатура) КАК КоличествоПозиций,
			|	ЕСТЬNULL(СУММА(ВЫБОР
			|		КОГДА УникальныеПозиции.ИдентификаторНоменклатурыСервиса <> &ПустойИдентификатор
			|			ТОГДА ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
			|		ИНАЧЕ 0
			|	КОНЕЦ), 0) КАК КоличествоСопоставлено1СНоменклатура,
			|	ЕСТЬNULL(СУММА(ВЫБОР
			|		КОГДА УникальныеПозиции.ИдентификаторКатегории <> &ПустойИдентификатор
			|			ТОГДА ВЫБОР
			|				КОГДА НЕ &ИспользоватьСопоставление1СНоменклатура
			|					ТОГДА ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
			|				ИНАЧЕ ВЫБОР
			|					КОГДА УникальныеПозиции.ИдентификаторНоменклатурыСервиса = &ПустойИдентификатор
			|						ТОГДА ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|			КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ), 0) КАК КоличествоСопоставленоБизнесСеть
			|ИЗ
			|	УникальныеПозиции КАК УникальныеПозиции";
			
			Запрос.УстановитьПараметр("ИспользоватьСопоставление1СНоменклатура", ИспользоватьСопоставление1СНоменклатура);
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(Товары.ИдентификаторКатегории, """") КАК ИдентификаторКатегории
			|ПОМЕСТИТЬ УникальныеПозиции
			|ИЗ
			|	ТоварыСлужебный КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(УникальныеПозиции.Номенклатура) КАК КоличествоПозиций,
			|	ЕСТЬNULL(СУММА(ВЫБОР
			|		КОГДА УникальныеПозиции.ИдентификаторКатегории <> &ПустойИдентификатор
			|			ТОГДА ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
			|		ИНАЧЕ 0
			|	КОНЕЦ), 0) КАК КоличествоСопоставленоБизнесСеть
			|ИЗ
			|	УникальныеПозиции КАК УникальныеПозиции";
			
		КонецЕсли;
		
		Запрос.Текст = СтрШаблон("%1; %2", Запрос.Текст, ТекстЗапроса);
		Запрос.УстановитьПараметр("ПустойИдентификатор", "");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Статистика.Вставить("КоличествоПозиций", 0);
		Статистика.Вставить("КоличествоСопоставлено1СНоменклатура", 0);
		Статистика.Вставить("КоличествоСопоставленоБизнесСеть", 0);
		Статистика.Вставить("ДатаОбновления", УниверсальноеВремя(ТекущаяДатаСеанса()));
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Статистика, Выборка);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Параметры.ИспользоватьСтатистикуПубликации Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(СостоянияСинхронизацииТорговыеПредложения.КоличествоОпубликованных) КАК КоличествоОпубликованных,
		|	0 КАК КоличествоОшибок
		|ПОМЕСТИТЬ ИсходныеДанные
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	0,
		|	ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
		|ИЗ
		|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
		|ГДЕ
		|	ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОпубликованных), 0) КАК КоличествоОпубликованных,
		|	ЕСТЬNULL(СУММА(ИсходныеДанные.КоличествоОшибок), 0) КАК КоличествоОшибок
		|ИЗ
		|	ИсходныеДанные КАК ИсходныеДанные";
		
		Статистика.Вставить("КоличествоОпубликованных", 0);
		Статистика.Вставить("КоличествоОшибок", 0);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗапроса.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Статистика, ВыборкаЗапроса);
		КонецЕсли;
		
		// Проверка активных торговых предложений.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияСинхронизацииТорговыеПредложения.Состояние КАК Состояние,
		|	1 КАК Количество
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|		ПО СостоянияСинхронизацииТорговыеПредложения.Организация = ОрганизацииБизнесСеть.Организация
		|ГДЕ
		|	НЕ СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение.ПометкаУдаления
		|	И НЕ СостоянияСинхронизацииТорговыеПредложения.Отключено";
		
		Статистика.Вставить("Синхронизировано"             , 0);
		Статистика.Вставить("ТребуетсяСинхронизация"       , 0);
		Статистика.Вставить("ОшибкаСинхронизации"          , 0);
		Статистика.Вставить("СинхронизированоЧастично"     , 0);
		Статистика.Вставить("КоличествоТорговыхСоглашений" , 0);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			Статистика.КоличествоТорговыхСоглашений = Статистика.КоличествоТорговыхСоглашений + 1;
			Если ВыборкаЗапроса.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.Синхронизировано Тогда
				Статистика.Синхронизировано = Статистика.Синхронизировано + ВыборкаЗапроса.Количество;
			ИначеЕсли ВыборкаЗапроса.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация Тогда
				Статистика.ТребуетсяСинхронизация = Статистика.ТребуетсяСинхронизация + ВыборкаЗапроса.Количество;
			ИначеЕсли ВыборкаЗапроса.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации Тогда
				Статистика.ОшибкаСинхронизации = Статистика.ОшибкаСинхронизации + ВыборкаЗапроса.Количество;
			ИначеЕсли ВыборкаЗапроса.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично Тогда
				Статистика.СинхронизированоЧастично = Статистика.СинхронизированоЧастично + ВыборкаЗапроса.Количество;
			КонецЕсли;
		КонецЦикла;
		
		
	КонецЕсли;
	
	Если Параметры.ИспользоватьРегистрациюОрганизации Или Параметры.ИспользоватьСтатистикуПубликации Тогда
	
		// Проверка регистрации организаций.
		ИспользуетсяНесколькоОрганизаций = ОбщегоНазначенияБЭД.ИспользуетсяНесколькоОрганизаций();
		
		Статистика.Вставить("ИспользуетсяНесколькоОрганизаций", ИспользуетсяНесколькоОрганизаций);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОрганизацииБизнесСеть.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
			|ГДЕ
			|	ОрганизацииБизнесСеть.Идентификатор <> """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПодключенныеОрганизации = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ПодключенныеОрганизации.Добавить(Выборка.Организация);
		КонецЦикла;
		
		Статистика.Вставить("ПодключенныеОрганизации", ПодключенныеОрганизации);
		
	КонецЕсли;

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.ИмяМетода);
	КонецЕсли;
	
	// Запрос состояние публикации торговых предложений.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО СостоянияСинхронизацииТорговыеПредложения.Организация = ОрганизацииБизнесСеть.Организация
	|ГДЕ
	|	НЕ СостоянияСинхронизацииТорговыеПредложения.Отключено
	|	И НЕ СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА СостоянияСинхронизацииТорговыеПредложения.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации)
	|			ТОГДА 0
	|		КОГДА СостоянияСинхронизацииТорговыеПредложения.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииТорговыеПредложения.СинхронизированоЧастично)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	СостоянияСинхронизацииТорговыеПредложения.ДатаСинхронизации УБЫВ";
	
	ТорговоеПредложение = Неопределено;
	
	ВыборкаСинхронизаций = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаСинхронизаций.Следующий() Тогда
		ТорговоеПредложение = ВыборкаСинхронизаций.ТорговоеПредложение;
	КонецЕсли;
		
	Статистика.Вставить("ТорговоеПредложение",  ТорговоеПредложение);
	
	Статистика.Вставить("ПараметрыВыполнения",  Параметры);
	
	// Сохранение статистики
	ПоместитьВоВременноеХранилище(Статистика, АдресРезультата);
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Параметры)
	
	Параметры.Вставить("ПрайсЛист", Неопределено);
	Параметры.Вставить("Период",    Дата(1,1,1));
	
	Параметры.Вставить("ПустаяПричинаИсключенияИзПубликации", ПустаяПричинаИсключенияИзПубликации());
	
КонецПроцедуры

Процедура СоздатьЗаписиТорговыхПредложенийДляПоискаСоответствия()
	
	// Получение несопоставленной номенклатуры.
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	// Дополнение служебными данными.
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	РезультирующиеТаблицы = Новый Структура("ТоварыСлужебный");
	УдаляемыеТаблицы = Новый Структура("СвойстваСлужебный");
	ПреобразоватьЗапросПоВременнымТаблицам(Запрос, РезультирующиеТаблицы, УдаляемыеТаблицы, Истина);
	
	// Добавить запрос для отбора по уже созданным ТП
	ТекстЗапросаТорговыеПредложения =
	"ВЫБРАТЬ
	|	ТоварыСлужебный.Номенклатура КАК Номенклатура,
	|	ТоварыСлужебный.Характеристика КАК Характеристика,
	|	ТоварыСлужебный.ПрайсЛист КАК ПрайсЛист,
	|	ТоварыСлужебный.Упаковка КАК Упаковка,
	|	ТоварыСлужебный.Публикуется КАК Публикуется
	|ИЗ
	|	ТоварыСлужебный КАК ТоварыСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПО ТоварыСлужебный.ПрайсЛист = ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	|			И ТоварыСлужебный.Номенклатура = ТорговыеПредложенияТорговойПлощадки.Номенклатура
	|			И ТоварыСлужебный.Характеристика = ТорговыеПредложенияТорговойПлощадки.Характеристика
	|			И ТоварыСлужебный.Упаковка = ТорговыеПредложенияТорговойПлощадки.Упаковка
	|ГДЕ
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура ЕСТЬ NULL
	|	И НЕ ТоварыСлужебный.НоменклатураСопоставлена";
	
	Запрос.Текст = СтрШаблон("%1%2;%2%3", Запрос.Текст, Символы.ПС, ТекстЗапросаТорговыеПредложения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	
	Попытка
		СчетчикТранзакции = 0;
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ДатаИзменения = ДатаОбновления;
			Запись.Публикуется = Истина;
			Запись.Записать(Истина);
			Если СчетчикТранзакции > 1000 Тогда
				СчетчикТранзакции = 0;
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
			Иначе
				СчетчикТранзакции = СчетчикТранзакции + 1;
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция Типы()
	
	Возврат ТорговыеПредложенияПовтИсп.ТипыДанных();
	
КонецФункции

Процедура УстановитьПолеВременнойТаблицыЗапросаЕслиПолеОтсутствует(ТекстЗапроса, ИмяВременнойТаблицы, ИмяКолонки,
		Выражение)

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для каждого ПакетЗапросов Из СхемаЗапроса.ПакетЗапросов Цикл
	
		Если ТипЗнч(ПакетЗапросов) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса")
				ИЛИ НЕ ВРег(ПакетЗапросов.ТаблицаДляПомещения) = ВРег(ИмяВременнойТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = ПакетЗапросов.Колонки.Найти(ИмяКолонки);
		
		Если НЕ Колонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексКолонки = ПакетЗапросов.Колонки.Количество();
		
		Для каждого ОператорЗапроса Из ПакетЗапросов.Операторы Цикл
			ОператорЗапроса.ВыбираемыеПоля.Добавить(Выражение, ИндексКолонки);
		КонецЦикла;
		
		ПакетЗапросов.Колонки[ИндексКолонки].Псевдоним = ИмяКолонки;
	
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

КонецПроцедуры

Процедура УстановитьОтборыКомпоновкиДанныхВЗапрос(Запрос, Отбор = Неопределено)

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхЗапрос";
	ИсточникДанных.СтрокаСоединения = ""; // Для текущей информационной базы - пустая строка.
	ИсточникДанных.ТипИсточникаДанных = "Local"; // Для текущей информационной базы - "Local".
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных               = "ИсточникДанныхЗапрос";
	НаборДанных.Имя                          = "ОсновнойЗапрос";
	НаборДанных.Запрос                       = Запрос.Текст;
	
	Для каждого Параметр Из Запрос.Параметры Цикл
	
		ПараметрКомпоновкиДанных = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрКомпоновкиДанных.Имя           = Параметр.Ключ;
		ПараметрКомпоновкиДанных.Значение      = Параметр.Значение;
		ПараметрКомпоновкиДанных.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	
	ГруппировкаКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Для каждого КолонкаЗапроса Из ПакетЗапросов.Колонки Цикл
	
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле        = КолонкаЗапроса.Псевдоним;
		Поле.ПутьКДанным = КолонкаЗапроса.Псевдоним;
		Поле.ТипЗначения = КолонкаЗапроса.ТипЗначения;
		
		ВыбранноеПолеКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(КолонкаЗапроса.Псевдоним);
	
	КонецЦикла;
	
	Если НЕ Отбор = Неопределено Тогда
		Для каждого ЭлементыОтбора Из Отбор Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор,
				ЭлементыОтбора.Ключ, ЭлементыОтбора.Значение, ВидСравненияКомпоновкиДанных.Равно);
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, 
		СхемаКомпоновкиДанных.НастройкиПоУмолчанию, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
		
	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных.ОсновнойЗапрос.Запрос;
	
	Для каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьЗапросВыборкойДанныхОбновления(Запрос)

	ТекстЗапросаВыборкаДанныхОбновления = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыСлужебный.ПрайсЛист, ТорговыеПредложенияТорговойПлощадки.ПрайсЛист) КАК ПрайсЛист,
	|	ЕСТЬNULL(ТоварыСлужебный.Номенклатура, ТорговыеПредложенияТорговойПлощадки.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыСлужебный.Характеристика, ТорговыеПредложенияТорговойПлощадки.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ТоварыСлужебный.Упаковка, ТорговыеПредложенияТорговойПлощадки.Упаковка) КАК Упаковка,
	|	ТоварыСлужебный.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации,
	|	ВЫБОР
	|		КОГДА ТоварыСлужебный.ПрайсЛист ЕСТЬ NULL
	|				ИЛИ ТоварыСлужебный.Отключено
	|			ТОГДА ""ОтключитьПубликацию""
	|		КОГДА ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию
	|				И НЕ ЕСТЬNULL(ТоварыСлужебный.Отключено, ИСТИНА)
	|			ТОГДА ""ДобавитьПубликацию""
	|		КОГДА ТорговыеПредложенияТорговойПлощадки.ПрайсЛист ЕСТЬ NULL
	|			ТОГДА ""ДобавитьПубликацию""
	|		ИНАЧЕ ""ИзменитьПубликацию""
	|	КОНЕЦ КАК Действие,
	|	ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений КАК ТекущееСостояние,
	|	ВЫБОР
	|		КОГДА ТоварыСлужебный.ПрайсЛист ЕСТЬ NULL
	|				ИЛИ ТоварыСлужебный.Отключено
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтключитьПубликацию
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыСлужебный КАК ТоварыСлужебный
	|		ПО ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = ТоварыСлужебный.ПрайсЛист
	|			И ТорговыеПредложенияТорговойПлощадки.Номенклатура = ТоварыСлужебный.Номенклатура
	|			И ТорговыеПредложенияТорговойПлощадки.Характеристика = ТоварыСлужебный.Характеристика
	|			И ТорговыеПредложенияТорговойПлощадки.Упаковка = ТоварыСлужебный.Упаковка
	|ГДЕ
	|	(ТорговыеПредложенияТорговойПлощадки.ПрайсЛист ЕСТЬ NULL
	|			ИЛИ НЕ ТорговыеПредложенияТорговойПлощадки.ПричинаИсключенияИзПубликации = ТоварыСлужебный.ПричинаИсключенияИзПубликации
	|			ИЛИ ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.ПустаяСсылка)
	|			ИЛИ НЕ ТорговыеПредложенияТорговойПлощадки.ОтключитьПубликацию = ЕСТЬNULL(ТоварыСлужебный.Отключено, ИСТИНА))";
	
	Запрос.Текст = СтрШаблон("%1%2;%2%3", Запрос.Текст, Символы.ПС, ТекстЗапросаВыборкаДанныхОбновления);

КонецПроцедуры

Функция ТипыСодержимогоИзображения()
	
	Результат = Новый Соответствие;

	Результат.Вставить("gif",  "image/gif");
	Результат.Вставить("jpeg", "image/jpeg");
	Результат.Вставить("jpg",  "image/jpeg");
	Результат.Вставить("jpe",  "image/jpeg");
	Результат.Вставить("png",  "image/png");
	Результат.Вставить("bmp",  "image/bmp");
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьСведенияОНоменклатуре(ДанныеНоменклатуры, ИсключаемыеСвойства = "") Экспорт
	
	Если ДанныеНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	
	Если НЕ ПустаяСтрока(ИсключаемыеСвойства) Тогда
		
		КлючиИсключаемыхПолей = Новый Структура(ИсключаемыеСвойства);
		МассивИсключаемыхПолей = Новый Массив;
		
		Для каждого КлючИсключаемогоПоля Из КлючиИсключаемыхПолей Цикл
			МассивИсключаемыхПолей.Добавить(КлючИсключаемогоПоля.Ключ);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, МассивИсключаемыхПолей, Истина)
		
	КонецЕсли;
	
	ИсключаемыеПоля = СтрСоединить(МассивПолей, ", ");
	
	МассивПолей.Добавить("Номенклатура");
	ИсключаемыеПоляНоменклатура = СтрСоединить(МассивПолей, ", ");
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("ИсходныйИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатуры.Колонки.Добавить("ИспользованиеХарактеристик");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("Упаковка");
	
	Для каждого СтрокаДанных Из ДанныеНоменклатуры Цикл
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.ИсходныйИндексСтроки = ДанныеНоменклатуры.Индекс(СтрокаДанных);
		НоваяСтрока.Номенклатура = СтрокаДанных.Номенклатура;
	КонецЦикла;
	
	ТорговыеПредложенияПереопределяемый.ЗаполнитьСведенияОНоменклатуре(ТаблицаНоменклатуры);
	
	Для каждого СтрокаДанных Из ТаблицаНоменклатуры Цикл
		
		ИсходнаяСтрока = ДанныеНоменклатуры[СтрокаДанных.ИсходныйИндексСтроки];
		
		Если СтрокаДанных.ИспользованиеХарактеристик = Неопределено
				И СтрокаДанных.ЕдиницаИзмерения = Неопределено
				И СтрокаДанных.Упаковка = Неопределено Тогда
			
			РеквизитыНоменклатуры = Новый Структура("ИспользованиеХарактеристик, ЕдиницаИзмерения, Упаковка");
			ТорговыеПредложенияПереопределяемый.ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(СтрокаДанных.Номенклатура, РеквизитыНоменклатуры);
			ЗаполнитьЗначенияСвойств(ИсходнаяСтрока, РеквизитыНоменклатуры, , ИсключаемыеПоля);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ИсходнаяСтрока, СтрокаДанных, , ИсключаемыеПоляНоменклатура);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОНоменклатуре(Номенклатура) Экспорт
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатуры.Колонки.Добавить("ИспользованиеХарактеристик");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("Упаковка");
	
	НоваяСтрока = ТаблицаНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	
	ЗаполнитьСведенияОНоменклатуре(ТаблицаНоменклатуры);
	
	СведенияОНоменклатуре = ТорговыеПредложения.НовыйПараметрыНоменклатуры();
	ЗаполнитьЗначенияСвойств(СведенияОНоменклатуре, ТаблицаНоменклатуры[0]);
	
	Возврат СведенияОНоменклатуре;
	
КонецФункции

Процедура ПроверитьРеквизитыКонтрагентов(ТаблицаКонтрагентов, ПрайсЛист, Отказ)
	
	Если ТаблицаКонтрагентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Новый Массив;
	
	Для каждого Строка Из ТаблицаКонтрагентов Цикл
		
		Если ПустаяСтрока(Строка.ИНН) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для контрагента %1 не задан ИНН'"), Строка.Ссылка);
			Ошибки.Добавить(ТекстОшибки);
		ИначеЕсли Не СтрДлина(Строка.ИНН) = 10 И Не СтрДлина(Строка.ИНН) = 12 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для контрагента %1 некорректно задан ИНН (%2) - ИНН должен содержать 10 или 12 символов'"), 
				Строка.Ссылка, Строка.ИНН);
			Ошибки.Добавить(ТекстОшибки);
		ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Строка.ИНН, , Истина) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для контрагента %1 некорректно задан ИНН (%2) - ИНН должен состоять только из цифр'"), 
				Строка.Ссылка, Строка.ИНН);
			Ошибки.Добавить(ТекстОшибки);
		ИначеЕсли ПустаяСтрока(Строка.КПП) Или Строка.КПП = "0" Тогда
			// Исключительные допустимые варианты
		ИначеЕсли Не СтрДлина(Строка.КПП) = 9 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для контрагента %1 некорректно задан КПП (%2) - КПП должен состоять из 9 цифр'"), 
				Строка.Ссылка, Строка.КПП);
			Ошибки.Добавить(ТекстОшибки);
		ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Строка.КПП) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для контрагента %1 некорректно задан КПП (%2) - КПП должен состоять только из цифр'"), 
				Строка.Ссылка, Строка.КПП);
			Ошибки.Добавить(ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ВидОперации = НСтр("ru = 'Создание/обновление прайс листа'");
	СписокОшибок = СтрСоединить(Ошибки, СтрШаблон(",%1", Символы.ПС));
	ТекстЗаписи = СтрШаблон(НСтр("ru = 'Некорректно заполнены сведения о контрагентах:%1.'"), СписокОшибок);
	ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстЗаписи, ТекстЗаписи, "ТорговыеПредложения", ПрайсЛист);
	
КонецПроцедуры

// Адрес изображения в хранилище.
// 
// Параметры:
//  АдресВСервисе - Строка - внешний адрес изображения.
//  ОтносительныеАдресаКартинок - Булево - Относительные адреса картинок.
// 
// Возвращаемое значение:
//  Строка - Адрес изображения в хранилище
//
Функция АдресИзображенияВХранилище(Знач АдресВСервисе, Знач ОтносительныеАдресаКартинок) Экспорт
	
	Адрес = "";
	ДанныеИзображения = ДанныеФайлаПоВнешнейСсылке(АдресВСервисе, ОтносительныеАдресаКартинок);
	Если ДанныеИзображения.Статус 
		И ЭтоФайлКартинки(ДанныеИзображения.Путь) Тогда
			Адрес = ДанныеИзображения.Путь;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Это файл картинки.
// 
// Параметры:
//  ПроверяемоеЗначение - ДвоичныеДанные, Строка - данные картинки или адрес во временном хранилище.
// 
// Возвращаемое значение:
//  Булево - Это файл картинки
//
Функция ЭтоФайлКартинки(ПроверяемоеЗначение) Экспорт
	
	ЭтоФайлКартинки = Истина;
	ДвоичныеДанныеИзображения = ПроверяемоеЗначение;
	
	Если ЭтоАдресВременногоХранилища(ПроверяемоеЗначение) Тогда
		ДвоичныеДанныеИзображения = ПолучитьИзВременногоХранилища(ПроверяемоеЗначение);
	КонецЕсли;
	
	// Проверим ДвоичныеДанныеИзображения на корректность, в представление запишем пояснение.
	МеханизмКартинка = Новый Картинка(ДвоичныеДанныеИзображения);
	Если    МеханизмКартинка.Формат() = Неопределено 
		Или МеханизмКартинка.Формат() = ФорматКартинки.НеизвестныйФормат Тогда
		
		ЭтоФайлКартинки = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоФайлКартинки;
	
КонецФункции

// Условное оформление группы синхронизации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  РегламентоеЗаданиеВключено - Неопределено, Булево - Регламентое задание включено
//
Процедура УсловноеОформлениеГруппыСинхронизации(Форма, РегламентоеЗаданиеВключено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьОбменБизнесСеть = БизнесСеть.ИспользоватьОбменБизнесСеть();
	Форма.Элементы.СинхронизацияПоРасписанию.Доступность = ИспользоватьОбменБизнесСеть;
	
	РегламентноеЗаданиСинхронизации = 
		ОбщегоНазначенияБЭД.РегламентноеЗаданиеПоНаименованию(
			Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.Имя);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.АвтоматическиСинхронизировать = РегламентноеЗаданиСинхронизации.Использование;
	
	ДоступностьАвтоматическойПубликации = 
		Не ОбщегоНазначения.РазделениеВключено() 
		И Форма.АвтоматическиСинхронизировать;
	
	// Получение расписание задания публикации торговых предложений.
	Форма.Элементы.Расписание.Заголовок   = РегламентноеЗаданиСинхронизации.Расписание;
	Форма.Элементы.Расписание.Доступность = ДоступностьАвтоматическойПубликации;
	Форма.Элементы.НастроитьРасписание.Доступность  = ДоступностьАвтоматическойПубликации;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияПозицийТорговыхПредложений

Процедура ОбновитьТорговыеПредложенияТорговойПлощадки(Знач ПараметрыПроцедуры, АдресРезультата) Экспорт 

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ТорговыеПредложенияСлужебный.ОбновитьТорговыеПредложенияТорговойПлощадки");
	КоличествоЗаписей = 0;
	
	ВыполнитьОбновлениеТорговыхПредложенийТорговойПлощадки(ПараметрыПроцедуры, АдресРезультата, КоличествоЗаписей);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоЗаписей / 10);

КонецПроцедуры

Процедура ВыполнитьОбновлениеТорговыхПредложенийТорговойПлощадки(Знач ПараметрыПроцедуры, АдресРезультата, КоличествоЗаписей = 0)
	Перем ЗначениеОтбора;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Отбор = Новый Структура;
		СкопироватьСвойстваСтруктуры(
			Отбор, ПараметрыПроцедуры.Отбор, 
			"ПрайсЛист, Номенклатура, Характеристика, Упаковка");
		
		Обработки.ТорговыеПредложения.ОбновитьСтатистикуСостояний(Отбор, АдресРезультата);
		
		// Собираем текст запроса
		Запрос = Новый Запрос;
		ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
		ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
		
		// Дополнение служебными данными.
		ДополнитьЗапросСлужебнымиТаблицами(Запрос);
		ДополнитьЗапросВыборкойДанныхОбновления(Запрос);
		
		УстановитьОтборыКомпоновкиДанныхВЗапрос(Запрос, Отбор);
		
		Если Отбор.Свойство("ПрайсЛист", ЗначениеОтбора) Тогда
			Запрос.УстановитьПараметр("ПрайсЛист", ЗначениеОтбора);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(ЗначениеОтбора);
		Иначе
			ПрайсСсылка = Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип.ПривестиЗначение();
			ПространствоБлокировок = ПрайсСсылка.Метаданные().ПолноеИмя(); 
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировку(ПространствоБлокировок);
		КонецЕсли;
		
		РезультатЗапросаИзменяемыеДанные = Запрос.Выполнить();
		
		Если РезультатЗапросаИзменяемыеДанные.Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВыборкаЗапроса = РезультатЗапросаИзменяемыеДанные.Выбрать();
		
		Счетчик = 0;
		
		ТребуетсяСчитатьСтатистику = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
		
		Если ТребуетсяСчитатьСтатистику Тогда
			ОбщийМодульРаботаСНоменклатуройСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
			ТаблицаОтличий = ТаблицаОтличийДляСтатистики();
		КонецЕсли;
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			УстановитьБлокировкуТорговыхПредложений(РезультатЗапросаИзменяемыеДанные);
			
			НаборЗаписей = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрайсЛист.Установить(ВыборкаЗапроса.ПрайсЛист);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаЗапроса.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаЗапроса.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(ВыборкаЗапроса.Упаковка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗапроса);
			Запись.ДатаИзменения = ТекущаяДатаСеанса();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтатистики");
			
			НаборЗаписей.Записать(Истина);
			
			Счетчик = Счетчик + 1;
			
			Если Счетчик % 1000 = 0 Тогда
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				УстановитьБлокировкуТорговыхПредложений(РезультатЗапросаИзменяемыеДанные);
			КонецЕсли;
			
			Если ТребуетсяСчитатьСтатистику И ВыборкаЗапроса.Действие = "ОтключитьПубликацию" Тогда
				
				НоваяСтрока = ТаблицаОтличий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
				НоваяСтрока.Количество = -1;
				
			ИначеЕсли ТребуетсяСчитатьСтатистику И ВыборкаЗапроса.Действие = "ДобавитьПубликацию" Тогда
				
				НоваяСтрока = ТаблицаОтличий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
				НоваяСтрока.Количество = 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить обновление торгового предложения'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Торговые предложения.Обновление торговых предложений торговой площадки'", 
				ОбщегоНазначения.КодОсновногоЯзыка()) , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстОшибки, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если ТребуетсяСчитатьСтатистику Тогда
		ОбщийМодульРаботаСНоменклатуройСлужебный.СкорректироватьСтатистику(ТаблицаОтличий);
	КонецЕсли;
	
	КоличествоЗаписей = ВыборкаЗапроса.Количество();
	
КонецПроцедуры

Функция ТаблицаОтличийДляСтатистики() Экспорт 

	ТаблицаОтличий = Новый ТаблицаЗначений;
	
	ТаблицаОтличий.Колонки.Добавить("ПрайсЛист"      , Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип);
	ТаблицаОтличий.Колонки.Добавить("Номенклатура"   , Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	ТаблицаОтличий.Колонки.Добавить("Характеристика" , Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	ТаблицаОтличий.Колонки.Добавить("Количество"     , Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаОтличий;

КонецФункции

Процедура УстановитьБлокировкуТорговыхПредложений(РезультатЗапроса)

	БлокировкаДанных = Новый БлокировкаДанных;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ТорговыеПредложенияТорговойПлощадки");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрайсЛист"      , "ПрайсЛист");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура"   , "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика" , "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Упаковка"       , "Упаковка");

	БлокировкаДанных.Заблокировать();

КонецПроцедуры

// Изменение состояний публикации торговых предложений.
//
// Параметры:
//  ПараметрыМетода	 - Структура:
//    * ВыделенныеСтроки        - ДанныеФормыЭлементКоллекции - коллекция прайс-листов.
//    * ЭтоУдаление             - Булево - режим удаления прайс-листов.
//    * ЭтоОтменаУдаления       - Булево - режим отмена удаления прайс-листов.
//    * ЭтоОтключениеПубликации - Булево - режим отключения публикации прайс-листов.
//    * ЭтоВключениеПубликации  - Булево - режим включения публикации прайс-листов.
//
Процедура ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода) Экспорт
	РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода);
КонецПроцедуры

// Установить состояние торговых предложений.
// 
// Параметры:
//  ИзмененныеПрайсЛисты - Соответствие - Измененные прайс листы.
//  СостояниеОшибка      - Булево - установить состояние ошибка синхронизации.
//
Процедура УстановитьСостояниеТорговыхПредложений(ИзмененныеПрайсЛисты, СостояниеОшибка = Ложь)
	РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.
		УстановитьСостояниеТорговыхПредложений(ИзмененныеПрайсЛисты, СостояниеОшибка);
КонецПроцедуры

Процедура ОбновитьСтатистикуОпубликованныхТорговыхПредложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
	               |	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация,
	               |	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))) КАК КоличествоОпубликованных
	               |ИЗ
	               |	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	               |		ПО СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = ТорговыеПредложенияТорговойПлощадки.ПрайсЛист
	               |ГДЕ
	               |	ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений = ЗНАЧЕНИЕ(Перечисление.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение,
	               |	СостоянияСинхронизацииТорговыеПредложения.Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СостоянияСинхронизацииТорговыеПредложения");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТорговоеПредложение", "ТорговоеПредложение");
		БлокировкаДанных.Заблокировать();
		
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
		
			МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса);
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.КоличествоОпубликованных = ВыборкаЗапроса.КоличествоОпубликованных;
			МенеджерЗаписи.Записать(Истина);
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	
КонецПроцедуры

Процедура СкопироватьСвойстваСтруктуры(Приемник, Источник, Свойства)
	Перем ЗначениеСвойства;
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	КопируемыеСвойства = Новый Структура(Свойства);
	
	Для каждого КопируемоеСвойство Из КопируемыеСвойства Цикл
		Если Источник.Свойство(КопируемоеСвойство.Ключ, ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Приемник.Вставить(КопируемоеСвойство.Ключ, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаТорговыхПредложений

Процедура ПроверитьИзменениеПрайсЛистов(Отбор = Неопределено, СведенияОТорговомПредложении = Неопределено)
	
	Если СведенияОТорговомПредложении = Неопределено Тогда
		СведенияОТорговомПредложении = ПолучитьДанныеПубликации("ПрайсЛистыСлужебный, Контакты, Контрагенты", Отбор);
	КонецЕсли;
	
	ВыборкаПрайсЛисты  = СведенияОТорговомПредложении.ПрайсЛистыСлужебный.Выбрать();
	КонтактыОбщиеТаблица    = СведенияОТорговомПредложении.Контакты.Выгрузить();
	ВыборкаКонтрагенты = СведенияОТорговомПредложении.Контрагенты.Выбрать();
	
	ТаблицаХешейПрайсЛистов = Новый ТаблицаЗначений;
	ТаблицаХешейПрайсЛистов.Колонки.Добавить("ПрайсЛист", Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип);
	ТаблицаХешейПрайсЛистов.Колонки.Добавить("Хеш",       Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.Ресурсы.Хеш.Тип);
	
	Пока ВыборкаПрайсЛисты.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("ПрайсЛист", ВыборкаПрайсЛисты.Ссылка);
		
		Контрагенты = Новый Массив;
		ВыборкаКонтрагенты.Сбросить();
		Пока ВыборкаКонтрагенты.НайтиСледующий(СтруктураПоиска) Цикл
			Контрагенты.Добавить(ВыборкаКонтрагенты.Контрагент);
		КонецЦикла;
		
		КонтактныеДанные = КонтактыОбщиеТаблица.НайтиСтроки(СтруктураПоиска);
		
		ПараметрыЗапроса = ДанныеПрайсЛиста(ВыборкаПрайсЛисты, КонтактныеДанные[0], Контрагенты);
		
		НоваяСтрока = ТаблицаХешейПрайсЛистов.Добавить();
		НоваяСтрока.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
		НоваяСтрока.Хеш       = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ПараметрыЗапроса);
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаХешейПрайсЛистов", ТаблицаХешейПрайсЛистов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаХешейПрайсЛистов.ПрайсЛист КАК ПрайсЛист,
	|	ТаблицаХешейПрайсЛистов.Хеш КАК Хеш
	|ПОМЕСТИТЬ ТаблицаХешейПрайсЛистов
	|ИЗ
	|	&ТаблицаХешейПрайсЛистов КАК ТаблицаХешейПрайсЛистов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация,
	|	ТаблицаХешейПрайсЛистов.Хеш КАК Хеш
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаХешейПрайсЛистов КАК ТаблицаХешейПрайсЛистов
	|		ПО СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение = ТаблицаХешейПрайсЛистов.ПрайсЛист
	|ГДЕ
	|	НЕ СостоянияСинхронизацииТорговыеПредложения.Хеш = ТаблицаХешейПрайсЛистов.Хеш";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
	
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса, "ТорговоеПредложение, Организация");
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Хеш = ВыборкаЗапроса.Хеш;
		МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
		МенеджерЗаписи.Записать(Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИзменениеПрайсЛистовВФоне(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт 
	ПроверитьИзменениеПрайсЛистов(ПараметрыПроцедуры);
КонецПроцедуры

Функция КорректноЗаполненИНН(ИНН)
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Ложь;
	ИначеЕсли Не СтрДлина(ИНН) = 10 И Не СтрДлина(ИНН) = 12 Тогда
		Возврат Ложь;
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН, , Истина) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция КорректноЗаполненКПП(КПП)
	
	Если ПустаяСтрока(КПП) Тогда
		Возврат Истина;
	ИначеЕсли Не СтрДлина(КПП) = 9 Тогда
		Возврат Ложь;
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КПП, , Истина) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадкиВФоне(
		ДлительнаяОперация, Отбор, УникальныйИдентификаторФормы) Экспорт
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Проверка заполнения данных торговых предложений в 1С:Бизнес-сеть'");
	ИмяПроцедуры        = "ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки";
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		КлючЗадания = СтрШаблон("ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки%1", 
			Формат(ПараметрыСеанса.ОбластьДанныхЗначение, "ЧГ="));
	Иначе
		КлючЗадания = "ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки";
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания         = КлючЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, Отбор);
	
КонецПроцедуры

Процедура ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки(Отбор, АдресРезультата = Неопределено) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ТорговыеПредложенияСлужебный.ПроверитьЗаписиТорговыеПредложенияТорговойПлощадки");
	
	ТаблицыДляПолучения = 
		"ТоварыСлужебный, ПрайсЛистыСлужебный, Контакты, СвойстваСлужебный, Штрихкоды, Контрагенты, ИзображенияСлужебный";
	
	НастройкиПодсистемы = ТорговыеПредложенияПовтИсп.НастройкиПодсистемы();
	ВариантыПубликацииСкидок = НастройкиПодсистемы.ВариантыПубликацииСкидок;
	
	УказанВариантПубликацииВидыЦен = Ложь;
	Если ВариантыПубликацииСкидок.Найти(Перечисления.ВариантыПубликацииСкидок.ВидыЦен) <> Неопределено Тогда
		УказанВариантПубликацииВидыЦен = Истина;
		ТаблицыДляПолучения = СтрШаблон(
			"%1, СкидкиЗаОбъемПродажВидыЦен, СкидкиПроцентСуммаВидыЦен", ТаблицыДляПолучения);
	КонецЕсли;
	
	УказанВариантПубликацииВидыСкидок = Ложь;
	Если ВариантыПубликацииСкидок.Найти(Перечисления.ВариантыПубликацииСкидок.ВидыСкидок) <> Неопределено Тогда
		УказанВариантПубликацииВидыСкидок = Истина;
		ТаблицыДляПолучения = СтрШаблон("%1, СкидкиЗаОбъемПродаж, СкидкиПроцентСумма", ТаблицыДляПолучения);
	КонецЕсли;
	
	// Собираем текст запроса
	СведенияОТорговомПредложении = ПолучитьДанныеПубликации(ТаблицыДляПолучения, Отбор);
	
	ПроверитьИзменениеПрайсЛистов(Отбор, СведенияОТорговомПредложении);
	
	РезультатЗапросаТовары      = СведенияОТорговомПредложении.ТоварыСлужебный;
	РезультатЗапросаПрайсЛисты  = СведенияОТорговомПредложении.ПрайсЛистыСлужебный;
	РезультатЗапросаКонтакты    = СведенияОТорговомПредложении.Контакты;
	РезультатЗапросаКонтрагенты = СведенияОТорговомПредложении.Контрагенты;
	РезультатЗапросаСвойства    = СведенияОТорговомПредложении.СвойстваСлужебный;
	РезультатЗапросаШтрихкоды   = СведенияОТорговомПредложении.Штрихкоды;
	РезультатЗапросаИзображения = СведенияОТорговомПредложении.ИзображенияСлужебный;
	
	Скидки = НовыйСкидки();
	Если УказанВариантПубликацииВидыЦен Тогда
		
		РезультатЗапросаСкидкиЗаОбъемПродажВидыЦен = Неопределено;
		Если ЕстьСвойство(СведенияОТорговомПредложении, "СкидкиЗаОбъемПродажВидыЦен",
			РезультатЗапросаСкидкиЗаОбъемПродажВидыЦен) Тогда
			Скидки.СкидкиЗаОбъемПродажВидыЦен = РезультатЗапросаСкидкиЗаОбъемПродажВидыЦен.Выгрузить();
			Скидки.СкидкиЗаОбъемПродажВидыЦен.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		РезультатЗапросаСкидкиПроцентСуммаВидыЦен = Неопределено;
		Если ЕстьСвойство(СведенияОТорговомПредложении, "СкидкиПроцентСуммаВидыЦен",
			РезультатЗапросаСкидкиПроцентСуммаВидыЦен) Тогда
			Скидки.СкидкиПроцентСуммаВидыЦен = РезультатЗапросаСкидкиПроцентСуммаВидыЦен.Выгрузить();
			Скидки.СкидкиПроцентСуммаВидыЦен.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказанВариантПубликацииВидыСкидок Тогда
		
		РезультатЗапросаСкидкиЗаОбъемПродаж = Неопределено;
		Если ЕстьСвойство(СведенияОТорговомПредложении, "СкидкиЗаОбъемПродаж", РезультатЗапросаСкидкиЗаОбъемПродаж) Тогда
			Скидки.СкидкиЗаОбъемПродаж = РезультатЗапросаСкидкиЗаОбъемПродаж.Выгрузить();
			Скидки.СкидкиЗаОбъемПродаж.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
		РезультатЗапросаСкидкиПроцентСумма = Неопределено;
		Если ЕстьСвойство(СведенияОТорговомПредложении, "СкидкиПроцентСумма", РезультатЗапросаСкидкиПроцентСумма) Тогда
			Скидки.СкидкиПроцентСумма = РезультатЗапросаСкидкиПроцентСумма.Выгрузить();
			Скидки.СкидкиПроцентСумма.Индексы.Добавить("Номенклатура");
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаСвойств              = РезультатЗапросаСвойства.Выгрузить();
	ТаблицаСвойств.Индексы.Добавить("Номенклатура, Характеристика");
	
	ТаблицаШтрихкодов           = РезультатЗапросаШтрихкоды.Выгрузить();
	ТаблицаШтрихкодов.Индексы.Добавить("Номенклатура, Характеристика");
	
	ТаблицаИзображения          = РезультатЗапросаИзображения.Выгрузить();
	ТаблицаИзображения.Индексы.Добавить("ПрайсЛист, Номенклатура, Характеристика");
	
	ТаблицаТоваров = РезультатЗапросаТовары.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаЧислитель");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаЗнаменатель");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Штрихкоды", Новый ОписаниеТипов("Массив"));
	
	ТаблицаТоваров.Индексы.Добавить("ПрайсЛист, Номенклатура, Характеристика, Упаковка");
	ТаблицаТоваров.Индексы.Добавить("Номенклатура, Характеристика, Упаковка");
	
	ОпределитьТекущееСостояниеПозицийТорговыхПредложений(ТаблицаТоваров);
	ТорговыеПредложенияПереопределяемый.ДобавитьСлужебныеКолонкиТовары(ТаблицаТоваров, Ложь);
	
	ПроверяемыеРеквизитыПрайсЛисты = НоваяТаблицаПроверок();
	ДобавитьПроверку(ПроверяемыеРеквизитыПрайсЛисты, "Наименование"       , "ПрайсЛисты.Наименование"         , Истина);
	ДобавитьПроверку(ПроверяемыеРеквизитыПрайсЛисты, "ДатаНачалаДействия" , "ПрайсЛисты.ДатаНачалаДействия"   , Истина);
	ДобавитьПроверку(ПроверяемыеРеквизитыПрайсЛисты, "АдресЭлектроннойПочты", "ПрайсЛисты.АдресЭлектроннойПочты", Истина);
	
	ПроверяемыеРеквизитыКонтакты = НоваяТаблицаПроверок();
	ДобавитьПроверку(ПроверяемыеРеквизитыКонтакты, "ПредставлениеКонтакта"  , "Контакты.ПредставлениеКонтакта", Истина);
	ДобавитьПроверку(ПроверяемыеРеквизитыКонтакты, "Телефон"                , "Контакты.Телефон"              , Ложь);
	
	ПроверяемыеРеквизитыТовары = НоваяТаблицаПроверок();
	ДобавитьПроверку(ПроверяемыеРеквизитыТовары, "НаименованиеНоменклатуры" , "Товары.НаименованиеНоменклатуры" , Истина);
	ДобавитьПроверку(ПроверяемыеРеквизитыТовары, "Артикул"                  , "Товары.Артикул"                  , Ложь);
	ДобавитьПроверку(ПроверяемыеРеквизитыТовары, "УпаковкаКод"              , "Товары.УпаковкаКод"              , Истина);
	ДобавитьПроверку(ПроверяемыеРеквизитыТовары, "НаименованиеУпаковки"     , "Товары.НаименованиеУпаковки"     , Истина);
	
	ПроверяемыеРеквизитыИзображенияТоваров = НоваяТаблицаПроверок();
	ДобавитьПроверку(ПроверяемыеРеквизитыИзображенияТоваров, "ТоварыИзображения", "Товары.Изображения", Ложь);
	
	ПроверяемыеРеквизитыСкидкиЗаОпт = НоваяТаблицаПроверок();
	ДобавитьПроверку(ПроверяемыеРеквизитыСкидкиЗаОпт, "Цена", "СкидкиЗаОпт.Цена", Ложь);
	
	ПроверяемыеРеквизитыСкидки = НоваяТаблицаПроверок();
	ДобавитьПроверку(ПроверяемыеРеквизитыСкидки, "Цена", "Скидки.Цена", Ложь);
	
	ТаблицаОшибокПрайсЛисты = НоваяТаблицаОшибок();
	ТаблицаОшибокПрайсЛисты.Колонки.Добавить("ПрайсЛист", Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип);
	
	ПредложенияСЗавершеннойПубликацией = Новый Массив;
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ВыборкаПрайсЛисты = РезультатЗапросаПрайсЛисты.Выбрать();
	КонтактыОбщиеТаблица = РезультатЗапросаКонтакты.Выгрузить();
	
	Пока ВыборкаПрайсЛисты.Следующий() Цикл
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыПрайсЛисты Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПрайсЛисты[ПроверяемыйРеквизит.ИмяРеквизитаСтроки]) Тогда
				СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокПрайсЛисты, ПроверяемыйРеквизит.ПолноеИмяРеквизита,
					ПроверяемыйРеквизит.ЯвляетсяОшибкой);
				СтрокаОшибки.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
			КонецЕсли;
		КонецЦикла;
		Если Не ВыборкаПрайсЛисты.ОрганизацияЗарегистрирована Тогда
			СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокПрайсЛисты, "РегистрацияОрганизации", Истина);
			СтрокаОшибки.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
		КонецЕсли;
		Если ВыборкаПрайсЛисты.ДатаОкончанияДействия <> '00010101'
			И (НачалоДня(ВыборкаПрайсЛисты.ДатаОкончанияДействия) < НачалоДня(ТекущаяДатаСеанса)
				ИЛИ ВыборкаПрайсЛисты.ДатаОкончанияДействия <= ВыборкаПрайсЛисты.ДатаНачалаДействия) Тогда
				СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокПрайсЛисты, "ПрайсЛисты.ДатаОкончанияДействия", Истина);
				СтрокаОшибки.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
				ПредложенияСЗавершеннойПубликацией.Добавить(ВыборкаПрайсЛисты.Ссылка);
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ПрайсЛист", ВыборкаПрайсЛисты.Ссылка);
		Контакты = КонтактыОбщиеТаблица.НайтиСтроки(ПараметрыОтбора)[0];
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыКонтакты Цикл
			
			ЗначениеПроверяемогоРеквизита = Контакты[ПроверяемыйРеквизит.ИмяРеквизитаСтроки];
			Если ПустаяСтрока(ЗначениеПроверяемогоРеквизита) 
				Или (ПроверяемыйРеквизит.ИмяРеквизитаСтроки = "Телефон" И Не ТелефонКорректен(Контакты.Телефон)) Тогда
				
				СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокПрайсЛисты, ПроверяемыйРеквизит.ПолноеИмяРеквизита,
					ПроверяемыйРеквизит.ЯвляетсяОшибкой);
				СтрокаОшибки.ПрайсЛист = ВыборкаПрайсЛисты.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Ссылка");
	
	ВыборкаКонтрагентов = РезультатЗапросаКонтрагенты.Выбрать();
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКонтрагентов.Добавить();
		НоваяСтрока.Ссылка = ВыборкаКонтрагентов.Контрагент;
		
	КонецЦикла;
	
	ТаблицаКонтрагентов.Свернуть("Ссылка");
	ТаблицаКонтрагентов.Индексы.Добавить("Ссылка");
	
	ТаблицаКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	
	БизнесСеть.ЗаполнитьРеквизитыКонтрагентов(ТаблицаКонтрагентов);
	
	ВыборкаКонтрагентов.Сбросить();
	
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		
		СтрокаКонтрагента = ТаблицаКонтрагентов.Найти(ВыборкаКонтрагентов.Контрагент, "Ссылка");
		
		Если СтрокаКонтрагента = Неопределено Или Не КорректноЗаполненИНН(СтрокаКонтрагента.ИНН) Тогда
			ПолноеИмяРеквизита = СтрШаблон("КонтрагентыСлужебный.КонтрагентИНН|%1", ЗначениеВСтрокуВнутр(ВыборкаКонтрагентов.Контрагент));
			СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокПрайсЛисты, ПолноеИмяРеквизита, Истина);
			СтрокаОшибки.ПрайсЛист = ВыборкаКонтрагентов.ПрайсЛист;
		КонецЕсли;
		Если СтрокаКонтрагента = Неопределено Или Не КорректноЗаполненКПП(СтрокаКонтрагента.КПП) Тогда
			ПолноеИмяРеквизита = СтрШаблон("КонтрагентыСлужебный.КонтрагентКПП|%1", ЗначениеВСтрокуВнутр(ВыборкаКонтрагентов.Контрагент));
			СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокПрайсЛисты, ПолноеИмяРеквизита, Истина);
			СтрокаОшибки.ПрайсЛист = ВыборкаКонтрагентов.ПрайсЛист;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОшибокСвойства = НоваяТаблицаОшибок();
	ТаблицаОшибокСвойства.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	ТаблицаОшибокСвойства.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	ТаблицаОшибокСвойства.Колонки.Добавить("ДополнительныйРеквизит", Метаданные.ОпределяемыеТипы.ДополнительныеРеквизитыРаботаСНоменклатурой.Тип);
	ТаблицаОшибокСвойства.Индексы.Добавить("Номенклатура, Характеристика");
	
	ВыборкаСвойства = РезультатЗапросаСвойства.Выбрать();
	
	Пока ВыборкаСвойства.Следующий() Цикл
		Если НЕ ПроверитьЗначениеДополнительногоРеквизита(ВыборкаСвойства) Тогда
			СтрокаОшибки = ДобавитьОшибку(ТаблицаОшибокСвойства, "Свойства.Свойство", Истина);
			СтрокаОшибки.Номенклатура = ВыборкаСвойства.Номенклатура;
			СтрокаОшибки.Характеристика = ВыборкаСвойства.Характеристика;
			СтрокаОшибки.ДополнительныйРеквизит = ВыборкаСвойства.Свойство;
		КонецЕсли;
	КонецЦикла;
	
	ДопустимыеЗначенияСтавокНДС = Новый Массив;
	ДопустимыеЗначенияСтавокНДС.Добавить("VAT_WITHOUT");
	ДопустимыеЗначенияСтавокНДС.Добавить("VAT_10");
	ДопустимыеЗначенияСтавокНДС.Добавить("VAT_20");
	
	ИзмененныеПрайсЛисты = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьБлокировкуТорговыхПредложений(ТаблицаТоваров);
		
		Для Каждого СтрокаТаблицаТоваров Из ТаблицаТоваров Цикл
			
			// Если процедура выполняется без отбора по прайс листу, спозиционируемся на нужной выборке прайс листа.
			Если Не ЗначениеЗаполнено(Отбор) Тогда
				ВыборкаПрайсЛисты.Сбросить();
				ПараметрыПоискаПрайсЛиста = Новый Структура("Ссылка", СтрокаТаблицаТоваров.ПрайсЛист);
				ВыборкаПрайсЛисты.НайтиСледующий(ПараметрыПоискаПрайсЛиста);
			КонецЕсли;
			
			Если ВыборкаПрайсЛисты.Отключено Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаОшибок = НоваяТаблицаОшибок();
			ТаблицаОшибок.Колонки.Добавить("ДополнительныйРеквизит", Метаданные.ОпределяемыеТипы.ДополнительныеРеквизитыРаботаСНоменклатурой.Тип);
			
			СтрокиОшибокПрайсЛиста = ТаблицаОшибокПрайсЛисты.НайтиСтроки(Новый Структура("ПрайсЛист", СтрокаТаблицаТоваров.ПрайсЛист));
			
			Для каждого СтрокаОшибокПрайсЛиста Из СтрокиОшибокПрайсЛиста Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаОшибок.Добавить(), СтрокаОшибокПрайсЛиста);
			КонецЦикла;
			
			СтрокиОшибокСвойств = ТаблицаОшибокСвойства.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
				СтрокаТаблицаТоваров.Номенклатура, СтрокаТаблицаТоваров.Характеристика));
			
			Для каждого СтрокаОшибокСвойств Из СтрокиОшибокСвойств Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаОшибок.Добавить(), СтрокаОшибокСвойств);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаТаблицаТоваров.ПричинаИсключенияИзПубликации) Тогда
				ДобавитьОшибку(ТаблицаОшибок, "ПричинаИсключенияИзПубликации", Истина);
			КонецЕсли;
			
			СтавкаНДССериализованная = ТорговыеПредложенияПовтИсп.СтавкаНДССериализованная(СтрокаТаблицаТоваров.СтавкаНДС);
			
			Если ДопустимыеЗначенияСтавокНДС.Найти(СтавкаНДССериализованная) = Неопределено Тогда
				ДобавитьОшибку(ТаблицаОшибок, "Товары.СтавкаНДС", Истина);
			КонецЕсли;
			
			Если СтрокаТаблицаТоваров.ЕстьОшибки 
				И ТаблицаОшибок.Количество() = 0
				И СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка Тогда
				
				Если ПустаяСтрока(СтрокаТаблицаТоваров.КонтрольРеквизитов) Тогда
					ДобавитьОшибку(ТаблицаОшибок, "ОшибкаПубликацииСервиса", Истина);
				Иначе
					ДобавитьОшибку(ТаблицаОшибок, СтрокаТаблицаТоваров.КонтрольРеквизитов, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			ПроверитьРеквизитыСтроки(СтрокаТаблицаТоваров, ПроверяемыеРеквизитыТовары, ТаблицаОшибок);
			
			ПараметрыОтбораИзображений = Новый Структура;
			ПараметрыОтбораИзображений.Вставить("ПрайсЛист", СтрокаТаблицаТоваров.ПрайсЛист);
			ПараметрыОтбораИзображений.Вставить("Номенклатура", СтрокаТаблицаТоваров.Номенклатура);
			ПараметрыОтбораИзображений.Вставить("Характеристика", СтрокаТаблицаТоваров.Характеристика);
			ТаблицаИзображенийТовара = ТаблицаИзображения.НайтиСтроки(ПараметрыОтбораИзображений);
			ПроверитьРеквизитыИзображенияТоваров(
				ТаблицаИзображенийТовара, ПроверяемыеРеквизитыИзображенияТоваров, ТаблицаОшибок);
			
			ПроверитьРеквизитыМатрицыЦен(ВыборкаПрайсЛисты, СтрокаТаблицаТоваров, Скидки, 
				ПроверяемыеРеквизитыСкидкиЗаОпт, ПроверяемыеРеквизитыСкидки, ТаблицаОшибок);
			
			ИнформацияОбОшибках = ПолучитьИнформациюОбОшибках(
				СтрокаТаблицаТоваров, ТаблицаОшибок, СтрокаТаблицаТоваров.Публикуется);
			
			ТаблицаПрайсЛисты = РезультатЗапросаПрайсЛисты.Выгрузить();
			СтрокаПрайсЛиста = ТаблицаПрайсЛисты.Найти(ВыборкаПрайсЛисты.Ссылка, "Ссылка");
			ДанныеПрайсЛиста = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПрайсЛиста);
			ДанныеПрайсЛиста.Вставить("СтрокаТаблицаТоваров"      , СтрокаТаблицаТоваров);
			ДанныеПрайсЛиста.Вставить("ТаблицаСвойств"            , ТаблицаСвойств);
			ДанныеПрайсЛиста.Вставить("ТаблицаШтрихкодов"         , ТаблицаШтрихкодов);
			ДанныеПрайсЛиста.Вставить("ТаблицаИзображения"        , ТаблицаИзображенийТовара);
			ДанныеПрайсЛиста.Вставить("СкидкиЗаОбъемПродажВидыЦен", Скидки.СкидкиЗаОбъемПродажВидыЦен);
			ДанныеПрайсЛиста.Вставить("СкидкиПроцентСуммаВидыЦен" , Скидки.СкидкиПроцентСуммаВидыЦен);
			ДанныеПрайсЛиста.Вставить("СкидкиЗаОбъемПродаж"       , Скидки.СкидкиЗаОбъемПродаж);
			ДанныеПрайсЛиста.Вставить("СкидкиПроцентСумма"        , Скидки.СкидкиПроцентСумма);
			ДанныеПрайсЛиста.Вставить("ХешНовый"                  , Неопределено);
			
			ДанныеПозицииТорговогоПредложенияИзменены = ДанныеПозицииТорговогоПредложенияИзменены(ДанныеПрайсЛиста);
			
			ИзменяемыеРеквизиты = Новый Структура;
			
			Если Не ПредложенияСЗавершеннойПубликацией.Найти(СтрокаТаблицаТоваров.ПрайсЛист) = Неопределено
				И НЕ СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка Тогда
				ИзменяемыеРеквизиты.Вставить("СостояниеПубликацииТорговыхПредложений",
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка);
			ИначеЕсли ИнформацияОбОшибках.ЕстьОшибки
					И Не СтрокаТаблицаТоваров.ЕстьОшибки
					И (СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации
						ИЛИ СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
						Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ПустаяСсылка()) Тогда
				ИзменяемыеРеквизиты.Вставить("СостояниеПубликацииТорговыхПредложений",
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка);
			ИначеЕсли Не ИнформацияОбОшибках.ЕстьОшибки
					И СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
				Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Ошибка Тогда
				ИзменяемыеРеквизиты.Вставить("СостояниеПубликацииТорговыхПредложений",
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации);
			ИначеЕсли Не СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
						Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации
					И НЕ ИнформацияОбОшибках.ЕстьОшибки И ДанныеПозицииТорговогоПредложенияИзменены Тогда
				ИзменяемыеРеквизиты.Вставить("СостояниеПубликацииТорговыхПредложений",
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации);
			ИначеЕсли СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений =
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано
					И ДанныеПозицииТорговогоПредложенияИзменены Тогда
				ИзменяемыеРеквизиты.Вставить("СостояниеПубликацииТорговыхПредложений",
					Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.ОжидаетПубликации);
			КонецЕсли;
			
			РезультирующееСостояние = ?(ИзменяемыеРеквизиты.Свойство("СостояниеПубликацииТорговыхПредложений"),
				ИзменяемыеРеквизиты.СостояниеПубликацииТорговыхПредложений, СтрокаТаблицаТоваров.СостояниеПубликацииТорговыхПредложений);
			
			Если РезультирующееСостояние = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано 
					И ИнформацияОбОшибках.ЕстьОшибки Тогда
				ИнформацияОбОшибках.ЕстьПредупреждения = Истина;
			КонецЕсли;
			
			Если ИнформацияОбОшибках.ЕстьПредупреждения <> СтрокаТаблицаТоваров.ЕстьПредупреждения Тогда
				ИзменяемыеРеквизиты.Вставить("ЕстьПредупреждения", ИнформацияОбОшибках.ЕстьПредупреждения);
			КонецЕсли;
			
			Если ИнформацияОбОшибках.КонтрольРеквизитов <> СтрокаТаблицаТоваров.КонтрольРеквизитов Тогда
				ИзменяемыеРеквизиты.Вставить("КонтрольРеквизитов", ИнформацияОбОшибках.КонтрольРеквизитов);
			КонецЕсли;
			
			Если ИнформацияОбОшибках.РеквизитыПредупреждений <> СтрокаТаблицаТоваров.РеквизитыПредупреждений Тогда
				ИзменяемыеРеквизиты.Вставить("РеквизитыПредупреждений", ИнформацияОбОшибках.РеквизитыПредупреждений);
			КонецЕсли;
			
			Если ИнформацияОбОшибках.КоличествоОшибок <> СтрокаТаблицаТоваров.КоличествоОшибок Тогда
				ИзменяемыеРеквизиты.Вставить("КоличествоОшибок", ИнформацияОбОшибках.КоличествоОшибок);
			КонецЕсли;
			
			Если ИзменяемыеРеквизиты.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ТорговыеПредложенияТорговойПлощадки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрайсЛист.Установить(СтрокаТаблицаТоваров.ПрайсЛист);
			НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицаТоваров.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицаТоваров.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(СтрокаТаблицаТоваров.Упаковка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицаТоваров, "ПрайсЛист, Номенклатура, Характеристика, Упаковка");
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			
			НачальноеСостояниеПубликации = Запись.СостояниеПубликацииТорговыхПредложений;
			ЗаполнитьЗначенияСвойств(Запись, ИзменяемыеРеквизиты);
			КонечноеСостояниеПубликации = Запись.СостояниеПубликацииТорговыхПредложений;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеСтатистики");
			НаборЗаписей.Записать();
			
			Если ИзменяемыеРеквизиты.Свойство("СостояниеПубликацииТорговыхПредложений")
				И ИзмененныеПрайсЛисты.Получить(СтрокаТаблицаТоваров.ПрайсЛист) = Неопределено Тогда
				ИзмененныеПрайсЛисты.Вставить(СтрокаТаблицаТоваров.ПрайсЛист, 0);
			КонецЕсли;
			
			Если ИзменяемыеРеквизиты.Свойство("СостояниеПубликацииТорговыхПредложений")
				И НачальноеСостояниеПубликации = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано
				И Не КонечноеСостояниеПубликации = Перечисления.СостоянияПубликацииПозицииТорговогоПредложения.Опубликовано Тогда
				ИзмененныеПрайсЛисты[СтрокаТаблицаТоваров.ПрайсЛист] = ИзмененныеПрайсЛисты[СтрокаТаблицаТоваров.ПрайсЛист] + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Не удалось проверить записи торговых предложений'");
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			НСтр("ru = 'Торговые предложения. Проверить записи торговых предложений'", 
				ОбщегоНазначения.КодОсновногоЯзыка()) , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстОшибки, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения);
		
	КонецПопытки;
	
	УстановитьСостояниеТорговыхПредложений(ИзмененныеПрайсЛисты);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ТаблицаТоваров.Количество() / 10);
	
КонецПроцедуры

Функция НовыйСкидки()
	
	Скидки = Новый Структура;
	Скидки.Вставить("СкидкиЗаОбъемПродажВидыЦен", Неопределено);
	Скидки.Вставить("СкидкиПроцентСуммаВидыЦен",  Неопределено);
	Скидки.Вставить("СкидкиЗаОбъемПродаж",        Неопределено);
	Скидки.Вставить("СкидкиПроцентСумма",         Неопределено);
	
	Возврат Скидки;
	
КонецФункции

Функция ДанныеПозицииТорговогоПредложенияИзменены(ДанныеПозиции)
	
	СтрокаТаблицаТоваров = ДанныеПозиции.СтрокаТаблицаТоваров;
	
	ДанныеПредложения = НовоеТорговоеПредложение();
	ЗаполнитьЗначенияСвойств(ДанныеПредложения, СтрокаТаблицаТоваров);
	ДанныеПредложения.ИдентификаторПрайсЛиста = ДанныеПозиции.Идентификатор;
	ДанныеПредложения.ДополнительноеОписание  = ДанныеПозиции.ДополнительноеОписание;
	
	// Дополнить скидками.
	ЗаполнитьСкидкиЗаОбъемПродаж(ДанныеПозиции, ДанныеПредложения);
	ЗаполнитьСкидкиПроцентСумма(ДанныеПозиции, ДанныеПредложения);
	
	Отказ = Ложь;
	
	Если ПустаяСтрока(ДанныеПредложения.ИдентификаторНоменклатурыСервиса) Тогда
		
		ДанныеНоменклатуры = НоваяНоменклатураПоставщика();
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СтрокаТаблицаТоваров);
		
		ДанныеНоменклатуры.КодЕдиницыИзмерения = 
			ТорговыеПредложенияПовтИсп.КодЕдиницыИзмерения(СтрокаТаблицаТоваров.ЕдиницаИзмерения);
		
		// Заполнение свойств.
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика",
			СтрокаТаблицаТоваров.Номенклатура, СтрокаТаблицаТоваров.Характеристика);
		СтрокиСвойства = ДанныеПозиции.ТаблицаСвойств.НайтиСтроки(СтруктураПоиска);
		Для Каждого ЭлементКоллекции Из СтрокиСвойства Цикл
			ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры.Свойства.Добавить(), ЭлементКоллекции);
		КонецЦикла;
		
		ДанныеНоменклатуры.Штрихкоды.Очистить();
		СтрокиШтрихкодов = ДанныеПозиции.ТаблицаШтрихкодов.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаШтрихкода Из СтрокиШтрихкодов Цикл
			ДанныеНоменклатуры.Штрихкоды.Добавить(СтрокаШтрихкода.Значение);
		КонецЦикла;
		
		ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеНоменклатурыПоставщика(
			ДанныеПозиции.Организация, ДанныеНоменклатуры, Неопределено, Отказ);
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеПредложения.ХешНоменклатуры = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗапросСервиса.Данные);
		
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеОбновлениеТорговогоПредложения(
		ДанныеПозиции.ИдентификаторОрганизации,
		ДанныеПредложения, 
		Неопределено, 
		Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Изображения = Новый Массив;

	Для каждого СтрокаИзображений Из ДанныеПозиции.ТаблицаИзображения Цикл
		ХешИзображения = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрокаИзображений.ФайлИзображения);
		Изображения.Добавить(ХешИзображения);
	КонецЦикла;
	
	ХешИзображенийНовый = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Изображения);
	ДанныеПозиции.ХешНовый = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ЗапросСервиса.Данные);
	
	ХэшСтрокиТоваровНеИзменен = ДанныеПозиции.ХешНовый = СтрокаТаблицаТоваров.ХешПредложения;
	ХэшТорговогоПредложенияНеИзменен = ДанныеПредложения.ХешНоменклатуры = СтрокаТаблицаТоваров.ХешНоменклатурыПредложения;
	ХешИзображенийНеИзменен = ХешИзображенийНовый = СтрокаТаблицаТоваров.ХешИзображенийПредложения;
	
	Возврат Не ХэшСтрокиТоваровНеИзменен
		ИЛИ (ПустаяСтрока(СтрокаТаблицаТоваров.ИдентификаторНоменклатурыСервиса) И НЕ ХэшТорговогоПредложенияНеИзменен)
		ИЛИ (ПустаяСтрока(СтрокаТаблицаТоваров.ИдентификаторНоменклатурыСервиса) И НЕ ХешИзображенийНеИзменен);
	
КонецФункции

Функция ТелефонКорректен(СтрокаТелефона)
	
	МинимальнаяДлиннаТелефона = 11;
	Результат = ЗначениеЗаполнено(СтрокаТелефона) И СтрДлина(СтрокаТелефона) >= МинимальнаяДлиннаТелефона;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьРеквизитыИзображенияТоваров(
		ТаблицаИзображения, ПроверяемыеРеквизитыИзображенияТоваров, ТаблицаОшибок)
	
	Для Каждого Изображение Из ТаблицаИзображения Цикл
		
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыИзображенияТоваров Цикл
			
			Если ПроверяемыйРеквизит.ИмяРеквизитаСтроки = "ТоварыИзображения" Тогда
				
				ДвоичныеДанныеИзображения = РаботаСФайлами.ДвоичныеДанныеФайла(Изображение.ФайлИзображения);
				Картинка = Новый Картинка(ДвоичныеДанныеИзображения);
				Ширина = Картинка.Ширина();
				Высота = Картинка.Высота();
				МинимальноеКоличествоПикселей = 100;
				Если Ширина < МинимальноеКоличествоПикселей Или Высота < МинимальноеКоличествоПикселей Тогда
					
					ПолноеИмяРеквизита = СтрШаблон(
						"%1|%2", 
						ПроверяемыйРеквизит.ПолноеИмяРеквизита, 
						Строка(Изображение.ФайлИзображения.УникальныйИдентификатор()));
					ДобавитьОшибку(ТаблицаОшибок, ПолноеИмяРеквизита, ПроверяемыйРеквизит.ЯвляетсяОшибкой);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыМатрицыЦен(ВыборкаПрайсЛисты, СтрокаТаблицаТоваров, Скидки, 
		ПроверяемыеРеквизитыСкидкиЗаОпт, ПроверяемыеРеквизитыСкидки, ТаблицаОшибок)
		
	// Проверить реквизиты матрицы.
	Если ВыборкаПрайсЛисты.ПубликоватьЦены Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТаблицаТоваров.Номенклатура);
		
		Если ВыборкаПрайсЛисты.ПубликоватьСкидкиЗаРазовыйОбъемПродаж
			И Не ВыборкаПрайсЛисты.ВариантПубликацииСкидкиЗаОпт.Пустая() Тогда
			
			Если Скидки.СкидкиЗаОбъемПродажВидыЦен <> Неопределено Тогда
				ПроверитьРеквизитыМатрицы(Скидки.СкидкиЗаОбъемПродажВидыЦен, ПараметрыОтбора,
					ПроверяемыеРеквизитыСкидкиЗаОпт, ТаблицаОшибок);
			КонецЕсли;
			
			Если Скидки.СкидкиЗаОбъемПродаж <> Неопределено Тогда
				ПроверитьРеквизитыМатрицы(Скидки.СкидкиЗаОбъемПродаж, ПараметрыОтбора, ПроверяемыеРеквизитыСкидкиЗаОпт,
					ТаблицаОшибок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаПрайсЛисты.ПубликоватьЦенуДоСкидки И Не ВыборкаПрайсЛисты.ВариантПубликацииСкидки.Пустая() Тогда
			
			Если Скидки.СкидкиПроцентСуммаВидыЦен <> Неопределено Тогда
				ПроверитьРеквизитыМатрицы(Скидки.СкидкиПроцентСуммаВидыЦен, ПараметрыОтбора,
					ПроверяемыеРеквизитыСкидки, ТаблицаОшибок);
			КонецЕсли;
			
			Если Скидки.СкидкиПроцентСумма <> Неопределено Тогда
				ПроверитьРеквизитыМатрицы(Скидки.СкидкиПроцентСумма, ПараметрыОтбора, ПроверяемыеРеквизитыСкидки,
					ТаблицаОшибок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтатистикаОшибок

Функция НоваяТаблицаОшибок()

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПолноеИмяРеквизита" , Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ЯвляетсяОшибкой"    , Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОшибок;

КонецФункции

Функция ДобавитьОшибку(ТаблицаОшибок, ПолноеИмяРеквизита, ЯвляетсяОшибкой)

	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.ПолноеИмяРеквизита = ПолноеИмяРеквизита;
	НоваяСтрока.ЯвляетсяОшибкой    = ЯвляетсяОшибкой;
	
	Возврат НоваяСтрока;

КонецФункции

Функция ПолучитьИнформациюОбОшибках(СтрокаТаблицаТоваров, ТаблицаОшибок, Публикуется)
	
	ПутьКДанным = "";
	ТекстСообщения = "";
	
	КоличествоОшибок              = 0;
	КоличествоПредупреждений      = 0;
	ИменаРеквизитов               = Новый Массив;
	ИменаРеквизитовПредупреждений = Новый Массив;
	ОбъектыОшибок                 = Новый Массив;
	
	Для каждого Ошибка Из ТаблицаОшибок Цикл
		
		Если ЗначениеЗаполнено(Ошибка.ДополнительныйРеквизит) Тогда
			ПолноеИмяРеквизита = СтрШаблон(
				"%1|%2", 
				Ошибка.ПолноеИмяРеквизита, 
				ОбщегоНазначения.ЗначениеВСтрокуXML(Ошибка.ДополнительныйРеквизит));
		Иначе
			ПолноеИмяРеквизита = Ошибка.ПолноеИмяРеквизита;
		КонецЕсли;
		
		Если Ошибка.ЯвляетсяОшибкой Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			СсылкаНаОбъект = Неопределено;
			ОпределитьВладельцевНезаполненныхРеквизитов(ПолноеИмяРеквизита,
				СтрокаТаблицаТоваров, СсылкаНаОбъект, ПутьКДанным, ТекстСообщения);
			
			Если Не СсылкаНаОбъект = Неопределено И ОбъектыОшибок.Найти(СсылкаНаОбъект) = Неопределено Тогда
				ОбъектыОшибок.Добавить(СсылкаНаОбъект);
			КонецЕсли;
			ИменаРеквизитов.Добавить(ПолноеИмяРеквизита);
		Иначе
			КоличествоПредупреждений = КоличествоПредупреждений + 1;
			ИменаРеквизитовПредупреждений.Добавить(ПолноеИмяРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	КонтрольРеквизитов = СтрСоединить(ИменаРеквизитов, ";");
	РеквизитыПредупреждений = СтрСоединить(ИменаРеквизитовПредупреждений, ";");

	ИнформацияОбОшибках = Новый Структура;
	ИнформацияОбОшибках.Вставить("ЕстьОшибки"               , КоличествоОшибок > 0);
	ИнформацияОбОшибках.Вставить("ЕстьПредупреждения"       , КоличествоПредупреждений > 0);
	ИнформацияОбОшибках.Вставить("КонтрольРеквизитов"       , КонтрольРеквизитов);
	ИнформацияОбОшибках.Вставить("РеквизитыПредупреждений"  , РеквизитыПредупреждений);
	ИнформацияОбОшибках.Вставить("КоличествоОшибок"         , ОбъектыОшибок.Количество());
	ИнформацияОбОшибках.Вставить("КоличествоПредупреждений" , КоличествоПредупреждений);
	
	Возврат ИнформацияОбОшибках;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитов

Процедура ОпределитьТекущееСостояниеПозицийТорговыхПредложений(ТаблицаТоваров)
	
	ТаблицаТоваров.Колонки.Добавить("СостояниеПубликацииТорговыхПредложений",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПубликацииПозицииТорговогоПредложения"));
	ТаблицаТоваров.Колонки.Добавить("КонтрольРеквизитов",
		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("РеквизитыПредупреждений",
		Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьПредупреждения",
		Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоОшибок",
		Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",
		Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ОписаниеОшибки",
		Новый ОписаниеТипов("Строка"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.ПрайсЛист КАК ПрайсЛист,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеПредложенияТорговойПлощадки.ПрайсЛист КАК ПрайсЛист,
	|	ТорговыеПредложенияТорговойПлощадки.Номенклатура КАК Номенклатура,
	|	ТорговыеПредложенияТорговойПлощадки.Характеристика КАК Характеристика,
	|	ТорговыеПредложенияТорговойПлощадки.Упаковка КАК Упаковка,
	|	ТорговыеПредложенияТорговойПлощадки.СостояниеПубликацииТорговыхПредложений КАК СостояниеПубликацииТорговыхПредложений,
	|	ТорговыеПредложенияТорговойПлощадки.КонтрольРеквизитов КАК КонтрольРеквизитов,
	|	ТорговыеПредложенияТорговойПлощадки.РеквизитыПредупреждений КАК РеквизитыПредупреждений,
	|	ТорговыеПредложенияТорговойПлощадки.ПричинаИсключенияИзПубликации КАК ПричинаИсключенияИзПубликации,
	|	ТорговыеПредложенияТорговойПлощадки.ЕстьПредупреждения КАК ЕстьПредупреждения,
	|	ТорговыеПредложенияТорговойПлощадки.КоличествоОшибок КАК КоличествоОшибок,
	|	ТорговыеПредложенияТорговойПлощадки.ЕстьОшибки КАК ЕстьОшибки,
	|	ТорговыеПредложенияТорговойПлощадки.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.ТорговыеПредложенияТорговойПлощадки КАК ТорговыеПредложенияТорговойПлощадки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ТорговыеПредложенияТорговойПлощадки.ПрайсЛист = ТаблицаТоваров.ПрайсЛист
	|			И ТорговыеПредложенияТорговойПлощадки.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И ТорговыеПредложенияТорговойПлощадки.Характеристика = ТаблицаТоваров.Характеристика
	|			И ТорговыеПредложенияТорговойПлощадки.Упаковка = ТаблицаТоваров.Упаковка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
	
		СтруктураПоиска = Новый Структура("ПрайсЛист, Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаЗапроса);
		
		НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
		
		Для каждого НайденнаяСтроки Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтроки, ВыборкаЗапроса,
				"СостояниеПубликацииТорговыхПредложений, КонтрольРеквизитов, РеквизитыПредупреждений, ЕстьПредупреждения,
				|КоличествоОшибок, ЕстьОшибки, ОписаниеОшибки");
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьРеквизитыМатрицы(Таблица, ПараметрыОтбора, ПроверяемыеРеквизиты, ТаблицаОшибок)
	
	СтрокиМатрицы = Таблица.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаМатрицы Из СтрокиМатрицы Цикл
		
		ВидЦеныСтрокой = СтрокаМатрицы.ВидыЦен.УникальныйИдентификатор();
		ПроверитьРеквизитыСтроки(СтрокаМатрицы, ПроверяемыеРеквизиты, ТаблицаОшибок, ВидЦеныСтрокой);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыСтроки(Строка, ПроверяемыеРеквизиты, ТаблицаОшибок, СсылкаСтрока = "")
	
	Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Строка[ПроверяемыйРеквизит.ИмяРеквизитаСтроки]) Тогда
			
			Если ПустаяСтрока(СсылкаСтрока) Тогда
				
				ПолноеИмяРеквизита = ПроверяемыйРеквизит.ПолноеИмяРеквизита;
				
			Иначе
				
				ПолноеИмяРеквизита = СтрШаблон(
					"%1|%2", 
					ПроверяемыйРеквизит.ПолноеИмяРеквизита, 
					СсылкаСтрока);
				
			КонецЕсли;
			
			ДобавитьОшибку(ТаблицаОшибок, ПолноеИмяРеквизита, ПроверяемыйРеквизит.ЯвляетсяОшибкой);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаПроверок()

	ТаблицаПроверок = Новый ТаблицаЗначений;
	ТаблицаПроверок.Колонки.Добавить("ИмяРеквизитаСтроки" , Новый ОписаниеТипов("Строка"));
	ТаблицаПроверок.Колонки.Добавить("ПолноеИмяРеквизита" , Новый ОписаниеТипов("Строка"));
	ТаблицаПроверок.Колонки.Добавить("ЯвляетсяОшибкой"    , Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПроверок;

КонецФункции

Процедура ДобавитьПроверку(ТаблицаПроверок, ИмяРеквизитаСтроки, ПолноеИмяРеквизита, ЯвляетсяОшибкой = Ложь)

	НоваяСтрока = ТаблицаПроверок.Добавить();
	НоваяСтрока.ИмяРеквизитаСтроки = ИмяРеквизитаСтроки;
	НоваяСтрока.ПолноеИмяРеквизита = ПолноеИмяРеквизита;
	НоваяСтрока.ЯвляетсяОшибкой    = ЯвляетсяОшибкой;

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

Функция ПолучитьОграничивающееЗначение(Тип, Значение)

	Если Тип = "Список" Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Значение) Тогда
		ОписаниеТипов = Новый ОписаниеТипов(Тип);
		Возврат ОписаниеТипов.ПривестиЗначение(Неопределено);
	Иначе
		Возврат XMLЗначение(Тип(Тип), Значение);
	КонецЕсли;

КонецФункции

Функция ПроверитьЗначениеДополнительногоРеквизита(ВыборкаСвойства)

	Если ПустаяСтрока(ВыборкаСвойства.ТипРеквизитаКатегории) Тогда
		Возврат Истина; // Проверка не предусмотрена
	ИначеЕсли ВыборкаСвойства.ТипРеквизитаКатегории = "Список" Тогда
		Возврат НЕ ЗначениеЗаполнено(ВыборкаСвойства.Значение) ИЛИ НЕ ВыборкаСвойства.ИдентификаторЗначения = NULL;
	ИначеЕсли НЕ ТипЗнч(ВыборкаСвойства.Значение) = Тип(ВыборкаСвойства.ТипРеквизитаКатегории) Тогда
		Возврат Ложь; // Тип значения реквизита отличается от ожидаемого
	ИначеЕсли ВРег(ВыборкаСвойства.ТипРеквизитаКатегории) = ВРег("Булево") Тогда
		Возврат Истина; // Для типа Булево проверка не предусмотрена
	КонецЕсли;
	
	МинимальноеЗначение  = ПолучитьОграничивающееЗначение(ВыборкаСвойства.ТипРеквизитаКатегории, ВыборкаСвойства.МинимальноеЗначение);
	МаксимальноеЗначение = ПолучитьОграничивающееЗначение(ВыборкаСвойства.ТипРеквизитаКатегории, ВыборкаСвойства.МаксимальноеЗначение);

	Возврат (НЕ ЗначениеЗаполнено(МинимальноеЗначение) ИЛИ ВыборкаСвойства.Значение >= МинимальноеЗначение)
		И (НЕ ЗначениеЗаполнено(МаксимальноеЗначение) ИЛИ ВыборкаСвойства.Значение <= МаксимальноеЗначение);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КарточкаПубликуемогоТорговогоПредложения
	
Функция ПолучитьДоступностьРеквизитов() Экспорт 

	Реквизиты = Новый Массив;
	
	ЗаполнитьРеквизитыТаблицПубликации(Реквизиты);
	
	ДоступностьРеквизитов = Новый Соответствие;
	
	Для каждого Реквизит Из Реквизиты Цикл
		ДоступностьРеквизитов.Вставить(Реквизит, Ложь);
	КонецЦикла;
	
	ДоступностьРеквизитов["ПрайсЛистыСлужебный.СпособДоставки"]  = Истина;
	
	ДоступностьРеквизитов["ТоварыСлужебный.КатегорияСервиса"]    = Истина;
	ДоступностьРеквизитов["ТоварыСлужебный.НоменклатураСервиса"] = Истина;
	
	ТорговыеПредложенияПереопределяемый.ОпределитьОбрабатываемыеРеквизитыКарточкиТорговогоПредложения(ДоступностьРеквизитов);
	
	Возврат ДоступностьРеквизитов;

КонецФункции

Процедура ЗаполнитьРеквизитыТаблицПубликации(Реквизиты)
	
	// ПрайсЛистыСлужебный:
	Реквизиты.Добавить("ПрайсЛистыСлужебный.СпособДоставки");
	Реквизиты.Добавить("ПрайсЛистыСлужебный.НаименованиеОрганизации");
	Реквизиты.Добавить("ПрайсЛистыСлужебный.ИННОрганизации");
	Реквизиты.Добавить("ПрайсЛистыСлужебный.КППОрганизации");
	Реквизиты.Добавить("ПрайсЛистыСлужебный.ТелефонОрганизации");
	Реквизиты.Добавить("ПрайсЛистыСлужебный.СайтОрганизации");
	Реквизиты.Добавить("ПрайсЛистыСлужебный.ЭлектроннаяПочтаОрганизации");
	
	// ПрайсЛисты:
	Реквизиты.Добавить("ПрайсЛисты.Ссылка");
	Реквизиты.Добавить("ПрайсЛисты.Организация");
	Реквизиты.Добавить("ПрайсЛисты.Наименование");
	Реквизиты.Добавить("ПрайсЛисты.Валюта");
	Реквизиты.Добавить("ПрайсЛисты.ДатаНачалаДействия");
	Реквизиты.Добавить("ПрайсЛисты.ДатаОкончанияДействия");

	// Контакты - временная таблица с полями:
	Реквизиты.Добавить("Контакты.ПрайсЛист");
	Реквизиты.Добавить("Контакты.ПредставлениеКонтакта");
	Реквизиты.Добавить("Контакты.Телефон");
	Реквизиты.Добавить("Контакты.ЭлектроннаяПочта");

	// Товары:
	Реквизиты.Добавить("Товары.ПрайсЛист");
	Реквизиты.Добавить("Товары.Номенклатура");
	Реквизиты.Добавить("Товары.Характеристика");
	Реквизиты.Добавить("Товары.ЕдиницаИзмерения");
	Реквизиты.Добавить("Товары.НаименованиеНоменклатуры");
	Реквизиты.Добавить("Товары.НаименованиеХарактеристики");
	Реквизиты.Добавить("Товары.Артикул");
	Реквизиты.Добавить("Товары.Упаковка");
	Реквизиты.Добавить("Товары.НаименованиеУпаковки");
	Реквизиты.Добавить("Товары.ЧислительУпаковки");
	Реквизиты.Добавить("Товары.ЗнаменательУпаковки");
	Реквизиты.Добавить("Товары.СтавкаНДС");
	Реквизиты.Добавить("Товары.ЦенаВключаетНДС");
	Реквизиты.Добавить("Товары.СрокПоставки");
	Реквизиты.Добавить("Товары.Наличие");
	Реквизиты.Добавить("Товары.ВидНоменклатуры");
	Реквизиты.Добавить("Товары.Родитель");
	Реквизиты.Добавить("Товары.Цена");
	
	// ТоварыСлужебный:
	Реквизиты.Добавить("ТоварыСлужебный.КатегорияСервиса");
	Реквизиты.Добавить("ТоварыСлужебный.НоменклатураСервиса");
	
	// Свойства:
	Реквизиты.Добавить("Свойства.Свойство");
	Реквизиты.Добавить("Свойства.Значение");

	// Штрихкоды:
	Реквизиты.Добавить("Штрихкоды.Упаковка");
	Реквизиты.Добавить("Штрихкоды.Значение");
	
	// Изображения:
	Реквизиты.Добавить("Изображения.ФайлИзображения");
	
КонецПроцедуры

#КонецОбласти 

#Область ДиагностикаОшибокПубликации

// Вызывается для получения информации о объектах-источниках незаполненных данных при
//    проверке заполнения обязательных реквизитов.
//
// В последствии выводит ссылки для диагностики на форму и при нажатии пользователем на 
//    ошибку открывает объект и выводит сообщение, позиционируясь на реквизите для заполнения.
//
// Параметры:
//  ПроверяемыйРеквизит        -     Строка - имя колонки и таблицы для публикации товаров
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров.
//  СтрокаТорговогоПредложения -     СтрокаТаблицыЗначений - строка таблицы для публикации товаров
//            см. ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров.
//  СсылкаНаОбъект             -     ЛюбаяСсылка - ссылка на объект-владелец данных,
//            заполнение реквизита которого приведет к заполнению данных в таблице для
//            публикации товаров.
//  ПутьКДанным                -     Строка - путь к данным объекта на открываемой форме
//            для заполнения.
//  ТекстСообщения             -     Строка - текст сообщения пользователю.
//
Процедура ОпределитьВладельцевНезаполненныхРеквизитов(
	ПроверяемыйРеквизит, СтрокаТорговогоПредложения, СсылкаНаОбъект, ПутьКДанным, ТекстСообщения) Экспорт
	
	Если ВРег(ПроверяемыйРеквизит) = ВРег("ПричинаИсключенияИзПубликации") Тогда
		
		СсылкаНаОбъект = СтрокаТорговогоПредложения.ПричинаИсключенияИзПубликации;
		
	ИначеЕсли ВРег(ПроверяемыйРеквизит) = ВРег("ОшибкаПубликацииСервиса") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаТорговогоПредложения.ОписаниеОшибки) Тогда
			СсылкаНаОбъект = СтрокаТорговогоПредложения.ОписаниеОшибки;
		Иначе
			СсылкаНаОбъект = НСтр("ru = 'Неизвестная ошибка сервиса'");
		КонецЕсли;
		
	ИначеЕсли ВРег(ПроверяемыйРеквизит) = ВРег("РегистрацияОрганизации") Тогда
		
		СсылкаНаОбъект = СтрокаТорговогоПредложения.Организация;
		ТекстСообщения = НСтр("ru = 'Организация не зарегистрирована в сервисе 1С:Бизнес-сеть'");
		
		Возврат;
		
	ИначеЕсли Не СтрНайти(ПроверяемыйРеквизит, "|") = 0 Тогда
		
		ЧастиРеквизита = СтрРазделить(ПроверяемыйРеквизит, "|"); 
				
		Если ЧастиРеквизита[0] = "Свойства.Свойство" Или ЧастиРеквизита[0] = "Свойства.Значение" Тогда
			ЧастиРеквизита[1] = ОбщегоНазначения.ЗначениеИзСтрокиXML(ЧастиРеквизита[1]);	
		КонецЕсли; 	
		
		ТорговыеПредложенияПереопределяемый.ОпределитьВладельцевНезаполненныхРеквизитов(ЧастиРеквизита[0], 
			СтрокаТорговогоПредложения, ЧастиРеквизита[1], СсылкаНаОбъект, ПутьКДанным, 
			ТекстСообщения);

		Возврат;
				
	КонецЕсли;
	
	ТорговыеПредложенияПереопределяемый.ОпределитьВладельцевНезаполненныхРеквизитов(ПроверяемыйРеквизит, 
		СтрокаТорговогоПредложения, Неопределено, СсылкаНаОбъект, ПутьКДанным, ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти 

#Область ДанныеТорговыхПредложений

Функция ДанныеПрайсЛиста(ПрайсЛист, КонтактныеДанные, Контрагенты)
	
	ВнутреннийИдентификатор = Строка(ПрайсЛист.Ссылка.УникальныйИдентификатор());
	
	Результат = НовыеПараметрыСозданияПрайсЛиста(ПрайсЛист.Организация, ВнутреннийИдентификатор);
	
	Результат.НачалоДействия         = ПрайсЛист.ДатаНачалаДействия;
	Результат.ОкончаниеДействия      = ПрайсЛист.ДатаОкончанияДействия;
	Результат.Наименование           = ПрайсЛист.Наименование;
	Результат.Валюта                 = ПрайсЛист.Валюта;
	Результат.Контрагенты            = Контрагенты;
	Результат.Ссылка                 = ПрайсЛист.Ссылка;
	Результат.МинимальнаяСуммаЗаказа = ПрайсЛист.МинимальнаяСуммаЗаказа;
	Результат.ЦенаВключаетНДС        = ПрайсЛист.ЦенаВключаетНДС;
	Результат.ДополнительноеОписание = ПрайсЛист.ДополнительноеОписание;
	
	// Регионы
	Если ПрайсЛист.ПубликоватьРегионыДоступностиТоваров Тогда
		ЗаполнитьАдресаРегионовДоступностиТоваров(Результат.АдресаРегионов, ПрайсЛист.РегионыДоставки);
		ЗаполнитьАдресаРегионовДоступностиТоваров(Результат.АдресаСамовывоза, ПрайсЛист.РегионыСамовывоза);
	КонецЕсли;
	
	// Контактные данные
	Результат.ЭлектроннаяПочта = ПрайсЛист.АдресЭлектроннойПочты;
	Если КонтактныеДанные <> Неопределено Тогда
		
		Результат.ПредставлениеКонтакта = КонтактныеДанные.ПредставлениеКонтакта;
		Результат.Телефон               = КонтактныеДанные.Телефон;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьТекстЗапросаТаблицаЗначений(Запрос, ИмяВременнойТаблицы, ТаблицаЗначений, ТребуетсяИндексировать = Ложь)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	СхемаЗапроса.ПакетЗапросов.Переместить(ЗапросПакета, 0);
	ЗапросПакета.ТаблицаДляПомещения = ИмяВременнойТаблицы;
	
	ОператорЗапроса = ЗапросПакета.Операторы[0];
	Источник = ОператорЗапроса.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&" + ИмяВременнойТаблицы, ИмяВременнойТаблицы);
	
	Источник.Соединения.Очистить();
	
	ИндексКолонки = 0;
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Источник.Источник.ДоступныеПоля.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		ОператорЗапроса.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", ИмяВременнойТаблицы, Колонка.Имя), ИндексКолонки);
		ЗапросПакета.Колонки[ИндексКолонки].Псевдоним = Колонка.Имя;
		
		Если ТребуетсяИндексировать Тогда
			ЗапросПакета.Индекс.Добавить(ЗапросПакета.Колонки[ИндексКолонки]);
		КонецЕсли;
		
		ИндексКолонки = ИндексКолонки + 1;
		
	КонецЦикла;
	
	ЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросПакета.ИмяТаблицы = ИмяВременнойТаблицы;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр(ИмяВременнойТаблицы, ТаблицаЗначений);
	
КонецПроцедуры

Функция ТекстЗапросаПозицииТорговогоПредложения()
	
	ТекстЗапрос = "ВЫБРАТЬ
	              |	НЕОПРЕДЕЛЕНО КАК Поле1
	              |ПОМЕСТИТЬ ТоварыСлужебный
	              |ИЗ
	              |	Товары КАК Товары
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПозицииТорговогоПредложения КАК ПозицииТорговогоПредложения
	              |		ПО Товары.ПрайсЛист = ПозицииТорговогоПредложения.ПрайсЛист
	              |			И Товары.Номенклатура = ПозицииТорговогоПредложения.Номенклатура
	              |			И Товары.Характеристика = ПозицииТорговогоПредложения.Характеристика
	              |			И Товары.Упаковка = ПозицииТорговогоПредложения.Упаковка";
	
	Возврат ТекстЗапрос;
	
КонецФункции

Процедура ДобавитьОтбор(ТаблицаОтборов, Отбор, ИмяТаблицы, ИмяПоля, ИмяОтбора)
	Перем ЗначениеОтбора;

	Если НЕ ЗначениеЗаполнено(Отбор)
		ИЛИ НЕ Отбор.Свойство(ИмяОтбора, ЗначениеОтбора)
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаОтборов.Добавить();
	НоваяСтрока.ИмяТаблицы     = ИмяТаблицы;
	НоваяСтрока.ИмяПоля        = ИмяПоля;
	НоваяСтрока.ЗначениеОтбора = ЗначениеОтбора;

КонецПроцедуры

Функция СформироватьТекстОтбора(ИсходныйТекстОтбора, ПараметрыЗапроса, ПараметрыОтбора)
	
	Результат = ИсходныйТекстОтбора;
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Результат);
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
	
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		НоваяСтрока = ТаблицаПараметров.Добавить();
		НоваяСтрока.Имя = ПараметрЗапроса.Ключ;
		НоваяСтрока.Длина = СтрДлина(ПараметрЗапроса.Ключ);
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Длина УБЫВ");
	
	Для каждого СтрокаПараметра Из ТаблицаПараметров Цикл
		
		ИмяПараметра = СтрокаПараметра.Имя;
		
		Если Слова.Найти(ИмяПараметра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ПараметрыЗапроса[ИмяПараметра];
		
		Для каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			Если ЭлементОтбора.Значение = ПараметрЗапроса.Значение Тогда
				Результат = СтрЗаменить(
					Результат, 
					СтрШаблон("&%1", ИмяПараметра), 
					СтрШаблон("&%1", ЗначениеПараметра));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ПрименитьОтбор(ПакетЗапросов, ПоследнийЗапросПакета, Отбор)

	ИндексЗапроса = ПакетЗапросов.Индекс(ПоследнийЗапросПакета);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	
	ИндексыТаблиц = Новый Структура;
	
	Для Счетчик = 0 По ИндексЗапроса Цикл
		
		ЗапросПакета = ПакетЗапросов[Счетчик];
		
		НовыйЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(ТипЗнч(ЗапросПакета));
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			НовыйЗапросПакета.ИмяТаблицы = ЗапросПакета.ИмяТаблицы;
		Иначе
			НовыйЗапросПакета.УстановитьТекстЗапроса(ЗапросПакета.ПолучитьТекстЗапроса());
			ИндексыТаблиц.Вставить(НовыйЗапросПакета.ТаблицаДляПомещения, Счетчик);
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйЗапросПакета.ТаблицаДляПомещения = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьОтборыКомпоновкиДанныхВЗапрос(Запрос, Отбор);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ИндексТаблицы = Неопределено;
	
	Для каждого ЗапросПакетаИсточник Из СхемаЗапроса.ПакетЗапросов Цикл
	
		Если ТипЗнч(ЗапросПакетаИсточник) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗапросПакетаИсточник.ТаблицаДляПомещения) Тогда
			ИндексТаблицы = ИндексЗапроса;
		Иначе
			ИндексыТаблиц.Свойство(ЗапросПакетаИсточник.ТаблицаДляПомещения, ИндексТаблицы)
		КонецЕсли;
		
		ЗапросПакетаПриемник = ПакетЗапросов[ИндексТаблицы];
		
		Для Счетчик = 1 По ЗапросПакетаИсточник.Операторы.Количество() Цикл
			
			ОператорЗапросаИсточник = ЗапросПакетаИсточник.Операторы[Счетчик - 1];
			ОператорЗапросаПриемник = ЗапросПакетаПриемник.Операторы[Счетчик - 1];
			
			Для каждого ОтборЗапроса Из ОператорЗапросаИсточник.Отбор Цикл
				
				ТекстОтбора = Строка(ОтборЗапроса);
				
				Если ОператорЗапросаПриемник.Отбор.Найти(ТекстОтбора) = Неопределено Тогда
					
					ТекстОтбора = СформироватьТекстОтбора(ТекстОтбора, Запрос.Параметры, Отбор);
					Если ОператорЗапросаПриемник.Отбор.Найти(ТекстОтбора) = Неопределено Тогда
						ОператорЗапросаПриемник.Отбор.Добавить(ТекстОтбора);
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЦикла;
			
			Для каждого Источник Из ОператорЗапросаИсточник.Источники Цикл
			
				ИсточникРезультат = ОператорЗапросаПриемник.Источники.НайтиПоИмени(Источник.Источник.ИмяТаблицы);
				
				КоличествоПараметров = Источник.Источник.Параметры.Количество();
				
				Для СчетчикПараметров = 1 По КоличествоПараметров Цикл
					ТекстВыражения = СформироватьТекстОтбора(Строка(Источник.Источник.Параметры[СчетчикПараметров - 1].Выражение), 
						Запрос.Параметры, Отбор);
					Выражение = Новый ВыражениеСхемыЗапроса(ТекстВыражения);
					ИсточникРезультат.Источник.Параметры[СчетчикПараметров - 1].Выражение = Выражение;
				КонецЦикла;
			
			КонецЦикла;
		
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ИсполняемыеНастройкиПубликации(ИменаТаблиц, Отбор)

	ПоляОтбора = Новый Массив;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		Для каждого КлючОтбора Из Отбор Цикл
			Если ЗначениеЗаполнено(КлючОтбора.Значение) Тогда
				ПоляОтбора.Добавить(КлючОтбора.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПоляОтбораСтрокой = СтрСоединить(ПоляОтбора, ", ");
	
	ИсполняемыеНастройкиПубликации = ТорговыеПредложенияПовтИсп.ИсполняемыеНастройкиПубликации(ИменаТаблиц, ПоляОтбораСтрокой);
	ПараметрыЗапроса = Новый Структура;
	
	Для каждого ПараметрЗапроса Из ИсполняемыеНастройкиПубликации.ПараметрыЗапроса Цикл
		Если ЗначениеЗаполнено(Отбор) И НЕ ПоляОтбора.Найти(ПараметрЗапроса.Значение) = Неопределено Тогда
			ПараметрыЗапроса.Вставить(ПараметрЗапроса.Ключ, Отбор[ПараметрЗапроса.Значение]);
		Иначе
			ПараметрыЗапроса.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, Отбор, Истина);
	КонецЕсли;
	
	ИсполняемыеНастройкиПубликации.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат ИсполняемыеНастройкиПубликации;

КонецФункции

Функция ЭтоРазделительСлов(КодСимвола, Диапазоны) Экспорт
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Значение        - Строка - исходная строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - перечень символов-разделителей. Например, ".,;".
//
// Возвращаемое значение:
//  Массив - список слов.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один",
//  "два2_", "три"; СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив
//  значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Значение, Диапазоны) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Значение);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Значение, Позиция);
		Если КодСимвола = 44 Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			Слова.Добавить(",");
			НачалоСлова = Позиция + 1;
		ИначеЕсли ЭтоРазделительСлов(КодСимвола, Диапазоны) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Значение, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

Процедура ДополнитьИспользуемыеТаблицы(ИспользуемыеТаблицы, ТекстЗапроса, Диапазоны)

	СловаЗапроса = РазложитьСтрокуВМассивСлов(ТекстЗапроса, Диапазоны);
	
	ДобавитьТаблицу = Ложь;
	БлокИсточников = Ложь;
	
	Для каждого СловоЗапроса Из СловаЗапроса Цикл
	
		Если ВРег(СловоЗапроса) = "ИЗ" Тогда
			ДобавитьТаблицу = Истина;
			БлокИсточников = Истина;
		ИначеЕсли ВРег(СловоЗапроса) = "СОЕДИНЕНИЕ" Тогда
			ДобавитьТаблицу = Истина;
		ИначеЕсли БлокИсточников И СловоЗапроса = "," Тогда
			ДобавитьТаблицу = Истина;
		ИначеЕсли ДобавитьТаблицу И ИспользуемыеТаблицы.Найти(СловоЗапроса) = Неопределено Тогда
			ИспользуемыеТаблицы.Добавить(СловоЗапроса);
			ДобавитьТаблицу = Ложь;
		Иначе
			ДобавитьТаблицу = Ложь;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция ИсполняемыеНастройкиПубликацииСлужебный(ИменаТаблиц, ПоляОтбора) Экспорт
	Перем УдаляемыйЗапрос;
	
	Запрос = Новый Запрос;
	Отбор = Новый Структура(ПоляОтбора);
	
	Для каждого КлючОтбора Из Отбор Цикл
		Отбор[КлючОтбора.Ключ] = КлючОтбора.Ключ;
	КонецЦикла;

	ТорговыеПредложенияПереопределяемый.ИнициализацияЗапросаПубликуемыхТоваров(Запрос);
	
	СтруктураПолучаемыхТаблиц = Новый Структура(ИменаТаблиц);
	
	ТаблицаОтборов = НоваяТаблицаОтборов();
	
	#Область Фильтры
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "ПрайсЛисты"  , "Ссылка"         , "ПрайсЛист");
	
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Контрагенты" , "ПрайсЛист"      , "ПрайсЛист");
	
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Контакты"    , "ПрайсЛист"      , "ПрайсЛист");
	
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Товары"      , "ПрайсЛист"      , "ПрайсЛист");
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Товары"      , "Номенклатура"   , "Номенклатура");
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Товары"      , "Характеристика" , "Характеристика");
	
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Свойства"    , "Номенклатура"   , "Номенклатура");
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Свойства"    , "Характеристика" , "Характеристика");
	
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Штрихкоды"   , "Номенклатура"   , "Номенклатура");
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Штрихкоды"   , "Характеристика" , "Характеристика");
	
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Изображения" , "Номенклатура"   , "Номенклатура");
	ДобавитьОтбор(ТаблицаОтборов, Отбор, "Изображения" , "Характеристика" , "Характеристика");
	
	#КонецОбласти 
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	
	// Удаляем выборки данных
	Для Счетчик = 1 По КоличествоЗапросов Цикл
		
		ИндексЗапроса = КоличествоЗапросов - Счетчик;
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[ИндексЗапроса];
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
			И ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(ИндексЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем отборы
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Отборы = ТаблицаОтборов.НайтиСтроки(Новый Структура("ИмяТаблицы", ЗапросПакета.ТаблицаДляПомещения));
		
		Если Отборы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныйОтбор = Новый Структура;
		
		Для каждого СтрокаОтбора Из Отборы Цикл
			ПодчиненныйОтбор.Вставить(СтрокаОтбора.ИмяПоля, СтрокаОтбора.ЗначениеОтбора);
			Запрос.УстановитьПараметр(СтрокаОтбора.ЗначениеОтбора, СтрокаОтбора.ЗначениеОтбора);
		КонецЦикла;
		
		ПрименитьОтбор(СхемаЗапроса.ПакетЗапросов, ЗапросПакета, ПодчиненныйОтбор);
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ДополнитьЗапросСлужебнымиТаблицами(Запрос);
	
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();

	// Удаляем лишние запросы
	Для Счетчик = 1 По КоличествоЗапросов Цикл
		
		ИндексЗапроса = КоличествоЗапросов - Счетчик;
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[ИндексЗапроса];
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
			И СтруктураПолучаемыхТаблиц.Свойство(ЗапросПакета.ТаблицаДляПомещения) Тогда
			Прервать; // Таблица для выборки данных
		ИначеЕсли ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса")
			ИЛИ НЕ СтруктураПолучаемыхТаблиц.Свойство(ЗапросПакета.ТаблицаДляПомещения) Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(ИндексЗапроса); // Таблица идущая после последней выбираемой
		КонецЕсли;
	КонецЦикла;
	
	УдаляемыеТаблицы = Новый Структура;
	ИспользуемыеТаблицы = Новый Массив;
	
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 46, 46)); 		// символ "."
	
	КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	
	Для Счетчик = 1 По КоличествоЗапросов Цикл
	
		ИндексЗапроса = КоличествоЗапросов - Счетчик;
		
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[ИндексЗапроса];
		
		УдалитьЗапрос = Ложь;
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			УдаляемыеТаблицы.Вставить(ЗапросПакета.ИмяТаблицы, ЗапросПакета);
		ИначеЕсли ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
			УдалитьЗапрос = Истина;
		ИначеЕсли НЕ ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения)
			И СтруктураПолучаемыхТаблиц.Свойство(ЗапросПакета.ТаблицаДляПомещения) Тогда
			ДополнитьИспользуемыеТаблицы(ИспользуемыеТаблицы, ЗапросПакета.ПолучитьТекстЗапроса(), Диапазоны);
		ИначеЕсли ИспользуемыеТаблицы.Найти(ЗапросПакета.ТаблицаДляПомещения) = Неопределено Тогда
			УдалитьЗапрос = Истина;
		Иначе
			ДополнитьИспользуемыеТаблицы(ИспользуемыеТаблицы, ЗапросПакета.ПолучитьТекстЗапроса(), Диапазоны);
		КонецЕсли;
		
		Если УдалитьЗапрос И Не ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения)
			И УдаляемыеТаблицы.Свойство(ЗапросПакета.ТаблицаДляПомещения, УдаляемыйЗапрос) Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(СхемаЗапроса.ПакетЗапросов.Индекс(УдаляемыйЗапрос));
		КонецЕсли;
	
		Если УдалитьЗапрос Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(ИндексЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	// Определяем запросы выборки
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
			И СтруктураПолучаемыхТаблиц.Свойство(ЗапросПакета.ТаблицаДляПомещения) Тогда
			СтруктураПолучаемыхТаблиц.Вставить(ЗапросПакета.ТаблицаДляПомещения, СхемаЗапроса.ПакетЗапросов.Индекс(ЗапросПакета));
		КонецЕсли;
	КонецЦикла;
	
	ИсполняемыеНастройкиПубликации = Новый Структура;
	ИсполняемыеНастройкиПубликации.Вставить("ТекстЗапроса"              , СхемаЗапроса.ПолучитьТекстЗапроса());
	ИсполняемыеНастройкиПубликации.Вставить("СтруктураПолучаемыхТаблиц" , СтруктураПолучаемыхТаблиц);
	ИсполняемыеНастройкиПубликации.Вставить("ПараметрыЗапроса"          , Запрос.Параметры);
	
	Возврат ИсполняемыеНастройкиПубликации;

КонецФункции

// Получить данные публикации.
// 
// Параметры:
//  ИменаТаблиц - Строка - Имена таблиц
//  Отбор - Неопределено - Отбор
// 
// Возвращаемое значение:
//  Структура - Получить данные публикации
Функция ПолучитьДанныеПубликации(Знач ИменаТаблиц, Знач Отбор) Экспорт 
	
	Запрос = Новый Запрос;
	ИнициализироватьПараметрыЗапросаПубликуемыхТоваров(Запрос.Параметры);
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ПрайсЛист")
		И ЗначениеЗаполнено(Отбор.ПрайсЛист) Тогда
		Запрос.УстановитьПараметр("ПрайсЛист", Отбор.ПрайсЛист);
	ИначеЕсли ЗначениеЗаполнено(Отбор) Тогда
		Отбор.Удалить("ПрайсЛист");
	КонецЕсли;
	
	ИсполняемыеНастройкиПубликации = ИсполняемыеНастройкиПубликации(ИменаТаблиц, Отбор);
	Запрос.Текст = ИсполняемыеНастройкиПубликации.ТекстЗапроса;
	
	Для каждого ПараметрЗапроса Из ИсполняемыеНастройкиПубликации.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ДанныеПубликации = Новый Структура;
	
	Для каждого ПолучаемаяТаблица Из ИсполняемыеНастройкиПубликации.СтруктураПолучаемыхТаблиц Цикл
		Если ПолучаемаяТаблица.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПубликации.Вставить(ПолучаемаяТаблица.Ключ, РезультатыЗапроса[ПолучаемаяТаблица.Значение]);
	КонецЦикла;
	
	Возврат ДанныеПубликации;
	
КонецФункции

Функция СкидкиТорговыхПредложений(ВариантыПубликацииСкидок, ПараметрыОтбора) Экспорт
	
	Если ВариантыПубликацииСкидок = Перечисления.ВариантыПубликацииСкидок.ВидыЦен Тогда
		Возврат РегистрыСведений.СкидкиТорговыхПредложенийВидыЦен.ПолучитьСкидкиТорговыхПредложений(ПараметрыОтбора);
	ИначеЕсли ВариантыПубликацииСкидок = Перечисления.ВариантыПубликацииСкидок.ВидыСкидок Тогда
		Возврат РегистрыСведений.СкидкиТорговыхПредложений.ПолучитьСкидкиТорговыхПредложений(ПараметрыОтбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьИзменитьСкидкуТорговогоПредложения(
		ВариантПубликацииСкидки, ТорговоеПредложение, Скидка, Отказ = Ложь, Удалить = Ложь) Экспорт
	
	Если ВариантПубликацииСкидки = Перечисления.ВариантыПубликацииСкидок.ВидыЦен Тогда
		РегистрыСведений.СкидкиТорговыхПредложенийВидыЦен.ДобавитьСкидкуТорговогоПредложения(
			ТорговоеПредложение, Скидка, Отказ, Удалить);
	ИначеЕсли ВариантПубликацииСкидки = Перечисления.ВариантыПубликацииСкидок.ВидыСкидок Тогда
		РегистрыСведений.СкидкиТорговыхПредложений.ДобавитьСкидкуТорговогоПредложения(
			ТорговоеПредложение, Скидка, Отказ, Удалить);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОтбораСкидок() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТорговоеПредложение", Неопределено);
	ПараметрыОтбора.Вставить("Опт", Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

#Область РаботаСТипами

Функция ПустаяПричинаИсключенияИзПубликации()
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.ПричинаИсключенияИзПубликацииТорговыеПредложения.Тип;
	Возврат ОписаниеТипов.ПривестиЗначение(Неопределено);
КонецФункции

Функция КодОбъектаИнформационнойБазы(Объект, ЗначениеПоУмолчанию = Неопределено) Экспорт

	ТипЗначения = ТипЗнч(Объект);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли НЕ Метаданные.Справочники.Содержит(ОбъектМетаданных)
		И НЕ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		И НЕ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		И НЕ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		И НЕ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли ОбъектМетаданных.ДлинаКода = 0 Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Код");

КонецФункции

#КонецОбласти

#Область ПубликацияТорговыхПредложений

Функция КлючФоновогоЗаданияСинхронизацииТорговыхПредложений()
	
	КлючФоновогоЗадания = Метаданные.РегламентныеЗадания.СинхронизацияТорговыхПредложений.Имя;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		КлючФоновогоЗадания = СтрШаблон(
			"%1%2", 
			КлючФоновогоЗадания, 
			Формат(ПараметрыСеанса.ОбластьДанныхЗначение, "ЧГ="));
		
	КонецЕсли;
	
	Возврат КлючФоновогоЗадания;
	
КонецФункции

Функция ВыполнитьСинхронизациюТорговыхПредложенийВФоне(ДлительнаяОперация, ПрайсЛист = Неопределено) Экспорт 
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	КлючФоновогоЗадания = КлючФоновогоЗаданияСинхронизацииТорговыхПредложений();
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючФоновогоЗадания);
	Отбор.Вставить("Состояние" , СостояниеФоновогоЗадания.Активно);
	
	ВыполняемыеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для Каждого ВыполняемоеФоновоеЗадание Из ВыполняемыеФоновыеЗадания Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ВыполняемоеФоновоеЗадание.УникальныйИдентификатор);
	КонецЦикла;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Синхронизация торговых предложений с сервисом 1С:Бизнес-сеть'");
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.КлючФоновогоЗадания         = КлючФоновогоЗадания;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ВыводитьПрогресс", Истина);
	ПараметрыПроцедуры.Вставить("ПрайсЛист", ПрайсЛист);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ТорговыеПредложенияСлужебный.СинхронизацияТорговыхПредложений",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Отменяет фоновое задание публикации, и записывает сведения в РС СостоянияСинхронизацииТорговыеПредложения.
Процедура ОтменитьФоновоеЗадание(ДлительнаяОперация) Экспорт 
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	ОбновитьСтатистикуОпубликованныхТорговыхПредложений();
	
КонецПроцедуры

Процедура НайтиДлительнуюОперациюСинхронизацииТорговыхПредложений(ДлительнаяОперация) Экспорт
	
	Если Не ДлительнаяОперация = Неопределено И ДлительнаяОперация.Статус = "Выполняется" Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ"      , КлючФоновогоЗаданияСинхронизацииТорговыхПредложений());
	Отбор.Вставить("Состояние" , СостояниеФоновогоЗадания.Активно);
	
	ВыполняемыеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ВыполняемыеФоновыеЗадания.Количество() = 0 Тогда
		ДлительнаяОперация = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = Новый Структура;
	ДлительнаяОперация.Вставить("Статус"                      , "Выполняется");
	ДлительнаяОперация.Вставить("ИдентификаторЗадания"        , ВыполняемыеФоновыеЗадания[0].УникальныйИдентификатор);
	ДлительнаяОперация.Вставить("АдресРезультата"             , "");
	ДлительнаяОперация.Вставить("КраткоеПредставлениеОшибки"  , "");
	ДлительнаяОперация.Вставить("ПодробноеПредставлениеОшибки", "");
	
КонецПроцедуры

Процедура ОчиститьНоменклатуруБезОрганизаций()
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.НоменклатураТорговойПлощадки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ПустаяСсылкаНаОрганизацию());
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Торговые предложения.Очистить записи номенклатуры с пустой организаций.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,, 
			"ТорговыеПредложенияСлужебный.ОчиститьНоменклатуруБезОрганизаций", 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПустаяСсылкаНаОрганизацию()
	
	Результат = Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение();
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеФормыСкидок(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных                = 
		ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НаборЗаписей.Количество");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 1;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля               = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле          = Новый ПолеКомпоновкиДанных(Элементы.Скидка.Имя);
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементОформляемогоПоля               = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле          = Новый ПолеКомпоновкиДанных(Элементы.Количество.Имя);
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

Функция РезультирующиеТаблицы()
	
	РезультирующиеТаблицы = Новый Структура;
	РезультирующиеТаблицы.Вставить("ПрайсЛистыСлужебный", 			Неопределено);
	РезультирующиеТаблицы.Вставить("УстаревшиеПредложения", 		Неопределено);
	РезультирующиеТаблицы.Вставить("ТоварыСлужебный", 				Неопределено);
	РезультирующиеТаблицы.Вставить("Контакты", 						Неопределено);
	РезультирующиеТаблицы.Вставить("Контрагенты", 					Неопределено);
	РезультирующиеТаблицы.Вставить("СвойстваСлужебный", 			Неопределено);
	РезультирующиеТаблицы.Вставить("ШтрихКоды", 					Неопределено);
	РезультирующиеТаблицы.Вставить("ИзображенияСлужебный", 			Неопределено);
	РезультирующиеТаблицы.Вставить("СкидкиЗаОбъемПродаж", 			Неопределено);
	РезультирующиеТаблицы.Вставить("СкидкиЗаОбъемПродажВидыЦен", 	Неопределено);
	РезультирующиеТаблицы.Вставить("СкидкиПроцентСумма", 			Неопределено);
	РезультирующиеТаблицы.Вставить("СкидкиПроцентСуммаВидыЦен", 	Неопределено);
	
	Возврат РезультирующиеТаблицы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
