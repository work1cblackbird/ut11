////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы пользователя
// с журналами документов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает предельное время обновления списка документов.
// 
// Возвращаемое значение:
//  Число - Предельное время обновления списка документов
Функция ПредельноеВремяОбновленияСпискаДокументов() Экспорт

	ПредельноеВремяОбновленияСписка = Константы.ПредельноеВремяОбновленияСпискаДокументов.Получить();
	
	Возврат ПредельноеВремяОбновленияСписка;

КонецФункции

// Структура пользовательских настроек списка.
// 
// Возвращаемое значение:
//  Структура - Структура пользовательских настроек списка:
// * ИмяСписка - Строка - 
// * ИмяЭлементаСписка - Строка - 
// * ЕстьОсновнаяТаблица - Булево - 
// * КлючиСписка - Соответствие из Строка - 
// * СписокПолейСоставногоТипа - Массив из Строка- 
// * ДанныеУстарели - Булево - 
// * ДлительностьОбновления - Число - 
// * ПредельноеВремяОбновленияСпискаДокументов - Число - 
// * КнопкаОбновить - Строка - 
// * ИмяРеквизитаРежимАвтообновления - Строка - 
// * ИмяРеквизитаПроизводительныйРежимОбновления - Строка -
// * ЭлементПроблемныеНастройки - Строка - 
// * ЭлементЗаголовокПроблемыСписка - Строка - 
// * ЭлементВыбранныеПоля - Строка - 
// * ЭлементЗаголовокВыбранныеПоля - Строка - 
// * ЭлементВыбранныеПоляКритичные - Строка - 
// * ЭлементВыбранныеПоляОбычные - Строка - 
// * ЭлементВыбранныеПоляИсправить - Строка - 
// * ЭлементОтборыСписка - Строка - 
// * ЭлементЗаголовокОтбор - Строка - 
// * ЭлементОтборКритичные - Строка - 
// * ЭлементОтборОбычные - Строка - 
// * ЭлементОтборыИсправить - Строка - 
// * ЭлементПорядокСписка - Строка - 
// * ЭлементЗаголовокПорядок - Строка - 
// * ЭлементПорядокКритичные - Строка - 
// * ЭлементПорядокОбычные - Строка - 
// * ЭлементПорядокИсправить - Строка - 
// * ЭлементУсловноеОформлениеСписка - Строка - 
// * ЭлементЗаголовокУсловноеОформление - Строка - 
// * ЭлементУсловноеОформлениеКритичные - Строка - 
// * ЭлементУсловноеОформлениеОбычные - Строка - 
// * ЭлементУсловноеОформлениеИсправить - Строка - 
// * ГруппаОтсутствиеПроблем - Строка - 
// * ГруппаНеактуальныеДанные - Строка - 
// * ГруппаОписаниеПроблем - Строка - 
// * ПровереныНастройкиКомпоновкиДанных - Булево - 
// * НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - 
// * СтруктураПользовательскихНастроек - См. РаботаСЖурналамиДокументов.ПроверитьПользовательскиеНастройкиДинамическогоСписка
Функция СтруктураПользовательскихНастроекСписка() Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСписка", "");
	СтруктураПараметров.Вставить("ИмяЭлементаСписка", "");
	СтруктураПараметров.Вставить("ЕстьОсновнаяТаблица", Истина);
	СтруктураПараметров.Вставить("КлючиСписка", Новый Соответствие);
	СтруктураПараметров.Вставить("СписокПолейСоставногоТипа", Новый Массив);
	СтруктураПараметров.Вставить("ДанныеУстарели", Ложь);
	СтруктураПараметров.Вставить("ДлительностьОбновления", 0);
	СтруктураПараметров.Вставить("ПредельноеВремяОбновленияСпискаДокументов", 2);
	СтруктураПараметров.Вставить("КнопкаОбновить", "");
	СтруктураПараметров.Вставить("ГруппаОтсутствиеПроблем", "");
	СтруктураПараметров.Вставить("ГруппаНеактуальныеДанные", "");
	СтруктураПараметров.Вставить("ГруппаОписаниеПроблем", "");
	СтруктураПараметров.Вставить("ИмяРеквизитаРежимАвтообновления", "");
	СтруктураПараметров.Вставить("ИмяРеквизитаПроизводительныйРежимОбновления", "");
	СтруктураПараметров.Вставить("ЭлементПроблемныеНастройки", "");
	СтруктураПараметров.Вставить("ЭлементЗаголовокПроблемыСписка", "");
	СтруктураПараметров.Вставить("ЭлементВыбранныеПоля", "");
	СтруктураПараметров.Вставить("ЭлементЗаголовокВыбранныеПоля", "");
	СтруктураПараметров.Вставить("ЭлементВыбранныеПоляКритичные", "");
	СтруктураПараметров.Вставить("ЭлементВыбранныеПоляОбычные", "");
	СтруктураПараметров.Вставить("ЭлементВыбранныеПоляИсправить", "");
	СтруктураПараметров.Вставить("ЭлементОтборыСписка", "");
	СтруктураПараметров.Вставить("ЭлементЗаголовокОтбор", "");
	СтруктураПараметров.Вставить("ЭлементОтборКритичные", "");
	СтруктураПараметров.Вставить("ЭлементОтборОбычные", "");
	СтруктураПараметров.Вставить("ЭлементОтборыИсправить", "");
	СтруктураПараметров.Вставить("ЭлементПорядокСписка", "");
	СтруктураПараметров.Вставить("ЭлементЗаголовокПорядок", "");
	СтруктураПараметров.Вставить("ЭлементПорядокКритичные", "");
	СтруктураПараметров.Вставить("ЭлементПорядокОбычные", "");
	СтруктураПараметров.Вставить("ЭлементПорядокИсправить", "");
	СтруктураПараметров.Вставить("ЭлементУсловноеОформлениеСписка", "");
	СтруктураПараметров.Вставить("ЭлементЗаголовокУсловноеОформление", "");
	СтруктураПараметров.Вставить("ЭлементУсловноеОформлениеКритичные", "");
	СтруктураПараметров.Вставить("ЭлементУсловноеОформлениеОбычные", "");
	СтруктураПараметров.Вставить("ЭлементУсловноеОформлениеИсправить", "");
	СтруктураПараметров.Вставить("НастройкиКомпоновкиДанных", Новый НастройкиКомпоновкиДанных);
	СтруктураПараметров.Вставить("ПровереныНастройкиКомпоновкиДанных", Ложь);
	СтруктураПараметров.Вставить("СтруктураПользовательскихНастроек", Новый Структура);

	Возврат СтруктураПараметров;

КонецФункции

// Установить свойства динамического списка (основная таблица: Реестр документов).
// 
// Параметры:
//  Список - ДинамическийСписок -
//  КлючиСписка - Соответствие из Строка - список ключей динамического списка
//  ПоляСоставногоТипа - Неопределено, Массив из Строка - список полей составного типа
//  ИспользоватьПроизводительныйРежимОбновления - Булево - Признак использования режима ускорения обновления списка
//
Процедура УстановитьСвойстваДинамическогоСпискаТаблицаРеестрДокументов(Список, КлючиСписка,
	ПоляСоставногоТипа = Неопределено, ИспользоватьПроизводительныйРежимОбновления = Ложь) Экспорт

	Если ИспользоватьПроизводительныйРежимОбновления Тогда

		Список.ОсновнаяТаблица = "";

		ПоляКлюча = Новый Массив;
		ПоляКлюча.Добавить(КлючиСписка.Получить("ТипСсылки"));
		ПоляКлюча.Добавить(КлючиСписка.Получить("ХозяйственнаяОперация"));
		ПоляКлюча.Добавить(КлючиСписка.Получить("Дата"));
		ПоляКлюча.Добавить(КлючиСписка.Получить("ИдентификаторЗаписи"));

		Список.ПоляКлюча = Новый ФиксированныйМассив(ПоляКлюча);
		Список.ВидКлюча = ВидКлючаДинамическогоСписка.КлючСтроки;
		Список.ДинамическоеСчитываниеДанных = Истина;

	КонецЕсли;

	Если Не ПоляСоставногоТипа = Неопределено Тогда

		Для Каждого Элемент Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл

			ТипыПоля = Элемент.Тип.Типы();
			Если ТипыПоля.Количество() > 1 Тогда
				ПоляСоставногоТипа.Добавить(Строка(Элемент.Поле));
			КонецЕсли;

		КонецЦикла;

		Для Каждого Элемент Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл

			ТипыПоля = Элемент.Тип.Типы();
			Если ТипыПоля.Количество() > 1 Тогда
				ПоляСоставногоТипа.Добавить(Строка(Элемент.Поле));
			КонецЕсли;

		КонецЦикла;

		Для Каждого Элемент Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл

			ТипыПоля = Элемент.Тип.Типы();
			Если ТипыПоля.Количество() > 1 Тогда
				ПоляСоставногоТипа.Добавить(Строка(Элемент.Поле));
			КонецЕсли;

		КонецЦикла;

		Для Каждого Элемент Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбораЭлементовСтруктуры.Элементы Цикл

			ТипыПоля = Элемент.Тип.Типы();
			Если ТипыПоля.Количество() > 1 Тогда
				ПоляСоставногоТипа.Добавить(Строка(Элемент.Поле));
			КонецЕсли;

		КонецЦикла;

		Для Каждого Элемент Из Список.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы Цикл

			ТипыПоля = Элемент.Тип.Типы();
			Если ТипыПоля.Количество() > 1 Тогда
				ПоляСоставногоТипа.Добавить(Строка(Элемент.Поле));
			КонецЕсли;

		КонецЦикла;

		ПоляСоставногоТипа = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПоляСоставногоТипа);

	КонецЕсли;

КонецПроцедуры

// Структура формирования на форме группы пользовательских настроек динамического списка.
// 
// Возвращаемое значение:
//  Структура - Структура формирования на форме группы пользовательских настроек динамического списка:
// * ИмяСписка - Строка - 
// * ИмяЭлементаСписка - Строка - 
// * КлючиСписка - Соответствие Из Строка - 
// * СписокСоставныхПолей - Массив Из Строка- 
// * ГруппаРазмещенияНастройки - Неопределено - 
// * ИмяРеквизитаРежимАвтообновления - Строка - 
// * ИмяКомандыОбновленияСписка - Строка - 
// * ПредельноеВремяОбновленияСпискаДокументов - Число - 
Функция СтруктураФормированияНаФормеГруппыПользовательскихНастроекДинамическогоСписка() Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСписка", "");
	СтруктураПараметров.Вставить("ИмяЭлементаСписка", "");
	СтруктураПараметров.Вставить("КлючиСписка", Новый Соответствие);
	СтруктураПараметров.Вставить("СписокСоставныхПолей", Новый Массив);

	СтруктураПараметров.Вставить("ГруппаРазмещенияНастройки", Неопределено);
	СтруктураПараметров.Вставить("ИмяРеквизитаРежимАвтообновления", "");
	СтруктураПараметров.Вставить("ИмяКомандыОбновленияСписка", "");

	СтруктураПараметров.Вставить("ПредельноеВремяОбновленияСпискаДокументов", 2);

	Возврат СтруктураПараметров;

КонецФункции

// Инициировать настройки динамических списков.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ПараметрыНастройкиСписков - Массив из см. РаботаСЖурналамиДокументов.СтруктураФормированияНаФормеГруппыПользовательскихНастроекДинамическогоСписка.
Процедура ИнициироватьНастройкиДинамическихСписков(Форма, ПараметрыНастройкиСписков) Экспорт

	ПредельноеВремяОбновленияСпискаДокументов = РаботаСЖурналамиДокументов.ПредельноеВремяОбновленияСпискаДокументов();
	ИспользоватьМеханизмИзмененияНастроекСписка = Константы.ИспользоватьМеханизмИзмененияНастроекСписковДокументов.Получить();

	КлючиСохраняемыхНастроек = КлючиСохраняемыхНастроекПроизводительныйРежимОбновленияСписка();
	НастройкаУскорениеСписка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючиСохраняемыхНастроек.КлючОбъекта,
		КлючиСохраняемыхНастроек.КлючНастроек);
	ПроизводительныйРежимОбновления = Ложь;
	Если ТипЗнч(НастройкаУскорениеСписка) = Тип("Булево") Тогда
		ПроизводительныйРежимОбновления = НастройкаУскорениеСписка;
	КонецЕсли;

	МассивДобавляемыхРеквизитов = Новый Массив;

	РеквизитНастройки = Новый РеквизитФормы(ИмяНастройкиФормыСписковДокументов(), Новый ОписаниеТипов);
	РеквизитНастройки.Заголовок = НСтр("ru = 'Настройки списка'");
	РеквизитНастройки.СохраняемыеДанные = Ложь;
	МассивДобавляемыхРеквизитов.Добавить(РеквизитНастройки);

	РеквизитПроизводительныйРежимОбновления = Новый РеквизитФормы("ВключенРежимУскоренияСпискаДокументов",
		Новый ОписаниеТипов("Булево"));
	РеквизитПроизводительныйРежимОбновления.Заголовок = НСтр("ru = 'Производительный режим'");
	РеквизитПроизводительныйРежимОбновления.СохраняемыеДанные = Ложь;
	МассивДобавляемыхРеквизитов.Добавить(РеквизитПроизводительныйРежимОбновления);

	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	Форма[РеквизитПроизводительныйРежимОбновления.Имя] = ПроизводительныйРежимОбновления;

	СоответствиеНастроек = Новый Структура;

	Для Каждого ПараметрНастройкиСписка Из ПараметрыНастройкиСписков Цикл

		Если ПараметрНастройкиСписка.КлючиСписка.Количество() > 0 Тогда
			КлючиСписка = ПараметрНастройкиСписка.КлючиСписка;
		Иначе
			КлючиСписка = Новый Соответствие;
			КлючиСписка.Вставить("ТипСсылки", "ТипСсылки");
			КлючиСписка.Вставить("ХозяйственнаяОперация", "ХозяйственнаяОперация");
			КлючиСписка.Вставить("Дата", "Дата");
			КлючиСписка.Вставить("ИдентификаторЗаписи", "ИдентификаторЗаписи");
		КонецЕсли;

		СписокСоставныхПолей = Новый Массив;
		СписокСоставныхПолей.Добавить("Ссылка");
		Если ПараметрНастройкиСписка.СписокСоставныхПолей.Количество() > 0 Тогда
			СписокСоставныхПолей = ПараметрНастройкиСписка.СписокСоставныхПолей;
		КонецЕсли;

		Если ПараметрНастройкиСписка.ИмяЭлементаСписка = "" Тогда
			ПараметрНастройкиСписка.ИмяЭлементаСписка = ПараметрНастройкиСписка.ИмяСписка;
		КонецЕсли;
		
		ИспользоватьПроизводительныйРежимОбновления = ИспользоватьМеханизмИзмененияНастроекСписка
			И ПроизводительныйРежимОбновления;
		УстановитьСвойстваДинамическогоСпискаТаблицаРеестрДокументов(Форма[ПараметрНастройкиСписка.ИмяСписка],
			КлючиСписка, СписокСоставныхПолей, ИспользоватьПроизводительныйРежимОбновления);

		ПараметрНастройкиСписка.Вставить("ПредельноеВремяОбновленияСпискаДокументов",
			ПредельноеВремяОбновленияСпискаДокументов);
		ПараметрНастройкиСписка.Вставить("СписокСоставныхПолей", СписокСоставныхПолей);

		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("Настройки", Новый Структура);
		СтруктураНастроек.Вставить("ЭлементыГруппыНастроек", Новый Соответствие);
		СтруктураНастроек.Вставить("ЕстьОсновнаяТаблица", Форма[ПараметрНастройкиСписка.ИмяСписка].ОсновнаяТаблица <> "");
		СтруктураНастроек.Вставить("КлючиСписка", КлючиСписка);
		СтруктураНастроек.Вставить("ИспользоватьМеханизмИзмененияНастроекСписка", ИспользоватьМеханизмИзмененияНастроекСписка);
		СтруктураНастроек.Вставить("РеквизитПроизводительныйРежимОбновления", РеквизитПроизводительныйРежимОбновления.Имя);

		СоздатьНаФормеГруппуНастроекДинамическогоСписка(Форма, ПараметрНастройкиСписка, СтруктураНастроек);

		СоответствиеНастроек.Вставить(ПараметрНастройкиСписка.ИмяСписка, СтруктураНастроек);

	КонецЦикла;

	Форма[РеквизитНастройки.Имя] = СоответствиеНастроек;

КонецПроцедуры

// Список документов при загрузке данных из настроек на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяСписка - Строка - Имя динамического списка
//  Настройки - см. РаботаСЖурналамиДокументов.СтруктураПользовательскихНастроекСписка
Процедура УстановитьПризнакАвтообновленияСпискаДокументовПриЗагрузкеДанныхИзНастроек(Форма, ИмяСписка, Настройки) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;

	Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] = Истина;

	РежимАвтообновленияСписка = Настройки.Получить(НастройкиСписка.ИмяРеквизитаРежимАвтообновления);

	Если Не РежимАвтообновленияСписка = Неопределено Тогда
		Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] = РежимАвтообновленияСписка;
	КонецЕсли;

КонецПроцедуры

// Получение значения настройки списка документов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
//  ИмяСвойства - Строка - Имя свойства
// 
// Возвращаемое значение:
//  Произвольный - Значение настройки списка документов
Функция ЗначениеНастройкиСпискаДокументов(Форма, ИмяСписка, ИмяСвойства) Экспорт

	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	ЗначениеСвойства = Неопределено;

	НастройкиСписка.Свойство(ИмяСвойства, ЗначениеСвойства);

	Возврат ЗначениеСвойства;

КонецФункции

// Возвращает массив хозяйственных операций переданных типов документов,
// которые отражаются в реестре документов и не отключены по ФО.
//
// Параметры:
//  ТипыДокументов - Массив из Тип - массив типов.
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ХозяйственныеОперации - 
//
Функция ХозяйственныеОперацииДокументовОтраженныеВРеестре(ТипыДокументов) Экспорт

	МассивИдентификаторов = Новый Массив;
	МассивХозяйственныхОпераций = Новый Массив;

	Для Каждого СтрМас Из ТипыДокументов Цикл
		Если ОбщегоНазначения.ЭтоСсылка(СтрМас) Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(СтрМас);
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиХозяйственныхОперацийДокументы.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций.Документы КАК НастройкиХозяйственныхОперацийДокументы
	|ГДЕ
	|	НастройкиХозяйственныхОперацийДокументы.ИдентификаторОбъектаМетаданных В (&МассивИдентификаторов)";

	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		МассивХозяйственныхОпераций.Добавить(Выборка.ХозяйственнаяОперация);

	КонецЦикла;

	Возврат МассивХозяйственныхОпераций;

КонецФункции

// Ключи сохраняемых настроек режим ускорения списка.
// 
// Возвращаемое значение:
//  Структура - Ключи сохраняемых настроек режим ускорения списка:
// * КлючОбъекта - Строка - Ключ объекта настройки
// * КлючНастроек - Строка - Ключ сохраняемых настроек
Функция КлючиСохраняемыхНастроекПроизводительныйРежимОбновленияСписка() Экспорт

	СтруктураКлючей = Новый Структура;
	СтруктураКлючей.Вставить("КлючОбъекта", "РаботаСЖурналамиДокументов");
	СтруктураКлючей.Вставить("КлючНастроек", "ПроизводительныйРежимОбновленияСпискаДокументов");

	Возврат СтруктураКлючей;

КонецФункции

// Проверка пользовательских настроек динамического списка и выявления тех, которые могут приводить к снижению
// скорости работы с ним.
// 
// Параметры:
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных
//  СписокПолейСоставногоТипа - Массив Из Строка
// 
// Возвращаемое значение:
//  Структура - Проверенные настройки динамического списка:
// * ЕстьПроблемыВНастройках - Булево - Признак наличия проблем в пользовательских настройках
// * ЕстьПроблемыВНастройкахОтбораКритичные - Булево - Признак наличия "критичных" проблем в пользовательских настройках 
// * ЕстьПроблемыВНастройкахОтбораОбычные - Булево - Признак наличия "обычных" проблем в пользовательских настройках
// * ОтборОбычные - Массив из Строка - Список проблемных полей списка с уровнем важности "Обычные"
// * ОтборКритичные - Массив из Строка - Список проблемных полей списка с уровнем важности "Критичные"
// * ОтборОбычныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Обычные"
// * ОтборКритичныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Критичные"
// * ЕстьПроблемыВНастройкахПорядкаКритичные - Булево - Наличие проблем в настройках с уровнем важности "Критичные"
// * ЕстьПроблемыВНастройкахПорядкаОбычные - Булево - Наличие проблем в настройках с уровнем важности "Обычные"
// * ПорядокОбычные - Массив из Строка- Список проблемных полей списка с уровнем важности "Обычные"
// * ПорядокКритичные - Массив из Строка - Список проблемных полей списка с уровнем важности "Критичные"
// * ПорядокОбычныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Обычные"
// * ПорядокКритичныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Критичные"
// * ЕстьПроблемыВНастройкахОформленияКритичные - Булево - Наличие проблем в настройках с уровнем важности "Критичные"
// * ЕстьПроблемыВНастройкахОформленияОбычные - Булево - Наличие проблем в настройках с уровнем важности "Обычные"
// * УсловноеОформлениеОбычные - Массив из Строка - Список проблемных полей списка с уровнем важности "Обычные"
// * УсловноеОформлениеКритичные - Массив из Строка - Список проблемных полей списка с уровнем важности "Критичные"
// * УсловноеОформлениеОбычныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Обычные"
// * УсловноеОформлениеКритичныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Критичные"
// * ЕстьПроблемыВВыбранныхПоляхКритичные - Булево - Наличие проблем в настройках с уровнем важности "Критичные"
// * ЕстьПроблемыВВыбранныхПоляхОбычные - Булево - Наличие проблем в настройках с уровнем важности "Обычные"
// * ВыбранныеПоляОбычные - Массив из Строка - Список проблемных полей списка с уровнем важности "Обычные"
// * ВыбранныеПоляКритичные - Массив из Строка - Список проблемных полей списка с уровнем важности "Критичные"
// * ВыбранныеПоляОбычныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Обычные"
// * ВыбранныеПоляКритичныеПредставление - Массив из Строка - Представление проблемных полей списка с уровнем важности "Критичные"
Функция ПроверитьПользовательскиеНастройкиДинамическогоСписка(НастройкиКомпоновкиДанных, СписокПолейСоставногоТипа) Экспорт
	
	СписокПолейОтборыКритичные = Новый Массив;
	СписокПолейПорядокКритичные = Новый Массив;
	СписокПолейУсловноеОформлениеКритичные = Новый Массив;
	СписокПолейВыбранныеПоляКритичные = Новый Массив;

	СписокПолейОтборы = Новый Массив;
	СписокПолейПорядок = Новый Массив;
	СписокПолейУсловноеОформление = Новый Массив;
	СписокПолейВыбранныеПоля = Новый Массив;

	ЕстьПроблемыВПользовательскихНастройках = Ложь;

	ПроверитьЭлементыНастроекОтбораДинамическогоСписка(НастройкиКомпоновкиДанных.Отбор, СписокПолейОтборы);
	ПроверитьЭлементыНастроекПорядкаДинамическогоСписка(НастройкиКомпоновкиДанных.Порядок, СписокПолейПорядок, СписокПолейСоставногоТипа);
	ПроверитьЭлементыВыбранныхПолейДинамическогоСписка(НастройкиКомпоновкиДанных.Структура, СписокПолейВыбранныеПоля);
	ПроверитьЭлементыНастроекУсловногоОформленияДинамическогоСписка(НастройкиКомпоновкиДанных.Структура,
		СписокПолейУсловноеОформление);

	Если СписокПолейОтборы.Количество() > 0 Или СписокПолейПорядок.Количество() > 0
		Или СписокПолейУсловноеОформление.Количество() > 0 Или СписокПолейВыбранныеПоля.Количество() > 0 Тогда

		ЕстьПроблемыВПользовательскихНастройках = Истина;

	КонецЕсли;
	
	// Критичные пользовательские настройки динамического списка - обращение к реквизитам объектов составного типа
	Для Каждого СоставнойРеквизит Из СписокПолейСоставногоТипа Цикл

		Для Каждого ТекущийЭлемент Из СписокПолейОтборы Цикл

			Если Не СтрНайти(ТекущийЭлемент, СоставнойРеквизит + ".") = 0 Тогда
				СписокПолейОтборыКритичные.Добавить(ТекущийЭлемент);
			КонецЕсли;

		КонецЦикла;

		Для Каждого ТекущийЭлемент Из СписокПолейПорядок Цикл

			Если Не СтрНайти(ТекущийЭлемент, СоставнойРеквизит + ".") = 0 Или ТекущийЭлемент = СоставнойРеквизит Тогда
				СписокПолейПорядокКритичные.Добавить(ТекущийЭлемент);
			КонецЕсли;

		КонецЦикла;

		Для Каждого ТекущийЭлемент Из СписокПолейУсловноеОформление Цикл

			Если Не СтрНайти(ТекущийЭлемент, СоставнойРеквизит + ".") = 0 Тогда
				СписокПолейУсловноеОформлениеКритичные.Добавить(ТекущийЭлемент);
			КонецЕсли;

		КонецЦикла;

		Для Каждого ТекущийЭлемент Из СписокПолейВыбранныеПоля Цикл

			Если Не СтрНайти(ТекущийЭлемент, СоставнойРеквизит + ".") = 0 Тогда
				СписокПолейВыбранныеПоляКритичные.Добавить(ТекущийЭлемент);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	// Критичные пользовательские настройки динамического списка - обращение через "несколько точек"
	Для Каждого ТекущийЭлемент Из СписокПолейОтборы Цикл
		Если СтрЧислоВхождений(ТекущийЭлемент, ".") > 1
			И СписокПолейОтборыКритичные.Найти(ТекущийЭлемент) = Неопределено Тогда
			СписокПолейОтборыКритичные.Добавить(ТекущийЭлемент);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекущийЭлемент Из СписокПолейПорядок Цикл
		Если СтрЧислоВхождений(ТекущийЭлемент, ".") > 1
			И СписокПолейПорядокКритичные.Найти(ТекущийЭлемент) = Неопределено Тогда
			СписокПолейПорядокКритичные.Добавить(ТекущийЭлемент);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекущийЭлемент Из СписокПолейУсловноеОформление Цикл
		Если СтрЧислоВхождений(ТекущийЭлемент, ".") > 1
			И СписокПолейУсловноеОформлениеКритичные.Найти(ТекущийЭлемент) = Неопределено Тогда
			СписокПолейУсловноеОформлениеКритичные.Добавить(ТекущийЭлемент);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекущийЭлемент Из СписокПолейВыбранныеПоля Цикл
		Если СтрЧислоВхождений(ТекущийЭлемент, ".") > 1
			И СписокПолейВыбранныеПоляКритичные.Найти(ТекущийЭлемент) = Неопределено Тогда
			СписокПолейВыбранныеПоляКритичные.Добавить(ТекущийЭлемент);
		КонецЕсли;
	КонецЦикла;

	СписокПолейОтборы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПолейОтборы, СписокПолейОтборыКритичные);
	СписокПолейПорядок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПолейПорядок, СписокПолейПорядокКритичные);
	СписокПолейУсловноеОформление = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПолейУсловноеОформление,
		СписокПолейУсловноеОформлениеКритичные);
	СписокПолейВыбранныеПоля = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПолейВыбранныеПоля,
		СписокПолейВыбранныеПоляКритичные);
		
	ПроверкаПользовательскихНастроекСтруктура = Новый Структура;
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройках", ЕстьПроблемыВПользовательскихНастройках);
	
	СписокПолейОтборыКритичные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейОтборыКритичные);
	СписокПолейОтборы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейОтборы);
	
	СписокПолейОтборыКритичныеПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейОтборыКритичные Цикл
		СписокПолейОтборыКритичныеПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляОтбора));
	КонецЦикла;
	
	СписокПолейОтборыПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейОтборы Цикл
		СписокПолейОтборыПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляОтбора));
	КонецЦикла;
	
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройкахОтбораКритичные", СписокПолейОтборыКритичные.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройкахОтбораОбычные", СписокПолейОтборы.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ОтборОбычные", СписокПолейОтборы);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ОтборКритичные", СписокПолейОтборыКритичные);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ОтборОбычныеПредставление", СписокПолейОтборыПредставление);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ОтборКритичныеПредставление", СписокПолейОтборыКритичныеПредставление);
	
	СписокПолейПорядокКритичные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейПорядокКритичные);
	СписокПолейПорядок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейПорядок);
	
	СписокПолейПорядокКритичныеПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейПорядокКритичные Цикл
		СписокПолейПорядокКритичныеПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляПорядка));
	КонецЦикла;
	
	СписокПолейПорядокПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейПорядок Цикл
		СписокПолейПорядокПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляПорядка));
	КонецЦикла;
	
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройкахПорядкаКритичные", СписокПолейПорядокКритичные.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройкахПорядкаОбычные", СписокПолейПорядок.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ПорядокОбычные", СписокПолейПорядок);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ПорядокКритичные", СписокПолейПорядокКритичные);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ПорядокОбычныеПредставление", СписокПолейПорядокПредставление);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ПорядокКритичныеПредставление", СписокПолейПорядокКритичныеПредставление);
	
	СписокПолейУсловноеОформлениеКритичные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейУсловноеОформлениеКритичные);
	СписокПолейУсловноеОформление = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейУсловноеОформление);
	
	СписокПолейУсловноеОформлениеКритичныеПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейУсловноеОформлениеКритичные Цикл
		СписокПолейУсловноеОформлениеКритичныеПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляОтбора));
	КонецЦикла;
	
	СписокПолейУсловноеОформлениеПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейУсловноеОформление Цикл
		СписокПолейУсловноеОформлениеПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляОтбора));
	КонецЦикла;
	
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройкахОформленияКритичные", СписокПолейУсловноеОформлениеКритичные.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВНастройкахОформленияОбычные", СписокПолейУсловноеОформление.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("УсловноеОформлениеОбычные", СписокПолейУсловноеОформление);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("УсловноеОформлениеКритичные", СписокПолейУсловноеОформлениеКритичные);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("УсловноеОформлениеОбычныеПредставление", СписокПолейУсловноеОформлениеПредставление);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("УсловноеОформлениеКритичныеПредставление", СписокПолейУсловноеОформлениеКритичныеПредставление);
	
	СписокПолейВыбранныеПоляКритичные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейВыбранныеПоляКритичные);
	СписокПолейВыбранныеПоля = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПолейВыбранныеПоля);
	
	СписокПолейВыбранныеПоляКритичныеПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейВыбранныеПоляКритичные Цикл
		СписокПолейВыбранныеПоляКритичныеПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляВыбора));
	КонецЦикла;
	
	СписокПолейВыбранныеПоляПредставление = Новый Массив;
	Для каждого ТекущийЭлемент Из СписокПолейВыбранныеПоля Цикл
		СписокПолейВыбранныеПоляПредставление.Добавить(ЗаголовокДоступногоПоляСписка(ТекущийЭлемент, НастройкиКомпоновкиДанных.ДоступныеПоляВыбора));
	КонецЦикла;
	
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВВыбранныхПоляхКритичные", СписокПолейВыбранныеПоляКритичные.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ЕстьПроблемыВВыбранныхПоляхОбычные", СписокПолейВыбранныеПоля.Количество() > 0);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ВыбранныеПоляОбычные", СписокПолейВыбранныеПоля);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ВыбранныеПоляКритичные", СписокПолейВыбранныеПоляКритичные);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ВыбранныеПоляОбычныеПредставление", СписокПолейВыбранныеПоляПредставление);
	ПроверкаПользовательскихНастроекСтруктура.Вставить("ВыбранныеПоляКритичныеПредставление", СписокПолейВыбранныеПоляКритичныеПредставление);
	
	Возврат ПроверкаПользовательскихНастроекСтруктура;
	
КонецФункции

// Отображение основной группы настроек обновления списка.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется настройка динамического списка
//  ИмяСписка - Строка - имя реквизита динамического списка на форме
Процедура УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(Форма, ИмяСписка) Экспорт
	
	ИмяНастройки = ИмяНастройкиФормыСписковДокументов();
	НастройкиСписка = Форма[ИмяНастройки][ИмяСписка].Настройки;
	
	Если Не Форма[НастройкиСписка.ИмяРеквизитаРежимАвтообновления] Тогда
		
		ВидимостьГруппыОтсутствиеПроблем = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы,
			НастройкиСписка.ГруппаОтсутствиеПроблем, "Видимость");
			
		Если ВидимостьГруппыОтсутствиеПроблем Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			НастройкиСписка.ГруппаОписаниеПроблем, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			НастройкиСписка.ГруппаОтсутствиеПроблем, "Видимость", Истина);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
			НастройкиСписка.ГруппаНеактуальныеДанные, "Видимость", Ложь);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, НастройкиСписка.КнопкаОбновить,
			"Видимость", Ложь);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создание на форме группы настроек динамического списка.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Параметры - см. РаботаСЖурналамиДокументов.СтруктураФормированияНаФормеГруппыПользовательскихНастроекДинамическогоСписка
//  СтруктураНастроек - Структура
Процедура СоздатьНаФормеГруппуНастроекДинамическогоСписка(Форма, Параметры, СтруктураНастроек)

	ИмяСписка = Параметры.ИмяСписка;
	
	Действие = "СписокДокументовОбработкаСобытияЭлементаФормы";
	
	ШрифтЗаголовкаВсплывающейГруппы = ШрифтыСтиля.ШрифтЗаголовкаВсплывающейГруппы;
	ШрифтЗаголовкаГруппы = ШрифтыСтиля.ШрифтЗаголовкаГруппы;
	WebЦветаЗеленый = WebЦвета.Зеленый;
	WebЦветаТемноОранжевый = WebЦвета.ТемноОранжевый;
	РезультатПроблемаЦвет = ЦветаСтиля.РезультатПроблемаЦвет;
	ГиперссылкаЦвет = ЦветаСтиля.ГиперссылкаЦвет;
	WebЦветаТусклоСерый = WebЦвета.ТусклоСерый;
	
	СоответствиеСозданныхЭлементов = Новый Соответствие;

	ГруппаОписаниеПроблем = Форма.Элементы.Вставить(ИмяСписка + "ГруппаОписаниеПроблем", Тип("ГруппаФормы"),
		Параметры.ГруппаРазмещенияНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаОписаниеПроблем.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОписаниеПроблем.ШрифтЗаголовка = ШрифтЗаголовкаВсплывающейГруппы;
	ГруппаОписаниеПроблем.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаОписаниеПроблем.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаОписаниеПроблем.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаОписаниеПроблем.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаОписаниеПроблем.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОписаниеПроблем.Заголовок = НСтр("ru = 'Почему список обновляется долго?'");
	ГруппаОписаниеПроблем.ЦветТекстаЗаголовка = WebЦветаТемноОранжевый;
	ГруппаОписаниеПроблем.Видимость = Истина;
	
	#Область ГруппаНастроекОписаниеПроблем
	ГруппаНастроекОписаниеПроблем = Форма.Элементы.Вставить(ИмяСписка + "ГруппаНастроекОписаниеПроблем", Тип("ГруппаФормы"),
		ГруппаОписаниеПроблем); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаНастроекОписаниеПроблем.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастроекОписаниеПроблем.Заголовок = НСтр("ru = 'Настройки'");
	ГруппаНастроекОписаниеПроблем.ОтображатьЗаголовок = Ложь;
	ГруппаНастроекОписаниеПроблем.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНастроекОписаниеПроблем.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ПараметрыСозданияГруппы = Новый Структура;
	ПараметрыСозданияГруппы.Вставить("ПрефиксНастроек", "ОписаниеПроблем");
	ПараметрыСозданияГруппы.Вставить("ГруппаРодитель", ГруппаНастроекОписаниеПроблем);
	ПараметрыСозданияГруппы.Вставить("ИмяРеквизитаРежимАвтообновления", Параметры.ИмяРеквизитаРежимАвтообновления);
	ПараметрыСозданияГруппы.Вставить("СтруктураНастроек", СтруктураНастроек);
	ПараметрыСозданияГруппы.Вставить("ОтображатьЗаголовокОбновлениеСписка", Истина);
	ПараметрыСозданияГруппы.Вставить("WebЦветаТусклоСерый", WebЦветаТусклоСерый);
	ПараметрыСозданияГруппы.Вставить("ШрифтЗаголовкаГруппы", ШрифтЗаголовкаГруппы);
	СоздатьГруппуНастроекАвтообновленияИПроизводительногоРежима(Форма, ИмяСписка, ПараметрыСозданияГруппы, СоответствиеСозданныхЭлементов);
	
	ГруппаДокументыПроблемныеНастройки = Форма.Элементы.Вставить(ИмяСписка + "ДокументыПроблемныеНастройки", Тип(
		"ГруппаФормы"), ГруппаНастроекОписаниеПроблем); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаДокументыПроблемныеНастройки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДокументыПроблемныеНастройки.Заголовок = НСтр("ru = 'Пользователькие настройки'");
	ГруппаДокументыПроблемныеНастройки.ОтображатьЗаголовок = Ложь;
	ГруппаДокументыПроблемныеНастройки.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДокументыПроблемныеНастройки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ЗаголовокПроблемыСписка = Форма.Элементы.Вставить(ИмяСписка + "ДокументыЗаголовокПроблемыСписка", Тип(
		"ДекорацияФормы"), ГруппаДокументыПроблемныеНастройки);
	ЗаголовокПроблемыСписка.Вид = ВидДекорацииФормы.Надпись;
	ЗаголовокПроблемыСписка.Заголовок = НСтр(
		"ru = 'Пользовательские настройки, замедляющие работу со списком документов'");
	ЗаголовокПроблемыСписка.Шрифт = ШрифтЗаголовкаГруппы;
	
	// Выбранные поля
	ГруппаДокументыВыбранныеПоля = Форма.Элементы.Вставить(ИмяСписка + "ДокументыВыбранныеПоля", Тип("ГруппаФормы"),
		ГруппаДокументыПроблемныеНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаДокументыВыбранныеПоля.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДокументыВыбранныеПоля.Заголовок = НСтр("ru = 'Выбранные поля'");
	ГруппаДокументыВыбранныеПоля.ОтображатьЗаголовок = Ложь;
	ГруппаДокументыВыбранныеПоля.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДокументыВыбранныеПоля.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ДокументыЗаголовокВыбранныеПоля = Форма.Элементы.Вставить(ИмяСписка + "ДокументыЗаголовокВыбранныеПоля", Тип(
		"ДекорацияФормы"), ГруппаДокументыВыбранныеПоля);
	ДокументыЗаголовокВыбранныеПоля.Вид = ВидДекорацииФормы.Надпись;
	ДокументыЗаголовокВыбранныеПоля.Заголовок = НСтр("ru = 'Поля списка:'");
	ДокументыЗаголовокВыбранныеПоля.Шрифт = ШрифтЗаголовкаГруппы;
	ДокументыЗаголовокВыбранныеПоля.ЦветТекста = WebЦветаЗеленый;

	ДокументыВыбранныеПоляКритичные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыВыбранныеПоляКритичные", Тип(
		"ДекорацияФормы"), ГруппаДокументыВыбранныеПоля);
	ДокументыВыбранныеПоляКритичные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыВыбранныеПоляКритичные.Заголовок = НСтр("ru = 'Выбранные поля'");
	ДокументыВыбранныеПоляКритичные.ЦветТекста = РезультатПроблемаЦвет;

	ДокументыВыбранныеПоляОбычные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыВыбранныеПоляОбычные", Тип(
		"ДекорацияФормы"), ГруппаДокументыВыбранныеПоля);
	ДокументыВыбранныеПоляОбычные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыВыбранныеПоляОбычные.Заголовок = НСтр("ru = 'Выбранные поля'");

	ДокументыВыбранныеПоляИсправить = Форма.Элементы.Вставить(ИмяСписка + "ДокументыВыбранныеПоляИсправить", Тип(
		"КнопкаФормы"), ГруппаДокументыВыбранныеПоля);
	ДокументыВыбранныеПоляИсправить.Вид = ВидКнопкиФормы.Гиперссылка;
	ДокументыВыбранныеПоляИсправить.Заголовок = "Настройки";

	СоответствиеСозданныхЭлементов.Вставить(ДокументыВыбранныеПоляИсправить.Имя, "ВыбранныеПоля");
	
	// Отборы списка
	ГруппаДокументыОтборыСписка = Форма.Элементы.Вставить(ИмяСписка + "ДокументыОтборыСписка", Тип("ГруппаФормы"),
		ГруппаДокументыПроблемныеНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаДокументыОтборыСписка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДокументыОтборыСписка.Заголовок = НСтр("ru = 'Отборы списка'");
	ГруппаДокументыОтборыСписка.ОтображатьЗаголовок = Ложь;
	ГруппаДокументыОтборыСписка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДокументыОтборыСписка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ДокументыЗаголовокОтбор = Форма.Элементы.Вставить(ИмяСписка + "ДокументыЗаголовокОтбор", Тип("ДекорацияФормы"),
		ГруппаДокументыОтборыСписка);
	ДокументыЗаголовокОтбор.Вид = ВидДекорацииФормы.Надпись;
	ДокументыЗаголовокОтбор.Заголовок = НСтр("ru = 'Отборы списка:'");
	ДокументыЗаголовокОтбор.Шрифт = ШрифтЗаголовкаГруппы;
	ДокументыЗаголовокОтбор.ЦветТекста = WebЦветаЗеленый;

	ДокументыОтборКритичные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыОтборКритичные", Тип("ДекорацияФормы"),
		ГруппаДокументыОтборыСписка);
	ДокументыОтборКритичные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыОтборКритичные.Заголовок = НСтр("ru = 'Отборы'");
	ДокументыОтборКритичные.ЦветТекста = РезультатПроблемаЦвет;

	ДокументыОтборОбычные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыОтборОбычные", Тип("ДекорацияФормы"),
		ГруппаДокументыОтборыСписка);
	ДокументыОтборОбычные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыОтборОбычные.Заголовок = НСтр("ru = 'Отборы'");

	ДокументыОтборыИсправить = Форма.Элементы.Вставить(ИмяСписка + "ДокументыОтборыИсправить", Тип("ДекорацияФормы"),
		ГруппаДокументыОтборыСписка); //РасширениеДекорацииФормыДляНадписи
	ДокументыОтборыИсправить.Вид = ВидДекорацииФормы.Надпись;
	ДокументыОтборыИсправить.Заголовок = НСтр("ru = 'Исправить'");
	ДокументыОтборыИсправить.УстановитьДействие("Нажатие", Действие);
	ДокументыОтборыИсправить.Гиперссылка = Истина;
	ДокументыОтборыИсправить.ЦветТекста = ГиперссылкаЦвет;
	СоответствиеСозданныхЭлементов.Вставить(ДокументыОтборыИсправить.Имя, "Отборы");
	
	// Порядок
	ГруппаДокументыПорядокСписка = Форма.Элементы.Вставить(ИмяСписка + "ДокументыПорядокСписка", Тип("ГруппаФормы"),
		ГруппаДокументыПроблемныеНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаДокументыПорядокСписка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДокументыПорядокСписка.Заголовок = НСтр("ru = 'Порядок списка'");
	ГруппаДокументыПорядокСписка.ОтображатьЗаголовок = Ложь;
	ГруппаДокументыПорядокСписка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДокументыПорядокСписка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ДокументыЗаголовокПорядок = Форма.Элементы.Вставить(ИмяСписка + "ДокументыЗаголовокПорядок", Тип("ДекорацияФормы"),
		ГруппаДокументыПорядокСписка);
	ДокументыЗаголовокПорядок.Вид = ВидДекорацииФормы.Надпись;
	ДокументыЗаголовокПорядок.Заголовок = НСтр("ru = 'Поля сортировки списка:'");
	ДокументыЗаголовокПорядок.Шрифт = ШрифтЗаголовкаГруппы;
	ДокументыЗаголовокПорядок.ЦветТекста = WebЦветаЗеленый;

	ДокументыПорядокКритичные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыПорядокКритичные", Тип("ДекорацияФормы"),
		ГруппаДокументыПорядокСписка);
	ДокументыПорядокКритичные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыПорядокКритичные.Заголовок = НСтр("ru = 'Порядок'");
	ДокументыПорядокКритичные.ЦветТекста = РезультатПроблемаЦвет;

	ДокументыПорядокОбычные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыПорядокОбычные", Тип("ДекорацияФормы"),
		ГруппаДокументыПорядокСписка);
	ДокументыПорядокОбычные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыПорядокОбычные.Заголовок = НСтр("ru = 'Порядок'");

	ДокументыПорядокИсправить = Форма.Элементы.Вставить(ИмяСписка + "ДокументыПорядокИсправить", Тип("ДекорацияФормы"),
		ГруппаДокументыПорядокСписка); //РасширениеДекорацииФормыДляНадписи
	ДокументыПорядокИсправить.Вид = ВидДекорацииФормы.Надпись;
	ДокументыПорядокИсправить.Заголовок = НСтр("ru = 'Исправить'");
	ДокументыПорядокИсправить.УстановитьДействие("Нажатие", Действие);
	ДокументыПорядокИсправить.Гиперссылка = Истина;
	ДокументыПорядокИсправить.ЦветТекста = ГиперссылкаЦвет;
	СоответствиеСозданныхЭлементов.Вставить(ДокументыПорядокИсправить.Имя, "Порядок");
	
	// Условное оформление
	ГруппаДокументыУсловноеОформлениеСписка = Форма.Элементы.Вставить(ИмяСписка + "ДокументыУсловноеОформлениеСписка",
		Тип("ГруппаФормы"), ГруппаДокументыПроблемныеНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаДокументыУсловноеОформлениеСписка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДокументыУсловноеОформлениеСписка.Заголовок = НСтр("ru = 'Условное оформление списка'");
	ГруппаДокументыУсловноеОформлениеСписка.ОтображатьЗаголовок = Ложь;
	ГруппаДокументыУсловноеОформлениеСписка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДокументыУсловноеОформлениеСписка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ДокументыЗаголовокУсловноеОформление = Форма.Элементы.Вставить(ИмяСписка + "ДокументыЗаголовокУсловноеОформление",
		Тип("ДекорацияФормы"), ГруппаДокументыУсловноеОформлениеСписка);
	ДокументыЗаголовокУсловноеОформление.Вид = ВидДекорацииФормы.Надпись;
	ДокументыЗаголовокУсловноеОформление.Заголовок = НСтр("ru = 'Условное оформление списка:'");
	ДокументыЗаголовокУсловноеОформление.Шрифт = ШрифтЗаголовкаГруппы;
	ДокументыЗаголовокУсловноеОформление.ЦветТекста = WebЦветаЗеленый;

	ДокументыУсловноеОформлениеКритичные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыУсловноеОформлениеКритичные",
		Тип("ДекорацияФормы"), ГруппаДокументыУсловноеОформлениеСписка);
	ДокументыУсловноеОформлениеКритичные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыУсловноеОформлениеКритичные.Заголовок = НСтр("ru = 'Оформление'");
	ДокументыУсловноеОформлениеКритичные.ЦветТекста = РезультатПроблемаЦвет;

	ДокументыУсловноеОформлениеОбычные = Форма.Элементы.Вставить(ИмяСписка + "ДокументыУсловноеОформлениеОбычные", Тип(
		"ДекорацияФормы"), ГруппаДокументыУсловноеОформлениеСписка);
	ДокументыУсловноеОформлениеОбычные.Вид = ВидДекорацииФормы.Надпись;
	ДокументыУсловноеОформлениеОбычные.Заголовок = НСтр("ru = 'Оформление'");

	ДокументыУсловноеОформлениеИсправить = Форма.Элементы.Вставить(ИмяСписка + "ДокументыУсловноеОформлениеИсправить",
		Тип("ДекорацияФормы"), ГруппаДокументыУсловноеОформлениеСписка); //РасширениеДекорацииФормыДляНадписи
	ДокументыУсловноеОформлениеИсправить.Вид = ВидДекорацииФормы.Надпись;
	ДокументыУсловноеОформлениеИсправить.Заголовок = НСтр("ru = 'Исправить'");
	ДокументыУсловноеОформлениеИсправить.УстановитьДействие("Нажатие", Действие);
	ДокументыУсловноеОформлениеИсправить.Гиперссылка = Истина;
	ДокументыУсловноеОформлениеИсправить.ЦветТекста = ГиперссылкаЦвет;
	СоответствиеСозданныхЭлементов.Вставить(ДокументыУсловноеОформлениеИсправить.Имя, "УсловноеОформление");
	
	#КонецОбласти
	
	#Область ГруппаОтсутствиеПроблем
	ГруппаОтсутствиеПроблем = Форма.Элементы.Вставить(ИмяСписка + "ГруппаОтсутствиеПроблем", Тип("ГруппаФормы"),
		Параметры.ГруппаРазмещенияНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаОтсутствиеПроблем.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтсутствиеПроблем.ШрифтЗаголовка = ШрифтЗаголовкаВсплывающейГруппы;
	ГруппаОтсутствиеПроблем.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаОтсутствиеПроблем.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаОтсутствиеПроблем.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаОтсутствиеПроблем.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаОтсутствиеПроблем.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаОтсутствиеПроблем.Заголовок = НСтр("ru = 'Настройки обновления'");
	ГруппаОтсутствиеПроблем.ЦветТекстаЗаголовка = ГиперссылкаЦвет;
	ГруппаОтсутствиеПроблем.Видимость = Истина;
	
	ГруппаНастроекОтсутствиеПроблем = Форма.Элементы.Вставить(ИмяСписка + "ГруппаНастроекОтсутствиеПроблем", Тип("ГруппаФормы"),
		ГруппаОтсутствиеПроблем); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаНастроекОтсутствиеПроблем.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастроекОтсутствиеПроблем.Заголовок = НСтр("ru = 'Настройки'");
	ГруппаНастроекОтсутствиеПроблем.ОтображатьЗаголовок = Ложь;
	ГруппаНастроекОтсутствиеПроблем.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНастроекОтсутствиеПроблем.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ПараметрыСозданияГруппы = Новый Структура;
	ПараметрыСозданияГруппы.Вставить("ПрефиксНастроек", "ОтсутствиеПроблем");
	ПараметрыСозданияГруппы.Вставить("ГруппаРодитель", ГруппаНастроекОтсутствиеПроблем);
	ПараметрыСозданияГруппы.Вставить("ИмяРеквизитаРежимАвтообновления", Параметры.ИмяРеквизитаРежимАвтообновления);
	ПараметрыСозданияГруппы.Вставить("СтруктураНастроек", СтруктураНастроек);
	ПараметрыСозданияГруппы.Вставить("ОтображатьЗаголовокОбновлениеСписка", Ложь);
	ПараметрыСозданияГруппы.Вставить("WebЦветаТусклоСерый", WebЦветаТусклоСерый);
	ПараметрыСозданияГруппы.Вставить("ШрифтЗаголовкаГруппы", ШрифтЗаголовкаГруппы);
	СоздатьГруппуНастроекАвтообновленияИПроизводительногоРежима(Форма, ИмяСписка, ПараметрыСозданияГруппы, СоответствиеСозданныхЭлементов);
	
	#КонецОбласти
	
	#Область ГруппаНеактуальныеДанные
	ГруппаНеактуальныеДанные = Форма.Элементы.Вставить(ИмяСписка + "ГруппаНеактуальныеДанные", Тип("ГруппаФормы"),
		Параметры.ГруппаРазмещенияНастройки); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаНеактуальныеДанные.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНеактуальныеДанные.ШрифтЗаголовка = ШрифтЗаголовкаВсплывающейГруппы;
	ГруппаНеактуальныеДанные.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаНеактуальныеДанные.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ГруппаНеактуальныеДанные.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаНеактуальныеДанные.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаНеактуальныеДанные.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаНеактуальныеДанные.Заголовок = НСтр("ru = 'Возможно, данные формы устарели'");
	ГруппаНеактуальныеДанные.ЦветТекстаЗаголовка = WebЦветаТемноОранжевый;
	ГруппаНеактуальныеДанные.Видимость = Истина;
	
	ГруппаНастроекНеактуальныеДанные = Форма.Элементы.Вставить(ИмяСписка + "ГруппаНастроекНеактуальныеДанные", Тип("ГруппаФормы"),
		ГруппаНеактуальныеДанные); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаНастроекНеактуальныеДанные.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастроекНеактуальныеДанные.Заголовок = НСтр("ru = 'Настройки'");
	ГруппаНастроекНеактуальныеДанные.ОтображатьЗаголовок = Ложь;
	ГруппаНастроекНеактуальныеДанные.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНастроекНеактуальныеДанные.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НеактуальныеДанныеДанныеУстарели = Форма.Элементы.Вставить(ИмяСписка + "НеактуальныеДанныеДанныеУстарели", Тип(
		"ДекорацияФормы"), ГруппаНастроекНеактуальныеДанные);
	НеактуальныеДанныеДанныеУстарели.Вид = ВидДекорацииФормы.Надпись;
	НеактуальныеДанныеДанныеУстарели.Заголовок = НСтр(
		"ru = 'Для актуализации отражаемых в списке данных документов следует воспользоваться кнопкой ""Обновить"" на форме или включить автообновление списка.'");
	НеактуальныеДанныеДанныеУстарели.ЦветТекста = WebЦветаТусклоСерый;
	
	ПараметрыСозданияГруппы = Новый Структура;
	ПараметрыСозданияГруппы.Вставить("ПрефиксНастроек", "НеактуальныеДанные");
	ПараметрыСозданияГруппы.Вставить("ГруппаРодитель", ГруппаНастроекНеактуальныеДанные);
	ПараметрыСозданияГруппы.Вставить("ИмяРеквизитаРежимАвтообновления", Параметры.ИмяРеквизитаРежимАвтообновления);
	ПараметрыСозданияГруппы.Вставить("СтруктураНастроек", СтруктураНастроек);
	ПараметрыСозданияГруппы.Вставить("ОтображатьЗаголовокОбновлениеСписка", Истина);
	ПараметрыСозданияГруппы.Вставить("WebЦветаТусклоСерый", WebЦветаТусклоСерый);
	ПараметрыСозданияГруппы.Вставить("ШрифтЗаголовкаГруппы", ШрифтЗаголовкаГруппы);
	СоздатьГруппуНастроекАвтообновленияИПроизводительногоРежима(Форма, ИмяСписка, ПараметрыСозданияГруппы, СоответствиеСозданныхЭлементов);
	
	КнопкаОбновления = Форма.Элементы.Вставить(ИмяСписка + "_Обновить", Тип("КнопкаФормы"),
		Параметры.ГруппаРазмещенияНастройки);
	КнопкаОбновления.ИмяКоманды = Параметры.ИмяКомандыОбновленияСписка;
	КнопкаОбновления.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	#КонецОбласти
	
	СтруктураНастроекСписка = СтруктураПользовательскихНастроекСписка();
	СтруктураНастроекСписка.ГруппаОписаниеПроблем = ГруппаОписаниеПроблем.Имя;
	СтруктураНастроекСписка.ГруппаОтсутствиеПроблем = ГруппаОтсутствиеПроблем.Имя;
	СтруктураНастроекСписка.ГруппаНеактуальныеДанные = ГруппаНеактуальныеДанные.Имя;
	СтруктураНастроекСписка.ИмяСписка = Параметры.ИмяСписка;
	СтруктураНастроекСписка.ИмяЭлементаСписка = Параметры.ИмяЭлементаСписка;
	СтруктураНастроекСписка.ЕстьОсновнаяТаблица = СтруктураНастроек.ЕстьОсновнаяТаблица;
	СтруктураНастроекСписка.КлючиСписка  = СтруктураНастроек.КлючиСписка;
	СтруктураНастроекСписка.СписокПолейСоставногоТипа = Параметры.СписокСоставныхПолей;
	СтруктураНастроекСписка.ДанныеУстарели = Ложь;
	СтруктураНастроекСписка.ДлительностьОбновления = 0;
	СтруктураНастроекСписка.ПредельноеВремяОбновленияСпискаДокументов = Параметры.ПредельноеВремяОбновленияСпискаДокументов;
	СтруктураНастроекСписка.КнопкаОбновить = КнопкаОбновления.Имя;
	СтруктураНастроекСписка.ИмяРеквизитаРежимАвтообновления = Параметры.ИмяРеквизитаРежимАвтообновления;
	СтруктураНастроекСписка.ИмяРеквизитаПроизводительныйРежимОбновления = СтруктураНастроек.РеквизитПроизводительныйРежимОбновления;
	СтруктураНастроекСписка.ЭлементПроблемныеНастройки = ГруппаДокументыПроблемныеНастройки.Имя;
	СтруктураНастроекСписка.ЭлементЗаголовокПроблемыСписка = ЗаголовокПроблемыСписка.Имя;
	СтруктураНастроекСписка.ЭлементВыбранныеПоля = ГруппаДокументыВыбранныеПоля.Имя;
	СтруктураНастроекСписка.ЭлементЗаголовокВыбранныеПоля = ДокументыЗаголовокВыбранныеПоля.Имя;
	СтруктураНастроекСписка.ЭлементВыбранныеПоляКритичные = ДокументыВыбранныеПоляКритичные.Имя;
	СтруктураНастроекСписка.ЭлементВыбранныеПоляОбычные = ДокументыВыбранныеПоляОбычные.Имя;
	СтруктураНастроекСписка.ЭлементВыбранныеПоляИсправить = ДокументыВыбранныеПоляИсправить.Имя;
	СтруктураНастроекСписка.ЭлементОтборыСписка = ГруппаДокументыОтборыСписка.Имя;
	СтруктураНастроекСписка.ЭлементЗаголовокОтбор = ДокументыЗаголовокОтбор.Имя;
	СтруктураНастроекСписка.ЭлементОтборКритичные = ДокументыОтборКритичные.Имя;
	СтруктураНастроекСписка.ЭлементОтборОбычные = ДокументыОтборОбычные.Имя;
	СтруктураНастроекСписка.ЭлементОтборыИсправить = ДокументыОтборыИсправить.Имя;
	СтруктураНастроекСписка.ЭлементПорядокСписка = ГруппаДокументыПорядокСписка.Имя;
	СтруктураНастроекСписка.ЭлементЗаголовокПорядок = ДокументыЗаголовокПорядок.Имя;
	СтруктураНастроекСписка.ЭлементПорядокКритичные = ДокументыПорядокКритичные.Имя;
	СтруктураНастроекСписка.ЭлементПорядокОбычные = ДокументыПорядокОбычные.Имя;
	СтруктураНастроекСписка.ЭлементПорядокИсправить = ДокументыПорядокИсправить.Имя;
	СтруктураНастроекСписка.ЭлементУсловноеОформлениеСписка = ГруппаДокументыУсловноеОформлениеСписка.Имя;
	СтруктураНастроекСписка.ЭлементЗаголовокУсловноеОформление = ДокументыЗаголовокУсловноеОформление.Имя;
	СтруктураНастроекСписка.ЭлементУсловноеОформлениеКритичные = ДокументыУсловноеОформлениеКритичные.Имя;
	СтруктураНастроекСписка.ЭлементУсловноеОформлениеОбычные = ДокументыУсловноеОформлениеОбычные.Имя;
	СтруктураНастроекСписка.ЭлементУсловноеОформлениеИсправить = ДокументыУсловноеОформлениеИсправить.Имя;

	СтруктураНастроек.Вставить("Настройки", СтруктураНастроекСписка);
	СтруктураНастроек.Вставить("ЭлементыГруппыНастроек", СоответствиеСозданныхЭлементов);

КонецПроцедуры

// Проверяет элементы настроек отбора динамического списка и выявляет те, которые могут приводить к снижению
// скорости работы с ним.
// 
// Параметры:
//  ОтборСписка - ОтборКомпоновкиДанных - Отборы списка
//  СписокПолей - Массив из Строка - Список полей настройки
//
Процедура ПроверитьЭлементыНастроекОтбораДинамическогоСписка(ОтборСписка, СписокПолей)
	
	Для Каждого ЭлементОтбора Из ОтборСписка.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПроверитьЭлементыНастроекОтбораДинамическогоСписка(ЭлементОтбора, СписокПолей);
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			ПолеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если Не СтрНайти(ПолеОтбора, ".") = 0 Тогда
				СписокПолей.Добавить(ПолеОтбора);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет элементы настроек порядка динамического списка и выявляет те, которые могут приводить к снижению
// скорости работы с ним.
// 
// Параметры:
//  ПорядокСписка - ПорядокКомпоновкиДанных - Упорядочивание списка
//  СписокПолей - Массив из Строка - Список полей
//  СписокСоставныхРеквизитов - Массив из Строка - Список полей составного типа
//
Процедура ПроверитьЭлементыНастроекПорядкаДинамическогоСписка(ПорядокСписка, СписокПолей, СписокСоставныхРеквизитов)
	
	Для Каждого ЭлементПорядка Из ПорядокСписка.Элементы Цикл
		
		Если ТипЗнч(ЭлементПорядка) = Тип("ЭлементПорядкаКомпоновкиДанных") И ЭлементПорядка.Использование Тогда
			ПолеПорядка = Строка(ЭлементПорядка.Поле);
			Если Не СтрНайти(ПолеПорядка, ".") = 0 
				Или Не СписокСоставныхРеквизитов.Найти(Строка(ЭлементПорядка.Поле)) = Неопределено Тогда
					СписокПолей.Добавить(ПолеПорядка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет элементы выбранных полей динамического списка и выявляет те, которые могут приводить к снижению 
// скорости работы с ним.
// 
// Параметры:
//  СтруктураНастройки - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - Структура настройки списка
//  СписокПолей - Массив из Строка - Список полей
//
Процедура ПроверитьЭлементыВыбранныхПолейДинамическогоСписка(СтруктураНастройки, СписокПолей)
	
	Для Каждого ЭлементВыбора Из СтруктураНастройки Цикл
		Для Каждого ТекущееПолеВыбора Из ЭлементВыбора.Выбор.Элементы Цикл
			Если ТипЗнч(ТекущееПолеВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
				ПолеВыбора = Строка(ТекущееПолеВыбора.Поле);
				Если Не СтрНайти(ПолеВыбора, ".") = 0 Тогда
					СписокПолей.Добавить(ПолеВыбора);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				ПроверитьЭлементыВыбранныхПолейДинамическогоСписка(ЭлементВыбора.Структура, СписокПолей);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Проверяет отборы элементов настроек условного оформления динамического списка
// и выявляет те, которые могут приводить к снижению скорости работы с ним.
// 
// Параметры:
//  СтруктураНастройки - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - Структура настройки списка
//  СписокПолей - Массив из Строка - Список полей
//
Процедура ПроверитьЭлементыНастроекУсловногоОформленияДинамическогоСписка(СтруктураНастройки, СписокПолей)
	
	Для Каждого ЭлементУсловногоОформления Из СтруктураНастройки Цикл
		Для Каждого НастройкаУсловногоОформления Из ЭлементУсловногоОформления.УсловноеОформление.Элементы Цикл
			ПроверитьЭлементыНастроекОтбораДинамическогоСписка(НастройкаУсловногоОформления.Отбор, СписокПолей);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьГруппуНастроекАвтообновленияИПроизводительногоРежима(Форма, ИмяСписка, Параметры, СоответствиеСозданныхЭлементов)
	
	Действие = "СписокДокументовОбработкаСобытияЭлементаФормы";
	
	ОписаниеАвтообновлениеСписка = НСтр(
		"ru = 'При включенном параметре каждый раз после изменения документов будет выполняться обновление списка, что может приводить к увеличению времени их проведения.'");
	
	ОписаниеПроизводительныйРежим = НСтр(
		"ru = 'Включение параметра ускоряет обновление списка документов. 
		|В данном режиме недоступны горячие клавиши Ins Del F2 F9.
		|Для применения настройки требуется заново открыть форму списка.'");
		
	WebЦветаТусклоСерый = Параметры.WebЦветаТусклоСерый;
		
	ГруппаНастройкиАвтообновления = Форма.Элементы.Вставить(ИмяСписка + Параметры.ПрефиксНастроек + "НастройкиАвтообновления",
		Тип("ГруппаФормы"), Параметры.ГруппаРодитель); //РасширениеГруппыФормыДляОбычнойГруппы
	ГруппаНастройкиАвтообновления.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНастройкиАвтообновления.Заголовок = НСтр("ru = 'Настройки автообновления'");
	ГруппаНастройкиАвтообновления.ОтображатьЗаголовок = Ложь;
	ГруппаНастройкиАвтообновления.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаНастройкиАвтообновления.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ЗаголовокОбновлениеСписка = Форма.Элементы.Вставить(ИмяСписка + Параметры.ПрефиксНастроек + "ЗаголовокОбновлениеСписка", Тип(
		"ДекорацияФормы"), ГруппаНастройкиАвтообновления);
	ЗаголовокОбновлениеСписка.Вид = ВидДекорацииФормы.Надпись;
	ЗаголовокОбновлениеСписка.Заголовок = НСтр("ru = 'Настройки обновления списка'");
	ЗаголовокОбновлениеСписка.Шрифт = Параметры.ШрифтЗаголовкаГруппы;
	ЗаголовокОбновлениеСписка.Видимость = Параметры.ОтображатьЗаголовокОбновлениеСписка;
	
	РежимАвтообновления = Форма.Элементы.Вставить(ИмяСписка + Параметры.ПрефиксНастроек + "РежимАвтообновления", Тип("ПолеФормы"),
		ГруппаНастройкиАвтообновления);
	РежимАвтообновления.Вид = ВидПоляФормы.ПолеФлажка;
	РежимАвтообновления.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	РежимАвтообновления.ПутьКДанным = Параметры.ИмяРеквизитаРежимАвтообновления;
	РежимАвтообновления.УстановитьДействие("ПриИзменении", Действие);
	РежимАвтообновления.Видимость = Истина;
	РежимАвтообновления.Доступность = Истина;
	СоответствиеСозданныхЭлементов.Вставить(РежимАвтообновления.Имя, "Обновление");

	НадписьАвтообновлениеПояснение = Форма.Элементы.Вставить(ИмяСписка + Параметры.ПрефиксНастроек + "НадписьАвтообновлениеПояснение",
		Тип("ДекорацияФормы"), ГруппаНастройкиАвтообновления);
	НадписьАвтообновлениеПояснение.Вид = ВидДекорацииФормы.Надпись;
	НадписьАвтообновлениеПояснение.Заголовок = ОписаниеАвтообновлениеСписка;
	НадписьАвтообновлениеПояснение.ЦветТекста = WebЦветаТусклоСерый;

	ПроизводительныйРежим = Форма.Элементы.Вставить(ИмяСписка + Параметры.ПрефиксНастроек + "ПроизводительныйРежим", Тип("ПолеФормы"),
		ГруппаНастройкиАвтообновления);
	ПроизводительныйРежим.Вид = ВидПоляФормы.ПолеФлажка;
	ПроизводительныйРежим.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ПроизводительныйРежим.ПутьКДанным = Параметры.СтруктураНастроек.РеквизитПроизводительныйРежимОбновления;
	ПроизводительныйРежим.УстановитьДействие("ПриИзменении", Действие);
	ПроизводительныйРежим.Доступность = Истина;
	ПроизводительныйРежим.Видимость = Параметры.СтруктураНастроек.ИспользоватьМеханизмИзмененияНастроекСписка;
	СоответствиеСозданныхЭлементов.Вставить(ПроизводительныйРежим.Имя, "УскорениеОбновленияСписка");
	
	ПроизводительныйРежимПояснение = Форма.Элементы.Вставить(ИмяСписка + Параметры.ПрефиксНастроек + "ПроизводительныйРежимПояснение",
		Тип("ДекорацияФормы"), ГруппаНастройкиАвтообновления);
	ПроизводительныйРежимПояснение.Вид = ВидДекорацииФормы.Надпись;
	ПроизводительныйРежимПояснение.Заголовок = ОписаниеПроизводительныйРежим;
	ПроизводительныйРежимПояснение.ЦветТекста = WebЦветаТусклоСерый;
	ПроизводительныйРежимПояснение.Видимость = Параметры.СтруктураНастроек.ИспользоватьМеханизмИзмененияНастроекСписка;
	
КонецПроцедуры

Функция ЗаголовокДоступногоПоляСписка(ПолеСписка, ДоступныеПоля)
	
	ОписаниеПоля = Неопределено;
	
	ДоступныеПоляЭлементы = ДоступныеПоля.Элементы;
	
	ЭлементыПоля = СтрРазделить(ПолеСписка, ".");
	Индекс = 0;
	ЧастиПоля = Новый Массив;
	
	Пока Индекс < ЭлементыПоля.Количество() Цикл
		
		ЧастиПоля.Добавить(ЭлементыПоля[Индекс]);
		Идентификатор = СтрСоединить(ЧастиПоля, ".");
		ОписаниеПоля = ДоступныеПоляЭлементы.Найти(Идентификатор);
		
		Если ОписаниеПоля <> Неопределено
			И Индекс <> ЭлементыПоля.ВГраница() Тогда
			ДоступныеПоляЭлементы = ОписаниеПоля.Элементы;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если ОписаниеПоля = Неопределено Тогда
		Возврат ПолеСписка;
	Иначе
		Возврат ОписаниеПоля.Заголовок;
	КонецЕсли;
	
КонецФункции

Функция ИмяНастройкиФормыСписковДокументов()
	
	Возврат "СписокДокументовКэшНастроек";
	
КонецФункции

#КонецОбласти