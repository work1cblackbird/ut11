#Область СлужебныйПрограммныйИнтерфейс

#Область СопоставлениеПрикладногоОбъектаИТипаДокументаEDI

Функция ТипДокументаEDI(Знач ПрикладнойОбъект) Экспорт
	
	Результат = РаботаСДаннымиEDIСлужебныйВызовСервера.ТипДокументаEDI(ПрикладнойОбъект);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Документы %1 не участвуют в обмене EDI'"),
			Строка(ТипЗнч(ПрикладнойОбъект)));
	КонецЕсли;

	Возврат Результат
	
КонецФункции

Функция ТипПрикладногоОбъекта(Знач ТипДокументаEDI) Экспорт
	
	Результат = НастройкиEDI.НастройкиУчета().СоответствиеДокументовEDIПрикладнымОбъектам.Получить(ТипДокументаEDI);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Тип документа EDI %1 не сопоставлен с прикладным объектом'"),
			Строка(ТипДокументаEDI));
	КонецЕсли;

	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхФорм

Функция ПолучитьСведенияДокумента(Знач ПараметрыВыполнения) Экспорт 
	
	Результат = НовыйСведенияПоДокументу(ПараметрыВыполнения.ЗапрашиваемыеСвойства);
	
	// все ключи должны быть заполнены
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.Организация)
		Или Не ЗначениеЗаполнено(ПараметрыВыполнения.Контрагент) Тогда
		
		Возврат Результат;
	КонецЕсли;

	
	Если ТребуютсяНастройкиКонтрагента(ПараметрыВыполнения) Тогда
		ЗаполнитьНастройкиКонтрагента(ПараметрыВыполнения, Результат);
		
		Если Результат.ОшибкаРаботыССервисом Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТребуетсяСостояниеДокумента(ПараметрыВыполнения) Тогда
		ЗаполнитьСостояниеДокумента(ПараметрыВыполнения, Результат);
		
		Если Результат.ОшибкаРаботыССервисом Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТребуютсяИдентификаторыСервиса(ПараметрыВыполнения) Тогда
		ЗаполнитьИдентификаторыОбъектов(ПараметрыВыполнения, Результат);
		
		Если Результат.ОшибкаРаботыССервисом Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТребуетсяСостояниеСинхронизации(ПараметрыВыполнения) Тогда
		ЗаполнитьСостояниеСинхронизации(ПараметрыВыполнения, Результат);
		
		Если Результат.ОшибкаРаботыССервисом Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ТребуетсяПредставлениеУчастников(ПараметрыВыполнения) Тогда
		ЗаполнитьПредставлениеУчастников(ПараметрыВыполнения, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает сведения для визуализации ситуации конфликта версий
//
// Параметры:
//  ДанныеДокумента - Структура - см. ДокументыEDIИнтеграция.НовыйДанныеДокумента()
// 
// Возвращаемое значение:
//  Структура - см. РаботаСДаннымиEDIСлужебный.СведенияКонфликтующихВерсий()
//
Функция ПолучитьСведенияКонфликтующихВерсий(ДанныеДокумента) Экспорт 
	
	Результат = СведенияКонфликтующихВерсий();
	
	// данные текущей версии
	ТекущееСостояние = ТекущееСостояниеДокумента(ДанныеДокумента.Документ);
	Если ТекущееСостояние = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.СведенияТекущейВерсии.Дата = ТекущееСостояние.ДатаСоздания;
	Результат.СведенияТекущейВерсии.Сумма = ТекущееСостояние.Сумма;
	Результат.СведенияТекущейВерсии.ПредставлениеМенеджера = Строка(ТекущееСостояние.Менеджер);
	Результат.СведенияТекущейВерсии.ПредставлениеВалюты = Строка(ТекущееСостояние.Валюта);

	
	// данные актуальной версии
	ПараметрыЗапроса = НовыйПараметрыПолученияАктуальногоСостоянияДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ТекущееСостояние);
	АктуальноеСостояние = АктуальноеСостояниеДокумента(ПараметрыЗапроса);
	
	Если Не АктуальноеСостояние = Неопределено Тогда
		Результат.СведенияАктуальнойВерсии.Дата = АктуальноеСостояние.ДатаСоздания;
		Результат.СведенияАктуальнойВерсии.Сумма = АктуальноеСостояние.Сумма;
		Результат.СведенияАктуальнойВерсии.ПредставлениеМенеджера = Строка(АктуальноеСостояние.Менеджер);
		Результат.СведенияАктуальнойВерсии.ПредставлениеВалюты = Строка(АктуальноеСостояние.Валюта);
	КонецЕсли;
	
	
	// данные документа
	Если ТекущееСостояние.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		МенеджерКонвертацииДанныхEDI.ЗаполнитьПредставлениеВерсииЗаказаПоставщику(
			Результат.СведенияРедактируемойВерсии, ДанныеДокумента.Документ);
	ИначеЕсли ТекущееСостояние.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		МенеджерКонвертацииДанныхEDI.ЗаполнитьПредставлениеВерсииЗаказаКлиента(
			Результат.СведенияРедактируемойВерсии, ДанныеДокумента.Документ);
	КонецЕсли;
	
	Если ПустаяСтрока(Результат.СведенияРедактируемойВерсии.ПредставлениеМенеджера) Тогда
		Результат.СведенияРедактируемойВерсии.ПредставлениеМенеджера = Строка(Пользователи.ТекущийПользователь());
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПланСинхронизацииДокумента

#Область ИнтерфейсРаботыСПланом

Процедура ВыполнитьСинхронизациюРегламентно() Экспорт
		
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.СинхронизацияССервисомEDI);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПланСинхронизацииДокументовEDI.ПроверитьИсполняющиеФоновыеЗадания();
	
	АктуализироватьСостояниеСинхронизации();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Помечает прикладной объект к отправке в сервис.
// 
// Параметры:
// 	ДанныеПрикладныхОбъектов - Массив - данные прикладных объектов, которые требуется отправить в сервис
//    см. РаботаСДаннымиEDIКлиентСерверСлужебный.НовыйДанныеДокумента().
// 	Отказ - Булево - флаг ошибки при выполнении метода.
// 	Ошибки - Соответствие - текст ошибки для каждого прикладного объект.
//
Процедура ЗапланироватьОтправкуВСервис(Знач ДанныеПрикладныхОбъектов, Отказ = Ложь, Ошибки = Неопределено) Экспорт
	
	Ошибки = Новый Соответствие;
	
	ПрикладныеОбъекты = Новый Массив;
	Для Каждого ДанныеПрикладногоОбъекта Из ДанныеПрикладныхОбъектов Цикл
		ПрикладныеОбъекты.Добавить(ДанныеПрикладногоОбъекта.Документ);
	КонецЦикла;
	
	ЗаписиРеестра = РегистрыСведений.СостоянияДокументовEDI.ЗаписиРеестраПоДокументам(ПрикладныеОбъекты);
	
	Для Каждого ДанныеПрикладногоОбъекта Из ДанныеПрикладныхОбъектов Цикл
		ПрикладнойОбъект = ДанныеПрикладногоОбъекта.Документ;
		
		ЗаписьРеестра = ЗаписиРеестра.Получить(ПрикладнойОбъект);
		Если ЗаписьРеестра <> Неопределено Тогда
			Ошибки.Вставить(ПрикладнойОбъект, НСтр("ru='Документ уже отправлен в сервис.'"));
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыВыполнения = РаботаСДаннымиEDIСлужебныйКлиентСервер.НовыйДанныеДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, ДанныеПрикладногоОбъекта);
		ПараметрыВыполнения.Вставить("СценарийВыполнения", Перечисления.СценарииВыполненияКомандEDI.СоздатьДокументВСервисе);
		ПараметрыВыполнения.Вставить("КомандаПроцесса", Перечисления.КомандыПроцессаЗаказаEDI.СоздатьЗаказПоставщику);
		
		ТекстОшибки = "";
		РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьПлан(ПараметрыВыполнения, Отказ, ТекстОшибки);
		Если Отказ Тогда
			Ошибки.Вставить(ПрикладнойОбъект, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	АктуализироватьСостояниеСинхронизации();

КонецПроцедуры

Процедура ЗапланироватьПолучениеИзСервиса(Знач ДанныеПрикладныхОбъектов, Отказ = Ложь, Ошибки = Неопределено) Экспорт
	
	Ошибки = Новый Соответствие;
	ПрикладныеОбъекты = Новый Массив;
	Для Каждого ПараметрыВыполнения Из ДанныеПрикладныхОбъектов Цикл
		ПараметрыВыполнения.Вставить("СценарийВыполнения", Перечисления.СценарииВыполненияКомандEDI.СкачатьВерсиюИзСервиса);
		
		ТекстОшибки = "";
		РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьПлан(ПараметрыВыполнения, Отказ, ТекстОшибки);
		Если Отказ Тогда
			Ошибки.Вставить(ПараметрыВыполнения.ПрикладнойОбъект, ТекстОшибки);
		Иначе
			ПрикладныеОбъекты.Добавить(ПараметрыВыполнения.Документ);
		КонецЕсли;
	КонецЦикла;
	
	АктуализироватьСостояниеСинхронизации();

КонецПроцедуры

Функция РезультатСинхронизацииССервисом(Знач ПрикладныеОбъекты) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ПрикладнойОбъект Из ПрикладныеОбъекты Цикл
		Результат.Вставить(ПрикладнойОбъект, СостояниеСинхронизацииДокумента(ПрикладнойОбъект));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет построение плана синхронизации с сервисом
// 
// Параметры:
// 	ДанныеДокумента - Структура - данные прикладного объекта, который требуется синхронизировать с сервисом
//    см. РаботаСДаннымиEDIКлиентСерверСлужебный.НовыйДанныеДокумента()
// 	КомандаПроцесса - ПеречислениеСсылка.КомандыПроцессаЗаказаEDI - описывает маршрут перехода в рамках
// 	   статусной модели 1С:EDI.
// 	СценарийВыполнения - ПеречислениеСсылка.СценарииВыполненияКомандEDI - характеризует порядок выполнения этапов
// 	   синхронизации с сервисом.
// 	Отказ - Булево - флаг ошибки.
//
Процедура ВыполнитьКомандуПерехода(Знач ДанныеДокумента, Знач КомандаПроцесса, Знач СценарийВыполнения,
	Отказ = Ложь) Экспорт

	ПрикладнойОбъект = ДанныеДокумента.Документ;
	
	СостояниеСинхронизации = СостояниеСинхронизацииДокумента(ПрикладнойОбъект);
	Если СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется Тогда
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;

	ПараметрыВыполнения = ДанныеДокумента;
	ПараметрыВыполнения.Вставить("СценарийВыполнения", СценарийВыполнения);
	ПараметрыВыполнения.Вставить("КомандаПроцесса", КомандаПроцесса);
	ПараметрыВыполнения.Вставить("ИдентификаторВерсии", ДанныеДокумента.Версия);
	
	СостояниеДокумента = ТекущееСостояниеДокумента(ПрикладнойОбъект);
	Если СостояниеДокумента <> Неопределено И ЗначениеЗаполнено(СостояниеДокумента.ИдентификаторВСервисе) Тогда
		Если СостояниеДокумента.БизнесПроцессПоДокументуЗавершен
			И Не РегистрыСведений.ПланСинхронизацииДокументовEDI.СценарийДоступенПоОкончанииБизнесПроцесса(СценарийВыполнения) Тогда
				
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИдентификаторВСервисе", СостояниеДокумента.ИдентификаторВСервисе);
		ПараметрыВыполнения.Вставить("ВариантУказанияНоменклатуры", СостояниеДокумента.ВариантУказанияНоменклатуры);
		ПараметрыВыполнения.Вставить("ХэшДокументаСервиса", СостояниеДокумента.ХэшОтправленногоДокумента);

		Если Не ДанныеДокумента.Свойство("НомерРевизии") Или Не ЗначениеЗаполнено(ДанныеДокумента.НомерРевизии) Тогда
			ПараметрыВыполнения.Вставить("НомерРевизии", СостояниеДокумента.НомерТекущейВерсии);
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьПлан(ПараметрыВыполнения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АктуализироватьСостояниеСинхронизации();
	
КонецПроцедуры

// Стартует выполнение последнего принятого к исполнению сценария синхронизации
// 
// Параметры:
// 	ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - объект синхронизации с сервисом.
// 	ДополнительныеПараметры - Структура - параметры выполнения, которые необходимо передать в обработчики синхронизации,
// 	   например, таблицу сопоставления номенклатуры.
// 	Отказ - Булево - флаг ошибки
//
Процедура ПродолжитьВыполнениеКомандыПерехода(Знач ПрикладнойОбъект, Знач ДополнительныеПараметры = Неопределено,
	Отказ = Ложь) Экспорт
	
	СостояниеСинхронизации = СостояниеСинхронизацииДокумента(ПрикладнойОбъект);
	Если СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется Тогда
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ПланСинхронизацииДокументовEDI.ПродолжитьВыполнениеТекущегоПлана(
		ПрикладнойОбъект, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	АктуализироватьСостояниеСинхронизации();
	
КонецПроцедуры

// Возвращает данные по объекту синхронизации.
// 
// Параметры:
// 	ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - объект синхронизации с сервисом.
// Возвращаемое значение:
// 	Структура - Описание:
// * СостояниеСинхронизации - Структура - текущее состояния синхронизации с сервисом.
// * ДанныеСтатусаДокумента - Структура - локальный кэш записи реестра документов EDI для данного прикладного объекта.
//
Функция РезультатВыполненияКомандыПерехода(Знач ПрикладнойОбъект) Экспорт
	
	КлючСостоянияДокумента = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента(); 
	
	Результат = Новый Структура("СостояниеСинхронизации");
	Результат.Вставить(КлючСостоянияДокумента);
	
	Результат.СостояниеСинхронизации = СостояниеСинхронизацииДокумента(ПрикладнойОбъект);
	Если Результат.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат[КлючСостоянияДокумента] = ТекущееСостояниеДокумента(ПрикладнойОбъект);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеПлана

Процедура ЗапуститьСинхронизациюССервисом(Знач ИдентификаторФоновогоЗадания) Экспорт
	
	// очередь объектов
	
	ОтработанныеОбъекты = Новый Массив;
	ОбъектыСинхронизации = РегистрыСведений.ПланСинхронизацииДокументовEDI.ПорцияОбъектовСинхронизации(ИдентификаторФоновогоЗадания);

	Пока ОбъектыСинхронизации <> Неопределено Цикл
		
		Для Каждого ОбъектСинхронизации Из ОбъектыСинхронизации Цикл
			
			ДанныеЭтапа = РегистрыСведений.ПланСинхронизацииДокументовEDI.СледующийЭтап(ОбъектСинхронизации);
		
			Пока ДанныеЭтапа <> Неопределено Цикл
				ПрикладнойОбъект = ДанныеЭтапа.ПрикладнойОбъект;
				СценарийВыполнения = ДанныеЭтапа.СценарийВыполнения;
				Очередность = ДанныеЭтапа.Очередность;
			
				Если ДанныеЭтапа.БизнесПроцессПоДокументуЗавершен Тогда
					РегистрыСведений.ПланСинхронизацииДокументовEDI.ПланВыполнен(ПрикладнойОбъект, СценарийВыполнения, Очередность);
					
					Прервать;
				КонецЕсли;
			
			
				Результат = РезультатВыполненияЭтапаСинхронизации(ДанныеЭтапа);
			
				Если Результат.СостояниеПрикладногоОбъекта <> Неопределено Тогда
					ПараметрыВыполнения = Новый Структура;
					ПараметрыВыполнения.Вставить("НомерРевизии",
						 Результат.СостояниеПрикладногоОбъекта.НомерТекущейВерсии);
					ПараметрыВыполнения.Вставить("ХэшДокументаСервиса",
						 Результат.СостояниеПрикладногоОбъекта.ХэшОтправленногоДокумента);
				
					РегистрыСведений.ПланСинхронизацииДокументовEDI.АктуализироватьПараметрыВыполнения(ДанныеЭтапа, ПараметрыВыполнения);
				
					ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ПараметрыВыполнения);
				КонецЕсли;
			
				Если Результат.ЕстьОшибки Тогда
					РегистрыСведений.ПланСинхронизацииДокументовEDI.ЗафиксироватьОшибкуВыполнениеСценария(
						ПрикладнойОбъект, ДанныеЭтапа, Результат);
					
					ОтработанныеОбъекты.Добавить(ОбъектСинхронизации);
					
					Прервать;
				ИначеЕсли Результат.ОжидатьОтветаСервиса Тогда
					РегистрыСведений.ПланСинхронизацииДокументовEDI.ОжидатьОтветаСервиса(
						ПрикладнойОбъект, ДанныеЭтапа, Результат);
					
					ОтработанныеОбъекты.Добавить(ОбъектСинхронизации);
					
					Прервать;
				ИначеЕсли Результат.РезультатПроверкиСопоставления <> Неопределено Тогда
					РегистрыСведений.ПланСинхронизацииДокументовEDI.ЗафиксироватьРезультатПроверкиСопоставления(
						ПрикладнойОбъект, ДанныеЭтапа,
						Результат.РезультатПроверкиСопоставления);
					
					ОтработанныеОбъекты.Добавить(ОбъектСинхронизации);
					
					Прервать;
				ИначеЕсли Результат.НеСопоставленныеТоварныеПозиции <> Неопределено Тогда
					РегистрыСведений.ПланСинхронизацииДокументовEDI.ОжидатьСопоставленияНоменклатуры(
						ПрикладнойОбъект, ДанныеЭтапа,
						Результат.НеСопоставленныеТоварныеПозиции);
						
					ОтработанныеОбъекты.Добавить(ОбъектСинхронизации);
					
					Прервать;
				КонецЕсли;
				
				РегистрыСведений.ПланСинхронизацииДокументовEDI.ОтметитьВыполнениеЭтапа(
					ПрикладнойОбъект, ДанныеЭтапа);
				
				ДанныеЭтапа = РегистрыСведений.ПланСинхронизацииДокументовEDI.СледующийЭтап(ОбъектСинхронизации);
			
				// Закончили синхронизацию по данному сценарию.
				Если Не ЗначениеЗаполнено(ДанныеЭтапа)
					Или ПрикладнойОбъект <> ДанныеЭтапа.ПрикладнойОбъект
					Или ДанныеЭтапа.СценарийВыполнения <> СценарийВыполнения Тогда
				
					РегистрыСведений.ПланСинхронизацииДокументовEDI.ПланВыполнен(ПрикладнойОбъект, СценарийВыполнения, Очередность);
				Иначе
					ОтработанныеОбъекты.Добавить(ОбъектСинхронизации);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбъектыСинхронизации = РегистрыСведений.ПланСинхронизацииДокументовEDI.ПорцияОбъектовСинхронизации(ИдентификаторФоновогоЗадания);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтработанныеОбъекты) Тогда
		РегистрыСведений.ПланСинхронизацииДокументовEDI.ОсвободитьОбъектыСинхронизации(ОтработанныеОбъекты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормыСервиса

#Область ОписаниеКоманд

Функция НовыйПараметрыПолученияДанныхДокумента() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	
	ПараметрыКоманды.Вставить("Организация"            , Неопределено);
	ПараметрыКоманды.Вставить("ТипДокумента"           , Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("ИдентификаторВСервисе" , "");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция НовыйПараметрыИзмененияСтатусаДокумента() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Организация", Неопределено);
	ПараметрыКоманды.Вставить("ТипДокумента", Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("Инструкция", Перечисления.КомандыПроцессаЗаказаEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("Менеджер", Неопределено);
	ПараметрыКоманды.Вставить("ИдентификаторВСервисе" , "");
	ПараметрыКоманды.Вставить("НомерРевизии", "");

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция НовыйПараметрыОбновленияДокумента() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Организация", Неопределено);
	ПараметрыКоманды.Вставить("ТипДокумента", Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("ИдентификаторВСервисе" , "");
	ПараметрыКоманды.Вставить("НомерРевизии" , "");
	ПараметрыКоманды.Вставить("ЭлектронныйДокумент");
	ПараметрыКоманды.Вставить("ХэшОтправленногоДокумента");
	ПараметрыКоманды.Вставить("Менеджер", "");

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция НовыйПараметрыСозданияДокумента() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Организация", Неопределено);
	ПараметрыКоманды.Вставить("Контрагент", Неопределено);
	ПараметрыКоманды.Вставить("ТипДокумента", Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("КлючИдемпотентности" , "");
	ПараметрыКоманды.Вставить("ЭлектронныйДокумент");
	ПараметрыКоманды.Вставить("Менеджер", "");

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция НовыйПараметрыПолученияАктуальногоСостоянияДокумента() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	
	ПараметрыКоманды.Вставить("Организация"            , Неопределено);
	ПараметрыКоманды.Вставить("ТипДокумента"           , Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("ИдентификаторВСервисе" , "");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция НовыйПараметрыПолученияВерсииДокументаСервиса() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	
	ПараметрыКоманды.Вставить("Организация"            , Неопределено);
	ПараметрыКоманды.Вставить("ТипДокумента"           , Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыКоманды.Вставить("ИдентификаторВСервисе" , "");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область Команды

Функция ДанныеДокументаСервиса(Знач ПараметрыКоманды) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		
		ПараметрыКомандыИнтеграции = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияДанныхЗаказаПоставщику();
		ЗаполнитьЗначенияСвойств(ПараметрыКомандыИнтеграции, ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.ДанныеЗаказаПоставщику(ПараметрыКомандыИнтеграции);
		
	ИначеЕсли ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		
		ПараметрыКомандыИнтеграции = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияДанныхЗаказаКлиента();
		ЗаполнитьЗначенияСвойств(ПараметрыКомандыИнтеграции, ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.ДанныеЗаказаКлиента(ПараметрыКомандыИнтеграции);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатИзмененияСтатуса(Знач ПараметрыКоманды) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыИзмененияСтатусаЗаказаПоставщику();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		ПараметрыЗапроса.ИдентификаторПользователя = ИдентификаторПользователяСервиса(ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.РезультатИзмененияСтатусаЗаказаПоставщику(ПараметрыЗапроса);
	ИначеЕсли ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыИзмененияСтатусаЗаказаКлиента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		ПараметрыЗапроса.ИдентификаторПользователя = ИдентификаторПользователяСервиса(ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.РезультатИзмененияСтатусаЗаказаКлиента(ПараметрыЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбновленияДокумента(Знач ПараметрыКоманды) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыОбновленияЗаказаПоставщику();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		ПараметрыЗапроса.ИдентификаторПользователя = ИдентификаторПользователяСервиса(ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.РезультатОбновленияЗаказаПоставщику(ПараметрыЗапроса);
	ИначеЕсли ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыОбновленияЗаказаКлиента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		ПараметрыЗапроса.ИдентификаторПользователя = ИдентификаторПользователяСервиса(ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.РезультатОбновленияЗаказаКлиента(ПараметрыЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатСозданияДокумента(Знач ПараметрыКоманды) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыСозданияЗаказаПоставщику();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		ПараметрыЗапроса.ИдентификаторПользователя = ИдентификаторПользователяСервиса(ПараметрыКоманды);
		
		Результат = ИнтеграцияССервисомEDIСлужебный.РезультатСозданияЗаказаПоставщику(ПараметрыЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВерсииДокумента(Знач Документ) Экспорт
	
	ТипДокумента = РаботаСДаннымиEDIСлужебныйВызовСервера.ТипДокументаEDI(Документ);
	Если Не ЗначениеЗаполнено(ТипДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СостояниеДокумента = РегистрыСведений.СостоянияДокументовEDI.ЗаписиРеестраПоДокументам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ)).Получить(Документ);
	Если СостояниеДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	ПоложениеКурсора = "";
	НомерСтраницы = 0;
	
	Пока НомерСтраницы = 0 Или Не ПустаяСтрока(ПоложениеКурсора) Цикл
		Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
			ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияПротоколаИзмененияЗаказаПоставщику();
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, СостояниеДокумента);
			ПараметрыЗапроса.ПоложениеКурсора = ПоложениеКурсора;
			
			ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.ПротоколИзмененийЗаказаПоставщику(ПараметрыЗапроса);
		ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
			ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияПротоколаИзмененияЗаказаКлиента();
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, СостояниеДокумента);
			ПараметрыЗапроса.ПоложениеКурсора = ПоложениеКурсора;
			
			ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.ПротоколИзмененийЗаказаКлиента(ПараметрыЗапроса);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если ОтветСервиса.Ошибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Результат = ОтветСервиса.Данные.Список;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтветСервиса.Данные.Список, Результат);
		КонецЕсли;
		
		ПоложениеКурсора = ОтветСервиса.Данные.Страницы.СледующаяСтраница;
		НомерСтраницы = НомерСтраницы + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсииДокументаСервиса(Знач ПараметрыКоманды) Экспорт
	
	Результат = Неопределено;
	ПоложениеКурсора = "";
	НомерСтраницы = 0;
	
	Пока НомерСтраницы = 0 Или Не ПустаяСтрока(ПоложениеКурсора) Цикл
		Если ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
			ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияПротоколаИзмененияЗаказаПоставщику();
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
			ПараметрыЗапроса.ПоложениеКурсора = ПоложениеКурсора;
			
			ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.ПротоколИзмененийЗаказаПоставщику(ПараметрыЗапроса);
		ИначеЕсли ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
			ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияПротоколаИзмененияЗаказаКлиента();
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
			ПараметрыЗапроса.ПоложениеКурсора = ПоложениеКурсора;
			
			ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.ПротоколИзмененийЗаказаКлиента(ПараметрыЗапроса);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если ОтветСервиса.Ошибка Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Результат = ОтветСервиса.Данные.Список;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтветСервиса.Данные.Список, Результат);
		КонецЕсли;
		
		ПоложениеКурсора = ОтветСервиса.Данные.Страницы.СледующаяСтраница;
		НомерСтраницы = НомерСтраницы + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АктуальноеСостояниеДокумента(Знач ПараметрыКоманды) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияСтатусаЗаказаПоставщику();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.СтатусЗаказаПоставщику(ПараметрыЗапроса);
	ИначеЕсли ПараметрыКоманды.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияСтатусаЗаказаКлиента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыКоманды);
		
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.СтатусЗаказаКлиента(ПараметрыЗапроса);
	КонецЕсли;
	
	Если ОтветСервиса.Ошибка Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ОтветСервиса.Данные;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСНастройкамиИнтеграции

Функция СкладЗаказаПоУмолчанию(Знач ТипДокументаEDI, Знач КритерииПоискаСклада) Экспорт
	
	Результат = Неопределено;
	Если Не НастройкиEDI.НастройкиУчета().ИспользуютсяСклады Тогда
		СервисEDIПереопределяемый.УстановитьСкладПоУмолчанию(Результат);
		
		Возврат Результат;
	КонецЕсли;
	
	НастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииEDI.НастройкиИнтеграцииEDI(КритерииПоискаСклада.Организация);
	Если СкладДокументаПодставляетсяИзНастроек(НастройкиИнтеграции) Тогда 
		Результат = НастройкиИнтеграции.СкладУстанавливаемыйВЗагружаемыйЗаказаКлиента;
	ИначеЕсли СкладДокументаОпределяетсяАвтоматически(НастройкиИнтеграции) Тогда
		СервисEDIПереопределяемый.ПриАвтоматическомОпределенииСкладаПрикладногоДокумента(
			Результат, ТипПрикладногоОбъекта(ТипДокументаEDI), КритерииПоискаСклада);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаССотрудникамиEDI

Функция РезультатСозданияПользователяПоДаннымEDI(Знач МодельСотрудникаEDI) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	ОбъектФормата = МенеджерКонвертацииДанныхEDI.ОбъектФорматаПользовательИзСотрудникаEDI(
		МодельСотрудникаEDI, Результат.ЕстьОшибки, Результат.ТекстОшибки);
	
	Если Результат.ЕстьОшибки = Истина Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Выполняем запись объектной модели в информационную базу
	ОбъектКонфигурации = МетаданныеСсылочногоТипаПрикладногоОбъекта(Метаданные.ОпределяемыеТипы.ПользовательEDI);
	Если ОбъектКонфигурации = Неопределено Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Не заполнен определяемый тип <ПользовательEDI>'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Ссылка = ПреобразованиеДанныхEDIСлужебный.РезультатРасширеннойЗаписиОбъектаФормата(
		ОбъектФормата, ОбъектКонфигурации,,Результат.ЕстьОшибки, Результат.ТекстОшибки);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияПрикладногоОбъектаВФорматСервиса

Функция НовыйПараметрыКонвертацииПрикладногоОбъекта()
	
	Результат = Новый Структура;
	Результат.Вставить("ПрикладнойОбъект");
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("ВариантУказанияНоменклатуры");
	Результат.Вставить("ПередаватьНомерДокумента", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПрикладнойОбъектВМоделиСервиса(Знач ПараметрыВыполнения, ЕстьОшибки = Ложь, ТекстОшибки = "")
	
	ЕстьОшибки = Ложь;
	Результат = Неопределено;
	ТипДокумента = ТипДокументаEDI(ПараметрыВыполнения.ПрикладнойОбъект);
	
	
	// подготовка параметров конвертации
	ПараметрыКонвертации = Новый Структура;
	ПараметрыКонвертации.Вставить("ПередаватьНомерДокумента", ПараметрыВыполнения.ПередаватьНомерДокумента);
	ПараметрыКонвертации.Вставить("Ссылка", ПараметрыВыполнения.ПрикладнойОбъект);
	ПараметрыКонвертации.Вставить("ВариантУказанияНоменклатуры", ПараметрыВыполнения.ВариантУказанияНоменклатуры);
	
	// получение идентификатора организации Бизнес сети
	ПараметрыКонвертации.Вставить("ИдентификаторОрганизации",
		ИнтеграцияССервисомEDIСлужебный.ИдентификаторОрганизацииБизнесСети(ПараметрыВыполнения.Организация, ЕстьОшибки));
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получение идентификатора контрагента Бизнес сети
	ДанныеКонтрагентаБизнесСети = ИнтеграцияССервисомEDIСлужебный.КонтрагентыБизнесСети(ПараметрыВыполнения.Контрагент, ЕстьОшибки);
	Если ЗначениеЗаполнено(ДанныеКонтрагентаБизнесСети) Тогда
		ПараметрыКонвертации.Вставить("ИдентификаторКонтрагента", ДанныеКонтрагентаБизнесСети[0].Идентификатор);
	КонецЕсли;
	
	
	// формирование электронного документа
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ОбъектФормата = МенеджерКонвертацииДанныхEDI.ЗаказПоставщикуСсылкаВОбъектФормата(ПараметрыВыполнения.ПрикладнойОбъект, ЕстьОшибки, ТекстОшибки);
			
		Если Не ЕстьОшибки Тогда
			Результат = МенеджерКонвертацииДанныхEDI.ЗаказEDIИзОбъектаФорматаЗаказаПоставщику(
				ПараметрыКонвертации, ОбъектФормата, ЕстьОшибки, ТекстОшибки);
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ОбъектФормата = МенеджерКонвертацииДанныхEDI.ЗаказКлиентаСсылкаВОбъектФормата(ПараметрыВыполнения.ПрикладнойОбъект, ЕстьОшибки, ТекстОшибки);
			
		Если Не ЕстьОшибки Тогда
			Результат = МенеджерКонвертацииДанныхEDI.ЗаказEDIИзОбъектаФорматаЗаказаКлиента(
				ПараметрыКонвертации, ОбъектФормата, ЕстьОшибки, ТекстОшибки);
		КонецЕсли;
	Иначе
		ЕстьОшибки = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru='Неизвестный тип документа EDI %1'"), Строка(ТипДокумента));
	КонецЕсли;

	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПланСинхронизацииДокумента

#Область ПолучениеТекущегоСостоянияСинхронизации

Функция СостояниеСинхронизацииДокумента(Знач ПрикладнойОбъект)
	
	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("СостояниеВыполнения");
	ДанныеСостояния.Вставить("НачалоВыполнения");
	ДанныеСостояния.Вставить("ОкончаниеВыполнения");
	ДанныеСостояния.Вставить("ДанныеСопоставленияНоменклатуры");
	ДанныеСостояния.Вставить("ТекстОшибки", "");
	ДанныеСостояния.Вставить("КраткоеПредставлениеОшибки", "");
	
	ТекущееСостояние = РегистрыСведений.ПланСинхронизацииДокументовEDI.ТекущееСостояние(ПрикладнойОбъект);
	ЗаполнитьЗначенияСвойств(ДанныеСостояния, ТекущееСостояние);
	ДанныеСостояния.ТекстОшибки = ТекущееСостояние.ПодробноеОписаниеОшибки;
	ДанныеСостояния.КраткоеПредставлениеОшибки = ТекущееСостояние.ТекстОшибки;
	
	Если (ТекущееСостояние.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется
		Или ТекущееСостояние.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Требуется) Тогда
		
		АктуализироватьСостояниеСинхронизации();
	КонецЕсли;
	
	Возврат ДанныеСостояния;
	
КонецФункции

Процедура АктуализироватьСостояниеСинхронизации()
	
	РегистрыСведений.ПланСинхронизацииДокументовEDI.ЗапуститьСинхронизацию(
		"РаботаСДаннымиEDIСлужебный.ЗапуститьСинхронизациюССервисом");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповСинхронизации

Процедура ВыполнитьПрикладныеПроверки(Знач ПараметрыВыполнения, Результат)
	
	// Проверка на доступность выполняемой команды
	Если Не ДокументыEDIИнтеграция.ДоступноВыполнениеКомандыДокумента(ПараметрыВыполнения.ПрикладнойОбъект,
		ПараметрыВыполнения.Команда) Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Прикладной объект не готов к смене статуса.'");
		
		ЗафиксироватьОшибкуОтправкиВСервис(ПараметрыВыполнения.ТипДокумента,
			ПараметрыВыполнения.ИдентификаторВСервисе);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет создание документа (POST) в сервисе и возвращает данные изменения
Процедура СоздатьНовыйДокументВСервисе(Знач ПараметрыВыполнения, Результат)

	Отказ = Ложь;
	ТекстОшибки = "";
	ПрикладнойОбъект = ПараметрыВыполнения.ПрикладнойОбъект;
	
	
	// если идентификатор в реестре заполнен - документ уже есть в сервисе
	СостояниеДокумента = ТекущееСостояниеДокумента(ПрикладнойОбъект);
	Если Не ПустаяСтрока(СостояниеДокумента.ИдентификаторВСервисе) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыполнения.ИдентификаторАсинхронногоОбработчика) Тогда
		
		// подготовка параметров запроса
		ПараметрыЗапроса = НовыйПараметрыСозданияДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыВыполнения);
		
		ПараметрыЗапроса.КлючИдемпотентности = Строка(ПрикладнойОбъект.УникальныйИдентификатор());
		
		// конвертация документа в модель сервиса
		ПараметрыКонвертации = НовыйПараметрыКонвертацииПрикладногоОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ПараметрыВыполнения);
		ПараметрыКонвертации.ПередаватьНомерДокумента = Истина;
		
		ПараметрыЗапроса.ЭлектронныйДокумент = ПрикладнойОбъектВМоделиСервиса(ПараметрыКонвертации, Отказ, ТекстОшибки);
		Если Отказ Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ТекстОшибки = НСтр("ru='Ошибка конвертации документа в формат сервиса.'");
			Результат.ПодробноеОписаниеОшибки = ТекстОшибки;
			
			Возврат;
		КонецЕсли;
		
		// обращение к сервису
		ОтветСервиса = РезультатСозданияДокумента(ПараметрыЗапроса);
		Если ОтветСервиса.Ошибка Тогда
			Результат.ЕстьОшибки = Истина;
			ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
			
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ОтветСервиса) Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ТекстОшибки = НСтр("ru='Ошибка в блоке интеграции с сервисом 1С:EDI.'");
			Результат.ПодробноеОписаниеОшибки = НСтр("ru='Ответ от сервиса не содержит данных.'");;
			
			Возврат;
		КонецЕсли;
		
		Результат.ХешДокументаСервиса = ОтветСервиса.ХешДокументаСервиса;
	Иначе
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияРезультатаАсинхроннойОбработкиЗапроса();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыВыполнения);
		ПараметрыЗапроса.ИдентификаторЗадания = ПараметрыВыполнения.ИдентификаторАсинхронногоОбработчика;
			
		// запрос у сервиса результата выполнения задания
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.РезультатАсинхроннойОбработкиКоманды(ПараметрыЗапроса);
		
		Если Не ЗначениеЗаполнено(ОтветСервиса) Или ОтветСервиса.Ошибка Тогда
			Результат.ЕстьОшибки = Истина;
			ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	// обработка ответа
	Если ОтветСервиса.ОжидатьОтветаСервиса Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса.ИдентификаторЗаданияСервиса;
	Иначе
		ДанныеДокумента = ОтветСервиса.Данные;
		ДанныеДокумента.Вставить("ХэшОтправленногоДокумента", Результат.ХешДокументаСервиса);
		ДанныеДокумента.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);
		ДанныеДокумента.Вставить("НомерТекущейВерсии", ДанныеДокумента.НомерАктуальнойВерсии);
		ДанныеДокумента.Вставить("СостояниеПрикладногоОбъекта",
			Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна);
		
		Результат.СостояниеПрикладногоОбъекта = ОбновленноеСостояниеДокумента(ДанныеДокумента);
	КонецЕсли;

КонецПроцедуры

// Получение данных документа из сервиса (GET) и обновление соответствующего прикладного объекта
Процедура ЗагрузитьДанныеПрикладногоОбъектаИзСервиса(Знач ПараметрыВыполнения, Результат)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	ПрикладнойОбъект = ПараметрыВыполнения.ПрикладнойОбъект;
	ТипДокумента = ПараметрыВыполнения.ТипДокумента;
	
	// Проверка входных параметров
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.Организация)
		Или Не ЗначениеЗаполнено(ПрикладнойОбъект) Тогда
		
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='В обработчик загрузки данных из сервиса не переданы необходимые параметры.'");
		
		Возврат;
	КонецЕсли;
	
	// Получение информации по документу
	Если Не ПараметрыВыполнения.Свойство("ИдентификаторВСервисе")
		Или ПустаяСтрока(ПараметрыВыполнения.ИдентификаторВСервисе) Тогда
		
		СостояниеДокумента = ТекущееСостояниеДокумента(ПрикладнойОбъект);
		Если СостояниеДокумента = Неопределено Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ТекстОшибки = НСтр("ru='Прикладной объект еще не выгружался в EDI.'");
			
			Возврат;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИдентификаторВСервисе", СостояниеДокумента.ИдентификаторВСервисе);
	КонецЕсли;
	
	ОтветСервиса = ДанныеДокументаСервиса(ПараметрыВыполнения);
	
	Если Не ЗначениеЗаполнено(ОтветСервиса) Или ОтветСервиса.Ошибка Тогда
		Результат.ЕстьОшибки = Истина;
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
		
		Возврат;
	КонецЕсли;
	
	МодельЗаказа = ОтветСервиса.Данные.ДанныеДокумента;
	
	// Получаем заказ со всеми ключами, описанными в схеме.
	ИнтеграцияССервисомEDIСлужебный.НормализоватьДанныеПоСхеме(МодельЗаказа,
		ИнтеграцияССервисомEDIСлужебный.ОписаниеСтруктурыДанныхЗаказа());

	СтороныУчастники = МенеджерКонвертацииДанныхEDI.СтороныУчастники(ТипДокумента, МодельЗаказа, Отказ, ТекстОшибки);
	Если Отказ Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	ТаблицаСопоставления = Неопределено;
	Если ПараметрыВыполнения.ТаблицаСопоставления <> Неопределено Тогда
		ТаблицаСопоставления = СопоставлениеНоменклатурыКонтрагентовСлужебный.ТаблицаСопоставленнойНоменклатуры(
			ПараметрыВыполнения.ТаблицаСопоставления);
	КонецЕсли;
	
	// Посредствам СПИ сопоставления выполняем поиск товарных позиций
	СопоставлениеНоменклатурыЗаказа = МенеджерКонвертацииДанныхEDI.ТоварныеПозицииЗаказа(
		ТипДокумента, МодельЗаказа, ТаблицаСопоставления, СтороныУчастники);
	Если СопоставлениеНоменклатурыЗаказа.ЕстьОшибки Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Ошибка при выполнения поиска товарных позиций в базе.'");
		Результат.ПодробноеОписаниеОшибки = СопоставлениеНоменклатурыЗаказа.ТекстОшибки;
		
		Возврат;
	КонецЕсли;
	
	
	// если сопоставлены не все товарные позиции - нужно вывести форму сопоставления
	Если Не СопоставлениеНоменклатурыЗаказа.ВсеСтрокиСопоставлены Тогда
		Результат.НеСопоставленныеТоварныеПозиции = СопоставлениеНоменклатурыЗаказа.НеСопоставленныеТоварныеПозиции;
		
		Возврат;
	КонецЕсли;
	
	// Получаем объектную модель документа enterprice data
	СопутствующиеСсылки = Новый Массив;
	
	ПараметрыКонвертации = МенеджерКонвертацииДанныхEDI.НовыйПараметрыКонвертацииЗаказаEDIВОбъектФормата();
	
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, СтороныУчастники);
	
	ПараметрыКонвертации.СопоставлениеНоменклатуры = СопоставлениеНоменклатурыЗаказа.ТаблицаСопоставления;
	ПараметрыКонвертации.ПрикладнойОбъект = ПрикладнойОбъект;
	ПараметрыКонвертации.Ответственный = ПараметрыВыполнения.Менеджер;
	
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ПараметрыКонвертации.Склад = СкладЗаказаПоУмолчанию(ТипДокумента, СтороныУчастники);
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		ОбъектФормата = МенеджерКонвертацииДанныхEDI.ОбъектФорматаЗаказПоставщикуИзЗаказаEDI(
			МодельЗаказа, ПараметрыКонвертации, Отказ, ТекстОшибки, СопутствующиеСсылки);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		ОбъектФормата = МенеджерКонвертацииДанныхEDI.ОбъектФорматаЗаказКлиентаИзЗаказаEDI(
			МодельЗаказа, ПараметрыКонвертации, Отказ, ТекстОшибки, СопутствующиеСсылки);
	Иначе
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Неизвестный тип документа EDI: %1'"), ТипДокумента);
			
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Ошибка распаковки электронного документа.'");
		Результат.ПодробноеОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	// Выполняем запись объектной модели в информационную базу
	ОбъектКонфигурации = Метаданные.НайтиПоТипу(ТипПрикладногоОбъекта(ТипДокумента));
	
	ПрикладнойОбъект = ПреобразованиеДанныхEDIСлужебный.РезультатРасширеннойЗаписиОбъектаФормата(
		ОбъектФормата, ОбъектКонфигурации,СопутствующиеСсылки, Отказ, ТекстОшибки);
	Если Отказ Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Ошибка записи электронного документа в базу данных.'");
		Результат.ПодробноеОписаниеОшибки = ТекстОшибки;
			
		Возврат;
	КонецЕсли;
	
	// После загрузки документа из сервиса локальная версия стала актуальной
	ДанныеДокумента = ОтветСервиса.Данные;
	ДанныеДокумента.Вставить("ИдентификаторВСервисе", ПараметрыВыполнения.ИдентификаторВСервисе);
	ДанныеДокумента.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);
	ДанныеДокумента.Вставить("ТипДокумента", ТипДокумента);
	ДанныеДокумента.Вставить("НомерТекущейВерсии", ДанныеДокумента.НомерАктуальнойВерсии);
	ДанныеДокумента.Вставить("СостояниеПрикладногоОбъекта",
			Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна);
			
	Результат.СостояниеПрикладногоОбъекта = ОбновленноеСостояниеДокумента(ДанныеДокумента);
	
КонецПроцедуры

// Изменение статуса документа сервиса (PATCH)
Процедура ИзменитьСтатусДокументаВСервисе(Знач ПараметрыВыполнения, Результат)
	
	ПрикладнойОбъект = ПараметрыВыполнения.ПрикладнойОбъект;
	
	СостояниеДокумента = ТекущееСостояниеДокумента(ПрикладнойОбъект);
	Если СостояниеДокумента = Неопределено Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Прикладной объект еще не выгружался в EDI.'");
		
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыполнения.ИдентификаторАсинхронногоОбработчика) Тогда
		// подготовка параметров запроса
		ПараметрыЗапроса = НовыйПараметрыИзмененияСтатусаДокумента();
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыВыполнения);
		
		ПараметрыЗапроса.Инструкция = ПараметрыВыполнения.Команда;
		ПараметрыЗапроса.НомерРевизии = СостояниеДокумента.НомерТекущейВерсии;
		
		// обращение к сервису
		ОтветСервиса = РезультатИзмененияСтатуса(ПараметрыЗапроса);
	Иначе
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияРезультатаАсинхроннойОбработкиЗапроса();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыВыполнения);
		ПараметрыЗапроса.ИдентификаторЗадания = ПараметрыВыполнения.ИдентификаторАсинхронногоОбработчика;
			
		// запрос у сервиса результата выполнения задания
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.РезультатАсинхроннойОбработкиКоманды(ПараметрыЗапроса);
	КонецЕсли;
	
	// обработка ответа сервиса
	Если Не ЗначениеЗаполнено(ОтветСервиса) Или ОтветСервиса.Ошибка Тогда
		Результат.ЕстьОшибки = Истина;
		ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
		
		ЗафиксироватьОшибкуОтправкиВСервис(ПараметрыВыполнения.ТипДокумента,
			ПараметрыВыполнения.ИдентификаторВСервисе);
		
		Возврат;
	КонецЕсли;
	
	Если ОтветСервиса.ОжидатьОтветаСервиса Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса.ИдентификаторЗаданияСервиса;
	Иначе
		ДанныеДокумента = ОтветСервиса.Данные;
		ДанныеДокумента.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);
		ДанныеДокумента.Вставить("СостояниеПрикладногоОбъекта",
			?(ПараметрыВыполнения.НомерРевизии = ДанныеДокумента.НомерАктуальнойВерсии,
				Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна,
				Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия));
		
		Результат.СостояниеПрикладногоОбъекта = ОбновленноеСостояниеДокумента(ДанныеДокумента);
		
		Если Результат.СостояниеПрикладногоОбъекта.НомерТекущейВерсии <> Результат.СостояниеПрикладногоОбъекта.НомерАктуальнойВерсии Тогда
			ПараметрыЗагрузкиВерсии = РаботаСДаннымиEDIСлужебныйКлиентСервер.НовыйДанныеДокумента();
			ЗаполнитьЗначенияСвойств(ПараметрыЗагрузкиВерсии, Результат.СостояниеПрикладногоОбъекта);
			ПараметрыЗагрузкиВерсии.Вставить("Документ", ПрикладнойОбъект);
			ПараметрыЗагрузкиВерсии.Вставить("ИдентификаторВСервисе", Результат.СостояниеПрикладногоОбъекта.ИдентификаторВСервисе);
			
			ЗапланироватьПолучениеИзСервиса(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗагрузкиВерсии),
				Результат.ЕстьОшибки, Результат.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обновление данных документа в сервисе (PUT)
Процедура ОбновитьДокументВСервисе(Знач ПараметрыВыполнения, Результат)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	ПрикладнойОбъект = ПараметрыВыполнения.ПрикладнойОбъект;
	
	// обращение к реестру документов
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.НомерРевизии) 
		Или Не ЗначениеЗаполнено(ПараметрыВыполнения.ХэшДокументаСервиса) Тогда
			
		СостояниеДокумента = ТекущееСостояниеДокумента(ПрикладнойОбъект);
		
		ПараметрыВыполнения.НомерРевизии = СостояниеДокумента.НомерТекущейВерсии;
		ПараметрыВыполнения.ХэшДокументаСервиса = СостояниеДокумента.ХэшОтправленногоДокумента;
	КонецЕсли;
		
	Если ПустаяСтрока(ПараметрыВыполнения.ИдентификаторВСервисе) Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 еще не выгружался в сервис.'"), Строка(ПрикладнойОбъект));
		
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыполнения.ИдентификаторАсинхронногоОбработчика) Тогда
		
		// подготовка параметров запроса
		ПараметрыЗапроса = НовыйПараметрыОбновленияДокумента();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыВыполнения);
		ПараметрыЗапроса.НомерРевизии = ПараметрыВыполнения.НомерРевизии;
		ПараметрыЗапроса.ХэшОтправленногоДокумента = ПараметрыВыполнения.ХэшДокументаСервиса;
		
		// конвертация документа в модель сервиса
		ПараметрыКонвертации = НовыйПараметрыКонвертацииПрикладногоОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ПараметрыВыполнения);
		
		ПараметрыЗапроса.ЭлектронныйДокумент = ПрикладнойОбъектВМоделиСервиса(ПараметрыКонвертации, Отказ, ТекстОшибки);
		Если Отказ Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ТекстОшибки = НСтр("ru='Ошибка конвертации документа в формат сервиса.'");
			Результат.ПодробноеОписаниеОшибки = ТекстОшибки;
			
			ЗафиксироватьОшибкуОтправкиВСервис(ПараметрыВыполнения.ТипДокумента,
				ПараметрыВыполнения.ИдентификаторВСервисе);
			
			Возврат;
		КонецЕсли;
		
		// обращение к сервису
		ОтветСервиса = РезультатОбновленияДокумента(ПараметрыЗапроса);
		Если Не ЗначениеЗаполнено(ОтветСервиса) Или ОтветСервиса.Ошибка Тогда
			Результат.ЕстьОшибки = Истина;
			ЗаполнитьЗначенияСвойств(Результат, ОтветСервиса);
			
			ЗафиксироватьОшибкуОтправкиВСервис(ПараметрыВыполнения.ТипДокумента,
				ПараметрыВыполнения.ИдентификаторВСервисе);
			
			Возврат;
		КонецЕсли;
		
		Результат.ХешДокументаСервиса = ОтветСервиса.ХешДокументаСервиса;
	Иначе
		ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияРезультатаАсинхроннойОбработкиЗапроса();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыВыполнения);
		ПараметрыЗапроса.ИдентификаторЗадания = ПараметрыВыполнения.ИдентификаторАсинхронногоОбработчика;
			
		// запрос у сервиса результата выполнения задания
		ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.РезультатАсинхроннойОбработкиКоманды(ПараметрыЗапроса);
	КонецЕсли;
	
	// обработка ответа сервиса, актуализация реестра документов
	Если ОтветСервиса.ОжидатьОтветаСервиса Тогда
		Результат.ОжидатьОтветаСервиса = Истина;
		Результат.ИдентификаторЗаданияСервиса = ОтветСервиса.ИдентификаторЗаданияСервиса;
	Иначе
		ДанныеДокумента = ОтветСервиса.Данные;
		ДанныеДокумента.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);
		ДанныеДокумента.Вставить("ХэшОтправленногоДокумента", Результат.ХешДокументаСервиса);
		ДанныеДокумента.Вставить("НомерТекущейВерсии", ДанныеДокумента.НомерАктуальнойВерсии);
		ДанныеДокумента.Вставить("СостояниеПрикладногоОбъекта",
				Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна);

		Результат.СостояниеПрикладногоОбъекта = ОбновленноеСостояниеДокумента(ДанныеДокумента);
	КонецЕсли;

КонецПроцедуры

// Выполняется сопоставление номенклатуры (перед отправкой данных в сервис при full - интеграции)
Процедура ПроверитьСопоставлениеНоменклатуры(Знач ПараметрыВыполнения, Результат)
	
	Если ПараметрыВыполнения.ВариантУказанияНоменклатуры =
		СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
		
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = 
		СопоставлениеНоменклатурыКонтрагентовСлужебный.ПроверкаСопоставленияНоменклатурыКонтрагентовВДокументах(
		ПараметрыВыполнения.ПрикладнойОбъект);

	Если РезультатПроверки.ЕстьОшибкиСопоставления Тогда
		Результат.РезультатПроверкиСопоставления = РезультатПроверки;
		
		Если ЗначениеЗаполнено(ПараметрыВыполнения.ИдентификаторВСервисе) Тогда
			ЗафиксироватьОшибкуОтправкиВСервис(ПараметрыВыполнения.ТипДокумента,
				ПараметрыВыполнения.ИдентификаторВСервисе);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Выполняется после создания документа в сервисе при full - интеграции
Процедура ОчиститьДокументыГотовыеКОтправке(Знач ПараметрыВыполнения, Результат)
	
	Попытка
		РегистрыСведений.НеОтправленныеПрикладныеОбъектыEDI.УдалитьЗапись(ПараметрыВыполнения.ПрикладнойОбъект);
	Исключение
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = НСтр("ru='Не удалось очистить очередь документов к отправке.'");
		Результат.ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Обертка для запуска обработчиков синхронизации с сервисом.
Функция РезультатВыполненияЭтапаСинхронизации(Знач ДанныеВыполнения)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	Результат.Вставить("РезультатПроверкиСопоставления", Неопределено);
	Результат.Вставить("НеСопоставленныеТоварныеПозиции", Неопределено);
	Результат.Вставить("ОжидатьОтветаСервиса" , Ложь);
	Результат.Вставить("ИдентификаторЗаданияСервиса", "");
	Результат.Вставить("ХешДокументаСервиса", "");
	Результат.Вставить("СостояниеПрикладногоОбъекта", Неопределено);
	
	Обработчик = ДанныеВыполнения.ЭтапСинхронизации;
	Попытка
		Если Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.СоздатьВСервисе Тогда
			СоздатьНовыйДокументВСервисе(ДанныеВыполнения, Результат);
		ИначеЕсли Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьВСервисе Тогда
			ОбновитьДокументВСервисе(ДанныеВыполнения, Результат);
		ИначеЕсли Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьПрикладнойОбъектИзСервиса Тогда
			ЗагрузитьДанныеПрикладногоОбъектаИзСервиса(ДанныеВыполнения, Результат);
		ИначеЕсли Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.ИзменитьСтатусВСервисе Тогда
			ИзменитьСтатусДокументаВСервисе(ДанныеВыполнения, Результат);
		ИначеЕсли Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.ПроверитьСопоставлениеНоменклатуры Тогда
			ПроверитьСопоставлениеНоменклатуры(ДанныеВыполнения, Результат);
		ИначеЕсли Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.ОчиститьДокументыГотовыеКОтправке Тогда
			ОчиститьДокументыГотовыеКОтправке(ДанныеВыполнения, Результат);
		ИначеЕсли Обработчик = Перечисления.ЭтапыСинхронизацииДокументовEDI.ВыполнитьПрикладныеПроверки Тогда
			ВыполнитьПрикладныеПроверки(ДанныеВыполнения, Результат);
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru='Неизвестный обработчик %1'"), Обработчик);
		КонецЕсли;
	Исключение
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка выполнения обработчика %1'"), Обработчик);
		Результат.ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

Функция МетаданныеСсылочногоТипаПрикладногоОбъекта(Знач ОпределяемыйТип)
	
	Для Каждого ТипОпределяемогоТипа Из ОпределяемыйТип.Тип.Типы() Цикл
		
		МетаданныеПрикладногоОбъекта = Метаданные.НайтиПоТипу(ТипОпределяемогоТипа);
		Если МетаданныеПрикладногоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипОпределяемогоТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат МетаданныеПрикладногоОбъекта;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СведенияИзРеестраДокументов

Процедура ЗафиксироватьОшибкуОтправкиВСервис(Знач ТипДокумента, Знач ИдентификаторВСервисе)
	
	Если ПустаяСтрока(ИдентификаторВСервисе) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ИдентификаторВСервисе", ИдентификаторВСервисе);
	ДанныеДокумента.Вставить("ТипДокумента", ТипДокумента);
	ДанныеДокумента.Вставить("СостояниеПрикладногоОбъекта",
		Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеУдалосьАктуализироватьВерсиюВСервисе);

	РегистрыСведений.СостоянияДокументовEDI.ОбновленныеДанныеЗаписиРеестра(ДанныеДокумента);
	
КонецПроцедуры

Функция ТекущееСостояниеДокумента(Знач ПрикладнойОбъект)
	
	ТипДокумента = ТипДокументаEDI(ПрикладнойОбъект);
	
	Результат = РегистрыСведений.СостоянияДокументовEDI.ЗаписиРеестраПоДокументам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрикладнойОбъект)).Получить(ПрикладнойОбъект);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = РегистрыСведений.СостоянияДокументовEDI.ПустаяЗаписьРеестра();
		Результат.ПрикладнойОбъект = ПрикладнойОбъект;
		Результат.ТипДокумента = ТипДокумента;
		Результат.Вставить("Команды",
			РегистрыСведений.КомандыДокументовEDI.НаборКомандПоУмолчанию(ТипДокумента));
			
		ЗаполнитьПрикладнуюДоступностьКоманд(ПрикладнойОбъект, Результат.Команды);
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("Команды", РегистрыСведений.КомандыДокументовEDI.ПрочитатьКомандыДокумента(
		Результат.ИдентификаторВСервисе, ТипДокумента));

	ЗаполнитьПрикладнуюДоступностьКоманд(ПрикладнойОбъект, Результат.Команды);
		
	Результат.Вставить("ДоступныеРеквизиты",
		РегистрыСведений.ДоступныеДляРедактированияРеквизитыДокументовEDI.ДоступныеРеквизиты(
			Результат.ИдентификаторВСервисе, ТипДокумента));
		
	Возврат Результат;
	
КонецФункции

Функция ОбновленноеСостояниеДокумента(Знач ДанныеСервиса)
	
	Результат = РегистрыСведений.СостоянияДокументовEDI.ОбновленныеДанныеЗаписиРеестра(ДанныеСервиса);
	
	// Обновление кэша доступных команд
	РегистрыСведений.КомандыДокументовEDI.УстановитьКомандыДокумента(
		ДанныеСервиса.ИдентификаторВСервисе, ДанныеСервиса.ТипДокумента, ДанныеСервиса.Команды);
		
	// Обновление кэша доступных реквизитов
	РегистрыСведений.ДоступныеДляРедактированияРеквизитыДокументовEDI.ЗаписатьДоступныеРеквизиты(
		ДанныеСервиса.ИдентификаторВСервисе, ДанныеСервиса.ТипДокумента, ДанныеСервиса.ДоступныеРеквизиты);
		
	// Добавление доступных команд к данным записи реестра
	Результат.Вставить("Команды", ДанныеСервиса.Команды);
	
	ЗаполнитьПрикладнуюДоступностьКоманд(ДанныеСервиса.ПрикладнойОбъект, Результат.Команды);
	
	// Добавление доступных для изменения атрибутов модели
	Результат.Вставить("ДоступныеРеквизиты", ДанныеСервиса.ДоступныеРеквизиты);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторПользователяСервиса(Знач ДанныеДокумента, Отказ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.Менеджер) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ПараметрыЗапроса = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыДобавленияМенеджера();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДанныеДокумента);
	ОтветСервиса = ИнтеграцияССервисомEDIСлужебный.РезультатДобавленияМенеджера(ПараметрыЗапроса);
	
	Если ОтветСервиса.Ошибка Тогда
		Отказ = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОтветСервиса.Данные;
	
КонецФункции

Процедура ЗаполнитьПрикладнуюДоступностьКоманд(ПрикладнойОбъект, Команды)

	КатегорииКоманд = Новый Соответствие;
	ДоступныеКатегорииКоманд = Новый Массив;
	
	Для Каждого КлючИЗначение Из Команды Цикл
		Команда = КлючИЗначение.Ключ;
		
		КатегорияКоманды = ДокументыEDIИнтеграция.КатегорияКомандыДокумента(Команда);
		
		КатегорииКоманд.Вставить(Команда, КатегорияКоманды);
		ДоступныеКатегорииКоманд.Добавить(КатегорияКоманды);
	КонецЦикла;
	
	ТаблицаДоступныхКатегорийКоманд = ДокументыEDIИнтеграция.ТаблицаДоступныхКатегорийКоманд(ДоступныеКатегорииКоманд);
	
	СервисEDIПереопределяемый.ПриОпределенииДоступностиКомандПриОтображении(ПрикладнойОбъект, ТаблицаДоступныхКатегорийКоманд);
	
	Для Каждого КлючИЗначение Из Команды Цикл
		
		Команда          = КлючИЗначение.Ключ;
		ДанныеКоманды    = КлючИЗначение.Значение;
		КатегорияКоманды = КатегорииКоманд[Команда];
		
		НайденнаяСтрока = ТаблицаДоступныхКатегорийКоманд.Найти(КатегорияКоманды, "КатегорияКоманды");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			ДанныеКоманды.Вставить("Доступно", Истина);
			ДанныеКоманды.Вставить("ПояснениеНедоступности", "");
			Продолжить;
			
		КонецЕсли; 
		
		ДанныеКоманды.Вставить("Доступно", НайденнаяСтрока.Доступно);
		ДанныеКоманды.Вставить("ПояснениеНедоступности", НайденнаяСтрока.ПояснениеНедоступности);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанныхФорм

#Область КонструкторВыходныхПараметров

Функция НовыйСведенияПоДокументу(Знач ТребуемыеДанные)
	
	Результат = Новый Структура(ТребуемыеДанные);
	Результат.Вставить("ОшибкаРаботыССервисом", Ложь);

	Возврат Результат
	
КонецФункции

// Конструктор описание версии документа
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//    * Дата                   - Дата   - Дата версии документа
//    * Сумма                  - Число  - Сумма документа
//    * ПредставлениеМенеджера - Строка - Строковое представление менеджера документа
//    * ПредставлениеВалюты    - Строка - Строковое представление валюты документа
//
Функция СведенияВерсии()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"                   , '00010101');
	Результат.Вставить("Сумма"                  , 0);
	Результат.Вставить("ПредставлениеМенеджера" , "");
	Результат.Вставить("ПредставлениеВалюты"    , "");
	
	Возврат Результат;
	
КонецФункции

// Функция - Сведения конфликтующих версий
// 
// Возвращаемое значение:
//  Структура - Структура со следующими ключами:
//    * СведенияТекущейВерсии - Структура - см. СведенияВерсии
//        сведения о версии, которая была получена из сервис в последний раз.
//    * СведенияАктуальнойВерсии - Структура - см. СведенияВерсии
//        сведения о последней актуальной версии сервиса.
//    * СведенияРедактируемойВерсии - Структура - см. СведенияВерсии
//        сведения о редактируемом документе.
//
Функция СведенияКонфликтующихВерсий()
	
	Результат = Новый Структура;
	
	Результат.Вставить("СведенияТекущейВерсии"       , СведенияВерсии());
	Результат.Вставить("СведенияАктуальнойВерсии"    , СведенияВерсии());
	Результат.Вставить("СведенияРедактируемойВерсии" , СведенияВерсии());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УсловияЗаполненияСведенийПоДокументу

Функция ТребуютсяНастройкиКонтрагента(Знач ПараметрыВыполнения)
	
	Возврат СтрНайти(ПараметрыВыполнения.ЗапрашиваемыеСвойства,
		РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента()) <> 0;
	
КонецФункции

Функция ТребуютсяИдентификаторыСервиса(Знач ПараметрыВыполнения)
	
	Возврат СтрНайти(ПараметрыВыполнения.ЗапрашиваемыеСвойства,
		РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов()) <> 0;
		
КонецФункции

Функция ТребуетсяСостояниеДокумента(Знач ПараметрыВыполнения)
	
	Возврат СтрНайти(ПараметрыВыполнения.ЗапрашиваемыеСвойства,
		РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента()) <> 0;
		
КонецФункции

Функция ТребуетсяПредставлениеУчастников(Знач ПараметрыВыполнения)
	
	Возврат СтрНайти(ПараметрыВыполнения.ЗапрашиваемыеСвойства,
		РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников()) <> 0;
		
КонецФункции

Функция ТребуетсяСостояниеСинхронизации(Знач ПараметрыВыполнения)
	
	Возврат СтрНайти(ПараметрыВыполнения.ЗапрашиваемыеСвойства,
		РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторСостояниеСинхронизации()) <> 0;
		
КонецФункции

#КонецОбласти

#Область ЗаполнениеСведенийПоДокументу

Процедура ЗаполнитьНастройкиКонтрагента(Знач ПараметрыВыполнения, Результат)
	
	Отказ = Ложь;
	
	КлючДанных = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторНастройкиКонтрагента();
	ТолькоДанныеИзКэша = ПараметрыВыполнения.ИспользоватьЛокальныеНастройки;
	
	Результат[КлючДанных] = ДокументыEDIИнтеграция.НовыйНастройкиКонтрагента();
	
	ДанныеПолучены        = Ложь;
	
	Если ТолькоДанныеИзКэша Тогда
		НастройкиКонтрагента = РегистрыСведений.НастройкиПоставщикаEDI.НастройкаКонтрагентаЛокально(
			ПараметрыВыполнения.Организация, ПараметрыВыполнения.Контрагент, ДанныеПолучены);
	КонецЕсли;
	
	Если ДанныеПолучены Тогда
		ЗаполнитьЗначенияСвойств(Результат[КлючДанных], НастройкиКонтрагента);
		
		Возврат;
	КонецЕсли;
	
	НастройкиКонтрагента = РегистрыСведений.НастройкиПоставщикаEDI.НастройкаКонтрагентаИзСервиса(
		ПараметрыВыполнения.Организация, ПараметрыВыполнения.Контрагент, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(НастройкиКонтрагента) Тогда
		Результат.ОшибкаРаботыССервисом = Истина;
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат[КлючДанных], НастройкиКонтрагента);
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеДокумента(Знач ПараметрыВыполнения, Результат)
	
	КлючДанных = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторДанныеСтатусаДокумента();
	Результат[КлючДанных] = Неопределено;
	
	ПрикладнойОбъект = ПараметрыВыполнения.Документ;
	
	// получение данных по прикладному объекту
	СостояниеДокумента = ТекущееСостояниеДокумента(ПрикладнойОбъект);
	Если ПустаяСтрока(СостояниеДокумента.ИдентификаторВСервисе) Или СостояниеДокумента.БизнесПроцессПоДокументуЗавершен Тогда
		Результат[КлючДанных] = СостояниеДокумента;
		
		Возврат;
	КонецЕсли;

	ПараметрыЗапроса = НовыйПараметрыПолученияАктуальногоСостоянияДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, СостояниеДокумента);
	
	АктуальноеСостояние = АктуальноеСостояниеДокумента(ПараметрыЗапроса);
	Если Не ЗначениеЗаполнено(АктуальноеСостояние) Тогда
		Результат.ОшибкаРаботыССервисом = Истина;
		
		Возврат;
	КонецЕсли;
	
	АктуальноеСостояние.Вставить("ПрикладнойОбъект", ПрикладнойОбъект);

	// обновление записи реестра документов
	Результат[КлючДанных] = ОбновленноеСостояниеДокумента(АктуальноеСостояние);

	Если Результат[КлючДанных].НомерТекущейВерсии <> Результат[КлючДанных].НомерАктуальнойВерсии
		И Не Результат[КлючДанных].БизнесПроцессПоДокументуЗавершен Тогда
			
		ПараметрыВыполнения = Результат[КлючДанных];
		ПараметрыВыполнения.Вставить("Документ", ПараметрыВыполнения.ПрикладнойОбъект);
			
		ЗапланироватьПолучениеИзСервиса(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыполнения));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИдентификаторыОбъектов(Знач ПараметрыВыполнения, Результат)
	
	Отказ = Ложь;
	
	КлючДанных = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторИдентификаторыОбъектов();
	
	Результат[КлючДанных] = ДокументыEDIИнтеграция.НовыйИдентификаторыОбъектов();
	
	
	// получение данных по прикладному объекту
	ПрикладнойОбъект = ПараметрыВыполнения.Документ;

	СостояниеДокумента = РегистрыСведений.СостоянияДокументовEDI.ЗаписиРеестраПоДокументам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрикладнойОбъект)).Получить(ПрикладнойОбъект);
	Если ЗначениеЗаполнено(СостояниеДокумента) И ЗначениеЗаполнено(СостояниеДокумента.ИдентификаторВСервисе) Тогда
		Результат[КлючДанных].ИдентификаторДокумента = СостояниеДокумента.ИдентификаторВСервисе;
	КонецЕсли;
	
	
	// получение идентификатора организации Бизнес сети
	ИдентификаторОрганизации = ИнтеграцияССервисомEDIСлужебный.ИдентификаторОрганизацииБизнесСети(ПараметрыВыполнения.Организация, Отказ);
	Если Не Отказ Тогда
		Результат[КлючДанных].ИдентификаторОрганизации = ИдентификаторОрганизации;
	КонецЕсли;
	
	
	// получение идентификатора контрагента Бизнес сети
	ДанныеКонтрагентаБизнесСети = ИнтеграцияССервисомEDIСлужебный.КонтрагентыБизнесСети(ПараметрыВыполнения.Контрагент, Отказ);
	Если ЗначениеЗаполнено(ДанныеКонтрагентаБизнесСети) Тогда
		Результат[КлючДанных].ИдентификаторКонтрагента = ДанныеКонтрагентаБизнесСети[0].Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеУчастников(Знач ПараметрыВыполнения, Результат)
	
	КлючДанных = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторПредставлениеУчастников();
	Результат[КлючДанных] = ДокументыEDIИнтеграция.НовыйПредставлениеУчастников();
	
	Результат[КлючДанных].ПредставлениеОрганизации =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.Организация, "Представление");
	Результат[КлючДанных].ПредставлениеКонтрагента =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.Контрагент, "Представление");
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеСинхронизации(Знач ПараметрыВыполнения, Результат)
	
	КлючДанных = РаботаСДаннымиEDIСлужебныйКлиентСервер.ИдентификаторСостояниеСинхронизации();
	Результат[КлючДанных] = СостояниеСинхронизацииДокумента(ПараметрыВыполнения.Документ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСНастройкамиИнтеграции

Функция СкладДокументаПодставляетсяИзНастроек(Знач НастройкиИнтеграции)
	
	Возврат НастройкиИнтеграции.ВариантОпределенияСкладаЗаказКлиента =
		 Перечисления.ВариантыОпределенияСкладаВДокументахEDI.ЗаполнятьКонкретнымСкладом;
	
КонецФункции

Функция СкладДокументаОпределяетсяАвтоматически(Знач НастройкиИнтеграции)
	
	Возврат НастройкиИнтеграции.ВариантОпределенияСкладаЗаказКлиента =
		 Перечисления.ВариантыОпределенияСкладаВДокументахEDI.ОпределятьАвтоматически;
	
КонецФункции


#КонецОбласти

#КонецОбласти
