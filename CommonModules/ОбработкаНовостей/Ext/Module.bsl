///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ГлобальныеПереключатели

// Включает работу с новостями.
// Если включение происходит после обновления конфигурации, то можно загрузить данные из макетов.
// Возможно использование в коробке или в неразделенном сеансе при работе в модели сервиса.
// При попытке запуска в модели сервиса в разделенном сеансе будет выдано исключение.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - см. ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения,
//                        а также дополнительные ключи:
//    * ЗагрузитьВсеСтандартныеЗначения - Булево - если ИСТИНА, то запустить загрузку стандартных значений из макетов;
//    * ДополнительныеСвойства - Структура - будет передано в менеджер значения константы без изменений.
//
Процедура РазрешитьРаботуСНовостями(КонтекстВыполнения = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные() Тогда
		ТекстСообщения = НСтр("ru='РазрешитьРаботуСНовостями: в разделенном сеансе нельзя управлять работой с новостями.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	КонтекстВыполненияЭталон = Новый Структура;
		КонтекстВыполненияЭталон.Вставить("ДополнительныеСвойства"         , Неопределено);
		КонтекстВыполненияЭталон.Вставить("ЗагрузитьВсеСтандартныеЗначения", Неопределено);
	Если (ТипЗнч(КонтекстВыполнения) = ТипСтруктура) Тогда
		ЗаполнитьЗначенияСвойств(КонтекстВыполненияЭталон, КонтекстВыполнения);
	КонецЕсли;

	// При записи константы автоматически вызовется ОбновитьПовторноИспользуемыеЗначения()
	//  а также установится использование регламентного задания.
	РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.СоздатьМенеджерЗначения();
		Если ТипЗнч(КонтекстВыполненияЭталон.ДополнительныеСвойства) = ТипСтруктура Тогда
			Для Каждого КлючЗначение Из КонтекстВыполненияЭталон.ДополнительныеСвойства Цикл
				РазрешенаРаботаСНовостями.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		РазрешенаРаботаСНовостями.Значение = Истина;
	РазрешенаРаботаСНовостями.Записать();

	Если КонтекстВыполненияЭталон.ЗагрузитьВсеСтандартныеЗначения = Истина Тогда
		// Код обновления из файлов, встроенных в конфигурацию.
		// После загрузки новостей автоматически вызовутся:
		//  ОбработкаНовостейСлужебный.ПересчитатьНеобработанныеКатегорииНовостей();
		//  ОбработкаНовостейСлужебный.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
		//  ОбработкаНовостейСлужебный.ПересчитатьОтборыПоНовостям_Общие(); // Здесь же вызовется ПересчитатьОтборыПоНовостям_Пользовательские();
		//  ОбработкаНовостейСлужебный.ПересчитатьОтборыПоНовостям_ДляОбластиДанных();
		// поэтому явно вызывать их не нужно.
		// {Раздельное обновление ИБ}
		ДополнительныеПараметрыВыполнения = Новый Структура;
			ДополнительныеПараметрыВыполнения.Вставить("ИсточникЗапуска", "РазрешитьРаботуСНовостями");
			ДополнительныеПараметрыВыполнения.Вставить("ОбрабатыватьОбластиДанных", Истина);
		КонтекстВыполнения.Вставить("ДополнительныеПараметрыВыполнения", ДополнительныеПараметрыВыполнения);
		ОбработкаНовостейСлужебный.ЗагрузитьВсеСтандартныеЗначения(КонтекстВыполнения);
	КонецЕсли;

КонецПроцедуры

// Отключает работу с новостями.
// Возможно использование в коробке или в неразделенном сеансе при работе в модели сервиса.
// Пример использования: при старте программы запретить новости (т.к. работает "мастер первоначальной настройки"),
//  а после завершения работы мастера разрешить работу с новостями.
// При попытке запуска в модели сервиса в разделенном сеансе будет выдано исключение.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - см. ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения,
//                        а также дополнительные ключи:
//    * ДополнительныеСвойства - Структура - будет передано в менеджер значения константы без изменений.
//
Процедура ЗапретитьРаботуСНовостями(КонтекстВыполнения = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные() Тогда
		ТекстСообщения = НСтр("ru='ЗапретитьРаботуСНовостями: в разделенном сеансе нельзя управлять работой с новостями.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	КонтекстВыполненияЭталон = Новый Структура;
		КонтекстВыполненияЭталон.Вставить("ДополнительныеСвойства", Неопределено);
	Если (ТипЗнч(КонтекстВыполнения) = ТипСтруктура) Тогда
		ЗаполнитьЗначенияСвойств(КонтекстВыполненияЭталон, КонтекстВыполнения);
	КонецЕсли;

	// При записи константы автоматически вызовется ОбновитьПовторноИспользуемыеЗначения()
	//  а также установится использование регламентного задания.
	РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.СоздатьМенеджерЗначения();
		Если ТипЗнч(КонтекстВыполненияЭталон.ДополнительныеСвойства) = ТипСтруктура Тогда
			Для Каждого КлючЗначение Из КонтекстВыполненияЭталон.ДополнительныеСвойства Цикл
				РазрешенаРаботаСНовостями.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		РазрешенаРаботаСНовостями.Значение = Ложь;
	РазрешенаРаботаСНовостями.Записать();

КонецПроцедуры

#КонецОбласти

#Область РаботаСоСпискамиНовостейИКлассификаторов

// Процедура устанавливает одинаковые состояния для новостей в текущей области данных.
// Это полезно, например, при первом старте программы (при создании из cf),
//  когда необходимо отключить оповещения и поставить признак прочтенности
//  у всех новостей для предыдущих версий программы.
// Так как справочник Пользователи разделенный, то в модели сервиса процедуру
//  можно запускать только в разделенном сеансе.
//
// Параметры:
//  ВыбранныеПользователи - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Пользователи, Неопределено - Массив пользователей
//                           или единственный пользователь, для которых необходимо установить состояния новостей;
//  СтруктураОтборов    - Структура - структура со значениями отборов. Возможные ключи:
//    * СписокНовостей - СписокЗначений - список новостей. Если параметр установлен,
//                       то остальные параметры отбора игнорируются;
//    * СписокЛентНовостей - СписокЗначений - список лент новостей. Если не указан, то по всем.;
//    * ИнтервалВерсийПродукта - Структура - отбор по версиям продукта. Содержит ключи:
//       * Продукт  - Строка - наименование продукта;
//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999;
//    * ИнтервалВерсийПлатформы - Структура - отбор по версиям платформы. Содержит ключи:
//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999;
//  ЗначенияСостояний   - Структура - структура значений для заполнения реквизитов
//                                    регистра сведений СостоянияНовостей. Возможны ключи:
//    * Прочтена                - Булево - Признак прочтенности. Если не указано, то не будет изменено;
//    * Пометка                 - Число  - Признак пометки флажком. Если не указано, то не будет изменено;
//    * ОповещениеВключено      - Булево - Признак снятия оповещения. Если не указано, то не будет изменено;
//    * ДатаНачалаОповещения    - Дата   - Дата начала оповещения (UTC+0). Если не указано, то не будет изменено;
//    * УдаленаИзСпискаНовостей - Булево - Признак помещения в корзину. Если не указано, то не будет изменено;
//    * ПрочитатьПозже          - Булево - Признак настройки прочтения позже. Если не указано, то не будет изменено.
//
Процедура УстановитьСостояниеНовостейДляПользователей(
			ЗНАЧ ВыбранныеПользователи = Неопределено,
			СтруктураОтборов,
			ЗначенияСостояний) Экспорт

	ТипМассив         = Тип("Массив");
	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипПользователь   = Тип("СправочникСсылка.Пользователи");
	ТипСтрока         = Тип("Строка");

	КодОсновногоЯзыка  = ОбщегоНазначения.КодОсновногоЯзыка();

	НаименованиеМетода = "ОбработкаНовостей.УстановитьСостояниеНовостейДляПользователей"; // Идентификатор.

	УстановитьПривилегированныйРежим(Истина);

	МассивПользователей = Новый Массив;
	Если (ТипЗнч(ВыбранныеПользователи) = ТипПользователь)
			И (НЕ ВыбранныеПользователи.Пустая()) Тогда
		МассивПользователей.Добавить(ВыбранныеПользователи);
	ИначеЕсли ТипЗнч(ВыбранныеПользователи) = ТипМассив Тогда // Массив.
		МассивПользователей = ВыбранныеПользователи;
	КонецЕсли;

	СтруктураОтборовЭталон = Новый Структура;
		СтруктураОтборовЭталон.Вставить("СписокНовостей"         , Неопределено);
		СтруктураОтборовЭталон.Вставить("СписокЛентНовостей"     , Неопределено);
		СтруктураОтборовЭталон.Вставить("ИнтервалВерсийПродукта" , Неопределено);
		СтруктураОтборовЭталон.Вставить("ИнтервалВерсийПлатформы", Неопределено);
	Если ТипЗнч(СтруктураОтборов) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтборовЭталон, СтруктураОтборов);
	КонецЕсли;

	М = ПланыВидовХарактеристик.КатегорииНовостей; // М = Менеджер.

	ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, начало работы.
		|МассивПользователей:
		|	%1
		|СтруктураОтборов(входящая):
		|	%2
		|СтруктураОтборов(преобразованная):
		|	%3
		|ЗначенияСостояний:
		|	%4
		|Функциональная опция Разрешена работа с новостями: %5'")
		+ Символы.ПС;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%5", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
	Если (МассивПользователей.Количество() = 0) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НСтр("ru='По всем'"));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(МассивПользователей, ", "));
	КонецЕсли;
	Если (ТипЗнч(СтруктураОтборов) = ТипСтруктура) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(СтруктураОтборов, " = ", Символы.ПС));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", НСтр("ru='Передано значения типа, отличного от Структуры'"));
	КонецЕсли;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(СтруктураОтборовЭталон, " = ", Символы.ПС));
	Если (ТипЗнч(ЗначенияСостояний) = ТипСтруктура) Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(ЗначенияСостояний, " = ", Символы.ПС));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%4", НСтр("ru='Передано значения типа, отличного от Структуры'"));
	КонецЕсли;
	ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
		НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", КодОсновногоЯзыка), // ИдентификаторШага.
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.Справочники.Новости, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнч(ЗначенияСостояний) <> ТипСтруктура)
			ИЛИ (ЗначенияСостояний.Количество() = 0) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='УстановитьСостояниеНовостейДляПользователей: параметр [ЗначенияСостояний] недопустимого типа [%1] или не заполнен. Возможные имена ключей должны совпадать с наименованиями ресурсов регистра сведений СостоянияНовостей'"),
				ТипЗнч(ЗначенияСостояний));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
		//  без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ТекстСообщения = НСтр("ru='УстановитьСостояниеНовостейДляПользователей, ошибка выполнения: при работе в модели сервиса разрешено запускать только в разделенном сеансе, в противном случае недоступен справочник Пользователи.'")
				+ ОбработкаНовостейПовтИсп.ОписаниеСостоянияСистемы()
				+ Символы.ПС;
			ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
				НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", КодОсновногоЯзыка) , // ИдентификаторШага.
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПоляДляЗаполнения = Новый Массив;
	Для Каждого ТекущееЗначениеЗаполнения Из ЗначенияСостояний Цикл
		Если ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("Прочтена") Тогда
			ПоляДляЗаполнения.Добавить("Прочтена");
		ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("Пометка") Тогда
			ПоляДляЗаполнения.Добавить("Пометка");
		ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ОповещениеВключено") Тогда
			ПоляДляЗаполнения.Добавить("ОповещениеВключено");
		ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ДатаНачалаОповещения") Тогда
			ПоляДляЗаполнения.Добавить("ДатаНачалаОповещения");
		ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("УдаленаИзСпискаНовостей") Тогда
			ПоляДляЗаполнения.Добавить("УдаленаИзСпискаНовостей");
		ИначеЕсли ВРег(ТекущееЗначениеЗаполнения.Ключ) = ВРег("ПрочитатьПозже") Тогда
			ПоляДляЗаполнения.Добавить("ПрочитатьПозже");
		КонецЕсли;
	КонецЦикла;
	СписокПолейДляЗаполнения = СтрСоединить(ПоляДляЗаполнения, ",");

	Если (МассивПользователей.Количество() = 0) Тогда
		// Если не передали список пользователей, то взять всех пользователей, без проверки, какие роли у него включены.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|// Список пользователей, для которых необходимо установить состояния новостей.
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Спр
			|ГДЕ
			|	Спр.ПометкаУдаления = ЛОЖЬ
			|	И Спр.Недействителен = ЛОЖЬ
			|";
		РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, получение списка пользователей.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			МассивПользователей = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
	КонецЕсли;

	// Если изначально не передали массив пользователей и в справочнике Пользователи нет ни одного
	//  действительного непомеченного на удаление пользователя.
	Если (ТипЗнч(МассивПользователей) <> ТипМассив) Тогда
		МассивПользователей = Новый Массив;
	КонецЕсли;

	// Удалить пользователей, у которых нет роли ЧтениеНовостей или ПолныеПрава.
	НовыйМассивПользователей = Новый Массив;
	Для Каждого ТекущийПользователь Из МассивПользователей Цикл
		Если Пользователи.РолиДоступны("ЧтениеНовостей,ПолныеПрава", ТекущийПользователь, Ложь) Тогда
			НовыйМассивПользователей.Добавить(ТекущийПользователь);
		КонецЕсли;
	КонецЦикла;
	МассивПользователей = НовыйМассивПользователей;

	// Если нет ни одного пользователя, который может работать с новостями, то выйти из обработчика.
	Если МассивПользователей.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Ошибка выполнения: нет пользователей, для которых бы следовало установить состояния новостей.
			|Состояния новостей можно установить только для пользователей с ролью ЧтениеНовостей или ПолныеПрава'");
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
			НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", КодОсновногоЯзыка) , // ИдентификаторШага.
			УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		Возврат;
	КонецЕсли;

	КоличествоОбработанныхНовостей = 0;

	Если ТипЗнч(СтруктураОтборовЭталон.СписокНовостей) = ТипСписокЗначений Тогда
		// Явно указан список новостей (не важно, какого размера).
		Для Каждого ТекущийПользователь Из МассивПользователей Цикл
			// Цикл по списку новостей.
			Для Каждого ТекущаяНовость Из СтруктураОтборовЭталон.СписокНовостей Цикл
				Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
					Запись.Пользователь = ТекущийПользователь;
					Запись.Новость      = ТекущаяНовость.Значение;
				Запись.Прочитать(); // Запись будет ниже.
					Запись.Пользователь = ТекущийПользователь;
					Запись.Новость      = ТекущаяНовость.Значение;
					ЗаполнитьЗначенияСвойств(Запись, ЗначенияСостояний, СписокПолейДляЗаполнения);
				Запись.Записать(Истина);
			КонецЦикла;
		КонецЦикла;
		КоличествоОбработанныхНовостей = СтруктураОтборовЭталон.СписокНовостей.Количество();
	Иначе
		// Возможные отборы:
		//    * СписокЛентНовостей - СписокЗначений - список лент новостей. Если не указан, то по всем;
		//    * ИнтервалВерсийПродукта - Структура - отбор по версиям продукта. Содержит ключи:
		//       * Продукт  - Строка - наименование продукта;
		//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
		//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999.
		//    * ИнтервалВерсийПлатформы - Структура - отбор по версиям платформы. Содержит ключи:
		//       * ВерсияОТ - Строка - начальная версия в формате 99.99.999.9999;
		//       * ВерсияДО - Строка - конечная версия в формате 99.99.999.9999.

		// Список редко-меняющихся категорий.
		// План видов характеристик КатегорииНовостей должен уже быть заполнен с сервера.
		КатегорияВерсияПродукта  = М.КатегорияВерсияПродукта();
		КатегорияВерсияПлатформы = М.КатегорияВерсияПлатформы();
		Если (КатегорияВерсияПродукта.Пустая())
				ИЛИ (КатегорияВерсияПлатформы.Пустая()) Тогда
			// Возможно, список категорий еще не пришел с сервера.
			Возврат;
		КонецЕсли;

		ПоВсемЛентамНовостей = Истина;
		СписокЛентНовостей = Новый СписокЗначений;
		Если ТипЗнч(СтруктураОтборовЭталон.СписокЛентНовостей) = ТипСписокЗначений Тогда
			ПоВсемЛентамНовостей = Ложь;
			СписокЛентНовостей = СтруктураОтборовЭталон.СписокЛентНовостей;
		КонецЕсли;

		ПоВсемВерсиямПродукта = Истина;
		ИмяКонфигурации = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ИмяКонфигурации"); // Только имя продукта
		ПродуктВерсияОТ = "00.00.000.0000";
		ПродуктВерсияДО = "99.99.999.9999";
		Если ТипЗнч(СтруктураОтборовЭталон.ИнтервалВерсийПродукта) = ТипСтруктура Тогда
			ПоВсемВерсиямПродукта = Ложь;
			ИнтервалВерсийПродуктаЭталон = Новый Структура;
				ИнтервалВерсийПродуктаЭталон.Вставить("ВерсияОТ", Неопределено);
				ИнтервалВерсийПродуктаЭталон.Вставить("ВерсияДО", Неопределено);
			ЗаполнитьЗначенияСвойств(ИнтервалВерсийПродуктаЭталон, СтруктураОтборовЭталон.ИнтервалВерсийПродукта);
			Если ТипЗнч(ИнтервалВерсийПродуктаЭталон.ВерсияОТ) = ТипСтрока Тогда
				ПродуктВерсияОТ = ИнтервалВерсийПродуктаЭталон.ВерсияОТ;
			КонецЕсли;
			Если ТипЗнч(ИнтервалВерсийПродуктаЭталон.ВерсияДО) = ТипСтрока Тогда
				ПродуктВерсияДО = ИнтервалВерсийПродуктаЭталон.ВерсияДО;
			КонецЕсли;
		КонецЕсли;

		ПоВсемВерсиямПлатформы = Истина;
		ПлатформаВерсияОТ = "00.00.000.0000";
		ПлатформаВерсияДО = "99.99.999.9999";
		Если ТипЗнч(СтруктураОтборовЭталон.ИнтервалВерсийПлатформы) = ТипСтруктура Тогда
			ПоВсемВерсиямПлатформы = Ложь;
			ИнтервалВерсийПлатформыЭталон = Новый Структура;
				ИнтервалВерсийПлатформыЭталон.Вставить("ВерсияОТ", Неопределено);
				ИнтервалВерсийПлатформыЭталон.Вставить("ВерсияДО", Неопределено);
			ЗаполнитьЗначенияСвойств(ИнтервалВерсийПлатформыЭталон, СтруктураОтборовЭталон.ИнтервалВерсийПлатформы);
			Если ТипЗнч(ИнтервалВерсийПлатформыЭталон.ВерсияОТ) = ТипСтрока Тогда
				ПлатформаВерсияОТ = ИнтервалВерсийПлатформыЭталон.ВерсияОТ;
			КонецЕсли;
			Если ТипЗнч(ИнтервалВерсийПлатформыЭталон.ВерсияДО) = ТипСтрока Тогда
				ПлатформаВерсияДО = ИнтервалВерсийПлатформыЭталон.ВерсияДО;
			КонецЕсли;
		КонецЕсли;

		// Если есть отбор по интервалам версий (продукта или платформы), то запрос должен учитывать данные
		//  регистра сведений КатегорииНовостейИнтервалыВерсий, причем
		// - если новость не привязана к продуктам вообще, то это значит,
		//     что она удовлетворяет любым условиям по версии продукта;
		// - если новость не привязана к платформе вообще, то это значит,
		//     что она удовлетворяет любым условиям по версии платформы.
		ОбработатьРезультатЗапроса = Ложь;
		Если (ПоВсемВерсиямПродукта = Истина) И (ПоВсемВерсиямПлатформы = Истина) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Ссылка КАК Новость
				|ИЗ
				|	Справочник.Новости КАК Спр
				|ГДЕ
				|	&МетаУсловиеПоЛентамНовостей
				|";
			Если ПоВсемЛентамНовостей = Истина Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"&МетаУсловиеПоЛентамНовостей", "ИСТИНА");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"&МетаУсловиеПоЛентамНовостей", "Спр.ЛентаНовостей В (&СписокЛентНовостей)");
				Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
			КонецЕсли;

			РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, по всем версиям продукта и платформы
			ОбработатьРезультатЗапроса = Истина;
		Иначе
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Спр.Ссылка КАК Новость
				|ИЗ
				|	Справочник.Новости КАК Спр
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииЭтогоПродукта
				|	ПО
				|		(Спр.Ссылка = РегВерсииЭтогоПродукта.Новость
				|			И РегВерсииЭтогоПродукта.Продукт = &ИмяКонфигурации
				|			И РегВерсииЭтогоПродукта.КатегорияНовостей = &КатегорияВерсияПродукта)
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииПродуктов
				|	ПО
				|		(Спр.Ссылка = РегВерсииПродуктов.Новость
				|			И РегВерсииПродуктов.КатегорияНовостей = &КатегорияВерсияПродукта)
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК РегВерсииПлатформы
				|	ПО
				|		(Спр.Ссылка = РегВерсииПлатформы.Новость
				|			И РегВерсииПлатформы.Продукт = &ПродуктПлатформа
				|			И РегВерсииПлатформы.КатегорияНовостей = &КатегорияВерсияПлатформы)
				|ГДЕ
				|	&МетаУсловиеПоЛентамНовостей
				|	И &МетаУсловиеПоВерсиямПродукта
				|	И &МетаУсловиеПоВерсиямПлатформы
				|";
			Если ПоВсемЛентамНовостей = Истина Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоЛентамНовостей", "ИСТИНА");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоЛентамНовостей", "Спр.ЛентаНовостей В (&СписокЛентНовостей)");
				Запрос.УстановитьПараметр("СписокЛентНовостей", СписокЛентНовостей);
			КонецЕсли;
			Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
			Запрос.УстановитьПараметр("КатегорияВерсияПродукта", КатегорияВерсияПродукта);
			Запрос.УстановитьПараметр("КатегорияВерсияПлатформы", КатегорияВерсияПлатформы);
			Запрос.УстановитьПараметр("ПродуктПлатформа", "Platform");
			Если ПоВсемВерсиямПродукта = Истина Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПродукта", "ИСТИНА");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПродукта", "
					|( // Версия этого продукта пересекается с условием или нет отборов по версиям продуктов вообще.
					|		РегВерсииПродуктов.Новость ЕСТЬ NULL // Нет отборов по версиям продуктов вообще.
					|		ИЛИ ( // Нижний или верхний интервал отбора новости входят в условие.
					|			НЕ РегВерсииЭтогоПродукта.Новость ЕСТЬ NULL
					|			И (
					|				РегВерсииЭтогоПродукта.ВерсияОТ МЕЖДУ &ПродуктВерсияОТ И &ПродуктВерсияДО
					|				ИЛИ РегВерсииЭтогоПродукта.ВерсияДО МЕЖДУ &ПродуктВерсияОТ И &ПродуктВерсияДО
					|			)
					|		)
					|	)");
				Запрос.УстановитьПараметр("ПродуктВерсияОТ", ПродуктВерсияОТ);
				Запрос.УстановитьПараметр("ПродуктВерсияДО", ПродуктВерсияДО);
			КонецЕсли;
			Если ПоВсемВерсиямПлатформы = Истина Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПлатформы", "ИСТИНА");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеПоВерсиямПлатформы", "
					|( // Версия платформы пересекается с условием или нет отборов по версии платформы вообще.
					|		РегВерсииПлатформы.Новость ЕСТЬ NULL
					|		ИЛИ ( // Нижний или верхний интервал отбора новости входят в условие.
					|			РегВерсииПлатформы.ВерсияОТ МЕЖДУ &ПлатформаВерсияОТ И &ПлатформаВерсияДО
					|			ИЛИ РегВерсииПлатформы.ВерсияДО МЕЖДУ &ПлатформаВерсияОТ И &ПлатформаВерсияДО
					|		)
					|	)");
				Запрос.УстановитьПараметр("ПлатформаВерсияОТ", ПлатформаВерсияОТ);
				Запрос.УстановитьПараметр("ПлатформаВерсияДО", ПлатформаВерсияДО);
			КонецЕсли;

			РезультатЗапроса = Запрос.Выполнить(); // УстановитьСостояниеНовостейДляПользователей, по заданным версиям продукта и платформы.
			ОбработатьРезультатЗапроса = Истина;
		КонецЕсли;

		Если ОбработатьРезультатЗапроса = Истина Тогда
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				// Цикл по списку новостей.
				Пока Выборка.Следующий() Цикл
					// Цикл по каждому пользователю.
					Для Каждого ТекущийПользователь Из МассивПользователей Цикл
						Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
							Запись.Пользователь = ТекущийПользователь;
							Запись.Новость      = Выборка.Новость;
						Запись.Прочитать(); // Запись будет ниже.
							Запись.Пользователь = ТекущийПользователь;
							Запись.Новость      = Выборка.Новость;
							ЗаполнитьЗначенияСвойств(Запись, ЗначенияСостояний, СписокПолейДляЗаполнения);
						Запись.Записать(Истина);
					КонецЦикла;
					КоличествоОбработанныхНовостей = КоличествоОбработанныхНовостей + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='УстановитьСостояниеНовостейДляПользователей, завершение.
			|Обработано пользователей: %1
			|Обработано новостей: %2'")
			+ Символы.ПС,
		МассивПользователей.Количество(),
		Формат(КоличествоОбработанныхНовостей, "ЧЦ=15; ЧДЦ=; ЧРГ=' '; ЧГ=3,0"));
	ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'", КодОсновногоЯзыка), // ИмяСобытия.
		НСтр("ru='Новости. Сервис и регламент. УстановитьСостояниеНовостейДляПользователей'", КодОсновногоЯзыка) , // ИдентификаторШага.
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.Справочники.Новости, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#Область РаботаСПомеченнымиНовостями

// Процедура помечает для текущего пользователя несколько новостей пометкой (число 0..9, где 0 = нет пометки).
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  Пометка        - Число - число в интервале 0..9, где 0 - неотмеченная новость.
//
Процедура ИзменитьПометкуНовостей(Знач МассивНовостей, Знач Пометка = 1) Экспорт

	ТипЗнчМассивНовостей = ТипЗнч(МассивНовостей);
	ТипЗнчПометка        = ТипЗнч(Пометка);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнчМассивНовостей <> Тип("СправочникСсылка.Новости") // Единственная новость
			И ТипЗнчМассивНовостей <> Тип("Массив") Тогда // Массив новостей
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПометкуНовостей: параметр [МассивНовостей] (%1) недопустимого типа [%2].'"),
				МассивНовостей,
				ТипЗнчМассивНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчПометка <> Тип("Число"))
			ИЛИ (Пометка < 0 ИЛИ Пометка > 9) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПометкуНовостей: параметр [Пометка] (%1) недопустимого типа [%2] или выходит за границы [0..9].'"),
				Пометка,
				ТипЗнчПометка);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТипЗнчМассивНовостей = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПометкуНовостей(ПравильныйМассивНовостей, Пометка);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Пометка      = Пометка;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Прочтена;
			// Запись.УдаленаИзСпискаНовостей;
			// Запись.ПрочитатьПозже.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочтенности

// Процедура изменяет для текущего пользователя признак прочтенности у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей      - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  ПризнакПрочтенности - Булево - Истина, если новость надо пометить как прочтенную, Ложь - как непрочтенную.
//
Процедура ИзменитьПризнакПрочтенностиНовостей(Знач МассивНовостей, Знач ПризнакПрочтенности = Истина) Экспорт

	ТипЗнчМассивНовостей      = ТипЗнч(МассивНовостей);
	ТипЗнчПризнакПрочтенности = ТипЗнч(ПризнакПрочтенности);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнчМассивНовостей <> Тип("СправочникСсылка.Новости") // Единственная новость
			И ТипЗнчМассивНовостей <> Тип("Массив") Тогда // Массив новостей
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакПрочтенностиНовостей: параметр [МассивНовостей] (%1) недопустимого типа [%2].'"),
				МассивНовостей,
				ТипЗнчМассивНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчПризнакПрочтенности <> Тип("Булево")) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакПрочтенностиНовостей: параметр [ПризнакПрочтенности] (%1) недопустимого типа [%2].'"),
				ПризнакПрочтенности,
				ТипЗнчПризнакПрочтенности);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТипЗнчМассивНовостей = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакПрочтенностиНовостей(ПравильныйМассивНовостей, ПризнакПрочтенности);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.Прочтена     = ПризнакПрочтенности;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.УдаленаИзСпискаНовостей;
			// Запись.ПрочитатьПозже.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомУдаленияИзСписка

// Процедура изменяет для текущего пользователя признак удаления из списка у новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей          - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  ПризнакУдаленияИзСписка - Булево - Истина - удалить из списка новостей (в корзину), Ложь - восстановить из корзины.
//
Процедура ИзменитьПризнакУдаленияИзСпискаНовостей(Знач МассивНовостей, Знач ПризнакУдаленияИзСписка = Истина) Экспорт

	ТипЗнчМассивНовостей          = ТипЗнч(МассивНовостей);
	ТипЗнчПризнакУдаленияИзСписка = ТипЗнч(ПризнакУдаленияИзСписка);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнчМассивНовостей <> Тип("СправочникСсылка.Новости") // Единственная новость
			И ТипЗнчМассивНовостей <> Тип("Массив") Тогда // Массив новостей
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакУдаленияИзСпискаНовостей: параметр [МассивНовостей] (%1) недопустимого типа [%2].'"),
				МассивНовостей,
				ТипЗнчМассивНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчПризнакУдаленияИзСписка <> Тип("Булево")) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакУдаленияИзСпискаНовостей: параметр [ПризнакУдаленияИзСписка] (%1) недопустимого типа [%2].'"),
				ПризнакУдаленияИзСписка,
				ТипЗнчПризнакУдаленияИзСписка);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТипЗнчМассивНовостей = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакУдаленияИзСпискаНовостей(ПравильныйМассивНовостей, ПризнакУдаленияИзСписка);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь = Пользователи.ТекущийПользователь();
			Запись.Новость      = ТекущаяНовость;
			Запись.УдаленаИзСпискаНовостей = ПризнакУдаленияИзСписка;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.Прочтена;
			// Запись.ПрочитатьПозже.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочитатьПозже

// Процедура изменяет для текущего пользователя признак "ПрочитатьПозже".
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей - Массив;
//  ПрочитатьПозже - Булево.
//
Процедура ИзменитьПризнакПрочитатьПозже(Знач МассивНовостей, Знач ПрочитатьПозже = Истина) Экспорт

	ТипЗнчМассивНовостей = ТипЗнч(МассивНовостей);
	ТипЗнчПрочитатьПозже = ТипЗнч(ПрочитатьПозже);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнчМассивНовостей <> Тип("СправочникСсылка.Новости") // Единственная новость
			И ТипЗнчМассивНовостей <> Тип("Массив") Тогда // Массив новостей
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакПрочитатьПозже: параметр [МассивНовостей] (%1) недопустимого типа [%2].'"),
				МассивНовостей,
				ТипЗнчМассивНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчПрочитатьПозже <> Тип("Булево")) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакПрочитатьПозже: параметр [ПрочитатьПозже] (%1) недопустимого типа [%2].'"),
				ПрочитатьПозже,
				ТипЗнчПрочитатьПозже);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТипЗнчМассивНовостей = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакПрочитатьПозже(ПравильныйМассивНовостей, ПрочитатьПозже);
	Иначе
		СостоянияОповещений = ПолучитьСостояниеОповещения(МассивНовостей);
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// ОповещениеВключено - особое свойство. Если записи в регистре сведений не было,
			//  то определить его в зависимости от состояния общей важности и важности в привязке к метаданным.
			Если НЕ Запись.Выбран() Тогда
				Результат = СостоянияОповещений.Получить(ТекущаяНовость);
				Если Результат <> Неопределено Тогда
					Запись.ОповещениеВключено = Результат;
					Если Результат = Истина Тогда
						Запись.ДатаНачалаОповещения = '00010101';
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь   = Пользователи.ТекущийПользователь();
			Запись.Новость        = ТекущаяНовость;
			Запись.ПрочитатьПозже = ПрочитатьПозже;
			// Не изменять эти данные:
			// Запись.ДатаНачалаОповещения;
			// Запись.ОповещениеВключено;
			// Запись.Пометка;
			// Запись.Прочтена;
			// Запись.УдаленаИзСпискаНовостей.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСНапоминаниями

// Процедура изменяет для текущего пользователя признак прекращения оповещения у новостей.
// Имеет смысл только для важных и очень важных новостей.
// При вызове из неразделенного сеанса в модели сервиса будет ошибка.
//
// Параметры:
//  МассивНовостей       - Массив из СправочникСсылка.Новости - массив ссылок на новости;
//  ОповещениеВключено   - Булево - Истина, если новость будет всплывать, ложь - не будет;
//  ДатаНачалаОповещения - Дата - дата (UTC+0), начиная с которой необходимо включить всплывание.
//
Процедура ИзменитьПризнакОповещенияНовостей(Знач МассивНовостей, Знач ОповещениеВключено = Ложь, Знач ДатаНачалаОповещения = '00010101') Экспорт

	ТипЗнчМассивНовостей       = ТипЗнч(МассивНовостей);
	ТипЗнчОповещениеВключено   = ТипЗнч(ОповещениеВключено);
	ТипЗнчДатаНачалаОповещения = ТипЗнч(ДатаНачалаОповещения);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнчМассивНовостей <> Тип("СправочникСсылка.Новости") // Единственная новость
			И ТипЗнчМассивНовостей <> Тип("Массив") Тогда // Массив новостей
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакОповещенияНовостей: параметр [МассивНовостей] (%1) недопустимого типа [%2].'"),
				МассивНовостей,
				ТипЗнчМассивНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчОповещениеВключено <> Тип("Булево")) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакОповещенияНовостей: параметр [ОповещениеВключено] (%1) недопустимого типа [%2].'"),
				ОповещениеВключено,
				ТипЗнчОповещениеВключено);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчДатаНачалаОповещения <> Тип("Дата")) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПризнакОповещенияНовостей: параметр [ДатаНачалаОповещения] (%1) недопустимого типа [%2].'"),
				ДатаНачалаОповещения,
				ТипЗнчДатаНачалаОповещения);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТипЗнчМассивНовостей = Тип("СправочникСсылка.Новости") Тогда
		ПравильныйМассивНовостей = Новый Массив;
			ПравильныйМассивНовостей.Добавить(МассивНовостей);
		ИзменитьПризнакОповещенияНовостей(ПравильныйМассивНовостей, ОповещениеВключено, ДатаНачалаОповещения);
	Иначе
		Для каждого ТекущаяНовость Из МассивНовостей Цикл
			Запись = РегистрыСведений.СостоянияНовостей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = Пользователи.ТекущийПользователь();
				Запись.Новость      = ТекущаяНовость;
			Запись.Прочитать(); // Запись будет ниже. // На тот случай, если были установлены другие свойства.
			// Вдруг новость не выбрана (т.е. ее нет в базе) - перезаполнить менеджер записи и записать.
			Запись.Пользователь         = Пользователи.ТекущийПользователь();
			Запись.Новость              = ТекущаяНовость;
			Запись.ОповещениеВключено   = ОповещениеВключено;
			Запись.ДатаНачалаОповещения = ДатаНачалаОповещения;
			// Не изменять эти данные:
			// Запись.Прочтена;
			// Запись.Пометка;
			// Запись.УдаленаИзСпискаНовостей;
			// Запись.ПрочитатьПозже.
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает реальное состояние оповещения для новости на текущую дату.
// Возможна ситуация, когда записи в регистре сведений "СостоянияНовостей" нет, тогда программа рассчитывает их,
//   исходя из состояния Важности новости и Важности в привязке к метаданным (если важность > 0, то оповещение включено).
//
// Параметры:
//  МассивНовостей - Массив из СправочникСсылка.Новости - массив новостей, которые необходимо обработать.
//
// Возвращаемое значение:
//   Соответствие - соответствие, где:
//     * ключ     - СправочникСсылка.Новости;
//     * значение - Булево - должно ли быть включено оповещение на данный момент или нет.
//
Функция ПолучитьСостояниеОповещения(МассивНовостей) Экспорт

	Результат = Новый Соответствие;

	ТипЗнчМассивНовостей = ТипЗнч(МассивНовостей);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнчМассивНовостей <> Тип("Массив") Тогда // Массив новостей
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьСостояниеОповещения: параметр [МассивНовостей] (%1) недопустимого типа [%2].'"),
				МассивНовостей,
				ТипЗнчМассивНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|// Важность общая для всей новости.
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость,
		|	// ВажностьОбщая.
		|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной).
		|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
		|				ИЛИ ((Спр.ДатаЗавершения <> &ПустаяДата) И (Спр.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
		|			ТОГДА 0
		|		ИНАЧЕ Спр.Важность
		|	КОНЕЦ КАК Важность
		|ПОМЕСТИТЬ ВТ_ВсеВажности
		|ИЗ
		|	Справочник.Новости КАК Спр
		|ГДЕ
		|	Спр.Ссылка В (&МассивНовостей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Важность в привязке к метаданным.
		|ВЫБРАТЬ
		|	Спр.Ссылка КАК Новость,
		|	// ВажностьМетаданных.
		|	ВЫБОР // Важность также может быть сброшена актуальностью новости (когда новость становится неактуальной, то она становится и неважной).
		|		КОГДА ((Спр.ДатаСбросаВажности <> &ПустаяДата) И (Спр.ДатаСбросаВажности <= &ТекущаяДатаДляРасчетов))
		|				ИЛИ ((Спр.Ссылка.ДатаЗавершения <> &ПустаяДата) И (Спр.Ссылка.ДатаЗавершения < &ТекущаяДатаДляРасчетов))
		|			ТОГДА 0
		|		ИНАЧЕ Спр.Важность
		|	КОНЕЦ КАК Важность
		|ИЗ
		|	Справочник.Новости.ПривязкаКМетаданным КАК Спр
		|ГДЕ
		|	Спр.Ссылка В (&МассивНовостей)
		|;
		|
		|// Рассчитанная общая важность по новости (по максимуму).
		|ВЫБРАТЬ
		|	ВТ_ВсеВажности.Новость            КАК Новость,
		|	МАКСИМУМ(ВТ_ВсеВажности.Важность) КАК Важность
		|ИЗ
		|	ВТ_ВсеВажности
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеВажности.Новость
		|";
	Запрос.УстановитьПараметр("МассивНовостей"        , МассивНовостей);
	Запрос.УстановитьПараметр("ТекущаяДатаДляРасчетов", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ПустаяДата"            , '00010101');

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьСостояниеОповещения.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Новость, ?(Выборка.Важность > 0, Истина, Ложь));
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// На основании значении регистра сведений ДатыЗагрузкиПоследнихНовостей до и после загрузки определяет,
//  какие новости были загружены.
//
// Параметры:
//  ТаблицаДатЗагрузокНовостейПередПолучением - ТаблицаЗначений - состав колонок соответствует
//    регистру сведений ДатыЗагрузкиПоследнихНовостей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * НовостьДатаПубликации          - Дата - дата публикации;
//    * НовостьДатаЗавершения          - Дата - дата завершения;
//    * НовостьПометкаУдаления         - Булево - пометка удаления;
//    * НовостьЛентаНовостей           - СправочникСсылка.ЛентыНовостей - лента новостей;
//    * НовостьКодЛентыНовостей        - Строка - код ленты новостей.
//
Функция ПолучитьЗагруженныеНовости(ТаблицаДатЗагрузокНовостейПередПолучением) Экспорт

	Результат = Новый ТаблицаЗначений;
	К = Результат.Колонки;
		К.Добавить("Новость"                       , Новый ОписаниеТипов("СправочникСсылка.Новости"));
		К.Добавить("НовостьУникальныйИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
		К.Добавить("НовостьНаименование"           , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		К.Добавить("НовостьПодзаголовок"           , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		К.Добавить("НовостьДатаПубликации"         , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		К.Добавить("НовостьДатаЗавершения"         , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		К.Добавить("НовостьПометкаУдаления"        , Новый ОписаниеТипов("Булево"));
		К.Добавить("НовостьЛентаНовостей"          , Новый ОписаниеТипов("СправочникСсылка.ЛентыНовостей"));
		К.Добавить("НовостьКодЛентыНовостей"       , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));

	// Определение текущего состояния загрузки новостей.
	ТаблицаДатЗагрузокНовостейПослеПолучения = ОбработкаНовостейСлужебный.ПолучитьДатыЗагрузкиНовостей();

	ОбновленныеЛентыНовостей = Новый Соответствие;
	Для Каждого ТекущаяСтрокаПосле Из ТаблицаДатЗагрузокНовостейПослеПолучения Цикл
		// Если была добавлена новая лента новостей (есть в ПОСЛЕ, отсутствует в ПЕРЕД), то по ней все новости попадут в результат.
		// Если была удалена лента новостей (отсутствует в ПОСЛЕ, есть в ПЕРЕД), то по ней никакие новости не попадут в результат.
		Для Каждого ТекущаяСтрокаПеред Из ТаблицаДатЗагрузокНовостейПередПолучением Цикл
			Если ТекущаяСтрокаПосле.ЛентаНовостей = ТекущаяСтрокаПеред.ЛентаНовостей Тогда
				Если ТекущаяСтрокаПеред.ДатаЗагрузкиПоследнихНовостей < ТекущаяСтрокаПосле.ДатаЗагрузкиПоследнихНовостей Тогда
					ЗначенияОтбора = Новый Структура;
						ЗначенияОтбора.Вставить("ДатаОТ", ТекущаяСтрокаПеред.ДатаЗагрузкиПоследнихНовостей + 1); // + 1 секунда, чтобы в запросе сработало условие МЕЖДУ.
						ЗначенияОтбора.Вставить("ДатаДО", ТекущаяСтрокаПосле.ДатаЗагрузкиПоследнихНовостей);
					ОбновленныеЛентыНовостей.Вставить(ТекущаяСтрокаПосле.ЛентаНовостей, ЗначенияОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ОбновленныеЛентыНовостей.Количество() > 0 Тогда
		ШаблонЗапроса = "
			|ВЫБРАТЬ
			|	Новости.Ссылка            КАК Новость,
			|	Новости.УИННовости        КАК НовостьУникальныйИдентификатор,
			|	Новости.Наименование      КАК НовостьНаименование,
			|	Новости.Подзаголовок      КАК НовостьПодзаголовок,
			|	Новости.ДатаПубликации    КАК НовостьДатаПубликации,
			|	Новости.ДатаЗавершения    КАК НовостьДатаЗавершения,
			|	Новости.ПометкаУдаления   КАК НовостьПометкаУдаления,
			|	Новости.ЛентаНовостей     КАК НовостьЛентаНовостей,
			|	Новости.ЛентаНовостей.Код КАК НовостьКодЛентыНовостей
			|ИЗ
			|	Справочник.Новости КАК Новости
			|ГДЕ
			|	Новости.ЛентаНовостей = &ЛентаНовостей_000
			|	И Новости.ДатаПубликации МЕЖДУ &ДатаОТ_000 И &ДатаДО_000
			|";
		ТекстЗапроса = "";
		Запрос = Новый Запрос;
		С = 1; // АПК:247 это счетчик.
		Для Каждого ТекущаяЛентаНовостей Из ОбновленныеЛентыНовостей Цикл
			ПорядковыйНомер = "_" + Формат(С, "ЧЦ=3; ЧВН=");
			ТекстЗапроса = ТекстЗапроса + "#" + ШаблонЗапроса + "#";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_000", ПорядковыйНомер);
			Запрос.УстановитьПараметр("ЛентаНовостей" + ПорядковыйНомер, ТекущаяЛентаНовостей.Ключ);
			Запрос.УстановитьПараметр("ДатаОТ" + ПорядковыйНомер, ТекущаяЛентаНовостей.Значение.ДатаОТ);
			Запрос.УстановитьПараметр("ДатаДО" + ПорядковыйНомер, ТекущаяЛентаНовостей.Значение.ДатаДО);
			С = С + 1; // АПК:247 это счетчик.
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "##", Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#", "");

		Запрос.Текст = ТекстЗапроса;

		РезультатЗапроса = Запрос.Выполнить(); // ПолучитьЗагруженныеНовости.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСКатегориямиНовостей

// Функция возвращает результат конкатенации КатегорияНовостей и ЗначениеКатегорииНовостей.
// Нужно только для формирования XML-представления новости.
//
// Параметры:
//  КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - категория новостей;
//  ЗначениеКатегорииНовостей - Произвольный - значение категории новостей.
//
// Возвращаемое значение:
//  Строка - строковое описание связки категории и значения.
//
Функция ПолучитьПредставлениеКатегорииИЗначения(КатегорияНовостей, ЗначениеКатегорииНовостей) Экспорт

	Результат = "";

	ТипБулево = Тип("Булево");
	ТипСтрока = Тип("Строка");
	ТипДата   = Тип("Дата");
	ТипЧисло  = Тип("Число");

	// Валидация входящих параметров: журнал регистрации
	ТипЗнчКатегорияНовостей = ТипЗнч(КатегорияНовостей);
	Если (ТипЗнчКатегорияНовостей <> Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей"))
			ИЛИ (КатегорияНовостей.Пустая()) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПредставлениеКатегорииИЗначения: параметр [КатегорияНовостей] недопустимого типа [%1] или не заполнен.'"),
				ТипЗнчКатегорияНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	// Категория.ТипЗначения - Строка     - СокрЛП(%).
	// Категория.ТипЗначения - Число      - Формат(%, "ЧЦ=32; ЧДЦ=4; ЧРД=,; ЧН=0; ЧГ=0; ЧО=1").
	// Категория.ТипЗначения - Дата       - Формат(%, "ДФ=yyyyMMddHHmmss").
	// Категория.ТипЗначения - Булево     - Формат(%, "БЛ=Ложь; БИ=Истина").
	// Категория.ТипЗначения - Справочник - СокрЛП(%.Наименование).
	ТипЗначения = КатегорияНовостей.ТипЗначения.Типы()[0];
	// Если Неопределено, то привести к значению по-умолчанию.
	ПриведенноеЗначениеКатегорииНовостей = КатегорияНовостей.ТипЗначения.ПривестиЗначение(ЗначениеКатегорииНовостей);
	Если ТипЗначения = ТипСтрока Тогда
		ПредставлениеЗначения = СокрЛП(ПриведенноеЗначениеКатегорииНовостей);
	ИначеЕсли ТипЗначения = ТипДата Тогда
		ПредставлениеЗначения = Формат(ПриведенноеЗначениеКатегорииНовостей, "ДФ=yyyyMMddHHmmss");
	ИначеЕсли ТипЗначения = ТипЧисло Тогда
		ПредставлениеЗначения = Формат(ПриведенноеЗначениеКатегорииНовостей, "ЧЦ=32; ЧДЦ=4; ЧРД=,; ЧН=0; ЧГ=0; ЧО=1");
	ИначеЕсли ТипЗначения = ТипБулево Тогда
		ПредставлениеЗначения = Формат(ПриведенноеЗначениеКатегорииНовостей, "БЛ=Ложь; БИ=Истина");
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
		ПредставлениеЗначения = СокрЛП(ПриведенноеЗначениеКатегорииНовостей.Наименование);
	КонецЕсли;
	Результат = СокрЛП(КатегорияНовостей.Наименование) + "=" + ПредставлениеЗначения;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСЛентамиНовостей

// Изменяет настройку видимости лент новостей для пользователя.
// Работает только в коробке или в разделенном режиме модели сервиса.
//
// Параметры:
//  ЛентыНовостей - СправочникСсылка.ЛентаНовостей, Массив из СправочникСсылка.ЛентаНовостей - Ленты новостей,
//                    для которых необходимо изменить настройку видимости;
//  Видимость     - Булево - истина = лента видима, ложь = лента скрыта;
//  Пользователь  - СправочникСсылка.Пользователи - пользователь,
//                    для которого необходимо изменить признак видимости ленты новостей;
//
Процедура ИзменитьПользовательскуюВидимостьЛентНовостей(ЛентыНовостей, Видимость = Ложь, Пользователь = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныРазделенныеДанные() Тогда
		ТекстСообщения = НСтр("ru='ИзменитьПользовательскуюВидимостьЛентНовостей: установка видимости лент новостей недоступна в неразделенном сеансе модели сервиса.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ТипМассив        = Тип("Массив");
	ТипБулево        = Тип("Булево");
	ТипЛентыНовостей = Тип("СправочникСсылка.ЛентыНовостей");
	ТипПользователь  = Тип("СправочникСсылка.Пользователи");

	// Валидация входящих параметров: журнал регистрации
	Если Пользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Иначе
		ТекущийПользователь = Пользователь;
	КонецЕсли;
	Если ТипЗнч(ТекущийПользователь) <> ТипПользователь Тогда // Внешний пользователь, например.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскуюВидимостьЛентНовостей: Передан параметр [Пользователь] (%1) неправильного типа: [%2].'"),
				Пользователь,
				ТипЗнч(Пользователь));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	МассивЛентНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = ТипЛентыНовостей Тогда
		МассивЛентНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		// Оставить только ссылки на ленты новостей, удалить остальные типы данных.
		МассивЛентНовостей = ХранилищаНастроек.НастройкиНовостей.ПровестиВалидациюНастроек(ЛентыНовостей, "ОтключенныеЛентыНовостей", "");
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскуюВидимостьЛентНовостей: Передан параметр [ЛентыНовостей] (%1) неправильного типа: [%2].'"),
				ЛентыНовостей,
				ТипЗнч(ЛентыНовостей));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнч(Видимость) <> ТипБулево Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскуюВидимостьЛентНовостей: Передан параметр [Видимость] (%1) неправильного типа: [%2].'"),
				Видимость,
				ТипЗнч(Видимость));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	БылиИзменения = Ложь;
	Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
		Запись = РегистрыСведений.ОтключенныеЛентыНовостей.СоздатьМенеджерЗаписи();
		Запись.Пользователь  = ТекущийПользователь;
		Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
		Если Видимость = Ложь Тогда
			Запись.Записать(Истина);
			БылиИзменения = Истина;
		Иначе
			Запись.Удалить();
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;

	Если БылиИзменения = Истина Тогда
		// После изменения настройки видимости лент новостей (административные, для области данных,
		//  пользовательские и т.п.), необходимо очистить кэш,
		//  чтобы ОбработкаНовостейПовтИсп.ПолучитьОтключенныеЛентыНовостей выдавала правильный результат.
		// Здесь может измениться: пользовательская видимость ленты новостей.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

КонецПроцедуры

// Изменяет настройку видимости лент новостей для текущей области данных.
// Должно запускаться или в коробке, или в разделенном сеансе.
//
// Параметры:
//  ЛентыНовостей        - СправочникСсылка.ЛентаНовостей, Массив из СправочникСсылка.ЛентыНовостей - Ленты новостей,
//                           для которых необходимо изменить настройку видимости;
//  Видимость            - Булево - истина = лента видима, ложь = лента скрыта;
//  ПричинаОтключения    - Строка - произвольный текст, описывающий причину отключения
//                           ленты новостей для области данных.
//                           Если Видимость = Истина, то этот параметр будет проигнорирован.
//  МассивОбластейДанных - Массив из Число, Неопределено - при запуске в неразделенном сеансе в модели сервиса можно передать
//                           список номеров областей, для которых необходимо изменить видимость ленты новостей.
//                           В остальных режимах работы (в коробке, в разделенном сеансе)
//                            этот параметр будет проигнорирован.
//
Процедура ИзменитьВидимостьЛентНовостейДляОбластиДанных(
			ЛентыНовостей,
			Видимость = Ложь,
			ПричинаОтключения = "",
			МассивОбластейДанных = Неопределено) Экспорт

	ТипМассив        = Тип("Массив");
	ТипБулево        = Тип("Булево");
	ТипЛентыНовостей = Тип("СправочникСсылка.ЛентыНовостей");

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	ПоНесколькимОбластямДанных = Ложь;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
		//  без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Если (ТипЗнч(МассивОбластейДанных) = ТипМассив)
					И (МассивОбластейДанных.Количество() > 0) Тогда
				ПоНесколькимОбластямДанных = Истина;
			Иначе
				Если Видимость = Ложь Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='ИзменитьВидимостьЛентНовостейДляОбластиДанных: передан параметр [МассивОбластейДанных] нулевого размера или неправильного типа: [%1].'"),
						ТипЗнч(МассивОбластейДанных));
					ВызватьИсключение ТекстСообщения;
				Иначе
					// Для Видимость = Истина значения из регистра сведений удаляются,
					//  поэтому список областей данных необязателен.
				КонецЕсли;
			КонецЕсли;
		Иначе
			// В разделенном сеансе нельзя передавать список областей данных.
			Если (ТипЗнч(МассивОбластейДанных) = ТипМассив)
					И (МассивОбластейДанных.Количество() > 0) Тогда
				ТекстСообщения = НСтр("ru='ИзменитьВидимостьЛентНовостейДляОбластиДанных: для разделенного сеанса нельзя передавать параметр [МассивОбластейДанных].'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	МассивЛентНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = ТипЛентыНовостей Тогда
		МассивЛентНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		// Оставить только ссылки на ленты новостей, удалить остальные типы данных.
		МассивЛентНовостей = ХранилищаНастроек.НастройкиНовостей.ПровестиВалидациюНастроек(ЛентыНовостей, "ОтключенныеЛентыНовостей", "");
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьВидимостьЛентНовостейДляОбластиДанных: Передан параметр [ЛентыНовостей] (%1) неправильного типа: [%2].'"),
				ЛентыНовостей,
				ТипЗнч(ЛентыНовостей));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнч(Видимость) <> ТипБулево Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьВидимостьЛентНовостейДляОбластиДанных: Передан параметр [Видимость] (%1) неправильного типа: [%2].'"),
				Видимость,
				ТипЗнч(Видимость));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	БылиИзменения = Ложь;
	Если ПоНесколькимОбластямДанных = Истина Тогда
		Для Каждого ТекущаяОбластьДанных Из МассивОбластейДанных Цикл
			Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
				Запись = РегистрыСведений.ОтключенныеЛентыНовостейДляОбластиДанных.СоздатьМенеджерЗаписи();
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяОбластьДанных;
				Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
				Если Видимость = Ложь Тогда
					Запись.ПричинаОтключения = ПричинаОтключения;
					Запись.Записать(Истина);
					БылиИзменения = Истина;
				Иначе
					Запись.Удалить();
					БылиИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекущаяЛентаНовостей Из МассивЛентНовостей Цикл
			Запись = РегистрыСведений.ОтключенныеЛентыНовостейДляОбластиДанных.СоздатьМенеджерЗаписи();
			Запись.ЛентаНовостей = ТекущаяЛентаНовостей;
			Если Видимость = Ложь Тогда
				Запись.ПричинаОтключения = ПричинаОтключения;
				Запись.Записать(Истина);
				БылиИзменения = Истина;
			Иначе
				Запись.Удалить();
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если БылиИзменения = Истина Тогда
		// После изменения настройки видимости лент новостей (административные, для области данных,
		//  пользовательские и т.п.), необходимо очистить кэш,
		//  чтобы методы ОбработкаНовостейПовтИсп.* выдавали правильные результаты.
		// Здесь может измениться: пользовательская видимость ленты новостей.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

КонецПроцедуры

// Устанавливает настройки оповещения для ленты новостей и для пользователя.
// Работает только в коробке или в разделенном режиме модели сервиса.
//
// Параметры:
//  ЛентыНовостей       - СправочникСсылка.ЛентаНовостей, Массив из СправочникСсылка.ЛентаНовостей - Ленты новостей,
//                          для которых необходимо изменить настройку видимости;
//  НастройкиОповещения - Структура - см. ПолучитьНастройкиОповещенияЛентыНовостей;
//  Пользователь        - СправочникСсылка.Пользователи, Неопределено - Пользователь, для которого необходимо получить способ оповещения;
//                          Если Неопределено, то текущий пользователь.
//
Процедура ИзменитьПользовательскиеСпособыОповещенияЛентНовостей(ЛентыНовостей, НастройкиОповещения, Пользователь = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныРазделенныеДанные() Тогда
		ТекстСообщения = НСтр("ru='ИзменитьПользовательскиеСпособыОповещенияЛентНовостей: установка параметров оповещения недоступна в неразделенном сеансе модели сервиса.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ТипСтрока           = Тип("Строка");
	ТипСтруктура        = Тип("Структура");
	ТипМассив           = Тип("Массив");
	ТипЛентыНовостей    = Тип("СправочникСсылка.ЛентыНовостей");
	ТипПользователь     = Тип("СправочникСсылка.Пользователи");
	ТипСпособОповещения = Тип("ПеречислениеСсылка.СпособыОповещенияПользователяОНовостях");

	// Валидация входящих параметров: журнал регистрации
	Если Пользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Иначе
		ТекущийПользователь = Пользователь;
	КонецЕсли;
	Если ТипЗнч(ТекущийПользователь) <> ТипПользователь Тогда // Внешний пользователь, например.
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскиеСпособыОповещенияЛентНовостей: Передан параметр [Пользователь] (%1) неправильного типа: [%2].'"),
				Пользователь,
				ТипЗнч(Пользователь));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	МассивЛентНовостей = Новый Массив;
	Если ТипЗнч(ЛентыНовостей) = ТипЛентыНовостей Тогда
		МассивЛентНовостей.Добавить(ЛентыНовостей);
	ИначеЕсли ТипЗнч(ЛентыНовостей) = ТипМассив Тогда
		// Оставить только ссылки на ленты новостей, удалить остальные типы данных.
		МассивЛентНовостей = ХранилищаНастроек.НастройкиНовостей.ПровестиВалидациюНастроек(ЛентыНовостей, "ОтключенныеЛентыНовостей", "");
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскиеСпособыОповещенияЛентНовостей: Передан параметр [ЛентыНовостей] (%1) неправильного типа: [%2].'"),
				ЛентыНовостей,
				ТипЗнч(ЛентыНовостей));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнч(НастройкиОповещения) <> ТипСтруктура)
			ИЛИ (НастройкиОповещения.Количество() = 0) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскиеСпособыОповещенияЛентНовостей: параметр [НастройкиОповещения] недопустимого типа [%1] или не заполнен.'"),
				ТипЗнч(НастройкиОповещения));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	НастройкиОповещенияЭталон = Новый Структура; // См. ОбработкаНовостейПовтИсп.ПолучитьНастройкиОповещенияЛентыНовостей;
		НастройкиОповещенияЭталон.Вставить("КодЛентыНовостей", "");
		НастройкиОповещенияЭталон.Вставить("ЛентаНовостей"   , Справочники.ЛентыНовостей.ПустаяСсылка());
		НастройкиОповещенияЭталон.Вставить("СпособОповещения", Перечисления.СпособыОповещенияПользователяОНовостях.ПустаяСсылка());
	ЗаполнитьЗначенияСвойств(НастройкиОповещенияЭталон, НастройкиОповещения);

	// Валидация входящих параметров: журнал регистрации
	Если ТипЗнч(НастройкиОповещенияЭталон.СпособОповещения) = ТипСтрока Тогда
		// {При добавлении способов оповещения исправлять здесь}.
		Если НастройкиОповещенияЭталон.СпособОповещения = "Отключено" Тогда
			НастройкиОповещенияЭталон.СпособОповещения = Перечисления.СпособыОповещенияПользователяОНовостях.Отключено;
		ИначеЕсли НастройкиОповещенияЭталон.СпособОповещения = "СистемаВзаимодействия" Тогда
			НастройкиОповещенияЭталон.СпособОповещения = Перечисления.СпособыОповещенияПользователяОНовостях.СистемаВзаимодействия;
		Иначе
			НастройкиОповещенияЭталон.СпособОповещения = Перечисления.СпособыОповещенияПользователяОНовостях.ПоУмолчанию;
		КонецЕсли;
	ИначеЕсли (ТипЗнч(НастройкиОповещенияЭталон.СпособОповещения) <> ТипСпособОповещения)
			ИЛИ (НастройкиОповещенияЭталон.СпособОповещения = Перечисления.СпособыОповещенияПользователяОНовостях.ПустаяСсылка()) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИзменитьПользовательскиеСпособыОповещенияЛентНовостей: параметр [НастройкиОповещения.СпособОповещения] недопустимого типа [%1] или не заполнен.'"),
				ТипЗнч(НастройкиОповещенияЭталон.СпособОповещения));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Можно ускорить запись, поместив цикл в транзакцию. Но ожидается, что чаще всего будет только одна запись.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.Ссылка                        КАК ЛентаНовостей,
		|	Спр.Наименование                  КАК ЛентаНовостейНаименование,
		|	Спр.Код                           КАК ЛентаНовостейКод,
		|	ЕСТЬNULL(
		|		РегНастройкиПользовательские.СпособОповещенияПользователяОНовостях,
		|		&СпособОповещенияПоУмолчанию) КАК СпособОповещенияПользователяОНовостях
		|ИЗ
		|	Справочник.ЛентыНовостей КАК Спр
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НастройкиЛентНовостейПользовательские КАК РегНастройкиПользовательские
		|	ПО
		|		(РегНастройкиПользовательские.ЛентаНовостей = Спр.Ссылка)
		|		И (РегНастройкиПользовательские.Пользователь = &Пользователь)
		|
		|ГДЕ
		|	Спр.Ссылка В (&ЛентыНовостей)
		|";
	Запрос.УстановитьПараметр("ЛентыНовостей"              , МассивЛентНовостей);
	Запрос.УстановитьПараметр("Пользователь"               , ТекущийПользователь);
	Запрос.УстановитьПараметр("СпособОповещенияПоУмолчанию", Перечисления.СпособыОповещенияПользователяОНовостях.ПоУмолчанию);
	Запрос.УстановитьПараметр("ПустаяСтрока"               , "");

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			// Запись настроек пользовательских.
			// Проверку на пометку удаления или поле ОбязательныйКанал не производим, т.к. это учитывается  при чтении настроек.
			Запись = РегистрыСведений.НастройкиЛентНовостейПользовательские.СоздатьМенеджерЗаписи();
				Запись.Пользователь                          = ТекущийПользователь;
				Запись.ЛентаНовостей                         = Выборка.ЛентаНовостей;
				Запись.СпособОповещенияПользователяОНовостях = НастройкиОповещенияЭталон.СпособОповещения;
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

	// После изменения настройки видимости лент новостей (административные, для области данных,
	//  пользовательские и т.п.), необходимо очистить кэш,
	//  чтобы методы ОбработкаНовостейПовтИсп.* выдавали правильные результаты.
	// Здесь может измениться: пользовательская видимость ленты новостей.
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователями

// Подсистема ЧтениеНовостей не рассчитана на работу с внешними пользователями,
//  поэтому если в программу зашел внешний пользователь, и у него включена роль ЧтениеНовостей или ПолныеПрава
//  или РедактированиеНовостей, то вывести сообщение в журнал регистрации.
//
// Возвращаемое значение:
//   Булево - Истина, если это внешний пользователь с возможностью чтения новостей
//                    (доступна одна из ролей: ЧтениеНовостей, РедактированиеНовостей, ПолныеПрава).
//
Функция ЭтоВнешнийПользовательСВозможностьюЧтениеНовостей() Экспорт

#Область ИнициализацияМетода

	Результат = Ложь;
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

#КонецОбласти

#Область Проверки

	// Для пользователя без разделителей не заполняются параметры сеанса, поэтому будет ошибка.
	Если НЕ ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (НЕ Пользователи.ЭтоСеансВнешнегоПользователя()) Тогда
		Возврат Ложь;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	РольДоступна_ЧтениеНовостей         = РольДоступна(Метаданные.Роли.ЧтениеНовостей); // АПК:336 Необходимо только для записи лога.
	РольДоступна_РедактированиеНовостей = РольДоступна(Метаданные.Роли.РедактированиеНовостей); // АПК:336 Необходимо только для записи лога.
	РольДоступна_АдминистраторСистемы   = ОбработкаНовостейПовтИсп.ЕстьРольАдминистраторСистемы();
	РольДоступна_ПолныеПрава            = ОбработкаНовостейПовтИсп.ЕстьРольПолныеПрава();

	Если ПравоДоступа("Чтение", Метаданные.Справочники.Новости) Тогда

		Результат = Истина;

		// В модуле с повторными значениями запись в журнал регистрации будет происходить не чаще 1 раза в 20 минут
		//  (или после принудительного очищения кэша с помощью ОбновитьПовторноИспользуемыеЗначения();).
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не рекомендуется давать возможность чтения новостей внешнему пользователю (%1)
				|Подключены следующие роли:
				|	- ЧтениеНовостей         - %2
				|	- РедактированиеНовостей - %3
				|	- АдминистраторСистемы   - %4
				|	- ПолныеПрава            - %5
				|Это может привести к ошибкам в работе с конфигурацией.'"),
			Пользователи.АвторизованныйПользователь(),
			?(РольДоступна_ЧтениеНовостей,"ПОДКЛЮЧЕНА", "Отключена"),
			?(РольДоступна_РедактированиеНовостей,"ПОДКЛЮЧЕНА", "Отключена"),
			?(РольДоступна_АдминистраторСистемы,"ПОДКЛЮЧЕНА", "Отключена"),
			?(РольДоступна_ПолныеПрава,"ПОДКЛЮЧЕНА", "Отключена"))
			+ Символы.ПС;
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Разное'", КодОсновногоЯзыка), // ИмяСобытия.
			НСтр("ru='Новости. Разное. Ошибка работы с пользователями'", КодОсновногоЯзыка), // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

#КонецОбласти

#Область Завершение

	Возврат Результат;

#КонецОбласти

КонецФункции

// Функция возвращает фиксированную структуру с часто используемыми параметрами пользователя.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - фиксированная структура с ключами:
//   * ИмяПользователяИБ              - Строка - имя пользователя;
//   * ЕстьРольЧтенияНовостей         - Булево - доступность указанной роли;
//   * ЕстьРольРедактированиеНовостей - Булево - доступность указанной роли;
//   * ЕстьРольПолныеПрава            - Булево - доступность указанной роли;
//   * ЕстьРольАдминистраторСистемы   - Булево - доступность указанной роли;
//   * ЭтоВнешнийПользователь         - Булево - это внешний пользователь;
//   * ЭтоФоновоеЗадание              - Булево - это фоновое задание;
//   * ТекущийПользовательСсылка      - СправочникСсылка.Пользователи - ссылка на элемент справочника.
//
Функция ПараметрыТекущегоПользователя() Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПараметрыТекущегоПользователя();

КонецФункции

#КонецОбласти

#Область РаботаСОтборамиНовостей

// В некоторых новостях может быть установлена категория, проверяющая состояние некоторой функциональной опции,
//  например "Эта новость только если подключен Облачный архив" с текстом "Вышла новая версия Облачного архива",
//  или "Эта новость только если не подключены СПАРК Риски" с текстом "Предлагаем подключить СПАРК Риски".
// После изменения значения этой категории (подключили / отключили услугу и т.п.), необходимо показать или скрыть некоторые новости,
//  а для этого необходимо пересчитать отборы.
// Условия показа новости могут быть как общие для всех новостей всей информационной базы, так и только для отдельной области данных.
// Процедура заполняет регистры сведений ОтборыПоЛентамНовостейОбщие и РассчитанныеОтборыПоНовостям_Общие
//  чтобы отобразить или скрыть некоторые новости.
// Вызывается автоматически регламентным заданием пересчета отборов или при обновлении конфигурации, но
//  для того, чтобы отфильтровать новости сразу, то может также вызываться вручную в модели сервиса в неразделенном сеансе, или в коробке.
//
Процедура ПриИзмененииЗначенийОтборовОбщих() Экспорт

#Область ИнициализацияМетода

	НаименованиеМетода = "ОбработкаНовостей.ПриИзмененииЗначенийОтборовОбщих"; // Идентификатор.
	КонтекстВыполнения = НовыйКонтекстВыполнения(НаименованиеМетода, Истина); // Этот контекст.

	НачатьШагВыполнения(КонтекстВыполнения, "Запуск:" + НаименованиеМетода); // Идентификатор.

#КонецОбласти

#Область Проверки

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные(КонтекстВыполнения) Тогда
		ТекстСообщения = НСтр("ru='Невозможно изменить общие отборы в разделенном сеансе.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Шаг = НаименованиеМетода + "/ОптимизироватьОтборыПоНовостям+ПересчитатьОтборыПоНовостям_Общие";
	КонтекстВыполненияВложенный = НачатьШагВыполненияВложенный(КонтекстВыполнения, Шаг);

		ОбработкаНовостейСлужебный.ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);
		ОбработкаНовостейСлужебный.ПересчитатьОтборыПоНовостям_Общие(КонтекстВыполненияВложенный);

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", "", КонтекстВыполненияВложенный);

#КонецОбласти

#Область Завершение

	ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);

#КонецОбласти

КонецПроцедуры

// В некоторых новостях может быть установлена категория, проверяющая состояние некоторой функциональной опции,
//  например "Эта новость только если подключен Облачный архив" с текстом "Вышла новая версия Облачного архива",
//  или "Эта новость только если не подключены СПАРК Риски" с текстом "Предлагаем подключить СПАРК Риски".
// После изменения значения этой категории (подключили / отключили услугу и т.п.), необходимо показать или скрыть некоторые новости,
//  а для этого необходимо пересчитать отборы.
// Условия показа новости могут быть как общие для всех новостей всей информационной базы, так и только для отдельной области данных.
// Процедура заполняет регистры сведений ОтборыПоЛентамНовостейДляОбластиДанных и РассчитанныеОтборыПоНовостям_ДляОбластиДанных
//  чтобы отобразить или скрыть некоторые новости.
// Должно вызываться вручную после изменения необходимых для отбора новостей значений.
// Может работать в модели сервиса.
// В модели сервиса работает независимо от того, вошли в область данных или нет.
// Если вошли в область данных, то будут пересчитаны только отборы по текущей области данных.
//
Процедура ПриИзмененииЗначенийОтборовДляОбластиДанных() Экспорт

#Область ИнициализацияМетода

	НаименованиеМетода = "ОбработкаНовостей.ПриИзмененииЗначенийОтборовДляОбластиДанных"; // Идентификатор.
	КонтекстВыполнения = НовыйКонтекстВыполнения(НаименованиеМетода, Истина); // Этот контекст.

	НачатьШагВыполнения(КонтекстВыполнения, "Запуск:" + НаименованиеМетода); // Идентификатор.

#КонецОбласти

#Область Обработка

	Шаг = НаименованиеМетода + "/ОптимизироватьОтборыПоНовостям+ПересчитатьОтборыПоНовостям_ДляОбластиДанных";
	КонтекстВыполненияВложенный = НачатьШагВыполненияВложенный(КонтекстВыполнения, Шаг);

		ОбработкаНовостейСлужебный.ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);
		ОбработкаНовостейСлужебный.ПересчитатьОтборыПоНовостям_ДляОбластиДанных(КонтекстВыполненияВложенный);

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", "", КонтекстВыполненияВложенный);

#КонецОбласти

#Область Завершение

	ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);

#КонецОбласти

КонецПроцедуры

// Процедура заполняет регистр сведений ОтборыПоЛентамНовостейПользовательские и РассчитанныеОтборыПоНовостям_Пользовательские
//  чтобы отобразить или скрыть некоторые новости.
// Должно вызываться вручную после изменения необходимых для отбора новостей значений.
// Может работать в модели сервиса.
// В модели сервиса работает независимо от того, вошли в область данных или нет.
// Если вошли в область данных, то будут пересчитаны только отборы по текущей области данных.
//
// Параметры:
//  Пользователь - Неопределено, СправочникСсылка.Пользователи, Массив из СправочникСсылка.Пользователи - пользователи,
//                      по которым необходимо пересчитать новости-исключения. Если Неопределено, то по всем.
//
Процедура ПриИзмененииЗначенийОтборовПользовательских(Пользователь = Неопределено) Экспорт

#Область ИнициализацияМетода

	НаименованиеМетода = "ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских"; // Идентификатор.
	КонтекстВыполнения = НовыйКонтекстВыполнения(НаименованиеМетода, Истина); // Этот контекст.

	НачатьШагВыполнения(КонтекстВыполнения, "Запуск:" + НаименованиеМетода); // Идентификатор.

#КонецОбласти

#Область Обработка

	Шаг = НаименованиеМетода + "/ОптимизироватьОтборыПоНовостям+ПересчитатьОтборыПоНовостям_Пользовательские";
	КонтекстВыполненияВложенный = НачатьШагВыполненияВложенный(КонтекстВыполнения, Шаг);

		ОбработкаНовостейСлужебный.ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);
		ОбработкаНовостейСлужебный.ПересчитатьОтборыПоНовостям_Пользовательские(Пользователь, КонтекстВыполненияВложенный);

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", "", КонтекстВыполненияВложенный);

#КонецОбласти

#Область Завершение

	ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область РаботаСоЗначениямиОтборов

#Область РаботаСоЗначениямиОтборов_ВспомогательныеМетоды

// Возвращает таблицу значений (возможно с одной строкой данных) для передачи как параметр в
//  ОбработкаНовостей.ДобавитьПрограммноеЗначениеОтбора_Общий,
//  ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_Общий,
//  ОбработкаНовостей.УдалитьПрограммноеЗначениеОтбора_Общий.
//
// Параметры:
//   ДанныеОтбора - Структура - данные отбора с ключами:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория. Если Неопределено,
//        то возвратится пустая таблица значений;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * ДатаОбновления            - Дата - дата и время обновления записи (в формате нулевого меридиана);
//    * УсловиеВыполнено          - Булево - признак выполнения этого условия (Ложь для категории-антагониста).
//
Функция ЗначенияОтборов_Общие(ДанныеОтбора = Неопределено) Экспорт

	ТипСтруктура         = Тип("Структура");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");

	ДанныеОтбораЭталон = Новый Структура;
		ДанныеОтбораЭталон.Вставить("КатегорияНовостей"        , Неопределено);
		ДанныеОтбораЭталон.Вставить("ЗначениеКатегорииНовостей", Неопределено);
	Если ТипЗнч(ДанныеОтбора) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОтбораЭталон, ДанныеОтбора);
	КонецЕсли;

	Результат = Новый ТаблицаЗначений;
	К = Результат.Колонки;
		К.Добавить("КатегорияНовостей"        , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КатегорииНовостей"));
		К.Добавить("ЗначениеКатегорииНовостей"); // Тип - Характеристика.КатегорииНовостей.
		К.Добавить("ДатаОбновления"           , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		К.Добавить("УсловиеВыполнено"         , Новый ОписаниеТипов("Булево"));

	Если ТипЗнч(ДанныеОтбораЭталон.КатегорияНовостей) = ТипКатегорияНовостей Тогда
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.КатегорияНовостей         = ДанныеОтбораЭталон.КатегорияНовостей;
		НоваяСтрока.ЗначениеКатегорииНовостей = ДанныеОтбораЭталон.ЗначениеКатегорииНовостей;
		НоваяСтрока.УсловиеВыполнено          = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений (возможно с одной строкой данных) для передачи как параметр в
//  ОбработкаНовостей.ДобавитьПрограммноеЗначениеОтбора_ДляОбластиДанных,
//  ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных,
//  ОбработкаНовостей.УдалитьПрограммноеЗначениеОтбора_ДляОбластиДанных.
//
// Параметры:
//   ДанныеОтбора - Структура - данные отбора с ключами:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория. Если Неопределено,
//        то возвратится пустая таблица значений;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных.
//        Надо заполнять только при вызове в модели сервиса из неразделенного сеанса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * ДатаОбновления            - Дата - дата и время обновления записи (в формате нулевого меридиана);
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных;
//    * УсловиеВыполнено          - Булево - признак выполнения этого условия (Ложь для категории-антагониста).
//
Функция ЗначенияОтборов_ДляОбластиДанных(ДанныеОтбора = Неопределено) Экспорт

	ТипСтруктура         = Тип("Структура");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");

	ДанныеОтбораЭталон = Новый Структура;
		ДанныеОтбораЭталон.Вставить("КатегорияНовостей"        , Неопределено);
		ДанныеОтбораЭталон.Вставить("ЗначениеКатегорииНовостей", Неопределено);
		ДанныеОтбораЭталон.Вставить("НомерОбластиДанных"       , Неопределено);
	Если ТипЗнч(ДанныеОтбора) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОтбораЭталон, ДанныеОтбора);
	КонецЕсли;

	Результат = Новый ТаблицаЗначений;
	К = Результат.Колонки;
		К.Добавить("КатегорияНовостей"        , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КатегорииНовостей"));
		К.Добавить("ЗначениеКатегорииНовостей"); // Тип - Характеристика.КатегорииНовостей.
		К.Добавить("ДатаОбновления"           , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		К.Добавить("УсловиеВыполнено"         , Новый ОписаниеТипов("Булево"));
		К.Добавить(
			"НомерОбластиДанных",
			Новый ОписаниеТипов(
				"Число",
				Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Любой))); // Сохранять "-1" вместо Неопределено.

	Если ТипЗнч(ДанныеОтбораЭталон.КатегорияНовостей) = ТипКатегорияНовостей Тогда
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.КатегорияНовостей         = ДанныеОтбораЭталон.КатегорияНовостей;
		НоваяСтрока.ЗначениеКатегорииНовостей = ДанныеОтбораЭталон.ЗначениеКатегорииНовостей;
		НоваяСтрока.УсловиеВыполнено          = Истина;
		Если (ТипЗнч(ДанныеОтбораЭталон.НомерОбластиДанных) = ТипЧисло)
				И (ДанныеОтбораЭталон.НомерОбластиДанных > 0) Тогда
			НоваяСтрока.НомерОбластиДанных = ДанныеОтбораЭталон.НомерОбластиДанных;
		Иначе
			НоваяСтрока.НомерОбластиДанных = -1;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений (возможно с одной строкой данных) для передачи как параметр в
//  ОбработкаНовостей.ДобавитьПрограммноеЗначениеОтбора_Пользовательский,
//  ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_Пользовательский,
//  ОбработкаНовостей.УдалитьПрограммноеЗначениеОтбора_Пользовательский.
//
// Параметры:
//   ДанныеОтбора - Структура - данные отбора с ключами:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория. Если Неопределено,
//        то возвратится пустая таблица значений;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * Пользователь              - СправочникСсылка.Пользователи - пользователь, для которого устанавливается отбор;
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных.
//        Надо заполнять только при вызове в модели сервиса из неразделенного сеанса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//    * КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - Категория;
//    * ЗначениеКатегорииНовостей - Характеристика.КатегорииНовостей - Значение категории;
//    * ДатаОбновления            - Дата - дата и время обновления записи (в формате нулевого меридиана);
//    * Пользователь              - СправочникСсылка.Пользователи - пользователь, для которого устанавливается отбор;
//    * НомерОбластиДанных        - Число, Неопределено - номер области данных;
//    * УсловиеВыполнено          - Булево - признак выполнения этого условия (Ложь для категории-антагониста).
//
Функция ЗначенияОтборов_Пользовательские(ДанныеОтбора = Неопределено) Экспорт

	ТипСтруктура         = Тип("Структура");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");

	ДанныеОтбораЭталон = Новый Структура;
		ДанныеОтбораЭталон.Вставить("КатегорияНовостей"        , Неопределено);
		ДанныеОтбораЭталон.Вставить("ЗначениеКатегорииНовостей", Неопределено);
		ДанныеОтбораЭталон.Вставить("НомерОбластиДанных"       , Неопределено);
		ДанныеОтбораЭталон.Вставить("Пользователь"             , Неопределено);
	Если ТипЗнч(ДанныеОтбора) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОтбораЭталон, ДанныеОтбора);
	КонецЕсли;

	Результат = Новый ТаблицаЗначений;
	К = Результат.Колонки;
		К.Добавить("КатегорияНовостей"        , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.КатегорииНовостей"));
		К.Добавить("ЗначениеКатегорииНовостей"); // Тип - Характеристика.КатегорииНовостей.
		К.Добавить("ДатаОбновления"           , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		К.Добавить("УсловиеВыполнено"         , Новый ОписаниеТипов("Булево"));
		К.Добавить("Пользователь"             , Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		К.Добавить(
			"НомерОбластиДанных",
			Новый ОписаниеТипов(
				"Число",
				Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Любой))); // Сохранять "-1" вместо Неопределено.

	Если ТипЗнч(ДанныеОтбораЭталон.КатегорияНовостей) = ТипКатегорияНовостей Тогда
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.КатегорияНовостей         = ДанныеОтбораЭталон.КатегорияНовостей;
		НоваяСтрока.ЗначениеКатегорииНовостей = ДанныеОтбораЭталон.ЗначениеКатегорииНовостей;
		НоваяСтрока.УсловиеВыполнено          = Истина;
		НоваяСтрока.Пользователь              = ДанныеОтбораЭталон.Пользователь;
		Если (ТипЗнч(ДанныеОтбораЭталон.НомерОбластиДанных) = ТипЧисло)
				И (ДанныеОтбораЭталон.НомерОбластиДанных > 0) Тогда
			НоваяСтрока.НомерОбластиДанных = ДанныеОтбораЭталон.НомерОбластиДанных;
		Иначе
			НоваяСтрока.НомерОбластиДанных = -1;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСоЗначениямиОтборов_ДобавлениеЗначений

// Добавляет значения отбора (общего).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При попытке записать данные в модели сервиса в разделенном режиме будет ошибка.
// Можно последовательно добавить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовОбщих".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Общие().
//
Процедура ДобавитьПрограммноеЗначениеОтбора_Общий(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В модели сервиса метод [%1] разрешено вызывать только в неразделенном режиме.'"),
			"ОбработкаНовостей.ДобавитьПрограммноеЗначениеОтбора_Общий");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДатаОбновления = ТекущаяУниверсальнаяДата(); // Все данные, связанные с новостями - в UTC+0.

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийОбщие.СоздатьМенеджерЗаписи();
			Запись.ДатаОбновления            = ДатаОбновления;
			Запись.УсловиеВыполнено          = Истина;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
		Запись.Записать(Истина);
		// Сразу добавлять/удалять значение для категории антагониста.
		//  SubsystemRealized <-> SubsystemNotRealized;
		//  FnOptionOn <-> FnOptionOff;
		КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.ПустаяСсылка();
		ТекущаяСтрокаКатегорияНовостейКод = ТекущаяСтрока.КатегорияНовостей.Код;
		Если ТекущаяСтрокаКатегорияНовостейКод = "SubsystemRealized" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("SubsystemNotRealized");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "SubsystemNotRealized" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("SubsystemRealized");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionOn");
		КонецЕсли;
		Если НЕ КатегорияАнтагонист.Пустая() Тогда
			Запись = РегистрыСведений.ЗначенияКатегорийОбщие.СоздатьМенеджерЗаписи();
				Запись.ДатаОбновления            = ДатаОбновления;
				Запись.УсловиеВыполнено          = Ложь;
				Запись.КатегорияНовостей         = КатегорияАнтагонист;
				Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет значения отбора (для области данных).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно добавить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовДляОбластиДанных".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_ДляОбластиДанных().
//
Процедура ДобавитьПрограммноеЗначениеОтбора_ДляОбластиДанных(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	ДатаОбновления = ТекущаяУниверсальнаяДата(); // Все данные, связанные с новостями - в UTC+0.

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийДляОбластиДанных.СоздатьМенеджерЗаписи();
			Запись.ДатаОбновления            = ДатаОбновления;
			Запись.УсловиеВыполнено          = Истина;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Записать(Истина);
		// Сразу добавлять/удалять значение для категории антагониста.
		//  ServiceDataAreaOn <-> ServiceDataAreaOff;
		//  FnOptionDataAreaOn <-> FnOptionDataAreaOff;
		КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.ПустаяСсылка();
		ТекущаяСтрокаКатегорияНовостейКод = ТекущаяСтрока.КатегорияНовостей.Код;
		Если ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOn");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOn");
		КонецЕсли;
		Если НЕ КатегорияАнтагонист.Пустая() Тогда
			Запись = РегистрыСведений.ЗначенияКатегорийДляОбластиДанных.СоздатьМенеджерЗаписи();
				Запись.ДатаОбновления            = ДатаОбновления;
				Запись.УсловиеВыполнено          = Ложь;
				Запись.КатегорияНовостей         = КатегорияАнтагонист;
				Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
				Если ИспользоватьНомерОбластиДанных = Истина Тогда
					Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
				КонецЕсли;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет значения отбора (пользовательского).
// На основании этих данных потом будет рассчитываться видимость новостей.
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно добавить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Пользовательские().
//
Процедура ДобавитьПрограммноеЗначениеОтбора_Пользовательский(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	ДатаОбновления = ТекущаяУниверсальнаяДата(); // Все данные, связанные с новостями - в UTC+0.

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийПользовательские.СоздатьМенеджерЗаписи();
			Запись.ДатаОбновления            = ДатаОбновления;
			Запись.УсловиеВыполнено          = Истина;
			Запись.Пользователь              = ТекущаяСтрока.Пользователь;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Записать(Истина);
		// Сразу добавлять/удалять значение для категории антагониста.
		//  ServiceDataAreaOn <-> ServiceDataAreaOff;
		//  FnOptionDataAreaOn <-> FnOptionDataAreaOff;
		КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.ПустаяСсылка();
		ТекущаяСтрокаКатегорияНовостейКод = ТекущаяСтрока.КатегорияНовостей.Код;
		Если ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "ServiceDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ServiceDataAreaOn");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOn" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOff");
		ИначеЕсли ТекущаяСтрокаКатегорияНовостейКод = "FnOptionDataAreaOff" Тогда
			КатегорияАнтагонист = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("FnOptionDataAreaOn");
		КонецЕсли;
		Если НЕ КатегорияАнтагонист.Пустая() Тогда
			Запись = РегистрыСведений.ЗначенияКатегорийПользовательские.СоздатьМенеджерЗаписи();
				Запись.ДатаОбновления            = ДатаОбновления;
				Запись.УсловиеВыполнено          = Ложь;
				Запись.Пользователь              = ТекущаяСтрока.Пользователь;
				Запись.КатегорияНовостей         = КатегорияАнтагонист;
				Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
				Если ИспользоватьНомерОбластиДанных = Истина Тогда
					Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
				КонецЕсли;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСоЗначениямиОтборов_УдалениеЗначений

// Удаляет значения отбора (общего).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При попытке записать данные в модели сервиса в разделенном режиме будет ошибка.
// Можно последовательно удалить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовОбщих".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Общие().
//
Процедура УдалитьПрограммноеЗначениеОтбора_Общий(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные() Тогда
		ТекстСообщения = НСтр("ru='УдалитьПрограммноеЗначениеОтбора_Общий: выполнение недоступно в разделенном сеансе модели сервиса.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийОбщие.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры

// Удаляет значения отбора (для области данных).
// На основании этих данных потом будет рассчитываться видимость новостей.
// Не забыть добавить коды категорий в ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей;
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно удалить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовДляОбластиДанных".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_ДляОбластиДанных().
//
Процедура УдалитьПрограммноеЗначениеОтбора_ДляОбластиДанных(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийДляОбластиДанных.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры

// Удаляет значения отбора (пользовательского).
// На основании этих данных потом будет рассчитываться видимость новостей.
// При записи данных в модели сервиса в неразделенном режиме необходимо заполнять "НомерОбласти" в ЗначенияОтборов.
// Можно последовательно удалить много значений отборов, а потом вызвать "ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских".
//
// Параметры:
//  ЗначенияОтборов - ТаблицаЗначений - описание см. ЗначенияОтборов_Пользовательские().
//
Процедура УдалитьПрограммноеЗначениеОтбора_Пользовательский(ЗначенияОтборов) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	// Наличие необходимых колонок в параметре "ЗначенияОтборов" НЕ проверяется.
	Для Каждого ТекущаяСтрока Из ЗначенияОтборов Цикл
		Запись = РегистрыСведений.ЗначенияКатегорийПользовательские.СоздатьМенеджерЗаписи();
			Запись.Пользователь              = ТекущаяСтрока.Пользователь;
			Запись.КатегорияНовостей         = ТекущаяСтрока.КатегорияНовостей;
			Запись.ЗначениеКатегорииНовостей = ТекущаяСтрока.ЗначениеКатегорииНовостей;
			Если ИспользоватьНомерОбластиДанных = Истина Тогда
				Запись.ОбластьДанныхВспомогательныеДанные = ТекущаяСтрока.НомерОбластиДанных;
			КонецЕсли;
		Запись.Удалить();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСоЗначениямиОтборов_ПолучениеЗначений

// Возвращает текущие значения категорий (общие) для отборов новостей.
//
// Параметры:
//  КатегорияНовостей  - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка (20), Неопределено - Категория для отбора или ее код.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ЗначенияОтборов_Общие().
//
Функция ПолучитьПрограммноеЗначениеОтбора_Общий(
			КатегорияНовостей = Неопределено) Экспорт

	Результат = ЗначенияОтборов_Общие(); // Пустая таблица.

	ТипСтрока            = Тип("Строка");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");

	ТипЗнчКатегорияНовостей = ТипЗнч(КатегорияНовостей);

	// Валидация входящих параметров: журнал регистрации
	Если КатегорияНовостей <> Неопределено
			И ТипЗнчКатегорияНовостей <> ТипКатегорияНовостей
			И ТипЗнчКатегорияНовостей <> ТипСтрока Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПрограммноеЗначениеОтбора_Общий: параметр [КатегорияНовостей] (%1) недопустимого типа [%2].'"),
				КатегорияНовостей,
				ТипЗнчКатегорияНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчКатегорияНовостей = ТипСтрока)
			И (СтрДлина(КатегорияНовостей) > 20) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПрограммноеЗначениеОтбора_Общий: параметр [КатегорияНовостей] (%1) недопустимой длины Строка([%2]).'"),
				КатегорияНовостей,
				СтрДлина(КатегорияНовостей));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	Рег.ДатаОбновления            КАК ДатаОбновления,
		|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
		|ИЗ
		|	РегистрСведений.ЗначенияКатегорийОбщие КАК Рег
		|ГДЕ
		|	&МетаУсловиеКатегорияНовостей
		|";

	Если ТипЗнч(КатегорияНовостей) = ТипСтрока Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей.Код = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	ИначеЕсли ТипЗнч(КатегорияНовостей) = ТипКатегорияНовостей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "ИСТИНА");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьПрограммноеЗначениеОтбора_Общий.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текущие значения категорий (для области данных) для отборов новостей.
//
// Параметры:
//  КатегорияНовостей  - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка (20), Неопределено - Категория для отбора или ее код;
//  НомерОбластиДанных - Число, Неопределено - номер области данных;
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ЗначенияОтборов_ДляОбластиДанных().
//
Функция ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных(
			КатегорияНовостей = Неопределено,
			НомерОбластиДанных = Неопределено) Экспорт

	Результат = ЗначенияОтборов_ДляОбластиДанных(); // Пустая таблица.

	ТипСтрока            = Тип("Строка");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");

	ТипЗнчКатегорияНовостей = ТипЗнч(КатегорияНовостей);

	// Валидация входящих параметров: журнал регистрации
	Если КатегорияНовостей <> Неопределено
			И ТипЗнчКатегорияНовостей <> ТипКатегорияНовостей
			И ТипЗнчКатегорияНовостей <> ТипСтрока Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных: параметр [КатегорияНовостей] (%1) недопустимого типа [%2].'"),
				КатегорияНовостей,
				ТипЗнчКатегорияНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчКатегорияНовостей = ТипСтрока)
			И (СтрДлина(КатегорияНовостей) > 20) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных: параметр [КатегорияНовостей] (%1) недопустимой длины Строка([%2]).'"),
				КатегорияНовостей,
				СтрДлина(КатегорияНовостей));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	Если (ИспользоватьНомерОбластиДанных = Истина) Тогда
		Если (ТипЗнч(НомерОбластиДанных) = ТипЧисло)
				И (НомерОбластиДанных > 0) Тогда
			// Все нормально.
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модели сервиса метод [%1] разрешено вызывать:
					| - или в разделенном режиме
					| - или необходимо передать положительное число в параметре НомерОбластиДанных.'"),
				"ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	&МетаВыбрать_ПолеДляМоделиСервиса,
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	Рег.ДатаОбновления            КАК ДатаОбновления,
		|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
		|ИЗ
		|	РегистрСведений.ЗначенияКатегорийДляОбластиДанных КАК Рег
		|ГДЕ
		|	&МетаУсловиеКатегорияНовостей
		|	И &МетаУсловиеНомерОбластиДанных
		|";

	Если ТипЗнч(КатегорияНовостей) = ТипСтрока Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей.Код = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	ИначеЕсли ТипЗнч(КатегорияНовостей) = ТипКатегорияНовостей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "ИСТИНА");
	КонецЕсли;

	Если ИспользоватьНомерОбластиДанных = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК НомерОбластиДанных,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "И Рег.ОбластьДанныхВспомогательныеДанные = &УсловиеНомерОбластиДанных");
		Запрос.УстановитьПараметр("УсловиеНомерОбластиДанных", НомерОбластиДанных);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьПрограммноеЗначениеОтбора_ДляОбластиДанных.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает текущие значения категорий (пользовательские) для отборов новостей.
//
// Параметры:
//  КатегорияНовостей  - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка (20), Неопределено - Категория для отбора или ее код;
//  Пользователь       - СправочникСсылка.Пользователи - пользователь;
//  НомерОбластиДанных - Число, Неопределено - номер области данных;
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ЗначенияОтборов_Пользовательские().
//
Функция ПолучитьПрограммноеЗначениеОтбора_Пользовательский(
			КатегорияНовостей = Неопределено,
			Пользователь = Неопределено,
			НомерОбластиДанных = Неопределено) Экспорт

	Результат = ЗначенияОтборов_Пользовательские(); // Пустая таблица.

	ТипСтрока            = Тип("Строка");
	ТипКатегорияНовостей = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей");
	ТипЧисло             = Тип("Число");
	ТипПользователь      = Тип("СправочникСсылка.Пользователи");

	ТипЗнчКатегорияНовостей = ТипЗнч(КатегорияНовостей);

	// Валидация входящих параметров: журнал регистрации
	Если КатегорияНовостей <> Неопределено
			И ТипЗнчКатегорияНовостей <> ТипКатегорияНовостей
			И ТипЗнчКатегорияНовостей <> ТипСтрока Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПрограммноеЗначениеОтбора_Пользовательский: параметр [КатегорияНовостей] (%1) недопустимого типа [%2].'"),
				КатегорияНовостей,
				ТипЗнчКатегорияНовостей);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчКатегорияНовостей = ТипСтрока)
			И (СтрДлина(КатегорияНовостей) > 20) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ПолучитьПрограммноеЗначениеОтбора_Пользовательский: параметр [КатегорияНовостей] (%1) недопустимой длины Строка([%2]).'"),
				КатегорияНовостей,
				СтрДлина(КатегорияНовостей));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;

	ИспользоватьНомерОбластиДанных = Ложь;
	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем без разделения (и не вошли в область данных)).
		Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			ИспользоватьНомерОбластиДанных = Истина;
		КонецЕсли;
	КонецЕсли;

	Если (ИспользоватьНомерОбластиДанных = Истина) Тогда
		Если (ТипЗнч(НомерОбластиДанных) = ТипЧисло)
				И (НомерОбластиДанных > 0) Тогда
			// Все нормально.
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В модели сервиса метод [%1] разрешено вызывать:
					| - или в разделенном режиме
					| - или необходимо передать положительное число в параметре НомерОбластиДанных.'"),
				"ОбработкаНовостей.ПолучитьПрограммноеЗначениеОтбора_Пользовательский");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	&МетаВыбрать_ПолеДляМоделиСервиса,
		|	Рег.Пользователь              КАК Пользователь,
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	Рег.ДатаОбновления            КАК ДатаОбновления,
		|	Рег.УсловиеВыполнено          КАК УсловиеВыполнено
		|ИЗ
		|	РегистрСведений.ЗначенияКатегорийПользовательские КАК Рег
		|ГДЕ
		|	&МетаУсловиеКатегорияНовостей
		|	И &МетаУсловиеНомерОбластиДанных
		|	И &МетаУсловиеПользователь
		|";

	Если ТипЗнч(КатегорияНовостей) = ТипСтрока Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей.Код = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	ИначеЕсли ТипЗнч(КатегорияНовостей) = ТипКатегорияНовостей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "Рег.КатегорияНовостей = &УсловиеКатегорияНовостей");
		Запрос.УстановитьПараметр("УсловиеКатегорияНовостей", КатегорияНовостей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаУсловиеКатегорияНовостей", "ИСТИНА");
	КонецЕсли;

	Если ИспользоватьНомерОбластиДанных = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "Рег.ОбластьДанныхВспомогательныеДанные КАК НомерОбластиДанных,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "И Рег.ОбластьДанныхВспомогательныеДанные = &УсловиеНомерОбластиДанных");
		Запрос.УстановитьПараметр("УсловиеНомерОбластиДанных", НомерОбластиДанных);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МетаВыбрать_ПолеДляМоделиСервиса,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеНомерОбластиДанных", "");
	КонецЕсли;

	Если ТипЗнч(Пользователь) = ТипПользователь Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеПользователь", "Рег.Пользователь = &УсловиеПользователь");
		Запрос.УстановитьПараметр("УсловиеПользователь", Пользователь);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &МетаУсловиеПользователь", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить(); // ПолучитьПрограммноеЗначениеОтбора_Пользовательский.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСБСП

// Процедура-обработчик перехода с другой программы, например с БухгалтерияБазовая на БухгалтерияПРОФ.
// В случае перехода с другой программы надо будет загрузить новости по новой программе (БухгалтерияПРОФ) за 1 месяц,
//   для этого необходимо отредактировать данные регистра сведений ДатыЗагрузкиПоследнихНовостей.
// Должна вызываться или вручную, или с помощью функциональности БСП (см. ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики)).
//
Процедура ПриПереходеСДругойПрограммы() Экспорт

	// 1. Сбросить настройки последней загрузки новостей, чтобы новости по новой программе загрузились за 1 месяц.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ЛентаНовостей                        КАК ЛентаНовостей,
		|	Рег.ДатаЗагрузкиПоследнихНовостей        КАК ДатаЗагрузкиПоследнихНовостей,
		|	Рег.КоличествоНеудачПриЗагрузкеНовостей  КАК КоличествоНеудачПриЗагрузкеНовостей,
		|	Рег.ДатаПоследнейПопыткиЗагрузкиНовостей КАК ДатаПоследнейПопыткиЗагрузкиНовостей
		|ИЗ
		|	РегистрСведений.ДатыЗагрузкиПоследнихНовостей КАК Рег
		|ГДЕ
		|	Рег.ДатаЗагрузкиПоследнихНовостей > &ОграничениеДатыЗагрузкиПоследнихНовостей
		|";

	Запрос.УстановитьПараметр("ОграничениеДатыЗагрузкиПоследнихНовостей", '00020101'); // 1 января 0002 года
	РезультатЗапроса = Запрос.Выполнить(); // ПриПереходеСДругойПрограммы.
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ДатаЗагрузкиПоследнихНовостей = ДобавитьМесяц(Запись.ДатаЗагрузкиПоследнихНовостей, -1);
			Запись.Записать(Истина);
		КонецЦикла;
	КонецЕсли;

	// 2. Пересчитать отборы.
	// Т.к. переход с одной конфигурации на другую сопровождается вызовом всех процедур обновления конфигурации,
	//  то явно вызывать пересчет отборов для новостей не нужно - он вызовется автоматически при обновлении конфигурации.

	// 3. Обновить классификаторы.
	// Принудительное обновление классификаторов не выполняется - оно автоматически сработает в течение суток.

	// 4. Выполнение прочих переопределяемых действий.
	ОбработкаНовостейПереопределяемый.ПриПереходеСДругойПрограммы();

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Процедура выполняет все необходимые действия для управления контекстными новостями.
// Должна вызываться из ПриСозданииНаСервере().
// Она используется в том случае, если выбрана стратегия расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  Форма                                    - ФормаКлиентскогоПриложения - форма, в которой необходимо включить
//                                              механизм контекстных новостей;
//  ИдентификаторМетаданных                  - Строка (50) - Идентификатор метаданных, должен совпадать с таким же
//                                              идентификатором в самой новости;
//                                              Длина строки не более 50 символов (размер измерения "Метаданные"
//                                               регистра сведений ПривязкаНовостейКМетаданным);
//  ИдентификаторФормы                       - Строка (50) - Идентификатор формы, должен совпадать с таким же
//                                              идентификатором в самой новости;
//                                              Длина строки не более 50 символов (размер измерения "Форма"
//                                               регистра сведений ПривязкаНовостейКМетаданным);
//  НастройкиОтображенияНовостей             - Структура, Неопределено - структура настроек для создания
//                                              кнопки / подменю / панели новостей
//                                             или Неопределено, если кнопку / подменю / панель создавать не надо. Ключи:
//   * ЭлементФормыДляРазмещенияКомандыНовостей - ЭлементФормы - Группа формы, в которой необходимо разместить
//                                              создаваемую кнопку / подменю / панели новостей;
//   * ТипЗначенияКомандыНовостей               - Тип, Неопределено - может быть Тип("КнопкаФормы")
//                                              (для создания кнопки Новости)
//                                                или Тип("ГруппаФормы") для создания подменю новостей,
//                                                или Неопределено, если не надо создавать кнопку / подменю.
//                                                По-умолчанию берется Тип("ГруппаФормы") для создания подменю новостей.
//   * СпособОтображенияПанелиКонтекстныхНовостей - Строка, Неопределено - "СписокНовостей", "Листание", "Автолистание", "Скрыть".
//  ЗаголовокФормыКонтекстныхНовостей        - Строка - заголовок формы, которая появляется при нажатии на кнопку
//                                              показа списка контекстных новостей из формы;
//  СоздаватьРеквизитФормы                   - Булево - Истина, если надо динамически создать реквизит
//                                              "Новости" произвольного типа;
//  НастройкиЗаполненияНовостями             - Структура - структура, определяющая стратегию получения
//                                              и хранения новостей;
//                                             Можно получать новости на сервере в ПриСозданииНаСервере - это будет
//                                              тратить время при каждом открытии формы, но позволит реализовать
//                                              сценарий показа новостей при наступлении клиентских
//                                              событий (ПриИзмененииГалочки, ПриУстановкеДатыБольше2014 и т.п.);
//                                             Можно получать новости в обработчике ожидания после открытия формы,
//                                              также будет задействован клиентский кэш. Это сократит время открытия
//                                              формы, но некоторые сценарии станут недоступны.
//                                             Ключи:
//   * ПолучатьНовостиНаСервере                - Булево - если Истина, то новости будут получаться в этой процедуре.
//                                               По-умолчанию = Истина;
//   * ХранитьМассивНовостейТолькоНаСервере    - Булево - если Истина, то на клиента не передается массив новостей.
//                                             Это сокращает размер передаваемых данных, но не дает возможность
//                                              показывать новости по другим событиям, отличным от ПриОткрытии.
//                                             Имеет смысл только если ПолучатьНовостиНаСервере = Истина.
//                                              По-умолчанию = Ложь.
//   * ПолучатьКатегорииНовостей               - Булево - если Истина, то в реквизите формы будут также
//                                               сохраняться категории новостей.
//                                             Это может быть полезно для реализации особенного отбора новостей,
//                                               который невозможно реализовать с помощью
//                                               регистров сведений ОтборыПоЛентамНовостей*;
//  ИдентификаторыСобытийПриОткрытии         - Строка (50), Массив из Строка (50) - строка или массив строк идентификаторов
//                                              события "ПриОткрытии". Если передано какое-то значение,
//                                              то будет подсчитано количество очень важных контекстных
//                                              новостей. И если это количество > 0, то открывающая форма инициирует
//                                              открытие формы просмотра таких новостей.
//                                              Длина строки не более 50 символов (размер измерения "Событие"
//                                               регистра сведений ПривязкаНовостейКМетаданным).
//
Процедура КонтекстныеНовости_ПриСозданииНаСервере(
				Форма,
				ИдентификаторМетаданных,
				ИдентификаторФормы,
				НастройкиОтображенияНовостей = Неопределено,
				ЗаголовокФормыКонтекстныхНовостей = "",
				СоздаватьРеквизитФормы = Истина,
				НастройкиЗаполненияНовостями = Неопределено,
				ИдентификаторыСобытийПриОткрытии = "ПриОткрытии") Экспорт

#Область ИнициализацияМетода

	ТипСтруктура = Тип("Структура");
	ТипСтрока    = Тип("Строка");
	ТипМассив    = Тип("Массив");

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	НастройкиЗаполненияНовостямиЭталон = Новый Структура;
		НастройкиЗаполненияНовостямиЭталон.Вставить("ПолучатьНовостиНаСервере"            , Истина);
		НастройкиЗаполненияНовостямиЭталон.Вставить("ХранитьМассивНовостейТолькоНаСервере", Ложь);
		НастройкиЗаполненияНовостямиЭталон.Вставить("ПолучатьКатегорииНовостей"           , Ложь);
	Если ТипЗнч(НастройкиЗаполненияНовостями) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(НастройкиЗаполненияНовостямиЭталон, НастройкиЗаполненияНовостями);
	КонецЕсли;
	НастройкиЗаполненияНовостямиЭталон.ПолучатьНовостиНаСервере =
		?(НастройкиЗаполненияНовостямиЭталон.ПолучатьНовостиНаСервере = Ложь, Ложь, Истина);
	НастройкиЗаполненияНовостямиЭталон.ХранитьМассивНовостейТолькоНаСервере =
		?(НастройкиЗаполненияНовостямиЭталон.ХранитьМассивНовостейТолькоНаСервере = Истина, Истина, Ложь);
	НастройкиЗаполненияНовостямиЭталон.ПолучатьКатегорииНовостей = 
		?(НастройкиЗаполненияНовостямиЭталон.ПолучатьКатегорииНовостей = Истина, Истина, Ложь);

	НастройкиОтображенияНовостейЭталон = Новый Структура;
		НастройкиОтображенияНовостейЭталон.Вставить("СпособОтображенияПанелиКонтекстныхНовостей", Неопределено);
		НастройкиОтображенияНовостейЭталон.Вставить("ЭлементФормыДляРазмещенияКомандыНовостей"  , Неопределено);
		НастройкиОтображенияНовостейЭталон.Вставить("ТипЗначенияКомандыНовостей"                , Неопределено);
		НастройкиОтображенияНовостейЭталон.Вставить("Использование"                             , Ложь);
	Если ТипЗнч(НастройкиОтображенияНовостей) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(НастройкиОтображенияНовостейЭталон, НастройкиОтображенияНовостей);
		НастройкиОтображенияНовостейЭталон.Использование = Истина;
	КонецЕсли;

	ОписаниеНовостей = Новый Структура;
		ОписаниеНовостей.Вставить("Новости", Новый Массив); // Массив структур.
		ОписаниеНовостей.Вставить("ЗаголовокФормыКонтекстныхНовостей", ЗаголовокФормыКонтекстныхНовостей);
		ОписаниеНовостей.Вставить("Метаданные", ИдентификаторМетаданных);
		ОписаниеНовостей.Вставить("Форма", ИдентификаторФормы);
		ОписаниеНовостей.Вставить("ТекущаяНовость", Справочники.Новости.ПустаяСсылка());
		ОписаниеНовостей.Вставить("КоличествоНовостей", 0);
		ОписаниеНовостей.Вставить("КоличествоНепрочитанныхНовостей", 0);
		ОписаниеНовостей.Вставить("КоличествоВажныхНовостейПриОткрытии", 0);
		ОписаниеНовостей.Вставить("КоличествоОченьВажныхНовостейПриОткрытии", 0);
		ОписаниеНовостей.Вставить("КоличествоПостоянныхНовостей", 0);
		ОписаниеНовостей.Вставить("ПолучатьНовостиНаСервере", НастройкиЗаполненияНовостямиЭталон.ПолучатьНовостиНаСервере);
		ОписаниеНовостей.Вставить("ХранитьМассивНовостейТолькоНаСервере", НастройкиЗаполненияНовостямиЭталон.ХранитьМассивНовостейТолькоНаСервере);
		ОписаниеНовостей.Вставить("АдресМассиваНовостей", "");
		ОписаниеНовостей.Вставить("МассивСтруктурВажныхНовостей", Неопределено); // Должно быть Неопределено, если новостей для показа нет.
		ОписаниеНовостей.Вставить("МассивСтруктурПостоянныхНовостей", Неопределено); // Должно быть Неопределено, если постоянных новостей нет.
		// Заполняется на клиенте в процессе работы в случае, если новости хранятся на сервере
		//  и приходят оповещения о прочтении новостей.
		ОписаниеНовостей.Вставить("СписокНовостейИзменениеПризнака_Прочтена", Новый СписокЗначений);
		// Заполняется на клиенте в процессе работы в случае, если новости хранятся на сервере
		//  и приходят оповещения об изменении оповещения для важных и очень важных новостей.
		ОписаниеНовостей.Вставить("СписокНовостейИзменениеПризнака_ОповещениеВключено", Новый СписокЗначений);
		// Панель контекстных новостей.
		ОписаниеНовостей.Вставить("НовостиДляПанелиКонтекстныхНовостей", Новый Массив); // Массив структур.
		ОписаниеНовостей.Вставить("КоличествоНовостейДляПанелиКонтекстныхНовостей", 0);
		ОписаниеНовостей.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", 0);
		ОписаниеНовостей.Вставить("СпособОтображенияПанелиКонтекстныхНовостей", "Скрыть");
		ОписаниеНовостей.Вставить("ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей", Ложь);
		ОписаниеНовостей.Вставить("ШрифтПанелиКонтекстныхНовостей", Новый Шрифт());
		ОписаниеНовостей.Вставить("ВидимостьПанелиКонтекстныхНовостей", Истина); // ПанельКонтекстныхНовостей.
		ОписаниеНовостей.Вставить("ДатаОтключенияПанелиКонтекстныхНовостей", '00010101'); // ПанельКонтекстныхНовостей.
		ОписаниеНовостей.Вставить("ДатаПоследнейНовостиПанелиКонтекстныхНовостей", '00010101'); // ПанельКонтекстныхНовостей.

	Форма.Новости = ОписаниеНовостей;

	МассивСтруктурНовостей = Новый Массив;

#КонецОбласти

#Область Проверки

	Если НЕ ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		// Панель контекстных новостей.
		// Если в форме планировалось использовать панель контекстных новостей, то найти и скрыть группу для их отображения.
		// Панель контекстных новостей.
		Если (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей")
				ИЛИ (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
				ИЛИ (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание")
				ИЛИ (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда
			НайденнаяКнопка = Форма.Элементы.Найти("ФормаВидимостьПанелиКонтекстныхНовостей");
			Если НайденнаяКнопка <> Неопределено Тогда
				НайденнаяКнопка.Видимость = Ложь;
			КонецЕсли;
			НайденнаяГруппа = Форма.Элементы.Найти("ПанельКонтекстныхНовостей");
			Если НайденнаяГруппа <> Неопределено Тогда
				НайденнаяГруппа.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ТипЗнчИдентификаторМетаданных          = ТипЗнч(ИдентификаторМетаданных);
	ТипЗнчИдентификаторФормы               = ТипЗнч(ИдентификаторФормы);
	ТипЗнчИдентификаторыСобытийПриОткрытии = ТипЗнч(ИдентификаторыСобытийПриОткрытии);

	// Валидация входящих параметров: журнал регистрации
	Если ИдентификаторМетаданных <> Неопределено
			И ТипЗнчИдентификаторМетаданных <> ТипСтрока Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: параметр [ИдентификаторМетаданных] (%1) недопустимого типа [%2].'"),
				ИдентификаторМетаданных,
				ТипЗнчИдентификаторМетаданных);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчИдентификаторМетаданных = ТипСтрока)
			И (СтрДлина(ИдентификаторМетаданных) > 50) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: параметр [ИдентификаторМетаданных] (%1) недопустимой длины Строка([%2]).'"),
				ИдентификаторМетаданных,
				СтрДлина(ИдентификаторМетаданных));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если ИдентификаторФормы <> Неопределено
			И ТипЗнчИдентификаторФормы <> ТипСтрока Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: параметр [ИдентификаторФормы] (%1) недопустимого типа [%2].'"),
				ИдентификаторФормы,
				ТипЗнчИдентификаторФормы);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчИдентификаторФормы = ТипСтрока)
			И (СтрДлина(ИдентификаторФормы) > 50) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: параметр [ИдентификаторФормы] (%1) недопустимой длины Строка([%2]).'"),
				ИдентификаторФормы,
				СтрДлина(ИдентификаторФормы));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если ИдентификаторыСобытийПриОткрытии <> Неопределено
			И ТипЗнчИдентификаторыСобытийПриОткрытии <> ТипСтрока
			И ТипЗнчИдентификаторыСобытийПриОткрытии <> ТипМассив Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: параметр [ИдентификаторыСобытийПриОткрытии] (%1) недопустимого типа [%2].'"),
				ИдентификаторыСобытийПриОткрытии,
				ТипЗнчИдентификаторыСобытийПриОткрытии);
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчИдентификаторыСобытийПриОткрытии = ТипСтрока)
			И (СтрДлина(ИдентификаторыСобытийПриОткрытии) > 50) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: параметр [ИдентификаторыСобытийПриОткрытии] (%1) недопустимой длины Строка([%2]).'"),
				ИдентификаторыСобытийПриОткрытии,
				СтрДлина(ИдентификаторыСобытийПриОткрытии));
		ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Валидация входящих параметров: журнал регистрации
	Если (ТипЗнчИдентификаторыСобытийПриОткрытии = ТипМассив) Тогда
		ЕстьОшибки = Ложь;
		Для Каждого ТекущийИдентификатор Из ИдентификаторыСобытийПриОткрытии Цикл
			Если ТипЗнч(ТекущийИдентификатор) <> ТипСтрока Тогда
				ЕстьОшибки = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: в параметре [ИдентификаторыСобытийПриОткрытии] типа [Массив] обнаружен элемент (%1) недопустимого типа [%2].'"),
						ТекущийИдентификатор,
						ТипЗнч(ТекущийИдентификатор));
				ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
			КонецЕсли;
			Если (ТипЗнч(ТекущийИдентификатор) = ТипСтрока)
					И (СтрДлина(ТекущийИдентификатор) > 50) Тогда
				ЕстьОшибки = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='КонтекстныеНовости_ПриСозданииНаСервере: в параметре [ИдентификаторыСобытийПриОткрытии] типа [Массив] обнаружен элемент (%1) недопустимой длины Строка([%2]).'"),
						ТекущийИдентификатор,
						СтрДлина(ТекущийИдентификатор));
				ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибки = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Если СоздаватьРеквизитФормы = Истина Тогда
		ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Новости", Новый ОписаниеТипов(Новый Массив))); // Произвольный тип
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

	Если НастройкиЗаполненияНовостямиЭталон.ПолучатьНовостиНаСервере = Истина Тогда
		НастройкиПолученияНовостей = Новый Структура("ПолучатьКатегорииНовостей", НастройкиЗаполненияНовостямиЭталон.ПолучатьКатегорииНовостей);
		СтруктураКонтекстныхНовостей = ОбработкаНовостейСлужебный.ПолучитьКонтекстныеНовостиДляФормы(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);

		МассивСтруктурНовостей = СтруктураКонтекстныхНовостей.Новости;

		ЗаполнитьЗначенияСвойств(
			Форма.Новости,
			СтруктураКонтекстныхНовостей,
			"КоличествоНовостей, КоличествоНепрочитанныхНовостей, КоличествоОченьВажныхНовостейПриОткрытии,
				|КоличествоПостоянныхНовостей, КоличествоВажныхНовостейПриОткрытии,
				|МассивСтруктурВажныхНовостей, МассивСтруктурПостоянныхНовостей");

		Если НастройкиЗаполненияНовостямиЭталон.ХранитьМассивНовостейТолькоНаСервере = Истина Тогда
			Форма.Новости.АдресМассиваНовостей = ПоместитьВоВременноеХранилище(
				СтруктураКонтекстныхНовостей.Новости,
				Форма.УникальныйИдентификатор); // Удалять после закрытия новости
			Форма.Новости.Новости = Неопределено;
		Иначе
			Форма.Новости.Новости = МассивСтруктурНовостей;
		КонецЕсли;

	КонецЕсли;

	// Для информации: добавление кнопки происходит примерно в 5 раз быстрее, чем добавление подменю.
	// Можно создавать одновременно кнопку / подменю и панель контекстных новостей.
	СозданнаяКнопкаИлиПодменюНовости = Неопределено;
	Если НастройкиОтображенияНовостейЭталон.Использование = Истина Тогда
		Форма.Новости.Вставить("СпособОтображенияПанелиКонтекстныхНовостей",
			НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей);
		// Кнопка / подменю.
		Если НастройкиОтображенияНовостейЭталон.ТипЗначенияКомандыНовостей = Тип("КнопкаФормы") Тогда
			СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьКнопкуПросмотраСпискаНовостей(
				Форма,
				НастройкиОтображенияНовостейЭталон.ЭлементФормыДляРазмещенияКомандыНовостей, // Куда выводить кнопку
				МассивСтруктурНовостей); // Массив структур (таблица) новостей, для определения количества новостей. Пустой, если на сервере не происходит заполнение новостями.
		ИначеЕсли НастройкиОтображенияНовостейЭталон.ТипЗначенияКомандыНовостей = Тип("ГруппаФормы") Тогда
			// Если новости НЕ были получены на сервере или НЕ хранятся на клиенте (а хранится только адрес временного хранилища),
			// то нельзя создавать подменю, т.к. на клиенте невозможно будет обработать нажатия на элементы подменю.
			Если (НастройкиЗаполненияНовостямиЭталон.ПолучатьНовостиНаСервере = Ложь)
					ИЛИ (НастройкиЗаполненияНовостямиЭталон.ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда
				СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьКнопкуПросмотраСпискаНовостей(
					Форма,
					НастройкиОтображенияНовостейЭталон.ЭлементФормыДляРазмещенияКомандыНовостей, // Куда выводить кнопку
					МассивСтруктурНовостей); // Массив структур (таблица) новостей, для определения количества новостей. Пустой, если на сервере не происходит заполнение новостями.
			Иначе
				СозданнаяКнопкаИлиПодменюНовости = ОбработкаНовостейКлиентСервер.ДобавитьПодменюПросмотраСпискаНовостей(
					Форма,
					НастройкиОтображенияНовостейЭталон.ЭлементФормыДляРазмещенияКомандыНовостей, // Куда выводить кнопку
					МассивСтруктурНовостей); // Массив структур (таблица) новостей, для создания пунктов меню. Пустой, если на сервере не происходит заполнение новостями.
			КонецЕсли;
		Иначе
			// Ничего не создавать.
		КонецЕсли;
		// Панель контекстных новостей.
		// Новости должны быть уже получены. В противном случае не отображать панель контекстных новостей.
		Если (НастройкиЗаполненияНовостямиЭталон.ПолучатьНовостиНаСервере = Истина) Тогда
			Если (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей")
					ИЛИ (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
					ИЛИ (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание")
					ИЛИ (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда

				Если Форма.Элементы.Найти("ФормаВидимостьПанелиКонтекстныхНовостей") = Неопределено Тогда
					Форма.Новости.Вставить("ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей", Ложь);
				Иначе
					Форма.Новости.Вставить("ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей", Истина);
				КонецЕсли;
				Если Форма.Элементы.Найти("ПанельКонтекстныхНовостей_СписокНовостей") = Неопределено Тогда
					Форма.Новости.Вставить("ШрифтПанелиКонтекстныхНовостей", Новый Шрифт);
				Иначе
					Форма.Новости.Вставить("ШрифтПанелиКонтекстныхНовостей", Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Шрифт);
				КонецЕсли;

				// Панель контекстных новостей должна быть вставлена в форму со всеми элементами управления,
				//  т.к. программное добавление элементов управления занимает очень много времени.
				// Обязательные элементы управления:
				// - ПанельКонтекстныхНовостей (группа формы);
				// - ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево (декорация картинка);
				// - ПанельКонтекстныхНовостей_КартинкаНовостиИнформация (декорация картинка);
				// - ПанельКонтекстныхНовостей_СписокНовостей (декорация форматированная строка);
				// - ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо (декорация картинка);
				// - ПанельКонтекстныхНовостей_КартинкаВесьСписок (декорация картинка);
				// - ПанельКонтекстныхНовостей_КартинкаЗакрыть (декорация картинка).
				// Необязательные элементы управления:
				// - ФормаВидимостьПанелиКонтекстныхНовостей (кнопка формы для команды "ВидимостьПанелиКонтекстныхНовостей").

				СостояниеПанелиКонтекстныхНовостей = ОбработкаНовостейСлужебный.ПолучитьСостояниеПанелиКонтекстныхНовостей(
					ИдентификаторМетаданных,
					ИдентификаторФормы);
				Форма.Новости.Вставить("ВидимостьПанелиКонтекстныхНовостей", (СостояниеПанелиКонтекстныхНовостей.Видимость = Истина));
				Форма.Новости.Вставить("ДатаОтключенияПанелиКонтекстныхНовостей", СостояниеПанелиКонтекстныхНовостей.ДатаОтключения);
				Форма.Новости.Вставить("ДатаПоследнейНовостиПанелиКонтекстныхНовостей", СостояниеПанелиКонтекстныхНовостей.ДатаПоследнейНовости);

				Если (НастройкиОтображенияНовостейЭталон.СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда
					// Если выбран вариант "Скрыть", то скрыть и саму панель и кнопку управления видимостью панели.
					// Также для этого варианта не надо заполнять таблицу новостей.
					Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = Ложь;
					Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
						Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Видимость = Ложь;
					КонецЕсли;
				Иначе

					// Таблица потом будет преобразована в массив структур.
					ТаблицаНовостейДляПанелиКонтекстныхНовостей = Новый ТаблицаЗначений;
					К = ТаблицаНовостейДляПанелиКонтекстныхНовостей.Колонки;
						К.Добавить("НомерСтрокиНовости"     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
						К.Добавить("Новость"                , Новый ОписаниеТипов("СправочникСсылка.Новости"));
						К.Добавить("НовостьНаименование"    , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
						К.Добавить("НовостьПодзаголовок"    , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
						К.Добавить("ДатаПубликации"         , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
						К.Добавить("Важность"               , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
						К.Добавить("Актуальность"           , Новый ОписаниеТипов("Булево"));
						К.Добавить("ПоказыватьВФормеОбъекта", Новый ОписаниеТипов("Булево"));
						К.Добавить("ЭтоПостояннаяНовость"   , Новый ОписаниеТипов("Булево"));
						К.Добавить("Прочтена"               , Новый ОписаниеТипов("Булево"));
						К.Добавить("ОповещениеВключено"     , Новый ОписаниеТипов("Булево"));
						К.Добавить("ДатаНачалаОповещения"   , Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
						К.Добавить("СпособОповещения"       , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(25, ДопустимаяДлина.Переменная)));

					СтандартнаяОбработка = Истина;
					ИнтеграцияПодсистемБИП.ПанельКонтекстныхНовостей_ВыбратьНовости(
						Форма,
						ТаблицаНовостейДляПанелиКонтекстныхНовостей,
						СтандартнаяОбработка);
					ОбработкаНовостейПереопределяемый.ПанельКонтекстныхНовостей_ВыбратьНовости(
						Форма,
						ТаблицаНовостейДляПанелиКонтекстныхНовостей,
						СтандартнаяОбработка);
					Если СтандартнаяОбработка <> Ложь Тогда
						// Новости берутся из Форма.Новости.Новости (он же МассивСтруктурНовостей).
						// Стандартный алгоритм такой:
						// - Брать только новости с установленными признаками "Актуальность" и "ПоказыватьВФормеОбъекта"
						//    и "СпособОповещения" <> "Отключено".
						// - Сортировать так:
						//   - вначале "ЭтоПостояннаяНовость" = Истина, по убыванию по "ДатаПубликации";
						//   - далее "ЭтоПостояннаяНовость" = Ложь, по убыванию по "ДатаПубликации".
						// В привязке к метаданным новость может встречаться несколько раз (например, быть привязанной к нескольким событиям),
						//  но в панели контекстных новостей надо отображать только одну новость - первую.
						Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
							Если (ТекущаяНовость.Актуальность = Истина)
									И (ТекущаяНовость.ПоказыватьВФормеОбъекта = Истина)
									// {При добавлении способов оповещения исправлять здесь}.
									И (ТекущаяНовость.СпособОповещения <> "Отключено") Тогда
								НайденнаяСтрока = ТаблицаНовостейДляПанелиКонтекстныхНовостей.Найти(ТекущаяНовость.Новость, "Новость");
								Если НайденнаяСтрока = Неопределено Тогда
									НоваяСтрока = ТаблицаНовостейДляПанелиКонтекстныхНовостей.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяНовость);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если ТаблицаНовостейДляПанелиКонтекстныхНовостей.Количество() > 0 Тогда
							ТаблицаНовостейДляПанелиКонтекстныхНовостей.Сортировать("ЭтоПостояннаяНовость УБЫВ, ДатаПубликации УБЫВ");
						КонецЕсли;
					КонецЕсли;

					Форма.Новости.Вставить("КоличествоНовостейДляПанелиКонтекстныхНовостей", ТаблицаНовостейДляПанелиКонтекстныхНовостей.Количество());
					Форма.Новости.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", 0);

					Если ТаблицаНовостейДляПанелиКонтекстныхНовостей.Количество() > 0 Тогда
						Форма.Новости.Вставить("НовостиДляПанелиКонтекстныхНовостей",
							ОбщегоНазначения.ТаблицаЗначенийВМассив(
								ТаблицаНовостейДляПанелиКонтекстныхНовостей)); // Массив структур.
					КонецЕсли;

					// Панель контекстных новостей может быть скрыта пользователем.
					// Также она может быть скрыта, если нет новостей.
					Если (Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей = 0) Тогда
						Форма.Новости.Вставить("ВидимостьПанелиКонтекстныхНовостей", Ложь);
					КонецЕсли;

					ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

#КонецОбласти

#Область Завершение

	ИнтеграцияПодсистемБИП.ДополнительноОбработатьФормуПриСозданииНаСервере(
		Форма,
		НастройкиЗаполненияНовостями,
		ИдентификаторыСобытийПриОткрытии,
		СозданнаяКнопкаИлиПодменюНовости,
		МассивСтруктурНовостей);
	ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПриСозданииНаСервере(
		Форма,
		НастройкиЗаполненияНовостями,
		ИдентификаторыСобытийПриОткрытии,
		СозданнаяКнопкаИлиПодменюНовости,
		МассивСтруктурНовостей);

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область Настройки

// Установка настроек чтения новостей.
//
// Параметры:
//  Настройки - Структура - структура настроек. Список ключей см. в ХранилищеНастроек.НастройкиНовостей.ПровестиВалидациюНастроек
//    для НастройкиПоказаНовостейНастроенныеАдминистратором.
//
Процедура УстановитьНастройкиПоказаНовостей(Настройки) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипЧисло     = Тип("Число");

	УстановитьПривилегированныйРежим(Истина);

	НастройкиЭталон = Новый Структура;
		НастройкиЭталон.Вставить("СписокНовостей_ИнтервалАвтообновления", Неопределено);
	Если ТипЗнч(Настройки) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(НастройкиЭталон, Настройки);
	КонецЕсли;

	Если ТипЗнч(НастройкиЭталон.СписокНовостей_ИнтервалАвтообновления) = ТипЧисло Тогда

		Если ОбщегоНазначения.РазделениеВключено()
				И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			// Устанавливать именно "...ДляРедактирования", чтобы значение "0" принималось как валидное.
			// Программа в разделенном режиме.
			ХранилищаНастроек.НастройкиНовостей.Сохранить(
				"НастройкиПоказаНовостейНастроенныеАдминистраторомДляОбластиДанныхДляРедактирования", // Идентификатор.
				"",
				Настройки);
		Иначе
			ХранилищаНастроек.НастройкиНовостей.Сохранить(
				"НастройкиПоказаНовостейНастроенныеАдминистратором", // Идентификатор.
				"",
				Настройки);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПоискДанных

// Функция возвращает ссылку на ленту новостей по ее коду.
//
// Параметры:
//  ЛентаНовостейКод - Строка (20) - код ленты новостей.
//
// Возвращаемое значение:
//   СправочникСсылка.ЛентыНовостей - ссылка на ленту новостей или пустая ссылка, если нет ленты новостей с таким кодом.
//
Функция ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод);

КонецФункции

// Возвращает массив отключенных лент новостей.
// Вынесено из Хранилища настроек.НастройкиНовостей, т.к. выполняется очень часто для контекстных новостей.
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя, для которого необходимо рассчитать данные.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ЛентыНовостей - Массив отключенных лент новостей.
//
Функция ПолучитьОтключенныеЛентыНовостей(ИмяПользователяИБ) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьОтключенныеЛентыНовостей(ИмяПользователяИБ);

КонецФункции

// Возвращает массив лент новостей, на которые пользователь "подписан" любым способом - самостоятельно или принудительно.
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя, для которого необходимо рассчитать данные.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ЛентыНовостей - Массив лент новостей, на которые пользователь
//    или подписан самостоятельно или подписан принудительно.
//
Функция ПолучитьЛентыНовостейПодпискаВключена(ИмяПользователяИБ) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьЛентыНовостейПодпискаВключена(ИмяПользователяИБ);

КонецФункции

// Возвращает массив лент новостей, на которые пользователь "подписан" самостоятельно (но НЕ принудительно).
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя, для которого необходимо рассчитать данные.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ЛентыНовостей - Массив лент новостей, на которые пользователь
//    подписан самостоятельно (но НЕ принудительно).
//
Функция ПолучитьЛентыНовостейПодпискаВключенаПользователем(ИмяПользователяИБ) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьЛентыНовостейПодпискаВключенаПользователем(ИмяПользователяИБ);

КонецФункции

// Возвращает массив лент новостей, на которые пользователь может "подписаться", а сейчас отписан.
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя, для которого необходимо рассчитать данные.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ЛентыНовостей - Массив лент новостей, на которые пользователь
//    может "подписаться", а сейчас отписан.
//
Функция ПолучитьЛентыНовостейПодпискаОтключенаПользователем(ИмяПользователяИБ) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьЛентыНовостейПодпискаОтключенаПользователем(ИмяПользователяИБ);

КонецФункции

// Возвращает настройки подписки и оповещений лент новостей.
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  Пользователь - Строка, СправочникСсылка.Пользователи - Имя пользователя, для которого необходимо рассчитать данные
//                                                         или ссылка на пользователя;
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей, Неопределено - для какой ленты новостей получать настройки,
//                                                         или для всех (если Неопределено).
//
// Возвращаемое значение:
//  Массив - Массив структур с ключами:
//    * КодЛентыНовостей       - Строка - код ленты новостей;
//    * ЛентаНовостей          - СправочникСсылка.ЛентыНовостей;
//    * ОбязательныйКанал      - Булево;
//    * ПодпискаПринудительно  - Строка - возможные значения "Подписан", "Отписан", "Неопределено";
//    * ПодпискаСамостоятельно - Строка - возможные значения "Подписан", "Отписан";
//    * СпособОповещения       - ПеречислениеСсылка.СпособыОповещенияПользователяОНовостях.
//
Функция ПолучитьНастройкиЛентНовостей(Пользователь, ЛентаНовостей = Неопределено) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьНастройкиЛентНовостей(Пользователь, ЛентаНовостей);

КонецФункции

// Возвращает настройки оповещения ленты новостей.
// При изменении настроек лент новостей необходимо сбросить кэш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого необходимо получить способ оповещения;
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей - для какой ленты новостей получать способ оповещения.
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//    * КодЛентыНовостей       - Строка - код ленты новостей;
//    * ЛентаНовостей          - СправочникСсылка.ЛентыНовостей;
//    * СпособОповещения       - ПеречислениеСсылка.СпособыОповещенияПользователяОНовостях.
//
Функция ПолучитьНастройкиОповещенияЛентыНовостей(Пользователь, ЛентаНовостей) Экспорт

	Возврат ОбработкаНовостейПовтИсп.ПолучитьНастройкиОповещенияЛентыНовостей(Пользователь, ЛентаНовостей);

КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Функция возвращает результат - можно ли работать с новостями.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями.
//
Функция РазрешенаРаботаСНовостями() Экспорт

	Возврат ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями();

КонецФункции

// Функция возвращает результат - можно ли работать с новостями текущему пользователю.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь
//   И задан параметр сеанса ТекущийПользователь (т.е. мы не зашли в базу с отключенным списком пользователей).
// Если сеанс запущен без разделителей (пользователь АдминистраторСистемы зашел в область данных),
//   то для него разрешить работу с новостями.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями текущему пользователю.
//
Функция РазрешенаРаботаСНовостямиТекущемуПользователю() Экспорт

	Возврат ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю();

КонецФункции

// Функция возвращает результат - можно ли работать с новостями через интернет.
// Это результат функциональной опции "РазрешенаРаботаСНовостямиЧерезИнтернет"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если разрешена работа с новостями через интернет, ЛОЖЬ, если можно работать только с локальными новостями.
//
Функция РазрешенаРаботаСНовостямиЧерезИнтернет() Экспорт

	Возврат ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЛогИОтладка

// АПК:142-выкл 5 необязательных параметров.

// Процедура записывает сообщение в журнал регистрации.
//
// Параметры:
//  ИмяСобытия                      - строка;
//  ИдентификаторШага               - строка;
//  УровеньРегистрации              - строковое представление константы УровеньЖурналаРегистрации;
//  ОбъектМетаданных                - строковое представление объекта метаданных;
//  Данные                          - данные;
//  Комментарий                     - строка - произвольный комментарий;
//  ВестиПодробныйЖурналРегистрации - Булево - признак записи незначащих событий (Информации и Примечания).
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации = "Ошибка", // Идентификатор.
			ОбъектМетаданных = "",
			Данные = Неопределено,
			Комментарий = "",
			ВестиПодробныйЖурналРегистрации = Ложь)

	ОбработкаНовостейСлужебный.ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации, // Идентификатор.
			ОбъектМетаданных,
			Данные,
			Комментарий,
			ВестиПодробныйЖурналРегистрации);

КонецПроцедуры

// АПК:142-вкл

// Процедура записывает ошибку в журнал регистрации с подробностями валидации входящих параметров.
//
// Параметры:
//  ТекстСообщения - Строка - сообщение для журнала регистрации.
//
Процедура ЗаписатьОшибкуВалидацииПараметров(ТекстСообщения)

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	ОбработкаНовостейСлужебный.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Валидация данных'", КодОсновногоЯзыка), // ИмяСобытия.
		НСтр("ru='Новости. Валидация входящих параметров'", КодОсновногоЯзыка), // ИдентификаторШага.
		УровеньЖурналаРегистрации.Ошибка, // Идентификатор.
		Неопределено, // ОбъектМетаданных
		ТекущаяУниверсальнаяДатаВМиллисекундах(), // Данные // Для уникальности
		ТекстСообщения, // Комментарий
		ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#Область ЛогИОтладкаЛокальный

// Возвращает структуру контекста выполнения.
//
// Параметры:
//  НаименованиеМетода           - Строка - имя метода;
//  ЗаписыватьВЖурналРегистрации - Булево - если Истина, то в конце метода будет запись в журнал регистрации.
//
// Возвращаемое значение:
//   Структура - см. в коде.
//
Функция НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации = Ложь)

	Результат = ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации);

	// При создании нового контекста выполнения первый же шаг - показать основное состояние системы.
	ДобавитьШагВыполнения(Результат, "СостояниеСистемы", 0, ОбработкаНовостейПовтИсп.ОписаниеСостоянияСистемы());

	Возврат Результат;

КонецФункции

// Регистрирует начало шага выполнения в контексте выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//
Процедура НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага)

	ОбработкаНовостейКлиентСервер.НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага);

КонецПроцедуры

// Регистрирует начало шага выполнения в контексте выполнения и возвращает подготовленный контекст для вложенного вызова другого метода.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполнения;
//  ИдентификаторШага           - Строка - Произвольный идентификатор.
//  НаименованиеМетодаВложенный - Строка - Произвольный идентификатор.
//
Функция НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, НаименованиеМетодаВложенный = "")

	// Вместо двух идентификаторов:
	// - "Основные:ЦиклПоВидамСоединений",
	// - НаименованиеМетода + "/ЦиклПоВидамСоединений");
	// кажется, что для чтения логов достаточно одного идентификатора:
	// - НаименованиеМетода + "/ЦиклПоВидамСоединений");
	Если ПустаяСтрока(НаименованиеМетодаВложенный) Тогда
		Возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, ИдентификаторШага);
	Иначе
		Возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, НаименованиеМетодаВложенный);
	КонецЕсли;

КонецФункции

// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполнения;
//  КодРезультата               - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата          - Строка, Массив - произвольное описание результата шага.
//                                  Массив будет преобразован в строку с разделителями;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено)

	Возврат ОбработкаНовостейКлиентСервер.ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения);

КонецФункции

// Регистрирует и начало и завершение шага выполнения и возвращает этот шаг.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//  КодРезультата      - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата - Строка, Массив - произвольное описание результата шага. Массив будет преобразован в строку с разделителями;
//  ВремяНачала        - Число - Время начала выполнения (ТекущаяУниверсальнаяДатаВМиллисекундах).
//                          Если не указано, то общее время выполнения шага = 0.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ДобавитьШагВыполнения(КонтекстВыполнения, ИдентификаторШага, КодРезультата, ОписаниеРезультата, ВремяНачала = 0)

	Возврат ОбработкаНовостейКлиентСервер.ДобавитьШагВыполнения(
		КонтекстВыполнения, ИдентификаторШага, КодРезультата, ОписаниеРезультата, ВремяНачала);

КонецФункции

// Записывает содержимое контекста выполнения в журнал регистрации.
//
// Параметры:
//  КонтекстВыполнения   - Структура - см. НовыйКонтекстВыполнения();
//  ПринудительнаяЗапись - Булево - если Истина, то КонтекстВыполнения.ЗаписыватьВЖурналРегистрации не проверяется.
//
Процедура ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения, ПринудительнаяЗапись = Ложь)

	ОбработкаНовостейСлужебный.ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения, ПринудительнаяЗапись);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
