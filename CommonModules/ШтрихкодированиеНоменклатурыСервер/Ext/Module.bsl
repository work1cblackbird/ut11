
#Область ПрограммныйИнтерфейс

// Процедура обрабатывает введенные штрихкоды:
// - добавляет введенные штрихкоды в табличную часть документа;
// - вызывает помощник создания штрихкода, если он не был найден.
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма для которой будут обработаны введенные штрихкоды. 
//   Объект - ДанныеФормыСтруктура - объект формы.
//   СтруктураПараметров - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
//   КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ОбработатьШтрихкоды(Форма, Объект, СтруктураПараметров, КэшированныеЗначения) Экспорт
	
	// Если нужно будет изменять количество, то данные формы нужно заблокировать
	// Если заблокировать не удастся - вылетит исключение.
	Если СтруктураПараметров.ИзменятьКоличество
		И СтруктураПараметров.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ИспользоватьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");
	ИмяКолонкиУпаковка           = СтруктураПараметров.ИмяКолонкиУпаковка;
	
	Модифицированность = Ложь;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;

	КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	Если ТипЗнч(СтруктураПараметров.Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = СтруктураПараметров.Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(СтруктураПараметров.Штрихкоды);
	КонецЕсли;
	
	НеЗакешированныеРанееШтрихкоды = Новый Массив;
	
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		ТекШтрихкод.Штрихкод = ВРег(СокрЛП(ТекШтрихкод.Штрихкод));
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод, ПрефиксыВесовыхШтрихкодов);
		Если Не ЗначениеЗаполнено(КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод])
			Или КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод].НеизвестныйШтрихкод Тогда
			НеЗакешированныеРанееШтрихкоды.Добавить(ТекШтрихкод.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если НеЗакешированныеРанееШтрихкоды.Количество() > 0 Тогда
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		Если ИспользоватьУпаковочныеЛисты
			И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
			Документы.УпаковочныйЛист.ДополнитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрокСНаборами = Новый Массив;
	МассивСтрокСУпЛистамиДляОбработки = Новый Массив;
	ТекущаяСтрока       = Неопределено;
	
	Если СтруктураПараметров.ПараметрыПроверкиАссортимента <> Неопределено Тогда
		ПроверятьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(
			СтруктураПараметров.ПараметрыПроверкиАссортимента.Склад, 
			СтруктураПараметров.ПараметрыПроверкиАссортимента.Дата);
		СтруктураПараметров.ПараметрыПроверкиАссортимента.Вставить("ПроверятьАссортимент", ПроверятьАссортимент);
	КонецЕсли;
	
	Назначения = Назначения(Объект, СтруктураПараметров, КэшированныеЗначения.Штрихкоды);
	
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		
		ДобавляемыеДанные  = КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод];
		
		Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
			
			Если Не СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
				ТекШтрихкод = ОбщегоНазначения.СкопироватьРекурсивно(ТекШтрихкод, Ложь);
				СтруктураПараметров.НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор
			И Не СоответствуетУсловиям(ДобавляемыеДанные, СтруктураПараметров) Тогда
				Продолжить;
		КонецЕсли;
		
		Если ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			
			ДобавляемыеДанные.КоличествоПоШтрихкоду = ТекШтрихкод.Количество;
			ДобавляемыеДанные.ШтрихкодНеИзКэша      = НеЗакешированныеРанееШтрихкоды.Найти(ТекШтрихкод.Штрихкод) <> Неопределено;
			РежимОбработки = "Товар";
			
			СтрокаТЧ = ДобавитьИзменитьСтрокуВТЧ(Объект,
				                                 СтруктураПараметров,
				                                 ДобавляемыеДанные,
				                                 РежимОбработки,
				                                 КэшированныеЗначения,
				                                 МассивСтрокСУпЛистамиДляОбработки,
				                                 Назначения);
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				Если СтруктураПараметров.ШтрихкодыВТЧ
					И СтруктураПараметров.ИзменятьКоличество
					И Не ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
					СтрокаТЧ.ШтрихкодНеОпределен = 0;
				КонецЕсли;
				
				ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
				Модифицированность = Истина;
				
				// Добавим тару по отсканированной строке ТЧ
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару")
					И СтруктураПараметров.ДополнятьТарой
					И СтруктураПараметров.ИзменятьКоличество
					И Не СтруктураПараметров.НеИспользоватьУпаковки
					И Не СтруктураПараметров.ТолькоУслуги
					И Не СтруктураПараметров.ТолькоРаботы
					И Не СтруктураПараметров.ТолькоТара Тогда
					
					ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ[ИмяКолонкиУпаковка]); 
					
					Для Каждого СтрТабл Из ТаблицаТары Цикл
						ДобавляемыеДанные = ОбработкаТабличнойЧастиКлиентСервер.СтруктураКешируемойИнформацииПоШтрихкоду();
						ЗаполнитьЗначенияСвойств(ДобавляемыеДанные,СтрТабл);
						ДобавляемыеДанные.КоличествоПоШтрихкоду = ТекШтрихкод.Количество;
						ДобавляемыеДанные.НеизвестныйШтрихкод = Ложь;
						
						Если Не СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
							И ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
							РежимОбработки = "ТараПоСтрокеССериейБезУвеличенияКоличества"
						Иначе
							РежимОбработки = "Тара";
						КонецЕсли;
						
						СтрокаТЧ = ДобавитьИзменитьСтрокуВТЧ(Объект,
							                                СтруктураПараметров,
							                                ДобавляемыеДанные,
							                                РежимОбработки,
							                                КэшированныеЗначения);
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ПроверитьАссортимент(Объект, СтруктураПараметров, ДобавляемыеДанные) Тогда
				
				ДобавляемыеКомплектующие = Новый Массив;
				ОшибкаДобавленияКомплектующих = Ложь;
				
				Комплектующие = Комплектующие(ДобавляемыеДанные.Номенклатура, ДобавляемыеДанные.Характеристика);
				
				Если Не НаборСоответствуетУсловиям(ДобавляемыеДанные, СтруктураПараметров, Комплектующие) Тогда
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаКомплектующие Из Комплектующие Цикл
					
					Если Не СоответствуетУсловиям(СтрокаКомплектующие, СтруктураПараметров) Тогда
						ОшибкаДобавленияКомплектующих = Истина;
						Продолжить;
					КонецЕсли;
					
					СтрокаКомплектующие.КоличествоПоШтрихкоду = ТекШтрихкод.Количество;
					СтрокаКомплектующие.ШтрихкодНеИзКэша      = Истина;
					РежимОбработки = "КомплектующаяНабора";
					ДобавляемыеДанные.НеизвестныйШтрихкод = Ложь;

					СтрокаТЧ = ДобавитьИзменитьСтрокуВТЧ(Объект,
						                                 СтруктураПараметров,
						                                 СтрокаКомплектующие,
						                                 РежимОбработки,
						                                 КэшированныеЗначения);
					Если СтрокаТЧ <> Неопределено Тогда
						Данные = Новый Структура;
						Данные.Вставить("СтрокаТЧ", СтрокаТЧ);
						Данные.Вставить("ДобавляемыеДанные", СтрокаКомплектующие);
						ДобавляемыеКомплектующие.Добавить(Данные);
					Иначе
						ОшибкаДобавленияКомплектующих = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ОшибкаДобавленияКомплектующих
					И (ДобавляемыеДанные.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
					ИЛИ ДобавляемыеДанные.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
					Для Каждого Данные Из ДобавляемыеКомплектующие Цикл
						Если Данные.ДобавляемыеДанные.ВыполненныеДействия.Добавлено Тогда
							ТабличнаяЧасть = Объект[СтруктураПараметров.ИмяТЧ]; // ДанныеФормыКоллекция - 
							ТабличнаяЧасть.Удалить(Данные.СтрокаТЧ);
						ИначеЕсли Данные.ДобавляемыеДанные.ВыполненныеДействия.Изменено Тогда
							Если Не СтруктураПараметров.НеИспользоватьУпаковки Тогда
								Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество]
									- Данные.ДобавляемыеДанные.КоличествоПоШтрихкоду;
							Иначе
								Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = Данные.СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество]
									- Данные.ДобавляемыеДанные.КоличествоПоШтрихкоду * Данные.ДобавляемыеДанные.Коэффициент;
							КонецЕсли;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Данные.СтрокаТЧ, СтруктураПараметров.СтруктураДействийСИзмененнымиСтроками, КэшированныеЗначения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЕстьИндексНабора = Неопределено;
					ЕстьНоменклатураНабора = Неопределено;
					Для Каждого Данные Из ДобавляемыеКомплектующие Цикл
						
						Если ЕстьИндексНабора = Неопределено Тогда
							ЕстьИндексНабора = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Данные.СтрокаТЧ, "ИндексНабора");
						КонецЕсли;
						
						Если ЕстьНоменклатураНабора = Неопределено Тогда
							ЕстьНоменклатураНабора = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Данные.СтрокаТЧ, "НоменклатураНабора");
						КонецЕсли;
						
						Если ЕстьИндексНабора
							И ЕстьНоменклатураНабора
							И ЗначениеЗаполнено(Данные.СтрокаТЧ.НоменклатураНабора)
						Тогда
							Данные.СтрокаТЧ.ИндексНабора = 1;
						КонецЕсли;
						
						МассивСтрокСНаборами.Добавить(Данные.СтрокаТЧ);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПараметров.РассчитыватьНаборы И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Валюта") Тогда
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Соглашение") Тогда
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("Дата", Объект.Дата);
			ПараметрыРасчета.Вставить("Валюта", Объект.Валюта);
			ПараметрыРасчета.Вставить("Соглашение", Объект.Соглашение);
			ПараметрыРасчета.Вставить("РассчитыватьНаборы", СтруктураПараметров.РассчитыватьНаборы);
			ПараметрыРасчета.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
		Иначе
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("Дата", Объект.Дата);
			ПараметрыРасчета.Вставить("Валюта", Объект.Валюта);
			ПараметрыРасчета.Вставить("ВидЦены", Объект.ВидЦены);
			ПараметрыРасчета.Вставить("РассчитыватьНаборы", СтруктураПараметров.РассчитыватьНаборы);
			ПараметрыРасчета.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
			
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Организация") Тогда
			ПараметрыРасчета.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		Если СтруктураПараметров.НеИспользоватьУпаковки
			И ЗначениеЗаполнено(СтруктураПараметров.ИмяКолонкиУпаковка) Тогда
			
			ПараметрКолонкиПоЗначению = Новый Структура(СтруктураПараметров.ИмяКолонкиУпаковка,
				Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			
			ПараметрыРасчета.Вставить("КолонкиПоЗначению", ПараметрКолонкиПоЗначению);
			
		КонецЕсли;

		ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			Объект[СтруктураПараметров.ИмяТЧ],
			МассивСтрокСНаборами, // Массив строк или структура отбора
			ПараметрыРасчета,
			СтруктураПараметров.СтруктураДействийСИзмененнымиСтроками);
	
	КонецЕсли;
	
	Если Модифицированность Тогда
		Форма.Модифицированность = Истина;
		Если ИспользоватьУпаковочныеЛисты
			И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
			Если СтруктураПараметров.ОтработатьИзменениеУпаковочныхЛистов Тогда
				УпаковочныеЛистыСервер.ДополнитьСтрокамиПоУпаковочнымЛистам(Форма, Объект[СтруктураПараметров.ИмяТЧ],
					МассивСтрокСУпЛистамиДляОбработки);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, Форма.ПараметрыУказанияСерий, МассивСтрокСУпЛистамиДляОбработки);
			КонецЕсли;
			УпаковочныеЛистыСервер.ПеренумероватьСтроки(Форма, Объект[СтруктураПараметров.ИмяТЧ], Форма.МаксимальныйНомерСтроки);
			УпаковочныеЛистыСервер.ЗаполнитьСлужебныеРеквизиты(Форма, Объект[СтруктураПараметров.ИмяТЧ],
					СтруктураПараметров.СтруктураДействийСоСтрокамиИзУпаковочныхЛистов, МассивСтрокСУпЛистамиДляОбработки);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры

// Функция - Право регистрации штрихкодов номенклатуры доступно
// 
// Возвращаемое значение:
// Булево - Истина, если доступно.
//
Функция ПравоРегистрацииШтрихкодовНоменклатурыДоступно() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
КонецФункции

// Возвращает ссылку на номенклатуру, соответствующую переданному штрихкоду или Неопределено, если штрихкод не зарегистрирован.
//
// Параметры:
//  ПараметрыОбработки - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
//  КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, Неопределено - Результат поиска номенклатуры по штрихкоду.
//
Функция НоменклатураПоШтрихкоду(ПараметрыОбработки, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	КонецЕсли;
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	НеЗакешированныеРанееШтрихкоды = Новый Массив;
	
	ПараметрыОбработки.Штрихкоды.Штрихкод = ВРег(СокрЛП(ПараметрыОбработки.Штрихкоды.Штрихкод));
	РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ПараметрыОбработки.Штрихкоды, ПрефиксыВесовыхШтрихкодов);
	Если Не ЗначениеЗаполнено(КэшированныеЗначения.Штрихкоды[ПараметрыОбработки.Штрихкоды.Штрихкод])
		Или КэшированныеЗначения.Штрихкоды[ПараметрыОбработки.Штрихкоды.Штрихкод].НеизвестныйШтрихкод Тогда
		НеЗакешированныеРанееШтрихкоды.Добавить(ПараметрыОбработки.Штрихкоды.Штрихкод);
	КонецЕсли;
	
	Если НеЗакешированныеРанееШтрихкоды.Количество() > 0 Тогда
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		
	КонецЕсли;
	
	ДобавляемыеДанные = КэшированныеЗначения.Штрихкоды[ПараметрыОбработки.Штрихкоды.Штрихкод];
	
	Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
		
		ПараметрыОбработки.НеизвестныеШтрихкоды.Добавить(ПараметрыОбработки.Штрихкоды);
		Возврат Неопределено;
		
	Иначе
		
		Возврат ДобавляемыеДанные.Номенклатура;
		
	КонецЕсли;
	
КонецФункции

// Раскладывает переданный массив считанных штрихкодов по типам штрихкодов.
//
// Параметры:
//	Штрихкоды - Массив Из см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода - коллекция описания состава штрихкода.
//
// Возвращаемое значение:
//	Структура - коллекция описания типов штрихкодов, содержащая следующие свойства:
//		* БезТипа - Массив из см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода.
//
Функция СтруктураПоТипамШтрихкодов(Штрихкоды) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("БезТипа", Новый Массив);
	
	Для Каждого СтрМас Из Штрихкоды Цикл
		
		Если Не НоменклатураЛокализация.ОтнестиШтрихкодКТипу(Результат, СтрМас) Тогда 
			Результат.БезТипа.Добавить(СтрМас);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#Область RFID

// Выполняется обработка считанных RFID-меток.
//
// Параметры:
//	ДанныеМеток					- Массив из Структура	- данные меток.
//	ПараметрыОбработки			- см. ПараметрыОбработкиСчитанныхRFID.
//	ТЧСерии						- ТабличнаяЧасть		- табличная часть Серии.
//	ИдентификаторТекущейСтроки	- Число					- идентификатор.
// 
// Возвращаемое значение:
//	Структура - содержит свойства:
//		* ЗакрытьФорму - Булево - признак необходимости закрыть форму
//		* ИдентификаторТекущейСтроки - Число, Неопределено - идентификатор
//		* ДанныеСерии - СтрокаТабличнойЧасти, Неопределено - строка с серией.
//
Функция ОбработатьСчитываниеRFID(ДанныеМеток, ПараметрыОбработки, ТЧСерии = Неопределено, ИдентификаторТекущейСтроки = Неопределено) Экспорт
	
	Если ПараметрыОбработки.ЗначенияПолейСвязи.Свойство("GTIN") Тогда
		GTIN = ПараметрыОбработки.ЗначенияПолейСвязи.GTIN;
	Иначе
		GTIN = ""
	КонецЕсли;
	
	НастройкиИспользованияСерий = ПараметрыОбработки.НастройкиИспользованияСерий;
	
	КорректноСчитанныеМетки = Новый Массив;
	
	Для Каждого Метка Из ДанныеМеток Цикл
		
		// Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			КорректноСчитанныеМетки.Добавить(Метка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗакрытьФорму", Ложь);
	Результат.Вставить("ИдентификаторТекущейСтроки", Неопределено);
	Результат.Вставить("ДанныеСерии", Неопределено);
	
	// От считывателя одна и та же метка могла приехать несколько раз
	// Поэтому сначала свернем приехавшие данные.
	ТаблицаМеток = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(КорректноСчитанныеМетки);
	ИменаКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаМеток.Свернуть(СтрСоединить(ИменаКолонок,","));
	
	Если ТаблицаМеток.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Считалось сразу несколько RFID-метки. Оставьте в зоне действия считывателя только одну метку и повторите считывание.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Результат;
	КонецЕсли;
	
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ТЧСерии = Неопределено Тогда
		ТЧСерии = Новый ТаблицаЗначений;
		ТЧСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТЧСерии.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		ТЧСерии.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		
		ТЧСерии.Колонки.Добавить("RFIDTID", Метаданные.ОпределяемыеТипы.RFIDTID.Тип);
		ТЧСерии.Колонки.Добавить("RFIDUser",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("RFIDEPC",ОбщегоНазначения.ОписаниеТипаСтрока(30));
		ТЧСерии.Колонки.Добавить("EPCGTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ТЧСерии.Колонки.Добавить("НужноЗаписатьМетку", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("ЗаполненRFIDTID", Новый ОписаниеТипов("Булево"));
		ТЧСерии.Колонки.Добавить("СтатусРаботыRFID", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		
		Для Каждого Описание Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			Если Описание.ИмяНастройки <> "ИспользоватьRFIDМеткиСерии"
				И Описание.Использование Тогда
				МетаданныеРеквизита = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(Описание.ИмяРеквизита);
				
				Если МетаданныеРеквизита = Неопределено Тогда
					ТекстИсключения = НСтр("ru = 'Реквизит %ИмяРеквизита% не найден среди реквизитов справочника """"Серии номенклатуры""""'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРеквизита%", Описание.ИмяРеквизита);
					
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				ТЧСерии.Колонки.Добавить(Описание.ИмяРеквизита, МетаданныеРеквизита.Тип);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяМетка = ТаблицаМеток[0];
	
	ОбрабатываемаяСтрока = ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, ПараметрыОбработки, ТЧСерии, ИдентификаторТекущейСтроки);	
	
	ПараметрыЗаполненияФлаговРаботыСМеткой = ПараметрыЗаполненияФлаговРаботыСМеткой();
	ПараметрыЗаполненияФлаговРаботыСМеткой.ТекущаяМетка = ТекущаяМетка;
	ПараметрыЗаполненияФлаговРаботыСМеткой.НастройкиИспользованияСерий = ПараметрыОбработки.НастройкиИспользованияСерий;
	ПараметрыЗаполненияФлаговРаботыСМеткой.ЗначенияПолейСвязи = ПараметрыОбработки.ЗначенияПолейСвязи;
	ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока, ПараметрыЗаполненияФлаговРаботыСМеткой);
	
	Если ОбщегоНазначенияУТ.РежимОтладки() Тогда
		СтрокаМетки = "";
		
		Для Каждого Колонка Из ТаблицаМеток.Колонки Цикл
			СтрокаМетки = СтрокаМетки + Колонка.Имя + " " + ТаблицаМеток[0][Колонка.Имя] + " ";
		КонецЦикла;
		ОбщегоНазначения.СообщитьПользователю(СтрокаМетки);
	КонецЕсли;
	
	Если ОбрабатываемаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ТЧСерии) <> Тип("ТаблицаЗначений") Тогда
			Результат.ИдентификаторТекущейСтроки = ОбрабатываемаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		Результат.ДанныеСерии = ОбрабатываемаяСтрока;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция - Параметры обработки считанных RFID и КиЗ
// 
// Возвращаемое значение:
//	Структура - параметры обработки:
//	* СчитывательRFID - СправочникСсылка.ПодключаемоеОборудование - ссылка на считыватель RFID.
//	* УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - уникальный идентификатор формы.
//	* НастройкиИспользованияСерий - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий.
//	* ПараметрыУказанияСерий - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//	* ЗначенияПолейСвязи - Структура - коллекция связи полей между ТЧ Товары и ТЧ Серии из ПараметрыУказанияСерий.ПоляСвязи:
//		** Ключ - Строка - имя реквизита без суффикса, например "Номенклатура".
//		** Значение - Строка - имя реквизита с суффиксом, например "НоменклатураОприходование".
//
Функция ПараметрыОбработкиСчитанныхRFID() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СчитывательRFID",             Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	Результат.Вставить("УникальныйИдентификатор",     Неопределено);
	Результат.Вставить("НастройкиИспользованияСерий", Новый Структура);
	Результат.Вставить("ПараметрыУказанияСерий",      Новый Структура);
	Результат.Вставить("ЗначенияПолейСвязи",          Новый Структура);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьИзменитьСтрокуВТЧ(Объект, СтруктураПараметров, ДобавляемыеДанные, РежимОбработки,
	КэшированныеЗначения, МассивСтрокСУпЛистамиДляОбработки = Неопределено, Назначения = Неопределено)
	
	ИспользоватьУпаковочныеЛисты = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковочныеЛисты");
	
	ИмяКолонкиУпаковка = СтруктураПараметров.ИмяКолонкиУпаковка;
	
	Если РежимОбработки = "Тара"
		Или РежимОбработки = "ТараПоСтрокеССериейБезУвеличенияКоличества" Тогда
		Тара = Истина;
	Иначе
		Тара = Ложь;
	КонецЕсли;
	
	ТЧ = Объект[СтруктураПараметров.ИмяТЧ];
	
	ЭтоУпаковочныйЛист = Не Тара И ЗначениеЗаполнено(ДобавляемыеДанные.УпаковочныйЛист);
	
	ДобавлятьТовар = ПроверитьАссортимент(Объект, СтруктураПараметров, ДобавляемыеДанные, ЭтоУпаковочныйЛист);
	
	ОтборПоУпаковкам = Новый Структура("Номенклатура, Характеристика," +  ИмяКолонкиУпаковка + ", ХарактеристикиИспользуются");
	Если ИспользоватьУпаковочныеЛисты
		И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
		// Ищем только на текущем уровне.
		//	Если включен режим "По товарам", тогда ищем (и добавляем) только на верхнем уровне.
		ОтборПоУпаковкам.Вставить("УпаковочныйЛистРодитель", СтруктураПараметров.ТекущийУпаковочныйЛист);
	КонецЕсли;
	
	Если СтруктураПараметров.НеИскатьВОтмененныхСтроках И ТЧ.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0], "Отменено") Тогда
		ОтборПоУпаковкам.Вставить("Отменено", Ложь);
	КонецЕсли;

	Если ДобавляемыеДанные.Свойство("Номенклатура") И ЗначениеЗаполнено(ДобавляемыеДанные.Номенклатура) Тогда
		ТекущаяНомеклатураИспользоватьУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыеДанные.Номенклатура, "ИспользоватьУпаковки");
		Если Не ТекущаяНомеклатураИспользоватьУпаковки Тогда
			СтруктураПараметров.НеИспользоватьУпаковки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
		
		НайденныеСтроки = Новый Массив;
		
		Если СтруктураПараметров.ШтрихкодыВТЧ Тогда
			
			Отбор = Новый Структура("Штрихкод, УпаковочныйЛистРодитель",
				ДобавляемыеДанные.Штрихкод, СтруктураПараметров.ТекущийУпаковочныйЛист);
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			
		Иначе
			
			ДобавлятьТовар = Ложь;
			
		КонецЕсли;
		
		// Неизвестным может оказаться штрихкод, которому соответствует несколько упаковочных листов,
		//	при этом упаковочный лист уже может быть указан в ТЧ Товары, в этом случае нужно попробовать найти его.
		Если ИспользоватьУпаковочныеЛисты
			И СтруктураПараметров.УчитыватьУпаковочныеЛисты
			И НайденныеСтроки.Количество() = 0 Тогда
			
			Отбор = Новый Структура("УпаковочныйЛистКод, УпаковочныйЛистРодитель", ДобавляемыеДанные.Штрихкод, СтруктураПараметров.ТекущийУпаковочныйЛист);
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Номенклатура или упаковочный лист со штрихкодом ""%Штрихкод%"" не найдены'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Штрихкод%", ДобавляемыеДанные.Штрихкод);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоУпаковочныйЛист Тогда
			Отбор = Новый Структура("УпаковочныйЛист", Истина);
			Отбор.Вставить("ЭтоУпаковочныйЛист", Истина);
		Иначе
			Если СтруктураПараметров.НеИспользоватьУпаковки
				Или Тара Тогда
				Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборПоУпаковкам);
				Отбор.Удалить(ИмяКолонкиУпаковка);
			Иначе
				Отбор = ОтборПоУпаковкам;
			КонецЕсли;
			
			Если СтруктураПараметров.РассчитыватьНаборы Тогда
				Отбор.Вставить("НоменклатураНабора");
				Отбор.Вставить("ХарактеристикаНабора");
			КонецЕсли;
			
			Если СтруктураПараметров.ДобавлятьТолькоТоварСверхЗаказа Тогда
				Отбор.Вставить("КодСтроки", 0);
			КонецЕсли;
			
			Если Не Тара
				И ДобавляемыеДанные.ШтрихкодНеИзКэша 
				И ДобавляемыеДанные.НесколькоЕдиничныхУпаковок 
				И ДобавляемыеДанные.ЕдиничнаяУпаковка = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru = 'У номенклатуры ""%Номенклатура%"" используется несколько упаковок с единицей измерения ""%ЕдиницаИзмерения%"" и коэффициентом 1. Для корректной привязки штрихкодов рекомендуется использовать одну единичную упаковку.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", Строка(ДобавляемыеДанные.Номенклатура));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%", Строка(ДобавляемыеДанные.ЕдиницаИзмерения));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, ДобавляемыеДанные);
		НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	СтрокаТЧ = Неопределено;
	
	Если Не СтруктураПараметров.ИзменятьКоличество Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Если ЭтоУпаковочныйЛист Тогда
				
				ТекстСообщения = НСтр("ru = 'В табличной части не найдена строка, содержащая ""%УпаковочныйЛист%""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УпаковочныйЛист%", ДобавляемыеДанные.УпаковочныйЛист);
				
			ИначеЕсли ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
				
				Если СтруктураПараметров.ШтрихКодыВТЧ Тогда
					ТекстСообщения = НСтр("ru = 'В табличной части не найдена строка, содержащая штрихкод ""%Штрихкод%""'");
				ИначеЕсли ИспользоватьУпаковочныеЛисты
					И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
					ТекстСообщения = НСтр("ru = 'Номенклатура или упаковочный лист со штрихкодом ""%Штрихкод%"" не найдены'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Номенклатура со штрихкодом ""%Штрихкод%"" не найдена'");
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Штрихкод%", ДобавляемыеДанные.Штрихкод);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'В табличной части не найдена строка с товаром ""%НазваниеТовара%""'");
				
				НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ?(Тара, "",ДобавляемыеДанные.Упаковка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТовара%",НазваниеТовара);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			СтрокаТЧ = НайденныеСтроки[0];
			Если Не ЭтоУпаковочныйЛист
				И СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено
				И СтруктураПараметров.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
				И Не ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
				
				Если СтрокаТЧ.СтатусУказанияСерий = 1
					Или СтрокаТЧ.СтатусУказанияСерий = 2
					Или СтрокаТЧ.СтатусУказанияСерий = 3 
					Или СтрокаТЧ.СтатусУказанияСерий = 4 Тогда
					
					СтруктураПараметров.МассивСтрокССериями.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтрокаТЧ;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 0
		И Не Тара
		И Не ЭтоУпаковочныйЛист
		И Не ДобавляемыеДанные.НеизвестныйШтрихкод Тогда 
			
		// Если для упаковки используется только одна упаковка с коэффициентом 1 и ед. изм. как в номенклатуре,
		// то попробуем найти строку с этой упаковкой:
		//	- если найдем, то увеличим в ней количество
		//	- если нет - добавим новую строку.
		//  - кроме элементов набора - в этом случае берем ту упаковку - которая указана
		Если ЗначениеЗаполнено(ДобавляемыеДанные.ЕдиничнаяУпаковка) 
			И Не ЗначениеЗаполнено(ДобавляемыеДанные.Упаковка) 
			И Не РежимОбработки = "КомплектующаяНабора" Тогда	
			
			ЗаполнитьЗначенияСвойств(ОтборПоУпаковкам, ДобавляемыеДанные);
			
			Если СтруктураПараметров.НеИспользоватьУпаковки Тогда
				Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборПоУпаковкам);
				Отбор.Удалить(ИмяКолонкиУпаковка);
			Иначе
				ОтборПоУпаковкам[ИмяКолонкиУпаковка] = ДобавляемыеДанные.ЕдиничнаяУпаковка;
				Отбор = ОтборПоУпаковкам;
			КонецЕсли;
			
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			
		ИначеЕсли Не СтруктураПараметров.НеИспользоватьУпаковки
			И ЗначениеЗаполнено(ДобавляемыеДанные.ЕдиничнаяУпаковка)
			И ДобавляемыеДанные.ЕдиничнаяУпаковка = ДобавляемыеДанные.Упаковка Тогда
			
			ОтборПоУпаковкам[ИмяКолонкиУпаковка] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			НайденныеСтроки = ТЧ.НайтиСтроки(ОтборПоУпаковкам);
			
		ИначеЕсли РежимОбработки = "КомплектующаяНабора" Тогда
			
			Если СтруктураПараметров.НеИспользоватьУпаковки Тогда
				Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборПоУпаковкам);
				Отбор.Удалить(ИмяКолонкиУпаковка);
			Иначе
				ОтборПоУпаковкам[ИмяКолонкиУпаковка] = ДобавляемыеДанные.Упаковка;
				Отбор = ОтборПоУпаковкам;
			КонецЕсли;
 
			НайденныеСтроки = ТЧ.НайтиСтроки(Отбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьУпаковочныеЛисты
		И Не СтруктураПараметров.УчитыватьУпаковочныеЛисты
		И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено
		И НайденныеСтроки.Количество() > 0 Тогда
		
		// Удалим из найденных строки по другим упаковочным листам
		// Если в ТЧ уже есть строки с этим упаковочным листом - то в НайденныеСтроки[0] будет такая строка,
		// если таких строк нет, то или НайденныеСтроки очистится, или в НайденныеСтроки[0]
		// будет строка с пустым упаковочным листом.
		
		Индекс = НайденныеСтроки.Количество();
		СтрокаСНепустымУпаковочнымЛистом = Неопределено;
					
		Пока Индекс > 0 Цикл
			
			Индекс = Индекс - 1;
			
			СтрМас = НайденныеСтроки[Индекс];
			
			УпаковочныйЛистРодитель = СтрМас.УпаковочныйЛист;
			
			Если ЗначениеЗаполнено(УпаковочныйЛистРодитель) Тогда
				Если УпаковочныйЛистРодитель <> СтруктураПараметров.ТекущийУпаковочныйЛист Тогда
					НайденныеСтроки.Удалить(Индекс);
				Иначе
					СтрокаСНепустымУпаковочнымЛистом = Индекс;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаСНепустымУпаковочнымЛистом)
					Или (Не ЗначениеЗаполнено(СтрокаСНепустымУпаковочнымЛистом)
						И Индекс <> 0) Тогда
					НайденныеСтроки.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользоватьУпаковочныеЛисты
		И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено
		И СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
		ТекущийУпаковочныйЛистКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ТекущийУпаковочныйЛист, "Код");
	КонецЕсли;
	
	ДанныеЕстьВТЧ = (НайденныеСтроки.Количество() > 0);
	Если ДанныеЕстьВТЧ Тогда
		СтрокаТЧ = НайденныеСтроки[0];
	КонецЕсли;
	
	Количество = ДобавляемыеДанные.КоличествоПоШтрихкоду * ДобавляемыеДанные.КоличествоУпаковок * ДобавляемыеДанные.Коэффициент;
	КоличествоУпаковок = ДобавляемыеДанные.КоличествоПоШтрихкоду * ДобавляемыеДанные.КоличествоУпаковок;
	
	Если Не (ДобавляемыеДанные.МаркируемаяПродукция И СтруктураПараметров.МаркируемаяПродукцияВТЧ)
		Или СтруктураПараметров.ЗагрузкаИзТСД Тогда
		Если Не СтруктураПараметров.НеИспользоватьУпаковки Тогда
			ДобавляемоеКоличество = КоличествоУпаковок;
		Иначе
			ДобавляемоеКоличество = Количество;
		КонецЕсли;
	Иначе
		ДобавляемоеКоличество = 0;
	КонецЕсли;
	
	ЗаполнятьНазначение = ЗаполнятьНазначение(СтруктураПараметров, ДобавляемыеДанные);
	Если Не Тара
		И ЗаполнятьНазначение Тогда
		ТекущееНазначение = ПодобратьНазначение(ДобавляемыеДанные,
			Назначения, СтруктураПараметров.ИмяКолонкиКоличество, НайденныеСтроки, Количество, ДанныеЕстьВТЧ);
	КонецЕсли;
	
	Если Не ДанныеЕстьВТЧ Тогда
		
		Если ДобавлятьТовар Тогда
			
			СтрокаТЧ = ТЧ.Добавить();
			ДобавляемыеДанные.ВыполненныеДействия.Добавлено = Истина;
			
			Если СтруктураПараметров.ШтрихкодыВТЧ Тогда
				СтрокаТЧ.Штрихкод = ДобавляемыеДанные.Штрихкод;
			КонецЕсли;
			
			Если СтруктураПараметров.МаркируемаяПродукцияВТЧ 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "МаркируемаяПродукция") Тогда
				СтрокаТЧ.МаркируемаяПродукция = ДобавляемыеДанные.МаркируемаяПродукция;
			КонецЕсли;
			
			Если ЭтоУпаковочныйЛист Тогда
				
				СтрокаТЧ.ЭтоУпаковочныйЛист = Истина;
				СтрокаТЧ.УпаковочныйЛист = ДобавляемыеДанные.УпаковочныйЛист;
				СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = 1;
				СтрокаТЧ.УпаковочныйЛистРодитель    = СтруктураПараметров.ТекущийУпаковочныйЛист;
				МассивСтрокСУпЛистамиДляОбработки.Добавить(СтрокаТЧ);
				
			ИначеЕсли ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
				
				СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = ДобавляемыеДанные.КоличествоПоШтрихкоду;
				СтрокаТЧ.ШтрихкодНеОпределен = 1;
				
			Иначе
				
				Если СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено Тогда 
					НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТЧ,КэшированныеЗначения,
						СтруктураПараметров.ПараметрыУказанияСерий);
				КонецЕсли;
				
				Если СтруктураПараметров.РассчитыватьНаборы Тогда
					СтрокаТЧ.НоменклатураНабора = ДобавляемыеДанные.НоменклатураНабора;
					СтрокаТЧ.ХарактеристикаНабора = ДобавляемыеДанные.ХарактеристикаНабора;
				КонецЕсли;
				
				СтрокаТЧ.Номенклатура       = ДобавляемыеДанные.Номенклатура;
				СтрокаТЧ.Характеристика     = ДобавляемыеДанные.Характеристика;
				
				Если Не Тара
					И Не СтруктураПараметров.НеИспользоватьУпаковки Тогда
					Если ЗначениеЗаполнено(ДобавляемыеДанные.ЕдиничнаяУпаковка)
						И Не РежимОбработки = "КомплектующаяНабора" Тогда
						СтрокаТЧ[ИмяКолонкиУпаковка] = ДобавляемыеДанные.ЕдиничнаяУпаковка;
					Иначе
						СтрокаТЧ[ИмяКолонкиУпаковка] = ДобавляемыеДанные.Упаковка;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаТЧ.ХарактеристикиИспользуются = ДобавляемыеДанные.ХарактеристикиИспользуются;
				
				Если ИспользоватьУпаковочныеЛисты
					И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено Тогда
					Если СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
						СтрокаТЧ.УпаковочныйЛистРодитель    = СтруктураПараметров.ТекущийУпаковочныйЛист;
						СтрокаТЧ.УпаковочныйЛистРодительКод = ТекущийУпаковочныйЛистКод;
					ИначеЕсли СтрокаТЧ.Свойство("НеОтгружать")
						И СтрокаТЧ.НеОтгружать = 0 Тогда
						СтрокаТЧ.УпаковочныйЛист = СтруктураПараметров.ТекущийУпаковочныйЛист;
					КонецЕсли;
				КонецЕсли;
				
				Если СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
					Или (Не СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
					И Не ЗначениеЗаполнено(СтрокаТЧ.Серия)) Тогда
					
					СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = ДобавляемоеКоличество;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ,
				СтруктураПараметров.СтруктураДействийСДобавленнымиСтроками,
				КэшированныеЗначения);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТЧ = НайденныеСтроки[0];
		
		Если СтруктураПараметров.ШтрихкодыВТЧ
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			СтрокаТЧ.Штрихкод = ДобавляемыеДанные.Штрихкод;
		КонецЕсли;
		
		Если ЭтоУпаковочныйЛист
			Или ДобавляемыеДанные.НеизвестныйШтрихкод
				И СтруктураПараметров.УчитыватьУпаковочныеЛисты
				И ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист) Тогда
			
			ТекстСообщения = НСтр("ru = '%УпаковочныйЛист% уже есть в табличной части.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%УпаковочныйЛист%", СтрокаТЧ.УпаковочныйЛист);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			Если СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено Тогда 
				НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТЧ,КэшированныеЗначения,
					СтруктураПараметров.ПараметрыУказанияСерий);
			КонецЕсли;
			
			Если ИспользоватьУпаковочныеЛисты
				И СтруктураПараметров.ТекущийУпаковочныйЛист <> Неопределено Тогда
				Если СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
					СтрокаТЧ.УпаковочныйЛистРодитель    = СтруктураПараметров.ТекущийУпаковочныйЛист;
					СтрокаТЧ.УпаковочныйЛистРодительКод = ТекущийУпаковочныйЛистКод;
				ИначеЕсли  Не ЗначениеЗаполнено(СтрокаТЧ.УпаковочныйЛист)
					И СтрокаТЧ.Свойство("НеОтгружать")
					И СтрокаТЧ.НеОтгружать = 0 Тогда
					СтрокаТЧ.УпаковочныйЛист = СтруктураПараметров.ТекущийУпаковочныйЛист;
				КонецЕсли;
			КонецЕсли;
			
			Если СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
				Или (Не СтруктураПараметров.УвеличиватьКоличествоВСтрокахССериями
					И Не ЗначениеЗаполнено(СтрокаТЧ.Серия))
					И РежимОбработки <> "ТараПоСтрокеССериейБезУвеличенияКоличества" Тогда
				
				СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество] = СтрокаТЧ[СтруктураПараметров.ИмяКолонкиКоличество]
					+ ДобавляемоеКоличество;
				
				ДобавляемыеДанные.ВыполненныеДействия.Изменено = Истина;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ,
						СтруктураПараметров.СтруктураДействийСИзмененнымиСтроками,
						КэшированныеЗначения);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьНазначение
		И ЗначениеЗаполнено(Назначения) Тогда
		СтрокаТЧ.Назначение = ТекущееНазначение;
	КонецЕсли;
	
	Если Не ЭтоУпаковочныйЛист
		И Не ДобавляемыеДанные.НеизвестныйШтрихкод
		И СтруктураПараметров.ПараметрыУказанияСерий <> Неопределено
		И СтруктураПараметров.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
		И СтрокаТЧ <> Неопределено Тогда
		// В форме проверки заполнения документа отображаются только фин.серии, ТЧ Серии нет,
		// обработка серий произойдет при обработке строк ТЧ (выше).
		Если Не (СтруктураПараметров.ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма"
				И Объект.ИмяФормы = "ОбщаяФорма.ПроверкаЗаполненияДокументов") Тогда
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																							СтруктураПараметров.ПараметрыУказанияСерий, 
																							СтрокаТЧ.ПолучитьИдентификатор(),
																							КэшированныеЗначения);
		КонецЕсли;
		Если СтрокаТЧ.СтатусУказанияСерий <> 0 Тогда
			СтруктураПараметров.МассивСтрокССериями.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.МаркируемаяПродукцияВТЧ
		И СтрокаТЧ <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "МаркируемаяПродукция")
		И СтрокаТЧ.МаркируемаяПродукция Тогда
		СтруктураПараметров.МассивСтрокСАкцизнымиМарками.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЕсли;
	
	Возврат СтрокаТЧ;
	
КонецФункции

Функция СоответствуетУсловиям(ДобавляемыеДанные, СтруктураПараметров)
	
	ЭтоУпаковочныйЛист = ЗначениеЗаполнено(ДобавляемыеДанные.УпаковочныйЛист);

	Если ЭтоУпаковочныйЛист
		И Не СтруктураПараметров.УчитыватьУпаковочныеЛисты Тогда
		
		ТекстСообщения = НСтр("ru = 'Штрихкод ""%Штрихкод%"" соответствует упаковочному листу. В этом документе не поддерживается работа со штрихкодами упаковочных листов.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Штрихкод%",ДобавляемыеДанные.Штрихкод);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЭтоУпаковочныйЛист
		И СтруктураПараметров.ТолькоТовары
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
		
		ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является услугой (работой). В данную табличную часть запрещено добавлять услуги (работы).'");
		
		НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТовара%",НазваниеТовара);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЭтоУпаковочныйЛист
		И СтруктураПараметров.ТолькоТоварыИРабота
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
		
		ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является услугой (работой). В данную табличную часть запрещено добавлять услуги.'");
		
		НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТовара%",НазваниеТовара);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЭтоУпаковочныйЛист
		И СтруктураПараметров.ТолькоТоварыИУслуги
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар 
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является работой. В данную табличную часть запрещено добавлять работы.'");
		
		НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТовара%",НазваниеТовара);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоУслуги
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеУслуги%"" является товаром (тарой). В данную табличную часть запрещено добавлять товары (тару).'");
		
		НазваниеУслуги = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеУслуги%", НазваниеУслуги);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоРаботы
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеНоменклатуры%"" не является работой. В данную табличную часть разрешено добавлять только работы.'");
		
		НазваниеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеНоменклатуры%", НазваниеНоменклатуры);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоНеПодакцизныйТовар
		И ДобавляемыеДанные.ПодакцизныйТовар Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеНоменклатуры%"" является подакцизным товаром. В данную табличную часть подакцизный товар добавлять нельзя.'");
		
		НазваниеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																							 ДобавляемыеДанные.Характеристика,
																							 ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеНоменклатуры%", НазваниеНоменклатуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоТара
		И ДобавляемыеДанные.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НазваниеТары%"" не является тарой. В данную табличную часть можно добавлять только тару.'");
		
		НазваниеТары = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					ДобавляемыеДанные.Характеристика,
																					ДобавляемыеДанные.Упаковка);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НазваниеТары%", НазваниеТары);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НаборСоответствуетУсловиям(ДобавляемыеДанные, СтруктураПараметров, Комплектующие)
	
	Для Каждого СтрокаКомплектующие Из Комплектующие Цикл
		
		Если СтруктураПараметров.ТолькоРаботы
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
			Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является набором и среди комплектующих имеет не только работы. В данную табличную часть можно добавлять только работы.'");
		
			НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", НазваниеТовара);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
			
		Если СтруктураПараметров.ТолькоУслуги
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
			Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является набором и среди комплектующих имеет не только услуги и работы. В данную табличную часть можно добавлять только услуги и работы.'");
		
			НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", НазваниеТовара);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураПараметров.ТолькоТара
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
			Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является набором и среди комплектующих имеет не только тару. В данную табличную часть можно добавлять только тару.'");
		
			НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", НазваниеТовара);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураПараметров.ТолькоТовары
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
			Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является набором и среди комплектующих имеет не только товары и тару. В данную табличную часть можно добавлять только товары и тару.'");
		
			НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", НазваниеТовара);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;

		Если СтруктураПараметров.ТолькоТоварыИРабота
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
			Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является набором и среди комплектующих имеет не только товары, тару и работы. В данную табличную часть можно добавлять только товары, тару и работы.'");
		
			НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", НазваниеТовара);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;

		Если СтруктураПараметров.ТолькоТоварыИУслуги
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара
			И СтрокаКомплектующие.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга
			Тогда
			
			ТекстСообщения = НСтр("ru = 'Товар ""%НазваниеТовара%"" является набором и среди комплектующих имеет не только товары, тару и услуги. В данную табличную часть можно добавлять только товары, тару или услуги.'");
		
			НазваниеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																					 ДобавляемыеДанные.Характеристика,
																					 ДобавляемыеДанные.Упаковка);
		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", НазваниеТовара);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьАссортимент(Объект, СтруктураПараметров, ДобавляемыеДанные, ЭтоУпаковочныйЛист = Ложь)
	
	ДобавлятьТовар = Истина;
	
	Если СтруктураПараметров.ПараметрыПроверкиАссортимента = Неопределено
		Или Не СтруктураПараметров.ПараметрыПроверкиАссортимента.ПроверятьАссортимент
		Или ЭтоУпаковочныйЛист 
		Или ДобавляемыеДанные.НеизвестныйШтрихкод
		Или ЗначениеЗаполнено(ДобавляемыеДанные.НоменклатураНабора) Тогда
		
		Возврат ДобавлятьТовар;
		
	КонецЕсли;
	
	СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ДобавляемыеДанные.Номенклатура,
																									СтруктураПараметров.ПараметрыПроверкиАссортимента.Склад,
																									Объект.Дата);
	
	Если Не СтруктураСостоянияАссортимента[СтруктураПараметров.ПараметрыПроверкиАссортимента.ИмяРесурсаАссортимента] Тогда
		ПредставлениеТовара =  НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДобавляемыеДанные.Номенклатура,
																				 ДобавляемыеДанные.Характеристика);
																				 
		ТекстСообщенияАссортимента = СтрЗаменить(СтруктураПараметров.ПараметрыПроверкиАссортимента.ТекстСообщения,
			"%1",
			ПредставлениеТовара);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияАссортимента);
		
		ДобавлятьТовар = СтруктураПараметров.ПараметрыПроверкиАссортимента.РазрешатьДобавление;
		
	КонецЕсли;

	Возврат ДобавлятьТовар;
	
КонецФункции

Функция Комплектующие(Номенклатура, Характеристика) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Данные = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	Таблица.Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	МАКСИМУМ(УпаковкиНоменклатуры.Ссылка) КАК ЕдиничнаяУпаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиНоменклатуры.Ссылка) КАК КоличествоЕдиничныхУпаковок,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, Таблица.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (&ТекстЗапросаКоэффициентУпаковки2 = 1)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И Таблица.Номенклатура.ЕдиницаИзмерения = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|			И (Таблица.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					И Таблица.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|				ИЛИ Таблица.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					И Таблица.Номенклатура = УпаковкиНоменклатуры.Владелец)
	|ГДЕ
	|	Таблица.Ссылка.Владелец = &Владелец
	|	И Таблица.Ссылка.Характеристика = &Характеристика
	|	И Таблица.Ссылка.Основной
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НомерСтроки,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Номенклатура.ТипНоменклатуры,
	|	Таблица.Номенклатура.ПодакцизныйТовар,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1),
	|	ВЫБОР
	|		КОГДА Таблица.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения,
	|	Таблица.Номенклатура.ИспользоватьУпаковки,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, Таблица.Номенклатура.ЕдиницаИзмерения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Таблица.Упаковка",
		"Таблица.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекДанные = ОбработкаТабличнойЧастиКлиентСервер.СтруктураКешируемойИнформацииПоШтрихкоду();
		ТекДанные.НоменклатураНабора =         Номенклатура;
		ТекДанные.ХарактеристикаНабора =       Характеристика;
		ТекДанные.Номенклатура =               Выборка.Номенклатура;
		ТекДанные.ТипНоменклатуры =            Выборка.ТипНоменклатуры;
		ТекДанные.Характеристика =             Выборка.Характеристика;
		ТекДанные.Упаковка =                   Выборка.Упаковка;
		ТекДанные.КоличествоУпаковок =         Выборка.КоличествоУпаковок;
		ТекДанные.ПодакцизныйТовар =           Выборка.ПодакцизныйТовар;
		ТекДанные.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
		ТекДанные.Коэффициент =                Выборка.Коэффициент;
		ТекДанные.ЕдиницаИзмерения =           Выборка.ЕдиницаИзмерения;
		ТекДанные.НеизвестныйШтрихкод =        Ложь;
		ТекДанные.ЕдиничнаяУпаковка =          ?(Выборка.КоличествоЕдиничныхУпаковок = 1 И Выборка.Коэффициент = 1, Выборка.ЕдиничнаяУпаковка, Неопределено);
		ТекДанные.НесколькоЕдиничныхУпаковок = ?(Выборка.КоличествоЕдиничныхУпаковок > 1, Истина, Ложь);
		Данные.Добавить(ТекДанные);
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

// Параметры:
// 		Объект - ДанныеФормыСтруктура:
// 			* Ссылка - ДокументСсылка, СправочникСсылка - 
// 		СтруктураПараметров - см. ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов
// 		ЗакешированныеШтрихкоды - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
// 	
// Возвращаемое значение:
// 		ТаблицаЗначений
Функция Назначения(Объект, СтруктураПараметров, ЗакешированныеШтрихкоды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не СтруктураПараметров.ЗаполнятьНазначения
		Или Не СтруктураПараметров.ИзменятьКоличество Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров.Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = СтруктураПараметров.Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(СтруктураПараметров.Штрихкоды);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	ПараметрыТекстаЗапроса = Справочники.Назначения.ПараметрыФормированияЗапросаДоступныхНазначений();
	ПараметрыТекстаЗапроса.УчестьУжеПодобранные              = Истина;
	ПараметрыТекстаЗапроса.ПоНесколькимТоварам               = Истина;
	ПараметрыТекстаЗапроса.УпорядочитьПоДатеЗаказаНазначения = Истина;
	Запрос.Текст = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ТекстЗапросаДоступныхНазначений(ПараметрыТекстаЗапроса);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Для Каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		ЗначениеИзКеша = ЗакешированныеШтрихкоды[ТекШтрихкод.Штрихкод];
		Если ЗначениеИзКеша <> Неопределено
			И ЗначениеЗаполнено(ЗначениеИзКеша.Номенклатура) Тогда
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеИзКеша);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТоварыДокумента",
		Объект[СтруктураПараметров.ИмяТЧ].Выгрузить(, "Номенклатура,Характеристика,Назначение,Количество"));
	Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	Назначения = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Назначения;
	
КонецФункции

Функция ЗаполнятьНазначение(СтруктураПараметров, ДобавляемыеДанные)
	
	Возврат СтруктураПараметров.ЗаполнятьНазначения
		И Не ДобавляемыеДанные.НеизвестныйШтрихкод
		И Не ЗначениеЗаполнено(ДобавляемыеДанные.УпаковочныйЛист)
		И СтруктураПараметров.ИзменятьКоличество;
	
КонецФункции

Функция ПодобратьНазначение(ДобавляемыеДанные,
			Назначения, ИмяКолонкиКоличество, МассивСтрокТЧ, ДобавляемоеКоличество, ДанныеЕстьВТЧ) Экспорт
	
	ОтборНазначений = Новый Структура("Номенклатура, Характеристика",
		ДобавляемыеДанные.Номенклатура, ДобавляемыеДанные.Характеристика);
	НазначенияПоТовару = Назначения.Скопировать(ОтборНазначений);
	
	ТекущееНазначение = Справочники.Назначения.ПустаяСсылка();
	
	СтрокаСПустымНазначениемНулевымКоличеством = Неопределено;
	
	Если ДанныеЕстьВТЧ Тогда
		
		ДанныеЕстьВТЧ = Ложь;
		Индекс = МассивСтрокТЧ.Количество();
		Пока Не ДанныеЕстьВТЧ
			И Индекс > 0 Цикл
			Индекс = Индекс - 1;
			СтрокаТЧ = МассивСтрокТЧ[Индекс];
			Если ЗначениеЗаполнено(СтрокаТЧ.Назначение) Тогда
				НайденныеНазначения = НазначенияПоТовару.НайтиСтроки(Новый Структура("Назначение",СтрокаТЧ.Назначение));
				Если НайденныеНазначения.Количество() > 0
					И НайденныеНазначения[0].Остаток >= ДобавляемоеКоличество Тогда
					ДанныеЕстьВТЧ = Истина;
					ТекущееНазначение = СтрокаТЧ.Назначение;
					МассивСтрокТЧ.Вставить(0, СтрокаТЧ);
					МассивСтрокТЧ.Удалить(Индекс + 1);
				КонецЕсли;
			Иначе
				Если СтрокаТЧ[ИмяКолонкиКоличество] > 0 Тогда
					// Если в строке уже заполнено количество и нет назначения,
					// значит, пользователь сам контролирует заполнение назначений, либо назначений нет.
					ДанныеЕстьВТЧ = Истина;
					МассивСтрокТЧ.Вставить(0, СтрокаТЧ);
					МассивСтрокТЧ.Удалить(Индекс);
				Иначе
					// Запомним строку с пустым назначение, но попробуем найти строку с заполненным назначением,
					// чтобы дозаполнить ее при возможности.
					СтрокаСПустымНазначениемНулевымКоличеством = СтрокаТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ДанныеЕстьВТЧ Тогда
		
		Для Каждого Стр Из НазначенияПоТовару Цикл
			Если Стр.Остаток >= ДобавляемоеКоличество Тогда
				ТекущееНазначение = Стр.Назначение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСПустымНазначениемНулевымКоличеством <> Неопределено Тогда
			СтрокаТЧ = СтрокаСПустымНазначениемНулевымКоличеством;
			ДанныеЕстьВТЧ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущееНазначение;
	
КонецФункции

#Область RFID

Функция ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки)
	
	ОбрабатываемаяСтрока = НоменклатураЛокализация.ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);
	
	Если ОбрабатываемаяСтрока <> Неопределено Тогда
		Возврат ОбрабатываемаяСтрока;
	КонецЕсли;
	
	НастройкиИспользованияСерий = Параметры.НастройкиИспользованияСерий;
	ВидНоменклатуры             = НастройкиИспользованияСерий.ВладелецСерий;
	
	Если Не ЗначениеЗаполнено(ТекущаяМетка.TID) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: не заполнен TID.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	ИначеЕсли Не НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка добавления серии по информации о RFID-метке: для серий этого вида номенклатуры не используются метки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ТЧСерии.НайтиСтроки(Новый Структура("RFIDTID", ТекущаяМетка.TID));
		
	ОбрабатываемаяСтрока = Неопределено;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = ТЧСерии.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	// Для случая, когда информации о КиЗ в системе нет, поэтому мы считываем RFID и сканером номер КиЗ.
	Если НайденныеСтроки.Количество() = 0
		И ТекущаяСтрока <> Неопределено
		И Не ЗначениеЗаполнено(ТекущаяСтрока.RFIDTID)
		И (Не ЗначениеЗаполнено(ТекущаяСтрока.Номер)
			Или Не НастройкиИспользованияСерий.ИспользоватьНомерСерии 
			Или ТекущаяСтрока.Номер = ТекущаяМетка.СерийныйНомер) Тогда
		
		ОбрабатываемаяСтрока = ТекущаяСтрока;
		ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
		Если ЗначениеЗаполнено(ТекущаяМетка.GTIN)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.EPCGTIN) Тогда
			ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
			И Не ЗначениеЗаполнено(ОбрабатываемаяСтрока.Номер) Тогда
			ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
		КонецЕсли;
		
		Возврат ОбрабатываемаяСтрока;	
	
	ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
		ОбрабатываемаяСтрока = НайденныеСтроки[0];
		
		Возврат ОбрабатываемаяСтрока;
	Иначе
		ШаблонВыборкиРеквизита = "	СерииНоменклатуры.%ИмяРеквизита% КАК %ИмяРеквизита%";
		
		МассивТекстов = Новый Массив;
		МассивТекстов.Добавить("	СерииНоменклатуры.Ссылка КАК Серия");
		
		Для Каждого Описание Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			ТекстРеквизита = СтрЗаменить(ШаблонВыборкиРеквизита, "%ИмяРеквизита%", Описание.ИмяРеквизита);
			МассивТекстов.Добавить(ТекстРеквизита);
		КонецЦикла;
		
		ТекстЗапросаЗапроса =
		"ВЫБРАТЬ
		|	&ТекстВыборкиРеквизитов
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И СерииНоменклатуры.RFIDTID = &TID";
		
		ТекстЗапросаЗапроса = СтрЗаменить(ТекстЗапросаЗапроса, "&ТекстВыборкиРеквизитов" ,СтрСоединить(МассивТекстов,","));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("TID", ТекущаяМетка.TID);
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, Выборка);
			ОбрабатываемаяСтрока.Количество         = 1;
			ОбрабатываемаяСтрока.КоличествоУпаковок = 1;
		Иначе
			ОбрабатываемаяСтрока = ТЧСерии.Добавить();
			ОбрабатываемаяСтрока.RFIDTID = ТекущаяМетка.TID;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.GTIN) Тогда
				ОбрабатываемаяСтрока.EPCGTIN = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ТекущаяМетка.GTIN, "0");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяМетка.СерийныйНомер)
				И  НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
				ОбрабатываемаяСтрока.Номер = ТекущаяМетка.СерийныйНомер;
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;
		
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

// Функция - Параметры заполнения флагов работы с меткой
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//		* ТекущаяМетка						 - Структура - данные текущей метки RFID
//		* НастройкиИспользованияСерий		 - Структура, ФиксированнаяСтруктура - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий
//		* ЗначенияПолейСвязи - Структура, ФиксированнаяСтруктура
//
Функция ПараметрыЗаполненияФлаговРаботыСМеткой() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекущаяМетка");
	Результат.Вставить("НастройкиИспользованияСерий");
	Результат.Вставить("ЗначенияПолейСвязи");
	
	Возврат Результат;
	
КонецФункции

// Заполняет флаги работы с меткой RFID.
//
// Параметры:
//	ОбрабатываемаяСтрока - ДанныеФормыЭлементКоллекции  - строка для обработки
//	ПараметрыЗаполненияФлаговРаботыСМеткой - см. ПараметрыЗаполненияФлаговРаботыСМеткой.
//
Процедура ЗаполнитьФлагиРаботыСМеткой(ОбрабатываемаяСтрока, ПараметрыЗаполненияФлаговРаботыСМеткой) Экспорт
	
	Если ОбрабатываемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИспользованияНомера  = Неопределено;
	ОписаниеИспользованияRFIDEPC = Неопределено;
	ОписаниеИспользованияRFIDTID = Неопределено;
	
	ТекущаяМетка = ПараметрыЗаполненияФлаговРаботыСМеткой.ТекущаяМетка;
	НастройкиИспользованияСерий = ПараметрыЗаполненияФлаговРаботыСМеткой.НастройкиИспользованияСерий;
	ЗначенияПолейСвязи          = ПараметрыЗаполненияФлаговРаботыСМеткой.ЗначенияПолейСвязи;	
	
	Для Каждого Описание Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
		Если Описание.ИмяРеквизита = "Номер" Тогда
			ОписаниеИспользованияНомера = Описание;
		ИначеЕсли Описание.ИмяРеквизита = "RFIDEPC" Тогда
			ОписаниеИспользованияRFIDEPC = Описание;
		ИначеЕсли Описание.ИмяРеквизита = "RFIDTID" Тогда
			ОписаниеИспользованияRFIDTID = Описание;
		КонецЕсли;
		
		Если ОписаниеИспользованияНомера <> Неопределено
			И ОписаниеИспользованияRFIDEPC <> Неопределено
			И ОписаниеИспользованияRFIDTID <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОписаниеИспользованияRFIDTID.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемаяСтрока.ЗаполненRFIDTID = ЗначениеЗаполнено(ОбрабатываемаяСтрока.RFIDTID);
	
	Если ТекущаяМетка <> Неопределено Тогда
		ОбрабатываемаяСтрока.RFIDEPC = ТекущаяМетка.EPC;
	КонецЕсли;
	
	// Если есть метки, номер используется, но его нельзя менять вручную, значит его нужно генерировать по TID-метки
	Если (ОписаниеИспользованияНомера.Использование
		И Не ОписаниеИспользованияНомера.МожноРедактировать)
		И ОбрабатываемаяСтрока.ЗаполненRFIDTID Тогда
		
		РезультатРасчетаНомера = МенеджерОборудованияКлиентСервер.ПолучитьСерийныйНомерПоTID(ОбрабатываемаяСтрока.RFIDTID,
																								ОбрабатываемаяСтрока.RFIDEPC);	
		
		Если РезультатРасчетаНомера.Результат Тогда
			ОбрабатываемаяСтрока.Номер = Формат(РезультатРасчетаНомера.СерийныйНомер, "ЧГ=0");
		Иначе
			ОбрабатываемаяСтрока.Номер = "";
			
			ТекстСообщения = НСтр("ru = 'Номер серии должен быть сгенерирован по TID RFID-метки. При генерации произошла ошибка: %ТекстОшибки%. Обратитесь к администратору.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", РезультатРасчетаНомера.ОписаниеОшибки); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполненияФлаговРаботыСМеткой.ЗначенияПолейСвязи.Свойство("GTIN") Тогда 
		GTIN = ПараметрыЗаполненияФлаговРаботыСМеткой.ЗначенияПолейСвязи.GTIN;
	Иначе
	    GTIN = ""
	КонецЕсли;
	
	Если Не ОписаниеИспользованияRFIDEPC.МожноРедактировать Тогда
		Если Не ПустаяСтрока(GTIN) 
			И ОбрабатываемаяСтрока.EPCGTIN <> GTIN
			И ОбрабатываемаяСтрока.ЗаполненRFIDTID Тогда
			
			ТекстСообщения = НСтр("ru = 'GTIN, считанный из RFID метки не соответствует GTIN из %1. Маркировка осуществляется персонифицированными %1, поэтому необходимо считать подходящую метку RFID-считывателем.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, "КиЗ");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		ОбрабатываемаяСтрока.НужноЗаписатьМетку = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(GTIN)
		И ОписаниеИспользованияНомера.Использование 
		И ЗначениеЗаполнено(ОбрабатываемаяСтрока.Номер) Тогда
		
		// Если RFIDEPC можно писать, то запишем туда SGTIN96. Это возможно, если используются номера серий
		// и через значения полей связи передан GTIN. В ERP этот параметр передается только для ГИСМ
		
		ОбрабатываемаяСтрока.EPCGTIN = GTIN;
		
		Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОбрабатываемаяСтрока.Номер) <> Неопределено Тогда
			
			ДанныеEPC = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ОбрабатываемаяСтрока.EPCGTIN,
																					ОбрабатываемаяСтрока.Номер, 1);
			
			Если (Не МенеджерОборудованияКлиентСервер.ПустойEPC(ДанныеEPC)
				Или Не МенеджерОборудованияКлиентСервер.ПустойEPC(ОбрабатываемаяСтрока.RFIDEPC)) Тогда
				ОбрабатываемаяСтрока.НужноЗаписатьМетку = ДанныеEPC <> ОбрабатываемаяСтрока.RFIDEPC;
			Иначе
				ОбрабатываемаяСтрока.НужноЗаписатьМетку = Ложь;
			КонецЕсли;
		Иначе
			ОбрабатываемаяСтрока.НужноЗаписатьМетку = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбрабатываемаяСтрока.ЗаполненRFIDTID Тогда
		ОбрабатываемаяСтрока.СтатусРаботыRFID = 0;
	ИначеЕсли ОбрабатываемаяСтрока.НужноЗаписатьМетку Тогда
		ОбрабатываемаяСтрока.СтатусРаботыRFID = 1;
	Иначе
		ОбрабатываемаяСтрока.СтатусРаботыRFID = 2;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
