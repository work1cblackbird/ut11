///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область УчетныеЗаписиМаркетплейса

// Возвращает список действующих учетных записей маркетплейса.
// 
// Возвращаемое значение:
//   СписокЗначений Из СправочникСсылка.УчетныеЗаписиМаркетплейсов - не помеченные на удаление учетные записи Ozon.
//
Функция СписокНастроекПодключенияКСервису() Экспорт
	
	СписокНастроек = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписиМаркетплейсов.Ссылка) КАК Наименование
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
		|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокНастроек;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокНастроек.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокНастроек;
	
КонецФункции

// Очищает сохраненные данные авторизации по учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Булево - результат выполнения очистки.
//
Функция ОчиститьНастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса) Экспорт

	ОчисткаУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		Владелец = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса 
					+ УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор();
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, Неопределено);

		ТекОб = УчетнаяЗаписьМаркетплейса.ПолучитьОбъект();
		ТекОб.УстановитьПометкуУдаления(Истина);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ОчисткаУспешна = Ложь;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось очистить настройки по причине: %1'"), 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	КонецПопытки;

	Возврат ОчисткаУспешна;

КонецФункции

// Формирует список настроек учетной записи. 
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТолькоЗагружаемые         - Булево - признак удаления выгружаемых видов цен из результата.
// 
// Возвращаемое значение:
//   См. Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи.
//
Функция НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, ТолькоЗагружаемые = Ложь) Экспорт

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	
	ВидыЦен = НастройкиУчетнойЗаписи.ВидыЦен;
	Если ТолькоЗагружаемые Тогда
		ВидыЦен.Очистить();
	КонецЕсли;
	
	ТипыЦен = ТипыЦенOzon(Ложь);
	Для Каждого ТипЦены Из ТипыЦен Цикл
		ВидыЦен.Вставить(ТипЦены.Идентификатор, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК Ссылка,
		|	ВидыЦен.Идентификатор КАК Идентификатор,
		|	ВидыЦен.ХранилищеНастроекПараметровСпособаЗаданияЦены КАК ХранилищеНастроек
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяСOzon)
		|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат НастройкиУчетнойЗаписи;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Настройки = Выборка.ХранилищеНастроек.Получить();
		Если ТипЗнч(Настройки) = Тип("Структура")
					И (Настройки.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса
				Или Настройки.УчетнаяЗаписьМаркетплейса.Пустая()) Тогда
			Результат = ТипыЦен.НайтиСтроки(Новый Структура("Наименование", Настройки.ТипЦеныНаOzon));
			Если Результат.Количество() = 1 Тогда
				ВидыЦен[Результат[0].Идентификатор] = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат НастройкиУчетнойЗаписи;

КонецФункции

#КонецОбласти

#Область Категории

// Заполняет дерево категорий и типов товаров.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ДеревоКатегорий           - ДеревоЗначений - дерево, которое необходимо заполнить,
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ВыборКатегорииМаркетплейса.ДеревоКатегорийМаркетплейса.
//   КатегорииИТипыТоваров     - Неопределено - 
//                             - Массив Из Соответствие - данные из кэша клиентского приложения,
//                                 см. ПолучитьКатегорииИТипыТоваровИзСервиса.
//   ТолькоИспользуемые        - Булево - признак построения дерева категорий только по категориям, по которым созданы 
//                                 карточки товара для учетной записи.
//   ПараметрыУстановкиПометок - Неопределено - установка пометок строк коллекции не используется;
//                             - Структура - параметры, используемые при установке пометок строк коллекции,
//                                 см. НовыеПараметрыУстановкиПометокВКоллекции.
// 
// Возвращаемое значение:
//   Структура - структура с заполненным деревом и кэшем клиентского приложения:
//     * ДеревоКатегорий - ДеревоЗначений - заполненное дерево категорий, переданное во входящем параметре.
//     * ДанныеКэша      - Неопределено - 
//                       - Массив Из Соответствие - кэш клиентского приложения,
//                           см. ПолучитьКатегорииИТипыТоваровИзСервиса.
//                                                   
Функция ЗаполнитьДеревоКатегорийИТиповТоваров(УчетнаяЗаписьМаркетплейса, ДеревоКатегорий, КатегорииИТипыТоваров = Неопределено, 
			ТолькоИспользуемые = Ложь, ПараметрыУстановкиПометок = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(КатегорииИТипыТоваров) Тогда
		ПараметрыЗапроса      = НовыеПараметрыЗапросаДереваКатегорийИТиповТоваров();
		КатегорииИТипыТоваров = ПолучитьКатегорииИТипыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
	КонецЕсли;
	
	ДеревоКатегорий.Строки.Очистить();
	
	Если ЗначениеЗаполнено(КатегорииИТипыТоваров) Тогда
		ИспользуемыеКатегории = Неопределено;
		
		Если ТолькоИспользуемые Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса
				|ИЗ
				|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
				|ГДЕ
				|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
				|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)";
			
			Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
			ИспользуемыеКатегории = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторКатегорииМаркетплейса");
		КонецЕсли;
		
		ЗаполнитьДеревоКатегорийИТиповТоваровРекурсивно(ДеревоКатегорий, КатегорииИТипыТоваров, 
			ИспользуемыеКатегории,, ПараметрыУстановкиПометок);
		ДеревоКатегорий.Строки.Сортировать("НаименованиеКатегорииМаркетплейса Возр", Истина);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДеревоКатегорий", ДеревоКатегорий);
	Результат.Вставить("ДанныеКэша",      КатегорииИТипыТоваров);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Товары

// Формирует строковое представление товарной позиции Ozon по шаблону.
//
// Параметры:
//   Номенклатура     - СправочникСсылка.Номенклатура - номенклатура товарной позиции.
//   Характеристика   - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика  товарной позиции.
//   Упаковка         - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка  товарной позиции.
//   ОбъектПубликации - Неопределено - 
//                    - СправочникСсылка.НоменклатураПрисоединенныеФайлы -
//                    - СправочникСсылка.СертификатыНоменклатуры - если указано, то возвращается наименование данного 
//                        объекта.
// 
// Возвращаемое значение:
//   Строка - строковое представление товарной позиции Ozon.
//
Функция ПредставлениеТоварнойПозиции(Номенклатура, Характеристика, Упаковка, ОбъектПубликации = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ОбъектПубликации) Тогда
		Возврат ОбъектПубликации.Наименование;
	Иначе
		ЧастиПредставления = Новый Массив;

		НаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			ЧастиПредставления.Добавить(НаименованиеПолное);
		Иначе
			ЧастиПредставления.Добавить(Номенклатура);
		КонецЕсли;
		
		Если Не Характеристика.Пустая() Тогда
			ЧастиПредставления.Добавить(Характеристика);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ЕдиницаИзмерения = Упаковка;
		Иначе
			ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;

		Возврат СтрСоединить(ЧастиПредставления, ", ") + " (" + ЕдиницаИзмерения + ")";
	КонецЕсли;

КонецФункции

// Отправляет публикуемые товары на модерацию в сервис Ozon.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторыПубликации  - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца;
//                             - Неопределено - выборка по идентификаторам публикации не используется.
//   ЛимитПозицийНаИтерацию    - Число - ограничения выгрузки публикуемых товаров на одну итерацию.
//   ЛимитЗаданийВОчереди      - Число - ограничение заданий выгрузки публикуемых товаров.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации = Неопределено,
			Знач ЛимитПозицийНаИтерацию = 100, Знач ЛимитЗаданийВОчереди = 500) Экспорт

	Если ЛимитПозицийНаИтерацию > 100 Тогда
		ЛимитПозицийНаИтерацию = 100;
	КонецЕсли;

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки.'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;

	ДанныеСчетчикаВыгрузки = ПолучитьСчетчикВыгрузкиИзСервиса(УчетнаяЗаписьМаркетплейса);

	Если Не ДанныеСчетчикаВыгрузки.ЗначениеУстановлено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> невозможно обновление данных из-за отсутствия информации о лимитах.'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;

	ОбщийОстатокСоздания      = ДанныеСчетчикаВыгрузки.ОбщийОстатокСоздания;
	СуточныйОстатокСоздания   = ДанныеСчетчикаВыгрузки.СуточныйОстатокСоздания;
	СуточныйОстатокОбновления = ДанныеСчетчикаВыгрузки.СуточныйОстатокОбновления;
	ВремяСбросаСчетчиков      = ДанныеСчетчикаВыгрузки.ВремяСбросаСчетчиков;

	КоличествоЗаданийВОчереди = КоличествоЗаданийВОчереди(УчетнаяЗаписьМаркетплейса);
	ПрефиксРегламентногоЗадания = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().ОбновлениеТоварногоКаталога;
	НаименованиеРегламентногоЗадания = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НаименованиеРегламентногоЗадания(ПрефиксРегламентногоЗадания);
	
	Если КоличествоЗаданийВОчереди >= ЛимитЗаданийВОчереди Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> невозможна публикация товаров из-за большого количества (500 заданий и более) необработанных заданий публикации. Публикация будет доступна после обработки ранее отправленных заданий, проверка обработки которых выполняется регламентным заданием ""%2""'"),
			УчетнаяЗаписьМаркетплейса,
			НаименованиеРегламентногоЗадания);
		Возврат Ошибка;
	КонецЕсли;

	ВыполнятьПубликацию = Истина;

	ТаблицаПроверенныхПозиций = Новый ТаблицаЗначений;
	ТаблицаПроверенныхПозиций.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПроверенныхПозиций.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПроверенныхПозиций.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверенныхПозиций.Характеристика КАК Характеристика,
		|	ТаблицаПроверенныхПозиций.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаПроверенныхПозиций
		|ИЗ
		|	&ТаблицаПроверенныхПозиций КАК ТаблицаПроверенныхПозиций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДатаСозданияНаМаркетплейсе = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ЭтоСозданиеТовара
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроверенныхПозиций КАК ТаблицаПроверенныхПозиций
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ТаблицаПроверенныхПозиций.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТаблицаПроверенныхПозиций.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТаблицаПроверенныхПозиций.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТаблицаПроверенныхПозиций.Упаковка
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И ТаблицаПроверенныхПозиций.Номенклатура ЕСТЬ NULL
		|	И &УсловиеЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ДанныеПубликации.Номенклатура КАК Номенклатура,
		|	ДанныеПубликации.Характеристика КАК Характеристика,
		|	ДанныеПубликации.Упаковка КАК Упаковка,
		|	ДанныеПубликации.ЭтоСозданиеТовара КАК ЭтоСозданиеТовара
		|ИЗ
		|	ДанныеПубликации КАК ДанныеПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПроверенныхПозиций";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "100", Формат(ЛимитПозицийНаИтерацию, "ЧГ="));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);

	ПроверятьСоставАтрибутов = Истина;

	Если ТипЗнч(ИдентификаторыПубликации) = Тип("Массив") И ИдентификаторыПубликации.Количество() > 0 Тогда
		ПроверятьСоставАтрибутов = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса",
			"СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации В (&ИдентификаторыПубликации)");
		Запрос.УстановитьПараметр("ИдентификаторыПубликации", ИдентификаторыПубликации);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса", "ИСТИНА");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	КоличествоОпубликованныхТоваров = 0;
	ЕстьЗаписиКПубликации = Ложь;

	СостоянияПубликации = СостоянияПубликации();

	ВидОбъектаМаркетплейсаТовар       = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
	ВидОбъектаМаркетплейсаИзображение = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");

	ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);

	Пока ВыполнятьПубликацию Цикл
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаПроверенныхПозиций", ТаблицаПроверенныхПозиций);

		НачатьТранзакцию();
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);

			Если РезультатЗапроса.Пустой()Тогда
				ОтменитьТранзакцию();
				Прервать;
			КонецЕсли;

			ВыборкаДанных = РезультатЗапроса.Выбрать();
			КоличествоВВыборкеДанных = ВыборкаДанных.Количество();
			Если КоличествоВВыборкеДанных < ЛимитПозицийНаИтерацию Тогда
				ВыполнятьПубликацию = Ложь;
			КонецЕсли;

			ЕстьЗаписиКПубликации = Истина;

			// Блокировка изменения публикуемых товаров.
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейсаТовар);
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса", "УчетнаяЗаписьМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
			БлокировкаДанных.Заблокировать();

			СписокПараметров                           = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
			СписокПараметров.ПолучитьАтрибуты          = Истина;
			СписокПараметров.ДляПубликации             = Истина;
			СписокПараметров.ПроверятьСоставАтрибутов  = ПроверятьСоставАтрибутов;
			СписокПараметров.ПолучитьИзображения       = Истина;
			СписокПараметров.ПолучитьСертификаты       = Истина;
			СписокПараметров.ПроверитьОшибкиЗаполнения = Истина;

			ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, СписокПараметров);

			МассивДанныхПубликации = Новый Массив;
			КоличествоПубликуемыхЭлементов = 0;
			
			Для Каждого СтрокаПубликации Из ДанныеПубликации Цикл
				НоваяСтрока = ТаблицаПроверенныхПозиций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПубликации);

				Если СтрокаПубликации.ЕстьКритичныеОшибки Тогда
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
					ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					Запись.ОбъектПубликации = Неопределено;
					Запись.Прочитать();

					Если Запись.Выбран() И Запись.ОписаниеОшибки <> СтрокаПубликации.ОписаниеОшибки Тогда
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "КодОшибки, ОписаниеОшибки");
						Запись.Записать();
					КонецЕсли;
				Иначе
					ЭтоСозданиеТовара = Истина;

					ВыборкаДанных.Сбросить();
					Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка");
					ЗаполнитьЗначенияСвойств(Отбор, СтрокаПубликации);
					Если ВыборкаДанных.НайтиСледующий(Отбор) Тогда
						ЭтоСозданиеТовара = ВыборкаДанных.ЭтоСозданиеТовара;
					КонецЕсли;

					КодОшибки = "";
					ОписаниеОшибки = "";
					Если ЭтоСозданиеТовара Тогда
						Если ОбщийОстатокСоздания = 0 Тогда
							КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
							ОписаниеОшибки = НСтр("ru = 'Превышен доступный лимит создания товаров. Необходимо обратиться в поддержку Ozon.'");
						ИначеЕсли СуточныйОстатокСоздания = 0 Тогда
							КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
							ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Превышен суточный лимит создания товаров. Создание товаров будет доступно после %1'"),
									ВремяСбросаСчетчиков);
						КонецЕсли;
					Иначе
						Если СуточныйОстатокОбновления = 0 Тогда
							КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
							ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Превышен суточный лимит обновления товаров. Обновление товаров будет доступно после %1'"),
									ВремяСбросаСчетчиков);
						КонецЕсли;
					КонецЕсли;

					АтрибутыТовара = АтрибутыТовараДляПубликации(СтрокаПубликации, УчетнаяЗаписьМаркетплейса, ТокенДоступа);

					Если АтрибутыТовара.Свойство("ОписаниеОшибки") И Не ПустаяСтрока(АтрибутыТовара.ОписаниеОшибки) Тогда
						КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;
						ОписаниеОшибки = АтрибутыТовара.ОписаниеОшибки;
					КонецЕсли;

					Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();
						
						Если Запись.Выбран() И Запись.ОписаниеОшибки <> ОписаниеОшибки Тогда
							Запись.КодОшибки      = КодОшибки;
							Запись.ОписаниеОшибки = ОписаниеОшибки;
							Запись.Записать();
						КонецЕсли;
						
						Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки 
							+ ?(ПустаяСтрока(Ошибка.ОписаниеОшибки), "", Символы.ПС)
							+ ОписаниеОшибки;
							
					ИначеЕсли Не ПустаяСтрока(АтрибутыТовара.offer_id) Тогда
						МассивДанныхПубликации.Добавить(АтрибутыТовара);
						КоличествоПубликуемыхЭлементов = КоличествоПубликуемыхЭлементов + 1;

						Если ЭтоСозданиеТовара Тогда
							ОбщийОстатокСоздания = ОбщийОстатокСоздания - 1;
							СуточныйОстатокСоздания      = СуточныйОстатокСоздания - 1;
						Иначе
							СуточныйОстатокОбновления    = СуточныйОстатокОбновления - 1;
						КонецЕсли;
					КонецЕсли;

					Если КоличествоПубликуемыхЭлементов >= ЛимитПозицийНаИтерацию Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если КоличествоПубликуемыхЭлементов > 0 Тогда
				ПараметрыЗапроса = Новый Структура;
				ПараметрыЗапроса.Вставить("ДанныеПубликации", МассивДанныхПубликации);
				
				ОтветСервиса = ВыполнитьПубликациюТоваровВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);

				Если ОтветСервиса <> Неопределено Тогда
					КоличествоОпубликованныхТоваров = КоличествоОпубликованныхТоваров + ДанныеПубликации.Количество();

					СостояниеТовара = СостоянияПубликации.ОтправленНаМодерацию;
					ДатаОбновления  = ТекущаяДатаСеанса();

					Отбор = Новый Структура("ЕстьКритичныеОшибки", Ложь);
					СтрокиИзмененияСтатуса = ДанныеПубликации.НайтиСтроки(Отбор);
					Для Каждого СтрокаПубликации Из СтрокиИзмененияСтатуса Цикл
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() Тогда
							Запись.ЗаданиеПубликации = ЧислоВСтроку(ОтветСервиса);

							Запись.КодОшибки         = "";
							Запись.ОписаниеОшибки    = "";
							Запись.Статус            = СостояниеТовара.Статус;
							Запись.Состояние         = СостояниеТовара.Состояние;
							Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостояния; 

							ИнформацияЦеныДоСкидок      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныДоСкидок", ИнформацияЦеныДоСкидок);
							ИнформацияЦеныСУчетомСкидок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныСУчетомСкидок", ИнформацияЦеныСУчетомСкидок);
							ИнформацияЦеныМинимальная   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныМинимальныхЦен", ИнформацияЦеныМинимальная);

							Запись.ЦенаДоСкидки           = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныДоСкидок, "Цена", 0);
							Запись.ЦенаСоСкидкой          = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныСУчетомСкидок, "Цена", 0);
							Запись.МинимальнаяЦена        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныМинимальная, "Цена", 0);
							Запись.ДатаВыгрузкиЦенПродажи = ДатаОбновления;

							Запись.Записать();
						КонецЕсли;

						Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
						СтрокиИзображений = СтрокаПубликации.ОбъектыПубликации.НайтиСтроки(Отбор);

						Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл 
							Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
							Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаИзображение;
							ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
							Запись.ОбъектПубликации = СтрокаИзображения.ОбъектПубликации;
							Запись.Прочитать();

							Если Запись.Выбран() Тогда
								ЗаполнитьПубличнуюСсылкуИзображений = (Запись.ПредставлениеОбъектаМаркетплейса <> СтрокаИзображения.ПредставлениеОбъектаМаркетплейса);

								Если Не ЗаполнитьПубличнуюСсылкуИзображений Тогда
									// Запись статуса для изображения конкретного товара.
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
									Запись.ЗаданиеПубликации = ЧислоВСтроку(ОтветСервиса);

									Если Не ЗначениеЗаполнено(СтрокаИзображения.ОписаниеОшибки) Тогда
										Запись.Статус            = СостояниеТовара.СтатусОбъектаПубликации;
										Запись.Состояние         = СостояниеТовара.СостояниеОбъектаПубликации;
										Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостоянияОбъектаПубликации;
										Запись.ОписаниеОшибки    = "";
									Иначе
										Запись.ОписаниеОшибки = СтрокаИзображения.ОписаниеОшибки;
									КонецЕсли;
									
									Запись.Записать();
									
								Иначе
									// Запись публичной ссылки изображения для всех товаров с этим изображением.
									БлокировкаДанных = Новый БлокировкаДанных;
									ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
									ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
									ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейсаИзображение);
									ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаПубликации.Номенклатура);
									ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", СтрокаИзображения.ОбъектПубликации);
									БлокировкаДанных.Заблокировать();

									НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
									НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВидОбъектаМаркетплейсаИзображение);
									НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаПубликации.Номенклатура);
									НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаИзображения.ОбъектПубликации);
									НаборЗаписей.Прочитать();

									Для Каждого Запись Из НаборЗаписей Цикл
										Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;

										Если Запись.Характеристика = СтрокаПубликации.Характеристика
											И Запись.Упаковка = СтрокаПубликации.Упаковка Тогда
											// Запись статуса для изображения конкретного товара.
											Запись.ЗаданиеПубликации = ЧислоВСтроку(ОтветСервиса);

											Если Не ЗначениеЗаполнено(СтрокаИзображения.ОписаниеОшибки) Тогда
												Запись.Статус            = СостояниеТовара.СтатусОбъектаПубликации;
												Запись.Состояние         = СостояниеТовара.СостояниеОбъектаПубликации;
												Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостоянияОбъектаПубликации;
												Запись.ОписаниеОшибки    = "";
											Иначе
												Запись.ОписаниеОшибки = СтрокаИзображения.ОписаниеОшибки;
											КонецЕсли;

											Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
										Иначе
											ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
											ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", СтрокаИзображения.ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
											Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
										КонецЕсли;
									КонецЦикла;

									НаборЗаписей.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;

				КоличествоЗаданийВОчереди = КоличествоЗаданийВОчереди + 1;

				Если КоличествоЗаданийВОчереди >= ЛимитЗаданийВОчереди Тогда
					ВыполнятьПубликацию = Ложь;

					Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
					Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для учетной записи <%1> прервана публикация товаров из-за большого количества (500 заданий и более) необработанных заданий публикации товаров. Публикация будет доступна после обработки ранее отправленных заданий, проверка обработки которых выполняется регламентным заданием ""%2""'"),
						УчетнаяЗаписьМаркетплейса,
						НаименованиеРегламентногоЗадания);
					Возврат Ошибка;
				КонецЕсли;
			КонецЕсли;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

		Если КоличествоПубликуемыхЭлементов >= ЛимитПозицийНаИтерацию Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьЗаписиКПубликации И КоличествоОпубликованныхТоваров = 0 Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не найдены товары, доступные для публикации. Необходимо проверить наличие ошибок в товарах к публикации.'");
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

// Отправляет публикуемые товары на модерацию в сервис Ozon с установкой статуса в учетной системе.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыполнитьПубликациюТоваровСУстановкойСтатусаКПубликации(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	// Установка статуса "К публикации".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса ЕСТЬ NULL КАК ЭтоНоваяЗапись,
		|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации) КАК Статус
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура)
		|			И (СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика)
		|			И (СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка)
		|			И (СтатусыПубликации.ОбъектПубликации = НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	НЕ ЕСТЬNULL(СтатусыПубликации.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве)";

	СтатусКПубликации = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доступные для публикации товары не найдены. Отправлять на модерацию можно только товары, имеющие статус ""%1"".'"),
			СтатусКПубликации);
		Возврат Ошибка;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ИдентификаторыПубликации = Новый Массив;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			Если Не Выборка.ЭтоНоваяЗапись Тогда
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Статус = СтатусКПубликации;
				КонецЕсли;
			КонецЕсли;
			МенеджерЗаписи.Записать(Истина);

			ИдентификаторыПубликации.Добавить(МенеджерЗаписи.ИдентификаторПубликации);
		Исключение
			ЕстьОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При удалении товара %1 возникла ошибка: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПредставлениеТоварнойПозиции(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если ЕстьОшибки Тогда
		Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При изменении статусов товаров на статус ""%1"" возникли ошибки. Подробности см. в журнале регистрации.'"),
			СтатусКПубликации);
	КонецЕсли;

	// Отправка на публикацию.
	ОшибкаПубликации = ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации);

	Если Не ПустаяСтрока(ОшибкаПубликации.ОписаниеОшибки) Тогда
		Ошибка.КодОшибки = Ошибка.КодОшибки + ?(ПустаяСтрока(Ошибка.КодОшибки), "", ",")
			+ ОшибкаПубликации.КодОшибки;
		Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки + ?(ПустаяСтрока(Ошибка.ОписаниеОшибки), "", ",")
			+ ОшибкаПубликации.ОписаниеОшибки;
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область АрхивТоваров

// Выполняет перенос товарных позиций из списка доступных для продажи в архив. 
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
// 
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПеренестиСписокТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТоварыКПереносу
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
		|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
		|	ТоварыКПереносу.Характеристика КАК Характеристика,
		|	ТоварыКПереносу.Упаковка КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК product_id
		|ИЗ
		|	ТоварыКПереносу КАК ТоварыКПереносу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
		|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
		|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))
		|ГДЕ
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса <> """"";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",            ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Доступные для переноса в архив товары не найдены. Переносить можно только товары, не находящиеся в архиве.'");
		Возврат Ошибка;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	Детализация = Неопределено;
	ЛимитПозицийНаИтерацию = 100;

	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанных();
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Выборка.product_id);
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ПеренестиТоварыВАрхив(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, ЕстьОшибки, Детализация);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ПеренестиТоварыВАрхив(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, ЕстьОшибки, Детализация);
	КонецЕсли;

	Если ЕстьОшибки Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПереносаТоваров;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При переносе товаров в архив возникли ошибки.
			|Подробности см. в журнале регистрации.'");
		Ошибка.Детализация    = Детализация;
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

// Устарела. Возвращает товарные позиции из архива в список доступных для продажи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВернутьСписокТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	// Метод API отключен 14.06.2023 г.
	Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВозвратаТоваров;
	Ошибка.ОписаниеОшибки = НСтр("ru = 'Возврат товаров из архива выполняется в личном кабинете торговой площадки.'");
	Возврат Ошибка;

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТоварыКПереносу
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
		|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
		|	ТоварыКПереносу.Характеристика КАК Характеристика,
		|	ТоварыКПереносу.Упаковка КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК product_id
		|ИЗ
		|	ТоварыКПереносу КАК ТоварыКПереносу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
		|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
		|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Доступные для возврата из архива товары не найдены. Возвращать можно только товары, находящиеся в архиве.'");
		Возврат Ошибка;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ЛимитПозицийНаИтерацию = 100;

	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанных();
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Выборка.product_id);
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ВернутьТоварыИзАрхива(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, ЕстьОшибки);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ВернутьТоварыИзАрхива(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, ЕстьОшибки);
	КонецЕсли;

	Если ЕстьОшибки Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВозвратаТоваров;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При возврате товаров из архива возникли ошибки.
			|Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

// Удаляет товары без SKU из архива торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
// 
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция УдалитьСписокТоваровБезSKUИзАрхива(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТоварыКПереносу
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
		|	ТоварыКПереносу.Характеристика КАК Характеристика,
		|	ТоварыКПереносу.Упаковка КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
		|	СтатусыПубликации.ИдентификаторПубликации КАК offer_id
		|ИЗ
		|	ТоварыКПереносу КАК ТоварыКПереносу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
		|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
		|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))
		|			И (СтатусыПубликации.ИдентификаторFBOSKU = """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
		|	ТоварыКПереносу.Характеристика КАК Характеристика,
		|	ТоварыКПереносу.Упаковка КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
		|	СтатусыПубликации.ИдентификаторПубликации КАК offer_id
		|ИЗ
		|	ТоварыКПереносу КАК ТоварыКПереносу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
		|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
		|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.ИдентификаторFBOSKU = """")
		|			И (СтатусыПубликации.ИдентификаторFBSSKU = """")
		|			И (СтатусыПубликации.ДатаСозданияНаМаркетплейсе = ДАТАВРЕМЯ(1, 1, 1))
		|			И (СтатусыПубликации.ЗаданиеПубликации = """")
		|			И СтатусыПубликации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве)";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	ПакетРезультата = Запрос.ВыполнитьПакет();
	Результат = ПакетРезультата[ПакетРезультата.ВГраница() - 1];
	РезультатНеАрхивныхПозиций = ПакетРезультата[ПакетРезультата.ВГраница()];
	
	Если Результат.Пустой() И РезультатНеАрхивныхПозиций.Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доступные для удаления товары не найдены. Удалять можно только товары с незаполненными идентификаторами товара площадки маркетплейса Ozon (SKU FBO и SKU FBS), имеющие статус ""%1"".'"), 
			ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве"));
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = ТекстСообщения;
		Возврат Ошибка;
	КонецЕсли;

	ЕстьОшибки = Ложь;

	// Удаление архивных товаров.
	ЛимитПозицийНаИтерацию = 500;

	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная));
	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанных();
	СведенияОВыгруженныхДанных.Колонки.Добавить("offer_id", ОписаниеТипаСтрока250);
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Новый Структура("offer_id", Выборка.offer_id));
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			УдалитьТоварыБезSKUИзАрхива(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, ЕстьОшибки);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		УдалитьТоварыБезSKUИзАрхива(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, ЕстьОшибки);
	КонецЕсли;

	// Удаление не архивных товаров.
	Выборка = РезультатНеАрхивныхПозиций.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", Выборка.Упаковка);
			БлокировкаДанных.Заблокировать();

			НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(Выборка.Упаковка);
			НаборЗаписей.Записать();

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЕстьОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При удалении товара %1 возникла ошибка: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПредставлениеТоварнойПозиции(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

	Если ЕстьОшибки Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаУдаленияТоваров;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При удалении товаров возникли ошибки.
			|Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область Сертификаты

// Определяет типы сертификатов из информационной базы.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Структура - результат выполнения:
//     * ТаблицаТиповСертификатов - ТаблицаЗначений - типы сертификатов:
//       ** ТипСертификата1С                         - Строка - содержит тип, к которому принадлежит сертификат;
//       ** ИдентификаторТипаСертификатаМаркетплейса - Строка - идентификатор объекта (сертификата) маркетплейса;
//       ** НаименованиеТипаСертификатаМаркетплейса  - Строка - наименование типа документа.
//
Функция ЗаполнитьТаблицуТиповСертификатов(УчетнаяЗаписьМаркетплейса) Экспорт

	ТаблицаТиповСертификатов = ТипыСертификатов(УчетнаяЗаписьМаркетплейса);

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТиповСертификатов", ТаблицаТиповСертификатов);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДвиженияТоваров

// Выгружает остатки товарных позиций из информационной базы на торговую площадку.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   НулевыеОстатки            - Булево - признак выгрузки нулевых остатков вместо фактических значений.
//   ТолькоИзменения           - Булево - признак выгрузки только измененных значений остатков.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыгрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, НулевыеОстатки = Ложь, 
			ТолькоИзменения = Истина) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегламентноеЗадание.ВыгрузкаОстатковНаМаркетплейсOzon.ПодготовкаДанных");

	// Получение настроек учетной записи. Определение необходимости выгрузки.
	ТаблицаСкладов = ИнтеграцияСМаркетплейсамиСервер.ПолучитьСопоставленныеСклады(
		УчетнаяЗаписьМаркетплейса, Ложь);
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружено сопоставленных складов OZON по учетной записи <%1>'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗаписьМаркетплейса);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстСообщения);

		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстСообщения;
		Возврат Ошибка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаСкладов",            ТаблицаСкладов);
	Запрос.УстановитьПараметр("ТаблицаТоваров",            ТаблицаТоваров);

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Группа КАК Справочник.Склады) КАК Группа,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИдентификаторСклада КАК СТРОКА(50)) КАК ИдентификаторСклада,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИспользуетсяДляСхемыРаботыFBO КАК БУЛЕВО) КАК ИспользуетсяДляСхемыРаботыFBO,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИспользуетсяДляСхемыРаботыFBS КАК БУЛЕВО) КАК ИспользуетсяДляСхемыРаботыFBS,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИспользуетсяДляСхемыРаботыDBS КАК БУЛЕВО) КАК ИспользуетсяДляСхемыРаботыDBS
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	&ТаблицаСкладов КАК ТаблицаСкладов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	ТаблицаСкладов.Группа КАК ГруппаСкладов,
		|	ТаблицаСкладов.Склад КАК Склад,
		|	ТаблицаСкладов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъекта,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликации.ПродаетсяПоСхемеРаботыFBS
		|		ИЛИ СтатусыПубликации.ПродаетсяПоСхемеРаботыDBS КАК ПродаетсяСоСкладаПродавца
		|ПОМЕСТИТЬ ВТНоменклатураСоСкладами
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО (ИСТИНА)
		|		И (&ОграничениеПоТаблицеТоваров)
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
		|	И (СтатусыПубликации.ПродаетсяПоСхемеРаботыFBS
		|		ИЛИ СтатусыПубликации.ПродаетсяПоСхемеРаботыDBS)
		|	И (СтатусыПубликации.ПродаетсяПоСхемеРаботыFBO И ЕСТЬNULL(ТаблицаСкладов.ИспользуетсяДляСхемыРаботыFBO, ЛОЖЬ)
		|		ИЛИ СтатусыПубликации.ПродаетсяПоСхемеРаботыFBS И ЕСТЬNULL(ТаблицаСкладов.ИспользуетсяДляСхемыРаботыFBS, ЛОЖЬ)
		|		ИЛИ СтатусыПубликации.ПродаетсяПоСхемеРаботыDBS И ЕСТЬNULL(ТаблицаСкладов.ИспользуетсяДляСхемыРаботыDBS, ЛОЖЬ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	ТаблицаСкладов.Группа КАК ГруппаСкладов,
		|	ТаблицаСкладов.Склад КАК Склад,
		|	ТаблицаСкладов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъекта,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЛОЖЬ КАК ПродаетсяСоСкладаПродавца
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО (ИСТИНА)
		|		И (&ОграничениеПоТаблицеТоваров)
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
		|	И НЕ СтатусыПубликации.ПродаетсяПоСхемеРаботыFBS
		|	И НЕ СтатусыПубликации.ПродаетсяПоСхемеРаботыDBS
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаСкладов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоваров";

	ТекстЗамены = "";
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ТекстЗамены =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|ПО ТаблицаТоваров.Номенклатура = СтатусыПубликации.Номенклатура
			|	И ТаблицаТоваров.Характеристика = СтатусыПубликации.Характеристика
			|	И ТаблицаТоваров.Упаковка = СтатусыПубликации.Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ОграничениеПоТаблицеТоваров)", ТекстЗамены);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НулевыеОстатки Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0 КАК Остаток
			|ПОМЕСТИТЬ ВТЗапасы";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Запасы.Номенклатура КАК Номенклатура,
			|	Запасы.Характеристика КАК Характеристика,
			|	Запасы.Склад КАК Склад,
			|	СУММА(Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток) КАК Остаток
			|ПОМЕСТИТЬ ВТЗапасы
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности.Остатки(
			|			,
			|			(Номенклатура, Характеристика, Склад, Назначение) В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ВТНоменклатураСоСкладами.Номенклатура КАК Номенклатура,
			|					ВТНоменклатураСоСкладами.Характеристика КАК Характеристика,
			|					ВТНоменклатураСоСкладами.Склад КАК Склад,
			|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
			|				ИЗ
			|					ВТНоменклатураСоСкладами КАК ВТНоменклатураСоСкладами
			|				ГДЕ
			|					ВТНоменклатураСоСкладами.ПродаетсяСоСкладаПродавца)) КАК Запасы
			|
			|СГРУППИРОВАТЬ ПО
			|	Запасы.Номенклатура,
			|	Запасы.Характеристика,
			|	Запасы.Склад
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТНоменклатураСоСкладами.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураСоСкладами.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураСоСкладами.Характеристика КАК Характеристика,
		|	ВТНоменклатураСоСкладами.Упаковка КАК Упаковка,
		|	ВТНоменклатураСоСкладами.ГруппаСкладов КАК Склад,
		|	ВТНоменклатураСоСкладами.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВТНоменклатураСоСкладами.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВТНоменклатураСоСкладами.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВТНоменклатураСоСкладами.ПродаетсяСоСкладаПродавца КАК ПродаетсяСоСкладаПродавца,
		|	СУММА(ЕСТЬNULL(Запасы.Остаток, 0) 
		|			/ ВЫБОР
		|				КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
		|			КОНЕЦ) КАК Остаток
		|ПОМЕСТИТЬ ВТНоменклатураКВыгрузке
		|ИЗ
		|	ВТНоменклатураСоСкладами КАК ВТНоменклатураСоСкладами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураСоСкладами.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасы КАК Запасы
		|		ПО ВТНоменклатураСоСкладами.Номенклатура = Запасы.Номенклатура
		|			И ВТНоменклатураСоСкладами.Характеристика = Запасы.Характеристика
		|			И ВТНоменклатураСоСкладами.Склад = Запасы.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНоменклатураСоСкладами.УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураСоСкладами.Номенклатура,
		|	ВТНоменклатураСоСкладами.Характеристика,
		|	ВТНоменклатураСоСкладами.Упаковка,
		|	ВТНоменклатураСоСкладами.ГруппаСкладов,
		|	ВТНоменклатураСоСкладами.ИдентификаторСклада,
		|	ВТНоменклатураСоСкладами.ИдентификаторОбъекта,
		|	ВТНоменклатураСоСкладами.ИдентификаторПубликации,
		|	ВТНоменклатураСоСкладами.ПродаетсяСоСкладаПродавца,
		|	СправочникНоменклатуры.ЕдиницаИзмерения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНоменклатураСоСкладами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура КАК Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка КАК ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас КАК СтраховойЗапас,
		|	3 КАК Приоритет
		|ПОМЕСТИТЬ ВТОграниченияВыгрузки
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса = ОграниченияВыгрузки.УчетнаяЗаписьМаркетплейса
		|			И ВТНоменклатураКВыгрузке.Номенклатура = ОграниченияВыгрузки.ОбластьДействия
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас,
		|	2
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса = ОграниченияВыгрузки.УчетнаяЗаписьМаркетплейса
		|			И (СправочникНоменклатуры.ТоварнаяКатегория = ОграниченияВыгрузки.ОбластьДействия)
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас,
		|	1
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса = ОграниченияВыгрузки.УчетнаяЗаписьМаркетплейса
		|			И (СправочникНоменклатуры.ВидНоменклатуры = ОграниченияВыгрузки.ОбластьДействия)
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОграниченияВыгрузки.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВТОграниченияВыгрузки.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТПриоритетыОграничений
		|ИЗ
		|	ВТОграниченияВыгрузки КАК ВТОграниченияВыгрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОграниченияВыгрузки.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураКВыгрузке.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураКВыгрузке.Характеристика КАК Характеристика,
		|	ВТНоменклатураКВыгрузке.Упаковка КАК Упаковка,
		|	ВТНоменклатураКВыгрузке.Склад КАК Склад,
		|	ВТНоменклатураКВыгрузке.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВЫБОР
		|		КОГДА ВТПриоритетыОграничений.Приоритет ЕСТЬ NULL
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100 < ВТНоменклатураКВыгрузке.Остаток 
		|					- ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|						/ ВЫБОР
		|							КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1)
		|						КОНЕЦ
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|						/ ВЫБОР
		|							КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1)
		|						КОНЕЦ > 0
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|						/ ВЫБОР
		|							КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1)
		|						КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Остаток,
		|	ВТНоменклатураКВыгрузке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВТНоменклатураКВыгрузке.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВТНоменклатураКВыгрузке.ПродаетсяСоСкладаПродавца КАК ПродаетсяСоСкладаПродавца,
		|	ВЫБОР
		|		КОГДА ВТПриоритетыОграничений.Приоритет ЕСТЬ NULL
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100 < ВТНоменклатураКВыгрузке.Остаток 
		|					- ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|						/ ВЫБОР
		|							КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1)
		|						КОНЕЦ
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100
		|		ИНАЧЕ ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|						/ ВЫБОР
		|							КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1) = 0
		|								ТОГДА 1
		|							ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентСтраховойЗапас, 1)
		|						КОНЕЦ
		|	КОНЕЦ <> ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0) КАК ОстатокИзменен
		|ПОМЕСТИТЬ ВыборкаОстатков
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыОграничений КАК ВТПриоритетыОграничений
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ВТПриоритетыОграничений.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОграниченияВыгрузки КАК ВТОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ВТОграниченияВыгрузки.Номенклатура
		|			И (ЕСТЬNULL(ВТПриоритетыОграничений.Приоритет, 0) = ВТОграниченияВыгрузки.Приоритет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
		|		ПО ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса = ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ВТНоменклатураКВыгрузке.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
		|			И ВТНоменклатураКВыгрузке.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
		|			И ВТНоменклатураКВыгрузке.Склад = ОстаткиТоваровМаркетплейсов.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНоменклатураКВыгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПриоритетыОграничений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОграниченияВыгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыборкаОстатков.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВыборкаОстатков.Номенклатура КАК Номенклатура,
		|	ВыборкаОстатков.Характеристика КАК Характеристика,
		|	ВыборкаОстатков.Упаковка КАК Упаковка,
		|	ВыборкаОстатков.Склад КАК Склад,
		|	ВыборкаОстатков.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВыборкаОстатков.Остаток КАК Остаток,
		|	ВыборкаОстатков.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВыборкаОстатков.ИдентификаторПубликации КАК ИдентификаторПубликации
		|ИЗ
		|	ВыборкаОстатков КАК ВыборкаОстатков
		|ГДЕ
		|	ВЫБОР 
		|		КОГДА ВыборкаОстатков.ПродаетсяСоСкладаПродавца 
		|			ТОГДА &ТолькоИзменения
		|		ИНАЧЕ ВыборкаОстатков.ОстатокИзменен 
		|	КОНЕЦ
		|	И ВыборкаОстатков.Остаток >= 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаОстатков";

	Если ТолькоИзменения Тогда
		ТекстЗамены = "ВыборкаОстатков.ОстатокИзменен";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТолькоИзменения", ТекстЗамены);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ВТНоменклатураСоСкладами.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправочникНоменклатуры.ЕдиницаИзмерения
			|	ИНАЧЕ ВТНоменклатураСоСкладами.Упаковка
			|КОНЕЦ)",
			"ВТНоменклатураСоСкладами.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентСтраховойЗапас",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА ВТНоменклатураКВыгрузке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправочникНоменклатуры.ЕдиницаИзмерения
			|	ИНАЧЕ ВТНоменклатураКВыгрузке.Упаковка
			|КОНЕЦ)",
			"ВТНоменклатураКВыгрузке.Номенклатура"));

	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружены товары для выгрузки остатков по учетной записи <%1>'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗаписьМаркетплейса);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстСообщения);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = ТекстСообщения;
		Возврат Ошибка;
	КонецЕсли;

	ЛимитПозицийНаИтерацию = 100;
	ИтерацийВМинуту        = 80;
	СчетчикИтераций        = 0;
	ДатаИтерации           = ТекущаяДатаСеанса();
	
	ДанныеИтерации = Новый Структура("stocks", Новый Массив);

	ОтправленныеОстатки = СведенияОВыгруженныхДанных();
	ОтправленныеОстатки.Колонки.Добавить("Склад",        Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтправленныеОстатки.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеОстатки.Колонки.Добавить("offer_id",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОтправленныеОстатки.Колонки.Добавить("product_id",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ОтправленныеОстатки.Колонки.Добавить("warehouse_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));

	Отказ = Ложь;
	ПродолжитьВыполнение = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Макс(ТаблицаТоваров.Количество(), Выборка.Количество()) / 1000);

	Пока Выборка.Следующий() Цикл
		ДанныеОстатка = Новый Структура;
		ДанныеОстатка.Вставить("offer_id", Выборка.ИдентификаторПубликации);
		ДанныеОстатка.Вставить("product_id", СтрокаВЧисло(Выборка.ИдентификаторОбъекта));
		ДанныеОстатка.Вставить("stock", Цел(Выборка.Остаток));
		ДанныеОстатка.Вставить("warehouse_id", СтрокаВЧисло(Выборка.ИдентификаторСклада));

		ДанныеИтерации.stocks.Добавить(ДанныеОстатка);
		НоваяСтрока = ОтправленныеОстатки.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.Склад = Выборка.Склад;
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Количество = Выборка.Остаток;
		НоваяСтрока.offer_id = ДанныеОстатка.offer_id;
		НоваяСтрока.product_id = ДанныеОстатка.product_id;
		НоваяСтрока.warehouse_id = ДанныеОстатка.warehouse_id;
		НоваяСтрока.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
		Если ДанныеИтерации.stocks.Количество() >= ЛимитПозицийНаИтерацию Тогда
			Если СчетчикИтераций >= ИтерацийВМинуту Тогда
				Пока ТекущаяДатаСеанса() - ДатаИтерации < 60 Цикл
					// Пауза в 1 минуту
				КонецЦикла;
				
				СчетчикИтераций = 0;
			КонецЕсли;
			
			ОтправленныеОстатки.Индексы.Добавить("offer_id, product_id, warehouse_id");
			ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеОстатки, Отказ, ПродолжитьВыполнение);
			ДанныеИтерации = Новый Структура("stocks", Новый Массив);
			ОтправленныеОстатки.Очистить();
			ОтправленныеОстатки.Индексы.Очистить();
			
			Если Отказ Тогда
				Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Ошибка.ОписаниеОшибки = НСтр("ru = 'При выгрузке остатков товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				
				Если Не ПродолжитьВыполнение Тогда
					Возврат Ошибка;
				КонецЕсли;
			КонецЕсли;
			
			СчетчикИтераций = СчетчикИтераций + 1;
			ДатаИтерации    = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЦикла;

	Если Не Отказ
			И ДанныеИтерации.stocks.Количество() > 0 Тогда
		Если СчетчикИтераций >= ИтерацийВМинуту Тогда
			Пока ТекущаяДатаСеанса() - ДатаИтерации < 60 Цикл
				// Пауза в 1 минуту
			КонецЦикла;
		КонецЕсли;
		
		ОтправленныеОстатки.Индексы.Добавить("offer_id, product_id, warehouse_id");
		ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеОстатки, Отказ, ПродолжитьВыполнение);
	КонецЕсли;
			
	Если Отказ Тогда
		Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При выгрузке остатков товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат Ошибка;

КонецФункции

// Загружает остатки товарных позиций с маркетплейса в информационную базу.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ЗагрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОстатокFBS,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК РезервFBS,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОстатокFBO,
		|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК РезервFBO
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТаблицаТоваров.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТаблицаТоваров.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТаблицаТоваров.Упаковка
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)";

	Если ТаблицаТоваров.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТаблицаТоваров.Номенклатура
			|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТаблицаТоваров.Характеристика
			|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТаблицаТоваров.Упаковка",
			"");
	КонецЕсли;

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаТоваров",            ТаблицаТоваров);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружено товаров для загрузки остатков по учетной записи <%1>'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УчетнаяЗаписьМаркетплейса);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = ТекстСообщения;
		Возврат Ошибка;
	КонецЕсли;
	
	Отказ                  = Ложь;
	ФильтрПоТоварам        = НовыйФильтрЗапросаПоТоварам(Истина,, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторОбъектаМаркетплейса"),);
	ТаблицаОстатковТоваров = ПолучитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, Отказ);
	
	Если Отказ Тогда
		Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении остатков товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
		Возврат Ошибка;
	КонецЕсли;

	ТаблицаОстатковТоваров.Индексы.Добавить("ИдентификаторОбъектаМаркетплейса");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОстатокFBO = 0;
		РезервFBO  = 0;
		ОстатокFBS = 0;
		РезервFBS  = 0;
		
		Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", Выборка.ИдентификаторОбъектаМаркетплейса);
		НайденныеСтроки = ТаблицаОстатковТоваров.НайтиСтроки(Отбор);
		
		Для Каждого ЭлементКоллекции Из НайденныеСтроки Цикл
			Если ЭлементКоллекции.ТипСкладаМаркетплейса = "FBO" Тогда
				ОстатокFBO = ОстатокFBO + ЭлементКоллекции.КоличествоВНаличии;
				РезервFBO  = РезервFBO  + ЭлементКоллекции.КоличествоЗарезервировано;
			ИначеЕсли ЭлементКоллекции.ТипСкладаМаркетплейса = "FBS" Тогда
				ОстатокFBS = ОстатокFBS + ЭлементКоллекции.КоличествоВНаличии;
				РезервFBS  = РезервFBS  + ЭлементКоллекции.КоличествоЗарезервировано;
			КонецЕсли;
		КонецЦикла;
	
		МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ДатаАктуальностиОстатковМаркетплейса = ТекущаяДатаСеанса();
			МенеджерЗаписи.ОстатокFBO                           = ОстатокFBO;
			МенеджерЗаписи.РезервFBO                            = РезервFBO;
			МенеджерЗаписи.ОстатокFBS                           = ОстатокFBS;
			МенеджерЗаписи.РезервFBS                            = РезервFBS;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

// Выполняет загрузку информации о продажах товаров через торговую площадку.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода             - Дата, Неопределено - начало периода загрузки данных.
//   ОкончаниеПериода          - Дата, Неопределено - окончание периода загрузки данных.
//   МетодОтчетовОРеализации   - Булево - Истина, если использовать метод отчетов о реализованных товарах,
//                                 Ложь (по умолчанию) - приоритетным является метод отправлений.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ЗагрузитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку(УчетнаяЗаписьМаркетплейса,
			Знач НачалоПериода = Неопределено, Знач ОкончаниеПериода = Неопределено,
			МетодОтчетовОРеализации = Истина) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	
	// Доступна ли загрузка интеграционными методами
	ДоступнаЗагрузка = (НастройкиУчетнойЗаписи.СпособОтраженияПродажFBO = "Комиссия"
								И НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS <> "РеализацияВПути"
							Или НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "Комиссия")
						И Не НастройкиУчетнойЗаписи.ПродажиРазделяютсяПоДоговорам;
	
	Если Не ДоступнаЗагрузка Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных о продажах товаров через торговую площадку <%1> интеграционными методами не доступна.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗаписьМаркетплейса);
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку");
	
	// Подготовка структур данных для загрузки
	ПараметрыПолученияОборотов = ПараметрыПолученияОборотовПоПродажам(УчетнаяЗаписьМаркетплейса,
		НачалоПериода, ОкончаниеПериода);
		
	НачалоПериода    = ПараметрыПолученияОборотов.Период.ДатаНачала;
	ОкончаниеПериода = ПараметрыПолученияОборотов.Период.ДатаОкончания;
	
	ИмяОбъектаМетаданных = "Обработка.УправлениеПродажамиНаOzon";
	ИмяТабличнойЧасти    = "ДанныеОРеализованныхТоварах";
	
	ПараметрыЗагрузкиВТабличнуюЧасть = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяОбъектаМетаданных = ИмяОбъектаМетаданных;
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяТабличнойЧасти    = ИмяТабличнойЧасти;
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяМакетаСШаблоном   = "ЗагрузкаИзФайлаПозаказныйОтчетОРеализованныхТоварах";
	
	ПараметрыШапки       = ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки();
	ИнформацияПоКолонкам = ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам();
	
	ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(
		ПараметрыЗагрузкиВТабличнуюЧасть,
		ИнформацияПоКолонкам,
		ПараметрыШапки);
	
	ОбязательныеКолонки      = Новый Массив;
	ТаблицаЗагруженныхДанных = Новый ТаблицаЗначений;
	
	ИнтеграцияСМаркетплейсамиСервер.ДобавитьСтандартныеКолонки(ТаблицаЗагруженныхДанных, Истина);
	
	ТабличнаяЧасть = ИнтеграцияСМаркетплейсамиСервер.ТабличнаяЧастьОбъектаМетаданных(ИмяОбъектаМетаданных, ИмяТабличнойЧасти);
	РеквизитыТЧ    = ТабличнаяЧасть.Реквизиты;
	
	Для Каждого ЭлементКоллекции Из РеквизитыТЧ Цикл
		Если ЭлементКоллекции.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементКоллекции.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеКолонки.Добавить(ЭлементКоллекции.Имя);
		КонецЕсли;
		
		ТипРеквизита = ?(ЭлементКоллекции.Тип.СодержитТип(Тип("УникальныйИдентификатор")), 
			ОбщегоНазначения.ОписаниеТипаСтрока(36),
			ЭлементКоллекции.Тип);
		
		ТаблицаЗагруженныхДанных.Колонки.Добавить(ЭлементКоллекции.Имя, ТипРеквизита, ЭлементКоллекции.Представление());
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из ИнформацияПоКолонкам Цикл
		ТипКолонки = ?(ЭлементКоллекции.ТипКолонки = Неопределено, Новый ОписаниеТипов("Строка"), ЭлементКоллекции.ТипКолонки);
		Заголовок  = ?(ЗначениеЗаполнено(ЭлементКоллекции.Синоним), ЭлементКоллекции.Синоним, ЭлементКоллекции.ПредставлениеКолонки);
		
		РеквизитТЧ = РеквизитыТЧ.Найти(ЭлементКоллекции.ИмяКолонки);
		Если ЭлементКоллекции.ВидимостьПриСопоставлении И Не ЭлементКоллекции.ВидимостьВМакете Тогда
			Если РеквизитТЧ <> Неопределено Тогда
				// Колонка, видимая при сопоставлении
				ЭлементКоллекции.Примечание = "";
				Продолжить;
			Иначе
				// Служебная невидимая колонка
				ПрефиксКолонки = "";
			КонецЕсли;
		Иначе
			// Колонка с данными из файла
			ПрефиксКолонки = "ФЛ_";
		КонецЕсли;
		
		ТаблицаЗагруженныхДанных.Колонки.Добавить(ПрефиксКолонки + ЭлементКоллекции.ИмяКолонки, ТипКолонки, Заголовок);
	КонецЦикла;
	
	// Получение данных интеграционными методами
	ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИнтеграционнымиМетодами();
	ПараметрыЗагрузки.Вставить("ИмяОбъектаМетаданных",          "Обработка.УправлениеПродажамиНаOzon");
	ПараметрыЗагрузки.Вставить("ИмяТабличнойЧасти",             "ДанныеОРеализованныхТоварах");
	ПараметрыЗагрузки.Вставить("АдресТаблицыЗагруженныхДанных", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()));
	ПараметрыЗагрузки.Вставить("ОбязательныеКолонки",           ОбязательныеКолонки);
	ПараметрыЗагрузки.Вставить("ПараметрыШапки",                ПараметрыШапки);
	ПараметрыЗагрузки.Вставить("ИнформацияПоКолонкам",          ИнформацияПоКолонкам);
	ПараметрыЗагрузки.Вставить("ЛистыШаблона",                  Неопределено);
	ПараметрыЗагрузки.Вставить("УчетнаяЗапись",                 УчетнаяЗаписьМаркетплейса);
	ПараметрыЗагрузки.Вставить("НачалоПериода",                 НачалоПериода);
	ПараметрыЗагрузки.Вставить("КонецПериода",                  ОкончаниеПериода);
	
	РезультатЗагрузки = Обработки.УправлениеПродажамиНаOzon.ПолучитьДанныеИнтеграционнымиМетодами(ТаблицаЗагруженныхДанных, ПараметрыЗагрузки);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.ИнформацияОбОшибке.ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			РезультатЗагрузки.ИнформацияОбОшибке.ОписаниеОшибки);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = РезультатЗагрузки.ИнформацияОбОшибке.ОписаниеОшибки;
		
	Иначе
		// Сопоставление данных
		Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗагруженныхДанных Цикл
			СтрокаТаблицыЗначений.НомерСтроки = ТаблицаЗагруженныхДанных.Индекс(СтрокаТаблицыЗначений) + 1;
		КонецЦикла;
		
		ТаблицаСопоставленияДанных = ТаблицаЗагруженныхДанных.СкопироватьКолонки();
		
		ПараметрыСопоставления = Новый Структура;
		ПараметрыСопоставления.Вставить("УчетнаяЗапись",                    УчетнаяЗаписьМаркетплейса);
		ПараметрыСопоставления.Вставить("ИмяТабличнойЧасти",                ИмяТабличнойЧасти);
		ПараметрыСопоставления.Вставить("КолонкиОбязательныеПриПроверке",   Новый СписокЗначений);
		ПараметрыСопоставления.Вставить("КолонкиДополнительныеПриПроверке", Новый СписокЗначений);
		
		Обработки.УправлениеПродажамиНаOzon.СопоставитьЗагружаемыеДанные(ТаблицаСопоставленияДанных, 
			ТаблицаЗагруженныхДанных, 
			ПараметрыСопоставления);
			
		// Создание документов
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("УчетнаяЗапись",                 УчетнаяЗаписьМаркетплейса);
		ПараметрыЗаписи.Вставить("ДополнительныеПараметры",       Неопределено);
		ПараметрыЗаписи.Вставить("ИмяТабличнойЧасти",             ИмяТабличнойЧасти);
		ПараметрыЗаписи.Вставить("ПараметрыШапки",                ПараметрыШапки);
		ПараметрыЗаписи.Вставить("ЗагружатьНезаполненныеСтроки",  Истина);
		
		РезультатЗаписи = Обработки.УправлениеПродажамиНаOzon.ЗаписатьЗагружаемыеДанные(ТаблицаСопоставленияДанных, 
			ПараметрыЗаписи);
		
		Если ЗначениеЗаполнено(РезультатЗаписи.ОписаниеОшибки) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При загрузке информации о продажах товаров через торговую площадку для учетной записи ""%1"" возникли ошибки: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УчетнаяЗаписьМаркетплейса,
				РезультатЗаписи.ОписаниеОшибки);
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
				
			Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		ИначеЕсли РезультатЗаписи.Ссылки.Количество() > 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сформированные документы о продажах товаров через торговую площадку для учетной записи ""%1"": 
				           |%2'",
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УчетнаяЗаписьМаркетплейса,
				СтрСоединить(РезультатЗаписи.Ссылки, Символы.ПС));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,,, 
				ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДатуПоследнегоЗагруженногоМесяцаПоПродажам(УчетнаяЗаписьМаркетплейса,
		ПараметрыПолученияОборотов.ДатаПоследнейЗагрузки);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер,
		ТаблицаЗагруженныхДанных.Количество() / 100);
	
	Возврат Ошибка;
	
КонецФункции

// Получает c использованием методов API таблицу оборотов для загрузки отчета по продажам.
//
// Параметры:
//   Параметры          - см. ПараметрыПолученияОборотовПоПродажам.
//   ИнформацияОбОшибке - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ПолучитьТаблицуОборотовПоПродажам(Параметры, ИнформацияОбОшибке) Экспорт

	Период                    = Параметры.Период;
	НачалоПериода             = Параметры.НачалоПериода;
	ОкончаниеПериода          = Параметры.ОкончаниеПериода;
	НастройкиУчетнойЗаписи    = Параметры.НастройкиУчетнойЗаписи;
	УчетнаяЗаписьМаркетплейса = Параметры.УчетнаяЗаписьМаркетплейса;
	МетодОтчетовОРеализации   = Параметры.МетодОтчетовОРеализации;

	ТаблицаОборотовТоваров = НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(Истина);
	ТаблицаОборотовТоваров.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОборотовТоваров.Колонки.Добавить("ДатаОперации",  Новый ОписаниеТипов("Дата"));

	Пока НачалоПериода < Период.ДатаОкончания Цикл
		ОкончаниеПериода = Мин(КонецМесяца(НачалоПериода), Период.ДатаОкончания);
		
		Если НастройкиУчетнойЗаписи.ПродажиРазделяютсяПоДоговорам 
				И Не МетодОтчетовОРеализации Тогда
			// Получение списка транзакций (заказы)
			Отказ = Ложь;
			Транзакции = ПолучитьСписокТранзакций(
							УчетнаяЗаписьМаркетплейса, 
							НачалоДня(НачалоПериода), КонецДня(ОкончаниеПериода), 
							"", 
							"orders", 
							Отказ);
			
			Если Отказ Тогда
				ИнформацияОбОшибке.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				ИнформацияОбОшибке.ОписаниеОшибки = ИнформацияОбОшибке.ОписаниеОшибки
										+ ?(ЗначениеЗаполнено(ИнформацияОбОшибке.ОписаниеОшибки), Символы.ПС, "") 
										+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'При получении списка транзакций по заказам через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
											УчетнаяЗаписьМаркетплейса,
											Формат(НачалоПериода, "ДЛФ=D;"),
											Формат(ОкончаниеПериода, "ДЛФ=D;"));
			КонецЕсли;
			
			// Получение отправлений (заказы)
			Отказ = Ложь;
			ОборотыТоваров = ОборотыТоваровНаСкладахТорговойПлощадки(
								УчетнаяЗаписьМаркетплейса, 
								НачалоДня(НачалоПериода - 15 * 86400), КонецДня(ОкончаниеПериода), 
								"",
								"FBO, FBS",
								Истина,
								Отказ);
			
			Если Отказ Тогда
				ИнформацияОбОшибке.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				ИнформацияОбОшибке.ОписаниеОшибки = ИнформацияОбОшибке.ОписаниеОшибки
										+ ?(ЗначениеЗаполнено(ИнформацияОбОшибке.ОписаниеОшибки), Символы.ПС, "") 
										+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'При получении информации о продажах товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
											УчетнаяЗаписьМаркетплейса,
											Формат(ДобавитьМесяц(НачалоПериода, -1), "ДЛФ=D;"),
											Формат(ОкончаниеПериода, "ДЛФ=D;"));
			КонецЕсли;
			
			// Поиск и обработка "пропущенных" отправлений
			ОборотыТоваров.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
			ОборотыТоваров.Колонки.Добавить("ДатаОперации",  Новый ОписаниеТипов("Дата"));
			Индекс = ОборотыТоваров.Количество() - 1;
			
			Пока Индекс >= 0 Цикл
				СтрокаТаблицыЗначений = ОборотыТоваров[Индекс];
				Отправление           = Транзакции.Получить(СтрокаТаблицыЗначений.НомерОтправления);
				
				Если Отправление = Неопределено Тогда
					ОборотыТоваров.Удалить(Индекс);
					
				Иначе
					СтрокаТаблицыЗначений.НомерОперации = Новый УникальныйИдентификатор();
					СтрокаТаблицыЗначений.ДатаОперации  = НачалоМесяца(Отправление.ДатаОперации);
					
					Отправление.Вставить("Пропустить", Истина);
				КонецЕсли;
				
				Индекс = Индекс - 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОборотыТоваров, ТаблицаОборотовТоваров);
			
			Для Каждого КлючЗначение Из Транзакции Цикл
				Если КлючЗначение.Значение.Свойство("Пропустить") 
						И КлючЗначение.Значение.Пропустить Тогда
					Продолжить;
				КонецЕсли;
				
				Отказ = Ложь;
				ОборотыТоваровПоНомеруОтправления = ОборотыТоваровНаСкладахТорговойПлощадкиПоНомеруОтправления(
														УчетнаяЗаписьМаркетплейса, 
														КлючЗначение.Ключ, 
														"",
														КлючЗначение.Значение.СхемаДоставки,
														Истина,
														Отказ);
				
				Если Отказ Тогда
					ИнформацияОбОшибке.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
					ИнформацияОбОшибке.ОписаниеОшибки = ИнформацияОбОшибке.ОписаниеОшибки
											+ ?(ЗначениеЗаполнено(ИнформацияОбОшибке.ОписаниеОшибки), Символы.ПС, "") 
											+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'При получении информации о продажах товаров через торговую площадку <%1> по номеру отправления %2 возникли ошибки. Подробности см. в журнале регистрации.'",
													ОбщегоНазначения.КодОсновногоЯзыка()),
												УчетнаяЗаписьМаркетплейса,
												КлючЗначение.Ключ);
					
				Иначе	                                           
					ОборотыТоваровПоНомеруОтправления.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
					ОборотыТоваровПоНомеруОтправления.Колонки.Добавить("ДатаОперации",  Новый ОписаниеТипов("Дата"));
					
					Для Каждого СтрокаТаблицыЗначений Из ОборотыТоваровПоНомеруОтправления Цикл
						СтрокаТаблицыЗначений.НомерОперации = Новый УникальныйИдентификатор();
						СтрокаТаблицыЗначений.ДатаОперации  = НачалоМесяца(КлючЗначение.Значение.ДатаОперации);
					КонецЦикла;
												
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОборотыТоваровПоНомеруОтправления, ТаблицаОборотовТоваров);
				КонецЕсли;
			КонецЦикла;
			
			// Получение списка транзакций (возвраты) 
			Отказ = Ложь;
			Транзакции = ПолучитьСписокТранзакций(
							УчетнаяЗаписьМаркетплейса, 
							НачалоДня(НачалоПериода), КонецДня(ОкончаниеПериода), 
							"ClientReturnAgentOperation, OperationAgentStornoDeliveredToCustomer", 
							"returns", 
							Отказ);
			
			Если Отказ Тогда
				ИнформацияОбОшибке.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				ИнформацияОбОшибке.ОписаниеОшибки = ИнформацияОбОшибке.ОписаниеОшибки
										+ ?(ЗначениеЗаполнено(ИнформацияОбОшибке.ОписаниеОшибки), Символы.ПС, "") 
										+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'При получении списка транзакций о возвратах товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
											УчетнаяЗаписьМаркетплейса,
											Формат(НачалоПериода, "ДЛФ=D;"),
											Формат(ОкончаниеПериода, "ДЛФ=D;"));
			КонецЕсли;
			
			// Получение отправлений (возвраты)
			Для Каждого КлючЗначение Из Транзакции Цикл
				Отказ = Ложь;
				ВозвратыТоваровПоНомеруОтправления = ВозвратыТоваровНаСкладахТорговойПлощадкиПоНомеруОтправления(
											УчетнаяЗаписьМаркетплейса, 
											КлючЗначение.Ключ, 
											"",
											КлючЗначение.Значение.СхемаДоставки,
											Истина,
											Отказ);
				
				Если Отказ Тогда
					ИнформацияОбОшибке.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
					ИнформацияОбОшибке.ОписаниеОшибки = ИнформацияОбОшибке.ОписаниеОшибки
											+ ?(ЗначениеЗаполнено(ИнформацияОбОшибке.ОписаниеОшибки), Символы.ПС, "") 
											+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'При получении информации о возвратах товаров через торговую площадку <%1> по номеру отправления %2 возникли ошибки. Подробности см. в журнале регистрации.'",
													ОбщегоНазначения.КодОсновногоЯзыка()),
												УчетнаяЗаписьМаркетплейса,
												КлючЗначение.Ключ);
					
				Иначе
					ВозвратыТоваровПоНомеруОтправления.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
					ВозвратыТоваровПоНомеруОтправления.Колонки.Добавить("ДатаОперации",  Новый ОписаниеТипов("Дата"));
					
					Для Каждого СтрокаТаблицыЗначений Из ВозвратыТоваровПоНомеруОтправления Цикл
						СтрокаТаблицыЗначений.НомерОперации = Новый УникальныйИдентификатор();
						СтрокаТаблицыЗначений.ДатаОперации  = НачалоМесяца(КлючЗначение.Значение.ДатаОперации);
					КонецЦикла;
					
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВозвратыТоваровПоНомеруОтправления, ТаблицаОборотовТоваров);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Не НастройкиУчетнойЗаписи.ПродажиРазделяютсяПоДоговорам И МетодОтчетовОРеализации Тогда
			// Получение отчетов о реализации доставленных и возвращенных товаров за месяц
			Отказ = Ложь;
			ОборотыТоваров = ОтчетОРеализацииТоваровНаСкладахТорговойПлощадки(
								УчетнаяЗаписьМаркетплейса, 
								НачалоПериода, 
								Отказ);
			
			Если Отказ Тогда
				ИнформацияОбОшибке.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				ИнформацияОбОшибке.ОписаниеОшибки = ИнформацияОбОшибке.ОписаниеОшибки
										+ ?(ЗначениеЗаполнено(ИнформацияОбОшибке.ОписаниеОшибки), Символы.ПС, "") 
										+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'При получении отчетов о реализации доставленных и возвращенных товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
											УчетнаяЗаписьМаркетплейса,
											Формат(ДобавитьМесяц(НачалоПериода, -1), "ДЛФ=D;"),
											Формат(ОкончаниеПериода, "ДЛФ=D;"));
			Иначе
				ОборотыТоваров.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
				ОборотыТоваров.Колонки.Добавить("ДатаОперации",  Новый ОписаниеТипов("Дата"));
				
				Для Каждого СтрокаТаблицыЗначений Из ОборотыТоваров Цикл
					СтрокаТаблицыЗначений.НомерОперации = Новый УникальныйИдентификатор();
					СтрокаТаблицыЗначений.ДатаОперации  = НачалоПериода;
				КонецЦикла;
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОборотыТоваров, ТаблицаОборотовТоваров);
			КонецЕсли;
		КонецЕсли;
		
		НачалоПериода = КонецМесяца(НачалоПериода) + 1;
	КонецЦикла;

	Возврат ТаблицаОборотовТоваров;

КонецФункции

// Выполняет обновление информации о продажах товаров через торговую площадку.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода             - Дата -  
//                             - Неопределено - начало периода загрузки данных.
//   ОкончаниеПериода          - Дата - 
//                             - Неопределено - окончание периода загрузки данных.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку(УчетнаяЗаписьМаркетплейса, 
			Знач НачалоПериода = Неопределено, Знач ОкончаниеПериода = Неопределено) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Отказ                  = Ложь;
	ТаблицаОстатковТоваров = ОстаткиТоваровНаСкладахТорговойПлощадки(УчетнаяЗаписьМаркетплейса, "ALL", Отказ);
	
	Если Отказ Тогда
		Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'При обновлении информации о продажах товаров через торговую площадку <%1> возникли ошибки. Подробности см. в журнале регистрации.'"),
									УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;
	
	ТаблицаОборотовТоваров = НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Если НачалоПериода = Неопределено 
			Или НачалоПериода = Дата(1, 1, 1) Тогда
		НачалоПериода = НачалоДня(ДобавитьМесяц(ТекущаяДата, -12));
	КонецЕсли;
	Если ОкончаниеПериода = Неопределено 
			Или ОкончаниеПериода = Дата(1, 1, 1) Тогда
		ОкончаниеПериода = КонецДня(ТекущаяДата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТ_Цифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ТоварыНаСкладахТорговыхПлощадокЗаДень.Период, ДЕНЬ) КАК Период,
		|	МИНИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаДень.ВсеЗаказыОбработаны) КАК ВсеЗаказыОбработаны
		|ПОМЕСТИТЬ ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень
		|ИЗ
		|	РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаДень
		|ГДЕ
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки = &УчетнаяЗаписьМаркетплейса
		|	И ТоварыНаСкладахТорговыхПлощадокЗаДень.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И НЕ (ТоварыНаСкладахТорговыхПлощадокЗаДень.Период, ИСТИНА) В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних.Период),
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень.СрезПоследних(, УчетнаяЗаписьТорговойПлощадки = &УчетнаяЗаписьМаркетплейса) КАК ТоварыНаСкладахТорговыхПлощадокЗаДеньСрезПоследних)
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ТоварыНаСкладахТорговыхПлощадокЗаДень.Период, ДЕНЬ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень.Период КАК Период,
		|	ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень.ВсеЗаказыОбработаны КАК ВсеЗаказыОбработаны
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Цифры.Цифра + Цифры10.Цифра * 10 + Цифры100.Цифра * 100), ДЕНЬ),
		|	ЛОЖЬ
		|ИЗ
		|	ВТ_Цифры КАК Цифры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Цифры КАК Цифры10
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Цифры КАК Цифры100
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Цифры.Цифра + Цифры10.Цифра * 10 + Цифры100.Цифра * 100), ДЕНЬ) МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И НЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Цифры.Цифра + Цифры10.Цифра * 10 + Цифры100.Цифра * 100), ДЕНЬ) В
		|				(ВЫБРАТЬ
		|					ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень.Период КАК Период
		|				ИЗ
		|					ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ОкончаниеПериода, ДЕНЬ), ДЕНЬ, 1),
		|	НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Цифры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТоварыНаСкладахТорговыхПлощадокЗаДень
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды1.Период КАК Период,
		|	ВТ_Периоды1.ВсеЗаказыОбработаны КАК ВсеЗаказыОбработаны,
		|	КОЛИЧЕСТВО(ВТ_Периоды1.ВсеЗаказыОбработаны) КАК Интервал
		|ПОМЕСТИТЬ ВТ_Интервалы
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК ВТ_Периоды2
		|		ПО ВТ_Периоды1.Период <= ВТ_Периоды2.Период
		|			И ВТ_Периоды1.ВсеЗаказыОбработаны <> ВТ_Периоды2.ВсеЗаказыОбработаны
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды1.Период,
		|	ВТ_Периоды1.ВсеЗаказыОбработаны
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Периоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_Интервалы.Период) КАК НачалоПериода,
		|	МАКСИМУМ(ВТ_Интервалы.Период) КАК ОкончаниеПериода,
		|	ВТ_Интервалы.ВсеЗаказыОбработаны КАК ВсеЗаказыОбработаны
		|ИЗ
		|	ВТ_Интервалы КАК ВТ_Интервалы
		|ГДЕ
		|	ВТ_Интервалы.ВсеЗаказыОбработаны = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Интервалы.ВсеЗаказыОбработаны,
		|	ВТ_Интервалы.Интервал
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоПериода";

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",          ОкончаниеПериода);

	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		ОборотыТоваровЗаПериод = ОборотыТоваровНаСкладахТорговойПлощадки(
									УчетнаяЗаписьМаркетплейса, 
									НачалоДня(ВыборкаДанных.НачалоПериода), КонецДня(ВыборкаДанных.ОкончаниеПериода), 
									"", 
									"FBO",
									Ложь,
									Отказ);
		
		Если Отказ Тогда
			Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'При обновлении информации о продажах товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
										УчетнаяЗаписьМаркетплейса,
										Формат(ВыборкаДанных.НачалоПериода, "ДЛФ=D;"),
										Формат(ВыборкаДанных.ОкончаниеПериода, "ДЛФ=D;"));
			Возврат Ошибка;
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОборотыТоваровЗаПериод, ТаблицаОборотовТоваров);
	КонецЦикла;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ВТ_СоответствияОбъектовМаркетплейсов
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
		|	И СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBO
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НаименованиеОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстатковТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаОстатковТоваров.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаОстатковТоваров.НаименованиеСклада КАК НаименованиеСклада,
		|	ТаблицаОстатковТоваров.ВНаличии КАК ВНаличии,
		|	ТаблицаОстатковТоваров.Зарезервировано КАК Зарезервировано
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	&ТаблицаОстатковТоваров КАК ТаблицаОстатковТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НаименованиеСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОборотовТоваров.ДатаОтправления КАК Период,
		|	ТаблицаОборотовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаОборотовТоваров.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаОборотовТоваров.НаименованиеСклада КАК НаименованиеСклада,
		|	ТаблицаОборотовТоваров.Заказано КАК Заказано,
		|	ТаблицаОборотовТоваров.Доставлено КАК Доставлено,
		|	ТаблицаОборотовТоваров.Отменено КАК Отменено
		|ПОМЕСТИТЬ ВТ_Обороты
		|ИЗ
		|	&ТаблицаОборотовТоваров КАК ТаблицаОборотовТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиИОбороты.Период КАК Период,
		|	ОстаткиИОбороты.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ОстаткиИОбороты.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ОстаткиИОбороты.НаименованиеСклада КАК НаименованиеСклада,
		|	СУММА(ОстаткиИОбороты.ВНаличии) КАК ВНаличии,
		|	СУММА(ОстаткиИОбороты.Зарезервировано) КАК Зарезервировано,
		|	СУММА(ОстаткиИОбороты.Заказано) КАК Заказано,
		|	СУММА(ОстаткиИОбороты.Доставлено) КАК Доставлено,
		|	СУММА(ОстаткиИОбороты.Отменено) КАК Отменено
		|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ТекущаяДата КАК Период,
		|		ВТ_Остатки.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|		ЕСТЬNULL(ВТ_СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, ВТ_Остатки.ИдентификаторСклада) КАК ИдентификаторСклада,
		|		ВТ_Остатки.НаименованиеСклада КАК НаименованиеСклада,
		|		ВТ_Остатки.ВНаличии КАК ВНаличии,
		|		ВТ_Остатки.Зарезервировано КАК Зарезервировано,
		|		0 КАК Заказано,
		|		0 КАК Доставлено,
		|		0 КАК Отменено
		|	ИЗ
		|		ВТ_Остатки КАК ВТ_Остатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияОбъектовМаркетплейсов КАК ВТ_СоответствияОбъектовМаркетплейсов
		|			ПО (ВТ_СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса = ВТ_Остатки.НаименованиеСклада)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Обороты.Период,
		|		ВТ_Обороты.ИдентификаторПубликации,
		|		ВТ_Обороты.ИдентификаторСклада,
		|		ВТ_Обороты.НаименованиеСклада,
		|		0,
		|		0,
		|		ВТ_Обороты.Заказано,
		|		ВТ_Обороты.Доставлено,
		|		ВТ_Обороты.Отменено
		|	ИЗ
		|		ВТ_Обороты КАК ВТ_Обороты) КАК ОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.Период,
		|	ОстаткиИОбороты.ИдентификаторПубликации,
		|	ОстаткиИОбороты.ИдентификаторСклада,
		|	ОстаткиИОбороты.НаименованиеСклада
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СоответствияОбъектовМаркетплейсов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Остатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Обороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиИОбороты.Период КАК Период,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьТорговойПлощадки,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ВТ_ОстаткиИОбороты.ИдентификаторСклада КАК ИдентификаторСкладаТорговойПлощадки,
		|	ВТ_ОстаткиИОбороты.НаименованиеСклада КАК НаименованиеСкладаТорговойПлощадки,
		|	ВТ_ОстаткиИОбороты.ВНаличии КАК ВНаличии,
		|	ВТ_ОстаткиИОбороты.Зарезервировано КАК Зарезервировано,
		|	ВТ_ОстаткиИОбороты.Заказано КАК Заказано,
		|	ВТ_ОстаткиИОбороты.Доставлено КАК Доставлено,
		|	ВТ_ОстаткиИОбороты.Отменено КАК Отменено,
		|	ЕСТЬNULL(ТоварыНаСкладахТорговыхПлощадокЗаДень.ЕстьВНаличииВТечениеДня, ЛОЖЬ) КАК ЕстьВНаличииВПредыдущийДень
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации = ВТ_ОстаткиИОбороты.ИдентификаторПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаДень
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка
		|			И (ВТ_ОстаткиИОбороты.ИдентификаторСклада = ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки)
		|			И (ВТ_ОстаткиИОбороты.Период > ТоварыНаСкладахТорговыхПлощадокЗаДень.Период)
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И (ЕСТЬNULL(ТоварыНаСкладахТорговыхПлощадокЗаДень.Период, &ТекущаяДата), ИСТИНА) В
		|			(ВЫБРАТЬ
		|				ЕСТЬNULL(МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Период), &ТекущаяДата) КАК Период,
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень
		|			ГДЕ
		|				ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.УчетнаяЗаписьТорговойПлощадки
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Номенклатура
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Характеристика
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Упаковка
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.ИдентификаторСкладаТорговойПлощадки
		|				И ВТ_ОстаткиИОбороты.Период > ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Период)";

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаОстатковТоваров",    ТаблицаОстатковТоваров);
	Запрос.УстановитьПараметр("ТаблицаОборотовТоваров",    ТаблицаОборотовТоваров);
	Запрос.УстановитьПараметр("ТекущаяДата",               НачалоДня(ТекущаяДата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень");
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Период", "Период");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьТорговойПлощадки", "УчетнаяЗаписьТорговойПлощадки");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			КонецЕсли;
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
			КонецЕсли;
			БлокировкаДанных.Заблокировать();
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			Пока ВыборкаДанных.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Период.Установить(ВыборкаДанных.Период);
				НаборЗаписей.Отбор.УчетнаяЗаписьТорговойПлощадки.Установить(ВыборкаДанных.УчетнаяЗаписьТорговойПлощадки);
				НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДанных.Номенклатура);
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДанных.Характеристика);
				КонецЕсли;
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НаборЗаписей.Отбор.Упаковка.Установить(ВыборкаДанных.Упаковка);
				КонецЕсли;
				НаборЗаписей.Отбор.ИдентификаторСкладаТорговойПлощадки.Установить(ВыборкаДанных.ИдентификаторСкладаТорговойПлощадки);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					Запись = НаборЗаписей[0];
				Иначе
					Запись                                     = НаборЗаписей.Добавить();
					Запись.Период                              = ВыборкаДанных.Период;
					Запись.УчетнаяЗаписьТорговойПлощадки       = ВыборкаДанных.УчетнаяЗаписьТорговойПлощадки;
					Запись.Номенклатура                        = ВыборкаДанных.Номенклатура;
					Запись.Характеристика                      = ВыборкаДанных.Характеристика;
					Запись.Упаковка                            = ВыборкаДанных.Упаковка;
					Запись.ИдентификаторСкладаТорговойПлощадки = ВыборкаДанных.ИдентификаторСкладаТорговойПлощадки;
				КонецЕсли;
				
				Если Запись.Период = НачалоДня(ТекущаяДата) Тогда
					Запись.ВНаличии               = ВыборкаДанных.ВНаличии;
					Запись.Зарезервировано        = ВыборкаДанных.Зарезервировано;
					Запись.ДатаОбновленияОстатков = ТекущаяДата;
				КонецЕсли;
				
				Запись.ПредставлениеОбъектаМаркетплейса   = ВыборкаДанных.ПредставлениеОбъектаМаркетплейса;
				Запись.НаименованиеСкладаТорговойПлощадки = ВыборкаДанных.НаименованиеСкладаТорговойПлощадки;
				Запись.Заказано                           = ВыборкаДанных.Заказано;
				Запись.Отменено                           = ВыборкаДанных.Отменено;
				Запись.ВсеЗаказыОбработаны                = (ВыборкаДанных.Заказано = ВыборкаДанных.Доставлено + ВыборкаДанных.Отменено);
				Запись.ДатаОбновленияОборотов             = ТекущаяДата;
				
				Если Запись.Период = НачалоДня(ТекущаяДата) Тогда
					Запись.ЕстьВНаличииВТечениеДня = Запись.ЕстьВНаличииВТечениеДня 
														Или (Запись.ВНаличии > 0) 
														Или (Запись.Зарезервировано > 0) 
														Или (Запись.Заказано > 0);
				Иначе
					Запись.ЕстьВНаличииВТечениеДня = ВыборкаДанных.ЕстьВНаличииВПредыдущийДень 
														Или (Запись.ВНаличии > 0) 
														Или (Запись.Заказано > 0);
				КонецЕсли;
				
				НаборЗаписей.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обновлении информации о продажах товаров через торговую площадку <%1> возникли ошибки: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗаписьМаркетплейса,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
		Замер, 
		ВыборкаДанных.Количество() / 100,
		"ОстаткиИОбороты");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТ_Цифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Цифры.Цифра + Цифры10.Цифра * 10 + Цифры100.Цифра * 100), ДЕНЬ) КАК Период
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_Цифры КАК Цифры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Цифры КАК Цифры10
		|		ПО (ИСТИНА)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Цифры КАК Цифры100
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Цифры.Цифра + Цифры10.Цифра * 10 + Цифры100.Цифра * 100), ДЕНЬ) МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И НЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, Цифры.Цифра + Цифры10.Цифра * 10 + Цифры100.Цифра * 100), ДЕНЬ) В
		|				(ВЫБРАТЬ
		|					ТоварыНаСкладахТорговыхПлощадокЗаДень.Период КАК Период
		|				ИЗ
		|					РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаДень
		|				ГДЕ
		|					ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки = &УчетнаяЗаписьМаркетплейса
		|					И ТоварыНаСкладахТорговыхПлощадокЗаДень.ДатаОбновленияОстатков <> &ПустаяДата)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК Период,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Период КАК ПредыдущийПериод,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки КАК УчетнаяЗаписьТорговойПлощадки,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка КАК Упаковка,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки КАК ИдентификаторСкладаТорговойПлощадки,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.НаименованиеСкладаТорговойПлощадки КАК НаименованиеСкладаТорговойПлощадки,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.ДатаОбновленияОстатков КАК ДатаОбновленияОстатков,
		|	ТоварыНаСкладахТорговыхПлощадокЗаДень.ДатаОбновленияОборотов КАК ДатаОбновленияОборотов,
		|	ЕСТЬNULL(ТоварыНаСкладахТорговыхПлощадокЗаДень.ВНаличии, 0) КАК ВНаличии,
		|	0 КАК Зарезервировано
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаДень
		|		ПО ВТ_Периоды.Период > ТоварыНаСкладахТорговыхПлощадокЗаДень.Период
		|			И (ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки = &УчетнаяЗаписьМаркетплейса)
		|			И (ТоварыНаСкладахТорговыхПлощадокЗаДень.ДатаОбновленияОстатков <> &ПустаяДата)
		|ГДЕ
		|	(ТоварыНаСкладахТорговыхПлощадокЗаДень.Период, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Период) КАК Период,
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень КАК ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень
		|			ГДЕ
		|				ВТ_Периоды.Период > ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Период
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.УчетнаяЗаписьТорговойПлощадки = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.УчетнаяЗаписьТорговойПлощадки
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.Номенклатура = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Номенклатура
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.Характеристика = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Характеристика
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.Упаковка = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.Упаковка
		|				И ТоварыНаСкладахТорговыхПлощадокЗаДень.ИдентификаторСкладаТорговойПлощадки = ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.ИдентификаторСкладаТорговойПлощадки
		|				И ТоварыНаСкладахТорговыхПлощадокЗаПредыдущийДень.ДатаОбновленияОстатков <> &ПустаяДата)";

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоДня(Мин(НачалоПериода, НачалоДня(ТекущаяДата) - 1)));
	Запрос.УстановитьПараметр("ОкончаниеПериода",          КонецДня(Мин(ОкончаниеПериода, НачалоДня(ТекущаяДата) - 1)));
	Запрос.УстановитьПараметр("ПустаяДата",                Дата(1, 1, 1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень");
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Период", "Период");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьТорговойПлощадки", "УчетнаяЗаписьТорговойПлощадки");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			КонецЕсли;
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
			КонецЕсли;
			БлокировкаДанных.Заблокировать();
			
			ВыборкаДанных = РезультатЗапроса.Выбрать();
			Пока ВыборкаДанных.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ТоварыНаСкладахТорговыхПлощадокЗаДень.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Период.Установить(ВыборкаДанных.Период);
				НаборЗаписей.Отбор.УчетнаяЗаписьТорговойПлощадки.Установить(ВыборкаДанных.УчетнаяЗаписьТорговойПлощадки);
				НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДанных.Номенклатура);
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДанных.Характеристика);
				КонецЕсли;
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НаборЗаписей.Отбор.Упаковка.Установить(ВыборкаДанных.Упаковка);
				КонецЕсли;
				НаборЗаписей.Отбор.ИдентификаторСкладаТорговойПлощадки.Установить(ВыборкаДанных.ИдентификаторСкладаТорговойПлощадки);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					Запись                                     = НаборЗаписей.Добавить();
					Запись.Период                              = ВыборкаДанных.Период;
					Запись.УчетнаяЗаписьТорговойПлощадки       = ВыборкаДанных.УчетнаяЗаписьТорговойПлощадки;
					Запись.Номенклатура                        = ВыборкаДанных.Номенклатура;
					Запись.Характеристика                      = ВыборкаДанных.Характеристика;
					Запись.Упаковка                            = ВыборкаДанных.Упаковка;
					Запись.ИдентификаторСкладаТорговойПлощадки = ВыборкаДанных.ИдентификаторСкладаТорговойПлощадки;
					Запись.ВНаличии                            = ВыборкаДанных.ВНаличии;
					Запись.Зарезервировано                     = ВыборкаДанных.Зарезервировано;
					Запись.ПредставлениеОбъектаМаркетплейса    = ВыборкаДанных.ПредставлениеОбъектаМаркетплейса;
					Запись.НаименованиеСкладаТорговойПлощадки  = ВыборкаДанных.НаименованиеСкладаТорговойПлощадки;
					Запись.Заказано                            = 0;
					Запись.Отменено                            = 0;
					Запись.ЕстьВНаличииВТечениеДня             = Запись.ЕстьВНаличииВТечениеДня 
																	Или (Запись.ВНаличии > 0) 
																	Или (Запись.Зарезервировано > 0) ;
					Запись.ВсеЗаказыОбработаны                 = Ложь;
					Запись.ДатаОбновленияОстатков              = ВыборкаДанных.ДатаОбновленияОстатков;
					Запись.ДатаОбновленияОборотов              = ВыборкаДанных.ДатаОбновленияОборотов;
				КонецЕсли;
				
				НаборЗаписей.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обновлении информации о продажах товаров через торговую площадку <%1> возникли ошибки: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗаписьМаркетплейса,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
					
			Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Ошибка.ОписаниеОшибки = ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ошибка.КодОшибки) Тогда
		УстановитьПривилегированныйРежим(Истина);
		СерверныеОповещения.ОтправитьСерверноеОповещение(
			"ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьДанные",
			УчетнаяЗаписьМаркетплейса,
			Неопределено,
			Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ВыборкаДанных.Количество() / 100,
		"ПропущенныеПериоды");

	Возврат Ошибка;
	
КонецФункции

// Получает информацию о продажах товаров через торговую площадку за указанный период.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода             - Дата - 
//                             - Неопределено - начало периода загрузки данных.
//   ОкончаниеПериода          - Дата - 
//                             - Неопределено - окончание периода загрузки данных.
//
// Возвращаемое значение:
//   Структура - результат выполнения:
//     * Ошибка                 - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ТаблицаОборотовТоваров - ТаблицаЗначений - данные об оборотах, 
//                                  см. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ПолучитьДанныеПоПродажамТоваровЗаПериод(УчетнаяЗаписьМаркетплейса, 
			НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено) Экспорт

	Отказ = Ложь;

	Результат = Новый Структура;
	Результат.Вставить("Ошибка", ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ТаблицаОборотовТоваров", НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(Истина));

	Если НачалоПериода = Неопределено 
			Или ОкончаниеПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	// Доставлено.
	ТаблицаОборотовТоваров = ОборотыТоваровНаСкладахТорговойПлощадки(
			УчетнаяЗаписьМаркетплейса,
			НачалоПериода, ОкончаниеПериода,
			"delivered",
			"FBO, FBS",
			Истина,
			Отказ);
	
	Если Отказ Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении информации о продажах товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
			УчетнаяЗаписьМаркетплейса,
			Формат(ДобавитьМесяц(НачалоПериода, -1), "ДЛФ=D;"),
			Формат(ОкончаниеПериода, "ДЛФ=D;"));
	Иначе
		Результат.Вставить("ТаблицаОборотовТоваров", ТаблицаОборотовТоваров);
	КонецЕсли;

	// Отменено.
	ТаблицаОборотовТоваров = ОборотыТоваровНаСкладахТорговойПлощадки(
			УчетнаяЗаписьМаркетплейса,
			НачалоПериода, ОкончаниеПериода,
			"cancelled",
			"FBO, FBS",
			Истина,
			Отказ);
	
	Если Отказ Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении информации о продажах товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
			УчетнаяЗаписьМаркетплейса,
			Формат(ДобавитьМесяц(НачалоПериода, -1), "ДЛФ=D;"),
			Формат(ОкончаниеПериода, "ДЛФ=D;"));
	Иначе
		Если Результат.ТаблицаОборотовТоваров.Количество() = 0 Тогда
			Результат.Вставить("ТаблицаОборотовТоваров", ТаблицаОборотовТоваров);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОборотовТоваров, Результат.ТаблицаОборотовТоваров);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗаказыFBS

// Конструктор параметров загрузки заказов.
//
// Возвращаемое значение:
//   Структура - параметры загрузки:
//     * НачалоПериода       - Дата - начало периода загрузки данных.
//     * ОкончаниеПериода    - Дата - окончание периода загрузки данных.
//     * ВидФильтраПоПериоду - Строка - вид фильтра по периоду выборки:
//                               "ДатаСоздания" - по дате создания отправления (по умолчанию);
//                               "ДатаСборки" - по времени, до которого продавцу нужно собрать заказ сборки);
//                               "ДатаПередачиВДоставку" - по дате передачи отправления в доставку.
//     * СтатусОтправления   - Строка - статус отправления в терминах торговой площадки,
//                               см. Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению.
//     * ИдентификаторЗаказа - Строка, Массив Из Строка, Неопределено - идентификатор заказа выборочного получения данных.
//
Функция НовыйПараметрыЗагрузкиЗаказов() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("НачалоПериода",       Дата(1, 1, 1));
	Параметры.Вставить("ОкончаниеПериода",    Дата(1, 1, 1));
	Параметры.Вставить("ВидФильтраПоПериоду", "ДатаСоздания");
	Параметры.Вставить("СтатусОтправления",   "");
	Параметры.Вставить("ИдентификаторЗаказа", "");
	
	Возврат Параметры;

КонецФункции

// Выполняет загрузку заказов (отправлений) с торговой площадки.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - см. НовыйПараметрыЗагрузкиЗаказов.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ЗагрузитьЗаказыСТорговойПлощадки(УчетнаяЗапись, Знач Параметры) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	НастройкиУчетнойЗаписи      = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись);
	ЗначенияФункциональныхОпций = ИнтеграцияСМаркетплейсамиСервер.ПолучитьФункциональныеОпции(НастройкиУчетнойЗаписи.Соглашение);
	
	Если Не ЗначенияФункциональныхОпций.ИспользоватьЗаказыКлиентов Тогда
		ТекстОшибки = НСтр("ru = 'Отключена функциональная опция ""Использовать заказы клиентов"".'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не ЗначенияФункциональныхОпций.ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
		ТекстОшибки = НСтр("ru = 'Загрузка и обработка заказов доступны при использовании заказов клиентов в режимах ""Заказ только со склада"" или ""Заказ со склада и под заказ"".'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ОкончаниеПериода) Тогда
		Параметры.ОкончаниеПериода = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.НачалоПериода) Тогда
		Параметры.НачалоПериода = НачалоДня(ДобавитьМесяц(Параметры.ОкончаниеПериода, -1));
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ИдентификаторЗаказа) = Тип("Массив") Тогда
		ИдентификаторыЗаказов = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ИдентификаторЗаказа);
	Иначе
		ИдентификаторыЗаказов = Новый Массив;
		ИдентификаторыЗаказов.Добавить(Параметры.ИдентификаторЗаказа);
	КонецЕсли;
	
	ИдентификаторыЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыЗаказов);
	ТаблицаЗаказов = НоваяТаблицаЗаказовТорговойПлощадки();
	
	Для Каждого ИдентификаторЗаказа Из ИдентификаторыЗаказов Цикл
		Параметры.ИдентификаторЗаказа = ИдентификаторЗаказа;
		
		ПорцияЗаказов = ПолучитьНеобработанныеЗаказы(УчетнаяЗапись,
			Параметры,
			Ошибка);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПорцияЗаказов, ТаблицаЗаказов);
	КонецЦикла;
	
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для загрузки необработанных заказов с торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных();
	Результат.Служебное = Новый Массив;
	
	КодОшибки                 = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
	СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
	
	ТекстЗапроса = ТекстЗапросаНеобработанныхЗаказовТорговойПлощадки();
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВидТорговойПлощадки",          НастройкиУчетнойЗаписи.ВидМаркетплейса);
	ПараметрыЗаполнения.Вставить("УчетнаяЗапись",                УчетнаяЗапись);
	ПараметрыЗаполнения.Вставить("ВалютаУчета",                  НастройкиУчетнойЗаписи.ВалютаУчета);
	ПараметрыЗаполнения.Вставить("Организация",                  НастройкиУчетнойЗаписи.Организация);
	ПараметрыЗаполнения.Вставить("Партнер",                      ?(НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути",
																	НастройкиУчетнойЗаписи.ПокупательПартнер,
																	НастройкиУчетнойЗаписи.Партнер));
	ПараметрыЗаполнения.Вставить("Контрагент",                   ?(НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути",
																	НастройкиУчетнойЗаписи.ПокупательКонтрагент,
																	НастройкиУчетнойЗаписи.Контрагент));
	ПараметрыЗаполнения.Вставить("Соглашение",                   ?(НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути",
																	НастройкиУчетнойЗаписи.ПокупательСоглашение,
																	НастройкиУчетнойЗаписи.Соглашение));
	ПараметрыЗаполнения.Вставить("Договор",                      ?(НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути",
																	НастройкиУчетнойЗаписи.ПокупательДоговор,
																	НастройкиУчетнойЗаписи.ДоговорПродажиЧерезСкладыСобственные));
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация",        ?(НастройкиУчетнойЗаписи.СпособОтраженияПродажFBS = "РеализацияВПути",
																	Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности,
																	Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию));
	ПараметрыЗаполнения.Вставить("ПричинаОтменыПоУмолчанию",     НастройкиУчетнойЗаписи.ПричинаОтменыПоУмолчанию);
	ПараметрыЗаполнения.Вставить("КодОшибки",                    КодОшибки);
	ПараметрыЗаполнения.Вставить("СобытиеЖурналаРегистрации",    СобытиеЖурналаРегистрации);
	ПараметрыЗаполнения.Вставить("ЗагружатьНезаполненныеСтроки", Истина);
	ПараметрыЗаполнения.Вставить("ПерезаписатьДокументы",        Истина);
	ПараметрыЗаполнения.Вставить("ОчиститьТабличныеЧасти",       Истина);
	ПараметрыЗаполнения.Вставить("ОбработатьВариантОбеспечения", Истина);
	ПараметрыЗаполнения.Вставить("ПараметрыОбработки",           Неопределено);
	ПараметрыЗаполнения.Вставить("ТекстЗапроса",                 ТекстЗапроса);
	ПараметрыЗаполнения.Вставить("ЗаписатьНеобработанныеЗаказы", Истина);
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьЗаказыКлиентов(
		Результат,
		ТаблицаЗаказов,
		ПараметрыЗаполнения);
	
	Возврат Ошибка;
	
КонецФункции

// Обновляет статусы заказов (отправлений) торговой площадки.
//
// Параметры:
//   УчетнаяЗапись         - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры             - Структура Из КлючИЗначение - параметры функции:
//     * НачалоПериода       - Дата, Неопределено - начало периода обновления данных. По умолчанию - текущая дата.
//     * ОкончаниеПериода    - Дата, Неопределено - окончание периода обновления данных. По умолчанию - текущая дата.
//     * ИдентификаторЗаказа - Строка, Массив Из Строка, Неопределено - идентификатор заказа выборочного обновления данных.
//     * Заказ               - ДокументСсылка.ЗаказКлиента, Неопределено - заказ выборочного обновления данных.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ОбновитьСтатусыЗаказовТорговойПлощадки(УчетнаяЗапись, Знач Параметры) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Статусы = Новый Массив;
	ИдентификаторыЗаказов = Новый Массив;
	Заказы = Новый Массив;
	Если ТипЗнч(Параметры.ИдентификаторЗаказа) = Тип("Массив") Тогда
		ИдентификаторыЗаказов = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ИдентификаторЗаказа);
		ИдентификаторыЗаказов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыЗаказов);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИдентификаторЗаказа) Тогда
		ИдентификаторыЗаказов.Добавить(Параметры.ИдентификаторЗаказа);
	ИначеЕсли ТипЗнч(Параметры.Заказ) = Тип("Массив") Тогда
		Заказы = Параметры.Заказ;
	Иначе
		Статусы = СтатусыЗаказовFBSВРаботе();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись",         УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторыЗаказов", ИдентификаторыЗаказов);
	Запрос.УстановитьПараметр("Заказы",                Заказы);
	Запрос.УстановитьПараметр("Статусы",               Статусы);
	
	Запрос.Текст = ТекстЗапросаОбновленияСтатусовЗаказовТорговойПлощадки(Запрос.Параметры);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаОбщихИтогов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Не ВыборкаОбщихИтогов.Следующий() Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для обновления статусов заказов с торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Параметры.ОкончаниеПериода = КонецДня(ТекущаяДатаСеанса());
	Параметры.НачалоПериода    = ?(ЗначениеЗаполнено(ВыборкаОбщихИтогов.ДатаСозданияЗаказа),
		НачалоДня(ВыборкаОбщихИтогов.ДатаСозданияЗаказа),
		ДобавитьМесяц(Параметры.ОкончаниеПериода, -12) + 1);
	
	ТаблицаЗаказов = ПолучитьРезультатОбновленияСтатусовЗаказов(УчетнаяЗапись,
		Параметры.НачалоПериода,
		Параметры.ОкончаниеПериода,
		Неопределено,
		Ошибка);
	
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для обновления статусов заказов с торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьСтатусыЗаказовТорговойПлощадки");
	
	ИзмеренияРегистра = Метаданные.РегистрыСведений.ЗаказыТорговыхПлощадок.Измерения;
	ТаблицаЗаказов.Колонки.Добавить("ЗаказКлиентаСсылка", ИзмеренияРегистра.Заказ.Тип);
	ТаблицаЗаказов.Колонки.Добавить("ДокументОтгрузкиСсылка", ИзмеренияРегистра.ДокументОтгрузки.Тип);
	ТаблицаЗаказов.Колонки.Добавить("КОбработке", Новый ОписаниеТипов("Булево"));
	
	ТаблицаЗаказов.Индексы.Добавить("ИдентификаторЗаказа, НомерОтправления");
	ТаблицаЗаказов.Индексы.Добавить("КОбработке");	
	
	ВыборкаИдентификаторовЗаказов = ВыборкаОбщихИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовЗаказов.Следующий() Цикл
		ВыборкаОтправлений = ВыборкаИдентификаторовЗаказов.Выбрать();
		Пока ВыборкаОтправлений.Следующий() Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторЗаказа", ВыборкаОтправлений.ИдентификаторЗаказа);
			Если СтрНайти(ВыборкаОтправлений.НомерОтправления, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0 Тогда
				Отбор.Вставить("НомерОтправления", ВыборкаОтправлений.НомерРодительскогоОтправления);
			Иначе
				Отбор.Вставить("НомерОтправления", ВыборкаОтправлений.НомерОтправления);
			КонецЕсли;
			СтрокиПоиска = ТаблицаЗаказов.НайтиСтроки(Отбор);
			
			Если СтрокиПоиска.Количество() > 0 Тогда
				Если СтрНайти(ВыборкаОтправлений.НомерОтправления, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0 Тогда
					СтрокаТаблицыЗначений = ТаблицаЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокиПоиска[0]);
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаОтправлений, "НомерОтправления, НомерРодительскогоОтправления");
				Иначе
					СтрокаТаблицыЗначений = СтрокиПоиска[0];
				КонецЕсли;
				
				Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению(
					СтрокаТаблицыЗначений.СтатусОтправления, 
					СтрокаТаблицыЗначений.ПодстатусОтправления);
					
				Если ВыборкаОтправлений.Статус <> Статус Тогда
					Если ЗначениеЗаполнено(ВыборкаОтправлений.ЗаказКлиентаСсылка)
							Или ЗначениеЗаполнено(ВыборкаОтправлений.ДокументОтгрузкиСсылка) Тогда
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаОтправлений, "ЗаказКлиентаСсылка, ДокументОтгрузкиСсылка");
					КонецЕсли;
					СтрокаТаблицыЗначений.КОбработке = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись);
	ОчищатьДанныеЭкземпляров = НастройкиУчетнойЗаписи.ОчищатьДанныеЭкземпляров;
	Если ОчищатьДанныеЭкземпляров = Неопределено Тогда
		ОчищатьДанныеЭкземпляров = Истина;
	КонецЕсли;
	
	СтатусыВРаботе = СтатусыЗаказовFBSВРаботе(Истина);
	
	Отказ = Ложь;
	ОбновленныеЗаказы = Новый Массив;
	ПричиныОтмены     = Новый Соответствие;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КОбработке", Истина);
	
	СтрокиЗаказа = ТаблицаЗаказов.НайтиСтроки(Отбор);
	Для Каждого ДанныеОтправления Из СтрокиЗаказа Цикл
		СтатусЗаписан = Ложь;
		ОчищатьДанныеЭкземпляровЗаказа = ОчищатьДанныеЭкземпляров;
		
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", ДанныеОтправления.ЗаказКлиентаСсылка);
			ЭлементБлокировкиДанных.УстановитьЗначение("ДокументОтгрузки", ДанныеОтправления.ДокументОтгрузкиСсылка);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(ДанныеОтправления.ЗаказКлиентаСсылка);
			НаборЗаписей.Отбор.ДокументОтгрузки.Установить(ДанныеОтправления.ДокументОтгрузкиСсылка);
			НаборЗаписей.Прочитать();
			
			Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению(
				ДанныеОтправления.СтатусОтправления, 
				ДанныеОтправления.ПодстатусОтправления);
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОтправления);
				
				Запись.УчетнаяЗапись    = УчетнаяЗапись;
				Запись.Заказ            = ДанныеОтправления.ЗаказКлиентаСсылка;
				Запись.ДокументОтгрузки = ДанныеОтправления.ДокументОтгрузкиСсылка;
			Иначе
				Запись = НаборЗаписей[0];
			КонецЕсли;
			
			Запись.Статус                              = Статус;
			Запись.ДатаПлановойОтгрузки                = ДанныеОтправления.ДатаСборки;
			Запись.ИдентификаторСкладаТорговойПлощадки = ДанныеОтправления.ИдентификаторСклада;
			Запись.НаименованиеСкладаТорговойПлощадки  = ДанныеОтправления.НаименованиеСклада;
			Запись.НомерРодительскогоОтправления       = ДанныеОтправления.НомерРодительскогоОтправления;
			Запись.ДатаУстановкиСтатуса                = ТекущаяДатаСеанса();
			Запись.ДатаСозданияЗаказа                  = ДанныеОтправления.ДатаОтправления;
			Запись.ТребуетсяПолучениеЭтикеток          = (Запись.Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
			
			Если ОчищатьДанныеЭкземпляровЗаказа Тогда
				ОчищатьДанныеЭкземпляровЗаказа = (СтатусыВРаботе.Найти(Статус) = Неопределено);
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
			СтатусЗаписан = Истина;
			ОбновленныеЗаказы.Добавить(ДанныеОтправления.ЗаказКлиентаСсылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При записи данных по номеру заказа %1 возникла ошибка: %2'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ДанныеОтправления.НомерЗаказа,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
		КонецПопытки;
		
		Если Не Отказ И СтатусЗаписан Тогда
			Если Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.Возвращен
					Или Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен Тогда
				ПричинаОтмены = ПричиныОтмены.Получить(ДанныеОтправления.ИдентификаторПричиныОтмены);
				Если ПричинаОтмены = Неопределено Тогда
					ПричинаОтмены = РегистрыСведений.СоответствияОбъектовМаркетплейсов.ПолучитьОбъектСоответствия(
						УчетнаяЗапись, 
						ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.ПричинаОтмены"), 
						ДанныеОтправления.ИдентификаторПричиныОтмены,
						Тип("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"));
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
					ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию(ДанныеОтправления.ПричинаОтмены, Истина);
					Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
						НачатьТранзакцию();
						
						Попытка
							ПричинаОтменыОбъект = Справочники.ПричиныОтменыЗаказовКлиентов.СоздатьЭлемент();
							ПричинаОтменыОбъект.Наименование = ДанныеОтправления.ПричинаОтмены;
							ПричинаОтменыОбъект.Записать();
							
							ПричинаОтмены = ПричинаОтменыОбъект.Ссылка;
							ЗафиксироватьТранзакцию();
							
						Исключение
							ОтменитьТранзакцию();
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'При записи причины отмены ""%1"" возникла ошибка: %2'", 
									ОбщегоНазначения.КодОсновногоЯзыка()),
								ДанныеОтправления.ПричинаОтмены, 
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								
							ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,,,
								ТекстОшибки);
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПричинаОтмены) Тогда
						РегистрыСведений.СоответствияОбъектовМаркетплейсов.ЗаписатьОбъектСоответствия(
							УчетнаяЗапись, 
							ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.ПричинаОтмены"), 
							ДанныеОтправления.ИдентификаторПричиныОтмены, 
							ПричинаОтмены, 
							Новый Структура("НаименованиеОбъектаМаркетплейса", ДанныеОтправления.ПричинаОтмены));
					Иначе
						ПричинаОтмены = НастройкиУчетнойЗаписи.ПричинаОтменыПоУмолчанию;
					КонецЕсли;
				КонецЕсли;
				
				ПричиныОтмены.Вставить(ДанныеОтправления.ИдентификаторПричиныОтмены, ПричинаОтмены);
				
				ОбработатьСтатусОтправленияВозвращенОтменен(
					ДанныеОтправления.ЗаказКлиентаСсылка,
					ДанныеОтправления.ДокументОтгрузкиСсылка,
					ПричинаОтмены,
					УчетнаяЗапись);
			КонецЕсли;
			
			Если ОчищатьДанныеЭкземпляровЗаказа Тогда
				Успешно = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ОчиститьДанныеЭкземпляров(
					ДанныеОтправления.ЗаказКлиентаСсылка,
					СобытиеЖурналаРегистрации());
				
				Если Не Успешно Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗапросПоСтатусамОтправлений = Новый Запрос;
	ЗапросПоСтатусамОтправлений.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыТорговыхПлощадок.Заказ КАК Заказ,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыТорговыхПлощадок.Статус В (&КонечныеСтатусы)
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
		|		КОНЕЦ) КАК СчетчикНезавершенныхОтправлений
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись
		|	И ЗаказыТорговыхПлощадок.Заказ В(&ОбновленныеЗаказы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыТорговыхПлощадок.Заказ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыТорговыхПлощадок.Статус В (&КонечныеСтатусы)
		|				ТОГДА 0
		|			ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
		|		КОНЕЦ) = 0";
	
	ЗапросПоСтатусамОтправлений.Параметры.Вставить("УчетнаяЗапись",     УчетнаяЗапись);
	ЗапросПоСтатусамОтправлений.Параметры.Вставить("КонечныеСтатусы",   СтатусыЗаказовFBSЗавершенные());
	ОбновленныеЗаказы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбновленныеЗаказы);
	ЗапросПоСтатусамОтправлений.Параметры.Вставить("ОбновленныеЗаказы", ОбновленныеЗаказы);
	
	ВыборкаЗаказов = ЗапросПоСтатусамОтправлений.Выполнить().Выбрать();
	Пока ВыборкаЗаказов.Следующий() Цикл
		ЗакрытьЗаказ(ВыборкаЗаказов.Заказ);
	КонецЦикла;
	
	Если Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обновлении статусов заказов торговой площадки <%1> возникли ошибки. Подробнее см. журнал регистрации.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер,
		ТаблицаЗаказов.Количество() / 10);
	
	Возврат Ошибка;
	
КонецФункции

// Подтверждает сборку заказов (отправлений) на торговой площадке.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений - Строка, Массив Из Строка - номера отправлений, для которых нужно создать экземпляры товаров.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПодтвердитьСборкуЗаказовНаТорговойПлощадке(УчетнаяЗапись, Знач НомераОтправлений) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗапись) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
	
	Если НомераОтправлений.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для сборки заказов торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	ПервичныеНомераОтправлений = ОбщегоНазначения.СкопироватьРекурсивно(НомераОтправлений);
	СобытиеЖурналаРегистрации  = СобытиеЖурналаРегистрации();
	
	// Получить идентификаторы экземпляров
	Ошибка = ПолучитьЭкземплярыТоваровИзОтправлений(УчетнаяЗапись, НомераОтправлений, Ложь, Ложь);
	
	Если Не ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		Возврат Ошибка;
	КонецЕсли;
	
	// Заполнение данных по экземплярам
	Ошибка = СоздатьЭкземплярыТоваровИзОтправлений(УчетнаяЗапись, НомераОтправлений, Истина);
	
	Если Не ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		Возврат Ошибка;
	КонецЕсли;
	
	// Сборка отправлений
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЭкземпляровПоОтправлению();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &СтатусОтправления", "И ЗаказыТорговыхПлощадок.Статус = &СтатусОтправления");
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",               УчетнаяЗапись);
	Запрос.УстановитьПараметр("НомераОтправлений",           ПервичныеНомераОтправлений);
	Запрос.УстановитьПараметр("ПостфиксОтправления",         "%" + РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления() + "%");
	Запрос.УстановитьПараметр("БезРодительскогоОтправления", Истина);
	Запрос.УстановитьПараметр("СтатусОтправления",           Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаНомерОтправления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерОтправления.Следующий() Цикл
		НомерРодительскогоОтправления = ВыборкаНомерОтправления.НомерОтправленияДляГруппировки;
		
		Товары           = НоваяТаблицаТоваровПоОтправлению();
		ТоварыОтмененные = НоваяТаблицаТоваровПоОтправлению();
		
		ВыборкаИдентификаторТовара = ВыборкаНомерОтправления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификаторТовара.Следующий() Цикл
			Экземпляры = НоваяТаблицаЭкземпляровТоваровПоОтправлению();
			КоличествоЭкземпляров = ВыборкаИдентификаторТовара.Количество;
			
			ВыборкаДанных = ВыборкаИдентификаторТовара.Выбрать();
			Пока ВыборкаДанных.Следующий() Цикл
				НомерРодительскогоОтправления = ВыборкаДанных.НомерРодительскогоОтправления;
				
				Если ВыборкаДанных.Отменено Тогда
					СтрокаТаблицыЗначений = ТоварыОтмененные.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаДанных);
					
					КоличествоЭкземпляров = КоличествоЭкземпляров - ВыборкаДанных.Количество;
				Иначе
					Для Индекс = 1 По ВыборкаДанных.Количество Цикл
						СтрокаТаблицыЗначений = Экземпляры.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаДанных);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если Экземпляры.Количество() > 0 Тогда
				СтрокаТаблицыЗначений = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаИдентификаторТовара);
				СтрокаТаблицыЗначений.Количество = КоличествоЭкземпляров;
				СтрокаТаблицыЗначений.Экземпляры = Экземпляры;
			КонецЕсли;
		КонецЦикла;
		
		// Отмена отправлений полная или частичная
		Если ТоварыОтмененные.Количество() > 0 Тогда
			ТоварыОтмененные.Свернуть("ИдентификаторТовара, КодПричиныОтмены, НаименованиеПричиныОтмены", "Количество");
			ТоварыОтмененные.Сортировать("КодПричиныОтмены, НаименованиеПричиныОтмены");
			
			СтрокаТаблицыЗначений = ТоварыОтмененные.Добавить();
			СтрокаТаблицыЗначений.КодПричиныОтмены = "-";
			
			Порция = НоваяТаблицаТоваровПоОтправлению();
			
			Для Каждого СтрокаТаблицыЗначений Из ТоварыОтмененные Цикл
				Если Порция.Количество() = 0 
						Или (Порция[0].КодПричиныОтмены = СтрокаТаблицыЗначений.КодПричиныОтмены
								И Порция[0].НаименованиеПричиныОтмены = СтрокаТаблицыЗначений.НаименованиеПричиныОтмены) Тогда
					ЗаполнитьЗначенияСвойств(Порция.Добавить(), СтрокаТаблицыЗначений);
					
				ИначеЕсли Порция.Количество() > 0 Тогда
					Если СтрНайти(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0 Тогда
						НомерОтправления = НомерРодительскогоОтправления;
					Иначе
						НомерОтправления = ВыборкаНомерОтправления.НомерОтправленияДляГруппировки;
					КонецЕсли;
					
					ПричинаОтмены = Новый Структура;
					ПричинаОтмены.Вставить("Идентификатор", СтрокаВЧисло(Порция[0].КодПричиныОтмены));
					ПричинаОтмены.Вставить("Наименование",  Порция[0].НаименованиеПричиныОтмены);
					ПричинаОтмены.Вставить("Ссылка",        Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка());
					
					Отказ = Ложь;
					Результат = ОтменитьОтправление(УчетнаяЗапись, 
						НомерОтправления, 
						ПричинаОтмены,
						Порция,
						Отказ);
					
					Если Отказ Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При отмене части отправления %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
							НомерОтправления,
							УчетнаяЗапись);
						
						Если Ошибка.Детализация = Неопределено Тогда
							Ошибка.Детализация = Новый Массив;
						КонецЕсли;
						Ошибка.Детализация.Добавить(ТекстОшибки);
						
					ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Запрос на отмену части отправления %1 для торговой площадки <%2> не обработан.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
							НомерОтправления,
							УчетнаяЗапись);
						
						Если Ошибка.Детализация = Неопределено Тогда
							Ошибка.Детализация = Новый Массив;
						КонецЕсли;
						Ошибка.Детализация.Добавить(ТекстОшибки);
						
					ИначеЕсли Товары.Количество() = 0 Тогда
						// Обновить данные регистров сведений
						ТекстОшибки = РегистрыСведений.ЗаказыТорговыхПлощадок.УстановитьСтатусОтправления(
							ВыборкаНомерОтправления.Заказ,
							ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
							Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен,
							СобытиеЖурналаРегистрации);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Сборка заказов (отправлений)
		Если Товары.Количество() > 0 Тогда
			Если СтрНайти(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0 Тогда
				Отказ = Ложь;
				Результат = РазделитьОтправление(УчетнаяЗапись, 
					ВыборкаНомерОтправления.НомерОтправленияДляГруппировки, 
					НомерРодительскогоОтправления,
					Товары,
					Отказ);
				
				Если Отказ Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При разделении отправления %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						НомерРодительскогоОтправления,
						УчетнаяЗапись);
					
					Если Ошибка.Детализация = Неопределено Тогда
						Ошибка.Детализация = Новый Массив;
					КонецЕсли;
					Ошибка.Детализация.Добавить(ТекстОшибки);
					
				ИначеЕсли Не ЗначениеЗаполнено(Результат) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Запрос на разделение отправления %1 для торговой площадки <%2> не обработан.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						НомерРодительскогоОтправления,
						УчетнаяЗапись);
					
					Если Ошибка.Детализация = Неопределено Тогда
						Ошибка.Детализация = Новый Массив;
					КонецЕсли;
					Ошибка.Детализация.Добавить(ТекстОшибки);
					
				Иначе
					// Обновить данные регистров сведений
					ТекстОшибки = РегистрыСведений.ЗаказыТорговыхПлощадок.ЗаменитьНомерОтправления(
						ВыборкаНомерОтправления.Заказ,
						ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
						Результат,
						Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке,
						СобытиеЖурналаРегистрации);
					
					ТекстОшибки = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаменитьНомерОтправления(
						ВыборкаНомерОтправления.Заказ,
						ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
						Результат,
						СобытиеЖурналаРегистрации);
				КонецЕсли;
				
			Иначе
				СтатусПоОтправлению = НомераОтправлений.Получить(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки);
				Если СтатусПоОтправлению <> Неопределено
						И ВРег(СтатусПоОтправлению.Статус) = ВРег("ship_available") Тогда
					Отказ = Ложь;
					Результат = СобратьЗаказ(УчетнаяЗапись, 
						ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
						Товары,
						Отказ);
					
					Если Отказ Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При сборке заказа по отправлению %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
							НомерРодительскогоОтправления,
							УчетнаяЗапись);
						
						Если Ошибка.Детализация = Неопределено Тогда
							Ошибка.Детализация = Новый Массив;
						КонецЕсли;
						Ошибка.Детализация.Добавить(ТекстОшибки);
						
					ИначеЕсли Не Результат Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Запрос на сборку заказа по отправлению %1 для торговой площадки <%2> не обработан.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
							НомерРодительскогоОтправления,
							УчетнаяЗапись);
						
						Если Ошибка.Детализация = Неопределено Тогда
							Ошибка.Детализация = Новый Массив;
						КонецЕсли;
						Ошибка.Детализация.Добавить(ТекстОшибки);
						
					Иначе
						// Обновить данные регистров сведений
						ТекстОшибки = РегистрыСведений.ЗаказыТорговыхПлощадок.УстановитьСтатусОтправления(
							ВыборкаНомерОтправления.Заказ,
							ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
							Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке,
							СобытиеЖурналаРегистрации);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибка.Детализация <> Неопределено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При сборке заказов по отправлениям для торговой площадки <%1> возникли ошибки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Отменяет сборку заказов (отправлений) на торговой площадке.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений - Строка, Массив Из Строка - номера отправлений, для которых выполняется отмена.
//   ПричинаОтмены     - Структура - причина отмены:
//     * Идентификатор   - Число - идентификатор причины отмены отправления;
//     * Наименование    - Строка - наименование причины отмены;
//     * Ссылка          - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ОтменитьСборкуЗаказовНаТорговойПлощадке(УчетнаяЗапись, Знач НомераОтправлений, Знач ПричинаОтмены) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗапись) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
	
	Если НомераОтправлений.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для отмены заказов торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЭкземпляровПоОтправлению();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &СтатусОтправления", "И НЕ ЗаказыТорговыхПлощадок.Статус В (&СтатусОтправления)");
	
	СтатусыОтправлений = Новый Массив;
	СтатусыОтправлений.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Доставлен);
	СтатусыОтправлений.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен);
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",               УчетнаяЗапись);
	Запрос.УстановитьПараметр("НомераОтправлений",           НомераОтправлений);
	Запрос.УстановитьПараметр("ПостфиксОтправления",         "%" + РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления() + "%");
	Запрос.УстановитьПараметр("БезРодительскогоОтправления", Истина);
	Запрос.УстановитьПараметр("СтатусОтправления",           СтатусыОтправлений);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаНомерОтправления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерОтправления.Следующий() Цикл
		Индекс = НомераОтправлений.Найти(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки);
		Если Индекс <> Неопределено Тогда 
			НомераОтправлений.Удалить(Индекс);
		КонецЕсли;
		
		Если СтрНайти(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0 Тогда
			НомерОтправления = ВыборкаНомерОтправления.НомерОтправленияДляГруппировки;
			Товары           = НоваяТаблицаТоваровПоОтправлению();
			
			ВыборкаИдентификаторТовара = ВыборкаНомерОтправления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаИдентификаторТовара.Следующий() Цикл
				ВыборкаДанных = ВыборкаИдентификаторТовара.Выбрать();
				Пока ВыборкаДанных.Следующий() Цикл
					НомерОтправления = ВыборкаДанных.НомерРодительскогоОтправления;
					
					СтрокаТаблицыЗначений = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаДанных);
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			НомерОтправления = ВыборкаНомерОтправления.НомерОтправленияДляГруппировки;
			Товары           = Неопределено;
		КонецЕсли;
		
		// Отмена отправлений полная или частичная
		Отказ = Ложь;
		Результат = ОтменитьОтправление(УчетнаяЗапись, 
			НомерОтправления, 
			ПричинаОтмены,
			Товары,
			Отказ);
		
		Если Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При отмене отправления %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				НомерОтправления,
				УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Булево") И Не Результат 
					Или Не ЗначениеЗаполнено(Результат) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Запрос на отмену отправления %1 для торговой площадки <%2> не обработан.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				НомерОтправления,
				УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
			
		Иначе
			// Обновить данные регистров сведений
			Если Товары <> Неопределено Тогда
				ТекстОшибки = РегистрыСведений.ЗаказыТорговыхПлощадок.ЗаменитьНомерОтправления(
					ВыборкаНомерОтправления.Заказ,
					ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
					Результат,
					Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен,
					СобытиеЖурналаРегистрации);
				
				ТекстОшибки = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаменитьНомерОтправления(
					ВыборкаНомерОтправления.Заказ,
					ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
					Результат,
					СобытиеЖурналаРегистрации);
			Иначе
				ТекстОшибки = РегистрыСведений.ЗаказыТорговыхПлощадок.УстановитьСтатусОтправления(
					ВыборкаНомерОтправления.Заказ,
					ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
					Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен,
					СобытиеЖурналаРегистрации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Незагруженные отправления
	Для Каждого НомерОтправления Из НомераОтправлений Цикл
		Отказ = Ложь;
		Результат = ОтменитьОтправление(УчетнаяЗапись, 
			НомерОтправления, 
			ПричинаОтмены,
			Неопределено,
			Отказ);
		
		Если Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При отмене отправления %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				НомерОтправления,
				УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
			
		ИначеЕсли Не Результат Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Запрос на отмену отправления %1 для торговой площадки <%2> не обработан.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				НомерОтправления,
				УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибка.Детализация <> Неопределено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При отмене заказов по отправлениям для торговой площадки <%1> возникли ошибки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Получает список причин отмены из сервиса.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений - Строка, Массив Из Строка, Неопределено - номера отправлений.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьПричиныОтмены(УчетнаяЗапись, Знач НомераОтправлений = Неопределено) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
	
	Если НомераОтправлений = Неопределено Тогда
		ОтветСервиса = ПолучитьПричиныОтменыИзСервиса(УчетнаяЗапись);
	Иначе
		ОтветСервиса = ПолучитьПричиныОтменыПоОтправлениямИзСервиса(УчетнаяЗапись, НомераОтправлений);
	КонецЕсли;
	
	Если ОтветСервиса = Неопределено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении списка причин отмены отправлений для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
	Иначе
		Ошибка.Детализация = Новый Массив;
		
		Если НомераОтправлений = Неопределено Тогда
			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл 
				Данные = Новый Структура;
				Данные.Вставить("Идентификатор", ЧислоВСтроку(ЭлементОтветаСервиса["id"], Истина));
				Данные.Вставить("Наименование",  ЭлементОтветаСервиса["title"]);
				Данные.Вставить("Инициатор",     ЭлементОтветаСервиса["type_id"]);
				Данные.Вставить("Доступность",   ЭлементОтветаСервиса["is_available_for_cancellation"]);
				
				Ошибка.Детализация.Добавить(Данные);
			КонецЦикла;
			
		Иначе
			Дубли = Новый Массив;
			
			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса["posting_number"] Цикл 
				Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["reasons"] Цикл
					Если Дубли.Найти(ЭлементКоллекции["id"]) = Неопределено Тогда
						Данные = Новый Структура;
						Данные.Вставить("Идентификатор", ЧислоВСтроку(ЭлементКоллекции["id"], Истина));
						Данные.Вставить("Наименование",  ЭлементКоллекции["title"]);
						Данные.Вставить("Инициатор",     ЭлементКоллекции["type_id"]);
						Данные.Вставить("Доступность",   Истина);
						
						Ошибка.Детализация.Добавить(Данные);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область Отправления

// Получает подробный список отправлений по заказам.
//
// Параметры:
//   УчетнаяЗаписьТорговойПлощадки - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                     - Структура - параметры выполнения функции:
//     * НачалоПериода               - Дата   - начало периода, за который необходимо получить данные заказов;
//     * КонецПериода                - Дата   - окончание периода, за который необходимо получить данные заказов;
//     * ВидФильтраПоПериоду         - Строка - вид фильтра по периоду выборки:
//                                       "ДатаСоздания" - по дате создания отправления;
//                                       "ДатаСборки" - по времени, до которого продавцу нужно собрать заказ сборки);
//                                       "ДатаПередачиВДоставку" - по дате передачи отправления в доставку.
//     * СтатусОтправления           - Строка - представление статуса заказа, по которому необходимо осуществлять отбор;
//     * ЭтоFBO                      - Булево - признак схемы работы FBO;
//   ТаблицаЗаказов                - ТаблицаЗначений - таблица с данными заказов FBO, 
//                                     см. Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов.ТаблицаЗаказов.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка         - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ТаблицаЗаказов - Неопределено - при наличии ошибок;
//                      - ТаблицаЗначений - заполненная таблица с данными заказов,  
//                          см. Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов.ТаблицаЗаказов.
//
Функция ПолучитьОтправления(Знач УчетнаяЗаписьТорговойПлощадки, Знач Параметры, ТаблицаЗаказов) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",         ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ТаблицаЗаказов", ТаблицаЗаказов.СкопироватьКолонки());
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьТорговойПлощадки) Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		
		Возврат Результат;
	КонецЕсли;
	
	НачалоПериода    = Параметры.НачалоПериода;
	ОкончаниеПериода = Параметры.КонецПериода;
	
	Пока НачалоПериода < Параметры.КонецПериода Цикл
		ОкончаниеПериода = Мин(КонецГода(НачалоПериода), Параметры.КонецПериода);
		Отказ            = Ложь;
		
		Если Параметры.ЭтоFBO Тогда
			ПолучитьОтправленияFBO(УчетнаяЗаписьТорговойПлощадки, 
				Результат.ТаблицаЗаказов,
				НачалоПериода,
				ОкончаниеПериода,
				Параметры.СтатусОтправления,
				Отказ);
		Иначе
			ПолучитьОтправленияFBS(УчетнаяЗаписьТорговойПлощадки, 
				Результат.ТаблицаЗаказов,
				НачалоПериода,
				ОкончаниеПериода,
				Параметры.ВидФильтраПоПериоду,
				Параметры.СтатусОтправления,
				Отказ);
		КонецЕсли;
			
		Если Отказ Тогда
			Результат.Ошибка.КодОшибки		= КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'При получении информации о заказах товаров через торговую площадку <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
												УчетнаяЗаписьТорговойПлощадки,
												Формат(НачалоПериода, "ДЛФ=D;"),
												Формат(ОкончаниеПериода, "ДЛФ=D;"));
			Прервать;
		КонецЕсли;
		
		НачалоПериода = КонецГода(НачалоПериода) + 1;
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции

// Получает информацию о продажах товаров через торговую площадку за указанный период.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления          - Строка - номер отправления.
//
// Возвращаемое значение:
//   Структура - результат выполнения:
//     * Ошибка                 - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ТаблицаОборотовТоваров - ТаблицаЗначений - данные об оборотах, 
//                                  см. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ПолучитьДанныеПоОтправлению(УчетнаяЗаписьМаркетплейса, НомерОтправления) Экспорт

	Отказ = Ложь;

	Результат = Новый Структура;
	Результат.Вставить("Ошибка",                 ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ТаблицаОборотовТоваров", НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(Истина));

	СхемаДоставки = "FBO, FBS";
	СхемаДоставки = ВРег(СтрЗаменить(СхемаДоставки, " ", ""));
	СхемаДоставки = СтрРазделить(СхемаДоставки, ",", Ложь);

	ТаблицаОборотовТоваров = ОборотыТоваровНаСкладахТорговойПлощадкиПоНомеруОтправления(
			УчетнаяЗаписьМаркетплейса,
			НомерОтправления,
			"",
			СхемаДоставки,
			Истина,
			Отказ);

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении информации о продажах товаров через торговую площадку <%1> по номеру отправления %2 возникли ошибки. Подробности см. в журнале регистрации.'"),
			УчетнаяЗаписьМаркетплейса,
			НомерОтправления);
	КонецЕсли;

	Результат.Вставить("ТаблицаОборотовТоваров", ТаблицаОборотовТоваров);

	Возврат Результат;

КонецФункции

// Получает этикетки для сформированных отправлений с торговой площадки. 
//
// Параметры:
//   УчетнаяЗапись              - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений          - Строка, Массив Из Строка - номера отправлений, для которых нужно получить этикетки;
//                              - Неопределено - обрабатывать все номера отправлений.
//   КоличествоПопыток          - Число - максимальное количество попыток получения этикеток по каждому отправлению.
//   ПаузаМеждуПопытками        - Число - пауза в секундах между попытками.
//   ТребуетсяПолучениеЭтикеток - Булево - признак принудительного получения этикеток.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьЭтикеткиОтправленийСТорговойПлощадки(УчетнаяЗапись, НомераОтправлений = Неопределено,
			КоличествоПопыток = 0, ПаузаМеждуПопытками = 5, ТребуетсяПолучениеЭтикеток = Ложь) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	Если НомераОтправлений <> Неопределено
			И ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
	
	// Создать задания на асинхронное формирование этикеток
	Если Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗапись) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказыТорговыхПлощадок.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЗаказыТорговыхПлощадок.Заказ КАК Заказ,
			|	ЗаказыТорговыхПлощадок.ДокументОтгрузки КАК ДокументОтгрузки,
			|	ЗаказыТорговыхПлощадок.НомерОтправления КАК НомерОтправления
			|ИЗ
			|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
			|ГДЕ
			|	ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись
			|	И ЗаказыТорговыхПлощадок.Статус = &СтатусОтправления
			|	И ЗаказыТорговыхПлощадок.НомерОтправления <> &ПустаяСтрока";
		
		Если Не ТребуетсяПолучениеЭтикеток Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И ЗаказыТорговыхПлощадок.ТребуетсяПолучениеЭтикеток
				|	И ЗаказыТорговыхПлощадок.НомерЗаданияПолученияЭтикеток = &ПустаяСтрока";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("УчетнаяЗапись",     УчетнаяЗапись);
		Запрос.УстановитьПараметр("СтатусОтправления", Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
		Запрос.УстановитьПараметр("ПустаяСтрока",      "");
		
		Если НомераОтправлений <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"И ЗаказыТорговыхПлощадок.НомерОтправления <> &ПустаяСтрока",
				"И ЗаказыТорговыхПлощадок.НомерОтправления В (&НомераОтправлений)");
			Запрос.УстановитьПараметр("НомераОтправлений", НомераОтправлений);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		НомераОтправленийДляОбработки = РезультатЗапроса.Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Отказ = Ложь;
		СоздатьЗаданияНаАсинхронноеФормированиеЭтикеток(УчетнаяЗапись, НомераОтправленийДляОбработки, Отказ);
		
		Если Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При создании задания на формирование этикеток на торговую площадку <%1> возникли ошибки. Подробнее см. журнал регистрации.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УчетнаяЗапись);
			
			Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Иначе
			Для Каждого СтрокаТаблицыЗначений Из НомераОтправленийДляОбработки Цикл
				НачатьТранзакцию();
				
				Попытка
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
					ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировкиДанных.УстановитьЗначение("Заказ",            СтрокаТаблицыЗначений.Заказ);
					ЭлементБлокировкиДанных.УстановитьЗначение("ДокументОтгрузки", СтрокаТаблицыЗначений.ДокументОтгрузки);
					БлокировкаДанных.Заблокировать();
					
					НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Заказ.Установить(СтрокаТаблицыЗначений.Заказ);
					НаборЗаписей.Отбор.ДокументОтгрузки.Установить(СтрокаТаблицыЗначений.ДокументОтгрузки);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() > 0 Тогда
						НаборЗаписей[0].НомерЗаданияПолученияЭтикеток = СтрокаТаблицыЗначений.ИдентификаторЗадания;
						
						Если ТребуетсяПолучениеЭтикеток Тогда
							НаборЗаписей[0].ТребуетсяПолучениеЭтикеток = Истина;
						КонецЕсли;
						
						НаборЗаписей.Записать(Истина);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					Отказ = Истина;
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При записи номера задания на формирование этикеток %1, %2, %3 возникла ошибка: %4'", 
							ОбщегоНазначения.КодОсновногоЯзыка()),
						СтрокаТаблицыЗначений.УчетнаяЗапись, 
						СтрокаТаблицыЗначений.Заказ, 
						СтрокаТаблицыЗначений.ДокументОтгрузки,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстОшибки);
				КонецПопытки;
			КонецЦикла;
			
			Если Отказ Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При создании задания на формирование этикеток на торговую площадку <%1> возникли ошибки. Подробнее см. журнал регистрации.'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись);
				
				Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки + ?(ЗначениеЗаполнено(Ошибка.ОписаниеОшибки), Символы.ПС, "") + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	// Получить этикетки отправлений
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыТорговыхПлощадок.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ЗаказыТорговыхПлощадок.Заказ КАК Заказ,
		|	ЗаказыТорговыхПлощадок.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЗаказыТорговыхПлощадок.НомерОтправления КАК НомерОтправления,
		|	ЗаказыТорговыхПлощадок.НомерЗаданияПолученияЭтикеток КАК ИдентификаторЗадания
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись
		|	И ЗаказыТорговыхПлощадок.Статус = &СтатусОтправления
		|	И ЗаказыТорговыхПлощадок.ТребуетсяПолучениеЭтикеток
		|	И ЗаказыТорговыхПлощадок.НомерОтправления <> &ПустаяСтрока
		|	И ЗаказыТорговыхПлощадок.НомерЗаданияПолученияЭтикеток <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",     УчетнаяЗапись);
	Запрос.УстановитьПараметр("СтатусОтправления", Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
	Запрос.УстановитьПараметр("ПустаяСтрока",      "");
	
	Если НомераОтправлений <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ЗаказыТорговыхПлощадок.НомерОтправления <> &ПустаяСтрока",
			"И ЗаказыТорговыхПлощадок.НомерОтправления В (&НомераОтправлений)");
		Запрос.УстановитьПараметр("НомераОтправлений", НомераОтправлений);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	ИдентификаторыЗаданий = РезультатЗапроса.Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторыЗаданий.Колонки.Добавить("СтатусЗадания",   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25, ДопустимаяДлина.Переменная)));
	ИдентификаторыЗаданий.Колонки.Добавить("ПутьКФайлу",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ИдентификаторыЗаданий.Колонки.Добавить("ОписаниеОшибки",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ИдентификаторыЗаданий.Колонки.Добавить("ВремяИсполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ИдентификаторыЗаданий.Колонки.Добавить("Повторы",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ИдентификаторыЗаданий.ЗаполнитьЗначения("PENDING",                                "СтатусЗадания");
	ИдентификаторыЗаданий.ЗаполнитьЗначения(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ВремяИсполнения");
	
	Отказ = Ложь;
	ПолучитьЭтикеткиОтправлений(УчетнаяЗапись, ИдентификаторыЗаданий, КоличествоПопыток, ПаузаМеждуПопытками, Отказ);
	
	Если Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении этикеток с торговой площадки <%1> возникли ошибки. Подробнее см. журнал регистрации.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки + ?(ЗначениеЗаполнено(Ошибка.ОписаниеОшибки), Символы.ПС, "") + ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
		
	Для Каждого СтрокаТаблицыЗначений Из ИдентификаторыЗаданий Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ОписаниеОшибки) Тогда
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(СтрокаТаблицыЗначений.ОписаниеОшибки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПутьКФайлу)
				И Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.УстановитьЗначение("Заказ",            СтрокаТаблицыЗначений.Заказ);
			ЭлементБлокировкиДанных.УстановитьЗначение("ДокументОтгрузки", СтрокаТаблицыЗначений.ДокументОтгрузки);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(СтрокаТаблицыЗначений.Заказ);
			НаборЗаписей.Отбор.ДокументОтгрузки.Установить(СтрокаТаблицыЗначений.ДокументОтгрузки);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПутьКФайлу) Тогда
					НаборЗаписей[0].ТребуетсяПолучениеЭтикеток = Ложь;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыЗначений.ОписаниеОшибки) Тогда
					НаборЗаписей[0].ОписаниеОшибки = СтрокаТаблицыЗначений.ОписаниеОшибки;
				КонецЕсли;
				
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПутьКФайлу) 
					И ЗначениеЗаполнено(СтрокаТаблицыЗначений.ДокументОтгрузки) Тогда
				АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтрокаТаблицыЗначений.ПутьКФайлу));
				
				Если ЗначениеЗаполнено(АдресВременногоХранилищаФайла) Тогда
					ИмяФайла              = СтрЗаменить(СтрокаТаблицыЗначений.ПутьКФайлу, "\", "/");
					ИмяФайла              = Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца) + 1);
					ИмяФайлаБезРасширения = Сред(ИмяФайла, 1, СтрНайти(ИмяФайла, ".") - 1);
					РасширениеФайла       = НРег(Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
					
					ПараметрыФайла                    = РаботаСФайлами.ПараметрыДобавленияФайла();
					ПараметрыФайла.Автор              = Пользователи.АвторизованныйПользователь();
					ПараметрыФайла.ВладелецФайлов     = СтрокаТаблицыЗначений.ДокументОтгрузки;
					ПараметрыФайла.ИмяБезРасширения   = ИмяФайлаБезРасширения;
					ПараметрыФайла.РасширениеБезТочки = РасширениеФайла;
					ПараметрыФайла.ГруппаФайлов       = Неопределено;
					
					РаботаСФайлами.ДобавитьФайл(
						ПараметрыФайла, 
						АдресВременногоХранилищаФайла,
						Неопределено, 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(   
							НСтр("ru = 'Этикетки по отправлению %1'"),
							СтрокаТаблицыЗначений.НомерОтправления));
				КонецЕсли;
				
				УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
				ФайловаяСистема.УдалитьВременныйФайл(СтрокаТаблицыЗначений.ПутьКФайлу);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При записи признака получения этикетки %1, %2, %3 возникла ошибка: %4'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаТаблицыЗначений.УчетнаяЗапись, 
				СтрокаТаблицыЗначений.Заказ, 
				СтрокаТаблицыЗначений.ДокументОтгрузки,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении этикеток с торговой площадки <%1> возникли ошибки. Подробнее см. журнал регистрации.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = Ошибка.ОписаниеОшибки + ?(ЗначениеЗаполнено(Ошибка.ОписаниеОшибки), Символы.ПС, "") + ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если Ошибка.Детализация <> Неопределено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении этикеток с торговой площадки <%1> возникли ошибки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Получает и проверяет экземпляры товаров по отправлениям.
//
// Параметры:
//   УчетнаяЗапись             - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений         - Строка, Массив Из Строка - номера отправлений, для которых нужно создать экземпляры товаров.
//   ПроверитьКодыМаркировки   - Булево - выполнять ли шаг проверки кодов маркировки.
//   ОбновитьДанныеЭкземпляров - Булево - обновлять ли данные регистра сведений.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ПолучитьЭкземплярыТоваровИзОтправлений(УчетнаяЗапись, НомераОтправлений,
			ПроверитьКодыМаркировки = Истина, ОбновитьДанныеЭкземпляров = Истина) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗапись) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
	
	Если НомераОтправлений.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для проверки экземпляров товаров по отправлениям торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	// Выбрать данные по отправлениям
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЭкземпляровПоОтправлению();
	
	Запрос.УстановитьПараметр("УчетнаяЗапись",               УчетнаяЗапись);
	Запрос.УстановитьПараметр("НомераОтправлений",           НомераОтправлений);
	Запрос.УстановитьПараметр("ПостфиксОтправления",         "%" + РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления() + "%");
	Запрос.УстановитьПараметр("БезРодительскогоОтправления", Ложь);
	Запрос.УстановитьПараметр("СтатусОтправления",           Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаНомерОтправления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерОтправления.Следующий() Цикл
		Товары = НоваяТаблицаТоваровПоОтправлению();
		
		ВыборкаИдентификаторТовара = ВыборкаНомерОтправления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификаторТовара.Следующий() Цикл
			Экземпляры = НоваяТаблицаЭкземпляровТоваровПоОтправлению();
			
			ВыборкаДанных = ВыборкаИдентификаторТовара.Выбрать();
			Пока ВыборкаДанных.Следующий() Цикл
				Для Индекс = 1 По ВыборкаДанных.Количество Цикл
					СтрокаТаблицыЗначений = Экземпляры.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаДанных);
				КонецЦикла;
			КонецЦикла;
			
			СтрокаТаблицыЗначений = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаИдентификаторТовара);
			СтрокаТаблицыЗначений.Экземпляры = Экземпляры;
		КонецЦикла;
		
		// Проверить коды маркировки по отправлению
		Отказ = Ложь;
		
		Если ПроверитьКодыМаркировки Тогда
			Результат = ПроверитьКодыМаркировкиПоОтправлению(УчетнаяЗапись, 
				ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
				Товары, 
				Ложь,
				Отказ);
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Если Результат Тогда
			// Получить идентификаторы экземпляров
			Результат = ПолучитьДанныеЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, 
				ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
				Товары,
				Отказ); 
			
			Если Не ПроверитьКодыМаркировки Тогда
				Результат = Истина;
			КонецЕсли;
			
			Если Результат И Не Отказ Тогда
				Если ОбновитьДанныеЭкземпляров Тогда
					ОбновитьДанныеЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, 
						ВыборкаНомерОтправления.Заказ,
						ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
						Товары,
						Отказ);
				Иначе
					Если ТипЗнч(НомераОтправлений) <> Тип("Соответствие") Тогда
						НомераОтправлений = Новый Соответствие;
					КонецЕсли;
					
					ДанныеОбработки = Новый Структура;
					ДанныеОбработки.Вставить("ВремяИсполнения", ТекущаяУниверсальнаяДатаВМиллисекундах() + 100);
					ДанныеОбработки.Вставить("Статус",          "validation_in_process");
					ДанныеОбработки.Вставить("Повторы",         0);
					ДанныеОбработки.Вставить("ОписаниеОшибки",  "");
					ДанныеОбработки.Вставить("Товары",          Товары);
					ДанныеОбработки.Вставить("Заказ",           ВыборкаНомерОтправления.Заказ);
					
					НомераОтправлений.Вставить(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки, ДанныеОбработки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При проверке экземпляров товаров по отправлению %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
				УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
			
		ИначеЕсли Не Результат Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При проверке экземпляров товаров по отправлению %1 для торговой площадки <%2> возникли ошибки.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаНомерОтправления.НомерОтправленияДляГруппировки,
				УчетнаяЗапись);
			
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибка.Детализация <> Неопределено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При проверке экземпляров товаров по отправлениям для торговой площадки <%1> возникли ошибки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
	КонецЕсли;
		
	Возврат Ошибка;
	
КонецФункции

// Создает экземпляры товаров по отправлениям.
//
// Параметры:
//   УчетнаяЗапись             - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений         - Строка, Массив Из Строка - номера отправлений, для которых нужно создать экземпляры товаров.
//   ОбновитьДанныеЭкземпляров - Булево - обновлять ли данные регистра сведений.
//   КоличествоПопыток         - Число - максимальное количество попыток получения статусов генерации экземпляров товаров по каждому отправлению.
//   ПаузаМеждуПопытками       - Число - пауза в секундах между попытками.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция СоздатьЭкземплярыТоваровИзОтправлений(УчетнаяЗапись, НомераОтправлений, ОбновитьДанныеЭкземпляров = Истина,
			КоличествоПопыток = 5, ПаузаМеждуПопытками = 5) Экспорт
	
	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗапись) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	Если ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
		
	Если НомераОтправлений.Количество() = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные для проверки статусов добавления экземпляров товаров по отправлениям торговой площадки <%1> отсутствуют.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = ТекстОшибки;
			
		Возврат Ошибка;
	КонецЕсли;
	
	// Выбрать данные по отправлениям
	Если ТипЗнч(НомераОтправлений) <> Тип("Соответствие") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаЭкземпляровПоОтправлению();
		
		Запрос.УстановитьПараметр("УчетнаяЗапись",               УчетнаяЗапись);
		Запрос.УстановитьПараметр("НомераОтправлений",           НомераОтправлений);
		Запрос.УстановитьПараметр("ПостфиксОтправления",         "%" + РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления() + "%");
		Запрос.УстановитьПараметр("БезРодительскогоОтправления", Ложь);
		Запрос.УстановитьПараметр("СтатусОтправления",           Истина);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		НомераОтправлений = Новый Соответствие;
		
		ВыборкаНомерОтправления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНомерОтправления.Следующий() Цикл
			Товары = НоваяТаблицаТоваровПоОтправлению();
			
			ВыборкаИдентификаторТовара = ВыборкаНомерОтправления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаИдентификаторТовара.Следующий() Цикл
				Экземпляры = НоваяТаблицаЭкземпляровТоваровПоОтправлению();
				
				ВыборкаДанных = ВыборкаИдентификаторТовара.Выбрать();
				Пока ВыборкаДанных.Следующий() Цикл
					Для Индекс = 1 По ВыборкаДанных.Количество Цикл
						СтрокаТаблицыЗначений = Экземпляры.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаДанных);
					КонецЦикла;
				КонецЦикла;
				
				СтрокаТаблицыЗначений = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ВыборкаИдентификаторТовара);
				СтрокаТаблицыЗначений.Экземпляры = Экземпляры;
			КонецЦикла;
			
			ДанныеОбработки = Новый Структура;
			ДанныеОбработки.Вставить("ВремяИсполнения", ТекущаяУниверсальнаяДатаВМиллисекундах() + 100);
			ДанныеОбработки.Вставить("Статус",          "validation_in_process");
			ДанныеОбработки.Вставить("Повторы",         0);
			ДанныеОбработки.Вставить("ОписаниеОшибки",  "");
			ДанныеОбработки.Вставить("Товары",          Товары);
			ДанныеОбработки.Вставить("Заказ",           ВыборкаНомерОтправления.Заказ);
			
			НомераОтправлений.Вставить(ВыборкаНомерОтправления.НомерОтправленияДляГруппировки, ДанныеОбработки);
		КонецЦикла;
	КонецЕсли;
	
	// Создать задания на асинхронное формирование экземпляров товаров
	Для Каждого КлючИЗначение Из НомераОтправлений Цикл
		Отказ = Ложь;
		Результат = ПроверитьИСохранитьЭкземплярыТоваровПоОтправлению(УчетнаяЗапись, 
			КлючИЗначение.Ключ, 
			КлючИЗначение.Значение.Товары, 
			Ложь, 
			Отказ);
		
		Если Отказ Тогда
			КлючИЗначение.Значение.Статус         = "ship_not_available";
			КлючИЗначение.Значение.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При проверке и сохранении экземпляров товаров по отправлению %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				КлючИЗначение.Ключ,
				УчетнаяЗапись);
				
		ИначеЕсли Не Результат Тогда
			КлючИЗначение.Значение.Статус         = "ship_not_available";
			КлючИЗначение.Значение.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Запрос на проверку и сохранение экземпляров товаров по отправлению %1 для торговой площадки <%2> не обработан.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				КлючИЗначение.Ключ,
				УчетнаяЗапись);
		КонецЕсли;
	КонецЦикла;
	
	// Проверить статусы генерации экземпляров
	Пока Истина Цикл
		ОжидатьДалее = Ложь;
		
		Для Каждого КлючИЗначение Из НомераОтправлений Цикл
			Если ВРег(КлючИЗначение.Значение.Статус) = ВРег("validation_in_process") Тогда
				Если КлючИЗначение.Значение.Повторы >= КоличествоПопыток Тогда
					КлючИЗначение.Значение.Статус = "ship_not_available";
					КлючИЗначение.Значение.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось проверить статусы добавления экземпляров товаров по отправлению %1 для торговой площадки <%2> за ограниченное количество попыток.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						КлючИЗначение.Ключ,
						УчетнаяЗапись);
					
				ИначеЕсли КлючИЗначение.Значение.ВремяИсполнения <= ТекущаяУниверсальнаяДатаВМиллисекундах() Тогда
					Отказ     = Ложь;
					Результат = ПолучитьСтатусыЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, КлючИЗначение.Ключ, КлючИЗначение.Значение.Товары, Отказ);
					
					Если Отказ Тогда
						КлючИЗначение.Значение.Статус         = "ship_not_available";
						КлючИЗначение.Значение.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При проверке статусов добавления экземпляров товаров по отправлению %1 для торговой площадки <%2> возникли ошибки. Подробнее см. журнал регистрации.'",
								ОбщегоНазначения.КодОсновногоЯзыка()),
							КлючИЗначение.Ключ,
							УчетнаяЗапись);
						
					Иначе 
						КлючИЗначение.Значение.Статус = Результат;
						
						Если ВРег(Результат) = ВРег("ship_available") Тогда
							КлючИЗначение.Значение.ОписаниеОшибки = "";
							
						ИначеЕсли ВРег(Результат) = ВРег("ship_not_available") Тогда
							КлючИЗначение.Значение.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Сборка по отправлению %1 для торговой площадки <%2> недоступна.'",
									ОбщегоНазначения.КодОсновногоЯзыка()),
								КлючИЗначение.Ключ,
								УчетнаяЗапись);
							
						Иначе
							ОжидатьДалее = Истина;
							
							КлючИЗначение.Значение.Статус          = "validation_in_process";
							КлючИЗначение.Значение.Повторы         = КлючИЗначение.Значение.Повторы + 1;
							КлючИЗначение.Значение.ВремяИсполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() + 1000 * КлючИЗначение.Значение.Повторы;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					ОжидатьДалее = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОжидатьДалее Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияБТС.Пауза(ПаузаМеждуПопытками);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НомераОтправлений Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.ОписаниеОшибки) Тогда
			Если Ошибка.Детализация = Неопределено Тогда
				Ошибка.Детализация = Новый Массив;
			КонецЕсли;
			Ошибка.Детализация.Добавить(КлючИЗначение.Значение.ОписаниеОшибки);
		КонецЕсли;
		
		Если ОбновитьДанныеЭкземпляров Тогда
			ОбновитьДанныеЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, 
				КлючИЗначение.Значение.Заказ,
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение.Товары,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибка.Детализация <> Неопределено Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При проверке статусов добавления экземпляров товаров по отправлениям для торговой площадки <%1> возникли ошибки.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗапись);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область ЦеныТоваров

// Возвращает детальную информацию по типам цен, используемым учетными записями Ozon.
//
// Параметры:
//   ВключатьВыгружаемые - Булево - признак включения в результат функции выгружаемых типов цен.
//   ВключатьЗагружаемые - Булево - признак включения в результат функции загружаемых типов цен.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с описанием указанных типов цен учетной записи; содержит колонки:
//     * Идентификатор          - Строка - строковое обозначение типа цен.
//     * ИдентификаторДляФормул - Строка - шаблон для формирования идентификатора вида цен.
//     * Наименование           - Строка - наименование типа цен.
//     * ДляУчетнойЗаписи       - Булево - признак отношения типа цен к учетной записи или к интеграции в целом.
//     * ОбязательноеЗаполнение - Булево - признак обязательного заполнения в формах.
//     * Значение               - СправочникСсылка.ВидыЦен - пустая ссылка вида цен.
//
Функция ТипыЦенOzon(ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));

	ТипыЦен = Новый ТаблицаЗначений;
	ТипыЦен.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("ИдентификаторДляФормул", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("Наименование", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("ДляУчетнойЗаписи", Новый ОписаниеТипов("Булево"), НСтр("ru = 'Тип цен уникален для учетной записи'"));
	ТипыЦен.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ТипыЦен.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));

	Если ВключатьВыгружаемые Тогда
		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСУчетомСкидок";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цена с учетом скидок'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Истина;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныДоСкидок";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цена до скидок'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныМинимальныхЦен";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Минимальная цена после применения всех акций'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;
	КонецЕсли;
	
	Если ВключатьЗагружаемые Тогда
		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСАкциямиПродавца";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "marketing_seller_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены с учетом акций продавца'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСоВсемиАкциями";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "marketing_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены с учетом всех акций'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныРекомендованный";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "recommended_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Рекомендованные цены'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Ложь;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныПоставщика";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "retail_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены поставщика товаров'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Ложь;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;
	КонецЕсли;

	Возврат ТипыЦен;

КонецФункции

// Возвращает детальную информацию по видам цен, используемым учетной записью Ozon с заполненным значением цены.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ВключатьВыгружаемые       - Булево - признак включения в результат функции выгружаемых видов цен.
//   ВключатьЗагружаемые       - Булево - признак включения в результат функции загружаемых видов цен.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с запрошенными видами цен и заполненным значением цены, см. ТипыЦенOzon.
//
Функция ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, 
			ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	ТипыЦен = ТипыЦенOzon(ВключатьВыгружаемые, ВключатьЗагружаемые);

	// Выгружаемые виды цен.
	Если ВключатьВыгружаемые Тогда
		ВидыЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидыЦен");	// РезультатЗапроса
		ВыборкаВидовЦен = ВидыЦен.Выбрать();
		Пока ВыборкаВидовЦен.Следующий() Цикл
			Результат = ТипыЦен.НайтиСтроки(Новый Структура("Идентификатор", ВыборкаВидовЦен.ИмяНастройки));
			Если Результат.Количество() = 1 Тогда
				Результат[0].Значение = ВыборкаВидовЦен.ВидЦены;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Загружаемые виды цен
	Если ВключатьЗагружаемые Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка КАК Ссылка,
		|	ВидыЦен.ХранилищеНастроекПараметровСпособаЗаданияЦены КАК ХранилищеНастроек
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.ЗагружаетсяСOzon)
		|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат ТипыЦен;
		КонецЕсли;

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Настройки = Выборка.ХранилищеНастроек.Получить();
			Если ТипЗнч(Настройки) = Тип("Структура")
						И (Настройки.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса
					Или Настройки.УчетнаяЗаписьМаркетплейса.Пустая()) Тогда
				Результат = ТипыЦен.НайтиСтроки(Новый Структура("Наименование", Настройки.ТипЦеныНаOzon));
				Если Результат.Количество() = 1 Тогда
					Результат[0].Значение = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ТипыЦен;

КонецФункции

// Определяет загружаемые типы цен Ozon в виде списка значений.
//
// Возвращаемое значение:
//   СписокЗначений Из Строка - список типов цен Ozon.
//
Функция ЗагружаемыеТипыЦенНаOzon() Экспорт

	ТипыЦен = ТипыЦенOzon(Ложь);
	
	СписокТиповЦенНаOzon = Новый СписокЗначений;
	Для Каждого ТипЦен Из ТипыЦен Цикл
		СписокТиповЦенНаOzon.Добавить(ТипЦен.ИдентификаторДляФормул, ТипЦен.Наименование);
	КонецЦикла;

	Возврат СписокТиповЦенНаOzon;

КонецФункции

// Определяет загружаемые типы цен Ozon, применимые к учетным записям Ozon, в виде массива.
//
// Возвращаемое значение:
//   Массив Из Строка - наименования загружаемых типов цен для учетных записей.
//
Функция ПолучитьТипыЦенНаOzonДляУчетныхЗаписей() Экспорт

	Результат = Новый Массив;
	ТипыЦен   = ТипыЦенOzon(Ложь);
	
	ТипыЦенПоУчетнымЗаписям = ТипыЦен.НайтиСтроки(Новый Структура("ДляУчетнойЗаписи", Истина));
	Для Каждого ТипЦены Из ТипыЦенПоУчетнымЗаписям Цикл
		Результат.Добавить(ТипЦены.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров способа задания цены.
// 
// Возвращаемое значение:
//   Структура - параметры способа задания цены:
//     * ТипЦеныНаOzon                - Строка - обозначение типа цен на Ozon.
//     * ИмяТипЦеныНаOzon             - Строка - наименование типа цен на Ozon.
//     * УчетнаяЗаписьМаркетплейса    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//     * ИмяУчетнаяЗаписьМаркетплейса - Строка - обозначение учетной записи. 
//     * СписокВыбора                 - См. ЗагружаемыеТипыЦенНаOzon.
//
Функция СтруктураПараметровСпособаЗаданияЦены() Экспорт

	СтруктураПараметровСпособаЗаданияЦены = Новый Структура;
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ТипЦеныНаOzon",                "");
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ИмяТипЦеныНаOzon",             НСтр("ru = 'Тип цены Ozon'"));
	СтруктураПараметровСпособаЗаданияЦены.Вставить("УчетнаяЗаписьМаркетплейса",    ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка"));
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ИмяУчетнаяЗаписьМаркетплейса", НСтр("ru = 'Учетная запись Ozon'"));
	СтруктураПараметровСпособаЗаданияЦены.Вставить("СписокВыбора",                 ЗагружаемыеТипыЦенНаOzon());

	Возврат СтруктураПараметровСпособаЗаданияЦены;
	
КонецФункции

// Выгрузка цен товарных позиций из ИБ на маркетплейс.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   ТолькоИзменения           - Булево - признак выгрузки только измененных цен товаров.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыгрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ТолькоИзменения = Истина) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегламентноеЗадание.ВыгрузкаЦенНаМаркетплейсOzon.ПодготовкаДанных");

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	Если НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок.Пустая()
		И НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок.Пустая()
		И НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Не установлены виды цен для выгрузки.'", 
							ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = ТекстСообщения;
		Возврат Ошибка;
	КонецЕсли;

	ВидыЦен = Новый Массив;
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);

	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыБезЦен
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаЦен, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликации.Номенклатура КАК Номенклатура,
	|	СтатусыПубликации.Характеристика КАК Характеристика,
	|	СтатусыПубликации.Упаковка КАК Упаковка,
	|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	СтатусыПубликации.ЦенаДоСкидки КАК ЦенаДоСкидки,
	|	СтатусыПубликации.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	СтатусыПубликации.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВидыЦен.Ссылка КАК ВидЦены,
	|	&ПоляДляЦенообразованияВыборка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО ВидыЦен.Ссылка В (&ВидыЦен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = СтатусыПубликации.Номенклатура.ВидНоменклатуры)
	|		И (&ОграничениеПоТаблицеТоваров)
	|ГДЕ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
	|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	&ПоляДляИндексирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыБезЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютУчета.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютУчета.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)) КАК КоэффициентПересчетаЦены,
	|	ЦеныНоменклатуры.*
	|ПОМЕСТИТЬ ЦеныТоваров
	|ИЗ
	|	&ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУчета
	|		ПО (КурсыВалютУчета.Валюта = &ВалютаУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	&ПоляДляИндексирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|						КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныДоСкидок
	|							ТОГДА ТоварыСЦенами.Цена 
	|									* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
	|									/ ВЫБОР
	|										КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
	|											ТОГДА 1
	|										ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
	|									КОНЕЦ
	|									* ТоварыСЦенами.КоэффициентПересчетаЦены
	|						ИНАЧЕ 0
	|						КОНЕЦ) КАК ЧИСЛО(31, 2)) КАК ЦенаДоСкидки,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|						КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныСУчетомСкидок
	|							ТОГДА ТоварыСЦенами.Цена 
	|									* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
	|									/ ВЫБОР
	|										КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
	|											ТОГДА 1
	|										ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
	|									КОНЕЦ
	|									* ТоварыСЦенами.КоэффициентПересчетаЦены
	|						ИНАЧЕ 0
	|						КОНЕЦ) КАК ЧИСЛО(31, 2)) КАК ЦенаСоСкидкой,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|						КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныМинимальныхЦен
	|							ТОГДА ТоварыСЦенами.Цена 
	|									* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
	|									/ ВЫБОР
	|										КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
	|											ТОГДА 1
	|										ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
	|									КОНЕЦ
	|									* ТоварыСЦенами.КоэффициентПересчетаЦены
	|						ИНАЧЕ 0
	|						КОНЕЦ) КАК ЧИСЛО(31, 2)) КАК МинимальнаяЦена
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныТоваров КАК ТоварыСЦенами
	|		ПО &УсловиеСоединенияЦеныНоменклатуры
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.ИдентификаторПубликации,
	|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса,
	|	ТаблицаТоваров.ЦенаДоСкидки,
	|	ТаблицаТоваров.ЦенаСоСкидкой,
	|	ТаблицаТоваров.МинимальнаяЦена";

	Если ТолькоИзменения Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ИМЕЮЩИЕ
			|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
			|						КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныДоСкидок
			|							ТОГДА ТоварыСЦенами.Цена 
			|									* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
			|									/ ВЫБОР
			|										КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
			|											ТОГДА 1
			|										ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
			|									КОНЕЦ
			|									* ТоварыСЦенами.КоэффициентПересчетаЦены
			|						ИНАЧЕ 0
			|						КОНЕЦ) КАК ЧИСЛО(31, 2)) <> ТаблицаТоваров.ЦенаДоСкидки
			|		ИЛИ ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
			|								КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныСУчетомСкидок
			|									ТОГДА ТоварыСЦенами.Цена 
			|											* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
			|											/ ВЫБОР
			|												КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
			|													ТОГДА 1
			|												ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
			|											КОНЕЦ
			|											* ТоварыСЦенами.КоэффициентПересчетаЦены
			|								ИНАЧЕ 0
			|								КОНЕЦ) КАК ЧИСЛО(31, 2)) <> ТаблицаТоваров.ЦенаСоСкидкой
			|		ИЛИ ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
			|								КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныМинимальныхЦен
			|									ТОГДА ТоварыСЦенами.Цена 
			|											* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
			|											/ ВЫБОР
			|												КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
			|													ТОГДА 1
			|												ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
			|											КОНЕЦ
			|											* ТоварыСЦенами.КоэффициентПересчетаЦены
			|								ИНАЧЕ 0
			|								КОНЕЦ) КАК ЧИСЛО(31, 2)) <> ТаблицаТоваров.МинимальнаяЦена";
	КонецЕсли;

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Запрос.УстановитьПараметр("ВалютаУчета", НастройкиУчетнойЗаписи.ВалютаУчета);
	Запрос.УстановитьПараметр("ДатаЦен", ТекущаяДата);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("ВидЦеныДоСкидок", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	Запрос.УстановитьПараметр("ВидЦеныСУчетомСкидок", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	Запрос.УстановитьПараметр("ВидЦеныМинимальныхЦен", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковкиЦены",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТоварыСЦенами.Упаковка",
			"ТоварыСЦенами.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));

	ТекстЗамены = "";
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ТекстЗамены =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыБезЦен КАК ТаблицаТоваров
			|		ПО ТаблицаТоваров.Номенклатура = СтатусыПубликации.Номенклатура
			|			И ТаблицаТоваров.Характеристика = СтатусыПубликации.Характеристика
			|			И ТаблицаТоваров.Упаковка = СтатусыПубликации.Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ОграничениеПоТаблицеТоваров)", ТекстЗамены);

	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ТекущаяДата);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ПоляДляИндексирования",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыИндексирование(ИспользуетсяЦенообразование25));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ЦеныНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры("ТаблицаТоваров",
			"&ДатаЦен",
			Новый Структура("ВТаблице", "ВидЦены"),
			ИспользуетсяЦенообразование25));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоединенияЦеныНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
		"ТаблицаТоваров",
		"ТоварыСЦенами",
		"ТаблицаТоваров.ВидЦены",
		ИспользуетсяЦенообразование25));

	НастройкаЦенообразования = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "СтатусыПубликации";
	НастройкаЦенообразования.ПриемникТоваров = "";
	НастройкаЦенообразования.ПолеСерия = "";

	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования,,
		ИспользуетсяЦенообразование25);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка", ТекстЗамены);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка", "ИСТИНА");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружено товаров для выгрузки цен по учетной записи <%1>'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			УчетнаяЗаписьМаркетплейса);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Ошибка.ОписаниеОшибки = ТекстСообщения;
		Возврат Ошибка;
	КонецЕсли;

	ВалютаРУ = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(НастройкиУчетнойЗаписи.Организация);
	ПредставлениеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаРУ, "Наименование");
	ЛимитПозицийНаИтерацию = 1000;

	ДанныеИтерации = Новый Структура("prices", Новый Массив);
	ОтправленныеЦены = СведенияОВыгруженныхДанных();
	ОтправленныеЦены.Колонки.Добавить("offer_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОтправленныеЦены.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ОтправленныеЦены.Колонки.Добавить("ЦенаДоСкидки", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ОтправленныеЦены.Колонки.Добавить("ЦенаСоСкидкой", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ОтправленныеЦены.Колонки.Добавить("МинимальнаяЦена", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ОтправленныеЦены.Индексы.Добавить("offer_id, product_id");

	Отказ = Ложь;
	ПродолжитьВыполнение = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Макс(ТаблицаТоваров.Количество(), Выборка.Количество()) / 1000);

	Пока Выборка.Следующий() Цикл
		ДанныеЦены = Новый Структура;
		ДанныеЦены.Вставить("auto_action_enabled",	  "UNKNOWN");
		ДанныеЦены.Вставить("currency_code",		  ПредставлениеВалюты);
		ДанныеЦены.Вставить("min_price",			  Формат(Выборка.МинимальнаяЦена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("offer_id",				  Выборка.ИдентификаторПубликации);
		ДанныеЦены.Вставить("old_price",			  Формат(Выборка.ЦенаДоСкидки, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("price",				  Формат(Выборка.ЦенаСоСкидкой, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("price_strategy_enabled", "UNKNOWN");
		ДанныеЦены.Вставить("product_id",			  СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса));

		ДанныеИтерации.prices.Добавить(ДанныеЦены);

		НоваяСтрока = ОтправленныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.МинимальнаяЦена = Выборка.МинимальнаяЦена;
		НоваяСтрока.ЦенаДоСкидки = Выборка.ЦенаДоСкидки;
		НоваяСтрока.ЦенаСоСкидкой = Выборка.ЦенаСоСкидкой;
		НоваяСтрока.offer_id = ДанныеЦены.offer_id;
		НоваяСтрока.product_id = ДанныеЦены.product_id;

		Если ДанныеИтерации.prices.Количество() >= ЛимитПозицийНаИтерацию Тогда
			ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеЦены, Отказ, ПродолжитьВыполнение);
			ДанныеИтерации.prices.Очистить();
			ОтправленныеЦены.Очистить();
			ОтправленныеЦены.Индексы.Очистить();
			
			Если Отказ Тогда
				Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Ошибка.ОписаниеОшибки = НСтр("ru = 'При выгрузке цен товаров на торговую площадку возникли ошибки. Подробности см. в журнале регистрации.'");
				
				Если Не ПродолжитьВыполнение Тогда
					Возврат Ошибка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Не Отказ
			И ДанныеИтерации.prices.Количество() > 0 Тогда
		ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеЦены, Отказ, ПродолжитьВыполнение);
	КонецЕсли;
	
	Если Отказ Тогда
		Ошибка.КодОшибки 	  = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'При выгрузке цен товаров на торговую площадку возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Загрузка цен товарных позиций с маркетплейса в ИБ.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   ВидыЦен                   - Массив Из СправочникСсылка.ВидыЦен - загружаемые цены.
//   ТолькоЗагружаемые         - Булево - признак удаления выгружаемых видов цен из результата.
//   ТолькоПоСтатусуЗагружен   - Булево - признак обработки только объектов со статусом "Загружен".
//     
// Возвращаемое значение: 
//   - Неопределено - документы установки цен не сформированы.
//   - Соответствие Из КлючИЗначение - список сформированных документов изменений цен в разрезе учетных записей:
//       * Ключ     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//       * Значение - Массив Из Структура - информация о записанных документах:
//         ** УстановкаЦенНоменклатуры    - ДокументСсылка.УстановкаЦенНоменклатуры - сформированный документ установки цен.
//         ** СогласованиеЦенНоменклатуры - БизнесПроцессСсылка.СогласованиеЦенНоменклатуры - бизнес процесс согласования цен.
//
Функция ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ВидыЦен = Неопределено, 
			ТолькоЗагружаемые = Истина, ТолькоПоСтатусуЗагружен = Истина) Экспорт

	Результат = Новый Соответствие;
			
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;

		Выгрузка = РезультатЗапроса.Выгрузить();
		УчетныеЗаписиДляЗагрузки = Выгрузка.ВыгрузитьКолонку("Ссылка");
	Иначе
		УчетныеЗаписиДляЗагрузки = Новый Массив;
		УчетныеЗаписиДляЗагрузки.Добавить(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

	Для Каждого УчетнаяЗаписьМаркетплейса Из УчетныеЗаписиДляЗагрузки Цикл	// СправочникСсылка.УчетныеЗаписиМаркетплейсов

		НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, ТолькоЗагружаемые);

		ВидыЦенУстановлены = (ТипЗнч(ВидыЦен) = Тип("Массив"));

		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаВидаЦен Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
			Если СтрокаВидаЦен.Значение.Пустая() Тогда
				СтрокиКУдалению.Добавить(СтрокаВидаЦен.Ключ);
			ИначеЕсли ВидыЦенУстановлены И ВидыЦен.Найти(СтрокаВидаЦен.Значение) = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаВидаЦен.Ключ);
			КонецЕсли;
		КонецЦикла;

		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НастройкиУчетнойЗаписи.ВидыЦен.Удалить(СтрокаКУдалению);
		КонецЦикла;

		Если НастройкиУчетнойЗаписи.ВидыЦен.Количество() = 0 Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Не установлены виды цен для загрузки.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
			|	СтатусыПубликации.Номенклатура КАК Номенклатура,
			|	СтатусыПубликации.Характеристика КАК Характеристика,
			|	СтатусыПубликации.Упаковка КАК Упаковка,
			|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
			|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	&Валюта КАК Валюта
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
			|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
			|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка
			|ГДЕ
			|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
			|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
			|	И СтатусыПубликации.ИдентификаторОбъектаМаркетплейса <> """"";

		Если ТаблицаТоваров.Количество() = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
				|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
				|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
				|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка",
				"");
		КонецЕсли;
		
		Если Не ТолькоПоСтатусуЗагружен Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)",
				"");
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		ВалютаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВалютаУчета");
		Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружено товаров для загрузки цен по учетной записи <%1>'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УчетнаяЗаписьМаркетплейса);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,,,
				ТекстСообщения);
			Продолжить;
		КонецЕсли;

		ЛимитПозицийНаИтерацию = 1000;
		ПоследнийИдентификатор = "";

		ПолученныеЦены = СведенияОВыгруженныхДанных();
		ПолученныеЦены.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
		ПолученныеЦены.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ПолученныеЦены.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ПолученныеЦены.Колонки.Добавить("Цена", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		ЦеныДляЗагрузки = ПолученныеЦены.Скопировать();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ЦеныДляЗагрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ИдентификаторЧислом = СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса);
			НоваяСтрока.product_id = ИдентификаторЧислом;
			Если ЦеныДляЗагрузки.Количество() = ЛимитПозицийНаИтерацию Тогда
				ЦеныДляЗагрузки.Индексы.Добавить("product_id");
				ПоследнийИдентификатор = ПолучитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПоследнийИдентификатор, ЦеныДляЗагрузки, ПолученныеЦены, НастройкиУчетнойЗаписи.ВидыЦен);
				ЦеныДляЗагрузки.Очистить();
				ЦеныДляЗагрузки.Индексы.Очистить();
			КонецЕсли;
		КонецЦикла;

		Если ЦеныДляЗагрузки.Количество() > 0 Тогда
			ЦеныДляЗагрузки.Индексы.Добавить("product_id");
			ПолучитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПоследнийИдентификатор, ЦеныДляЗагрузки, ПолученныеЦены, НастройкиУчетнойЗаписи.ВидыЦен);
		КонецЕсли;

		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"РегламентноеЗадание.ЗагрузкаЦенСМаркетплейсаOzon.ОбработкаДанных");

		// Сверка значений цен с текущими в ИБ
		ДатаЗагрузки = ТекущаяДатаСеанса();
		ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДатаЗагрузки);
		Запрос = Новый Запрос;
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаЦен.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТаблицаЦен.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ВЫРАЗИТЬ(ТаблицаЦен.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
			|	ВЫРАЗИТЬ(ТаблицаЦен.ВидЦены КАК Справочник.ВидыЦен) КАК ВидЦены,
			|	ВЫРАЗИТЬ(ТаблицаЦен.Валюта КАК Справочник.Валюты) КАК Валюта,
			|	ВЫРАЗИТЬ(ТаблицаЦен.Цена КАК ЧИСЛО(31, 2)) КАК Цена
			|ПОМЕСТИТЬ ВТТаблицаЦен
			|ИЗ
			|	&ТаблицаЦен КАК ТаблицаЦен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТТаблицаЦен.Номенклатура КАК Номенклатура,
			|	ВТТаблицаЦен.Характеристика КАК Характеристика,
			|	ВТТаблицаЦен.Упаковка КАК Упаковка,
			|	ВТТаблицаЦен.ВидЦены КАК ВидЦены,
			|	ВТТаблицаЦен.Валюта КАК Валюта,
			|	МАКСИМУМ(ВТТаблицаЦен.Цена) КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦен
			|ИЗ
			|	ВТТаблицаЦен КАК ВТТаблицаЦен
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТТаблицаЦен.Номенклатура,
			|	ВТТаблицаЦен.Характеристика,
			|	ВТТаблицаЦен.Упаковка,
			|	ВТТаблицаЦен.ВидЦены,
			|	ВТТаблицаЦен.Валюта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТТаблицаЦен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЦен.Номенклатура КАК Номенклатура,
			|	ТаблицаЦен.Характеристика КАК Характеристика,
			|	ТаблицаЦен.Упаковка КАК Упаковка,
			|	ТаблицаЦен.ВидЦены КАК ВидЦены,
			|	ТаблицаЦен.Валюта КАК Валюта,
			|	ТаблицаЦен.Цена КАК Цена,
			|	ВЫРАЗИТЬ(ТаблицаЦен.Цена 
			|				/ ВЫБОР
			|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 0
			|						ТОГДА 1
			|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
			|				КОНЕЦ КАК ЧИСЛО(31, 2)) КАК БазоваяЦена,
			|	&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка
			|ПОМЕСТИТЬ ТаблицаЦенПодготовленная
			|ИЗ
			|	ТаблицаЦен КАК ТаблицаЦен
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|		ПО (ВидыНоменклатуры.Ссылка = ТаблицаЦен.Номенклатура.ВидНоменклатуры)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПоляДляЦенообразованияВыборка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаЦен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЦенПодготовленная.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЦенообразование25
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		ИНАЧЕ ТаблицаЦенПодготовленная.Характеристика
			|	КОНЕЦ КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
			|		ИНАЧЕ ЕСТЬNULL(СправХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))
			|	КОНЕЦ КАК ХарактеристикаЦО,
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЦенообразование25
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ИНАЧЕ ТаблицаЦенПодготовленная.Упаковка
			|	КОНЕЦ КАК Упаковка,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ИНАЧЕ ТаблицаЦенПодготовленная.Упаковка
			|	КОНЕЦ КАК УпаковкаЦО,
			|	ТаблицаЦенПодготовленная.ВидЦены КАК ВидЦены,
			|	ТаблицаЦенПодготовленная.Валюта КАК Валюта,
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЦенообразование25
			|				И ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
			|			ТОГДА ТаблицаЦенПодготовленная.БазоваяЦена
			|		ИНАЧЕ ТаблицаЦенПодготовленная.Цена
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЦенообразование25
			|				И ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
			|			ТОГДА ТаблицаЦенПодготовленная.БазоваяЦена
			|		ИНАЧЕ ТаблицаЦенПодготовленная.Цена
			|	КОНЕЦ <> ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЦенаИзменена
			|ПОМЕСТИТЬ ТаблицаЦенИтоговая
			|ИЗ
			|	ТаблицаЦенПодготовленная КАК ТаблицаЦенПодготовленная
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|		ПО ТаблицаЦенПодготовленная.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатуры
			|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправХарактеристикиНоменклатуры
			|		ПО ТаблицаЦенПодготовленная.Характеристика = СправХарактеристикиНоменклатуры.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаЦенПодготовленная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ 
			|	ТаблицаЦенИтоговая.Номенклатура КАК Номенклатура,
			|	ТаблицаЦенИтоговая.Характеристика КАК Характеристика,
			|	ТаблицаЦенИтоговая.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ТаблицаЦенИтоговая.Упаковка КАК Упаковка,
			|	ТаблицаЦенИтоговая.УпаковкаЦО КАК УпаковкаЦО,
			|	ТаблицаЦенИтоговая.ВидЦены КАК ВидЦены,
			|	ТаблицаЦенИтоговая.Валюта КАК Валюта,
			|	МАКСИМУМ(ТаблицаЦенИтоговая.Цена) КАК Цена
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ТаблицаЦенИтоговая.Номенклатура КАК Номенклатура,
			|		ТаблицаЦенИтоговая.Характеристика КАК Характеристика,
			|		ТаблицаЦенИтоговая.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|		ТаблицаЦенИтоговая.Упаковка КАК Упаковка,
			|		ТаблицаЦенИтоговая.УпаковкаЦО КАК УпаковкаЦО,
			|		ТаблицаЦенИтоговая.ВидЦены КАК ВидЦены,
			|		ТаблицаЦенИтоговая.Валюта КАК Валюта,
			|		ТаблицаЦенИтоговая.Цена КАК Цена
			|	ИЗ
			|		ТаблицаЦенИтоговая КАК ТаблицаЦенИтоговая
			|	ГДЕ
			|		ТаблицаЦенИтоговая.ЦенаИзменена
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ТаблицаЦенИтоговая.Номенклатура КАК Номенклатура,
			|		ТаблицаЦенИтоговая.Характеристика КАК Характеристика,
			|		ТаблицаЦенИтоговая.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|		ТаблицаЦенИтоговая.Упаковка КАК Упаковка,
			|		ТаблицаЦенИтоговая.УпаковкаЦО КАК УпаковкаЦО,
			|		ТаблицаЦенИтоговая.ВидЦены КАК ВидЦены,
			|		ТаблицаЦенИтоговая.Валюта КАК Валюта,
			|		ТаблицаЦенИтоговая.Цена КАК Цена
			|	ИЗ
			|		ТаблицаЦенИтоговая КАК ТаблицаЦенИтоговая
			|	ГДЕ
			|		НЕ ТаблицаЦенИтоговая.ЦенаИзменена
			|		И (ТаблицаЦенИтоговая.Номенклатура, ТаблицаЦенИтоговая.Характеристика, ТаблицаЦенИтоговая.ХарактеристикаЦО, ТаблицаЦенИтоговая.Упаковка, ТаблицаЦенИтоговая.УпаковкаЦО) В (
			|			ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ТаблицаЦенСИзменениями.Номенклатура КАК Номенклатура,
			|				ТаблицаЦенСИзменениями.Характеристика КАК Характеристика,
			|				ТаблицаЦенСИзменениями.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|				ТаблицаЦенСИзменениями.Упаковка КАК Упаковка,
			|				ТаблицаЦенСИзменениями.УпаковкаЦО КАК УпаковкаЦО
			|			ИЗ
			|				ТаблицаЦенИтоговая КАК ТаблицаЦенСИзменениями
			|			ГДЕ
			|				ТаблицаЦенСИзменениями.ЦенаИзменена)) КАК ТаблицаЦенИтоговая
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаЦенИтоговая.Номенклатура,
			|	ТаблицаЦенИтоговая.Характеристика,
			|	ТаблицаЦенИтоговая.ХарактеристикаЦО,
			|	ТаблицаЦенИтоговая.Упаковка,
			|	ТаблицаЦенИтоговая.УпаковкаЦО,
			|	ТаблицаЦенИтоговая.ВидЦены,
			|	ТаблицаЦенИтоговая.Валюта";

		НастройкаЦенообразования                 = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
		НастройкаЦенообразования.ИсточникТоваров = "ТаблицаЦен";
		НастройкаЦенообразования.ПолеСерия       = "";

		ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования,, ИспользуетсяЦенообразование25);
		
		Если ЗначениеЗаполнено(ТекстЗамены) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", ТекстЗамены);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияВыборка",
				"Номенклатура,
				|	ХарактеристикаЦО,
				|	СерияЦО,
				|	УпаковкаЦО");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка КАК ПоляДляЦенообразованияВыборка", "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоляДляЦенообразованияВыборка",
				"Номенклатура,
				|	Характеристика");
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ТаблицаЦеныНоменклатурыСрезПоследних",
			ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры(
				"ТаблицаЦенПодготовленная",
				"&ДатаЗагрузки",
				Новый Структура("ВТаблице", "ВидЦены"),
				ИспользуетсяЦенообразование25));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
			ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
			"ТаблицаЦенПодготовленная",
			"ЦеныНоменклатуры",
			"ТаблицаЦенПодготовленная.ВидЦены",
			ИспользуетсяЦенообразование25));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ТаблицаЦен.Упаковка",
				"ТаблицаЦен.Номенклатура"));
			
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаЗагрузки", ДатаЗагрузки);
		Запрос.УстановитьПараметр("ТаблицаЦен", ПолученныеЦены);
		Запрос.УстановитьПараметр("ИспользуетсяЦенообразование25", ИспользуетсяЦенообразование25);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			Замер, 
			ПолученныеЦены.Количество(), 
			"ПроверкаНаДубли");

		// Создание документа установки цен
		ВыбранныеЦены = Новый Массив;
		ДублиВидовЦен = Новый Массив;
		Для Каждого ВидЦены Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
			Если ДублиВидовЦен.Найти(ВидЦены.Значение) = Неопределено Тогда
				ДублиВидовЦен.Добавить(ВидЦены.Значение);
				
				ВыбраннаяЦена = Новый Структура();
				ВыбраннаяЦена.Вставить("Выбрана", Истина);
				ВыбраннаяЦена.Вставить("Влияет", Ложь); 
				ВыбраннаяЦена.Вставить("Ссылка", ВидЦены.Значение);
				ВыбраннаяЦена.Вставить("ВидЦены", ВидЦены.Значение);
				ВыбранныеЦены.Добавить(ВыбраннаяЦена);
			КонецЕсли;
		КонецЦикла;

		ТаблицаЦен = РезультатЗапроса.Выгрузить();
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Дата", ДатаЗагрузки);
		ДанныеЗаполнения.Вставить("ИспользуетсяЦенообразование25", ИспользуетсяЦенообразование25);
		ДанныеЗаполнения.Вставить("ВыбранныеЦены", ВыбранныеЦены);
		ДанныеЗаполнения.Вставить("ТаблицаЦен", ТаблицаЦен);
		ДанныеЗаполнения.Вставить("КодФормы", "");
		ДанныеЗаполнения.Вставить("Модифицированность", "");
		МассивДокументов = Документы.УстановкаЦенНоменклатуры.ЗаписатьИзмененияЦенНаСервере(ДанныеЗаполнения);
		Для Каждого Документ Из МассивДокументов Цикл
			Попытка
				ДокументОбъект = Документ.УстановкаЦенНоменклатуры.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести документ %1 по причине: %2'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
					Документ.УстановкаЦенНоменклатуры,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					СообщениеОбОшибке);
			КонецПопытки;
		КонецЦикла;
		
		Результат.Вставить(УчетнаяЗаписьМаркетплейса, МассивДокументов);
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
			Замер, 
			ТаблицаЦен.Количество(), 
			"ФормированиеДокументаУстановкиЦен");

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет список используемых видов цен. 
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Массив Из СправочникСсылка.ВидыЦен - список используемых видов цен, исключая незаполненные.
//
Функция ИспользуемыеВидыЦен(УчетнаяЗаписьМаркетплейса) Экспорт

	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса);
	
	ВидыЦен = Новый Массив;
	Для Каждого ВидЦены Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
		Если Не ВидЦены.Значение.Пустая() Тогда
			ВидыЦен.Добавить(ВидЦены.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;

КонецФункции

#КонецОбласти

#Область ПубликацияОбъектов

// Создает записи в регистре сведений "Статусы публикации объектов маркетплейса Ozon".
//
// Параметры:
//   ДанныеПубликации - ТаблицаЗначений - данные публикуемых товаров, см. НоваяТаблицаПубликацииТоваров.
//
Процедура СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации) Экспорт

	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.ИсточникДанных = ДанныеПубликации;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса", "УчетнаяЗаписьМаркетплейса");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
		БлокировкаДанных.Заблокировать();

		ВидОбъекта = Неопределено;
		ОбъектПубликации = Неопределено;

		Для Каждого ДанныеТовара Из ДанныеПубликации Цикл
			// Создание записи по товару
			Если ДанныеТовара.ОпубликоватьТовар Тогда
				ВидОбъекта = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
				ОбъектПубликации = ДанныеТовара.Номенклатура;

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи(); 
				Запись.ВидОбъектаМаркетплейса = ВидОбъекта;
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				Запись.ОбъектПубликации = Неопределено;
				Запись.Прочитать();

				Если Запись.Выбран() Тогда
					Запись.ДатаОбновления = ТекущаяДатаСеанса();
				Иначе
					Запись.ДатаСоздания = ТекущаяДатаСеанса();
					Запись.ВидОбъектаМаркетплейса = ВидОбъекта;
					Запись.ПредставлениеОбъектаМаркетплейса = ДанныеТовара.ДанныеДляПубликации.НаименованиеОбъектаМаркетплейса;
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара);
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара.ДанныеДляПубликации);
				Запись.Категория = ДанныеТовара.Категория1С;
				Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеТовара.ДанныеОбъекта);

				Запись.Записать();
			КонецЕсли;

			// Создание записей по объектам публикации (изображение, сертификат).
			Для Каждого ДанныеОбъектаПубликации Из ДанныеТовара.ОбъектыПубликации Цикл
				ОбъектПубликации = ДанныеТовара.Номенклатура;

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				Если ДанныеОбъектаПубликации.ИсходныйКлючЗаписи.Количество() Тогда
					ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации.ИсходныйКлючЗаписи, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				Иначе
					ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации);
				Запись.Прочитать();
				
				Если Не Запись.Выбран() Тогда
					Запись.ДатаСоздания = ТекущаяДатаСеанса();
				Иначе
					Запись.ДатаОбновления = ТекущаяДатаСеанса();
					Запись.Состояние = "";
					Запись.ОписаниеСостояния = "";
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации);
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъектаПубликации.ДанныеОбъекта);

				Запись.Записать();
			КонецЦикла;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();

		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать %1 ""%2""'"),
			ВидОбъекта, 
			ОбъектПубликации);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

// Обработчик подписки на событие изменения присоединенных файлов и сертификатов номенклатуры.
//
// Параметры:
//   Источник - СправочникОбъект.НоменклатураПрисоединенныеФайлы - 
//            - СправочникОбъект.СертификатыНоменклатуры -
//            - РегистрСведенийНаборЗаписей.ОбластиДействияСертификатовНоменклатуры - объект события.
//   Отказ    - Булево - флаг отказа от записи.
//
Процедура ПриЗаписиПрисоединенныхФайловНоменклатурыСертификатовНоменклатурыДляOzon(Источник, Отказ) Экспорт

	Если Отказ
			Или Источник.ОбменДанными.Загрузка
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon") Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ОбластиДействияСертификатовНоменклатуры") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры") Тогда
			Возврат;
		КонецЕсли;
		ПриЗаписиСертификатыНоменклатуры(Источник, Отказ);
	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СертификатыНоменклатурыПрисоединенныеФайлы") Тогда
		ПриЗаписиСертификатыПрисоединенныеФайлы(Источник, Отказ);
	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		ПриЗаписиНоменклатураПрисоединенныеФайлы(Источник, Отказ);
	КонецЕсли;

КонецПроцедуры

// Обработчик подписки на событие изменения номенклатуры, характеристики, упаковки.
//
// Параметры:
//   Источник - СправочникОбъект.Номенклатура - 
//            - СправочникОбъект.ХарактеристикиНоменклатуры - 
//            - СправочникОбъект.УпаковкиЕдиницыИзмерения - объект события.
//   Отказ    - Булево - признак отказа от записи.
//
Процедура ПриЗаписиДанныхТовараМаркетплейсаOzon(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon")
			Или Источник.ДополнительныеСвойства.Свойство("НеАнализироватьИзмененияДляТоваровOzon") Тогда
		Возврат;
	КонецЕсли;

	КлючЗадания = "ЗаписьОбъектаДанныхТовараМаркетплейсаOzon_" + СтрЗаменить(Источник.Ссылка.УникальныйИдентификатор(), "-", "_");
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Источник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);

	Попытка
		Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
		Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);

		Если Задания.Количество() <> 0 Тогда
			Для Каждого ФоновоеЗадание Из Задания Цикл
				ФоновоеЗадание.Отменить();
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно удалить фоновое задание с ключом: %1
			           |Описание ошибки:
			           |%2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			КлючЗадания,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	ФоновыеЗадания.Выполнить("ИнтеграцияСМаркетплейсомOzonСервер.ПроверитьИзмененияДанныхПубликацииПриЗаписи", 
		ПараметрыЗадания,
		КлючЗадания, 
		СобытиеЖурналаРегистрации() + ". " + НСтр("ru = 'Проверка изменения значений атрибутов для товаров'", 
												ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Проверка изменения данных публикации с последующей обработкой.
//
// Параметры:
//  СсылкаНаИсточник - СправочникСсылка.Номенклатура - 
//                   - СправочникСсылка.ХарактеристикиНоменклатуры -
//                   - СправочникСсылка.УпаковкиЕдиницыИзмерения - ссылка на объект для поиска изменений.
//
Процедура ПроверитьИзмененияДанныхПубликацииПриЗаписи(СсылкаНаИсточник) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликации.ДанныеОбъекта КАК ДанныеОбъекта
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
		|		ПО СтатусыПубликации.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
		|ГДЕ
		|	СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И &ПолеУсловия = &СсылкаНаИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ДанныеПубликации.Номенклатура КАК Номенклатура,
		|	ДанныеПубликации.Характеристика КАК Характеристика,
		|	ДанныеПубликации.Упаковка КАК Упаковка,
		|	ДанныеПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ДанныеПубликации.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	ДанныеПубликации КАК ДанныеПубликации";

	ТипИсточника = ТипЗнч(СсылкаНаИсточник);

	Если ТипИсточника = Тип("СправочникСсылка.Номенклатура") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ПолеУсловия", "СтатусыПубликации.Номенклатура");
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ПолеУсловия", "СтатусыПубликации.Характеристика");
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ПолеУсловия", "СтатусыПубликации.Упаковка");
	КонецЕсли;

	ПараметрыЗаполненияТоваров = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияТоваров.ПолучитьАтрибуты = Истина;
	ПараметрыЗаполненияТоваров.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияТоваров.ПолучитьСертификаты = Истина;
	ПараметрыЗаполненияТоваров.ОбновитьДанные = Истина;

	ПараметрыЗаполненияОбъектовПубликации = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияОбъектовПубликации.ПолучитьИзображения = Истина;

	ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СсылкаНаИсточник", СсылкаНаИсточник);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаТоваров = Запрос.Выполнить().Выбрать();

	ТаблицаДанных = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияТоваров);

	Если ТаблицаДанных.Количество() > 0 Тогда

		ТаблицаДанныхКэшИзображений = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияОбъектовПубликации);

		Для Каждого ДанныеТовара Из ТаблицаДанных Цикл
			ВыборкаТоваров.Сбросить();

			// Проверка изменений реквизитов товара.
			Отбор = Новый Структура;
			Отбор.Вставить("УчетнаяЗаписьМаркетплейса");
			Отбор.Вставить("Номенклатура");
			Отбор.Вставить("Характеристика");
			Отбор.Вставить("Упаковка");
			ЗаполнитьЗначенияСвойств(Отбор, ДанныеТовара);
			
			Если ВыборкаТоваров.НайтиСледующий(Отбор) Тогда
				ДанныеОбъекта = ВыборкаТоваров.ДанныеОбъекта.Получить();

				ДанныеТовара.ДанныеОбъекта.Колонки.Удалить("ИзменилсяРеквизит1С");
				ДанныеТовара.ДанныеОбъекта.Колонки.Удалить("НовоеЗначениеРеквизита1С");

				Различия = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(ДанныеТовара.ДанныеОбъекта, ДанныеОбъекта, Ложь);

				Если ЗначениеЗаполнено(Различия) Тогда
					ДополнитьТаблицуЗначенийРеквизитовИзменениями(ДанныеОбъекта, Различия);

					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейса;
					ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка"); 
					Запись.ОбъектПубликации = Неопределено;
					Запись.Прочитать();

					Если Запись.Выбран() Тогда
						Запись.ИзмененыРеквизиты = Истина;
						Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);

						Запись.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Проверка изменения основного изображения.
			ОтборИзображений = Новый Структура("ЭтоОсновнойОбъект",  Истина);

			ОсновноеИзображение = Неопределено;
			ОсновноеИзображениеКэш = Неопределено;

			СтрокиОсновногоИзображения = ДанныеТовара.ОбъектыПубликации.НайтиСтроки(ОтборИзображений);
			Если СтрокиОсновногоИзображения.Количество() > 0 Тогда
				ОсновноеИзображение = СтрокиОсновногоИзображения[0].ОбъектПубликации;
			КонецЕсли;

			ДанныеТовараКэш = ТаблицаДанныхКэшИзображений.НайтиСтроки(Отбор);
			Если ДанныеТовараКэш.Количество() > 0 Тогда
				Если СтрокиОсновногоИзображения.Количество() > 0 Тогда
					ОсновноеИзображениеКэш = СтрокиОсновногоИзображения[0].ОбъектПубликации;
				КонецЕсли;
			КонецЕсли;

			Если ОсновноеИзображение <> ОсновноеИзображениеКэш Тогда
				Изображение = ?(ЗначениеЗаполнено(ОсновноеИзображение), ОсновноеИзображение, ОсновноеИзображениеКэш);
				РеквизитыИзображения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Изображение, "ПометкаУдаления, ПубликуетсяВСервисах, Расширение");
				РеквизитыИзображения.Вставить("Ссылка", Изображение);
				РеквизитыИзображения.Вставить("ДатаЗаема", Неопределено);
				РеквизитыИзображения.Вставить("ДатаМодификацииУниверсальная", Неопределено);

				ПриЗаписиНоменклатураПрисоединенныеФайлы(РеквизитыИзображения, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. ОчередьЗаданийЛокализация.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыгрузкаОстатковНаМаркетплейсOzon.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ВыгрузкаЦенНаМаркетплейсOzon.ИмяМетода); 
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку.ИмяМетода); 
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаОстатковСМаркетплейсаOzon.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаЦенСМаркетплейсаOzon.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОПродажахТоваровЧерезСкладыOzon.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаНеобработанныхЗаказовСТорговойПлощадки.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеСтатусовЗаказовТорговойПлощадки.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПолучениеЭтикетокДляЗаказовТорговойПлощадки.ИмяМетода);
	
КонецПроцедуры

// Выполняет выгрузку остатков товаров. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ВыгрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВыгрузкаОстатковНаМаркетплейсOzon);
		
	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Истина) Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная выгрузка остатков номенклатуры на Ozon'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыгрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная выгрузка остатков номенклатуры на OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет справочную загрузку остатков товаров. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаОстатковСМаркетплейсаOzon);

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Ложь) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная загрузка остатков номенклатуры с маркетплейса OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗагрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная загрузка остатков номенклатуры с маркетплейса OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет выгрузку цен товаров. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ВыгрузитьЦеныТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВыгрузкаЦенНаМаркетплейсOzon);

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная выгрузка цен номенклатуры на OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыгрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная выгрузка цен номенклатуры на OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет загрузку цен товаров. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьЦеныТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаЦенСМаркетплейсаOzon);

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Ложь) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная загрузка цен номенклатуры с маркетплейса OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗагрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная загрузка цен номенклатуры с маркетплейса OZON'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет обновление данных по товарному каталогу. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбновитьТоварныйКаталогРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon);

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Ложь) Тогда
		Возврат;
	КонецЕсли;

	// Начало выполнение регламентного задания.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало обновления данных товарного каталога'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Истина);

	// Шаг 1. Проверить статус загрузки товаров.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало проверки заданий публикации товаров при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ВыполнитьПроверкуЗаданияПубликацииТоваров(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание проверки заданий публикации товаров при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	// Шаг 2. Проверить статус загрузки изображений товаров.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало проверки публикации изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыполнитьПроверкуПубликацииИзображенийТоваров(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание проверки публикации изображений при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
			
	// Шаг 3. Обновить информацию по загруженным товарам.
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало обновления информации по публикуемым товарам при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыполнитьОбновлениеИнформацииПоТоварам(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание обновления информации по публикуемым товарам при обновлении данных товарного каталога'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	Если Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		// Шаг 4. Опубликовать товары.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало публикации товаров при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		Результат = ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса);
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обновлении данных товарного каталога обнаружены ошибки: %1'",
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				Результат.ОписаниеОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,,,
					ТекстОшибки);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание публикации товаров при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		// Шаг 5. Опубликовать изображения товаров.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало публикации изображений при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗаписьМаркетплейса);

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание публикации изображений при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		// Шаг 6. Опубликовать сертификаты товаров.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало публикации сертификатов при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		ВыполнитьПубликациюСертификатовТоваров(УчетнаяЗаписьМаркетплейса);

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание публикации сертификатов при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		// Шаг 7. Удалить файлы из сервиса хранения файлов после публикации товара.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начало удаления неактуальных публичных ссылок из сервиса хранения изображений при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));

		ВыполнитьУдалениеПубличныхСсылок(УчетнаяЗаписьМаркетплейса);

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Окончание удаления неактуальных публичных ссылок из сервиса хранения изображений при обновлении данных товарного каталога'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;

	// Окончание выполнение регламентного задания.
	УстановитьПривилегированныйРежим(Ложь);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание обновления данных товарного каталога'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет загрузку информации о продажах товаров через торговую площадку. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Ложь) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная загрузка информации о продажах товаров через торговую площадку'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗагрузитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершена регламентная загрузка информации о продажах товаров через торговую площадку'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет обновление информации о продажах товаров через торговую площадку. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбновитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьМаркетплейса, Ложь) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начато регламентное обновление информации о продажах товаров через торговую площадку'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ОбновитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку(УчетнаяЗаписьМаркетплейса);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершено регламентное обновление информации о продажах товаров через торговую площадку'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет загрузку необработанных заказов (отправлений) с торговой площадки. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьНеобработанныеЗаказыРегламентнымЗаданием(УчетнаяЗапись) Экспорт
	
	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗапись, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная загрузка необработанных заказов с торговой площадки'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Параметры = НовыйПараметрыЗагрузкиЗаказов();
	Параметры.СтатусОтправления = "awaiting_packaging";
	
	ЗагрузитьЗаказыСТорговойПлощадки(УчетнаяЗапись, Параметры);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершена регламентная загрузка необработанных заказов с торговой площадки'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновляет статусы заказов (отправлений) торговой площадки. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбновитьСтатусыЗаказовРегламентнымЗаданием(УчетнаяЗапись) Экспорт
	
	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗапись, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начато регламентное обновление статусов заказов торговой площадки'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачалоПериода",       Неопределено);
	Параметры.Вставить("ОкончаниеПериода",    Неопределено);
	Параметры.Вставить("ИдентификаторЗаказа", Неопределено);
	Параметры.Вставить("Заказ",               Неопределено);
	
	ОбновитьСтатусыЗаказовТорговойПлощадки(УчетнаяЗапись, Параметры);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершено регламентное обновление статусов заказов торговой площадки'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает этикетки для сформированных отправлений с торговой площадки. 
// Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ПолучитьЭтикеткиОтправленийРегламентнымЗаданием(УчетнаяЗапись) Экспорт

	Если Не МожноВыполнитьРегламентноеЗадание(УчетнаяЗапись, Ложь) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентное получение этикеток отправлений с торговой площадки'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ПолучитьЭтикеткиОтправленийСТорговойПлощадки(УчетнаяЗапись);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершена регламентное получение этикеток отправлений с торговой площадки'", 
			ОбщегоНазначения.КодОсновногоЯзыка()));

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Склады

// Определяет склады с максимальной группой, разрешенной к выбору в документах продажи.
//
// Возвращаемое значение:
//	 Соответствие Из КлючИЗначение - где:
//     * Ключ     - СправочникСсылка.Склады - склад.
//     * Значение - СправочникСсылка.Склады - группа складов, разрешенная к выбору в документах продажи.
//
Функция ПолучитьСкладыСРодителями() Экспорт
	
	Результат = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
		Пролог =
			"ВЫБРАТЬ
			|	1 КАК НомерИтерации,
			|	СправочникСклады.Ссылка КАК Ссылка,
			|	СправочникСклады.Ссылка КАК Родитель
			|ПОМЕСТИТЬ ТаблицаСкладов1
			|ИЗ
			|	Справочник.Склады КАК СправочникСклады
			|ГДЕ
			|	НЕ СправочникСклады.ЭтоГруппа";
		
		Рефрен =
			"ВЫБРАТЬ
			|	ТаблицаСкладов.НомерИтерации + 1 КАК НомерИтерации,
			|	ТаблицаСкладов.Ссылка КАК Ссылка,
			|	ТаблицаСкладов.Родитель.Родитель КАК Родитель
			|ПОМЕСТИТЬ ТаблицаСкладов2
			|ИЗ
			|	ТаблицаСкладов1 КАК ТаблицаСкладов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СправочникСклады
			|		ПО (СправочникСклады.Ссылка = ТаблицаСкладов.Родитель.Родитель)
			|ГДЕ
			|	ТаблицаСкладов.НомерИтерации = 1
			|	И ТаблицаСкладов.Родитель.Родитель <> &ПустаяСсылка
			|	И СправочникСклады.ВыборГруппы В (
			|		ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах), 
			|		ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСкладов.НомерИтерации,
			|	ТаблицаСкладов.Ссылка,
			|	ТаблицаСкладов.Родитель
			|ИЗ
			|	ТаблицаСкладов1 КАК ТаблицаСкладов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаСкладов1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСкладов.НомерИтерации КАК НомерИтерации,
			|	ТаблицаСкладов.Ссылка КАК Ссылка,
			|	ТаблицаСкладов.Родитель КАК Родитель
			|ИЗ
			|	ТаблицаСкладов2 КАК ТаблицаСкладов
			|ГДЕ
			|	ТаблицаСкладов.НомерИтерации = 2";
		
		Эпилог =
			"ВЫБРАТЬ
			|	ТаблицаСкладов.НомерИтерации КАК НомерИтерации,
			|	ТаблицаСкладов.Ссылка КАК Ссылка,
			|	ТаблицаСкладов.Родитель КАК Родитель
			|ИЗ
			|	ТаблицаСкладов2 КАК ТаблицаСкладов
			|ГДЕ
			|	(ТаблицаСкладов.НомерИтерации, ИСТИНА) В
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Итерации.НомерИтерации) КАК НомерИтерации,
			|				ИСТИНА
			|			ИЗ
			|				ТаблицаСкладов2 КАК Итерации
			|			ГДЕ
			|				ТаблицаСкладов.Ссылка = Итерации.Ссылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаСкладов2";
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = Пролог + ОбщегоНазначения.РазделительПакетаЗапросов() + Рефрен;
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Склады.ПустаяСсылка());

		Индекс = 2;
		
		Пока Истина Цикл
			УстановитьПривилегированныйРежим(Истина);
			ВыборкаДанных = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ВыборкаДанных.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Рефрен = СтрЗаменить(Рефрен,
				"ТаблицаСкладов" + Формат(Индекс, "ЧГ="),
				"ТаблицаСкладов" + Формат(Индекс + 1, "ЧГ="));
			Рефрен = СтрЗаменить(Рефрен,
				"ТаблицаСкладов" + Формат(Индекс - 1, "ЧГ="),
				"ТаблицаСкладов" + Формат(Индекс, "ЧГ="));

			Рефрен = СтрЗаменить(Рефрен,
				"ТаблицаСкладов.НомерИтерации = " + Формат(Индекс, "ЧГ="),
				"ТаблицаСкладов.НомерИтерации = " + Формат(Индекс + 1, "ЧГ="));
			Рефрен = СтрЗаменить(Рефрен,
				"ТаблицаСкладов.НомерИтерации = " + Формат(Индекс - 1, "ЧГ="),
				"ТаблицаСкладов.НомерИтерации = " + Формат(Индекс, "ЧГ="));

			Запрос.Текст = Рефрен;
			Индекс       = Индекс + 1;
		КонецЦикла;

		Запрос.Текст = СтрЗаменить(Эпилог, "ТаблицаСкладов2", "ТаблицаСкладов" + Формат(Индекс, "ЧГ="));
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);

		Пока ВыборкаДанных.Следующий() Цикл
			Результат.Вставить(ВыборкаДанных.Ссылка, ВыборкаДанных.Родитель);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СервисныеФункции

// Получает хеш переданной строки.
//
// Параметры:
//   СтрокаДанных            - Строка - строка для хеширования.
//   ПреобразоватьВHEX       - Булево - признак преобразования в формат Base 64 (Hex).
//   ПеревестиВНижнийРегистр - Булево - признак перевода строки в нижний регистр.
// 
// Возвращаемое значение:
//   Строка - значение хеш-суммы в формате Base 64.
//
Функция ПолучитьХешСтроки(знач СтрокаДанных, ПреобразоватьВHEX = Истина, ПеревестиВНижнийРегистр = Истина) Экспорт
	
	Если ТипЗнч(СтрокаДанных) <> Тип("Строка") Тогда 
		СтрокаДанных = "";
	КонецЕсли;
	
	Возврат ХешСуммаДвоичныхДанных(
				ПолучитьДвоичныеДанныеИзСтроки(СтрокаДанных,КодировкаТекста.UTF8), ПреобразоватьВHEX, ПеревестиВНижнийРегистр);
	
КонецФункции

// Получает хеш указанного присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на созданный присоединенный файл.
// 
// Возвращаемое значение:
//   Строка - значение хеш-суммы в формате Base 64.
//
Функция ХешСуммаПрисоединенногоФайла(ПрисоединенныйФайл) Экспорт

	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);

	ХешСумма = ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла, Истина);

	Возврат ХешСумма;

КонецФункции

// Возвращает имя события журнала регистрации работы с торговой площадкой.
//
// Возвращаемое значение:
//   Строка - Наименование события для записей в журнале регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Интеграция с Ozon'", 
				ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УчетныеЗаписиМаркетплейсаСлужебный

// Определяет данные учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Структура - данные учетной записи: 
//     * Организация                - СправочникСсылка.Организации - организация учетной записи.
//     * ИдентификаторКлиента       - Строка - идентификатор клиента учетной записи.
//     * ИдентификаторУчетнойЗаписи - Строка - идентификатор учетной записи.
//
Функция ДанныеУчетнойЗаписи(УчетнаяЗаписьМаркетплейса)

	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, "Организация, ИдентификаторКлиента");

	Если Не ЗначениеЗаполнено(ДанныеУчетнойЗаписи.Организация) Или Не ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторКлиента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены данные учетной записи.'");
	КонецЕсли;

	ИдентификаторУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор();
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);

	Возврат ДанныеУчетнойЗаписи;

КонецФункции

// Определяет данные авторизации сервиса.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Структура - данные авторизации:
//     * ИдентификаторКлиента - Строка - идентификатор учетной записи.
//     * КлючAPI              - Строка - API-ключ учетной записи.
//
Функция ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса)

	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("ИдентификаторКлиента", УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента);
	Если ТипЗнч(УчетнаяЗаписьМаркетплейса) = Тип("Структура") И УчетнаяЗаписьМаркетплейса.Свойство("КлючAPI") Тогда
		ДанныеАвторизации.Вставить("КлючAPI", УчетнаяЗаписьМаркетплейса.КлючAPI);
	Иначе
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
		КлючAPI = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ДанныеУчетнойЗаписи.ИдентификаторУчетнойЗаписи, "KeyAPI", Ложь);
		ДанныеАвторизации.Вставить("КлючAPI", КлючAPI);
	КонецЕсли;

	Возврат ДанныеАвторизации;

КонецФункции

// Возвращает количество непроверенных заданий публикации из учетной системы.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Число - количество непроверенных заданий публикации товаров.
//
Функция КоличествоЗаданийВОчереди(УчетнаяЗаписьМаркетплейса)

	КоличествоЗаданийВОчереди = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации) КАК КоличествоЗаданийПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации <> """"";
	ВыборкаКоличестваЗаданий = Запрос.Выполнить().Выбрать();

	Если ВыборкаКоличестваЗаданий.Следующий() Тогда
		КоличествоЗаданийВОчереди = ВыборкаКоличестваЗаданий.КоличествоЗаданийПубликации;
	КонецЕсли;

	Возврат КоличествоЗаданийВОчереди;

КонецФункции

#КонецОбласти

#Область УчетныеЗаписиМаркетплейсаSellerAPI

// Проверяет установку соединения с маркетплейсом.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись, для которой проверяется 
//                                 подключение.
// 
// Возвращаемое значение:
//   Структура - содержит свойства:
//     * КодСостояния - Число - код состояния (ответа) выполнения запроса HTTP-сервера, 
//                        (см. http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
//     * ТекстОшибки  - Строка - описание ошибки при выполнении HTTP-запроса.
//
Функция ПроверитьСвязьСМаркетплейсом(УчетнаяЗаписьМаркетплейса) Экспорт

	ТекстЗапроса = "/v1/warehouse/list";
	
	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ВернутьКодСостояния = Истина;
	
	ПараметрыЗапроса = Новый Структура("СлужебныеПараметры", СлужебныеПараметры);
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина);

	Результат = Новый Структура("КодСостояния, ТекстОшибки", РезультатЗапроса, "");
	
	Если РезультатЗапроса = 200 Тогда
		Результат.ТекстОшибки = "OK";
	ИначеЕсли РезультатЗапроса = 301 Тогда
		Результат.ТекстОшибки = "Moved Permanently";
	ИначеЕсли РезультатЗапроса = 400 Тогда
		Результат.ТекстОшибки = "Bad Request";
	ИначеЕсли РезультатЗапроса = 401 Тогда
		Результат.ТекстОшибки = "Unauthorized";
	ИначеЕсли РезультатЗапроса = 403 Тогда
		Результат.ТекстОшибки = "Forbidden";
	ИначеЕсли РезультатЗапроса = 404 Тогда
		Результат.ТекстОшибки = "Not Found";
	ИначеЕсли РезультатЗапроса = 409 Тогда
		Результат.ТекстОшибки = "Conflict";
	ИначеЕсли РезультатЗапроса = 500 Тогда
		Результат.ТекстОшибки = "Internal Server Error";
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КатегорииСлужебный

// Рекурсивно заполняет подчиненные строки дерева категорий и типов товаров.
//
// Параметры:
//   СтрокаРодителя        - ДеревоЗначений - дерево, которое необходимо заполнить, 
//                             см. Обработка.УправлениеПродажамиНаOzon.Форма.ВыборКатегорииМаркетплейса.ДеревоКатегорийМаркетплейса.
//                         - СтрокаДереваЗначений - строка родителя дерева, которую необходимо заполнить.
//   КатегорииИТипыТоваров - Массив Из см. НовыйРезультатИзСервиса - категории и типы для товаров в виде дерева из 
//                             сервиса Ozon. См. ПолучитьКатегорииИТипыТоваровИзСервиса.
// 
Процедура ЗаполнитьДеревоКатегорийИТиповТоваровРекурсивно(СтрокаРодителя, КатегорииИТипыТоваров,
			ИспользуемыеКатегории = Неопределено, ИсключеныВсеКатегории = Ложь, ПараметрыУстановкиПометок = Неопределено)
	
	КоличествоКатегорий = 0;
	
	Для Каждого ЭлементКоллекции Из КатегорииИТипыТоваров Цикл
		Если ЭлементКоллекции["description_category_id"] <> Неопределено Тогда
			ИдентификаторКатегории = Формат(ЭлементКоллекции["description_category_id"], "ЧГ=");
			НаименованиеКатегории  = ЭлементКоллекции["category_name"];
		Иначе
			ИдентификаторКатегории = СтрокаРодителя.ИдентификаторКатегорииМаркетплейса 
										+ "_" 
										+ Формат(ЭлементКоллекции["type_id"], "ЧГ=");
			НаименованиеКатегории  = ЭлементКоллекции["type_name"];
		КонецЕсли;
		
		Если ЭлементКоллекции["children"].Количество() = 0
				И ИспользуемыеКатегории <> Неопределено 
				И ИспользуемыеКатегории.Найти(ИдентификаторКатегории) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаРодителя) = Тип("ДеревоЗначений") Тогда
			НаименованиеРодителяКатегории = "";
		ИначеЕсли ЗначениеЗаполнено(СтрокаРодителя.НаименованиеРодителяКатегорииМаркетплейса) Тогда
			НаименованиеРодителяКатегории = СтрокаРодителя.НаименованиеРодителяКатегорииМаркетплейса 
												+ Символы.НПП + ">" + Символы.НПП
												+ СтрокаРодителя.НаименованиеКатегорииМаркетплейса;
		Иначе
			НаименованиеРодителяКатегории = СтрокаРодителя.НаименованиеКатегорииМаркетплейса;
		КонецЕсли;
		
		СтрокаДереваЗначений                                           = СтрокаРодителя.Строки.Добавить();
		СтрокаДереваЗначений.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегории;
		СтрокаДереваЗначений.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегории;
		СтрокаДереваЗначений.НаименованиеРодителяКатегорииМаркетплейса = НаименованиеРодителяКатегории;
		СтрокаДереваЗначений.Заблокирована                             = ЭлементКоллекции["disabled"];
		
		КоличествоКатегорий = КоличествоКатегорий + 1;
		ЗаполнитьДеревоКатегорийИТиповТоваровРекурсивно(СтрокаДереваЗначений, ЭлементКоллекции["children"],
			ИспользуемыеКатегории, ИсключеныВсеКатегории, ПараметрыУстановкиПометок);
			
		Если ИсключеныВсеКатегории Тогда
			КоличествоКатегорий = КоличествоКатегорий - 1;
			СтрокаРодителя.Строки.Удалить(СтрокаДереваЗначений);
			
		Иначе
			СтрокаДереваЗначений.ЭтоГруппа = (СтрокаДереваЗначений.Строки.Количество() > 0);
			СтрокаДереваЗначений.Уровень   = ?(СтрокаДереваЗначений.ЭтоГруппа, 0, 3);
			
			Если ПараметрыУстановкиПометок <> Неопределено
					И ПараметрыУстановкиПометок.ЭлементыПометки.Найти(СтрокаДереваЗначений.ИдентификаторКатегорииМаркетплейса) <> Неопределено Тогда
				СтрокаДереваЗначений[ПараметрыУстановкиПометок.ИмяПоляПометки] = Истина;
				ИнтеграцияСМаркетплейсомOzonКлиентСервер.УстановитьСнятьПометки(СтрокаДереваЗначений, Истина, Ложь,
					ПараметрыУстановкиПометок.ИмяПоляПометки, ПараметрыУстановкиПометок.ИмяПоляКоличестваПомеченных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИсключеныВсеКатегории = КатегорииИТипыТоваров.Количество() > 0 И КоличествоКатегорий = 0;

КонецПроцедуры

// Определяет наименование категории и типа товаров.
//
// Параметры:
//   ИдентификаторКатегорииМаркетплейса - Строка - составной идентификатор категории и типа товаров торговой площадки.
//   КэшКатегорий                       - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   УчетнаяЗаписьМаркетплейса          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   - Строка - наименование категории и типа товаров торговой площадки.
//   - Неопределено - найти указанную категорию по идентификатору не удалось.
//                                                   
Функция ОпределитьНаименованиеКатегорииИТипаТоваров(ИдентификаторКатегорииМаркетплейса, КэшКатегорий, УчетнаяЗаписьМаркетплейса)

	Идентификаторы = СтрРазделить(ИдентификаторКатегорииМаркетплейса, "_", Ложь );
	Если Идентификаторы.Количество() < 1 Тогда
		Возврат "";
	КонецЕсли;
	Если Идентификаторы.Количество() < 2 Тогда
		Идентификаторы.Добавить("");
	КонецЕсли;
	
	НаименованиеКатегории = Неопределено;
	КатегорииИТипыТоваров = Неопределено; 
	
	Если ТипЗнч(КэшКатегорий) = Тип("Структура") Тогда
		Если КэшКатегорий.Свойство("НаименованиеКатегории_" + ИдентификаторКатегорииМаркетплейса, НаименованиеКатегории)
				И ЗначениеЗаполнено(НаименованиеКатегории) Тогда
			Возврат НаименованиеКатегории;
		КонецЕсли;
		
		КэшКатегорий.Свойство("ДеревоКатегорий", КатегорииИТипыТоваров);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КатегорииИТипыТоваров) Тогда
		ПараметрыЗапроса      = НовыеПараметрыЗапросаДереваКатегорийИТиповТоваров();
		КатегорииИТипыТоваров = ПолучитьКатегорииИТипыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);

		КэшКатегорий.Вставить("ДеревоКатегорий", КатегорииИТипыТоваров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КатегорииИТипыТоваров) Тогда
		НаименованиеКатегории = ОпределитьНаименованиеКатегорииИТипаТоваровРекурсивно(КатегорииИТипыТоваров, 
									СтрокаВЧисло(Идентификаторы[0]), "", СтрокаВЧисло(Идентификаторы[1]));
		
		Если ЗначениеЗаполнено(НаименованиеКатегории) Тогда
			КэшКатегорий.Вставить("НаименованиеКатегории_" + ИдентификаторКатегорииМаркетплейса, НаименованиеКатегории);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаименованиеКатегории;

КонецФункции

// Выполняет рекурсивный поиск по дереву категорий и типов товаров.
//
// Параметры:
//   КатегорииИТипыТоваров    - Массив Из см. НовыйРезультатИзСервиса - категории и типы для товаров в виде дерева из 
//                                сервиса Ozon. См. ПолучитьКатегорииИТипыТоваровИзСервиса.
//   ИдентификаторКатегории   - Число - идентификатор категории товаров торговой площадки.
//   НаименованиеКатегории    - Строка - наименование категории товаров верхнего уровня.
//   ИдентификаторТипаТоваров - Число - идентификатор типа товаров торговой площадки.
//   ИдентификаторРодителя    - Число - идентификатор родителя дерева категорий.
//
// Возвращаемое значение:
//   Строка - наименование категории и типа товаров торговой плоащдки. Если идентификатор типа товаров не указан, поиск
//              будет выполнен только в рамках категорий.
// 
Функция ОпределитьНаименованиеКатегорииИТипаТоваровРекурсивно(КатегорииИТипыТоваров, ИдентификаторКатегории, 
			НаименованиеКатегории, ИдентификаторТипаТоваров, ИдентификаторРодителя = 0)

	Результат = "";
	
	Для Каждого ЭлементКоллекции Из КатегорииИТипыТоваров Цикл
		Если ЭлементКоллекции["description_category_id"] <> Неопределено Тогда
			Если ЭлементКоллекции["description_category_id"] = ИдентификаторКатегории
					И Не ЗначениеЗаполнено(ИдентификаторТипаТоваров) Тогда
				Возврат ЭлементКоллекции["category_name"];
			КонецЕсли;
			
			Результат = ОпределитьНаименованиеКатегорииИТипаТоваровРекурсивно(ЭлементКоллекции["children"], 
							ИдентификаторКатегории, 
							ЭлементКоллекции["category_name"], 
							ИдентификаторТипаТоваров,
							ЭлементКоллекции["description_category_id"]);
		
		Иначе
			Если ИдентификаторРодителя = ИдентификаторКатегории
					И ЭлементКоллекции["type_id"] = ИдентификаторТипаТоваров Тогда
				Возврат НаименованиеКатегории + Символы.НПП + ">" + Символы.НПП + ЭлементКоллекции["type_name"];
			КонецЕсли;
			
			Результат = ОпределитьНаименованиеКатегорииИТипаТоваровРекурсивно(ЭлементКоллекции["children"], 
							ИдентификаторКатегории, 
							НаименованиеКатегории + Символы.НПП + ">" + Символы.НПП + ЭлементКоллекции["type_name"], 
							ИдентификаторТипаТоваров,
							ИдентификаторРодителя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Определяет постфикс неиспользуемой категории торговой площадки.
//
// Возвращаемое значение:
//   Строка - постфикс неиспользуемой категории.
//
Функция ПостфиксНеиспользуемойКатегории() Экспорт

	Возврат " " + НСтр("ru = '(Не используется)'");

КонецФункции

// Определяет постфикс устаревшей категории торговой площадки.
//
// Возвращаемое значение:
//   Строка - постфикс устаревшей категории.
//
Функция ПостфиксУстаревшейКатегории() Экспорт

	Возврат " " + НСтр("ru = '(Устарела)'");

КонецФункции

// Определяет текущую сопоставленную категорию для указанной номенклатуры.
//
// Параметры:                                                                   
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Номенклатура              - СправочникСсылка.Номенклатура - номенклатура, для которой требуется найти категорию.
//   ИдентификаторКатегории    - Строка - искомый идентификатор категории маркетплейса;
//   ИсточникКатегории         - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории из настроек 
//                                 сопоставления.
//
// Возвращаемое значение:
//   Структура - результат поиска категории:
//     * ИсточникКатегории      - СправочникСсылка.ВидыНоменклатуры - 
//                              - СправочникСсылка.Номенклатура -
//                              - СправочникСсылка.ТоварныеКатегории - источник категории 1С;
//                              - Неопределено - источник категории не найден.
//     * Категория              - СправочникСсылка.ВидыНоменклатуры - 
//                              - СправочникСсылка.Номенклатура - 
//                              - СправочникСсылка.ТоварныеКатегории - подобранная категория 1С;
//                              - Неопределено - категория не найдена.
//     * ИдентификаторКатегории - Строка - идентификатор сопоставленной категории маркетплейса.
//     * НаименованиеКатегории  - Строка - наименование сопоставленной категории маркетплейса.
//
Функция ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(УчетнаяЗаписьМаркетплейса, Номенклатура, 
			ИдентификаторКатегории, ИсточникКатегории) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсточникКатегории",      Неопределено);
	Результат.Вставить("Категория",              Неопределено);
	Результат.Вставить("ИдентификаторКатегории", "");
	Результат.Вставить("НаименованиеКатегории",  "");
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Объект1С = Неопределено;
	
	Если ИсточникКатегории = Неопределено Тогда
		ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	КонецЕсли;
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Объект1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
		Объект1С = Номенклатура;
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
		Объект1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТоварнаяКатегория");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект1С) Тогда
		Результат.Вставить("ИсточникКатегории", Объект1С);
		Результат.Вставить("Категория",         Объект1С);
		
		МассивКатегорий = Новый Массив;
		МассивКатегорий.Добавить(Объект1С);

		ВыборкаДанных = ВыборкаИсточникаКатегорииМаркетплейса(МассивКатегорий, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, Ложь, Истина);
		Пока ВыборкаДанных.Следующий() Цикл
			Если ЗначениеЗаполнено(ИдентификаторКатегории) 
				 И ВыборкаДанных.ИдентификаторОбъектаМаркетплейса = ИдентификаторКатегории Тогда
				Результат.ИсточникКатегории      = ВыборкаДанных.РодительКатегории1С;
				Результат.Категория              = ВыборкаДанных.Категория1С;
				Результат.ИдентификаторКатегории = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
				Результат.НаименованиеКатегории  = ВыборкаДанных.НаименованиеОбъектаМаркетплейса;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяет текущую сопоставленную категорию для указанного идентификатора категории маркетплейса.
//
// Параметры:                                                                   
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИсточникКатегории         - СправочникСсылка.ВидыНоменклатуры - 
//                             - СправочникСсылка.Номенклатура -
//                             - СправочникСсылка.ТоварныеКатегории - искомый источник категории 1С.
//   ИдентификаторКатегории    - Строка - идентификатор категория маркетплейса, для которого требуется найти 
//                                 сопоставление.
//
// Возвращаемое значение:
//   - Неопределено - сопоставление категорий не найдено.
//   - Структура - результат поиска категории:
//       * Категория              - Неопределено -
//                                - СправочникСсылка.ВидыНоменклатуры -
//                                - СправочникСсылка.Номенклатура -
//                                - СправочникСсылка.ТоварныеКатегории - подобранная категория 1С.
//       * ИдентификаторКатегории - Строка - идентификатор сопоставленной категории маркетплейса.
//       * НаименованиеКатегории  - Строка - наименование сопоставленной категории маркетплейса.
//
Функция ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоИдентификатору(УчетнаяЗаписьМаркетплейса, ИсточникКатегории, ИдентификаторКатегории) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Категория",              Неопределено);
	Результат.Вставить("ИдентификаторКатегории", "");
	Результат.Вставить("НаименованиеКатегории",  "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Категория,
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторКатегории,
		|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеКатегории
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
		|	И СоответствияОбъектовМаркетплейсов.Объект1С = &Объект1С
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса = &ИдентификаторОбъектаМаркетплейса";

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",        УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Объект1С",                         ИсточникКатегории);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМаркетплейса", ИдентификаторКатегории);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Неопределено;

КонецФункции

// Определяет категорию-источник, для которой выполнены настройки сопоставления.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Категория1С               - СправочникСсылка.ВидыНоменклатуры -
//                             - СправочникСсылка.Номенклатура -
//                             - СправочникСсылка.ТоварныеКатегории - категория, для которой нужно получить 
//                                 категорию-источник.
//   БлижайшийРодитель         - Булево - признак определения только по ближайшему родителю (Истина) или с учетом 
//                                 текущей категории (Ложь).
//
// Возвращаемое значение:
//   Структура - данные об источнике категории:
//     * ИсточникКатегорииМаркетплейса               - СправочникСсылка.ВидыНоменклатуры -
//                                                   - СправочникСсылка.Номенклатура -
//                                                   - СправочникСсылка.ТоварныеКатегории - источник категории;
//                                                   - Неопределено - источник категории не найден.
//     * ИдентификаторИсточникаКатегорииМаркетплейса - Строка - идентификатор источника категории.
//     * НаименованиеИсточникаКатегорииМаркетплейса  - Строка - наименование источника категории.
//
Функция ПолучитьТекущийИсточникКатегорииМаркетплейса(УчетнаяЗаписьМаркетплейса, Категория1С, БлижайшийРодитель = Истина) Экспорт

	ДанныеИсточникаКатегорииМаркетплейса = Новый Структура;
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("ИсточникКатегорииМаркетплейса",               Неопределено);
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса", "");
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("НаименованиеИсточникаКатегорииМаркетплейса",  "");

	Если ЗначениеЗаполнено(Категория1С) Тогда
		ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
		МассивКатегорий = Новый Массив;
		МассивКатегорий.Добавить(Категория1С);

		ВыборкаДанных = ВыборкаИсточникаКатегорииМаркетплейса(МассивКатегорий, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, БлижайшийРодитель, Ложь);

		Если ВыборкаДанных.Следующий() Тогда
			ДанныеИсточникаКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса               = ВыборкаДанных.РодительКатегории1С;
			ДанныеИсточникаКатегорииМаркетплейса.ИдентификаторИсточникаКатегорииМаркетплейса = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
			ДанныеИсточникаКатегорииМаркетплейса.НаименованиеИсточникаКатегорииМаркетплейса  = ВыборкаДанных.НаименованиеОбъектаМаркетплейса;
		КонецЕсли;
	КонецЕсли;

	Возврат ДанныеИсточникаКатегорииМаркетплейса;

КонецФункции

// Возвращает выборку результата запроса, содержащую категорию-источник для категории маркетплейса.
//
// Параметры:
//   Категории                 - Массив Из СправочникСсылка.ВидыНоменклатуры -
//                             - Массив Из СправочникСсылка.Номенклатура -
//                             - Массив Из СправочникСсылка.ТоварныеКатегории - категории, для которых нужно получить 
//                                 категорию-источник.
//   ИсточникКатегории         - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории из настроек 
//                                 сопоставления.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   БлижайшийРодитель         - Булево - признак определения только по ближайшему родителю (Истина) или с учетом 
//                                 текущей категории (Ложь).
//   ВсеРодители               - Булево - признак определения по всем родителям.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - итоговая выборка результата запроса.
//
Функция ВыборкаИсточникаКатегорииМаркетплейса(Категории, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, 
			БлижайшийРодитель = Истина, ВсеРодители = Ложь) Экспорт

	ЧастиТекстаЗапроса = СоставныеЧастиТекстаЗапросаПолученияКатегорииМаркетплейса(ИсточникКатегории, 
							БлижайшийРодитель, 
							Не БлижайшийРодитель И ВсеРодители);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Категории", Категории);
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст = ЧастиТекстаЗапроса.Пролог + ЧастиТекстаЗапроса.Разделитель + ЧастиТекстаЗапроса.Рефрен;

	Инд = 2;
	Пока Истина Цикл
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
			"ТаблицаАнализа" + Формат(Инд, "ЧГ="),
			"ТаблицаАнализа" + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
			"ТаблицаАнализа" + Формат(Инд - 1, "ЧГ="),
			"ТаблицаАнализа" + Формат(Инд, "ЧГ="));

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
			"ТаблицаАнализа.НомерИтерации = " + Формат(Инд, "ЧГ="),
			"ТаблицаАнализа.НомерИтерации = " + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
			"ТаблицаАнализа.НомерИтерации = " + Формат(Инд - 1, "ЧГ="),
			"ТаблицаАнализа.НомерИтерации = " + Формат(Инд, "ЧГ="));

		Запрос.Текст = ЧастиТекстаЗапроса.Рефрен;
		Инд = Инд + 1;
	КонецЦикла;

	ЧастиТекстаЗапроса.Эпилог = СтрЗаменить(ЧастиТекстаЗапроса.Эпилог, "ТаблицаАнализа2", "ТаблицаАнализа" + Формат(Инд, "ЧГ="));
	Запрос.Текст = ЧастиТекстаЗапроса.Эпилог;
	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Возврат ВыборкаДанных;

КонецФункции

Функция СоставныеЧастиТекстаЗапросаПолученияКатегорииМаркетплейса(ИсточникКатегории, БлижайшийРодитель = Истина, 
			ВсеРодители = Ложь)

	ЧастиТекстаЗапроса = Новый Структура;

	Пролог =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК НомерИтерации,
		|	ИсточникДанных.Ссылка КАК Категория1С,
		|	ИсточникДанных.Ссылка КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ТаблицаАнализа1
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ИсточникДанных.Ссылка = СоответствияОбъектовМаркетплейсов.Объект1С
		|ГДЕ
		|	ИсточникДанных.Ссылка В(&Категории)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса ЕСТЬ NULL";
	
	Если Не БлижайшийРодитель Тогда
		Пролог = СтрЗаменить(Пролог, "И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса ЕСТЬ NULL", "");
	КонецЕсли;
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.ВидыНоменклатуры");
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.ТоварныеКатегории");
	Иначе
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.Номенклатура");
	КонецЕсли;

	ЧастиТекстаЗапроса.Вставить("Пролог", Пролог);

	ЧастиТекстаЗапроса.Вставить("Разделитель",	"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	Рефрен =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ТаблицаАнализа.НомерИтерации + 1 КАК НомерИтерации,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С.Родитель КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ТаблицаАнализа2
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.РодительКатегории1С.Родитель = СоответствияОбъектовМаркетплейсов.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.НомерИтерации = 1
		|	И ТаблицаАнализа.РодительКатегории1С.Родитель <> &ПустаяСсылка
		|	И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ                              
		|	ТаблицаАнализа.НомерИтерации КАК НомерИтерации,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С КАК Категория1С
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.НомерИтерации = 2
		|	И ТаблицаАнализа.РодительКатегории1С.Родитель <> &ПустаяСсылка
		|	И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"";
	
	Если ВсеРодители Тогда
		Рефрен = СтрЗаменить(Рефрен, "И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"", "");
	КонецЕсли;
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Рефрен = СтрЗаменить(Рефрен, "&ПустаяСсылка", "ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)");
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
		Рефрен = СтрЗаменить(Рефрен, "&ПустаяСсылка", "ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)");
	Иначе
		Рефрен = СтрЗаменить(Рефрен, "&ПустаяСсылка", "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	КонецЕсли;

	ЧастиТекстаЗапроса.Вставить("Рефрен", Рефрен);
	
	ЧастиТекстаЗапроса.Вставить("Эпилог",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса <> """"
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаАнализа.НомерИтерации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа2");

	Возврат ЧастиТекстаЗапроса;

КонецФункции

Функция СопоставленныеКатегории1С(ИдентификаторКатегорииМаркетплейса, УчетнаяЗаписьМаркетплейса)

	МассивКатегорий1С = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ИдентификаторКатегорииМаркетплейса", ИдентификаторКатегорииМаркетплейса);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Категория1С
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса = &ИдентификаторКатегорииМаркетплейса";
	ВыборкаКатегорий1С = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКатегорий1С.Следующий() Цикл
		МассивКатегорий1С.Добавить(ВыборкаКатегорий1С.Категория1С);
	КонецЦикла;

	Если МассивКатегорий1С.Количество() = 0 Тогда
		МассивКатегорий1С.Добавить(НСтр("ru = 'Нет данных сопоставления'"));
	КонецЕсли;

	Возврат МассивКатегорий1С;

КонецФункции

// Проверяет наличие в информационной базе устаревших категорий торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ОграничениеСписка         - Число - ограничить возвращаемый список указанным количеством позиций.
// 
// Возвращаемое значение:
//   Структура - сведения об устаревших категориях торговой площадки:
//     * Ошибка              - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * УстаревшиеКатегории - Массив Из Строка - идентификаторы устаревших категорий.
//
Функция ОпределитьУстаревшиеКатегории(УчетнаяЗаписьМаркетплейса, ОграничениеСписка = 100) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Ошибка",              ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("УстаревшиеКатегории", Новый Массив);
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При определении устаревших категорий торговой площадки возникли ошибки. Не указана учетная запись торговой площадки.'");
		Возврат Результат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
			|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> """"
			|	И НЕ СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса ПОДОБНО ""%~_%"" СПЕЦСИМВОЛ ""~""";
		
		Если Не ЗначениеЗаполнено(ОграничениеСписка) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 100", "");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 100", "ПЕРВЫЕ " + Формат(ОграничениеСписка, "ЧДЦ=0; ЧГ="));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		
		Результат.УстаревшиеКатегории = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторОбъектаМаркетплейса");
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Отказ Тогда
		Результат.Ошибка.КодОшибки		= КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При определении устаревших категорий торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КатегорииSellerAPI

// Получает категории и типы для товаров в виде дерева из сервиса Ozon. 
// Создание товаров доступно только в категориях последнего уровня, сравните именно их с категориями на своей площадке.
// Категории не создаются по запросу пользователя.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_GetTree (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаДереваКатегорийИТиповТоваров.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса:
//       * description_category_id - Число - идентификатор категории.
//       * category_name           - Строка - название категории.
//       * children                - Массив Из см. НовыйРезультатИзСервиса - дерево подкатегорий.
//       * disabled                - Булево - Истина, если в категории нельзя создавать товары; Ложь, если можно.
//       * type_id                 - Число - идентификатор типа товара.
//       * type_name               - Строка - название типа товара.
//
Функция ПолучитьКатегорииИТипыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/description-category/tree";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("language", Параметры.ЯзыкВОтвете);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);
	
	Возврат РезультатЗапроса.Результат;

КонецФункции

#КонецОбласти

#Область АтрибутыКатегорииСлужебный

// Заполняет таблицу атрибутов категории значениями из сервиса.
//
// Параметры:
//   ТаблицаАтрибутов - ТаблицаЗначений - данные об атрибутах категории, см. НоваяТаблицаАтрибутовКатегорииМаркетплейса.
//   ОтветСервиса     - Массив Из см. НовыйРезультатИзСервиса - характеристики (атрибуты) категории из сервиса Ozon,
//                        см. ПолучитьАтрибутыКатегорииИзСервиса.
//
Процедура ДобавитьОтветСервисаВТаблицуАтрибутовКатегории(ТаблицаАтрибутов, ОтветСервиса)

	СоответствиеТипов = НовоеСоответствиеТипов();
	ИсключитьАтрибуты = НовыеИсключаемыеАтрибуты();
	
	ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл 
		Если ИсключитьАтрибуты.Найти(ЧислоВСтроку(ЭлементОтветаСервиса["id"])) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 										  = ТаблицаАтрибутов.Добавить();
		НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["group_id"]);
		НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = ЭлементОтветаСервиса["group_name"];
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса		  = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
		НоваяСтрока.НаименованиеАтрибутаМаркетплейса		  = ЭлементОтветаСервиса["name"];
		НоваяСтрока.ОписаниеНазначенияАтрибута				  = ЭлементОтветаСервиса["description"];
		НоваяСтрока.ОбязательныйАтрибут						  = ЭлементОтветаСервиса["is_required"];
		НоваяСтрока.АспектныйАтрибут						  = ЭлементОтветаСервиса["is_aspect"];
		НоваяСтрока.ЯвляетсяКоллекциейЗначений				  = ЭлементОтветаСервиса["is_collection"];
		НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = (ЭлементОтветаСервиса["dictionary_id"] > 0);
		НоваяСтрока.МаксимальноеКоличествоЗначений			  = ЭлементОтветаСервиса["max_value_count"];
		НоваяСтрока.ТипЗначенияАтрибута						  = НРег(ЭлементОтветаСервиса["type"]);
		НоваяСтрока.ТипЗначенияАтрибута1С					  = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
		НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = ОпределитьНомерКартинкиКоллекцииТипов(
																	НоваяСтрока.ТипЗначенияАтрибута, 
																	НоваяСтрока.ТипЗначенияАтрибута1С,
																	НоваяСтрока.ЯвляетсяКоллекциейЗначений,
				 													НоваяСтрока.ДоступенВыборЗначенияИзСписка);
		НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
		НоваяСтрока.ПорядокСортировки 						  = 1;
		
		Если НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
			НоваяСтрока.ОбязательныйАтрибут = Истина;
		КонецЕсли;
	КонецЦикла;

	ДополнитьВесогабаритнымиХарактеристикамиУпаковки(ТаблицаАтрибутов);

КонецПроцедуры

// Получает данные по атрибутам категории и типа товаров.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                          к сервису.
//   ИдентификаторКатегорииМаркетплейса - Строка - составной идентификатор категории и типа товаров маркетплейса.
//   Отказ                              - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов
//                                          к сервису.
// 
// Возвращаемое значение:
//   См. НоваяТаблицаАтрибутовКатегорииМаркетплейса. 
//
Функция ПолучитьАтрибутыКатегории(УчетнаяЗаписьМаркетплейса, Знач ИдентификаторКатегорииМаркетплейса, Отказ = Ложь)

	ТаблицаАтрибутов = НоваяТаблицаАтрибутовКатегорииМаркетплейса();
	ТаблицаАтрибутов.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1)));
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаАтрибутовКатегории(ИдентификаторКатегорииМаркетплейса);
	ОтветСервиса     = ПолучитьАтрибутыКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);

	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
	Иначе
		ДобавитьОтветСервисаВТаблицуАтрибутовКатегории(ТаблицаАтрибутов, ОтветСервиса);
		
		ТаблицаАтрибутов.ЗаполнитьЗначения(УчетнаяЗаписьМаркетплейса, "УчетнаяЗаписьМаркетплейса");
		ТаблицаАтрибутов.ЗаполнитьЗначения(ИдентификаторКатегорииМаркетплейса, "ИдентификаторКатегорииМаркетплейса");
		
		ТаблицаАтрибутов.Сортировать("ПорядокСортировки, ЗаполненРодитель УБЫВ, НаименованиеРодителяАтрибутаМаркетплейса, ОбязательныйАтрибут УБЫВ, НаименованиеАтрибутаМаркетплейса");
		ТаблицаАтрибутов.Колонки.Удалить("ПорядокСортировки");
	КонецЕсли;
	
	Возврат ТаблицаАтрибутов;

КонецФункции

// Конструктор идентификаторов служебных атрибутов.
// 
// Возвращаемое значение:
//   Массив Из Строка - идентификаторы служебных атрибутов.
//
Функция НовыеСлужебныеАтрибуты()

	Результат = Новый Массив;
	Результат.Добавить("weight_unit");
	Результат.Добавить("weight");
	Результат.Добавить("dimension_unit");
	Результат.Добавить("depth");
	Результат.Добавить("height");
	Результат.Добавить("width"); 

	Возврат Результат;

КонецФункции

// Конструктор исключаемых из обработки атрибутов.
// 
// Возвращаемое значение:
//   Массив Из Строка - идентификаторы исключаемых атрибутов.
//
Функция НовыеИсключаемыеАтрибуты()

	Результат = Новый Массив;
	Результат.Добавить(ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_Изображение"]);

	Возврат Результат;

КонецФункции

// Конструктор идентификаторов и наименований служебных атрибутов.
// 
// Возвращаемое значение:
//   Массив Из Структура - служебные атрибуты:
//     * Идентификатор - Строка - идентификатор служебного атрибута.
//     * Наименование  - Строка - наименование служебного атрибута.
//
Функция НовыеСлужебныеАтрибутыСНаименованиями()

	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "weight_unit",    НСтр("ru = 'Единица измерения веса'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "weight",         НСтр("ru = 'Вес товара в упаковке'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "dimension_unit", НСтр("ru = 'Единица измерения габаритов'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "depth",          НСтр("ru = 'Глубина упаковки'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "height",         НСтр("ru = 'Высота упаковки'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "width",          НСтр("ru = 'Ширина упаковки'")));

	Возврат Результат;

КонецФункции

// Дополняет таблицу данных служебными атрибутами категорий. 
// Идентификаторы служебных атрибутов см. в методе НовыеСлужебныеАтрибуты(). 
//
// Параметры:  
//   ТаблицаАтрибутов - ТаблицаЗначений - таблица атрибутов, см. НоваяТаблицаАтрибутовКатегорииМаркетплейса.
//
Процедура ДополнитьВесогабаритнымиХарактеристикамиУпаковки(ТаблицаАтрибутов)

	// Единица измерения веса
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "weight_unit";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Единица измерения веса'");
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.АспектныйАтрибут						  = Ложь;
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Истина; // г, кг, фунты
	НоваяСтрока.МаксимальноеКоличествоЗначений			  = 0;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "string";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Строка";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 8; // в коллекции это тип Строка;

	// Вес товара в упаковке
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "weight";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Вес товара в упаковке'");
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = НСтр("ru = 'Предельное значение - 1000 килограммов или конвертированная величина в других единицах измерения.'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.АспектныйАтрибут						  = Ложь;
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.МаксимальноеКоличествоЗначений			  = 0;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

	// Единица измерения габаритов
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "dimension_unit";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Единица измерения габаритов'");
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.АспектныйАтрибут						  = Ложь;
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Истина; // мм, см, дюйм
	НоваяСтрока.МаксимальноеКоличествоЗначений			  = 0;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "string";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Строка";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 8; // в коллекции это тип Строка;

	// Глубина упаковки
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "depth";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Глубина упаковки'");
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.АспектныйАтрибут						  = Ложь;
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.МаксимальноеКоличествоЗначений			  = 0;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

	// Высота упаковки
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "height";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Высота упаковки'");
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.АспектныйАтрибут						  = Ложь;
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.МаксимальноеКоличествоЗначений			  = 0;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

	// Ширина упаковки
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "width";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Ширина упаковки'");
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.АспектныйАтрибут						  = Ложь;
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.МаксимальноеКоличествоЗначений			  = 0;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

КонецПроцедуры

// Получает значения атрибута, включая служебные.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ПараметрыЗапроса          - Структура - список параметров, см. НовыеПараметрыЗапросаЗначенийАтрибута.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаЗначенийАтрибутаКатегории.
//
Функция ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, Отказ = Ложь)

	ТаблицаЗначенийАтрибута = НоваяТаблицаЗначенийАтрибутаКатегории();

	Если ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "weight_unit"
			Или ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "СлужебныеАтрибуты" Тогда
		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "weight_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "g";
		НоваяСтрока.ЗначениеАтрибута 				   = "грамм";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "weight_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "kg";
		НоваяСтрока.ЗначениеАтрибута 				   = "килограмм";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "weight_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "lb";
		НоваяСтрока.ЗначениеАтрибута 				   = "фунт";
	КонецЕсли;
	
	Если ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "dimension_unit" 
			Или ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "СлужебныеАтрибуты" Тогда
		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "dimension_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "mm";
		НоваяСтрока.ЗначениеАтрибута 				   = "миллиметр";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "dimension_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "cm";
		НоваяСтрока.ЗначениеАтрибута 				   = "сантиметр";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "dimension_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "in";
		НоваяСтрока.ЗначениеАтрибута 				   = "дюйм";
	КонецЕсли;
	
	Если ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса <> "weight_unit"
			И ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса <> "dimension_unit" 
			И ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса <> "СлужебныеАтрибуты" Тогда
		Пока Истина Цикл
			ОтветСервиса = ПолучитьЗначенияАтрибутаКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			Иначе
				Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
					НоваяСтрока 								    = ТаблицаЗначенийАтрибута.Добавить();
					НоваяСтрока.УчетнаяЗаписьМаркетплейса           = УчетнаяЗаписьМаркетплейса;
					НоваяСтрока.ИдентификаторКатегорииМаркетплейса  = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
					НоваяСтрока.ИдентификаторАтрибутаМаркетплейса   = ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса;
					НоваяСтрока.ИдентификаторЗначенияАтрибута       = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
					НоваяСтрока.ЗначениеАтрибута 				    = ЭлементОтветаСервиса["value"];
					НоваяСтрока.ОписаниеЗначенияАтрибута 			= ЭлементОтветаСервиса["info"];
					НоваяСтрока.АдресИзображенияДляЗначенияАтрибута = ЭлементОтветаСервиса["picture"];
					
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ЭлементОтветаСервиса["id"];
				КонецЦикла;

				Если Не ОтветСервиса.Продолжить 
						Или ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ТаблицаЗначенийАтрибута.Сортировать("ЗначениеАтрибута Возр");
	КонецЕсли;

	Возврат ТаблицаЗначенийАтрибута;

КонецФункции

// Конструктор списка свойств объединения товаров в одну карточку.
// 
// Возвращаемое значение:
//   Структура - список свойств:
//     * ДоступноОбъединениеТоваровВОднуКарточку - Булево - Истина, если объединение доступно.
//     * ИдентификаторАтрибута                   - Строка - идентификатор атрибута.
//     * НаименованиеАтрибута                    - Строка - наименование атрибута.
//     * ОбязательныйАтрибут                     - Булево - признак обязательной атрибута.
//     * ТипЗначенияАтрибута                     - Строка - тип значения характеристики.
//     * ТипЗначенияАтрибута1С                   - Строка - тип значения характеристики в 1С.
//     * ОписаниеНазначенияАтрибута              - Строка - описание назначения атрибута.
//     * Реквизит1С                              - Строка - путь к реквизиту 1С.
//     * ПредставлениеРеквизита1С                - Строка - пользовательское представление пути к реквизиту 1С.
//     * ЗначениеРеквизита1С                     - Неопределено - 
//                                               - Произвольный - значение реквизита 1С.
//     * ИзменилсяРеквизит1С                     - Булево - признак изменения реквизита информационной базы.
//     * КэшЗначениеРеквизита1С                  - Неопределено - 
//                                               - Произвольный - кэш значений реквизита 1С.
//
Функция НовыйСписокСвойствОбъединенияТоваровВОднуКарточку()

	СвойстваОбъединенияТоваровВОднуКарточку = Новый Структура; 
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ДоступноОбъединениеТоваровВОднуКарточку", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ИдентификаторАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("НаименованиеАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ОбязательныйАтрибут", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ТипЗначенияАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ТипЗначенияАтрибута1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ОписаниеНазначенияАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("Реквизит1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ПредставлениеРеквизита1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ЗначениеРеквизита1С", Неопределено);			// Произвольный
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ИзменилсяРеквизит1С", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("КэшЗначениеРеквизита1С", Неопределено);		// Произвольный

	Возврат СвойстваОбъединенияТоваровВОднуКарточку;

КонецФункции

// Возвращает пустой список параметров.
// 
// Возвращаемое значение:
//   Структура - список параметров.
//
Функция ПараметрыДляЗаполненияАтрибутовКатегории() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ВариантОтображенияАтрибутов", "Все");
	Параметры.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	Параметры.Вставить("ИсточникКатегорииМаркетплейса", Неопределено);
	Параметры.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса", "");
	Параметры.Вставить("СоответствиеПсевдонимовМетаданных", Новый Структура);
	Параметры.Вставить("ПоляСхемыКомпоновкиДанных", Новый Массив);

	Возврат Параметры;

КонецФункции

Функция ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров()

	ДанныеПроверки = Новый Массив;
	ДанныеПроверки.Добавить("Объединить_на_одной_карточке");
	ДанныеПроверки.Добавить("Combine_into_One_PDP");

	Возврат ДанныеПроверки;

КонецФункции

// Заполняет атрибуты категории.
//
// Параметры:
//   Параметры                 - См. ПараметрыДляЗаполненияАтрибутовКатегории.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ДеревоАтрибутов           - ДеревоЗначений - дерево атрибутов.
//   ДанныеКэша                - Неопределено - 
//                             - Массив Из Структура - список данных из кэша клиентского приложения,
//                                 см. НоваяТаблицаАтрибутовКатегорииМаркетплейса.
// 
// Возвращаемое значение:
//   Структура - данные об атрибутах категории:
//     * СвойстваОбъединенияТоваровВОднуКарточку - См. НовыйСписокСвойствОбъединенияТоваровВОднуКарточку.
//     * ДеревоАтрибутов                         - ДеревоЗначений - заполненное дерево атрибутов.
//     * ДанныеКэша                              - Неопределено - 
//                                               - Массив Из Структура - кэш клиентского приложения, 
//                                                   см. НоваяТаблицаАтрибутовКатегорииМаркетплейса.
//     * ТекстОшибки                             - Строка - описание ошибки.
//
Функция ЗаполнитьДанныеАтрибутовКатегории(Параметры, УчетнаяЗаписьМаркетплейса, ДеревоАтрибутов, 
			ДанныеКэша = Неопределено) Экспорт

	ТекстыОшибок = Новый Массив;

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		Отказ            = Ложь;
		ТаблицаАтрибутов = ПолучитьАтрибутыКатегории(УчетнаяЗаписьМаркетплейса, Параметры.ИдентификаторКатегорииМаркетплейса, Отказ);
		
		Если Не Отказ И ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
			ТаблицаАтрибутов = Неопределено;
		Иначе
			Если СтрНайти(Параметры.ИдентификаторКатегорииМаркетплейса, "_") > 0 Тогда
				ТекстыОшибок.Добавить(НСтр("ru = 'Не удалось получить атрибуты выбранной категории из сервиса по причине: ошибка выполнения запроса. Подробнее см. журнал регистрации.'"));
			КонецЕсли;
			ДанныеКэша = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	// Данные из регистра сведений "Соответствия атрибутов маркетплейса".
	ДанныеСоответствияАтрибутовКатегории = ПолучитьДанныеСоответствияАтрибутовКатегории(
		Параметры.ИдентификаторКатегорииМаркетплейса,
		Параметры.ИсточникКатегорииМаркетплейса, 
		УчетнаяЗаписьМаркетплейса);
		
	Если СтрНайти(Параметры.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
		ДанныеСоответствияАтрибутовКатегории.Очистить();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеКэша) Тогда
		ДанныеАтрибутов = ДанныеСоответствияАтрибутовКатегории;
	Иначе
		ДанныеАтрибутов = ДанныеКэша;
	КонецЕсли;

	СоответствиеТипов = НовоеСоответствиеТипов();
	СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

	МассивЗначенийПроверки = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();

	// Получение данных по доступным полям компоновщика, из которых был выбран реквизит 1С.
	Результат = СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Параметры.ПоляСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
	АдресСхемыАтрибутов = Результат.АдресСхемы;

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыАтрибутов));
	ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	УдалитьИзВременногоХранилища(АдресСхемыАтрибутов);

	ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута = (ДеревоАтрибутов.Колонки.Найти("КоличествоЗначений1СВсего") <> Неопределено);
	ИдентификаторАтрибута_ТНВЭД = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];

	// Заполнение дерева атрибутов категории.
	Для Каждого ДанныеАтрибута Из ДанныеАтрибутов Цикл
		Если МассивЗначенийПроверки.Найти(СтрЗаменить(ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса, " ", "_")) <> Неопределено Тогда
			СвойстваОбъединенияТоваровВОднуКарточку.ДоступноОбъединениеТоваровВОднуКарточку = Истина;
			СвойстваОбъединенияТоваровВОднуКарточку.ИдентификаторАтрибута = ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.НаименованиеАтрибута = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.ОбязательныйАтрибут = ДанныеАтрибута.ОбязательныйАтрибут;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута = ДанныеАтрибута.ТипЗначенияАтрибута;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута);
			СвойстваОбъединенияТоваровВОднуКарточку.ОписаниеНазначенияАтрибута = ДанныеАтрибута.ОписаниеНазначенияАтрибута;

			ЗаписьСоответствия = ДанныеСоответствияАтрибутовКатегории.Найти(
				ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, 
				"ИдентификаторАтрибутаМаркетплейса");

			Если ЗаписьСоответствия <> Неопределено Тогда
				ЗаписьСоответствия.Используется = Истина;

				СвойстваОбъединенияТоваровВОднуКарточку.Реквизит1С = ЗаписьСоответствия.Реквизит1С;
				СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С = ЗаписьСоответствия.ПредставлениеРеквизита1С;

				СообщениеОбОшибке = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(
					ЗаписьСоответствия.Реквизит1С,
					ЗаписьСоответствия.ПредставлениеРеквизита1С, 
					ДоступныеПоляВыбора);

				Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
					ТекстыОшибок.Добавить(СообщениеОбОшибке + " "
						+ НСтр("ru = 'Реквизит не используется при заполнении атрибутов товара. Необходимо выбрать другой реквизит или переименовать текущий в форме списка дополнительных реквизитов / сведений и перевыбрать его.'"));
				КонецЕсли;
				
			ИначеЕсли ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, ЗаписьСоответствия) Тогда	
				ЗаписьСоответствия.Свойство("Реквизит1С", СвойстваОбъединенияТоваровВОднуКарточку.Реквизит1С);
				ЗаписьСоответствия.Свойство("ПредставлениеРеквизита1С", СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С);
			КонецЕсли;

			Если ЗаписьСоответствия = Неопределено 
					И (ДанныеАтрибута.ОбязательныйАтрибут 
						Или ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТНВЭД)
					И ЗначениеЗаполнено(Параметры.ИсточникКатегорииМаркетплейса) Тогда
				// Добавление записи в регистр соответствия атрибутов.
				МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеАтрибута);
				Если ТипЗнч(ДанныеАтрибута.ЗначениеПоУмолчанию) = Тип("Строка") Тогда
					МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = ДанныеАтрибута.ЗначениеПоУмолчанию;
				Иначе
					МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = "";
				КонецЕсли;
				МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
				МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
				МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
				МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать();
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		Если Параметры.ВариантОтображенияАтрибутов = "Основные"
					И Не ДанныеАтрибута.ОбязательныйАтрибут
				Или Параметры.ВариантОтображенияАтрибутов = "Дополнительные"
					И ДанныеАтрибута.ОбязательныйАтрибут Тогда 
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Родитель = ДеревоАтрибутов.Строки.Найти(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса,
					"ИдентификаторАтрибутаМаркетплейса", Ложь);

			Если Родитель = Неопределено Тогда
				Родитель = ДеревоАтрибутов.Строки.Добавить();
				Родитель.ИдентификаторКатегорииМаркетплейса = ДанныеАтрибута.ИдентификаторКатегорииМаркетплейса;
				Родитель.ИдентификаторАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;
				Родитель.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				Родитель.НомерКартинкиКоллекцииТипов = 99;
				Родитель.Уровень = 0;
			КонецЕсли;
		Иначе
			Родитель = ДеревоАтрибутов;
		КонецЕсли;

		НоваяСтрока = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута);
		НоваяСтрока.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
		НоваяСтрока.Уровень = 3;

		Если НоваяСтрока.ЯвляетсяКоллекциейЗначений И НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Коллекция значений из списка>'");
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = НСтр("ru = '<Значение из списка>'");
		ИначеЕсли НоваяСтрока.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<Коллекция значений типа %1>'"), 
				ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С));
		ИначеЕсли НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Значение из списка>'");
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = НСтр("ru = '<Значение из списка>'");
		Иначе
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = "<" + ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = "<" + ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
		КонецЕсли;

		ЗаписьСоответствия = ДанныеСоответствияАтрибутовКатегории.Найти(
			НоваяСтрока.ИдентификаторАтрибутаМаркетплейса, 
			"ИдентификаторАтрибутаМаркетплейса");

		Если ЗаписьСоответствия <> Неопределено Тогда
			ЗаписьСоответствия.Используется = Истина;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьСоответствия, , "ТипЗначенияАтрибута");

			СообщениеОбОшибке = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(
				ЗаписьСоответствия.Реквизит1С,
				ЗаписьСоответствия.ПредставлениеРеквизита1С, 
				ДоступныеПоляВыбора);

			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				ТекстыОшибок.Добавить(СообщениеОбОшибке + " "
					+ НСтр("ru = 'Реквизит не используется при заполнении атрибутов товара. Необходимо выбрать другой реквизит или переименовать текущий в форме списка дополнительных реквизитов / сведений и перевыбрать его.'"));
			КонецЕсли;
			
		ИначеЕсли ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, ЗаписьСоответствия) Тогда
			ПорядокСортировки = 0;
			ЗаписьСоответствия.Свойство("ПорядокСортировки", ПорядокСортировки);
			НоваяСтрока.ПорядокСортировки = ?(ПорядокСортировки = 0, НоваяСтрока.ПорядокСортировки, ПорядокСортировки);
			ЗаписьСоответствия.Свойство("Реквизит1С", НоваяСтрока.Реквизит1С);
			ЗаписьСоответствия.Свойство("ПредставлениеРеквизита1С", НоваяСтрока.ПредставлениеРеквизита1С);
			ЗаписьСоответствия.Свойство("ИдентификаторОбъектаМетаданных1С", НоваяСтрока.ИдентификаторОбъектаМетаданных1С);
			ЗаписьСоответствия.Свойство("ИдентификаторЗначенияПоУмолчанию", НоваяСтрока.ЗначениеПоУмолчаниюИдентификатор);
			ЗаписьСоответствия.Свойство("ЗначениеПоУмолчанию", НоваяСтрока.ЗначениеПоУмолчанию);

			// Добавление записи в регистр соответствия атрибутов.
			Если ЗначениеЗаполнено(Параметры.ИсточникКатегорииМаркетплейса) Тогда
				МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока); 
				Если ТипЗнч(НоваяСтрока.ЗначениеПоУмолчанию) = Тип("Строка") Тогда
					МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = НоваяСтрока.ЗначениеПоУмолчанию;
				Иначе
					МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = "";
				КонецЕсли;
				МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
				МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
				МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
				МенеджерЗаписи.ПолныйПутьКРеквизиту1С = НоваяСтрока.Реквизит1С;
				МенеджерЗаписи.ИдентификаторЗначенияПоУмолчанию = НоваяСтрока.ЗначениеПоУмолчаниюИдентификатор;
				МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		ИначеЕсли (НоваяСтрока.ОбязательныйАтрибут 
						Или НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТНВЭД)
					И ЗначениеЗаполнено(Параметры.ИсточникКатегорииМаркетплейса) Тогда

			// Добавление записи в регистр соответствия атрибутов.
			МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока);
			Если ТипЗнч(НоваяСтрока.ЗначениеПоУмолчанию) = Тип("Строка") Тогда
				МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = НоваяСтрока.ЗначениеПоУмолчанию;
			Иначе
				МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = "";
			КонецЕсли;
			МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
			МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
			МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Реквизит1С) Тогда
			ПолеПоРеквизиту1С = ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(НоваяСтрока.Реквизит1С));

			Если ПолеПоРеквизиту1С <> Неопределено Тогда
				НоваяСтрока.ТипЗначенияРеквизита1С = ПолеПоРеквизиту1С.ТипЗначения;
			КонецЕсли;
		КонецЕсли;

		Если ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута Тогда
			ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(НоваяСтрока, УчетнаяЗаписьМаркетплейса, Параметры.СоответствиеПсевдонимовМетаданных);
		КонецЕсли;
	КонецЦикла;

	// Удаление атрибутов, отсутствующих в ответе метода API.
	Отбор = Новый Структура;
	Отбор.Вставить("Используется", Ложь);
	Если Параметры.ВариантОтображенияАтрибутов = "Основные" Тогда
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
	ИначеЕсли Параметры.ВариантОтображенияАтрибутов = "Дополнительные" Тогда
		Отбор.Вставить("ОбязательныйАтрибут", Ложь);
	КонецЕсли;

	УдаляемыеЗаписиСоответствия = ДанныеСоответствияАтрибутовКатегории.НайтиСтроки(Отбор);
	Для Каждого СтрокаСоответствия Из УдаляемыеЗаписиСоответствия Цикл
		МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаСоответствия, "ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
		Если ТипЗнч(СтрокаСоответствия.ЗначениеПоУмолчанию) = Тип("Строка") Тогда
			МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = СтрокаСоответствия.ЗначениеПоУмолчанию;
		Иначе
			МенеджерЗаписи.ЗначениеПоУмолчаниюСтрока = "";
		КонецЕсли;
		МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
		МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
		МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
		МенеджерЗаписи.Удалить();
	КонецЦикла;

	ДеревоАтрибутов.Строки.Сортировать("Уровень, ОбязательныйАтрибут Убыв, ПорядокСортировки, НаименованиеАтрибутаМаркетплейса", Истина);

	Если Не ЗначениеЗаполнено(ДанныеКэша) И ДеревоАтрибутов.Строки.Количество() > 0 Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Заполнение атрибутов выполнено из сохраненных настроек.'"));
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("СвойстваОбъединенияТоваровВОднуКарточку", СвойстваОбъединенияТоваровВОднуКарточку);
	Результат.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);
	Результат.Вставить("ТекстОшибки", СтрСоединить(ТекстыОшибок, Символы.ПС));

	Возврат Результат;

КонецФункции

// Заполняет информацию по атрибутам категории.
//
// Параметры:
//   Параметры                                   - Структура:
//     * ИдентификаторКатегорииМаркетплейса        - Строка - идентификатор категории торговой площадки.
//     * НаименованиеКатегорииМаркетплейса         - Строка - наименование категории торговой площадки.
//     * НаименованиеРодителяКатегорииМаркетплейса - Строка - наименование родителя категории торговой площадки.
//   УчетнаяЗаписьМаркетплейса                   - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись 
//                                                   подключения к сервису.
//   ДанныеКэша                                  - Неопределено - 
//                                               - Массив Из см. НовыйРезультатИзСервиса - список данных из кэша 
//                                                   клиентского приложения, из переменной ПараметрыПриложения общего 
//                                                   модуля управляемого приложения.
//
// Возвращаемое значение:
//   Структура:
//     * ТабличныйДокумент                     - ТабличныйДокумент - описание атрибутов категории.
//     * ИнформацияОСопоставленныхКатегориях1С - Строка - список сопоставленных категорий 1С.
//     * ДанныеКэша                            - Неопределено - 
//                                             - Массив Из см. НовыйРезультатИзСервиса - кэш клиентского приложения.
//
Функция ЗаполнитьИнформациюПоАтрибутамКатегории(Параметры, УчетнаяЗаписьМаркетплейса, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		Отказ            = Ложь;
		ТаблицаАтрибутов = ПолучитьАтрибутыКатегории(УчетнаяЗаписьМаркетплейса, Параметры.ИдентификаторКатегорииМаркетплейса, Отказ);
		
		Если Не Отказ И ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
			ТаблицаАтрибутов.Сортировать("ЗаполненРодитель УБЫВ, НаименованиеРодителяАтрибутаМаркетплейса ВОЗР,
				|ОбязательныйАтрибут УБЫВ, НаименованиеАтрибутаМаркетплейса ВОЗР");

			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
			ТаблицаАтрибутов = Неопределено;
		Иначе
			ДанныеКэша = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	// Заполнение дерева атрибутов в табличном документе.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.УправлениеПродажамиНаOzon.ПолучитьМакет("ПФ_MXL_КарточкаКатегории");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьГруппаАтрибутов = Макет.ПолучитьОбласть("ГруппаАтрибутов");
	ОбластьУровень1_ОбязательныйАтрибут = Макет.ПолучитьОбласть("Уровень1_ОбязательныйАтрибут");
	ОбластьУровень1_Атрибут = Макет.ПолучитьОбласть("Уровень1_Атрибут");
	ОбластьУровень2_ОбязательныйАтрибут = Макет.ПолучитьОбласть("Уровень2_ОбязательныйАтрибут");
	ОбластьУровень2_Атрибут = Макет.ПолучитьОбласть("Уровень2_Атрибут");
	ОбластьОписаниеАтрибута = Макет.ПолучитьОбласть("ОписаниеАтрибута");
	ОбластьОписаниеАтрибутаСтрокой = Макет.ПолучитьОбласть("ОписаниеАтрибутаСтрокой");
	
	ОбластьШапка.Параметры.НаименованиеКатегории = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)",
		Параметры.НаименованиеКатегорииМаркетплейса,
		Параметры.ИдентификаторКатегорииМаркетплейса);
	ОбластьШапка.Параметры.НаименованиеРодителя = Параметры.НаименованиеРодителяКатегорииМаркетплейса;
	ТабличныйДокумент.Вывести(ОбластьШапка);

	СоответствиеТипов = НовоеСоответствиеТипов();
	ТекущийРодитель = "";

	Для Каждого ДанныеАтрибута Из ДанныеКэша Цикл
		Если ЗначениеЗаполнено(ТекущийРодитель) И ТекущийРодитель <> ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса Тогда
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			ТекущийРодитель = "";
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Если Не ЗначениеЗаполнено(ТекущийРодитель) Тогда
				ТекущийРодитель = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;

				ОбластьГруппаАтрибутов.Параметры.ГруппаАтрибутов = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				ТабличныйДокумент.Вывести(ОбластьГруппаАтрибутов);

				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
			КонецЕсли;
		КонецЕсли;

		Если ДанныеАтрибута.ОбязательныйАтрибут И ЗначениеЗаполнено(ТекущийРодитель) Тогда
			ОбластьАтрибута = ОбластьУровень2_ОбязательныйАтрибут;
		ИначеЕсли ДанныеАтрибута.ОбязательныйАтрибут Тогда
			ОбластьАтрибута = ОбластьУровень1_ОбязательныйАтрибут;
		ИначеЕсли ЗначениеЗаполнено(ТекущийРодитель) Тогда
			ОбластьАтрибута = ОбластьУровень2_Атрибут;
		Иначе
			ОбластьАтрибута = ОбластьУровень1_Атрибут;
		КонецЕсли;

		ОбластьАтрибута.Параметры.Атрибут = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
		ТабличныйДокумент.Вывести(ОбластьАтрибута);

		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'Описание назначения атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = ДанныеАтрибута.ОписаниеНазначенияАтрибута;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'Тип значения атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)",
			СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута),
			ДанныеАтрибута.ТипЗначенияАтрибута);
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'ID атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		Если ДанныеАтрибута.ДоступенВыборЗначенияИзСписка И ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			Если ДанныеАтрибута.МаксимальноеКоличествоЗначений > 0 Тогда
				ОписаниеАтрибута = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для атрибута может быть выбрано не более %1 значений из предложенного списка.'"),
					ДанныеАтрибута.МаксимальноеКоличествоЗначений);
			Иначе
				ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть выбрано несколько значений из предложенного списка.'");
			КонецЕсли;
		ИначеЕсли ДанныеАтрибута.ДоступенВыборЗначенияИзСписка Тогда
			ОписаниеАтрибута =
				НСтр("ru = 'Для атрибута может быть выбрано одно значение из предложенного списка.'");
		ИначеЕсли ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			ОписаниеАтрибута =
				НСтр("ru = 'Для атрибута может быть указано одновременно несколько значений.'");
		Иначе
			ОписаниеАтрибута =
				НСтр("ru = 'Для атрибута может быть указано одно значение.'");
		КонецЕсли;

		Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
			ОписаниеАтрибута = ОписаниеАтрибута
				+ Символы.ПС
				+ НСтр("ru = 'Атрибут является обязательным для заполнения.'");
		Иначе
			ОписаниеАтрибута = ОписаниеАтрибута
				+ Символы.ПС
				+ НСтр("ru = 'Атрибут не является обязательным для заполнения.'");
		КонецЕсли;

		ОбластьОписаниеАтрибутаСтрокой.Параметры.ОписаниеАтрибута = ОписаниеАтрибута;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибутаСтрокой);

		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		ТекущийРодитель = "";
	КонецЕсли;

	МассивКатегорий1С = СопоставленныеКатегории1С(Параметры.ИдентификаторКатегорииМаркетплейса, УчетнаяЗаписьМаркетплейса);
	ИнформацияОСопоставленныхКатегориях1С = СтрСоединить(МассивКатегорий1С, Символы.ПС);

	Результат = Новый Структура;
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);
	Результат.Вставить("ИнформацияОСопоставленныхКатегориях1С", ИнформацияОСопоставленныхКатегориях1С);

	Возврат Результат;

КонецФункции

Функция ПолучитьДанныеСоответствияАтрибутовКатегории(ИдентификаторКатегории, Категория1С, УчетнаяЗаписьМаркетплейса)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С КАК ИдентификаторКатегории1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторОбъектаМетаданных1С КАК ИдентификаторОбъектаМетаданных1С,
		|	СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	СоответствияАтрибутовМаркетплейсов.АспектныйАтрибут КАК АспектныйАтрибут,
		|	СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	СоответствияАтрибутовМаркетплейсов.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
		|	СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
		|	СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С КАК Реквизит1С,
		|	СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию КАК ЗначениеПоУмолчаниюИдентификатор,
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчаниюИзЗапроса,
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрока КАК ЗначениеПоУмолчаниюСтрока,
		|	СоответствияАтрибутовМаркетплейсов.ПорядокСортировки КАК ПорядокСортировки
		|ИЗ
		|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|ГДЕ
		|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияАтрибутовМаркетплейсов.Категория1С = &Категория1С
		|	И СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса = &ИдентификаторКатегории
		|	И НЕ СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса В (&ИсключитьАтрибуты)";

	ИсключитьАтрибуты = НовыеИсключаемыеАтрибуты();
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ИдентификаторКатегории",    ИдентификаторКатегории);
	Запрос.УстановитьПараметр("Категория1С",               Категория1С);
	Запрос.УстановитьПараметр("ИсключитьАтрибуты",         ИсключитьАтрибуты);

	ДанныеСоответствияАтрибутовКатегории = Запрос.Выполнить().Выгрузить();
	
	ДанныеСоответствияАтрибутовКатегории.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов(НовыеПростыеТипы()));
	Для Каждого СтрокаТаблицыЗначений Из ДанныеСоответствияАтрибутовКатегории Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрока) Тогда
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрока;
		Иначе
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюИзЗапроса;
		КонецЕсли;
	КонецЦикла;
	ДанныеСоответствияАтрибутовКатегории.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ДанныеСоответствияАтрибутовКатегории.Индексы.Добавить("ИдентификаторАтрибутаМаркетплейса");
	
	Возврат ДанныеСоответствияАтрибутовКатегории;

КонецФункции

Функция ЗаполнитьДанныеЗначенийАтрибутаКатегории(ТаблицаСоответствияЗначенийАтрибута, Параметры, 
			УчетнаяЗаписьМаркетплейса, ДанныеКэша = Неопределено) Экспорт

	ЗаполнитьСоответствияЗначенийАтрибута(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗаписьМаркетплейса);

	Возврат ТаблицаСоответствияЗначенийАтрибута;

КонецФункции

// Возвращает список выбора по заданным параметрам.
//
// Параметры:
//   ПараметрыЗапроса          - Структура - параметры запроса, см. НовыеПараметрыЗапросаЗначенийАтрибута.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ВариантПолученияЗначений  - Строка - доступны варианты: "ТипыСертификатов", "ТипыСоответствияТребованиям",
//                                 "ЗначенияАтрибутов".
//   ДанныеКэша                - Неопределено -
//                             - Массив Из Структура - данные из кэша клиентского приложения, 
//                                 см. НоваяТаблицаЗначенийАтрибутаКатегории.
// 
// Возвращаемое значение:
//   Структура:
//     * ТаблицаЗначенийВыбора - ТаблицаЗначений - таблица с данными по списку выбора.
//     * ДанныеКэша            - Неопределено -
//                             - Массив Из Структура - кэш клиентского приложения, 
//                                 см. НоваяТаблицаЗначенийАтрибутаКатегории.
//
Функция ДоступныеЗначенияВыбора(ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, ВариантПолученияЗначений, 
			ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		Если ВариантПолученияЗначений = "ТипыСертификатов" Тогда
			ТаблицаЗначенийВыбора = ПолучитьТипыСертификатов(УчетнаяЗаписьМаркетплейса);
		ИначеЕсли ВариантПолученияЗначений = "ТипыСоответствияТребованиям" Тогда
			ТаблицаЗначенийВыбора = ПолучитьТипыСоответствияТребованиям(УчетнаяЗаписьМаркетплейса);
		Иначе
			ТаблицаЗначенийВыбора = ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		КонецЕсли;

		Если ТаблицаЗначенийВыбора <> Неопределено Тогда
			ТаблицаЗначенийВыбора.Сортировать("ЗначениеАтрибута");
			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначенийВыбора);
		КонецЕсли;
	Иначе
		ТаблицаЗначенийВыбора = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ДанныеКэша);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаЗначенийВыбора", ТаблицаЗначенийВыбора);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);

	Возврат Результат;

КонецФункции

Функция ДанныеДляФормированияЗапросаЗначенийАтрибутов(ПутьКПолю, ТипПоля, СоответствиеПсевдонимовМетаданных)

	ДанныеДляФормированияЗапроса = Новый Соответствие;

	Если Не ЗначениеЗаполнено(ПутьКПолю) Тогда
		Возврат ДанныеДляФормированияЗапроса;
	КонецЕсли;

	ЧастиПути = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ЧастиПутиКПолю(ПутьКПолю);
	КоличествоЧастейПути = ЧастиПути.Количество();

	Если КоличествоЧастейПути = 1 Тогда
		// Выбран элемент верхнего уровня.
		// В текущей задаче элементы верхнего уровня - это ссылочные типы.
		ЧастиПути.Добавить("Ссылка");
		КоличествоЧастейПути = 2;
	КонецЕсли;

	МассивПростыхТипов = НовыеПростыеТипы();
	СоответствиеПолныхИменМетаданных = Новый Соответствие;

	ТаблицаДополнительныхСвойств = ТаблицаДополнительныхСвойств();

	ШаблонДубляДополнительногоРеквизита =
		НСтр("ru = 'Для реквизита <%1> обнаружено дублирование наименования среди дополнительных реквизитов и/или сведений. Указанный реквизит будет исключен при заполнении атрибутов товара.'");

	ИмяМетаданных = "";
	Счетчик = 1;
	
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		Если Счетчик = 1 Тогда
			СоответствиеПсевдонимовМетаданных.Свойство(ЧастьПути, ИмяМетаданных);

			Если Не ЗначениеЗаполнено(ИмяМетаданных) Тогда
				Прервать;
			КонецЕсли;

			СоответствиеПолныхИменМетаданных.Вставить(ИмяМетаданных, Новый Структура);
		Иначе
			Если ИмяМетаданных = "" Тогда
				Прервать;
			КонецЕсли;

			НовоеСоответствиеПолныхИменМетаданных = Новый Соответствие;

			ПредставлениеСвойства = СтрЗаменить(ЧастьПути, "[", "");
			ПредставлениеСвойства = СтрЗаменить(ПредставлениеСвойства, "]", "");

			Отбор = Новый Структура("Представление, ИмяНабора", ПредставлениеСвойства, СтрЗаменить(ИмяМетаданных, ".", "_"));
			ДополнительныеСведения = ТаблицаДополнительныхСвойств.НайтиСтроки(Отбор);
			ЭтоДополнительноеСвойство = (ДополнительныеСведения.Количество() > 0);

			Для Каждого ПолноеИмяМетаданных Из СоответствиеПолныхИменМетаданных Цикл

				ТипРеквизита = Неопределено;
				ДополнительноеСвойство = Неопределено;
				ЭтоДополнительноеСведение = Ложь;

				Если ЭтоДополнительноеСвойство Тогда
					ИмяПредопределенногоНабора = СтрЗаменить(ПолноеИмяМетаданных.Ключ, ".", "_");

					ПозицияПоиска = 1;
					Пока Истина Цикл
						РезультатПоиска = СтрНайти(ПредставлениеСвойства, "(", , ПозицияПоиска);

						Если РезультатПоиска = 0 Тогда
							Прервать;
						КонецЕсли;

						ПозицияПоиска = РезультатПоиска + 1;
					КонецЦикла;

					ЗаголовокСвойства = СтрЗаменить(СокрЛП(Лев(ПредставлениеСвойства, ПозицияПоиска - 2)), "[", "");

					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ИмяПредопределенногоНабора", ИмяПредопределенногоНабора);
					Запрос.УстановитьПараметр("ЗаголовокСвойства", ЗаголовокСвойства);
					Запрос.УстановитьПараметр("ПредставлениеСвойства", ПредставлениеСвойства);
					Запрос.Текст =
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК НаборСвойств
						|ПОМЕСТИТЬ НаборыСвойств
						|ИЗ
						|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
						|ГДЕ
						|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенногоНабора
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	Данные.Ссылка КАК ДополнительноеСвойство,
						|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка) КАК ПредставлениеСвойства,
						|	ЛОЖЬ КАК ТочноеСовпадение
						|ПОМЕСТИТЬ ДополнительныеСвойства
						|ИЗ
						|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Данные
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
						|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
						|ГДЕ
						|	Данные.Заголовок = &ЗаголовокСвойства
						|	И Данные.НаборСвойств <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	Данные.Ссылка,
						|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка),
						|	ИСТИНА
						|ИЗ
						|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Данные
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
						|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
						|ГДЕ
						|	Данные.Ссылка.Заголовок = &ПредставлениеСвойства
						|	И Данные.Ссылка.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ДополнительныеРеквизиты.Свойство,
						|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Свойство),
						|	ЛОЖЬ
						|ИЗ
						|	НаборыСвойств КАК НаборыСвойств
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|		ПО НаборыСвойств.НаборСвойств = ДополнительныеРеквизиты.Ссылка.Родитель
						|ГДЕ
						|	ДополнительныеРеквизиты.Свойство.Заголовок = &ЗаголовокСвойства
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ДополнительныеРеквизиты.Свойство,
						|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Свойство),
						|	ИСТИНА
						|ИЗ
						|	НаборыСвойств КАК НаборыСвойств
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|		ПО НаборыСвойств.НаборСвойств = ДополнительныеРеквизиты.Ссылка.Родитель
						|ГДЕ
						|	ДополнительныеРеквизиты.Свойство.Заголовок = &ПредставлениеСвойства
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|УНИЧТОЖИТЬ НаборыСвойств
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	Данные.ДополнительноеСвойство КАК ДополнительноеСвойство,
						|	Данные.ПредставлениеСвойства КАК ПредставлениеСвойства,
						|	Данные.ДополнительноеСвойство.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
						|	Данные.ДополнительноеСвойство.ТипЗначения КАК ТипЗначения,
						|	Данные.ТочноеСовпадение КАК ТочноеСовпадение
						|ИЗ
						|	ДополнительныеСвойства КАК Данные
						|
						|УПОРЯДОЧИТЬ ПО
						|	ТочноеСовпадение УБЫВ
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|УНИЧТОЖИТЬ ДополнительныеСвойства";

					ВыборкаСвойств = Запрос.Выполнить().Выбрать();
					Пока ВыборкаСвойств.Следующий() Цикл
						Если ВыборкаСвойств.ТочноеСовпадение
								Или Не ВыборкаСвойств.ТочноеСовпадение И ВыборкаСвойств.ПредставлениеСвойства = ПредставлениеСвойства Тогда
							ТипРеквизита = ВыборкаСвойств.ТипЗначения;
							ДополнительноеСвойство = ВыборкаСвойств.ДополнительноеСвойство;
							ЭтоДополнительноеСведение = ВыборкаСвойств.ЭтоДополнительноеСведение;
							Прервать;
						КонецЕсли;
					КонецЦикла;

				ИначеЕсли Счетчик <> КоличествоЧастейПути Тогда

					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных.Ключ);
					Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если Реквизит.Имя = ЧастьПути Тогда
							ТипРеквизита = Реквизит.Тип;
							Прервать;
						КонецЕсли;
					КонецЦикла;

					Если ТипРеквизита = Неопределено Тогда
						Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
							Если Реквизит.Имя = ЧастьПути Тогда
								ТипРеквизита = Реквизит.Тип;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

				КонецЕсли;

				Если Счетчик = КоличествоЧастейПути И ТипПоля <> Неопределено Тогда
					Для Каждого ТипЗначенияПоля Из ТипПоля.Типы() Цикл
						Данные = Новый Структура;
						Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);

						Если ОбщегоНазначения.ЭтоСсылка(ТипЗначенияПоля) Тогда
							Данные.Вставить("ПутьКРеквизиту", "Ссылка"); 

							МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияПоля);

							Если ЗначениеЗаполнено(ДополнительноеСвойство) И МетаданныеПоТипу.Владельцы.Количество() > 0 Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
								Данные.Вставить("УсловиеЗапроса", "Владелец = &ДополнительноеСвойство");
							КонецЕсли;

							ДанныеДляФормированияЗапроса.Вставить(МетаданныеПоТипу.ПолноеИмя(), Данные);
						ИначеЕсли МассивПростыхТипов.Найти(ТипЗначенияПоля) <> Неопределено Тогда
							Если ЭтоДополнительноеСвойство Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);

								Если ЭтоДополнительноеСведение Тогда
									Данные.Вставить("ПутьКРеквизиту", "Значение");
									Данные.Вставить("УсловиеЗапроса", "ТИПЗНАЧЕНИЯ(Объект) = ТИП(" + ПолноеИмяМетаданных.Ключ + ") И Свойство = &ДополнительноеСвойство");
									ДанныеДляФормированияЗапроса.Вставить("РегистрСведений.ДополнительныеСведения", Данные);
								Иначе
									Данные.Вставить("ПутьКРеквизиту", "Значение");
									Данные.Вставить("УсловиеЗапроса", "Свойство = &ДополнительноеСвойство");
									ДанныеДляФормированияЗапроса.Вставить(ПолноеИмяМетаданных.Ключ + ".ДополнительныеРеквизиты", Данные);
								КонецЕсли;
							Иначе
								ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных.Ключ);
								
								Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ЧастьПути, ОбъектМетаданных)
									И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ЧастьПути) Тогда
									Продолжить;
								КонецЕсли;

								Если ПолноеИмяМетаданных.Значение.Количество() > 0 Тогда 
									Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПолноеИмяМетаданных.Значение);
									Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);
								КонецЕсли;

								Данные.Вставить("ПутьКРеквизиту", "" + ЧастьПути);
								ДанныеДляФормированияЗапроса.Вставить(ПолноеИмяМетаданных.Ключ, Данные);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипРеквизита <> Неопределено Тогда
					Для Каждого ТипЗначенияПоля Из ТипРеквизита.Типы() Цикл
						Данные = Новый Структура;
						Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);

						Если ЭтоДополнительноеСвойство Тогда
							МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияПоля);
							
							Если МетаданныеПоТипу.Владельцы.Количество() > 0 Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
								Данные.Вставить("УсловиеЗапроса", "Владелец = &ДополнительноеСвойство");
							КонецЕсли;
						КонецЕсли;

						НовоеСоответствиеПолныхИменМетаданных.Вставить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначенияПоля)), Данные);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			СоответствиеПолныхИменМетаданных = НовоеСоответствиеПолныхИменМетаданных;
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат ДанныеДляФормированияЗапроса;

КонецФункции

Функция СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса)

	ТекстЗапросаДанных = "";

	ШаблонТекстаЗапросаПростыхТиповИСсылок =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&ПутьКРеквизиту КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ИсточникДанных
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|ГДЕ
		|	&УсловиеЗапроса";

	ШаблонТекстаЗапросаТипаБулево =
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ИсточникДанных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЗначениеРеквизита";

	ОбъединениеТекстаЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";

	ТипБулево = Тип("Булево");

	АтрибутыЗапроса = Новый Структура("ПутьКРеквизиту, ТипЗначенияРеквизита");
	АтрибутыЗапроса.Вставить("УсловиеЗапроса", "Истина");
	АтрибутыЗапроса.Вставить("ПараметрыЗапроса", Новый Структура);

	Для Каждого ЧастьДанныхДляФормированияЗапроса Из ДанныеДляФормированияЗапроса Цикл
		ИсточникДанных = ЧастьДанныхДляФормированияЗапроса.Ключ;
		ЗаполнитьЗначенияСвойств(АтрибутыЗапроса, ЧастьДанныхДляФормированияЗапроса.Значение);

		ДополнительноеУсловиеЗапроса = "";

		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсточникДанных);
		Если ОбъектМетаданных <> Неопределено Тогда
			СвойстваПроверки = Новый Структура("Иерархический, ВидИерархии", Ложь);
			ЗаполнитьЗначенияСвойств(СвойстваПроверки, ОбъектМетаданных);
			Если СвойстваПроверки.Иерархический
				И СвойстваПроверки.ВидИерархии =  Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ДополнительноеУсловиеЗапроса = Символы.ПС + "И НЕ ИсточникДанных.ЭтоГруппа";
			КонецЕсли;
		КонецЕсли;

		Если АтрибутыЗапроса.ТипЗначенияРеквизита = ТипБулево Тогда
			ТекстЧастиЗапроса = ШаблонТекстаЗапросаТипаБулево;
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ШаблонТекстаЗапросаПростыхТиповИСсылок, "&ИсточникДанных", ИсточникДанных);
			Если АтрибутыЗапроса.ТипЗначенияРеквизита = Тип("Строка") Тогда
				ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&ПутьКРеквизиту", "ВЫРАЗИТЬ(" + АтрибутыЗапроса.ПутьКРеквизиту + " КАК Строка(1024))");
			Иначе
				ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&ПутьКРеквизиту", АтрибутыЗапроса.ПутьКРеквизиту);
			КонецЕсли;

			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&УсловиеЗапроса", АтрибутыЗапроса.УсловиеЗапроса + ДополнительноеУсловиеЗапроса);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстЗапросаДанных) Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "РАЗРЕШЕННЫЕ", "");
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "ПОМЕСТИТЬ ИсточникДанных", "");
			ТекстЗапросаДанных = ТекстЗапросаДанных + ОбъединениеТекстаЗапроса + ТекстЧастиЗапроса;
		Иначе
			ТекстЗапросаДанных = ТекстЧастиЗапроса;
		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("ТекстЗапросаДанных, ПараметрыЗапроса", ТекстЗапросаДанных, АтрибутыЗапроса.ПараметрыЗапроса);
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ДанныеДляЗаполнения, УчетнаяЗаписьМаркетплейса, 
			СоответствиеПсевдонимовМетаданных) Экспорт

	ДанныеДляЗаполнения.КоличествоЗначений1СВсего = 0;
	ДанныеДляЗаполнения.КоличествоСопоставленныхЗначений = 0;
	ДанныеДляЗаполнения.ИнформацияОСопоставленииЗначений = НСтр("ru = 'Не обнаружены значения 1С'");

	ШаблонСоответствия = НСтр("ru = 'Сопоставлено %1 из %2'");

	ДанныеДляФормированияЗапроса = ДанныеДляФормированияЗапросаЗначенийАтрибутов(
			ДанныеДляЗаполнения.Реквизит1С, ДанныеДляЗаполнения.ТипЗначенияРеквизита1С, СоответствиеПсевдонимовМетаданных);

	Если ЗначениеЗаполнено(ДанныеДляФормированияЗапроса) Тогда
		Результат = СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса);
		ТекстЗапросаДанных = Результат.ТекстЗапросаДанных;

		ТекстЗапросаДанных = ТекстЗапросаДанных + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсточникДанных.ЗначениеРеквизита) КАК КоличествоЗначений1С,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствияОбъектовМаркетплейсов.Объект1С) КАК КоличествоСоответствий
			|ИЗ
			|	ИсточникДанных КАК ИсточникДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
			|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторВладельцаОбъектаМаркетплейса)
			|			И ИсточникДанных.ЗначениеРеквизита = СоответствияОбъектовМаркетплейсов.Объект1С
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИсточникДанных";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса",
				ДанныеДляЗаполнения.ИдентификаторКатегории1С +
				"/" + ДанныеДляЗаполнения.ИдентификаторКатегорииМаркетплейса +
				"/" + ДанныеДляЗаполнения.ИдентификаторАтрибутаМаркетплейса);

		Для Каждого ПараметрЗапроса Из Результат.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;

		Запрос.Текст = ТекстЗапросаДанных;

		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ДанныеДляЗаполнения.КоличествоЗначений1СВсего = ВыборкаДанных.КоличествоЗначений1С;
			ДанныеДляЗаполнения.КоличествоСопоставленныхЗначений = ВыборкаДанных.КоличествоСоответствий;

			Если ДанныеДляЗаполнения.КоличествоЗначений1СВсего <> 0 Тогда
				ДанныеДляЗаполнения.ИнформацияОСопоставленииЗначений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСоответствия,
						ВыборкаДанных.КоличествоСоответствий, ВыборкаДанных.КоличествоЗначений1С); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствияЗначенийАтрибута(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗаписьМаркетплейса)

	ТаблицаСоответствияЗначенийАтрибута.Колонки.Добавить("ПредставлениеЗначенияРеквизита1С", Новый ОписаниеТипов("Строка"));
	ПараметрыАтрибута = Параметры.ПараметрыАтрибута;

	ДанныеДляФормированияЗапроса = ДанныеДляФормированияЗапросаЗначенийАтрибутов(
			Параметры.Реквизит1С, Параметры.ТипЗначенияРеквизита1С, Параметры.СоответствиеПсевдонимовМетаданных);

	Если ЗначениеЗаполнено(ДанныеДляФормированияЗапроса) Тогда
		Результат = СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса);
		ТекстЗапросаДанных = Результат.ТекстЗапросаДанных;

		ТекстЗапросаДанных = ТекстЗапросаДанных + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ЗначениеРеквизита) КАК ПредставлениеЗначенияРеквизита1С,
			|	ИсточникДанных.ЗначениеРеквизита КАК ЗначениеРеквизита1С,
			|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторЗначенияАтрибутаМаркетплейса,
			|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеЗначенияАтрибутаМаркетплейса
			|ИЗ
			|	ИсточникДанных КАК ИсточникДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
			|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторВладельцаОбъектаМаркетплейса)
			|			И ИсточникДанных.ЗначениеРеквизита = СоответствияОбъектовМаркетплейсов.Объект1С
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЗначенияАтрибутаМаркетплейса
			|ИТОГИ ПО
			|	ЗначениеРеквизита1С
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИсточникДанных";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса",
				ПараметрыАтрибута.ИдентификаторКатегории1С +
				"/" + ПараметрыАтрибута.ИдентификаторКатегорииМаркетплейса +
				"/" + ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса);

		Для Каждого ПараметрЗапроса Из Результат.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;

		Запрос.Текст = ТекстЗапросаДанных;

		ВыборкаЗначенийРеквизита1С = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗначенийРеквизита1С.Следующий() Цикл
			ВыборкаДанных = ВыборкаЗначенийРеквизита1С.Выбрать();
			НоваяСтрока = ТаблицаСоответствияЗначенийАтрибута.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизита1С);
			НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыАтрибута.ИдентификаторКатегорииМаркетплейса;
			НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса;

			Если Параметры.МножественныйВыбор Тогда
				СписокЗначений = Новый СписокЗначений;
				Пока ВыборкаДанных.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
						СписокЗначений.Добавить(ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса, ВыборкаДанных.НаименованиеЗначенияАтрибутаМаркетплейса);
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока.ЗначенияАтрибута = СписокЗначений;

				Если СписокЗначений.Количество() > 0 Тогда
					НоваяСтрока.ЗначениеУстановлено = Истина;
					НоваяСтрока.ЗаданоСоответствие = Истина;
				КонецЕсли;
			Иначе
				Если ВыборкаДанных.Следующий() Тогда
					НоваяСтрока.НаименованиеЗначенияАтрибута = ВыборкаДанных.НаименованиеЗначенияАтрибутаМаркетплейса;
					НоваяСтрока.ИдентификаторЗначенияАтрибута = ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса;

					Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторЗначенияАтрибута) Тогда
						НоваяСтрока.ЗначениеУстановлено = Истина;
						НоваяСтрока.ЗаданоСоответствие = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТаблицаСоответствияЗначенийАтрибута.Сортировать("ПредставлениеЗначенияРеквизита1С, НаименованиеЗначенияАтрибута");
	ТаблицаСоответствияЗначенийАтрибута.Колонки.Удалить("ПредставлениеЗначенияРеквизита1С");

КонецПроцедуры

// Возвращает соответствие атрибутов реквизитам 1С, заданным по умолчанию.
// В ключе следует указывать префикс "Атрибут_" для поиска значения при условии, когда искомый идентификатор атрибута 
// состоит только из цифр.
// ПорядокСортировки заполняется для сортировки в дереве значений, не обязателен к заполнению.
//
// Возвращаемое значение:
//   Структура Из КлючИЗначение - данные атрибутов.
//
Функция ПутьКРеквизитам1СПоУмолчанию() Экспорт

	ПутьКРеквизитам1СПоУмолчанию = Новый Структура;

	ИдентификаторОбъектаМетаданных1С_Упаковка = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Ложь);

	РеквизитыУпаковки = Метаданные.Справочники.УпаковкиЕдиницыИзмерения.Реквизиты;

	//
	// Вес упаковки
	//

	// Единица измерения веса упаковки
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 10);
	ДанныеАтрибута.Вставить("Реквизит1С", "Упаковка.ВесЕдиницаИзмерения");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Упаковка'") + "."
			+ РеквизитыУпаковки["ВесЕдиницаИзмерения"].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЗначенияПоУмолчанию", "kg");
	ДанныеАтрибута.Вставить("ЗначениеПоУмолчанию", НСтр("ru = 'килограмм'"));

	// Единица измерения веса. Показатели пересчета заданы в отношении к килограмму (1,1) для перевода в килограммы.
	СписокВыбора = Новый Массив;

	ЗначениеВыбора = Новый Структура;
	ЗначениеВыбора.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "g");
	ЗначениеВыбора.Вставить("ЗначениеАтрибута", НСтр("ru = 'грамм'"));
	ЗначениеВыбора.Вставить("МеждународноеСокращение", "GRM");
	ЗначениеВыбора.Вставить("Числитель", 1);
	ЗначениеВыбора.Вставить("Знаменатель", 1000);
	ЗначениеВыбора.Вставить("ДляПересчетов", Истина);
	СписокВыбора.Добавить(ЗначениеВыбора);

	ЗначениеВыбора = Новый Структура;
	ЗначениеВыбора.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "kg");
	ЗначениеВыбора.Вставить("ЗначениеАтрибута", НСтр("ru = 'килограмм'"));
	ЗначениеВыбора.Вставить("МеждународноеСокращение", "KGM");
	ЗначениеВыбора.Вставить("Числитель", 1);
	ЗначениеВыбора.Вставить("Знаменатель", 1);
	ЗначениеВыбора.Вставить("ДляПересчетов", Истина);
	СписокВыбора.Добавить(ЗначениеВыбора);

	ЗначениеВыбора = Новый Структура;
	ЗначениеВыбора.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "lb");
	ЗначениеВыбора.Вставить("ЗначениеАтрибута", НСтр("ru = 'фунт'")); 
	ЗначениеВыбора.Вставить("МеждународноеСокращение", "LB");
	ЗначениеВыбора.Вставить("Числитель", 100000);
	ЗначениеВыбора.Вставить("Знаменатель", 45359.237);
	ЗначениеВыбора.Вставить("ДляПересчетов", Ложь);
	СписокВыбора.Добавить(ЗначениеВыбора);

	ДанныеАтрибута.Вставить("СписокВыбора", СписокВыбора);
	
	Показатели = Новый Массив;
	Показатели.Добавить("Атрибут_weight");
	
	ДанныеАтрибута.Вставить("Показатели", Показатели);
	
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_weight_unit", ДанныеАтрибута);

	// Вес
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 11);
	ДанныеАтрибута.Вставить("Реквизит1С", "Упаковка.Вес");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Упаковка'") + "."
			+ РеквизитыУпаковки["Вес"].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_weight_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_weight", ДанныеАтрибута);

	//
	// Габариты упаковки 
	//

	// Единица измерения габаритов упаковки
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 20);
	ДанныеАтрибута.Вставить("Реквизит1С", "Упаковка.ШиринаЕдиницаИзмерения");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Упаковка'") + "."
			+ РеквизитыУпаковки["ШиринаЕдиницаИзмерения"].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЗначенияПоУмолчанию", "cm");
	ДанныеАтрибута.Вставить("ЗначениеПоУмолчанию", НСтр("ru = 'сантиметр'"));

	// Единица измерения габаритов. Показатели пересчета заданы в отношении к метру (1,1) для перевода в сантиметры.
	СписокВыбора = Новый Массив; 

	ЗначениеВыбора = Новый Структура;
	ЗначениеВыбора.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "mm");
	ЗначениеВыбора.Вставить("ЗначениеАтрибута", НСтр("ru = 'миллиметр'"));
	ЗначениеВыбора.Вставить("МеждународноеСокращение", "MMR");
	ЗначениеВыбора.Вставить("Числитель", 1);
	ЗначениеВыбора.Вставить("Знаменатель", 1000);
	ЗначениеВыбора.Вставить("ДляПересчетов", Истина);
	СписокВыбора.Добавить(ЗначениеВыбора);

	ЗначениеВыбора = Новый Структура;
	ЗначениеВыбора.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "cm");
	ЗначениеВыбора.Вставить("ЗначениеАтрибута", НСтр("ru = 'сантиметр'"));
	ЗначениеВыбора.Вставить("МеждународноеСокращение", "CMR");
	ЗначениеВыбора.Вставить("Числитель", 1);
	ЗначениеВыбора.Вставить("Знаменатель", 100);
	ЗначениеВыбора.Вставить("ДляПересчетов", Истина);
	СписокВыбора.Добавить(ЗначениеВыбора);

	ЗначениеВыбора = Новый Структура;
	ЗначениеВыбора.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "in");
	ЗначениеВыбора.Вставить("ЗначениеАтрибута", НСтр("ru = 'дюйм'"));
	ЗначениеВыбора.Вставить("МеждународноеСокращение", "IN");
	ЗначениеВыбора.Вставить("Числитель", 254);
	ЗначениеВыбора.Вставить("Знаменатель", 10000);
	ЗначениеВыбора.Вставить("ДляПересчетов", Ложь);
	СписокВыбора.Добавить(ЗначениеВыбора);

	ДанныеАтрибута.Вставить("СписокВыбора", СписокВыбора);

	Показатели = Новый Массив;
	Показатели.Добавить("Атрибут_depth");
	Показатели.Добавить("Атрибут_height");
	Показатели.Добавить("Атрибут_width");
	
	ДанныеАтрибута.Вставить("Показатели", Показатели);
	
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_dimension_unit", ДанныеАтрибута);

	// Глубина
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 21);
	ДанныеАтрибута.Вставить("Реквизит1С", "Упаковка.Глубина");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Упаковка'") + "."
			+ РеквизитыУпаковки["Глубина"].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_dimension_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_depth", ДанныеАтрибута);

	// Высота
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 21);
	ДанныеАтрибута.Вставить("Реквизит1С", "Упаковка.Высота");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Упаковка'") + "."
			+ РеквизитыУпаковки["Высота"].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_dimension_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_height", ДанныеАтрибута);

	// Ширина
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 21);
	ДанныеАтрибута.Вставить("Реквизит1С", "Упаковка.Ширина");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Упаковка'") + "."
			+ РеквизитыУпаковки["Ширина"].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_dimension_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_width", ДанныеАтрибута);

	Возврат ПутьКРеквизитам1СПоУмолчанию;

КонецФункции

#КонецОбласти

#Область АтрибутыКатегорииSellerAPI

// Получает характеристики (атрибуты) указанной категории и типа товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_GetAttributes (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, см. НовыеПараметрыЗапросаАтрибутовКатегории.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса:
//       * description          - Строка - описание характеристики.
//       * dictionary_id        - Число - идентификатор справочника.
//       * group_id             - Число - идентификатор группы характеристик.
//       * group_name           - Строка - название группы характеристик.
//       * id                   - Число - идентификатор характеристики.
//       * is_aspect            - Булево - признак аспектного атрибута (характеристика, по которой отличаются товары 
//                                  одной модели).
//       * is_collection        - Булево - Истина, если характеристика - набор значений; Ложь, если характеристика - 
//                                  одно значение.
//       * is_required          - Булево - признак обязательной характеристики.
//       * name                 - Строка - название.
//       * type                 - Строка - тип характеристики.
//       * attribute_complex_id - Число - идентификатор комплексного атрибута.
//       * max_value_count      - Число - максимальное количество значений для атрибута.
//
Функция ПолучитьАтрибутыКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)
	
	Если Не ЗначениеЗаполнено(Параметры.ИдентификаторКатегории)
			Или Не ЗначениеЗаполнено(Параметры.ИдентификаторТипаТоваров) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "/v1/description-category/attribute";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("description_category_id", СтрокаВЧисло(Параметры.ИдентификаторКатегории));
	ПараметрыЗапроса.Вставить("type_id",				 СтрокаВЧисло(Параметры.ИдентификаторТипаТоваров));
	ПараметрыЗапроса.Вставить("language",				 Параметры.ЯзыкВОтвете);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Возвращает значения (вложенные справочники) атрибута категории из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_GetAttributeValues (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, см. НовыеПараметрыЗапросаЗначенийАтрибута.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура - результат выполнения запроса:
//       * Результат  - Массив Из см. НовыйРезультатИзСервиса - данные значений характеристик (result):
//         ** id        - Число  - идентификатор значения.
//         ** info      - Строка - наименование значения.
//         ** picture   - Строка - URL адрес изображения.
//         ** value     - Строка - значение характеристики товара.
//       * Продолжить - Булево - признак необходимости получения следующей порции данных (has_next).
//
Функция ПолучитьЗначенияАтрибутаКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/description-category/attribute/values";

	Идентификаторы = СтрРазделить(Параметры.ИдентификаторКатегорииМаркетплейса, "_", Ложь);
	Пока Идентификаторы.Количество() < 2 Цикл
		Идентификаторы.Добавить("");
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Идентификаторы[0])
			Или Не ЗначениеЗаполнено(Идентификаторы[1]) Тогда
		Возврат Новый Структура("Результат", Неопределено);
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("description_category_id", СтрокаВЧисло(Идентификаторы[0]));
	ПараметрыЗапроса.Вставить("type_id",				 СтрокаВЧисло(Идентификаторы[1]));
	ПараметрыЗапроса.Вставить("attribute_id",			 СтрокаВЧисло(Параметры.ИдентификаторАтрибутаМаркетплейса));
	ПараметрыЗапроса.Вставить("last_value_id",			 Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",					 Параметры.МаксимальноеКоличествоВОтвете);
	ПараметрыЗапроса.Вставить("language",				 Параметры.ЯзыкВОтвете);

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "dictionary not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result, has_next", Новый Массив, Ложь);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",  "result");
	АтрибутыОтвета.Вставить("Продолжить", "has_next");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#Область ИдентификаторыТоваровСлужебный

// Получает таблицу идентификаторов товаров, полученных из сервиса с учетом установленного отбора.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоТоварам               - см. НовыйФильтрЗапросаПоТоварам.
//   ТаблицаИдентификаторовТоваров - см. НоваяТаблицаИдентификаторовТоваров.
//   РазмерПорцииЗагрузкиДанных    - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                 - Неопределено - размер порции для загрузки не ограничен.
//   КэшИдентификаторов            - Соответствие Из КлючИЗначение - кэш идентификаторов (связь между идентификаторами 
//                                     публикации и идентификаторами Ozon).
//   Отказ                         - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПолучитьИдентификаторыТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, ТаблицаИдентификаторовТоваров, 
			РазмерПорцииЗагрузкиДанных = Неопределено, КэшИдентификаторов = Неопределено, Отказ = Ложь) Экспорт
	
	Если ТаблицаИдентификаторовТоваров = Неопределено Тогда
		ТаблицаИдентификаторовТоваров = НоваяТаблицаИдентификаторовТоваров();
	КонецЕсли;
	
	Если КэшИдентификаторов = Неопределено Тогда
		КэшИдентификаторов = Новый Соответствие;
	КонецЕсли;

	ФильтрыВидимости = ЗначениеВМассив(ФильтрПоТоварам.ФильтрВидимости);
	НовыхПозиций     = 0;

	Для Каждого ЭлементФильтра Из ФильтрыВидимости Цикл
		Если ЗначениеЗаполнено(РазмерПорцииЗагрузкиДанных)
			 И НовыхПозиций >= РазмерПорцииЗагрузкиДанных Тогда
			Прервать;
		КонецЕсли;
		
		Если ФильтрПоТоварам.ИдентификаторыПубликации <> Неопределено
			 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыПубликации.Количество() Тогда
			Прервать;
		ИначеЕсли ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса <> Неопределено
			 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыЗапроса                 = НовыеПараметрыЗапросаПолученияСпискаТоваров(ФильтрПоТоварам);
		ПараметрыЗапроса.ФильтрВидимости = ЭлементФильтра;
		Если ЗначениеЗаполнено(РазмерПорцииЗагрузкиДанных) Тогда
			ПараметрыЗапроса.Вставить("МаксимальноеКоличествоВОтвете", Мин(ПараметрыЗапроса.МаксимальноеКоличествоВОтвете, РазмерПорцииЗагрузкиДанных));
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаИдентификаторовТоваров.НайтиСтроки(Новый Структура("ФильтрВидимости", ЭлементФильтра));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(НайденныеСтроки[НайденныеСтроки.Количество() - 1].ИдентификаторПоследнегоЗначения) Тогда
				ПараметрыЗапроса.Вставить("ИдентификаторПоследнегоЗначения", НайденныеСтроки[НайденныеСтроки.Количество() - 1].ИдентификаторПоследнегоЗначения);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Пока Истина Цикл
			Если ЗначениеЗаполнено(РазмерПорцииЗагрузкиДанных)
				 И НовыхПозиций >= РазмерПорцииЗагрузкиДанных Тогда
				Прервать;
			КонецЕсли;
			
			Если ФильтрПоТоварам.ИдентификаторыПубликации <> Неопределено
				 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыПубликации.Количество() Тогда
				Прервать;
			ИначеЕсли ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса <> Неопределено
				 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса.Количество() Тогда
				Прервать;
			КонецЕсли;
			
			ОтветСервиса = ПолучитьИдентификаторыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
			КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
				НоваяСтрока                                  = ТаблицаИдентификаторовТоваров.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["offer_id"];
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]);
				НоваяСтрока.ПродаетсяСоСкидкой               = ЭлементОтветаСервиса["is_discounted"];
				НоваяСтрока.Архивный                         = ЭлементОтветаСервиса["archived"];
				НоваяСтрока.ПродаетсяПоСхемеРаботыFBO        = ЭлементОтветаСервиса["is_fbo_visible"];
				НоваяСтрока.ПродаетсяПоСхемеРаботыFBS        = ЭлементОтветаСервиса["is_fbs_visible"];
				НоваяСтрока.ФильтрВидимости                  = ЭлементФильтра;
				НоваяСтрока.ИдентификаторПоследнегоЗначения  = ПараметрыЗапроса.ИдентификаторПоследнегоЗначения;
				
				Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторПубликации) Тогда
					КэшИдентификаторов.Вставить(НоваяСтрока.ИдентификаторПубликации, НоваяСтрока.ИдентификаторОбъектаМаркетплейса);
				КонецЕсли;
				
				НовыхПозиций = НовыхПозиций + 1;
			КонецЦикла;
			
			Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
				Прервать;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаИдентификаторовТоваров.НайтиСтроки(Новый Структура("ФильтрВидимости", ЭлементФильтра));
			Если НайденныеСтроки.Количество() >= КоличествоТоваров Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет таблицу описания ошибок при изменении артикулов значениями из сервиса.
//
// Параметры:
//   ТаблицаОшибок             - ТаблицаЗначений - описания ошибок при изменении артикулов,
//                                 см. НоваяТаблицаОшибокИзмененияАртикулов.
//   ОтветСервиса              - Массив Из см. НовыйРезультатИзСервиса - описания ошибок при изменении артикулов товаров в сервисе Ozon,
//                                 см. ИзменитьИдентификаторыПубликацииВСервисе.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ДобавитьОтветСервисаВТаблицуОшибокИзмененияИдентификаторовПубликации(ТаблицаОшибок, ОтветСервиса, УчетнаяЗаписьМаркетплейса)

	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
		НоваяСтрока                           = ТаблицаОшибок.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации   = ЭлементОтветаСервиса["offer_id"];
		НоваяСтрока.СообщениеОбОшибке         = ЭлементОтветаСервиса["message"];
	КонецЦикла;

КонецПроцедуры

// Изменяет идентификаторы публикации (артикулы) товаров из системы продавца.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторыПубликации  - ТаблицаЗначений - список пар с новыми и старыми значениями артикулов:
//     * СтароеЗначение          - Строка - старый артикул.
//     * НовоеЗначение           - Строка - новый артикул.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОшибокИзмененияАртикулов.
//
Функция ИзменитьИдентификаторыПубликации(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации, Отказ = Ложь) Экспорт
	
	ТаблицаОшибок    = НоваяТаблицаОшибокИзмененияАртикулов();
	ПараметрыЗапроса = НовыеПараметрыЗапросаИзмененияИдентификаторовПубликации();
	Порция           = Новый Массив;
		
	Для Каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
		Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации = Порция;
			ОтветСервиса = ИзменитьИдентификаторыПубликацииВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
				
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
				Прервать;
			Иначе
				ДобавитьОтветСервисаВТаблицуОшибокИзмененияИдентификаторовПубликации(ТаблицаОшибок, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
			КонецЕсли;
		КонецЕсли;

		Порция.Добавить(Новый Структура("offer_id, new_offer_id",
			ЭлементПорции.СтароеЗначение,
			ЭлементПорции.НовоеЗначение));
	КонецЦикла;
	
	Если Не Отказ
		 	И Порция.Количество() > 0 Тогда
		ПараметрыЗапроса.ИдентификаторыПубликации = Порция;
		ОтветСервиса = ИзменитьИдентификаторыПубликацииВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		Порция.Очистить();
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ДобавитьОтветСервисаВТаблицуОшибокИзмененияИдентификаторовПубликации(ТаблицаОшибок, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаОшибок;

КонецФункции

#КонецОбласти

#Область ИдентификаторыТоваровSellerAPI

// Получает список идентификаторов товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductList (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияСпискаТоваров.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура - результат выполнения запроса:
//       * Результат                       - Массив Из см. НовыйРезультатИзСервиса - список идентификаторов товаров:
//         ** offer_id                       - Строка - идентификатор товара в системе продавца (артикул).
//         ** product_id                     - Число - идентификатор товара.
//         ** is_discounted                  - Булево - товар продается со скидкой.
//         ** archived                       - Булево - признак архивного товара.
//         ** is_fbo_visible                 - Булево - продается по схеме FBО.
//         ** is_fbs_visible                 - Булево - продается по схеме FBS.
//       * ИдентификаторПоследнегоЗначения - Строка - идентификатор последнего значения на странице (last_id).
//       * КоличествоТоваров               - Число - количество товаров в списке (total).
//
Функция ПолучитьИдентификаторыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/product/list";

	ФильтрПоТоварам = Новый Структура;
	ФильтрПоТоварам.Вставить("visibility", Параметры.ФильтрВидимости);

	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;

	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса));
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  ФильтрПоТоварам);
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);

	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("items",   Новый Массив);
	ПустойРезультат.Вставить("last_id", "");
	ПустойРезультат.Вставить("total",   0);
	
	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "result.items");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "result.last_id");
	АтрибутыОтвета.Вставить("КоличествоТоваров",               "result.total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

// Изменяет артикулы товаров из системы продавца в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUpdateOfferID (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры запроса:
//     * ИдентификаторыПубликации - Массив Из Структура - список пар с новыми и старыми значениями артикулов:
//       ** offer_id                - Строка - старый артикул.
//       ** new_offer_id            - Строка - новый артикул.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса:
//       * message  - Строка - сообщение об ошибке.
//       * offer_id - Строка - артикул товара, который не получилось изменить.
//
Функция ИзменитьИдентификаторыПубликацииВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/update/offer-id";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("update_offer_id", Параметры.ИдентификаторыПубликации);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "errors");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

#КонецОбласти

#Область ТоварыСлужебный

// Проверяет статусы создания карточек товаров в сервисе Ozon.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторыПубликации  - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца;
//                             - Неопределено - выборка по идентификаторам публикации не используется.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ВыполнитьПроверкуЗаданияПубликацииТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации = Неопределено, Отказ = Ложь)

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации КАК ЗаданиеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации <> """"
		|	И ИСТИНА
		|ИТОГИ ПО
		|	ЗаданиеПубликации";

	Если ТипЗнч(ИдентификаторыПубликации) = Тип("Массив") И ИдентификаторыПубликации.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации В (&ИдентификаторыПубликации)");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст = ТекстЗапроса;

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();  
	
	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	ВыборкаЗаданийПубликации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаданийПубликации.Следующий() Цикл
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ЗаданиеПубликации", ВыборкаЗаданийПубликации.ЗаданиеПубликации);
		
		ОтветСервиса = ПроверитьСтатусПубликацииТовараВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);

		Если ОтветСервиса.Результат = Неопределено Тогда
			Отказ = Истина;
			Прервать;
			
		Иначе
			ВыборкаТоваров = ВыборкаЗаданийПубликации.Выбрать();

			Если Не ЗначениеЗаполнено(ОтветСервиса.Результат) Тогда
				Если ОтветСервиса.КоличествоТоваров = -5 Тогда
					Пока ВыборкаТоваров.Следующий() Цикл
						Запись                           = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
						Запись.ВидОбъектаМаркетплейса    = ВидОбъектаМаркетплейсаТовар;
						ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка"); 
						
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() Тогда
							КодОшибкиЗаданиеНеНайдено      = НРег(СтрЗаменить("Upload task not found", " ", "_"));
							ОписаниеОшибкиЗаданиеНеНайдено = НСтр("ru = 'Не найдено задание публикации. Рекомендуется выполнить импорт карточки товара из личного кабинета торговой площадки.'");
							
							Если СтрНайти(Запись.КодОшибки, КодОшибкиЗаданиеНеНайдено) = 0 Тогда
								Запись.КодОшибки      = КодОшибкиЗаданиеНеНайдено + ", " + Запись.КодОшибки;
								Запись.ОписаниеОшибки = ОписаниеОшибкиЗаданиеНеНайдено + Символы.ПС + Запись.ОписаниеОшибки;
								Запись.Записать();
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				Для Каждого ДанныеТовара Из ОтветСервиса.Результат Цикл
					СтруктураДанныхТовара = Новый Структура;
					СтруктураДанныхТовара.Вставить("status",     "");
					СтруктураДанныхТовара.Вставить("offer_id",   "");
					СтруктураДанныхТовара.Вставить("product_id", 0);
					СтруктураДанныхТовара.Вставить("errors",     Новый Массив);
					ЗаполнитьЗначенияСвойствИзСервиса(СтруктураДанныхТовара, ДанныеТовара);

					ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураДанныхТовара.status];
					Если ТекущееСостояние = Неопределено Тогда
						Продолжить;
					КонецЕсли;

					ВыборкаТоваров.Сбросить();

					Отбор = Новый Структура("ИдентификаторПубликации", СтруктураДанныхТовара.offer_id);
					Если ВыборкаТоваров.НайтиСледующий(Отбор) Тогда 
						ОписаниеОшибок = СобратьОписаниеОшибокСтатусаДобавления(СтруктураДанныхТовара.errors);

						Запись                           = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
						Запись.ВидОбъектаМаркетплейса    = ВидОбъектаМаркетплейсаТовар;
						ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка"); 
						
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() Тогда
							Запись.Статус            = ТекущееСостояние.Статус;
							Запись.Состояние         = ТекущееСостояние.Состояние;
							Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостояния;
							Запись.КодОшибки         = ОписаниеОшибок.КодОшибки;
							Запись.ОписаниеОшибки    = ОписаниеОшибок.ОписаниеОшибки;

							Если ЗначениеЗаполнено(СтруктураДанныхТовара.product_id) Тогда
								Запись.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(СтруктураДанныхТовара.product_id);
							КонецЕсли;

							Если ТекущееСостояние.ОчищатьЗаданиеПубликации Тогда
								Запись.ЗаданиеПубликации = "";
							КонецЕсли;

							Запись.Записать();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Выполняет обновление информации по публикуемым товарам при обновлении данных товарного каталога.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ВыполнитьОбновлениеИнформацииПоТоварам(УчетнаяЗаписьМаркетплейса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВЫБОР
		|		КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBOSKU = """"
		|			ТОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBSSKU
		|		ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBOSKU
		|	КОНЕЦ КАК ИдентификаторSKU
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации))
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса <> """"";

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	ВыборкаТоваров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		ПараметрыЗапроса                                  = НовыеПараметрыЗапросаПолученияИнформацииОТоваре();
		ПараметрыЗапроса.ИдентификаторПубликации          = ВыборкаТоваров.ИдентификаторПубликации;
		ПараметрыЗапроса.ИдентификаторОбъектаМаркетплейса = ВыборкаТоваров.ИдентификаторОбъектаМаркетплейса;
		ПараметрыЗапроса.ИдентификаторSKU                 = ВыборкаТоваров.ИдентификаторSKU;

		ИнформацияОТоваре = ПолучитьИнформациюОТовареИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		ОписаниеТовара    = ПолучитьКраткуюИнформациюОТовареИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);

		Если ИнформацияОТоваре <> Неопределено Тогда

			СтруктураИнформацииОТоваре = Новый Структура;
			СтруктураИнформацииОТоваре.Вставить("status",      Новый Структура);
			СтруктураИнформацииОТоваре.Вставить("created_at",  Дата(1,1,1));
			СтруктураИнформацииОТоваре.Вставить("sku",         0);
			СтруктураИнформацииОТоваре.Вставить("fbo_sku",     0);
			СтруктураИнформацииОТоваре.Вставить("fbs_sku",     0);
			СтруктураИнформацииОТоваре.Вставить("price_index", "");
			СтруктураИнформацииОТоваре.Вставить("sources",     Новый Массив);
			ЗаполнитьЗначенияСвойствИзСервиса(СтруктураИнформацииОТоваре, ИнформацияОТоваре);

			ДанныеИзСтатуса = ДанныеИзСтатуса(СтруктураИнформацииОТоваре.status, СоответствиеСостоянийПубликации);

			Запись                           = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			Запись.ВидОбъектаМаркетплейса    = ВидОбъектаМаркетплейсаТовар;
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка");
			
			Запись.ОбъектПубликации = Неопределено;
			Запись.Прочитать();

			Если Запись.Выбран() Тогда
				ДатаСозданияНаМаркетплейсе   = СтруктураИнформацииОТоваре.created_at;
				ДатаОбновленияНаМаркетплейсе = ДанныеИзСтатуса.ДатаОбновленияНаМаркетплейсе;

				Если ДатаСозданияНаМаркетплейсе <> Запись.ДатаСозданияНаМаркетплейсе
					Или ДатаОбновленияНаМаркетплейсе <> Запись.ДатаОбновленияНаМаркетплейсе Тогда
					ЗаписатьНабор = Истина;
				КонецЕсли;

				КодОшибкиЗаданиеНеНайдено      = НРег(СтрЗаменить("Upload task not found", " ", "_"));
				ОписаниеОшибкиЗаданиеНеНайдено = НСтр("ru = 'Не найдено задание публикации. Рекомендуется выполнить импорт карточки товара из личного кабинета торговой площадки.'");
				
				Если СтрНайти(Запись.КодОшибки, КодОшибкиЗаданиеНеНайдено) > 0 Тогда
					Запись.КодОшибки      = КодОшибкиЗаданиеНеНайдено + ", " + ДанныеИзСтатуса.КодОшибки;
					Запись.ОписаниеОшибки = ОписаниеОшибкиЗаданиеНеНайдено + Символы.ПС + ДанныеИзСтатуса.ОписаниеОшибки;
				ИначеЕсли Не ПустаяСтрока(Запись.КодОшибки) Тогда
					// На этапе проверки задания публикации была заполнена ошибка, и ее нужно сохранить.
					Запись.КодОшибки = Запись.КодОшибки
						+ ?(ПустаяСтрока(ДанныеИзСтатуса.КодОшибки), "", Символы.ПС + ДанныеИзСтатуса.КодОшибки);
					Запись.ОписаниеОшибки = Запись.ОписаниеОшибки
						+ ?(ПустаяСтрока(ДанныеИзСтатуса.КодОшибки), "", Символы.ПС + ДанныеИзСтатуса.ОписаниеОшибки);
				Иначе
					Запись.КодОшибки      = ДанныеИзСтатуса.КодОшибки;
					Запись.ОписаниеОшибки = ДанныеИзСтатуса.ОписаниеОшибки;
				КонецЕсли;
				
				Запись.ДатаСозданияНаМаркетплейсе   = ДатаСозданияНаМаркетплейсе;
				Запись.ДатаОбновленияНаМаркетплейсе = ДатаОбновленияНаМаркетплейсе;
				Запись.ИдентификаторFBOSKU          = ?(ЗначениеЗаполнено(СтруктураИнформацииОТоваре.sku), 
															ЧислоВСтроку(СтруктураИнформацииОТоваре.sku), 
															?(ЗначениеЗаполнено(СтруктураИнформацииОТоваре.fbo_sku), ЧислоВСтроку(СтруктураИнформацииОТоваре.fbo_sku), ""));
				Запись.ИдентификаторFBSSKU          = ?(ЗначениеЗаполнено(СтруктураИнформацииОТоваре.sku), 
															ЧислоВСтроку(СтруктураИнформацииОТоваре.sku), 
															?(ЗначениеЗаполнено(СтруктураИнформацииОТоваре.fbs_sku), ЧислоВСтроку(СтруктураИнформацииОТоваре.fbs_sku), ""));
				Запись.ЦеновойИндекс                = СтруктураИнформацииОТоваре.price_index;

				Если Запись.Статус <> ДанныеИзСтатуса.ТекущееСостояние.Статус Тогда
					ЗаписатьНабор = Истина;
				КонецЕсли;

				Если Не (ПустаяСтрока(Запись.ИдентификаторFBOSKU) И ПустаяСтрока(Запись.ИдентификаторFBSSKU)) Тогда
					ЗаписатьНабор = Истина;
				КонецЕсли;

				Запись.Статус            = ДанныеИзСтатуса.ТекущееСостояние.Статус;
				Запись.Состояние         = ДанныеИзСтатуса.ТекущееСостояние.Состояние;
				Запись.ОписаниеСостояния = ДанныеИзСтатуса.ТекущееСостояние.ОписаниеСостояния;

				МассивИсточниковСхожихПредложений = Новый Массив;

				Для Каждого ИсточникПредложения Из СтруктураИнформацииОТоваре.sources Цикл
					СтруктураИсточникаПредложения = Новый Структура;
					СтруктураИсточникаПредложения.Вставить("sku",        0);
					СтруктураИсточникаПредложения.Вставить("is_enabled", Ложь);
					СтруктураИсточникаПредложения.Вставить("source",     "");
					ЗаполнитьЗначенияСвойствИзСервиса(СтруктураИсточникаПредложения, ИсточникПредложения);

					ИсточникиСхожихПредложений = Новый Структура;
					ИсточникиСхожихПредложений.Вставить("УчитываетсяПриРасчетеРыночногоЗначения", СтруктураИсточникаПредложения.is_enabled);
					ИсточникиСхожихПредложений.Вставить("ИдентификаторSKU",                       ЧислоВСтроку(СтруктураИсточникаПредложения.sku));
					ИсточникиСхожихПредложений.Вставить("СсылкаНаТовар",                          СтруктураИсточникаПредложения.source);

					МассивИсточниковСхожихПредложений.Добавить(ИсточникиСхожихПредложений);
				КонецЦикла;

				Если МассивИсточниковСхожихПредложений.Количество() > 0 Тогда
					Запись.ИсточникиСхожихПредложений = Новый ХранилищеЗначения(МассивИсточниковСхожихПредложений);
				Иначе
					Запись.ИсточникиСхожихПредложений = Неопределено;
				КонецЕсли;

				Если ОписаниеТовара <> Неопределено Тогда
					СтруктураОписанияТовара = Новый Структура;
					СтруктураОписанияТовара.Вставить("name",        "");
					СтруктураОписанияТовара.Вставить("description", "");
					ЗаполнитьЗначенияСвойствИзСервиса(СтруктураОписанияТовара, ОписаниеТовара);

					Описание = ?(ПустаяСтрока(СтруктураОписанияТовара.description), Запись.ОписаниеОбъектаМаркетплейса, СтруктураОписанияТовара.description);
					Запись.ОписаниеОбъектаМаркетплейса = Описание;

					Название = ?(ПустаяСтрока(СтруктураОписанияТовара.name), Запись.ПредставлениеОбъектаМаркетплейса, СтруктураОписанияТовара.name);
					Запись.ПредставлениеОбъектаМаркетплейса = Название;
				КонецЕсли;

				Если ДанныеИзСтатуса.ТекущееСостояние.ОчищатьЗаданиеПубликации Тогда
					Запись.ЗаданиеПубликации = "";
				КонецЕсли;

				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет таблицу описания товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаОписанияТоваров    - ТаблицаЗначений - описания товаров, см. НоваяТаблицаОписанияТоваров.
//   ОтветСервиса              - Массив Из см. НовыйРезультатИзСервиса - информация о списке товаров из сервиса Ozon,
//                                 см. ПолучитьОписаниеТоваровИзСервиса.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов        - Соответствие Из КлючИЗначение - кэш идентификаторов (связь между идентификаторами 
//                                 публикации и идентификаторами Ozon).
//
Процедура ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, 
			КэшКатегорий, КэшИдентификаторов)

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
		НоваяСтрока = ТаблицаОписанияТоваров.Добавить();
		
		sku = Неопределено;
		Если ТипЗнч(ЭлементОтветаСервиса) = Тип("Структура") Тогда
			ЭлементОтветаСервиса.Свойство("sku", sku);
		Иначе
			sku = ЭлементОтветаСервиса.Получить("sku");
		КонецЕсли;
		
		fbo_sku = Неопределено;
		Если ТипЗнч(ЭлементОтветаСервиса) = Тип("Структура") Тогда
			ЭлементОтветаСервиса.Свойство("fbo_sku", fbo_sku);
		Иначе
			fbo_sku = ЭлементОтветаСервиса.Получить("fbo_sku");
		КонецЕсли;
		
		fbs_sku = Неопределено;
		Если ТипЗнч(ЭлементОтветаСервиса) = Тип("Структура") Тогда
			ЭлементОтветаСервиса.Свойство("fbs_sku", fbs_sku);
		Иначе
			fbs_sku = ЭлементОтветаСервиса.Получить("fbs_sku");
		КонецЕсли;
		
		// Основные      
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Товар;
		НоваяСтрока.ИдентификаторПубликации          = ЧислоВСтроку(ЭлементОтветаСервиса["offer_id"]);
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = КэшИдентификаторов.Получить(НоваяСтрока.ИдентификаторПубликации);
		НоваяСтрока.ИдентификаторFBOSKU              = ?(ЗначениеЗаполнено(sku), 
															ЧислоВСтроку(sku), 
															?(ЗначениеЗаполнено(fbo_sku), ЧислоВСтроку(ЭлементОтветаСервиса["fbo_sku"]), ""));
		НоваяСтрока.ИдентификаторFBSSKU              = ?(ЗначениеЗаполнено(sku), 
															ЧислоВСтроку(sku), 
															?(ЗначениеЗаполнено(fbs_sku), ЧислоВСтроку(ЭлементОтветаСервиса["fbs_sku"]), ""));
		НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементОтветаСервиса["name"];
		НоваяСтрока.ОписаниеОбъектаМаркетплейса      = "";
		НоваяСтрока.Штрихкод                         = СтрСоединить(ЭлементОтветаСервиса["barcodes"], ";");
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторОбъектаМаркетплейса) Тогда
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
			Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторПубликации) Тогда
				КэшИдентификаторов.Вставить(НоваяСтрока.ИдентификаторПубликации, НоваяСтрока.ИдентификаторОбъектаМаркетплейса);
			КонецЕсли;
		КонецЕсли;
		
		// Категория маркетплейса
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["description_category_id"])
			+ "_" + ЧислоВСтроку(ЭлементОтветаСервиса["type_id"]);
		НоваяСтрока.НаименованиеКатегорииМаркетплейса = ОпределитьНаименованиеКатегорииИТипаТоваров(
			НоваяСтрока.ИдентификаторКатегорииМаркетплейса, 
			КэшКатегорий, 
			УчетнаяЗаписьМаркетплейса);
		
		// Ценовые показатели
		НоваяСтрока.ЦеновойИндекс         = ЭлементОтветаСервиса["price_index"];
		НоваяСтрока.ЦенаДоСкидки          = СтрокаВЧисло(ЭлементОтветаСервиса["old_price"]);
		НоваяСтрока.ЦенаСоСкидкой         = СтрокаВЧисло(ЭлементОтветаСервиса["price"]);
		НоваяСтрока.МинимальнаяЦена       = СтрокаВЧисло(ЭлементОтветаСервиса["min_price"]);
		НоваяСтрока.ЦенаНаВитрине         = СтрокаВЧисло(ЭлементОтветаСервиса["marketing_price"]);
		НоваяСтрока.ЦенаПремиальная       = СтрокаВЧисло(ЭлементОтветаСервиса["premium_price"]);
		НоваяСтрока.ЦенаРекомендованная   = СтрокаВЧисло(ЭлементОтветаСервиса["recommended_price"]);
		НоваяСтрока.КодВалюты             = ЭлементОтветаСервиса["currency_code"]; 
		НоваяСтрока.СтавкаНДС             = СтрокаВЧисло(ЭлементОтветаСервиса["vat"]) * 100;
		НоваяСтрока.УцененныйТовар        = ЭлементОтветаСервиса["is_discounted"];
		НоваяСтрока.ЕстьУцененныеАналоги  = ЭлементОтветаСервиса["has_discounted_item"];
		НоваяСтрока.ПредоплатаОбязательна = ЭлементОтветаСервиса["is_prepayment"];
		НоваяСтрока.ПредоплатаВозможна    = ЭлементОтветаСервиса["is_prepayment_allowed"];
		
		// Статус публикации	
		ДанныеИзСтатуса = ДанныеИзСтатуса(ЭлементОтветаСервиса["status"], СоответствиеСостоянийПубликации);
		
		НоваяСтрока.ЗаданиеПубликации            = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
		НоваяСтрока.Статус                       = ДанныеИзСтатуса.ТекущееСостояние.Статус;
		НоваяСтрока.Состояние                    = ДанныеИзСтатуса.ТекущееСостояние.Состояние;
		НоваяСтрока.ОписаниеСостояния            = ДанныеИзСтатуса.ТекущееСостояние.ОписаниеСостояния;
		НоваяСтрока.КодОшибки                    = ДанныеИзСтатуса.КодОшибки;
		НоваяСтрока.ОписаниеОшибки               = ДанныеИзСтатуса.ОписаниеОшибки;
		НоваяСтрока.ВыставленНаПродажу           = ЭлементОтветаСервиса["visible"];
		НоваяСтрока.ДатаОбновленияНаМаркетплейсе = ДанныеИзСтатуса.ДатаОбновленияНаМаркетплейсе;
		
		// Прочее    
		НоваяСтрока.ДатаСозданияНаМаркетплейсе   = ЭлементОтветаСервиса["created_at"];
		НоваяСтрока.ДатаОбновленияНаМаркетплейсе = ?(НоваяСтрока.ДатаОбновленияНаМаркетплейсе = Дата(1,1,1), ЭлементОтветаСервиса["updated_at"], ДанныеИзСтатуса.ДатаОбновленияНаМаркетплейсе);
		НоваяСтрока.МаркетинговыйЦвет            = ЭлементОтветаСервиса["color_image"];
		НоваяСтрока.КрупногабаритныйТовар        = ЭлементОтветаСервиса["is_kgt"];
		НоваяСтрока.ОбъемныйВес                  = ЭлементОтветаСервиса["volume_weight"];
		
		НоваяСтрока.ИнформацияОКомиссиях = НоваяТаблицаИнформацияОКомиссиях();
		Если ЭлементОтветаСервиса["commissions"] <> Неопределено Тогда
			Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["commissions"] Цикл
				НоваяИнформацияОКомиссиях                     = НоваяСтрока.ИнформацияОКомиссиях.Добавить();
				НоваяИнформацияОКомиссиях.СхемаПродажи        = ЭлементКоллекции["saleSchema"];
				НоваяИнформацияОКомиссиях.ПроцентКомиссии     = ЭлементКоллекции["percent"];
				НоваяИнформацияОКомиссиях.СуммаКомиссии       = ЭлементКоллекции["value"];
				НоваяИнформацияОКомиссиях.МинимальнаяКомиссия = ЭлементКоллекции["minValue"];
				НоваяИнформацияОКомиссиях.СтоимостьДоставки   = ЭлементКоллекции["deliveryAmount"];
				НоваяИнформацияОКомиссиях.СтоимостьВозврата   = ЭлементКоллекции["returnAmount"];
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.ИсточникиСхожихПредложений = НоваяТаблицаИсточникиСхожихПредложений();
		Если ЭлементОтветаСервиса["commissions"] <> Неопределено Тогда
			Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["sources"] Цикл
				НовыйИсточникСхожихПредложений                                        = НоваяСтрока.ИсточникиСхожихПредложений.Добавить();
				НовыйИсточникСхожихПредложений.СхемаПродажи                           = ЭлементКоллекции["source"];
				НовыйИсточникСхожихПредложений.ИдентификаторSKU                       = ЧислоВСтроку(ЭлементКоллекции["sku"]);
				НовыйИсточникСхожихПредложений.УчитываетсяПриРасчетеРыночногоЗначения = ЭлементКоллекции["is_enabled"];
			КонецЦикла;
		КонецЕсли;
		
		// Остатки товара
		НоваяСтрока.ОстаткиТовара_ВНаличии        = ЭлементОтветаСервиса["stocks"]["present"];
		НоваяСтрока.ОстаткиТовара_Зарезервировано = ЭлементОтветаСервиса["stocks"]["reserved"];
		НоваяСтрока.ОстаткиТовара_Ожидается       = ЭлементОтветаСервиса["stocks"]["coming"];
		
		// Изображения
		НоваяСтрока.Изображения = НоваяТаблицаИзображений();
		
		Если ЗначениеЗаполнено(ЭлементОтветаСервиса["primary_image"]) Тогда
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = НоваяСтрока.Изображения.Количество();
			НовоеИзображение.ПутьКФайлу          = ЭлементОтветаСервиса["primary_image"];
			НовоеИзображение.ОсновноеИзображение = Истина;
			НовоеИзображение.Изображение360      = Ложь;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = НоваяСтрока.Изображения.Количество();
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции;
			НовоеИзображение.ОсновноеИзображение = (НовоеИзображение.Порядок = 1);
			НовоеИзображение.Изображение360      = Ложь;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images360"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = НоваяСтрока.Изображения.Количество();
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции;
			НовоеИзображение.ОсновноеИзображение = Ложь;
			НовоеИзображение.Изображение360      = Истина;
		КонецЦикла;
		
		// Схемы продаж
		НоваяСтрока.ПродаетсяПоСхемеРаботыFBO = Истина;
		НоваяСтрока.ПродаетсяПоСхемеРаботыFBS = Ложь;
		НоваяСтрока.ПродаетсяПоСхемеРаботыDBS = Ложь;

	КонецЦикла;

КонецПроцедуры

// Получает таблицу описания товаров, полученных из сервиса.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ПараметрыЗапроса          - см. НовыеПараметрыЗапросаПолученияОписанияТоваров.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов        - Соответствие Из КлючИЗначение - кэш идентификаторов (связь между идентификаторами 
//                                 публикации и идентификаторами Ozon).
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОписанияТоваров.
//
Функция ПолучитьОписаниеТоваров(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, КэшКатегорий, 
			КэшИдентификаторов = Неопределено, Отказ = Ложь) Экспорт

	ТаблицаОписанияТоваров = НоваяТаблицаОписанияТоваров();
	
	Если КэшИдентификаторов = Неопределено Тогда
		КэшИдентификаторов = Новый Соответствие;
	КонецЕсли;

	ИдентификаторыПубликации           = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса.ИдентификаторыПубликации);
	ИдентификаторыОбъектовМаркетплейса = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса);
	ИдентификаторыSKU                  = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса.ИдентификаторыSKU);
	Порция                             = Новый Массив;
	
	Если ИдентификаторыПубликации <> Неопределено Тогда
		Для Каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
			Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
				ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
				
				ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
					
				Если ОтветСервиса = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;

			Порция.Добавить(ЭлементПорции);
		КонецЦикла;
		
		Если Не Отказ
		 	 	И Порция.Количество() > 0 Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
			ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
			ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
			
			ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
			Иначе
				ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
			КонецЕсли;
		КонецЕсли;   
	КонецЕсли;
	
	Если ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		Для Каждого ЭлементПорции Из ИдентификаторыОбъектовМаркетплейса Цикл
			Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
				ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
				
				ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
					
				Если ОтветСервиса = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;

			Порция.Добавить(ЭлементПорции);
		КонецЦикла;
		
		Если Не Отказ
		     	И Порция.Количество() > 0 Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
			ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
			ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
			
			ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
			Иначе
				ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторыSKU <> Неопределено Тогда
		Для Каждого ЭлементПорции Из ИдентификаторыSKU Цикл
			Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				ПараметрыЗапроса.ИдентификаторыSKU                  = Порция;
				
				ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
					
				Если ОтветСервиса = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;

			Порция.Добавить(ЭлементПорции);
		КонецЦикла;
		
		Если Не Отказ
		     	И Порция.Количество() > 0 Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
			ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
			ПараметрыЗапроса.ИдентификаторыSKU                  = Порция;
			
			ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
			Иначе
				ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаОписанияТоваров;

КонецФункции

// Заполняет таблицу описания характеристик товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаОписанияХарактеристикТоваров - ТаблицаЗначений - описания характеристик товаров, 
//                                           см. НоваяТаблицаОписанияХарактеристикТоваров.
//   ТаблицаСлужебныхАтрибутов           - ТаблицаЗначений - служебные атрибуты, 
//                                           см. НоваяТаблицаЗначенийАтрибутаКатегории.
//   ОтветСервиса                        - Массив Из см. НовыйРезультатИзСервиса - информация о списке товаров из сервиса Ozon,
//                                           см. ПолучитьОписаниеХарактеристикТовараИзСервиса.
//   ФильтрВидимости                     - Строка - фильтр по видимости товара.
//   УчетнаяЗаписьМаркетплейса           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                           к сервису.
//   КэшКатегорий                        - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов                  - Соответствие Из КлючИЗначение - кэш идентификаторов (связь между идентификаторами 
//                                           публикации и идентификаторами Ozon).
//
Процедура ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(ТаблицаОписанияХарактеристикТоваров, 
			ТаблицаСлужебныхАтрибутов, ОтветСервиса, ФильтрВидимости, УчетнаяЗаписьМаркетплейса, КэшКатегорий, 
			КэшИдентификаторов)

	ИдентификаторАтрибута_ТипТовара = СтрокаВЧисло(ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"]);
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
		ИдентификаторТипаТоваров = "";
		
		Для Каждого Атрибут Из ЭлементОтветаСервиса["attributes"] Цикл
			Для Каждого ЗначениеАтрибута Из Атрибут["values"] Цикл
				Если Атрибут["attribute_id"] = ИдентификаторАтрибута_ТипТовара Тогда
					ИдентификаторТипаТоваров = ЧислоВСтроку(ЗначениеАтрибута["dictionary_value_id"]);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ИдентификаторТипаТоваров) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НоваяСтрока                    				   = ТаблицаОписанияХарактеристикТоваров.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса 		   = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации			   = ЧислоВСтроку(ЭлементОтветаСервиса["offer_id"]);
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса   = КэшИдентификаторов.Получить(НоваяСтрока.ИдентификаторПубликации);
		НоваяСтрока.ФильтрВидимости                    = ФильтрВидимости;
		НоваяСтрока.Штрихкод                  		   = ЭлементОтветаСервиса["barcode"];
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["description_category_id"])
			+ "_" + ИдентификаторТипаТоваров;
		
		НаименованиеКатегорииМаркетплейса = ОпределитьНаименованиеКатегорииИТипаТоваров(
			НоваяСтрока.ИдентификаторКатегорииМаркетплейса, 
			КэшКатегорий, 
			УчетнаяЗаписьМаркетплейса);
		
		// Значения реквизитов 
		НоваяСтрока.ЗначенияАтрибутов = НоваяТаблицаЗначенийРеквизитов(Истина);
		
		Для Каждого Атрибут Из ЭлементОтветаСервиса["attributes"] Цикл
			Для Каждого ЗначениеАтрибута Из Атрибут["values"] Цикл
				НовоеЗначение                                           = НоваяСтрока.ЗначенияАтрибутов.Добавить();
				НовоеЗначение.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
				НовоеЗначение.ИдентификаторКатегорииМаркетплейса        = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
				НовоеЗначение.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегорииМаркетплейса;
				НовоеЗначение.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(Атрибут["complex_id"]);
				НовоеЗначение.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = '<Группа атрибутов не определена>'");
				НовоеЗначение.ИдентификаторАтрибутаМаркетплейса         = ЧислоВСтроку(Атрибут["attribute_id"]);
				НовоеЗначение.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = '<Атрибут не определен>'");
				НовоеЗначение.ЗначениеАтрибутаМаркетплейса              = ЗначениеАтрибута["value"];
				НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса = ЧислоВСтроку(ЗначениеАтрибута["dictionary_value_id"]);
				НовоеЗначение.НеЗаполненАтрибут                         = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
				НовоеЗначение.УстановленоЗначениеПоУмолчанию            = Ложь;
				НовоеЗначение.ЗначениеАтрибутаЗаданоПользователем       = Истина;
				
				Если Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса)
						И ЗначениеЗаполнено(НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
					ТаблицаАтрибутов  = Неопределено;
					ИдентификаторКэша = "АтрибутКатегории_" + НовоеЗначение.ИдентификаторКатегорииМаркетплейса + "_" + НовоеЗначение.ИдентификаторАтрибутаМаркетплейса;
					
					Если КэшКатегорий.Свойство(ИдентификаторКэша, ТаблицаАтрибутов) Тогда
						Для Каждого ЭлементКоллекции Из ТаблицаАтрибутов Цикл
							Если ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса = НовоеЗначение.ИдентификаторКатегорииМаркетплейса
									И ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса = НовоеЗначение.ИдентификаторАтрибутаМаркетплейса
									И ЭлементКоллекции.ИдентификаторЗначенияАтрибута = НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
								НовоеЗначение.ЗначениеАтрибутаМаркетплейса = ЭлементКоллекции.ЗначениеАтрибута;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						Отказ             = Ложь;
						ПараметрыЗапросаА = НовыеПараметрыЗапросаЗначенийАтрибута(НовоеЗначение.ИдентификаторКатегорииМаркетплейса, НовоеЗначение.ИдентификаторАтрибутаМаркетплейса);
						ТаблицаАтрибутов  = ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапросаА, Отказ);
			
						Если Не Отказ Тогда
							Отбор = Новый Структура;
							Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", НовоеЗначение.ИдентификаторКатегорииМаркетплейса);
							Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  НовоеЗначение.ИдентификаторАтрибутаМаркетплейса);
							Отбор.Вставить("ИдентификаторЗначенияАтрибута",      НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса);
							
							НайденныеСтроки = ТаблицаАтрибутов.НайтиСтроки(Отбор);
							Если НайденныеСтроки.Количество() > 0 Тогда
								НовоеЗначение.ЗначениеАтрибутаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибута;
							КонецЕсли;
							
							КэшКатегорий.Вставить(ИдентификаторКэша, ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов));
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса) Тогда
						НовоеЗначение.ЗначениеАтрибутаМаркетплейса = НСтр("ru = '<не определено>'");
					КонецЕсли;

					НовоеЗначение.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		Для Каждого КомплексныйАтрибут Из ЭлементОтветаСервиса["complex_attributes"] Цикл
			Для Каждого Атрибут Из КомплексныйАтрибут["attributes"] Цикл
				Для Каждого ЗначениеАтрибута Из Атрибут["values"] Цикл
					НовоеЗначение                                           = НоваяСтрока.ЗначенияАтрибутов.Добавить();
					НовоеЗначение.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
					НовоеЗначение.ИдентификаторКатегорииМаркетплейса        = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
					НовоеЗначение.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегорииМаркетплейса;
					НовоеЗначение.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(Атрибут["complex_id"]);
					НовоеЗначение.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = '<Группа атрибутов не определена>'");
					НовоеЗначение.ИдентификаторАтрибутаМаркетплейса         = ЧислоВСтроку(Атрибут["attribute_id"]);
					НовоеЗначение.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = '<Атрибут не определен>'");
					НовоеЗначение.ЗначениеАтрибутаМаркетплейса              = ЗначениеАтрибута["value"];
					НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса = ЧислоВСтроку(ЗначениеАтрибута["dictionary_value_id"]);
					НовоеЗначение.НеЗаполненАтрибут                         = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
					НовоеЗначение.УстановленоЗначениеПоУмолчанию            = Ложь;
					НовоеЗначение.ЗначениеАтрибутаЗаданоПользователем       = Истина;
					
					Если Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса)
							И ЗначениеЗаполнено(НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
						ТаблицаАтрибутов  = Неопределено;
						ИдентификаторКэша = "АтрибутКатегории_" + НовоеЗначение.ИдентификаторКатегорииМаркетплейса + "_" + НовоеЗначение.ИдентификаторАтрибутаМаркетплейса;
						
						Если КэшКатегорий.Свойство(ИдентификаторКэша, ТаблицаАтрибутов) Тогда
							Для Каждого ЭлементКоллекции Из ТаблицаАтрибутов Цикл
								Если ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса = НовоеЗначение.ИдентификаторКатегорииМаркетплейса
										И ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса = НовоеЗначение.ИдентификаторАтрибутаМаркетплейса
										И ЭлементКоллекции.ИдентификаторЗначенияАтрибута = НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
									НовоеЗначение.ЗначениеАтрибутаМаркетплейса = ЭлементКоллекции.ЗначениеАтрибута;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							Отказ             = Ложь;
							ПараметрыЗапросаА = НовыеПараметрыЗапросаЗначенийАтрибута(НовоеЗначение.ИдентификаторКатегорииМаркетплейса, НовоеЗначение.ИдентификаторАтрибутаМаркетплейса);
							ТаблицаАтрибутов  = ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапросаА, Отказ);
				
							Если Не Отказ Тогда
								Отбор = Новый Структура;
								Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", НовоеЗначение.ИдентификаторКатегорииМаркетплейса);
								Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  НовоеЗначение.ИдентификаторАтрибутаМаркетплейса);
								Отбор.Вставить("ИдентификаторЗначенияАтрибута",      НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса);
								
								НайденныеСтроки = ТаблицаАтрибутов.НайтиСтроки(Отбор);
								Если НайденныеСтроки.Количество() > 0 Тогда
									НовоеЗначение.ЗначениеАтрибутаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибута;
								КонецЕсли;
								
								КэшКатегорий.Вставить(ИдентификаторКэша, ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов));
							КонецЕсли;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса) Тогда
							НовоеЗначение.ЗначениеАтрибутаМаркетплейса = НСтр("ru = '<не определено>'");
						КонецЕсли;

						НовоеЗначение.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		// Весогабаритные характеристики в атрибуты
		Для Каждого ЭлементКоллекции Из НовыеСлужебныеАтрибутыСНаименованиями() Цикл
			ЗначенияСлужебныхАтрибутов = ТаблицаСлужебныхАтрибутов.НайтиСтроки(
				Новый Структура("ИдентификаторАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибута", ЭлементКоллекции.Идентификатор, ЭлементОтветаСервиса[ЭлементКоллекции.Идентификатор]));
			
			НовоеЗначение                                           = НоваяСтрока.ЗначенияАтрибутов.Добавить();
			НовоеЗначение.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
			НовоеЗначение.ИдентификаторКатегорииМаркетплейса        = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
			НовоеЗначение.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегорииМаркетплейса;
			НовоеЗначение.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
			НовоеЗначение.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
			НовоеЗначение.ИдентификаторАтрибутаМаркетплейса         = ЭлементКоллекции.Идентификатор;
			НовоеЗначение.НаименованиеАтрибутаМаркетплейса          = ЭлементКоллекции.Наименование;
			НовоеЗначение.ЗначениеАтрибутаМаркетплейса              = ?(ЗначенияСлужебныхАтрибутов.Количество() > 0, ЗначенияСлужебныхАтрибутов[0].ЗначениеАтрибута, ЭлементОтветаСервиса[ЭлементКоллекции.Идентификатор]);
			НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса = ?(ЗначенияСлужебныхАтрибутов.Количество() > 0, ЗначенияСлужебныхАтрибутов[0].ИдентификаторЗначенияАтрибута, "");
			НовоеЗначение.НеЗаполненАтрибут                         = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
			НовоеЗначение.УстановленоЗначениеПоУмолчанию            = Ложь;
			НовоеЗначение.ЗначениеАтрибутаЗаданоПользователем       = Истина;
		КонецЦикла;
		
		// Изображения
		НоваяСтрока.Изображения = НоваяТаблицаИзображений();
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = ЭлементКоллекции["index"];
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции["file_name"];
			НовоеИзображение.ОсновноеИзображение = ЭлементКоллекции["default"];
			НовоеИзображение.Изображение360      = Ложь;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images360"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = ЭлементКоллекции["index"];
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции["file_name"];
			НовоеИзображение.ОсновноеИзображение = Ложь;
			НовоеИзображение.Изображение360      = Истина;
		КонецЦикла;
		
		// Документы PDF
		НоваяСтрока.ДокументыPDF = НоваяТаблицаДокументовPDF();
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["pdf_list"] Цикл
			НовыйДокумент              = НоваяСтрока.ДокументыPDF.Добавить();
			НовыйДокумент.Порядок      = ЭлементКоллекции["index"];
			НовыйДокумент.Наименование = ЭлементКоллекции["name"];
			НовыйДокумент.ПутьКФайлу   = ЭлементКоллекции["file_name"];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Получает таблицу описания характеристик товаров, полученных из сервиса, с учетом установленного отбора.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоТоварам           - см. НовыйФильтрЗапросаПоТоварам.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов        - Соответствие Из КлючИЗначение - кэш идентификаторов (связь между идентификаторами 
//                                 публикации и идентификаторами Ozon).
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОписанияХарактеристикТоваров.
//
Функция ПолучитьОписаниеХарактеристикТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, КэшКатегорий, 
			КэшИдентификаторов = Неопределено, Отказ = Ложь) Экспорт

	ТаблицаОписанияХарактеристикТоваров = НоваяТаблицаОписанияХарактеристикТоваров();
	
	Если КэшИдентификаторов = Неопределено Тогда
		КэшИдентификаторов = Новый Соответствие;
	КонецЕсли;

	ПараметрыЗапроса          = НовыеПараметрыЗапросаЗначенийАтрибута(, "СлужебныеАтрибуты");
	ТаблицаСлужебныхАтрибутов = ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
	
	ФильтрыВидимости                   = ЗначениеВМассив(ФильтрПоТоварам.ФильтрВидимости);
	ИдентификаторыПубликации           = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыПубликации);
	ИдентификаторыОбъектовМаркетплейса = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса);
	
	Для Каждого ЭлементФильтра Из ФильтрыВидимости Цикл
		ПараметрыЗапроса                 = НовыеПараметрыЗапросаПолученияОписанияХарактеристикТоваров(ФильтрПоТоварам);
		ПараметрыЗапроса.ФильтрВидимости = ЭлементФильтра;
		Порция 							 = Новый Массив;
		
		Если ИдентификаторыПубликации <> Неопределено Тогда
			Для Каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
					
					ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
							ТаблицаОписанияХарактеристикТоваров, 
							ТаблицаСлужебныхАтрибутов,
							ОтветСервиса, 
							ЭлементФильтра,
							УчетнаяЗаписьМаркетплейса, 
							КэшКатегорий, 
							КэшИдентификаторов);
					КонецЕсли;
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если Не Отказ
		 		 	И Порция.Количество() > 0 Тогда
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				
				ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
						ТаблицаОписанияХарактеристикТоваров, 
						ТаблицаСлужебныхАтрибутов,
						ОтветСервиса, 
						ЭлементФильтра,
						УчетнаяЗаписьМаркетплейса, 
						КэшКатегорий, 
						КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;

		Если ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
			Для Каждого ЭлементПорции Из ИдентификаторыОбъектовМаркетплейса Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
					
					ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
							ТаблицаОписанияХарактеристикТоваров, 
							ТаблицаСлужебныхАтрибутов,
							ОтветСервиса, 
							ЭлементФильтра,
							УчетнаяЗаписьМаркетплейса, 
							КэшКатегорий, 
							КэшИдентификаторов);
					КонецЕсли;
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если Не Отказ
		 		 	И Порция.Количество() > 0 Тогда
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
				
				ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
						ТаблицаОписанияХарактеристикТоваров, 
						ТаблицаСлужебныхАтрибутов,
						ОтветСервиса, 
						ЭлементФильтра,
						УчетнаяЗаписьМаркетплейса, 
						КэшКатегорий, 
						КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаОписанияХарактеристикТоваров;

КонецФункции

// Выполняет заполнение атрибутов товаров согласно установленным пользователем правилам соответствия реквизитов 1С 
// атрибутам маркетплейса.
//
// Параметры:
//   ИсточникДанныхТоваров - ТаблицаЗначений - данные публикуемых товаров, см. НоваяТаблицаПубликацииТоваров.
//						   - МенеджерВременныхТаблиц - менеджер временных таблиц с таблицей ДанныеПубликации.
//	 ПараметрыЗаполнения   - Структура - список параметров, используемых при заполнении данных публикуемого товара,
//						       см. НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров.
//
// Возвращаемое значение:
//	 См. НоваяТаблицаПубликацииТоваров.
//
Функция ПодготовитьДанныеПубликуемыхТоваров(ИсточникДанныхТоваров, ПараметрыЗаполнения)

	ДляПубликации = ПараметрыЗаполнения.ДляПубликации;

	Если Не ДляПубликации Тогда
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.ПодготовитьДанныеПубликуемыхТоваров");
	КонецЕсли;

	ПроверятьСоставАтрибутов      = ПараметрыЗаполнения.ПроверятьСоставАтрибутов;
	ПолучитьАтрибуты              = ПараметрыЗаполнения.ПолучитьАтрибуты;
	ПолучитьИзображения           = ПараметрыЗаполнения.ПолучитьИзображения;
	ПолучитьСертификаты           = ПараметрыЗаполнения.ПолучитьСертификаты;
	ОбновитьДанные                = ПараметрыЗаполнения.ОбновитьДанные;
	ОбновитьКатегориюМаркетплейса = ПараметрыЗаполнения.ОбновитьКатегориюМаркетплейса;
	ПроверитьОшибкиЗаполнения     = ПараметрыЗаполнения.ПроверитьОшибкиЗаполнения;

	СоздаватьЗаписиВДанныхПубликации     = Ложь;
	ЕстьКолонкаУчетнаяЗаписьМаркетплейса = Ложь;

	Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		ДанныеПубликации = ИсточникДанныхТоваров;
		ЕстьКолонкаУчетнаяЗаписьМаркетплейса = ИсточникДанныхТоваров.Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено;
	ИначеЕсли ТипЗнч(ИсточникДанныхТоваров) = Тип("МенеджерВременныхТаблиц") Тогда
		ДанныеПубликации = НоваяТаблицаПубликацииТоваров();
		СоздаватьЗаписиВДанныхПубликации = Истина;
		ЕстьКолонкаУчетнаяЗаписьМаркетплейса =
				(ИсточникДанныхТоваров.Таблицы.Получить("ДанныеПубликации").Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено);
	Иначе
		Возврат НоваяТаблицаПубликацииТоваров();
	КонецЕсли;

	ДанныеПубликации.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");

	ЗаполненаТаблицаАтрибутов = Истина;

	Если ОбновитьДанные Тогда
		Ответ = ПолучитьДанныеЗначенийАтрибутов(ИсточникДанныхТоваров);
		ТаблицаДанныхАтрибутов = Ответ.ТаблицаДанныхАтрибутов;

		Если ТаблицаДанныхАтрибутов = Неопределено Тогда
			ЗаполненаТаблицаАтрибутов = Ложь;

			Если ТипЗнч(ИсточникДанныхТоваров) = Тип("МенеджерВременныхТаблиц") Тогда
				ВыборкаДанныхПубликации = ИсточникДанныхТоваров.Таблицы.Получить("ДанныеПубликации").ПолучитьДанные().Выбрать();
				Пока ВыборкаДанныхПубликации.Следующий() Цикл
					СтрокаТовара = ДанныеПубликации.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаДанныхПубликации);
				КонецЦикла; 
				
				СоздаватьЗаписиВДанныхПубликации = Ложь;
			КонецЕсли;

			ТаблицаДанныхАтрибутов = ДанныеПубликации;
			
		Иначе
			// Корректировка полученных из реквизитов 1С весогабаритных характеристик
			ВесогабаритныеХарактеристики = ПутьКРеквизитам1СПоУмолчанию();
			
			Для Каждого КлючИЗначениеЕдиницыИзмерения Из ВесогабаритныеХарактеристики Цикл
				СписокВыбораЕдиницыИзмерения = Неопределено;
				
				Если КлючИЗначениеЕдиницыИзмерения.Значение.Свойство("СписокВыбора", СписокВыбораЕдиницыИзмерения)
						И КлючИЗначениеЕдиницыИзмерения.Значение.Показатели.Количество() > 1 Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрЗаменить(КлючИЗначениеЕдиницыИзмерения.Ключ, "Атрибут_", ""));
					
					НайденныеСтроки = ТаблицаДанныхАтрибутов.НайтиСтроки(Отбор);
					
					// Приведение показателей к базовой единице измерения
					Если НайденныеСтроки.Количество() > 0
							И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеРеквизита1С)
							И СтрНайти(ВРег(НайденныеСтроки[0].ПолныйПутьКРеквизиту1С), ВРег("Упаковка.")) > 0 
							И СтрНайти(ВРег(НайденныеСтроки[0].ПолныйПутьКРеквизиту1С), ВРег("ЕдиницаИзмерения")) > 0 Тогда
						Характеристики = Новый Структура;
						Характеристики.Вставить(ВРег("ВысотаЕдиницаИзмерения"),             "ВысотаЕдиницаИзмерения");
						Характеристики.Вставить(ВРег("ВысотаЕдиницаИзмеренияЧислитель"),    "ВысотаЕдиницаИзмерения.Числитель");
						Характеристики.Вставить(ВРег("ВысотаЕдиницаИзмеренияЗнаменатель"),  "ВысотаЕдиницаИзмерения.Знаменатель");
						Характеристики.Вставить(ВРег("ГлубинаЕдиницаИзмерения"),            "ГлубинаЕдиницаИзмерения");
						Характеристики.Вставить(ВРег("ГлубинаЕдиницаИзмеренияЧислитель"),   "ГлубинаЕдиницаИзмерения.Числитель");
						Характеристики.Вставить(ВРег("ГлубинаЕдиницаИзмеренияЗнаменатель"), "ГлубинаЕдиницаИзмерения.Знаменатель");
						Характеристики.Вставить(ВРег("ШиринаЕдиницаИзмерения"),             "ШиринаЕдиницаИзмерения");
						Характеристики.Вставить(ВРег("ШиринаЕдиницаИзмеренияЧислитель"),    "ШиринаЕдиницаИзмерения.Числитель");
						Характеристики.Вставить(ВРег("ШиринаЕдиницаИзмеренияЗнаменатель"),  "ШиринаЕдиницаИзмерения.Знаменатель");
						
						РеквизитыУпаковки     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденныеСтроки[0].Упаковка, Характеристики);
						ИмяБазовогоПоказателя = СтрЗаменить(ВРег(НайденныеСтроки[0].ПолныйПутьКРеквизиту1С), ВРег("Упаковка."), "");
						
						Если Не Характеристики.Свойство(ИмяБазовогоПоказателя) Тогда
							Продолжить;
						КонецЕсли;
						
						// Связанные весогабаритные характеристики
						Для Каждого НаименованиеПоказателя Из КлючИЗначениеЕдиницыИзмерения.Значение.Показатели Цикл
							Показатель                    = Неопределено;
							ИдентификаторЕдиницыИзмерения = Неопределено;
							
							Если ВесогабаритныеХарактеристики.Свойство(НаименованиеПоказателя, Показатель)
									И Показатель.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения)
									И ИдентификаторЕдиницыИзмерения = КлючИЗначениеЕдиницыИзмерения.Ключ Тогда
								Отбор = Новый Структура;
								Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрЗаменить(НаименованиеПоказателя, "Атрибут_", ""));
								
								НайденныеСтрокиПоказатели = ТаблицаДанныхАтрибутов.НайтиСтроки(Отбор);
								Если НайденныеСтрокиПоказатели.Количество() > 0
										И ЗначениеЗаполнено(НайденныеСтрокиПоказатели[0].ЗначениеРеквизита1С)
										И СтрНайти(ВРег(НайденныеСтрокиПоказатели[0].ПолныйПутьКРеквизиту1С), ВРег("Упаковка.")) > 0 Тогда
									ИмяПоказателя = СтрЗаменить(ВРег(НайденныеСтрокиПоказатели[0].ПолныйПутьКРеквизиту1С), ВРег("Упаковка."), "") + ВРег("ЕдиницаИзмерения");
									
									Если Характеристики.Свойство(ИмяПоказателя)
											И РеквизитыУпаковки[ИмяПоказателя] <> НайденныеСтроки[0].ЗначениеРеквизита1С Тогда
										НайденныеСтрокиПоказатели[0].ЗначениеРеквизита1С = НайденныеСтрокиПоказатели[0].ЗначениеРеквизита1С
											* (?(РеквизитыУпаковки[ИмяПоказателя + ВРег("Числитель")] = 0, 1, РеквизитыУпаковки[ИмяПоказателя + ВРег("Числитель")]) / ?(РеквизитыУпаковки[ИмяПоказателя + ВРег("Знаменатель")] = 0, 1, РеквизитыУпаковки[ИмяПоказателя + ВРег("Знаменатель")]))
											/ (?(РеквизитыУпаковки[ИмяБазовогоПоказателя + ВРег("Числитель")] = 0, 1, РеквизитыУпаковки[ИмяБазовогоПоказателя + ВРег("Числитель")]) / ?(РеквизитыУпаковки[ИмяБазовогоПоказателя + ВРег("Знаменатель")] = 0, 1, РеквизитыУпаковки[ИмяБазовогоПоказателя + ВРег("Знаменатель")]));
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДанныхАтрибутов =
				ИсточникДанныхТоваров.Скопировать(, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка, ИсточникКатегории");
		
	Иначе // МенеджерВременныхТаблиц
		ТаблицаДанныхАтрибутов = Неопределено;
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОбновитьКатегориюМаркетплейса", ОбновитьКатегориюМаркетплейса);

	Если ПолучитьАтрибуты Тогда
		Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	КонецЕсли;

	// Подготовка текста запроса.
	ТекстыЗапроса = Новый Массив;

	Если ТаблицаДанныхАтрибутов = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = ИсточникДанныхТоваров;
	Иначе
		ЧастьТекстаЗапроса = ТекстЗапросаВыборкиДанныхТаблицыИсточника(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов,
				ПолучитьСертификаты Или ПолучитьИзображения);
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанныхАтрибутов);
	КонецЕсли;

	Если ПолучитьАтрибуты Тогда
		// Подготовка выборки штрихкодов.
		Если ОбновитьДанные Тогда
			ЧастьТекстаЗапроса = ТекстЗапросаВыборкиШтрихКодов();
			ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
		КонецЕсли;

		ЧастьТекстаЗапроса = ТекстЗапросаВыборкиДанныхПоТоварамПубликации(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов);
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
	КонецЕсли;

	// Подготовка данных для конвертации единиц весогабаритных характеристик.
	Если ПолучитьАтрибуты И ОбновитьДанные И ЗаполненаТаблицаАтрибутов Тогда
		ЧастьТекстаЗапроса = ТекстЗапросаКоэффициентовКонвертацииЕдиницВесогабаритныхХарактеристик();
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);

		ТипыЧисло = ПолучитьТипыOzonДляТипа1С("Число");
		Запрос.УстановитьПараметр("ТипыЧисло", ТипыЧисло);

		ТаблицаВесогабаритныхХарактеристик = ПодготовитьТаблицуДанныхВесогабаритныхХарактеристик();
		Запрос.УстановитьПараметр("ТаблицаВесогабаритныхХарактеристик", ТаблицаВесогабаритныхХарактеристик);
	КонецЕсли;

	// Подготовка выборки итоговых данных.
	ЧастьТекстаЗапроса = ТекстЗапросаВыборкиИтоговыхДанныхПоАтрибутам(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов);
	ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);

	РазделительПакетаЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, РазделительПакетаЗапросов);
	Запрос.Текст = ТекстЗапроса;
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);

	СертифицируемыеКатегории = Неопределено;
	ВидыЦенУчетнойЗаписи = Новый Соответствие;
	ВыборкаЦен = Неопределено;
	ВыборкаШтрихкодов = Неопределено;
	ВыборкаИзображений = Неопределено;
	ВыборкаСертификатов = Неопределено;
	ВыборкаПрисоединенныхФайловСертификатов = Неопределено;

	Если ПолучитьАтрибуты Тогда
		// Подготовка выборки цен товаров.
		ТекстЗапроса = ТекстЗапросаВыборкиЦен(ОбновитьДанные);

		Запрос.Текст = ТекстЗапроса;
		ВыборкаЦен = Запрос.Выполнить().Выбрать();

		Если ДляПубликации Тогда
			// Подготовка данных для сбора информации по упаковке.
			СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки = СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки();
		КонецЕсли;

		Если ОбновитьДанные Тогда 
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ТаблицаШтрихкодов.Номенклатура КАК Номенклатура,
			               |	ТаблицаШтрихкодов.Характеристика КАК Характеристика,
			               |	ТаблицаШтрихкодов.Упаковка КАК Упаковка,
			               |	ТаблицаШтрихкодов.Штрихкод КАК Штрихкод
			               |ИЗ
			               |	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов";
			УстановитьПривилегированныйРежим(Истина);
			ВыборкаШтрихкодов = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);

			Запрос.Текст = "УНИЧТОЖИТЬ ТаблицаШтрихкодов";
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка данных для выборки изображений и сертификатов.
	Если ПолучитьСертификаты Или ПолучитьИзображения Тогда
		ИмяТаблицыТоваров = "ДанныеПубликации";
		ТекстЗапросаОчистка = "";

		Если ОбновитьДанные Тогда
			Запрос.Текст = ТекстЗапросаПодготовкиВременнойТаблицыДляПолученияОбъектовПубликации(ПолучитьАтрибуты);
			Запрос.Выполнить();

			ИмяТаблицыТоваров = "ТаблицаРазличныхДанныхПубликации";

			ТекстЗапросаОчистка =
				"УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликации";
		КонецЕсли;

		// Подготовка выборки изображений товаров.
		Если ПолучитьИзображения Тогда
			Если ОбновитьДанные Тогда
				ТекстЗапроса = ТекстЗапросаВыборкиИзображений(ИмяТаблицыТоваров);
				Запрос.УстановитьПараметр("РасширенияИзображенийТоваров", РасширенияИзображений());
			Иначе
				ТекстЗапроса = ТекстЗапросаВыборкиОбъектовПубликации(ИмяТаблицыТоваров, "Изображение");
			КонецЕсли;

			Запрос.Текст = ТекстЗапроса;
			УстановитьПривилегированныйРежим(Истина);
			ВыборкаИзображений = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;

		// Подготовка выборки сертификатов.
		Если ПолучитьСертификаты Тогда
			ИспользоватьСертификатыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
			Если ИспользоватьСертификатыНоменклатуры Тогда
				Если ОбновитьДанные Тогда
					ТаблицаВходящихСертификатов = Новый ТаблицаЗначений;
					ТаблицаВходящихСертификатов.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
					ТаблицаВходящихСертификатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					ТаблицаВходящихСертификатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
					ТаблицаВходящихСертификатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
					ТаблицаВходящихСертификатов.Колонки.Добавить("СертификатНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СертификатыНоменклатуры"));

					Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда

						Для Каждого СтрокаДанных Из ИсточникДанныхТоваров Цикл
							Для Каждого СтрокаСертификата Из СтрокаДанных.ОбъектыПубликации Цикл
								СтруктураДляПроверки =
										Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.ПустаяСсылка"));

								ЗаполнитьЗначенияСвойств(СтруктураДляПроверки, СтрокаСертификата);
								Если СтруктураДляПроверки.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат") Тогда
									НоваяСтрока = ТаблицаВходящихСертификатов.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
									НоваяСтрока.СертификатНоменклатуры = СтрокаСертификата.ОбъектПубликации; 
								КонецЕсли;
							КонецЦикла;

							СтрокаДанных.ОбъектыПубликации.Очистить();
						КонецЦикла;
					КонецЕсли;

					ТекстЗапроса = ТекстЗапросаВыборкиСертификатов(ИмяТаблицыТоваров, ТаблицаВходящихСертификатов.Количество() > 0);

					Запрос.Текст = ТекстЗапроса;
					Запрос.УстановитьПараметр("ТаблицаВходящихСертификатов", ТаблицаВходящихСертификатов);
					Запрос.УстановитьПараметр("РасширенияИзображенийСертификатов", РасширенияИзображений(Истина));
					УстановитьПривилегированныйРежим(Истина);
					Результат = Запрос.ВыполнитьПакет();
					УстановитьПривилегированныйРежим(Ложь);
					ВыборкаСертификатов = Результат[Результат.ВГраница() - 2].Выбрать();
					ВыборкаПрисоединенныхФайловСертификатов = Результат[Результат.ВГраница() - 3].Выбрать();
				Иначе
					ТекстЗапроса = ТекстЗапросаВыборкиОбъектовПубликации(ИмяТаблицыТоваров, "Сертификат");

					Запрос.Текст = ТекстЗапроса;
					УстановитьПривилегированныйРежим(Истина);
					ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ОбновитьДанные Тогда
			Запрос.Текст = ТекстЗапросаОчистка;
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;

	Если ПолучитьАтрибуты Тогда
		ТекстЗапроса =
			"УНИЧТОЖИТЬ ТаблицаДанныхПубликации";

		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;

	МенеджерВременныхТаблиц = Неопределено;

	// Получение данных из запроса и заполнение атрибутов публикуемых товаров.
	ТипНалогообложенияНДС = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);

	ШаблонОшибкиЗаполненияКатегории1С =
			НСтр("ru = 'Для номенклатуры <%1> не заполнен реквизит <%2>. Категория для сопоставления атрибутов неопределена.'");
	ШаблонОшибкиПравилЗаполнения = НСтр("ru = 'Для категории <%1> не настроены соответствия атрибутов маркетплейса реквизитам 1С.'");

	ПредставленияПризнакаОбъединенияКарточекТоваров = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	СоответствиеТипов = НовоеСоответствиеТипов();
	АтрибутыКатегорийСервиса = Новый Соответствие;
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл 
		
		Если ПолучитьАтрибуты Тогда
			// Подготовка видов цен учетной записи.
			ВидыЦенУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.ВидыЦенУчетнойЗаписи(ВыборкаУчетныхЗаписей.УчетнаяЗаписьМаркетплейса);
		КонецЕсли;
		
		Если ПолучитьСертификаты И ИспользоватьСертификатыНоменклатуры Тогда
			// Подготовка списка сертифицируемых категорий.
			СертифицируемыеКатегории = СертифицируемыеКатегории(ВыборкаУчетныхЗаписей.УчетнаяЗаписьМаркетплейса);
		КонецЕсли;

		ВыборкаНоменклатуры = ВыборкаУчетныхЗаписей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатуры.Следующий() Цикл

			СсылкаСтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(ВыборкаНоменклатуры.Номенклатура,ТипНалогообложенияНДС, ВыборкаНоменклатуры.Организация, Запрос.Параметры.ТекущаяДатаСеанса);
			СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаСтавкаНДС, "Ставка");

			ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл

				ВыборкаУпаковок = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаУпаковок.Следующий() Цикл

					Если СоздаватьЗаписиВДанныхПубликации Тогда
						СтрокаЗаполненияРеквизитовТовара = ДанныеПубликации.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаполненияРеквизитовТовара, ВыборкаУпаковок,
							"УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка"
							+ ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаУпаковок, "ИдентификаторПубликации"), ", ИдентификаторПубликации", ""));
					Иначе
						СтрокаЗаполненияРеквизитовТовара = Неопределено;

						Отбор = Новый Структура;
						Отбор.Вставить("УчетнаяЗаписьМаркетплейса", Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
						Отбор.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
						Отбор.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						Отбор.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
						
						ЗаполнитьЗначенияСвойств(Отбор, ВыборкаУпаковок);
						СтрокиПубликации = ДанныеПубликации.НайтиСтроки(Отбор);

						МассивСтрокДублейКУдалению = Новый Массив;
						Для Каждого СтрокаПубликации Из СтрокиПубликации Цикл
							Если СтрокаЗаполненияРеквизитовТовара = Неопределено Тогда
								СтрокаЗаполненияРеквизитовТовара = СтрокаПубликации;
							Иначе
								МассивСтрокДублейКУдалению.Добавить(СтрокаПубликации);
							КонецЕсли;
						КонецЦикла;

						Для Каждого СтрокаУдаления Из МассивСтрокДублейКУдалению Цикл
							ДанныеПубликации.Удалить(СтрокаУдаления);
						КонецЦикла;

						Если СтрокаЗаполненияРеквизитовТовара = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаЗаполненияРеквизитовТовара.ИсточникКатегории = ВыборкаУпаковок.ИсточникКатегории;
					СтрокаЗаполненияРеквизитовТовара.ОпубликоватьТовар = ПолучитьАтрибуты И ОбновитьДанные;

					ТаблицаОбъектовПубликации = НоваяТаблицаОбъектовПубликации();
					ТаблицаЗначенийРеквизитов = НоваяТаблицаЗначенийРеквизитов();
					СтруктураДанныхЗаписи = НовыйСписокДанныхОТоваре();

					Если ПолучитьАтрибуты Тогда
						СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

						Если ДляПубликации Тогда
							СтруктураВесогабаритныхХарактеристикУпаковки = НовыйСписокАтрибутовВесогабаритныхХарактеристикУпаковки();
						КонецЕсли;

						СтруктураДанныхЗаписи.Валюта = ВыборкаНоменклатуры.КодВалюты;
						СтруктураДанныхЗаписи.КодВалюты = ВыборкаНоменклатуры.КодВалюты;
						СтруктураДанныхЗаписи.СтавкаНДС = СтавкаНДС;
						СтруктураДанныхЗаписи.Штрихкод = Строка(ВыборкаУпаковок.Штрихкод);

						Если Не ЗначениеЗаполнено(СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации) Тогда
							СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации = Новый УникальныйИдентификатор();
						КонецЕсли;

						СтрокаЗаполненияРеквизитовТовара.ИдентификаторОбъектаМаркетплейса = ВыборкаУпаковок.ИдентификаторОбъектаМаркетплейса;

						Если ОбновитьДанные Тогда
							НаименованиеОбъектаМаркетплейса  = ПредставлениеТоварнойПозиции(ВыборкаУпаковок.Номенклатура, ВыборкаУпаковок.Характеристика, ВыборкаУпаковок.Упаковка);
							ПредставлениеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						Иначе
							НаименованиеОбъектаМаркетплейса  = ВыборкаУпаковок.НаименованиеОбъектаМаркетплейса;
							ПредставлениеОбъектаМаркетплейса = ВыборкаУпаковок.ПредставлениеОбъектаМаркетплейса;
						КонецЕсли;

						Если Не ЗначениеЗаполнено(ВыборкаУпаковок.Категория1С) Тогда
							Если ВыборкаУпаковок.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
								ПредставлениеРеквизитаИсточникаКатегории = Метаданные.Справочники.Номенклатура.Реквизиты.ВидНоменклатуры.Представление();
							ИначеЕсли ВыборкаУпаковок.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
								ПредставлениеРеквизитаИсточникаКатегории = Метаданные.Справочники.Номенклатура.Реквизиты.ТоварнаяКатегория.Представление();
							Иначе
								ПредставлениеРеквизитаИсточникаКатегории = НСтр("ru = 'Ссылка'");
							КонецЕсли;

							СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
							СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;
							СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;
							СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = Истина;
								СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки =
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаполненияКатегории1С,
												ВыборкаУпаковок.Номенклатура,
												ПредставлениеРеквизитаИсточникаКатегории);
						Иначе
							СтрокаЗаполненияРеквизитовТовара.Категория1С = ВыборкаУпаковок.Категория1С;
							СтруктураДанныхЗаписи.ИсточникКатегорииМаркетплейса = ВыборкаУпаковок.ИсточникКатегорииМаркетплейса;
						КонецЕсли;
					КонецЕсли;

					Если ПолучитьАтрибуты И ОбновитьДанные И ВыборкаУпаковок.СчетчикРеквизитов = 0 Тогда
						СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
						СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;
						СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;
						СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = Истина;
						СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки =
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиПравилЗаполнения, ВыборкаУпаковок.Категория1С);
					КонецЕсли;

					ИсточникДанныхЗаполнения = Новый Структура("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					ЗаполнитьЗначенияСвойств(ИсточникДанныхЗаполнения, ВыборкаУпаковок);

					// Получение таблицы атрибутов категории из сервиса для корректировки состава атрибутов при публикации.
					ТаблицаАтрибутовКатегорииИзСервиса = Неопределено;

					Если ПроверятьСоставАтрибутов Тогда
						ИдентификаторКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса;
						Если Не ПустаяСтрока(ИдентификаторКатегорииМаркетплейса) Тогда
							ТаблицаАтрибутовКатегорииИзСервиса = АтрибутыКатегорийСервиса[ИдентификаторКатегорииМаркетплейса];
							Если ТаблицаАтрибутовКатегорииИзСервиса = Неопределено Тогда
								ТаблицаАтрибутовКатегорииИзСервиса = ПолучитьАтрибутыКатегории(ВыборкаУпаковок.УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса);
								ТаблицаАтрибутовКатегорииИзСервиса.Индексы.Добавить("ИдентификаторАтрибутаМаркетплейса");
								АтрибутыКатегорийСервиса.Вставить(ИдентификаторКатегорииМаркетплейса, ТаблицаАтрибутовКатегорииИзСервиса);
							КонецЕсли;
						КонецЕсли;

						Если ТаблицаАтрибутовКатегорииИзСервиса = Неопределено Тогда
							ТаблицаАтрибутовКатегорииИзСервиса = НоваяТаблицаАтрибутовКатегорииМаркетплейса();
						КонецЕсли;

						Если ТаблицаАтрибутовКатегорииИзСервиса.Колонки.Найти("Используется") = Неопределено Тогда
							ТаблицаАтрибутовКатегорииИзСервиса.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
						КонецЕсли;
					КонецЕсли;

					ЗаполнитьОсновныеДанныеТовара = ПолучитьАтрибуты;

					Если ПолучитьАтрибуты И ОбновитьДанные Тогда

						// Заполнение таблицы значений реквизитов.

						ТаблицаЗначенийРеквизитовВХранилище = Неопределено;
						ЕстьКэш = Ложь;

						// Получение кэша значений атрибутов.
						Если СтрокаЗаполненияРеквизитовТовара.ДанныеОбъектаПереданы
							И ТипЗнч(СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта) = Тип("ТаблицаЗначений")
							И СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта.Количество() > 0 Тогда
							ТаблицаЗначенийРеквизитовВХранилище = СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта;
							ТаблицаЗначенийРеквизитовВХранилище.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));

							ЕстьКэш = (ТаблицаЗначенийРеквизитовВХранилище.Количество() > 0);
						КонецЕсли;

						Если ВыборкаУпаковок.СчетчикРеквизитов > 0 Тогда
							ВыборкаЗначенийРеквизитов = ВыборкаУпаковок.Выбрать();
							Пока ВыборкаЗначенийРеквизитов.Следующий() Цикл
								// Проверка наличия атрибута в списке атрибутов категории в сервисе при публикации.
								Если ПроверятьСоставАтрибутов Тогда
									ОтборАтрибута = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса);
									СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
									Если СтрокиАтрибутовКатегорииИзСервиса.Количество() = 0 Тогда
										Продолжить; // Атрибут больше не используется.
									Иначе
										Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
											СтрокаАтрибутаИзСервиса.Используется = Истина;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;

								// Значение атрибута маркетплейса
								ЗначениеАтрибутаМаркетплейса = ВыборкаЗначенийРеквизитов.ЗначениеАтрибутаМаркетплейса;
								Если ЗначениеАтрибутаМаркетплейса = Null Тогда
									Если ВыборкаЗначенийРеквизитов.ДоступенВыборЗначенияИзСписка
											Или ВыборкаЗначенийРеквизитов.НеЗаполненРеквизит1С Тогда
										ЗначениеАтрибутаМаркетплейса = ВыборкаЗначенийРеквизитов.ЗначениеПоУмолчанию;
									Иначе
										ЗначениеАтрибутаМаркетплейса = ВыборкаЗначенийРеквизитов.ЗначениеРеквизита1С;
									КонецЕсли;
								КонецЕсли;

								Если ТаблицаЗначенийРеквизитовВХранилище = Неопределено Тогда
									ЗаполнитьЗначенияСвойств(ИсточникДанныхЗаполнения, ВыборкаЗначенийРеквизитов);

									// Получение кэша значений атрибутов.
									ТаблицаЗначенийРеквизитовВХранилище = ТаблицаЗначенийРеквизитов(ВыборкаЗначенийРеквизитов.ДанныеОбъекта);
									ТаблицаЗначенийРеквизитовВХранилище.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
									ЕстьКэш = (ТаблицаЗначенийРеквизитовВХранилище.Количество() > 0);
								КонецЕсли;

								Если ЗаполнитьОсновныеДанныеТовара Тогда
									// Заполнение основных данных товара из первой строки выборки.
									СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
									СтруктураДанныхЗаписи.ПредставлениеОбъектаМаркетплейса = ПредставлениеОбъектаМаркетплейса;
									СтруктураДанныхЗаписи.ОписаниеОбъектаМаркетплейса = ВыборкаЗначенийРеквизитов.ОписаниеОбъектаМаркетплейса;
									СтруктураДанныхЗаписи.ИдентификаторПубликации = СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации;
									СтруктураДанныхЗаписи.ИдентификаторКатегорииМаркетплейса = ВыборкаЗначенийРеквизитов.ИдентификаторКатегорииМаркетплейса;
									СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса = ВыборкаЗначенийРеквизитов.НаименованиеКатегорииМаркетплейса;
									СтруктураДанныхЗаписи.НеактивнаяКатегорияМаркетплейса = ВыборкаЗначенийРеквизитов.НеактивнаяКатегорияМаркетплейса;

									ЗаполнитьОсновныеДанныеТовара = Ложь;
								КонецЕсли;

								НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизитов);
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибутаМаркетплейса;

								Если Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса) И ЗначениеЗаполнено(НоваяСтрока.ЗначениеПоУмолчанию) Тогда
									НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
									НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = НоваяСтрока.ИдентификаторЗначенияПоУмолчанию;
								КонецЕсли;

								// Преобразование значения маркетплейса к требуемому типу.
								Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначенияАтрибута) Тогда
									ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
									ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НоваяСтрока.ТипЗначенияАтрибута);
									НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(
										ПривестиЗначениеКТипуOzon(НоваяСтрока.ЗначениеАтрибутаМаркетплейса, НоваяСтрока.ТипЗначенияАтрибута));
								КонецЕсли;

								// Заполнение признаков атрибута.
								НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
								НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
										И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
										И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
								НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = Ложь;

								// Отбор строк из кэша.
								Если ЕстьКэш Тогда
									Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Категория1С, ИдентификаторАтрибутаМаркетплейса");
									ЗаполнитьЗначенияСвойств(Отбор, ВыборкаЗначенийРеквизитов);
									Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
									СтрокиКэша = ТаблицаЗначенийРеквизитовВХранилище.НайтиСтроки(Отбор);

									ПредЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеАтрибутаМаркетплейса;

									// Попытка заполнения пустого атрибута из сохраненных данных на случай, когда ранее атрибут был заполнен пользователем вручную.
									ДозаполнениеСтроки = Истина;

									Для Каждого СтрокаКэша Из СтрокиКэша Цикл
										СтрокаКэша.Обработана = Истина;

										Если ДозаполнениеСтроки Тогда
											ДозаполнениеСтроки = Ложь;
										ИначеЕсли ВыборкаЗначенийРеквизитов.ИдентификаторКатегорииМаркетплейса = СтрокаКэша.ИдентификаторКатегорииМаркетплейса Тогда
											НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизитов);
											НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибутаМаркетплейса;
										Иначе
											Продолжить;
										КонецЕсли;

										ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша, "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса");

										// Заполнение признаков атрибута.
										НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
										НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
												И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
												И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
										НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = ПредЗначениеАтрибутаМаркетплейса <> НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;

						// Заполнение таблицы атрибутами, добавленными пользователем вручную.
						Если ЕстьКэш Тогда
							// Отбор строк из кэша.
							Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Категория1С");
							ЗаполнитьЗначенияСвойств(Отбор, ВыборкаУпаковок);
							Отбор.Вставить("Обработана", Ложь);
							Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
							СтрокиКэша = ТаблицаЗначенийРеквизитовВХранилище.НайтиСтроки(Отбор);

							Для Каждого СтрокаКэша Из СтрокиКэша Цикл
								Если ТаблицаЗначенийРеквизитов.Найти(СтрокаКэша.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса") <> Неопределено Тогда
									Продолжить;
								КонецЕсли;

								СтрокаКэша.Обработана = Истина;

								Если ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса = СтрокаКэша.ИдентификаторКатегорииМаркетплейса Тогда
									НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);

									// Заполнение признаков атрибута.
									НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
									НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
											И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
											И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
									НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = ЗначениеАтрибутаМаркетплейса <> НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;

						// Корректировка весогабаритных показателей
						КорректировкаВесогабаритныхПоказателей(ТаблицаЗначенийРеквизитов);
						
						Для Каждого СтрокаЗначенияРеквизита Из ТаблицаЗначенийРеквизитов Цикл
							// Заполнение весогабаритных характеристик упаковки.
							Если ДляПубликации Тогда
								ИмяПоляВесогабаритнойХарактеристики = СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Получить(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
								Если ЗначениеЗаполнено(ИмяПоляВесогабаритнойХарактеристики) Тогда
									СтруктураВесогабаритныхХарактеристикУпаковки[ИмяПоляВесогабаритнойХарактеристики] =
											?(ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса),
											СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса,
											СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ПолучитьАтрибуты И Не ОбновитьДанные Тогда

						// Получение таблицы значений реквизитов из кэша.
						Если СтрокаЗаполненияРеквизитовТовара.ДанныеОбъектаПереданы Тогда
							// Кэш из переданной таблицы данных объекта.
							ТаблицаЗначенийРеквизитов = СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта;
						Иначе
							// Кэш из хранилища значений.
							ТаблицаЗначенийРеквизитов = ТаблицаЗначенийРеквизитов(ВыборкаУпаковок.ДанныеОбъекта);
						КонецЕсли;

						Если ДляПубликации Или ПроверятьСоставАтрибутов Тогда
							МассивУдаляемыхСтрокРеквизитов = Новый Массив;

							Для Каждого СтрокаЗначенияРеквизита Из ТаблицаЗначенийРеквизитов Цикл
								// Заполнение весогабаритных характеристик упаковки.
								Если ДляПубликации Тогда
									ИмяПоляВесогабаритнойХарактеристики = СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Получить(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
									Если ЗначениеЗаполнено(ИмяПоляВесогабаритнойХарактеристики) Тогда
										СтруктураВесогабаритныхХарактеристикУпаковки[ИмяПоляВесогабаритнойХарактеристики] =
												?(ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса),
												СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса,
												СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса);
									КонецЕсли;
								КонецЕсли;

								// Проверка наличия атрибута в списке атрибутов категории в сервисе при публикации.
								Если ПроверятьСоставАтрибутов Тогда
									ОтборАтрибута = Новый Структура("ИдентификаторАтрибутаМаркетплейса", СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
									СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);

									Если СтрокиАтрибутовКатегорииИзСервиса.Количество() = 0 Тогда
										МассивУдаляемыхСтрокРеквизитов.Добавить(СтрокаЗначенияРеквизита);
									Иначе
										Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
											СтрокаАтрибутаИзСервиса.Используется = Истина;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;

							// Удаление атрибутов, отсутствующих в списке атрибутов категории в сервисе при публикации.
							Для Каждого СтрокаУдаления Из МассивУдаляемыхСтрокРеквизитов Цикл
								ТаблицаЗначенийРеквизитов.Удалить(СтрокаУдаления);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;

					Если ЗаполнитьОсновныеДанныеТовара Тогда
						// Заполнение основных данных товара.
						СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ПредставлениеОбъектаМаркетплейса = ПредставлениеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ОписаниеОбъектаМаркетплейса = ВыборкаУпаковок.ОписаниеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ИдентификаторПубликации = СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации;
						СтруктураДанныхЗаписи.ИдентификаторКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса;
						СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса = ВыборкаУпаковок.НаименованиеКатегорииМаркетплейса;
						СтруктураДанныхЗаписи.НеактивнаяКатегорияМаркетплейса = ВыборкаУпаковок.НеактивнаяКатегорияМаркетплейса;
			
						ЗаполнитьОсновныеДанныеТовара = Ложь;
					КонецЕсли;

					Если ПолучитьАтрибуты Тогда
						СтруктураДанныхЗаписи.ОбъединятьТоварыВОднуКарточкуСвойства =
								ПолучитьСвойстваОбъединенияТоваровВОднуКарточку(ТаблицаЗначенийРеквизитов, СтруктураДанныхЗаписи);
					КонецЕсли;

					Если ПроверятьСоставАтрибутов Тогда
						// Добавление обязательных атрибутов из сервиса.
						ОтборАтрибута = Новый Структура("Используется, ОбязательныйАтрибут", Ложь, Истина);
						СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
						Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
							НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполненияРеквизитовТовара);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанныхЗаписи);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАтрибутаИзСервиса);

							// Преобразование значения маркетплейса к требуемому типу.
							Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначенияАтрибута) Тогда
								ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
								ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НоваяСтрока.ТипЗначенияАтрибута);
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(
									ПривестиЗначениеКТипуOzon(НоваяСтрока.ЗначениеАтрибутаМаркетплейса, НоваяСтрока.ТипЗначенияАтрибута));
							КонецЕсли;

							// Заполнение признаков атрибута.
							НоваяСтрока.НеЗаполненРеквизит1С = Истина;
							НоваяСтрока.НеЗаполненАтрибут = Истина;
							НоваяСтрока.УстановленоЗначениеПоУмолчанию = Ложь;
							НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = Ложь;
						КонецЦикла;
					КонецЕсли;

					Если ДляПубликации Тогда
						СтруктураДанныхЗаписи.Вставить("ВесогабаритныеХарактеристикиУпаковки", СтруктураВесогабаритныхХарактеристикУпаковки);
					КонецЕсли;

					СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;

					// Заполнение данных по штрихкодам
					Если ОбновитьДанные Тогда 
						СтруктураДанныхЗаписи.Штрихкод = ЗаполнитьИнформациюПоШтрихкодам(ИсточникДанныхЗаполнения, ВыборкаШтрихкодов);
					КонецЕсли;

					// Заполнение данных по изображениям.
					ЗаполнитьИнформациюПоИзображениям(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаИзображений, ОбновитьДанные);

					// Заполнение данных по сертификатам.
					ЗаполнитьИнформациюПоСертификатам(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаСертификатов,
							ВыборкаПрисоединенныхФайловСертификатов, ОбновитьДанные);

					// Заполнение данных по ценам.
					ЗаполнитьИнформациюПоЦенам(СтруктураДанныхЗаписи, ИсточникДанныхЗаполнения, ВидыЦенУчетнойЗаписи, ВыборкаЦен);

					СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
					СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;

					// Проверка категории на признак сертификации.
					ОписаниеСертификации = Неопределено;
					Если ПолучитьСертификаты Тогда 
						Если СертифицируемыеКатегории <> Неопределено Тогда
							// Добавление описания сертификации категории маркетплейса.
							ОписаниеСертификации = СертифицируемыеКатегории.Получить(СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса);
							Если ОписаниеСертификации <> Неопределено Тогда
								СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации.ОписаниеСертификацииКатегорииМаркетплейса = ОписаниеСертификации;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					// Проверка наличия ошибок.
					Если ПроверитьОшибкиЗаполнения Тогда
						СписокПараметровДляПроверки = СписокСвойствТовараДляКарточкиТовара();
						ЗаполнитьЗначенияСвойств(СписокПараметровДляПроверки, СтрокаЗаполненияРеквизитовТовара);
						СписокПараметровДляПроверки.НаименованиеКатегорииМаркетплейса = СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса;
						СписокПараметровДляПроверки.Цены = СтруктураДанныхЗаписи.Цены;
						СписокПараметровДляПроверки.ОписаниеСертификацииКатегорииМаркетплейса = ОписаниеСертификации;

						РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара(СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта,
								СписокПараметровДляПроверки, СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации);
						СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = РезультатПроверки.ЕстьКритичныеОшибки;
						СтрокаЗаполненияРеквизитовТовара.КодОшибки = РезультатПроверки.КодОшибки;
						СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
					КонецЕсли;

				КонецЦикла; // ВыборкаУпаковок

			КонецЦикла; //ВыборкаХарактеристик

		КонецЦикла; // ВыборкаНоменклатуры
		
	КонецЦикла; // ВыборкаУчетныхЗаписей

	Если Не ДляПубликации Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
			Замер, 
			1);
	КонецЕсли;
	
	Возврат ДанныеПубликации;

КонецФункции

// Выполняет корректировку весогабаритных показателей.
//
// Параметры:
//   ДанныеОбъекта - См. НоваяТаблицаЗначенийРеквизитов.
//
Процедура КорректировкаВесогабаритныхПоказателей(ДанныеОбъекта)
	
	ВесогабаритныеХарактеристики = ПутьКРеквизитам1СПоУмолчанию();
	СоответствиеТипов            = НовоеСоответствиеТипов();
	ПоказателиДляОбновления      = Новый Массив;
	
	Для Каждого КлючИЗначениеЕдиницыИзмерения Из ВесогабаритныеХарактеристики Цикл
		СписокВыбораЕдиницыИзмерения = Неопределено;
		
		Если КлючИЗначениеЕдиницыИзмерения.Значение.Свойство("СписокВыбора", СписокВыбораЕдиницыИзмерения) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрЗаменить(КлючИЗначениеЕдиницыИзмерения.Ключ, "Атрибут_", ""));
			
			НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
			
			// Приведение показателей к указанной единице измерения
			Если НайденныеСтроки.Количество() > 0
					И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеРеквизита1С)
					И Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(НайденныеСтроки[0].ЗначениеРеквизита1С) Тогда
				РеквизитыУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					НайденныеСтроки[0].ЗначениеРеквизита1С, 
					"МеждународноеСокращение, Числитель, Знаменатель");
				
				Для Каждого ЭлементКоллекции Из СписокВыбораЕдиницыИзмерения Цикл
					Если ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса = НайденныеСтроки[0].ИдентификаторЗначенияАтрибутаМаркетплейса
							И ЭлементКоллекции.МеждународноеСокращение <> РеквизитыУпаковки.МеждународноеСокращение Тогда
						// Связанные весогабаритные характеристики
						Для Каждого НаименованиеПоказателя Из КлючИЗначениеЕдиницыИзмерения.Значение.Показатели Цикл
							Показатель = Неопределено;
							ИдентификаторЕдиницыИзмерения = Неопределено;
							
							Если ВесогабаритныеХарактеристики.Свойство(НаименованиеПоказателя, Показатель)
									И Показатель.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения)
									И ИдентификаторЕдиницыИзмерения = КлючИЗначениеЕдиницыИзмерения.Ключ Тогда
								Отбор = Новый Структура;
								Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",   СтрЗаменить(НаименованиеПоказателя, "Атрибут_", ""));
								Отбор.Вставить("УстановленоЗначениеПоУмолчанию",      Ложь);
								Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Ложь);
								Отбор.Вставить("НеЗаполненРеквизит1С",                Ложь);
								
								НайденныеСтрокиПоказатели = ДанныеОбъекта.НайтиСтроки(Отбор);
								Если НайденныеСтрокиПоказатели.Количество() > 0 Тогда
									НайденныеСтрокиПоказатели[0].ЗначениеАтрибутаМаркетплейса = НайденныеСтрокиПоказатели[0].ЗначениеРеквизита1С
										* (?(РеквизитыУпаковки.Числитель = 0, 1, РеквизитыУпаковки.Числитель) / ?(РеквизитыУпаковки.Знаменатель = 0, 1, РеквизитыУпаковки.Знаменатель))
										/ (?(ЭлементКоллекции.Числитель = 0, 1, ЭлементКоллекции.Числитель) / ?(ЭлементКоллекции.Знаменатель = 0, 1, ЭлементКоллекции.Знаменатель));
									ПоказателиДляОбновления.Добавить(НайденныеСтрокиПоказатели[0]);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Обработка нецелых показателей
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТребуетсяПересчет = Ложь;
				
				Для Каждого НаименованиеПоказателя Из КлючИЗначениеЕдиницыИзмерения.Значение.Показатели Цикл
					Показатель = Неопределено;
					ИдентификаторЕдиницыИзмерения = Неопределено;
					
					Если ВесогабаритныеХарактеристики.Свойство(НаименованиеПоказателя, Показатель)
							И Показатель.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения)
							И ИдентификаторЕдиницыИзмерения = КлючИЗначениеЕдиницыИзмерения.Ключ Тогда
						Отбор = Новый Структура;
						Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрЗаменить(НаименованиеПоказателя, "Атрибут_", ""));
						
						НайденныеСтрокиПоказатели = ДанныеОбъекта.НайтиСтроки(Отбор);
						Если НайденныеСтрокиПоказатели.Количество() > 0 Тогда
							// Предварительное преобразование значения маркетплейса к требуемому типу
							Если ЗначениеЗаполнено(НайденныеСтрокиПоказатели[0].ТипЗначенияАтрибута) Тогда
								ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НайденныеСтрокиПоказатели[0].ТипЗначенияАтрибута);
								ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НайденныеСтрокиПоказатели[0].ТипЗначенияАтрибута);
								ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(НайденныеСтрокиПоказатели[0].ЗначениеАтрибутаМаркетплейса);
							КонецЕсли;
							
							Если ЗначениеАтрибутаМаркетплейса <> НайденныеСтрокиПоказатели[0].ЗначениеАтрибутаМаркетплейса Тогда
								ТребуетсяПересчет = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ТребуетсяПересчет Тогда
					ЕдиницаИзмерения      = Неопределено;
					НоваяЕдиницаИзмерения = Неопределено;
					
					Для Каждого ЭлементКоллекции Из СписокВыбораЕдиницыИзмерения Цикл
						Если Не ЭлементКоллекции.ДляПересчетов Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса = НайденныеСтроки[0].ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
							ЕдиницаИзмерения = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементКоллекции);
							Прервать;
						Иначе
							НоваяЕдиницаИзмерения = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементКоллекции);
						КонецЕсли;
					КонецЦикла;
					
					Если ЗначениеЗаполнено(ЕдиницаИзмерения) И ЗначениеЗаполнено(НоваяЕдиницаИзмерения) Тогда
						НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса              = НоваяЕдиницаИзмерения.ЗначениеАтрибута;
						НайденныеСтроки[0].ИдентификаторЗначенияАтрибутаМаркетплейса = НоваяЕдиницаИзмерения.ИдентификаторЗначенияАтрибутаМаркетплейса;
						
						Для Каждого НаименованиеПоказателя Из КлючИЗначениеЕдиницыИзмерения.Значение.Показатели Цикл
							Показатель = Неопределено;
							ИдентификаторЕдиницыИзмерения = Неопределено;
							
							Если ВесогабаритныеХарактеристики.Свойство(НаименованиеПоказателя, Показатель)
									И Показатель.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения)
									И ИдентификаторЕдиницыИзмерения = КлючИЗначениеЕдиницыИзмерения.Ключ Тогда
								Отбор = Новый Структура;
								Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрЗаменить(НаименованиеПоказателя, "Атрибут_", ""));
								
								НайденныеСтрокиПоказатели = ДанныеОбъекта.НайтиСтроки(Отбор);
								Если НайденныеСтрокиПоказатели.Количество() > 0 Тогда
									НайденныеСтрокиПоказатели[0].ЗначениеАтрибутаМаркетплейса = НайденныеСтрокиПоказатели[0].ЗначениеАтрибутаМаркетплейса
										* (?(ЕдиницаИзмерения.Числитель = 0, 1, ЕдиницаИзмерения.Числитель) / ?(ЕдиницаИзмерения.Знаменатель = 0, 1, ЕдиницаИзмерения.Знаменатель))
										/ (?(НоваяЕдиницаИзмерения.Числитель = 0, 1, НоваяЕдиницаИзмерения.Числитель) / ?(НоваяЕдиницаИзмерения.Знаменатель = 0, 1, НоваяЕдиницаИзмерения.Знаменатель));
									ПоказателиДляОбновления.Добавить(НайденныеСтрокиПоказатели[0]);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Преобразование значения маркетплейса к требуемому типу
	Для Каждого СтрокаТаблицыЗначений Из ПоказателиДляОбновления Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ТипЗначенияАтрибута) Тогда
			ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТипЗначенияАтрибута);
			ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, СтрокаТаблицыЗначений.ТипЗначенияАтрибута);
			СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЛимитыТоваровSellerAPI

// Возвращает информацию об общем лимите на загрузку и обновление товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetUploadQuota (версия 4).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Структура - результат выполнения запроса:
//     * ЗначениеУстановлено - Булево - Истина, если метод API успешно вернул результат;
//     * Остаток             - Число - сколько изменений можно внести до сброса счетчика за текущие сутки;
//     * ВремяСброса         - Дата - дата и время, когда сбросится значение счетчика за текущие сутки;
//     * Значение            - Число - значение лимита на загрузку и обновление товаров.
//
Функция ПолучитьСчетчикВыгрузкиИзСервиса(УчетнаяЗаписьМаркетплейса) Экспорт

	ТекстЗапроса = "/v4/product/info/limit";

	Результат = Новый Структура;
	Результат.Вставить("ЗначениеУстановлено",       Ложь);
	Результат.Вставить("СуточныйЛимитСоздания",     0);
	Результат.Вставить("СуточныйОстатокСоздания",   0);
	Результат.Вставить("СуточныйЛимитОбновления",   0);
	Результат.Вставить("СуточныйОстатокОбновления", 0);
	Результат.Вставить("ВремяСбросаСчетчиков",      '00010101000000');
	Результат.Вставить("ОбщийЛимитСоздания",        0);
	Результат.Вставить("ОбщийОстатокСоздания",      0);

	УстановитьПривилегированныйРежим(Истина);
	
	СлужебныеПараметры              = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = "reset_at";
	ПараметрыЗапроса = Новый Структура("СлужебныеПараметры", СлужебныеПараметры);
	
	// POST-запрос
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина);

	Если РезультатЗапроса <> Неопределено Тогда
		Результат.ЗначениеУстановлено       = Истина;
		Результат.СуточныйЛимитСоздания     = РезультатЗапроса["daily_create"]["limit"];
		Результат.СуточныйОстатокСоздания   = РезультатЗапроса["daily_create"]["limit"] - РезультатЗапроса["daily_create"]["usage"];
		Результат.СуточныйЛимитОбновления   = РезультатЗапроса["daily_update"]["limit"];
		Результат.СуточныйОстатокОбновления = РезультатЗапроса["daily_update"]["limit"] - РезультатЗапроса["daily_update"]["usage"];
		Результат.ВремяСбросаСчетчиков      = Макс(РезультатЗапроса["daily_create"]["reset_at"], РезультатЗапроса["daily_update"]["reset_at"]);
		Результат.ОбщийЛимитСоздания        = РезультатЗапроса["total"]["limit"];
		Результат.ОбщийОстатокСоздания      = ?(Результат.ОбщийЛимитСоздания <= 0, -1,
				РезультатЗапроса["total"]["limit"] - РезультатЗапроса["total"]["usage"]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ТоварыSellerAPI

// Создает или обновляет товар в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsV2 (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры публикации товара:
//     * ДанныеПубликации        - Массив Из Структура - загружаемые данные (items):
//       ** attributes              - Массив Из Структура - список с характеристиками товара:
//         *** complex_id           - Число - идентификатор характеристики, которая поддерживает вложенные свойства.
//         *** id                   - Число - идентификатор характеристики.
//         *** values               - Массив Из Структура - список вложенных значений характеристики:
//           **** dictionary_value_id - Число - идентификатор справочника.
//           **** value               - Строка - значение из справочника.
//       ** barcode                 - Строка - штрихкод товара.
//       ** color_image             - Строка - маркетинговый цвет, адрес ссылки на изображение в общедоступном облачном хранилище.
//       ** complex_attributes      - Массив Из Структура - список характеристик, у которых есть вложенные атрибуты:
//         *** attributes             - Массив Из Структура - список с характеристиками товара:
//           **** complex_id            - Число - идентификатор характеристики, которая поддерживает вложенные свойства.
//           **** id                    - Число - идентификатор характеристики.
//           **** values                - Массив Из Структура - список вложенных значений характеристики:
//             ***** dictionary_value_id  - Число - идентификатор справочника.
//             ***** value                - Строка - значение из справочника.
//       ** currency_code           - Строка - валюта ваших цен.
//       ** depth                   - Число - глубина упаковки.
//       ** description_category_id - Число - идентификатор категории маркетплейса.
//       ** dimension_unit          - Строка - единица измерения габаритов.
//       ** geo_names               - Массив Из Строка - географические ограничения.
//       ** height                  - Число - высота упаковки.
//       ** images                  - Массив Из Строка - список изображений (изображения показываются на сайте в таком же порядке, как в массиве).
//       ** primary_image           - Строка - ссылка на главное изображение товара.
//       ** service_type            - Строка - тип сервиса.
//       ** images360               - Массив Из Строка - список изображений 360.
//       ** name                    - Строка - название товара.
//       ** offer_id                - Строка - идентификатор товара в системе продавца (артикул).
//       ** old_price               - Строка - цена до скидок (будет зачеркнута на карточке товара).
//       ** pdf_list                - Массив Из Структура - список PDF-файлов:
//         *** index                  - Число - индекс документа в хранилище, который задает порядок.
//         *** name                   - Строка - название файла.
//         *** src_url                - Строка- адрес файла.
//       ** premium_price           - Строка - цена для клиентов с подпиской Ozon Premium (устарел).
//       ** price                   - Строка - цена товара с учетом скидок, отображается на карточке товара.
//       ** vat                     - Строка - ставка НДС для товара.
//       ** weight                  - Число - вес товара в упаковке.
//       ** weight_unit             - Строка - единица измерения веса.
//       ** width                   - Число - ширина упаковки.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Число        - номер задания на загрузку товаров (task_id).
//
Функция ВыполнитьПубликациюТоваровВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/product/import";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("items", Параметры.ДанныеПубликации);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.task_id");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает статус создания карточки товара в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetImportProductsInfo (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры изображений товара:
//     * ЗаданиеПубликации       - Число - номер задания на загрузку товаров.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - результат выполнения запроса (productGetImportProductsInfoResponseResult):
//       * items                       - Массив Из см. НовыйРезультатИзСервиса - информация о товарах (GetImportProductsInfoResponseResultItem):
//         ** offer_id                   - Строка - идентификатор товара в системе продавца (артикул);
//         ** product_id                 - Число - идентификатор товара;
//         ** status                     - Строка - статус создания товара;
//         ** errors                     - Массив Из см. НовыйРезультатИзСервиса - перечень ошибок (v1ItemError):
//           *** code                          - Строка - код ошибки;
//           *** message                       - Строка - техническое описание ошибки;
//           *** state                         - Строка - состояние товара, в котором произошла ошибка;
//           *** level                         - Строка - уровень ошибки;
//           *** description                   - Строка - описание ошибки;
//           *** field                         - Строка - поле, в котором произошла ошибка;
//           *** attribute_id                  - Число - атрибут, в котором произошла ошибка;
//           *** attribute_name                - Строка - название атрибута, в котором произошла ошибка;
//           *** optional_description_elements - Соответствие Из КлючИЗначение - дополнительные поля для описания ошибки.
//       * total                       - Число - количество товаров в запросе.
//
Функция ПроверитьСтатусПубликацииТовараВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/import/info";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("task_id", Параметры.ЗаданиеПубликации);

	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("items", Новый Массив);
	ПустойРезультат.Вставить("total", -5);
	
	СлужебныеПараметры                              = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "Upload task not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",         "result.items");
	АтрибутыОтвета.Вставить("КоличествоТоваров", "result.total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса;

КонецФункции

// Получает информацию о товаре из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoV2 (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияИнформацииОТоваре.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - результат выполнения запроса (productv2GetProductInfoResponseResult):
//       * is_archived           - Булево - признак, что товар архивирован вручную;
//       * is_autoarchived       - Булево - признак, что товар архивирован автоматически;
//       * barcode               - Строка - штрихкод;
//       * barcodes              - Массив Из Строка - все штрихкоды товара;
//       * buybox_price          - Строка - цена главного предложения на Ozon (устарел);
//       * category_id           - Число - идентификатор категории.
//       * color_image           - Строка - маркетинговый цвет;
//       * commissions           - Соответствие Из КлючИЗначение - информация о комиссиях (productv2GetProductInfoResponseCommissions):
//         ** deliveryAmount       - Число - стоимость доставки;
//         ** minValue             - Число - минимальная комиссия;
//         ** percent              - Число - процент комиссии;
//         ** returnAmount         - Число - стоимость возврата;
//         ** saleSchema           - Строка - схема продажи;
//         ** value                - Число - сумма комиссии.
//       * created_at            - Дата - дата и время создания товара;
//       * sku                   - Число - SKU товара;
//       * fbo_sku               - Число - SKU товара, который продается со склада Ozon (FBO).
//                                   С 15 августа 2023 года у товаров будет единый SKU и этот параметр будет отключен. 
//                                   Используйте значение этого параметра, если вы работаете по схеме FBO и в ответе 
//                                   нет параметра sku.
//       * fbs_sku               - Число - SKU товара, который продается со склада продавца (FBS и rFBS).
//                                   С 15 августа 2023 года у товаров будет единый SKU и этот параметр будет отключен. 
//                                   Используйте значение этого параметра, если вы работаете по схеме FBS или rFBS и 
//                                   в ответе нет параметра sku.
//       * id                    - Число - идентификатор товара;
//       * images                - Массив Из Строка - список ссылок на изображения;
//       * primary_image         - Строка - главное изображение товара;
//       * images360             - Массив Из Строка - список изображений 360;
//       * has_discounted_item   - Булево - признак, что у товара есть уцененные аналоги на складе Ozon;
//       * is_discounted         - Булево - признак, является ли товар уцененным;
//       * discounted_stocks     - Соответствие Из КлючИЗначение - остатки уцененного товара на складе Ozon (productv2GetProductInfoDiscountedStocks):
//         ** coming               - Число - количество товара, ожидаемого при поставке;
//         ** present              - Число - количество товара на складе;
//         ** reserved             - Число - количество зарезервированного товара.
//       * is_kgt                - Булево - признак крупногабаритного товара;
//       * is_prepayment         - Булево - флаг обязательной предоплаты для товара;
//       * is_prepayment_allowed - Булево - Истина, если возможна предоплата;
//       * currency_code         - Строка - валюта ваших цен;
//       * marketing_price       - Строка - цена на товар с учетом всех акций;
//       * min_ozon_price        - Строка - минимальная цена на аналогичный товар на Ozon (устарел);
//       * min_price             - Строка - минимальная цена товара после применения акций;
//       * name                  - Строка - название;
//       * offer_id              - Строка - идентификатор товара в системе продавца (артикул);
//       * old_price             - Строка - цена до учета скидок;
//       * premium_price         - Строка - цена для клиентов с подпиской Ozon Premium (устарел);
//       * price                 - Строка - цена товара с учетом скидок;
//       * price_index           - Строка - ценовой индекс;
//       * recommended_price     - Строка - цена на товар, рекомендованная системой на основании схожих предложений;
//       * status                - Соответствие Из КлючИЗначение - описание состояния товара (productv2Status):
//         ** state                - Строка - состояние товара;
//         ** state_failed         - Строка - состояние товара, на переходе в которое произошла ошибка;
//         ** moderate_status      - Строка - статус модерации;
//         ** decline_reasons      - Массив Из Строка - причины отклонения товара;
//         ** validation_state     - Строка - статус валидации;
//         ** state_name           - Строка - название состояния товара;
//         ** state_description    - Строка - описание состояния товара;
//         ** is_failed            - Булево - признак, что при создании товара возникли ошибки;
//         ** is_created           - Булево - признак, что товар создан;
//         ** state_tooltip        - Строка - подсказки для текущего состояния товара;
//         ** item_errors          - Массив Из см. НовыйРезультатИзСервиса - ошибки при загрузке товаров (v2ItemError):
//           *** code                          - Строка - код ошибки;
//           *** message                       - Строка - техническое описание ошибки;
//           *** state                         - Строка - состояние товара, в котором произошла ошибка;
//           *** level                         - Строка - уровень ошибки;
//           *** description                   - Строка - описание ошибки;
//           *** field                         - Строка - поле, в котором произошла ошибка;
//           *** attribute_id                  - Число - атрибут, в котором произошла ошибка;
//           *** attribute_name                - Строка - название атрибута, в котором произошла ошибка;
//           *** optional_description_elements - Соответствие Из КлючИЗначение - дополнительные поля для описания ошибки.
//         ** state_updated_at     - Дата - время последнего изменения состояния товара.
//       * sources               - Массив Из см. НовыйРезультатИзСервиса - информация об источниках схожих предложений (productv2GetProductInfoResponseSource):
//         ** is_enabled           - Булево - признак, что источник учитывается при расчете рыночного значения;
//         ** sku                  - Число - идентификатор товара на Ozon;
//         ** source               - Строка - ссылка на источник.
//       * stocks                - Соответствие Из КлючИЗначение - информация об остатках товара (productv2GetProductInfoResponseStock):
//         ** coming               - Число - ожидается поставка;
//         ** present              - Число - сейчас на складе;
//         ** reserved             - Число - зарезервировано;
//       * updated_at            - Дата - дата последнего обновления товара;
//       * vat                   - Строка - ставка НДС для товара;
//       * visibility_details    - Соответствие Из КлючИЗначение - настройки видимости товара (productv2GetProductInfoResponseVisibilityDetails):
//         ** active_product       - Булево - признак товар - активный (устарел);
//         ** has_price            - Булево - Истина, если установлена цена;
//         ** has_stock            - Булево - Истина, если есть остаток на складах;
//         ** reasons              - Соответствие Из КлючИЗначение - причина, почему товар скрыт.
//       * visible               - Булево - признак, что товар выставлен на продажу;
//       * volume_weight         - Число - объемный вес товара.
//
Функция ПолучитьИнформациюОТовареИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/product/info";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("offer_id",   Параметры.ИдентификаторПубликации);
	ПараметрыЗапроса.Вставить("product_id", СтрокаВЧисло(Параметры.ИдентификаторОбъектаМаркетплейса));
	ПараметрыЗапроса.Вставить("sku",        СтрокаВЧисло(Параметры.ИдентификаторSKU));

	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("state_updated_at");

	СлужебныеПараметры 				= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает описание товара из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoDescription (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияИнформацииОТоваре.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - список идентификаторов товаров (productGetProductInfoDescriptionResponseProduct):
//       * id          - Число - идентификатор товара;
//       * offer_id    - Строка - идентификатор товара в системе продавца (артикул);
//       * name        - Строка - название;
//       * description - Строка - описание.
//
Функция ПолучитьКраткуюИнформациюОТовареИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/info/description";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("offer_id",   Параметры.ИдентификаторПубликации);
	ПараметрыЗапроса.Вставить("product_id", СтрокаВЧисло(Параметры.ИдентификаторОбъектаМаркетплейса));

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает информацию о списке товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoListV2 (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияОписанияТоваров.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - описания товаров:
//       * is_archived           - Булево - признак, что товар архивирован вручную;
//       * is_autoarchived       - Булево - признак, что товар архивирован автоматически;
//       * barcode               - Строка - штрихкод;
//       * barcodes              - Массив Из Строка - все штрихкоды товара;
//       * buybox_price          - Строка - цена главного предложения на Ozon (устарел);
//       * category_id           - Число - идентификатор категории.
//       * color_image           - Строка - маркетинговый цвет;
//       * commissions           - Строка - информация о комиссиях (productv2GetProductInfoResponseCommissions):
//         ** deliveryAmount       - Число - стоимость доставки;
//         ** minValue             - Число - минимальная комиссия;
//         ** percent              - Число - процент комиссии;
//         ** returnAmount         - Число - стоимость возврата;
//         ** saleSchema           - Строка - схема продажи;
//         ** value                - Число - сумма комиссии.
//       * created_at            - Дата - дата и время создания товара;
//       * sku                   - Число - SKU товара;
//       * fbo_sku               - Число - SKU товара, который продается со склада Ozon (FBO).
//                                   С 15 августа 2023 года у товаров будет единый SKU и этот параметр будет отключен. 
//                                   Используйте значение этого параметра, если вы работаете по схеме FBO и в ответе 
//                                   нет параметра sku.
//       * fbs_sku               - Число - SKU товара, который продается со склада продавца (FBS и rFBS).
//                                   С 15 августа 2023 года у товаров будет единый SKU и этот параметр будет отключен. 
//                                   Используйте значение этого параметра, если вы работаете по схеме FBS или rFBS и 
//                                   в ответе нет параметра sku.
//       * id                    - Число - идентификатор товара;
//       * images                - Массив Из Строка - список ссылок на изображения;
//       * primary_image         - Строка - главное изображение товара;
//       * images360             - Массив Из Строка - список изображений 360;
//       * has_discounted_item   - Булево - признак, что у товара есть уцененные аналоги на складе Ozon;
//       * is_discounted         - Булево - признак, является ли товар уцененным;
//       * discounted_stocks     - Соответствие Из КлючИЗначение - остатки уцененного товара на складе Ozon (productv2GetProductInfoDiscountedStocks):
//         ** coming               - Число - количество товара, ожидаемого при поставке;
//         ** present              - Число - количество товара на складе;
//         ** reserved             - Число - количество зарезервированного товара.
//       * is_kgt                - Булево - признак крупногабаритного товара;
//       * is_prepayment         - Булево - флаг обязательной предоплаты для товара;
//       * is_prepayment_allowed - Булево - Истина, если возможна предоплата;
//       * currency_code         - Строка - валюта ваших цен;
//       * marketing_price       - Строка - цена на товар с учетом всех акций;
//       * min_ozon_price        - Строка - минимальная цена на аналогичный товар на Ozon (устарел);
//       * min_price             - Строка - минимальная цена товара после применения акций;
//       * name                  - Строка - название;
//       * offer_id              - Строка - идентификатор товара в системе продавца (артикул);
//       * old_price             - Строка - цена до учета скидок;
//       * premium_price         - Строка - цена для клиентов с подпиской Ozon Premium (устарел);
//       * price                 - Строка - цена товара с учетом скидок;
//       * price_index           - Строка - ценовой индекс;
//       * recommended_price     - Строка - цена на товар, рекомендованная системой на основании схожих предложений;
//       * status                - Соответствие Из КлючИЗначение - описание состояния товара (productv2Status):
//         ** state                - Строка - состояние товара;
//         ** state_failed         - Строка - состояние товара, на переходе в которое произошла ошибка;
//         ** moderate_status      - Строка - статус модерации;
//         ** decline_reasons      - Массив Из Строка - причины отклонения товара;
//         ** validation_state     - Строка - статус валидации;
//         ** state_name           - Строка - название состояния товара;
//         ** state_description    - Строка - описание состояния товара;
//         ** is_failed            - Булево - признак, что при создании товара возникли ошибки;
//         ** is_created           - Булево - признак, что товар создан;
//         ** state_tooltip        - Строка - подсказки для текущего состояния товара;
//         ** item_errors          - Массив Из см. НовыйРезультатИзСервиса - ошибки при загрузке товаров (v2ItemError):
//           *** code                          - Строка - код ошибки;
//           *** message                       - Строка - техническое описание ошибки;
//           *** state                         - Строка - состояние товара, в котором произошла ошибка;
//           *** level                         - Строка - уровень ошибки;
//           *** description                   - Строка - описание ошибки;
//           *** field                         - Строка - поле, в котором произошла ошибка;
//           *** attribute_id                  - Число - атрибут, в котором произошла ошибка;
//           *** attribute_name                - Строка - название атрибута, в котором произошла ошибка;
//           *** optional_description_elements - Соответствие Из КлючИЗначение - дополнительные поля для описания ошибки.
//         ** state_updated_at     - Дата - время последнего изменения состояния товара.
//       * sources               - Массив Из см. НовыйРезультатИзСервиса - информация об источниках схожих предложений (productv2GetProductInfoResponseSource):
//         ** is_enabled           - Булево - признак, что источник учитывается при расчете рыночного значения;
//         ** sku                  - Число - идентификатор товара на Ozon;
//         ** source               - Строка - ссылка на источник.
//       * stocks                - Соответствие Из КлючИЗначение - информация об остатках товара (productv2GetProductInfoResponseStock):
//         ** coming               - Число - ожидается поставка;
//         ** present              - Число - сейчас на складе;
//         ** reserved             - Число - зарезервировано;
//       * updated_at            - Дата - дата последнего обновления товара;
//       * vat                   - Строка - ставка НДС для товара;
//       * visibility_details    - Соответствие Из КлючИЗначение - настройки видимости товара (productv2GetProductInfoResponseVisibilityDetails):
//         ** active_product       - Булево - признак товар - активный (устарел);
//         ** has_price            - Булево - Истина, если установлена цена;
//         ** has_stock            - Булево - Истина, если есть остаток на складах;
//         ** reasons              - Соответствие Из КлючИЗначение - причина, почему товар скрыт.
//       * visible               - Булево - признак, что товар выставлен на продажу;
//       * volume_weight         - Число - объемный вес товара.
//
Функция ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/product/info/list";

	ПараметрыЗапроса = Новый Структура;
	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;
	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса, , Истина));
	КонецЕсли;
	Если Параметры.ИдентификаторыSKU <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("sku", ЗначениеВМассив(Параметры.ИдентификаторыSKU, , Истина));
	КонецЕсли;

	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("updated_at");
	МассивПолейТипаДата.Добавить("state_updated_at");

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата 				= МассивПолейТипаДата;
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", Новый Структура("items", Новый Массив));
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.items");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает описание характеристик товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductAttributesV3 (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияСпискаТоваров.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура - результат выполнения запроса:
//       * Результат                       - Массив Из см. НовыйРезультатИзСервиса - результат запроса (productv3GetProductAttributesV3ResponseResult):
//         ** attributes                     - Массив Из см. НовыйРезультатИзСервиса - список характеристик товара (productGetProductAttributesV3ResponseAttribute):
//           *** attribute_id                  - Число - идентификатор характеристики;
//           *** complex_id                    - Число - идентификатор характеристики, которая поддерживает вложенные свойства;
//           *** values                        - Массив Из см. НовыйРезультатИзСервиса - список вложенных значений характеристики (productGetProductAttributesV3ResponseDictionaryValue):
//             **** dictionary_value_id          - Число - идентификатор справочника;
//             **** value                        - Строка - значение из справочника.
//         ** barcode                        - Строка - штрихкод;
//         ** category_id                    - Число - идентификатор категории;
//         ** color_image                    - Строка - маркетинговый цвет;
//         ** complex_attributes             - Массив Из см. НовыйРезультатИзСервиса - список вложенных характеристик (productGetProductAttributesV3ResponseComplexAttribute):
//           *** attributes                     - Массив Из см. НовыйРезультатИзСервиса - список характеристик товара (productGetProductAttributesV3ResponseAttribute):
//             **** attribute_id                  - Число - идентификатор характеристики;
//             **** complex_id                    - Число - идентификатор характеристики, которая поддерживает вложенные свойства;
//             **** values                        - Массив Из см. НовыйРезультатИзСервиса - список вложенных значений характеристики (productGetProductAttributesV3ResponseDictionaryValue):
//               ***** dictionary_value_id          - Число - идентификатор справочника;
//               ***** value                        - Строка - значение из справочника.
//         ** depth	                         - Число - глубина;
//         ** dimension_unit                 - Строка - единица измерения габаритов;
//         ** id                             - Число - идентификатор характеристики товара;
//         ** image_group_id                 - Строка - идентификатор для последующей пакетной загрузки изображений;
//         ** images                         - Массив Из см. НовыйРезультатИзСервиса - список изображений товара (GetProductAttributesResponseImage):
//           *** default                       - Булево - признак основного изображения;
//           *** file_name                     - Строка - ссылка на изображение;
//           *** index                         - Число - порядковый номер изображения.
//         ** images360                      - Массив Из см. НовыйРезультатИзСервиса - список изображений товара 360 (GetProductAttributesResponseImage360):
//           *** file_name                     - Строка - ссылка на изображение;
//           *** index                         - Число - порядковый номер изображения.
//         ** name                           - Строка - название товара;
//         ** offer_id                       - Строка - идентификатор товара в системе продавца (артикул);
//         ** pdf_list                       - Массив Из см. НовыйРезультатИзСервиса - массив PDF-файлов (GetProductAttributesResponsePdf):
//           *** file_name                     - Строка - путь к PDF-файлу;
//           *** index                         - Число - индекс документа в хранилище, который задает порядок;
//           *** name                          - Строка - название файла.
//         ** weight                         - Число - вес товара в упаковке;
//         ** weight_unit                    - Строка - единица измерения веса;
//         ** width                          - Число - ширина упаковки.
//       * ИдентификаторПоследнегоЗначения - Строка - идентификатор последнего значения на странице (last_id);
//       * КоличествоТоваров               - Число - количество товаров в списке (total).
//
Функция ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/products/info/attributes";

	ФильтрПоТоварам = Новый Структура;
	ФильтрПоТоварам.Вставить("visibility", Параметры.ФильтрВидимости);

	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;

	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса));
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  ФильтрПоТоварам);
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);
	
	Если ЗначениеЗаполнено(Параметры.ПараметрСортировки) Тогда
		ПараметрыЗапроса.Вставить("sort_by",  Параметры.ПараметрСортировки);
		ПараметрыЗапроса.Вставить("sort_dir", Параметры.НаправлениеСортировки);
	КонецЕсли;

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result, last_id, total", Новый Массив, "", 0);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "result");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "last_id");
	АтрибутыОтвета.Вставить("КоличествоТоваров",               "total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#Область АрхивТоваровСлужебный

// Выполняет перенос следующей порции товарных позиций из списка доступных для продажи в архив. 
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторыТоваров      - Массив Из Строка - список идентификаторов товаров на маркетплейсе (product_id).
//   СведенияОВыгруженныхДанных - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   Отказ                      - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//   Детализация                - Массив Из Строка - детализированная информация по ошибочным позициям;
//                              - Неопределено - детализированная информация не требуется (без ошибок).
// 
Процедура ПеренестиТоварыВАрхив(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, Отказ, 
			Детализация = Неопределено)
	
	ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Истина,, ИдентификаторыТоваров,);
	ТаблицаИдентификаторовТоваров = НоваяТаблицаИдентификаторовТоваров();
	
	ПолучитьИдентификаторыТоваров(
			УчетнаяЗаписьМаркетплейса, 
			ФильтрПоТоварам, 
			ТаблицаИдентификаторовТоваров);
			
	Индекс = ИдентификаторыТоваров.ВГраница();
	Пока Индекс >= 0 Цикл
		ЭлементКоллекции = ИдентификаторыТоваров[Индекс];
		НайденныеСтроки  = ТаблицаИдентификаторовТоваров.НайтиСтроки(Новый Структура("ИдентификаторОбъектаМаркетплейса", ЭлементКоллекции));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИдентификаторыТоваров.Удалить(Индекс);
			
			Отказ = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Товар с идентификатором Ozon ""%1"" не найден на торговой площадке.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ЭлементКоллекции);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
				
			Если Детализация = Неопределено Тогда
				Детализация = Новый Массив;
			КонецЕсли;
			Детализация.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если ИдентификаторыТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторыТоваров", ИдентификаторыТоваров);
	
	Результат = ПеренестиТоварыВАрхивВСервисе(УчетнаяЗаписьМаркетплейса, Параметры);
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	
	ИначеЕсли Результат Тогда
		Для Каждого КлючЗаписи Из СведенияОВыгруженныхДанных Цикл
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() И ИдентификаторыТоваров.Найти(МенеджерЗаписи.ИдентификаторОбъектаМаркетплейса) <> Неопределено Тогда
				МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве");
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'При помещении товаров в архив возникли ошибки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Устарела. Возвращает следующую порцию товарных позиций из архива в список доступных для продажи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторыТоваров      - Массив Из Строка - список идентификаторов товаров на маркетплейсе (product_id).
//   СведенияОВыгруженныхДанных - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   Отказ                      - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ВернутьТоварыИзАрхива(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, Отказ)

	// Метод API отключен 14.06.2023 г.
	Отказ = Истина;
	ТекстСообщения = НСтр("ru = 'Возврат товаров из архива выполняется в личном кабинете торговой площадки.'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
	Возврат;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторыТоваров", ИдентификаторыТоваров);
	
	Результат = ВернутьТоварыИзАрхиваВСервисе(УчетнаяЗаписьМаркетплейса, Параметры);
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	
	ИначеЕсли Результат Тогда
		Для Каждого КлючЗаписи Из СведенияОВыгруженныхДанных Цикл
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторFBOSKU) И ПустаяСтрока(МенеджерЗаписи.ИдентификаторFBSSKU) Тогда
					МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
				ИначеЕсли Не ПустаяСтрока(МенеджерЗаписи.ОписаниеОшибки) Тогда
					МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками");
				Иначе
					МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен");
				КонецЕсли;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе                    
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'При возврате товаров из архива возникли ошибки.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Удаляет следующую порцию товаров без SKU из архива торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторыТоваров      - Массив Из Строка - список идентификаторов товаров на маркетплейсе (product_id).
//   СведенияОВыгруженныхДанных - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   Отказ                      - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура УдалитьТоварыБезSKUИзАрхива(УчетнаяЗаписьМаркетплейса, ИдентификаторыТоваров, СведенияОВыгруженныхДанных, Отказ)

	Параметры = Новый Структура;
	Параметры.Вставить("ИдентификаторыТоваров", ИдентификаторыТоваров);
	
	Результат = УдалитьТоварыБезSKUИзАрхиваВСервисе(УчетнаяЗаписьМаркетплейса, Параметры);
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	
	Иначе
		Для Каждого ЭлементОтвета Из Результат Цикл
			СтруктураПоиска          = Новый Структура("offer_id");
			СтруктураПоиска.offer_id = ЭлементОтвета["offer_id"];
			
			РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
			Если РезультатПоиска.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРезультатаПоиска = РезультатПоиска[0];
			
			ПозицияУдалена = ЭлементОтвета["is_deleted"];
			
			Если СтрНайти(ВРег(ЭлементОтвета["error"]), "NOT_FOUND_PRODUCT_FOR_OFFER_ID") <> 0 Тогда
				ПозицияУдалена = Истина;
			КонецЕсли;
			
			Если ПозицияУдалена = Истина Тогда
				НачатьТранзакцию();
				
				Попытка
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
					ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",УчетнаяЗаписьМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаРезультатаПоиска.Номенклатура);
					ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", СтрокаРезультатаПоиска.Характеристика);
					ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", СтрокаРезультатаПоиска.Упаковка);
					БлокировкаДанных.Заблокировать();

					НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
					НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаРезультатаПоиска.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(СтрокаРезультатаПоиска.Характеристика);
					НаборЗаписей.Отбор.Упаковка.Установить(СтрокаРезультатаПоиска.Упаковка);
					НаборЗаписей.Записать();

					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					Отказ = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При удалении товара %1 возникла ошибка: %2'", 
							ОбщегоНазначения.КодОсновногоЯзыка()),
						ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка),
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ТекстСообщения);
				КонецПопытки;
						
			Иначе
				Отказ = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При удалении товара %1 возникла ошибка: %2'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка),
					СтрокаРезультатаПоиска.error);
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АрхивТоваровSellerAPI

// Переносит товары в архив в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductArchive (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры изображений товара:
//     * ИдентификаторыТоваров   - Массив Из Число - список идентификаторов товаров на маркетплейсе (product_id).
//
// Возвращаемое значение:
//   - Булево - результат выполнения запроса. Истина - если запрос выполнен без ошибок.
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПеренестиТоварыВАрхивВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/archive";
	
	ПараметрыЗапроса = Новый Структура;     
	ПараметрыЗапроса.Вставить("product_id", Параметры.ИдентификаторыТоваров);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Устарела. Возвращает товары из архива в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUnarchive (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры изображений товара:
//     * ИдентификаторыТоваров   - Массив Из Число - список идентификаторов товаров на маркетплейсе (product_id).
//
// Возвращаемое значение:
//   - Булево - результат выполнения запроса. Истина - если запрос выполнен без ошибок.
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ВернутьТоварыИзАрхиваВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)
	
	// Метод API отключен 14.06.2023 г.
	Возврат Неопределено;
	
	ТекстЗапроса = "/v1/product/unarchive";
	
	ПараметрыЗапроса = Новый Структура;     
	ПараметрыЗапроса.Вставить("product_id", Параметры.ИдентификаторыТоваров);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Удаляет товары без SKU из архива в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_DeleteProducts (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры изображений товара:
//     * ИдентификаторыТоваров   - Массив Из Структура - список идентификаторов товаров (products):
//       ** offer_id               - Массив Из Строка - список идентификаторов товаров в системе продавца (артикул).
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса (DeleteProductsResponseDeleteStatus):
//       * offer_id   - Строка - идентификатор товара в системе продавца (артикул);
//       * is_deleted - Булево - Истина, если запрос выполнен без ошибок и товары удалены;
//       * error      - Строка - причина ошибки, которая возникла при обработке запроса.
//
Функция УдалитьТоварыБезSKUИзАрхиваВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	Для Каждого	ЭлементКоллекции Из Параметры.ИдентификаторыТоваров Цикл
		ЭлементКоллекции.Вставить("is_deleted", Истина);
		ЭлементКоллекции.Вставить("error",      "");
	КонецЦикла;
	
	ТекстЗапроса = "/v2/products/delete";

	ПараметрыЗапроса = Новый Структура;     
	ПараметрыЗапроса.Вставить("products", Параметры.ИдентификаторыТоваров);
	
	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "Products not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("status", Параметры.ИдентификаторыТоваров);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "Products not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("status", Параметры.ИдентификаторыТоваров);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "status");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

    Возврат РезультатЗапроса.Результат;
	
КонецФункции

#КонецОбласти

#Область ИзображенияСлужебный

// Конструктор списка расширений для изображений.
//
// Параметры:
//   ИспользоватьPDF - Булево - необходимость включать файлы PDF.
// 
// Возвращаемое значение:
//   Массив Из Строка - список расширений изображений.
//
Функция РасширенияИзображений(ИспользоватьPDF = Ложь) Экспорт

	РасширенияИзображений = Новый Массив;
	РасширенияИзображений.Добавить("jpg");
	РасширенияИзображений.Добавить("jpeg");
	РасширенияИзображений.Добавить("png");

	Если ИспользоватьPDF Тогда
		РасширенияИзображений.Добавить("pdf");
	КонецЕсли;

	Возврат РасширенияИзображений;

КонецФункции

// Выполняет публикацию изображений при обновлении данных товарного каталога.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗаписьМаркетплейса) 

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("РасширенияИзображенийТоваров", РасширенияИзображений());
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса <> """")
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = НоменклатураПрисоединенныеФайлы.Ссылка
		|			И НоменклатураПрисоединенныеФайлы.ПубликуетсяВСервисах
		|			И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|			И НоменклатураПрисоединенныеФайлы.Расширение В (&РасширенияИзображенийТоваров)
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации = """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса
		|ИТОГИ ПО
		|	ИдентификаторОбъектаМаркетплейса";

	СоответствияПубликацииИзображений = Новый Соответствие;

	ТаблицаЗаписиИзменений = Новый ТаблицаЗначений;
	ТаблицаЗаписиИзменений.Колонки.Добавить("ИдентификаторТовара", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ДанныеОбъекта", Новый ОписаниеТипов("Структура"));

	ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	ВыборкаИдентификаторовТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовТоваров.Следующий() Цикл
		МассивИзображений = Новый Массив;
		МассивИзображений360 = Новый Массив;

		ЕстьОсновноеИзображение = Ложь;
		ПерваяПубличнаяСсылка = "";

		ВыборкаИзображений = ВыборкаИдентификаторовТоваров.Выбрать();
		Пока ВыборкаИзображений.Следующий() Цикл
			ДанныеОбъекта = ВыборкаИзображений.ДанныеОбъекта.Получить();

			ПубличнаяСсылка = ВыборкаИзображений.ПубличнаяСсылка;
			Если ПустаяСтрока(ПубличнаяСсылка) Тогда
				// Генерация ссылки на Яндекс.Диск.
				ДанныеПубличнойСсылки = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлНаСервис(ТокенДоступа, ВыборкаИзображений.ОбъектПубликации);
				ПубличнаяСсылка       = ДанныеПубличнойСсылки.ПубличнаяСсылка;
				
				ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", ДанныеПубличнойСсылки.ПутьКФайлуНаЯДиске);
				
				Если ДанныеПубличнойСсылки.Отказ Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
				ПерваяПубличнаяСсылка = ПубличнаяСсылка;
			КонецЕсли;

			Если ДанныеОбъекта.ЭтоИзображение360 Тогда
				МассивИзображений360.Добавить(ПубличнаяСсылка);
			Иначе
				Если ДанныеОбъекта.ЭтоОсновноеИзображение Тогда
					ЕстьОсновноеИзображение = Истина;
					МассивИзображений.Вставить(0, ПубличнаяСсылка);
				Иначе
					МассивИзображений.Добавить(ПубличнаяСсылка);
				КонецЕсли;
			КонецЕсли;

			// Сохранить данные для записи изменений в регистр статусов публикации.
			СтрокаИзменений = ТаблицаЗаписиИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменений, ВыборкаИзображений, , "ДанныеОбъекта");
			СтрокаИзменений.ИдентификаторТовара = ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса;
			СтрокаИзменений.ПредставлениеОбъектаМаркетплейса = ПубличнаяСсылка;
			СтрокаИзменений.ДанныеОбъекта = ДанныеОбъекта;
		КонецЦикла;

		Если Не ЕстьОсновноеИзображение И Не ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
			ИндексОсновногоИзображения = МассивИзображений.Найти(ПерваяПубличнаяСсылка);
			Если ИндексОсновногоИзображения <> Неопределено Тогда
				МассивИзображений.Удалить(ИндексОсновногоИзображения);
				МассивИзображений.Вставить(0, ПерваяПубличнаяСсылка);
			КонецЕсли;
		КонецЕсли;

		// Создать соответствие для публикации.
		Если МассивИзображений.Количество() Или МассивИзображений360.Количество() > 0 Тогда
			СтруктураПубликации = Новый Структура;
			СтруктураПубликации.Вставить("Изображения", МассивИзображений);
			СтруктураПубликации.Вставить("Изображения360", МассивИзображений360);

			СоответствияПубликацииИзображений.Вставить(ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса, СтруктураПубликации);
		КонецЕсли;
	КонецЦикла;

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	Для Каждого СоответствиеПубликации Из СоответствияПубликацииИзображений Цикл
		ИдентификаторТовара = СтрокаВЧисло(СоответствиеПубликации.Ключ);

		// Публикация изображений.
		ПараметрыИзображения = Новый Структура;
		ПараметрыИзображения.Вставить("ИдентификаторТовара", ИдентификаторТовара);
		ПараметрыИзображения.Вставить("Изображения",         СоответствиеПубликации.Значение.Изображения);
		ПараметрыИзображения.Вставить("Изображения360",      СоответствиеПубликации.Значение.Изображения360);
		ПараметрыИзображения.Вставить("МаркетинговыйЦвет",   "");

		Результат = ВыполнитьПубликациюИзображенийТоваровВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыИзображения);

		// Запись изменений в регистр статусов публикации.
		Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			Для Каждого ДанныеРезультата Из Результат Цикл
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("url",   "");
				ЗаполнитьЗначенияСвойствИзСервиса(СтруктураРезультата, ДанныеРезультата);

				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];
				Если ТекущееСостояние = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексИзображения = ЧислоВСтроку(Результат.Найти(ДанныеРезультата), Истина);

				ПубличнаяСсылка = СтруктураРезультата.url;

				Отбор = Новый Структура("ИдентификаторТовара, ПредставлениеОбъектаМаркетплейса", ЧислоВСтроку(ИдентификаторТовара), ПубличнаяСсылка);
				СтрокиИзображения = ТаблицаЗаписиИзменений.НайтиСтроки(Отбор);
				Для Каждого СтрокаИзображения Из СтрокиИзображения Цикл
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
					Запись.ВидОбъектаМаркетплейса = СтрокаИзображения.ВидОбъектаМаркетплейса;
					ЗаполнитьЗначенияСвойств(Запись, СтрокаИзображения, "Номенклатура, Характеристика, Упаковка");
					Запись.ОбъектПубликации = СтрокаИзображения.ОбъектПубликации;
					Запись.Прочитать();

					ЗаполнитьПубличнуюСсылкуИзображений = (Запись.ПредставлениеОбъектаМаркетплейса <> СтрокаИзображения.ПредставлениеОбъектаМаркетплейса);

					Если Не ЗаполнитьПубличнуюСсылкуИзображений Тогда
						// Запись статуса для изображения конкретного товара.
						Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;
						Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);

						Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображения;
						Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
						Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
						Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

						Запись.Записать();
					Иначе
						// Запись публичной ссылки изображения для всех товаров с этим изображением.
						НачатьТранзакцию();
						Попытка

							// Блокировка изменения публикуемых изображений.
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
							ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
							ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", СтрокаИзображения.ВидОбъектаМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаИзображения.Номенклатура);
							ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", СтрокаИзображения.ОбъектПубликации);
							БлокировкаДанных.Заблокировать();

							НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
							НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(СтрокаИзображения.ВидОбъектаМаркетплейса);
							НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаИзображения.Номенклатура);
							НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаИзображения.ОбъектПубликации);
							НаборЗаписей.Прочитать();

							Для Каждого Запись Из НаборЗаписей Цикл
								Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;

								Если Запись.Характеристика = СтрокаИзображения.Характеристика
									И Запись.Упаковка = СтрокаИзображения.Упаковка Тогда
									// Запись статуса для изображения конкретного товара.
									Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображения;
									Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
									Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
								Иначе
									ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
									ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", СтрокаИзображения.ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
								КонецЕсли;
							КонецЦикла;

							НаборЗаписей.Записать();

							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();

							ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

// Выполняет проверку публикации изображений при обновлении данных товарного каталога.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ВыполнитьПроверкуПубликацииИзображенийТоваров(УчетнаяЗаписьМаркетплейса) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("РасширенияИзображенийТоваров", РасширенияИзображений());
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИндексИзображенияВКоллекции,
		|	"""" КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками)))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса <> """")
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = НоменклатураПрисоединенныеФайлы.Ссылка
		|			И НоменклатураПрисоединенныеФайлы.ПубликуетсяВСервисах
		|			И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|			И НоменклатураПрисоединенныеФайлы.Расширение В (&РасширенияИзображенийТоваров)
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса
		|ИТОГИ ПО
		|	ИдентификаторОбъектаМаркетплейса";

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	ВыборкаИдентификаторовТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовТоваров.Следующий() Цикл
		ИдентификаторТовара = СтрокаВЧисло(ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса);

		// Проверка публикации изображений.
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(ИдентификаторТовара);

		ПараметрыИзображения = Новый Структура;
		ПараметрыИзображения.Вставить("ИдентификаторыТоваров", МассивИдентификаторов);

		Результат = ПроверитьСтатусПубликацииИзображенийТоваровВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыИзображения);

		Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			ВыборкаИзображений = ВыборкаИдентификаторовТоваров.Выбрать();

			МассивЗаписанныхИдентификаторов = Новый Массив;

			Для Каждого ДанныеРезультата Из Результат Цикл
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state",      "");
				СтруктураРезультата.Вставить("product_id", 0);
				СтруктураРезультата.Вставить("url",        "");
				ЗаполнитьЗначенияСвойствИзСервиса(СтруктураРезультата, ДанныеРезультата);

				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];
				Если ТекущееСостояние = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексИзображения = ЧислоВСтроку(Результат.Найти(ДанныеРезультата), Истина);

				ИдентификаторТовара = ЧислоВСтроку(СтруктураРезультата.product_id);
				НоваяПубличнаяСсылка = СтруктураРезультата.url;

				ВыборкаИзображений.Сбросить();

				НайденыЗаписи = Ложь;

				Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса, ИндексИзображенияВКоллекции", ИдентификаторТовара, ИндексИзображения);
				Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
					НайденыЗаписи = Истина;

					НачатьТранзакцию();
					Попытка
						// Блокировка изменения публикуемых изображений.
						БлокировкаДанных = Новый БлокировкаДанных;
						ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
						ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
						ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
						ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВыборкаИзображений.ВидОбъектаМаркетплейса);
						ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", ВыборкаИзображений.Номенклатура); 
						ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ВыборкаИзображений.ОбъектПубликации);
						БлокировкаДанных.Заблокировать();

						НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
						НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаИзображений.ВидОбъектаМаркетплейса);
						НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаИзображений.Номенклатура);
						НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаИзображений.ОбъектПубликации);
						НаборЗаписей.Прочитать();

						Для Каждого Запись Из НаборЗаписей Цикл
							Если Запись.Характеристика = ВыборкаИзображений.Характеристика
								И Запись.Упаковка = ВыборкаИзображений.Упаковка Тогда
								Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
								Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
								Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

								ЗаполнитьДанныеПубликацииИзображения(Запись, ВыборкаИзображений);
							КонецЕсли;

							Запись.ПредставлениеОбъектаМаркетплейса = НоваяПубличнаяСсылка;
						КонецЦикла;

						Если НаборЗаписей.Количество() > 0 Тогда
							НаборЗаписей.Записать();
						КонецЕсли;

						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();

						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЦикла;

				Если НайденыЗаписи Тогда
					МассивЗаписанныхИдентификаторов.Добавить(ИндексИзображения);
				КонецЕсли;
			КонецЦикла;

			// Запишем состояния для изображений с очисткой публичной ссылки,
			// т.к. содержимое полученной публичной ссылки Ozon не соответствует содержимому публичной ссылки записи.
			Если Результат.Количество() <> МассивЗаписанныхИдентификаторов.Количество() Тогда
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state",      "");
				СтруктураРезультата.Вставить("product_id", 0);
				СтруктураРезультата.Вставить("url",        "");
				ЗаполнитьЗначенияСвойствИзСервиса(СтруктураРезультата, Результат[0]);

				ИдентификаторТовара = ЧислоВСтроку(СтруктураРезультата.product_id);
				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние <> Неопределено Тогда
					ВыборкаИзображений.Сбросить();

					Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", ИдентификаторТовара);
					Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
						Если МассивЗаписанныхИдентификаторов.Найти(ВыборкаИзображений.ИндексИзображенияВКоллекции) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;

						НачатьТранзакцию();
						Попытка
							// Блокировка изменения публикуемых изображений.
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
							ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
							ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВыборкаИзображений.ВидОбъектаМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", ВыборкаИзображений.Номенклатура); 
							ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ВыборкаИзображений.ОбъектПубликации);
							БлокировкаДанных.Заблокировать();

							НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
							НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаИзображений.ВидОбъектаМаркетплейса);
							НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаИзображений.Номенклатура);
							НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаИзображений.ОбъектПубликации);
							НаборЗаписей.Прочитать();

							Для Каждого Запись Из НаборЗаписей Цикл
								Если Запись.Характеристика = ВыборкаИзображений.Характеристика
									И Запись.Упаковка = ВыборкаИзображений.Упаковка Тогда
									Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
									Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

									ЗаполнитьДанныеПубликацииИзображения(Запись, ВыборкаИзображений);
								КонецЕсли;

								Запись.ПредставлениеОбъектаМаркетплейса = "";
							КонецЦикла;

							Если НаборЗаписей.Количество() > 0 Тогда
								НаборЗаписей.Записать();
							КонецЕсли;

							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();

							ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,,,
								ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИзображенияSellerAPI

// Загружает или обновляет изображения товара в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductImportPictures (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры изображений товара:
//     * ИдентификаторТовара     - Число - идентификатор товара на маркетплейсе (product_id);
//     * Изображения             - Массив Из Строка - список ссылок на изображения (images);
//     * Изображения360          - Массив Из Строка - список изображений 360 (images360);
//     * МаркетинговыйЦвет       - Строка - маркетинговый цвет (color_image).
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса (productProductInfoPicturesResponsePicture):
//       * is_360     - Булево - признак, что картинка - изображение 360;
//       * is_color   - Булево - признак, что картинка - образец цвета;
//       * is_primary - Булево - признак, что картинка - главное изображение;
//       * product_id - Число - идентификатор товара;
//       * state      - Строка - статус загрузки изображения;
//       * url        - Строка - адрес ссылки на изображение в общедоступном облачном хранилище.
//
Функция ВыполнитьПубликациюИзображенийТоваровВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/pictures/import";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("product_id",  Параметры.ИдентификаторТовара);
	ПараметрыЗапроса.Вставить("images",      Параметры.Изображения);
	ПараметрыЗапроса.Вставить("images360",   Параметры.Изображения360);
	ПараметрыЗапроса.Вставить("color_image", Параметры.МаркетинговыйЦвет);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.pictures");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Позволяет проверить статус загрузки изображений товара в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductInfoPictures (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры изображений товара:
//     * ИдентификаторыТоваров   - Массив Из Строка - список идентификаторов товаров на маркетплейсе (product_id).
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса (productProductInfoPicturesResponsePicture):
//       * is_360     - Булево - признак, что картинка - изображение 360;
//       * is_color   - Булево - признак, что картинка - образец цвета;
//       * is_primary - Булево - признак, что картинка - главное изображение;
//       * product_id - Число - идентификатор товара;
//       * state      - Строка - статус загрузки изображения;
//       * url        - Строка - адрес ссылки на изображение в общедоступном облачном хранилище.
//
Функция ПроверитьСтатусПубликацииИзображенийТоваровВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/pictures/info";

	ПараметрыЗапроса = Новый Структура;     
	ПараметрыЗапроса.Вставить("product_id", Параметры.ИдентификаторыТоваров);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.pictures");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

#КонецОбласти

#Область СертификатыСлужебный

// Получает типы сертификатов из сервиса.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   См. НоваяТаблицаЗначенийАтрибутаКатегории.
//
Функция ПолучитьТипыСертификатов(УчетнаяЗаписьМаркетплейса)

	ТипыСертификатов = НоваяТаблицаЗначенийАтрибутаКатегории();

	ТипыСертификатовИзСервиса = ПолучитьТипыСертификатовИзСервиса(УчетнаяЗаписьМаркетплейса);

	Если ТипыСертификатовИзСервиса <> Неопределено Тогда
		Для Каждого ТипСертификата Из ТипыСертификатовИзСервиса Цикл
			НоваяСтрока                               = ТипыСертификатов.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса     = УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторЗначенияАтрибута = ТипСертификата["value"];
			НоваяСтрока.ЗначениеАтрибута              = ТипСертификата["name"];
		КонецЦикла;
	КонецЕсли;

	Возврат ТипыСертификатов;

КонецФункции

// Получает типы соответствия требованиям для сертификатов из сервиса.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   См. НоваяТаблицаЗначенийАтрибутаКатегории.
//
Функция ПолучитьТипыСоответствияТребованиям(УчетнаяЗаписьМаркетплейса)

	ТипыСоответствияТребованиям = НоваяТаблицаЗначенийАтрибутаКатегории();

	ТипыСоответствияТребованиямИзСервиса = ПолучитьТипыСоответствияТребованиямИзСервиса(УчетнаяЗаписьМаркетплейса);

	Если ТипыСоответствияТребованиямИзСервиса <> Неопределено Тогда
		Для Каждого ТипСоответствия Из ТипыСоответствияТребованиямИзСервиса Цикл
			НоваяСтрока                               = ТипыСоответствияТребованиям.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса     = УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторЗначенияАтрибута = ТипСоответствия["value"];
			НоваяСтрока.ЗначениеАтрибута              = ТипСоответствия["name"];
		КонецЦикла;
	КонецЕсли;

	Возврат ТипыСоответствияТребованиям;

КонецФункции

// Определяет типы сертификатов из информационной базы.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - типы сертификатов:
//     * ТипСертификата1С                         - Строка - содержит тип, к которому принадлежит сертификат;
//     * ИдентификаторТипаСертификатаМаркетплейса - Строка - идентификатор объекта (сертификата) маркетплейса;
//     * НаименованиеТипаСертификатаМаркетплейса  - Строка - наименование типа документа.
//
Функция ТипыСертификатов(УчетнаяЗаписьМаркетплейса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СертификатыНоменклатуры.ТипСертификата КАК ТипСертификата
		|ПОМЕСТИТЬ ТипыСертификатовИзДанных
		|ИЗ
		|	Справочник.СертификатыНоменклатуры КАК СертификатыНоменклатуры
		|ГДЕ
		|	НЕ СертификатыНоменклатуры.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТипыСертификатовИзДанных.ТипСертификата КАК ТипСертификата1С,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторТипаСертификатаМаркетплейса,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеТипаСертификатаМаркетплейса
		|ИЗ
		|	ТипыСертификатовИзДанных КАК ТипыСертификатовИзДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ТипСертификата))
		|			И ТипыСертификатовИзДанных.ТипСертификата = СоответствияОбъектовМаркетплейсов.Объект1С
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТипыСертификатовИзДанных";

	ТаблицаТиповСертификатов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаТиповСертификатов;

КонецФункции

// Определяет список сертифицируемых категорий с описанием варианта сертификации.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись маркетплейса;
//   ЛимитПозицийНаИтерацию    - Число - количество элементов на странице.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - где:
//     * Ключ     - Строка - наименование категории маркетплейса;
//     * Значение - Строка - описание варианта сертификации:
//					  "Сертификация"             - сертифицируемая категория;
//					  "ОбязательнаяСертификация" - обязательно сертифицируемая категория.
//
Функция СертифицируемыеКатегории(УчетнаяЗаписьМаркетплейса, ЛимитПозицийНаИтерацию = 100)

	СертифицируемыеКатегории = Новый Соответствие;

	Параметры = Новый Структура;
	Параметры.Вставить("НомерСтраницы",                 1);
	Параметры.Вставить("КоличествоЭлементовНаСтранице", ЛимитПозицийНаИтерацию);

	СчетчикКоличестваЭлементов = 0;
	Пока Истина Цикл
		Ответ = СертифицируемыеКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры);
		СертифицируемыеКатегорииИзСервиса = Ответ.Результат;

		Если СертифицируемыеКатегорииИзСервиса <> Неопределено Тогда
			Для Каждого СертифицируемаяКатегория Из СертифицируемыеКатегорииИзСервиса Цикл
				ОписаниеСертификации = ?(СертифицируемаяКатегория["is_required"], "ОбязательнаяСертификация", "Сертификация");
				СертифицируемыеКатегории.Вставить(СертифицируемаяКатегория["category_name"], ОписаниеСертификации);
			КонецЦикла;

			СчетчикКоличестваЭлементов = СчетчикКоличестваЭлементов + Параметры.КоличествоЭлементовНаСтранице;
			Если СчетчикКоличестваЭлементов >= Ответ.ВсегоЭлементов Тогда
				Прервать;
			Иначе
				Параметры.НомерСтраницы = Параметры.НомерСтраницы + 1;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СертифицируемыеКатегории;

КонецФункции

// Выполняет публикацию сертификатов товаров.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция ВыполнитьПубликациюСертификатовТоваров(УчетнаяЗаписьМаркетплейса)

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаНеУказанаУчетнаяЗапись;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки.'");
		Возврат Ошибка;
	КонецЕсли;
	
	Если Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаОбновлениеДанныхЗапрещено;
		Ошибка.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'"),
			УчетнаяЗаписьМаркетплейса);
		Возврат Ошибка;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры") Тогда
		Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Ошибка.ОписаниеОшибки = НСтр("ru = 'Использование сертификатов номенклатуры отключено'");
		Возврат Ошибка;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("РасширенияИзображенийТоваров", РасширенияИзображений());
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторТовара,
		|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ОбъектПубликации КАК ОбъектПубликации,
		|	ПРЕДСТАВЛЕНИЕ(СтатусыПубликации.ОбъектПубликации) КАК ПредставлениеОбъектаПубликации,
		|	СтатусыПубликации.ОписаниеОшибки КАК ОписаниеОшибки,
		|	СправСертификатыНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
		|	СправСертификатыНоменклатуры.СтатусРосаккредитации КАК СтатусРосаккредитации,
		|	СправСертификатыНоменклатуры.ДатаОбновленияСтатусаРосаккредитации КАК ДатаОбновленияСтатусаРосаккредитации,
		|	ЕСТЬNULL(СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторСертификата,
		|	СтатусыПубликации.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка,
		|	СтатусыПубликации.ДанныеОбъекта КАК ДанныеОбъекта,
		|	ЕСТЬNULL(СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса, ""-1"") = СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК СертификатПривязан,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ПривязанныйИдентификатор
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО СтатусыПубликации.Номенклатура = СправНоменклатура.Ссылка
		|			И (СправНоменклатура.ВестиУчетСертификатовНоменклатуры)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СправСертификатыНоменклатуры
		|		ПО СтатусыПубликации.ОбъектПубликации = СправСертификатыНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииТоваров
		|		ПО СтатусыПубликации.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииТоваров.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликации.Номенклатура = СтатусыПубликацииТоваров.Номенклатура
		|			И СтатусыПубликации.Характеристика = СтатусыПубликацииТоваров.Характеристика
		|			И СтатусыПубликации.Упаковка = СтатусыПубликацииТоваров.Упаковка
		|			И (СтатусыПубликацииТоваров.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектов
		|		ПО СтатусыПубликации.УчетнаяЗаписьМаркетплейса = СоответствияОбъектов.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликации.ВидОбъектаМаркетплейса = СоответствияОбъектов.ВидОбъектаМаркетплейса
		|			И СтатусыПубликации.ОбъектПубликации = СоответствияОбъектов.Объект1С
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Сертификат)
		|	И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|			ИЛИ ЕСТЬNULL(СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса, ""-1"") <> СтатусыПубликации.ИдентификаторОбъектаМаркетплейса
		|			ИЛИ СправСертификатыНоменклатуры.ПометкаУдаления)
		|	И СтатусыПубликации.ЗаданиеПубликации = """"";

	ОпубликованныеСертификаты = Новый Соответствие;
	ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат");
	
	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();
	СостояниеСертификата = СоответствиеСостоянийПубликации["uploaded_object"];
	СостояниеСертификатаСОшибкой = СоответствиеСостоянийПубликации["failed_object"];

	ТекстОшибки = "invalid certificate accordance_type_code or expire_date";
	ТекстОшибкиТранскрипция = НСтр("ru = 'Не удалось загрузить сертификат по причине: недействительный сертификат, соответствующий коду типа или дате истечения срока действия'");

	СтатусНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");

	КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;
	ОписаниеОшибкиОтсутствияФайлов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отсутствуют присоединенные файлы требуемого формата: %1.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрСоединить(РасширенияИзображений(Истина), ", "));

	// Для проверки статусов в Росаккредитации
	ДействительныеСтатусыРосаккредитации = НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации();

	ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСертификатов.Следующий() Цикл
		Если Не ПустаяСтрока(ВыборкаСертификатов.ОписаниеОшибки) И ВыборкаСертификатов.ОписаниеОшибки <> ОписаниеОшибкиОтсутствияФайлов Тогда
			Продолжить;
		КонецЕсли;

		Если ВыборкаСертификатов.ПометкаУдаления Тогда
			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСертификатов, "ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации");
			Запись.Прочитать();

			Если Запись.Выбран() Тогда
				Запись.Статус = СтатусНеИспользуется;
				Запись.Записать();
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		СписокАтрибутовСертификата = ВыборкаСертификатов.ДанныеОбъекта.Получить();
		Если СписокАтрибутовСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// Проверка статуса в Росаккредитации
		Попытка
			СертификатДействует = (ДействительныеСтатусыРосаккредитации.Найти(ВыборкаСертификатов.СтатусРосаккредитации) <> Неопределено);

			Если НЕ СертификатДействует Тогда
				ОписаниеОшибки = ТекстОшибкиПроверкиСертификатаВРосаккредитации(
					ВыборкаСертификатов.СтатусРосаккредитации,
					ВыборкаСертификатов.ДатаОбновленияСтатусаРосаккредитации);

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаСертификатов, "ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации");
				Запись.Прочитать();

				Если Запись.Выбран() И Запись.ОписаниеОшибки <> ОписаниеОшибки Тогда
					Запись.КодОшибки = КодОшибки;
					Запись.ОписаниеОшибки = ОписаниеОшибки;
					Запись.Записать();
				КонецЕсли;

				Продолжить;
			КонецЕсли;
		Исключение
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для сертификата %1 не удалось записать изменения информации из Росаккредитации'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ВыборкаСертификатов.ОбъектПубликации);

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				СообщениеОбОшибке);
	
			Продолжить;
		КонецПопытки;

		Если СписокАтрибутовСертификата.ПрисоединенныеФайлы.Количество() = 0 Тогда
			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСертификатов, "ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации");
			Запись.Прочитать();

			Если Запись.Выбран() И Запись.ОписаниеОшибки <> ОписаниеОшибкиОтсутствияФайлов Тогда
				Запись.КодОшибки = КодОшибки;
				Запись.ОписаниеОшибки = ОписаниеОшибкиОтсутствияФайлов;
				Запись.Записать();
			КонецЕсли;

			Продолжить;
		КонецЕсли;

		// Публикация
		ТекущееСостояние = Неопределено;

		ИдентификаторСертификата = ВыборкаСертификатов.ИдентификаторСертификата;

		Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда // Проверка наличия в списке опубликованных сертификатов
			ИдентификаторСертификата = ОпубликованныеСертификаты[ВыборкаСертификатов.ОбъектПубликации];
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда // Идентификатор отсутствует и сертификат еще не публиковался
			МассивФайлов = Новый Массив;

			Для Каждого ИзображениеСертификата Из СписокАтрибутовСертификата.ПрисоединенныеФайлы Цикл
				ДанныеФайла = РаботаСФайлами.ДанныеФайла(ИзображениеСертификата);
				СписокСвойствФайла = Новый Структура;
				СписокСвойствФайла.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
				СписокСвойствФайла.Вставить("Расширение", ДанныеФайла.Расширение);
				СписокСвойствФайла.Вставить("АдресХранилищаФайла", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);

				МассивФайлов.Добавить(СписокСвойствФайла);
			КонецЦикла;

			// Добавление сертификата в сервис.
			ПараметрыСертификата = ОбщегоНазначения.СкопироватьРекурсивно(СписокАтрибутовСертификата);
			ПараметрыСертификата.Вставить("ПрисоединенныеФайлы", МассивФайлов);

			Результат = ДобавитьСертификатВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыСертификата);
			ОписаниеОшибки = "";
			Если Результат = Неопределено Тогда
				Продолжить;
			Иначе
				Если ТипЗнч(Результат) = Тип("Структура") Тогда
					Результат.Свойство("error", ОписаниеОшибки);
				Иначе
					ОписаниеОшибки = Результат.Получить("error");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеОшибки) И ОписаниеОшибки = ТекстОшибки Тогда
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
					ЗаполнитьЗначенияСвойств(Запись, ВыборкаСертификатов, "ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации");
					Запись.Прочитать();

					Если Запись.Выбран() Тогда
						Запись.ИдентификаторОбъектаМаркетплейса = ИдентификаторСертификата;
						Запись.Статус = СостояниеСертификатаСОшибкой.СтатусОбъектаПубликации;
						Запись.Состояние = СостояниеСертификатаСОшибкой.СостояниеОбъектаПубликации;
						Запись.ОписаниеСостояния = СостояниеСертификатаСОшибкой.ОписаниеСостоянияОбъектаПубликации;
						Запись.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗагрузкиСертификата;
						Запись.ОписаниеОшибки = ТекстОшибкиТранскрипция;

						Запись.ДатаОбновления = ТекущаяДатаСеанса();
						Запись.Записать();
					КонецЕсли;

					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ИдентификаторСертификата = XMLСтрока(Результат.id);

			// Запись идентификатора сертификата в регистр соответствия объектов.
			Запись = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейса;
			Запись.ИдентификаторОбъектаМаркетплейса = ИдентификаторСертификата;
			Запись.Объект1С = ВыборкаСертификатов.ОбъектПубликации;
			Запись.НаименованиеОбъектаМаркетплейса = ВыборкаСертификатов.ПредставлениеОбъектаПубликации;
			Запись.ДатаАктуальности = ТекущаяДатаСеанса();
			Запись.Записать();

			ОпубликованныеСертификаты.Вставить(ВыборкаСертификатов.ОбъектПубликации, ИдентификаторСертификата);
		КонецЕсли;

		Если ВыборкаСертификатов.СертификатПривязан Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ВыборкаСертификатов.ИдентификаторТовара) Или Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
			Продолжить;
		КонецЕсли;

		ИдентификаторТовара = СтрокаВЧисло(ВыборкаСертификатов.ИдентификаторТовара);

		ПараметрыСертификата = Новый Структура;
		ПараметрыСертификата.Вставить("ИдентификаторСертификата", СтрокаВЧисло(ИдентификаторСертификата));
		ПараметрыСертификата.Вставить("ИдентификаторТовара", ИдентификаторТовара);

		РезультатПривязки = ПривязатьСертификатКТоваруВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыСертификата);
		Если РезультатПривязки = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаСертификатов, "ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации");
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.ИдентификаторОбъектаМаркетплейса = ИдентификаторСертификата;
			Запись.Статус = СостояниеСертификата.СтатусОбъектаПубликации;
			Запись.Состояние = СостояниеСертификата.СостояниеОбъектаПубликации;
			Запись.ОписаниеСостояния = СостояниеСертификата.ОписаниеСостоянияОбъектаПубликации; 
			Запись.КодОшибки = "";
			Запись.ОписаниеОшибки = "";
			
			Запись.ДатаОбновления = ТекущаяДатаСеанса();
			Запись.Записать();
		КонецЕсли;

	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область СертификатыSellerAPI

// Получает типы используемых сертификатов (типов документов) из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductCertificateTypes (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса:
//       * value - Строка - значение справочника;
//       * name  - Строка - название документа.
//
Функция ПолучитьТипыСертификатовИзСервиса(УчетнаяЗаписьМаркетплейса)

	ТекстЗапроса = "/v1/product/certificate/types";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	ПараметрыЗапроса = Новый Структура;

	// GET-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Ложь);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает типы соответствия требованиям из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductCertificateAccordanceTypes (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса:
//       * value - Строка - значение справочника;
//       * name  - Строка - название документа.
//
Функция ПолучитьТипыСоответствияТребованиямИзСервиса(УчетнаяЗаписьМаркетплейса)

	ТекстЗапроса = "/v1/product/certificate/accordance-types";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	ПараметрыЗапроса = Новый Структура;

	// GET-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Ложь);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает список сертифицируемых категорий из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductCertificationList (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры запроса:
//     * НомерСтраницы                 - Число - номер страницы, возвращаемой в запросе (page);
//     * КоличествоЭлементовНаСтранице - Число - количество элементов на странице (page_size).
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса:
//       * Результат      - Массив Из см. НовыйРезультатИзСервиса - информация о сертифицируемых категориях (ProductCertificationListResponseCertification):
//         ** category_name - Строка - название сертифицируемой категории;
//         ** is_required   - Булево - признак обязательной характеристики.
//       * ВсегоЭлементов - Число - всего категорий.
//
Функция СертифицируемыеКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/certification/list";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",      "result.certification");
	АтрибутыОтвета.Вставить("ВсегоЭлементов", "result.total");

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("page",      Параметры.НомерСтраницы);
	ПараметрыЗапроса.Вставить("page_size", Параметры.КоличествоЭлементовНаСтранице);

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

// Добавляет сертификаты для товаров в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductCertificateCreate (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры запроса:
//     * ПрисоединенныеФайлы                      - Массив Из Строка - массив сертификатов для товара (files);
//     * НаименованиеСертификата                  - Строка - название сертификата (name);
//     * НомерСертификата                         - Строка - номер сертификата (number);
//     * ИдентификаторТипаСертификата             - Строка - тип сертификата (type_code);
//     * ИдентификаторТипаСоответствияТребованиям - Строка - тип соответствия требованиям (accordance_type_code);
//     * ДатаНачалаСрокаДействия                  - Дата - дата начала действия сертификата (issue_date);
//     * ДатаОкончанияСрокаДействия               - Дата - дата окончания действия сертификата (expire_date).
// 
// Возвращаемое значение:
//   - Число - идентификатор загруженного сертификата.
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ДобавитьСертификатВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/certificate/create";

	// Сформировать multipart.
	Разделитель = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	
	ВыходнойПоток = Новый ПотокВПамяти;
	ЗаписьВыходныхДанных = Новый ЗаписьДанных(ВыходнойПоток);

	Для Каждого ПрисоединенныйФайл Из Параметры.ПрисоединенныеФайлы Цикл
		ДанныеФайла = ПолучитьИзВременногоХранилища(ПрисоединенныйФайл.АдресХранилищаФайла);
		УдалитьИзВременногоХранилища(ПрисоединенныйФайл.АдресХранилищаФайла);

		Изображение = СоздатьСообщение_Изображение(ПрисоединенныйФайл.ИмяФайла, ДанныеФайла, ПрисоединенныйФайл.Расширение);

		ЗаписьВыходныхДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьВыходныхДанных.Записать(Изображение);
		ЗаписьВыходныхДанных.ЗаписатьСтроку("");
	КонецЦикла;

	ДобавитьПараметрВТелоЗапроса(ЗаписьВыходныхДанных, "name", Параметры.НаименованиеСертификата, Разделитель);
	ДобавитьПараметрВТелоЗапроса(ЗаписьВыходныхДанных, "number", Параметры.НомерСертификата, Разделитель);
	ДобавитьПараметрВТелоЗапроса(ЗаписьВыходныхДанных, "type_code", Параметры.ИдентификаторТипаСертификата, Разделитель);
	Если ЗначениеЗаполнено(Параметры.ИдентификаторТипаСоответствияТребованиям) Тогда
		ДобавитьПараметрВТелоЗапроса(ЗаписьВыходныхДанных, "accordance_type_code", Параметры.ИдентификаторТипаСоответствияТребованиям, Разделитель);
	КонецЕсли;
	ДобавитьПараметрВТелоЗапроса(ЗаписьВыходныхДанных, "issue_date", Параметры.ДатаНачалаСрокаДействия, Разделитель);
	Если ЗначениеЗаполнено(Параметры.ДатаОкончанияСрокаДействия) Тогда
		ДобавитьПараметрВТелоЗапроса(ЗаписьВыходныхДанных, "expire_date", Параметры.ДатаОкончанияСрокаДействия, Разделитель);
	КонецЕсли;

	ЗаписьВыходныхДанных.ЗаписатьСтроку("--" + Разделитель + "--");

	ЗаписьВыходныхДанных.Закрыть(); 

	ДвоичныеДанныеИзПотока = ВыходнойПоток.ЗакрытьИПолучитьДвоичныеДанные();
	РазмерТелаОбъекта = XMLСтрока(ДвоичныеДанныеИзПотока.Размер());

	// Опубликовать сертификат.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ДвоичныеДанные", ДвоичныеДанныеИзПотока);

	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ЭтоДвоичныеДанные = Истина;
	СлужебныеПараметры.ContentType = "multipart/form-data; boundary=" + Разделитель;
	СлужебныеПараметры.ContentLenght = РазмерТелаОбъекта;
	СлужебныеПараметры.ВернутьСтрокуОтвета = Истина;

	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса);

	Возврат РезультатЗапроса;

КонецФункции

// Привязывает сертификат к товару в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductCertificateBind (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры запроса:
//     * ИдентификаторСертификата - Число - идентификатор сертификата, который был присвоен при его загрузке (certificate_id);
//     * ИдентификаторТовара      - Число - идентификатор товара на маркетплейсе (product_id).
// 
// Возвращаемое значение:
//   - Булево - результат обработки запроса. Истина, если запрос выполнен без ошибок.
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПривязатьСертификатКТоваруВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/certificate/bind";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("certificate_id", Параметры.ИдентификаторСертификата);
	ИдентификаторыТоваров = Новый Массив;
	ИдентификаторыТоваров.Добавить(Параметры.ИдентификаторТовара);
	ПараметрыЗапроса.Вставить("product_id", ИдентификаторыТоваров);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат; 

КонецФункции

#КонецОбласти

#Область ДвиженияТоваровСлужебный

// Заполняет таблицу результатов обновления остатков товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаРезультатов        - ТаблицаЗначений - результаты обновления остатков товаров,
//                                 см. НоваяТаблицаРезультатовОбновленияОстатковТоваров.
//   ОтветСервиса              - Массив Из см. НовыйРезультатИзСервиса - результаты обновления остатков товаров в сервисе Ozon,
//                                 см. ОбновитьОстаткиТоваровВСервисе, ОбновитьОстаткиТоваровПоСхемамFBSИRealFBSВСервисе.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ДобавитьОтветСервисаВТаблицуРезультатовОбновленияОстатковТоваров(ТаблицаРезультатов, ОтветСервиса, УчетнаяЗаписьМаркетплейса)

	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
		НоваяСтрока                                  = ТаблицаРезультатов.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["offer_id"];
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЭлементОтветаСервиса["product_id"];
		НоваяСтрока.ИдентификаторСкладаМаркетплейса  = ЭлементОтветаСервиса["warehouse_id"];
		НоваяСтрока.ДатаОбновления                   = ЭлементОтветаСервиса["updated"];
		НоваяСтрока.Ошибки                           = ЭлементОтветаСервиса["errors"];
	КонецЦикла;

КонецПроцедуры

// Обновляет остатки товаров.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ОстаткиТоваров            - ТаблицаЗначений - остатки товаров на складках FBS и rFBS:
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца (артикул);
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//     * ИдентификаторСкладаМаркетплейса  - Строка - идентификатор склада на маркетплейсе;
//     * КоличествоВНаличии               - Число - количество товара в наличии.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаРезультатовОбновленияОстатковТоваров.
//
Функция ОбновитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ОстаткиТоваров, Отказ = Ложь) Экспорт
	
	ТаблицаРезультатов = НоваяТаблицаРезультатовОбновленияОстатковТоваров();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	ПараметрыЗапроса   = НовыеПараметрыЗапросаОбновленияОстатковТоваров();
	КоличествоЗапросов = ПараметрыЗапроса.КоличествоЗапросовВМинуту;
	Порция             = Новый Массив;
	
	Для Каждого ЭлементПорции Из ОстаткиТоваров Цикл
		Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
			Если КоличествоЗапросов <= 0 Тогда
				Пока ТекущаяДатаСеанса() - ПараметрыЗапроса.ВремяПоследнегоЗапроса < 60 Цикл
					// Пауза в 1 минуту
				КонецЦикла;
				
				КоличествоЗапросов = ПараметрыЗапроса.КоличествоЗапросовВМинуту;
			КонецЕсли;
			
			ПараметрыЗапроса.ОстаткиТоваров = Порция;
			ОтветСервиса = ОбновитьОстаткиТоваровВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
				
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
				Прервать;
			Иначе
				ДобавитьОтветСервисаВТаблицуРезультатовОбновленияОстатковТоваров(ТаблицаРезультатов, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
				ПараметрыЗапроса.ВремяПоследнегоЗапроса = ТекущаяДатаСеанса();
				КоличествоЗапросов = КоличествоЗапросов - 1;
			КонецЕсли;
		КонецЕсли;
		
		Данные = Новый Структура;
		Данные.Вставить("offer_id",     ЭлементПорции.ИдентификаторПубликации);
		Данные.Вставить("product_id",   СтрокаВЧисло(ЭлементПорции.ИдентификаторОбъектаМаркетплейса));
		Данные.Вставить("warehouse_id", СтрокаВЧисло(ЭлементПорции.ИдентификаторСкладаМаркетплейса));
		Данные.Вставить("stock",        ЭлементПорции.КоличествоВНаличии);
		
		Порция.Добавить(Данные);
	КонецЦикла;
	
	Если Не Отказ
		 	И Порция.Количество() > 0 Тогда
		Если КоличествоЗапросов <= 0 Тогда
			Пока ТекущаяДатаСеанса() - ПараметрыЗапроса.ВремяПоследнегоЗапроса < 60 Цикл
				// Пауза в 1 минуту
			КонецЦикла;
			
			КоличествоЗапросов = ПараметрыЗапроса.КоличествоЗапросовВМинуту;
		КонецЕсли;
		
		ПараметрыЗапроса.ОстаткиТоваров = Порция;
		ОтветСервиса = ОбновитьОстаткиТоваровВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		Порция.Очистить();
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
		Иначе		
			ДобавитьОтветСервисаВТаблицуРезультатовОбновленияОстатковТоваров(ТаблицаРезультатов, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
			ПараметрыЗапроса.ВремяПоследнегоЗапроса = ТекущаяДатаСеанса();
			КоличествоЗапросов = КоличествоЗапросов - 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;

КонецФункции

// Обновляет остатки товаров по схемам FBS и rFBS.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ОстаткиТоваров            - ТаблицаЗначений - остатки товаров на складках FBS и rFBS:
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца (артикул);
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//     * КоличествоВНаличии               - Число - количество товара в наличии.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаРезультатовОбновленияОстатковТоваров.
//
Функция ОбновитьОстаткиТоваровПоСхемамFBSИRealFBS(УчетнаяЗаписьМаркетплейса, ОстаткиТоваров, Отказ = Ложь) Экспорт
	
	ТаблицаРезультатов = НоваяТаблицаРезультатовОбновленияОстатковТоваров();
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат ТаблицаРезультатов;
	КонецЕсли;
	
	ПараметрыЗапроса   = НовыеПараметрыЗапросаОбновленияОстатковТоваров();
	КоличествоЗапросов = ПараметрыЗапроса.КоличествоЗапросовВМинуту;
	Порция             = Новый Массив;
		
	Для Каждого ЭлементПорции Из ОстаткиТоваров Цикл
		Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
			Если КоличествоЗапросов <= 0 Тогда
				Пока ТекущаяДатаСеанса() - ПараметрыЗапроса.ВремяПоследнегоЗапроса < 60 Цикл
					// Пауза в 1 минуту
				КонецЦикла;
				
				КоличествоЗапросов = ПараметрыЗапроса.КоличествоЗапросовВМинуту;
			КонецЕсли;
			
			ПараметрыЗапроса.ОстаткиТоваров = Порция;
			ОтветСервиса = ОбновитьОстаткиТоваровПоСхемамFBSИRealFBSВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
				
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
				Прервать;
			Иначе
				ДобавитьОтветСервисаВТаблицуРезультатовОбновленияОстатковТоваров(ТаблицаРезультатов, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
				ПараметрыЗапроса.ВремяПоследнегоЗапроса = ТекущаяДатаСеанса(); 
				КоличествоЗапросов = КоличествоЗапросов - 1;
			КонецЕсли;
		КонецЕсли;

		Порция.Добавить(Новый Структура("offer_id, product_id, stock",
			ЭлементПорции.ИдентификаторПубликации,
			СтрокаВЧисло(ЭлементПорции.ИдентификаторОбъектаМаркетплейса),
			ЭлементПорции.КоличествоВНаличии));
	КонецЦикла;
	
	Если Не Отказ
		 	И Порция.Количество() > 0 Тогда
		Если КоличествоЗапросов <= 0 Тогда
			Пока ТекущаяДатаСеанса() - ПараметрыЗапроса.ВремяПоследнегоЗапроса < 60 Цикл
				// Пауза в 1 минуту
			КонецЦикла;
			
			КоличествоЗапросов = ПараметрыЗапроса.КоличествоЗапросовВМинуту;
		КонецЕсли;
		
		ПараметрыЗапроса.ОстаткиТоваров = Порция;
		ОтветСервиса = ОбновитьОстаткиТоваровПоСхемамFBSИRealFBSВСервисе(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		Порция.Очистить();
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
		Иначе		
			ДобавитьОтветСервисаВТаблицуРезультатовОбновленияОстатковТоваров(ТаблицаРезультатов, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
			ПараметрыЗапроса.ВремяПоследнегоЗапроса = ТекущаяДатаСеанса();
			КоличествоЗапросов = КоличествоЗапросов - 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;

КонецФункции

// Выгружает следующую порцию остатков товарных позиций из информационной базы на торговую площадку.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductsStocksV2 (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ПараметрыЗапроса           - Структура - параметры запроса обновления остатков:
//     * stocks                   - Массив Из Структура - загружаемые остатки:
//       ** offer_id                - Строка - идентификатор товара в системе продавца (артикул);
//       ** product_id              - Число - идентификатор товара в маркетплейсе;
//       ** warehouse_id            - Число - идентификатор склада в маркетплейсе;
//       ** stock                   - Число - количество товара в наличии.
//   СведенияОВыгруженныхДанных - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   Отказ                      - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису;
//   ПродолжитьВыполнение       - Булево - продолжать выгрузку остатков для других позиций (порций).
//
Процедура ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных, Отказ = Ложь, ПродолжитьВыполнение = Истина)

	ТекстЗапроса = "/v2/products/stocks";
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина);
	
	Если РезультатЗапроса = Неопределено Тогда
		Отказ = Истина;
		ПродолжитьВыполнение = Ложь;
		Возврат;
	КонецЕсли;
		
	ДатаВыгрузки = ТекущаяДатаСеанса();
	Для Каждого ЭлементРезультата Из РезультатЗапроса["result"] Цикл
		СтруктураПоиска = Новый Структура("offer_id, warehouse_id",
			ЭлементРезультата["offer_id"],
			ЭлементРезультата["warehouse_id"]);
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];

		Если ЭлементРезультата["updated"] Тогда
			МенеджерЗаписи = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультатаПоиска);
			МенеджерЗаписи.ДатаВыгрузкиОстатков = ДатаВыгрузки;
			МенеджерЗаписи.Записать(Истина);
			
		Иначе
			Отказ = Истина;
			ПродолжитьВыполнение = Истина;
			
			МассивОшибок = Новый Массив;
			Для Каждого ЭлементСпискаОшибок Из ЭлементРезультата["errors"] Цикл
				МассивОшибок.Добавить(ПолучитьОписаниеОшибки(ЭлементСпискаОшибок["code"], ЭлементСпискаОшибок["message"]));
			КонецЦикла;
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выгрузке остатка товара %1 по складу %2 произошла ошибка:'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка),
				СтрокаРезультатаПоиска.Склад);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				СообщениеОбОшибке + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет таблицу остатков товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаОстатковТоваров    - ТаблицаЗначений - остатки товаров, см. НоваяТаблицаОстатковТоваров.
//   ОтветСервиса              - Массив Из см. НовыйРезультатИзСервиса - информация о списке товаров из сервиса Ozon,
//                                 см. ПолучитьОстаткиТоваровИзСервиса.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ДобавитьОтветСервисаВТаблицуОстатковТоваров(ТаблицаОстатковТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса)

	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["stocks"] Цикл
			НоваяСтрока                                  = ТаблицаОстатковТоваров.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["offer_id"];
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]);
			НоваяСтрока.ИдентификаторSKU                 = "";
			НоваяСтрока.ИдентификаторСкладаМаркетплейса  = "";
			НоваяСтрока.НаименованиеСкладаМаркетплейса   = "";
			НоваяСтрока.ТипСкладаМаркетплейса            = ВРег(ЭлементКоллекции["type"]);
			НоваяСтрока.КоличествоВНаличии               = ЭлементКоллекции["present"];
			НоваяСтрока.КоличествоЗарезервировано        = ЭлементКоллекции["reserved"];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Получает остатки товаров.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоТоварам           - см. НовыйФильтрЗапросаПоТоварам.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОстатковТоваров.
//
Функция ПолучитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, Отказ = Ложь) Экспорт
	
	ТаблицаОстатковТоваров = НоваяТаблицаОстатковТоваров();

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат ТаблицаОстатковТоваров;
	КонецЕсли;
	
	ФильтрыВидимости                   = ЗначениеВМассив(ФильтрПоТоварам.ФильтрВидимости);
	ИдентификаторыПубликации           = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыПубликации);
	ИдентификаторыОбъектовМаркетплейса = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса);

	Для Каждого ЭлементФильтра Из ФильтрыВидимости Цикл
		ПараметрыЗапроса                 = НовыеПараметрыЗапросаПолученияСпискаТоваров(ФильтрПоТоварам);
		ПараметрыЗапроса.ФильтрВидимости = ЭлементФильтра;
		Порция 							 = Новый Массив;
		
		Если ИдентификаторыПубликации <> Неопределено Тогда
			Для Каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
					
					ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе	
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОстатковТоваров(
							ТаблицаОстатковТоваров, 
							ОтветСервиса, 
							УчетнаяЗаписьМаркетплейса);
					КонецЕсли;
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если Не Отказ
		 		 	И Порция.Количество() > 0 Тогда  
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				
				ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе	
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОстатковТоваров(
						ТаблицаОстатковТоваров, 
						ОтветСервиса, 
						УчетнаяЗаписьМаркетплейса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Если ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
			Для Каждого ЭлементПорции Из ИдентификаторыОбъектовМаркетплейса Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
					
					ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе	
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОстатковТоваров(
							ТаблицаОстатковТоваров, 
							ОтветСервиса, 
							УчетнаяЗаписьМаркетплейса);
					КонецЕсли;
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если Не Отказ
		 		 	И Порция.Количество() > 0 Тогда
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
				
				ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе	
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОстатковТоваров(
						ТаблицаОстатковТоваров, 
						ОтветСервиса, 
						УчетнаяЗаписьМаркетплейса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаОстатковТоваров;

КонецФункции

// Получает отчет по остаткам и товарам в перемещении по складам Ozon.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоСкладам           - Строка - фильтр по типу склада;
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОстатковТоваровНаСкладахТорговойПлощадки.
//
Функция ОстаткиТоваровНаСкладахТорговойПлощадки(УчетнаяЗаписьМаркетплейса, ФильтрПоСкладам = "ALL", Отказ = Ложь)

	Склады = ЗагруженностьСкладовИзСервиса(УчетнаяЗаписьМаркетплейса);
	
	ТаблицаОстатковТоваров = НоваяТаблицаОстатковТоваровНаСкладахТорговойПлощадки();
	ПараметрыЗапроса       = НовыеПараметрыЗапросаПолученияОтчетаПоОстаткамИТоварамВПеремещенииПоСкладам(ФильтрПоСкладам);
	
	Пока Истина Цикл
		ОтветСервиса = ПолучитьОтчетПоОстаткамИТоварамВПеремещенииПоСкладамИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
			Прервать;
			
		ИначеЕсли ОтветСервиса.Количество() = 0 Тогда
			Прервать;
			
		Иначе
			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
				НоваяСтрока                                  = ТаблицаОстатковТоваров.Добавить();
				НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["item_code"];
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["sku"]);
				НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементОтветаСервиса["item_name"];
				НоваяСтрока.НаименованиеСклада               = ЭлементОтветаСервиса["warehouse_name"];
				НоваяСтрока.ИдентификаторСклада              = Склады.Получить(ВРег(НоваяСтрока.НаименованиеСклада));
				НоваяСтрока.ВНаличии                         = ЭлементОтветаСервиса["free_to_sell_amount"];
				НоваяСтрока.Зарезервировано                  = ЭлементОтветаСервиса["reserved_amount"];
				НоваяСтрока.ВПодтвержденныхПоставках         = ЭлементОтветаСервиса["promised_amount"];
			КонецЦикла;
			
			Если ОтветСервиса.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете + ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаОстатковТоваров;

КонецФункции

// Получает отчеты о реализации доставленных и возвращенных товаров за месяц.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Период                    - Дата - месяц, за который необходимо получить данные;
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ОтчетОРеализацииТоваровНаСкладахТорговойПлощадки(УчетнаяЗаписьМаркетплейса, Период, Отказ = Ложь)

	ТаблицаОборотовТоваров = НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(Истина);
	ПараметрыЗапроса       = НовыеПараметрыЗапросаПолученияОтчетаОРеализацииТоваров(Период);
	ОтветСервиса           = ПолучитьОтчетОРеализацииТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
	
	Если ОтветСервиса = Неопределено Или ОтветСервиса.СтрокиОтчета = Неопределено Тогда
		Отказ = Истина;
		
	Иначе
		Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.СтрокиОтчета Цикл
			Если ЗначениеЗаполнено(ЭлементОтветаСервиса["delivery_commission"])
					И ЭлементОтветаСервиса["delivery_commission"]["quantity"] <> 0 Тогда
				НоваяСтрока                                  = ТаблицаОборотовТоваров.Добавить();
				НоваяСтрока.СхемаДоставки                    = Перечисления.СхемыРаботыТорговыхПлощадок.ПустаяСсылка();
				НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["item"]["offer_id"];
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["item"]["sku"]);
				НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементОтветаСервиса["item"]["name"];
				НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементОтветаСервиса["item"]["sku"]);
				НоваяСтрока.ИдентификаторСклада              = "";
				НоваяСтрока.НаименованиеСклада               = "";
				НоваяСтрока.ДатаОтправления                  = Дата(1, 1, 1);
				НоваяСтрока.НомерОтправления                 = "";
				НоваяСтрока.НомерЗаказа                      = "";
				НоваяСтрока.ИдентификаторЗаказа              = "";
				НоваяСтрока.Заказано                         = ЭлементОтветаСервиса["delivery_commission"]["quantity"];
				НоваяСтрока.Доставлено                       = НоваяСтрока.Заказано;
				НоваяСтрока.Отменено                         = 0;
				НоваяСтрока.Цена                             = ЭлементОтветаСервиса["seller_price_per_instance"];
				НоваяСтрока.ПроцентКомиссии                  = ЭлементОтветаСервиса["commission_ratio"];
				НоваяСтрока.СуммаКомиссии                    = ЭлементОтветаСервиса["delivery_commission"]["standard_fee"];
				НоваяСтрока.ЦенаДоСкидки                     = ЭлементОтветаСервиса["seller_price_per_instance"];
				НоваяСтрока.ПроцентСкидки                    = 0;
				НоваяСтрока.СуммаСкидки                      = ЭлементОтветаСервиса["delivery_commission"]["compensation"];
				НоваяСтрока.ЦенаДляКлиента                   = ЭлементОтветаСервиса["delivery_commission"]["price_per_instance"];
				НоваяСтрока.ИтогоКНачислению                 = ЭлементОтветаСервиса["delivery_commission"]["total"];
				НоваяСтрока.БаллыЗаСкидки                    = ЭлементОтветаСервиса["delivery_commission"]["bonus"];
				НоваяСтрока.ВыплатыПоМеханикамЛояльности     = ЭлементОтветаСервиса["delivery_commission"]["stars"];
				
				Если Период < Дата(2023, 10, 1) Тогда
					НоваяСтрока.СуммаКомиссии = НоваяСтрока.ЦенаДляКлиента * НоваяСтрока.Заказано + НоваяСтрока.СуммаСкидки - НоваяСтрока.ИтогоКНачислению;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементОтветаСервиса["return_commission"])
					И ЭлементОтветаСервиса["return_commission"]["quantity"] <> 0 Тогда
				НоваяСтрока                                  = ТаблицаОборотовТоваров.Добавить();
				НоваяСтрока.СхемаДоставки                    = Перечисления.СхемыРаботыТорговыхПлощадок.ПустаяСсылка();
				НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["item"]["offer_id"];
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["item"]["sku"]);
				НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементОтветаСервиса["item"]["name"];
				НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементОтветаСервиса["item"]["sku"]);
				НоваяСтрока.ИдентификаторСклада              = "";
				НоваяСтрока.НаименованиеСклада               = "";
				НоваяСтрока.ДатаОтправления                  = Дата(1, 1, 1);
				НоваяСтрока.НомерОтправления                 = "";
				НоваяСтрока.НомерЗаказа                      = "";
				НоваяСтрока.ИдентификаторЗаказа              = "";
				НоваяСтрока.Заказано                         = -ЭлементОтветаСервиса["return_commission"]["quantity"];
				НоваяСтрока.Доставлено                       = 0;
				НоваяСтрока.Отменено                         = 0;
				НоваяСтрока.Цена                             = ЭлементОтветаСервиса["seller_price_per_instance"];
				НоваяСтрока.ПроцентКомиссии                  = ЭлементОтветаСервиса["commission_ratio"];
				НоваяСтрока.СуммаКомиссии                    = -ЭлементОтветаСервиса["return_commission"]["standard_fee"];
				НоваяСтрока.ЦенаДоСкидки                     = ЭлементОтветаСервиса["seller_price_per_instance"];
				НоваяСтрока.ПроцентСкидки                    = 0;
				НоваяСтрока.СуммаСкидки                      = -ЭлементОтветаСервиса["return_commission"]["compensation"];
				НоваяСтрока.ЦенаДляКлиента                   = ЭлементОтветаСервиса["return_commission"]["price_per_instance"];
				НоваяСтрока.ИтогоКНачислению                 = -ЭлементОтветаСервиса["return_commission"]["total"];
				НоваяСтрока.БаллыЗаСкидки                    = -ЭлементОтветаСервиса["return_commission"]["bonus"];
				НоваяСтрока.ВыплатыПоМеханикамЛояльности     = -ЭлементОтветаСервиса["return_commission"]["stars"];
				
				Если Период < Дата(2023, 10, 1) Тогда
					НоваяСтрока.СуммаКомиссии = НоваяСтрока.ЦенаДляКлиента * НоваяСтрока.Заказано + НоваяСтрока.СуммаСкидки - НоваяСтрока.ИтогоКНачислению;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаОборотовТоваров.ЗаполнитьЗначения(ОтветСервиса.ШапкаОтчета["number"], "НомерВходящегоДокумента");
		ТаблицаОборотовТоваров.ЗаполнитьЗначения(Дата(СтрЗаменить(ОтветСервиса.ШапкаОтчета["doc_date"], "-", "")), "ДатаВходящегоДокумента");
	КонецЕсли;
	
	Возврат ТаблицаОборотовТоваров;

КонецФункции

// Обновляет дату загрузки отчета о продажах для учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ДатаПоследнейЗагрузки     - Дата - дата загрузки отчета.
//
Процедура ОбновитьДатуПоследнегоЗагруженногоМесяцаПоПродажам(УчетнаяЗаписьМаркетплейса, ДатаПоследнейЗагрузки)

	НачатьТранзакцию();

	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", УчетнаяЗаписьМаркетплейса);
		БлокировкаДанных.Заблокировать();

		УчетнаяЗаписьОбъект = УчетнаяЗаписьМаркетплейса.ПолучитьОбъект();

		Если УчетнаяЗаписьОбъект <> Неопределено Тогда 
			ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьМаркетплейса);

			СтрокаТабличнойЧасти = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Найти("ДатаПоследнегоЗагруженногоМесяца", "ИдентификаторНастройки");
			Если СтрокаТабличнойЧасти = Неопределено Тогда
				СтрокаТабличнойЧасти                        = УчетнаяЗаписьОбъект.ДополнительныеНастройки.Добавить();
				СтрокаТабличнойЧасти.ИдентификаторНастройки = "ДатаПоследнегоЗагруженногоМесяца";
			КонецЕсли;
			СтрокаТабличнойЧасти.ЗначениеНастройки = Макс(ДатаПоследнейЗагрузки, КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)));

			УчетнаяЗаписьОбъект.Записать();
		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();

		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При обновлении дополнительной настройки торговой площадки <%1> возникли ошибки: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗаписьМаркетплейса,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ДвиженияТоваровSellerAPI

// Обновляет остатки товаров в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsStocks (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры запроса обновления остатков:
//     * ОстаткиТоваров          - Массив Из Структура - загружаемые остатки (stocks):
//       ** offer_id               - Строка - идентификатор товара в системе продавца (артикул);
//       ** product_id             - Число - идентификатор товара в маркетплейсе;
//       ** warehouse_id           - Число - идентификатор склада в маркетплейсе;
//       ** stock                  - Число - количество товара в наличии.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса (productImportProductsStocksResponseProcessResult):
//       * offer_id     - Строка - идентификатор товара в системе продавца - артикул;
//       * product_id   - Число - идентификатор товара в маркетплейсе;
//       * warehouse_id - Число - идентификатор склада в маркетплейсе;
//       * updated      - Булево - Истина, если информации о товаре успешно обновлена;
//       * errors       - Массив Из см. НовыйРезультатИзСервиса - список ошибок, которые возникли при обработке запроса (productImportProductsStocksResponseError):
//         ** code        - Строка - код ошибки. Возможные значения:
//                            "OVER_MAX_OVH_KGT" - вес или габариты товара больше максимальных. Обновить количество не получится;
//                            "OVER_MAX_OVH_NON_KGT - вы не можете продавать крупногабаритные товары с этого склада;
//                            "NON_KGT_ON_KGT_WAREHOUSE - все ваши товары продаются как крупногабаритные, а вы хотите продавать обычный;
//                            "STOCK_TOO_BIG - указано слишком большое количество, попробуйте уменьшить его;
//                            "INVALID_STATE - товар не прошел все этапы создания, проверьте его статус;
//                            "CANNOT_CREATE_FBS_SKU - произошла внутренняя ошибка при обновлении наличия, попробуйте еще раз;
//                            "NOT_FOUND - не удалось найти указанный товар;
//                            "PRODUCT_HAS_NOT_BEEN_TAGGED_YET - товар еще не пометили тегами "КГТ" или "неКГТ", так как не указаны габариты
//                            товара или система для расстановки тегов еще не обработала его.
//         ** message     - Строка - причина ошибки.
//
Функция ОбновитьОстаткиТоваровВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/products/stocks";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("stocks", Параметры.ОстаткиТоваров);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Обновляет остатки товаров по схемам FBS и rFBS в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsStocks (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры запроса обновления остатков:
//     * ОстаткиТоваров          - Массив Из Структура - загружаемые остатки (stocks):
//       ** offer_id               - Строка - идентификатор товара в системе продавца (артикул);
//       ** product_id             - Число - идентификатор товара в маркетплейсе;
//       ** stock                  - Число - количество товара в наличии.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - результат выполнения запроса (productImportProductsStocksResponseProcessResult):
//       * offer_id   - Строка - идентификатор товара в системе продавца - артикул;
//       * product_id - Число - идентификатор товар в маркетплейса;
//       * updated    - Булево - Истина, если информации о товаре успешно обновлена;
//       * errors     - Массив Из см. НовыйРезультатИзСервиса - список ошибок, которые возникли при обработке запроса (productImportProductsStocksResponseError):
//         ** code      - Строка - код ошибки. Возможные значения:
//                          "OVER_MAX_OVH_KGT" - вес или габариты товара больше максимальных. Обновить количество не получится;
//                          "OVER_MAX_OVH_NON_KGT - вы не можете продавать крупногабаритные товары с этого склада;
//                          "NON_KGT_ON_KGT_WAREHOUSE - все ваши товары продаются как крупногабаритные, а вы хотите продавать обычный;
//                          "STOCK_TOO_BIG - указано слишком большое количество, попробуйте уменьшить его;
//                          "INVALID_STATE - товар не прошел все этапы создания, проверьте его статус;
//                          "CANNOT_CREATE_FBS_SKU - произошла внутренняя ошибка при обновлении наличия, попробуйте еще раз;
//                          "NOT_FOUND - не удалось найти указанный товар;
//                          "PRODUCT_HAS_NOT_BEEN_TAGGED_YET - товар еще не пометили тегами "КГТ" или "неКГТ", так как не указаны габариты
//                          товара или система для расстановки тегов еще не обработала его.
//         ** message   - Строка - причина ошибки.
//
Функция ОбновитьОстаткиТоваровПоСхемамFBSИRealFBSВСервисе(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v1/product/import/stocks";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("stocks", Параметры.ОстаткиТоваров);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает остатки товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoStocksV3 (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияСпискаТоваров.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура - результат выполнения запроса:
//       * Результат                       - Массив Из см. НовыйРезультатИзСервиса - информация о товарах (productv3GetProductInfoStocksV3ResponseItem):
//         ** offer_id                       - Строка - идентификатор товара в системе продавца (артикул);
//         ** product_id                     - Число - идентификатор товара в маркетплейсе;
//         ** stocks                           - Массив Из см. НовыйРезультатИзСервиса - информация об остатках (GetProductInfoStocksV3ResponseStock):
//           *** present                         - Число - сейчас на складе;
//           *** reserved                        - Число - зарезервировано;
//           *** type                            - Строка - тип склада.
//       * ИдентификаторПоследнегоЗначения - Строка - идентификатор последнего значения на странице (last_id);
//       * КоличествоТоваров               - Число - количество товаров в списке (total).
//
Функция ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/product/info/stocks";

	ФильтрПоТоварам = Новый Структура;
	ФильтрПоТоварам.Вставить("visibility", Параметры.ФильтрВидимости);

	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;

	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса));
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  ФильтрПоТоварам);
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);
	
	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("items",   Новый Массив);
	ПустойРезультат.Вставить("last_id", "");
	ПустойРезультат.Вставить("total",   0);
	
	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "result.items");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "result.last_id");
	АтрибутыОтвета.Вставить("КоличествоТоваров",               "result.total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

// Получает отчет по остаткам и товарам в перемещении по складам из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/AnalyticsAPI_AnalyticsGetStockOnWarehousesV2 (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияОтчетаПоОстаткамИТоварамВПеремещенииПоСкладам.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - информация о товарах и остатках (analyticsStockOnWarehouseResultRows):
//       * sku                 - Число - идентификатор товара в системе Ozon (SKU);
//       * item_code           - Строка - идентификатор товара в системе продавца;
//       * item_name           - Строка - название товара в системе Ozon;
//       * free_to_sell_amount - Число - количество товара, доступное к продаже на Ozon;
//       * promised_amount     - Число - количество товара, указанное в подтвержденных будущих поставках;
//       * reserved_amount     - Число - количество товара, зарезервированное для покупки, возврата и перевозки между складами;
//       * warehouse_name      - Строка - название склада, где находится товар.
//
Функция ПолучитьОтчетПоОстаткамИТоварамВПеремещенииПоСкладамИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/analytics/stock_on_warehouses";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("limit",          Параметры.МаксимальноеКоличествоВОтвете);
	ПараметрыЗапроса.Вставить("offset",         Параметры.НачальноеСмещениеВОтвете);
	ПараметрыЗапроса.Вставить("warehouse_type", Параметры.ФильтрПоСкладам);
	
	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("rows", Новый Массив);
	
	СлужебныеПараметры                 = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПустойРезультат = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.rows");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает отчеты о реализации доставленных и возвращенных товаров за месяц из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/FinanceAPI_GetRealizationReport (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияОтчетаОРеализацииТоваров.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - результат запроса:
//       * header                     - Соответствие Из КлючИЗначение - титульный лист отчета:
//         ** contract_date             - Строка - дата заключения договора;
//         ** contract_num              - Строка - номер договора;
//         ** currency_sys_name         - Строка - валюта;
//         ** doc_amount                - Число - всего к начислению;
//         ** doc_date                  - Строка - дата формирования отчета;
//         ** number                    - Строка - номер отчета о реализации;
//         ** payer_inn                 - Строка - ИНН плательщика;
//         ** payer_kpp                 - Строка - КПП плательщика;
//         ** payer_name                - Строка - название плательщика;
//         ** receiver_inn              - Строка - ИНН получателя;
//         ** receiver_kpp              - Строка - КПП получателя;
//         ** receiver_name             - Строка - название получателя;
//         ** start_date                - Строка - начало периода в отчете;
//         ** stop_date                 - Строка - конец периода в отчете;
//         ** vat_amount                - Число - итоговая сумма с НДС.
//       * rows                       - Массив Из см. НовыйРезультатИзСервиса - таблица отчета:
//         ** commission_ratio          - Число - доля комиссии за продажу по категории;
//         ** delivery_commission       - Соответствие Из КлючИЗначение - комиссия за доставку:
//           *** amount                   - Число - сумма;
//           *** bonus                    - Число - баллы за скидки;
//           *** commission               - Число - итого комиссия с учетом скидок и наценки;
//           *** compensation             - Число - доплата за счет Ozon;
//           *** price_per_instance       - Число - цена за экземпляр;
//           *** quantity                 - Число - количество товара;
//           *** standard_fee             - Число - базовое вознаграждение Ozon;
//           *** stars                    - Число - выплаты по механикам лояльности партнеров;
//           *** total                    - Число - итого к начислению.
//         ** item                      - Соответствие Из КлючИЗначение - информация о товаре:
//           *** barcode                  - Строка - штрихкод товара;
//           *** name                     - Строка - наименование товара;
//           *** offer_id                 - Строка - артикул товара;
//           *** sku                      - Число - SKU товара.
//         ** return_commission         - Соответствие Из КлючИЗначение - комиссия за возврат товара:
//           *** amount                   - Число - сумма;
//           *** bonus                    - Число - баллы за скидки;
//           *** commission               - Число - итого комиссия с учетом скидок и наценки;
//           *** compensation             - Число - доплата за счет Ozon;
//           *** price_per_instance       - Число - цена за экземпляр;
//           *** quantity                 - Число - количество товара;
//           *** standard_fee             - Число - базовое вознаграждение Ozon;
//           *** stars                    - Число - выплаты по механикам лояльности партнеров;
//           *** total                    - Число - итого к начислению.
//         ** rowNumber                 - Число - номер строки в отчете;
//         ** seller_price_per_instance - Число - цена продавца с учетом скидки.
//
Функция ПолучитьОтчетОРеализацииТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/finance/realization";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("year",  Год(Параметры.Период));
	ПараметрыЗапроса.Вставить("month", Месяц(Параметры.Период));
		
	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("header", Новый Соответствие);
	ПустойРезультат.Вставить("rows",   Новый Массив);
	
	СлужебныеПараметры                 = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПустойРезультат = ПустойРезультат;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("ШапкаОтчета",  "result.header");
	АтрибутыОтвета.Вставить("СтрокиОтчета", "result.rows");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

#КонецОбласти

#Область ЗаказыFBSСлужебный

// Получает c использованием методов API таблицу необработанных заказов.
//
// Параметры:
//   УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры          - см. НовыйПараметрыЗагрузкиЗаказов.
//   ИнформацияОбОшибке - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаЗаказовТорговойПлощадки.
//
Функция ПолучитьНеобработанныеЗаказы(УчетнаяЗапись, Параметры, ИнформацияОбОшибке)
	
	НачалоПериода    = Параметры.НачалоПериода;
	ОкончаниеПериода = Параметры.ОкончаниеПериода;
	Период           = Новый СтандартныйПериод(НачалоПериода, ОкончаниеПериода);
	
	ТаблицаЗаказов   = НоваяТаблицаЗаказовТорговойПлощадки();
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS(НачалоПериода,
		ОкончаниеПериода,
		Параметры.СтатусОтправления,
		Параметры.ИдентификаторЗаказа);
	
	Пока НачалоПериода < Период.ДатаОкончания Цикл
		ДатаКонцаГода    = КонецДня(ДобавитьМесяц(НачалоПериода, 12));
		ОкончаниеПериода = Мин(ДатаКонцаГода, Период.ДатаОкончания);
		Отказ            = Ложь;
		
		ПараметрыЗапроса.ФильтрДляПоискаОтправлений.НачалоПериода       = НачалоДня(НачалоПериода);
		ПараметрыЗапроса.ФильтрДляПоискаОтправлений.ОкончаниеПериода    = КонецДня(ОкончаниеПериода);
		ПараметрыЗапроса.ФильтрДляПоискаОтправлений.ВидФильтраПоПериоду = Параметры.ВидФильтраПоПериоду;
		ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные            = Истина;
		ПараметрыЗапроса.ДополнительныеПоля.Штрихкоды                   = Истина;
		
		Пока Истина Цикл
			ОтветСервиса = ПолучитьНеобработанныеОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗапись, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			ИначеЕсли ОтветСервиса.Результат.Количество() = 0 Тогда
				Прервать;
				
			Иначе
				ДобавитьОтветСервисаВТаблицуНеобработанныхЗаказов(
					ТаблицаЗаказов,
					ОтветСервиса);
				
				Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете + ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			ИнформацияОбОшибке.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			ИнформацияОбОшибке.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При получении необработанных заказов с торговой площадки <%1> возникли ошибки. Подробности см. в журнале регистрации.'"),
				УчетнаяЗапись);
					
			Если ИнформацияОбОшибке.Детализация = Неопределено Тогда
				ИнформацияОбОшибке.Детализация = Новый Массив;
			КонецЕсли;
			ИнформацияОбОшибке.Детализация.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При получении необработанных заказов с торговой площадки <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
				УчетнаяЗапись,
				Формат(НачалоПериода, "ДЛФ=D;"),
				Формат(ОкончаниеПериода, "ДЛФ=D;")));
		КонецЕсли;
		
		НачалоПериода = ДатаКонцаГода + 1;
	КонецЦикла;
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

// Заполняет таблицу необработанных заказов значениями из сервиса.
//
// Параметры:
//   ТаблицаЗаказов - См. НоваяТаблицаЗаказовТорговойПлощадки.
//   ОтветСервиса   - Массив из см. НовыйРезультатИзСервиса - информация о списке необработанных заказов из сервиса Ozon.
//
Процедура ДобавитьОтветСервисаВТаблицуНеобработанныхЗаказов(ТаблицаЗаказов, ОтветСервиса)
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["financial_data"]["products"] Цикл
			НоваяСтрока = ТаблицаЗаказов.Добавить();
			
			НоваяСтрока.ИдентификаторЗаказа              = ЧислоВСтроку(ЭлементОтветаСервиса["order_id"]);
			НоваяСтрока.НомерЗаказа                      = ЭлементОтветаСервиса["order_number"];
			
			НоваяСтрока.НомерОтправления                 = ЭлементОтветаСервиса["posting_number"];
			НоваяСтрока.ДатаОтправления                  = ЭлементОтветаСервиса["in_process_at"];
			НоваяСтрока.СтатусОтправления                = ЭлементОтветаСервиса["status"];
			НоваяСтрока.ПодстатусОтправления             = ЭлементОтветаСервиса["substatus"];
			НоваяСтрока.ТрекНомерОтправления             = ЭлементОтветаСервиса["tracking_number"];
			НоваяСтрока.НомерРодительскогоОтправления    = ЭлементОтветаСервиса["parent_posting_number"];
			
			НоваяСтрока.ДатаСборки                       = ЭлементОтветаСервиса["shipment_date"];
			НоваяСтрока.ИдентификаторСклада              = ЧислоВСтроку(ЭлементОтветаСервиса["analytics_data"]["warehouse_id"]);
			НоваяСтрока.НаименованиеСклада               = ЭлементОтветаСервиса["analytics_data"]["warehouse"];
			
			НоваяСтрока.ДатаПередачиВДоставку            = ЭлементОтветаСервиса["delivering_date"];
			НоваяСтрока.ДатаДоставки                     = ЭлементОтветаСервиса["analytics_data"]["delivery_date_end"];
			НоваяСтрока.СпособДоставки                   = ЭлементОтветаСервиса["analytics_data"]["delivery_type"];
			НоваяСтрока.РегионДоставки                   = ЭлементОтветаСервиса["analytics_data"]["region"];
			НоваяСтрока.ГородДоставки                    = ЭлементОтветаСервиса["analytics_data"]["city"];
			НоваяСтрока.АдресДоставки                    = ?(ЭлементОтветаСервиса["customer"] = Неопределено, "", ЭлементОтветаСервиса["customer"]["address"]["address_tail"]);
			НоваяСтрока.СлужбаДоставки                   = ЭлементОтветаСервиса["analytics_data"]["tpl_provider"];
			НоваяСтрока.СтатусПокупателя                 = ЭлементОтветаСервиса["analytics_data"]["is_legal"];
			НоваяСтрока.СпособОплаты                     = ЭлементОтветаСервиса["analytics_data"]["payment_type_group_name"];
			
			НоваяСтрока.ИдентификаторПокупателя          = ?(ЭлементОтветаСервиса["customer"] = Неопределено, "", ЧислоВСтроку(ЭлементОтветаСервиса["customer"]["customer_id"]));
			НоваяСтрока.НаименованиеПокупателя           = ?(ЭлементОтветаСервиса["customer"] = Неопределено, "", ЭлементОтветаСервиса["customer"]["name"]);
			
			НоваяСтрока.ИдентификаторПричиныОтмены       = ЧислоВСтроку(ЭлементОтветаСервиса["cancellation"]["cancel_reason_id"]);
			НоваяСтрока.ПричинаОтмены                    = ЭлементОтветаСервиса["cancellation"]["cancel_reason"];
			НоваяСтрока.ТипПричиныОтмены                 = ЭлементОтветаСервиса["cancellation"]["cancellation_type"];
			НоваяСтрока.ИнициаторОтмены                  = ЭлементОтветаСервиса["cancellation"]["cancellation_initiator"];
			
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = "";
			НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементКоллекции["product_id"]);
			НоваяСтрока.Количество                       = ЭлементКоллекции["quantity"];
			НоваяСтрока.Валюта                           = ЭлементКоллекции["currency_code"];
			НоваяСтрока.ЦенаДоСкидки                     = СтрокаВЧисло(ЭлементКоллекции["old_price"]);
			НоваяСтрока.Цена                             = СтрокаВЧисло(ЭлементКоллекции["price"]);
			НоваяСтрока.ЦенаДляКлиента                   = СтрокаВЧисло(ЭлементКоллекции["price"]);
			НоваяСтрока.ПроцентСкидки                    = СтрокаВЧисло(ЭлементКоллекции["total_discount_percent"]);
			НоваяСтрока.СуммаСкидки                      = НоваяСтрока.Количество * СтрокаВЧисло(ЭлементКоллекции["total_discount_value"], Истина);
			НоваяСтрока.ПроцентКомиссии                  = СтрокаВЧисло(ЭлементКоллекции["commission_percent"]);
			НоваяСтрока.СуммаКомиссии                    = СтрокаВЧисло(ЭлементКоллекции["commission_amount"], Истина);
			НоваяСтрока.ВыплатаПродавцу                  = СтрокаВЧисло(ЭлементКоллекции["payout"]);
			
			Если ЭлементОтветаСервиса["customer"] <> Неопределено Тогда
				НоваяСтрока.КомментарийКЗаказу = ЭлементОтветаСервиса["customer"]["address"]["comment"];
			КонецЕсли;
			
			Для Каждого Товар Из ЭлементОтветаСервиса["products"] Цикл
				Если ЭлементКоллекции["product_id"] = Товар["sku"] Тогда
					НоваяСтрока.ИдентификаторПубликации          = Товар["offer_id"];
					НоваяСтрока.ПредставлениеОбъектаМаркетплейса = Товар["name"];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["requirements"]["products_requiring_gtd"] Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторSKU", ЧислоВСтроку(ЭлементКоллекции));
			
			НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
				СтрокаТаблицыЗначений.ТребуетсяГТД = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["requirements"]["products_requiring_rnpt"] Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторSKU", ЧислоВСтроку(ЭлементКоллекции));
			
			НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
				СтрокаТаблицыЗначений.ТребуетсяРНПТ = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["requirements"]["products_requiring_country"] Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторSKU", ЧислоВСтроку(ЭлементКоллекции));
			
			НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
				СтрокаТаблицыЗначений.ТребуетсяСтранаПроисхождения = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["requirements"]["products_requiring_mandatory_mark"] Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторSKU", ЧислоВСтроку(ЭлементКоллекции));
			
			НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
				СтрокаТаблицыЗначений.ТребуетсяМаркировка = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["requirements"]["products_requiring_jw_uin"] Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторSKU", ЧислоВСтроку(ЭлементКоллекции));
			
			НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
				НоваяСтрока.ТребуетсяУИНЮвелирногоИзделия = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаНеобработанныхЗаказовТорговойПлощадки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК УникальныйИдентификатор,
		|	ТаблицаЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	ТаблицаЗаказов.НомерОтправления КАК НомерДокумента,
		|	ТаблицаЗаказов.НомерЗаказа КАК НомерЗаказа,
		|	ТаблицаЗаказов.КомментарийКЗаказу КАК КомментарийКЗаказу,
		|	ТаблицаЗаказов.НомерОтправления КАК НомерОтправления,
		|	ТаблицаЗаказов.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаЗаказов.СтатусОтправления КАК СтатусОтправления,
		|	ТаблицаЗаказов.ПодстатусОтправления КАК ПодстатусОтправления,
		|	ТаблицаЗаказов.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	ТаблицаЗаказов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаЗаказов.НаименованиеСклада КАК НаименованиеСклада,
		|	ТаблицаЗаказов.ДатаСборки КАК ДатаСборки,
		|	ТаблицаЗаказов.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаЗаказов.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаЗаказов.РегионДоставки КАК РегионДоставки,
		|	ТаблицаЗаказов.ГородДоставки КАК ГородДоставки,
		|	ТаблицаЗаказов.АдресДоставки КАК АдресДоставки,
		|	ТаблицаЗаказов.ИдентификаторПричиныОтмены КАК ИдентификаторПричиныОтмены,
		|	ТаблицаЗаказов.ПричинаОтмены КАК ПричинаОтмены,
		|	ТаблицаЗаказов.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаЗаказов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаЗаказов.ИдентификаторSKU КАК ИдентификаторSKU,
		|	ТаблицаЗаказов.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	ТаблицаЗаказов.Количество КАК Количество,
		|	ТаблицаЗаказов.Цена КАК Цена,
		|	ТаблицаЗаказов.ЦенаДоСкидки КАК ЦенаДоСкидки,
		|	ТаблицаЗаказов.ЦенаДляКлиента КАК ЦенаДляКлиента,
		|	ТаблицаЗаказов.ПроцентСкидки КАК ПроцентСкидки,
		|	ТаблицаЗаказов.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаЗаказов.ПроцентКомиссии КАК ПроцентКомиссии,
		|	ТаблицаЗаказов.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаЗаказов.ВыплатаПродавцу КАК ВыплатаПродавцу,
		|	ТаблицаЗаказов.ТребуетсяГТД КАК ТребуетсяГТД,
		|	ТаблицаЗаказов.ТребуетсяРНПТ КАК ТребуетсяРНПТ,
		|	ТаблицаЗаказов.ТребуетсяСтранаПроисхождения КАК ТребуетсяСтранаПроисхождения,
		|	ТаблицаЗаказов.ТребуетсяМаркировка КАК ТребуетсяМаркировка,
		|	ТаблицаЗаказов.ТребуетсяУИНЮвелирногоИзделия КАК ТребуетсяУИНЮвелирногоИзделия
		|ПОМЕСТИТЬ ВТ_ТаблицаЗаказов
		|ИЗ
		|	&ТаблицаЗаказов КАК ТаблицаЗаказов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСкладов.Группа КАК ГруппаСкладов,
		|	ТаблицаСкладов.Склад КАК Склад,
		|	ТаблицаСкладов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаСкладов.НаименованиеСклада КАК НаименованиеСклада
		|ПОМЕСТИТЬ ВТ_ТаблицаСкладов
		|ИЗ
		|	&ТаблицаСкладов КАК ТаблицаСкладов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Объект1С
		|ПОМЕСТИТЬ ВТ_СоответствияОбъектовМаркетплейсовСклады
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаказов.ИдентификаторСклада КАК ИдентификаторСклада
		|			ИЗ
		|				ВТ_ТаблицаЗаказов КАК ТаблицаЗаказов)
		|	И СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыFBS
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.Объект1С
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаказов.ИдентификаторСклада КАК ИдентификаторСклада
		|			ИЗ
		|				ВТ_ТаблицаЗаказов КАК ТаблицаЗаказов)
		|	И СоответствияОбъектовМаркетплейсов.ИспользуетсяДляСхемыРаботыDBS
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Объект1С
		|ПОМЕСТИТЬ ВТ_СоответствияОбъектовМаркетплейсовПричиныОтмены
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ПричинаОтмены)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса В
		|			(ВЫБРАТЬ
		|				ТаблицаЗаказов.ИдентификаторПричиныОтмены КАК ИдентификаторПричиныОтмены
		|			ИЗ
		|				ВТ_ТаблицаЗаказов КАК ТаблицаЗаказов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаказов.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	ТаблицаЗаказов.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	ТаблицаЗаказов.НомерДокумента КАК НомерДокумента,
		|	ТаблицаЗаказов.НомерЗаказа КАК НомерЗаказа,
		|	ТаблицаЗаказов.КомментарийКЗаказу КАК КомментарийКЗаказу,
		|	ТаблицаЗаказов.НомерОтправления КАК НомерОтправления,
		|	ТаблицаЗаказов.ДатаОтправления КАК ДатаОтправления,
		|	ТаблицаЗаказов.СтатусОтправления КАК СтатусОтправления,
		|	ТаблицаЗаказов.ПодстатусОтправления КАК ПодстатусОтправления,
		|	ТаблицаЗаказов.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	ТаблицаЗаказов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ТаблицаЗаказов.НаименованиеСклада КАК НаименованиеСклада,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсовСклады.Объект1С, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
		|	ТаблицаЗаказов.ДатаСборки КАК ДатаСборки,
		|	ТаблицаЗаказов.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	ТаблицаЗаказов.ДатаДоставки КАК ДатаДоставки,
		|	ТаблицаЗаказов.РегионДоставки КАК РегионДоставки,
		|	ТаблицаЗаказов.ГородДоставки КАК ГородДоставки,
		|	ТаблицаЗаказов.АдресДоставки КАК АдресДоставки,
		|	ТаблицаЗаказов.ИдентификаторПричиныОтмены КАК ИдентификаторПричиныОтмены,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсовПричиныОтмены.Объект1С, ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)) КАК ПричинаОтмены,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon1.Номенклатура, ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon2.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))) КАК Номенклатура,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon1.Характеристика, ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon2.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК Характеристика,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon1.Упаковка, ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon2.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК Упаковка,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon1.ИдентификаторПубликации, ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon2.ИдентификаторПубликации, ТаблицаЗаказов.ИдентификаторПубликации)) КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon1.ИдентификаторОбъектаМаркетплейса, ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon2.ИдентификаторОбъектаМаркетплейса, ТаблицаЗаказов.ИдентификаторОбъектаМаркетплейса)) КАК ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаЗаказов.ИдентификаторSKU КАК ИдентификаторSKU,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon1.ПредставлениеОбъектаМаркетплейса, ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon2.ПредставлениеОбъектаМаркетплейса, ТаблицаЗаказов.ПредставлениеОбъектаМаркетплейса)) КАК ПредставлениеОбъектаМаркетплейса,
		|	ТаблицаЗаказов.Количество КАК Количество,
		|	ТаблицаЗаказов.Цена КАК Цена,
		|	ТаблицаЗаказов.ЦенаДоСкидки КАК ЦенаДоСкидки,
		|	ТаблицаЗаказов.ЦенаДляКлиента КАК ЦенаДляКлиента,
		|	ТаблицаЗаказов.Цена * ТаблицаЗаказов.Количество КАК Сумма,
		|	ТаблицаЗаказов.ПроцентСкидки КАК ПроцентСкидки,
		|	ТаблицаЗаказов.СуммаСкидки КАК СуммаСкидки,
		|	ТаблицаЗаказов.ПроцентКомиссии КАК ПроцентКомиссии,
		|	ТаблицаЗаказов.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаЗаказов.ВыплатаПродавцу КАК ВыплатаПродавцу,
		|	ТаблицаЗаказов.ТребуетсяГТД КАК ТребуетсяГТД,
		|	ТаблицаЗаказов.ТребуетсяРНПТ КАК ТребуетсяРНПТ,
		|	ТаблицаЗаказов.ТребуетсяСтранаПроисхождения КАК ТребуетсяСтранаПроисхождения,
		|	ТаблицаЗаказов.ТребуетсяМаркировка КАК ТребуетсяМаркировка,
		|	ТаблицаЗаказов.ТребуетсяУИНЮвелирногоИзделия КАК ТребуетсяУИНЮвелирногоИзделия,
		|	ЕСТЬNULL(ЗаказыТорговыхПлощадок.Заказ, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК ЗаказКлиентаСсылка,
		|	ЕСТЬNULL(ДокументЗаказКлиента.ПометкаУдаления, ЛОЖЬ) КАК ЗаказКлиентаПометкаУдаления
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	ВТ_ТаблицаЗаказов КАК ТаблицаЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon1
		|		ПО ТаблицаЗаказов.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon1.ИдентификаторПубликации
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon1.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon1.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon2
		|		ПО ТаблицаЗаказов.ИдентификаторSKU = СтатусыПубликацииОбъектовМаркетплейсаOzon2.ИдентификаторFBSSKU
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon2.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon2.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияОбъектовМаркетплейсовСклады КАК СоответствияОбъектовМаркетплейсовСклады
		|		ПО (СоответствияОбъектовМаркетплейсовСклады.ИдентификаторОбъектаМаркетплейса = ТаблицаЗаказов.ИдентификаторСклада)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияОбъектовМаркетплейсовПричиныОтмены КАК СоответствияОбъектовМаркетплейсовПричиныОтмены
		|		ПО (СоответствияОбъектовМаркетплейсовПричиныОтмены.ИдентификаторОбъектаМаркетплейса = ТаблицаЗаказов.ИдентификаторПричиныОтмены)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ПО ТаблицаЗаказов.НомерДокумента = ЗаказыТорговыхПлощадок.НомерОтправления
		|			И (ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
		|		ПО (ЗаказыТорговыхПлощадок.Заказ = ДокументЗаказКлиента.Ссылка)
		|ГДЕ
		|	(ЗаказыТорговыхПлощадок.Заказ ЕСТЬ NULL
		|			ИЛИ ДокументЗаказКлиента.ПометкаУдаления)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаЗаказов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СоответствияОбъектовМаркетплейсовСклады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СоответствияОбъектовМаркетплейсовПричиныОтмены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	Результат.НомерДокумента КАК НомерДокумента,
		|	Результат.НомерЗаказа КАК НомерЗаказа,
		|	Результат.КомментарийКЗаказу КАК КомментарийКЗаказу,
		|	Результат.НомерОтправления КАК НомерОтправления,
		|	Результат.ДатаОтправления КАК ДатаОтправления,
		|	Результат.СтатусОтправления КАК СтатусОтправления,
		|	Результат.ПодстатусОтправления КАК ПодстатусОтправления,
		|	Результат.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	Результат.ИдентификаторСклада КАК ИдентификаторСклада,
		|	Результат.НаименованиеСклада КАК НаименованиеСклада,
		|	Результат.Склад КАК Склад,
		|	Результат.ДатаСборки КАК ДатаСборки,
		|	Результат.ДатаПередачиВДоставку КАК ДатаПередачиВДоставку,
		|	Результат.ДатаДоставки КАК ДатаДоставки,
		|	Результат.РегионДоставки КАК РегионДоставки,
		|	Результат.ГородДоставки КАК ГородДоставки,
		|	Результат.АдресДоставки КАК АдресДоставки,
		|	Результат.ИдентификаторПричиныОтмены КАК ИдентификаторПричиныОтмены,
		|	Результат.ПричинаОтмены КАК ПричинаОтмены,
		|	Результат.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(СправочникНоменклатура.ПрослеживаемыйТовар, ЛОЖЬ) КАК ПрослеживаемыйТовар,
		|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(СправочникНоменклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ТипНоменклатуры,
		|	Результат.Характеристика КАК Характеристика,
		|	Результат.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|	Результат.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	Результат.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	Результат.ИдентификаторSKU КАК ИдентификаторSKU,
		|	Результат.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	Результат.Количество КАК Количество,
		|	Результат.Цена КАК Цена,
		|	Результат.ЦенаДоСкидки КАК ЦенаДоСкидки,
		|	Результат.ЦенаДляКлиента КАК ЦенаДляКлиента,
		|	Результат.Сумма КАК Сумма,
		|	Результат.ПроцентСкидки КАК ПроцентСкидки,
		|	Результат.СуммаСкидки КАК СуммаСкидки,
		|	Результат.ПроцентКомиссии КАК ПроцентКомиссии,
		|	Результат.СуммаКомиссии КАК СуммаКомиссии,
		|	Результат.ВыплатаПродавцу КАК ВыплатаПродавцу,
		|	Результат.ТребуетсяГТД КАК ТребуетсяГТД,
		|	Результат.ТребуетсяРНПТ КАК ТребуетсяРНПТ,
		|	Результат.ТребуетсяСтранаПроисхождения КАК ТребуетсяСтранаПроисхождения,
		|	Результат.ТребуетсяМаркировка КАК ТребуетсяМаркировка,
		|	Результат.ТребуетсяУИНЮвелирногоИзделия КАК ТребуетсяУИНЮвелирногоИзделия,
		|	Результат.ЗаказКлиентаСсылка КАК ЗаказКлиентаСсылка,
		|	Результат.ЗаказКлиентаПометкаУдаления КАК ЗаказКлиентаПометкаУдаления
		|ИЗ
		|	ВТ_Результат КАК Результат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО (СправочникНоменклатура.Ссылка = Результат.Номенклатура)
		|ГДЕ
		|	(Результат.НомерЗаписи, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(НомераСтрок.НомерЗаписи),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_Результат КАК НомераСтрок
		|			ГДЕ
		|				Результат.УникальныйИдентификатор = НомераСтрок.УникальныйИдентификатор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерДокумента,
		|	ДатаОтправления,
		|	УпаковкаКоэффициент УБЫВ
		|ИТОГИ
		|	СУММА(Сумма),
		|	МАКСИМУМ(ТребуетсяГТД),
		|	МАКСИМУМ(ТребуетсяРНПТ),
		|	МАКСИМУМ(ТребуетсяСтранаПроисхождения),
		|	МАКСИМУМ(ТребуетсяМаркировка),
		|	МАКСИМУМ(ТребуетсяУИНЮвелирногоИзделия)
		|ПО
		|	НомерДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыИПотребности.Номенклатура КАК Номенклатура,
		|	ЗапасыИПотребности.Характеристика КАК Характеристика,
		|	ТаблицаСкладов.ГруппаСкладов КАК ГруппаСкладов,
		|	ЗапасыИПотребности.Склад КАК Склад,
		|	СУММА(ЗапасыИПотребности.ВНаличииОстаток - ЗапасыИПотребности.РезервироватьНаСкладеОстаток - ЗапасыИПотребности.РезервироватьПоМереПоступленияОстаток) КАК Остаток
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Назначение) В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Результат.Номенклатура КАК Номенклатура,
		|					Результат.Характеристика КАК Характеристика,
		|					ТаблицаСкладов.Склад КАК Склад,
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
		|				ИЗ
		|					ВТ_Результат КАК Результат
		|						ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСкладов КАК ТаблицаСкладов
		|						ПО
		|							ИСТИНА)) КАК ЗапасыИПотребности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО (ТаблицаСкладов.Склад = ЗапасыИПотребности.Склад)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыИПотребности.Номенклатура,
		|	ЗапасыИПотребности.Характеристика,
		|	ТаблицаСкладов.ГруппаСкладов,
		|	ЗапасыИПотребности.Склад";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"(ВЫБОР
			|	КОГДА Результат.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
			|	ИНАЧЕ Результат.Упаковка
			|КОНЕЦ)",
			"Результат.Номенклатура"));
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает c использованием методов API таблицу заказов для обновления статусов.
//
// Параметры:
//   УчетнаяЗапись       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода       - Дата, Неопределено - начало периода загрузки данных. По умолчанию - текущая дата.
//   ОкончаниеПериода    - Дата, Неопределено - окончание периода загрузки данных. По умолчанию - текущая дата.
//   ИдентификаторЗаказа - Строка, Неопределено - идентификатор заказа выборочного получения данных.
//   ИнформацияОбОшибке  - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаЗаказовТорговойПлощадки.
//
Функция ПолучитьРезультатОбновленияСтатусовЗаказов(УчетнаяЗапись,
			Знач НачалоПериода, Знач ОкончаниеПериода, Знач ИдентификаторЗаказа,
			ИнформацияОбОшибке)
	
	Период = Новый СтандартныйПериод(НачалоПериода, ОкончаниеПериода);
	
	ТаблицаЗаказов   = НоваяТаблицаЗаказовТорговойПлощадки();
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS(НачалоПериода,
		ОкончаниеПериода,
		"",
		ИдентификаторЗаказа);
	
	Пока НачалоПериода < Период.ДатаОкончания Цикл
		ДатаКонцаГода    = КонецДня(ДобавитьМесяц(НачалоПериода, 12));
		ОкончаниеПериода = Мин(ДатаКонцаГода, Период.ДатаОкончания);
		Отказ            = Ложь;
		
		ПараметрыЗапроса.ФильтрДляПоискаОтправлений.НачалоПериода       = НачалоДня(НачалоПериода);
		ПараметрыЗапроса.ФильтрДляПоискаОтправлений.ОкончаниеПериода    = КонецДня(ОкончаниеПериода);
		ПараметрыЗапроса.ФильтрДляПоискаОтправлений.ВидФильтраПоПериоду = "ДатаСоздания";
		ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные            = Ложь;
		ПараметрыЗапроса.ДополнительныеПоля.Штрихкоды                   = Ложь;
		
		Пока Истина Цикл
			ОтветСервиса = ПолучитьОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗапись, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			ИначеЕсли ОтветСервиса.Результат.Количество() = 0 Тогда
				Прервать;
				
			Иначе
				ДобавитьОтветСервисаВТаблицуОбновленияСтатусовЗаказов(
					ТаблицаЗаказов,
					ОтветСервиса);
				
				Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете
					+ ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			ИнформацияОбОшибке.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			ИнформацияОбОшибке.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При получении заказов с торговой площадки <%1> возникли ошибки. Подробности см. в журнале регистрации.'"),
				УчетнаяЗапись);
					
			Если ИнформацияОбОшибке.Детализация = Неопределено Тогда
				ИнформацияОбОшибке.Детализация = Новый Массив;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
				ИнформацияОбОшибке.Детализация.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При получении заказа %1 с торговой площадки <%2> возникли ошибки. Подробности см. в журнале регистрации.'"),
					ИдентификаторЗаказа,
					УчетнаяЗапись));
			Иначе
				ИнформацияОбОшибке.Детализация.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При получении заказов с торговой площадки <%1> за период с %2 по %3 возникли ошибки. Подробности см. в журнале регистрации.'"),
					УчетнаяЗапись,
					Формат(НачалоПериода, "ДЛФ=D;"),
					Формат(ОкончаниеПериода, "ДЛФ=D;")));
			КонецЕсли;
		КонецЕсли;
		
		НачалоПериода = ДатаКонцаГода + 1;
	КонецЦикла;
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

// Заполняет таблицу заказов для обновления статусов значениями из сервиса.
//
// Параметры:
//   ТаблицаЗаказов - См. НоваяТаблицаЗаказовТорговойПлощадки.
//   ОтветСервиса   - Массив из см. НовыйРезультатИзСервиса - информация о списке необработанных заказов из сервиса Ozon.
//
Процедура ДобавитьОтветСервисаВТаблицуОбновленияСтатусовЗаказов(ТаблицаЗаказов, ОтветСервиса)
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
		НоваяСтрока = ТаблицаЗаказов.Добавить();
		
		НоваяСтрока.ИдентификаторЗаказа           = ЧислоВСтроку(ЭлементОтветаСервиса["order_id"]);
		НоваяСтрока.НомерЗаказа                   = ЭлементОтветаСервиса["order_number"];
		
		НоваяСтрока.НомерОтправления              = ЭлементОтветаСервиса["posting_number"];
		НоваяСтрока.ДатаОтправления               = ЭлементОтветаСервиса["in_process_at"];
		НоваяСтрока.СтатусОтправления             = ЭлементОтветаСервиса["status"];
		НоваяСтрока.ПодстатусОтправления          = ЭлементОтветаСервиса["substatus"];
		НоваяСтрока.ТрекНомерОтправления          = ЭлементОтветаСервиса["tracking_number"];
		НоваяСтрока.НомерРодительскогоОтправления = ЭлементОтветаСервиса["parent_posting_number"];
		
		НоваяСтрока.ДатаСборки                    = ЭлементОтветаСервиса["shipment_date"];
		НоваяСтрока.ИдентификаторСклада           = ЧислоВСтроку(ЭлементОтветаСервиса["analytics_data"]["warehouse_id"]);
		НоваяСтрока.НаименованиеСклада            = ЭлементОтветаСервиса["analytics_data"]["warehouse"];
		
		НоваяСтрока.ДатаПередачиВДоставку         = ЭлементОтветаСервиса["delivering_date"];
		НоваяСтрока.ДатаДоставки                  = ЭлементОтветаСервиса["analytics_data"]["delivery_date_end"];
		НоваяСтрока.СпособДоставки                = ЭлементОтветаСервиса["analytics_data"]["delivery_type"];
		НоваяСтрока.РегионДоставки                = ЭлементОтветаСервиса["analytics_data"]["region"];
		НоваяСтрока.ГородДоставки                 = ЭлементОтветаСервиса["analytics_data"]["city"];
		НоваяСтрока.АдресДоставки                 = ?(ЭлементОтветаСервиса["customer"] = Неопределено, "", ЭлементОтветаСервиса["customer"]["address"]["address_tail"]);
		НоваяСтрока.СлужбаДоставки                = ЭлементОтветаСервиса["analytics_data"]["tpl_provider"];
		НоваяСтрока.СтатусПокупателя              = ЭлементОтветаСервиса["analytics_data"]["is_legal"];
		НоваяСтрока.СпособОплаты                  = ЭлементОтветаСервиса["analytics_data"]["payment_type_group_name"];
		
		НоваяСтрока.ИдентификаторПокупателя       = ?(ЭлементОтветаСервиса["customer"] = Неопределено, "", ЧислоВСтроку(ЭлементОтветаСервиса["customer"]["customer_id"]));
		НоваяСтрока.НаименованиеПокупателя        = ?(ЭлементОтветаСервиса["customer"] = Неопределено, "", ЭлементОтветаСервиса["customer"]["name"]);
		
		НоваяСтрока.ИдентификаторПричиныОтмены    = ЧислоВСтроку(ЭлементОтветаСервиса["cancellation"]["cancel_reason_id"]);
		НоваяСтрока.ПричинаОтмены                 = ЭлементОтветаСервиса["cancellation"]["cancel_reason"];
		НоваяСтрока.ТипПричиныОтмены              = ЭлементОтветаСервиса["cancellation"]["cancellation_type"];
		НоваяСтрока.ИнициаторОтмены               = ЭлементОтветаСервиса["cancellation"]["cancellation_initiator"];
		
		Если ЭлементОтветаСервиса["customer"] <> Неопределено Тогда
			НоваяСтрока.КомментарийКЗаказу = ЭлементОтветаСервиса["customer"]["address"]["comment"];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОбновленияСтатусовЗаказовТорговойПлощадки(ПараметрыЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыТорговыхПлощадок.Заказ КАК ЗаказКлиентаСсылка,
		|	ЗаказыТорговыхПлощадок.ДокументОтгрузки КАК ДокументОтгрузкиСсылка,
		|	ЗаказыТорговыхПлощадок.ИдентификаторЗаказа КАК ИдентификаторЗаказа,
		|	ЗаказыТорговыхПлощадок.НомерОтправления КАК НомерОтправления,
		|	ЗаказыТорговыхПлощадок.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	ЗаказыТорговыхПлощадок.Статус КАК Статус,
		|	ЗаказыТорговыхПлощадок.ДатаСозданияЗаказа КАК ДатаСозданияЗаказа
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись
		|	И &Условие
		|ИТОГИ
		|	МИНИМУМ(ЗаказКлиентаСсылка),
		|	МИНИМУМ(ДатаСозданияЗаказа)
		|ПО
		|	ОБЩИЕ,
		|	ИдентификаторЗаказа";
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Заказы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ЗаказыТорговыхПлощадок.Заказ В (&Заказы)");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыЗаказов) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ЗаказыТорговыхПлощадок.ИдентификаторЗаказа В (&ИдентификаторыЗаказов)");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Статусы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ЗаказыТорговыхПлощадок.Статус В (&Статусы)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыЗаказовFBSЗавершенные()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен);
	Статусы.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Доставлен);
	Статусы.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Возвращен);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыЗаказовFBSВРаботе(ДоПередачиВДоставку = Ложь)
	
	Статусы = Новый Массив;
	
	Если ДоПередачиВДоставку Тогда
		Статусы.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки);
		Статусы.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
	Иначе
		Завершенные = СтатусыЗаказовFBSЗавершенные();
		
		Для Каждого Статус Из Метаданные.Перечисления.СтатусыЗаказовТорговыхПлощадок.ЗначенияПеречисления Цикл
			Если Завершенные.Найти(Перечисления.СтатусыЗаказовТорговыхПлощадок[Статус.Имя]) = Неопределено Тогда
				Статусы.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок[Статус.Имя]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Выполняет процедуру закрытия заказа.
//
// Параметры:
//   Заказ - ДокументСсылка.ЗаказКлиента - заказ, который требуется закрыть.
//
Процедура ЗакрытьЗаказ(Заказ)
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОшибкиЗаблокировать = НСтр("ru='Не удалось заблокировать документ %1% по причине: %2%'");
	ШаблонОшибкиЗаписать      = НСтр("ru='Не удалось записать документ %1% по причине: %2%'");
	
	// Захват объекта для редактирования
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Заказ); 
		ОбъектЗаблокирован = Истина;
		
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаблокировать, Заказ, ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		Заказ.Метаданные(),
		Заказ,
		ТекстОшибки);
		
		ОбъектЗаблокирован = Ложь;
	КонецПопытки;
	
	Если ОбъектЗаблокирован Тогда
		// Получение объекта документа
		ЗаказОбъект  = Заказ.ПолучитьОбъект();
		ЗаказИзменен = Ложь;
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("ЗакрыватьЗаказы", Истина);
		СтруктураДополнительныхПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
		СтруктураДополнительныхПараметров.Вставить("ОтменитьНеотработанныеСтроки", Ложь);
		СтруктураДополнительныхПараметров.Вставить("ПричинаОтмены", Неопределено);
		СтруктураДополнительныхПараметров.Вставить("ПроверятьОстатки", Ложь);
		СтруктураДополнительныхПараметров.Вставить("СкорректироватьМерныеТовары", Ложь);
		СтруктураДополнительныхПараметров.Вставить("СкорректироватьМерныеТоварыПоПриемке", Ложь);
		СтруктураДополнительныхПараметров.Вставить("СкорректироватьЦены", Ложь);
		
		Если Не ЗаказОбъект.УстановитьСтатус("Закрыт", СтруктураДополнительныхПараметров) Тогда
			ЗаказИзменен = Ложь;
		Иначе
			ЗаказИзменен = Истина;
		КонецЕсли;
		
		Если ЗаказИзменен Тогда
			// Запись документа
			Попытка
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаписать, Заказ, ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Заказ.Метаданные(),
				Заказ,
				ТекстОшибки);
				
			КонецПопытки
		КонецЕсли;  
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку документов отгрузки и связанных документов при отмене или возврате.
//
// Параметры:
//   Заказ         - ДокументСсылка.ЗаказКлиента - заказ, который требуется закрыть.
//   Распоряжение  - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ПередачаТоваровХранителю - документ отгрузки.
//   ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены.
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбработатьСтатусОтправленияВозвращенОтменен(Заказ, Распоряжение, ПричинаОтмены, УчетнаяЗапись)
	
	ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить() = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСвязанныхДокументов();
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	СвязанныеДокументы = Запрос.Выполнить().Выгрузить();
	
	Если (ТипЗнч(Распоряжение)= Тип("ДокументСсылка.РеализацияТоваровУслуг") 
				Или ТипЗнч(Распоряжение)= Тип("ДокументСсылка.ПередачаТоваровХранителю"))
			И ОформлятьСначалаНакладные Тогда
		// Отмена проведения расходного ордера
		ПараметрыОтбора = Новый Структура("ТипДокумента", Тип("ДокументСсылка.РасходныйОрдерНаТовары"));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
		
		// Отмена проведения накладной  
		ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Проведен");
		Если ДокументПроведен Тогда
			ДокументОбъект = Распоряжение.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
			
	ИначеЕсли (ТипЗнч(Распоряжение)= Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					Или ТипЗнч(Распоряжение)= Тип("ДокументСсылка.ПередачаТоваровХранителю"))
				И Не ОформлятьСначалаНакладные Тогда
		// Отмена проведения накладной
		ПараметрыОтбора = Новый Структура("ТипДокумента", ТипЗнч(Распоряжение));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл  
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
		
		// Отмена расходного ордера  
		ПараметрыОтбора = Новый Структура("ТипДокумента", Тип("ДокументСсылка.РасходныйОрдерНаТовары"));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл  
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(Распоряжение)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") 
				И ОформлятьСначалаНакладные Тогда  
		// Отмена проведения расходного ордера 
		ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Проведен");
		Если ДокументПроведен Тогда 	
			ДокументОбъект = Распоряжение.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;

		// Отмена проведения накладной
		ПараметрыОтбора = Новый Структура("ТипДокумента", Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл  
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
		
		ПараметрыОтбора = Новый Структура("ТипДокумента", Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл  
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(Распоряжение)= Тип("ДокументСсылка.РасходныйОрдерНаТовары") 
				И Не ОформлятьСначалаНакладные Тогда 
		// Отмена проведения накладной 
		ПараметрыОтбора = Новый Структура("ТипДокумента", Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл  
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
		
		ПараметрыОтбора = Новый Структура("ТипДокумента", Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		СтрокиТаблицы = СвязанныеДокументы.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из СтрокиТаблицы Цикл  
			ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.Ссылка, "Проведен");
			Если ДокументПроведен Тогда 
				ДокументОбъект = Элемент.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЦикла; 
	
		// Отмена расходного ордера
		ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Проведен");
		Если ДокументПроведен Тогда
			ДокументОбъект = Распоряжение.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли; 
	
	ИсточникНастроек =
		?(ЗначениеЗаполнено(УчетнаяЗапись), УчетнаяЗапись, Перечисления.ВидыМаркетплейсов.МаркетплейсOzon);
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(ИсточникНастроек);
	СоздаватьЗадачуОповещение           = НастройкиУчетнойЗаписи.СоздаватьЗадачуОповещение;
	
	Если СоздаватьЗадачуОповещение <> Неопределено И СоздаватьЗадачуОповещение Тогда
		ДобавитьНапоминания(СвязанныеДокументы, Заказ);
	КонецЕсли;
	
	Если Распоряжение <> Неопределено Тогда
		ОтменитьПозицииВЗаказе(Заказ, Распоряжение, ПричинаОтмены);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаСвязанныхДокументов()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеДокументы.Ссылка КАК Ссылка,
		|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) КАК ТипДокумента
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗаказКлиента) КАК СвязанныеДокументы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) В (&Типы)
		|	И СвязанныеДокументы.Ссылка.Проведен";

	Замена = "ТИП(Документ.ПередачаТоваровХранителю), ТИП(Документ.РасходныйОрдерНаТовары), ТИП(Документ.РеализацияТоваровУслуг)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Типы", Замена);

	Возврат ТекстЗапроса;

КонецФункции

Процедура ОтменитьПозицииВЗаказе(Заказ, Распоряжение, ПричинаОтмены)
	
	ЗаказОбъект  = Заказ.ПолучитьОбъект();
	ТоварыЗаказа = ЗаказОбъект.Товары;
	
	ОтменяемыеТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Товары");	// РезультатЗапроса
	Если ОтменяемыеТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДанных = ОтменяемыеТовары.Выбрать();	// ВыборкаИзРезультатаЗапроса
	Пока ВыборкаДанных.Следующий() Цикл
		ПараметрыОтбора = Новый Структура("КодСтроки", ВыборкаДанных.КодСтроки);
		МассивСтрок = ТоварыЗаказа.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТовары = МассивСтрок[0];
			СтрокаТовары.Отменено      = Истина;
			СтрокаТовары.ПричинаОтмены = ПричинаОтмены;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаказОбъект.Записать(?(ЗаказОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		ШаблонОшибкиЗаписать = НСтр("ru='Не удалось записать %1%. %2%'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаписать, Заказ, ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Заказ.Метаданные(),
			Заказ,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьНапоминания(СвязанныеДокументы, Заказ)
	
	НоваяСтрока = СвязанныеДокументы.Добавить();
	НоваяСтрока.Ссылка = Заказ;
	
	Для Каждого Строка Из СвязанныеДокументы Цикл
		НапоминанияПользователя.УстановитьНапоминание(
			НСтр("ru = 'Изменился состав отгружаемого товара, скорректируйте документы и верните товары на склад.'"),
			ТекущаяДатаСеанса()+ 7*24 * 60 * 60, 7*24 * 60 * 60,
			Строка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправленияСлужебный

// Получает список отправлений за указанный период времени.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода             - Дата - начало периода для поиска отправлений;
//   ОкончаниеПериода          - Дата - окончание периода для поиска отправлений;
//   СтатусОтправления         - Строка - фильтр по статусу отправления;
//   СхемаДоставки             - Строка - схемы доставки, разделенные запятыми без пробелов;
//                             - Массив Из Строка - схемы доставки;
//   ФинансовыеДанные          - Булево - признак использования расширенных финансовых данных;
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ОборотыТоваровНаСкладахТорговойПлощадки(УчетнаяЗаписьМаркетплейса, НачалоПериода, ОкончаниеПериода, СтатусОтправления, Знач СхемаДоставки = "FBO", ФинансовыеДанные = Ложь, Отказ = Ложь)

	ТаблицаОборотовТоваров = НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(ФинансовыеДанные);
	
	Если ТипЗнч(СхемаДоставки) = Тип("Строка") Тогда
		СхемаДоставки = ВРег(СтрЗаменить(СхемаДоставки, " ", ""));
		СхемаДоставки = СтрРазделить(СхемаДоставки, ",", Ложь);
	КонецЕсли;
	
	Если СхемаДоставки.Найти("FBO") <> Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемеFBO(НачалоПериода, ОкончаниеПериода, СтатусОтправления);
		ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные = ФинансовыеДанные;
		
		Пока Истина Цикл
			ОтветСервиса = ПолучитьСписокОтправленийЗаПериодПоСхемеFBOИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			ИначеЕсли ОтветСервиса.Количество() = 0 Тогда
				Прервать;
				
			Иначе
				Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
					Если ФинансовыеДанные Тогда
						Товары = ЭлементОтветаСервиса["financial_data"]["products"];
					Иначе
						Товары = ЭлементОтветаСервиса["products"];
					КонецЕсли;
					
					Для Каждого ЭлементКоллекции Из Товары Цикл
						НоваяСтрока                     = ТаблицаОборотовТоваров.Добавить();
						НоваяСтрока.СхемаДоставки       = Перечисления.СхемыРаботыТорговыхПлощадок.FBO;
						НоваяСтрока.ИдентификаторСклада = ЧислоВСтроку(ЭлементОтветаСервиса["analytics_data"]["warehouse_id"]);
						НоваяСтрока.НаименованиеСклада  = ЭлементОтветаСервиса["analytics_data"]["warehouse_name"];
						НоваяСтрока.ДатаОтправления     = НачалоДня(ЭлементОтветаСервиса["in_process_at"]);
						НоваяСтрока.НомерОтправления    = ЭлементОтветаСервиса["posting_number"];
						НоваяСтрока.НомерЗаказа         = ЭлементОтветаСервиса["order_number"];
						НоваяСтрока.ИдентификаторЗаказа = ЭлементОтветаСервиса["order_id"];
						НоваяСтрока.Заказано            = ЭлементКоллекции["quantity"];
						НоваяСтрока.Доставлено          = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("delivered"), ЭлементКоллекции["quantity"], 0);
						НоваяСтрока.Отменено            = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("cancelled"), ЭлементКоллекции["quantity"], 0);
						НоваяСтрока.Цена                = СтрокаВЧисло(ЭлементКоллекции["price"]);
						
						Если ФинансовыеДанные Тогда                                                 
							НоваяСтрока.ИдентификаторSKU = ЧислоВСтроку(ЭлементКоллекции["product_id"]);
							НоваяСтрока.ПроцентКомиссии  = СтрокаВЧисло(ЭлементКоллекции["commission_percent"]);
							НоваяСтрока.СуммаКомиссии    = СтрокаВЧисло(ЭлементКоллекции["commission_amount"], Истина);
							НоваяСтрока.ЦенаДоСкидки     = СтрокаВЧисло(ЭлементКоллекции["old_price"]);
							НоваяСтрока.ПроцентСкидки    = СтрокаВЧисло(ЭлементКоллекции["total_discount_percent"]);
							НоваяСтрока.СуммаСкидки      = НоваяСтрока.Заказано * СтрокаВЧисло(ЭлементКоллекции["total_discount_value"], Истина);
							НоваяСтрока.ЦенаДляКлиента   = СтрокаВЧисло(ЭлементКоллекции["client_price"]);
							НоваяСтрока.ИтогоКНачислению = СтрокаВЧисло(ЭлементКоллекции["payout"]);
							
							Для Каждого Товар Из ЭлементОтветаСервиса["products"] Цикл
								Если ЭлементКоллекции["product_id"] = Товар["sku"] Тогда
									НоваяСтрока.ИдентификаторПубликации          = Товар["offer_id"];
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(Товар["sku"]);
									НоваяСтрока.ПредставлениеОбъектаМаркетплейса = Товар["name"];
									
									Если НоваяСтрока.Заказано = 0 Тогда
										НоваяСтрока.Заказано   = Товар["quantity"];
										НоваяСтрока.Доставлено = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("delivered"), Товар["quantity"], 0);
										НоваяСтрока.Отменено   = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("cancelled"), Товар["quantity"], 0);
									КонецЕсли;
									
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							НоваяСтрока.ИдентификаторПубликации          = ЭлементКоллекции["offer_id"];
							НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["sku"]);
							НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементКоллекции["name"];
							НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементКоллекции["sku"]);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если ОтветСервиса.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете + ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СхемаДоставки.Найти("FBS") <> Неопределено 
			Или СхемаДоставки.Найти("RFBS") <> Неопределено Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS(НачалоПериода, ОкончаниеПериода, СтатусОтправления);
		ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные = ФинансовыеДанные;
		
		Пока Истина Цикл
			ОтветСервиса = ПолучитьОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			ИначеЕсли ОтветСервиса.Результат.Количество() = 0 Тогда
				Прервать;
				
			Иначе
				Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
					Если ФинансовыеДанные Тогда
						Товары = ЭлементОтветаСервиса["financial_data"]["products"];
					Иначе
						Товары = ЭлементОтветаСервиса["products"];
					КонецЕсли;
					
					Для Каждого ЭлементКоллекции Из Товары Цикл
						НоваяСтрока                       = ТаблицаОборотовТоваров.Добавить();
						НоваяСтрока.СхемаДоставки         = Перечисления.СхемыРаботыТорговыхПлощадок.FBS;
						НоваяСтрока.ИдентификаторСклада   = ЧислоВСтроку(ЭлементОтветаСервиса["analytics_data"]["warehouse_id"]);
						НоваяСтрока.НаименованиеСклада    = ЭлементОтветаСервиса["analytics_data"]["warehouse"];
						НоваяСтрока.ДатаОтправления       = НачалоДня(ЭлементОтветаСервиса["in_process_at"]);
						НоваяСтрока.НомерОтправления      = ЭлементОтветаСервиса["posting_number"];
						НоваяСтрока.НомерЗаказа           = ЭлементОтветаСервиса["order_number"];
						НоваяСтрока.ИдентификаторЗаказа   = ЭлементОтветаСервиса["order_id"];
						НоваяСтрока.Заказано              = ЭлементКоллекции["quantity"];
						НоваяСтрока.Доставлено            = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("delivered"), ЭлементКоллекции["quantity"], 0);
						НоваяСтрока.ДатаПередачиВДоставку = ЭлементОтветаСервиса["delivering_date"];
						НоваяСтрока.ДатаДоставки          = ЭлементОтветаСервиса["analytics_data"]["delivery_date_end"];
						НоваяСтрока.Отменено              = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("cancelled"), ЭлементКоллекции["quantity"], 0);
						НоваяСтрока.Цена                  = СтрокаВЧисло(ЭлементКоллекции["price"]);
						
						Если ФинансовыеДанные Тогда
							НоваяСтрока.ИдентификаторSKU = ЧислоВСтроку(ЭлементКоллекции["product_id"]);
							НоваяСтрока.ПроцентКомиссии  = СтрокаВЧисло(ЭлементКоллекции["commission_percent"]);
							НоваяСтрока.СуммаКомиссии    = СтрокаВЧисло(ЭлементКоллекции["commission_amount"], Истина);
							НоваяСтрока.ЦенаДоСкидки     = СтрокаВЧисло(ЭлементКоллекции["old_price"]);
							НоваяСтрока.ПроцентСкидки    = СтрокаВЧисло(ЭлементКоллекции["total_discount_percent"]);
							НоваяСтрока.СуммаСкидки      = НоваяСтрока.Заказано * СтрокаВЧисло(ЭлементКоллекции["total_discount_value"], Истина);
							НоваяСтрока.ЦенаДляКлиента   = СтрокаВЧисло(ЭлементКоллекции["client_price"]);
							НоваяСтрока.ИтогоКНачислению = СтрокаВЧисло(ЭлементКоллекции["payout"]);
							
							Для Каждого Товар Из ЭлементОтветаСервиса["products"] Цикл
								Если ЭлементКоллекции["product_id"] = Товар["sku"] Тогда
									НоваяСтрока.ИдентификаторПубликации          = Товар["offer_id"];
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(Товар["sku"]);
									НоваяСтрока.ПредставлениеОбъектаМаркетплейса = Товар["name"];
									
									Если НоваяСтрока.Заказано = 0 Тогда
										НоваяСтрока.Заказано   = Товар["quantity"];
										НоваяСтрока.Доставлено = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("delivered"), Товар["quantity"], 0);
										НоваяСтрока.Отменено   = ?(ВРег(ЭлементОтветаСервиса["status"]) = ВРег("cancelled"), Товар["quantity"], 0);
									КонецЕсли;
									
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							НоваяСтрока.ИдентификаторПубликации          = ЭлементКоллекции["offer_id"];
							НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["sku"]);
							НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементКоллекции["name"];
							НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементКоллекции["sku"]);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете + ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаОборотовТоваров;

КонецФункции

// Получает информацию об отправлении по его идентификатору.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления          - Строка - номер отправления;
//   СтатусОтправления         - Строка - фильтр по статусу отправления;
//   СхемаДоставки             - Строка - схемы доставки, разделенные запятыми без пробелов;
//                             - Массив Из Строка - схемы доставки;
//   ФинансовыеДанные          - Булево - признак использования расширенных финансовых данных;
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ОборотыТоваровНаСкладахТорговойПлощадкиПоНомеруОтправления(УчетнаяЗаписьМаркетплейса, НомерОтправления, 
			СтатусОтправления, Знач СхемаДоставки = "FBO", ФинансовыеДанные = Ложь, Отказ = Ложь)

	ТаблицаОборотовТоваров = НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(ФинансовыеДанные);
	
	Если ТипЗнч(СхемаДоставки) = Тип("Строка") Тогда
		СхемаДоставки = ВРег(СтрЗаменить(СхемаДоставки, " ", ""));
		СхемаДоставки = СтрРазделить(СхемаДоставки, ",", Ложь);
	КонецЕсли;
	
	Если СхемаДоставки.Найти("FBO") <> Неопределено  Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияИнформацииОбОтправленииПоНомеруПоСхемеFBO(НомерОтправления);
		ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные = ФинансовыеДанные;
		
		ОтветСервиса = ПолучитьИнформациюОбОтправленииПоНомеруПоСхемеFBOИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
			
		Иначе
			Если СтрНайти(ВРег(СтатусОтправления), ВРег(ОтветСервиса["status"])) > 0 
					Или Не ЗначениеЗаполнено(СтатусОтправления) Тогда
				Если ФинансовыеДанные Тогда
					Товары = ОтветСервиса["financial_data"]["products"];
				Иначе
					Товары = ОтветСервиса["products"];
				КонецЕсли;
				
				Для Каждого ЭлементКоллекции Из Товары Цикл
					НоваяСтрока                     = ТаблицаОборотовТоваров.Добавить();
					НоваяСтрока.СхемаДоставки       = Перечисления.СхемыРаботыТорговыхПлощадок.FBO;
					НоваяСтрока.ИдентификаторСклада = ЧислоВСтроку(ОтветСервиса["analytics_data"]["warehouse_id"]);
					НоваяСтрока.НаименованиеСклада  = ОтветСервиса["analytics_data"]["warehouse_name"];
					НоваяСтрока.ДатаОтправления     = НачалоДня(ОтветСервиса["in_process_at"]);
					НоваяСтрока.НомерОтправления    = ОтветСервиса["posting_number"];
					НоваяСтрока.НомерЗаказа         = ОтветСервиса["order_number"];
					НоваяСтрока.ИдентификаторЗаказа = ОтветСервиса["order_id"];
					НоваяСтрока.Заказано            = ЭлементКоллекции["quantity"];
					НоваяСтрока.Доставлено          = ?(ВРег(ОтветСервиса["status"]) = ВРег("delivered"), ЭлементКоллекции["quantity"], 0);
					НоваяСтрока.Отменено            = ?(ВРег(ОтветСервиса["status"]) = ВРег("cancelled"), ЭлементКоллекции["quantity"], 0);
					НоваяСтрока.Цена				= СтрокаВЧисло(ЭлементКоллекции["price"]);
						
					Если ФинансовыеДанные Тогда
						НоваяСтрока.ИдентификаторSKU = ЧислоВСтроку(ЭлементКоллекции["product_id"]);
						НоваяСтрока.ПроцентКомиссии  = СтрокаВЧисло(ЭлементКоллекции["commission_percent"]);
						НоваяСтрока.СуммаКомиссии    = СтрокаВЧисло(ЭлементКоллекции["commission_amount"], Истина);
						НоваяСтрока.ЦенаДоСкидки     = СтрокаВЧисло(ЭлементКоллекции["old_price"]);
						НоваяСтрока.ПроцентСкидки    = СтрокаВЧисло(ЭлементКоллекции["total_discount_percent"]);
						НоваяСтрока.СуммаСкидки      = НоваяСтрока.Заказано * СтрокаВЧисло(ЭлементКоллекции["total_discount_value"], Истина);
						НоваяСтрока.ЦенаДляКлиента   = СтрокаВЧисло(ЭлементКоллекции["client_price"]);
						НоваяСтрока.ИтогоКНачислению = СтрокаВЧисло(ЭлементКоллекции["payout"]);
						
						Для Каждого Товар Из ОтветСервиса["products"] Цикл
							Если ЭлементКоллекции["product_id"] = Товар["sku"] Тогда
								НоваяСтрока.ИдентификаторПубликации          = Товар["offer_id"];
								НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(Товар["sku"]);
								НоваяСтрока.ПредставлениеОбъектаМаркетплейса = Товар["name"];
								
								Если НоваяСтрока.Заказано = 0 Тогда
									НоваяСтрока.Заказано   = Товар["quantity"];
									НоваяСтрока.Доставлено = ?(ВРег(ОтветСервиса["status"]) = ВРег("delivered"), Товар["quantity"], 0);
									НоваяСтрока.Отменено   = ?(ВРег(ОтветСервиса["status"]) = ВРег("cancelled"), Товар["quantity"], 0);
								КонецЕсли;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						НоваяСтрока.ИдентификаторПубликации          = ЭлементКоллекции["offer_id"];
						НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["sku"]);
						НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементКоллекции["name"];
						НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементКоллекции["sku"]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СхемаДоставки.Найти("FBS") <> Неопределено  
			Или СхемаДоставки.Найти("RFBS") <> Неопределено  Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияИнформацииОбОтправленииПоНомеруПоСхемамFBSИRealFBS(НомерОтправления);
		ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные = ФинансовыеДанные;
		
		ОтветСервиса = ПолучитьИнформациюОбОтправленииПоНомеруПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
			
		Иначе	                         
			Если СтрНайти(ВРег(СтатусОтправления), ВРег(ОтветСервиса["status"])) > 0 
					Или Не ЗначениеЗаполнено(СтатусОтправления) Тогда
				Если ФинансовыеДанные Тогда
					Товары = ОтветСервиса["financial_data"]["products"];
				Иначе
					Товары = ОтветСервиса["products"];
				КонецЕсли;
				
				Для Каждого ЭлементКоллекции Из Товары Цикл
					НоваяСтрока                     = ТаблицаОборотовТоваров.Добавить();
					НоваяСтрока.СхемаДоставки       = Перечисления.СхемыРаботыТорговыхПлощадок.FBS;
					НоваяСтрока.ИдентификаторСклада = ЧислоВСтроку(ОтветСервиса["analytics_data"]["warehouse_id"]);
					НоваяСтрока.НаименованиеСклада  = ОтветСервиса["analytics_data"]["warehouse"];
					НоваяСтрока.ДатаОтправления     = НачалоДня(ОтветСервиса["in_process_at"]);
					НоваяСтрока.НомерОтправления    = ОтветСервиса["posting_number"];
					НоваяСтрока.НомерЗаказа         = ОтветСервиса["order_number"];
					НоваяСтрока.ИдентификаторЗаказа = ОтветСервиса["order_id"];
					НоваяСтрока.Заказано            = ЭлементКоллекции["quantity"];
					НоваяСтрока.Доставлено          = ?(ВРег(ОтветСервиса["status"]) = ВРег("delivered"), ЭлементКоллекции["quantity"], 0);
					НоваяСтрока.Отменено            = ?(ВРег(ОтветСервиса["status"]) = ВРег("cancelled"), ЭлементКоллекции["quantity"], 0);
					НоваяСтрока.Цена				= СтрокаВЧисло(ЭлементКоллекции["price"]);
						
					Если ФинансовыеДанные Тогда
						НоваяСтрока.ИдентификаторSKU = ЧислоВСтроку(ЭлементКоллекции["product_id"]);
						НоваяСтрока.ПроцентКомиссии  = СтрокаВЧисло(ЭлементКоллекции["commission_percent"]);
						НоваяСтрока.СуммаКомиссии    = СтрокаВЧисло(ЭлементКоллекции["commission_amount"], Истина);
						НоваяСтрока.ЦенаДоСкидки     = СтрокаВЧисло(ЭлементКоллекции["old_price"]);
						НоваяСтрока.ПроцентСкидки    = СтрокаВЧисло(ЭлементКоллекции["total_discount_percent"]);
						НоваяСтрока.СуммаСкидки      = НоваяСтрока.Заказано * СтрокаВЧисло(ЭлементКоллекции["total_discount_value"], Истина);
						НоваяСтрока.ЦенаДляКлиента   = СтрокаВЧисло(ЭлементКоллекции["client_price"]);
						НоваяСтрока.ИтогоКНачислению = СтрокаВЧисло(ЭлементКоллекции["payout"]);
						
						Для Каждого Товар Из ОтветСервиса["products"] Цикл
							Если ЭлементКоллекции["product_id"] = Товар["sku"] Тогда
								НоваяСтрока.ИдентификаторПубликации          = Товар["offer_id"];
								НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(Товар["sku"]);
								НоваяСтрока.ПредставлениеОбъектаМаркетплейса = Товар["name"];
								
								Если НоваяСтрока.Заказано = 0 Тогда
									НоваяСтрока.Заказано   = Товар["quantity"];
									НоваяСтрока.Доставлено = ?(ВРег(ОтветСервиса["status"]) = ВРег("delivered"), Товар["quantity"], 0);
									НоваяСтрока.Отменено   = ?(ВРег(ОтветСервиса["status"]) = ВРег("cancelled"), Товар["quantity"], 0);
								КонецЕсли;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						НоваяСтрока.ИдентификаторПубликации          = ЭлементКоллекции["offer_id"];
						НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["sku"]);
						НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементКоллекции["name"];
						НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементКоллекции["sku"]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаОборотовТоваров;

КонецФункции

// Получает информацию о возвратах товарах по идентификатору отправления.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления          - Строка - номер отправления;
//   СтатусВозврата            - Строка - фильтр по статусу возврата;
//   СхемаДоставки             - Строка - схемы доставки, разделенные запятыми без пробелов;
//                             - Массив Из Строка - схемы доставки;
//   ФинансовыеДанные          - Булево - признак использования расширенных финансовых данных;
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   См. НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки.
//
Функция ВозвратыТоваровНаСкладахТорговойПлощадкиПоНомеруОтправления(УчетнаяЗаписьМаркетплейса, НомерОтправления, СтатусВозврата, Знач СхемаДоставки = "FBO", ФинансовыеДанные = Ложь, Отказ = Ложь)

	ТаблицаВозвратовТоваров = НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(ФинансовыеДанные);
	
	Если ТипЗнч(СхемаДоставки) = Тип("Строка") Тогда
		СхемаДоставки = ВРег(СтрЗаменить(СхемаДоставки, " ", ""));
		СхемаДоставки = СтрРазделить(СхемаДоставки, ",", Ложь);
	КонецЕсли;
	
	ОборотыТоваровПоНомеруОтправления = ОборотыТоваровНаСкладахТорговойПлощадкиПоНомеруОтправления(
											УчетнаяЗаписьМаркетплейса, 
											НомерОтправления, 
											"",
											СхемаДоставки,
											ФинансовыеДанные,
											Отказ);
											
	Если СхемаДоставки.Найти("FBO") <> Неопределено  Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияИнформацииОВозвратахТоваровПоСхемеFBO(НомерОтправления, СтатусВозврата);

		Пока Истина Цикл
			ОтветСервиса = ПолучитьИнформациюОВозвратахТоваровПоСхемеFBOИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			ИначеЕсли ОтветСервиса.Результат.Количество() = 0 Тогда
				Прервать;
				
			Иначе
				Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
					Отбор           = Новый Структура("ИдентификаторSKU", ЧислоВСтроку(ЭлементОтветаСервиса["sku"]));
					НайденныеСтроки = ОборотыТоваровПоНомеруОтправления.НайтиСтроки(Отбор);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						НоваяСтрока = ТаблицаВозвратовТоваров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
						
						НоваяСтрока.ИдентификаторСклада = "";
						НоваяСтрока.НаименованиеСклада  = ЭлементОтветаСервиса["dst_place_name"];
						НоваяСтрока.Заказано            = -НоваяСтрока.Заказано;
						НоваяСтрока.Доставлено          = 0;
						НоваяСтрока.Отменено            = 0;
						НоваяСтрока.СуммаКомиссии       = -НоваяСтрока.СуммаКомиссии;
						НоваяСтрока.ПроцентСкидки       = 0;
						НоваяСтрока.СуммаСкидки         = 0;
					КонецЕсли;
		        КонецЦикла;
				
				Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
            КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СхемаДоставки.Найти("FBS") <> Неопределено  
			Или СхемаДоставки.Найти("RFBS") <> Неопределено  Тогда
		ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияИнформацииОВозвратахТоваровПоСхемамFBSИRealFBS(НомерОтправления, СтатусВозврата);
		
		Пока Истина Цикл
			ОтветСервиса = ПолучитьИнформациюОВозвратахТоваровПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			ИначеЕсли ОтветСервиса.Результат.Количество() = 0 Тогда
				Прервать;
				
			Иначе	                         
				Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
					НоваяСтрока                                  = ТаблицаВозвратовТоваров.Добавить();
					НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]);
					НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементОтветаСервиса["product_name"];
					НоваяСтрока.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементОтветаСервиса["sku"]);
					НоваяСтрока.СхемаДоставки                    = Перечисления.СхемыРаботыТорговыхПлощадок.FBS;
					НоваяСтрока.ИдентификаторСклада              = ЧислоВСтроку(ЭлементОтветаСервиса["place_id"]);
					НоваяСтрока.НаименованиеСклада               = ЭлементОтветаСервиса["moving_to_place_name"];
					НоваяСтрока.ДатаОтправления                  = НачалоДня(ЭлементОтветаСервиса["return_date"]);
					НоваяСтрока.НомерОтправления                 = ЭлементОтветаСервиса["posting_number"];
					НоваяСтрока.НомерЗаказа                      = ?(СтрЧислоВхождений(НоваяСтрока.НомерОтправления, "-") > 1, Сред(НоваяСтрока.НомерОтправления, 1, СтрНайти(НоваяСтрока.НомерОтправления, "-", НаправлениеПоиска.СКонца) - 1), НоваяСтрока.НомерОтправления);
					НоваяСтрока.ИдентификаторЗаказа              = ЭлементОтветаСервиса["id"];
					НоваяСтрока.Заказано                         = -ЭлементОтветаСервиса["quantity"];
					НоваяСтрока.Доставлено                       = 0;
					НоваяСтрока.Отменено                         = 0;
					НоваяСтрока.Цена                             = СтрокаВЧисло(ЭлементОтветаСервиса["price"]);
						
					Если ФинансовыеДанные Тогда
						НоваяСтрока.ПроцентКомиссии  = СтрокаВЧисло(ЭлементОтветаСервиса["commission_percent"]);
						НоваяСтрока.СуммаКомиссии    = -СтрокаВЧисло(ЭлементОтветаСервиса["commission"], Истина);
						НоваяСтрока.ЦенаДоСкидки     = СтрокаВЧисло(ЭлементОтветаСервиса["price"]);
						НоваяСтрока.ПроцентСкидки    = 0;
						НоваяСтрока.СуммаСкидки      = 0;
						НоваяСтрока.ЦенаДляКлиента   = СтрокаВЧисло(ЭлементОтветаСервиса["price"]);
						НоваяСтрока.ИтогоКНачислению = СтрокаВЧисло(ЭлементОтветаСервиса["price_without_commission"]);
					КонецЕсли;
					
					Отбор           = Новый Структура("ИдентификаторSKU", НоваяСтрока.ИдентификаторSKU);
					НайденныеСтроки = ОборотыТоваровПоНомеруОтправления.НайтиСтроки(Отбор);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						НоваяСтрока.ИдентификаторПубликации = НайденныеСтроки[0].ИдентификаторПубликации;
					КонецЕсли;
				КонецЦикла;
				
				Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВозвратовТоваров;

КонецФункции

// Получает список транзакций за указанный период времени.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода             - Дата - начало периода для поиска транзакций;
//   ОкончаниеПериода          - Дата - окончание периода для поиска транзакций;
//   ТипОперации               - Строка - фильтры по типам операций, разделенных запятыми без пробелов;
//   ТипНачисления             - Строка - тип начисления;
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - список транзакций:
//     * Ключ     - Строка - номер отправления (posting_number);
//     * Значение - Структура - данные об отправлении:
//       ** ТипОперации           - Строка - тип операции (operation_type);
//       ** ДатаОперации          - Дата - дата операции (operation_date);
//       ** ИдентификаторОперации - Строка - идентификатор операции (operation_id);
//       ** ТипНачисления         - Строка - тип начисления (type);
//       ** СхемаДоставки         - Строка - схема доставки (delivery_schema);
//       ** ИдентификаторСклада   - Строка - идентификатор склада на маркетплейсе;
//       ** СуммаОперации         - Число - итоговая сумма операции (amount);
//       ** СтоимостьТоваров      - Число - стоимость товаров с учетом скидок продавца (accruals_for_sale);
//       ** СтоимостьДоставки     - Число - стоимость доставки (delivery_charge);
//       ** СтоимостьВозвратов    - Число - плата за возвраты и отмены для начислений (return_delivery_charge);
//       ** Комиссия              - Число - комиссия за продажу или возврат комиссии за продажу (sale_commission).
//
Функция ПолучитьСписокТранзакций(УчетнаяЗаписьМаркетплейса, Знач НачалоПериода, Знач ОкончаниеПериода, ТипОперации = "", 
			ТипНачисления = "all", Отказ = Ложь)

	Транзакции       = Новый Соответствие;
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаТранзакций(НачалоПериода, ОкончаниеПериода, ТипОперации, ТипНачисления);
	
	Пока НачалоПериода < ОкончаниеПериода Цикл
		ПараметрыЗапроса.Фильтр.НачалоПериода    = НачалоПериода;
		ПараметрыЗапроса.Фильтр.ОкончаниеПериода = Мин(КонецМесяца(НачалоПериода), ОкончаниеПериода);
		
		Пока Истина Цикл
			ОтветСервиса = ПолучитьСписокТранзакцийИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;
				Прервать;
				
			Иначе
				Для Каждого ЭлементОтветаСервиса Из ОтветСервиса["operations"] Цикл
					Данные = Новый Структура;
					Данные.Вставить("ТипОперации",           ЭлементОтветаСервиса["operation_type"]);
					Данные.Вставить("ДатаОперации",          ЭлементОтветаСервиса["operation_date"]);
					Данные.Вставить("ИдентификаторОперации", ЭлементОтветаСервиса["operation_id"]);
					Данные.Вставить("ТипНачисления",         ЭлементОтветаСервиса["type"]);
					Данные.Вставить("СхемаДоставки",	     ВРег(ЭлементОтветаСервиса["posting"]["delivery_schema"]));
					Данные.Вставить("ИдентификаторСклада",   ЧислоВСтроку(ЭлементОтветаСервиса["posting"]["warehouse_id"]));
					Данные.Вставить("СуммаОперации",         ЭлементОтветаСервиса["amount"]);
					Данные.Вставить("СтоимостьТоваров",      ЭлементОтветаСервиса["accruals_for_sale"]);
					Данные.Вставить("СтоимостьДоставки",     ЭлементОтветаСервиса["delivery_charge"]);
					Данные.Вставить("СтоимостьВозвратов",    ЭлементОтветаСервиса["return_delivery_charge"]);
					Данные.Вставить("СуммаКомиссии",         ЭлементОтветаСервиса["sale_commission"]);
					
					Транзакции.Вставить(ЭлементОтветаСервиса["posting"]["posting_number"], Данные);
				КонецЦикла;
				
				Если ОтветСервиса["operations"].Количество() < ПараметрыЗапроса.МаксимальноеКоличествоНаСтранице Тогда
					Прервать;
				КонецЕсли;
				
				ПараметрыЗапроса.НомерСтраницы = ПараметрыЗапроса.НомерСтраницы + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		НачалоПериода = КонецМесяца(НачалоПериода) + 1;
	КонецЦикла;

	Возврат Транзакции;

КонецФункции

// Получает подробный список отправлений по заказам FBO.
//
// Параметры:
//   УчетнаяЗаписьТорговойПлощадки - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаЗаказов                - ТаблицаЗначений - таблица с данными заказов FBO, 
//                                     см. Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов.ТаблицаЗаказов.
//   НачалоПериода                 - Дата   - начало периода, за который необходимо получить данные заказов.
//   ОкончаниеПериода              - Дата   - окончание периода, за который необходимо получить данные заказов.
//   СтатусОтправления             - Строка - представление статуса заказа, по которому необходимо осуществлять отбор.
//   Отказ                         - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПолучитьОтправленияFBO(Знач УчетнаяЗаписьТорговойПлощадки, ТаблицаЗаказов,
			Знач НачалоПериода, Знач ОкончаниеПериода, Знач СтатусОтправления, 
			Отказ = Ложь)
	
	СписокТоваровВОтправлении = Новый ТаблицаЗначений;
	СписокТоваровВОтправлении.Колонки.Добавить("ИдентификаторПубликации",          Новый ОписаниеТипов("Строка")); 
	СписокТоваровВОтправлении.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", Новый ОписаниеТипов("Строка"));  
	СписокТоваровВОтправлении.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", Новый ОписаниеТипов("Строка")); 
	СписокТоваровВОтправлении.Колонки.Добавить("Количество",                       Новый ОписаниеТипов("Число"));
	СписокТоваровВОтправлении.Колонки.Добавить("Цена",                             Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип));
	СписокТоваровВОтправлении.Колонки.Добавить("Валюта",                           Новый ОписаниеТипов("Строка")); 
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемеFBO(НачалоПериода, 
		ОкончаниеПериода, 
		СтатусОтправления);
	ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные = Ложь;
	
	Пока Истина Цикл
		ОтветСервиса = ПолучитьСписокОтправленийЗаПериодПоСхемеFBOИзСервиса(УчетнаяЗаписьТорговойПлощадки, ПараметрыЗапроса);
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
			Прервать;
			
		ИначеЕсли ОтветСервиса.Количество() = 0 Тогда
			Прервать;
			
		Иначе
			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
				НоваяСтрока = ТаблицаЗаказов.Добавить();
				НоваяСтрока.ИдентификаторЗаказа			   = ЧислоВСтроку(ЭлементОтветаСервиса["order_id"]);
				НоваяСтрока.НомерЗаказа					   = ЭлементОтветаСервиса.Получить("order_number");
				НоваяСтрока.НомерОтправления 			   = ЭлементОтветаСервиса.Получить("posting_number");
				НоваяСтрока.ДатаСозданияОтправления		   = ЭлементОтветаСервиса.Получить("created_at"); 
				НоваяСтрока.ДатаНачалаОбработкиОтправления = ЭлементОтветаСервиса.Получить("in_process_at");
				НоваяСтрока.СтатусОтправления              = Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению(
																ЭлементОтветаСервиса["status"],
																ЭлементОтветаСервиса["substatus"]);
				НоваяСтрока.ПричинаОтменыОтправления	   = ЭлементОтветаСервиса.Получить("cancel_reason_id");
				НоваяСтрока.ИдентификаторСклада			   = ЧислоВСтроку(ЭлементОтветаСервиса.Получить("analytics_data").Получить("warehouse_id"));
				НоваяСтрока.НаименованиеСклада			   = ЭлементОтветаСервиса.Получить("analytics_data").Получить("warehouse_name");  
				НоваяСтрока.СпособДоставки				   = ЭлементОтветаСервиса.Получить("analytics_data").Получить("delivery_type");
				НоваяСтрока.РегионДоставки				   = ЭлементОтветаСервиса.Получить("analytics_data").Получить("region");
				НоваяСтрока.ГородДоставки				   = ЭлементОтветаСервиса.Получить("analytics_data").Получить("city");
				НоваяСтрока.СтатусПокупателя			   = ЭлементОтветаСервиса.Получить("analytics_data").Получить("is_legal");
				НоваяСтрока.СпособОплаты				   = ЭлементОтветаСервиса.Получить("analytics_data").Получить("payment_type_group_name");
				
				СписокТоваровВОтправлении.Очистить();
				
				Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса.Получить("products") Цикл
					СтрокаТаблицыЗначений = СписокТоваровВОтправлении.Добавить();
					СтрокаТаблицыЗначений.ИдентификаторПубликации		   = ЭлементКоллекции.Получить("offer_id");
					СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции.Получить("sku"));
					СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса = ЭлементКоллекции.Получить("name");
					СтрокаТаблицыЗначений.Количество					   = ЭлементКоллекции.Получить("quantity");
					СтрокаТаблицыЗначений.Цена							   = СтрокаВЧисло(ЭлементКоллекции.Получить("price"));
					СтрокаТаблицыЗначений.Валюта						   = ЭлементКоллекции.Получить("currency_code");
				КонецЦикла;
				
				НоваяСтрока.СписокТоваровВОтправлении = СписокТоваровВОтправлении.Скопировать();
			КонецЦикла;
			
			Если ОтветСервиса.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете + ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает подробный список отправлений по заказам FBS.
//
// Параметры:
//   УчетнаяЗаписьТорговойПлощадки - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаЗаказов                - ТаблицаЗначений - таблица с данными заказов FBS, 
//                                     см. Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов.ТаблицаЗаказов.
//   НачалоПериода                 - Дата   - начало периода, за который необходимо получить данные заказов.
//   ОкончаниеПериода              - Дата   - окончание периода, за который необходимо получить данные заказов.
//   ВидФильтраПоПериоду           - Строка - вид фильтра по периоду выборки:
//                                     "ДатаСоздания" - по дате создания отправления;
//                                     "ДатаСборки" - по времени, до которого продавцу нужно собрать заказ сборки);
//                                     "ДатаПередачиВДоставку" - по дате передачи отправления в доставку.
//   СтатусОтправления             - Строка - представление статуса заказа, по которому необходимо осуществлять отбор.
//   Отказ                         - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПолучитьОтправленияFBS(Знач УчетнаяЗаписьТорговойПлощадки, ТаблицаЗаказов,
			Знач НачалоПериода, Знач ОкончаниеПериода, Знач ВидФильтраПоПериоду = "ДатаСоздания", Знач СтатусОтправления = "",
			Отказ = Ложь)
	
	ОписаниеТипаСтрока3   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло15_2 = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип);
	ОписаниеТипаЧисло15_3 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	
	СписокТоваровВОтправлении = Новый ТаблицаЗначений;
	СписокТоваровВОтправлении.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	СписокТоваровВОтправлении.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	СписокТоваровВОтправлении.Колонки.Добавить("ИдентификаторSKU",                 ОписаниеТипаСтрока50);
	СписокТоваровВОтправлении.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	СписокТоваровВОтправлении.Колонки.Добавить("Количество",                       ОписаниеТипаЧисло15_3);
	СписокТоваровВОтправлении.Колонки.Добавить("Цена",                             ОписаниеТипаЧисло15_2);
	СписокТоваровВОтправлении.Колонки.Добавить("Валюта",                           ОписаниеТипаСтрока3);
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS(НачалоПериода, 
		ОкончаниеПериода, 
		СтатусОтправления);
	ПараметрыЗапроса.ФильтрДляПоискаОтправлений.ВидФильтраПоПериоду = ВидФильтраПоПериоду;
	ПараметрыЗапроса.ДополнительныеПоля.ФинансовыеДанные = Истина;
	
	Пока Истина Цикл
		ОтветСервиса = ПолучитьНеобработанныеОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗаписьТорговойПлощадки, 
			ПараметрыЗапроса);
		
		Если ОтветСервиса.Результат = Неопределено Тогда
			Отказ = Истина;
			Прервать;
			
		ИначеЕсли ОтветСервиса.Результат.Количество() = 0 Тогда
			Прервать;
			
		Иначе
			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
				НоваяСтрока = ТаблицаЗаказов.Добавить();
				НоваяСтрока.ИдентификаторЗаказа              = ЧислоВСтроку(ЭлементОтветаСервиса["order_id"]);
				НоваяСтрока.НомерЗаказа                      = ЭлементОтветаСервиса["order_number"];
				НоваяСтрока.НомерОтправления                 = ЭлементОтветаСервиса["posting_number"];
				НоваяСтрока.ДатаСозданияОтправления          = ЭлементОтветаСервиса["in_process_at"];
				НоваяСтрока.ДатаНачалаОбработкиОтправления   = ЭлементОтветаСервиса["in_process_at"];
				НоваяСтрока.СтатусОтправления                = Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению(
																	ЭлементОтветаСервиса["status"],
																	ЭлементОтветаСервиса["substatus"]);
				НоваяСтрока.ТрекНомерОтправления             = ЭлементОтветаСервиса["tracking_number"];
				НоваяСтрока.ПричинаОтменыОтправления         = ЭлементОтветаСервиса["cancellation"]["cancel_reason"];
				НоваяСтрока.ДатаСборки                       = ЭлементОтветаСервиса["shipment_date"];
				НоваяСтрока.ИдентификаторСклада              = ЧислоВСтроку(ЭлементОтветаСервиса["analytics_data"]["warehouse_id"]);
				НоваяСтрока.НаименованиеСклада               = ЭлементОтветаСервиса["analytics_data"]["warehouse"];
				НоваяСтрока.ДатаПередачиВДоставку            = ЭлементОтветаСервиса["delivering_date"];
				НоваяСтрока.СпособДоставки                   = ЭлементОтветаСервиса["analytics_data"]["delivery_type"];
				НоваяСтрока.ТипДоставки                      = ПредставлениеПоЗначению(ЭлементОтветаСервиса["tpl_integration_type"]);
				НоваяСтрока.РегионДоставки                   = ЭлементОтветаСервиса["analytics_data"]["region"];
				НоваяСтрока.ГородДоставки                    = ЭлементОтветаСервиса["analytics_data"]["city"];
				НоваяСтрока.СтатусПокупателя                 = ЭлементОтветаСервиса["analytics_data"]["is_legal"];
				НоваяСтрока.СпособОплаты                     = ЭлементОтветаСервиса["analytics_data"]["payment_type_group_name"];
				
				Если ЭлементОтветаСервиса["customer"] <> Неопределено Тогда
					НоваяСтрока.КомментарийКЗаказу = ЭлементОтветаСервиса["customer"]["address"]["comment"];
				КонецЕсли;
				
				СписокТоваровВОтправлении.Очистить();
				
				Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["financial_data"]["products"] Цикл
					СтрокаТаблицыЗначений = СписокТоваровВОтправлении.Добавить();
					СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса = "";
					СтрокаТаблицыЗначений.ИдентификаторSKU                 = ЧислоВСтроку(ЭлементКоллекции["product_id"]);
					СтрокаТаблицыЗначений.Количество                       = ЭлементКоллекции["quantity"];
					СтрокаТаблицыЗначений.Цена                             = СтрокаВЧисло(ЭлементКоллекции["price"]);
					СтрокаТаблицыЗначений.Валюта                           = ЭлементКоллекции["currency_code"];
					
					Для Каждого Товар Из ЭлементОтветаСервиса["products"] Цикл
						Если ЭлементКоллекции["product_id"] = Товар["sku"] Тогда
							СтрокаТаблицыЗначений.ИдентификаторПубликации          = Товар["offer_id"];
							СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса = Товар["name"];
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				НоваяСтрока.СписокТоваровВОтправлении = СписокТоваровВОтправлении.Скопировать();
			КонецЦикла;
			
			Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапроса.НачальноеСмещениеВОтвете = ПараметрыЗапроса.НачальноеСмещениеВОтвете + ПараметрыЗапроса.МаксимальноеКоличествоВОтвете;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает задания на асинхронное формирование этикеток.
//
// Параметры:
//   УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений  - ТаблицаЗначений - номера отправлений, для которых нужны этикетки:
//     * УчетнаяЗапись    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись;
//     * Заказ            - ДокументСсылка.ЗаказКлиента - заказ;
//     * ДокументОтгрузки - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ПередачаТоваровХранителю - документ отгрузки;
//     * НомерОтправления - Строка - номер отправления.
//   Отказ              - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура СоздатьЗаданияНаАсинхронноеФормированиеЭтикеток(УчетнаяЗапись, НомераОтправлений, Отказ = Ложь)
	
	НомераОтправлений.Колонки.Добавить("ИдентификаторЗадания", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	
	Если НомераОтправлений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыЗначений Из НомераОтправлений Цикл
		ПараметрыЗапроса = НовыеПараметрыЗапросаСозданияЗаданияНаАсинхронноеФормированиеЭтикеток(СтрокаТаблицыЗначений.НомерОтправления);
		ОтветСервиса     = СоздатьЗаданияНаАсинхронноеФормированиеЭтикетокВСервисе(УчетнаяЗапись, ПараметрыЗапроса);
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
			
		Иначе
			СтрокаТаблицыЗначений.ИдентификаторЗадания = ЧислоВСтроку(ОтветСервиса[0]["task_id"]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает этикетки отправлений по ранее сформированным заданиям.
//
// Параметры:
//   УчетнаяЗапись        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторЗадания - Строка - идентификатор задания.
//   Отказ                - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
Процедура ПолучитьЭтикеткиОтправлений(УчетнаяЗапись, ИдентификаторыЗаданий, 
			КоличествоПопыток = 0, ПаузаМеждуПопытками = 5, Отказ = Ложь)
	
	Пока Истина Цикл
		ОжидатьДалее = Ложь;
		
		Для Каждого СтрокаТаблицыЗначений Из ИдентификаторыЗаданий Цикл
			Если СтрокаТаблицыЗначений.СтатусЗадания = "COMPLETED"
					Или СтрокаТаблицыЗначений.СтатусЗадания = "ERROR" Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоПопыток > 0 
					И СтрокаТаблицыЗначений.Повторы >= КоличествоПопыток Тогда
				СтрокаТаблицыЗначений.СтатусЗадания  = "ERROR";
				СтрокаТаблицыЗначений.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить этикетки с торговой площадки <%1> за ограниченное количество попыток.'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗапись);
				
			ИначеЕсли СтрокаТаблицыЗначений.ВремяИсполнения <= ТекущаяУниверсальнаяДатаВМиллисекундах() Тогда
				ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияЭтикетокОтправлений(СтрокаТаблицыЗначений.ИдентификаторЗадания);
				ОтветСервиса     = ПолучитьЭтикеткиОтправленийИзСервиса(УчетнаяЗапись, ПараметрыЗапроса);
				
				Если ОтветСервиса = Неопределено Тогда
					СтрокаТаблицыЗначений.СтатусЗадания = "ERROR";
					Отказ = Истина;
					
				Иначе
					СтрокаТаблицыЗначений.СтатусЗадания = ВРег(ОтветСервиса["status"]);
					
					Если СтрокаТаблицыЗначений.СтатусЗадания = "COMPLETED" Тогда
						ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
						ПараметрыПолучения.ПутьДляСохранения = ПолучитьИмяВременногоФайла("pdf");
						
						РезультатПолучения = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ОтветСервиса["file_url"], 
							ПараметрыПолучения, 
							Ложь);
						
						Если РезультатПолучения.Статус Тогда
							СтрокаТаблицыЗначений.ПутьКФайлу     = РезультатПолучения.Путь;
							СтрокаТаблицыЗначений.ОписаниеОшибки = "";
						Иначе
							СтрокаТаблицыЗначений.ОписаниеОшибки = РезультатПолучения.СообщениеОбОшибке;
						КонецЕсли;
						
					ИначеЕсли СтрокаТаблицыЗначений.СтатусЗадания = "ERROR" Тогда
						СтрокаТаблицыЗначений.ОписаниеОшибки = ОтветСервиса["error"];
					
					Иначе
						ОжидатьДалее = (КоличествоПопыток > 0);
						
						СтрокаТаблицыЗначений.Повторы         = СтрокаТаблицыЗначений.Повторы + 1;
						СтрокаТаблицыЗначений.ВремяИсполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() + 1000 * СтрокаТаблицыЗначений.Повторы;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ОжидатьДалее = (КоличествоПопыток > 0);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОжидатьДалее Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияБТС.Пауза(ПаузаМеждуПопытками);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЭкземпляровПоОтправлению()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Заказ КАК Заказ,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ИдентификаторТовара КАК ИдентификаторТовара,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ИдентификаторЭкземпляра КАК ИдентификаторЭкземпляра,
		|	ВЫБОР
		|		КОГДА НЕ &БезРодительскогоОтправления
		|				И ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления ПОДОБНО &ПостфиксОтправления
		|			ТОГДА ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерРодительскогоОтправления
		|		ИНАЧЕ ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления
		|	КОНЕЦ КАК НомерОтправленияДляГруппировки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления КАК НомерОтправления,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.КодСтроки КАК КодСтроки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяСтранаПроисхождения КАК ТребуетсяСтранаПроисхождения,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СтранаПроисхождения КАК СтранаПроисхожденияСсылка,
		|	ЕСТЬNULL(СправочникСтраныМира.КодАльфа2, """") КАК СтранаПроисхожденияКод,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяНомерГТД КАК ТребуетсяНомерГТД,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяРНПТ КАК ТребуетсяРНПТ,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерГТД КАК НомерГТДСсылка,
		|	ЕСТЬNULL(СправочникНомераГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)) КАК НомерГТДТип,
		|	ЕСТЬNULL(СправочникНомераГТД.Код, """") КАК НомерГТДКод,
		|	ЕСТЬNULL(СправочникНомераГТД.РегистрационныйНомер, """") КАК НомерГТДРегистрационныйНомер,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяМаркировка КАК ТребуетсяМаркировка,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ШтрихкодУпаковки КАК КодМаркировкиСсылка,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ПолныйКодМаркировки КАК КодМаркировки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяУИН КАК ТребуетсяУИН,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.УИН КАК УИН,
		|	ВЫБОР
		|		КОГДА ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Количество
		|	КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ ВТ_Экземпляры
		|ИЗ
		|	РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок КАК ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ПО (ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись)
		|			И (ЗаказыТорговыхПлощадок.Заказ = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Заказ)
		|			И (ЗаказыТорговыхПлощадок.НомерОтправления = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СправочникСтраныМира
		|		ПО (СправочникСтраныМира.Ссылка = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СтранаПроисхождения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК СправочникНомераГТД
		|		ПО (СправочникНомераГТД.Ссылка = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерГТД)
		|ГДЕ
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления В(&НомераОтправлений)
		|	И &СтатусОтправления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Заказ,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ИдентификаторТовара,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ИдентификаторЭкземпляра,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерРодительскогоОтправления,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерРодительскогоОтправления,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.КодСтроки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ИдентификаторСтроки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ДокументОтгрузки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяСтранаПроисхождения,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СтранаПроисхождения,
		|	ЕСТЬNULL(СправочникСтраныМира.КодАльфа2, """"),
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяНомерГТД,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяРНПТ,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерГТД,
		|	ЕСТЬNULL(СправочникНомераГТД.ТипНомераГТД, ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)),
		|	ЕСТЬNULL(СправочникНомераГТД.Код, """"),
		|	ЕСТЬNULL(СправочникНомераГТД.РегистрационныйНомер, """"),
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяМаркировка,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ШтрихкодУпаковки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ПолныйКодМаркировки,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ТребуетсяУИН,
		|	ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.УИН,
		|	ВЫБОР
		|		КОГДА ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Количество
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок КАК ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ПО (ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись)
		|			И (ЗаказыТорговыхПлощадок.Заказ = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.Заказ)
		|			И (ЗаказыТорговыхПлощадок.НомерОтправления = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СправочникСтраныМира
		|		ПО (СправочникСтраныМира.Ссылка = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СтранаПроисхождения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК СправочникНомераГТД
		|		ПО (СправочникНомераГТД.Ссылка = ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерГТД)
		|ГДЕ
		|	НЕ &БезРодительскогоОтправления
		|	И ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерРодительскогоОтправления В
		|			(ВЫБРАТЬ
		|				ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерРодительскогоОтправления КАК НомерОтправления
		|			ИЗ
		|				РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок КАК ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок
		|			ГДЕ
		|				ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления В (&НомераОтправлений)
		|				И ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.НомерОтправления ПОДОБНО &ПостфиксОтправления)
		|	И &СтатусОтправления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
		|	Экземпляры.Заказ КАК Заказ,
		|	Экземпляры.ИдентификаторТовара КАК ИдентификаторТовара,
		|	Экземпляры.ИдентификаторЭкземпляра КАК ИдентификаторЭкземпляра,
		|	Экземпляры.НомерОтправленияДляГруппировки КАК НомерОтправленияДляГруппировки,
		|	Экземпляры.НомерОтправления КАК НомерОтправления,
		|	Экземпляры.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	Экземпляры.КодСтроки КАК КодСтроки,
		|	Экземпляры.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Экземпляры.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЕСТЬNULL(ДокументЗаказКлиентаТовары.Отменено, ИСТИНА) КАК Отменено,
		|	ЕСТЬNULL(ДокументЗаказКлиентаТовары.ПричинаОтмены, ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)) КАК ПричинаОтмены,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК КодПричиныОтмены,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеПричиныОтмены,
		|	Экземпляры.ТребуетсяСтранаПроисхождения КАК ТребуетсяСтранаПроисхождения,
		|	Экземпляры.СтранаПроисхожденияСсылка КАК СтранаПроисхожденияСсылка,
		|	Экземпляры.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
		|	Экземпляры.ТребуетсяНомерГТД КАК ТребуетсяГТД,
		|	Экземпляры.ТребуетсяРНПТ КАК ТребуетсяРНПТ,
		|	Экземпляры.НомерГТДСсылка КАК НомерГТДСсылка,
		|	Экземпляры.НомерГТДТип КАК НомерГТДТип,
		|	ВЫБОР
		|		КОГДА Экземпляры.НомерГТДТип = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерГТД)
		|				ИЛИ Экземпляры.НомерГТДТип = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)
		|			ТОГДА Экземпляры.НомерГТДКод
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НомерГТДКод,
		|	ВЫБОР
		|		КОГДА Экземпляры.НомерГТДТип <> ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.НомерГТД)
		|				И Экземпляры.НомерГТДТип = ЗНАЧЕНИЕ(Перечисление.ТипыНомеровГТД.ПустаяСсылка)
		|			ТОГДА Экземпляры.НомерГТДРегистрационныйНомер
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК НомерГТДРегистрационныйНомер,
		|	Экземпляры.ТребуетсяМаркировка КАК ТребуетсяМаркировка,
		|	Экземпляры.КодМаркировкиСсылка КАК КодМаркировкиСсылка,
		|	Экземпляры.КодМаркировки КАК КодМаркировки,
		|	Экземпляры.ТребуетсяУИН КАК ТребуетсяУИН,
		|	Экземпляры.УИН КАК УИН,
		|	Экземпляры.Количество КАК Количество,
		|	ЛОЖЬ КАК ПроверкаПройдена,
		|	"""" КАК КодОшибки,
		|	"""" КАК ОписаниеОшибки
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	ВТ_Экземпляры КАК Экземпляры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ДокументЗаказКлиентаТовары
		|		ПО (ДокументЗаказКлиентаТовары.Ссылка = Экземпляры.Заказ)
		|			И (ДокументЗаказКлиентаТовары.КодСтроки = Экземпляры.КодСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ПричинаОтмены))
		|			И (СоответствияОбъектовМаркетплейсов.Объект1С = ДокументЗаказКлиентаТовары.ПричинаОтмены)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ,
		|	ИдентификаторТовара,
		|	ИдентификаторЭкземпляра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Результат.Заказ КАК Заказ,
		|	Результат.ИдентификаторТовара КАК ИдентификаторТовара,
		|	Результат.ИдентификаторЭкземпляра КАК ИдентификаторЭкземпляра,
		|	Результат.НомерОтправленияДляГруппировки КАК НомерОтправленияДляГруппировки,
		|	Результат.НомерОтправления КАК НомерОтправления,
		|	Результат.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	Результат.КодСтроки КАК КодСтроки,
		|	Результат.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Результат.ДокументОтгрузки КАК ДокументОтгрузки,
		|	Результат.Отменено КАК Отменено,
		|	Результат.ПричинаОтмены КАК ПричинаОтмены,
		|	Результат.КодПричиныОтмены КАК КодПричиныОтмены,
		|	Результат.НаименованиеПричиныОтмены КАК НаименованиеПричиныОтмены,
		|	Результат.ТребуетсяСтранаПроисхождения КАК ТребуетсяСтранаПроисхождения,
		|	Результат.СтранаПроисхожденияСсылка КАК СтранаПроисхожденияСсылка,
		|	Результат.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
		|	Результат.ТребуетсяГТД КАК ТребуетсяГТД,
		|	Результат.ТребуетсяРНПТ КАК ТребуетсяРНПТ,
		|	Результат.НомерГТДСсылка КАК НомерГТДСсылка,
		|	Результат.НомерГТДТип КАК НомерГТДТип,
		|	Результат.НомерГТДКод КАК НомерГТДКод,
		|	Результат.НомерГТДРегистрационныйНомер КАК НомерГТДРегистрационныйНомер,
		|	Результат.ТребуетсяМаркировка КАК ТребуетсяМаркировка,
		|	Результат.КодМаркировкиСсылка КАК КодМаркировкиСсылка,
		|	Результат.КодМаркировки КАК КодМаркировки,
		|	Результат.ТребуетсяУИН КАК ТребуетсяУИН,
		|	Результат.УИН КАК УИН,
		|	Результат.Количество КАК Количество,
		|	Результат.ПроверкаПройдена КАК ПроверкаПройдена,
		|	Результат.КодОшибки КАК КодОшибки,
		|	Результат.ОписаниеОшибки КАК ОписаниеОшибки
		|ИЗ
		|	ВТ_Результат КАК Результат
		|ГДЕ
		|	(Результат.НомерЗаписи, ИСТИНА) В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(НомераСтрок.НомерЗаписи),
		|				ИСТИНА
		|			ИЗ
		|				ВТ_Результат КАК НомераСтрок
		|			ГДЕ
		|				Результат.Заказ = НомераСтрок.Заказ
		|				И Результат.ИдентификаторТовара = НомераСтрок.ИдентификаторТовара
		|				И Результат.ИдентификаторЭкземпляра = НомераСтрок.ИдентификаторЭкземпляра)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерОтправления УБЫВ,
		|	ИдентификаторЭкземпляра
		|ИТОГИ
		|	МАКСИМУМ(Заказ),
		|	МАКСИМУМ(ТребуетсяСтранаПроисхождения),
		|	МАКСИМУМ(ТребуетсяГТД),
		|	МАКСИМУМ(ТребуетсяРНПТ),
		|	МАКСИМУМ(ТребуетсяМаркировка),
		|	МАКСИМУМ(ТребуетсяУИН),
		|	СУММА(Количество)
		|ПО
		|	НомерОтправленияДляГруппировки,
		|	ИдентификаторТовара";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет вычисляемые поля таблиц экземпляров товаров из отправления.
//
// Параметры:
//   Товары            - См. НоваяТаблицаТоваровПоОтправлению.
//   ИзменитьТребуется - Булево - пересчитать показатели "Требуется".
//
Процедура ДополнитьТаблицыЭкземпляровТоваровПоОтправлению(Товары, ИзменитьТребуется = Ложь)
	
	Страны    = Новый Массив;
	НомераГТД = Новый Массив;
	Штрихкоды = Новый Массив;
	
	Для Каждого СтрокаТаблицыЗначений Из Товары Цикл
		Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
			Страны.Добавить(ЭлементКоллекции.СтранаПроисхожденияСсылка);
			НомераГТД.Добавить(ЭлементКоллекции.НомерГТДСсылка);
		КонецЦикла;
	КонецЦикла;
	
	РеквизитыСтран      = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Страны, "КодАльфа2");
	РеквизитыНомеровГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НомераГТД, "ТипНомераГТД, Код, РегистрационныйНомер");
	
	Для Каждого СтрокаТаблицыЗначений Из Товары Цикл
		ТребуетсяСтранаПроисхождения = Ложь;
		ТребуетсяГТД                 = Ложь;
		ТребуетсяРНПТ                = Ложь;
		ТребуетсяМаркировка          = Ложь;
		ТребуетсяУИН                 = Ложь;
		
		Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
			Страна = РеквизитыСтран.Получить(ЭлементКоллекции.СтранаПроисхожденияСсылка);
			Если Страна = Неопределено Тогда
				ЭлементКоллекции.СтранаПроисхожденияКод = "";
			Иначе
				ЭлементКоллекции.СтранаПроисхожденияКод = Страна.КодАльфа2;
			КонецЕсли;
			Если ИзменитьТребуется Тогда
				ЭлементКоллекции.ТребуетсяСтранаПроисхождения = ЗначениеЗаполнено(ЭлементКоллекции.СтранаПроисхожденияКод);
			КонецЕсли;
			
			НомерГТД = РеквизитыНомеровГТД.Получить(ЭлементКоллекции.НомерГТДСсылка);
			Если НомерГТД = Неопределено Тогда
				ЭлементКоллекции.ТребуетсяГТД                 = Ложь;
				ЭлементКоллекции.ТребуетсяРНПТ                = Ложь;
				ЭлементКоллекции.НомерГТДТип                  = Перечисления.ТипыНомеровГТД.ПустаяСсылка();
				ЭлементКоллекции.НомерГТДКод                  = "";
				ЭлементКоллекции.НомерГТДРегистрационныйНомер = "";
			Иначе
				ЭлементКоллекции.НомерГТДТип = НомерГТД.ТипНомераГТД;
				Если НомерГТД.ТипНомераГТД = Перечисления.ТипыНомеровГТД.НомерГТД 
						Или Не ЗначениеЗаполнено(НомерГТД.ТипНомераГТД) Тогда
					ЭлементКоллекции.НомерГТДКод                  = НомерГТД.Код;
					ЭлементКоллекции.НомерГТДРегистрационныйНомер = "";
				Иначе
					ЭлементКоллекции.ТребуетсяГТД                 = Ложь;
					ЭлементКоллекции.НомерГТДКод                  = "";
					ЭлементКоллекции.НомерГТДРегистрационныйНомер = НомерГТД.РегистрационныйНомер;
				КонецЕсли;
				Если ИзменитьТребуется Тогда
					ЭлементКоллекции.ТребуетсяГТД  = ЗначениеЗаполнено(ЭлементКоллекции.НомерГТДКод);
					ЭлементКоллекции.ТребуетсяРНПТ = ЗначениеЗаполнено(ЭлементКоллекции.НомерГТДРегистрационныйНомер);
				КонецЕсли;
			КонецЕсли;
			
			Если ИзменитьТребуется Тогда
				ЭлементКоллекции.ТребуетсяМаркировка = ЗначениеЗаполнено(ЭлементКоллекции.КодМаркировки);
			КонецЕсли;
			
			Если ИзменитьТребуется Тогда
				ЭлементКоллекции.ТребуетсяУИН = ЗначениеЗаполнено(ЭлементКоллекции.УИН);
			КонецЕсли;
			
			ТребуетсяСтранаПроисхождения = ТребуетсяСтранаПроисхождения Или ЭлементКоллекции.ТребуетсяСтранаПроисхождения;
			ТребуетсяГТД                 = ТребуетсяГТД Или ЭлементКоллекции.ТребуетсяГТД;
			ТребуетсяРНПТ                = ТребуетсяРНПТ Или ЭлементКоллекции.ТребуетсяРНПТ;
			ТребуетсяМаркировка          = ТребуетсяМаркировка Или ЭлементКоллекции.ТребуетсяМаркировка;
			ТребуетсяУИН                 = ТребуетсяУИН Или ЭлементКоллекции.ТребуетсяУИН;
		КонецЦикла;
		
		Если ИзменитьТребуется Тогда
			СтрокаТаблицыЗначений.ТребуетсяСтранаПроисхождения = ТребуетсяСтранаПроисхождения;
			СтрокаТаблицыЗначений.ТребуетсяГТД                 = ТребуетсяГТД;
			СтрокаТаблицыЗначений.ТребуетсяРНПТ                = ТребуетсяРНПТ;
			СтрокаТаблицыЗначений.ТребуетсяМаркировка          = ТребуетсяМаркировка;
			СтрокаТаблицыЗначений.ТребуетсяУИН                 = ТребуетсяУИН;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу товаров из отправления значениями из сервиса.
//
// Параметры:
//   Товары           - См. НоваяТаблицаТоваровПоОтправлению.
//   ОтветСервиса     - Массив Из см. НовыйРезультатИзСервиса - информация о товарах по отправлению из сервиса Ozon.
//   ЭтоЗапросСтатуса - Булево - Истина, если обрабатывается таблица статусов добавления экземпляров товаров из отправления.
//
Процедура ДобавитьОтветСервисаВТаблицуТоваровПоОтправлению(Товары, ОтветСервиса, ЭтоЗапросСтатуса)
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	Если Товары.Колонки.Найти("Обработано") = Неопределено Тогда
		Товары.Колонки.Добавить("Обработано", ОписаниеТипаБулево);
	КонецЕсли;
	Товары.ЗаполнитьЗначения(Ложь, "Обработано");
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторТовара", ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]));
		Отбор.Вставить("Обработано",          Ложь);
		
		НайденныеСтроки = Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		Иначе
			НайденнаяСтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ЭтоЗапросСтатуса Тогда
			НайденнаяСтрокаТовары.ТребуетсяСтранаПроисхождения = Ложь;
			НайденнаяСтрокаТовары.ТребуетсяГТД                 = Ложь;
			НайденнаяСтрокаТовары.ТребуетсяРНПТ                = Ложь;
			НайденнаяСтрокаТовары.ТребуетсяМаркировка          = Ложь;
		Иначе
			НайденнаяСтрокаТовары.ТребуетсяСтранаПроисхождения = ЭлементОтветаСервиса["is_gtd_needed"] Или ЭлементОтветаСервиса["is_rnpt_needed"];
			НайденнаяСтрокаТовары.ТребуетсяГТД                 = ЭлементОтветаСервиса["is_gtd_needed"];
			НайденнаяСтрокаТовары.ТребуетсяРНПТ                = ЭлементОтветаСервиса["is_rnpt_needed"];
			НайденнаяСтрокаТовары.ТребуетсяМаркировка          = ЭлементОтветаСервиса["is_mandatory_mark_needed"];
		КонецЕсли;
		
		НайденнаяСтрокаТовары.ТребуетсяУИН     = Ложь;
		НайденнаяСтрокаТовары.ПроверкаПройдена = Истина;
		НайденнаяСтрокаТовары.Обработано       = Истина;
		
		Если НайденнаяСтрокаТовары.Экземпляры.Колонки.Найти("Обработано") = Неопределено Тогда
			НайденнаяСтрокаТовары.Экземпляры.Колонки.Добавить("Обработано", ОписаниеТипаБулево);
		КонецЕсли;
		НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения(Ложь, "Обработано");
		
		НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения(Истина, "ПроверкаПройдена");
		НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения("",     "КодОшибки");
		НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения("",     "ОписаниеОшибки");
		
		Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["exemplars"] Цикл
			Если ЭтоЗапросСтатуса Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторЭкземпляра", ЭлементКоллекции["exemplar_id"]);
				
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("НомерГТДКод",                  ЭлементКоллекции["gtd"]);
				Отбор.Вставить("НомерГТДРегистрационныйНомер", ЭлементКоллекции["rnpt"]);
				Отбор.Вставить("КодМаркировки",                ЭлементКоллекции["mandatory_mark"]);
				Отбор.Вставить("УИН",                          СвойствоСоответствия(ЭлементКоллекции, "jw_uin", ""));
				Отбор.Вставить("Обработано",                   Ложь);
			КонецЕсли;
			
			НайденныеСтроки = НайденнаяСтрокаТовары.Экземпляры.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаТаблицыЗначений = НайденныеСтроки[0];
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("Обработано", Ложь);
				
				НайденныеСтроки = НайденнаяСтрокаТовары.Экземпляры.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаТаблицыЗначений = НайденныеСтроки[0];
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыЗначений.ИдентификаторЭкземпляра      = ЭлементКоллекции["exemplar_id"];
			
			Если ЭтоЗапросСтатуса Тогда
				СтрокаТаблицыЗначений.НомерГТДКод                  = ЭлементКоллекции["gtd"];
				СтрокаТаблицыЗначений.НомерГТДРегистрационныйНомер = ЭлементКоллекции["rnpt"];
				СтрокаТаблицыЗначений.КодМаркировки                = ЭлементКоллекции["mandatory_mark"];
				СтрокаТаблицыЗначений.УИН                          = СвойствоСоответствия(ЭлементКоллекции, "jw_uin", "");
			КонецЕсли;
			
			Если ЭтоЗапросСтатуса Тогда
				КодыОшибок = Новый Массив;
				Если ВРег(ЭлементКоллекции["gtd_check_status"]) = ВРег("failed") Тогда
					КодыОшибок.Добавить(СтрСоединить(ЭлементКоллекции["gtd_error_codes"], "; "));
				КонецЕсли;
				Если ВРег(ЭлементКоллекции["rnpt_check_status"]) = ВРег("failed") Тогда
					КодыОшибок.Добавить(СтрСоединить(ЭлементКоллекции["rnpt_error_codes"], "; "));
				КонецЕсли;
				Если ВРег(ЭлементКоллекции["mandatory_mark_check_status"]) = ВРег("failed") Тогда
					КодыОшибок.Добавить(СтрСоединить(ЭлементКоллекции["mandatory_mark_error_codes"], "; "));
				КонецЕсли;
				Если ВРег(ЭлементКоллекции["jw_uin_check_status"]) = ВРег("failed") Тогда
					КодыОшибок.Добавить(СтрСоединить(ЭлементКоллекции["jw_uin_error_codes"], "; "));
				КонецЕсли;
				
				СтрокаТаблицыЗначений.ТребуетсяГТД     = СтрокаТаблицыЗначений.ТребуетсяГТД Или ВРег(ЭлементКоллекции["gtd_check_status"]) <> ВРег("passed");
				СтрокаТаблицыЗначений.ТребуетсяРНПТ    = СтрокаТаблицыЗначений.ТребуетсяРНПТ Или ВРег(ЭлементКоллекции["rnpt_check_status"]) <> ВРег("passed");
				СтрокаТаблицыЗначений.ПроверкаПройдена = (ВРег(ЭлементКоллекции["gtd_check_status"]) = ВРег("passed")
																И ВРег(ЭлементКоллекции["rnpt_check_status"]) = ВРег("passed")
																И ВРег(ЭлементКоллекции["mandatory_mark_check_status"]) = ВРег("passed")
																И ВРег(ЭлементКоллекции["jw_uin_check_status"]) = ВРег("passed"))
															Или СтрокаТаблицыЗначений.Отменено;
				СтрокаТаблицыЗначений.КодОшибки        = СтрСоединить(КодыОшибок, "; ");
				
			Иначе
				СтрокаТаблицыЗначений.ТребуетсяСтранаПроисхождения = ЭлементОтветаСервиса["is_gtd_needed"] Или ЭлементОтветаСервиса["is_rnpt_needed"];
				СтрокаТаблицыЗначений.ТребуетсяГТД                 = ЭлементОтветаСервиса["is_gtd_needed"];
				СтрокаТаблицыЗначений.ТребуетсяРНПТ                = ЭлементОтветаСервиса["is_rnpt_needed"];
				СтрокаТаблицыЗначений.ТребуетсяМаркировка          = ЭлементОтветаСервиса["is_mandatory_mark_needed"];
			КонецЕсли;
			
			СтрокаТаблицыЗначений.ТребуетсяСтранаПроисхождения = СтрокаТаблицыЗначений.ТребуетсяГТД
																	Или СтрокаТаблицыЗначений.ТребуетсяРНПТ;
			СтрокаТаблицыЗначений.ОписаниеОшибки               = ?(ЗначениеЗаполнено(СтрокаТаблицыЗначений.КодОшибки), НСтр("ru = 'Обнаружены ошибки заполнения'"), "");
			СтрокаТаблицыЗначений.Обработано                   = Истина;
			
			НайденнаяСтрокаТовары.ТребуетсяСтранаПроисхождения = НайденнаяСтрокаТовары.ТребуетсяСтранаПроисхождения Или СтрокаТаблицыЗначений.ТребуетсяСтранаПроисхождения;
			НайденнаяСтрокаТовары.ТребуетсяГТД                 = НайденнаяСтрокаТовары.ТребуетсяГТД Или СтрокаТаблицыЗначений.ТребуетсяГТД;
			НайденнаяСтрокаТовары.ТребуетсяРНПТ                = НайденнаяСтрокаТовары.ТребуетсяРНПТ Или СтрокаТаблицыЗначений.ТребуетсяРНПТ;
			НайденнаяСтрокаТовары.ТребуетсяМаркировка          = НайденнаяСтрокаТовары.ТребуетсяМаркировка Или СтрокаТаблицыЗначений.ТребуетсяМаркировка;
			НайденнаяСтрокаТовары.ТребуетсяУИН                 = НайденнаяСтрокаТовары.ТребуетсяУИН Или СтрокаТаблицыЗначений.ТребуетсяУИН;
			НайденнаяСтрокаТовары.ПроверкаПройдена             = НайденнаяСтрокаТовары.ПроверкаПройдена И СтрокаТаблицыЗначений.ПроверкаПройдена;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что коды маркировки соответствуют требованиям системы "Честный ЗНАК" по составу и количеству символов.
//
// Параметры:
//   УчетнаяЗапись    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления - Строка - номер отправления.
//   Товары           - См. НоваяТаблицаТоваровПоОтправлению.
//   ДополнитьТаблицы - Булево - признак необходимости заполнения вычисляемых полей таблица экземпляров товаров.
//   Отказ            - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   Булево - результат прохождения проверки. Истина, если коды всех экземпляров товаров соответствуют требованиям.
//
Функция ПроверитьКодыМаркировкиПоОтправлению(УчетнаяЗапись, НомерОтправления, Товары, ДополнитьТаблицы = Истина, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДополнитьТаблицы Тогда
		ДополнитьТаблицыЭкземпляровТоваровПоОтправлению(Товары, Ложь);
	КонецЕсли;
	
	Результат        = Истина;
	ПараметрыЗапроса = НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерОтправления, Товары);
	ОтветСервиса     = ПроверитьКодыМаркировкиПоОтправлениюВСервисе(УчетнаяЗапись, ПараметрыЗапроса);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		Возврат Ложь;
		
	Иначе
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		
		Если Товары.Колонки.Найти("Обработано") = Неопределено Тогда
			Товары.Колонки.Добавить("Обработано", ОписаниеТипаБулево);
		КонецЕсли;
		Товары.ЗаполнитьЗначения(Ложь, "Обработано");
		
		Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторТовара", ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]));
			Отбор.Вставить("Обработано",          Ложь);
			
			НайденныеСтроки = Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрокаТовары = НайденныеСтроки[0];
				НайденнаяСтрокаТовары.ПроверкаПройдена = Истина;
				НайденнаяСтрокаТовары.Обработано       = Истина;
				
				Если НайденнаяСтрокаТовары.Экземпляры.Колонки.Найти("Обработано") = Неопределено Тогда
					НайденнаяСтрокаТовары.Экземпляры.Колонки.Добавить("Обработано", ОписаниеТипаБулево);
				КонецЕсли;
				НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения(Ложь, "Обработано");
				
				НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения(Истина, "ПроверкаПройдена");
				НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения("",     "КодОшибки");
				НайденнаяСтрокаТовары.Экземпляры.ЗаполнитьЗначения("",     "ОписаниеОшибки");
				
				Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["exemplars"] Цикл
					Отбор = Новый Структура;
					Отбор.Вставить("НомерГТДКод",                  ЭлементКоллекции["gtd"]);
					Отбор.Вставить("НомерГТДРегистрационныйНомер", ЭлементКоллекции["rnpt"]);
					Отбор.Вставить("КодМаркировки",                ЭлементКоллекции["mandatory_mark"]);
					Отбор.Вставить("УИН",                          СвойствоСоответствия(ЭлементКоллекции, "jw_uin", ""));
					Отбор.Вставить("Обработано",                   Ложь);
					
					НайденныеСтроки = НайденнаяСтрокаТовары.Экземпляры.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ПроверкаПройдена = ЭлементКоллекции["valid"] Или НайденныеСтроки[0].Отменено;
						НайденныеСтроки[0].КодОшибки        = ЭлементОтветаСервиса["error"];
						НайденныеСтроки[0].ОписаниеОшибки   = СтрСоединить(ЭлементКоллекции["errors"], Символы.ПС);
						НайденныеСтроки[0].Обработано       = Истина;
						
						НайденнаяСтрокаТовары.ПроверкаПройдена = НайденнаяСтрокаТовары.ПроверкаПройдена И НайденныеСтроки[0].ПроверкаПройдена;
						Результат = Результат И НайденныеСтроки[0].ПроверкаПройдена;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает информацию по экземплярам товаров из отправления.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления  - Строка - номер отправления.
//   Товары            - См. НоваяТаблицаТоваровПоОтправлению.
//   Отказ             - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   Булево - результат прохождения проверки. Истина, если коды всех экземпляров товаров соответствуют требованиям.
//
Функция ПолучитьДанныеЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, НомерОтправления, Товары, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерОтправления);
	ОтветСервиса     = ПолучитьДанныеЭкземпляровТоваровПоОтправлениюИзСервиса(УчетнаяЗапись, ПараметрыЗапроса);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		
	Иначе
		ДобавитьОтветСервисаВТаблицуТоваровПоОтправлению(Товары, ОтветСервиса["products"], Ложь);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПроверкаПройдена", Ложь);
	
	Возврат Товары.НайтиСтроки(Отбор).Количество() = 0;
	
КонецФункции

// Проверяет и сохраняет данные экземпляров товаров по отправлению.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления  - Строка - номер отправления.
//   Товары            - См. НоваяТаблицаТоваровПоОтправлению.
//   ДополнитьТаблицы  - Булево - признак необходимости заполнения вычисляемых полей таблица экземпляров товаров.
//   Отказ             - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   - Булево - Истина, если запрос обработан успешно.
//
Функция ПроверитьИСохранитьЭкземплярыТоваровПоОтправлению(УчетнаяЗапись, НомерОтправления, Товары, ДополнитьТаблицы = Истина, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДополнитьТаблицы Тогда
		ДополнитьТаблицыЭкземпляровТоваровПоОтправлению(Товары, Ложь);
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерОтправления, Товары, 0);
	ОтветСервиса     = ПроверитьИСохранитьЭкземплярыТоваровПоОтправлениюВСервисе(УчетнаяЗапись, ПараметрыЗапроса);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОтветСервиса;
	
КонецФункции

// Получает статусы добавления экземпляров товаров из отправления.
//
// Параметры:
//   УчетнаяЗапись    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления - Строка - номер отправления.
//   Товары           - См. НоваяТаблицаТоваровПоОтправлению.
//   Отказ            - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   Строка - статус проверки всех экземпляров и доступности сборки:
//     "ship_available" - сборка доступна;
//     "ship_not_available" - сборка недоступна;
//     "validation_in_process" - экземпляры на проверке.
//
Функция ПолучитьСтатусыЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, НомерОтправления, Товары, Отказ = Ложь)
	
	Результат = "validation_in_process";
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Результат = "ship_not_available";
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерОтправления);
	ОтветСервиса     = ПолучитьСтатусыЭкземпляровТоваровПоОтправлениюИзСервиса(УчетнаяЗапись, ПараметрыЗапроса);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		
	Иначе
		Результат = ОтветСервиса["status"];
		ДобавитьОтветСервисаВТаблицуТоваровПоОтправлению(Товары, ОтветСервиса["products"], Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет данные регистра сведений для экземпляров товаров по отправлению.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Заказ             - ДокументСсылка.ЗаказКлиента - заказ.
//   НомерОтправления  - Строка - номер отправления.
//   Товары            - См. НоваяТаблицаТоваровПоОтправлению.
//   Отказ             - Булево - выходной параметр, определяет наличие ошибки при выполнении процедуры.
//
Процедура ОбновитьДанныеЭкземпляровТоваровПоОтправлению(УчетнаяЗапись, Заказ, НомерОтправления, Товары, Отказ = Ложь)
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", Заказ);
		ЭлементБлокировкиДанных.ИсточникДанных = Товары;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("ИдентификаторТовара", "ИдентификаторТовара");
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ);
		НаборЗаписей.Прочитать();
		
		Индекс = НаборЗаписей.Количество() - 1;
		Пока Индекс >= 0 Цикл
			Запись = НаборЗаписей[Индекс];
			Индекс = Индекс - 1;
			
			Если Запись.НомерОтправления = НомерОтправления
					Или СтрНайти(Запись.НомерОтправления, РегистрыСведений.ЗаказыТорговыхПлощадок.ПостфиксНовогоОтправления()) > 0
						И Запись.НомерРодительскогоОтправления = НомерОтправления Тогда
				НаборЗаписей.Удалить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицыЗначений Из Товары Цикл
			Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ЭлементКоллекции);
				
				Запись.Заказ               = Заказ;
				Запись.ИдентификаторТовара = СтрокаТаблицыЗначений.ИдентификаторТовара;
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи данных по отправлению %1 возникла ошибка: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			НомерОтправления,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Отменяет отправление.
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления  - Строка - номер отправления.
//   ПричинаОтмены     - Структура - причина отмены:
//     * Идентификатор   - Число - идентификатор причины отмены отправления;
//     * Наименование    - Строка - наименование причины отмены;
//     * Ссылка          - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//   Товары            - Неопределено - отмена отправления полностью;
//                     - См. НоваяТаблицаТоваровПоОтправлению - частичная отмена отправления.
//   Отказ             - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   - Булево - Истина, если запрос обработан успешно.
//
Функция ОтменитьОтправление(УчетнаяЗапись, НомерОтправления, ПричинаОтмены, Товары = Неопределено, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Товары <> Неопределено
			И Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаОтменыОтправления(НомерОтправления, ПричинаОтмены, Товары);
	ОтветСервиса     = ОтменитьОтправлениеВСервисе(УчетнаяЗапись, ПараметрыЗапроса);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОтветСервиса;
	
КонецФункции

// Собирает заказ.
//
// Параметры:
//   УчетнаяЗапись    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления - Строка - номер отправления.
//   Товары           - См. НоваяТаблицаТоваровПоОтправлению.
//   Отказ            - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   - Булево - Истина, если запрос обработан успешно.
//
Функция СобратьЗаказ(УчетнаяЗапись, НомерОтправления, Товары, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерОтправления, Товары);
	ОтветСервиса     = СобратьЗаказВСервисе(УчетнаяЗапись, ПараметрыЗапроса);
	
	Если ОтветСервиса.Результат = Неопределено Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОтветСервиса.Результат.Найти(НомерОтправления) <> Неопределено;
	
КонецФункции

// Разделяет первичное отправление на торговой площадке.
//
// Параметры:
//   УчетнаяЗапись                 - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомерОтправления              - Строка - номер нового отправления.
//   НомерРодительскогоОтправления - Строка - номер первичного отправления.
//   Товары                        - См. НоваяТаблицаТоваровПоОтправлению.
//   Отказ                         - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   - Строка - номера отправлений, сформированные после сборки.
//
Функция РазделитьОтправление(УчетнаяЗапись, Знач НомерОтправления, Знач НомерРодительскогоОтправления, Товары, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(НомерОтправления) Тогда
		Возврат "";
	КонецЕсли;
	Если Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса = НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерРодительскогоОтправления, Товары);
	ОтветСервиса     = РазделитьОтправлениеВСервисе(УчетнаяЗапись, ПараметрыЗапроса, Ложь);
	
	Если ОтветСервиса = Неопределено Тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;
		
	Возврат ОтветСервиса;
	
КонецФункции

#КонецОбласти

#Область ОтправленияSellerAPI

// Получает подробную информацию по всем начислениям из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/FinanceAPI_FinanceTransactionListV3 (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - см. НовыеПараметрыЗапросаПолученияСпискаТранзакций.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - список отправлений (financev3FinanceTransactionListV3ResponseResult):
//       * operations - Массив Из см. НовыйРезультатИзСервиса - информация об операциях (FinanceTransactionListV3ResponseOperation):
//         ** accruals_for_sale      - Число - стоимость товаров с учетом скидок продавца;
//         ** amount                 - Число - итоговая сумма операции;
//         ** delivery_charge        - Число - стоимость доставки для начислений по тарифам, которые действовали до 1 февраля 2021 года, а также начислений для крупногабаритных товаров;
//         ** items                  - Массив Из см. НовыйРезультатИзСервиса - информация о товаре (OperationItem):
//           *** name                  - Строка - название товара;
//           *** sku                   - Число - идентификатор товара в системе Ozon.
//         ** operation_date         - Дата - дата операции;
//         ** operation_id           - Число - идентификатор операции;
//         ** operation_type         - Строка - тип операции;
//         ** operation_type_name    - Строка - название типа операции;
//         ** posting                - Соответствие Из КлючИЗначение - информация об отправлении (OperationPosting):
//           *** delivery_schema       - Строка - схема доставки (FBO, FBS, RFBS, Crossborder);
//           *** order_date            - Дата - дата принятия отправления в обработку;
//           *** posting_number        - Строка - номер отправления;
//           *** warehouse_id          - Число - идентификатор склада.
//         ** return_delivery_charge - Число - плата за возвраты и отмены для начислений по тарифам, которые действовали до 1 февраля 2021 года, а также начислений для крупногабаритных товаров;
//         ** sale_commission        - Число - комиссия за продажу или возврат комиссии за продажу;
//         ** services               - Массив Из см. НовыйРезультатИзСервиса - дополнительные услуги (OperationService):
//           *** name                  - Строка - название услуги;
//           *** price                 - Число - цена.
//         ** type                   - Строка - тип начисления.
//       * page_count - Число - количество страниц;
//       * row_count  - Число - количество товаров.
//
Функция ПолучитьСписокТранзакцийИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/finance/transaction/list";

	Фильтр = Новый Структура;
	Фильтр.Вставить("date",             Новый Структура("from, to", 
											ДатаUTC(Параметры.Фильтр.НачалоПериода), 
											ДатаUTC(Параметры.Фильтр.ОкончаниеПериода, 999)));
	Фильтр.Вставить("operation_type",   Параметры.Фильтр.ТипОперации);
	Фильтр.Вставить("transaction_type", Параметры.Фильтр.ТипНачисления);
	
	Если ЗначениеЗаполнено(Параметры.Фильтр.НомерОтправления) Тогда
		Фильтр.Вставить("posting_number", Параметры.Фильтр.НомерОтправления);
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",    Фильтр);
	ПараметрыЗапроса.Вставить("page",      Параметры.НомерСтраницы);
	ПараметрыЗапроса.Вставить("page_size", Параметры.МаксимальноеКоличествоНаСтранице);
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("operation_date");
	МассивПолейТипаДата.Добавить("order_date");

	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("operations", Новый Массив);
	ПустойРезультат.Вставить("page_count", 0);
	ПустойРезультат.Вставить("row_count",  0);
	
	СлужебныеПараметры 				   = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата    = МассивПолейТипаДата;
	СлужебныеПараметры.ПустойРезультат = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает список отправлений за указанный период времени по схеме FBO из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetFboPostingList (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемеFBO.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - список отправлений (v2FboPosting):
//       * additional_data             - Массив Из см. НовыйРезультатИзСервиса - дополнительные сведения (v2AdditionalDataItem):
//         ** key                        - Строка - ключ;
//         ** value                      - Строка - значение;
//       * analytics_data              - Соответствие Из КлючИЗначение - данные аналитики (FboPostingFboPostingAnalyticsData):
//         ** city                       - Строка - город доставки;
//         ** region                     - Строка - регион доставки;
//         ** warehouse_id               - Число - идентификатор склада;
//         ** warehouse_name             - Строка - название склада отправки заказа;
//         ** delivery_type              - Строка - способ доставки;
//         ** payment_type_group_name    - Строка - способ оплаты;
//         ** is_legal                   - Булево - получатель юридическое лицо;
//         ** is_premium                 - Булево - наличие подписки Premium;
//       * cancel_reason_id            - Число - идентификатор причины отмены отправления;
//       * created_at                  - Дата - дата и время создания отправления;
//       * financial_data              - Соответствие Из КлючИЗначение - финансовые данные (v2PostingFinancialData):
//         ** posting_services           - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//         ** cluster_from               - Строка - код региона, откуда отправляется заказ;
//         ** cluster_to                 - Строка - код региона, куда доставляется заказ;
//         ** products                   - Массив Из см. НовыйРезультатИзСервиса - список товаров в заказе (PostingFinancialDataProduct):
//           *** actions                   - Массив Из Строка - действия;
//           *** currency_code             - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//           *** client_price              - Строка - цена для клиента;
//           *** commission_amount         - Число - размер комиссии за товар;
//           *** commission_percent        - Число - процент комиссии;
//           *** commissions_currency_code - Строка - код валюты, в которой рассчитывались комиссии;
//           *** item_services             - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//           *** old_price                 - Число - цена до учета скидок (на карточке товара отображается зачеркнутой);
//           *** payout                    - Число - выплата продавцу;
//           *** picking                   - Соответствие Из КлючИЗначение - информация о доставке (ProductPicking):
//             **** amount                   - Число - стоимость доставки;
//             **** moment                   - Дата - дата и время доставки;
//             **** tag                      - Строка - крупногабаритный товар или нет.
//           *** price                     - Число - цена товара с учетом скидок (это значение показывается на карточке товара);
//           *** product_id                - Число - идентификатор товара;
//           *** quantity                  - Число - количество товара в отправлении;
//           *** total_discount_percent    - Число - процент скидки;
//           *** total_discount_value      - Число - сумма скидки.
//       * in_process_at               - Дата - дата и время начала обработки отправления;
//       * order_id                    - Число - идентификатор заказа, к которому относится отправление;
//       * order_number                - Строка - номер заказа, к которому относится отправление;
//       * posting_number              - Строка - номер отправления;
//       * products                    - Массив Из см. НовыйРезультатИзСервиса - список товаров в отправлении (v2PostingProduct):
//         ** digital_codes              - Массив Из Строка - коды активации для услуг и цифровых товаров;
//         ** name                       - Строка - название товара;
//         ** offer_id                   - Строка - идентификатор товара в системе продавца (артикул);
//         ** currency_code              - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//         ** price                      - Строка - цена товара;
//         ** quantity                   - Число - количество товара в отправлении;
//         ** sku                        - Число - идентификатор товара в системе Ozon (SKU).
//       * status                      - Строка - статус отправления.
//
Функция ПолучитьСписокОтправленийЗаПериодПоСхемеFBOИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/posting/fbo/list";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("dir",      Параметры.НаправлениеСортировки);
	ПараметрыЗапроса.Вставить("filter",   Новый Структура("since, to, status", 
											ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.НачалоПериода),
											ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.ОкончаниеПериода, 999),
											Параметры.ФильтрДляПоискаОтправлений.СтатусОтправления));
	ПараметрыЗапроса.Вставить("limit",    Параметры.МаксимальноеКоличествоВОтвете);
	ПараметрыЗапроса.Вставить("offset",   Параметры.НачальноеСмещениеВОтвете);
	ПараметрыЗапроса.Вставить("translit", Параметры.Транслитерация);
	ПараметрыЗапроса.Вставить("with",     Новый Структура("analytics_data, financial_data", 
											Параметры.ДополнительныеПоля.ДанныеАналитики,
											Параметры.ДополнительныеПоля.ФинансовыеДанные));
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("moment");
	МассивПолейТипаДата.Добавить("in_process_at");

	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("result", Новый Массив);
	
	СлужебныеПараметры 				   = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата    = МассивПолейТипаДата;
	СлужебныеПараметры.ПустойРезультат = ПустойРезультат;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает информацию об отправлений по его номеру по схеме FBO из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetFboPosting (версия 2).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияИнформацииОбОтправленииПоНомеруПоСхемеFBO.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - информация об отправлении (v2FboPosting):
//       * additional_data             - Массив Из см. НовыйРезультатИзСервиса - дополнительные сведения (v2AdditionalDataItem):
//         ** key                        - Строка - ключ;
//         ** value                      - Строка - значение;
//       * analytics_data              - Соответствие Из КлючИЗначение - данные аналитики (FboPostingFboPostingAnalyticsData):
//         ** city                       - Строка - город доставки;
//         ** region                     - Строка - регион доставки;
//         ** warehouse_id               - Число - идентификатор склада;
//         ** warehouse_name             - Строка - название склада отправки заказа;
//         ** delivery_type              - Строка - способ доставки;
//         ** payment_type_group_name    - Строка - способ оплаты;
//         ** is_legal                   - Булево - получатель юридическое лицо;
//         ** is_premium                 - Булево - наличие подписки Premium;
//       * cancel_reason_id            - Число - идентификатор причины отмены отправления;
//       * created_at                  - Дата - дата и время создания отправления;
//       * financial_data              - Соответствие Из КлючИЗначение - финансовые данные (v2PostingFinancialData):
//         ** posting_services           - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//         ** cluster_from               - Строка - код региона, откуда отправляется заказ;
//         ** cluster_to                 - Строка - код региона, куда доставляется заказ;
//         ** products                   - Массив Из см. НовыйРезультатИзСервиса - список товаров в заказе (PostingFinancialDataProduct):
//           *** actions                   - Массив Из Строка - действия;
//           *** currency_code             - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//           *** client_price              - Строка - цена для клиента (устарел);
//           *** commission_amount         - Число - размер комиссии за товар;
//           *** commission_percent        - Число - процент комиссии;
//           *** commissions_currency_code - Строка - код валюты, в которой рассчитывались комиссии;
//           *** item_services             - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//           *** old_price                 - Число - цена до учета скидок (на карточке товара отображается зачеркнутой);
//           *** payout                    - Число - выплата продавцу;
//           *** picking                   - Соответствие Из КлючИЗначение - информация о доставке (ProductPicking):
//             **** amount                   - Число - стоимость доставки;
//             **** moment                   - Дата - дата и время доставки;
//             **** tag                      - Строка - крупногабаритный товар или нет.
//           *** price                     - Число - цена товара с учетом скидок (это значение показывается на карточке товара);
//           *** product_id                - Число - идентификатор товара;
//           *** quantity                  - Число - количество товара в отправлении;
//           *** total_discount_percent    - Число - процент скидки;
//           *** total_discount_value      - Число - сумма скидки.
//       * in_process_at               - Дата - дата и время начала обработки отправления;
//       * order_id                    - Число - идентификатор заказа, к которому относится отправление;
//       * order_number                - Строка - номер заказа, к которому относится отправление;
//       * posting_number              - Строка - номер отправления;
//       * products                    - Массив Из см. НовыйРезультатИзСервиса - список товаров в отправлении (v2PostingProduct):
//         ** digital_codes              - Массив Из Строка - коды активации для услуг и цифровых товаров;
//         ** name                       - Строка - название товара;
//         ** offer_id                   - Строка - идентификатор товара в системе продавца (артикул);
//         ** currency_code              - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//         ** price                      - Строка - цена товара;
//         ** quantity                   - Число - количество товара в отправлении;
//         ** sku                        - Число - идентификатор товара в системе Ozon (SKU).
//       * status                      - Строка - статус отправления.
//
Функция ПолучитьИнформациюОбОтправленииПоНомеруПоСхемеFBOИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/posting/fbo/get";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("translit",       Параметры.Транслитерация);
	ПараметрыЗапроса.Вставить("with",           Новый Структура("analytics_data, financial_data", 
													Параметры.ДополнительныеПоля.ДанныеАналитики,
													Параметры.ДополнительныеПоля.ФинансовыеДанные));
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("moment");
	МассивПолейТипаДата.Добавить("in_process_at");

	СлужебныеПараметры 				= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает информацию о возвратах товаров по номеру отправления по схеме FBO из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ReturnsAPI_GetReturnsCompanyFbo (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияИнформацииОВозвратахТоваровПоСхемеFBO.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - информация о возвратах FBO:
//       * last_id                        - Число - идентификатор последнего значения на странице;
//       * returns                        - Массив Из см. НовыйРезультатИзСервиса - информация о возвратах (commonReturnsCompanyItemFbo):
//         ** accepted_from_customer_moment - Дата - время приема возврата от покупателя;
//         ** company_id                    - Число - идентификатор продавца;
//         ** current_place_name            - Строка - текущее местонахождение возврата;
//         ** dst_place_name                - Строка - место назначения возврата;
//         ** id                            - Число - идентификатор возврата;
//         ** is_opened                     - Булево - признак вскрытия упаковки;
//         ** posting_number                - Строка - номер отправления;
//         ** return_reason_name            - Строка - причина возврата;
//         ** returned_to_ozon_moment       - Дата - время доставки возврата на склад Ozon;
//         ** sku                           - Число - идентификатор товара на Ozon;
//         ** status_name                   - Строка - статус возврата.
//
Функция ПолучитьИнформациюОВозвратахТоваровПоСхемеFBOИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/returns/company/fbo";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter", Новый Структура("posting_number, status", 
											Параметры.НомерОтправления,
											Параметры.СтатусВозврата));
	ПараметрыЗапроса.Вставить("limit",  Параметры.МаксимальноеКоличествоВОтвете);
											
	Если ЗначениеЗаполнено(Параметры.ИдентификаторПоследнегоЗначения) Тогда
		ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	КонецЕсли;
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("accepted_from_customer_moment");
	МассивПолейТипаДата.Добавить("returned_to_ozon_moment");

	СлужебныеПараметры 				= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "returns");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "last_id");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;
	
КонецФункции

// Получает список необработанных отправлений за указанный период времени по схемам FBS и rFBS из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetFbsPostingUnfulfilledList (версия 3).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура - список параметров запроса, см. НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура - результат выполнения запроса:
//       * Результат                            - Массив Из см. НовыйРезультатИзСервиса - информация об отправлениях (v3FbsPosting):
//         ** addressee                           - Соответствие Из КлючИЗначение - контактные данные получателя (v3AddresseeFbsLists):
//           *** name                               - Строка - имя покупателя;
//           *** phone                              - Строка - контактный телефон.
//         ** analytics_data                      - Соответствие Из КлючИЗначение - данные аналитики (v3FbsPostingAnalyticsData):
//           *** city                               - Строка - город доставки;
//           *** delivery_date_begin                - Дата - дата и время начала доставки;
//           *** delivery_date_end                  - Дата - дата и время конца доставки;
//           *** delivery_type                      - Строка - способ доставки;
//           *** is_legal                           - Булево - признак, что получатель юридическое лицо;
//           *** is_premium                         - Булево - наличие подписки Premium;
//           *** payment_type_group_name            - Строка - способ оплаты;
//           *** region                             - Строка - регион доставки;
//           *** tpl_provider                       - Строка - служба доставки;
//           *** tpl_provider_id                    - Число - идентификатор службы доставки;
//           *** warehouse                          - Строка - название склада отправки заказа;
//           *** warehouse_id                       - Число - идентификатор склада.
//         ** barcodes                            - Соответствие Из КлючИЗначение - штрихкоды отправления (v3Barcodes):
//           *** lower_barcode                      - Строка - нижний штрихкод на маркировке отправления;
//           *** upper_barcode                      - Строка - верхний штрихкод на маркировке отправления.
//         ** cancellation                        - Соответствие Из КлючИЗначение - информация об отмене (v3Cancellation):
//           *** affect_cancellation_rating         - Булево - влияет ли отмена на рейтинг продавца;
//           *** cancel_reason                      - Строка - причина отмены;
//           *** cancel_reason_id                   - Число - идентификатор причины отмены отправления;
//           *** cancellation_initiator             - Строка - инициатор отмены отправления;
//           *** cancellation_type                  - Строка - тип отмены отправления;
//           *** cancelled_after_ship               - Булево - произошла ли отмена после сборки отправления.
//         ** customer                           - Соответствие Из КлючИЗначение - данные о покупателе (v3CustomerFbsLists):
//           *** address                            - Соответствие Из КлючИЗначение - информация об адресе доставки (v3Address);
//           *** customer_id                        - Число - идентификатор покупателя;
//           *** name                               - Строка - имя покупателя;
//           *** phone                              - Строка - контактный телефон.
//         ** delivering_date                    - Дата - дата передачи отправления в доставку;
//         ** delivery_method                    - Соответствие Из КлючИЗначение - метод доставки (v3DeliveryMethod):
//           *** id                                - Число - идентификатор способа доставки;
//           *** name                              - Строка - название способа доставки;
//           *** tpl_provider_id                   - Число - идентификатор службы доставки;
//           *** tpl_provider                      - Строка - служба доставки;
//           *** warehouse_id                      - Число - идентификатор склада;
//           *** warehouse                         - Строка - название склада.
//         ** financial_data                     - Соответствие Из КлючИЗначение - данные о стоимости товара, размере скидки, выплате и комиссии (v3PostingFinancialData):
//           *** cluster_from                      - Строка - код региона, откуда отправляется заказ;
//           *** cluster_to                        - Строка - код региона, куда доставляется заказ;
//           *** posting_services                  - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices);
//           *** products                          - Массив Из см. НовыйРезультатИзСервиса - список товаров в заказе (PostingFinancialDataProduct):
//             **** actions                          - Массив Из Строка - действия;
//             **** currency_code                    - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//             **** client_price                     - Строка - цена для клиента (устарел);
//             **** commission_amount                - Число - размер комиссии за товар;
//             **** commission_percent               - Число - процент комиссии;
//             **** commissions_currency_code        - Строка - код валюты, в которой рассчитывались комиссии;
//             **** item_services                    - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices);
//             **** old_price                        - Число - цена до учета скидок (на карточке товара отображается зачеркнутой.
//             **** payout                           - Число - выплата продавцу;
//             **** picking                          - Соответствие Из КлючИЗначение - информация о доставке (ProductPicking);
//             **** price                            - Число - цена товара с учетом скидок (это значение показывается на карточке товара);
//             **** product_id                       - Число - идентификатор товара;
//             **** quantity                         - Число - количество товара в отправлении;
//             **** total_discount_percent           - Число - процент скидки;
//             **** total_discount_value             - Число - сумма скидки.
//         ** in_process_at                      - Дата - дата и время начала обработки отправления;
//         ** is_express                         - Булево - использовалась ли быстрая доставка Ozon Express;
//         ** is_multibox                        - Булево - признак, что в отправлении есть многокоробочный товар и нужно передать количество коробок для него;
//         ** multi_box_qty                      - Число - количество коробок, в которые упакован товар;
//         ** order_id                           - Число - идентификатор заказа, к которому относится отправление;
//         ** order_number                       - Строка - номер заказа, к которому относится отправление;
//         ** parent_posting_number              - Строка - номер родительского отправления, в результате разделения которого появилось текущее;
//         ** posting_number                     - Строка - номер отправления;
//         ** products                           - Массив Из см. НовыйРезультатИзСервиса - список товаров в отправлении (v3FbsPostingProduct):
//           *** mandatory_mark                    - Массив Из Строка - обязательная маркировка товара;
//           *** name                              - Строка - название товара;
//           *** offer_id                          - Строка - идентификатор товара в системе продавца (артикул);
//           *** price                             - Строка - цена товара;
//           *** quantity                          - Число - количество товара в отправлении;
//           *** sku                               - Число - идентификатор товара в системе Ozon (SKU);
//           *** currency_code                     - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета).
//         ** prr_option                         - Строка - код услуги погрузочно-разгрузочных работ;
//         ** requirements                       - Соответствие Из КлючИЗначение - список продуктов, для которых нужно 
//                                                   передать страну-изготовителя, номер грузовой таможенной декларации (ГТД), 
//                                                   регистрационный номер партии товара (РНПТ) или маркировку "Честный ЗНАК" (v3FbsPostingRequirementsV3):
//           *** products_requiring_gtd            - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать номера таможенной декларации (ГТД);
//           *** products_requiring_country        - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать информацию о стране-изготовителе;
//           *** products_requiring_mandatory_mark - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать маркировку "Честный ЗНАК";
//           *** products_requiring_jw_uin         - Массив Из Строка - список товаров, для которых нужно передать уникальный идентификационный номер (УИН) ювелирного изделия;
//           *** products_requiring_rnpt           - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать регистрационный номер партии товара (РНПТ).
//         ** shipment_date                      - Дата - дата и время, до которой необходимо собрать отправление (если отправление не собрать к этой дате - оно автоматически отменится);
//         ** status                             - Строка - статус отправления;
//         ** substatus                          - Строка - подстатус отправления;
//         ** tpl_integration_type               - Строка - тип интеграции со службой доставки;
//         ** tracking_number                    - Строка - трек-номер отправления.
//       * Продолжить                          - Булево - признак необходимости получения следующей порции данных (has_next).
//
Функция ПолучитьНеобработанныеОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v3/posting/fbs/unfulfilled/list";
	
	ФильтрДляПоискаОтправлений = Новый Структура;
	ФильтрДляПоискаОтправлений.Вставить("status", Параметры.ФильтрДляПоискаОтправлений.СтатусОтправления);
	Если Параметры.ФильтрДляПоискаОтправлений.ВидФильтраПоПериоду = "ДатаСборки" Тогда
		ФильтрДляПоискаОтправлений.Вставить("cutoff_from", ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.НачалоПериода));
		ФильтрДляПоискаОтправлений.Вставить("cutoff_to",   ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.ОкончаниеПериода, 999));
	ИначеЕсли Параметры.ФильтрДляПоискаОтправлений.ВидФильтраПоПериоду = "ДатаПередачиВДоставку" Тогда
		ФильтрДляПоискаОтправлений.Вставить("delivering_date_from", ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.НачалоПериода));
		ФильтрДляПоискаОтправлений.Вставить("delivering_date_to",   ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.ОкончаниеПериода, 999));
	Иначе
		Возврат ПолучитьОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗапись, Параметры);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.СпособыДоставки) Тогда
		ФильтрДляПоискаОтправлений.Вставить("delivery_method_id", Параметры.ФильтрДляПоискаОтправлений.СпособыДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.СлужбыДоставки) Тогда
		ФильтрДляПоискаОтправлений.Вставить("provider_id", Параметры.ФильтрДляПоискаОтправлений.СлужбыДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.Склады) Тогда
		ФильтрДляПоискаОтправлений.Вставить("warehouse_id", Параметры.ФильтрДляПоискаОтправлений.Склады);
	КонецЕсли;
	
	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("analytics_data", Параметры.ДополнительныеПоля.ДанныеАналитики); 
	ДополнительныеПоля.Вставить("financial_data", Параметры.ДополнительныеПоля.ФинансовыеДанные); 
	ДополнительныеПоля.Вставить("barcodes",       Параметры.ДополнительныеПоля.Штрихкоды);
	ДополнительныеПоля.Вставить("translit",       Параметры.ДополнительныеПоля.Транслитерация);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("dir",    Параметры.НаправлениеСортировки);
	ПараметрыЗапроса.Вставить("limit",  Параметры.МаксимальноеКоличествоВОтвете);
	ПараметрыЗапроса.Вставить("offset", Параметры.НачальноеСмещениеВОтвете);
	ПараметрыЗапроса.Вставить("filter", ФильтрДляПоискаОтправлений);
	ПараметрыЗапроса.Вставить("with",   ДополнительныеПоля);
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("delivery_date_begin");
	МассивПолейТипаДата.Добавить("delivery_date_end");
	МассивПолейТипаДата.Добавить("delivering_date");
	МассивПолейТипаДата.Добавить("in_process_at");
	МассивПолейТипаДата.Добавить("shipment_date");
	
	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("postings", Новый Массив);
	ПустойРезультат.Вставить("has_next", Ложь);
	
	СлужебныеПараметры                 = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата    = МассивПолейТипаДата;
	СлужебныеПараметры.ПустойРезультат = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",  "result.postings");
	АтрибутыОтвета.Вставить("Продолжить", "result.has_next");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Получает список отправлений за указанный период времени по схемам FBS и rFBS из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetFbsPostingListV3 (версия 3).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура - список параметров запроса, см. НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Структура - результат выполнения запроса:
//       * Результат                            - Массив Из см. НовыйРезультатИзСервиса - информация об отправлениях (v3FbsPosting):
//         ** addressee                           - Соответствие Из КлючИЗначение - контактные данные получателя (v3AddresseeFbsLists):
//           *** name                               - Строка - имя покупателя;
//           *** phone                              - Строка - контактный телефон.
//         ** analytics_data                      - Соответствие Из КлючИЗначение - данные аналитики (v3FbsPostingAnalyticsData):
//           *** city                               - Строка - город доставки;
//           *** delivery_date_begin                - Дата - дата и время начала доставки;
//           *** delivery_date_end                  - Дата - дата и время конца доставки;
//           *** delivery_type                      - Строка - способ доставки;
//           *** is_legal                           - Булево - признак, что получатель юридическое лицо;
//           *** is_premium                         - Булево - наличие подписки Premium;
//           *** payment_type_group_name            - Строка - способ оплаты;
//           *** region                             - Строка - регион доставки;
//           *** tpl_provider                       - Строка - служба доставки;
//           *** tpl_provider_id                    - Число - идентификатор службы доставки;
//           *** warehouse                          - Строка - название склада отправки заказа;
//           *** warehouse_id                       - Число - идентификатор склада.
//         ** barcodes                            - Соответствие Из КлючИЗначение - штрихкоды отправления (v3Barcodes):
//           *** lower_barcode                      - Строка - нижний штрихкод на маркировке отправления;
//           *** upper_barcode                      - Строка - верхний штрихкод на маркировке отправления.
//         ** cancellation                        - Соответствие Из КлючИЗначение - информация об отмене (v3Cancellation):
//           *** affect_cancellation_rating         - Булево - влияет ли отмена на рейтинг продавца;
//           *** cancel_reason                      - Строка - причина отмены;
//           *** cancel_reason_id                   - Число - идентификатор причины отмены отправления;
//           *** cancellation_initiator             - Строка - инициатор отмены отправления;
//           *** cancellation_type                  - Строка - тип отмены отправления;
//           *** cancelled_after_ship               - Булево - произошла ли отмена после сборки отправления.
//         ** customer                           - Соответствие Из КлючИЗначение - данные о покупателе (v3CustomerFbsLists):
//           *** address                            - Соответствие Из КлючИЗначение - информация об адресе доставки (v3Address);
//           *** customer_id                        - Число - идентификатор покупателя;
//           *** name                               - Строка - имя покупателя;
//           *** phone                              - Строка - контактный телефон.
//         ** delivering_date                    - Дата - дата передачи отправления в доставку;
//         ** delivery_method                    - Соответствие Из КлючИЗначение - метод доставки (v3DeliveryMethod):
//           *** id                                - Число - идентификатор способа доставки;
//           *** name                              - Строка - название способа доставки;
//           *** tpl_provider_id                   - Число - идентификатор службы доставки;
//           *** tpl_provider                      - Строка - служба доставки;
//           *** warehouse_id                      - Число - идентификатор склада;
//           *** warehouse                         - Строка - название склада.
//         ** financial_data                     - Соответствие Из КлючИЗначение - данные о стоимости товара, размере скидки, выплате и комиссии (v3PostingFinancialData):
//           *** cluster_from                      - Строка - код региона, откуда отправляется заказ;
//           *** cluster_to                        - Строка - код региона, куда доставляется заказ;
//           *** posting_services                  - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//           *** products                          - Массив Из см. НовыйРезультатИзСервиса - список товаров в заказе (PostingFinancialDataProduct):
//             **** actions                          - Массив Из Строка - действия;
//             **** currency_code                    - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//             **** client_price                     - Строка - цена для клиента (устарел);
//             **** commission_amount                - Число - размер комиссии за товар;
//             **** commission_percent               - Число - процент комиссии;
//             **** commissions_currency_code        - Строка - код валюты, в которой рассчитывались комиссии;
//             **** item_services                    - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//             **** old_price                        - Число - цена до учета скидок (на карточке товара отображается зачеркнутой.
//             **** payout                           - Число - выплата продавцу;
//             **** picking                          - Соответствие Из КлючИЗначение - информация о доставке (ProductPicking);
//             **** price                            - Число - цена товара с учетом скидок (это значение показывается на карточке товара);
//             **** product_id                       - Число - идентификатор товара;
//             **** quantity                         - Число - количество товара в отправлении;
//             **** total_discount_percent           - Число - процент скидки;
//             **** total_discount_value             - Число - сумма скидки.
//         ** in_process_at                      - Дата - дата и время начала обработки отправления;
//         ** is_express                         - Булево - использовалась ли быстрая доставка Ozon Express;
//         ** is_multibox                        - Булево - признак, что в отправлении есть многокоробочный товар и нужно передать количество коробок для него;
//         ** multi_box_qty                      - Число - количество коробок, в которые упакован товар;
//         ** order_id                           - Число - идентификатор заказа, к которому относится отправление;
//         ** order_number                       - Строка - номер заказа, к которому относится отправление;
//         ** parent_posting_number              - Строка - номер родительского отправления, в результате разделения которого появилось текущее;
//         ** posting_number                     - Строка - номер отправления;
//         ** products                           - Массив Из см. НовыйРезультатИзСервиса - список товаров в отправлении (v3FbsPostingProduct):
//           *** mandatory_mark                    - Массив Из Строка - обязательная маркировка товара;
//           *** name                              - Строка - название товара;
//           *** offer_id                          - Строка - идентификатор товара в системе продавца (артикул);
//           *** price                             - Строка - цена товара;
//           *** quantity                          - Число - количество товара в отправлении;
//           *** sku                               - Число - идентификатор товара в системе Ozon (SKU);
//           *** currency_code                     - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета).
//         ** prr_option                         - Строка - код услуги погрузочно-разгрузочных работ;
//         ** requirements                       - Соответствие Из КлючИЗначение - список продуктов, для которых нужно 
//                                                   передать страну-изготовителя, номер грузовой таможенной декларации (ГТД), 
//                                                   регистрационный номер партии товара (РНПТ) или маркировку "Честный ЗНАК" (v3FbsPostingRequirementsV3):
//           *** products_requiring_gtd            - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать номера таможенной декларации (ГТД);
//           *** products_requiring_country        - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать информацию о стране-изготовителе;
//           *** products_requiring_mandatory_mark - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать маркировку "Честный ЗНАК";
//           *** products_requiring_jw_uin         - Массив Из Строка - список товаров, для которых нужно передать уникальный идентификационный номер (УИН) ювелирного изделия;
//           *** products_requiring_rnpt           - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать регистрационный номер партии товара (РНПТ).
//         ** shipment_date                      - Дата - дата и время, до которой необходимо собрать отправление (если отправление не собрать к этой дате - оно автоматически отменится);
//         ** status                             - Строка - статус отправления;
//         ** substatus                          - Строка - подстатус отправления;
//         ** tpl_integration_type               - Строка - тип интеграции со службой доставки;
//         ** tracking_number                    - Строка - трек-номер отправления.
//       * Продолжить                          - Булево - признак необходимости получения следующей порции данных (has_next).
//
Функция ПолучитьОтправленияЗаПериодПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗапись, Параметры)

	ТекстЗапроса = "/v3/posting/fbs/list";

	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("analytics_data", Параметры.ДополнительныеПоля.ДанныеАналитики); 
	ДополнительныеПоля.Вставить("financial_data", Параметры.ДополнительныеПоля.ФинансовыеДанные); 
	ДополнительныеПоля.Вставить("barcodes",       Параметры.ДополнительныеПоля.Штрихкоды);
	ДополнительныеПоля.Вставить("translit",       Параметры.ДополнительныеПоля.Транслитерация);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("dir",    Параметры.НаправлениеСортировки);
	ПараметрыЗапроса.Вставить("limit",  Параметры.МаксимальноеКоличествоВОтвете);
	ПараметрыЗапроса.Вставить("offset", Параметры.НачальноеСмещениеВОтвете);
	ПараметрыЗапроса.Вставить("with",   ДополнительныеПоля);
	ПараметрыЗапроса.Вставить("filter", Новый Структура("since, to, status", 
											ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.НачалоПериода),
											ДатаUTC(Параметры.ФильтрДляПоискаОтправлений.ОкончаниеПериода, 999),
											Параметры.ФильтрДляПоискаОтправлений.СтатусОтправления));
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.СпособыДоставки) Тогда
		ПараметрыЗапроса.filter.Вставить("delivery_method_id", Параметры.ФильтрДляПоискаОтправлений.СпособыДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.ИдентификаторЗаказа) Тогда
		ПараметрыЗапроса.filter.Вставить("order_id", СтрокаВЧисло(Параметры.ФильтрДляПоискаОтправлений.ИдентификаторЗаказа));
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.СлужбыДоставки) Тогда
		ПараметрыЗапроса.filter.Вставить("provider_id", Параметры.ФильтрДляПоискаОтправлений.СлужбыДоставки);
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ФильтрДляПоискаОтправлений.Склады) Тогда
		ПараметрыЗапроса.filter.Вставить("warehouse_id", Параметры.ФильтрДляПоискаОтправлений.Склады);
	КонецЕсли;
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("delivery_date_begin");
	МассивПолейТипаДата.Добавить("delivery_date_end");
	МассивПолейТипаДата.Добавить("delivering_date");
	МассивПолейТипаДата.Добавить("in_process_at");
	МассивПолейТипаДата.Добавить("shipment_date");

	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("postings", Новый Массив);
	ПустойРезультат.Вставить("has_next", Ложь);
	
	СлужебныеПараметры                 = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата    = МассивПолейТипаДата;
	СлужебныеПараметры.ПустойРезультат = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",  "result.postings");
	АтрибутыОтвета.Вставить("Продолжить", "result.has_next");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

// Получает информацию об отправлении по его номеру по схемам FBS и rFBS из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetFbsPostingV3 (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияИнформацииОбОтправленииПоНомеруПоСхемамFBSИRealFBS.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - информация об отправлении (v3FbsPostingDetail):
//     * additional_data               - Массив Из см. НовыйРезультатИзСервиса - дополнительные сведения (v2AdditionalDataItem):
//       ** key                          - Строка - ключ;
//       ** value                        - Строка - значение;
//     * addressee                     - Соответствие Из КлючИЗначение - контактные данные получателя (v3AddresseeFbsLists):
//       ** name                         - Строка - имя покупателя;
//       ** phone                        - Строка - контактный телефон.
//     * analytics_data                - Соответствие Из КлючИЗначение - данные аналитики (v3FbsPostingAnalyticsData):
//       ** city                         - Строка - город доставки;
//       ** delivery_date_begin          - Дата - дата и время начала доставки;
//       ** delivery_date_end            - Дата - дата и время конца доставки;
//       ** delivery_type                - Строка - способ доставки;
//       ** is_legal                     - Булево - признак, что получатель юридическое лицо;
//       ** is_premium                   - Булево - наличие подписки Premium;
//       ** payment_type_group_name      - Строка - способ оплаты;
//       ** region                       - Строка - регион доставки;
//       ** tpl_provider                 - Строка - служба доставки;
//       ** tpl_provider_id              - Число - идентификатор службы доставки;
//       ** warehouse                    - Строка - название склада отправки заказа;
//       ** warehouse_id                 - Число - идентификатор склада.
//     * barcodes                      - Соответствие Из КлючИЗначение - штрихкоды отправления (v3Barcodes):
//       ** lower_barcode                - Строка - нижний штрихкод на маркировке отправления;
//       ** upper_barcode                - Строка - верхний штрихкод на маркировке отправления.
//     * cancellation                  - Соответствие Из КлючИЗначение - информация об отмене (v3Cancellation):
//       ** affect_cancellation_rating   - Булево - влияет ли отмена на рейтинг продавца;
//       ** cancel_reason                - Строка - причина отмены;
//       ** cancel_reason_id             - Число - идентификатор причины отмены отправления;
//       ** cancellation_initiator       - Строка - инициатор отмены отправления;
//       ** cancellation_type            - Строка - тип отмены отправления;
//       ** cancelled_after_ship         - Булево - произошла ли отмена после сборки отправления.
//     * courier	                   - Соответствие Из КлючИЗначение - данные о курьере (FbsPostingDetailCourier):
//       ** car_model	                 - Строка - модель автомобиля;
//       ** car_number	                 - Строка - номер автомобиля;
//       ** name	                     - Строка - полное имя курьера;
//       ** phone	                     - Строка - телефон курьера.
//     * customer                      - Соответствие Из КлючИЗначение - данные о покупателе (v3CustomerFbsLists):
//       ** address                      - Соответствие Из КлючИЗначение - информация об адресе доставки (v3Address);
//       ** customer_id                  - Число - идентификатор покупателя;
//       ** name                         - Строка - имя покупателя;
//       ** phone                        - Строка - контактный телефон.
//     * delivering_date               - Дата - дата передачи отправления в доставку;
//     * delivery_method               - Соответствие Из КлючИЗначение - метод доставки (v3DeliveryMethod):
//       ** id                           - Число - идентификатор способа доставки;
//       ** name                         - Строка - название способа доставки;
//       ** tpl_provider_id              - Число - идентификатор службы доставки;
//       ** tpl_provider                 - Строка - служба доставки;
//       ** warehouse_id                 - Число - идентификатор склада;
//       ** warehouse                    - Строка - название склада.
//     * delivery_price	               - Строка - стоимость доставки;
//     * financial_data                - Соответствие Из КлючИЗначение - данные о стоимости товара, размере скидки, выплате и комиссии (v3PostingFinancialData):
//       ** cluster_from                 - Строка - код региона, откуда отправляется заказ;
//       ** cluster_to                   - Строка - код региона, куда доставляется заказ;
//       ** posting_services             - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//       ** products                     - Массив Из см. НовыйРезультатИзСервиса - список товаров в заказе (PostingFinancialDataProduct):
//         *** actions                     - Массив Из Строка - действия;
//         *** currency_code              - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета);
//         *** client_price               - Строка - цена для клиента (устарел);
//         *** commission_amount          - Число - размер комиссии за товар;
//         *** commission_percent         - Число - процент комиссии;
//         *** commissions_currency_code  - Строка - код валюты, в которой рассчитывались комиссии;
//         *** item_services              - Соответствие Из КлючИЗначение - услуги (PostingFinancialDataServices) (устарел);
//         *** old_price                  - Число - цена до учета скидок (на карточке товара отображается зачеркнутой.
//         *** payout                     - Число - выплата продавцу;
//         *** picking                    - Соответствие Из КлючИЗначение - информация о доставке (ProductPicking);
//         *** price                      - Число - цена товара с учетом скидок (это значение показывается на карточке товара);
//         *** product_id                 - Число - идентификатор товара;
//         *** quantity                   - Число - количество товара в отправлении;
//         *** total_discount_percent     - Число - процент скидки;
//         *** total_discount_value       - Число - сумма скидки.
//     * in_process_at                - Дата - дата и время начала обработки отправления;
//     * is_express                   - Булево - использовалась ли быстрая доставка Ozon Express;
//     * is_multibox                  - Булево - признак, что в отправлении есть многокоробочный товар и нужно передать количество коробок для него;
//     * multi_box_qty                - Число - количество коробок, в которые упакован товар;
//     * order_id                     - Число - идентификатор заказа, к которому относится отправление;
//     * order_number                 - Строка - номер заказа, к которому относится отправление;
//     * parent_posting_number        - Строка - номер родительского отправления, в результате разделения которого появилось текущее;
//     * posting_number               - Строка - номер отправления;
//     * product_exemplars            - Соответствие Из КлючИЗначение - информация по продуктам и их экземплярам (v3FbsPostingProductExemplarsV3):
//       ** products	                - Массив Из см. НовыйРезультатИзСервиса - информация об экземплярах (v3FbsPostingExemplarProductV3):
//         *** exemplars	              - Массив Из см. НовыйРезультатИзСервиса - информация по экземплярам (v3FbsPostingProductExemplarInfoV3):
//           **** mandatory_mark	        - Строка - обязательная маркировка "Честный ЗНАК";
//           **** gtd	                    - Строка - номер грузовой таможенной декларации (ГТД);
//           **** is_gtd_absent	            - Булево - признак того, что не указан номер таможенной декларации;
//           **** rnpt                      - Строка - регистрационный номер партии товара (РНПТ);
//           **** is_rnpt_absent            - Булево - признак того, что не указан регистрационный номер партии товара (РНПТ).
//         *** sku                        - Число - идентификатор продукта в системе Ozon (SKU).
//     * products                     - Массив Из см. НовыйРезультатИзСервиса - список товаров в отправлении (v3FbsPostingProduct):
//       ** mandatory_mark              - Массив Из Строка - обязательная маркировка товара;
//       ** name                        - Строка - название товара;
//       ** offer_id                    - Строка - идентификатор товара в системе продавца (артикул);
//       ** price                       - Строка - цена товара;
//       ** quantity                    - Число - количество товара в отправлении;
//       ** sku                         - Число - идентификатор товара в системе Ozon (SKU);
//       ** currency_code               - Строка - валюта ваших цен (совпадает с валютой, которая установлена в настройках личного кабинета).
//     * provider_status              - Строка - статус службы доставки;
//     * prr_option                   - Строка - код услуги погрузочно-разгрузочных работ;
//     * related_postings	          - Соответствие Из КлючИЗначение - связанные отправления (v3FbsPostingDetailRelatedPostings):
//       ** related_posting_numbers	    - Массив Из Строка - список номеров связанных отправлений.
//     * requirements                 - Соответствие Из КлючИЗначение - список продуктов, для которых нужно передать дополнительные данные (v3FbsPostingRequirementsV3):
//       ** products_requiring_gtd            - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать номера таможенной декларации (ГТД);
//       ** products_requiring_country        - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать информацию о стране-изготовителе;
//       ** products_requiring_mandatory_mark - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать маркировку "Честный ЗНАК";
//       ** products_requiring_jw_uin         - Массив Из Строка - список товаров, для которых нужно передать уникальный идентификационный номер (УИН) ювелирного изделия;
//       ** products_requiring_rnpt           - Массив Из Строка - список идентификаторов товаров (SKU), для которых нужно передать регистрационный номер партии товара (РНПТ).
//     * shipment_date                - Дата - дата и время, до которой необходимо собрать отправление (если отправление не собрать к этой дате - оно автоматически отменится);
//     * status                       - Строка - статус отправления;
//     * substatus                    - Строка - подстатус отправления;
//     * tpl_integration_type         - Строка - тип интеграции со службой доставки;
//     * tracking_number              - Строка - трек-номер отправления.
//
Функция ПолучитьИнформациюОбОтправленииПоНомеруПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/posting/fbs/get";

	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("analytics_data",    Параметры.ДополнительныеПоля.ДанныеАналитики); 
	ДополнительныеПоля.Вставить("financial_data",    Параметры.ДополнительныеПоля.ФинансовыеДанные); 
	ДополнительныеПоля.Вставить("barcodes",          Параметры.ДополнительныеПоля.Штрихкоды);
	ДополнительныеПоля.Вставить("product_exemplars", Параметры.ДополнительныеПоля.ДанныеОПродуктах); 
	ДополнительныеПоля.Вставить("related_postings",  Параметры.ДополнительныеПоля.СвязанныеОтправления);
	ДополнительныеПоля.Вставить("translit",          Параметры.ДополнительныеПоля.Транслитерация);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("with",           ДополнительныеПоля);
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("delivery_date_begin");
	МассивПолейТипаДата.Добавить("delivery_date_end");
	МассивПолейТипаДата.Добавить("delivering_date");
	МассивПолейТипаДата.Добавить("in_process_at");
	МассивПолейТипаДата.Добавить("shipment_date");

	СлужебныеПараметры 				= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает информацию о возвратах товаров по номеру отправления по схемам FBS и rFBS из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ReturnsAPI_GetReturnsCompanyFBSv3 (версия 3).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияИнформацииОВозвратахТоваровПоСхемамFBSИRealFBS.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - информация о возвратах FBS:
//       * last_id                        - Число - идентификатор последнего значения на странице;
//       * returns                        - Массив Из см. НовыйРезультатИзСервиса - информация о возвратах (commonReturnsCompanyItemFbo):
//         ** accepted_from_customer_moment - Дата - время приема возврата от покупателя;
//         ** clearing_id                   - Число - штрихкод изначального отправления;
//         ** commission                    - Число - комиссия;
//         ** commission_percent            - Число - процент комиссии;
//         ** exemplar_id                   - Число - идентификатор экземпляра в логистической системе Ozon;
//         ** id                            - Число - идентификатор возврата в учетной системе Ozon;
//         ** is_moving                     - Булево - признак товара в пути;
//         ** is_opened                     - Булево - признак вскрытия упаковки;
//         ** last_free_waiting_day         - Дата - последний день бесплатного хранения;
//         ** place_id                      - Число - идентификатор склада, в который везут товар;
//         ** moving_to_place_name          - Строка - промежуточная точка возврата;
//         ** picking_amount                - Число - стоимость доставки;
//         ** posting_number                - Строка - номер отправления;
//         ** picking_tag                   - Строка;
//         ** price                         - Число - текущая цена товара без скидки;
//         ** price_without_commission      - Число - стоимость товара без учета комиссии;
//         ** product_id                    - Число - идентификатор товара (sku);
//         ** product_name                  - Строка - наименование товара.
//         ** quantity                      - Число - количество товара;
//         ** return_barcode                - Строка - штрихкод на этикетке возвратного отправления;
//         ** return_clearing_id            - Число - идентификатор грузоместа в логистической системе Ozon;
//         ** return_date                   - Дата - дата возврата товара;
//         ** return_reason_name            - Строка - причина возврата;
//         ** waiting_for_seller_date_time  - Дата - дата готовности выдачи товара продавцу;
//         ** returned_to_seller_date_time  - Дата - дата выдачи товара продавцу;
//         ** waiting_for_seller_days       - Число - срок хранения возврата в днях;
//         ** returns_keeping_cost          - Число - стоимость хранения возврата;
//         ** sku                           - Число - идентификатор товара на Ozon;
//         ** status                        - Строка - статус возврата.
//
Функция ПолучитьИнформациюОВозвратахТоваровПоСхемамFBSиRealFBSИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/returns/company/fbs";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  Новый Структура("posting_number, status", 
											Параметры.НомерОтправления,
											Параметры.СтатусВозврата));
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);
	
	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("accepted_from_customer_moment");
	МассивПолейТипаДата.Добавить("last_free_waiting_day");
	МассивПолейТипаДата.Добавить("return_date");
	МассивПолейТипаДата.Добавить("waiting_for_seller_date_time");
	МассивПолейТипаДата.Добавить("returned_to_seller_date_time");

	СлужебныеПараметры 				= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "returns");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "last_id");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;
	
КонецФункции

// Создает задания на асинхронное формирование этикеток в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_CreateLabelBatchV2 (версия 2).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура - список параметров запроса, см. НовыеПараметрыЗапросаСозданияЗаданияНаАсинхронноеФормированиеЭтикеток.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из см. НовыйРезультатИзСервиса - список заданий:
//       * task_id   - Число - идентификатор задания на формирование этикеток.
//       * task_type - Строка - тип задания на формирование этикеток.
//
Функция СоздатьЗаданияНаАсинхронноеФормированиеЭтикетокВСервисе(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v2/posting/fbs/package-label/create";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомераОтправлений);
	
	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("tasks", Новый Массив);
	
	СлужебныеПараметры                 = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПустойРезультат = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.tasks");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Получает этикетки отправлений по ранее сформированным заданиям из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetLabelBatch (версия 1).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура - список параметров запроса, см. НовыеПараметрыЗапросаПолученияЭтикетокОтправлений.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - результат выполнения метода:
//       * error    - Строка - код ошибки;
//       * file_url - Строка - ссылка на файл с этикетками;
//       * status   - Строка - статус формирования этикеток.
//
Функция ПолучитьЭтикеткиОтправленийИзСервиса(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v1/posting/fbs/package-label/get";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("task_id", СтрокаВЧисло(Параметры.ИдентификаторЗадания));
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Проверяет и сохраняет данные экземпляров товаров из отправления в сервисе Ozon.
// Описание метода см. https://api-seller.ozon.ru/v5/fbs/posting/product/exemplar/set (версия 5).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Булево       - результат выполнения метода.
//
Функция ПроверитьИСохранитьЭкземплярыТоваровПоОтправлениюВСервисе(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v5/fbs/posting/product/exemplar/set";
	
	Товары = Новый Массив;
		
	Для Каждого СтрокаТаблицыЗначений Из Параметры.Товары Цикл
		Экземпляры = Новый Массив;
		
		Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
			Экземпляр = Новый Структура;
			Экземпляр.Вставить("exemplar_id",    ЭлементКоллекции.ИдентификаторЭкземпляра);
			Экземпляр.Вставить("is_gtd_absent",  Не ЗначениеЗаполнено(ЭлементКоллекции.НомерГТДКод));
			Экземпляр.Вставить("gtd",            ЭлементКоллекции.НомерГТДКод);
			Экземпляр.Вставить("is_rnpt_absent", Не ЗначениеЗаполнено(ЭлементКоллекции.НомерГТДРегистрационныйНомер));
			Экземпляр.Вставить("rnpt",           ЭлементКоллекции.НомерГТДРегистрационныйНомер);
			Экземпляр.Вставить("mandatory_mark", ЭлементКоллекции.КодМаркировки);
			Экземпляр.Вставить("jw_uin",         ЭлементКоллекции.УИН);
			
			Экземпляры.Добавить(Экземпляр);
		КонецЦикла;
		
		Товар = Новый Структура;
		Товар.Вставить("product_id",               СтрокаВЧисло(СтрокаТаблицыЗначений.ИдентификаторТовара));
		Товар.Вставить("is_gtd_needed",            СтрокаТаблицыЗначений.ТребуетсяГТД);
		Товар.Вставить("is_rnpt_needed",           СтрокаТаблицыЗначений.ТребуетсяРНПТ);
		Товар.Вставить("is_mandatory_mark_needed", СтрокаТаблицыЗначений.ТребуетсяМаркировка);
		Товар.Вставить("quantity",                 Экземпляры.Количество());
		Товар.Вставить("exemplars",                Экземпляры);
		
		Товары.Добавить(Товар);
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("multi_box_qty",  Параметры.КоличествоКоробок);
	ПараметрыЗапроса.Вставить("products",       Товары);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Получает статусы добавления экземпляров товаров по отправлению из сервиса Ozon.
// Описание метода см. https://api-seller.ozon.ru/v4/fbs/posting/product/exemplar/status (версия 4).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - результат выполнения метода:
//       * posting_number            - Строка - номер отправления.
//       * status                    - Строка - статус проверки всех экземпляров и доступности сборки.
//       * products                  - Массив Из См. НовыйРезультатИзСервиса - список товаров:
//         ** exemplars                    - Массив Из См. НовыйРезультатИзСервиса - информация об экземплярах:
//           *** exemplar_id                 - Число - идентификатор экземпляра;
//           *** gtd_check_status            - Строка - статус проверки грузовой таможенной декларации;
//           *** gtd_error_codes             - Массив Из Строка - коды ошибок при проверке грузовой таможенной декларации;
//           *** is_gtd_absent               - Булево - признак того, что не указан номер грузовой таможенной декларации (ГТД);
//           *** gtd                         - Строка - номер грузовой таможенной декларации (ГТД);
//           *** rnpt_check_status           - Строка - статус проверки регистрационного номера партии товара;
//           *** rnpt_error_codes            - Массив Из Строка - коды ошибок при проверке регистрационного номера партии;
//           *** is_rnpt_absent              - Булево - признак того, что не указан регистрационный номер партии товара (РНПТ);
//           *** rnpt                        - Строка - регистрационный номер партии товара (РНПТ);
//           *** mandatory_mark_check_status - Строка - статус проверки маркировки "Честный ЗНАК";
//           *** mandatory_mark_error_codes  - Массив Из Строка - коды ошибок при проверке маркировки "Честный ЗНАК";
//           *** mandatory_mark              - Строка - Обязательная маркировка "Честный ЗНАК";
//           *** jw_uin_check_status         - Строка - статус проверки уникального идентификационного номера (УИН) ювелирного изделия;
//           *** jw_uin_error_codes          - Массив Из Строка - коды ошибок при проверке уникального идентификационного номера (УИН) ювелирного изделия;
//           *** jw_uin                      - Строка - уникальный идентификационный номер (УИН) ювелирного изделия.
//         ** product_id                   - Число - идентификатор товара;
//
Функция ПолучитьСтатусыЭкземпляровТоваровПоОтправлениюИзСервиса(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v4/fbs/posting/product/exemplar/status";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись,, Истина);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Получает информацию по экземплярам товаров по отправлению из сервиса Ozon.
// Описание метода см. https://api-seller.ozon.ru/v5/fbs/posting/product/exemplar/create-or-get (версия 5).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Соответствие Из КлючИЗначение - результат выполнения метода:
//       * multi_box_qty             - Число - количество коробок, в которые упакован товар.
//       * posting_number            - Строка - номер отправления.
//       * products                  - Массив Из См. НовыйРезультатИзСервиса - список товаров:
//         ** exemplars                - Массив Из См. НовыйРезультатИзСервиса - информация об экземплярах:
//           *** exemplar_id             - Число - идентификатор экземпляра;
//           *** is_gtd_absent           - Булево - признак того, что не указан номер грузовой таможенной декларации (ГТД);
//           *** gtd                     - Строка - номер грузовой таможенной декларации (ГТД);
//           *** is_rnpt_absent          - Булево - признак того, что не указан регистрационный номер партии товара (РНПТ);
//           *** rnpt                    - Строка - регистрационный номер партии товара (РНПТ);
//           *** mandatory_mark          - Строка - Обязательная маркировка "Честный ЗНАК";
//           *** jw_uin                  - Строка - уникальный идентификационный номер (УИН) ювелирного изделия.
//         ** is_gtd_needed            - Булево - признак того, что необходимо передать номер грузовой таможенной декларации (ГТД) для продукта и отправления;
//         ** is_mandatory_mark_needed - Булево - признак того, что необходимо передать маркировку "Честный ЗНАК";
//         ** is_rnpt_needed           - Булево - признак того, что необходимо передать номер партии товара (РНПТ);
//         ** product_id               - Число - идентификатор товара;
//         ** quantity                 - Число - количество экземпляров.
//
Функция ПолучитьДанныеЭкземпляровТоваровПоОтправлениюИзСервиса(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v5/fbs/posting/product/exemplar/create-or-get";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись,, Истина);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Проверяет, что коды маркировки соответствуют требованиям системы "Честный ЗНАК" по составу и количеству символов.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_FbsPostingProductExemplarValidate (версия 4).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из См. НовыйРезультатИзСервиса - результат выполнения метода:
//       * error           - Строка - код ошибки;
//       * exemplars       - Массив Из См. НовыйРезультатИзСервиса - информация об экземплярах:
//         ** errors         - Массив Из Строка - ошибки валидации экземпляра;
//         ** gtd            - Строка - номер грузовой таможенной декларации (ГТД);
//         ** mandatory_mark - Строка - обязательная маркировка "Честный ЗНАК";
//         ** jw_uin         - Массив Из Строка - уникальный идентификационный номер (УИН) ювелирного изделия;
//         ** valid          - Булево - результат прохождения проверки. Истина, если код экземпляра соответствует требованиям;
//         ** rnpt           - Строка - регистрационный номер партии товара (РНПТ).
//       * product_id      - Число - идентификатор товара на торговой площадке;
//       * valid           - Булево - результат прохождения проверки. Истина, если коды всех экземпляров соответствуют требованиям.
//
Функция ПроверитьКодыМаркировкиПоОтправлениюВСервисе(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v4/fbs/posting/product/exemplar/validate";
	
	Товары = Новый Массив;
		
	Для Каждого СтрокаТаблицыЗначений Из Параметры.Товары Цикл
		Экземпляры = Новый Массив;
		
		Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
			Экземпляр = Новый Структура;
			Экземпляр.Вставить("gtd",            ЭлементКоллекции.НомерГТДКод);
			Экземпляр.Вставить("rnpt",           ЭлементКоллекции.НомерГТДРегистрационныйНомер);
			Экземпляр.Вставить("mandatory_mark", ЭлементКоллекции.КодМаркировки);
			Экземпляр.Вставить("jw_uin",         ЭлементКоллекции.УИН);
			
			Экземпляры.Добавить(Экземпляр);
		КонецЦикла;
		
		Товар = Новый Структура;
		Товар.Вставить("product_id", СтрокаВЧисло(СтрокаТаблицыЗначений.ИдентификаторТовара));
		Товар.Вставить("exemplars",  Экземпляры);
		
		Товары.Добавить(Товар);
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("products",       Товары);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.products");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Получает список причин отмены для всех отправлений из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetPostingFbsCancelReasonList (версия 2).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из См. НовыйРезультатИзСервиса - результат выполнения метода:
//       * id                            - Число - идентификатор причины отмены;
//       * is_available_for_cancellation - Булево - результат отмены отправления. Истина, если запрос доступен для отмены;
//       * title                         - Строка - название категории;
//       * type_id                       - Строка - инициатор отмены отправления.
//
Функция ПолучитьПричиныОтменыИзСервиса(УчетнаяЗапись)
	
	ТекстЗапроса = "/v2/posting/fbs/cancel-reason/list";
	
	ПараметрыЗапроса = Новый Структура;
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Получает список причин отмены для конкретных отправлений из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_GetPostingFbsCancelReasonV1 (версия 1).
//
// Параметры:
//   УчетнаяЗапись     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НомераОтправлений - Массив Из Строка - номера отправлений.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из См. НовыйРезультатИзСервиса - результат выполнения метода:
//       * posting_number - Строка - номер отправления.
//       * reasons        - Массив Из См. НовыйРезультатИзСервиса - список товаров:
//         ** id            - Число - идентификатор причины отмены;
//         ** title         - Строка - название категории;
//         ** type_id       - Строка - инициатор отмены отправления.
//
Функция ПолучитьПричиныОтменыПоОтправлениямИзСервиса(УчетнаяЗапись, НомераОтправлений)
	
	ТекстЗапроса = "/v1/posting/fbs/cancel-reason";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("related_posting_numbers", НомераОтправлений);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Отменяет отправление или часть товаров из отправления в сервисе Ozon.
// Описание методов см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_CancelFbsPosting (версия 2),
//                      https://docs.ozon.ru/api/seller/#operation/PostingAPI_CancelFbsPostingProduct (версия 2).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаОтменыОтправления.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Булево       - результат выполнения метода.
//
Функция ОтменитьОтправлениеВСервисе(УчетнаяЗапись, Знач Параметры)
	
	Если ЗначениеЗаполнено(Параметры.Товары) Тогда
		ТекстЗапроса = "/v2/posting/fbs/product/cancel";
	Иначе
		ТекстЗапроса = "/v2/posting/fbs/cancel";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПричинаОтмены.Наименование) Тогда
		ДополнительнаяИнформация = Параметры.ПричинаОтмены.Наименование;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ПричинаОтмены.Ссылка) Тогда
		ДополнительнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ПричинаОтмены.Ссылка,
			"Наименование");
	Иначе
		ДополнительнаяИнформация = "";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number",        Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("cancel_reason_id",      Параметры.ПричинаОтмены.Идентификатор);
	ПараметрыЗапроса.Вставить("cancel_reason_message", ДополнительнаяИнформация);
	
	Если ЗначениеЗаполнено(Параметры.Товары) Тогда
		ПараметрыЗапроса.Вставить("items", Новый Массив);
		
		Параметры.Товары.Свернуть("ИдентификаторТовара", "Количество");
		Для Каждого ЭлементКоллекции Из Параметры.Товары Цикл
			ПараметрыЗапроса.items.Добавить(Новый Структура("sku, quantity", ЭлементКоллекции.ИдентификаторТовара, ЭлементКоллекции.Количество));
		КонецЦикла;
	КонецЕсли;
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

// Делит заказ на отправления и переводит его в статус "Ожидает отправки" в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_ShipFbsPostingV4 (версия 4).
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению.
// 
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Строка       - номер собранного отправления.
//
Функция СобратьЗаказВСервисе(УчетнаяЗапись, Параметры)
	
	ТекстЗапроса = "/v4/posting/fbs/ship";
	
	Упаковки = Новый Соответствие;
		
	Для Каждого СтрокаТаблицыЗначений Из Параметры.Товары Цикл
		Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
			ИдентификаторУпаковки = ЭлементКоллекции.ИдентификаторУпаковки;
			Если Не ЗначениеЗаполнено(ИдентификаторУпаковки) Тогда
				ИдентификаторУпаковки = Строка(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
			КонецЕсли;
			
			Упаковка = Упаковки.Получить(ИдентификаторУпаковки);
			Если Упаковка = Неопределено Тогда
				Упаковка = Новый Структура;
				Упаковка.Вставить("Товары", Новый Соответствие);
				
				Упаковки.Вставить(ИдентификаторУпаковки, Упаковка);
			КонецЕсли;
			
			Количество = Упаковка.Товары.Получить(СтрокаТаблицыЗначений.ИдентификаторТовара);
			Если Количество = Неопределено Тогда
				Упаковка.Товары.Вставить(СтрокаТаблицыЗначений.ИдентификаторТовара, 1);
			Иначе
				Упаковка.Товары.Вставить(СтрокаТаблицыЗначений.ИдентификаторТовара, Количество + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	ТоварыИУпаковки = Новый Массив;
	
	Для Каждого КлючИЗначение Из Упаковки Цикл
		Упаковка = Новый Массив;
		
		Для Каждого ЭлементКоллекции Из КлючИЗначение.Значение.Товары Цикл
			Товар = Новый Структура;
			Товар.Вставить("product_id", СтрокаВЧисло(ЭлементКоллекции.Ключ));
			Товар.Вставить("quantity",   ЭлементКоллекции.Значение);
			
			Упаковка.Добавить(Товар);
		КонецЦикла;
		
		ТоварыИУпаковки.Добавить(Новый Структура("products", Упаковка));
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("with",           Новый Структура("additional_data", Истина));
	ПараметрыЗапроса.Вставить("packages",       ТоварыИУпаковки);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                "result");
	АтрибутыОтвета.Вставить("ДополнительнаяИнформация", "additional_data");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Разделяет первичное отправление в сервисе Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/PostingAPI_ShipFbsPostingPackage (версия 4).
//
// Параметры:
//   УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры          - Структура Из КлючИЗначение - список параметров запроса, см. НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению.
//   ПередатьЭкземпляры - Булево - передавать ли информацию о сформированных экземплярах.
// 
// Возвращаемое значение:
//   - Неопределено     - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из Строка - результат выполнения метода.
//
Функция РазделитьОтправлениеВСервисе(УчетнаяЗапись, Параметры, ПередатьЭкземпляры = Ложь)
	
	ТекстЗапроса = "/v4/posting/fbs/ship/package";
	
	Товары = Новый Массив;
	
	Для Каждого СтрокаТаблицыЗначений Из Параметры.Товары Цикл
		Экземпляры = Новый Массив;
		Для Каждого ЭлементКоллекции Из СтрокаТаблицыЗначений.Экземпляры Цикл
			Экземпляры.Добавить(ЧислоВСтроку(ЭлементКоллекции.ИдентификаторЭкземпляра));
		КонецЦикла;
		
		Товар = Новый Структура;
		Если ПередатьЭкземпляры Тогда
			Товар.Вставить("exemplarsIds", Экземпляры);
		КонецЕсли;
		Товар.Вставить("product_id", СтрокаВЧисло(СтрокаТаблицыЗначений.ИдентификаторТовара));
		Товар.Вставить("quantity",   Экземпляры.Количество());
		
		Товары.Добавить(Товар);
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", Параметры.НомерОтправления);
	ПараметрыЗапроса.Вставить("products",       Товары);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");
	
	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, Истина);
	
	Возврат РезультатЗапроса.Результат;
	
КонецФункции

#КонецОбласти

#Область ЦеныТоваровСлужебный

// Получает текущие цены из учетной системы по указанным идентификаторам публикации.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Идентификаторы            - Массив Из Строка - список внутренних идентификаторов товара в системе продавца или список идентификаторов 
//                                 товаров на маркетплейсе.
//   ИмяИдентификатора         - Строка - имя поля идентификатора в анализируемых данных.
//
// Возвращаемое значение:
//   - Неопределено    - не заполнены ключевые параметры.
//   - ТаблицаЗначений - цены товаров из учетной системы:
//       * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//       * Номенклатура                     - СправочникСсылка.Номенклатура - номенклатура;
//       * Характеристика                   - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры;
//       * Упаковка                         - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка;
//       * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//       * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//       * ВидЦены                          - СправочникСсылка.ВидыЦен - вид цены товара;
//       * Цена                             - Число - значение цены товара.
//
Функция ПолучитьТекущиеЦеныПоИдентификаторам(УчетнаяЗаписьМаркетплейса, Идентификаторы, ИмяИдентификатора) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущиеЦеныПоИдентификаторам");
	
	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, Ложь);
	ВидыЦен                = Новый Массив;
	
	Для Каждого КлючЗначение Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) 
			 И ВидыЦен.Найти(КлючЗначение.Значение) = Неопределено Тогда
			ВидыЦен.Добавить(КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВидыЦен.Ссылка КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА ВидыЦен.Ссылка = &ВидЦеныДоСкидок
		|			ТОГДА СтатусыПубликации.ЦенаДоСкидки
		|		КОГДА ВидыЦен.Ссылка = &ВидЦеныСУчетомСкидок
		|			ТОГДА СтатусыПубликации.ЦенаСоСкидкой
		|		КОГДА ВидыЦен.Ссылка = &ВидЦеныМинимальныхЦен
		|			ТОГДА СтатусыПубликации.МинимальнаяЦена
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	&ПоляДляЦенообразованияВыборка
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
		|		ПО (ВидыЦен.Ссылка В (&ВидыЦен))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО (ВидыНоменклатуры.Ссылка = СтатусыПубликации.Номенклатура.ВидНоменклатуры)
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликации.ИдентификаторПубликации В(&Идентификаторы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	&ПоляДляИндексирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтносительныеКурсыВСрезПоследних.Валюта КАК Валюта,
		|	ОтносительныеКурсыВСрезПоследних.КурсЧислитель КАК КурсЧислитель,
		|	ОтносительныеКурсыВСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ДатаЦен, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютУчета.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютУчета.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1)) КАК КоэффициентПересчетаЦены,
		|	ЦеныНоменклатуры.*
		|ПОМЕСТИТЬ ЦеныТоваров
		|ИЗ
		|	&ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУчета
		|		ПО (КурсыВалютУчета.Валюта = &ВалютаУчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	&ПоляДляИндексирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ТаблицаТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаТоваров.ВидЦены КАК ВидЦены,
		|	ВЫРАЗИТЬ(ТоварыСЦенами.Цена 
		|				* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиТовара, 1)
		|				/ ВЫБОР
		|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) = 0
		|						ТОГДА 1
		|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1)
		|				КОНЕЦ
		|				* ТоварыСЦенами.КоэффициентПересчетаЦены КАК ЧИСЛО(31, 2)) КАК Цена
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныТоваров КАК ТоварыСЦенами
		|		ПО &УсловиеСоединенияЦеныНоменклатуры";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"И СтатусыПубликации.ИдентификаторПубликации В(&Идентификаторы)", 
		"И СтатусыПубликации." + ИмяИдентификатора + " В(&Идентификаторы)" );
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ТекущаяДатаСеанса());

	НастройкаЦенообразования 				 = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "СтатусыПубликации";
	НастройкаЦенообразования.ПриемникТоваров = "";
	НастройкаЦенообразования.ПолеСерия 		 = "";

	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования,, ИспользуетсяЦенообразование25);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляДляЦенообразованияВыборка", ТекстЗамены);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляДляЦенообразованияВыборка", "ИСТИНА");
	КонецЕсли;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ПоляДляИндексирования",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыИндексирование(ИспользуетсяЦенообразование25));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ЦеныНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры("ТаблицаТоваров",
			"&ДатаЦен",
			Новый Структура("ВТаблице", "ВидЦены"),
			ИспользуетсяЦенообразование25));

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&УсловиеСоединенияЦеныНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
		"ТаблицаТоваров",
		"ТоварыСЦенами",
		"ТаблицаТоваров.ВидЦены",
		ИспользуетсяЦенообразование25));

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиЦены",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТоварыСЦенами.Упаковка",
			"ТоварыСЦенами.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиТовара",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТоваров.Упаковка",
			"ТаблицаТоваров.Номенклатура"));
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Идентификаторы",            Идентификаторы);
	Запрос.УстановитьПараметр("ВидыЦен",   				   ВидыЦен);
	Запрос.УстановитьПараметр("ВидЦеныДоСкидок", 		   НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	Запрос.УстановитьПараметр("ВидЦеныСУчетомСкидок",	   НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	Запрос.УстановитьПараметр("ВидЦеныМинимальныхЦен", 	   НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);
	Запрос.УстановитьПараметр("БазоваяВалюта", 			   ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Запрос.УстановитьПараметр("ВалютаУчета", 			   НастройкиУчетнойЗаписи.ВалютаУчета);
	Запрос.УстановитьПараметр("ДатаЦен", 				   ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		Результат.Количество() / 100);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЦеныТоваровSellerAPI

// Выгружает следующую порцию цен товарных позиций из информационной базы на торговую площадку.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsPrices (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ПараметрыЗапроса           - Структура - параметры запроса обновления остатков:
//     * stocks                   - Массив Из Структура - загружаемые остатки:
//       ** offer_id                - Строка - идентификатор товара в системе продавца (артикул);
//       ** product_id              - Число - идентификатор товара в маркетплейсе;
//       ** warehouse_id            - Число - идентификатор склада в маркетплейсе;
//       ** stock                   - Число - количество товара в наличии.
//   СведенияОВыгруженныхДанных - ТаблицаЗначений - обрабатываемые товарные позиции, см. СведенияОВыгруженныхДанных.
//   Отказ                      - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//   ПродолжитьВыполнение       - Булево - продолжать выгрузку остатков для других позиций (порций).
//
Процедура ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных, Отказ = Ложь, ПродолжитьВыполнение = Истина)

	ТекстЗапроса = "/v1/product/import/prices";
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина);

	Если РезультатЗапроса = Неопределено Тогда
		Отказ = Истина;
		ПродолжитьВыполнение = Ложь;
		Возврат;
	КонецЕсли;

	ДатаВыгрузки = ТекущаяДатаСеанса();
	Для Каждого ЭлементРезультата Из РезультатЗапроса["result"] Цикл
		СтруктураПоиска = Новый Структура("offer_id, product_id",
			ЭлементРезультата["offer_id"],
			ЭлементРезультата["product_id"]);
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		
		Если ЭлементРезультата["updated"] Тогда
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультатаПоиска);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ЦенаДоСкидки = СтрокаРезультатаПоиска.ЦенаДоСкидки;
				МенеджерЗаписи.ЦенаСоСкидкой = СтрокаРезультатаПоиска.ЦенаСоСкидкой;
				МенеджерЗаписи.МинимальнаяЦена = СтрокаРезультатаПоиска.МинимальнаяЦена;
				МенеджерЗаписи.ДатаВыгрузкиЦенПродажи = ДатаВыгрузки;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			
		Иначе
			Отказ = Истина;
			ПродолжитьВыполнение = Истина;
			
			МассивОшибок = Новый Массив;
			Для Каждого ЭлементСпискаОшибок Из ЭлементРезультата["errors"] Цикл
				МассивОшибок.Добавить(ПолучитьОписаниеОшибки(ЭлементСпискаОшибок["code"], ЭлементСпискаОшибок["message"]));
			КонецЦикла;
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выгрузке цен товара %1 произошла ошибка:'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				СообщениеОбОшибке + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПоследнийИдентификатор, ЦеныДляВыгрузки, ПолученныеЦены, ВидыЦен)

	Фильтр = Новый Структура("offer_id, product_id, visibility", Новый Массив, Новый Массив, "ALL");
	ДанныеИтерации = Новый Структура("filter, last_id, limit", Фильтр, "", 1000);
	ДанныеИтерации.last_id = ПоследнийИдентификатор;
	ДанныеИтерации.filter.Вставить("product_id", ЦеныДляВыгрузки.ВыгрузитьКолонку("product_id"));

	ТекстЗапроса = "/v4/product/info/prices";
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, Истина);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат "";
	Иначе
		Для Каждого ЭлементРезультата Из РезультатЗапроса["result"]["items"] Цикл
			СтруктураПоиска = Новый Структура("product_id", ЭлементРезультата["product_id"]);
			РезультатПоиска = ЦеныДляВыгрузки.НайтиСтроки(СтруктураПоиска);
			Если РезультатПоиска.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРезультатаПоиска = РезультатПоиска[0];
			Для Каждого ВидЦены Из ВидыЦен Цикл
				Попытка
					Если ВидЦены.Ключ = "ВидЦеныСАкциямиПродавца" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныСАкциямиПродавца;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["marketing_seller_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныРекомендованный" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныРекомендованный;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["recommended_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныПоставщика" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныПоставщика;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["retail_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныСоВсемиАкциями" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныСоВсемиАкциями;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["marketing_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныДоСкидок" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныДоСкидок;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["old_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныМинимальныхЦен" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныМинимальныхЦен;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["min_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныСУчетомСкидок" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныСУчетомСкидок;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["price"];
					КонецЕсли;
					
				Исключение
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить значение для вида цены %1.'", 
							ОбщегоНазначения.КодОсновногоЯзыка()), 
						ВидЦены);
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Ошибка,,, 
						ТекстОшибки);
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат РезультатЗапроса["result"]["last_id"];

КонецФункции

#КонецОбласти

#Область ОтображениеОстатковИЦенТоваровСлужебный

// Конструктор настроек по умолчанию для вывода цен и остатков в форме публикации товаров.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Структура - настройки отображения остатков и цен в таблице и информационных полях.
//
Функция НовыеПараметрыОтображенияОстатковЦен(УчетнаяЗаписьМаркетплейса) Экспорт

	Результат = Новый Структура();
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса);
		ВидыЦен                = НастройкиУчетнойЗаписи.ВидыЦен;
		ОтображатьЦены         = Истина;
		ИспользуемыеСклады     = ИнтеграцияСМаркетплейсамиСервер.ПолучитьСопоставленныеСклады(
			УчетнаяЗаписьМаркетплейса, Истина, Ложь);
		ОтображатьОстатки      = ИспользуемыеСклады.Количество() > 0;
	Иначе
		ОтображатьЦены    = Ложь;
		ОтображатьОстатки = Ложь;
	КонецЕсли;
	
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокПоУчету", НСтр("ru = 'Остаток по учету'"), ОтображатьОстатки, ОтображатьОстатки);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокНаOzon", НСтр("ru = 'Остаток на Ozon'"), Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокFBO", НСтр("ru = 'Остаток FBO'"), Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокFBS", НСтр("ru = 'Остаток FBS'"), ОтображатьОстатки);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСоСкидкой", НСтр("ru = 'Цена со скидками'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныСУчетомСкидок), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныСУчетомСкидок));
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаДоСкидки", НСтр("ru = 'Цена до скидок'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныДоСкидок), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныДоСкидок));
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "МинимальнаяЦена", НСтр("ru = 'Минимальная цена'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныМинимальныхЦен));
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСУчетомАкцийПродавца", НСтр("ru = 'Цена с акциями продавца'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныСАкциямиПродавца));
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСУчетомВсехАкций", НСтр("ru = 'Цена со всеми акциями'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныСоВсемиАкциями));
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "РекомендованнаяЦена", НСтр("ru = 'Рекомендованная цена'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныРекомендованный));
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаПоставщика", НСтр("ru = 'Цена поставщика'"), ОтображатьЦены И ЗначениеЗаполнено(ВидыЦен.ВидЦеныПоставщика));
	
	ОстаткиИнфоПоля  = Новый Массив;
	ОстаткиПодсказки = Новый Массив;
	ЦеныИнфоПоля     = Новый Массив;
	ЦеныПодсказки    = Новый Массив;

	Для Каждого КлючЗначение Из Результат Цикл
		Если СтрНайти(КлючЗначение.Ключ, "Остаток") Тогда
			Если КлючЗначение.Значение.ОтображатьВИнформационномПоле Тогда
				Если ОстаткиИнфоПоля.Количество() < 2 Тогда
					ОстаткиИнфоПоля.Добавить(КлючЗначение.Ключ);
				Иначе
					ОстаткиПодсказки.Добавить(КлючЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если КлючЗначение.Значение.ОтображатьВИнформационномПоле Тогда
				Если ЦеныИнфоПоля.Количество() < 2 Тогда
					ЦеныИнфоПоля.Добавить(КлючЗначение.Ключ);
				Иначе
					ЦеныПодсказки.Добавить(КлючЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("ОстаткиИнфоПоля",  ОстаткиИнфоПоля);
	Результат.Вставить("ОстаткиПодсказки", ОстаткиПодсказки);
	Результат.Вставить("ЦеныИнфоПоля",     ЦеныИнфоПоля);
	Результат.Вставить("ЦеныПодсказки",    ЦеныПодсказки);
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(ПараметрыОтображенияОстатковЦен, Идентификатор, Наименование, ОтображатьВТаблице = Ложь, ОтображатьВИнформационномПоле = Ложь)

	Результат = Новый Структура("Наименование, ОтображатьВТаблице, ОтображатьВИнформационномПоле", Наименование, ОтображатьВТаблице, ОтображатьВИнформационномПоле);
	ПараметрыОтображенияОстатковЦен.Вставить(Идентификатор, Результат);

КонецПроцедуры

#КонецОбласти

#Область СкладыСлужебный

// Возврат данные о складах из сервиса.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТолькоИзСервиса           - Булево - признак включения в ответ только данных из сервиса, иначе выполнится дополнение 
//                                 данными сопоставления из информационной базы.
// 
// Возвращаемое значение:
//   Структура - в состав входит таблица с информацией по складам и  описание ошибки при получении складов из сервиса.
//
Функция ПолучитьСкладыСервиса(УчетнаяЗаписьМаркетплейса, ТолькоИзСервиса = Ложь) Экспорт

	МассивСкладов = СкладыИзСервиса(УчетнаяЗаписьМаркетплейса);
	
	ТаблицаСкладов = НоваяТаблицаСкладов();

	СопоставленныеСклады = ИнтеграцияСМаркетплейсамиСервер.ПолучитьСопоставленныеСклады(
		УчетнаяЗаписьМаркетплейса, Ложь, Ложь);

	ОшибкаПолученияСкладовИзСервиса = Ложь;

	Если МассивСкладов = Неопределено Тогда
		ОшибкаПолученияСкладовИзСервиса = Истина;
		МассивСкладов = Новый Массив;
	КонецЕсли;

	Если МассивСкладов.Количество() > 0 Тогда
		Для Каждого ДанныеСклада Из МассивСкладов Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСклада);

			Отбор = Новый Структура("ИдентификаторСклада", ДанныеСклада.ИдентификаторОбъектаМаркетплейса);
			СтрокиСопоставления = СопоставленныеСклады.НайтиСтроки(Отбор);
			Если СтрокиСопоставления.Количество() > 0 Тогда
				НоваяСтрока.Склад1С = СтрокиСопоставления[0].Склад;
				НоваяСтрока.ЗаполненыНастройкиСклада = СтрокиСопоставления[0].ЗаполненыНастройкиСклада;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ТолькоИзСервиса Тогда
		Для Каждого ДанныеСклада Из СопоставленныеСклады Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ДанныеСклада.ИдентификаторСклада;
			НоваяСтрока.НаименованиеОбъектаМаркетплейса  = ДанныеСклада.НаименованиеСклада;
			НоваяСтрока.Склад1С                          = ДанныеСклада.Склад;
			НоваяСтрока.ЗаполненыНастройкиСклада         = ДанныеСклада.ЗаполненыНастройкиСклада;
		КонецЦикла;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСкладов", ТаблицаСкладов);
	Результат.Вставить("ОшибкаПолученияСкладовИзСервиса", ОшибкаПолученияСкладовИзСервиса);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СкладыSellerAPI

// Определяет список складов торговой площадки Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/WarehouseAPI_WarehouseList (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//   - Массив Из Структура - результат выполнения запроса:
//       * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор склада (warehouse_id);
//       * НаименованиеОбъектаМаркетплейса  - Строка - название склада (name);
//       * ЭтоRealFBS                       - Булево - признак работы склада по схеме rFBS (is_rfbs).
//
Функция СкладыИзСервиса(УчетнаяЗаписьМаркетплейса) Экспорт
	
	МассивСкладов = Новый Массив;

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат МассивСкладов;
	КонецЕсли;
	
	ТекстЗапроса = "/v1/warehouse/list";
	ДанныеЗапроса = Новый Структура();
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеЗапроса, УчетнаяЗаписьМаркетплейса, Истина);

	Если РезультатЗапроса = Неопределено Тогда
		МассивСкладов = Неопределено;
		
	Иначе
		Для Каждого ЭлементРезультата Из РезультатЗапроса["result"] Цикл
			ОписаниеСклада = Новый Структура;
			ОписаниеСклада.Вставить("ИдентификаторОбъектаМаркетплейса", XMLСтрока(ЭлементРезультата["warehouse_id"]));
			ОписаниеСклада.Вставить("НаименованиеОбъектаМаркетплейса",  ЭлементРезультата["name"]);
			ОписаниеСклада.Вставить("ЭтоRealFBS",                       ЭлементРезультата["is_rfbs"]);
			ОписаниеСклада.Вставить("Статус",                           ПредставлениеПоЗначению(ЭлементРезультата["status"]));

			МассивСкладов.Добавить(ОписаниеСклада);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСкладов;

КонецФункции

// Определяет список активных складов Ozon с информацией об их средней загруженности на ближайшее время.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/SupplierAPI_SupplierAvailableWarehouses (версия 1).
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - результат выполнения запроса:
//     * Ключ     - Строка - название склада (name);
//     * Значение - Строка - идентификатор склада (id).
//
Функция ЗагруженностьСкладовИзСервиса(УчетнаяЗаписьМаркетплейса)
	
	Результат = Новый Соответствие;

	ТекстЗапроса     = "/v1/supplier/available_warehouses";
	ПараметрыЗапроса = Новый Структура;
	ОтветСервиса     = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Ложь);

	Если ОтветСервиса <> Неопределено Тогда
		Для Каждого ЭлементОтветаСервиса Из ОтветСервиса["result"] Цикл
			Результат.Вставить(ВРег(ЭлементОтветаСервиса["warehouse"]["name"]), ЧислоВСтроку(ЭлементОтветаСервиса["warehouse"]["id"]));
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПубликацияОбъектовСлужебный

// Конструктор состояния публикации.
//
// Возвращаемое значение:
//   Структура - данные авторизации:
//     * ОтправленНаМодерацию                - Структура - данные состояния "Отправлен на модерацию":
//       ** Статус                             - ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon - статус объекта;
//       ** ОчищатьЗаданиеПубликации           - Булево - признак необходимости очищать задание публикации;
//       ** Состояние                          - Строка - краткое описание состояния;
//       ** ОписаниеСостояния                  - Строка - расширенное описание состояния;
//       ** СтатусОбъектаПубликации            - ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon - статус объекта публикации;
//       ** СостояниеОбъектаПубликации         - Строка - краткое описание состояния объекта публикации;
//       ** ОписаниеСостоянияОбъектаПубликации - Строка - расширенное описание состояния объекта публикации.
//     * НаМодерации                         - Структура - данные состояния "На модерации";
//     * НеСоздан                            - Структура - данные состояния "Не создан на витрине";
//     * НеОбновлен                          - Структура - данные состояния "Не обновлен";
//     * ГотовКПродаже                       - Структура - данные состояния "Готов к продаже";
//     * ОбъектПубликацииНаМодерации         - Структура - данные состояния "Объект отправлен на модерацию";
//     * ОбъектПубликацииЗагруженСОшибкой    - Структура - данные состояния "Объект не загружен";
//     * ОбъектПубликацииЗагружен            - Структура - данные состояния "Объект загружен".
//
Функция СостоянияПубликации()

	СостоянияПубликации = Новый Структура;

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Ложь);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар отправлен на модерацию, получен номер задания публикации'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект отправлен на модерацию вместе с товаром, получен номер задания публикации'"));
	СостоянияПубликации.Вставить("ОтправленНаМодерацию", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Ложь);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'На модерации'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар проходит модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НаМодерации", ДанныеСостояния); 

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Не создан на витрине'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар не продается, т.к. не прошел модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеСоздан", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Не обновлен'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар продается, но не обновлен'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеОбновлен", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Не продается'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар не продается из-за нарушений правил площадки'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеПродается", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Готов к продаже'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар готов к продаже'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("ГотовКПродаже", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'На модерации'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар проходит модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект отправлен на модерацию'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииНаМодерации", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Не обновлен'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар продается, но не обновлен'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Не загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект не загружен'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииЗагруженСОшибкой", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Готов к продаже'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар готов к продаже'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииЗагружен", ДанныеСостояния);

	Возврат СостоянияПубликации;

КонецФункции

// Определяет данные соответствия состояний публикации.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - данные о соответствии состояний публикации:
//     * Ключ     - Строка - определяет тип статуса публикации;
//     * Значение - Структура - состояние публикации, см. СостоянияПубликации.
//
Функция СоответствиеСостоянийПубликации()

	СостоянияПубликации             = СостоянияПубликации();
	СоответствиеСостоянийПубликации = Новый Соответствие;

	// Статус при проверке номера задания публикации товаров.
	СоответствиеСостоянийПубликации.Вставить("pending",  СостоянияПубликации.ОтправленНаМодерацию);
	СоответствиеСостоянийПубликации.Вставить("failed",   СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("imported", СостоянияПубликации.НаМодерации);

	// Статус при проверке статуса загрузки изображения.
	СоответствиеСостоянийПубликации.Вставить("imported_object", СостоянияПубликации.ОбъектПубликацииНаМодерации);
	СоответствиеСостоянийПубликации.Вставить("uploaded_object", СостоянияПубликации.ОбъектПубликацииЗагружен);
	СоответствиеСостоянийПубликации.Вставить("failed_object",   СостоянияПубликации.ОбъектПубликацииЗагруженСОшибкой);

	// Статус при получении информации о товаре.
	СоответствиеСостоянийПубликации.Вставить("обновляем_товар",                  СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("создаем_товар",                    СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("на_модерации",                     СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("не_обновлен",                      СостоянияПубликации.НеОбновлен);
	СоответствиеСостоянийПубликации.Вставить("обновление_отклонено_модератором", СостоянияПубликации.НеОбновлен);
	СоответствиеСостоянийПубликации.Вставить("нет_на_складе",                    СостоянияПубликации.ГотовКПродаже);
	СоответствиеСостоянийПубликации.Вставить("не_создан",                        СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("не_прошел_модерацию",              СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("продается",                        СостоянияПубликации.ГотовКПродаже);
	СоответствиеСостоянийПубликации.Вставить("не_продается",                     СостоянияПубликации.НеПродается);
	СоответствиеСостоянийПубликации.Вставить("убран_из_продажи",                 СостоянияПубликации.НеПродается);

	Возврат СоответствиеСостоянийПубликации;

КонецФункции

// Определяет состояние товара.
//
// Параметры:
//   СтатусИзСервиса                 - Соответствие Из КлючИЗначение - описание состояния товара, 
//                                       см. ПолучитьОписаниеТоваровИзСервиса.
//   СоответствиеСостоянийПубликации - Соответствие Из КлючИЗначение - данные соответствия состояний публикации, 
//                                       см. СоответствиеСостоянийПубликации.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * ТекущееСостояние             - Структура - текущее состояние публикации, см. СостоянияПубликации.
//     * КодОшибки                    - Строка - код ошибки.
//     * ОписаниеОшибки               - Строка - описание ошибки.
//     * ДатаОбновленияНаМаркетплейсе - Дата - время последнего изменения состояния товара.
//
Функция ДанныеИзСтатуса(СтатусИзСервиса, СоответствиеСостоянийПубликации)

	СтруктураСтатуса = Новый Структура;
	СтруктураСтатуса.Вставить("state_description", "");
	СтруктураСтатуса.Вставить("state_name",        "");
	СтруктураСтатуса.Вставить("item_errors",       Новый Массив);
	СтруктураСтатуса.Вставить("state_updated_at",  Дата(1,1,1));
	ЗаполнитьЗначенияСвойствИзСервиса(СтруктураСтатуса, СтатусИзСервиса);
	
	СтатусТовара = НРег(СтрЗаменить(СтруктураСтатуса.state_description, " ", "_"));
	Если ПустаяСтрока(СтатусТовара) Тогда
		СтатусТовара = НРег(СтрЗаменить(СтруктураСтатуса.state_name, " ", "_"));
	КонецЕсли;

	ТекущееСостояние = СоответствиеСостоянийПубликации[СтатусТовара];
	Если ТекущееСостояние = Неопределено Тогда
		ТекущееСостояние = СоответствиеСостоянийПубликации["на_модерации"];
	КонецЕсли;

	КодОшибки      = "";
	ОписаниеОшибки = "";

	ОписаниеОшибок = СобратьОписаниеОшибокСтатусаДобавления(СтруктураСтатуса.item_errors);
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		КодОшибки      = ОписаниеОшибок.КодОшибки;
		ОписаниеОшибки = ОписаниеОшибок.ОписаниеОшибки;
	КонецЕсли;

	ДанныеИзСтатуса = Новый Структура;
	ДанныеИзСтатуса.Вставить("ТекущееСостояние",             ТекущееСостояние);
	ДанныеИзСтатуса.Вставить("КодОшибки",                    КодОшибки);
	ДанныеИзСтатуса.Вставить("ОписаниеОшибки",               ОписаниеОшибки);
	ДанныеИзСтатуса.Вставить("ДатаОбновленияНаМаркетплейсе", СтруктураСтатуса.state_updated_at);

	Возврат ДанныеИзСтатуса;
	
КонецФункции

// Объединяет несколько ошибок в единое представление.
//
// Параметры:
//   ДанныеОбОшибках - Массив Из см. НовыйРезультатИзСервиса - ошибки при загрузке товаров:
//     * code                          - Строка - код ошибки;
//     * message                       - Строка - техническое описание ошибки;
//     * state                         - Строка - состояние товара, в котором произошла ошибка;
//     * level                         - Строка - уровень ошибки;
//     * description                   - Строка - описание ошибки;
//     * field                         - Строка - поле, в котором произошла ошибка;
//     * attribute_id                  - Число - атрибут, в котором произошла ошибка;
//     * attribute_name                - Строка - название атрибута, в котором произошла ошибка;
//     * optional_description_elements - Соответствие Из КлючИЗначение - дополнительные поля для описания ошибки.
//
// Возвращаемое значение:
//   См. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//
Функция СобратьОписаниеОшибокСтатусаДобавления(ДанныеОбОшибках)

	ОписаниеОшибок = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Если ЗначениеЗаполнено(ДанныеОбОшибках) Тогда
		ШаблонОшибки1 = НСтр("ru = 'Для значения из атрибута <%1> отсутствует действующий сертификат бренда - необходимо добавить сертификат бренда в личном кабинете. Ошибка: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки2 = НСтр("ru = 'Обнаружена ошибка в атрибуте <%1>: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки3 = НСтр("ru = 'Обнаружена ошибка заполнения данных: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки4 = НСтр("ru = 'Обнаружена ошибка в атрибуте <%1>: %2 (Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки5 = НСтр("ru = 'Обнаружена ошибка заполнения данных: %2 (Код ошибки: %4 (%5), состояние товара <%6>).'");

		МассивКодовОшибок = Новый Массив;
		МассивОписанийОшибок = Новый Массив;

		Для Каждого ДанныеОбОшибке Из ДанныеОбОшибках Цикл
			СтруктураДанныхОбОшибке = Новый Структура;
			СтруктураДанныхОбОшибке.Вставить("code",           "");
			СтруктураДанныхОбОшибке.Вставить("message",        "");
			СтруктураДанныхОбОшибке.Вставить("attribute_name", "");
			СтруктураДанныхОбОшибке.Вставить("description",    "");
			СтруктураДанныхОбОшибке.Вставить("level",          "");
			СтруктураДанныхОбОшибке.Вставить("state",          "");
            ЗаполнитьЗначенияСвойствИзСервиса(СтруктураДанныхОбОшибке, ДанныеОбОшибке);
			
			МассивКодовОшибок.Добавить(СтруктураДанныхОбОшибке.code);
			
			ТехническоеОписаниеОшибки = Неопределено;
			СтруктураДанныхОбОшибке.Свойство("message", ТехническоеОписаниеОшибки);

			Если СтрНайти(СтруктураДанныхОбОшибке.code, "brand_in_stop_list") Тогда
				ШаблонОшибки = ШаблонОшибки1;
			ИначеЕсли Не ЗначениеЗаполнено(ТехническоеОписаниеОшибки) Тогда
				ШаблонОшибки = ?(ПустаяСтрока(СтруктураДанныхОбОшибке.attribute_name), ШаблонОшибки5, ШаблонОшибки4);
			Иначе
				ШаблонОшибки = ?(ПустаяСтрока(СтруктураДанныхОбОшибке.attribute_name), ШаблонОшибки3, ШаблонОшибки2);
			КонецЕсли;

			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					СтруктураДанныхОбОшибке.attribute_name,
					СтруктураДанныхОбОшибке.description,
					ТехническоеОписаниеОшибки,
					СтруктураДанныхОбОшибке.code,
					СтруктураДанныхОбОшибке.level,
					СтруктураДанныхОбОшибке.state);

			МассивОписанийОшибок.Добавить(ОписаниеОшибки);
		КонецЦикла;

		ОписаниеОшибок.КодОшибки      = СтрСоединить(МассивКодовОшибок, ", ");
		ОписаниеОшибок.ОписаниеОшибки = СтрСоединить(МассивОписанийОшибок, Символы.ПС);
	КонецЕсли;

	Возврат ОписаниеОшибок;

КонецФункции

Функция НовыйСписокСвойствТовараДляПубликации()

	ДанныеПоАтрибутам = Новый Структура;

	// Основные свойства товара.
	ДанныеПоАтрибутам.Вставить("offer_id", "");
	ДанныеПоАтрибутам.Вставить("name", "");

	ДанныеПоАтрибутам.Вставить("vat", "");
	ДанныеПоАтрибутам.Вставить("currency_code", "");
	ДанныеПоАтрибутам.Вставить("description_category_id", 0);

	ДанныеПоАтрибутам.Вставить("barcode", "");
	ДанныеПоАтрибутам.Вставить("service_type", "IS_CODE_SERVICE");

	// Данные по упаковке.
	ДанныеПоАтрибутам.Вставить("weight_unit", "");
	ДанныеПоАтрибутам.Вставить("weight", 0);
	ДанныеПоАтрибутам.Вставить("dimension_unit", "");
	ДанныеПоАтрибутам.Вставить("depth", 0);
	ДанныеПоАтрибутам.Вставить("height", 0);
	ДанныеПоАтрибутам.Вставить("width", 0);

	// Список атрибутов
	ДанныеПоАтрибутам.Вставить("attributes", Новый Массив);
	ДанныеПоАтрибутам.Вставить("complex_attributes", Новый Массив);

	// Изображения
	ДанныеПоАтрибутам.Вставить("primary_image", "");
	ДанныеПоАтрибутам.Вставить("images", Новый Массив);

	// Цены
	ДанныеПоАтрибутам.Вставить("old_price", "");
	ДанныеПоАтрибутам.Вставить("price", "");
	ДанныеПоАтрибутам.Вставить("min_price", "");
	ДанныеПоАтрибутам.Вставить("premium_price", "");

	Возврат ДанныеПоАтрибутам;

КонецФункции

Функция АтрибутыТовараДляПубликации(ДанныеТовара, УчетнаяЗаписьМаркетплейса, ТокенДоступа = "")

	ДанныеДляПубликации = ДанныеТовара.ДанныеДляПубликации;
	ДанныеПоАтрибутам   = НовыйСписокСвойствТовараДляПубликации();
	
	Если ЗначениеЗаполнено(ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса)
			И СтрНайти(ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Категория Ozon ""%1 (id %2)"", указанная для товарной позиции ""%3"", устарела.'"),
			ДанныеДляПубликации.НаименованиеКатегорииМаркетплейса,
			ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса,
			ДанныеТовара.Номенклатура);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Категория Ozon ""%1 (id %2)"" устарела. Необходимо указать действующую категорию торговой площадки в сопоставлении категорий и перевыбрать номенклатуру, характеристику или упаковку в текущей карточке товара.'"),
			ДанныеДляПубликации.НаименованиеКатегорииМаркетплейса,
			ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса);
		ДанныеПоАтрибутам.Вставить("ОписаниеОшибки", ТекстОшибки);

		Возврат ДанныеПоАтрибутам;
	КонецЕсли;
	
	// Основные свойства товара.
	ИдентификаторыКатегории = СтрРазделить(ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса, "_", Ложь);
	Если ИдентификаторыКатегории.Количество() < 1 Тогда
		ИдентификаторыКатегории.Добавить("");
	КонецЕсли;
	ДанныеПоАтрибутам.description_category_id = СтрокаВЧисло(ИдентификаторыКатегории[0]);

	ДанныеПоАтрибутам.offer_id      = ДанныеДляПубликации.ИдентификаторПубликации;
	ДанныеПоАтрибутам.name          = ДанныеДляПубликации.НаименованиеОбъектаМаркетплейса;
	ДанныеПоАтрибутам.vat           = ЧислоВСтроку(ДанныеДляПубликации.СтавкаНДС / 100, Истина);
	ДанныеПоАтрибутам.currency_code = ДанныеДляПубликации.КодВалюты;
	ДанныеПоАтрибутам.barcode       = ДанныеДляПубликации.Штрихкод;
	ДанныеПоАтрибутам.service_type  = "IS_CODE_SERVICE";

	// Данные по упаковке.
	ДанныеПоАтрибутам.weight_unit    = ДанныеДляПубликации.ВесогабаритныеХарактеристикиУпаковки.ЕдиницаВеса;
	ДанныеПоАтрибутам.weight         = ДанныеДляПубликации.ВесогабаритныеХарактеристикиУпаковки.ВесТовараВУпаковке;
	ДанныеПоАтрибутам.dimension_unit = ДанныеДляПубликации.ВесогабаритныеХарактеристикиУпаковки.ЕдиницаГабаритов;
	ДанныеПоАтрибутам.depth          = ДанныеДляПубликации.ВесогабаритныеХарактеристикиУпаковки.Глубина;
	ДанныеПоАтрибутам.height         = ДанныеДляПубликации.ВесогабаритныеХарактеристикиУпаковки.Высота;
	ДанныеПоАтрибутам.width          = ДанныеДляПубликации.ВесогабаритныеХарактеристикиУпаковки.Ширина;

	// Заполнение атрибутов товара.
	МассивДанныхПоАтрибутам            = Новый Массив;
	МассивДанныхПоКомплекснымАтрибутам = Новый Массив;

	ИдентификаторАтрибута = "";
	КомплексныйАтрибут    = Ложь;

	СлужебныеАтрибуты = НовыеСлужебныеАтрибуты();
	ИсключитьАтрибуты = НовыеИсключаемыеАтрибуты();
	
	СтруктураАтрибута = Новый Структура;

	ПроверитьДобавитьТипТовара(ДанныеТовара.ДанныеОбъекта);

	Для Каждого СтрокаЗначенияРеквизита Из ДанныеТовара.ДанныеОбъекта Цикл
		Если СлужебныеАтрибуты.Найти(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ИсключитьАтрибуты.Найти(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса <> ИдентификаторАтрибута Тогда
			Если ЗначениеЗаполнено(ИдентификаторАтрибута) Тогда
				МассивДанныхПоАтрибутам.Добавить(СтруктураАтрибута);

				Если КомплексныйАтрибут Тогда
					МассивДанныхПоКомплекснымАтрибутам.Добавить(СтруктураАтрибута);
				КонецЕсли;
			КонецЕсли;

			СтруктураАтрибута = Новый Структура;
			СтруктураАтрибута.Вставить("complex_id", СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторРодителяАтрибутаМаркетплейса));
			СтруктураАтрибута.Вставить("id",         СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса));
			СтруктураАтрибута.Вставить("values",     Новый Массив);

			ИдентификаторАтрибута = СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса;
			КомплексныйАтрибут    = ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторРодителяАтрибутаМаркетплейса);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса) Тогда 
			СтруктураЗначенияАтрибута = Новый Структура;
			СтруктураЗначенияАтрибута.Вставить("dictionary_value_id", СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса));

			ЗначениеАтрибутаМаркетплейса = ПривестиЗначениеКТипуOzon(СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса, СтрокаЗначенияРеквизита.ТипЗначенияАтрибута);
			СтруктураЗначенияАтрибута.Вставить("value", ЗначениеАтрибутаМаркетплейса);

			СтруктураАтрибута.values.Добавить(СтруктураЗначенияАтрибута);
		КонецЕсли
	КонецЦикла;

	Если ЗначениеЗаполнено(ИдентификаторАтрибута) Тогда
		МассивДанныхПоАтрибутам.Добавить(СтруктураАтрибута);

		Если КомплексныйАтрибут Тогда
			МассивДанныхПоКомплекснымАтрибутам.Добавить(СтруктураАтрибута);
		КонецЕсли;
	КонецЕсли;

	ДанныеПоАтрибутам.attributes         = МассивДанныхПоАтрибутам;
	ДанныеПоАтрибутам.complex_attributes = МассивДанныхПоКомплекснымАтрибутам;

	// Изображения товара.
	ОсновноеИзображение   = "";
	ПерваяПубличнаяСсылка = "";
	МассивИзображений     = Новый Массив;

	Отбор             = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
	СтрокиИзображений = ДанныеТовара.ОбъектыПубликации.НайтиСтроки(Отбор);

	ОтбиратьОсновноеИзображение = (СтрокиИзображений.Количество() > 1);

	Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
		ПубличнаяСсылка = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;
		Если ПустаяСтрока(ПубличнаяСсылка) Тогда
			// Генерация ссылки на Яндекс.Диск.
			Если ПустаяСтрока(ТокенДоступа) Тогда
				ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);
			КонецЕсли;

			ДанныеПубличнойСсылки = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлНаСервис(ТокенДоступа, СтрокаИзображения.ОбъектПубликации);
			ПубличнаяСсылка       = ДанныеПубличнойСсылки.ПубличнаяСсылка;
			
			СтрокаИзображения.ПредставлениеОбъектаМаркетплейса = ПубличнаяСсылка;
			СтрокаИзображения.ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", ДанныеПубличнойСсылки.ПутьКФайлуНаЯДиске);
			
			Если Не ДанныеПубличнойСсылки.Отказ Тогда
				СтрокаИзображения.ОписаниеОшибки = "";
			Иначе
				СтрокаИзображения.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить публичную ссылку на изображение %1 товара %2. Проверьте наличие авторизации в сервисе Яндекс или повторите авторизацию.'", 
						ОбщегоНазначения.КодОсновногоЯзыка()), 
					СтрокаИзображения.ОбъектПубликации,
					ДанныеТовара.Номенклатура);
			КонецЕсли;
		КонецЕсли;

		Если Не ПустаяСтрока(ПубличнаяСсылка) Тогда
			Если ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
				ПерваяПубличнаяСсылка = ПубличнаяСсылка;
			КонецЕсли;

			Если ОтбиратьОсновноеИзображение И ПустаяСтрока(ОсновноеИзображение)
				И СтрокаИзображения.ДанныеОбъекта.ЭтоОсновноеИзображение Тогда
				ОсновноеИзображение = ПубличнаяСсылка;
			ИначеЕсли Не ОтбиратьОсновноеИзображение Тогда
				ОсновноеИзображение = ПубличнаяСсылка;
			Иначе
				МассивИзображений.Добавить(ПубличнаяСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ПустаяСтрока(ОсновноеИзображение) И Не ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
		ОсновноеИзображение = ПерваяПубличнаяСсылка;
		ИндексОсновногоИзображения = МассивИзображений.Найти(ПерваяПубличнаяСсылка);
		МассивИзображений.Удалить(ИндексОсновногоИзображения);
	ИначеЕсли ПустаяСтрока(ОсновноеИзображение) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить публичную ссылку на основное изображение товара %1. Проверьте наличие авторизации в сервисе Яндекс или повторите авторизацию.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			ДанныеТовара.Номенклатура);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);

		ДанныеПоАтрибутам.Вставить("ОписаниеОшибки", ТекстОшибки);
	КонецЕсли;

	ДанныеПоАтрибутам.primary_image = ОсновноеИзображение;
	ДанныеПоАтрибутам.images = МассивИзображений;

	// Цены товара.
	ИнформацияЦеныДоСкидок      = Неопределено;
	ИнформацияЦеныСУчетомСкидок = Неопределено;
	ИнформацияЦеныМинимальная   = Неопределено;
	ИнформацияЦеныПремиум       = Неопределено;

	ДанныеДляПубликации.Цены.Свойство("ВидЦеныДоСкидок",       ИнформацияЦеныДоСкидок);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныСУчетомСкидок",  ИнформацияЦеныСУчетомСкидок);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныМинимальныхЦен", ИнформацияЦеныМинимальная);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныПремиум",        ИнформацияЦеныПремиум);

	Цена_old_price     = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныДоСкидок, "Цена", 0);
	Цена_price         = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныСУчетомСкидок, "Цена", 0);
	Цена_min_price     = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныМинимальная, "Цена", 0);
	Цена_premium_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныПремиум, "Цена", 0);

	ДанныеПоАтрибутам.old_price     = ЧислоВСтроку(Цена_old_price, Истина);
	ДанныеПоАтрибутам.price         = ЧислоВСтроку(Цена_price, Истина);
	ДанныеПоАтрибутам.min_price     = ЧислоВСтроку(Цена_min_price, Истина);
	ДанныеПоАтрибутам.premium_price = ЧислоВСтроку(Цена_premium_price, Истина);

	Возврат ДанныеПоАтрибутам;

КонецФункции

Процедура ВыполнитьУдалениеПубличныхСсылок(УчетнаяЗаписьМаркетплейса)

	ЗаписьИзмененийВыполнена = Истина;

	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос; 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтатусыПубликацииОбъектовИзмененных.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.Номенклатура КАК Номенклатура,
			|	СтатусыПубликацииОбъектовИзмененных.Характеристика КАК Характеристика,
			|	СтатусыПубликацииОбъектовИзмененных.Упаковка КАК Упаковка,
			|	СтатусыПубликацииОбъектовИзмененных.ОбъектПубликации КАК ОбъектПубликации,
			|	СтатусыПубликацииОбъектовИзмененных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.ДанныеОбъекта КАК ДанныеОбъекта
			|ПОМЕСТИТЬ ВыборкаИзмененийПубличныхСсылок
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовИзмененных
			|ГДЕ
			|	СтатусыПубликацииОбъектовИзмененных.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СтатусыПубликацииОбъектовИзмененных.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
			|	И СтатусыПубликацииОбъектовИзмененных.ОбъектПубликации <> НЕОПРЕДЕЛЕНО
			|	И СтатусыПубликацииОбъектовИзмененных.ИзмененыРеквизиты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации КАК ОбъектПубликации,
			|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))) КАК КоличествоОтличающихсяТоваров
			|ПОМЕСТИТЬ ВыборкаОтличающихсяПубличныхСсылок
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовДругогоТовара
			|		ПО (СтатусыПубликацииОбъектовДругогоТовара.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|			И ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса = СтатусыПубликацииОбъектовДругогоТовара.ВидОбъектаМаркетплейса
			|			И ВыборкаИзмененийПубличныхСсылок.Номенклатура = СтатусыПубликацииОбъектовДругогоТовара.Номенклатура
			|			И ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = СтатусыПубликацииОбъектовДругогоТовара.ОбъектПубликации
			|			И ВыборкаИзмененийПубличныхСсылок.Характеристика <> СтатусыПубликацииОбъектовДругогоТовара.Характеристика
			|			И ВыборкаИзмененийПубличныхСсылок.Упаковка <> СтатусыПубликацииОбъектовДругогоТовара.Упаковка
			|			И ВыборкаИзмененийПубличныхСсылок.ПредставлениеОбъектаМаркетплейса <> СтатусыПубликацииОбъектовДругогоТовара.ПредставлениеОбъектаМаркетплейса
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектПубликации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
			|	ВыборкаИзмененийПубличныхСсылок.Номенклатура КАК Номенклатура,
			|	ВыборкаИзмененийПубличныхСсылок.Характеристика КАК Характеристика,
			|	ВыборкаИзмененийПубличныхСсылок.Упаковка КАК Упаковка,
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации КАК ОбъектПубликации,
			|	ВыборкаИзмененийПубличныхСсылок.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	ВыборкаИзмененийПубличныхСсылок.ДанныеОбъекта КАК ДанныеОбъекта
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаОтличающихсяПубличныхСсылок КАК ВыборкаОтличающихсяПубличныхСсылок
			|		ПО ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = ВыборкаОтличающихсяПубличныхСсылок.ОбъектПубликации
			|ГДЕ
			|	ВыборкаОтличающихсяПубличныхСсылок.КоличествоОтличающихсяТоваров ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаОтличающихсяПубличныхСсылок";

		МассивУдаляемыхПубличныхСсылок = Новый Массив;
		СоответствияУдаляемыхПубличныхСсылок = Новый Соответствие;

		ВыборкаОбъектовПубликации = Запрос.Выполнить().Выбрать();

		// Получение массива удаляемых публичных ссылок и очистка массива для каждого измененного изображения со снятием признака "Изменены реквизиты".
		Пока ВыборкаОбъектовПубликации.Следующий() Цикл
			ДанныеОбъекта = ВыборкаОбъектовПубликации.ДанныеОбъекта.Получить();
			Если ТипЗнч(ДанныеОбъекта) <> Тип("Структура") Тогда
				ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
			КонецЕсли;

			УдаляемыеСсылки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "УдаляемыеСсылки", Новый Соответствие);

			Для Каждого ДанныеПубличнойСсылки Из УдаляемыеСсылки Цикл
				Если ПустаяСтрока(ДанныеПубличнойСсылки.Значение) Тогда
					Продолжить;
				КонецЕсли;

				СоответствияУдаляемыхПубличныхСсылок.Вставить(ДанныеПубличнойСсылки.Ключ, ДанныеПубличнойСсылки.Значение);

				Если МассивУдаляемыхПубличныхСсылок.Найти(ДанныеПубличнойСсылки.Ключ) = Неопределено Тогда
					МассивУдаляемыхПубличныхСсылок.Добавить(ДанныеПубличнойСсылки.Ключ);
				КонецЕсли;
			КонецЦикла;

			ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);

			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса; 
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаОбъектовПубликации, "Номенклатура, Характеристика, Упаковка, ОбъектПубликации, ВидОбъектаМаркетплейса");
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
				Запись.ИзмененыРеквизиты = Ложь;

				Запись.Записать();
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьИзмененийВыполнена = Ложь;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если ЗаписьИзмененийВыполнена И МассивУдаляемыхПубличныхСсылок.Количество() > 0 Тогда
		// Поиск изображений, у которых используемая публичная ссылка среди удаляемых публичных ссылок.
		// Такие публичные ссылки должны быть исключены из удаления с сервиса хранения публичных файлов (например, Яндекс.Диск).
		Запрос.УстановитьПараметр("МассивУдаляемыхПубличныхСсылок", МассивУдаляемыхПубличныхСсылок);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
			|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|			И ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса
			|			И ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации
			|ГДЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса В(&МассивУдаляемыхПубличныхСсылок)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаИзмененийПубличныхСсылок";

		ВыборкаПубличныхСсылок = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПубличныхСсылок.Следующий() Цикл
			СоответствияУдаляемыхПубличныхСсылок.Удалить(ВыборкаПубличныхСсылок.ПубличнаяСсылка);

			ИндексЭлемента = МассивУдаляемыхПубличныхСсылок.Найти(ВыборкаПубличныхСсылок.ПубличнаяСсылка);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивУдаляемыхПубличныхСсылок.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;

		// Удаление публичных ссылок с сервиса хранения публичных файлов (например, Яндекс.Диск).
		Если СоответствияУдаляемыхПубличныхСсылок.Количество() > 0 Тогда
			Попытка
				ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);

				ТекущаяПубличнаяСсылка = "";
				Для Каждого ДанныеПубличнойСсылки Из СоответствияУдаляемыхПубличныхСсылок Цикл
					ТекущаяПубличнаяСсылка = ДанныеПубличнойСсылки.Ключ;
					ИнтеграцияСМаркетплейсамиСервер.УдалитьФайлССервиса(ТокенДоступа, ДанныеПубличнойСсылки.Значение);
				КонецЦикла;
			Исключение
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось удалить публичную ссылку %1 по причине: %2'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекущаяПубличнаяСсылка,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					СообщениеПользователю);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АлгоритмыЗаполненияАтрибутовТовара

// Функция - Получить свойства объединения товаров в одну карточку
//
// Параметры:
//   ТаблицаЗначенийРеквизитов - ТаблицаЗначений - источник данных.
//   ДанныеЗаписи              - Структура, СтрокаТаблицыЗначений - приемник данных при необходимости заполнения.
// 
// Возвращаемое значение:
//   См. НовыйСписокСвойствОбъединенияТоваровВОднуКарточку.
//
Функция ПолучитьСвойстваОбъединенияТоваровВОднуКарточку(ТаблицаЗначенийРеквизитов, ДанныеЗаписи = Неопределено)

	СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

	ПредставленияПризнакаОбъединенияКарточекТоваров = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	СоответствиеТипов = НовоеСоответствиеТипов(); 

	Для Каждого НаименованиеОбъединения Из ПредставленияПризнакаОбъединенияКарточекТоваров Цикл
		Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", СтрЗаменить(НаименованиеОбъединения, "_", " "));
		СтрокиАтрибутаОбъединения = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

		Если СтрокиАтрибутаОбъединения.Количество() > 0 Тогда
			ВыборкаЗначенийРеквизитов = СтрокиАтрибутаОбъединения[0];

			СвойстваОбъединенияТоваровВОднуКарточку.ДоступноОбъединениеТоваровВОднуКарточку = Истина;
			СвойстваОбъединенияТоваровВОднуКарточку.ИдентификаторАтрибута = ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.НаименованиеАтрибута = ВыборкаЗначенийРеквизитов.НаименованиеАтрибутаМаркетплейса;
			СвойстваОбъединенияТоваровВОднуКарточку.ОбязательныйАтрибут = ВыборкаЗначенийРеквизитов.ОбязательныйАтрибут;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута = ВыборкаЗначенийРеквизитов.ТипЗначенияАтрибута;
			СвойстваОбъединенияТоваровВОднуКарточку.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ВыборкаЗначенийРеквизитов.ТипЗначенияАтрибута);
			СвойстваОбъединенияТоваровВОднуКарточку.ОписаниеНазначенияАтрибута = ВыборкаЗначенийРеквизитов.ОписаниеНазначенияАтрибута;
			СвойстваОбъединенияТоваровВОднуКарточку.Реквизит1С = ВыборкаЗначенийРеквизитов.ПолныйПутьКРеквизиту1С;
			СвойстваОбъединенияТоваровВОднуКарточку.ПредставлениеРеквизита1С = ВыборкаЗначенийРеквизитов.ПредставлениеРеквизита1С;
			СвойстваОбъединенияТоваровВОднуКарточку.ЗначениеРеквизита1С = 
					?(ВыборкаЗначенийРеквизитов.ИзменилсяРеквизит1С, ВыборкаЗначенийРеквизитов.НовоеЗначениеРеквизита1С,
							ВыборкаЗначенийРеквизитов.ЗначениеРеквизита1С);
			СвойстваОбъединенияТоваровВОднуКарточку.ИзменилсяРеквизит1С = ВыборкаЗначенийРеквизитов.ИзменилсяРеквизит1С;
			СвойстваОбъединенияТоваровВОднуКарточку.КэшЗначениеРеквизита1С = ВыборкаЗначенийРеквизитов.ЗначениеРеквизита1С;

			Если ДанныеЗаписи <> Неопределено Тогда
				ДанныеЗаписи.ОбъединяетсяВОднуКарточку = ЗначениеЗаполнено(ВыборкаЗначенийРеквизитов.ПолныйПутьКРеквизиту1С)
															Или ВыборкаЗначенийРеквизитов.ОбязательныйАтрибут;
				Если ДанныеЗаписи.ОбъединяетсяВОднуКарточку Тогда
					ДанныеЗаписи.ЗначениеОбъединенияВОднуКарточку = ВыборкаЗначенийРеквизитов.ЗначениеАтрибутаМаркетплейса;
				КонецЕсли;
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СвойстваОбъединенияТоваровВОднуКарточку;

КонецФункции

Процедура ИсправитьЗапросВНаборахДанныхДляСтроковыхДополнительныхЗначений(НаборДанных)

	Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
		Для Каждого ВложенныйНаборДанных Из НаборДанных.Элементы Цикл
			ИсправитьЗапросВНаборахДанныхДляСтроковыхДополнительныхЗначений(ВложенныйНаборДанных);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
		ТекстЗапроса = СтрЗаменить(НаборДанных.Запрос, Символы.ПС, " ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.Таб, " ");
		СтрокаПоиска = ВРег(".ДополнительныеРеквизиты КАК ");
	
		Пока Истина Цикл
			Индекс = СтрНайти(ВРег(ТекстЗапроса), СтрокаПоиска);
			Если Индекс = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Псевдоним = Сред(ТекстЗапроса, Индекс + СтрДлина(СтрокаПоиска));
			ТекстЗапроса    = Псевдоним;
			Индекс    = СтрНайти(Псевдоним, " ");
			Если Индекс > 0 Тогда
				Псевдоним = Сред(Псевдоним, 1, Индекс - 1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Псевдоним) Тогда
				Индекс = СтрНайти(ВРег(НаборДанных.Запрос), ВРег(Псевдоним + ".Значение КАК СТРОКА)"));
				Если Индекс > 0 Тогда
					НаборДанных.Запрос = Сред(НаборДанных.Запрос, 1, Индекс - 1)
						+ Псевдоним + ".ТекстоваяСтрока КАК СТРОКА)"
						+ Сред(НаборДанных.Запрос, Индекс + СтрДлина(Псевдоним + ".Значение КАК СТРОКА)"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеЗначенийАтрибутов(ИсточникДанныхТоваров)

	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ТаблицаДанныхАтрибутов",  Неопределено);
	РезультатЗаполнения.Вставить("ОписаниеОшибокКатегорий", Новый Соответствие);

	// Таблица для сохранения псевдонимов полей.
	ТаблицаИменПолей = Новый ТаблицаЗначений;
	ТаблицаИменПолей.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ТаблицаИменПолей.Колонки.Добавить("ПолныйПутьКРеквизиту1С", Новый ОписаниеТипов("Строка"));
	ТаблицаИменПолей.Колонки.Добавить("ДобавляемаяКолонка", Новый ОписаниеТипов("Булево"));

	// Подготовка схемы компоновки данных и компоновщика настроек для получения значений реквизитов.
	Поля = ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов(Истина);
	Результат = СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля);

	СхемаКомпоновкиДанных = Результат.СхемаКомпоновкиДанных;
	КомпоновщикНастроек   = Новый КомпоновщикНастроекКомпоновкиДанных;

	// Получение таблицы значений реквизитов по установленным настройкам для атрибутов категорий 1С.
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	НастройкиКомпоновщика.Структура.Очистить();

	ГруппировкаПолей = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

	ВыводРеквизитов = ГруппировкаПолей.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Если Не ВыводРеквизитов.Использование Тогда
		ВыводРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
		ВыводРеквизитов.Использование = Истина;
	КонецЕсли;

	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;

		СтрокаИмениПоля = ТаблицаИменПолей.Найти(Поле.ПолеКомпоновкиДанных, "ПолныйПутьКРеквизиту1С");
		Если СтрокаИмениПоля = Неопределено Тогда
			ВыбранноеПоле = ГруппировкаПолей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле.ПолеКомпоновкиДанных);
			ВыбранноеПоле.Заголовок = Поле.ПутьКДанным;

			// Добавление записей в таблицу псевдонимов полей.
			СтрокаИмениПоля = ТаблицаИменПолей.Добавить();
			СтрокаИмениПоля.ИмяПоля = Поле.ПутьКДанным;
			СтрокаИмениПоля.ПолныйПутьКРеквизиту1С = Поле.ПолеКомпоновкиДанных;
		КонецЕсли;
	КонецЦикла;

	// Получение таблицы установленных настроек для атрибутов категорий 1С.
	ЧастиТекстаЗапроса = СоставныеЧастиТекстаЗапросаПолученияНастроекСоответствияАтрибутов();

	Запрос = Новый Запрос;

	Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДанныеПубликации", ИсточникДанныхТоваров);
		ДанныеПубликации = ИсточникДанныхТоваров;
	Иначе // МенеджерВременныхТаблиц
		Запрос.МенеджерВременныхТаблиц = ИсточникДанныхТоваров;
		ЧастиТекстаЗапроса.Пролог = СтрЗаменить(ЧастиТекстаЗапроса.Пролог, "&ДанныеПубликации", "ДанныеПубликации");
		ДанныеПубликации = ИсточникДанныхТоваров.Таблицы.Найти("ДанныеПубликации").ПолучитьДанные().Выгрузить();
	КонецЕсли;
	
	Если ДанныеПубликации.Количество() = 0 Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;

	Запрос.Текст = ЧастиТекстаЗапроса.Пролог + ЧастиТекстаЗапроса.Разделитель + ЧастиТекстаЗапроса.Рефрен;

	УстановитьПривилегированныйРежим(Истина);

	Инд = 2;
	Пока Истина Цикл
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаКатегорий" + Формат(Инд, "ЧГ="),
				"ТаблицаКатегорий" + Формат(Инд + 1, "ЧГ="));

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд - 1, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаКатегорий" + Формат(Инд - 1, "ЧГ="),
				"ТаблицаКатегорий" + Формат(Инд, "ЧГ="));

		Запрос.Текст = ЧастиТекстаЗапроса.Рефрен;

		Инд = Инд + 1;
	КонецЦикла;

	ЧастиТекстаЗапроса.Эпилог = СтрЗаменить(ЧастиТекстаЗапроса.Эпилог, "ТаблицаАнализа2", "ТаблицаАнализа" + Формат(Инд, "ЧГ="));
	Запрос.Текст = ЧастиТекстаЗапроса.Эпилог;

	ТаблицаНастроекПолейКатегорий1С = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроекПолейКатегорий1С.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов(НовыеПростыеТипы()));
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаНастроекПолейКатегорий1С Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрока) Тогда
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрока;
		Иначе
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюИзЗапроса;
		КонецЕсли;
	КонецЦикла;
	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С, Категория1С");
	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С, Категория1С, ИдентификаторКатегорииМаркетплейса");

	УстановитьПривилегированныйРежим(Ложь);

	Если ТаблицаНастроекПолейКатегорий1С.Количество() = 0 Тогда
		Возврат РезультатЗаполнения;
	КонецЕсли;

	// Заполнение таблицы псевдонимов полей и дополнение компоновщика настроек полями из установленных настроек для атрибутов категорий 1С.
	ИндПоля = 1;
	МассивНезаполненныхСопоставлений = Новый Массив;
	МассивДублейПолей = Новый Массив;

	Для Каждого СтрокаПоляКатегории1С Из ТаблицаНастроекПолейКатегорий1С Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С, "ПолныйПутьКРеквизиту1С");
		Если СтрокаИмениПоля = Неопределено Тогда
			Если ПустаяСтрока(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С) Тогда
				МассивНезаполненныхСопоставлений.Добавить(СтрокаПоляКатегории1С);
				Продолжить;
			КонецЕсли;

			СтрокаИмениПоля = ТаблицаИменПолей.Добавить();
			СтрокаИмениПоля.ИмяПоля = "Значение1С_" + ИндПоля;
			СтрокаИмениПоля.ПолныйПутьКРеквизиту1С = СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С;
			СтрокаИмениПоля.ДобавляемаяКолонка = Истина;

			СообщениеОДубле =
					ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С,
							СтрокаПоляКатегории1С.ПредставлениеРеквизита1С, НастройкиКомпоновщика.ДоступныеПоляВыбора);

			Если Не ПустаяСтрока(СообщениеОДубле) Тогда
				МассивДублейПолей.Добавить(СтрокаИмениПоля.ИмяПоля);
			Иначе
				ВыбранноеПоле = ГруппировкаПолей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С);
				ВыбранноеПоле.Заголовок = СтрокаИмениПоля.ИмяПоля;
			КонецЕсли;

			ИндПоля = ИндПоля + 1;
		КонецЕсли;
	КонецЦикла;

	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С");

	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);

	// Проверка полей выборки.
	Ошибки = Новый Соответствие;

	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	ГруппировкаПолей = КомпоновщикНастроек.Настройки.Структура[0];

	Для Каждого ВыбранноеПоле Из ГруппировкаПолей.Выбор.Элементы Цикл
		Если ВыбранноеПоле.Использование Тогда
			Продолжить;
		КонецЕсли;

		МассивДублейПолей.Добавить(ВыбранноеПоле.Заголовок);

		Отбор = Новый Структура("ПолныйПутьКРеквизиту1С", Строка(ВыбранноеПоле.Поле));
		СтрокиАтрибутов = ТаблицаНастроекПолейКатегорий1С.НайтиСтроки(Отбор);
		Для Каждого СтрокаАтрибута Из СтрокиАтрибутов Цикл
			СтрокаКатегории = Ошибки.Получить(СтрокаАтрибута.ИсточникКатегорииМаркетплейса);
			Если СтрокаКатегории = Неопределено Тогда
				Ошибки.Вставить(СтрокаАтрибута.ИсточникКатегорииМаркетплейса, Новый Соответствие);
				СтрокаКатегории = Ошибки.Получить(СтрокаАтрибута.ИсточникКатегорииМаркетплейса);
			КонецЕсли;

			СтрокаРеквизита = СтрокаКатегории.Получить(СтрокаАтрибута.ПолныйПутьКРеквизиту1С);
			Если СтрокаРеквизита = Неопределено Тогда
				СтрокаКатегории.Вставить(СтрокаАтрибута.ПолныйПутьКРеквизиту1С, Новый Массив);
				СтрокаРеквизита = СтрокаКатегории.Получить(СтрокаАтрибута.ПолныйПутьКРеквизиту1С);
			КонецЕсли;

			СтрокаРеквизита.Добавить("""" + СтрокаАтрибута.НаименованиеАтрибутаМаркетплейса + """");
		КонецЦикла;
	КонецЦикла;

	ШаблонТекстаОшибки = НСтр("ru = 'Для категории 1С ""%1"" необходимо изменить правила сопоставления атрибутов:
									|%2.'");
	ШаблонОшибкиПоля1 = " - " + НСтр("ru = 'из-за удаления или переименования реквизит ""%1"" недоступен для заполнения атрибута %2'");
	ШаблонОшибкиПоля2 = " - " + НСтр("ru = 'из-за удаления или переименования реквизит ""%1"" недоступен для заполнения атрибутов %2'");

	Для Каждого СодержимоеКатегории Из Ошибки Цикл
		МассивОшибокКатегории = Новый Массив;
		Для Каждого СодержимоеПоля Из СодержимоеКатегории.Значение Цикл
			АтрибутыПоля = СтрСоединить(СодержимоеПоля.Значение, ", ");
			МассивОшибокКатегории.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				?(СодержимоеПоля.Значение.Количество() = 1, ШаблонОшибкиПоля1, ШаблонОшибкиПоля2),
				СодержимоеПоля.Ключ,
				АтрибутыПоля));
		КонецЦикла;

		Если МассивОшибокКатегории.Количество() Тогда
			РезультатЗаполнения.ОписаниеОшибокКатегорий.Вставить(СодержимоеКатегории.Ключ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстаОшибки,
					СодержимоеКатегории.Ключ,
					СтрСоединить(МассивОшибокКатегории, ";" + Символы.ПС)));
		КонецЕсли;
	КонецЦикла;

	// Подготовка таблицы атрибутов.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки =
			КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	Для Каждого НаборДанных Из МакетКомпоновки.НаборыДанных Цикл
		ИсправитьЗапросВНаборахДанныхДляСтроковыхДополнительныхЗначений(НаборДанных);
	КонецЦикла;
			
	ВнешниеНаборы = Новый Структура("ДанныеПубликации", ДанныеПубликации);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);

	ТаблицаЗначенийРеквизитов = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначенийРеквизитов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	// Замена имен колонок таблицы значений реквизитов на псевдонимы из таблицы псевдонимов полей.
	ЯчейкиМакета = Новый Массив;
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
		ЯчейкиМакета = Макет.Макет.Ячейки;
		Прервать;
	КонецЦикла;

	Для Каждого ЯчейкаМакета Из ЯчейкиМакета Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(ЯчейкаМакета.Заголовок, "ИмяПоля");
		Если СтрокаИмениПоля <> Неопределено Тогда
			КолонкаТаблицы = ТаблицаЗначенийРеквизитов.Колонки[ЯчейкаМакета.Имя];
			КолонкаТаблицы.Имя = ЯчейкаМакета.Заголовок;
			КолонкаТаблицы.Заголовок = СтрокаИмениПоля.ПолныйПутьКРеквизиту1С;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ИсключенноеПоле Из МассивДублейПолей Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(ИсключенноеПоле, "ИмяПоля");
		Если СтрокаИмениПоля <> Неопределено Тогда
			ТаблицаЗначенийРеквизитов.Колонки.Добавить(ИсключенноеПоле,, СтрокаИмениПоля.ПолныйПутьКРеквизиту1С);
		КонецЕсли;
	КонецЦикла;

	ТаблицаЗначенийРеквизитов.Колонки.Добавить("СтрокаОбработана", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы для получения соответствия значений реквизитов 1С значениям атрибутов маркетплейса.
	ТаблицаДанныхАтрибутов = ТаблицаНастроекПолейКатегорий1С.СкопироватьКолонки();

	МассивТипов = НовыеПростыеТипы();
	Для Каждого Колонка Из ТаблицаЗначенийРеквизитов.Колонки Цикл
		Для Каждого ТипКолонки Из Колонка.ТипЗначения.Типы() Цикл
			Если ТипКолонки = Тип("Null") Тогда
				Продолжить;
			КонецЕсли;

			МассивТипов.Добавить(ТипКолонки);
		КонецЦикла;
	КонецЦикла;

	ТаблицаДанныхАтрибутов.Колонки.Добавить("ЗначениеРеквизита1С", Новый ОписаниеТипов(МассивТипов));
	ТаблицаДанныхАтрибутов.Колонки.Добавить("ЗначениеРеквизитаОбъект1С", Новый ОписаниеТипов(МассивТипов,, Новый КвалификаторыСтроки(1000)));
	
	ДобавленныеОсновныеПоля = Новый Соответствие;
	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;
		Если ТаблицаДанныхАтрибутов.Колонки.Найти(Поле.ПутьКДанным) = Неопределено Тогда
			ТаблицаДанныхАтрибутов.Колонки.Добавить(Поле.ПутьКДанным, Поле.ТипЗначенияПоля);
			ДобавленныеОсновныеПоля.Вставить(Поле.ПутьКДанным, Поле.ПолеКомпоновкиДанных);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаДанных Из ТаблицаЗначенийРеквизитов Цикл
		Для Каждого Колонка Из ТаблицаЗначенийРеквизитов.Колонки Цикл
			Если ПустаяСтрока(Колонка.Заголовок) Тогда
				Продолжить;
			КонецЕсли;

			Отбор = Новый Структура("ПолныйПутьКРеквизиту1С", Колонка.Заголовок); 

			ИмяКолонкиКатегории = "Категория1С_" + ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДанных.ИсточникКатегории);
			ДобавленноеПоле = ДобавленныеОсновныеПоля.Получить(ИмяКолонкиКатегории);
			Если ДобавленноеПоле <> Неопределено Тогда
				СтрокаИмениПоля = ТаблицаИменПолей.Найти(ДобавленноеПоле, "ПолныйПутьКРеквизиту1С");
				Если СтрокаИмениПоля <> Неопределено Тогда
					ИмяКолонкиКатегории = СтрокаИмениПоля.ИмяПоля;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Отбор.Вставить("Категория1С", СтрокаДанных[ИмяКолонкиКатегории]);

			Если Не ПустаяСтрока(СтрокаДанных.ИдентификаторКатегорииМаркетплейса) Тогда
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаДанных.ИдентификаторКатегорииМаркетплейса);
			КонецЕсли;

			СтрокиПолейКатегории1С = ТаблицаНастроекПолейКатегорий1С.НайтиСтроки(Отбор);

			Если СтрокиПолейКатегории1С.Количество() > 0 Тогда
				СтрокаДанных.СтрокаОбработана = Истина;

				Для Каждого СтрокаПолейКатегории1С Из СтрокиПолейКатегории1С Цикл
					НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолейКатегории1С);

					Если ДобавленныеОсновныеПоля.Количество() > 0 Тогда
						Для Каждого Поле Из ДобавленныеОсновныеПоля Цикл
							СтрокаИмениПоля = ТаблицаИменПолей.Найти(Поле.Значение, "ПолныйПутьКРеквизиту1С");
							Если СтрокаИмениПоля <> Неопределено Тогда
								НоваяСтрока[Поле.Ключ] = СтрокаДанных[СтрокаИмениПоля.ИмяПоля];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

					НоваяСтрока.ЗначениеРеквизита1С       = СтрокаДанных[Колонка.Имя];
					НоваяСтрока.ЗначениеРеквизитаОбъект1С = НоваяСтрока.ЗначениеРеквизита1С;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Отбор = Новый Структура("СтрокаОбработана", Ложь);
	СтрокиБезПравилСопоставления = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
	Для Каждого СтрокаДанных Из СтрокиБезПравилСопоставления Цикл
		НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.ИдентификаторИсточникаКатегорииМаркетплейса = "";
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = "";
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "";
		НоваяСтрока.ИдентификаторЗначенияПоУмолчанию = "";
		НоваяСтрока.НаименованиеАтрибутаМаркетплейса = "";
		НоваяСтрока.ПолныйПутьКРеквизиту1С = "";
		НоваяСтрока.ПредставлениеРеквизита1С = "";
		НоваяСтрока.ОбязательныйАтрибут = Ложь;
		НоваяСтрока.АспектныйАтрибут = Ложь;
		НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
		НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
		НоваяСтрока.МаксимальноеКоличествоЗначений = 0;
	КонецЦикла;

	Если МассивНезаполненныхСопоставлений.Количество() > 0 Тогда
		ИменаКолонок = "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка, ИсточникКатегории, Категория1С, ИсточникКатегорииМаркетплейса, ИдентификаторКатегорииМаркетплейса";
		ТаблицаПубликуемыхТоваров = ТаблицаДанныхАтрибутов.Скопировать(, ИменаКолонок);
		ТаблицаПубликуемыхТоваров.Свернуть(ИменаКолонок);
		ТаблицаПубликуемыхТоваров.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, Категория1С, ИсточникКатегорииМаркетплейса");

		Для Каждого СтрокаДанных Из МассивНезаполненныхСопоставлений Цикл
			Отбор = Новый Структура("УчетнаяЗаписьМаркетплейса, Категория1С, ИсточникКатегорииМаркетплейса");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
			СтрокиПубликации = ТаблицаПубликуемыхТоваров.НайтиСтроки(Отбор);

			Для Каждого СтрокаПубликации Из СтрокиПубликации Цикл
				Если Не ПустаяСтрока(СтрокаПубликации.ИдентификаторКатегорииМаркетплейса)
					И СтрокаПубликации.ИдентификаторКатегорииМаркетплейса <> СтрокаДанных.ИдентификаторКатегорииМаркетплейса Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПубликации);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	РезультатЗаполнения.ТаблицаДанныхАтрибутов = ТаблицаДанныхАтрибутов;

	Возврат РезультатЗаполнения;

КонецФункции

Функция ТаблицаЗначенийРеквизитов(ДанныеОбъекта)

	ТаблицаЗначенийРеквизитовВХранилище = Неопределено;

	Если ДанныеОбъекта <> Неопределено Тогда
		ТаблицаЗначенийРеквизитовВХранилище = ДанныеОбъекта.Получить();
	КонецЕсли;

	Если ТипЗнч(ТаблицаЗначенийРеквизитовВХранилище) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначенийРеквизитовВХранилище = НоваяТаблицаЗначенийРеквизитов();
	КонецЕсли;

	Возврат ТаблицаЗначенийРеквизитовВХранилище;

КонецФункции

Функция СоставныеЧастиТекстаЗапросаПолученияНастроекСоответствияАтрибутов()

	ЧастиТекстаЗапроса = Новый Структура;

	ЧастиТекстаЗапроса.Вставить("Пролог",
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории
		|ПОМЕСТИТЬ ВыборкаДанныхПубликации
		|ИЗ
		|	&ДанныеПубликации КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ТаблицаДанных.Номенклатура
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|			ТОГДА ТаблицаДанных.Номенклатура.ТоварнаяКатегория
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ТаблицаДанных.Номенклатура.ВидНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория1С
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	ВыборкаДанныхПубликации КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаДанныхПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК НомерИтерации,
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаДанных.Категория1С КАК Категория1С,
		|	ТаблицаДанных.Категория1С КАК РодительКатегории1С,
		|	ЛОЖЬ КАК ЗаписьОбработана,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С, """") КАК ИдентификаторКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса, """") КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса, """") КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса, """") КАК ИдентификаторАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса, """") КАК НаименованиеАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С, """") КАК ПолныйПутьКРеквизиту1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С, """") КАК ПредставлениеРеквизита1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут, ЛОЖЬ) КАК ОбязательныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.АспектныйАтрибут, ЛОЖЬ) КАК АспектныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений, ЛОЖЬ) КАК ЯвляетсяКоллекциейЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка, ЛОЖЬ) КАК ДоступенВыборЗначенияИзСписка,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.МаксимальноеКоличествоЗначений, 0) КАК МаксимальноеКоличествоЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута, """") КАК ТипЗначенияАтрибута,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчаниюИзЗапроса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрока, """") КАК ЗначениеПоУмолчаниюСтрока,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗначенияПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПорядокСортировки, 0) КАК ПорядокСортировки,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута, """") КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ТаблицаАнализа1
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Категория1С = СоответствияАтрибутовМаркетплейсов.Категория1С
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАнализа.НомерИтерации КАК НомерИтерации,
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С КАК РодительКатегории1С,
		|	ЗаписьОбработана КАК ЗаписьОбработана
		|ПОМЕСТИТЬ ТаблицаКатегорий1
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа");

	ЧастиТекстаЗапроса.Вставить("Разделитель", "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	ЧастиТекстаЗапроса.Вставить("Рефрен",
		"ВЫБРАТЬ
		|	ТаблицаКатегорий.НомерИтерации + 1 КАК НомерИтерации,
		|	ТаблицаКатегорий.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаКатегорий.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаКатегорий.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаКатегорий.Категория1С КАК Категория1С,
		|	ТаблицаКатегорий.РодительКатегории1С.Родитель КАК РодительКатегории1С,
		|	ЛОЖЬ КАК ЗаписьОбработана,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С, """") КАК ИдентификаторКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса, """") КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса, """") КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса, """") КАК ИдентификаторАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса, """") КАК НаименованиеАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С, """") КАК ПолныйПутьКРеквизиту1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С, """") КАК ПредставлениеРеквизита1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут, ЛОЖЬ) КАК ОбязательныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.АспектныйАтрибут, ЛОЖЬ) КАК АспектныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений, ЛОЖЬ) КАК ЯвляетсяКоллекциейЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка, ЛОЖЬ) КАК ДоступенВыборЗначенияИзСписка,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.МаксимальноеКоличествоЗначений, 0) КАК МаксимальноеКоличествоЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута, ЛОЖЬ) КАК ТипЗначенияАтрибута,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчаниюИзЗапроса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрока, """") КАК ЗначениеПоУмолчаниюСтрока,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗначенияПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПорядокСортировки, 0) КАК ПорядокСортировки,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута, """") КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ТаблицаАнализа2
		|ИЗ
		|	ТаблицаКатегорий1 КАК ТаблицаКатегорий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаКатегорий.УчетнаяЗаписьМаркетплейса = СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаКатегорий.РодительКатегории1С.Родитель = СоответствияАтрибутовМаркетплейсов.Категория1С
		|ГДЕ
		|	ТаблицаКатегорий.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И НЕ ТаблицаКатегорий.ЗаписьОбработана
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.НомерИтерации КАК НомерИтерации,
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ИСТИНА,
		|	ТаблицаАнализа.ИдентификаторКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут,
		|	ТаблицаАнализа.АспектныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.МаксимальноеКоличествоЗначений,
		|	ТаблицаАнализа.ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюИзЗапроса,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюСтрока,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаКатегорий1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАнализа.НомерИтерации КАК НомерИтерации,
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С КАК РодительКатегории1С,
		|	ТаблицаАнализа.ЗаписьОбработана КАК ЗаписьОбработана
		|ПОМЕСТИТЬ ТаблицаКатегорий2
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАнализа.Категория1С КАК Категория1С
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ВЫРАЗИТЬ(ТаблицаАнализа.РодительКатегории1С КАК Справочник.Номенклатура).Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = """"");

	ЧастиТекстаЗапроса.Вставить("Эпилог",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.НомерИтерации КАК НомерИтерации,
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С КАК ИсточникКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторКатегории1С КАК ИдентификаторИсточникаКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	ТаблицаАнализа.АспектныйАтрибут КАК АспектныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
		|	ТаблицаАнализа.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюИзЗапроса КАК ЗначениеПоУмолчаниюИзЗапроса,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюСтрока КАК ЗначениеПоУмолчаниюСтрока,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки КАК ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ВТ_Результат
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
		|		ПО ТаблицаАнализа.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
		|			И (СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
		|			И СоответствияКатегорий.ИдентификаторВладельцаОбъектаМаркетплейса = """"
		|			И ТаблицаАнализа.РодительКатегории1С = СоответствияКатегорий.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы <> """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.НомерИтерации,
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут,
		|	ТаблицаАнализа.АспектныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.МаксимальноеКоличествоЗначений,
		|	ТаблицаАнализа.ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюИзЗапроса,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюСтрока,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
		|		ПО ТаблицаАнализа.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
		|			И (СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
		|			И СоответствияКатегорий.ИдентификаторВладельцаОбъектаМаркетплейса = """"
		|			И ТаблицаАнализа.РодительКатегории1С = СоответствияКатегорий.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы = """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ    
		|	ВТ_Результат.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТ_Результат.ИсточникКатегории КАК ИсточникКатегории,
		|	ВТ_Результат.Категория1С КАК Категория1С,
		|	ВТ_Результат.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
		|	ВТ_Результат.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
		|	ВТ_Результат.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВТ_Результат.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ВТ_Результат.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ВТ_Результат.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ВТ_Результат.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	ВТ_Результат.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
		|	ВТ_Результат.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	ВТ_Результат.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	ВТ_Результат.АспектныйАтрибут КАК АспектныйАтрибут,
		|	ВТ_Результат.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	ВТ_Результат.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	ВТ_Результат.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
		|	ВТ_Результат.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	ВТ_Результат.ЗначениеПоУмолчаниюИзЗапроса КАК ЗначениеПоУмолчаниюИзЗапроса,
		|	ВТ_Результат.ЗначениеПоУмолчаниюСтрока КАК ЗначениеПоУмолчаниюСтрока,
		|	ВТ_Результат.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ВТ_Результат.ПорядокСортировки КАК ПорядокСортировки,
		|	ВТ_Результат.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута
		|ИЗ
		|	ВТ_Результат КАК ВТ_Результат
		|ГДЕ
		|	(ВТ_Результат.НомерИтерации, ИСТИНА) В
		|		(ВЫБРАТЬ
		|			МИНИМУМ(Итерации.НомерИтерации) КАК НомерИтерации,
		|			ИСТИНА
		|		ИЗ
		|			ВТ_Результат КАК Итерации
		|		ГДЕ
		|			ВТ_Результат.УчетнаяЗаписьМаркетплейса = Итерации.УчетнаяЗаписьМаркетплейса
		|			И ВТ_Результат.Категория1С = Итерации.Категория1С)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Результат");

	Возврат ЧастиТекстаЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиДанныхТаблицыИсточника(ПолучитьАтрибуты, ОбновитьАтрибуты, ПолучитьОбъектыПубликации)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	&ДополнительныеПоляВыборки
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ТаблицаДанных.Категория1С КАК Категория1С,
				|	ТаблицаДанных.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.АспектныйАтрибут КАК АспектныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ЗначениеРеквизитаОбъект1С КАК ЗначениеРеквизитаОбъект1С,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(СТРОКА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = """"
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = 0
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ДАТА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = ДАТАВРЕМЯ(1, 1, 1)
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(БУЛЕВО)
				|			ТОГДА ЛОЖЬ
				|		КОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = НЕОПРЕДЕЛЕНО
				|			ТОГДА ИСТИНА
				|		КОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С ЕСТЬ NULL
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК НеЗаполненРеквизит1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута");
	ИначеЕсли ПолучитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Категория1С,
				|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ИсточникКатегорииМаркетплейса,
				|	"""" КАК ИдентификаторКатегорииМаркетплейса");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
	КонецЕсли;

	Если ПолучитьАтрибуты И ПолучитьОбъектыПубликации Тогда
		ТекстЗапроса = ТекстЗапроса + "
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Упаковка";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПодготовкиВременнойТаблицыДляПолученияОбъектовПубликации(ПолучитьАтрибуты)

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликации
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка";
	
	Если ПолучитьАтрибуты Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеПубликации", "ТаблицаДанныхПубликации");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиДанныхПоТоварамПубликации(ПолучитьАтрибуты, ОбновитьАтрибуты)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА &ОбновитьКатегориюМаркетплейса
		|				ИЛИ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, ТаблицаДанных.ИдентификаторКатегорииМаркетплейса) = """"
		|			ТОГДА ТаблицаДанных.ИдентификаторКатегорииМаркетплейса
		|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, ТаблицаДанных.ИдентификаторКатегорииМаркетплейса)
		|	КОНЕЦ КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеКатегорииМаркетплейса, """") КАК НаименованиеКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
		|	&ДополнительныеПоляВыборки
		|ПОМЕСТИТЬ ТаблицаДанныхПубликации
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|			И ТаблицаДанных.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
		|			И ТаблицаДанных.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И НЕ &ОбновитьКатегориюМаркетплейса
		|			И (&УсловиеСоединения)";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	"""" КАК НаименованиеОбъектаМаркетплейса,
				|	"""" КАК ПредставлениеОбъектаМаркетплейса,
				|	СправНоменклатура.Описание КАК ОписаниеОбъектаМаркетплейса,
				|	ВЫБОР
				|		КОГДА &ОбновитьКатегориюМаркетплейса
				|			ТОГДА ТаблицаДанных.Категория1С
				|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Категория, ТаблицаДанных.Категория1С)
				|	КОНЕЦ КАК Категория1С,
				|	ВЫБОР
				|		КОГДА &ОбновитьКатегориюМаркетплейса
				|			ТОГДА ТаблицаДанных.ИсточникКатегорииМаркетплейса
				|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, ТаблицаДанных.ИсточникКатегорииМаркетплейса)
				|	КОНЕЦ КАК ИсточникКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.АспектныйАтрибут КАК АспектныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ЗначениеРеквизитаОбъект1С КАК ЗначениеРеквизитаОбъект1С,
				|	ТаблицаДанных.НеЗаполненРеквизит1С КАК НеЗаполненРеквизит1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	"""" КАК Штрихкод");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
		
	ИначеЕсли ПолучитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса, """") КАК ПредставлениеОбъектаМаркетплейса,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ОписаниеОбъектаМаркетплейса, """") = """"
				|			ТОГДА СправНоменклатура.Описание
				|		ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ОписаниеОбъектаМаркетплейса
				|	КОНЕЦ КАК ОписаниеОбъектаМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Категория, 
				|		ВЫБОР
				|			КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
				|				ТОГДА СправНоменклатура.ВидНоменклатуры
				|			КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
				|				ТОГДА СправНоменклатура.Ссылка
				|			КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
				|				ТОГДА СправНоменклатура.ТоварнаяКатегория
				|			ИНАЧЕ НЕОПРЕДЕЛЕНО
				|		КОНЕЦ) КАК Категория1С,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, НЕОПРЕДЕЛЕНО) КАК ИсточникКатегорииМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Штрихкод, """") КАК Штрихкод");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиИтоговыхДанныхПоАтрибутам(ПолучитьАтрибуты, ОбновитьАтрибуты)

	Если ПолучитьАтрибуты Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ЕСТЬNULL(СправВалюты.Наименование, """") КАК КодВалюты,
			|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка,
			|	ТаблицаДанных.Категория1С КАК Категория1С,
			|	ТаблицаДанных.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
			|	ЕСТЬNULL(СоответствияКатегорий.НаименованиеОбъектаМаркетплейса, ТаблицаДанных.НаименованиеКатегорииМаркетплейса) КАК НаименованиеКатегорииМаркетплейса,
			|	(СоответствияКатегорий.НаименованиеОбъектаМаркетплейса ЕСТЬ NULL) КАК НеактивнаяКатегорияМаркетплейса,
			|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
			|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
			|	ТаблицаДанных.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	ТаблицаДанных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	ТаблицаДанных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
			|	ТаблицаДанных.ОписаниеОбъектаМаркетплейса КАК ОписаниеОбъектаМаркетплейса,
			|	ТаблицаДанных.Штрихкод КАК Штрихкод,
			|	ТаблицаДанных.ДанныеОбъекта КАК ДанныеОбъекта,
			|	СправУчетныеЗаписиМаркетплейсов.Организация КАК Организация,
			|	0 КАК СчетчикРеквизитов,
			|	&ДополнительныеПоляВыборки
			|ИЗ
			|	ТаблицаДанныхПубликации КАК ТаблицаДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписиМаркетплейсов
			|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписиМаркетплейсов.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправВалюты
			|		ПО СправУчетныеЗаписиМаркетплейсов.ВалютаУчета = СправВалюты.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
			|		ПО ТаблицаДанных.ИсточникКатегорииМаркетплейса = СоответствияКатегорий.Объект1С
			|			И ТаблицаДанных.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
			|			И ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
			|			И СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
			|			И (&СоединениеРезультирующейТаблицы)
			|
			|ИТОГИ
			|	МИНИМУМ(Упаковка),
			|	МИНИМУМ(ИдентификаторПубликации),
			|	МИНИМУМ(ИдентификаторОбъектаМаркетплейса),
			|	МИНИМУМ(ИсточникКатегории),
			|	МИНИМУМ(Категория1С),
			|	МИНИМУМ(КодВалюты),
			|	МИНИМУМ(ИсточникКатегорииМаркетплейса),
			|	МИНИМУМ(ИдентификаторКатегорииМаркетплейса),
			|	МИНИМУМ(Организация),
			|	СУММА(СчетчикРеквизитов),
			|	МИНИМУМ(Штрихкод)
			|ПО
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Характеристика";

		Если ОбновитьАтрибуты Тогда
			// Дополнение полей раздела ИТОГИ ПО.
			ТекстЗапроса = ТекстЗапроса + ",
					|	Упаковка";

			// Уничтожение временной таблицы.
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "УНИЧТОЖИТЬ ЕдиницыИзмеренияВесогабаритныхХарактеристик";

			// Добавление вычисления счетчика реквизитов товара.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК СчетчикРеквизитов", "ВЫБОР
				|		КОГДА ТаблицаДанных.ПолныйПутьКРеквизиту1С = """"
				|			ТОГДА 0
				|		ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
				|	КОНЕЦ КАК СчетчикРеквизитов");

			// Добавление полей выборки.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.АспектныйАтрибут КАК АспектныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.МаксимальноеКоличествоЗначений КАК МаксимальноеКоличествоЗначений,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса = """"
				|			ТОГДА 3
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Уровень,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|			ТОГДА ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, NULL)
				|		КОГДА ТаблицаДанных.ТипЗначенияАтрибута В (&ТипыЧисло) И ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ВЫРАЗИТЬ(ТаблицаДанных.ЗначениеРеквизита1С КАК ЧИСЛО) * ЕСТЬNULL(ЕдиницыИзмеренияВесогабаритныхХарактеристик.КоэффициентПересчета, 1)
				|		ИНАЧЕ 
				|			NULL
				|	КОНЕЦ КАК ЗначениеАтрибутаМаркетплейса,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|			ТОГДА ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию)
				|		КОГДА ТаблицаДанных.НеЗаполненРеквизит1С
				|			ТОГДА ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ИдентификаторЗначенияАтрибутаМаркетплейса,
				|	ТаблицаДанных.НеЗаполненРеквизит1С КАК НеЗаполненРеквизит1С,
				|	НЕ ТаблицаДанных.НеЗаполненРеквизит1С
				|		И ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|		И СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса ЕСТЬ NULL КАК НеЗаполненоСоответствиеАтрибута,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С = """" КАК НеЗаполненПутьКРеквизиту1С,
				|	ЛОЖЬ КАК ЗначениеАтрибутаЗаданоПользователем");

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&СоединениеРезультирующейТаблицы)", "ИСТИНА
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
				|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса
				|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
				|			И (ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса + ""/"" + ТаблицаДанных.ИдентификаторКатегорииМаркетплейса + ""/"" + ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса)
				|			И ТаблицаДанных.ЗначениеРеквизитаОбъект1С = СоответствияОбъектовМаркетплейсов.Объект1С
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЕдиницыИзмеренияВесогабаритныхХарактеристик КАК ЕдиницыИзмеренияВесогабаритныхХарактеристик
				|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ЕдиницыИзмеренияВесогабаритныхХарактеристик.УчетнаяЗаписьМаркетплейса
				|			И ТаблицаДанных.Номенклатура = ЕдиницыИзмеренияВесогабаритныхХарактеристик.Номенклатура
				|			И ТаблицаДанных.Характеристика = ЕдиницыИзмеренияВесогабаритныхХарактеристик.Характеристика
				|			И ТаблицаДанных.Упаковка = ЕдиницыИзмеренияВесогабаритныхХарактеристик.Упаковка
				|			И ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = ЕдиницыИзмеренияВесогабаритныхХарактеристик.ИдентификаторАтрибутаМаркетплейса
				|
				|УПОРЯДОЧИТЬ ПО
				|	Уровень,
				|	ОбязательныйАтрибут УБЫВ,
				|	НаименованиеРодителяАтрибутаМаркетплейса,
				|	ПорядокСортировки,
				|	НаименованиеАтрибутаМаркетплейса");
		Иначе
			// Замена неиспользованных параметров.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&СоединениеРезультирующейТаблицы)", "ИСТИНА");
		КонецЕсли;
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка,
			|	СправУчетныеЗаписиМаркетплейсов.Организация КАК Организация
			|ИЗ
			|	ДанныеПубликации КАК ТаблицаДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписиМаркетплейсов
			|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписиМаркетплейсов.Ссылка
			|
			|ИТОГИ
			|	МИНИМУМ(Упаковка),
			|	МИНИМУМ(ИсточникКатегории),
			|	МИНИМУМ(Организация)
			|ПО 
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Характеристика";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиЦен(ОбновитьАтрибуты)

	РазделительПакетаЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();

	ИмяТаблицыТоваров = "ТаблицаДанныхПубликации";
	ТекстЗапроса = "";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка
			|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
			|ИЗ
			|	ТаблицаДанныхПубликации КАК ТаблицаДанных
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Упаковка";
		ТекстЗапроса = ТекстЗапроса + РазделительПакетаЗапросов;

		ИмяТаблицыТоваров = "ТаблицаРазличныхДанныхПубликацииДляЦен";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ОтносительныеКурсыВСрезПоследних.Валюта КАК Валюта,
		|	ОтносительныеКурсыВСрезПоследних.КурсЧислитель КАК КурсЧислитель,
		|	ОтносительныеКурсыВСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&ТекущаяДатаСеанса, БазоваяВалюта = &БазоваяВалюта) КАК ОтносительныеКурсыВСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка КАК УчетнаяЗаписьМаркетплейса,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка.ВалютаУчета КАК ВалютаУчета,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.ИмяНастройки КАК ИмяНастройки,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаРазличныхДанныхПубликацииДляЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК УчетныеЗаписиМаркетплейсовВидыЦен
		|		ПО ТаблицаРазличныхДанныхПубликацииДляЦен.УчетнаяЗаписьМаркетплейса = УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ВидыЦен.ВалютаУчета КАК ВалютаУчета,
		|	ВидыЦен.ВидЦены КАК ВидЦены,
		|	ВидыЦен.ИмяНастройки КАК ИмяНастройки,
		|	&ПоляДляЦенообразованияВыборка
		|ПОМЕСТИТЬ ПодготовленнаяТаблицаВидовЦен
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ТаблицаДанных.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ВидыЦен.УчетнаяЗаписьМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВидыЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	&ПоляДляЦенообразованияСрез,
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки1 ЕСТЬ NULL
		|					И &ТекстЗапросаКоэффициентУпаковки1 <> 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / &ТекстЗапросаКоэффициентУпаковки1
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|		КОНЕЦ * (ЕСТЬNULL(КурсыВалют.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютУчета.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютУчета.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1))) КАК ЧИСЛО(31, 2)) КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	ИсточникЦенНоменклатуры КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленнаяТаблицаВидовЦен КАК ТаблицаДанных
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютУчета
		|		ПО (ТаблицаДанных.ВалютаУчета = КурсыВалютУчета.Валюта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ВидЦены КАК ВидЦены,
		|	ТаблицаДанных.ИмяНастройки КАК ИмяНастройки,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки2 ЕСТЬ NULL
		|					И &ТекстЗапросаКоэффициентУпаковки2 <> 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * &ТекстЗапросаКоэффициентУпаковки2
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|		КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена
		|ИЗ
		|	ПодготовленнаяТаблицаВидовЦен КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПодготовленнаяТаблицаВидовЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсыВалют";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДанных", ИмяТаблицыТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ИсточникЦенНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры(
							"ПодготовленнаяТаблицаВидовЦен",
							"&ТекущаяДатаСеанса",
							Новый Структура("ВТаблице", "ВидЦены")));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
		"ТаблицаДанных",
		"ЦеныНоменклатуры", "&ИсточникТоваров.ВидЦены"));

	НастройкаЦенообразования = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "ТаблицаДанных";
	НастройкаЦенообразования.ПолеСерия = "";

	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка", ТекстЗамены);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка", "ИСТИНА");
	КонецЕсли;

	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	Если ИспользуетсяЦенообразование25 Тогда
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.ХарактеристикаЦО КАК ХарактеристикаЦО,
			|	ЦеныНоменклатуры.СерияЦО КАК СерияЦО,
			|	ЦеныНоменклатуры.УпаковкаЦО КАК УпаковкаЦО";
	Иначе
		ПоляДляЦенообразованияСрез = 
			"ЦеныНоменклатуры.Характеристика КАК Характеристика,
			|	ЦеныНоменклатуры.Упаковка КАК Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияСрез", ПоляДляЦенообразованияСрез);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"(ВЫБОР
		|	КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
		|	ИНАЧЕ ЦеныНоменклатуры.Упаковка
		|	КОНЕЦ)",
		"ЦеныНоменклатуры.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"(ВЫБОР
		|	КОГДА ТаблицаДанных.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА СправНоменклатура.ЕдиницаИзмерения
		|	ИНАЧЕ ТаблицаДанных.Упаковка
		|	КОНЕЦ)",
		"ТаблицаДанных.Номенклатура"));

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = ТекстЗапроса + РазделительПакетаЗапросов +
			"УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиШтрихкодов()

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
		|ИЗ
		|	ТаблицаРазличныхДанныхПубликацииДляЦен КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ТаблицаТоваров.Упаковка = ШтрихкодыНоменклатуры.Упаковка
		|ГДЕ
		|	ТаблицаТоваров.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	ТаблицаТоваров.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	ТаблицаРазличныхДанныхПубликацииДляЦен КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И (ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	МИНИМУМ(ШтрихкодыНоменклатуры.Порядок) КАК Порядок
		|ПОМЕСТИТЬ МинимальныйПорядокШтрихкодов
		|ИЗ
		|	ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыНоменклатуры.Упаковка,
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаШтрихкодов
		|ИЗ
		|	МинимальныйПорядокШтрихкодов КАК МинимальныйПорядокШтрихкодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО МинимальныйПорядокШтрихкодов.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И МинимальныйПорядокШтрихкодов.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И МинимальныйПорядокШтрихкодов.Упаковка = ШтрихкодыНоменклатуры.Упаковка
		|			И МинимальныйПорядокШтрихкодов.Порядок = ШтрихкодыНоменклатуры.Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МинимальныйПорядокШтрихкодов";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиИзображений(ИмяТаблицыТоваров)

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	СправПрисоединенныеФайлы.Ссылка КАК ОбъектПубликации,
		|	ПРЕДСТАВЛЕНИЕ(СправПрисоединенныеФайлы.Ссылка) КАК НаименованиеОбъектаМаркетплейса,
		|	СправПрисоединенныеФайлы.Ссылка = СправНоменклатура.ФайлКартинки КАК ЭтоОсновноеИзображение
		|ПОМЕСТИТЬ Изображения
		|ИЗ
		|	ТаблицаИсточникДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК СправПрисоединенныеФайлы
		|		ПО ТаблицаДанных.Номенклатура = СправПрисоединенныеФайлы.ВладелецФайла
		|			И (СправПрисоединенныеФайлы.Расширение В (&РасширенияИзображенийТоваров))
		|			И (СправПрисоединенныеФайлы.ПубликуетсяВСервисах)
		|			И (НЕ СправПрисоединенныеФайлы.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ОбъектПубликации КАК ОбъектПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ТаблицаДанных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
		|	ТаблицаДанных.ЭтоОсновноеИзображение КАК ЭтоОсновноеИзображение,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса, """") КАК ПредставлениеОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)) КАК ТекущийСтатус,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации) КАК УстанавливаемыйСтатус,
		|	ИСТИНА КАК ДействующееИзображение
		|ИЗ
		|	Изображения КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ТаблицаДанных.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|			И ТаблицаДанных.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
		|			И ТаблицаДанных.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
		|			И ТаблицаДанных.ОбъектПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации
		|			И ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса,
		|	ЛОЖЬ,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется),
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточникДанных КАК ТаблицаДанных
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТаблицаДанных.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТаблицаДанных.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТаблицаДанных.Упаковка
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ТаблицаДанных.УчетнаяЗаписьМаркетплейса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК СправПрисоединенныеФайлы
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = СправПрисоединенныеФайлы.Ссылка
		|			И (СправПрисоединенныеФайлы.ПубликуетсяВСервисах)
		|			И (НЕ СправПрисоединенныеФайлы.ПометкаУдаления)
		|			И (СправПрисоединенныеФайлы.Расширение В (&РасширенияИзображенийТоваров))
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СправПрисоединенныеФайлы.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДействующееИзображение УБЫВ,
		|	НаименованиеОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Изображения";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточникДанных", ИмяТаблицыТоваров);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиСертификатов(ИмяТаблицыТоваров, УчитыватьТолькоВходящиеСертификаты = Ложь)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВходящихСертификатов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаВходящихСертификатов.Номенклатура КАК Номенклатура,
		|	ТаблицаВходящихСертификатов.Характеристика КАК Характеристика,
		|	ТаблицаВходящихСертификатов.Упаковка КАК Упаковка,
		|	ТаблицаВходящихСертификатов.СертификатНоменклатуры КАК СертификатНоменклатуры
		|ПОМЕСТИТЬ ТаблицаВходящихСертификатов
		|ИЗ
		|	&ТаблицаВходящихСертификатов КАК ТаблицаВходящихСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	СертификатыНоменклатуры.СертификатНоменклатуры КАК Сертификат
		|ПОМЕСТИТЬ ВыборкаСертификатовНоменклатуры
		|ИЗ
		|	ТаблицаИсточникДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК СертификатыНоменклатуры
		|		ПО (СправНоменклатура.ВидНоменклатуры = СертификатыНоменклатуры.ВидНоменклатуры)
		|			И ТаблицаДанных.Номенклатура = СертификатыНоменклатуры.Номенклатура
		|			И ТаблицаДанных.Характеристика = СертификатыНоменклатуры.Характеристика
		|ГДЕ
		|	ТаблицаДанных.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура,
		|	ТаблицаДанных.Характеристика,
		|	ТаблицаДанных.Упаковка,
		|	СертификатыНоменклатуры.СертификатНоменклатуры
		|ИЗ
		|	ТаблицаИсточникДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК СертификатыНоменклатуры
		|		ПО (СправНоменклатура.ВидНоменклатуры = СертификатыНоменклатуры.ВидНоменклатуры)
		|			И ТаблицаДанных.Номенклатура = СертификатыНоменклатуры.Номенклатура
		|			И (СертификатыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура,
		|	ТаблицаДанных.Характеристика,
		|	ТаблицаДанных.Упаковка,
		|	СертификатыНоменклатуры.СертификатНоменклатуры
		|ИЗ
		|	ТаблицаИсточникДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК СертификатыНоменклатуры
		|		ПО (СправНоменклатура.ВидНоменклатуры = СертификатыНоменклатуры.ВидНоменклатуры)
		|			И (СертификатыНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (СертификатыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВходящихСертификатов.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаВходящихСертификатов.Номенклатура,
		|	ТаблицаВходящихСертификатов.Характеристика,
		|	ТаблицаВходящихСертификатов.Упаковка,
		|	ТаблицаВходящихСертификатов.СертификатНоменклатуры
		|ИЗ
		|	ТаблицаВходящихСертификатов КАК ТаблицаВходящихСертификатов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сертификат,
		|	УчетнаяЗаписьМаркетплейса,
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.Сертификат КАК Сертификат
		|ПОМЕСТИТЬ СертификатыНоменклатуры
		|ИЗ
		|	ВыборкаСертификатовНоменклатуры КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВходящихСертификатов КАК ТаблицаВходящихСертификатов
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ТаблицаВходящихСертификатов.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Номенклатура = ТаблицаВходящихСертификатов.Номенклатура
		|			И ТаблицаДанных.Характеристика = ТаблицаВходящихСертификатов.Характеристика
		|			И ТаблицаДанных.Упаковка = ТаблицаВходящихСертификатов.Упаковка
		|			И ТаблицаДанных.Сертификат = ТаблицаВходящихСертификатов.СертификатНоменклатуры
		|ГДЕ
		|	ТаблицаВходящихСертификатов.СертификатНоменклатуры ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаСертификатовНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СертификатыНоменклатуры.Сертификат КАК Сертификат,
		|	СправПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл
		|ИЗ
		|	СертификатыНоменклатуры КАК СертификатыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СправСертификатыНоменклатуры
		|		ПО СертификатыНоменклатуры.Сертификат = СправСертификатыНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатурыПрисоединенныеФайлы КАК СправПрисоединенныеФайлы
		|		ПО СертификатыНоменклатуры.Сертификат = СправПрисоединенныеФайлы.ВладелецФайла
		|			И (НЕ СправПрисоединенныеФайлы.ПометкаУдаления)
		|ГДЕ
		|	НЕ СправПрисоединенныеФайлы.ПометкаУдаления
		|	И СправПрисоединенныеФайлы.Расширение В(&РасширенияИзображенийСертификатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыНоменклатуры.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СертификатыНоменклатуры.Номенклатура КАК Номенклатура,
		|	СертификатыНоменклатуры.Характеристика КАК Характеристика,
		|	СертификатыНоменклатуры.Упаковка КАК Упаковка,
		|	СертификатыНоменклатуры.Сертификат КАК ОбъектПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииСертификатов.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ПРЕДСТАВЛЕНИЕ(СправСертификатыНоменклатуры.Ссылка) КАК НаименованиеОбъектаМаркетплейса,
		|	СправСертификатыНоменклатуры.Номер КАК НомерСертификата,
		|	СправСертификатыНоменклатуры.ДатаНачалаСрокаДействия КАК ДатаНачалаСрокаДействия,
		|	ВЫБОР
		|		КОГДА СправСертификатыНоменклатуры.Бессрочный
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ СправСертификатыНоменклатуры.ДатаОкончанияСрокаДействия
		|	КОНЕЦ КАК ДатаОкончанияСрокаДействия,
		|	СправСертификатыНоменклатуры.ТипСертификата КАК ТипСертификата1С,
		|	СправСертификатыНоменклатуры.СтатусРосаккредитации КАК СтатусРосаккредитации,
		|	СправСертификатыНоменклатуры.ДатаОбновленияСтатусаРосаккредитации КАК ДатаОбновленияСтатусаРосаккредитации,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторТипаСертификата,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеТипаСертификата,
		|	ЕСТЬNULL(СтатусыПубликацииСертификатов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииСертификатов.ПредставлениеОбъектаМаркетплейса, """") КАК ПредставлениеОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииСертификатов.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
		|	ЕСТЬNULL(СтатусыПубликацииСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)) КАК ТекущийСтатус,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтатусыПубликацииСертификатов.ИдентификаторОбъектаМаркетплейса, """") = """"
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
		|	КОНЕЦ КАК УстанавливаемыйСтатус,
		|	ЕСТЬNULL(СтатусыПубликацииСертификатов.ИзмененыРеквизиты, ЛОЖЬ) КАК ИзмененыРеквизиты
		|ИЗ
		|	СертификатыНоменклатуры КАК СертификатыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СправСертификатыНоменклатуры
		|		ПО СертификатыНоменклатуры.Сертификат = СправСертификатыНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО СертификатыНоменклатуры.УчетнаяЗаписьМаркетплейса = СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ТипСертификата))
		|			И (СправСертификатыНоменклатуры.ТипСертификата = СоответствияОбъектовМаркетплейсов.Объект1С)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииСертификатов
		|		ПО СертификатыНоменклатуры.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииСертификатов.УчетнаяЗаписьМаркетплейса
		|			И СертификатыНоменклатуры.Номенклатура = СтатусыПубликацииСертификатов.Номенклатура
		|			И СертификатыНоменклатуры.Характеристика = СтатусыПубликацииСертификатов.Характеристика
		|			И СертификатыНоменклатуры.Упаковка = СтатусыПубликацииСертификатов.Упаковка
		|			И СертификатыНоменклатуры.Сертификат = СтатусыПубликацииСертификатов.ОбъектПубликации
		|			И (СтатусыПубликацииСертификатов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Сертификат))
		|ГДЕ
		|	СправСертификатыНоменклатуры.ПубликуетсяВСервисах
		|	И НЕ СправСертификатыНоменклатуры.ПометкаУдаления
		|	И СправСертификатыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
		|	И (СправСертификатыНоменклатуры.Бессрочный
		|			ИЛИ КОНЕЦПЕРИОДА(СправСертификатыНоменклатуры.ДатаОкончанияСрокаДействия, ДЕНЬ) >= &ТекущаяДатаСеанса)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтатусыПубликацииОбъектовСертификатов.УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовСертификатов.Номенклатура,
		|	СтатусыПубликацииОбъектовСертификатов.Характеристика,
		|	СтатусыПубликацииОбъектовСертификатов.Упаковка,
		|	СтатусыПубликацииОбъектовСертификатов.ОбъектПубликации,
		|	СтатусыПубликацииОбъектовСертификатов.ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовСертификатов.НаименованиеОбъектаМаркетплейса,
		|	ЕСТЬNULL(СправСертификатыНоменклатуры.Номер, """"),
		|	ЕСТЬNULL(СправСертификатыНоменклатуры.ДатаНачалаСрокаДействия, ДАТАВРЕМЯ(1, 1, 1)),
		|	ВЫБОР
		|		КОГДА СправСертификатыНоменклатуры.Ссылка ЕСТЬ NULL
		|				ИЛИ СправСертификатыНоменклатуры.Бессрочный
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ СправСертификатыНоменклатуры.ДатаОкончанияСрокаДействия
		|	КОНЕЦ,
		|	ЕСТЬNULL(СправСертификатыНоменклатуры.ТипСертификата, """"),
		|	ЕСТЬNULL(СправСертификатыНоменклатуры.СтатусРосаккредитации, ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка)),
		|	ЕСТЬNULL(СправСертификатыНоменклатуры.ДатаОбновленияСтатусаРосаккредитации, ДАТАВРЕМЯ(1, 1, 1)),
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """"),
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """"),
		|	СтатусыПубликацииОбъектовСертификатов.ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовСертификатов.ПредставлениеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовСертификатов.ДанныеОбъекта,
		|	СтатусыПубликацииОбъектовСертификатов.Статус,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется),
		|	СтатусыПубликацииОбъектовСертификатов.ИзмененыРеквизиты
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовСертификатов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточникДанных КАК ТаблицаДанных
		|		ПО СтатусыПубликацииОбъектовСертификатов.УчетнаяЗаписьМаркетплейса = ТаблицаДанных.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовСертификатов.Номенклатура = ТаблицаДанных.Номенклатура
		|			И СтатусыПубликацииОбъектовСертификатов.Характеристика = ТаблицаДанных.Характеристика
		|			И СтатусыПубликацииОбъектовСертификатов.Упаковка = ТаблицаДанных.Упаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СправСертификатыНоменклатуры
		|		ПО СтатусыПубликацииОбъектовСертификатов.ОбъектПубликации = СправСертификатыНоменклатуры.Ссылка
		|			И (СправСертификатыНоменклатуры.ПубликуетсяВСервисах)
		|			И (НЕ СправСертификатыНоменклатуры.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО СтатусыПубликацииОбъектовСертификатов.УчетнаяЗаписьМаркетплейса = СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ТипСертификата))
		|			И (СправСертификатыНоменклатуры.ТипСертификата = СоответствияОбъектовМаркетплейсов.Объект1С)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВходящихСертификатов КАК ТаблицаВходящихСертификатов
		|		ПО СтатусыПубликацииОбъектовСертификатов.УчетнаяЗаписьМаркетплейса = ТаблицаВходящихСертификатов.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовСертификатов.Номенклатура = ТаблицаВходящихСертификатов.Номенклатура
		|			И СтатусыПубликацииОбъектовСертификатов.Характеристика = ТаблицаВходящихСертификатов.Характеристика
		|			И СтатусыПубликацииОбъектовСертификатов.Упаковка = ТаблицаВходящихСертификатов.Упаковка
		|			И СтатусыПубликацииОбъектовСертификатов.ОбъектПубликации = ТаблицаВходящихСертификатов.СертификатНоменклатуры
		|ГДЕ
		|	СтатусыПубликацииОбъектовСертификатов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Сертификат)
		|	И (СправСертификатыНоменклатуры.Ссылка ЕСТЬ NULL
		|			ИЛИ СправСертификатыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Недействующий)
		|			ИЛИ НЕ(СправСертификатыНоменклатуры.Бессрочный
		|					ИЛИ КОНЕЦПЕРИОДА(СправСертификатыНоменклатуры.ДатаОкончанияСрокаДействия, ДЕНЬ) >= &ТекущаяДатаСеанса))
		|	И ТаблицаВходящихСертификатов.СертификатНоменклатуры ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВходящихСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СертификатыНоменклатуры";

	Если Не УчитыватьТолькоВходящиеСертификаты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаВходящихСертификатов.СертификатНоменклатуры ЕСТЬ НЕ NULL", "ИСТИНА");
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточникДанных", ИмяТаблицыТоваров);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиОбъектовПубликации(ИмяТаблицыТоваров, Знач ВидОбъектаМаркетплейса)

	Если Не ЗначениеЗаполнено(ВидОбъектаМаркетплейса) Тогда
		ВидОбъектаМаркетплейса = "ПустаяСсылка";
	КонецЕсли;

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектов.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектов.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектов.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектов.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектов.Статус КАК ТекущийСтатус,
		|	СтатусыПубликацииОбъектов.ДанныеОбъекта КАК ДанныеОбъекта,
		|	&ПоляВыборки
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектов
		|		ПО ТаблицаДанных.Номенклатура = СтатусыПубликацииОбъектов.Номенклатура
		|			И ТаблицаДанных.Характеристика = СтатусыПубликацииОбъектов.Характеристика
		|			И ТаблицаДанных.Упаковка = СтатусыПубликацииОбъектов.Упаковка
		|			И ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектов.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектов.ВидОбъектаМаркетплейса = &ВидОбъектаМаркетплейса)
		|			И (СтатусыПубликацииОбъектов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется))
		|			И (&Соединение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка,
		|	НаименованиеОбъектаМаркетплейса";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДанных", ИмяТаблицыТоваров);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ВидОбъектаМаркетплейса", 
			"ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов." + ВидОбъектаМаркетплейса + ")");

	Если ВидОбъектаМаркетплейса = "Изображение" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", "
			|	СтатусыПубликацииОбъектов.ОбъектПубликации = СправНоменклатура.ФайлКартинки КАК ЭтоОсновноеИзображение,
			|	ВЫБОР
			|		КОГДА НЕ СправИзображения.ПубликуетсяВСервисах
			|				ИЛИ СправИзображения.ПометкаУдаления
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
			|	КОНЕЦ КАК УстанавливаемыйСтатус,
			|	ИСТИНА КАК ДействующееИзображение");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&Соединение)", "ИСТИНА
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
			|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК СправИзображения
			|		ПО СтатусыПубликацииОбъектов.ОбъектПубликации = СправИзображения.Ссылка");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", "
			|	СправСертификатыНоменклатуры.СтатусРосаккредитации КАК СтатусРосаккредитации,
			|	СправСертификатыНоменклатуры.ДатаОбновленияСтатусаРосаккредитации КАК ДатаОбновленияСтатусаРосаккредитации,
			|	СтатусыПубликацииОбъектов.ИзмененыРеквизиты КАК ИзмененыРеквизиты,
			|	ВЫБОР
			|		КОГДА НЕ СправСертификатыНоменклатуры.ПубликуетсяВСервисах
			|				ИЛИ СправСертификатыНоменклатуры.ПометкаУдаления
			|				ИЛИ СправСертификатыНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Недействующий)
			|				ИЛИ СправСертификатыНоменклатуры.ДатаОкончанияСрокаДействия <> ДАТАВРЕМЯ(1, 1, 1)
			|					И КОНЕЦПЕРИОДА(СправСертификатыНоменклатуры.ДатаОкончанияСрокаДействия, ДЕНЬ) < &ТекущаяДатаСеанса
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется)
			|		КОГДА СтатусыПубликацииОбъектов.ИдентификаторОбъектаМаркетплейса <> """"
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
			|	КОНЕЦ КАК УстанавливаемыйСтатус");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&Соединение)", "ИСТИНА
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СправСертификатыНоменклатуры
			|		ПО СтатусыПубликацииОбъектов.ОбъектПубликации = СправСертификатыНоменклатуры.Ссылка");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКоэффициентовКонвертацииЕдиницВесогабаритныхХарактеристик()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВесогабаритныхХарактеристик.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаВесогабаритныхХарактеристик.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
		|	ТаблицаВесогабаритныхХарактеристик.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаВесогабаритныхХарактеристик.МеждународноеСокращение КАК МеждународноеСокращение,
		|	ТаблицаВесогабаритныхХарактеристик.Числитель КАК Числитель,
		|	ТаблицаВесогабаритныхХарактеристик.Знаменатель КАК Знаменатель
		|ПОМЕСТИТЬ ТаблицаВесогабаритныхХарактеристикПодготовленная
		|ИЗ
		|	&ТаблицаВесогабаритныхХарактеристик КАК ТаблицаВесогабаритныхХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВесогабаритныхХарактеристик.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаВесогабаритныхХарактеристик.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
		|	ТаблицаВесогабаритныхХарактеристик.МеждународноеСокращение КАК МеждународноеСокращение,
		|	ТаблицаВесогабаритныхХарактеристик.Числитель КАК Числитель,
		|	ТаблицаВесогабаритныхХарактеристик.Знаменатель КАК Знаменатель
		|ПОМЕСТИТЬ ТаблицаВесогабаритныхХарактеристик
		|ИЗ
		|	ТаблицаВесогабаритныхХарактеристикПодготовленная КАК ТаблицаВесогабаритныхХарактеристик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаВесогабаритныхХарактеристик.ИдентификаторЕдиницыИзмерения = СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса
		|			И ТаблицаВесогабаритныхХарактеристик.ИдентификаторЗначенияПоУмолчанию = СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВесогабаритныхХарактеристикПодготовленная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СправУпаковкиЕдиницыИзмерения.Числитель, 0) / ВЫБОР
		|				КОГДА ЕСТЬNULL(СправУпаковкиЕдиницыИзмерения.Знаменатель, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(СправУпаковкиЕдиницыИзмерения.Знаменатель, 0)
		|			КОНЕЦ * ТаблицаВесогабаритныхХарактеристик.Числитель / ВЫБОР
		|				КОГДА ТаблицаВесогабаритныхХарактеристик.Знаменатель = 0
		|					ТОГДА 1
		|				ИНАЧЕ ТаблицаВесогабаритныхХарактеристик.Знаменатель
		|			КОНЕЦ = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(СправУпаковкиЕдиницыИзмерения.Числитель, 0) / ВЫБОР
		|				КОГДА ЕСТЬNULL(СправУпаковкиЕдиницыИзмерения.Знаменатель, 0) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(СправУпаковкиЕдиницыИзмерения.Знаменатель, 0)
		|			КОНЕЦ * ТаблицаВесогабаритныхХарактеристик.Числитель / ВЫБОР
		|				КОГДА ТаблицаВесогабаритныхХарактеристик.Знаменатель = 0
		|					ТОГДА 1
		|				ИНАЧЕ ТаблицаВесогабаритныхХарактеристик.Знаменатель
		|			КОНЕЦ
		|	КОНЕЦ КАК КоэффициентПересчета
		|ПОМЕСТИТЬ ЕдиницыИзмеренияВесогабаритныхХарактеристик
		|ИЗ
		|	ТаблицаДанныхПубликации КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВесогабаритныхХарактеристик КАК ТаблицаВесогабаритныхХарактеристик
		|		ПО ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = ТаблицаВесогабаритныхХарактеристик.ИдентификаторАтрибутаМаркетплейса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СправУпаковкиЕдиницыИзмерения
		|		ПО ВЫРАЗИТЬ(ТаблицаДанных.ЗначениеРеквизитаОбъект1С КАК Справочник.УпаковкиЕдиницыИзмерения) = СправУпаковкиЕдиницыИзмерения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВесогабаритныхХарактеристик";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПодготовитьТаблицуДанныхВесогабаритныхХарактеристик()

	ТаблицаДанныхВесогабаритныхХарактеристик = НоваяТаблицаВесогабаритныхХарактеристик();
	КэшЗначений = Новый Структура;

	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	Для Каждого ПутьКРеквизиту Из ПутьКРеквизитам1СПоУмолчанию Цикл
		ИдентификаторЕдиницыИзмерения = Неопределено;
		Если ПутьКРеквизиту.Значение.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения) Тогда
			ДанныеЕдиницыИзмерения = Неопределено;
			КэшЗначений.Свойство(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения);
			Если ДанныеЕдиницыИзмерения = Неопределено 
				И ПутьКРеквизитам1СПоУмолчанию.Свойство(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения) Тогда
				КэшЗначений.Вставить(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения);
			Иначе
				Продолжить;
			КонецЕсли;

			СписокВыбора = Неопределено;
			ДанныеЕдиницыИзмерения.Свойство("СписокВыбора", СписокВыбора);
			Если СписокВыбора = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого ЗначениеВыбора Из СписокВыбора Цикл
				НоваяСтрока = ТаблицаДанныхВесогабаритныхХарактеристик.Добавить(); 
				НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = СтрЗаменить(ПутьКРеквизиту.Ключ, "Атрибут_", "");
				НоваяСтрока.ИдентификаторЕдиницыИзмерения = СтрЗаменить(ИдентификаторЕдиницыИзмерения, "Атрибут_", "");
				НоваяСтрока.ИдентификаторЗначенияПоУмолчанию = ЗначениеВыбора.ИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.МеждународноеСокращение = ЗначениеВыбора.МеждународноеСокращение;
				НоваяСтрока.Числитель = ЗначениеВыбора.Числитель;
				НоваяСтрока.Знаменатель = ЗначениеВыбора.Знаменатель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаДанныхВесогабаритныхХарактеристик;

КонецФункции

Функция СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки()

	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки = Новый Соответствие; 
	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Вставить("weight_unit", "ЕдиницаВеса");
	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Вставить("weight", "ВесТовараВУпаковке");
	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Вставить("dimension_unit", "ЕдиницаГабаритов");
	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Вставить("depth", "Глубина");
	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Вставить("height", "Высота");
	СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки.Вставить("width", "Ширина");

	Возврат СоответствиеАтрибутовВесогабаритныхХарактеристикУпаковки;

КонецФункции

Процедура ЗаполнитьДанныеПубликацииИзображения(Запись, ИсточникДанных, ИдентификаторОбъектаПубликации = Неопределено, ПолучитьДанные = Ложь)

	Если Не ЗначениеЗаполнено(ИдентификаторОбъектаПубликации) Тогда
		ИдентификаторОбъектаПубликации = ЧислоВСтроку(ХешСуммаПрисоединенногоФайла(ИсточникДанных.ОбъектПубликации));
	КонецЕсли;

	Если ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации Или ПолучитьДанные Тогда
		Запись.ИдентификаторПубликации = ИдентификаторОбъектаПубликации;

		ДанныеОбъекта = Неопределено;
		КэшДанныеОбъекта = Новый Структура;

		Если ИсточникДанных.ДанныеОбъекта <> Неопределено Тогда
			ДанныеОбъекта = ИсточникДанных.ДанныеОбъекта.Получить();
			КэшДанныеОбъекта = ИсточникДанных.ДанныеОбъекта.Получить();
		КонецЕсли;

		Если ТипЗнч(ДанныеОбъекта) <> Тип("Структура") Тогда
			ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
		КонецЕсли;

		СтруктураПроверки = Новый Структура("ЭтоОсновноеИзображение");
		ЗаполнитьЗначенияСвойств(СтруктураПроверки, ИсточникДанных);
		Если ЗначениеЗаполнено(СтруктураПроверки.ЭтоОсновноеИзображение) Тогда
			ДанныеОбъекта.Вставить("ЭтоОсновноеИзображение", СтруктураПроверки.ЭтоОсновноеИзображение);
		КонецЕсли;

		Если (ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации
			Или ИсточникДанных.УстанавливаемыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"))
			И Не ПустаяСтрока(ИсточникДанных.ПредставлениеОбъектаМаркетплейса) Тогда

			Если Не ДанныеОбъекта.Свойство("УдаляемыеСсылки") Тогда
				ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);
			КонецЕсли;

			Если Не ДанныеОбъекта.Свойство("СсылкаНаФайлВСервисеПубличныхСсылок") Тогда
				ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеОбъекта.УдаляемыеСсылки.Получить(ИсточникДанных.ПредставлениеОбъектаМаркетплейса)) Тогда
				ДанныеОбъекта.УдаляемыеСсылки.Вставить(ИсточникДанных.ПредставлениеОбъектаМаркетплейса, ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
			КонецЕсли;

			Запись.ПредставлениеОбъектаМаркетплейса = "";
			Запись.ИзмененыРеквизиты = Истина;
			ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = "";
		КонецЕсли;

		Если ПолучитьДанные И (ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации
			Или Не ИдентичныКоллекцииСКлючами(КэшДанныеОбъекта, ДанныеОбъекта, "УдаляемыеСсылки")) Тогда
			Запись.ЕстьИзменения = Истина;
		КонецЕсли;

		Если ПолучитьДанные Тогда
			Запись.ДанныеОбъекта = ДанныеОбъекта;
		Иначе
			Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюПоИзображениям(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаИзображений, ОбновитьДанные = Ложь)

	Если ВыборкаИзображений <> Неопределено Тогда
		ВыборкаИзображений.Сбросить();

		ТаблицаОбъектовПубликации.Колонки.Добавить("ЕстьИзменения", Новый ОписаниеТипов("Булево"));
		ТаблицаОбъектовПубликации.Колонки.Добавить("ТекущийСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
		БезИзмененияАктивностиИзображений = Истина;

		Отбор = Новый Структура;
		Отбор.Вставить("УчетнаяЗаписьМаркетплейса", ИсточникДанныхЗаполнения.УчетнаяЗаписьМаркетплейса);
		Отбор.Вставить("Номенклатура", ИсточникДанныхЗаполнения.Номенклатура);
		Отбор.Вставить("Характеристика", ИсточникДанныхЗаполнения.Характеристика);
		Отбор.Вставить("Упаковка", ИсточникДанныхЗаполнения.Упаковка); 

		ВидОбъектаИзображение = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");
		СтатусНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");

		Счетчик = 0;
		Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
			НоваяСтрокаОбъектаПубликации = ТаблицаОбъектовПубликации.Добавить();
			НоваяСтрокаОбъектаПубликации.ВидОбъектаМаркетплейса = ВидОбъектаИзображение;
			НоваяСтрокаОбъектаПубликации.ПредставлениеОбъектаМаркетплейса = ВыборкаИзображений.ПредставлениеОбъектаМаркетплейса;

			Если ОбновитьДанные Тогда
				НоваяСтрокаОбъектаПубликации.ОбъектПубликации = ВыборкаИзображений.ОбъектПубликации;
				НоваяСтрокаОбъектаПубликации.НаименованиеОбъектаМаркетплейса = ВыборкаИзображений.НаименованиеОбъектаМаркетплейса;
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектаПубликации, ВыборкаИзображений);
			КонецЕсли;

			НоваяСтрокаОбъектаПубликации.ТекущийСтатус = ВыборкаИзображений.ТекущийСтатус;

			Если ВыборкаИзображений.ДействующееИзображение И Счетчик >= 30 Тогда
				НоваяСтрокаОбъектаПубликации.Статус = СтатусНеИспользуется;
			Иначе
				НоваяСтрокаОбъектаПубликации.Статус = ВыборкаИзображений.УстанавливаемыйСтатус;
			КонецЕсли;

			Если НоваяСтрокаОбъектаПубликации.ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
				Или НоваяСтрокаОбъектаПубликации.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
				И НоваяСтрокаОбъектаПубликации.ТекущийСтатус <> НоваяСтрокаОбъектаПубликации.Статус Тогда
				БезИзмененияАктивностиИзображений = Ложь;
			КонецЕсли;

			Если ВыборкаИзображений.ДействующееИзображение Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;

			ИдентификаторПубликации =
					?(НоваяСтрокаОбъектаПубликации.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"),
					"", ВыборкаИзображений.ИдентификаторПубликации);

			ЗаполнитьДанныеПубликацииИзображения(НоваяСтрокаОбъектаПубликации, ВыборкаИзображений, ИдентификаторПубликации, Истина);

			НоваяСтрокаОбъектаПубликации.ЭтоОсновнойОбъект = НоваяСтрокаОбъектаПубликации.ДанныеОбъекта.ЭтоОсновноеИзображение;
		КонецЦикла;

		Если ОбновитьДанные И БезИзмененияАктивностиИзображений Тогда
			Отбор = Новый Структура("Статус, ЕстьИзменения", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"), Ложь);
			СтрокиБезИзменений = ТаблицаОбъектовПубликации.НайтиСтроки(Отбор);
			Если СтрокиБезИзменений.Количество() > 0 Тогда
				Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
				СтрокиКПубликации = ТаблицаОбъектовПубликации.НайтиСтроки(Отбор);
				Если СтрокиКПубликации.Количество() = СтрокиБезИзменений.Количество() Тогда
					Для Каждого СтрокаБезИзменений Из СтрокиБезИзменений Цикл
						СтрокаБезИзменений.Статус = СтрокаБезИзменений.ТекущийСтатус;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТаблицаОбъектовПубликации.Колонки.Удалить("ЕстьИзменения");
		ТаблицаОбъектовПубликации.Колонки.Удалить("ТекущийСтатус");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюПоСертификатам(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаСертификатов,
			ВыборкаПрисоединенныхФайловСертификатов, ОбновитьДанные = Ложь)

	Если ВыборкаСертификатов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыборкаСертификатов.Сбросить();

	Отбор = Новый Структура;
	Отбор.Вставить("УчетнаяЗаписьМаркетплейса", ИсточникДанныхЗаполнения.УчетнаяЗаписьМаркетплейса);
	Отбор.Вставить("Номенклатура", ИсточникДанныхЗаполнения.Номенклатура);
	Отбор.Вставить("Характеристика", ИсточникДанныхЗаполнения.Характеристика);
	Отбор.Вставить("Упаковка", ИсточникДанныхЗаполнения.Упаковка);

	КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;
	ОписаниеОшибкиОтсутствияФайлов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствуют присоединенные файлы требуемого формата: %1.'"),
			СтрСоединить(РасширенияИзображений(Истина), ", "));

	ВидОбъектаСертификат = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат");
	СтатусЗагружен = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен");

	СостоянияЗагружен = СостоянияПубликации().ОбъектПубликацииЗагружен;

	ДействительныеСтатусыРосаккредитации = НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации();

	Пока ВыборкаСертификатов.НайтиСледующий(Отбор) Цикл
		НоваяСтрокаОбъектаПубликации = ТаблицаОбъектовПубликации.Добавить();
		НоваяСтрокаОбъектаПубликации.ВидОбъектаМаркетплейса = ВидОбъектаСертификат;
		НоваяСтрокаОбъектаПубликации.ОбъектПубликации = ВыборкаСертификатов.ОбъектПубликации;
		НоваяСтрокаОбъектаПубликации.ИдентификаторПубликации =
				?(ЗначениеЗаполнено(ВыборкаСертификатов.ИдентификаторПубликации),
				ВыборкаСертификатов.ИдентификаторПубликации,
				ВыборкаСертификатов.ОбъектПубликации.УникальныйИдентификатор());
		НоваяСтрокаОбъектаПубликации.НаименованиеОбъектаМаркетплейса = ВыборкаСертификатов.НаименованиеОбъектаМаркетплейса;

		СписокАтрибутовСертификата = Неопределено;
		Если ВыборкаСертификатов.ДанныеОбъекта <> Неопределено Тогда
			СписокАтрибутовСертификата = ВыборкаСертификатов.ДанныеОбъекта.Получить();
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СписокАтрибутовСертификата) Тогда
			СписокАтрибутовСертификата = НовыйСписокАтрибутовСертификата();
			СписокАтрибутовСертификата.Удалить("ПрисоединенныеФайлы");
			ЗаполнитьЗначенияСвойств(СписокАтрибутовСертификата, ВыборкаСертификатов);
			ПрисоединенныеФайлыКэш = Новый Соответствие; 
		Иначе
			ПрисоединенныеФайлыКэш =
					ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СписокАтрибутовСертификата, "ПрисоединенныеФайлы", Новый Массив);
			Если СписокАтрибутовСертификата.Свойство("ПрисоединенныеФайлы") Тогда
				СписокАтрибутовСертификата.Удалить("ПрисоединенныеФайлы");
			КонецЕсли;
			
			СписокАтрибутовСертификата.Вставить("ИзмененСоставАтрибутов", Ложь);
		КонецЕсли;

		ПрисоединенныеФайлы = Новый Массив;

		СписокАтрибутовСертификата.Вставить("НаименованиеСертификата", ВыборкаСертификатов.НаименованиеОбъектаМаркетплейса);

		Если ОбновитьДанные Тогда
			НовыйСписокАтрибутовСертификата = НовыйСписокАтрибутовСертификата();
			ЗаполнитьЗначенияСвойств(НовыйСписокАтрибутовСертификата, ВыборкаСертификатов);
			НовыйСписокАтрибутовСертификата.НаименованиеСертификата = ВыборкаСертификатов.НаименованиеОбъектаМаркетплейса;
			НовыйСписокАтрибутовСертификата.Удалить("ПрисоединенныеФайлы");

			КоллекцииИдентичны = ИдентичныКоллекцииСКлючами(СписокАтрибутовСертификата, НовыйСписокАтрибутовСертификата);

			СписокАтрибутовСертификата = НовыйСписокАтрибутовСертификата;
			СписокАтрибутовСертификата.ИзмененСоставАтрибутов = Не КоллекцииИдентичны;

			Если ВыборкаПрисоединенныхФайловСертификатов <> Неопределено Тогда
				ВыборкаПрисоединенныхФайловСертификатов.Сбросить();

				ОтборИзображений = Новый Структура("Сертификат", ВыборкаСертификатов.ОбъектПубликации);
				Пока ВыборкаПрисоединенныхФайловСертификатов.НайтиСледующий(ОтборИзображений) Цикл
					ПрисоединенныеФайлы.Добавить(ВыборкаПрисоединенныхФайловСертификатов.ПрисоединенныйФайл);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПрисоединенныеФайлы = ПрисоединенныеФайлыКэш;
		КонецЕсли;

		КоллекцииИдентичны = ОбщегоНазначения.КоллекцииИдентичны(ПрисоединенныеФайлы, ПрисоединенныеФайлыКэш);

		СписокАтрибутовСертификата.Вставить("СтатусРосаккредитации", ВыборкаСертификатов.СтатусРосаккредитации);
		СписокАтрибутовСертификата.Вставить("ДатаОбновленияСтатусаРосаккредитации", ВыборкаСертификатов.ДатаОбновленияСтатусаРосаккредитации);

		СписокАтрибутовСертификата.Вставить("ПрисоединенныеФайлы", ПрисоединенныеФайлы);
		СписокАтрибутовСертификата.ИзмененСоставАтрибутов =
				Макс(СписокАтрибутовСертификата.ИзмененСоставАтрибутов, Не КоллекцииИдентичны);

		НоваяСтрокаОбъектаПубликации.ИзмененыРеквизиты = Не ПустаяСтрока(ВыборкаСертификатов.ИдентификаторОбъектаМаркетплейса)
				И Макс(ВыборкаСертификатов.ИзмененыРеквизиты, СписокАтрибутовСертификата.ИзмененСоставАтрибутов);

		НоваяСтрокаОбъектаПубликации.ДанныеОбъекта = СписокАтрибутовСертификата;

		Если ВыборкаСертификатов.УстанавливаемыйСтатус <> ВыборкаСертификатов.ТекущийСтатус
			Или СписокАтрибутовСертификата.ИзмененСоставАтрибутов Тогда
			НоваяСтрокаОбъектаПубликации.Статус = ВыборкаСертификатов.УстанавливаемыйСтатус;

			Если ВыборкаСертификатов.УстанавливаемыйСтатус = СтатусЗагружен Тогда
				НоваяСтрокаОбъектаПубликации.Состояние = СостоянияЗагружен.СостояниеОбъектаПубликации;
				НоваяСтрокаОбъектаПубликации.ОписаниеСостояния = СостоянияЗагружен.ОписаниеСостоянияОбъектаПубликации;
			КонецЕсли;
		Иначе
			НоваяСтрокаОбъектаПубликации.Статус = ВыборкаСертификатов.ТекущийСтатус;
		КонецЕсли;

		МассивОшибок = Новый Массив;

		СертификатДействует = НЕ ЗначениеЗаполнено(СписокАтрибутовСертификата.СтатусРосаккредитации)
			ИЛИ ДействительныеСтатусыРосаккредитации.Найти(СписокАтрибутовСертификата.СтатусРосаккредитации) <> Неопределено;

		Если НЕ СертификатДействует Тогда
			ТекстОшибки = ТекстОшибкиПроверкиСертификатаВРосаккредитации(СписокАтрибутовСертификата.СтатусРосаккредитации,
				СписокАтрибутовСертификата.ДатаОбновленияСтатусаРосаккредитации);
			МассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;

		ОбязательныеАтрибутыСертификата = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОбязательныеАтрибутыСертификата();

		МассивПолей = Новый Массив;
		Для Каждого Атрибут Из ОбязательныеАтрибутыСертификата Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СписокАтрибутовСертификата, Атрибут.Ключ)
				И Не ЗначениеЗаполнено(СписокАтрибутовСертификата[Атрибут.Ключ]) Тогда
				МассивПолей.Добавить("<" + Атрибут.Значение + ">");
			КонецЕсли;
		КонецЦикла;

		Если МассивПолей.Количество() Тогда
			ШаблонОшибки = НСтр("ru = 'Не заполнены поля: %1.'");
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					СтрСоединить(МассивПолей, ", ")));
		КонецЕсли;
		
		Если ПрисоединенныеФайлы.Количество() = 0 Тогда
			МассивОшибок.Добавить(ОписаниеОшибкиОтсутствияФайлов);
		КонецЕсли;
		
		Если МассивОшибок.Количество() > 0 Тогда
			НоваяСтрокаОбъектаПубликации.КодОшибки = КодОшибки;
			НоваяСтрокаОбъектаПубликации.ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает текст описания состояния сертификата по статусу сертификата в Росаккредитации.
//
// Параметры:
//   Статус                - ПеречислениеСсылка.СтатусыСертификатовНоменклатурыРосаккредитации - статус сертификата по 
//                             данным Росаккредитации.
//   ДатаОбновленияСтатуса - Дата - дата получения статуса сертификата.
//
// Возвращаемое значение:
//   Строка - текст описания состояния сертификата по данным Росаккредитации.
//
Функция ТекстОшибкиПроверкиСертификатаВРосаккредитации(Статус, ДатаОбновленияСтатуса) Экспорт

	ШаблонОшибки = НСтр("ru = 'Сертификат %1 по данным Росаккредитации по состоянию на %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, НРег(Статус), Формат(ДатаОбновленияСтатуса, "ДЛФ=ДД"));

КонецФункции

Функция ЗаполнитьИнформациюПоШтрихкодам(ИсточникДанныхЗаполнения, ВыборкаШтрихкодов)

	Если ВыборкаШтрихкодов = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Массив;
	ВыборкаШтрихкодов.Сбросить();

	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ИсточникДанныхЗаполнения.Номенклатура);
	Отбор.Вставить("Характеристика", ИсточникДанныхЗаполнения.Характеристика);
	Отбор.Вставить("Упаковка", ИсточникДанныхЗаполнения.Упаковка);
	
	Пока ВыборкаШтрихкодов.НайтиСледующий(Отбор) Цикл
		Результат.Добавить(ВыборкаШтрихкодов.Штрихкод);
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, ";");
	
КонецФункции

Процедура ЗаполнитьИнформациюПоЦенам(ДанныеТовара, ИсточникДанныхЗаполнения, Знач ВидыЦенУчетнойЗаписи, ВыборкаЦен)

	Цены = Новый Структура;

	Если ВыборкаЦен <> Неопределено Тогда
		ВыборкаЦен.Сбросить();

		Пока ВыборкаЦен.НайтиСледующий(ИсточникДанныхЗаполнения) Цикл
			ДанныеВидаЦен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВидыЦенУчетнойЗаписи, ВыборкаЦен.ИмяНастройки, Неопределено);
			ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
			ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ПроверкаЗаполнения", Ложь);
			ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ПредставлениеВидаЦены", Ложь);

			СтруктураЦены = Новый Структура;
			СтруктураЦены.Вставить("ВидЦены", ВидЦены);
			СтруктураЦены.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);
			СтруктураЦены.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
			СтруктураЦены.Вставить("Цена", ВыборкаЦен.Цена);

			Цены.Вставить(ВыборкаЦен.ИмяНастройки, СтруктураЦены);

			ВидыЦенУчетнойЗаписи.Удалить(ВыборкаЦен.ИмяНастройки);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ДанныеВидаЦен Из ВидыЦенУчетнойЗаписи Цикл
		ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
		ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ПроверкаЗаполнения", Ложь);
		ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ПредставлениеВидаЦены", Ложь);

		СтруктураЦены = Новый Структура;
		СтруктураЦены.Вставить("ВидЦены", ВидЦены);
		СтруктураЦены.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);
		СтруктураЦены.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
		СтруктураЦены.Вставить("Цена", 0);

		Цены.Вставить(ДанныеВидаЦен.Ключ, СтруктураЦены);
	КонецЦикла;

	ДанныеТовара.Вставить("Цены", Цены);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКарточкиТовара

// Возвращает пустой список свойств для заполнения карточки товара.
// 
// Возвращаемое значение:
//  Структура - свойства для заполнения карточки товара.
//
Функция СписокСвойствТовараДляКарточкиТовара() Экспорт

	ОписаниеТипаСтрока50    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаКатегории1С = ОписаниеТипаКатегории1С();

	СписокСвойствТовар = Новый Структура;
	СписокСвойствТовар.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокСвойствТовар.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокСвойствТовар.Вставить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	СписокСвойствТовар.Вставить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	СписокСвойствТовар.Вставить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("Категория1С", ОписаниеТипаКатегории1С);
	СписокСвойствТовар.Вставить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С);
	СписокСвойствТовар.Вставить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("НаименованиеКатегорииМаркетплейса", ОписаниеТипаСтрока250);
	СписокСвойствТовар.Вставить("ОписаниеСертификацииКатегорииМаркетплейса", "");
	СписокСвойствТовар.Вставить("Валюта", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("Цены", Новый ОписаниеТипов("Структура"));
	СписокСвойствТовар.Вставить("СтавкаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3,1)));
	СписокСвойствТовар.Вставить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(0)));

	Возврат СписокСвойствТовар;

КонецФункции

// Возвращает в зависимости от ожидаемых действий таблицу реквизитов, описание свойств товара, изображения и сертификаты,
// дерево реквизитов, дерево атрибутов, описание ошибок заполнения карточки товара.
//
// Параметры:
//	Параметры - Структура - структура с ключами:
//								ОписаниеТовара - Структура - см. СписокСвойствТовараДляКарточкиТовара,
//								ДанныеОбъекта - Структура - см. НоваяТаблицаЗначенийРеквизитов,
//								ПараметрыЗаполненияДереваАтрибутов - Структура - 
//															см. ПараметрыДляЗаполненияАтрибутовКатегории,
//								ОтображаетсяДеревоАтрибутов - Булево - признак отображения дерева атрибутов в карточке товара.
//	УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись маркетплейса.
//	ПараметрыДействий - Структура - структура с действиями, которые ожидается выполнить,
//								см. ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара.
// 
// Возвращаемое значение:
//	Структура:
//			* Категория1С - .
//			* ДанныеДляПубликации - .
//			* ДанныеОбъекта - .
//			* ОбъектыПубликации - .
//			* ДеревоРеквизитов - .
//			* ДанныеКэша - .
//			* ОписаниеДанныхТовара - .
//			* КодОшибки - .
//			* ОписаниеОшибки - .
//
Функция ЗаполнитьДанныеКарточкиТовара(Параметры, УчетнаяЗаписьМаркетплейса, Знач ПараметрыДействий) Экспорт

	Результат = Новый Структура;

	Событие							= ПараметрыДействий.Событие;
	ПолучитьДанныеТовара			= ПараметрыДействий.ПолучитьДанныеТовара;
	ОбновитьДанныеТовара			= ПараметрыДействий.ОбновитьДанныеТовара;
	ОбновитьКатегориюМаркетплейса	= ПараметрыДействий.ОбновитьКатегориюМаркетплейса;
	ЗаполнитьДеревоРеквизитов		= ПараметрыДействий.ЗаполнитьДеревоРеквизитов;
	ЗаполнитьДеревоАтрибутов		= ПараметрыДействий.ЗаполнитьДеревоАтрибутов;
	ПолучитьОписаниеТовара			= ПараметрыДействий.ПолучитьОписаниеТовара;
	ПроверитьОшибки					= ПараметрыДействий.ПроверитьОшибки;
	ПолучитьОбъектыПубликации		= ПараметрыДействий.ПолучитьОбъектыПубликации
			Или (ПроверитьОшибки И Не ПараметрыДействий.ПолучитьОбъектыПубликации И Не Параметры.Свойство("ОбъектыПубликации"));
	ОбновитьОбъектыПубликации		= ПараметрыДействий.ОбновитьОбъектыПубликации;

	ОписаниеТовара = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОписаниеТовара", Неопределено);
	ДанныеОбъекта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДанныеОбъекта", Неопределено);
	ОбъектыПубликации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОбъектыПубликации", Неопределено);
	ОтображаетсяДеревоАтрибутов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОтображаетсяДеревоАтрибутов", Ложь);
	ПараметрыЗаполненияДереваАтрибутов =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПараметрыЗаполненияДереваАтрибутов", Неопределено);

	Если ПолучитьДанныеТовара Или ОбновитьДанныеТовара Или ПолучитьОбъектыПубликации Тогда

		Если ОписаниеТовара <> Неопределено Тогда
			ТаблицаПубликацииТоваров = НоваяТаблицаПубликацииТоваров();

			СтрокаСОписаниемТовара = ТаблицаПубликацииТоваров.Добавить();
			СтрокаСОписаниемТовара.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
			ЗаполнитьЗначенияСвойств(СтрокаСОписаниемТовара, ОписаниеТовара);
			СтрокаСОписаниемТовара.ДанныеОбъекта = ДанныеОбъекта;
			СтрокаСОписаниемТовара.ДанныеОбъектаПереданы = (Событие <> "ПриОткрытии");

			Если ЗначениеЗаполнено(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) Тогда
				Если ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры");
				ИначеЕсли ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры");
				ИначеЕсли ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория");
				Иначе
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка");
				КонецЕсли;
			Иначе
				СтрокаСОписаниемТовара.ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
			КонецЕсли;

			Если ОбновитьКатегориюМаркетплейса Тогда
				СтрокаСОписаниемТовара.ИдентификаторКатегорииМаркетплейса = "";

				Если СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
					СтрокаСОписаниемТовара.Категория1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСОписаниемТовара.Номенклатура, "ВидНоменклатуры");
				ИначеЕсли СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
					СтрокаСОписаниемТовара.Категория1С = СтрокаСОписаниемТовара.Номенклатура;
				ИначеЕсли СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория") Тогда
					СтрокаСОписаниемТовара.Категория1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСОписаниемТовара.Номенклатура, "ТоварнаяКатегория");
				Иначе
					СтрокаСОписаниемТовара.Категория1С = Неопределено;
				КонецЕсли;
			КонецЕсли;

			СписокПараметров = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
			СписокПараметров.ПолучитьАтрибуты = ПолучитьДанныеТовара;
			СписокПараметров.ОбновитьДанные = ОбновитьДанныеТовара Или ОбновитьОбъектыПубликации;
			СписокПараметров.ОбновитьКатегориюМаркетплейса = ОбновитьКатегориюМаркетплейса;
			СписокПараметров.ПолучитьИзображения = ПолучитьОбъектыПубликации;
			СписокПараметров.ПолучитьСертификаты = ПолучитьОбъектыПубликации;

			ТаблицаТоваров = ПодготовитьДанныеПубликуемыхТоваров(ТаблицаПубликацииТоваров, СписокПараметров);

			СтрокаСНовымОписаниемТовара = ТаблицаТоваров[0];
			ТаблицаПубликацииТоваров = Неопределено;
			ТаблицаТоваров = Неопределено;

			Если Не ПустаяСтрока(СписокПараметров.СообщениеПользователю) Тогда
				Результат.Вставить("СообщениеПользователю", СписокПараметров.СообщениеПользователю);
			КонецЕсли;

			Если ПолучитьДанныеТовара Или ОбновитьДанныеТовара Тогда
				ОписаниеТовара.Валюта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "Валюта", "");
				ОписаниеТовара.Цены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "Цены", Новый Структура);
				ОписаниеТовара.СтавкаНДС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "СтавкаНДС", Новый Структура);

				ДанныеОбъекта = СтрокаСНовымОписаниемТовара.ДанныеОбъекта;
				ТаблицаРеквизитов = НоваяТаблицаЗначенийРеквизитов();
				
				Для Каждого ЭлементКоллекции Из ТаблицаРеквизитов.Колонки Цикл
					Если ДанныеОбъекта.Колонки.Найти(ЭлементКоллекции.Имя) = Неопределено Тогда
						ДанныеОбъекта.Колонки.Добавить(ЭлементКоллекции.Имя, Новый ОписаниеТипов(ЭлементКоллекции.ТипЗначения));
					КонецЕсли;
				КонецЦикла;

				Результат.Вставить("Категория1С", СтрокаСНовымОписаниемТовара.Категория1С);
				Результат.Вставить("ДанныеДляПубликации", СтрокаСНовымОписаниемТовара.ДанныеДляПубликации);
				Результат.Вставить("ДанныеОбъекта", ДанныеОбъекта);

				Если Результат.ДанныеДляПубликации.Количество() = 0 Тогда
					Результат.ДанныеДляПубликации = НовыйСписокДанныхОТоваре();
				КонецЕсли;

				Результат.ДанныеДляПубликации.Свойство("НаименованиеКатегорииМаркетплейса", ОписаниеТовара.НаименованиеКатегорииМаркетплейса);

				Если ОписаниеТовара.Категория1С <> Результат.Категория1С
						Или Результат.ДанныеДляПубликации.ИсточникКатегорииМаркетплейса <> ОписаниеТовара.ИсточникКатегорииМаркетплейса
						Или Результат.ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса <> ОписаниеТовара.ИдентификаторКатегорииМаркетплейса Тогда
					ОписаниеТовара.Категория1С = Результат.Категория1С;

					СтрокаСвойствЗаполнения = "ИсточникКатегорииМаркетплейса, ИдентификаторПубликации,
							|ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса";
					ЗаполнитьЗначенияСвойств(ОписаниеТовара, Результат.ДанныеДляПубликации, СтрокаСвойствЗаполнения);

					Если ЗначениеЗаполнено(ОписаниеТовара.ИсточникКатегорииМаркетплейса) Тогда
						ОписаниеТовара.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса",
							СтрЗаменить(ОписаниеТовара.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_"));
					КонецЕсли;

					Если ОтображаетсяДеревоАтрибутов Тогда
						ЗаполнитьДеревоАтрибутов = Истина;

						Если ПараметрыЗаполненияДереваАтрибутов.Свойство("ДанныеКэша") Тогда
							ПараметрыЗаполненияДереваАтрибутов.ДанныеКэша = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если ПолучитьОбъектыПубликации Тогда
				ОписаниеСертификации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации,
					"ОписаниеСертификацииКатегорииМаркетплейса", "");
				ОписаниеТовара.Вставить("ОписаниеСертификацииКатегорииМаркетплейса", ОписаниеСертификации);
			КонецЕсли;

			ОбъектыПубликации = СтрокаСНовымОписаниемТовара.ОбъектыПубликации;
			Если ПараметрыДействий.ПолучитьОбъектыПубликации Тогда
				Результат.Вставить("ОбъектыПубликации", ОбъектыПубликации);
			КонецЕсли;
		Иначе
			ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
		КонецЕсли;
	КонецЕсли;

	Если ДанныеОбъекта = Неопределено Тогда
		ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
	КонецЕсли;
	
	ИсключитьАтрибуты = НовыеИсключаемыеАтрибуты();
	
	ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
	
	НомерПоПорядку = ДанныеОбъекта.Количество() - 1;
	Пока НомерПоПорядку >= 0 Цикл
		СтрокаТаблицыЗначений = ДанныеОбъекта[НомерПоПорядку];
		
		// Исключаемые атрибуты
		Если ИсключитьАтрибуты.Найти(СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
			ДанныеОбъекта.Удалить(СтрокаТаблицыЗначений);
		
		// Тип товара
		ИначеЕсли СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара
				И СтрНайти(ОписаниеТовара.ИдентификаторКатегорииМаркетплейса, "_") > 0 Тогда
			СтрокаТаблицыЗначений.ИдентификаторЗначенияПоУмолчанию = СтрРазделить(ОписаниеТовара.ИдентификаторКатегорииМаркетплейса, "_", Истина)[1];
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию			   = ОписаниеТовара.НаименованиеКатегорииМаркетплейса;
			
			Индекс = СтрНайти(ОписаниеТовара.НаименованиеКатегорииМаркетплейса, Символы.НПП + ">" + Символы.НПП, НаправлениеПоиска.СКонца);
			Если Индекс > 0 Тогда
				СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = Сред(ОписаниеТовара.НаименованиеКатегорииМаркетплейса, Индекс + 3);
			КонецЕсли;
			
			СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияПоУмолчанию;
			СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса				= СтрокаТаблицыЗначений.ЗначениеПоУмолчанию;
			СтрокаТаблицыЗначений.ЗначениеРеквизита1С						= Неопределено;
			СтрокаТаблицыЗначений.НеЗаполненРеквизит1С						= Истина;    
			СтрокаТаблицыЗначений.ПолныйПутьКРеквизиту1С					= "";
			СтрокаТаблицыЗначений.ПредставлениеРеквизита1С					= "";
			СтрокаТаблицыЗначений.НеЗаполненПутьКРеквизиту1С				= Истина;
			СтрокаТаблицыЗначений.НеЗаполненоСоответствиеАтрибута			= Истина;
			СтрокаТаблицыЗначений.НеЗаполненАтрибут							= Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса);
			СтрокаТаблицыЗначений.УстановленоЗначениеПоУмолчанию			= Истина;
		КонецЕсли;
		
		НомерПоПорядку = НомерПоПорядку - 1;
	КонецЦикла;
	
	ПроверитьДобавитьТипТовара(ДанныеОбъекта);
	
	Если ЗаполнитьДеревоРеквизитов Тогда
		ДеревоРеквизитов = ПодготовитьДеревоРеквизитовТовара(ДанныеОбъекта);
		Результат.Вставить("ДеревоРеквизитов", ДеревоРеквизитов);
	КонецЕсли;

	Если ЗаполнитьДеревоАтрибутов Тогда
		ДанныеКэша = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполненияДереваАтрибутов, "ДанныеКэша", Неопределено);

		ДеревоАтрибутов = НовоеДеревоАтрибутов();
		ЗаполнитьДанныеАтрибутовКатегории(ПараметрыЗаполненияДереваАтрибутов, УчетнаяЗаписьМаркетплейса, ДеревоАтрибутов, ДанныеКэша);

		Результат.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);
		Результат.Вставить("ДанныеКэша", ДанныеКэша);
	КонецЕсли;

	Если ПолучитьОписаниеТовара Тогда
		ОписаниеДанныхТовара = ПолучитьОписаниеТовараМаркетплейса(ДанныеОбъекта, ОписаниеТовара);
		Результат.Вставить("ОписаниеДанныхТовара", ОписаниеДанныхТовара);
	КонецЕсли;
	
	// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
	ИдентификаторАтрибута_ТНВЭД = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
	ОтборМаркируемаяПродукция   = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_ТНВЭД);
	ЭтоМаркируемаяПродукция     = Ложь;
	
	Если ЗначениеЗаполнено(ОписаниеТовара.Номенклатура) Тогда
		ЭтоМаркируемаяПродукция = НоменклатураЛокализация.ЭтоМаркируемаяПродукция(ОписаниеТовара.Номенклатура);
	КонецЕсли;

	Если ЭтоМаркируемаяПродукция Тогда
		НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(ОтборМаркируемаяПродукция);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ОбязательныйАтрибут = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОписаниеТовара.ИдентификаторКатегорииМаркетплейса)
			И СтрНайти(ОписаниеТовара.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
		Результат.Вставить("ЕстьКритичныеОшибки", Истина);
		Результат.Вставить("КодОшибки",           КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаКатегорияУстарела);
		Результат.Вставить("ОписаниеОшибки",      СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Категория Ozon ""%1 (id %2)"" устарела. Необходимо указать действующую категорию торговой площадки в сопоставлении категорий и перевыбрать номенклатуру, характеристику или упаковку в текущей карточке товара.'"),
													ОписаниеТовара.НаименованиеКатегорииМаркетплейса,
													ОписаниеТовара.ИдентификаторКатегорииМаркетплейса));
		
	ИначеЕсли ПроверитьОшибки Тогда
		Результат.Вставить("ЕстьКритичныеОшибки", Ложь);
		Результат.Вставить("КодОшибки", "");
		Результат.Вставить("ОписаниеОшибки", "");

		РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара(ДанныеОбъекта, ОписаниеТовара, ОбъектыПубликации);
		ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ПроверитьДобавитьТипТовара(ДанныеОбъекта)
	
	Если ДанныеОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
	
	Если СтрНайти(ДанныеОбъекта[0].ИдентификаторКатегорииМаркетплейса, "_") > 0 
			И ДанныеОбъекта.Найти(ИдентификаторАтрибута_ТипТовара, "ИдентификаторАтрибутаМаркетплейса") = Неопределено Тогда
		СтрокаТаблицыЗначений = ДанныеОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ДанныеОбъекта[0]);
			
		СтрокаТаблицыЗначений.ИдентификаторЗначенияПоУмолчанию = СтрРазделить(ДанныеОбъекта[0].ИдентификаторКатегорииМаркетплейса, "_", Истина)[1];
		СтрокаТаблицыЗначений.ЗначениеПоУмолчанию			   = ДанныеОбъекта[0].НаименованиеКатегорииМаркетплейса;
		
		Индекс = СтрНайти(ДанныеОбъекта[0].НаименованиеКатегорииМаркетплейса, Символы.НПП + ">" + Символы.НПП, НаправлениеПоиска.СКонца);
		Если Индекс > 0 Тогда
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = Сред(ДанныеОбъекта[0].НаименованиеКатегорииМаркетплейса, Индекс + 3);
		КонецЕсли;
		
		СтрокаТаблицыЗначений.ИдентификаторРодителяАтрибутаМаркетплейса = "";
		СтрокаТаблицыЗначений.НаименованиеРодителяАтрибутаМаркетплейса  = "";
		СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса         = ИдентификаторАтрибута_ТипТовара;
		СтрокаТаблицыЗначений.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Тип'");
		СтрокаТаблицыЗначений.ПолныйПутьКРеквизиту1С					= "";
		СтрокаТаблицыЗначений.ПредставлениеРеквизита1С                  = "";
		СтрокаТаблицыЗначений.ОбязательныйАтрибут                       = Истина;
		СтрокаТаблицыЗначений.АспектныйАтрибут                          = Ложь;
		СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений                = Ложь;
		СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка             = Истина;
		СтрокаТаблицыЗначений.МаксимальноеКоличествоЗначений            = 0;
		СтрокаТаблицыЗначений.ТипЗначенияАтрибута                       = "string";
		СтрокаТаблицыЗначений.ЗначениеРеквизита1С						= Неопределено;
		СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса				= СтрокаТаблицыЗначений.ЗначениеПоУмолчанию;
		СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияПоУмолчанию;
		СтрокаТаблицыЗначений.НеЗаполненРеквизит1С						= Истина;    
		СтрокаТаблицыЗначений.НеЗаполненоСоответствиеАтрибута			= Истина;
		СтрокаТаблицыЗначений.НеЗаполненАтрибут							= Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса);
		СтрокаТаблицыЗначений.НеЗаполненПутьКРеквизиту1С				= Истина;
		СтрокаТаблицыЗначений.УстановленоЗначениеПоУмолчанию			= Истина;
		СтрокаТаблицыЗначений.ЗначениеАтрибутаЗаданоПользователем       = Ложь;
		СтрокаТаблицыЗначений.ОписаниеНазначенияАтрибута                = НСтр("ru = 'Выберите наиболее подходящий тип товара. По типам товары распределяются по категориям на сайте Ozon. Если тип указан неправильно, товар попадет в неверную категорию. Чтобы правильно указать тип, найдите на сайте Ozon товары, похожие на ваш, и посмотрите, какой тип у них указан.'");
		СтрокаТаблицыЗначений.ИзменилсяРеквизит1С                       = Ложь;
		СтрокаТаблицыЗначений.НовоеЗначениеРеквизита1С                  = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку заполнения данных карточки товара.
//
// Параметры:
//   ТаблицаЗначенийРеквизитов - см. НоваяТаблицаЗначенийРеквизитов.
//   Параметры                 - Структура - параметры для проверки, см. СписокСвойствТовараДляКарточкиТовара.
//   ОбъектыПубликации         - см. НоваяТаблицаОбъектовПубликации.
// 
// Возвращаемое значение:
//   Структура:  
//     * ЕстьКритичныеОшибки - Булево - признак наличия ошибок, критичных для публикации товара;
//     * КодОшибки           - Строка - код ошибки;
//     * ОписаниеОшибки      - Строка - текст с описанием всех ошибок.
//
Функция ПроверитьЗаполнениеКарточкиТовара(ТаблицаЗначенийРеквизитов, Параметры = Неопределено, ОбъектыПубликации = Неопределено)

	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьКритичныеОшибки", Ложь);
	РезультатПроверки.Вставить("КодОшибки", "");
	РезультатПроверки.Вставить("ОписаниеОшибки", "");

	ЕстьКритичныеОшибки = Ложь;

	ШаблонОшибкиЗаполненияВсехАтрибутов = НСтр("ru = 'Не заполнены все атрибуты товара.'");
	ШаблонОшибкиОтсутствияАтрибутов = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'");
	ШаблонОшибкиЗаполненияНеобязательныхАтрибутов = НСтр("ru = 'Не заполнены некоторые необязательные атрибуты товара.'");
	ШаблонОшибкиЗаполненияОбязательныхАтрибутов = НСтр("ru = 'Обнаружены ошибки заполнения обязательных атрибутов товара: %1'");
	ШаблонНезаполненногоРеквизита1С = НСтр("ru = '- для атрибута <%1> не заполнен реквизит 1С <%2>'");
	ШаблонНезаполненногоПутиКРеквизиту1С = НСтр("ru = '- для атрибута <%1> в настройках категории не указан путь к реквизиту 1С - требуется настройка соответствия для категории <%2>'");
	ШаблонОтсутствующегоСоответствия = НСтр("ru = '- для атрибута <%1> не задано соответствие для значения <%2> реквизита 1С <%3>'");
	ШаблонОтсутствующегоЗначения = НСтр("ru = '- для атрибута <%1> не задано значение'");

	КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;

	ИсключитьАтрибуты = НовыеИсключаемыеАтрибуты();
	ИсключитьАтрибуты.Добавить(ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"]);

	Если ТаблицаЗначенийРеквизитов.Количество() > 0 Тогда
		МассивОшибок = Новый Массив;

		// Проверка заполнения пути к реквизиту 1С для обязательных атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина); 
		Отбор.Вставить("НеЗаполненПутьКРеквизиту1С", Истина);
		Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			// Исключаемые атрибуты
			Если ИсключитьАтрибуты.Найти(СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНезаполненногоПутиКРеквизиту1С,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ИсточникКатегорииМаркетплейса));
		КонецЦикла;

		// Проверка заполнения реквизита 1С для обязательных атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("НеЗаполненРеквизит1С", Истина);
		Отбор.Вставить("НеЗаполненПутьКРеквизиту1С", Ложь);
		Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			// Исключаемые атрибуты
			Если ИсключитьАтрибуты.Найти(СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНезаполненногоРеквизита1С,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ПредставлениеРеквизита1С));
		КонецЦикла;

		// Проверка отсутствия соответствия для обязательного атрибута.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("НеЗаполненоСоответствиеАтрибута", Истина);
		Отбор.Вставить("УстановленоЗначениеПоУмолчанию", Ложь);
		Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			// Исключаемые атрибуты
			Если ИсключитьАтрибуты.Найти(СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОтсутствующегоСоответствия,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ЗначениеРеквизита1С,
					СтрокаСОшибкой.ПредставлениеРеквизита1С));
		КонецЦикла;

		// Проверка заполнения для обязательных атрибутов, значения которых отредактированы пользователем вручную.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл
			// Исключаемые атрибуты
			Если ИсключитьАтрибуты.Найти(СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОтсутствующегоЗначения,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")"));
		КонецЦикла;

		// Проверка наличия хотя бы одного заполненного атрибута.
		ВсеАтрибутыНеЗаполнены = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Если СтрокиСОшибками.Количество() = ТаблицаЗначенийРеквизитов.Количество() Тогда
			МассивОшибок.Добавить(ШаблонОшибкиЗаполненияВсехАтрибутов);
			ВсеАтрибутыНеЗаполнены = Истина;
		КонецЕсли;

		// Проверка наличия хотя бы одного незаполненного атрибута.
		Если Не ВсеАтрибутыНеЗаполнены Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("НеЗаполненАтрибут", Истина);
			Отбор.Вставить("ОбязательныйАтрибут", Ложь);
			СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
			Если СтрокиСОшибками.Количество() > 0 Тогда
				Если МассивОшибок.Количество() > 0 Тогда
					МассивОшибок.Добавить(ШаблонОшибкиЗаполненияНеобязательныхАтрибутов);
				Иначе
					РезультатПроверки.ОписаниеОшибки = ШаблонОшибкиЗаполненияНеобязательныхАтрибутов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Заполнение описания ошибки.
		Если МассивОшибок.Количество() > 0 Тогда
			РезультатПроверки.ЕстьКритичныеОшибки = Истина;
			РезультатПроверки.КодОшибки = КодОшибки;

			ОписаниеОшибки = СтрСоединить(МассивОшибок, ";" + Символы.ПС);
			РезультатПроверки.ОписаниеОшибки =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаполненияОбязательныхАтрибутов, Символы.ПС + ОписаниеОшибки);

			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;
	Иначе
		РезультатПроверки.ЕстьКритичныеОшибки = Истина;
		РезультатПроверки.КодОшибки = КодОшибки;
		РезультатПроверки.ОписаниеОшибки = ШаблонОшибкиОтсутствияАтрибутов;

		ЕстьКритичныеОшибки = Истина;
	КонецЕсли;

	Если Параметры <> Неопределено Тогда
		МассивОшибок = Новый Массив;

		// Проверка цен.
		Цены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Цены", Неопределено);
		Если Цены <> Неопределено Тогда
			Шаблон1 = НСтр("ru = 'Для вида цены <%1> необходимо установить цену товара.'");
			Шаблон2 = НСтр("ru = 'Не заполнена настройка синхронизации для вида цены выгрузки на площадку маркетплейса <%1>. Необходимо заполнить настройки синхронизации и установить цену для товара по виду цен, указанному в настройках синхронизации.'");

			Для Каждого ДанныеПоВидуЦены Из Цены Цикл
				ДанныеПоЦене = ДанныеПоВидуЦены.Значение;
				Если ДанныеПоЦене.ПроверкаЗаполнения И Не ЗначениеЗаполнено(ДанныеПоЦене.Цена) Тогда
					Если ЗначениеЗаполнено(ДанныеПоЦене.ВидЦены) Тогда
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон1,
								ДанныеПоЦене.ВидЦены);
					Иначе
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон2,
								ДанныеПоВидуЦены.Значение.ПредставлениеВидаЦены); 
					КонецЕсли;

					МассивОшибок.Добавить(СообщениеОбОшибке);
				КонецЕсли;
			КонецЦикла;

			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;

		// Проверка изображений и сертификатов.
		Если ОбъектыПубликации <> Неопределено Тогда
			// Проверка изображений.  
			Если ОбъектыПубликации.Колонки.Найти("ВидОбъектаМаркетплейса") <> Неопределено Тогда
				Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
				СтрокиИзображений = ОбъектыПубликации.НайтиСтроки(Отбор);  
			Иначе 
				СтрокиИзображений = Новый Массив;
			КонецЕсли;
		
			Если СтрокиИзображений.Количество() = 0 Тогда
				Шаблон = НСтр("ru = 'Необходимо добавить изображение товара с признаком ""Публикуется в сервисах"" в присоединенные файлы номенклатуры <%1> или установить этот признак у существующих присоединенных файлов изображений товара и проверить, что у этих файлов завершено редактирование. Требуемый формат файлов: %2.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
						Параметры.Номенклатура, СтрСоединить(РасширенияИзображений(), ", "));
				МассивОшибок.Добавить(СообщениеОбОшибке);

				ЕстьКритичныеОшибки = Истина;
			КонецЕсли;

			// Проверка сертификатов.
			Если Не ПустаяСтрока(Параметры.ОписаниеСертификацииКатегорииМаркетплейса)
				И Не ПустаяСтрока(Параметры.НаименованиеКатегорииМаркетплейса) Тогда

				Если ОбъектыПубликации.Колонки.Найти("ВидОбъектаМаркетплейса") <> Неопределено Тогда
					Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат"));
					СтрокиСертификатов = ОбъектыПубликации.НайтиСтроки(Отбор);
				Иначе 
					СтрокиСертификатов = Новый Массив;
				КонецЕсли; 
				
				Если СтрокиСертификатов.Количество() = 0 Тогда
					Если Параметры.ОписаниеСертификацииКатегорииМаркетплейса = "ОбязательнаяСертификация" Тогда
						Сообщение = НСтр("ru = 'Товар категории маркетплейса <%1> подлежит обязательной сертификации. Необходимо добавить сертификат с признаком ""Публикуется в сервисах"" в сертификаты номенклатуры <%2> или установить этот признак у существующих сертификатов. Требуемый формат файлов: %3.'");
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
								Параметры.НаименованиеКатегорииМаркетплейса,
								Параметры.Номенклатура,
								СтрСоединить(РасширенияИзображений(Истина), ", "));
						ЕстьКритичныеОшибки = Истина;
					Иначе
						Сообщение = НСтр("ru = 'Товар категории маркетплейса <%1> подлежит сертификации. Рекомендуется добавить сертификат с признаком ""Публикуется в сервисах"" в сертификаты номенклатуры <%2> или установить этот признак у существующих сертификатов. Требуемый формат файлов: %3.'");
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
								Параметры.НаименованиеКатегорииМаркетплейса,
								Параметры.Номенклатура,
								СтрСоединить(РасширенияИзображений(Истина), ", "));
					КонецЕсли;

					МассивОшибок.Добавить(СообщениеОбОшибке);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Обработка массива ошибок.
		Если МассивОшибок.Количество() > 0 Тогда
			ОшибкиПроверкиДанныхТовара = СтрСоединить(МассивОшибок, Символы.ПС);

			РезультатПроверки.ЕстьКритичныеОшибки = ЕстьКритичныеОшибки;
			РезультатПроверки.КодОшибки = ?(ЕстьКритичныеОшибки, КодОшибки, ""); // Для некритичных ошибок код ошибки не заполняется.
			РезультатПроверки.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки
					+ ?(ПустаяСтрока(РезультатПроверки.ОписаниеОшибки), "", Символы.ПС) + ОшибкиПроверкиДанныхТовара;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

Функция ПодготовитьДеревоРеквизитовТовара(ТаблицаРеквизитов, Знач РеквизитыДляСравнения = Ложь)

	ДеревоРеквизитов = НовоеДеревоРеквизитов(РеквизитыДляСравнения);

	МассивЗначенийПроверки = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();
	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	СоответствиеТипов = НовоеСоответствиеТипов();

	Для Каждого ДанныеАтрибута Из ТаблицаРеквизитов Цикл
		Если МассивЗначенийПроверки.Найти(СтрЗаменить(ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса, " ", "_")) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Родитель = ДеревоРеквизитов.Строки.Найти(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса,
					"ИдентификаторАтрибутаМаркетплейса", Ложь);

			Если Родитель = Неопределено Тогда
				Родитель = ДеревоРеквизитов.Строки.Добавить();
				Родитель.ИдентификаторКатегорииМаркетплейса = ДанныеАтрибута.ИдентификаторКатегорииМаркетплейса;
				Родитель.ИдентификаторАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;
				Родитель.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				Родитель.НомерКартинкиКоллекцииТипов = 99;
				Родитель.Уровень = 0;
				Если РеквизитыДляСравнения Тогда
					Родитель.ТекущееНомерКартинкиКоллекцииТипов = 99;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Родитель = ДеревоРеквизитов;
		КонецЕсли;

		СтрокаРеквизитовЗначенияАтрибута = "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса";
		Если РеквизитыДляСравнения Тогда
			СтрокаРеквизитовЗначенияАтрибута = СтрокаРеквизитовЗначенияАтрибута
											   + ", ТекущееЗначениеАтрибутаМаркетплейса, ТекущееИдентификаторЗначенияАтрибутаМаркетплейса";
		КонецЕсли;
		
		ЭтоСуществующаяСтрока = Ложь;
		НоваяСтрока           = Неопределено;

		Если ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока = Родитель.Строки.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Родитель.Строки.Добавить();
			Иначе
				ЭтоСуществующаяСтрока = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
				Если ДанныеАтрибута.ДоступенВыборЗначенияИзСписка Тогда
					НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса, ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса);
				Иначе
					НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса);
				КонецЕсли;

				НоваяСтрока.ЗначениеАтрибутаЗаполнено = (НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Количество() > 0);
			КонецЕсли;
			
			Если РеквизитыДляСравнения И Не ДанныеАтрибута.ТекущееЯвляетсяКоллекциейЗначений Тогда
				НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса              = ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса;
				НоваяСтрока.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = ДанныеАтрибута.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.ТекущееЗначениеАтрибутаЗаполнено 				 = ЗначениеЗаполнено(НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса);
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДляСравнения И ДанныеАтрибута.ТекущееЯвляетсяКоллекциейЗначений Тогда
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Родитель.Строки.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

				Если НоваяСтрока = Неопределено Тогда
					НоваяСтрока = Родитель.Строки.Добавить();
				Иначе
					ЭтоСуществующаяСтрока = Истина;
				КонецЕсли;
			КонецЕсли;

			НоваяСтрока.ЕстьРазличия = НоваяСтрока.ЕстьРазличия Или ДанныеАтрибута.ЕстьРазличия;
			
			Если ЗначениеЗаполнено(ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса) Тогда
				Если ДанныеАтрибута.ТекущееДоступенВыборЗначенияИзСписка Тогда
					НоваяСтрока.ТекущееЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса, ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса);
				Иначе
					НоваяСтрока.ТекущееЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса);
				КонецЕсли;

				НоваяСтрока.ТекущееЗначениеАтрибутаЗаполнено = (НоваяСтрока.ТекущееЗначенияАтрибутаМаркетплейса.Количество() > 0);
			КонецЕсли;
			
			Если Не ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
				НоваяСтрока.ЗначениеАтрибутаМаркетплейса              = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.ЗначениеАтрибутаЗаполнено 				  = ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
			КонецЕсли;
		КонецЕсли;

		Если ЭтоСуществующаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = Родитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута, СтрокаРеквизитовЗначенияАтрибута);
			НоваяСтрока.ЗначениеАтрибутаЗаполнено = ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
			Если РеквизитыДляСравнения Тогда
				НоваяСтрока.ТекущееЗначениеАтрибутаЗаполнено = ЗначениеЗаполнено(НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение новой строки
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута, , СтрокаРеквизитовЗначенияАтрибута);
		НоваяСтрока.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута);
		Если РеквизитыДляСравнения  Тогда
			НоваяСтрока.ТекущееТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТекущееТипЗначенияАтрибута);
		КонецЕсли;

		Если НоваяСтрока.ТипЗначенияАтрибута1С = "Булево" Тогда
			НоваяСтрока.ЗначениеАтрибутаМаркетплейсаБулево = НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
		КонецЕсли;
		Если РеквизитыДляСравнения И НоваяСтрока.ТекущееТипЗначенияАтрибута1С = "Булево"  Тогда
			НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейсаБулево = НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса;
		КонецЕсли;

		Если НоваяСтрока.ИзменилсяРеквизит1С Тогда
			НоваяСтрока.КэшЗначениеРеквизита1С = ДанныеАтрибута.ЗначениеРеквизита1С;
			НоваяСтрока.ЗначениеРеквизита1С = ДанныеАтрибута.НовоеЗначениеРеквизита1С;
		КонецЕсли;

		НоваяСтрока.Уровень = 3;

		НоваяСтрока.НомерКартинкиКоллекцииТипов = ОпределитьНомерКартинкиКоллекцииТипов(ДанныеАтрибута.ТипЗначенияАтрибута, НоваяСтрока.ТипЗначенияАтрибута1С,
				НоваяСтрока.ЯвляетсяКоллекциейЗначений, НоваяСтрока.ДоступенВыборЗначенияИзСписка);
		Если РеквизитыДляСравнения Тогда
			НоваяСтрока.ТекущееНомерКартинкиКоллекцииТипов = ОпределитьНомерКартинкиКоллекцииТипов(ДанныеАтрибута.ТекущееТипЗначенияАтрибута, НоваяСтрока.ТекущееТипЗначенияАтрибута1С,
					НоваяСтрока.ТекущееЯвляетсяКоллекциейЗначений, НоваяСтрока.ТекущееДоступенВыборЗначенияИзСписка);
		КонецЕсли;

		Если НоваяСтрока.ЯвляетсяКоллекциейЗначений И НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Коллекция значений из списка>'");
		ИначеЕсли НоваяСтрока.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<Коллекция значений типа %1>'"),
				ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С));
		ИначеЕсли НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Значение из списка>'");
		Иначе
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = "<" + ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
		КонецЕсли;

		РеквизитыЗаполнения = Неопределено;
		Если ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, РеквизитыЗаполнения) Тогда
			ПорядокСортировки = 0;
			РеквизитыЗаполнения.Свойство("ПорядокСортировки", ПорядокСортировки);
			НоваяСтрока.ПорядокСортировки = ПорядокСортировки;
		КонецЕсли;
	КонецЦикла;

	ДеревоРеквизитов.Строки.Сортировать("Уровень Возр, ОбязательныйАтрибут Убыв, ПорядокСортировки, НаименованиеАтрибутаМаркетплейса Возр", Истина);
	ДеревоРеквизитов.Колонки.Удалить("ПорядокСортировки");

	Возврат ДеревоРеквизитов;

КонецФункции

Функция ПолучитьОписаниеТовараМаркетплейса(ДанныеОбъекта, ПараметрыЗаполнения)

	Если ДанныеОбъекта = Неопределено
			Или Не ЗначениеЗаполнено(ПараметрыЗаполнения.ИдентификаторПубликации) 
					И ДанныеОбъекта.Количество() = 0 Тогда
		Возврат ПолучитьОписаниеНовогоТовараМаркетплейса();
	КонецЕсли;

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокументАтрибутов = Новый ТабличныйДокумент;

	Макет = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолучитьМакет("ПФ_MXL_ОписаниеТовара");

	ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокГруппыДанных");

	ОбластьМаркера = Макет.ПолучитьОбласть("Маркер|ОбластьМаркера");
	ОбластьПустогоМаркера = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьМаркера");

	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");

	ОбластьСвойствоЗаголовок         = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьЗаголовок");
	ОбластьСвойствоЗначениеЗаполнено = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьЗначение");
	ОбластьСвойствоПустоеЗначение    = Макет.ПолучитьОбласть("СтрокаСвойстваПустоеЗначение|ОбластьЗначение");
	ОбластьСвойствоПримечание        = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьПримечание");

	ОбластьГруппаАтрибутов = Макет.ПолучитьОбласть("СтрокаГруппыАтрибутов");
	
	ОбластьАтрибутГруппыОбязательныйЗаголовок   = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьЗаголовок");
	ОбластьАтрибутГруппыНеобязательныйЗаголовок = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппыНеобязательного|ОбластьЗаголовок");
	ОбластьАтрибутОбязательныйЗаголовок         = Макет.ПолучитьОбласть("СтрокаАтрибута|ОбластьЗаголовок");
	ОбластьАтрибутНеобязательныйЗаголовок       = Макет.ПолучитьОбласть("СтрокаАтрибутаНеобязательного|ОбластьЗаголовок");
	
	ОбластьАтрибутЗначениеЗаполнено = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьЗначение");
	ОбластьАтрибутПустоеЗначение    = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппыНеобязательного|ОбластьЗначение");
	ОбластьАтрибутПримечание        = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьПримечание");

	// Основные данные.
	ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Основные данные'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);

	// Представление товара.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Представление товара на площадке маркетплейса'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.ПредставлениеОбъектаМаркетплейса);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задано представление товара'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);
	
	// Штрихкод.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Штрихкод'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.Штрихкод);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задан штрихкод'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено ;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);
	
	// Ставка НДС.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Ставка НДС (из номенклатуры)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = ЧислоВСтроку(ПараметрыЗаполнения.СтавкаНДС, Истина);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задана ставка НДС'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Значение = Значение + " %";
		Область = ОбластьСвойствоЗначениеЗаполнено ;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Категория 1С.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория 1С'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.Категория1С);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определена категория 1С'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Источник категории маркетплейса.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория 1С, являющаяся источником категории маркетплейса (по настройкам соответствия)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.ИсточникКатегорииМаркетплейса);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определен источник категории маркетплейса'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Категория маркетплейса.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория маркетплейса'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = СтрЗаменить(ПараметрыЗаполнения.НаименованиеКатегорииМаркетплейса, НСтр("ru = '<не определена>'"), "");
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определена категория маркетплейса'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Если Не ПустаяСтрока(ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса) Тогда
		Значение = Значение + " (id " + ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса + ")";
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Идентификатор публикации - идентификатор товара в 1С.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Идентификатор публикации (артикул на площадке маркетплейса)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	ОбластьСвойствоЗначениеЗаполнено.Параметры.Значение = ПараметрыЗаполнения.ИдентификаторПубликации;
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗначениеЗаполнено);

	// Идентификатор товара на маркетплейсе.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Идентификатор товара на маркетплейсе'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = ПараметрыЗаполнения.ИдентификаторОбъектаМаркетплейса;
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Товар не прошел модерацию'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	Если ДанныеОбъекта.Количество() > 0 Тогда
		СлужебныеАтрибуты = НовыеСлужебныеАтрибуты();
		ПредставленияПризнакаОбъединенияКарточекТоваров = ДанныеДляПроверкиПризнакаОбъединенияКарточекТоваров();

		ТабличныйДокументАтрибутов.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Атрибуты товара'");
		ТабличныйДокументАтрибутов.Вывести(ОбластьЗаголовка);

		ТекущийРодитель = "";

		Для Каждого ДанныеАтрибута Из ДанныеОбъекта Цикл
			
			// Вставка признака Объединения карточек.
			ЗначениеСравнения = СтрЗаменить(ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса, " ", "_");
			Если ПредставленияПризнакаОбъединенияКарточекТоваров.Найти(ЗначениеСравнения) <> Неопределено Тогда
				Значение = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				Примечание = "";

				МассивПримечаний = Новый Массив;
				Если ЗначениеЗаполнено(Значение) Тогда
					Область = ОбластьСвойствоЗначениеЗаполнено;
				Иначе
					Значение = НСтр("ru = 'Не заполнено значение'");
					Область = ОбластьСвойствоПустоеЗначение;

					Примечание = НСтр("ru = 'Причина: %1'");
					Если ДанныеАтрибута.НеЗаполненПутьКРеквизиту1С Тогда
						ЗначениеПримечания = НСтр("ru = 'не указан путь к реквизиту 1С'");
					ИначеЕсли ДанныеАтрибута.НеЗаполненРеквизит1С Тогда
						ШаблонДополнения = НСтр("ru = 'не заполнен реквизит 1С <%1>'");
						ЗначениеПримечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДополнения, ДанныеАтрибута.ПредставлениеРеквизита1С);
					КонецЕсли;
					МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Примечание, ЗначениеПримечания));
				КонецЕсли;

				Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
					ТабличныйДокумент.Вывести(ОбластьМаркера);

					ШаблонДополнения = НСтр("ru = 'Изменено значение реквизита 1С - новое значение [ %1 ]'");
					МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДополнения, ДанныеАтрибута.НовоеЗначениеРеквизита1С));
				Иначе
					ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
				КонецЕсли;

				ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Товар объединяется в одну карточку по значению'");
				ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);

				Область.Параметры.Значение = Значение;
				ТабличныйДокумент.Присоединить(Область);

				ОбластьСвойствоПримечание.Параметры.Примечание = СтрСоединить(МассивПримечаний, Символы.ПС);
				ТабличныйДокумент.Присоединить(ОбластьСвойствоПримечание);

				Продолжить;
			КонецЕсли;

			Если ТекущийРодитель <> ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса Тогда
				ТекущийРодитель = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;

				// Вывод группы атрибутов.
				Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
					ОбластьГруппаАтрибутов.Параметры.Заголовок = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
					Если СлужебныеАтрибуты.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса) = Неопределено Тогда
						ОбластьГруппаАтрибутов.Параметры.Заголовок =  ОбластьГруппаАтрибутов.Параметры.Заголовок
								+ " (id " + ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса + ")";
					КонецЕсли;
					ТабличныйДокументАтрибутов.Вывести(ОбластьГруппаАтрибутов);
				КонецЕсли;
			КонецЕсли;

			// Вывод атрибута.
			Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутГруппыОбязательныйЗаголовок;
				Иначе
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутГруппыНеобязательныйЗаголовок;
				КонецЕсли;
			Иначе
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутОбязательныйЗаголовок;
				Иначе
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутНеобязательныйЗаголовок;
				КонецЕсли;
			КонецЕсли;

			Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
				ТабличныйДокументАтрибутов.Вывести(ОбластьМаркера);
			Иначе
				ТабличныйДокументАтрибутов.Вывести(ОбластьПустогоМаркера);
			КонецЕсли;

			ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
			Если СлужебныеАтрибуты.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса) = Неопределено Тогда
				ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = ИспользуемаяОбластьЗаголовок.Параметры.Заголовок
						+ " (id " + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса + ")";
			КонецЕсли;
			ТабличныйДокументАтрибутов.Присоединить(ИспользуемаяОбластьЗаголовок);

			МассивПримечаний = Новый Массив;
			Если ЗначениеЗаполнено(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				Если Не ПустаяСтрока(ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
					ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение
							+ " (id " + ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса + ")";
				КонецЕсли;
				ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутЗначениеЗаполнено);

				Если ДанныеАтрибута.ЗначениеАтрибутаЗаданоПользователем Тогда
					МассивПримечаний.Добавить(НСтр("ru = 'Значение заполнено / изменено пользователем'"));
				ИначеЕсли ДанныеАтрибута.УстановленоЗначениеПоУмолчанию Тогда
					МассивПримечаний.Добавить(НСтр("ru = 'Установлено значение по умолчанию'"));
				КонецЕсли;
			Иначе
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не заполнен обязательный атрибут'");
				Иначе
					ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не заполнен атрибут'");
				КонецЕсли;
				ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутПустоеЗначение);

				Значение = "";
				Если ДанныеАтрибута.НеЗаполненПутьКРеквизиту1С Тогда
					Значение = НСтр("ru = 'не указан путь к реквизиту 1С'");
				ИначеЕсли ДанныеАтрибута.НеЗаполненРеквизит1С Тогда
					Шаблон = НСтр("ru = 'не заполнен реквизит 1С <%1>'");
					Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.ПредставлениеРеквизита1С);
				ИначеЕсли ДанныеАтрибута.НеЗаполненоСоответствиеАтрибута Тогда
					Шаблон = НСтр("ru = 'не заполнено соответствие для значения <%1>'");
					Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.ЗначениеРеквизита1С);
				КонецЕсли;

				МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Причина: %1'"), Значение));
			КонецЕсли;

			Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
				Шаблон = НСтр("ru = 'Изменено значение реквизита 1С - новое значение <%1>'");
				МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.НовоеЗначениеРеквизита1С));
			КонецЕсли;

			ОбластьАтрибутПримечание.Параметры.Примечание = СтрСоединить(МассивПримечаний, Символы.ПС);
			ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутПримечание);

		КонецЦикла;
	Иначе
		ТабличныйДокументАтрибутов.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Не обнаружены сохраненные данные по атрибутам.'") + Символы.ПС
				+ НСтр("ru = 'Необходимо заполнить атрибуты товара.'");
		ТабличныйДокументАтрибутов.Вывести(ОбластьЗаголовка);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ТабличныйДокументАтрибутов);
	
	Если ПараметрыЗаполнения.Цены.Количество() > 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Цены товара'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);

		Для Каждого ДанныеЦены Из ПараметрыЗаполнения.Цены Цикл
			ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);

			ДанныеЦены = ДанныеЦены.Значение;

			Если ДанныеЦены.ПроверкаЗаполнения Тогда
				ИспользуемаяОбластьЗаголовок = ОбластьАтрибутОбязательныйЗаголовок;
			Иначе
				ИспользуемаяОбластьЗаголовок = ОбластьАтрибутНеобязательныйЗаголовок;
			КонецЕсли;

			Значение = ДанныеЦены.ВидЦены;
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Значение = НСтр("ru = '<Не задан вид цены>'");
			КонецЕсли;
			ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = Значение;
			ТабличныйДокумент.Присоединить(ИспользуемаяОбластьЗаголовок);

			Если ЗначениеЗаполнено(ДанныеЦены.Цена) Тогда
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = Формат(ДанныеЦены.Цена, "ЧДЦ=2; ЧН=; ЧГ=") + " " + ПараметрыЗаполнения.Валюта;
				ТабличныйДокумент.Присоединить(ОбластьАтрибутЗначениеЗаполнено);
			ИначеЕсли ДанныеЦены.ПроверкаЗаполнения Тогда
				ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не задана цена'");
				ТабличныйДокумент.Присоединить(ОбластьАтрибутПустоеЗначение);
			Иначе
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = НСтр("ru = 'Не задана цена'");
				ТабличныйДокумент.Присоединить(ОбластьАтрибутЗначениеЗаполнено);
			КонецЕсли;

			ОбластьАтрибутПримечание.Параметры.Примечание = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вид цены маркетплейса: <%1>'"),
							ДанныеЦены.ПредставлениеВидаЦены);
			ТабличныйДокумент.Присоединить(ОбластьАтрибутПримечание);
		КонецЦикла;
	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

// Возвращает сообщение об отсутствии атрибутов.
// 
// Возвращаемое значение:
//  Строка - форматированная строка.
//
Функция ПолучитьОписаниеНовогоТовараМаркетплейса() Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолучитьМакет("ПФ_MXL_ОписаниеТовара");

	// Основные данные.
	ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокГруппыДанных");
	ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Основные данные'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);

	// Информация о товаре.
	ОбластьНезаполненныхАтрибутов = Макет.ПолучитьОбласть("СтрокаНезаполненныхАтрибутов");
	ТабличныйДокумент.Вывести(ОбластьНезаполненныхАтрибутов);
	
	Возврат ТабличныйДокумент;

КонецФункции

// Возвращает результат обработки выбора или подбора.
//
// Параметры:
//   ТаблицаТоваров            - см. НоваяТаблицаПубликацииТоваров.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
// Возвращаемое значение:
//   Булево - результат обработки.
//
Функция ОбработкаВыбораПодбор(ТаблицаТоваров, УчетнаяЗаписьМаркетплейса) Экспорт

	Результат = Новый Структура("ДобавлениеЗаписейВыполнено", Истина);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
	|	ВЫБОР
	|		КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса ЕСТЬ NULL
	|			ТОГДА СправУчетныеЗаписи.ИсточникКатегории
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
	|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
	|	КОНЕЦ КАК ИсточникКатегории
	|ПОМЕСТИТЬ ДанныеПубликации
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
	|		ПО ТаблицаТоваров.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|		ПО ТаблицаТоваров.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
	|			И ТаблицаТоваров.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
	|			И ТаблицаТоваров.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
	|			И ТаблицаТоваров.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
	|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|ГДЕ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваров";

	Запрос.Выполнить();

	ПараметрыЗаполненияТоваров = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияТоваров.ПолучитьАтрибуты = Истина;
	ПараметрыЗаполненияТоваров.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияТоваров.ПолучитьСертификаты = Истина;
	ПараметрыЗаполненияТоваров.ОбновитьДанные = Истина;
	ПараметрыЗаполненияТоваров.ПроверитьОшибкиЗаполнения = Истина;

	ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияТоваров);

	// Заполнение признаков продаж по схемам работы.
	РесурсыРегистраСтатусов = Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Ресурсы;

	ДанныеПубликации.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBO", Новый ОписаниеТипов("Булево"));
	ПродаетсяПоСхемеРаботыFBO = РесурсыРегистраСтатусов.ПродаетсяПоСхемеРаботыFBO.ЗначениеЗаполнения;
	ДанныеПубликации.ЗаполнитьЗначения(ПродаетсяПоСхемеРаботыFBO, "ПродаетсяПоСхемеРаботыFBO");

	ДанныеПубликации.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBS", Новый ОписаниеТипов("Булево"));
	ПродаетсяПоСхемеРаботыFBS = РесурсыРегистраСтатусов.ПродаетсяПоСхемеРаботыFBS.ЗначениеЗаполнения;
	ДанныеПубликации.ЗаполнитьЗначения(ПродаетсяПоСхемеРаботыFBS, "ПродаетсяПоСхемеРаботыFBS");

	ДанныеПубликации.Колонки.Добавить("ПродаетсяПоСхемеРаботыDBS", Новый ОписаниеТипов("Булево"));
	ПродаетсяПоСхемеРаботыDBS = РесурсыРегистраСтатусов.ПродаетсяПоСхемеРаботыDBS.ЗначениеЗаполнения;
	ДанныеПубликации.ЗаполнитьЗначения(ПродаетсяПоСхемеРаботыDBS, "ПродаетсяПоСхемеРаботыDBS");

	// Создание позиций товаров.
	Если Не ПустаяСтрока(ПараметрыЗаполненияТоваров.СообщениеПользователю) Тогда
		Результат.Вставить("СообщениеПользователю", ПараметрыЗаполненияТоваров.СообщениеПользователю);
	КонецЕсли;

	Если ДанныеПубликации.Количество() Тогда
		СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации);
	Иначе
		Результат.ДобавлениеЗаписейВыполнено = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИмпортДанныхСлужебный

// Конструктор структуры дополнительных параметров процедуры импорта данных с торговой площадки.
// 
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. 
//                                          Может принимать значения: "ИдентификаторОбъектаМаркетплейса", 
//                                          "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос.
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" 
//                                          необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго 
//                                          уровня дерева товаров.
//
Функция НовыеДополнительныеПараметрыИмпортаДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяИдентификатора",              "ИдентификаторОбъектаМаркетплейса");
	Результат.Вставить("РазмерПорцииЗагрузкиДанных",     1000);
	Результат.Вставить("СоздатьЭлементыНоменклатуры",    Ложь);
	
	// Предопределенные
	Результат.Вставить("СортироватьСтрокиДереваТоваров", Истина);
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск номенклатуры, характеристик, упаковок, категорий для указанных товарных позиций из сервиса Ozon одним запросом.
//
// Параметры:                                                                   
//   Идентификаторы               - Массив Из Строка - список идентификаторов (внутренних публикации или внешних Ozon) 
//                                    товарных позиций, для которых выполняется поиск.
//                                - Строка - идентификатор (внутренний или внешний) публикации товарной позиции, для 
//                                    которой выполняется поиск.
//   ИмяИдентификатора            - Строка - имя поля идентификатора в анализируемых данных.
//   ОписаниеТоваров              - ТаблицаЗначений - описания товаров из сервиса, см. НоваяТаблицаОписанияТоваров.
//   ОписаниеХарактеристикТоваров - ТаблицаЗначений - значения реквизитов товара из сервиса, 
//                                    см. НоваяТаблицаОписанияХарактеристикТоваров.
//   ПараметрыРасчетаСтавкиНДС    - Структура - параметры определения ставок НДС по номенклатуре:
//     * НалогообложениеНДС         - ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения НДС;
//     * Организация                - СправочникСсылка.Организации - организация;
//     * Дата                       - Дата - период определения ставок НДС.
//   РазделителиСловПоиска        - Строка - перечень символов-разделителей для поиска по частям наименований.
//   ПоискПоХарактеристикам       - Булево - Истина, если выполнять поиск характеристик номенклатуры по частям наименования.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * ОсновныеСправочники               - Неопределено,
//                                         - ВыборкаИзРезультатаЗапроса - результат поиска номенклатуры, характеристик, упаковки:
//       ** УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//       ** ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//       ** ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//       ** ВариантПоиска                    - Число - вариант поиска: 
//                                               (-1) - не найдено; 
//                                               0 - неоднозначный поиск; 
//                                               1, 2 - по штрихкоду; 
//                                               3, 4 - по артикулу; 
//                                               5 - по идентификаторам из сервиса Ozon;
//                                               6 - по наименованию; 
//                                               10 и более - по словам наименований; 
//                                               для поиска по номенклатуре контрагентов добавляется 0.1.
//       ** ОднозначныйПоиск                 - Булево - признак однозначных требований к результатам поиска;
//       ** Номенклатура                     - СправочникСсылка.Номенклатура - найденная номенклатура;
//       ** ХарактеристикиИспользуются       - Булево - признак использования характеристик номенклатуры;
//       ** Характеристика                   - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//       ** ИспользоватьУпаковки             - Булево - признак использования упаковок номенклатуры;
//       ** Упаковка                         - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка;
//       ** ЕдиницаИзмерения                 - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры;
//                                           - Неопределено - категория не найдена;
//       ** СтавкаНДС                        - СправочникСсылка.СтавкиНДС - ставка НДС номенклатуры;
//       ** Ставка                           - Число - ставка НДС номенклатуры.
//       ** Категория                        - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                               начальная категория 1С для определения.
//     * Категории                         - Неопределено,
//                                         - Массив Из СправочникСсылка.ВидыНоменклатуры,
//                                         - Массив Из СправочникСсылка.Номенклатура,
//                                         - Массив Из СправочникСсылка.ТоварныеКатегории - категории, для которых нужно 
//                                             получить категорию-источник.
//
Функция НайтиНоменклатурыХарактеристикиУпаковки(Знач Идентификаторы, Знач ИмяИдентификатора, 
			ОписаниеТоваров, ОписаниеХарактеристикТоваров, ПараметрыРасчетаСтавкиНДС,
			РазделителиСловПоиска = Неопределено, ПоискПоХарактеристикам = Ложь) Экспорт
			
	Результат = Новый Структура;
	Результат.Вставить("ОсновныеСправочники", Неопределено);
	Результат.Вставить("Категории",           Неопределено);
		
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Идентификаторы, Символы.ПС, Ложь);
	КонецЕсли;
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.НайтиНоменклатурыХарактеристикиУпаковки");
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ПоискПоХарактеристикам = Ложь;
	КонецЕсли;
	
	ТаблицаПоиска = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	
	Для Каждого СтрокаТаблицыЗначений Из ОписаниеТоваров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицыЗначений[ИмяИдентификатора]) Тогда
			Продолжить;
		КонецЕсли;
		Если Идентификаторы.Найти(СтрокаТаблицыЗначений[ИмяИдентификатора]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск по штрихкоду
		Для Каждого ЭлементКоллекции Из СтрРазделить(СтрокаТаблицыЗначений.Штрихкод, ";", Ложь) Цикл
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 1;
			НоваяСтрока.ЗначениеПоиска                   = СокрЛП(ЭлементКоллекции);
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЦикла;
		
		// Поиск по артикулу как штрихкоду
		НоваяСтрока                                  = ТаблицаПоиска.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
		НоваяСтрока.ВариантПоиска                    = 2;
		НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ПоискХарактеристики              = Ложь;
		
		// Поиск по артикулу
		НоваяСтрока                                  = ТаблицаПоиска.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
		НоваяСтрока.ВариантПоиска                    = 4;
		НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ПоискХарактеристики              = Ложь;
		
		// Поиск по идентификатору контрагента
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 5;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИдентификаторFBOSKU) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 5;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторFBOSKU;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИдентификаторFBSSKU) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 5;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторFBSSKU;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		// Поиск по наименованию
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 6;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
			
			Наименование         = СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса;
			НаименованияПоСловам = Новый Массив;
			НомераВхождений      = Новый Соответствие;
			КоллекцияЭлементов   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Наименование, РазделителиСловПоиска);
			
			Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				НомерВхождения = НомераВхождений.Получить(ЭлементКоллекции);
				Если НомерВхождения = Неопределено Тогда
					НомерВхождения = 0;
				КонецЕсли;
				НомерВхождения = НомерВхождения + 1;
				
				НаименованияПоСловам.Вставить(0, Сред(Наименование, 1, СтрНайти(Наименование, ЭлементКоллекции,,, НомерВхождения) - 1) + ЭлементКоллекции);
				НомераВхождений.Вставить(ЭлементКоллекции, НомерВхождения);
			КонецЦикла;
			
			Индекс = 0;
			Пока Индекс < НаименованияПоСловам.Количество() Цикл
				НоваяСтрока                                  = ТаблицаПоиска.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
				НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
				НоваяСтрока.ЗначениеПоиска                   = НаименованияПоСловам[Индекс];
				НоваяСтрока.ПоискХарактеристики              = Ложь;
				
				Если ЗначениеЗаполнено(НаименованияПоСловам[Индекс]) 
					 И ПоискПоХарактеристикам Тогда
					Для Каждого ЭлементКоллекции Из НаименованияПоСловам Цикл
						Если СтрНайти(ЭлементКоллекции, НаименованияПоСловам[Индекс]) = 1 Тогда
							Наименование = СтрЗаменить(ЭлементКоллекции, НаименованияПоСловам[Индекс], "");
							
							Если ЗначениеЗаполнено(Наименование) Тогда
								НоваяСтрока                                  = ТаблицаПоиска.Добавить();
								НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
								НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
								НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
								НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
								НоваяСтрока.ЗначениеПоиска                   = Наименование;
								НоваяСтрока.ПоискХарактеристики              = Истина;
								
								Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Наименование, 1), РазделителиСловПоиска) Тогда
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = Сред(Наименование, 2);
									НоваяСтрока.ПоискХарактеристики              = Истина;
									
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = СокрЛП(Сред(Наименование, 2));
									НоваяСтрока.ПоискХарактеристики              = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторАтрибута_Артикул = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_Артикул"];
	ИдентификаторАтрибута_Наименование = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_Наименование"];

	Для Каждого СтрокаТаблицыЗначений Из ОписаниеХарактеристикТоваров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицыЗначений[ИмяИдентификатора]) Тогда
			Продолжить;
		КонецЕсли;
		Если Идентификаторы.Найти(СтрокаТаблицыЗначений[ИмяИдентификатора]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск по артикулу
		НайденныеСтроки = СтрокаТаблицыЗначений.ЗначенияАтрибутов.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_Артикул));
		Если НайденныеСтроки.Количество() > 0 
			 И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 3;
			НоваяСтрока.ЗначениеПоиска                   = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		// Поиск по наименованию
		НайденныеСтроки = СтрокаТаблицыЗначений.ЗначенияАтрибутов.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_Наименование));
		Если НайденныеСтроки.Количество() > 0 
			 И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 6;
			НоваяСтрока.ЗначениеПоиска                   = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
			
			Наименование         = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
			НаименованияПоСловам = Новый Массив;
			НомераВхождений      = Новый Соответствие;
			КоллекцияЭлементов   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Наименование, РазделителиСловПоиска);
			
			Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				НомерВхождения = НомераВхождений.Получить(ЭлементКоллекции);
				Если НомерВхождения = Неопределено Тогда
					НомерВхождения = 0;
				КонецЕсли;
				НомерВхождения = НомерВхождения + 1;
				
				НаименованияПоСловам.Вставить(0, Сред(Наименование, 1, СтрНайти(Наименование, ЭлементКоллекции,,, НомерВхождения) - 1) + ЭлементКоллекции);
				НомераВхождений.Вставить(ЭлементКоллекции, НомерВхождения);
			КонецЦикла;
			
			Индекс = 0;
			Пока Индекс < НаименованияПоСловам.Количество() Цикл
				НоваяСтрока                                  = ТаблицаПоиска.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
				НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
				НоваяСтрока.ЗначениеПоиска                   = НаименованияПоСловам[Индекс];
				НоваяСтрока.ПоискХарактеристики              = Ложь;
				
				Если ЗначениеЗаполнено(НаименованияПоСловам[Индекс]) 
					 И ПоискПоХарактеристикам Тогда
					Для Каждого ЭлементКоллекции Из НаименованияПоСловам Цикл
						Если СтрНайти(ЭлементКоллекции, НаименованияПоСловам[Индекс]) = 1 Тогда
							Наименование = СтрЗаменить(ЭлементКоллекции, НаименованияПоСловам[Индекс], "");
							
							Если ЗначениеЗаполнено(Наименование) Тогда
								НоваяСтрока                                  = ТаблицаПоиска.Добавить();
								НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
								НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
								НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
								НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
								НоваяСтрока.ЗначениеПоиска                   = Наименование;
								НоваяСтрока.ПоискХарактеристики              = Истина;
								
								Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Наименование, 1), РазделителиСловПоиска) Тогда
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = Сред(Наименование, 2);
									НоваяСтрока.ПоискХарактеристики              = Истина;
									
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = СокрЛП(Сред(Наименование, 2));
									НоваяСтрока.ПоискХарактеристики              = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаПоиска.УчетнаяЗаписьМаркетплейса КАК Справочник.УчетныеЗаписиМаркетплейсов) КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска,
		|	ТаблицаПоиска.ПоискХарактеристики КАК ПоискХарактеристики
		|ПОМЕСТИТЬ ТаблицаПоиска
		|ИЗ
		|	&ТаблицаПоиска КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВариантПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ХарактеристикиНоменклатуры
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (&ПоискПоХарактеристикам)
		|			И (ТаблицаПоиска.ВариантПоиска >= 10)
		|			И (ТаблицаПоиска.ПоискХарактеристики)
		|			И ТаблицаПоиска.ЗначениеПоиска = ХарактеристикиНоменклатуры.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец,
		|	ВариантПоиска,
		|	УчетнаяЗаписьМаркетплейса,
		|	ИдентификаторПубликации,
		|	ИдентификаторОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	ИСТИНА КАК ОднозначныйПоиск,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВложенныйЗапрос
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ТаблицаПоиска.ВариантПоиска = 1
		|				ИЛИ ТаблицаПоиска.ВариантПоиска = 2)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И ТаблицаПоиска.ЗначениеПоиска = ШтрихкодыНоменклатуры.Штрихкод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ТаблицаПоиска.ВариантПоиска = 3
		|				ИЛИ ТаблицаПоиска.ВариантПоиска = 4)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Артикул
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО (ТаблицаПоиска.ВариантПоиска = 3
		|				ИЛИ ТаблицаПоиска.ВариантПоиска = 4)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ НоменклатураКонтрагентов.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = НоменклатураКонтрагентов.Артикул
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО (ТаблицаПоиска.ВариантПоиска = 5)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ НоменклатураКонтрагентов.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = НоменклатураКонтрагентов.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ТаблицаПоиска.ВариантПоиска = 6)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО (ТаблицаПоиска.ВариантПоиска = 6)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ НоменклатураКонтрагентов.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = НоменклатураКонтрагентов.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ТаблицаПоиска.ВариантПоиска >= 10)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (&ПоискПоХарактеристикам)
		|			И (Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					И Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
		|				ИЛИ Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					И Номенклатура.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
		|				ИЛИ Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					И Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец)
		|			И ТаблицаПоиска.ВариантПоиска = ХарактеристикиНоменклатуры.ВариантПоиска
		|			И ТаблицаПоиска.УчетнаяЗаписьМаркетплейса = ХарактеристикиНоменклатуры.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаПоиска.ИдентификаторПубликации = ХарактеристикиНоменклатуры.ИдентификаторПубликации
		|			И ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса = ХарактеристикиНоменклатуры.ИдентификаторОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|			ТОГДА &СтавкаНДСБезНДС
		|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
		|				И НЕ ЕСТЬNULL(ВложенныйЗапрос.Номенклатура.ПодакцизныйТовар, ЛОЖЬ)
		|			ТОГДА &СтавкаНДСБезНДС
		|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
		|			ТОГДА &СтавкаНДСПоУмолчанию
		|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы)
		|			ТОГДА &СтавкаНДСБезНДС
		|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
		|				И (ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|					ИЛИ ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА &СтавкаНДСПоУмолчанию
		|		КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
		|				И НЕ ЕСТЬNULL(ВложенныйЗапрос.Номенклатура.ПодакцизныйТовар, ЛОЖЬ)
		|			ТОГДА &СтавкаНДСБезНДС
		|		ИНАЧЕ ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС, ЕСТЬNULL(СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения)))
		|	КОНЕЦ КАК СтавкаНДС
		|ПОМЕСТИТЬ СтавкиНДСПоНоменклатуре
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &Страна) КАК СтавкиНДСНоменклатурыПриоритет1
		|		ПО ВложенныйЗапрос.Номенклатура = СтавкиНДСНоменклатурыПриоритет1.Номенклатура
		|			И (СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.НачалоПериода <= &Дата
		|				ИЛИ СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|			И (СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.КонецПериода >= &Дата
		|				ИЛИ СтавкиНДСНоменклатурыПриоритет1.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &ПустаяСтрана) КАК СтавкиНДСНоменклатурыПриоритет2
		|		ПО ВложенныйЗапрос.Номенклатура = СтавкиНДСНоменклатурыПриоритет2.Номенклатура
		|			И (СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.НачалоПериода <= &Дата
		|				ИЛИ СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|			И (СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.КонецПериода >= &Дата
		|				ИЛИ СтавкиНДСНоменклатурыПриоритет2.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &Страна) КАК СтавкиНДСНоменклатурыПриоритет3
		|		ПО (СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.НачалоПериода <= &Дата
		|				ИЛИ СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|			И (СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.КонецПериода >= &Дата
		|				ИЛИ СтавкиНДСНоменклатурыПриоритет3.СтавкаНДС.КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УчетнаяЗаписьМаркетплейса,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.ВидНоменклатуры
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.ТоварнаяКатегория
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВложенныйЗапрос.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВложенныйЗапрос.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВложенныйЗапрос.ВариантПоиска КАК ВариантПоиска,
		|	ВложенныйЗапрос.ОднозначныйПоиск КАК ОднозначныйПоиск,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
		|				И НЕ ЕСТЬNULL(СправочникНоменклатура.ИспользованиеХарактеристик, ЛОЖЬ) = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(СправочникНоменклатура.ИспользоватьУпаковки, ЛОЖЬ) КАК ИспользоватьУпаковки,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Упаковка = СправочникНоменклатура.ЕдиницаИзмерения
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ ВложенныйЗапрос.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(СтавкиНДСПоНоменклатуре.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения) КАК СтавкаНДС,
		|	ЕСТЬNULL(СтавкиНДСПоНоменклатуре.СтавкаНДС.Ставка, ВЫРАЗИТЬ(&СтавкаНДСПоТипуНалогообложения КАК Справочник.СтавкиНДС).Ставка) КАК Ставка,
		|	ЕСТЬNULL(СправочникНоменклатура.ОсобенностьУчета, ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)) КАК ВидПродукции,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.ВидНоменклатуры
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.ТоварнаяКатегория
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ВложенныйЗапрос.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДСПоНоменклатуре КАК СтавкиНДСПоНоменклатуре
		|		ПО ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса = СтавкиНДСПоНоменклатуре.УчетнаяЗаписьМаркетплейса
		|			И ВложенныйЗапрос.Номенклатура = СтавкиНДСПоНоменклатуре.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантПоиска,
		|	Характеристика УБЫВ,
		|	Упаковка УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаПоиска",                          ТаблицаПоиска);   
	Запрос.УстановитьПараметр("ПоискПоХарактеристикам",                 ПоискПоХарактеристикам);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("НалогообложениеНДС",                     ПараметрыРасчетаСтавкиНДС.НалогообложениеНДС);
	Запрос.УстановитьПараметр("СтавкаНДСПоТипуНалогообложения",         УчетНДСУП.СтавкаНДСПоТипуНалогообложения(ПараметрыРасчетаСтавкиНДС.НалогообложениеНДС, ПараметрыРасчетаСтавкиНДС.Организация, ПараметрыРасчетаСтавкиНДС.Дата));
	Запрос.УстановитьПараметр("СтавкаНДСПоУмолчанию",         			УчетНДСУП.СтавкаНДСПоУмолчанию(ПараметрыРасчетаСтавкиНДС.Организация, ПараметрыРасчетаСтавкиНДС.Дата, Истина, ПараметрыРасчетаСтавкиНДС.НалогообложениеНДС));
	Запрос.УстановитьПараметр("СтавкаНДСБезНДС",						Справочники.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("Дата",									ПараметрыРасчетаСтавкиНДС.Дата);
	Запрос.УстановитьПараметр("Страна",									ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ПараметрыРасчетаСтавкиНДС.Организация));
	Запрос.УстановитьПараметр("ПустаяСтрана", 							Справочники.СтраныМира.ПустаяСсылка());

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер, 
		ТаблицаПоиска.Количество() / 1000);
		
	Результат = Новый Структура;
	Результат.Вставить("ОсновныеСправочники", РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать());
	Результат.Вставить("Категории",           РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить().ВыгрузитьКолонку("Категория"));
		
	Возврат Результат;
	
КонецФункции

// Определяет номенклатуру, характеристику, упаковку, категорию для конкретной товарной позиции по результатам поиска.
//
// Параметры:                   
//   РезультатПоискаОсновныхСправочников - ВыборкаИзРезультатаЗапроса - результат поиска, 
//                                           см. НайтиНоменклатурыХарактеристикиУпаковки.
//   УчетнаяЗаписьМаркетплейса           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Идентификатор                       - Строка - внутренний идентификатор товара в системе продавца или идентификатор товара на маркетплейсе.
//   ИмяИдентификатора                   - Строка - имя поля идентификатора в анализируемых данных.
//
// Возвращаемое значение:
//   Структура - результат поиска:
//     * ВариантПоиска              - Число - вариант поиска.
//     * Номенклатура               - СправочникСсылка.Номенклатура - найденная номенклатура;
//     * ХарактеристикиИспользуются - Булево - признак использования характеристик номенклатуры;
//     * Характеристика             - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//     * ИспользоватьУпаковки       - Булево - признак использования упаковок номенклатуры;
//     * Упаковка                   - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка;
//     * ЕдиницаИзмерения           - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры;
//     * СтавкаНДС                  - СправочникСсылка.СтавкиНДС - ставка НДС номенклатуры;
//     * Ставка                     - Число - ставка НДС номенклатуры;
//     * Категория                  - Неопределено
//                                  - СправочникСсылка.ВидыНоменклатуры 
//                                  - СправочникСсылка.Номенклатура
//                                  - СправочникСсылка.ТоварныеКатегории - начальная категория 1С для определения;
//     * ЭтоМаркируемаяПродукция    - Булево - признак продукции, подлежащей маркировке.
//
Функция ОпределитьНоменклатуруХарактеристикуУпаковку(РезультатПоискаОсновныхСправочников, УчетнаяЗаписьМаркетплейса, 
			Идентификатор, ИмяИдентификатора) Экспорт

	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("ВариантПоиска",              -1);
	РезультатПоиска.Вставить("Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
	РезультатПоиска.Вставить("ХарактеристикиИспользуются", Ложь);
	РезультатПоиска.Вставить("Характеристика",             Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	РезультатПоиска.Вставить("ИспользоватьУпаковки",       Ложь);
	РезультатПоиска.Вставить("Упаковка",                   Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	РезультатПоиска.Вставить("ЕдиницаИзмерения",           Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	РезультатПоиска.Вставить("СтавкаНДС",                  Справочники.СтавкиНДС.БезНДС);
	РезультатПоиска.Вставить("Ставка",                     0);
	РезультатПоиска.Вставить("Категория",                  Неопределено);
	РезультатПоиска.Вставить("ЭтоМаркируемаяПродукция",    Ложь);
	
	Если РезультатПоискаОсновныхСправочников <> Неопределено Тогда
		Отбор = Новый Структура("УчетнаяЗаписьМаркетплейса, " + ИмяИдентификатора, УчетнаяЗаписьМаркетплейса, Идентификатор);
		РезультатПоискаОсновныхСправочников.Сбросить();
		Пока РезультатПоискаОсновныхСправочников.НайтиСледующий(Отбор) Цикл
			Если РезультатПоиска.ВариантПоиска > 0 Тогда
				Если РезультатПоиска.ВариантПоиска = РезультатПоискаОсновныхСправочников.ВариантПоиска 
					 И Не РезультатПоискаОсновныхСправочников.ОднозначныйПоиск Тогда
					РезультатПоиска.Вставить("ВариантПоиска", 0);
					Если РезультатПоиска.Номенклатура <> РезультатПоискаОсновныхСправочников.Номенклатура Тогда
						РезультатПоиска.Вставить("Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
						РезультатПоиска.Вставить("ХарактеристикиИспользуются", Ложь);
						РезультатПоиска.Вставить("ИспользоватьУпаковки",       Ложь);
						РезультатПоиска.Вставить("ЕдиницаИзмерения",           Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
						РезультатПоиска.Вставить("СтавкаНДС",                  Справочники.СтавкиНДС.БезНДС);
						РезультатПоиска.Вставить("Ставка",                     0);
						РезультатПоиска.Вставить("ЭтоМаркируемаяПродукция",    Ложь);
					КонецЕсли;
					РезультатПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					РезультатПоиска.Вставить("Упаковка",       Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
				КонецЕсли;
				
				Прервать;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(РезультатПоиска, РезультатПоискаОсновныхСправочников);

			Если ЗначениеЗаполнено(РезультатПоискаОсновныхСправочников.ВидПродукции) 
					И Не РезультатПоискаОсновныхСправочников.ВидПродукции = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета Тогда
				РезультатПоиска.Вставить("ЭтоМаркируемаяПродукция", ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(
																		ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(РезультатПоискаОсновныхСправочников.ВидПродукции)));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

// Заполняет значения служебных колонок таблицы значений реквизитов товара согласно указанных данных в порядке приоритета; 
// сравнивает с предыдущими значениями.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ЗначенияРеквизитов        - ТаблицаЗначений - значения реквизитов товара из сервиса, 
//                                 см. НоваяТаблицаЗначенийРеквизитов.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//                             - Неопределено - заполнение согласно кэша категорий не производится.
//   СоответствияАтрибутов     - ТаблицаЗначений - соответствие атрибутов по категориям, 
//                                 см. ПолучитьДанныеСоответствияАтрибутовКатегории.
//                             - Неопределено - заполнение согласно соответствия атрибутов по категориям не производится.
//   Категория1С               - СправочникСсылка.ВидыНоменклатуры
//                             - СправочникСсылка.Номенклатура
//                             - СправочникСсылка.ТоварныеКатегории - источник категорий учетной системы.
//                             - Неопределено - заполнение согласно соответствия атрибутов по категориям с учетом 
//                                 категории учетной системы не производится.
//   ДанныеОбъекта             - ТаблицаЗначений - значения реквизитов товара из учетной системы, 
//                                 см. НоваяТаблицаЗначенийРеквизитов.
//                             - Неопределено - заполнение согласно сохраненных реквизитов из учетной системы не производится.
//   РеквизитыДляСравнения     - Булево - Истина, если необходимо добавить дополнительные реквизиты для сравнения.
//
Процедура ДополнитьТаблицуЗначенийРеквизитов(УчетнаяЗаписьМаркетплейса, ЗначенияРеквизитов, КэшКатегорий, 
			СоответствияАтрибутов, Категория1С, ДанныеОбъекта, Знач РеквизитыДляСравнения = Ложь) Экспорт
				
	Если ЗначенияРеквизитов.Колонки.Найти("Обработано") = Неопределено Тогда
		ЗначенияРеквизитов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ЗначенияРеквизитов.ЗаполнитьЗначения(Ложь, "Обработано");
	
	Если ДанныеОбъекта = Неопределено Тогда 
		ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
	Иначе
		ТаблицаРеквизитов = НоваяТаблицаЗначенийРеквизитов();
		Для Каждого ЭлементКоллекции Из ТаблицаРеквизитов.Колонки Цикл
			Если ДанныеОбъекта.Колонки.Найти(ЭлементКоллекции.Имя) = Неопределено Тогда
				ДанныеОбъекта.Колонки.Добавить(ЭлементКоллекции.Имя, Новый ОписаниеТипов(ЭлементКоллекции.ТипЗначения));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитыДляСравнения Тогда
		ЗначенияРеквизитов.ЗаполнитьЗначения(Истина, "ЕстьРазличия");
		ЗначенияРеквизитов.ЗаполнитьЗначения(Ложь,   "ТолькоТекущее");
		
		Если ДанныеОбъекта.Колонки.Найти("Обработано") = Неопределено Тогда
			ДанныеОбъекта.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		ДанныеОбъекта.ЗаполнитьЗначения(Ложь, "Обработано");
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Количество() > 0 Тогда
		ИдентификаторКатегорииМаркетплейса = ЗначенияРеквизитов[0].ИдентификаторКатегорииМаркетплейса;
		
		// Согласно данных категории из кэша
		Если КэшКатегорий <> Неопределено Тогда
			АтрибутыКатегории = Неопределено;
			Если Не КэшКатегорий.Свойство("Категория_" + ИдентификаторКатегорииМаркетплейса, АтрибутыКатегории) Тогда
				Отказ            = Ложь;
				ТаблицаАтрибутов = ПолучитьАтрибутыКатегории(УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса, Отказ);
				
				Если Не Отказ И ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
					АтрибутыКатегории = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
					КэшКатегорий.Вставить("Категория_" + ИдентификаторКатегорииМаркетплейса, АтрибутыКатегории);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АтрибутыКатегории) Тогда
				ИсключитьСвойства = "УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса"
					+ ", ЗначениеПоУмолчанию, ПредставлениеРеквизита1С";
				
				Для Каждого ЭлементКоллекции Из АтрибутыКатегории Цикл
					Отбор = Новый Структура;
					Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса);
					Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса);
					
					НайденныеСтроки = ЗначенияРеквизитов.НайтиСтроки(Отбор);
					Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ЭлементКоллекции,, ИсключитьСвойства);
						СтрокаТаблицыЗначений.Обработано = Истина;
					КонецЦикла;
				КонецЦикла;
				
				// Удалить атрибуты, не присутствующие в категории
				Отбор = Новый Структура("Обработано", Ложь);
				НайденныеСтроки = ЗначенияРеквизитов.НайтиСтроки(Отбор);
				Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
					ЗначенияРеквизитов.Удалить(СтрокаТаблицыЗначений);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Согласно предыдущих значений
		Если ДанныеОбъекта.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицыЗначений Из ЗначенияРеквизитов Цикл
				Отбор = Новый Структура;
				Если СтрНайти(ДанныеОбъекта[0].ИдентификаторКатегорииМаркетплейса, "_") > 0 Тогда
					Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторКатегорииМаркетплейса);
				КонецЕсли;
				Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса);
				
				НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИсключитьСвойства = "УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса"
						+ ", ИдентификаторАтрибутаМаркетплейса, ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса";
					
					Если СтрокаТаблицыЗначений.Обработано Тогда
						ИсключитьСвойства = ИсключитьСвойства + ", ИдентификаторРодителяАтрибутаМаркетплейса, НаименованиеРодителяАтрибутаМаркетплейса, НаименованиеАтрибутаМаркетплейса"
							+ ", ОбязательныйАтрибут, АспектныйАтрибут, ЯвляетсяКоллекциейЗначений, ДоступенВыборЗначенияИзСписка, МаксимальноеКоличествоЗначений"
							+ ", ТипЗначенияАтрибута, ОписаниеНазначенияАтрибута";
					Иначе
						Если Не ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеРодителяАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеРодителяАтрибутаМаркетплейса";
						КонецЕсли;
						Если Не ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеАтрибутаМаркетплейса";
						КонецЕсли;
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, НайденныеСтроки[0],, ИсключитьСвойства);
					СтрокаТаблицыЗначений.Обработано = Истина;
					
				Иначе                 
					СписокСвойств = "Номенклатура, Характеристика, Упаковка, Категория1С, ИсточникКатегорииМаркетплейса, ИдентификаторИсточникаКатегорииМаркетплейса";
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ДанныеОбъекта[0], СписокСвойств,);
				КонецЕсли;
			КонецЦикла;
		
		// Согласно указанного соответствия по категории
		ИначеЕсли СоответствияАтрибутов <> Неопределено 
					И СоответствияАтрибутов.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицыЗначений Из ЗначенияРеквизитов Цикл
				Отбор = Новый Структура;
				Если СоответствияАтрибутов.Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено Тогда
					Отбор.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
				КонецЕсли;
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторКатегорииМаркетплейса);
				Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса);
				Если ЗначениеЗаполнено(Категория1С) Тогда
					Отбор.Вставить("Категория1С", Категория1С);
				КонецЕсли;
				
				НайденныеСтроки = СоответствияАтрибутов.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИсключитьСвойства = "Категория1С, ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса";
					
					Если СтрокаТаблицыЗначений.Обработано Тогда
						ИсключитьСвойства = ИсключитьСвойства + ", ИдентификаторРодителяАтрибутаМаркетплейса, НаименованиеРодителяАтрибутаМаркетплейса, НаименованиеАтрибутаМаркетплейса"
							+ ", ОбязательныйАтрибут, АспектныйАтрибут, ЯвляетсяКоллекциейЗначений, ДоступенВыборЗначенияИзСписка, МаксимальноеКоличествоЗначений"
							+ ", ТипЗначенияАтрибута, ОписаниеНазначенияАтрибута";
					Иначе
						Если Не ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеРодителяАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеРодителяАтрибутаМаркетплейса";
						КонецЕсли;
						Если Не ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеАтрибутаМаркетплейса";
						КонецЕсли;
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, НайденныеСтроки[0],, ИсключитьСвойства);
					СтрокаТаблицыЗначений.Обработано = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеТипов            = НовоеСоответствиеТипов();
	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	
	Для Каждого СтрокаТаблицыЗначений Из ЗначенияРеквизитов Цикл
		СтрокаТаблицыЗначений.ЗначениеАтрибутаЗаданоПользователем = Истина;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ТипЗначенияАтрибута) Тогда
			ТипЗначенияАтрибута1С                              = СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТипЗначенияАтрибута);
			ОписаниеТипа                                       = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, СтрокаТаблицыЗначений.ТипЗначенияАтрибута);
			СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(
				ПривестиЗначениеКТипуOzon(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса, СтрокаТаблицыЗначений.ТипЗначенияАтрибута));
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса) И ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеПоУмолчанию) Тогда
			СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса              = СтрокаТаблицыЗначений.ЗначениеПоУмолчанию;
			СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияПоУмолчанию;
			СтрокаТаблицыЗначений.ЗначениеАтрибутаЗаданоПользователем       = Ложь;
		КонецЕсли;
		
		Значение = Неопределено;
		Если ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса, Значение) Тогда	
			СтрокаТаблицыЗначений.ПолныйПутьКРеквизиту1С   = Значение.Реквизит1С;
			СтрокаТаблицыЗначений.ПредставлениеРеквизита1С = Значение.ПредставлениеРеквизита1С;
		КонецЕсли;

		СтрокаТаблицыЗначений.НеЗаполненПутьКРеквизиту1С     = Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПолныйПутьКРеквизиту1С);
		СтрокаТаблицыЗначений.НеЗаполненАтрибут              = Не ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса);
		СтрокаТаблицыЗначений.УстановленоЗначениеПоУмолчанию = Не СтрокаТаблицыЗначений.НеЗаполненоСоответствиеАтрибута
																	И ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса)
																	И СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ЗначениеПоУмолчанию;
			
		Если РеквизитыДляСравнения И ДанныеОбъекта.Количество() > 0 Тогда
			Отбор = Новый Структура;
			Если СтрНайти(ДанныеОбъекта[0].ИдентификаторКатегорииМаркетплейса, "_") > 0 Тогда
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторКатегорииМаркетплейса);
			КонецЕсли;
			Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса);
			Отбор.Вставить("Обработано", Ложь);
			
			НайденнаяСтрока = Неопределено;
			НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				
				Если НайденныеСтроки.Количество() > 1 Тогда
					Для Каждого ЭлементКоллекции Из НайденныеСтроки Цикл
						Если СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса
								И СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса = ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
							НайденнаяСтрока = ЭлементКоллекции;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = НайденнаяСтрока.ОбязательныйАтрибут;
				СтрокаТаблицыЗначений.ТекущееАспектныйАтрибут                          = НайденнаяСтрока.АспектныйАтрибут;
				СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = НайденнаяСтрока.ЯвляетсяКоллекциейЗначений;
				СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = НайденнаяСтрока.ДоступенВыборЗначенияИзСписка;
				СтрокаТаблицыЗначений.ТекущееМаксимальноеКоличествоЗначений            = НайденнаяСтрока.МаксимальноеКоличествоЗначений;
				СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = НайденнаяСтрока.ТипЗначенияАтрибута;
				СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = НайденнаяСтрока.ЗначениеАтрибутаМаркетплейса;
				СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = НайденнаяСтрока.НеЗаполненАтрибут;
				СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = НайденнаяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса;
				
				Если СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений
						И СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка
						И СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута) = СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТипЗначенияАтрибута)
						И СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса
						И СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
					СтрокаТаблицыЗначений.ЕстьРазличия = Ложь;
				КонецЕсли;
				
				НайденнаяСтрока.Обработано = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитыДляСравнения И ДанныеОбъекта.Количество() > 0 Тогда
		ИсключитьСвойства = "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса, НеЗаполненАтрибут";
		
		Отбор = Новый Структура("Обработано", Ложь);
		НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаТаблицыЗначений = ЗначенияРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, НайденнаяСтрока,, ИсключитьСвойства);

			СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса                        = УчетнаяЗаписьМаркетплейса;
			СтрокаТаблицыЗначений.НеЗаполненАтрибут                                = Истина;
			
			СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = НайденнаяСтрока.ОбязательныйАтрибут;
			СтрокаТаблицыЗначений.ТекущееАспектныйАтрибут                          = НайденнаяСтрока.АспектныйАтрибут;
			СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = НайденнаяСтрока.ЯвляетсяКоллекциейЗначений;
			СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = НайденнаяСтрока.ДоступенВыборЗначенияИзСписка;
			СтрокаТаблицыЗначений.ТекущееМаксимальноеКоличествоЗначений            = НайденнаяСтрока.МаксимальноеКоличествоЗначений;
			СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = НайденнаяСтрока.ТипЗначенияАтрибута;
			СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = НайденнаяСтрока.ЗначениеАтрибутаМаркетплейса;
			СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = НайденнаяСтрока.НеЗаполненАтрибут;
			СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = НайденнаяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса;
			СтрокаТаблицыЗначений.ТолькоТекущее                                    = Истина;
				
			Если СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений
					И СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка
					И СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута) = СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТипЗначенияАтрибута)
					И СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса
					И СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
				СтрокаТаблицыЗначений.ЕстьРазличия = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево реквизитов товара с учетом возможного сравнения, дополняет его основными данными, данными о ценах.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ЗначенияРеквизитов        - ТаблицаЗначений - значения реквизитов товара из сервиса, 
//                                 см. НоваяТаблицаЗначенийРеквизитов.
//   ДанныеТовара              - СтрокаДереваЗначений  - значения реквизитов товара из учетной системы, 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//							   - СтрокаТаблицыЗначений - состав колонок должен соответствовать 
//                                 РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.
//							   - Структура - состав должен соответствовать структуре 
//                                 РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.
//                             - Неопределено - заполнение групп основных реквизитов не производится.
//   ЦеныТовара                - Массив Из Структура - цены товара из учетной системы, структура элементов массива 
//                                 соответствует таблице значений ПолучитьТекущиеЦеныПоИдентификаторам.
//   НастройкиУчетнойЗаписи    - См. Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи.
//   ВидыЦен                   - ТаблицаЗначений - таблица с запрошенными видами цен, см. ВидыЦенУчетнойЗаписи.
//
// Возвращаемое значение:
//   См. НовоеДеревоРеквизитов.
//
Функция СформироватьДеревоРеквизитов(УчетнаяЗаписьМаркетплейса, ЗначенияРеквизитов, ДанныеТовара, 
			ЦеныТовара = Неопределено, НастройкиУчетнойЗаписи = Неопределено, ВидыЦен = Неопределено) Экспорт

	ДеревоРеквизитов = ПодготовитьДеревоРеквизитовТовара(ЗначенияРеквизитов, Истина);

	Если ДанныеТовара = Неопределено Тогда
		Возврат ДеревоРеквизитов;
	КонецЕсли;
	
	Если НастройкиУчетнойЗаписи = Неопределено Тогда
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;
	
	// Основные данные товара
	Родитель                                    = ДеревоРеквизитов.Строки.Вставить(0);
	Родитель.Уровень                            = 0;
	Родитель.ОсновныеПоказатели                 = Истина;
	Родитель.НаименованиеАтрибутаМаркетплейса   = НСтр("ru = 'Основные данные товара'");
	Родитель.НомерКартинкиКоллекцииТипов        = 99;
	Родитель.ТекущееНомерКартинкиКоллекцииТипов = 99;
	
	// Идентификаторы  
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторПубликации", 
			НСтр("ru = 'Идентификатор публикации'"), 
			НСтр("ru = 'Идентификатор публикации товара, передаваемый на площадку маркетплейса Ozon как артикул'"), 
			Истина, 
			ДанныеТовара.ИдентификаторПубликации, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторПубликации", 
			НСтр("ru = 'Идентификатор публикации'"), 
			НСтр("ru = 'Идентификатор публикации товара, передаваемый на площадку маркетплейса Ozon как артикул'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторПубликации, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторОбъектаМаркетплейса", 
			НСтр("ru = 'Идентификатор Ozon'"), 
			НСтр("ru = 'Идентификатор товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ИдентификаторОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторОбъектаМаркетплейса", 
			НСтр("ru = 'Идентификатор Ozon'"), 
			НСтр("ru = 'Идентификатор товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBOSKU", 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			Ложь, 
			ДанныеТовара.ИдентификаторFBOSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBOSKU", 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторFBOSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBSSKU", 
			НСтр("ru = 'Идентификатор FBS SKU'"), 
			НСтр("ru = 'Идентификатор SKU (FBS  и RealFBS)'"), 
			Ложь, 
			ДанныеТовара.ИдентификаторFBSSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBSSKU", 
			НСтр("ru = 'Идентификатор FBS SKU'"), 
			НСтр("ru = 'Идентификатор SKU (FBS  и RealFBS)'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторFBSSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Представление                                      
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ПредставлениеОбъектаМаркетплейса", 
			НСтр("ru = 'Представление товара на Ozon'"), 
			НСтр("ru = 'Представление товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ПредставлениеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ПредставлениеОбъектаМаркетплейса", 
			НСтр("ru = 'Представление товара на Ozon'"), 
			НСтр("ru = 'Представление товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ПредставлениеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Описание                                      
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеОбъектаМаркетплейса", 
			НСтр("ru = 'Описание товара'"), 
			НСтр("ru = 'Описание товара на площадке маркетплейса Ozon'"), 
			Ложь, 
			ДанныеТовара.ОписаниеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеОбъектаМаркетплейса", 
			НСтр("ru = 'Описание товара'"), 
			НСтр("ru = 'Описание товара на площадке маркетплейса Ozon'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Статус публикации
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Статус", 
			НСтр("ru = 'Статус публикации'"), 
			НСтр("ru = 'Статус публикации'"), 
			Истина, 
			ДанныеТовара.Статус, 
			Строка(ДанныеТовара.Статус));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Статус", 
			НСтр("ru = 'Статус публикации'"), 
			НСтр("ru = 'Статус публикации'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].Статус, 
			Строка(ДанныеТовара.ДанныеТовараИзСервиса[0].Статус));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеСостояния", 
			НСтр("ru = 'Описание состояния'"), 
			НСтр("ru = 'Описание состояния'"), 
			Ложь, 
			ДанныеТовара.ОписаниеСостояния, 
			Строка(ДанныеТовара.ОписаниеСостояния));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеСостояния", 
			НСтр("ru = 'Описание состояния'"), 
			НСтр("ru = 'Описание состояния'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ОписаниеСостояния, 
			Строка(ДанныеТовара.ДанныеТовараИзСервиса[0].ОписаниеСостояния));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Категория                                 
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторКатегорииМаркетплейса", 
			НСтр("ru = 'Категория Ozon'"), 
			НСтр("ru = 'Категория Ozon'"), 
			Истина, 
			?(Не ЗначениеЗаполнено(ДанныеТовара.НаименованиеКатегорииМаркетплейса), НСтр("ru = '<не определена>'"), ДанныеТовара.НаименованиеКатегорииМаркетплейса
					+ ?(ЗначениеЗаполнено(ДанныеТовара.ИдентификаторКатегорииМаркетплейса) И СтрНайти(ДанныеТовара.ИдентификаторКатегорииМаркетплейса, "_") = 0, ПостфиксУстаревшейКатегории(), "")),
			ДанныеТовара.ИдентификаторКатегорииМаркетплейса);
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторКатегорииМаркетплейса", 
			НСтр("ru = 'Категория Ozon'"), 
			НСтр("ru = 'Категория Ozon'"), 
			Истина, 
			?(Не ЗначениеЗаполнено(ДанныеТовара.ДанныеТовараИзСервиса[0].НаименованиеКатегорииМаркетплейса), НСтр("ru = '<не определена>'"), ДанныеТовара.ДанныеТовараИзСервиса[0].НаименованиеКатегорииМаркетплейса
				+ ?(ЗначениеЗаполнено(ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторКатегорииМаркетплейса) И СтрНайти(ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторКатегорииМаркетплейса, "_") = 0, ПостфиксУстаревшейКатегории(), "")),
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторКатегорииМаркетплейса);
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	Иначе
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторКатегорииМаркетплейса", 
			НСтр("ru = 'Категория Ozon'"), 
			НСтр("ru = 'Категория Ozon'"), 
			Истина, 
			?(Не ЗначениеЗаполнено(ДанныеТовара.НаименованиеКатегорииМаркетплейса), НСтр("ru = '<не определена>'"), ДанныеТовара.НаименованиеКатегорииМаркетплейса
				+ ?(ЗначениеЗаполнено(ДанныеТовара.ИдентификаторКатегорииМаркетплейса) И СтрНайти(ДанныеТовара.ИдентификаторКатегорииМаркетплейса, "_") = 0, ПостфиксУстаревшейКатегории(), "")),
			ДанныеТовара.ИдентификаторКатегорииМаркетплейса);
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Ставка НДС
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
		"СтавкаНДС", 
		НСтр("ru = 'Ставка НДС'"), 
		НСтр("ru = 'Ставка НДС'"), 
		Истина, 
		ДанныеТовара.Ставка, 
		"");
	ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"СтавкаНДС", 
			НСтр("ru = 'Ставка НДС'"), 
			НСтр("ru = 'Ставка НДС'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].СтавкаНДС, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Штрихкоды
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Штрихкод", 
			НСтр("ru = 'Штрихкод(ы)'"), 
			НСтр("ru = 'Штрихкод(ы)'"), 
			Ложь, 
			СтрРазделить(ДанныеТовара.Штрихкод, ";", Ложь), 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Штрихкод", 
			НСтр("ru = 'Штрихкод(ы)'"), 
			НСтр("ru = 'Штрихкод(ы)'"), 
			Ложь, 
			СтрРазделить(ДанныеТовара.ДанныеТовараИзСервиса[0].Штрихкод, ";", Ложь), 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Крупногабаритный товар
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"КрупногабаритныйТовар", 
			НСтр("ru = 'Крупногабаритный товар'"), 
			НСтр("ru = 'Крупногабаритный товар'"), 
			Ложь, 
			ДанныеТовара.КрупногабаритныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"КрупногабаритныйТовар", 
			НСтр("ru = 'Крупногабаритный товар'"), 
			НСтр("ru = 'Крупногабаритный товар'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].КрупногабаритныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Параметры объединения в одну карточку
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОбъединяетсяВОднуКарточку", 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			Истина, 
			ДанныеТовара.ОбъединяетсяВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОбъединяетсяВОднуКарточку", 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ОбъединяетсяВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЗначениеОбъединенияВОднуКарточку", 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			Истина, 
			ДанныеТовара.ЗначениеОбъединенияВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЗначениеОбъединенияВОднуКарточку", 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ЗначениеОбъединенияВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Ценовые показатели
	Родитель                                    = ДеревоРеквизитов.Строки.Вставить(1);
	Родитель.ЦеновыеПоказатели                  = Ложь;
	Родитель.Уровень                            = 0;
	Родитель.НаименованиеАтрибутаМаркетплейса   = НСтр("ru = 'Ценовые показатели'");
	Родитель.НомерКартинкиКоллекцииТипов        = 99;
	Родитель.ТекущееНомерКартинкиКоллекцииТипов = 99;
	
	// Цены товаров
	СоответствиеВидовЦен = Новый Соответствие;
	СоответствиеВидовЦен.Вставить("ВидЦеныДоСкидок",        "ЦенаДоСкидки");
	СоответствиеВидовЦен.Вставить("ВидЦеныСУчетомСкидок",   "ЦенаСоСкидкой");
	СоответствиеВидовЦен.Вставить("ВидЦеныМинимальныхЦен",  "МинимальнаяЦена");
	СоответствиеВидовЦен.Вставить("ВидЦеныСоВсемиАкциями",  "ЦенаНаВитрине");
	СоответствиеВидовЦен.Вставить("ВидЦеныРекомендованный", "ЦенаРекомендованная");

	Если ВидыЦен = Неопределено Тогда
		ВидыЦен = ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыЗначений Из ВидыЦен Цикл
		ЦенаЗначение        = 0;
		ЦенаТекущееЗначение = 0;
		
		Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда 
			Если ЦеныТовара <> Неопределено Тогда
				Для Каждого ЭлементКоллекции Из ЦеныТовара Цикл
					Если СтрокаТаблицыЗначений.Значение = ЭлементКоллекции.ВидЦены Тогда
						ЦенаТекущееЗначение = ЭлементКоллекции.Цена;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИдентификаторВидаЦен = СоответствиеВидовЦен.Получить(СтрокаТаблицыЗначений.Идентификатор);
				Если ИдентификаторВидаЦен <> Неопределено Тогда
					Попытка
						ЦенаТекущееЗначение = ДанныеТовара[ИдентификаторВидаЦен];
					Исключение
						ЦенаТекущееЗначение = 0;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
			ИдентификаторВидаЦен = СоответствиеВидовЦен.Получить(СтрокаТаблицыЗначений.Идентификатор);
			Если ИдентификаторВидаЦен <> Неопределено Тогда
				ЦенаЗначение = ДанныеТовара.ДанныеТовараИзСервиса[0][ИдентификаторВидаЦен];
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
				Или ЗначениеЗаполнено(ЦенаТекущееЗначение) Или ЗначениеЗаполнено(ЦенаЗначение) Тогда
			СтрокаДереваРеквизитов = Родитель.Строки.Добавить();
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 		Или ЗначениеЗаполнено(ЦенаТекущееЗначение) Тогда                     
				ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
					СтрокаТаблицыЗначений.Идентификатор, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.ОбязательноеЗаполнение, 
					?(ЗначениеЗаполнено(ЦенаТекущееЗначение), Формат(ЦенаТекущееЗначение, "ЧДЦ=2; ЧН=") + " " + СокрЛП(НастройкиУчетнойЗаписи.ВалютаУчета), ""), 
					"");
				ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Истина, ПараметрыАтрибута);
			КонецЕсли;
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 		Или ЗначениеЗаполнено(ЦенаЗначение) Тогда
				ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
					СтрокаТаблицыЗначений.Идентификатор, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.ОбязательноеЗаполнение, 
					?(ЗначениеЗаполнено(ЦенаЗначение), Формат(ЦенаЗначение, "ЧДЦ=2; ЧН=") + " " + ДанныеТовара.ДанныеТовараИзСервиса[0].КодВалюты, ""), 
					"");
				ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Истина, ПараметрыАтрибута);
			КонецЕсли;
			СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
			СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 		Или ЗначениеЗаполнено(ЦенаТекущееЗначение) Тогда                     
				СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута         = "decimal";
				СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 13;
			КонецЕсли;
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 		Или ЗначениеЗаполнено(ЦенаЗначение) Тогда
				СтрокаДереваРеквизитов.ТипЗначенияАтрибута         = "decimal";
				СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов = 13;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Ценовой индекс
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЦеновойИндекс", 
			НСтр("ru = 'Ценовой индекс'"), 
			НСтр("ru = 'Ценовой индекс'"), 
			Ложь, 
			ДанныеТовара.ЦеновойИндекс, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЦеновойИндекс", 
			НСтр("ru = 'Ценовой индекс'"), 
			НСтр("ru = 'Ценовой индекс'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ЦеновойИндекс, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Уцененный товар
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"УцененныйТовар", 
			НСтр("ru = 'Уцененный товар'"), 
			НСтр("ru = 'Уцененный товар'"), 
			Ложь, 
			ДанныеТовара.УцененныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"УцененныйТовар", 
			НСтр("ru = 'Уцененный товар'"), 
			НСтр("ru = 'Уцененный товар'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].УцененныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЕстьУцененныеАналоги", 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			Ложь, 
			ДанныеТовара.ЕстьУцененныеАналоги, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЕстьУцененныеАналоги", 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ЕстьУцененныеАналоги, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	Возврат ДеревоРеквизитов;
	
КонецФункции

// Конструктор параметров атрибута для заполнения строки дерева реквизитов товара.
//
// Параметры:       
//   ИдентификаторАтрибутаМаркетплейса         - Строка - идентификатор атрибута.
//   НаименованиеАтрибутаМаркетплейса          - Строка - наименование атрибута.
//   ОписаниеНазначенияАтрибута                - Строка - описание назначения атрибута.
//   ОбязательныйАтрибут                       - Булево - признак обязательной атрибута.
//   ЗначениеАтрибутаМаркетплейса              - Произвольный, Строка, Массив Из Строка - значение атрибута.
//   ИдентификаторЗначенияАтрибутаМаркетплейса - Строка - идентификатор значения для маркетплейса при выборе значения 
//                                                 из списка.
//
// Возвращаемое значение:
//   Структура - параметры атрибута для заполнения строки дерева:
//     * ИдентификаторАтрибутаМаркетплейса         - Строка - идентификатор атрибута;
//     * НаименованиеАтрибутаМаркетплейса          - Строка - наименование атрибута;
//     * ОписаниеНазначенияАтрибута                - Строка - описание назначения атрибута;
//     * ОбязательныйАтрибут                       - Булево - признак обязательной атрибута;
//     * ЗначениеАтрибутаМаркетплейса              - Произвольный, Строка, Массив Из Строка - значение атрибута;
//     * ИдентификаторЗначенияАтрибутаМаркетплейса - Строка - идентификатор значения для маркетплейса при выборе 
//                                                     значения из списка.
//
Функция НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(ИдентификаторАтрибутаМаркетплейса, 
			НаименованиеАтрибутаМаркетплейса, ОписаниеНазначенияАтрибута, ОбязательныйАтрибут, 
			ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса = "")

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторАтрибутаМаркетплейса",         ИдентификаторАтрибутаМаркетплейса);
	Результат.Вставить("НаименованиеАтрибутаМаркетплейса",          НаименованиеАтрибутаМаркетплейса);
	Результат.Вставить("ОписаниеНазначенияАтрибута",                ОписаниеНазначенияАтрибута);
	Результат.Вставить("ОбязательныйАтрибут",                       ОбязательныйАтрибут);
	Результат.Вставить("ЗначениеАтрибутаМаркетплейса",              ЗначениеАтрибутаМаркетплейса);
	Результат.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", ИдентификаторЗначенияАтрибутаМаркетплейса);
	
	Возврат Результат;

КонецФункции

// Заполняет строку дерева реквизитов товара с учетом возможного сравнения, дополняет его основными данными, данными 
// о ценах.
//
// Параметры:       
//   СтрокаДереваРеквизитов - СтрокаДереваЗначений - заполняемая строка дерева реквизитов.
//   ИзСервиса              - Булево - Истина, если заполняются данные, полученные из сервиса.
//   ОсновныеПоказатели     - Булево - признак основных показателей (наименование родителя строки дерева).
//   ЦеновыеПоказатели      - Булево - признак ценовых показателей (наименование родителя строки дерева).
//   ПараметрыАтрибута      - Структура - параметры атрибута для заполнения строки дерева,
//                              см. НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов.
//
Процедура ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, ИзСервиса, ОсновныеПоказатели, ЦеновыеПоказатели, 
			ПараметрыАтрибута)

	РасширенияИзображений         = РасширенияИзображений(Ложь);
	ЯвляетсяКоллекциейЗначений    = Ложь;
	ДоступенВыборЗначенияИзСписка = ЗначениеЗаполнено(ПараметрыАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса);
	ТипЗначенияАтрибута1С         = "Строка";
	ТипЗначенияАтрибута           = "string";
	ЗначенияАтрибутаМаркетплейса  = Новый СписокЗначений;
	
	Если ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Булево") Тогда
		ТипЗначенияАтрибута1С = "Булево";
		ТипЗначенияАтрибута   = "boolean";
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Строка") Тогда
		ТипЗначенияАтрибута1С = "Строка";
		ТипЗначенияАтрибута   = "string";
		Если СтрНайти(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, Символы.ПС) > 0 Тогда
			ТипЗначенияАтрибута = "multiline";
		ИначеЕсли РасширенияИзображений.Найти(Сред(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, СтрНайти(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, ".") + 1)) <> Неопределено Тогда
			ТипЗначенияАтрибута = "imageurl";
		ИначеЕсли СтрНайти(ВРег(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса), "HTTP") = 1 Тогда
			ТипЗначенияАтрибута = "url";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Число") Тогда	
		ТипЗначенияАтрибута1С = "Число";
		ТипЗначенияАтрибута   = "decimal";
		Если ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса = Цел(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
			ТипЗначенияАтрибута = "integer";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Дата") Тогда
		ТипЗначенияАтрибута1С = "Дата";
		ТипЗначенияАтрибута   = "data";
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Неопределено") Тогда
		ТипЗначенияАтрибута1С = "";
		ТипЗначенияАтрибута   = "";
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Массив") Тогда
		ЯвляетсяКоллекциейЗначений    = Истина;
		ДоступенВыборЗначенияИзСписка = Ложь;
		ЗначенияАтрибутаМаркетплейса.ЗагрузитьЗначения(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса);
		ЗначенияАтрибутаМаркетплейса.СортироватьПоЗначению();
		ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса = СтрСоединить(ЗначенияАтрибутаМаркетплейса.ВыгрузитьЗначения(), ";"); 
	Иначе
		ДоступенВыборЗначенияИзСписка = Истина;
		ТипЗначенияАтрибута1С         = СтрЗаменить(Строка(ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса)), " ", "");
	КонецЕсли;
				
	СтрокаДереваРеквизитов.Уровень                             = 3;
	СтрокаДереваРеквизитов.ОсновныеПоказатели                  = ОсновныеПоказатели; 
	СтрокаДереваРеквизитов.ЦеновыеПоказатели                   = ЦеновыеПоказатели;
	СтрокаДереваРеквизитов.ИдентификаторАтрибутаМаркетплейса   = ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса;
	СтрокаДереваРеквизитов.НаименованиеАтрибутаМаркетплейса    = ПараметрыАтрибута.НаименованиеАтрибутаМаркетплейса;
	СтрокаДереваРеквизитов.ОписаниеНазначенияАтрибута          = ПараметрыАтрибута.ОписаниеНазначенияАтрибута;
	СтрокаДереваРеквизитов.ЗначениеАтрибутаЗаданоПользователем = Истина;
	
	Если ИзСервиса Тогда
		СтрокаДереваРеквизитов.ОбязательныйАтрибут                       = ПараметрыАтрибута.ОбязательныйАтрибут;
		СтрокаДереваРеквизитов.АспектныйАтрибут                          = Ложь;
		СтрокаДереваРеквизитов.ЯвляетсяКоллекциейЗначений                = ЯвляетсяКоллекциейЗначений;
		СтрокаДереваРеквизитов.ДоступенВыборЗначенияИзСписка             = ДоступенВыборЗначенияИзСписка;
		СтрокаДереваРеквизитов.МаксимальноеКоличествоЗначений            = 0;
		СтрокаДереваРеквизитов.ТипЗначенияАтрибута                       = ТипЗначенияАтрибута;
		СтрокаДереваРеквизитов.ТипЗначенияАтрибута1С                     = ТипЗначенияАтрибута1С;
		СтрокаДереваРеквизитов.ЗначениеАтрибутаМаркетплейса              = ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ЗначениеАтрибутаМаркетплейсаБулево        = ?(ТипЗначенияАтрибута1С = "Булево", ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, Ложь);
		СтрокаДереваРеквизитов.ЗначенияАтрибутаМаркетплейса              = ЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ЗначениеАтрибутаЗаполнено                 = ЗначениеЗаполнено(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса);
		СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов               = ОпределитьНомерКартинкиКоллекцииТипов(
																				ТипЗначенияАтрибута, 
																				ТипЗначенияАтрибута1С, 
																				ЯвляетсяКоллекциейЗначений, 
																				ДоступенВыборЗначенияИзСписка);
	
	Иначе
		СтрокаДереваРеквизитов.ОбязательныйАтрибут               			    = ПараметрыАтрибута.ОбязательныйАтрибут;
		СтрокаДереваРеквизитов.ТекущееОбязательныйАтрибут                       = ПараметрыАтрибута.ОбязательныйАтрибут;
		СтрокаДереваРеквизитов.ТекущееАспектныйАтрибут                          = Ложь;
		СтрокаДереваРеквизитов.ТекущееЯвляетсяКоллекциейЗначений                = ЯвляетсяКоллекциейЗначений;
		СтрокаДереваРеквизитов.ТекущееДоступенВыборЗначенияИзСписка             = ДоступенВыборЗначенияИзСписка;
		СтрокаДереваРеквизитов.ТекущееМаксимальноеКоличествоЗначений            = 0;
		СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута                       = ТипЗначенияАтрибута;
		СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута1С                     = ТипЗначенияАтрибута1С;
		СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса              = ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаМаркетплейсаБулево        = ?(ТипЗначенияАтрибута1С = "Булево", ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, Ложь);
		СтрокаДереваРеквизитов.ТекущееЗначенияАтрибутаМаркетплейса              = ЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаЗаполнено                 = ЗначениеЗаполнено(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса);
		СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов               = ОпределитьНомерКартинкиКоллекцииТипов(
																						ТипЗначенияАтрибута, 
																						ТипЗначенияАтрибута1С, 
																						ЯвляетсяКоллекциейЗначений, 
																						ДоступенВыборЗначенияИзСписка);
	КонецЕсли;
	
	СоответствиеТипов = НовоеСоответствиеТипов();
	
	Если СтрокаДереваРеквизитов.ТекущееЯвляетсяКоллекциейЗначений = СтрокаДереваРеквизитов.ЯвляетсяКоллекциейЗначений
			И СтрокаДереваРеквизитов.ТекущееДоступенВыборЗначенияИзСписка = СтрокаДереваРеквизитов.ДоступенВыборЗначенияИзСписка
			И СоответствиеТипов.Получить(СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута) = СоответствиеТипов.Получить(СтрокаДереваРеквизитов.ТипЗначенияАтрибута)
			И СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса = СтрокаДереваРеквизитов.ЗначениеАтрибутаМаркетплейса
			И СтрокаДереваРеквизитов.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаДереваРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса 
			И СтрСоединить(СтрокаДереваРеквизитов.ТекущееЗначенияАтрибутаМаркетплейса.ВыгрузитьЗначения(), ";") = СтрСоединить(СтрокаДереваРеквизитов.ЗначенияАтрибутаМаркетплейса.ВыгрузитьЗначения(), ";") Тогда
		СтрокаДереваРеквизитов.ЕстьРазличия = Ложь;
	Иначе
		СтрокаДереваРеквизитов.ЕстьРазличия = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УстановкаНастроекПоСхемамРаботыСлужебный

Функция УстановитьНастройкиДляТоваровПоСхемамРаботы(УчетнаяЗаписьМаркетплейса, ПараметрыКомпоновщикаНастроек) Экспорт

	Ошибка = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияСМаркетплейсомOzonСервер.УстановитьНастройкиДляТоваровПоСхемамРаботы");

	СхемаКомпоновкиДанных               = ПараметрыКомпоновщикаНастроек.СхемаКомпоновкиДанных;
	НастройкиКомпоновщика               = ПараметрыКомпоновщикаНастроек.НастройкиКомпоновкиДанных;
	ЭтоУстановкаПометокДляВсехПозиций   = ПараметрыКомпоновщикаНастроек.ЭтоУстановкаПометокДляВсехПозиций;
	ИдентификаторыПубликацииВыбранные   = ПараметрыКомпоновщикаНастроек.ИдентификаторыПубликацииВыбранные;
	ИдентификаторыПубликацииИсключенные = ПараметрыКомпоновщикаНастроек.ИдентификаторыПубликацииИсключенные;
	НастройкиПоСхемамРаботы             = ПараметрыКомпоновщикаНастроек.НастройкиПоСхемамРаботы;

	КоличествоЗаписей = 0;
	ОшибкаЗаписи      = Ложь;

	Если ИдентификаторыПубликацииВыбранные <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновщика.Отбор, "ИдентификаторПубликации",
			ИдентификаторыПубликацииВыбранные, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;

	Если ИдентификаторыПубликацииИсключенные <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиКомпоновщика.Отбор, "ИдентификаторПубликации",
			ИдентификаторыПубликацииИсключенные, ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;

	ГруппаИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(НастройкиКомпоновщика.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаИли, "ПродаетсяПоСхемеРаботыFBO",
		НастройкиПоСхемамРаботы.ПродаетсяПоСхемеРаботыFBO, ВидСравненияКомпоновкиДанных.НеРавно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаИли, "ПродаетсяПоСхемеРаботыFBS",
		НастройкиПоСхемамРаботы.ПродаетсяПоСхемеРаботыFBS, ВидСравненияКомпоновкиДанных.НеРавно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаИли, "ПродаетсяПоСхемеРаботыDBS",
		НастройкиПоСхемамРаботы.ПродаетсяПоСхемеРаботыDBS, ВидСравненияКомпоновкиДанных.НеРавно);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки =
		КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ТаблицаТоваров = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаТоваров);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	КоличествоЗаписей = ТаблицаТоваров.Количество();

	НачатьТранзакцию();

	Попытка
		Для Каждого СтрокаДляЗаписи Из ТаблицаТоваров Цикл
			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДляЗаписи, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
			Запись.ВидОбъектаМаркетплейса = Перечисления.ВидыОбъектовМаркетплейсов.Товар;
			Запись.ОбъектПубликации = Неопределено;
			Запись.Прочитать();

			Если Запись.Выбран() Тогда
				ЗаполнитьЗначенияСвойств(Запись, НастройкиПоСхемамРаботы);
				Запись.Записать();
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ОшибкаЗаписи = Истина;
	КонецПопытки;

	Если ОшибкаЗаписи Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить настройки для товаров по схемам работы для ""%1"" по причине: %2.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УчетнаяЗаписьМаркетплейса,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);

		Ошибка.КодОшибки      = "УстановкаНастроекПоСхемамРаботы";
		Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(
		Замер,
		КоличествоЗаписей / 1000);

	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытияСлужебный

Процедура ПриЗаписиСертификатыНоменклатуры(Источник, Отказ)

	СертификатНоменклатуры = Источник.Отбор.СертификатНоменклатуры.Значение;

	УстановитьПривилегированныйРежим(Истина);

	ТаблицаДанныхСертификата = Источник.Выгрузить();

	// Получение данных по товарам маркетплейса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанныхСертификата", ТаблицаДанныхСертификата);
	Запрос.УстановитьПараметр("Сертификат", СертификатНоменклатуры);
	Запрос.Текст = ТекстЗапросаВыборкиТоваровСертификата();

	ПараметрыЗаполненияОбъектовПубликации = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияОбъектовПубликации.ПолучитьСертификаты = Истина;
	ПараметрыЗаполненияОбъектовПубликации.ОбновитьДанные = Истина;

	ДанныеПубликации = НоваяТаблицаПубликацииТоваров();

	ПакетЗапроса = Запрос.ВыполнитьПакет();

	// Запись нового состояния сертификата для товаров маркетплейса.
	ВыборкаТоваров = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		НоваяСтрока = ДанныеПубликации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоваров);

		НоваяСтрока.ОбъектыПубликации = НоваяТаблицаОбъектовПубликации();
		НоваяСтрокаОбъектовПубликации = НоваяСтрока.ОбъектыПубликации.Добавить();
		НоваяСтрокаОбъектовПубликации.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат");
		НоваяСтрокаОбъектовПубликации.ОбъектПубликации = СертификатНоменклатуры;
	КонецЦикла;

	Если ДанныеПубликации.Количество() > 0 Тогда
		ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(ДанныеПубликации, ПараметрыЗаполненияОбъектовПубликации);

		СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации);
	КонецЕсли;
	
	// Отмена действия сертификата для товаров, номенклатура которых исключена из сертификата.
	СтатусНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");
	ВыборкаНедействующихСертификатов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
	Пока ВыборкаНедействующихСертификатов.Следующий() Цикл
		ВидОбъекта = ВыборкаНедействующихСертификатов.ВидОбъектаМаркетплейса;
		ОбъектПубликации = ВыборкаНедействующихСертификатов.ОбъектПубликации;

		Попытка
			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаНедействующихСертификатов);
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда
				Запись.Статус = СтатусНеИспользуется;
				Запись.Записать();
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать %1 ""%2""'"),
				ВидОбъекта, 
				ОбъектПубликации);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВыборкиТоваровСертификата()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанныхСертификата.СертификатНоменклатуры КАК СертификатНоменклатуры,
		|	ТаблицаДанныхСертификата.Номенклатура КАК Номенклатура,
		|	ТаблицаДанныхСертификата.Характеристика КАК Характеристика,
		|	ТаблицаДанныхСертификата.ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ТаблицаДанныхСертификата
		|ИЗ
		|	&ТаблицаДанныхСертификата КАК ТаблицаДанныхСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗаписьМаркетплейса,
		|	УчетныеЗаписиМаркетплейсов.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанныхСертификата.СертификатНоменклатуры КАК СертификатНоменклатуры,
		|	ТаблицаДанныхСертификата.Номенклатура КАК Номенклатура,
		|	ТаблицаДанныхСертификата.Характеристика КАК Характеристика,
		|	ТаблицаДанныхСертификата.ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ДанныеСертификата
		|ИЗ
		|	ТаблицаДанныхСертификата КАК ТаблицаДанныхСертификата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДанныхСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСертификата.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|		ИНАЧЕ ДанныеСертификата.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории
		|ПОМЕСТИТЬ ДанныеПоТоварам
		|ИЗ
		|	ДанныеСертификата КАК ДанныеСертификата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ДанныеСертификата.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И ДанныеСертификата.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|			И ДанныеСертификата.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
		|ГДЕ
		|	ДанныеСертификата.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ДанныеСертификата.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеСертификата.УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|		ИНАЧЕ ДанныеСертификата.ИсточникКатегории
		|	КОНЕЦ
		|ИЗ
		|	ДанныеСертификата КАК ДанныеСертификата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ДанныеСертификата.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И ДанныеСертификата.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|ГДЕ
		|	ДанныеСертификата.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ДанныеСертификата.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеСертификата.УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|		ИНАЧЕ ДанныеСертификата.ИсточникКатегории
		|	КОНЕЦ
		|ИЗ
		|	ДанныеСертификата КАК ДанныеСертификата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ДанныеСертификата.ВидНоменклатуры = СправНоменклатура.ВидНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ДанныеСертификата.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И ДанныеСертификата.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|ГДЕ
		|	ДанныеСертификата.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ДанныеСертификата.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоТоварам.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ДанныеПоТоварам.Номенклатура КАК Номенклатура,
		|	ДанныеПоТоварам.Характеристика КАК Характеристика,
		|	ДанныеПоТоварам.Упаковка КАК Упаковка,
		|	ДанныеПоТоварам.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ДанныеПоТоварам.ИсточникКатегории КАК ИсточникКатегории
		|ПОМЕСТИТЬ ТоварыПоСертификату
		|ИЗ
		|	ДанныеПоТоварам КАК ДанныеПоТоварам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДанныеПоТоварам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПоСертификату.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТоварыПоСертификату.Номенклатура КАК Номенклатура,
		|	ТоварыПоСертификату.Характеристика КАК Характеристика,
		|	ТоварыПоСертификату.Упаковка КАК Упаковка,
		|	ТоварыПоСертификату.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТоварыПоСертификату.ИсточникКатегории КАК ИсточникКатегории
		|ИЗ
		|	ТоварыПоСертификату КАК ТоварыПоСертификату
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоСертификату КАК ТоварыПоСертификату
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ТоварыПоСертификату.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Сертификат))
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТоварыПоСертификату.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТоварыПоСертификату.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТоварыПоСертификату.Упаковка
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = &Сертификат
		|	И ТоварыПоСертификату.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПоСертификату";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ПриЗаписиСертификатыПрисоединенныеФайлы(Источник, Отказ)

	РасширенияИзображений = РасширенияИзображений(Истина);
	ЭтоПодходящийФайлСертификата = (РасширенияИзображений.Найти(Источник.Расширение) <> Неопределено);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектПубликации", Источник.ВладелецФайла);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус КАК ТекущийСтатус,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО УчетныеЗаписиМаркетплейсов.Ссылка = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Сертификат))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = &ОбъектПубликации)";

	КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;
	ОписаниеОшибкиОтсутствияФайлов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Отсутствуют присоединенные файлы требуемого формата: %1.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрСоединить(РасширенияИзображений(Истина), ", "));

	УстановитьПривилегированныйРежим(Истина);
	ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСертификатов.Следующий() Цикл
		ДанныеСертификата = ВыборкаСертификатов.ДанныеОбъекта.Получить();
		ПрисоединенныеФайлы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСертификата, "ПрисоединенныеФайлы", Новый Массив);

		ИзменитьЗапись = Ложь;

		ИндексФайла = ПрисоединенныеФайлы.Найти(Источник.Ссылка);
		Если ИндексФайла <> Неопределено И (Не ЭтоПодходящийФайлСертификата Или Источник.ПометкаУдаления) Тогда
			ПрисоединенныеФайлы.Удалить(ИндексФайла);
			ИзменитьЗапись = Истина;
		ИначеЕсли ИндексФайла = Неопределено И ЭтоПодходящийФайлСертификата Тогда
			ПрисоединенныеФайлы.Добавить(Источник.Ссылка);
			ИзменитьЗапись = Истина;
		КонецЕсли;

		ДанныеСертификата.Вставить("ПрисоединенныеФайлы", ПрисоединенныеФайлы);

		Если ИзменитьЗапись Тогда
			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСертификатов, "УчетнаяЗаписьМаркетплейса, ВидОбъектаМаркетплейса, Номенклатура, Характеристика, Упаковка, ОбъектПубликации");
			Запись.Прочитать();

			Если Запись.Выбран() Тогда
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеСертификата);
				ЗаполнитьОшибку = (ПрисоединенныеФайлы.Количество() = 0);
				Если ЗаполнитьОшибку Тогда
					Запись.КодОшибки = КодОшибки;
					Запись.ОписаниеОшибки = ОписаниеОшибкиОтсутствияФайлов;
				Иначе
					Запись.КодОшибки = "";
					Запись.ОписаниеОшибки = "";
				КонецЕсли;

				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписиНоменклатураПрисоединенныеФайлы(Источник, Отказ)

	Если Источник.ДатаЗаема > Источник.ДатаМодификацииУниверсальная Тогда	// Частный случай, когда файл захватывается для редактирования.
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДатаСоздания = Источник.ДатаМодификацииУниверсальная Тогда	// Частный случай, когда файл создан при импорте данных.
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Номенклатура", Источник.ВладелецФайла);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ВидыНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.ТоварныеКатегории)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ТоварнаяКатегория)
		|		ИНАЧЕ УчетныеЗаписиМаркетплейсов.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО УчетныеЗаписиМаркетплейсов.Ссылка = СтатусыПубликации.УчетнаяЗаписьМаркетплейса
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Номенклатура = &Номенклатура)";

	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();

	ПараметрыЗаполненияОбъектовПубликации = НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияОбъектовПубликации.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияОбъектовПубликации.ОбновитьДанные = Истина;

	ТаблицаДанныхИзображений = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияОбъектовПубликации);

	СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ТаблицаДанныхИзображений);

КонецПроцедуры

Процедура ДополнитьТаблицуЗначенийРеквизитовИзменениями(ДанныеОбъекта, Различия)

	Отбор = Новый Структура("СчетчикСтрокСравниваемыхТаблиц", 1);
	СтрокиСНовымиЗначениями = Различия.НайтиСтроки(Отбор);
	Для Каждого СтрокаНовогоЗначения Из СтрокиСНовымиЗначениями Цикл
		СтрокаДанных = ДанныеОбъекта.Найти(СтрокаНовогоЗначения.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных.ИзменилсяРеквизит1С = Истина;
			СтрокаДанных.НовоеЗначениеРеквизита1С = СтрокаНовогоЗначения.ЗначениеРеквизита1С;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СервисныеФункцииСлужебный

// Преобразует исходную строку в число без вызова исключений.
// Аналог функции СтроковыеФункцииКлиентСервер.СтрокаВЧисло() с дополнительной обработкой строки без нулей.
//
// Параметры:
//   Значение           - Строка - строка, которую необходимо привести к числу.
//   АбсолютноеЗначение - Булево - признак получения абсолютного значения (без знака).
//
// Возвращаемое значение:
//   - Число        - полученное число.
//   - Неопределено - если строка не является числом.
//
Функция СтрокаВЧисло(Знач Значение, АбсолютноеЗначение = Ложь) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Если АбсолютноеЗначение Тогда
			Значение = ?(Значение >= 0, Значение, -Значение);
		КонецЕсли;
		
		Возврат Значение;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Значение = СтрЗаменить(Значение, " ", "");
	Если СтрНачинаетсяС(Значение, "(") Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Или СтрокаБезНулей = "." Или СтрокаБезНулей = "," Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Если АбсолютноеЗначение Тогда
		Результат = ?(Результат >= 0, Результат, -Результат);
	КонецЕсли;
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции 

// Преобразует исходное число в строку в фиксированном формате обмена с сервисом Ozon.
//
// Параметры:
//   Значение                  - Число - форматируемое значение.
//   ВыводитьПредставлениеНуля - Булево - признак включения в результат нулевых значений.
//
// Возвращаемое значение:
//   Строка - строка в фиксированном формате.
//
Функция ЧислоВСтроку(Знач Значение, ВыводитьПредставлениеНуля = Ложь) Экспорт

	Если Значение = Неопределено Тогда
		Значение = 0;
	КонецЕсли;

	ФорматнаяСтрока = ?(ВыводитьПредставлениеНуля, "ЧН=; ЧРД=.; ЧГ=", "ЧРД=.; ЧГ=");
	Возврат Формат(Значение, ФорматнаяСтрока);  

КонецФункции

// Преобразует исходное значение в массив значений.
//
// Параметры:
//   Значение               - Произвольный - исходное значение.
//   ПреобразоватьВСтроку   - Булево - Истина, если необходимо преобразовать значение из числа в строку.
//   ПреобразоватьВЧисло    - Булево - Истина, если необходимо преобразовать значение из строки в число.
//   ИсключатьНеЗаполненные - Булево - Истина, если необходимо исключить незаполненные значения.
//
// Возвращаемое значение:
//   Массив Из Произвольный - массив значений.
//
Функция ЗначениеВМассив(Знач Значение, ПреобразоватьВСтроку = Ложь, ПреобразоватьВЧисло = Ложь, ИсключатьНеЗаполненные = Истина)
	
	Результат = Новый Массив;

	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого ЭлементКоллекции Из Значение Цикл
			Если Не ИсключатьНеЗаполненные
					Или ЗначениеЗаполнено(ЭлементКоллекции) Тогда
				Если ПреобразоватьВСтроку
					 И ТипЗнч(ЭлементКоллекции) = Тип("Число") Тогда
					Результат.Добавить(ЧислоВСтроку(ЭлементКоллекции));
				ИначеЕсли ПреобразоватьВЧисло
					 И ТипЗнч(ЭлементКоллекции) = Тип("Строка") Тогда
					Результат.Добавить(СтрокаВЧисло(ЭлементКоллекции));
				Иначе
					Результат.Добавить(ЭлементКоллекции);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если Не ИсключатьНеЗаполненные
				Или ЗначениеЗаполнено(Значение) Тогда
			Если ПреобразоватьВСтроку
				 И ТипЗнч(Значение) = Тип("Число") Тогда
				Результат.Добавить(ЧислоВСтроку(Значение));
			ИначеЕсли ПреобразоватьВЧисло
				 И ТипЗнч(Значение) = Тип("Строка") Тогда
				Результат.Добавить(СтрокаВЧисло(Значение));
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение свойства соответствия.
//
// Параметры:
//   Соответствие        - Соответствие Из КлючИЗначение - объект, из которого необходимо прочитать значение ключа.
//   Ключ                - Строка - имя свойства соответствия, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - возвращается когда в соответствии нет значения по указанному ключу.
//
// Возвращаемое значение:
//   Произвольный - значение свойства соответствия. ЗначениеПоУмолчанию если в соответствии нет указанного свойства.
//
Функция СвойствоСоответствия(Соответствие, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Если Соответствие = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = Соответствие.Получить(Ключ);
	
	Если Результат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор простых типов данных.
// 
// Возвращаемое значение:
//   Массив Из Тип - список простых типов данных.
//
Функция НовыеПростыеТипы() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(Тип("Строка"));
	Результат.Добавить(Тип("Число"));
	Результат.Добавить(Тип("Дата"));
	Результат.Добавить(Тип("Булево"));

	Возврат Результат;

КонецФункции

// Конструктор соответствия типов данных 1С и сервиса Ozon.
// При добавлении соответствия с новым типом значения следует указать его представление в функции 
// ОпределитьПредставлениеТипа() и использовать представление типа при выводе в пользовательском интерфейсе.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - соответствие типов данных 1С и сервиса Ozon:
//     * Ключ     - Строка - определение типа данных в Ozon;
//     * Значение - Строка - определение типа данных в 1С.
//
Функция НовоеСоответствиеТипов()

	Результат = Новый Соответствие;
	Результат.Вставить("string",    "Строка");
	Результат.Вставить("multiline", "Строка");
	Результат.Вставить("integer",   "Число");
	Результат.Вставить("decimal",   "Число");
	Результат.Вставить("data",      "Дата");
	Результат.Вставить("boolean",   "Булево");
	Результат.Вставить("url",       "Строка");
	Результат.Вставить("imageurl",  "Строка");

	Возврат Результат;

КонецФункции

// Конструктор типов данных источника категории маркетплейса.
// 
// Возвращаемое значение:
//   ОписаниеТипов - описание типа данных.
//
Функция ОписаниеТипаКатегории1С()

	МассивТиповКатегории1С = Новый Массив;
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.ВидыНоменклатуры"));
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.Номенклатура"));
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.ТоварныеКатегории"));
	
	ОписаниеТипаКатегории1С = Новый ОписаниеТипов(МассивТиповКатегории1С);

	Возврат ОписаниеТипаКатегории1С;

КонецФункции

// Определяет представление типа данных в пользовательском интерфейсе.
// 
// Параметры:
//   ТипДанныхСтрокой - Строка - имя типа данных 1С.
//
// Возвращаемое значение:
//   Строка - представление типа данных.
//
Функция ОпределитьПредставлениеТипа(ТипДанныхСтрокой)

	Результат = ТипДанныхСтрокой;

	Если ТипДанныхСтрокой = "Строка" Тогда
		Результат = НСтр("ru = 'Строка'");
	ИначеЕсли ТипДанныхСтрокой = "Число" Тогда
		Результат = НСтр("ru = 'Число'");
	ИначеЕсли ТипДанныхСтрокой = "Дата" Тогда
		Результат = НСтр("ru = 'Дата'");
	ИначеЕсли ТипДанныхСтрокой = "Булево" Тогда
		Результат = НСтр("ru = 'Булево'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Определяет типы данных сервиса Ozon, соответствующие типу данных 1С.
// 
// Параметры:
//   ТипДанныхСтрокой - Строка - имя типа данных 1С.
//
// Возвращаемое значение:
//   Массив Из Строка - типы данных сервиса Ozon.
//
Функция ПолучитьТипыOzonДляТипа1С(ТипДанныхСтрокой)

	Результат = Новый Массив;
	СоответствиеТипов = НовоеСоответствиеТипов();
	
	Для Каждого ЭлементКоллекции Из СоответствиеТипов Цикл
		Если ЭлементКоллекции.Значение = ТипДанныхСтрокой Тогда
			Результат.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Формирует значение на основании указанного типа и переданного значения.
//
// Параметры:
//   Значение        - Произвольный - значение, которое будет приводиться к указанному типу.
//   ТипЗначенияOzon - Строка - имя типа данных сервиса Ozon.
//
// Возвращаемое значение:
//   - Число - если значение соответствует числовому типу данных.
//   - Произвольный - в прочих случаях.
//
Функция ПривестиЗначениеКТипуOzon(Знач Значение, ТипЗначенияOzon)

	Результат = Значение;

	Если ТипЗначенияOzon = "integer" Или ТипЗначенияOzon = "decimal" Тогда
		Результат = ЧислоВСтроку(Значение, Истина);
	ИначеЕсли ТипЗначенияOzon = "boolean" Тогда
		Значение = ?(ТипЗнч(Значение) = Тип("Булево"), Значение, Ложь);
		Результат = Формат(Значение, "БЛ=false; БИ=true");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Определяет индекс картинки в коллекции БиблиотекаКартинок.ПиктограммыТиповДанных в соответствии с указанными параметрами.
//
// Параметры:
//   ТипЗначенияАтрибута           - Строка - тип значения характеристики (атрибута) маркетплейса.
//   ТипЗначенияАтрибута1С         - Строка - тип значения характеристики (атрибута) в 1С.
//   ЯвляетсяКоллекциейЗначений    - Булево - признак, что атрибут содержит список значений выбора.
//   ДоступенВыборЗначенияИзСписка - Булево - признак наличия списка выбора значений атрибута в 1С.
//
// Возвращаемое значение:
//   Число - индекс картинки соответствующей описанию типа данных.
//
Функция ОпределитьНомерКартинкиКоллекцииТипов(ТипЗначенияАтрибута, ТипЗначенияАтрибута1С, 
			ЯвляетсяКоллекциейЗначений = Ложь, ДоступенВыборЗначенияИзСписка = Ложь)
	
	Результат = 99;
	
	Если ЯвляетсяКоллекциейЗначений Или ДоступенВыборЗначенияИзСписка Тогда
		Результат = 9;
	ИначеЕсли ТипЗначенияАтрибута = "url"
		Или ТипЗначенияАтрибута = "imageurl" Тогда
		Результат = 7;
	ИначеЕсли ТипЗначенияАтрибута1С = "Строка" Тогда
		Результат = 8;
	ИначеЕсли ТипЗначенияАтрибута1С = "Булево" Тогда
		Результат = 0;
	ИначеЕсли ТипЗначенияАтрибута1С = "Дата" Тогда
		Результат = 2;
	ИначеЕсли ТипЗначенияАтрибута1С = "Число" Тогда
		Результат = 13;
	ИначеЕсли ЗначениеЗаполнено(ТипЗначенияАтрибута) Тогда
		Результат = 18;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает представление перечисления Ozon по его значению.
//
// Параметры:
//   Значение - Строка - значение перечисления.
//
// Возвращаемое значение:
//   Строка - представление значения в соответствии со спецификацией API сервиса. 
//
Функция ПредставлениеПоЗначению(Значение)
	
	// Типы интеграции со службой доставки:
	Если ВРег(Значение) = ВРег("ozon") Тогда
		Результат = НСтр("ru = 'Доставка службой Ozon'");
	ИначеЕсли ВРег(Значение) = ВРег("3pl_tracking") Тогда
		Результат = НСтр("ru = 'Доставка интегрированной службой'");
	ИначеЕсли ВРег(Значение) = ВРег("non_integrated") Тогда
		Результат = НСтр("ru = 'Доставка сторонней службой'");
	ИначеЕсли ВРег(Значение) = ВРег("aggregator") Тогда
		Результат = НСтр("ru = 'Доставка через партнерскую доставку Ozon'");
	ИначеЕсли ВРег(Значение) = ВРег("hybryd") Тогда
		Результат = НСтр("ru = 'Схема доставки Почты России'");
		
	ИначеЕсли ВРег(Значение) = ВРег("new") Тогда
		Результат = НСтр("ru = 'Активируется'");
	ИначеЕсли ВРег(Значение) = ВРег("disabled") Тогда
		Результат = НСтр("ru = 'В архиве'");
	ИначеЕсли ВРег(Значение) = ВРег("blocked") Тогда
		Результат = НСтр("ru = 'Заблокирован'");
	ИначеЕсли ВРег(Значение) = ВРег("disabled_due_to_limit") Тогда
		Результат = НСтр("ru = 'На паузе'");
	ИначеЕсли ВРег(Значение) = ВРег("error") Тогда
		Результат = НСтр("ru = 'Ошибка'");
	ИначеЕсли ВРег(Значение) = ВРег("created") Тогда
		Результат = НСтр("ru = 'Активен'");
		
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает хеш переданных двоичных данных.
//
// Параметры:
//   ДвоичныеДанныеФайла     - ДвоичныеДанные - двоичные данные для хеширования.
//   ПреобразоватьВHEX       - Булево - признак преобразования в формат Base 64 (Hex).
//   ПеревестиВНижнийРегистр - Булево - признак перевода строки в нижний регистр.
// 
// Возвращаемое значение:
//   Строка - значение хеш-суммы в формате Base 64.
//
Функция ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла, ПреобразоватьВHEX = Ложь, ПеревестиВНижнийРегистр = Ложь)

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);

	ХешСумма = ХешированиеДанных.ХешСумма;
	
	Если ПреобразоватьВHEX Тогда
		ХешСумма = ПолучитьHexСтрокуИзДвоичныхДанных(ХешСумма);
	КонецЕсли;

	Если ПеревестиВНижнийРегистр Тогда
		ХешСумма = НРег(ХешСумма);
	КонецЕсли;

	Возврат ХешСумма;

КонецФункции

Процедура ДобавитьПараметрВТелоЗапроса(Поток, Параметр, Значение, Разделитель)

	Поток.ЗаписатьСтроку("--" + Разделитель);
	Поток.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + Параметр + """");
	Поток.ЗаписатьСтроку("");
	Поток.ЗаписатьСтроку(СтрЗаменить(ДанныеВJSON(Значение), """", ""));

КонецПроцедуры

Функция СоздатьСообщение_Изображение(ИмяФайла, ДвоичныеДанные, Расширение)

	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);

	Если Расширение = "pdf" Тогда
		ТипСообщения =  "application/pdf"
	Иначе
		ТипСообщения =  "image/jpeg";
	КонецЕсли;

	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""files""; filename=""" + ИмяФайла + """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + ТипСообщения);
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.Закрыть();

	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

// Возвращает структуру измерений регистра.
//
// Параметры:
//   МенеджерЗаписи     - РегистрСведенийМенеджерЗаписи - менеджер записи регистра сведений. 
//   МетаданныеРегистра - ОбъектМетаданных - описание метаданных регистра сведений. 
//
// Возвращаемое значение:
//   Структура - структура из имен и значений измерений.
//
Функция ИсходныйКлючЗаписиПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра) Экспорт

	ИсходныйКлючЗаписи = Новый Структура;

	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ИсходныйКлючЗаписи.Вставить(Измерение.Имя, МенеджерЗаписи[Измерение.Имя]);
	КонецЦикла;

	Возврат ИсходныйКлючЗаписи;

КонецФункции

// Возвращает информацию о всех дополнительных реквизитах и сведениях.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с данными о дополнительных реквизитах и сведениях:
//     * Ссылка        - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - ссылка на дополнительный реквизит (сведение);
//     * Представление - Строка - представление дополнительного реквизита (сведения).
//
Функция ТаблицаДополнительныхСвойств()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизитыИСведения.Ссылка) КАК Представление,
		|	ВЫБОР
		|		КОГДА ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		|			ТОГДА ВЫБОР
		|					КОГДА НаборыДополнительныеСведения.Ссылка ЕСТЬ NULL
		|						ТОГДА """"
		|					КОГДА НаборыДополнительныеСведения.Ссылка.Родитель.ИмяПредопределенногоНабора <> """"
		|						ТОГДА НаборыДополнительныеСведения.Ссылка.Родитель.ИмяПредопределенногоНабора
		|					КОГДА НаборыДополнительныеСведения.Ссылка.Родитель.ИмяПредопределенныхДанных <> """"
		|						ТОГДА НаборыДополнительныеСведения.Ссылка.Родитель.ИмяПредопределенныхДанных
		|					КОГДА НаборыДополнительныеСведения.Ссылка.ИмяПредопределенногоНабора <> """"
		|						ТОГДА НаборыДополнительныеСведения.Ссылка.ИмяПредопределенногоНабора
		|					КОГДА НаборыДополнительныеСведения.Ссылка.ИмяПредопределенныхДанных <> """"
		|						ТОГДА НаборыДополнительныеСведения.Ссылка.ИмяПредопределенныхДанных
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НаборыДополнительныеРеквизиты.Ссылка ЕСТЬ NULL
		|					ТОГДА """"
		|				КОГДА НаборыДополнительныеРеквизиты.Ссылка.Родитель.ИмяПредопределенногоНабора <> """"
		|					ТОГДА НаборыДополнительныеРеквизиты.Ссылка.Родитель.ИмяПредопределенногоНабора
		|				КОГДА НаборыДополнительныеРеквизиты.Ссылка.Родитель.ИмяПредопределенныхДанных <> """"
		|					ТОГДА НаборыДополнительныеРеквизиты.Ссылка.Родитель.ИмяПредопределенныхДанных
		|				КОГДА НаборыДополнительныеРеквизиты.Ссылка.ИмяПредопределенногоНабора <> """"
		|					ТОГДА НаборыДополнительныеРеквизиты.Ссылка.ИмяПредопределенногоНабора
		|				КОГДА НаборыДополнительныеРеквизиты.Ссылка.ИмяПредопределенныхДанных <> """"
		|					ТОГДА НаборыДополнительныеРеквизиты.Ссылка.ИмяПредопределенныхДанных
		|				ИНАЧЕ """"
		|			КОНЕЦ
		|	КОНЕЦ КАК ИмяНабора
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныеРеквизиты
		|		ПО (НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение)
		|			И ДополнительныеРеквизитыИСведения.Ссылка = НаборыДополнительныеРеквизиты.Свойство
		|			И (НаборыДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныеСведения
		|		ПО (ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение)
		|			И ДополнительныеРеквизитыИСведения.Ссылка = НаборыДополнительныеСведения.Свойство
		|			И (НаборыДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка))";
	
	ТаблицаДополнительныхСвойств = Запрос.Выполнить().Выгрузить();
	ТаблицаДополнительныхСвойств.Индексы.Добавить("Представление");
	
	Возврат ТаблицаДополнительныхСвойств;
	
КонецФункции

// Определяет идентичны ли указанные коллекции.
//
// Параметры:
//   Коллекция1       - Структура, Соответствие Из КлючИЗначение - первая коллекция.
//   Коллекция2       - Структура, Соответствие Из КлючИЗначение - вторая коллекция.
//   ИсключаемыеКлючи - Строка - список исключаемых из сравнения ключей коллекции, разделенных символом ",".
// 
// Возвращаемое значение:
//   Булево - Истина, если коллекции идентичны.
//
Функция ИдентичныКоллекцииСКлючами(Коллекция1, Коллекция2, ИсключаемыеКлючи = "")

	Если Не (ТипЗнч(Коллекция1) = Тип("Структура") Или ТипЗнч(Коллекция1) = Тип("Соответствие")) Тогда
		Возврат Ложь;
	КонецЕсли;

	Ключи1 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Коллекция1, ","), ",");
	Ключи2 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Коллекция2, ","), ",");

	Если Не ОбщегоНазначения.КоллекцииИдентичны(Ключи1, Ключи2) Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого Ключ Из Ключи1 Цикл 
		Если Не ПустаяСтрока(ИсключаемыеКлючи) И СтрНайти(ИсключаемыеКлючи, Ключ) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Коллекция1[Ключ]) = Тип("Структура") Или ТипЗнч(Коллекция1[Ключ]) = Тип("Соответствие") Тогда
			РезультатСравнения = ИдентичныКоллекцииСКлючами(Коллекция1[Ключ], Коллекция2[Ключ]);
			Если Не РезультатСравнения Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Коллекция1[Ключ] <> Коллекция2[Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// Возвращает путь к полю, собранный из его составляющих, в виде строки с точками-разделителями.
//
// Параметры:
//   ЧастиПутиКПолю - Массив Из Строка - составляющие пути к полю.
// 
// Возвращаемое значение:
//   Строка - путь к полю с точками-разделителями, например, "Номенклатура.ВидНоменклатуры.Наименование".
//
Функция ПутьКПолюИзЧастейПути(ЧастиПутиКПолю) Экспорт

	СоответствиеПутиДополнительногоСвойства = Новый Соответствие;

	Инд = 0;
	НомерСвойства = 1;
	Для Каждого ЧастьПути Из ЧастиПутиКПолю Цикл
		ЭтоДополнительноеСвойство = СтрНайти(ЧастьПути, "[") > 0;

		Если ЭтоДополнительноеСвойство Тогда
			ИмяСвойства = "Свойство" + НомерСвойства;
			СоответствиеПутиДополнительногоСвойства.Вставить(ИмяСвойства, ЧастьПути);

			ЧастиПутиКПолю[Инд] = ИмяСвойства;

			НомерСвойства = НомерСвойства + 1;
		КонецЕсли;

		Инд = Инд + 1;
	КонецЦикла;

	ПутьКПолю = СтрСоединить(ЧастиПутиКПолю, ".");

	Для Каждого СоответствиеПути Из СоответствиеПутиДополнительногоСвойства Цикл
		ПутьКПолю = СтрЗаменить(ПутьКПолю, СоответствиеПути.Ключ, СоответствиеПути.Значение);
	КонецЦикла;

	Возврат ПутьКПолю;

КонецФункции

// Конструктор свойств поля схемы компоновки данных.
//
// Возвращаемое значение:
//   Структура - описание поля набора схемы компоновки данных.
//
Функция СтруктураПоляНабораДанныхСхемыКомпоновкиДанных()

	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПолеКомпоновкиДанных", "");
	СтруктураПоля.Вставить("ПутьКДанным", "");
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("ИмяМетаданных", "");
	СтруктураПоля.Вставить("ПолноеИмяМетаданных", "");
	СтруктураПоля.Вставить("ТипЗначенияПоля", Неопределено);
	СтруктураПоля.Вставить("ЭтоПолеУпорядочивания", Ложь);

	Возврат СтруктураПоля;

КонецФункции

// Возвращает список полей схемы компоновки данных для получения значений атрибутов.
//
// Параметры:
//   ПолучитьПоляКатегории1С - Булево - признак необходимости получения данных о категории и источниках категории.
//
// Возвращаемое значение:
//   Структура - результат выполнения:
//     * Ключ     - Строка - имя поля набора схемы компоновки данных;
//     * Значение - Структура - описание поля набора схемы компоновки данных, см. СтруктураПоляНабораДанныхСхемыКомпоновкиДанных.
//
Функция ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов(ПолучитьПоляКатегории1С = Ложь) Экспорт

	Поля = Новый Структура;

	ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура";
	СтруктураПоля.ПутьКДанным = "Номенклатура";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Поля.Вставить("Номенклатура", СтруктураПоля);

	ОбъектМетаданных = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Характеристика";
	СтруктураПоля.ПутьКДанным = "Характеристика";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Поля.Вставить("Характеристика", СтруктураПоля);

	ОбъектМетаданных = Метаданные.Справочники.УпаковкиЕдиницыИзмерения;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Упаковка";
	СтруктураПоля.ПутьКДанным = "Упаковка";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	Поля.Вставить("Упаковка", СтруктураПоля);

	Если ПолучитьПоляКатегории1С Тогда
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "УчетнаяЗаписьМаркетплейса";
		СтруктураПоля.Заголовок = НСтр("ru = 'Учетная запись маркетплейса'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "УчетнаяЗаписьМаркетплейса";
		ОбъектМетаданных = Метаданные.Справочники.УчетныеЗаписиМаркетплейсов;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("УчетнаяЗаписьМаркетплейса", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "ИсточникКатегории";
		СтруктураПоля.Заголовок = НСтр("ru = 'Источник категории'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "ИсточникКатегории";
		ОбъектМетаданных = Метаданные.Перечисления.ИсточникиКатегорийДляМаркетплейса;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("ИсточникКатегории", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ВидНоменклатуры";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура.ВидНоменклатуры";
		ОбъектМетаданных = Метаданные.Справочники.ВидыНоменклатуры;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ВидНоменклатуры", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ТоварнаяКатегория";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура.ТоварнаяКатегория";
		ОбъектМетаданных = Метаданные.Справочники.ТоварныеКатегории;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ТоварнаяКатегория", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ИерархияНоменклатуры";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура";
		ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ИерархияНоменклатуры", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "ИдентификаторКатегорииМаркетплейса";
		СтруктураПоля.Заголовок = НСтр("ru = 'Идентификатор категории маркетплейса'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "ИдентификаторКатегорииМаркетплейса";
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
		СтруктураПоля.ИмяМетаданных = "";
		СтруктураПоля.ПолноеИмяМетаданных = "";
		Поля.Вставить("ИдентификаторКатегорииМаркетплейса", СтруктураПоля);
	КонецЕсли;

	Возврат Поля;

КонецФункции

// Возвращает значение из описания поля по заданному имени.
//
// Параметры:
//   ИмяПоля - Строка - имя поля.
// 
// Возвращаемое значение:
//   Строка, Тип - содержимое поля, см. ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов.
//
Функция ДанныеПоляСхемыДляПолученияРеквизитовАтрибутов(ИмяПоля) Экспорт

	Поля = ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
	ДанныеПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Поля, ИмяПоля, СтруктураПоляНабораДанныхСхемыКомпоновкиДанных());

	Возврат ДанныеПоля;

КонецФункции

// Подготавливает схему компоновки данных для выбора реквизитов.
//
// Параметры:
//   Поля                         - Массив Из Строка - имена полей набора схемы компоновки данных,
//                                    см. ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, из которой вызывается создание схемы 
//                                    компоновки данных.
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - схема компоновки данных для выбора реквизита.
//
Функция СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля, УникальныйИдентификаторФормы = Неопределено) Экспорт

	СоответствиеПсевдонимовМетаданных = Новый Структура;

	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДанныеПубликации");

	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;

		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле        = Поле.ПолеКомпоновкиДанных;
		ПолеНабора.ПутьКДанным = Поле.ПутьКДанным;
		ПолеНабора.Заголовок   = Поле.Заголовок;
		ПолеНабора.ТипЗначения = Поле.ТипЗначенияПоля;

		СоответствиеПсевдонимовМетаданных.Вставить(Поле.ПутьКДанным, Поле.ПолноеИмяМетаданных);
	КонецЦикла;

	Если УникальныйИдентификаторФормы = Неопределено Тогда
		Результат = Новый Структура("СхемаКомпоновкиДанных, СоответствиеПсевдонимовМетаданных",
				СхемаКомпоновкиДанных, СоответствиеПсевдонимовМетаданных);
	Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
		Результат = Новый Структура("АдресСхемы, СоответствиеПсевдонимовМетаданных", АдресСхемы, СоответствиеПсевдонимовМетаданных);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Копирует значения свойств структуры или соответствия Источника в свойства структуры Приемника.
//
// Параметры:
//   Приемник         - Структура - значение, чьи свойства будут заполнены значениями соответствующих свойств Источника.
//   Источник         - Структура, Соответствие Из КлючИЗначение - значения свойств данного объекта будут установлены 
//                        в соответствующие свойства Приемника.
//   СписокСвойств    - Строка - список имен свойств Приемника, разделенный запятыми, которые необходимо заполнить.
//   ИсключаяСвойства - Строка - список имен свойств Приемника, разделенный запятыми, которые необходимо исключить из 
//                        заполнения.
//
Процедура ЗаполнитьЗначенияСвойствИзСервиса(Приемник, Источник, СписокСвойств = "", ИсключаяСвойства = "")

	СписокСвойств    = ВРег(СтрЗаменить(СписокСвойств, " ", ""));
	ИсключаяСвойства = ВРег(СтрЗаменить(ИсключаяСвойства, " ", ""));
	
	Если Не ЗначениеЗаполнено(СписокСвойств) Тогда
		Для Каждого КлючЗначение Из Приемник Цикл
			СписокСвойств = СписокСвойств + ВРег(КлючЗначение.Ключ) + ",";
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Источник Цикл
		Если ЗначениеЗаполнено(СписокСвойств) И СтрНайти(СписокСвойств + ",", ВРег(КлючЗначение.Ключ + ",")) = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсключаяСвойства) И СтрНайти(ИсключаяСвойства + ",", ВРег(КлючЗначение.Ключ + ",")) > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Приемник.Вставить(КлючЗначение.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КлючЗначение.Значение, Ложь));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеФункцииSellerAPI

// Преобразует строку, содержащую текст JSON, в структуру данных.
//
// Параметры:
//   СтрокаJSON                   - Строка - строка, содержащая текст в формате JSON.
//   ПрочитатьВСоответствие       - Булево - если установлено Истина, чтение объекта JSON будет выполнено в Соответствие. 
//                                    Если установлено Ложь, объекты будут считываться в объект типа Структура. 
//                                    Значение по умолчанию: Ложь.
//   ИменаСвойствСоЗначениямиДата - Массив Из Строка, Строка - массив, элементы которого содержат имена свойств JSON,  
//                                    для которых нужно вызывать восстановление даты из строки.
//                                - Неопределено - восстановление дат не производится.
//
// Возвращаемое значение:
//   Структура, Соответствие Из КлючИЗначение - результат преобразования строки JSON.
//
Функция JSONВДанные(СтрокаJSON, ПрочитатьВСоответствие = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	Если ЗначениеЗаполнено(ИменаСвойствСоЗначениямиДата) Тогда
		Если ТипЗнч(ИменаСвойствСоЗначениямиДата) = Тип("Строка") Тогда
			ИменаСвойствСоЗначениямиДата = СтрЗаменить(ИменаСвойствСоЗначениямиДата, " ", "");
			ИменаСвойствСоЗначениямиДата = СтрРазделить(ИменаСвойствСоЗначениямиДата, ",", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(ЧтениеJSON, 
					ПрочитатьВСоответствие, 
					ИменаСвойствСоЗначениямиДата, 
					ФорматДатыJSON.ISO,
					?(ЗначениеЗаполнено(ИменаСвойствСоЗначениямиДата), "ВосстановитьДатуJSON", Неопределено),
					?(ЗначениеЗаполнено(ИменаСвойствСоЗначениямиДата), ИнтеграцияСМаркетплейсомOzonСервер, Неопределено),
					,
					?(ЗначениеЗаполнено(ИменаСвойствСоЗначениямиДата), ИменаСвойствСоЗначениямиДата, Неопределено));
	ЧтениеJSON.Закрыть();

	Возврат Результат;

КонецФункции

// Восстанавливает значение даты из JSON.
//
// Параметры:
//   Свойство                - Строка - имя свойства.
//   Значение                - Строка, Неопределено - значение свойства.
//   ДополнительныеПараметры - Структура, Неопределено - параметры восстановления.
//
// Возвращаемое значение:
//   Дата - результат восстановления.
//
Функция ВосстановитьДатуJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Значение = СтрЗаменить(Значение, " ", "T");
		КонецЕсли;
		
		Попытка
			Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		Исключение
			Результат = Дата(1, 1, 1);
		КонецПопытки;
		
	Иначе
		Результат = Дата(1, 1, 1);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Преобразует структуру данных в строку JSON.
//
// Параметры:
//   Значение - Произвольный - объект записи JSON. Представляет собой значение произвольного типа. 
//                Ограничения см. в описании функции глобального контекста ЗаписатьJSON.
//
// Возвращаемое значение:
//   Строка - строка JSON.
//
Функция ДанныеВJSON(Значение)

	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	НастройкиСериализации                        = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализации.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализации);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

// Формирует представление даты в формате Coordinated Universal Time.
//
// Параметры:
//   Дата        - Дата - дата/время, представление которой необходимо получить.
//   Миллисекунд - Число - миллисекунд во времени.
//   ЧасовойПояс - Строка, Неопределено - идентификатор часового пояса.
//
// Возвращаемое значение:
//   Строка - представление даты в формате Coordinated Universal Time (UTC).
//
Функция ДатаUTC(Знач Дата, Миллисекунд = 0, ЧасовойПояс = Неопределено)
	
	Миллисекунд = Мин(Миллисекунд, 999);
	Миллисекунд = Макс(Миллисекунд, 0);
	
	Если ЧасовойПояс = Неопределено Тогда
		ЧасовойПояс = ЧасовойПоясСеанса();
	КонецЕсли;
	
	Дата = УниверсальноеВремя(Дата, ЧасовойПояс);
	
	Результат = Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс") + "." + Формат(Миллисекунд, "ЧН=; ЧГ=0") + "Z";
	
	Возврат Результат;
	
КонецФункции

// Определяет адрес сервера, к которому отправляются HTTP-запросы.
//
// Возвращаемое значение:
//   Строка - хост сервера, с которым осуществляется соединение.
//
Функция АдресСервера()

	Возврат "api-seller.ozon.ru";

КонецФункции

// Конструктор служебных параметров HTTP-запроса.
// 
// Возвращаемое значение:
//   Структура - служебные параметры, содержащие реквизиты:
//     * ПрочитатьВСоответствие       - Булево - если установлено Истина, результат выполнения запроса будет представлен 
//                                        как Соответствие. Если установлено Ложь, результат представляется как Структура.
//                                        Значение по умолчанию: Истина.
//     * ЭтоДвоичныеДанные            - Булево - признак передачи в тело запроса двоичных данных. 
//                                        Если установлена Истина, необходимо заполнить параметр структуры ДвоичныеДанные.
//                                        Значение по умолчанию: Ложь.
//     * ВернутьКодСостояния          - Булево - если установлено Истина, результат выполнения запроса будет содержать 
//                                        код состояния (ответа) HTTP-сервера
//                                        (см. http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
//     * ВернутьСтрокуОтвета          - Булево - если установлена Истина, результат выполнения запроса возвращается без 
//                                        анализа кода состояния.
//     * ПодстрокаПоискаВТекстеОтвета - Строка - если при выполнении запроса получен ответ, в котором содержится заданная 
//                                        подстрока поиска, этот результат не считается ошибкой; будет возвращен 
//                                        ПустойРезультат.
//     * ПустойРезультат              - Произвольный, Неопределено - результат выполнения для заданной подстроки поиска 
//                                        в ответе сервиса.
//     * ПоляТипаДата                 - Массив Из Строка, Строка - массив, элементы которого содержат имена свойств JSON,  
//                                        для которых нужно вызывать восстановление даты из строки.
//                                    - Неопределено - поля типа дата не используются.
//     * ContentType                  - Строка - элемент заголовка для отправки на сервер.
//     * ContentLenght                - Строка - элемент заголовка для отправки на сервер.
//
Функция СлужебныеПараметрыHTTPЗапроса()

	СлужебныеПараметры = Новый Структура;
	СлужебныеПараметры.Вставить("ПрочитатьВСоответствие",       Истина);
	СлужебныеПараметры.Вставить("ЭтоДвоичныеДанные",            Ложь);
	СлужебныеПараметры.Вставить("ВернутьКодСостояния",          Ложь);
	СлужебныеПараметры.Вставить("ВернутьСтрокуОтвета",          Ложь);
	СлужебныеПараметры.Вставить("ПодстрокаПоискаВТекстеОтвета", "");
	СлужебныеПараметры.Вставить("ПустойРезультат",              Неопределено);
	СлужебныеПараметры.Вставить("ПоляТипаДата",                 Неопределено);
	СлужебныеПараметры.Вставить("ContentType",                  "application/json");
	СлужебныеПараметры.Вставить("ContentLenght",                "");

	Возврат СлужебныеПараметры;

КонецФункции

// Предназначен для описания HTTP-запросов, отправляемых через объект HTTPСоединение.
// 
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТекстЗапроса              - Строка - адрес ресурса, к которому будет происходить HTTP-запрос.
//   СлужебныеПараметры        - Структура - служебные параметры HTTP-запроса, 
//                                 см. СлужебныеПараметрыHTTPЗапроса.
// 
// Возвращаемое значение:
//   HTTPЗапрос - описание запроса, отправляемого через объект HTTPСоединение.
//
Функция HTTPЗапросКСервису(УчетнаяЗаписьМаркетплейса, ТекстЗапроса, СлужебныеПараметры)

	Постфикс = "_ut";

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Charset",      "UTF-8");
	Заголовки.Вставить("Accept",       "application/json");
	Заголовки.Вставить("Content-Type", СлужебныеПараметры.ContentType);
	
	Если СлужебныеПараметры.ЭтоДвоичныеДанные Тогда
		Заголовки.Вставить("Content-Lenght", СлужебныеПараметры.ContentLenght);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАвторизации = ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Заголовки.Вставить("client-id", ДанныеАвторизации.ИдентификаторКлиента);
	Заголовки.Вставить("api-key",   ДанныеАвторизации.КлючAPI);
	Заголовки.Вставить("app-name",  "vendor_1c" + Постфикс);

	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);

КонецФункции

// Выполняет HTTP-запрос к сервису.
//
// Параметры:
//   ТекстЗапроса              - Строка - метод API.
//   ПараметрыЗапроса          - Структура - параметры запроса согласно описания запрашиваемого метода API.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   POSTЗапрос                - Булево - признак выполнения POST запроса.
// 
// Возвращаемое значение:
//   - Соответствие Из КлючИЗначение, Структура - результат выполнения запроса к внешнему ресурсу.
//   - Число                                    - код состояния.
//   - Неопределено                             - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ВыполнитьЗапросКСервису(ТекстЗапроса, Знач ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, POSTЗапрос = Истина)

	Результат = Неопределено;

	Попытка
		АдресСервера         = АдресСервера();
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		HTTPСоединение = Новый HTTPСоединение(АдресСервера, 443,,, Прокси, 60, ЗащищенноеСоединение);

		СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
		Если ПараметрыЗапроса.Свойство("СлужебныеПараметры") Тогда
			ЗаполнитьЗначенияСвойств(СлужебныеПараметры, ПараметрыЗапроса.СлужебныеПараметры);
			ПараметрыЗапроса.Удалить("СлужебныеПараметры");
		КонецЕсли;
		
		ПрочитатьВСоответствие = Истина;
		Если Не СлужебныеПараметры.Свойство("ПрочитатьВСоответствие", ПрочитатьВСоответствие) Тогда
			ПрочитатьВСоответствие = Истина;
		КонецЕсли;

		HTTPЗапрос = HTTPЗапросКСервису(УчетнаяЗаписьМаркетплейса, ТекстЗапроса, СлужебныеПараметры);

		Если POSTЗапрос И ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
			Если СлужебныеПараметры.ЭтоДвоичныеДанные Тогда
				HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыЗапроса.ДвоичныеДанные);
			Иначе
				ТелоЗапроса = ДанныеВJSON(ПараметрыЗапроса);
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF8", ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;
		КонецЕсли;

		Если POSTЗапрос Тогда
			РезультатЗапроса = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			РезультатЗапроса = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли;

		СтрокаОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
		КодСостояния = РезультатЗапроса.КодСостояния;

		ВернутьКодСостояния = Ложь;
		Если СлужебныеПараметры.Свойство("ВернутьКодСостояния", ВернутьКодСостояния) И ВернутьКодСостояния = Истина Тогда
			Возврат КодСостояния;
		КонецЕсли;
		
		Если СлужебныеПараметры.ВернутьСтрокуОтвета Тогда
			Возврат JSONВДанные(СтрокаОтвета, ПрочитатьВСоответствие, СлужебныеПараметры.ПоляТипаДата);
		КонецЕсли;

		Если (КодСостояния = 400 Или КодСостояния = 404)
				 И Не ПустаяСтрока(СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета)
				 И СтрНайти(ВРег(СтрокаОтвета), ВРег(СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета)) Тогда
			// При выполнении запроса получен ответ, в котором содержится заданная подстрока поиска.
			// Поэтому такой ответ не считается ошибкой - возвращается заданный пустой результат.
			Результат = СлужебныеПараметры.ПустойРезультат;
			
		ИначеЕсли КодСостояния <> 200 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения запроса %1: %2'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				ТекстЗапроса, 
				СтрокаОтвета);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстОшибки);
			// ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
		Иначе
			Если ПрочитатьВСоответствие Тогда
				Результат = НовыйРезультатИзСервиса();
			КонецЕсли;

			Результат = JSONВДанные(СтрокаОтвета, ПрочитатьВСоответствие, СлужебныеПараметры.ПоляТипаДата);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			АдресСервера,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает результат запроса к сервису.
//
// Параметры:
//   ТекстЗапроса              - Строка - метод API.
//   ПараметрыЗапроса          - Структура - параметры запроса согласно описания запрашиваемого метода API.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   АтрибутыРезультата        - Структура - каждому ключу передается в качестве значения имя атрибута из ответа метода  
//                                 API, в котором содержится необходимая информация. По ключам этого параметра заполняется 
//                                 возвращаемое значение. 
//   POSTЗапрос                - Булево - признак выполнения POST запроса.
// 
// Возвращаемое значение:
//   - Структура - содержимое атрибутов результата на основании ключей параметра АтрибутыРезультата.
//   - Соответствие Из КлючИЗначение - ответ сервиса.
//   - Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса,
			Знач АтрибутыРезультата = Неопределено, POSTЗапрос = Истина)

	Результат        = Новый Структура;
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, POSTЗапрос);

	Если ЗначениеЗаполнено(АтрибутыРезультата) Тогда
		Для Каждого АтрибутРезультата Из АтрибутыРезультата Цикл
			Если РезультатЗапроса <> Неопределено Тогда
				ЗначениеАтрибута = РезультатЗапроса;
				КлючиРезультата  = СтрРазделить(АтрибутРезультата.Значение, ".");

				Для Каждого КлючРезультата Из КлючиРезультата Цикл
					ЗначениеАтрибута = ЗначениеАтрибута[КлючРезультата];
				КонецЦикла;
			Иначе
				ЗначениеАтрибута = Неопределено;
			КонецЕсли;

			Результат.Вставить(АтрибутРезультата.Ключ, ЗначениеАтрибута);
		КонецЦикла;
	Иначе
		Результат = РезультатЗапроса;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РегламентныеЗаданияСлужебный

// Выполняет загрузку информации о продажах товаров через торговую площадку. Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьТорговойПлощадки            - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения
//                                                к сервису.
//   КонтрольОбновленияДанныхТорговойПлощадки - Булево - признак контроля обновления данных торговой площадки.
//   ЗаписатьСобытие                          - Булево - признак записи события в журнал регистрации.
//
Функция МожноВыполнитьРегламентноеЗадание(УчетнаяЗаписьТорговойПлощадки, КонтрольОбновленияДанныхТорговойПлощадки, ЗаписатьСобытие = Истина)
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьТорговойПлощадки)
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon") Тогда
		Если ЗаписатьСобытие Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Не используется интеграция с Ozon'", 
					ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;

	УчетнаяЗаписьДеактивирована = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьТорговойПлощадки, "ПометкаУдаления");
	Если УчетнаяЗаписьДеактивирована Тогда
		Если ЗаписатьСобытие Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не используется интеграция с Ozon для учетной записи <%1>, т.к. очищены настройки авторизации'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗаписьТорговойПлощадки));
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Если КонтрольОбновленияДанныхТорговойПлощадки 
			И Не Справочники.УчетныеЗаписиМаркетплейсов.ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьТорговойПлощадки) Тогда
		Если ЗаписатьСобытие Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для учетной записи <%1> запрещено обновление данных торговой площадки'", 
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УчетнаяЗаписьТорговойПлощадки));
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ОшибкиСлужебный

// Конструктор ошибок статусов публикации товаров.
//
// Возвращаемое значение:
//   Структура - описание ошибки.
//
Функция КодыОшибокРегистраСтатусовПубликацииТоваров() Экспорт

	КодыОшибок = Новый Структура;
	КодыОшибок.Вставить("ОшибкаЗаполненияДанных",              "Ошибка_заполнения_данных_в_1С");
	КодыОшибок.Вставить("ОшибкаПубликацииТоваров",             "Ошибка_публикации");
	КодыОшибок.Вставить("ОшибкаЗагрузкиСертификата",           "Ошибка_загрузки_сертификата");
	КодыОшибок.Вставить("ОшибкаВыборкиТоваров",                "Ошибка_выборки_товаров");
	КодыОшибок.Вставить("ОшибкаПереносаТоваров",               "Ошибка_переноса_в_архив");
	КодыОшибок.Вставить("ОшибкаВозвратаТоваров",               "Ошибка_возврата_из_архива");
	КодыОшибок.Вставить("ОшибкаУдаленияТоваров",               "Ошибка_удаления_товаров");
	КодыОшибок.Вставить("ОшибкаОбновлениеДанныхЗапрещено",     "Ошибка_обновление_данных_торговой_площадки_запрещено");
	КодыОшибок.Вставить("ОшибкаОтсутствуетИнформацияОЛимитах", "Ошибка_отсутствует_информация_о_лимитах");
	КодыОшибок.Вставить("ОшибкаОтсутствуетИнформацияОЛимитах", "Ошибка_отсутствует_информация_о_лимитах");
	КодыОшибок.Вставить("ОшибкаНеУказанаУчетнаяЗапись",        "Ошибка_не_указана_учетная_запись");
	КодыОшибок.Вставить("ОшибкаПрочие",                        "Ошибка_прочие");
	КодыОшибок.Вставить("ОшибкаКатегорияУстарела",             "Ошибка_категория_устарела");

	Возврат КодыОшибок;

КонецФункции

// Определяет описание ошибки по указанному коду.
//
// Параметры:
//   Код       - Строка - код ошибки сервиса.
//   Сообщение - Строка - причина ошибки.
//
// Возвращаемое значение:
//   Строка - описание ошибки.
//
Функция ПолучитьОписаниеОшибки(Код, Сообщение) Экспорт
	
	Код = ВРег(Код);
	Код = СтрЗаменить(Код, " ", "_");
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат Сообщение;
	ИначеЕсли Код = "CANNOT_CREATE_FBS_SKU" Тогда
		Сообщение = НСтр("ru = 'Произошла внутренняя ошибка при обновлении наличия'");
	ИначеЕсли Код = "INVALID_STATE" Тогда
		Сообщение = НСтр("ru = 'Товар не прошел все этапы создания, проверьте его статус'");
	ИначеЕсли Код = "MP_DELIVERY_ONLY_3PL_ERROR" Тогда
		Сообщение = НСтр("ru = 'Товар нельзя размещать на складе с методом доставки ""Ozon логистика""'");
	ИначеЕсли Код = "NON_KGT_ON_KGT_WAREHOUSE" Тогда
		Сообщение = НСтр("ru = 'Попытка установить или обновить остаток некрупногабаритного товара на КГТ складе'");
	ИначеЕсли Код = "NOT_FOUND" Тогда
		Сообщение = НСтр("ru = 'Не удалось найти указанный товар'");
	ИначеЕсли Код = "NOT_FOUND_ERROR" Тогда
		Сообщение = НСтр("ru = 'Товара с таким идентификатором нет в личном кабинете'");
	ИначеЕсли Код = "OVER_MAX_OVH_KGT" Тогда
		Сообщение = НСтр("ru = 'Вес или габариты товара больше максимальных'");
	ИначеЕсли Код = "OVER_MAX_OVH_NON_KGT" Тогда
		Сообщение = НСтр("ru = 'С этого склада нельзя продавать крупногабаритные товары'");
	ИначеЕсли Код = "PRICE_IS_NOT_SENT" Тогда
		Сообщение = НСтр("ru = 'Товар еще не создан или находится на стадии обновления'");
	ИначеЕсли Код = "PRODUCT_HAS_NOT_BEEN_TAGGED_YET" Тогда
		Сообщение = НСтр("ru = 'Товар еще не пометили тегами ""КГТ"" или ""не КГТ"", так как не указаны габариты товара или система для расстановки тегов еще не обработала его'");
	ИначеЕсли Код = "SKU_STOCK_NOT_CHANGED" Тогда
		Сообщение = НСтр("ru = 'Количество товара на складе не изменилось, так как передается один и тот же остаток'");
	ИначеЕсли Код = "SPU_ALREADY_EXISTS" Тогда
		Сообщение = НСтр("ru = 'Товар с такими характеристиками уже существует'");
	ИначеЕсли Код = "STOCK_TOO_BIG" Тогда
		Сообщение = НСтр("ru = 'Указано слишком большое количество, попробуйте уменьшить его'");
	ИначеЕсли Код = "TOO_MANY_REQUESTS" Тогда
		Если СтрНайти(ВРег(Сообщение), "STOCK") Тогда
			Сообщение = НСтр("ru = 'Остаток товара обновляется слишком часто'");
		Иначе
			Сообщение = НСтр("ru = 'Слишком частые запросы'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", Сообщение, Код);

КонецФункции

#КонецОбласти

#Область КонструкторыПараметровЗапросов

// Конструктор списка параметров для запроса дерева категорий и типов товаров.
// 
// Параметры:
//   ЯзыкВОтвете - Строка - язык в ответе.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ЯзыкВОтвете - Строка - язык в ответе (language).
//
Функция НовыеПараметрыЗапросаДереваКатегорийИТиповТоваров(ЯзыкВОтвете = "DEFAULT")

	Результат = Новый Структура;
	Результат.Вставить("ЯзыкВОтвете", ЯзыкВОтвете);
	
	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса атрибутов категории и типа товаров.
// 
// Параметры:
//   ИдентификаторКатегорииМаркетплейса - Строка - составной идентификатор категории и типа товаров маркетплейса.
//   ЯзыкВОтвете                        - Строка - язык в ответе.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторКатегории   - Строка - идентификатор категории товаров торговой площадки (description_category_id).
//     * ИдентификаторТипаТоваров - Строка - идентификатор типа товаров торговой площадки (type_id).
//     * ЯзыкВОтвете              - Строка - язык в ответе (language);
//
Функция НовыеПараметрыЗапросаАтрибутовКатегории(ИдентификаторКатегорииМаркетплейса, ЯзыкВОтвете = "DEFAULT")
	
	Идентификаторы = СтрРазделить(ИдентификаторКатегорииМаркетплейса, "_", Ложь );
	Пока Идентификаторы.Количество() < 2 Цикл
		Идентификаторы.Добавить("");
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКатегории",   Идентификаторы[0]); 
	Результат.Вставить("ИдентификаторТипаТоваров", Идентификаторы[1]);
	Результат.Вставить("ЯзыкВОтвете",              ЯзыкВОтвете);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса определения значений атрибута.
// 
// Параметры:
//   ИдентификаторКатегорииМаркетплейса - Строка - составной идентификатор категории и типа товаров маркетплейса.
//   ИдентификаторАтрибутаМаркетплейса  - Строка - идентификатор атрибута маркетплейса.
//   ЯзыкВОтвете                        - Строка - язык в ответе.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторКатегории1С           - Строка - идентификатор категории 1С.
//     * ИдентификаторКатегорииМаркетплейса - Строка - составной идентификатор категории товаров торговой площадки
//                                              (description_category_id и type_id).
//     * ИдентификаторАтрибутаМаркетплейса - Строка - идентификатор атрибута маркетплейса (attribute_id).
//     * ИдентификаторПоследнегоЗначения   - Число - идентификатор справочника, с которого нужно начать ответ (last_value_id).
//     * МаксимальноеКоличествоВОтвете     - Число - количество значений в ответе (limit).
//     * ЯзыкВОтвете                       - Строка - язык в ответе (language).
//
Функция НовыеПараметрыЗапросаЗначенийАтрибута(ИдентификаторКатегорииМаркетплейса = "", 
			ИдентификаторАтрибутаМаркетплейса = "", ЯзыкВОтвете = "DEFAULT") Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКатегории1С",           "");
	Результат.Вставить("ИдентификаторКатегорииМаркетплейса", ИдентификаторКатегорииМаркетплейса); 
	Результат.Вставить("ИдентификаторАтрибутаМаркетплейса",  ИдентификаторАтрибутаМаркетплейса);
	Результат.Вставить("ИдентификаторПоследнегоЗначения",    0);
	Результат.Вставить("МаксимальноеКоличествоВОтвете",      1000);
	Результат.Вставить("ЯзыкВОтвете",                        ЯзыкВОтвете);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для фильтра по товарам.
//
// Параметры:
//   ВключатьТоварыИзАрхива             - Булево - Истина, если в выборку включаются товары из архива.
//   ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца;
//                                      - Неопределено - выборка по идентификаторам публикации не используется.
//   ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе;
//                                      - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//   ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов SKU;
//                                      - Неопределено - выборка по идентификаторам SKU не используется.
//
// Возвращаемое значение:
//   Структура - фильтры для получения списка товаров (filter):
//     * ФильтрВидимости                    - Массив Из Строка - для указания нескольких фильтров по видимости;
//                                          - Строка - фильтр по видимости товара (visibility): 
//                                              "ALL"                      - все товары, кроме архивных;
//                                              "VISIBLE"                  - товары, которые видны покупателям;.
//                                              "INVISIBLE"                - товары, которые не видны покупателям;
//                                              "EMPTY_STOCK"              - товары, у которых не указано наличие;
//                                              "NOT_MODERATED"            - товары, которые не прошли модерацию;
//                                              "MODERATED"                - товары, которые прошли модерацию;
//                                              "DISABLED"                 - товары, которые видны покупателям, но 
//                                                                             недоступны к покупке;
//                                              "STATE_FAILED"             - товары, создание которых завершилось ошибкой;
//                                              "READY_TO_SUPPLY"          - товары, готовые к поставке;
//                                              "VALIDATION_STATE_PENDING" - товары, которые проходят проверку валидатором 
//                                                                             на предварительной модерации;
//                                              "VALIDATION_STATE_FAIL"    - товары, которые не прошли проверку валидатором 
//                                                                             на предварительной модерации;
//                                              "VALIDATION_STATE_SUCCESS" - товары, которые прошли проверку валидатором 
//                                                                             на предварительной модерации;
//                                              "TO_SUPPLY"                - товары, готовые к продаже;
//                                              "IN_SALE"                  - товары в продаже;
//                                              "REMOVED_FROM_SALE"        - товары, скрытые от покупателей;
//                                              "BANNED"                   - заблокированные товары;
//                                              "OVERPRICED"               - товары с завышенной ценой;
//                                              "CRITICALLY_OVERPRICED"    - товары со слишком завышенной ценой;
//                                              "EMPTY_BARCODE"            - товары без штрихкода;
//                                              "BARCODE_EXISTS"           - товары со штрихкодом;
//                                              "QUARANTINE"               - товары на карантине после изменения цены 
//                                                                             более чем на 50%;
//                                              "ARCHIVED"                 - товары в архиве;
//                                              "OVERPRICED_WITH_STOCK"    - товары в продаже со стоимостью выше, чем у 
//                                                                             конкурентов;
//                                              "PARTIAL_APPROVED"         - товары в продаже с пустым или неполным описанием;
//                                              "IMAGE_ABSENT"             - товары без изображений;
//                                              "MODERATION_BLOCK"         - товары, для которых заблокирована модерация.
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца (offer_id);
//                                          - Неопределено - выборка по идентификаторам публикации не используется.
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе (product_id);
//                                          - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//     * ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов SKU (filter.sku);
//                                          - Неопределено - выборка по идентификаторам SKU не используется.
//
Функция НовыйФильтрЗапросаПоТоварам(ВключатьТоварыИзАрхива, ИдентификаторыПубликации = Неопределено,
			ИдентификаторыОбъектовМаркетплейса = Неопределено, ИдентификаторыSKU = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Если ВключатьТоварыИзАрхива Тогда
		ФильтрыВидимости = Новый Массив;
		ФильтрыВидимости.Добавить("ARCHIVED");
		ФильтрыВидимости.Добавить("ALL");

		Результат.Вставить("ФильтрВидимости", ФильтрыВидимости);
		
	Иначе
		Результат.Вставить("ФильтрВидимости", "ALL");
	КонецЕсли;

	Результат.Вставить("ИдентификаторыПубликации",           ИдентификаторыПубликации);
	Результат.Вставить("ИдентификаторыОбъектовМаркетплейса", ИдентификаторыОбъектовМаркетплейса);
	Результат.Вставить("ИдентификаторыSKU",                  ИдентификаторыSKU);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения идентификаторов товаров.
// 
// Параметры:
//   ФильтрПоТоварам - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам;
//                   - Неопределено - использовать фильтр по умолчанию.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ФильтрВидимости                    - Строка - фильтр по видимости товара (filter.visibility): 
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца (filter.offer_id);
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе (filter.product_id);
//     * ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов SKU (filter.sku);
//     * ИдентификаторПоследнегоЗначения    - Строка - идентификатор последнего значения на странице (last_id);
//     * МаксимальноеКоличествоВОтвете      - Число - количество значений на странице (limit).
//
Функция НовыеПараметрыЗапросаПолученияСпискаТоваров(ФильтрПоТоварам = Неопределено)
	
	Если ФильтрПоТоварам = Неопределено Тогда
		ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Ложь,,,);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПоследнегоЗначения", "");
	Результат.Вставить("МаксимальноеКоличествоВОтвете",   1000);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",  1000);
	
	Для Каждого КлючЗначение Из ФильтрПоТоварам Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для изменения артикулов товаров.
// 
// Параметры:
//   ИдентификаторыПубликации - Массив Из Структура - список пар с новыми и старыми значениями артикулов:
//     * offer_id               - Строка - старый артикул;
//     * new_offer_id           - Строка - новый артикул.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторыПубликации       - Неопределено - идентификаторы публикации не используются;
//                                      - Массив Из Структура - список пар с новыми и старыми значениями артикулов:
//       ** offer_id                      - Строка - старый артикул;
//       ** new_offer_id                  - Строка - новый артикул.
//     * МаксимальноеКоличествоВЗапросе - Число - максимальное количество товаров для запроса.
//
Функция НовыеПараметрыЗапросаИзмененияИдентификаторовПубликации(ИдентификаторыПубликации = Неопределено) 

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыПубликации",       ИдентификаторыПубликации);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе", 250);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения информации о товаре.
// 
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца (offer_id);
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе (product_id);
//     * ИдентификаторSKU                 - Строка - идентификатор товара в системе Ozon (sku).
//
Функция НовыеПараметрыЗапросаПолученияИнформацииОТоваре()

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПубликации",          "");
	Результат.Вставить("ИдентификаторОбъектаМаркетплейса", "");
	Результат.Вставить("ИдентификаторSKU",                 "");

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения описаний товаров из сервиса.
// 
// Параметры:
//   ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца;
//                                      - Неопределено - выборка по идентификаторам публикации не используется.
//   ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе;
//                                      - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//   ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов SKU;
//                                      - Неопределено - выборка по идентификаторам SKU не используется.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товара в системе продавца (offer_id);
//                                          - Неопределено - выборка по идентификаторам публикации не используется.
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товара на маркетплейсе (product_id);
//                                          - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//     * ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов товара в системе Ozon (sku);
//                                          - Неопределено - выборка по идентификаторам SKU не используется.
//     * МаксимальноеКоличествоВЗапросе     - Число - максимальное количество товаров для запроса (limit).
//
Функция НовыеПараметрыЗапросаПолученияОписанияТоваров(ИдентификаторыПубликации = Неопределено, ИдентификаторыОбъектовМаркетплейса = Неопределено, ИдентификаторыSKU = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторыПубликации",           ИдентификаторыПубликации);
	Результат.Вставить("ИдентификаторыОбъектовМаркетплейса", ИдентификаторыОбъектовМаркетплейса);
	Результат.Вставить("ИдентификаторыSKU",                  ИдентификаторыSKU);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",     1000);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения описания характеристик товаров.
// 
// Параметры:
//   ФильтрПоТоварам - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам;
//                   - Неопределено - использовать фильтр по умолчанию.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ФильтрВидимости                    - Строка - фильтр по видимости товара (filter.visibility); 
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товара в системе продавца (offer_id);
//                                          - Неопределено - выборка по идентификаторам публикации не используется.
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товара на маркетплейсе (product_id);
//                                          - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//     * ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов товара в системе Ozon (sku);
//                                          - Неопределено - выборка по идентификаторам SKU не используется.
//     * ИдентификаторПоследнегоЗначения    - Строка - идентификатор последнего значения на странице (last_id);
//     * МаксимальноеКоличествоВОтвете      - Число - количество значений на странице (limit);
//     * ПараметрСортировки                 - Строка - параметр, по которому товары будут отсортированы (sort_by);
//     * НаправлениеСортировки              - Строка - направление сортировки (sort_dir).
//
Функция НовыеПараметрыЗапросаПолученияОписанияХарактеристикТоваров(ФильтрПоТоварам = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ФильтрВидимости",                    "ALL");
	Результат.Вставить("ИдентификаторыПубликации",           Неопределено);
	Результат.Вставить("ИдентификаторыОбъектовМаркетплейса", Неопределено);
	Результат.Вставить("ИдентификаторыSKU",                  Неопределено);
	Результат.Вставить("ИдентификаторПоследнегоЗначения",    "");
	Результат.Вставить("МаксимальноеКоличествоВОтвете",      1000);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",     1000);
	Результат.Вставить("ПараметрСортировки",                 "");
	Результат.Вставить("НаправлениеСортировки",              "asc");
	
	Если ФильтрПоТоварам = Неопределено Тогда
		ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Ложь,,,);
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ФильтрПоТоварам Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для обновления остатков товаров.
// 
// Параметры:
//   ОстаткиТоваров - Массив Из Структура - список пар с новыми и старыми значениями артикулов:
//     * offer_id     - Строка - внутренний идентификатор товара в системе продавца (артикул);
//     * product_id   - Число - идентификатор товара на маркетплейсе;
//     * warehouse_id - Число - идентификатор склада на маркетплейсе;
//     * stock        - Число - количество товара в наличии.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ОстаткиТоваров                 - Неопределено
//                                      - Массив Из Структура - список пар с новыми и старыми значениями артикулов:
//       ** offer_id                      - Строка - внутренний идентификатор товара в системе продавца (артикул);
//       ** product_id                    - Строка - идентификатор товара на маркетплейсе;
//       ** warehouse_id                  - Строка - идентификатор склада на маркетплейсе;
//       ** stock                         - Число - количество товара в наличии.
//     * МаксимальноеКоличествоВЗапросе - Число - максимальное количество товаров для запроса;
//     * КоличествоЗапросовВМинуту      - Число - максимальное количество запросов в минуту;
//     * ВремяПоследнегоЗапроса         - Дата - дата и время последнего запроса.
//
Функция НовыеПараметрыЗапросаОбновленияОстатковТоваров(ОстаткиТоваров = Неопределено) 

	Результат = Новый Структура;
	Результат.Вставить("ОстаткиТоваров",                 ОстаткиТоваров);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе", 100);
	Результат.Вставить("КоличествоЗапросовВМинуту",      80);
	Результат.Вставить("ВремяПоследнегоЗапроса",         ТекущаяДатаСеанса());

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения отчета по остаткам и товарам в перемещении по складам Ozon.
// 
// Параметры:
//   ФильтрПоСкладам - Строка - фильтр по типу склада:
//                                "EXPRESS_DARK_STORE" - склады Ozon с доставкой Fresh;
//                                "NOT_EXPRESS_DARK_STORE" - склады Ozon без доставки Fresh;
//                                "ALL" - все склады Ozon (по умолчанию).
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * МаксимальноеКоличествоВОтвете - Число - количество ответов на странице (limit);
//     * НачальноеСмещениеВОтвете      - Число - количество элементов, которое будет пропущено в ответе (offset);
//     * ФильтрПоСкладам               - Строка - фильтр по типу склада (warehouse_type).
//
Функция НовыеПараметрыЗапросаПолученияОтчетаПоОстаткамИТоварамВПеремещенииПоСкладам(ФильтрПоСкладам = "ALL")

	Результат = Новый Структура;
	Результат.Вставить("МаксимальноеКоличествоВОтвете", 1000);
	Результат.Вставить("НачальноеСмещениеВОтвете",      0);
	Результат.Вставить("ФильтрПоСкладам",               ФильтрПоСкладам);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения списка транзакций.
// 
// Параметры:
//   НачалоПериода    - Дата - начало периода для поиска транзакций.
//   ОкончаниеПериода - Дата - окончание периода для поиска транзакций.
//   ТипОперации      - Строка - фильтры по типам операций, разделенных запятыми без пробелов;
//                    - Массив Из Строка - фильтр по типам операций.
//   ТипНачисления    - Строка - тип начисления, по умолчанию - все типы.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * Фильтр                           - Структура - фильтр для поиска транзакций (filter):
//       ** НачалоПериода                   - Дата - начало периода для поиска транзакций (date.from);
//       ** ОкончаниеПериода                - Дата - окончание периода для поиска транзакций (date.to);
//       ** ТипОперации                     - Строка - типы операций (operation_type);
//       ** НомерОтправления                - Строка - номер отправления (posting_number);
//       ** ТипНачисления                   - Строка - тип начисления (transaction_type).
//     * МаксимальноеКоличествоНаСтранице - Число - количество ответов на странице (page_size);
//     * НомерСтраницы                    - Число - номер страницы, возвращаемой в запросе (page).
//
Функция НовыеПараметрыЗапросаПолученияСпискаТранзакций(НачалоПериода, ОкончаниеПериода, Знач ТипОперации = "", ТипНачисления = "all")
	
	Если ТипЗнч(ТипОперации) = Тип("Строка") Тогда
		ТипОперации = СтрЗаменить(ТипОперации, " ", "");
		ТипОперации = СтрРазделить(ТипОперации, ",", Ложь);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТипНачисления) Тогда
		ТипНачисления = "all";
	КонецЕсли;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("НачалоПериода",    НачалоПериода);
	Фильтр.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	Фильтр.Вставить("ТипОперации",      ТипОперации);
	Фильтр.Вставить("НомерОтправления", "");
	Фильтр.Вставить("ТипНачисления",    ТипНачисления);
	
	Результат = Новый Структура;
	Результат.Вставить("Фильтр",                           Фильтр);
	Результат.Вставить("МаксимальноеКоличествоНаСтранице", 1000);
	Результат.Вставить("НомерСтраницы",                    1);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения списка отправлений за указанный период времени по схеме FBO.
// 
// Параметры:
//   НачалоПериода     - Дата - начало периода для поиска отправлений.
//   ОкончаниеПериода  - Дата - окончание периода для поиска отправлений.
//   СтатусОтправления - Строка - фильтр по статусу отправления:
//                         доступные значения см. Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению;
//                         "" - без фильтрации.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НаправлениеСортировки         - Строка - направление сортировки (dir);
//     * ФильтрДляПоискаОтправлений    - Структура - фильтр для поиска отправлений (filter):
//       ** НачалоПериода                - Дата - начало периода для поиска отправлений (since);
//       ** ОкончаниеПериода             - Дата - окончание периода для поиска отправлений (to);
//       ** СтатусОтправления            - Строка - фильтр по статусу отправления (status).
//     * МаксимальноеКоличествоВОтвете - Число - количество ответов на странице (limit);
//     * НачальноеСмещениеВОтвете      - Число - количество элементов, которое будет пропущено в ответе (offset);
//     * Транслитерация                - Булево - включена ли транслитерация адреса из кириллицы в латиницу (translit);
//     * ДополнительныеПоля            - Структура - дополнительные поля, которые нужно добавить в ответ (with):
//       ** ДанныеАналитики              - Булево - добавлять ли в ответ данные аналитики (analytics_data);
//       ** ФинансовыеДанные             - Булево - добавлять ли в ответ финансовые данные (financial_data).
//
Функция НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемеFBO(НачалоПериода, ОкончаниеПериода, 
			СтатусОтправления = "")
	
	ФильтрДляПоискаОтправлений = Новый Структура;
	ФильтрДляПоискаОтправлений.Вставить("НачалоПериода",     НачалоПериода);
	ФильтрДляПоискаОтправлений.Вставить("ОкончаниеПериода",  ОкончаниеПериода);
	ФильтрДляПоискаОтправлений.Вставить("СтатусОтправления", СтатусОтправления);
	
	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("ДанныеАналитики",  Истина);
	ДополнительныеПоля.Вставить("ФинансовыеДанные", Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("НаправлениеСортировки",         "asc");
	Результат.Вставить("ФильтрДляПоискаОтправлений",    ФильтрДляПоискаОтправлений);
	Результат.Вставить("МаксимальноеКоличествоВОтвете", 1000);
	Результат.Вставить("НачальноеСмещениеВОтвете",      0);
	Результат.Вставить("Транслитерация",                Ложь);
	Результат.Вставить("ДополнительныеПоля",            ДополнительныеПоля);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения информации об отправлении по его номеру по схеме FBO.
// 
// Параметры:
//   НомерОтправления - Строка - номер отправления.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомерОтправления   - Строка - номер отправления (posting_number).
//     * Транслитерация     - Булево - включена ли транслитерация адреса из кириллицы в латиницу (translit).
//     * ДополнительныеПоля - Структура - дополнительные поля, которые нужно добавить в ответ (with):
//       ** ДанныеАналитики   - Булево - добавлять ли в ответ данные аналитики (analytics_data).
//       ** ФинансовыеДанные  - Булево - добавлять ли в ответ финансовые данные (financial_data).
//
Функция НовыеПараметрыЗапросаПолученияИнформацииОбОтправленииПоНомеруПоСхемеFBO(НомерОтправления)
	
	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("ДанныеАналитики",  Истина);
	ДополнительныеПоля.Вставить("ФинансовыеДанные", Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("НомерОтправления",   НомерОтправления);
	Результат.Вставить("Транслитерация",     Ложь);
	Результат.Вставить("ДополнительныеПоля", ДополнительныеПоля);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения информации о возвратах товаров по номеру отправления по схеме FBO.
// 
// Параметры:
//   НомерОтправления - Строка - номер отправления;
//   СтатусВозврата   - Строка, Массив Из Строка - фильтр по статусу возврата.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомерОтправления                - Строка - номер отправления (filter.posting_number).
//     * СтатусВозврата                  - Массив Из Строка - фильтр по статусу возврата (filter.status).
//     * ИдентификаторПоследнегоЗначения - Число - идентификатор последнего значения на странице (last_id).
//     * МаксимальноеКоличествоВОтвете   - Число - количество значений в ответе (limit).
//
Функция НовыеПараметрыЗапросаПолученияИнформацииОВозвратахТоваровПоСхемеFBO(НомерОтправления, Знач СтатусВозврата)
	
	Если ТипЗнч(СтатусВозврата) = Тип("Строка") Тогда
		СтатусВозврата = СтрЗаменить(СтатусВозврата, " ", "");
		СтатусВозврата = СтрРазделить(СтатусВозврата, ",", Ложь);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("НомерОтправления",                НомерОтправления);
	Результат.Вставить("СтатусВозврата",                  СтатусВозврата);
	Результат.Вставить("ИдентификаторПоследнегоЗначения", 0);
	Результат.Вставить("МаксимальноеКоличествоВОтвете",   10);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения списка отправлений за указанный период времени по схемам FBS и rFBS.
// 
// Параметры:
//   НачалоПериода       - Дата - начало периода для поиска отправлений.
//   ОкончаниеПериода    - Дата - окончание периода для поиска отправлений.
//   СтатусОтправления   - Строка - фильтр по статусу отправления:
//                           доступные значения см. Перечисления.СтатусыЗаказовТорговыхПлощадок.ПолучитьПоПредставлению;
//                           "" - без фильтрации.
//   ИдентификаторЗаказа - Строка, Неопределено - идентификатор заказа выборочного получения данных.
//                           Если указан, фильтр по статусу отправления игнорируется.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НаправлениеСортировки         - Строка - направление сортировки (dir).
//     * ФильтрДляПоискаОтправлений    - Структура - фильтр для поиска отправлений (filter):
//       ** НачалоПериода                - Дата - начало периода для поиска отправлений (since).
//       ** ОкончаниеПериода             - Дата - окончание периода для поиска отправлений (to).
//       ** ВидФильтраПоПериоду          - Строка - вид фильтра по периоду выборки:
//                                           "ДатаСоздания" - по дате создания отправления;
//                                           "ДатаСборки" - по времени, до которого продавцу нужно собрать заказ сборки);
//                                           "ДатаПередачиВДоставку" - по дате передачи отправления в доставку.
//       ** СтатусОтправления            - Строка - фильтр по статусу отправления (status).
//       ** СпособыДоставки              - Массив Из Число - идентификаторы способов доставки (delivery_method_id).
//       ** ИдентификаторЗаказа          - Строка, Неопределено - идентификатор заказа (order_id).
//       ** СлужбыДоставки               - Массив Из Число - идентификаторы службы доставки (provider_id).
//       ** Склады                       - Массив Из Число - идентификаторы складов (warehouse_id).
//     * МаксимальноеКоличествоВОтвете - Число - количество ответов на странице (limit).
//     * НачальноеСмещениеВОтвете      - Число - количество элементов, которое будет пропущено в ответе (offset).
//     * ДополнительныеПоля            - Структура - дополнительные поля, которые нужно добавить в ответ (with):
//       ** ДанныеАналитики              - Булево - добавлять ли в ответ данные аналитики (analytics_data).
//       ** ФинансовыеДанные             - Булево - добавлять ли в ответ финансовые данные (financial_data).
//       ** Штрихкоды                    - Булево - добавлять ли в ответ штрихкоды отправления (barcodes).
//       ** Транслитерация               - Булево - включена ли транслитерация адреса из кириллицы в латиницу (translit).
//
Функция НовыеПараметрыЗапросаПолученияСпискаОтправленийЗаПериодПоСхемамFBSИRealFBS(НачалоПериода, ОкончаниеПериода, 
			СтатусОтправления = "", ИдентификаторЗаказа = Неопределено)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		СтатусОтправления = "";
	КонецЕсли;
	
	ФильтрДляПоискаОтправлений = Новый Структура;
	ФильтрДляПоискаОтправлений.Вставить("НачалоПериода",       НачалоПериода);
	ФильтрДляПоискаОтправлений.Вставить("ОкончаниеПериода",    ОкончаниеПериода);
	ФильтрДляПоискаОтправлений.Вставить("ВидФильтраПоПериоду", "ДатаСоздания");
	ФильтрДляПоискаОтправлений.Вставить("СтатусОтправления",   СтатусОтправления);
	ФильтрДляПоискаОтправлений.Вставить("СпособыДоставки",     Новый Массив);
	ФильтрДляПоискаОтправлений.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ФильтрДляПоискаОтправлений.Вставить("СлужбыДоставки",      Новый Массив);
	ФильтрДляПоискаОтправлений.Вставить("Склады",              Новый Массив);
	
	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("ДанныеАналитики",  Истина);
	ДополнительныеПоля.Вставить("ФинансовыеДанные", Ложь);
	ДополнительныеПоля.Вставить("Штрихкоды",        Истина);
	ДополнительныеПоля.Вставить("Транслитерация",   Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("НаправлениеСортировки",         "asc");
	Результат.Вставить("ФильтрДляПоискаОтправлений",    ФильтрДляПоискаОтправлений);
	Результат.Вставить("МаксимальноеКоличествоВОтвете", 1000);
	Результат.Вставить("НачальноеСмещениеВОтвете",      0);
	Результат.Вставить("ДополнительныеПоля",            ДополнительныеПоля);
	
	Возврат Результат;
	
КонецФункции

// Конструктор списка параметров для запроса получения информации об отправлении по его номеру по схемам FBS и rFBS.
// 
// Параметры:
//   НомерОтправления - Строка - номер отправления.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомерОтправления      - Строка - номер отправления (posting_number).
//     * ДополнительныеПоля    - Структура - дополнительные поля, которые нужно добавить в ответ (with):
//       ** ДанныеАналитики      - Булево - добавлять ли в ответ данные аналитики (analytics_data).
//       ** ФинансовыеДанные     - Булево - добавлять ли в ответ финансовые данные (financial_data).
//       ** Штрихкоды            - Булево - добавлять ли в ответ штрихкоды отправления (barcodes).
//       ** ДанныеОПродуктах     - Булево - добавлять ли в ответ данные о продуктах и их экземплярах (product_exemplars).
//       ** СвязанныеОтправления - Булево - добавлять ли в ответ номера связанных отправлений (related_postings).
//       ** Транслитерация       - Булево - включена ли транслитерация адреса из кириллицы в латиницу (translit).
//
Функция НовыеПараметрыЗапросаПолученияИнформацииОбОтправленииПоНомеруПоСхемамFBSИRealFBS(НомерОтправления)
	
	ДополнительныеПоля = Новый Структура;
	ДополнительныеПоля.Вставить("ДанныеАналитики",      Истина);
	ДополнительныеПоля.Вставить("ФинансовыеДанные",     Ложь);
	ДополнительныеПоля.Вставить("Штрихкоды",            Истина);
	ДополнительныеПоля.Вставить("ДанныеОПродуктах",     Ложь);
	ДополнительныеПоля.Вставить("СвязанныеОтправления", Ложь);
	ДополнительныеПоля.Вставить("Транслитерация",       Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("НомерОтправления",   НомерОтправления);
	Результат.Вставить("ДополнительныеПоля", ДополнительныеПоля);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения информации о возвратах товаров по номеру отправления по схемам 
// FBS и rFBS.
// 
// Параметры:
//   НомерОтправления - Строка - номер отправления.
//   СтатусВозврата   - Строка - фильтр по статусу возврата.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомерОтправления                - Строка, Массив Из Строка - номер отправления (filter.posting_number).
//     * СтатусВозврата                  - Строка - фильтр по статусу возврата (filter.status).
//     * ИдентификаторПоследнегоЗначения - Число - идентификатор последнего значения на странице (last_id).
//     * МаксимальноеКоличествоВОтвете   - Число - количество значений в ответе (limit).
//
Функция НовыеПараметрыЗапросаПолученияИнформацииОВозвратахТоваровПоСхемамFBSИRealFBS(Знач НомерОтправления, 
			Знач СтатусВозврата)
	
	Если ТипЗнч(НомерОтправления) = Тип("Строка") Тогда
		НомерОтправления = СтрЗаменить(НомерОтправления, " ", "");
		НомерОтправления = СтрРазделить(НомерОтправления, ",", Ложь);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("НомерОтправления",                НомерОтправления);
	Результат.Вставить("СтатусВозврата",                  СтатусВозврата);
	Результат.Вставить("ИдентификаторПоследнегоЗначения", 0);
	Результат.Вставить("МаксимальноеКоличествоВОтвете",   10);

	Возврат Результат;

КонецФункции

// Выполняет загрузку информации о продажах товаров через торговую площадку.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   НачалоПериода             - Дата, Неопределено - начало периода загрузки данных.
//   ОкончаниеПериода          - Дата, Неопределено - окончание периода загрузки данных.
//
// Возвращаемое значение:
//   Структура - описание параметров получения оборотов:
//     * УчетнаяЗаписьМаркетплейса   - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * НастройкиУчетнойЗаписи      - Структура из КлючИЗначение - см. Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи;
//     * Период                      - СтандартныйПериод - подготоваленный период выборки данных;
//     * НачалоПериода               - Дата, Неопределено - начало периода выборки данных;
//     * ОкончаниеПериода            - Дата, Неопределено - окончание периода выборки данных;
//     * УслугаПоКомиссионнойПродаже - СправочникСсылка.Номенклатура, Неопределено - услуга, указываемая в отчете агента;
//     * МетодОтчетовОРеализации     - Булево - признак использования метода отчетов;
//     * ДатаПоследнейЗагрузки       - Дата, Неопределено - дата почледней загрузки информации о продажах.
//
Функция ПараметрыПолученияОборотовПоПродажам(УчетнаяЗаписьМаркетплейса,
			НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено) Экспорт

	НастройкиУчетнойЗаписи =
		Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	ДатаПоследнейЗагрузки       = Неопределено;
	ЗагрузкаЗаТекущийМесяц      = Неопределено;
	УслугаПоКомиссионнойПродаже = Неопределено;

	ДополнительныеНастройки = Неопределено;
	Если НастройкиУчетнойЗаписи.Свойство("ДополнительныеНастройки", ДополнительныеНастройки) Тогда
		ДополнительныеНастройки.Свойство("ДатаПоследнегоЗагруженногоМесяца", ДатаПоследнейЗагрузки);
		ДополнительныеНастройки.Свойство("АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц", ЗагрузкаЗаТекущийМесяц);
		ДополнительныеНастройки.Свойство("УслугаПродажиЧерезТорговуюПлощадку", УслугаПоКомиссионнойПродаже);
	КонецЕсли;

	Если ДатаПоследнейЗагрузки = Неопределено Тогда
		ДатаПоследнейЗагрузки = Дата(1, 1, 1);
	КонецЕсли;
	Если ЗагрузкаЗаТекущийМесяц = Неопределено Тогда
		ЗагрузкаЗаТекущийМесяц = Ложь;
	КонецЕсли;

	ТекущаяДата = ТекущаяДатаСеанса();
	Если НачалоПериода = Неопределено Или НачалоПериода = Дата(1, 1, 1) Тогда
		НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		НачалоПериода = Макс(НачалоПериода, ДатаПоследнейЗагрузки + 1);
	КонецЕсли;
	Если ОкончаниеПериода = Неопределено Или ОкончаниеПериода = Дата(1, 1, 1) Тогда
		Если ЗагрузкаЗаТекущийМесяц Тогда
			ОкончаниеПериода = КонецДня(ТекущаяДата);
		Иначе
			ОкончаниеПериода = КонецМесяца(НачалоПериода);
		КонецЕсли;
	КонецЕсли;

	Период = Новый СтандартныйПериод(НачалоПериода, ОкончаниеПериода);

	ПараметрыПолученияОборотов = Новый Структура;
	ПараметрыПолученияОборотов.Вставить("УчетнаяЗаписьМаркетплейса",   УчетнаяЗаписьМаркетплейса);
	ПараметрыПолученияОборотов.Вставить("НастройкиУчетнойЗаписи",      НастройкиУчетнойЗаписи);
	ПараметрыПолученияОборотов.Вставить("Период",                      Период);
	ПараметрыПолученияОборотов.Вставить("НачалоПериода",               НачалоПериода);
	ПараметрыПолученияОборотов.Вставить("ОкончаниеПериода",            ОкончаниеПериода);
	ПараметрыПолученияОборотов.Вставить("УслугаПоКомиссионнойПродаже", УслугаПоКомиссионнойПродаже);
	ПараметрыПолученияОборотов.Вставить("МетодОтчетовОРеализации",     Ложь);
	ПараметрыПолученияОборотов.Вставить("ДатаПоследнейЗагрузки",       ДатаПоследнейЗагрузки);

	Возврат ПараметрыПолученияОборотов;

КонецФункции

// Конструктор списка параметров для запроса получения отчета о реализации доставленных и возвращенных товаров за месяц.
// 
// Параметры:
//   Период - Дата - месяц, за который необходимо получить данные.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * Период - Дата - месяц, за который необходимо получить данные.
//
Функция НовыеПараметрыЗапросаПолученияОтчетаОРеализацииТоваров(Период)
	
	Результат = Новый Структура;
	Результат.Вставить("Период", Период);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса создания задания на асинхронное формирование этикеток.
// 
// Параметры:
//   НомераОтправлений - Строка, Массив Из Строка - номера отправлений, для которых нужно получить этикетки.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомераОтправлений - Массив Из Строка - номера отправлений.
//
Функция НовыеПараметрыЗапросаСозданияЗаданияНаАсинхронноеФормированиеЭтикеток(Знач НомераОтправлений)
	
	Если ТипЗнч(НомераОтправлений) = Тип("Строка") Тогда
		НомерОтправления = НомераОтправлений;
		
		НомераОтправлений = Новый Массив;
		НомераОтправлений.Добавить(НомерОтправления);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НомераОтправлений", НомераОтправлений);
	
	Возврат Результат;
	
КонецФункции

// Конструктор списка параметров для запроса получения этикеток отправлений по ранее сформированным заданиям.
// 
// Параметры:
//   ИдентификаторЗадания - Строка, Число - идентификатор ранее сформированного задания получения этикеток.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторЗадания - Число - идентификатор задания формирования этикетки.
//
Функция НовыеПараметрыЗапросаПолученияЭтикетокОтправлений(ИдентификаторЗадания)
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗадания", СтрокаВЧисло(ИдентификаторЗадания));
	
	Возврат Результат;
	
КонецФункции

// Конструктор списка параметров для запросов по экземплярам товаров из отправления.
// 
// Параметры:
//   НомерОтправления  - Строка - номер отправления.
//   Товары            - ТаблицаЗначений, Неопределено - список товаров отправления.
//   КоличествоКоробок - Число - количество коробок, в которые упакован товар.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомерОтправления  - Строка - номер отправления;
//     * Товары            - ТаблицаЗначений, Неопределено - список товаров отправления;
//     * КоличествоКоробок - Число - количество коробок, в которые упакован товар.
//
Функция НовыеПараметрыЗапросаЭкземпляровТоваровПоОтправлению(НомерОтправления, Товары = Неопределено, КоличествоКоробок = 0)
	
	Результат = Новый Структура;
	Результат.Вставить("НомерОтправления",  НомерОтправления);
	Результат.Вставить("Товары",            Товары);
	Результат.Вставить("КоличествоКоробок", КоличествоКоробок);
	
	Возврат Результат;
	
КонецФункции

// Конструктор списка параметров для запросов отмены отправления.
// 
// Параметры:
//   НомерОтправления  - Строка - номер отправления.
//   ПричинаОтмены     - Структура - причина отмены:
//     * Идентификатор   - Число - идентификатор причины отмены отправления;
//     * Наименование    - Строка - наименование причины отмены;
//     * Ссылка          - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//   Товары            - ТаблицаЗначений, Массив Из СтрокаТаблицыЗначений, Неопределено - список товаров отправления.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * НомерОтправления - Строка - номер отправления;
//     * ПричинаОтмены    - Структура - причина отмены:
//       ** Идентификатор   - Число - идентификатор причины отмены отправления;
//       ** Наименование    - Строка - наименование причины отмены;
//       ** Ссылка          - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//     * Товары           - Неопределено - отмена отправления полностью.
//                        - ТаблицаЗначений, Массив Из СтрокаТаблицыЗначений - информация о товарах:
//       ** ИдентификаторSKU - Строка - идентификатор товара в системе Ozon (SKU);
//       ** Количество       - Число - количество товара в отправлении.
//
Функция НовыеПараметрыЗапросаОтменыОтправления(НомерОтправления, ПричинаОтмены, Товары = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("НомерОтправления",  НомерОтправления);
	Результат.Вставить("ПричинаОтмены",     ПричинаОтмены);
	Результат.Вставить("Товары",            Товары);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонструкторыСтруктурДанных

// Конструктор таблицы значений для данных об атрибутах категории.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений с колонками:
//     * УчетнаяЗаписьМаркетплейса                 - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись 
//                                                     подключения к сервису.
//     * ИдентификаторКатегорииМаркетплейса        - Строка - идентификатор категории, которой принадлежит атрибут.
//     * ИдентификаторРодителяАтрибутаМаркетплейса - Строка - идентификатор группы атрибутов.
//     * НаименованиеРодителяАтрибутаМаркетплейса  - Строка - наименование группы атрибутов.
//     * ИдентификаторАтрибутаМаркетплейса         - Строка - идентификатор атрибута.
//     * НаименованиеАтрибутаМаркетплейса          - Строка - наименование атрибута.
//     * ОписаниеНазначенияАтрибута                - Строка - описание назначения атрибута.
//     * ОбязательныйАтрибут                       - Булево - признак обязательной атрибута.
//     * АспектныйАтрибут                          - Булево - признак аспектного атрибута (характеристика, по которой 
//                                                     отличаются товары одной модели).
//     * ЯвляетсяКоллекциейЗначений                - Булево - признак того, что атрибут содержит список значений выбора.
//     * ДоступенВыборЗначенияИзСписка             - Булево - признак наличия списка выбора значений атрибута в 1С.
//     * МаксимальноеКоличествоЗначений            - Число - максимальное количество значений для атрибута.
//     * ТипЗначенияАтрибута                       - Строка - тип значения характеристики.
//     * ЗначениеПоУмолчанию                       - Произвольный - значение по умолчанию.
//     * ТипЗначенияАтрибута1С                     - Строка - тип значения характеристики в 1С.
//     * Реквизит1С                                - Строка - путь к реквизиту 1С.
//     * ПредставлениеРеквизита1С                  - Строка - пользовательское представление пути к реквизиту 1С.
//     * ИнформацияОСопоставленииЗначений          - Строка - представление информации о сопоставлении атрибутов.
//     * НомерКартинкиКоллекцииТипов               - Число - номер картинки в коллекции 
//                                                     БиблиотекаКартинок.ПиктограммыТиповДанных.
//     * ЗаполненРодитель                          - Булево - признак заполненности родителя атрибута.
//
Функция НоваяТаблицаАтрибутовКатегорииМаркетплейса()

	ОписаниеТипаСтрока	  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаБулево	  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2));
	ОписаниеТипаЧисло5	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5));

	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",					Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", 		ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса",	ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса",	ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса",			ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса",			ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ОписаниеНазначенияАтрибута",		 		ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОбязательныйАтрибут",						ОписаниеТипаБулево);
	Результат.Колонки.Добавить("АспектныйАтрибут",							ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЯвляетсяКоллекциейЗначений",				ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ДоступенВыборЗначенияИзСписка",				ОписаниеТипаБулево);
	Результат.Колонки.Добавить("МаксимальноеКоличествоЗначений",			ОписаниеТипаЧисло5);
	Результат.Колонки.Добавить("ТипЗначенияАтрибута",						ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");                      // Произвольный
	Результат.Колонки.Добавить("ТипЗначенияАтрибута1С", 					ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("Реквизит1С",								ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ПредставлениеРеквизита1С",					ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИнформацияОСопоставленииЗначений",			ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НомерКартинкиКоллекцииТипов",				ОписаниеТипаЧисло2);
	Результат.Колонки.Добавить("ЗаполненРодитель",							ОписаниеТипаБулево);

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для данных о значениях атрибута категории.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                               к сервису.
//     * ИдентификаторКатегорииМаркетплейса  - Строка - идентификатор категории, которой принадлежит атрибут.
//     * ИдентификаторАтрибутаМаркетплейса   - Строка - идентификатор атрибута.
//     * ИдентификаторЗначенияАтрибута       - Строка - идентификатор значения атрибута.
//     * ЗначениеАтрибута                    - Строка - значение атрибута.
//     * ОписаниеЗначенияАтрибута            - Строка - описание значения атрибута.
//     * АдресИзображенияДляЗначенияАтрибута - Строка - публичный адрес изображения для значения атрибута.
//
Функция НоваяТаблицаЗначенийАтрибутаКатегории()

	ОписаниеТипаСтрока     = Новый ОписаниеТипов("Строка"); 
	ОписаниеТипаСтрока50   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1000 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1000));

	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",           Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса",  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторЗначенияАтрибута", 	  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеАтрибута", 					  ОписаниеТипаСтрока1000);
	Результат.Колонки.Добавить("ОписаниеЗначенияАтрибута", 			  ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("АдресИзображенияДляЗначенияАтрибута", ОписаниеТипаСтрока250);

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для заполнения данных по реквизитам публикуемых товаров.
//
// Параметры:
//   РеквизитыДляСравнения - Булево - Истина, если необходимо добавить дополнительные реквизиты для сравнения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса		                  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись 
//                                                            подключения к сервису.
//     * Номенклатура 		          			     	  - СправочникСсылка.Номенклатура - номенклатура.
//     * Характеристика    			                 	  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика 
//                                                            номенклатуры.
//     * Упаковка 		             			     	  - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//     * Категория1С 		             			 	  - СправочникСсылка.ВидыНоменклатуры
//                                                        - СправочникСсылка.Номенклатура 
//                                                        - СправочникСсылка.ТоварныеКатегории - категория 1С из номенклатуры.
//     * ИсточникКатегорииМаркетплейса 			     	  - СправочникСсылка.ВидыНоменклатуры
//                                                        - СправочникСсылка.Номенклатура 
//                                                        - СправочникСсылка.ТоварныеКатегории - категория 1С, для которой
//                                                            задано соответствие категории маркетплейса, может быть указан
//                                                            элемент или группа элементов.
//	   * ИдентификаторИсточникаКатегорииМаркетплейса 	  - Строка - идентификатор источника категории маркетплейса.
//	   * ИдентификаторКатегорииМаркетплейса		     	  - Строка - идентификатор категории маркетплейса.
//	   * ИдентификаторРодителяАтрибутаМаркетплейса   	  - Строка - идентификатор родителя атрибута маркетплейса.
//	   * НаименованиеРодителяАтрибутаМаркетплейса    	  - Строка - наименование родителя атрибута маркетплейса.
//	   * ИдентификаторАтрибутаМаркетплейса 		     	  - Строка - идентификатор атрибута маркетплейса.
//	   * НаименованиеАтрибутаМаркетплейса  		     	  - Строка - наименование атрибута.
//	   * ПолныйПутьКРеквизиту1С 			 		 	  - Строка - путь к реквизиту из регистра сведений 
//	                                                          СоответствияАтрибутовМаркетплейсов.
//	   * ОбязательныйАтрибут				   		 	  - Булево - признак обязательного атрибута.
//     * АспектныйАтрибут                                 - Булево - признак аспектного атрибута (характеристика, по  
//                                                            которой отличаются товары одной модели).
//	   * ЯвляетсяКоллекциейЗначений 		 		 	  - Булево - признак того, что атрибут содержит список значений 
//	                                                          выбора.
//	   * ДоступенВыборЗначенияИзСписка  	  		 	  - Булево - признак наличия списка выбора значений атрибута в 1С.
//     * МаксимальноеКоличествоЗначений                   - Число - максимальное количество значений для атрибута.
//	   * ТипЗначенияАтрибута                		 	  - Строка - тип значения характеристики.
//	   * ЗначениеПоУмолчанию                		 	  - Произвольный - значение по умолчанию.
//	   * ИдентификаторЗначенияПоУмолчанию  		     	  - Строка - идентификатор значения по умолчанию при выборе 
//	                                                          значения из списка.
//	   * ЗначениеРеквизита1С 				  		 	  - Произвольный - значение реквизита 1С.
//	   * ЗначениеАтрибутаМаркетплейса 	  		     	  - Произвольный - значение для маркетплейса.
//	   * ИдентификаторЗначенияАтрибутаМаркетплейса   	  - Строка - идентификатор значения для маркетплейса при выборе 
//	                                                          значения из списка.
//     * НеЗаполненРеквизит1С 				         	  - Булево - признак незаполненного реквизита 1С.
//	   * НеЗаполненоСоответствиеАтрибута	         	  - Булево - признак незаполненного соответствия атрибуту 
//                                                            маркетплейса.
//	   * НеЗаполненАтрибут			 			     	  - Булево - признак незаполненного обязательного атрибута 
//                                                            маркетплейса.
//	   * УстановленоЗначениеПоУмолчанию			     	  - Булево - признак установки значения по умолчанию из-за 
//	                                                          незаполненного реквизита 1С или незаполненного соответствия 
//	                                                          атрибуту маркетплейса.
//	   * ЗначениеАтрибутаЗаданоПользователем         	  - Булево - признак установки значения пользователем.
//     * ОписаниеНазначенияАтрибута                       - Строка - описание назначения атрибута.
//     * ИзменилсяРеквизит1С                              - Булево - признак изменения реквизита информационной базы.
//     * НовоеЗначениеРеквизита1С                         - Произвольный - новое значение реквизита 1С.
//	   * ТекущееОбязательныйАтрибут				   		  - Булево - текущий признак обязательного атрибута.
//     * ТекущееАспектныйАтрибут                          - Булево - текущий признак аспектного атрибута (характеристика,  
//                                                            по которой отличаются товары одной модели).
//	   * ТекущееЯвляетсяКоллекциейЗначений 		 		  - Булево - текущий признак того, что атрибут содержит список 
//                                                            значений выбора.
//	   * ТекущееДоступенВыборЗначенияИзСписка  	  		  - Булево - текущий признак наличия списка выбора значений 
//	                                                          атрибута в 1С.
//	   * ТекущееМаксимальноеКоличествоЗначений            - Число - текущее максимальное количество значений для атрибута.
//	   * ТекущееТипЗначенияАтрибута                		  - Строка - текущий тип значения характеристики;
//	   * ТекущееЗначениеАтрибутаМаркетплейса 	  		  - Произвольный - текущее значение для маркетплейса;
//	   * ТекущееНеЗаполненАтрибут			 			  - Булево - признак незаполненного текущего обязательного 
//	                                                          атрибута маркетплейса.
//	   * ТекущееИдентификаторЗначенияАтрибутаМаркетплейса - Строка - идентификатор текущего значения для маркетплейса  
//                                                            при выборе значения из списка.
//
Функция НоваяТаблицаЗначенийРеквизитов(Знач РеквизитыДляСравнения = Ложь) Экспорт

	ОписаниеТипаБулево      = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока50    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока500   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаЧисло5	    = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5));
	ОписаниеТипаКатегории1С = ОписаниеТипаКатегории1С();

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",                   Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("Номенклатура",                                Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",                              Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка",                                    Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Результат.Колонки.Добавить("Категория1С",                                 ОписаниеТипаКатегории1С);
	Результат.Колонки.Добавить("ИсточникКатегорииМаркетплейса",               ОписаниеТипаКатегории1С);
	Результат.Колонки.Добавить("ИдентификаторИсточникаКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеКатегорииМаркетплейса",           ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса",    ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса",           ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса",            ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ПолныйПутьКРеквизиту1С",                      ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ПредставлениеРеквизита1С",                    ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ОбязательныйАтрибут",                         ОписаниеТипаБулево);
	Результат.Колонки.Добавить("АспектныйАтрибут",                            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЯвляетсяКоллекциейЗначений",                  ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ДоступенВыборЗначенияИзСписка",               ОписаниеТипаБулево);
	Результат.Колонки.Добавить("МаксимальноеКоличествоЗначений",			  ОписаниеТипаЧисло5);
	Результат.Колонки.Добавить("ТипЗначенияАтрибута",                         ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");						  // Произвольный
	Результат.Колонки.Добавить("ИдентификаторЗначенияПоУмолчанию",            ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеРеквизита1С");						  // Произвольный
	Результат.Колонки.Добавить("ЗначениеАтрибутаМаркетплейса");               // Произвольный
	Результат.Колонки.Добавить("ИдентификаторЗначенияАтрибутаМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НеЗаполненРеквизит1С",                        ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НеЗаполненоСоответствиеАтрибута",             ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НеЗаполненАтрибут",                           ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НеЗаполненПутьКРеквизиту1С",                  ОписаниеТипаБулево);
	Результат.Колонки.Добавить("УстановленоЗначениеПоУмолчанию",              ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЗначениеАтрибутаЗаданоПользователем",         ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ОписаниеНазначенияАтрибута",                  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИзменилсяРеквизит1С",                         ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НовоеЗначениеРеквизита1С");					  // Произвольный
	
	Если РеквизитыДляСравнения Тогда
		Результат.Колонки.Добавить("ЕстьРазличия",  								   ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТолькоТекущее", 								   ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееОбязательныйАтрибут",                       ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееАспектныйАтрибут",                          ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееЯвляетсяКоллекциейЗначений",                ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееДоступенВыборЗначенияИзСписка",             ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееМаксимальноеКоличествоЗначений",			   ОписаниеТипаЧисло5);
		Результат.Колонки.Добавить("ТекущееТипЗначенияАтрибута",                       ОписаниеТипаСтрока50);
		Результат.Колонки.Добавить("ТекущееЗначениеАтрибутаМаркетплейса");			   // Произвольный
		Результат.Колонки.Добавить("ТекущееНеЗаполненАтрибут", 						   ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НовоеДеревоАтрибутов()

	ОписаниеТипаСтрока	  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаБулево	  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2));
	ОписаниеТипаЧисло5	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5));

	ДеревоАтрибутов = Новый ДеревоЗначений;
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса",        ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторКатегории1С",                  ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса",  ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса",         ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса",          ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ОписаниеНазначенияАтрибута",                ОписаниеТипаСтрока);
	ДеревоАтрибутов.Колонки.Добавить("ОбязательныйАтрибут",                       ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("АспектныйАтрибут",                          ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений",                ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка",             ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("МаксимальноеКоличествоЗначений",            ОписаниеТипаЧисло5);
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута",                       ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута1С",                     ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ЗначениеПоУмолчанию",                       ОписаниеТипаСтрока);
	ДеревоАтрибутов.Колонки.Добавить("ЗначениеПоУмолчаниюИдентификатор",          ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("Реквизит1С",                                ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеРеквизита1С",                  ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеТипаСоответствияЗначений",     ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеТипаЗначенияПоУмолчанию",      ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторОбъектаМетаданных1С",          Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияРеквизита1С",                    Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоАтрибутов.Колонки.Добавить("НомерКартинкиКоллекцииТипов",               ОписаниеТипаЧисло2);
	ДеревоАтрибутов.Колонки.Добавить("Уровень",                                   ОписаниеТипаЧисло2);
	ДеревоАтрибутов.Колонки.Добавить("ПорядокСортировки",                         ОписаниеТипаЧисло2);

	Возврат ДеревоАтрибутов;

КонецФункции

// Конструктор дерева значений для заполнения данных по реквизитам публикуемых товаров.
//
// Параметры:
//   РеквизитыДляСравнения - Булево - Истина, если необходимо добавить дополнительные реквизиты для сравнения.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево с колонками:
//     * ИсточникКатегорииМаркетплейса 			     	  - СправочникСсылка.ВидыНоменклатуры
//                                                        - СправочникСсылка.Номенклатура 
//                                                        - СправочникСсылка.ТоварныеКатегории - категория 1С, для  
//                                                            которой задано соответствие категории маркетплейса, может 
//                                                            быть указан элемент или группа элементов.
//	   * ИдентификаторАтрибутаМаркетплейса 		     	  - Строка - идентификатор атрибута маркетплейса.
//	   * НаименованиеАтрибутаМаркетплейса  		     	  - Строка - наименование атрибута.
//     * ПредставлениеРеквизита1С                         - Строка - представление реквизита информационной базы.
//	   * ОбязательныйАтрибут				   		 	  - Булево - признак обязательного атрибута.
//     * АспектныйАтрибут                                 - Булево - признак аспектного атрибута (характеристика, по  
//                                                            которой отличаются товары одной модели).
//	   * ЯвляетсяКоллекциейЗначений 		 		 	  - Булево - признак того, что атрибут содержит список значений 
//                                                            выбора.
//	   * ДоступенВыборЗначенияИзСписка  	  		 	  - Булево - признак наличия списка выбора значений атрибута в 1С.
//     * МаксимальноеКоличествоЗначений                   - Число - максимальное количество значений для атрибута.
//	   * ТипЗначенияАтрибута                		 	  - Строка - тип значения характеристики.
//	   * ТипЗначенияАтрибута1С                		 	  - Строка - тип значения характеристики в информационной базе.
//     * ОписаниеНазначенияАтрибута                       - Строка - описание назначения атрибута.
//	   * ЗначениеРеквизита1С 				  		 	  - Произвольный - значение реквизита 1С.
//	   * ЗначениеАтрибутаМаркетплейса 	  		     	  - Произвольный - значение для маркетплейса.
//     * ЗначениеАтрибутаМаркетплейсаБулево               - Булево - значение атрибута маркетплейса.
//	   * ИдентификаторЗначенияАтрибутаМаркетплейса   	  - Строка - идентификатор значения для маркетплейса при выборе 
//                                                            значения из списка.
//     * ЗначенияАтрибутаМаркетплейса   	              - СписокЗначений Из Строка - перечень возможных значений 
//                                                            атрибута маркетплейса.
//     * ЗначениеАтрибутаЗаполнено                        - Булево - признак заполненности атрибута.
//	   * ЗначениеАтрибутаЗаданоПользователем         	  - Булево - признак установки значения пользователем.
//     * НеЗаполненРеквизит1С 				         	  - Булево - признак незаполненного реквизита 1С.
//	   * НеЗаполненАтрибут			 			     	  - Булево - признак незаполненного обязательного атрибута 
//                                                            маркетплейса.
//     * ПредставлениеТипаСоответствияЗначений            - Строка - представления типа соответствия.
//     * НомерКартинкиКоллекцииТипов                      - Число - номер картинки в коллекции 
//                                                            БиблиотекаКартинок.ПиктограммыТиповДанных.
//     * Уровень                                          - Число - номер уровня в дереве.
//     * ПорядокСортировки                                - Число - индекс сортировки. 
//     * АдресХранилищаДоступныхЗначений                  - Строка - адрес доступных значений.
//     * ИзменилсяРеквизит1С                              - Булево - признак изменения реквизита информационной базы.
//     * ОсновныеПоказатели                               - Булево - признак основных показателей.
//     * ЦеновыеПоказатели                                - Булево - признак ценовых показателей.
//     * ЕстьРазличия                                     - Булево - признак различия между предыдущим и текущим значением.
//	   * ТекущееОбязательныйАтрибут				   		  - Булево - текущий признак обязательного атрибута.
//     * ТекущееАспектныйАтрибут                          - Булево - текущий признак аспектного атрибута (характеристика,  
//                                                            по которой отличаются товары одной модели).
//	   * ТекущееЯвляетсяКоллекциейЗначений 		 		  - Булево - текущий признак того, что атрибут содержит список 
//                                                            значений выбора.
//	   * ТекущееДоступенВыборЗначенияИзСписка  	  		  - Булево - текущий признак наличия списка выбора значений 
//                                                            атрибута в 1С.
//     * ТекущееМаксимальноеКоличествоЗначений            - Число - текущее максимальное количество значений для атрибута.
//	   * ТекущееТипЗначенияАтрибута                		  - Строка - текущий тип значения характеристики.
//	   * ТекущееТипЗначенияАтрибута1С                     - Строка - текущий тип значения характеристики в информационной
//                                                            базе.
//	   * ТекущееЗначениеАтрибутаМаркетплейса 	  		  - Произвольный - текущее значение для маркетплейса.
//	   * ТекущееИдентификаторЗначенияАтрибутаМаркетплейса - Строка - идентификатор текущего значения для маркетплейса 
//                                                            при выборе значения из списка.
//     * ТекущееЗначениеАтрибутаМаркетплейсаБулево        - Булево - текущее значение атрибута маркетплейса.
//     * ТекущееЗначенияАтрибутаМаркетплейса   	          - СписокЗначений Из Строка - текущий перечень возможных 
//                                                            значений атрибута маркетплейса.
//     * ЗначениеАтрибутаЗаполнено                        - Булево - текущий признак заполненности атрибута.
//     * НомерКартинкиКоллекцииТипов                      - Число - текущий номер картинки в коллекции 
//                                                            БиблиотекаКартинок.ПиктограммыТиповДанных.
//
Функция НовоеДеревоРеквизитов(Знач РеквизитыДляСравнения = Ложь)

	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока500 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево	  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2	  = Новый ОписаниеТипов("Число", ,, Новый КвалификаторыЧисла(2));
	ОписаниеТипаЧисло5	  = Новый ОписаниеТипов("Число", ,, Новый КвалификаторыЧисла(5));

	ДеревоРеквизитов = Новый ДеревоЗначений;
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса",        ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса",         ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса",          ОписаниеТипаСтрока250);
	ДеревоРеквизитов.Колонки.Добавить("ПредставлениеРеквизита1С",                  ОписаниеТипаСтрока500);
	ДеревоРеквизитов.Колонки.Добавить("ОбязательныйАтрибут",                       ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("АспектныйАтрибут",                          ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений",                ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка",             ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("МаксимальноеКоличествоЗначений",            ОписаниеТипаЧисло5);
	ДеревоРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута",                       ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута1С",                     ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ОписаниеНазначенияАтрибута",                Новый ОписаниеТипов("Строка"));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеРеквизита1С"); 					   // Произвольный
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейса");             // Произвольный
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейсаБулево",        ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ЗначенияАтрибутаМаркетплейса",              Новый ОписаниеТипов("СписокЗначений"));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаполнено",                 ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаданоПользователем",       ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("НеЗаполненРеквизит1С",                      ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("НеЗаполненАтрибут",                         ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ПредставлениеТипаСоответствияЗначений",     ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("НомерКартинкиКоллекцииТипов",               ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("Уровень",                                   ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("ПорядокСортировки",                         ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("АдресХранилищаДоступныхЗначений",           ОписаниеТипаСтрока500);
	ДеревоРеквизитов.Колонки.Добавить("ИзменилсяРеквизит1С",                       ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("КэшЗначениеРеквизита1С"); 				   // Произвольный
	
	Если РеквизитыДляСравнения Тогда
		ДеревоРеквизитов.Колонки.Добавить("ОсновныеПоказатели",  							  ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ЦеновыеПоказатели",  							  ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ЕстьРазличия",  								      ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееОбязательныйАтрибут",                       ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееАспектныйАтрибут",                          ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЯвляетсяКоллекциейЗначений",                ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееДоступенВыборЗначенияИзСписка",             ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееМаксимальноеКоличествоЗначений",            ОписаниеТипаЧисло5);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееТипЗначенияАтрибута",                       ОписаниеТипаСтрока50);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееТипЗначенияАтрибута1С",                     ОписаниеТипаСтрока50);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначениеАтрибутаМаркетплейса");             // Произвольный
		ДеревоРеквизитов.Колонки.Добавить("ТекущееИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначениеАтрибутаМаркетплейсаБулево",        ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначенияАтрибутаМаркетплейса",              Новый ОписаниеТипов("СписокЗначений"));
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначениеАтрибутаЗаполнено",                 ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееНомерКартинкиКоллекцииТипов",               ОписаниеТипаЧисло2);
	КонецЕсли;
	
	Возврат ДеревоРеквизитов;

КонецФункции

// Конструктор таблицы значений для идентификаторов товаров, полученных из сервиса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                            к сервису.
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе.
//     * ИдентификаторSKU                 - Строка - идентификатор SKU товара.
//     * ПродаетсяСоСкидкой               - Булево - товар продается со скидкой.
//     * Архивный                         - Булево - признак архивного товара.
//     * ПродаетсяПоСхемеРаботыFBO        - Булево - продается по схеме FBО.
//     * ПродаетсяПоСхемеРаботыFBS        - Булево - продается по схеме FBS.
//     * ФильтрВидимости                  - Строка - фильтр по видимости товара.
//     * ИдентификаторПоследнегоЗначения  - Строка - идентификатор последнего значения на странице.
//
Функция НоваяТаблицаИдентификаторовТоваров() Экспорт

	ОписаниеТипаБулево   = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторSKU",                 ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ПродаетсяСоСкидкой",               ОписаниеТипаБулево);
	Результат.Колонки.Добавить("Архивный",                         ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBO",        ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBS",        ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ФильтрВидимости",  		           ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторПоследнегоЗначения",  ОписаниеТипаСтрока50);

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для описания ошибок при изменении артикулов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//     * ИдентификаторПубликации   - Строка - артикул товара, который не получилось изменить.
//     * СообщениеОбОшибке         - Строка - сообщение об ошибке.
//
Функция НоваяТаблицаОшибокИзмененияАртикулов()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",   Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Результат.Колонки.Добавить("СообщениеОбОшибке",         Новый ОписаниеТипов("Строка"));

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для описания товаров, полученных из сервиса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса            - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                                к сервису.
//     * ВидОбъектаМаркетплейса               - ПеречислениеСсылка.ВидыОбъектовМаркетплейсов - вид объекта маркетплейса.
//     * ИдентификаторПубликации              - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторОбъектаМаркетплейса     - Строка - идентификатор товара на маркетплейсе.
//     * ИдентификаторFBOSKU                  - Строка - SKU товара, который продается со склада Ozon (FBO).
//     * ИдентификаторFBSSKU                  - Строка - SKU товара, который продается со склада продавца (FBS и rFBS).
//     * ПредставлениеОбъектаМаркетплейса     - Строка - название товара.
//     * ОписаниеОбъектаМаркетплейса          - Строка - описание товара.
//     * Штрихкод                             - Строка - штрихкоды, через ";".
//     * ИдентификаторКатегорииМаркетплейса   - Строка - идентификатор категории маркетплейса.
//     * НаименованиеКатегорииМаркетплейса    - Строка - наименование категории маркетплейса.
//     * ЦеновойИндекс                        - Строка - ценовой индекс. Подробнее в Базе знаний продавца.
//     * ЦенаДоСкидки                         - Число - цена до учета скидок.
//     * ЦенаСоСкидкой                        - Число - цена товара с учетом скидок.
//     * МинимальнаяЦена                      - Число - минимальная цена товара после применения акций.
//     * ЦенаНаВитрине                        - Число - цена на товар с учетом всех акций, это значение будет указано на 
//                                                витрине Ozon.
//     * ЦенаПремиальная                      - Число - цена для клиентов с подпиской Ozon Premium.
//     * ЦенаРекомендованная                  - Число - цена на товар, рекомендованная системой на основании схожих 
//                                                предложений.
//     * КодВалюты                            - Строка - код валюты цен.
//     * СтавкаНДС                            - Число - Ставка НДС для товара.
//     * УцененныйТовар                       - Булево - признак, является ли товар уцененным.
//     * ЕстьУцененныеАналоги                 - Булево - признак, что у товара есть уцененные аналоги на складе Ozon.
//     * ПредоплатаОбязательна                - Булево - признак обязательной предоплаты за товар.
//     * ПредоплатаВозможна                   - Булево - признак, является ли предоплата возможной.
//     * ЗаданиеПубликации                    - Строка - номер задания на формирование документов.
//     * Статус                               - ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon - статус публикации 
//                                                товара.
//     * Состояние                            - Строка - краткое описание состояния публикации.
//     * ОписаниеСостояния                    - Строка - расширенное описание состояния публикации.
//     * КодОшибки                            - Строка - код ошибки при загрузке товара.
//     * ОписаниеОшибки                       - Строка - описание ошибки.
//     * ВыставленНаПродажу                   - Булево - Истина, если товар выставлен на продажу.
//     * ДатаСозданияНаМаркетплейсе           - Дата - дата и время создания товара.
//     * ДатаОбновленияНаМаркетплейсе         - Дата - дата и время последнего обновления товара.
//	   * ИнформацияОКомиссиях                 - ТаблицаЗначений - информация о комиссиях, 
//                                                см. НоваяТаблицаИнформацияОКомиссиях.
//	   * ИсточникиСхожихПредложений           - ТаблицаЗначений - информация об источниках схожих предложений, 
//                                               см. НоваяТаблицаИсточникиСхожихПредложений.
//     * КрупногабаритныйТовар                - Булево - признак крупногабаритного товара.
//     * ОбъемныйВес                          - Число - объемный вес товара.
//	   * ДатаАктуальностиОстатковМаркетплейса - Дата - дата актуальности остатков маркетплейса.
//	   * ОстаткиТовара_ВНаличии               - Число - сейчас на складе.
//	   * ОстаткиТовара_Зарезервировано        - Число - зарезервировано.
//	   * ОстаткиТовара_Ожидается              - Число - ожидается поставка.
//	   * ОстатокFBO                           - Число - сейчас на складе FBO.
//	   * РезервFBO                            - Число - зарезервировано FBO.
//	   * ОстатокFBS                           - Число - сейчас на складе FBS.
//	   * РезервFBS                            - Число - зарезервировано FBS.
//	   * ПродаетсяПоСхемеРаботыFBO            - Булево - товар продается по схеме FBO.
//	   * ПродаетсяПоСхемеРаботыFBS            - Булево - товар продается по схеме FBS.
//	   * ПродаетсяПоСхемеРаботыDBS            - Булево - товар продается по схеме Real FBS.
//	   * ОбъединяетсяВОднуКарточку            - Булево - признак объединения в одну карточку.
//	   * ЗначениеОбъединенияВОднуКарточку     - Строка - значение объединения в одну карточку.
//     * Изображения                          - ТаблицаЗначений - изображения товара, см. НоваяТаблицаИзображений.
//
Функция НоваяТаблицаОписанияТоваров() Экспорт

	ОписаниеТипаБулево          = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата            = Новый ОписаниеТипов("Дата");
	ОписаниеТипаСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока10        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10));
	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250       = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1024      = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024));
	ОписаниеТипаЧисло           = Новый ОписаниеТипов("Число");
	ОписаниеТипаДенежнаяСумма   = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип);
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	
	Результат = Новый ТаблицаЗначений;
	
	// Основные
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",            Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ВидОбъектаМаркетплейса",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",              ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса",     ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторFBOSKU",                  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторFBSSKU",                  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса",     ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ОписаниеОбъектаМаркетплейса",          ОписаниеТипаСтрока1024);
	Результат.Колонки.Добавить("Штрихкод",                             ОписаниеТипаСтрока);
	
	// Категория маркетплейса
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеКатегорииМаркетплейса",    ОписаниеТипаСтрока250);
	
	// Ценовые показатели
	Результат.Колонки.Добавить("ЦеновойИндекс",                        ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("ЦенаДоСкидки",                         ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаСоСкидкой",                        ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("МинимальнаяЦена",                      ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаНаВитрине",                        ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаПремиальная",                      ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаРекомендованная",                  ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("КодВалюты",                            ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("СтавкаНДС",                            ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("УцененныйТовар",                       ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЕстьУцененныеАналоги",                 ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПредоплатаОбязательна",                ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПредоплатаВозможна",                   ОписаниеТипаБулево);
	
	// Статус публикации	
	Результат.Колонки.Добавить("ЗаданиеПубликации",                    ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("Статус",                               Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
	Результат.Колонки.Добавить("Состояние",                            ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ОписаниеСостояния",                    ОписаниеТипаСтрока1024);
	Результат.Колонки.Добавить("КодОшибки",                            ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОписаниеОшибки",                       ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ВыставленНаПродажу",                   ОписаниеТипаБулево);
	
	// Прочее
	Результат.Колонки.Добавить("ДатаСозданияНаМаркетплейсе",           ОписаниеТипаДата);
	Результат.Колонки.Добавить("ДатаОбновленияНаМаркетплейсе",         ОписаниеТипаДата);
	Результат.Колонки.Добавить("МаркетинговыйЦвет", 			       ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИнформацияОКомиссиях",                 ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("ИсточникиСхожихПредложений",           ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("КрупногабаритныйТовар",                ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ОбъемныйВес",                		   ОписаниеТипаЧисло);

	// Остатки товара
	Результат.Колонки.Добавить("ДатаАктуальностиОстатковМаркетплейса", ОписаниеТипаДата);
	Результат.Колонки.Добавить("ОстаткиТовара_ВНаличии",               ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстаткиТовара_Зарезервировано",        ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстаткиТовара_Ожидается",              ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстатокFBO",                           ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("РезервFBO",                            ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстатокFBS",                           ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("РезервFBS",                            ОписаниеТипаЧисло);
	
	// Схемы продаж
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBO",            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBS",            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыDBS",            ОписаниеТипаБулево);
	
	// Параметры объединения в одну карточку
	Результат.Колонки.Добавить("ОбъединяетсяВОднуКарточку",            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЗначениеОбъединенияВОднуКарточку",     ОписаниеТипаСтрока250);
	
	// Изображения
	Результат.Колонки.Добавить("Изображения",                          ОписаниеТипаТаблицаЗначений);
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для описания характеристик товаров, полученных из сервиса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                              к сервису.
//     * ИдентификаторПубликации            - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторОбъектаМаркетплейса   - Строка - идентификатор товара на маркетплейсе.
//     * ФильтрВидимости                    - Строка - фильтр по видимости товара.
//     * Штрихкод                           - Строка - штрихкоды, через ";".
//     * ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса.
//     * ЗначенияАтрибутов                  - ТаблицаЗначений - значения реквизитов товара,
//                                              см. НоваяТаблицаЗначенийРеквизитов.
//     * Изображения                        - ТаблицаЗначений - изображения товара, см. НоваяТаблицаИзображений. 
//     * ДокументыPDF                       - ТаблицаЗначений - документы PDF, см. НоваяТаблицаДокументовPDF.
//
Функция НоваяТаблицаОписанияХарактеристикТоваров() Экспорт

	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250       = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", 		 Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",  		     ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ФильтрВидимости",  		             ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("Штрихкод",                  		 ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначенияАтрибутов",                  ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("Изображения",                        ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("ДокументыPDF",                       ОписаниеТипаТаблицаЗначений);

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для изображений товаров из сервиса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * Порядок             - Число - порядок расположения на сайте.
//     * ПутьКФайлу          - Строка - путь к изображению.
//     * ОсновноеИзображение - Булево - признак главного изображения.
//     * Изображение360      - Булево - признак изображения 360°.
//
Функция НоваяТаблицаИзображений() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",             Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("ПутьКФайлу",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОсновноеИзображение", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Изображение360",      Новый ОписаниеТипов("Булево"));

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для документов PDF из сервиса.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * Порядок      - Число - индекс документа в хранилище.
//     * Наименование - Строка - название файла.
//     * ПутьКФайлу   - Строка - путь к документу.
//
Функция НоваяТаблицаДокументовPDF()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",      Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
	Результат.Колонки.Добавить("ПутьКФайлу",   Новый ОписаниеТипов("Строка"));

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для информации о комиссиях.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * СхемаПродажи        - Строка - схема продажи.
//     * ПроцентКомиссии     - Число - процент комиссии.
//     * СуммаКомиссии       - Число - сумма комиссии.
//     * МинимальнаяКомиссия - Число - минимальная сумма комиссии.
//     * СтоимостьДоставки   - Число - стоимость доставки.
//     * СтоимостьВозврата   - Число - стоимость возврата.
//
Функция НоваяТаблицаИнформацияОКомиссиях() Экспорт

	ОписаниеТипаСтрока10 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10));
	ОписаниеТипаЧисло    = Новый ОписаниеТипов("Число");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СхемаПродажи",        ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("ПроцентКомиссии",     ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("СуммаКомиссии",       ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("МинимальнаяКомиссия", ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("СтоимостьДоставки",   ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("СтоимостьВозврата",   ОписаниеТипаЧисло);
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для информации об источниках схожих предложений.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * СхемаПродажи                           - Строка - схема продажи;
//	   * ИдентификаторSKU     				    - Строка - идентификатор товара на Ozon;
//	   * УчитываетсяПриРасчетеРыночногоЗначения - Булево - признак, что источник учитывается при расчете рыночного значения.
//
Функция НоваяТаблицаИсточникиСхожихПредложений() Экспорт

	ОписаниеТипаСтрока10 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10));
	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаБулево   = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СхемаПродажи",                           ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("ИдентификаторSKU",                       ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("УчитываетсяПриРасчетеРыночногоЗначения", ОписаниеТипаБулево);
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для поиска номенклатуры, характеристики, упаковки одним запросом.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица данных для поиска:
//     * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                            к сервису.
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе.
//     * ВариантПоиска                    - Число - вариант поиска:
//                                            1, 2 - по штрихкоду; 
//                                            3, 4 - по артикулу; 
//                                            5 - по идентификаторам Ozon; 
//                                            6 - по наименованию; 
//                                            10 и более - по словам наименований.
//     * ЗначениеПоиска                   - Строка - значение поиска по соответствующему варианту.
//     * ПоискХарактеристики              - Булево - Истина, если строка таблицы предназначена для поиска характеристики 
//                                            номенклатуры.
//
Функция НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки() 

	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока500 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево	  = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ВариантПоиска",                    Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ЗначениеПоиска",                   ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ПоискХарактеристики",              ОписаниеТипаБулево);

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для результатов обновления остатков товаров.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                            к сервису.
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе.
//     * ИдентификаторСкладаМаркетплейса  - Строка - идентификатор склада на маркетплейсе.
//     * ДатаОбновления                   - Дата - дата обновления остатков.
//     * Ошибки                           - Массив Из см. НовыйРезультатИзСервиса - список ошибок, возникших при 
//                                            обработке запроса.
//
Функция НоваяТаблицаРезультатовОбновленияОстатковТоваров()
	
	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторСкладаМаркетплейса",  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ДатаОбновления",                   Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Ошибки",                           Новый ОписаниеТипов("Массив"));
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для полученных остатков товаров.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения 
//                                            к сервису.
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца.
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе.
//     * ИдентификаторSKU                 - Строка - SKU товара, который продается со склада продавца (схемы FBS и rFBS).
//     * ИдентификаторСкладаМаркетплейса  - Строка - идентификатор склада на маркетплейсе.
//     * НаименованиеСкладаМаркетплейса   - Строка - наименование склада на маркетплейсе.
//     * ТипСкладаМаркетплейса            - Строка - тип склада на маркетплейсе.
//     * КоличествоВНаличии               - Число - количество товара в наличии.
//     * КоличествоЗарезервировано        - Число - количество товара зарезервировано.
//
Функция НоваяТаблицаОстатковТоваров() Экспорт
	
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло15_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторSKU",                 ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторСкладаМаркетплейса",  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеСкладаМаркетплейса",   ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ТипСкладаМаркетплейса",            ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("КоличествоВНаличии",               ОписаниеТипаЧисло15_3);
	Результат.Колонки.Добавить("КоличествоЗарезервировано",        ОписаниеТипаЧисло15_3);
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для списка складов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор склада.
//     * НаименованиеОбъектаМаркетплейса  - Строка - название склада.
//     * ЭтоRealFBS                       - Булево - признак работы склада по схеме rFBS.
//     * Склад1С                          - СправочникСсылка.Склады - сопоставленный склад информационной базы.
//
Функция НоваяТаблицаСкладов()

	ТаблицаСкладов = Новый ТаблицаЗначений;
	ТаблицаСкладов.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаСкладов.Колонки.Добавить("НаименованиеОбъектаМаркетплейса",  Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
	ТаблицаСкладов.Колонки.Добавить("ЭтоRealFBS",                       Новый ОписаниеТипов("Булево"));
	ТаблицаСкладов.Колонки.Добавить("Статус",                           Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(25)));
	ТаблицаСкладов.Колонки.Добавить("Склад1С",                          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСкладов.Колонки.Добавить("ЗаполненыНастройкиСклада",         Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаСкладов;

КонецФункции

// Конструктор таблицы значений для сведений о выгруженных данных.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//     * Номенклатура              - СправочникСсылка.Номенклатура - найденная номенклатура.
//     * Характеристика            - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика.
//     * Упаковка                  - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка.
//     * ВидОбъектаМаркетплейса    - ПеречислениеСсылка.ВидыОбъектовМаркетплейсов - вид объекта маркетплейса.
//     * ОбъектПубликации          - СправочникСсылка.СертификатыНоменклатуры
//                                 - СправочникСсылка.НоменклатураПрисоединенныеФайлы - объект публикации.
//
Функция СведенияОВыгруженныхДанных() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",            Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка",                  Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Результат.Колонки.Добавить("ВидОбъектаМаркетплейса",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТипОбъектПубликации = Новый Массив;
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.СертификатыНоменклатуры"));
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	Результат.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(ТипОбъектПубликации));

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для данных о публикуемых товарах.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * УчетнаяЗаписьМаркетплейса			- СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись маркетплейса.
//	   * Номенклатура						- СправочникСсылка.Номенклатура - номенклатура.
//	   * Характеристика						- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//	   * Упаковка 							- СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка.
//	   * ИсточникКатегории					- ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории.
//	   * ОпубликоватьТовар					- Булево - признак необходимости публикации товара.
//	   * ИдентификаторПубликации			- Строка - уникальный идентификатор, созданный для сочетания полей 
//                                              Номенклатура, Характеристика, Упаковка.
//	   * ИдентификаторОбъектаМаркетплейса	- Строка - идентификатор товара на маркетплейсе.
//     * Категория1С                        - СправочникСсылка.ВидыНоменклатуры -
//                                          - СправочникСсылка.Номенклатура -
//                                          - СправочникСсылка.ТоварныеКатегории - категория 1С из номенклатуры.
//     * ИсточникКатегорииМаркетплейса      - СправочникСсылка.ВидыНоменклатуры -
//                                          - СправочникСсылка.Номенклатура -
//                                          - СправочникСсылка.ТоварныеКатегории - категория-источник, по которой найдены 
//	                                            правила заполнения атрибутов.
// 	   * ИдентификаторКатегорииМаркетплейса	- Строка - идентификатор категории маркетплейса, заполняется только при 
//                                              необходимости обновления значений атрибутов. 
// 	   * ДанныеОбъекта 						- См. НоваяТаблицаЗначенийРеквизитов.
// 	   * ДанныеОбъектаПереданы				- Булево - признак того, что реквизиты товара переданы, актуально для проверки 
// 	                                            заполнения или перезаполнения.
// 	   * ДанныеДляПубликации		        - См. НовыйСписокДанныхОТоваре.
//	   * ОбъектыПубликации					- См. НоваяТаблицаОбъектовПубликации.
//	   * ЕстьКритичныеОшибки				- Булево - признак наличия ошибок, из-за которых публикация товара невозможна.
//	   * КодОшибки							- Строка - код ошибки заполнения атрибутов.
//	   * ОписаниеОшибки						- Строка - описание ошибок заполнения атрибутов.
//
Функция НоваяТаблицаПубликацииТоваров() Экспорт

	ОписаниеТипаСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаБулево          = Новый ОписаниеТипов("Булево");
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТипаСтруктура       = Новый ОписаниеТипов("Структура");
	ОписаниеТипаКатегории1С     = ОписаниеТипаКатегории1С();

	ТаблицаПубликацииТоваров = Новый ТаблицаЗначений; 
	ТаблицаПубликацииТоваров.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИсточникКатегории", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОпубликоватьТовар", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("Категория1С", ОписаниеТипаКатегории1С);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеОбъекта", ОписаниеТипаТаблицаЗначений);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеОбъектаПереданы", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеДляПубликации", ОписаниеТипаСтруктура);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОбъектыПубликации", ОписаниеТипаТаблицаЗначений);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ЕстьКритичныеОшибки", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("КодОшибки", ОписаниеТипаСтрока);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);

	Возврат ТаблицаПубликацииТоваров;

КонецФункции

Функция НоваяТаблицаОбъектовПубликации()

	МассивТиповОбъектаПубликации = Новый Массив; 
	МассивТиповОбъектаПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	МассивТиповОбъектаПубликации.Добавить(Тип("СправочникСсылка.СертификатыНоменклатуры"));

	ОписаниеТипаСтрока		= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));

	ТаблицаОбъектовПубликации = Новый ТаблицаЗначений;
	ТаблицаОбъектовПубликации.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(МассивТиповОбъектаПубликации));
	ТаблицаОбъектовПубликации.Колонки.Добавить("НаименованиеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ДанныеОбъекта", Новый ОписаниеТипов("Структура"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ЭтоОсновнойОбъект", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИзмененыРеквизиты", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("КодОшибки", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("Состояние", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОписаниеСостояния", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИсходныйКлючЗаписи", Новый ОписаниеТипов("Структура"));

	Возврат ТаблицаОбъектовПубликации;

КонецФункции

Функция НоваяТаблицаВесогабаритныхХарактеристик()

	ОписаниеТипаСтрока3   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаЧисло     = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 5, ДопустимыйЗнак.Неотрицательный));

	ТаблицаВесогабаритныхХарактеристик = Новый ТаблицаЗначений;
	ТаблицаВесогабаритныхХарактеристик.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаВесогабаритныхХарактеристик.Колонки.Добавить("ИдентификаторЕдиницыИзмерения",     ОписаниеТипаСтрока50);
	ТаблицаВесогабаритныхХарактеристик.Колонки.Добавить("ИдентификаторЗначенияПоУмолчанию",  ОписаниеТипаСтрока50);
	ТаблицаВесогабаритныхХарактеристик.Колонки.Добавить("МеждународноеСокращение",           ОписаниеТипаСтрока3);
	ТаблицаВесогабаритныхХарактеристик.Колонки.Добавить("Числитель",                         ОписаниеТипаЧисло);
	ТаблицаВесогабаритныхХарактеристик.Колонки.Добавить("Знаменатель",                       ОписаниеТипаЧисло);

	Возврат ТаблицаВесогабаритныхХарактеристик;

КонецФункции

Функция НовыйСписокДанныхОТоваре()

	СтруктураДанныхЗаписи = Новый Структура;
	СтруктураДанныхЗаписи.Вставить("НаименованиеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ПредставлениеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторПубликации", "");
	СтруктураДанныхЗаписи.Вставить("ОписаниеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИсточникКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("НаименованиеКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("НеактивнаяКатегорияМаркетплейса", Ложь);
	СтруктураДанныхЗаписи.Вставить("ИспользуютсяКодыАктивации", Ложь);
	СтруктураДанныхЗаписи.Вставить("ОбъединяетсяВОднуКарточку", Ложь);
	СтруктураДанныхЗаписи.Вставить("ЗначениеОбъединенияВОднуКарточку", "");
	СтруктураДанныхЗаписи.Вставить("Валюта", "");
	СтруктураДанныхЗаписи.Вставить("КодВалюты", "");
	СтруктураДанныхЗаписи.Вставить("СтавкаНДС", 0);
	СтруктураДанныхЗаписи.Вставить("ВесогабаритныеХарактеристикиУпаковки", НовыйСписокАтрибутовВесогабаритныхХарактеристикУпаковки());
	СтруктураДанныхЗаписи.Вставить("ОбъединятьТоварыВОднуКарточкуСвойства", НовыйСписокСвойствОбъединенияТоваровВОднуКарточку());
	СтруктураДанныхЗаписи.Вставить("ВидыЦенУчетнойЗаписи", Новый Структура); 
	СтруктураДанныхЗаписи.Вставить("ОписаниеСертификацииКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("Цены", Новый Структура);
	СтруктураДанныхЗаписи.Вставить("Штрихкод", "");

	Возврат СтруктураДанныхЗаписи;

КонецФункции

Функция НовыйСписокАтрибутовИзображения() Экспорт

	СписокАтрибутовИзображения = Новый Структура;
	СписокАтрибутовИзображения.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
	СписокАтрибутовИзображения.Вставить("ЭтоОсновноеИзображение", Ложь);
	СписокАтрибутовИзображения.Вставить("ЭтоИзображение360", Ложь);
	СписокАтрибутовИзображения.Вставить("УдаляемыеСсылки", Новый Соответствие);

	Возврат СписокАтрибутовИзображения;

КонецФункции

Функция НовыйСписокАтрибутовСертификата() Экспорт

	СписокАтрибутовСертификата = Новый Структура;
	СписокАтрибутовСертификата.Вставить("НаименованиеСертификата", "");
	СписокАтрибутовСертификата.Вставить("НомерСертификата", "");
	СписокАтрибутовСертификата.Вставить("ТипСертификата1С", "");
	СписокАтрибутовСертификата.Вставить("ИдентификаторТипаСертификата", "");
	СписокАтрибутовСертификата.Вставить("НаименованиеТипаСертификата", "");
	СписокАтрибутовСертификата.Вставить("ИдентификаторТипаСоответствияТребованиям", "");
	СписокАтрибутовСертификата.Вставить("НаименованиеТипаСоответствияТребованиям", "");
	СписокАтрибутовСертификата.Вставить("ДатаНачалаСрокаДействия", Дата(1,1,1));
	СписокАтрибутовСертификата.Вставить("ДатаОкончанияСрокаДействия", Дата(1,1,1));
	СписокАтрибутовСертификата.Вставить("ПрисоединенныеФайлы", Новый Массив);
	СписокАтрибутовСертификата.Вставить("ИзмененСоставАтрибутов", Ложь);
	СписокАтрибутовСертификата.Вставить("СтатусРосаккредитации", Перечисления.СтатусыСертификатовНоменклатурыРосаккредитации.ПустаяСсылка());
	СписокАтрибутовСертификата.Вставить("ДатаОбновленияСтатусаРосаккредитации", Дата(1,1,1));

	Возврат СписокАтрибутовСертификата;

КонецФункции

Функция НовыйСписокАтрибутовВесогабаритныхХарактеристикУпаковки()

	СтруктураВесогабаритныхХарактеристикУпаковки = Новый Структура; 
	СтруктураВесогабаритныхХарактеристикУпаковки.Вставить("ЕдиницаВеса", "");
	СтруктураВесогабаритныхХарактеристикУпаковки.Вставить("ВесТовараВУпаковке", 0);
	СтруктураВесогабаритныхХарактеристикУпаковки.Вставить("ЕдиницаГабаритов", "");
	СтруктураВесогабаритныхХарактеристикУпаковки.Вставить("Глубина", 0);
	СтруктураВесогабаритныхХарактеристикУпаковки.Вставить("Высота", 0);
	СтруктураВесогабаритныхХарактеристикУпаковки.Вставить("Ширина", 0);

	Возврат СтруктураВесогабаритныхХарактеристикУпаковки;

КонецФункции

Функция НоваяТаблицаОстатковТоваровНаСкладахТорговойПлощадки()

	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло     = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));

	ТаблицаОстатковТоваров = Новый ТаблицаЗначений;
	ТаблицаОстатковТоваров.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	ТаблицаОстатковТоваров.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаОстатковТоваров.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОстатковТоваров.Колонки.Добавить("ИдентификаторСклада",              ОписаниеТипаСтрока50);
	ТаблицаОстатковТоваров.Колонки.Добавить("НаименованиеСклада",               ОписаниеТипаСтрока250);
	ТаблицаОстатковТоваров.Колонки.Добавить("ВНаличии",                         ОписаниеТипаЧисло);
	ТаблицаОстатковТоваров.Колонки.Добавить("Зарезервировано",                  ОписаниеТипаЧисло);
	ТаблицаОстатковТоваров.Колонки.Добавить("ВПодтвержденныхПоставках",         ОписаниеТипаЧисло);

	Возврат ТаблицаОстатковТоваров;

КонецФункции

Функция НоваяТаблицаОборотовТоваровНаСкладахТорговойПлощадки(ФинансовыеДанные = Ложь)
	
	ОписаниеТипаДата      = Новый ОписаниеТипов("Дата");
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло15_2 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
	ОписаниеТипаЧисло15_3 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));

	ТаблицаОборотовТоваров = Новый ТаблицаЗначений;
	ТаблицаОборотовТоваров.Колонки.Добавить("СхемаДоставки",                    Новый ОписаниеТипов("ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок"));
	ТаблицаОборотовТоваров.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОборотовТоваров.Колонки.Добавить("ИдентификаторSKU", 				ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("ИдентификаторСклада",              ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("НаименованиеСклада",               ОписаниеТипаСтрока250);
	ТаблицаОборотовТоваров.Колонки.Добавить("ДатаОтправления",                  ОписаниеТипаДата);
	ТаблицаОборотовТоваров.Колонки.Добавить("НомерОтправления",                 ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("НомерЗаказа",                      ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("ИдентификаторЗаказа",              ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("Заказано",                         ОписаниеТипаЧисло15_3);
	ТаблицаОборотовТоваров.Колонки.Добавить("Доставлено",                       ОписаниеТипаЧисло15_3);
	ТаблицаОборотовТоваров.Колонки.Добавить("ДатаПередачиВДоставку",            ОписаниеТипаДата);
	ТаблицаОборотовТоваров.Колонки.Добавить("ДатаДоставки",                     ОписаниеТипаДата);
	ТаблицаОборотовТоваров.Колонки.Добавить("Отменено",                         ОписаниеТипаЧисло15_3);
	ТаблицаОборотовТоваров.Колонки.Добавить("Цена",                             ОписаниеТипаЧисло15_2);
	
	Если ФинансовыеДанные Тогда
		ТаблицаОборотовТоваров.Колонки.Добавить("ПроцентКомиссии",              ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("СуммаКомиссии",                ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("ЦенаДоСкидки",                 ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("ПроцентСкидки",                ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("СуммаСкидки",                  ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("ЦенаДляКлиента",               ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("ИтогоКНачислению",             ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("БаллыЗаСкидки",                ОписаниеТипаЧисло15_2);
		ТаблицаОборотовТоваров.Колонки.Добавить("ВыплатыПоМеханикамЛояльности", ОписаниеТипаЧисло15_2);
	КонецЕсли;
	
	ТаблицаОборотовТоваров.Колонки.Добавить("НомерВходящегоДокумента", ОписаниеТипаСтрока50);
	ТаблицаОборотовТоваров.Колонки.Добавить("ДатаВходящегоДокумента",  ОписаниеТипаДата);
	
	Возврат ТаблицаОборотовТоваров;
	
КонецФункции

Функция НоваяТаблицаЗаказовТорговойПлощадки()
	
	ОписаниеТипаБулево     = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата       = Новый ОписаниеТипов("Дата");
	ОписаниеТипаСтрока3    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ОписаниеТипаСтрока50   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока100  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100));
	ОписаниеТипаСтрока250  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1024 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024));
	ОписаниеТипаЧисло15_2  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
	ОписаниеТипаЧисло15_3  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));

	ТаблицаЗаказов = Новый ТаблицаЗначений;
	
	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторЗаказа",              ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("НомерЗаказа",                      ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("КомментарийКЗаказу",               ОписаниеТипаСтрока1024);

	ТаблицаЗаказов.Колонки.Добавить("НомерОтправления",                 ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("ДатаОтправления",                  ОписаниеТипаДата);
	ТаблицаЗаказов.Колонки.Добавить("СтатусОтправления",                ОписаниеТипаСтрока100);
	ТаблицаЗаказов.Колонки.Добавить("ПодстатусОтправления",             ОписаниеТипаСтрока100);
	ТаблицаЗаказов.Колонки.Добавить("ТрекНомерОтправления",             ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("НомерРодительскогоОтправления",    ОписаниеТипаСтрока50);

	ТаблицаЗаказов.Колонки.Добавить("ДатаСборки",                       ОписаниеТипаДата);
	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторСклада",              ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("НаименованиеСклада",               ОписаниеТипаСтрока250);

	ТаблицаЗаказов.Колонки.Добавить("ДатаПередачиВДоставку",            ОписаниеТипаДата);
	ТаблицаЗаказов.Колонки.Добавить("ДатаДоставки",                     ОписаниеТипаДата);
	ТаблицаЗаказов.Колонки.Добавить("СпособДоставки",                   ОписаниеТипаСтрока100);
	ТаблицаЗаказов.Колонки.Добавить("РегионДоставки",                   ОписаниеТипаСтрока100);
	ТаблицаЗаказов.Колонки.Добавить("ГородДоставки",                    ОписаниеТипаСтрока100);
	ТаблицаЗаказов.Колонки.Добавить("АдресДоставки",                    ОписаниеТипаСтрока250);
	ТаблицаЗаказов.Колонки.Добавить("СлужбаДоставки",                   ОписаниеТипаСтрока100);
	ТаблицаЗаказов.Колонки.Добавить("СтатусПокупателя",                 ОписаниеТипаБулево);
	ТаблицаЗаказов.Колонки.Добавить("СпособОплаты",                     ОписаниеТипаСтрока100);

	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторПокупателя",          ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("НаименованиеПокупателя",           ОписаниеТипаСтрока250);

	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторПричиныОтмены",       ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("ПричинаОтмены",                    ОписаниеТипаСтрока250);
	ТаблицаЗаказов.Колонки.Добавить("ТипПричиныОтмены",                 ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("ИнициаторОтмены",                  ОписаниеТипаСтрока50);

	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("ИдентификаторSKU",                 ОписаниеТипаСтрока50);
	ТаблицаЗаказов.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаЗаказов.Колонки.Добавить("Количество",                       ОписаниеТипаЧисло15_3);
	ТаблицаЗаказов.Колонки.Добавить("Валюта",                           ОписаниеТипаСтрока3);
	ТаблицаЗаказов.Колонки.Добавить("ЦенаДоСкидки",                     ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("Цена",                             ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("ЦенаДляКлиента",                   ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("ПроцентСкидки",                    ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("СуммаСкидки",                      ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("ПроцентКомиссии",                  ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("СуммаКомиссии",                    ОписаниеТипаЧисло15_2);
	ТаблицаЗаказов.Колонки.Добавить("ВыплатаПродавцу",                  ОписаниеТипаЧисло15_2);

	ТаблицаЗаказов.Колонки.Добавить("ТребуетсяГТД",                     ОписаниеТипаБулево);
	ТаблицаЗаказов.Колонки.Добавить("ТребуетсяРНПТ",                    ОписаниеТипаБулево);
	ТаблицаЗаказов.Колонки.Добавить("ТребуетсяСтранаПроисхождения",     ОписаниеТипаБулево);
	ТаблицаЗаказов.Колонки.Добавить("ТребуетсяМаркировка",              ОписаниеТипаБулево);
	ТаблицаЗаказов.Колонки.Добавить("ТребуетсяУИНЮвелирногоИзделия",    ОписаниеТипаБулево);
	
	ТаблицаЗаказов.Индексы.Добавить("ИдентификаторSKU");
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

// Конструктор таблицы значений по товарам отправления.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИдентификаторТовара          - Строка - идентификатор товара на торговой площадке;
//     * ТребуетсяСтранаПроисхождения - Булево - признак того, что необходимо передать страну происхождения товара;
//     * ТребуетсяГТД                 - Булево - признак того, что необходимо передать номер грузовой таможенной декларации (ГТД) для продукта и отправления;
//     * ТребуетсяРНПТ                - Булево - признак того, что необходимо передать номер партии товара (РНПТ);
//     * ТребуетсяМаркировка          - Булево - признак того, что необходимо передать маркировку "Честный ЗНАК";
//     * ТребуетсяУИН                 - Булево - признак того, что необходимо передать уникальный идентификационный номер (УИН) ювелирного изделия;
//     * Экземпляры                   - ТаблицаЗначений - экземпляры товара;
//     * ПроверкаПройдена             - Булево - результат прохождения проверки. Истина, если коды экземпляра соответствуют требованиям;
//     * КодПричиныОтмены             - Строка - идентификатор причины отмены;
//     * НаименованиеПричиныОтмены    - Строка - наименование причины отмены.
//
Функция НоваяТаблицаТоваровПоОтправлению()
	
	ОписаниеТипаБулево    = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло15   = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИдентификаторТовара",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ТребуетсяСтранаПроисхождения", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТребуетсяГТД",                 ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТребуетсяРНПТ",                ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТребуетсяМаркировка",          ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТребуетсяУИН",                 ОписаниеТипаБулево);
	Результат.Колонки.Добавить("Экземпляры",                   Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Колонки.Добавить("ПроверкаПройдена",             ОписаниеТипаБулево);
	Результат.Колонки.Добавить("КодПричиныОтмены",             ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеПричиныОтмены",    ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("Количество",                   ОписаниеТипаЧисло15);
	
	Возврат Результат;
	
КонецФункции

// Конструктор таблицы значений по экземплярам товаров отправления.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИдентификаторЭкземпляра       - Число - идентификатор экземпляра товара;
//     * ТребуетсяСтранаПроисхождения  - Булево - признак того, что необходимо передать страну происхождения товара;
//     * СтранаПроисхожденияСсылка     - СправочникСсылка.СтраныМира - страна происхождения;
//     * СтранаПроисхожденияКод        - Строка - код страны (Альфа 2);
//     * ТребуетсяГТД                  - Булево - признак того, что необходимо передать номер грузовой таможенной декларации (ГТД) для продукта и отправления;
//     * ТребуетсяРНПТ                 - Булево - признак того, что необходимо передать номер партии товара (РНПТ);
//     * НомерГТДСсылка                - СправочникСсылка.НомераГТД - номер грузовой таможенной декларации (ГТД);
//     * НомерГТДТип                   - ПеречислениеСсылка.ТипыНомеровГТД - тип номера ГТД;
//     * НомерГТДКод                   - Строка - номер грузовой таможенной декларации (ГТД);
//     * НомерГТДРегистрационныйНомер  - Строка - регистрационный номер партии товара;
//     * ТребуетсяМаркировка           - Булево - признак того, что необходимо передать маркировку "Честный ЗНАК";
//     * КодМаркировкиСсылка           - СправочникСсылка.ШтрихкодыУпаковокТоваров - коды маркировки "Честный ЗНАК";
//     * КодМаркировки                 - Строка - представление кодов маркировки; 
//     * ТребуетсяУИН                  - Булево - признак того, что необходимо передать уникальный идентификационный номер (УИН) ювелирного изделия;
//     * УИН                           - Строка - уникальный идентификационный номер ювелирного изделия;
//     * НомерОтправления              - Строка - номер отправления;
//     * НомерРодительскогоОтправления - Строка - номер родительского отправления;
//     * КодСтроки                     - Строка - код строки заказа;
//     * ИдентификаторСтроки           - Строка - идентификатор строки документа отгрузки;
//     * ДокументОтгрузки              - ДокументСсылка.ПередачаТоваровХранителю, ДокументСсылка.РеализацияТоваровУслуг - документ отгрузки;
//     * Отменено                      - Булево - признак отмены;
//     * ПричинаОтмены                 - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены;
//     * КодПричиныОтмены              - Строка - идентификатор причины отмены;
//     * НаименованиеПричиныОтмены     - Строка - наименование причины отмены;
//     * ПроверкаПройдена              - Булево - результат прохождения проверки. Истина, если коды экземпляра соответствуют требованиям;
//     * КодОшибки                     - Строка - код ошибки;
//     * ОписаниеОшибки                - Строка - описание ошибки;
//     * ИдентификаторУпаковки         - Строка - идентификатор упаковки, в которой будет размещен экземпляр.
//
Функция НоваяТаблицаЭкземпляровТоваровПоОтправлению()
	
	ОписаниеТипаБулево    = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока    = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока3   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ОписаниеТипаСтрока30  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(30));
	ОписаниеТипаСтрока36  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло15   = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	ТипыДокументовОтгрузки = Новый Массив;
	ТипыДокументовОтгрузки.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
	ТипыДокументовОтгрузки.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторЭкземпляра",       ОписаниеТипаЧисло15);
	Результат.Колонки.Добавить("ТребуетсяСтранаПроисхождения",  ОписаниеТипаБулево);
	Результат.Колонки.Добавить("СтранаПроисхожденияСсылка",     Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	Результат.Колонки.Добавить("СтранаПроисхожденияКод",        ОписаниеТипаСтрока3);
	Результат.Колонки.Добавить("ТребуетсяГТД",                  ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТребуетсяРНПТ",                 ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НомерГТДСсылка",                Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	Результат.Колонки.Добавить("НомерГТДТип",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНомеровГТД"));
	Результат.Колонки.Добавить("НомерГТДКод",                   ОписаниеТипаСтрока30);
	Результат.Колонки.Добавить("НомерГТДРегистрационныйНомер",  ОписаниеТипаСтрока30);
	Результат.Колонки.Добавить("ТребуетсяМаркировка",           ОписаниеТипаБулево);
	Результат.Колонки.Добавить("КодМаркировкиСсылка",           Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	Результат.Колонки.Добавить("КодМаркировки",                 ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ТребуетсяУИН",                  ОписаниеТипаБулево);
	Результат.Колонки.Добавить("УИН",                           ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("НомерОтправления",              ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НомерРодительскогоОтправления", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("КодСтроки",                     ОписаниеТипаЧисло15);
	Результат.Колонки.Добавить("ИдентификаторСтроки",           ОписаниеТипаСтрока36);
	Результат.Колонки.Добавить("ДокументОтгрузки",              Новый ОписаниеТипов(ТипыДокументовОтгрузки));
	Результат.Колонки.Добавить("Отменено",                      ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПричинаОтмены",                 Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"));
	Результат.Колонки.Добавить("КодПричиныОтмены",              ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеПричиныОтмены",     ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ПроверкаПройдена",              ОписаниеТипаБулево);
	Результат.Колонки.Добавить("КодОшибки",                     ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОписаниеОшибки",                ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИдентификаторУпаковки",         ОписаниеТипаСтрока36);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонструкторыПрочие

// Конструктор результата, возвращаемого по запросу из сервиса Ozon.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - результат выполнения запроса, где:
//     * Ключ     - Строка - ключ.
//     * Значение - Произвольный - значение.
//
Функция НовыйРезультатИзСервиса()
	
	Возврат Новый Соответствие();
	
КонецФункции

// Конструктор списка параметров, используемых при заполнении данных публикуемого товара.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ПолучитьАтрибуты              - Булево - признак получения сохраненных атрибутов для товаров маркетплейса.
//     * ДляПубликации                 - Булево - признак подготовки данных для отправки методом API маркетплейса.
//     * ПроверятьСоставАтрибутов      - Булево - признак необходимости проверки состава атрибутов.
//     * ПолучитьИзображения           - Булево - признак подготовки данных для изображений.
//     * ПолучитьСертификаты           - Булево - признак подготовки данных для сертификатов.
//     * ОбновитьДанные                - Булево - признак обновления атрибутов для товаров маркетплейса, если 
//                                         ПолучитьАтрибуты = Истина, признак обновления данных по изображениям и/или 
//                                         сертификатам, если ПолучитьИзображения = Истина и (или) 
//                                         ПолучитьСертификаты = Истина.
//     * ОбновитьКатегориюМаркетплейса - Булево - признак необходимости обновления сведений о категории маркетплейса.
//     * ПроверитьОшибкиЗаполнения     - Булево - признак проверки заполнения карточки товара.
//
Функция НовыеПараметрыПодготовкиДанныхПубликуемыхТоваров()

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ПолучитьАтрибуты",              Ложь);
	СписокПараметров.Вставить("ДляПубликации",                 Ложь);
	СписокПараметров.Вставить("ПроверятьСоставАтрибутов",      Ложь);
	СписокПараметров.Вставить("ПолучитьИзображения",           Ложь);
	СписокПараметров.Вставить("ПолучитьСертификаты",           Ложь);
	СписокПараметров.Вставить("ОбновитьДанные",                Ложь);
	СписокПараметров.Вставить("ОбновитьКатегориюМаркетплейса", Ложь);
	СписокПараметров.Вставить("ПроверитьОшибкиЗаполнения",     Ложь);
	// Заполняются в процессе выполнения операции с текущими параметрами.
	СписокПараметров.Вставить("СообщениеПользователю",         "");

	Возврат СписокПараметров;

КонецФункции

// Конструктор списка параметров, используемых при установке пометок строк коллекции.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ЭлементыПометки             - Массив из Произвольный - коллекция значений, для которых требуется установка 
//                                       пометки.
//     * ИмяПоляПометки              - Строка - имя поля коллекции, в котором будет изменена пометка.
//     * ИмяПоляКоличестваПомеченных - Строка - имя поля коллекции, в котором будет изменен счетчик отмеченных позиций.
//
Функция НовыеПараметрыУстановкиПометокВКоллекции() Экспорт

	ПараметрыУстановкиПометок = Новый Структура;
	ПараметрыУстановкиПометок.Вставить("ЭлементыПометки",             Новый Массив);
	ПараметрыУстановкиПометок.Вставить("ИмяПоляПометки",              "Пометка");
	ПараметрыУстановкиПометок.Вставить("ИмяПоляКоличестваПомеченных", "КоличествоПомеченных");

	Возврат ПараметрыУстановкиПометок;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
