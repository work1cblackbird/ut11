////////////////////////////////////////////////////////////////////////////////
// Подсистема "Коммерческие предложения документы".
// ОбщийМодуль.КоммерческиеПредложенияДокументы
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
#Область ЗапросКоммерческихПредложенийПоставщиков

// Описание параметров источников.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * КоммерческоеПредложениеСсылка - ОпределяемыйТип.КоммерческоеПредложениеПоставщика - ссылка на документ.
//     * ДокументОснование             - ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиков - ссылка на документ основание.
//     * ПоставщикПредставление        - Строка - представление контрагента.
//     * ПоставщикСсылка               - ОпределяемыйТип.КонтрагентБЭД - ссылка на справочник контрагенты.
//     * УсловияОплатыТекст            - Строка - описание условий оплаты.
//     * УсловияПоставкиТекст          - Строка - описание условий поставки.
//     * ПрочаяДополнительнаяИнформацияТекст - Строка - описание прочей информации о предложении.
//     * СуммаМинимум                  - Число - минимальная сумма по всем позициям предложения.
//     * СуммаМаксимум                 - Число - максимальная сумма по всем позициям предложения.
//     * СрокПоставки                  - Дата, Число - срок поставки в днях с момента оплаты заказа, либо конкретная дата поставки.
//     * Охват                         - Число - охват позиций запроса.
//     * ИмяИсточника                  - Число - имя источника получения коммерческого предложения.
//     * Налогообложение               - Булево - облагается ли продажа НДС.
//     * ЦенаВключаетНДС               - Булево - включает ли цена НДС.
//     * КоммерческоеПредложениеНомер  - Число - номер предложения.
//     * КоммерческоеПредложениеДата   - Дата - дата предложения.
//     * МожетВыкупатьсяЧастично       - Булево - можно ли выкупать только часть предложений.
//     * Валюта                        - СправочникСсылка.Валюты - валюта предложения.
//     * Товары                        - ТаблицаЗначений - товары предложения:
//        ** Номенклатура               - СправочникСсылка.Номенклатура - ссылка на номенклатуру.
//        ** Количество                 - Число - количество позиций предложения.
//        ** Сумма                      - Число - стоимость позиции.
//        ** СтавкаНДС                  - ПеречислениеСсылка.СтавкиНДС - ставка НДС.
//        ** ИдентификаторСтрокиЗапроса - Строка - Идентификатор строки запроса.
//
Функция ОписаниеДанныхКоммерческихПредложений() Экспорт
	
	ПараметрыКоманды = Новый ТаблицаЗначений;
	ПараметрыКоманды.Колонки.Добавить("КоммерческоеПредложениеСсылка");
	ПараметрыКоманды.Колонки.Добавить("ДокументОснование");
	ПараметрыКоманды.Колонки.Добавить("ПоставщикПредставление");
	ПараметрыКоманды.Колонки.Добавить("ПоставщикСсылка");
	ПараметрыКоманды.Колонки.Добавить("УсловияОплатыТекст");
	ПараметрыКоманды.Колонки.Добавить("УсловияПоставкиТекст");
	ПараметрыКоманды.Колонки.Добавить("ПрочаяДополнительнаяИнформацияТекст");
	ПараметрыКоманды.Колонки.Добавить("СуммаМинимум");
	ПараметрыКоманды.Колонки.Добавить("СуммаМаксимум");
	ПараметрыКоманды.Колонки.Добавить("СрокПоставки");
	ПараметрыКоманды.Колонки.Добавить("Охват");
	ПараметрыКоманды.Колонки.Добавить("ИмяИсточника");
	ПараметрыКоманды.Колонки.Добавить("Налогообложение");
	ПараметрыКоманды.Колонки.Добавить("ЦенаВключаетНДС");
	ПараметрыКоманды.Колонки.Добавить("КоммерческоеПредложениеНомер");
	ПараметрыКоманды.Колонки.Добавить("КоммерческоеПредложениеДата");
	ПараметрыКоманды.Колонки.Добавить("МожетВыкупатьсяЧастично");
	ПараметрыКоманды.Колонки.Добавить("Валюта");
	ПараметрыКоманды.Колонки.Добавить("Товары");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Описание параметров поступивших предложений по текущему запросу.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * КоммерческоеПредложениеСсылка - ОпределяемыйТип.КоммерческоеПредложениеПоставщика - ссылка на документ.
//    * КоммерческоеПредложениеНомер  - Число - номер предложения.
//    * КоммерческоеПредложениеДата   - Дата - дата предложения.
//    * ПоставщикПредставление        - Строка - представление контрагента.
//    * ПоставщикСсылка               - ОпределяемыйТип.КонтрагентБЭД - ссылка на справочник контрагенты.
//    * СуммаМинимум                  - Число - минимальная сумма по всем позициям предложения.
//    * СуммаМаксимум                 - Число - максимальная сумма по всем позициям предложения.
//    * СрокПоставки                  - Дата, Число - срок поставки в днях с момента оплаты заказа, либо конкретная дата поставки.
//    * Охват                         - Число - охват позиций запроса.
//    * ИмяИсточника                  - Число - имя источника получения коммерческого предложения.
//    * МожетВыкупатьсяЧастично       - Булево - можно ли выкупать только часть предложений.
//    * Валюта                        - СправочникСсылка.Валюты - валюта предложения.
//
Функция ОписаниеПоступившихКоммерческихПредложений() Экспорт
	
	ПараметрыКоманды = Новый ТаблицаЗначений;
	ПараметрыКоманды.Колонки.Добавить("КоммерческоеПредложениеСсылка");
	ПараметрыКоманды.Колонки.Добавить("КоммерческоеПредложениеНомер");
	ПараметрыКоманды.Колонки.Добавить("КоммерческоеПредложениеДата");
	ПараметрыКоманды.Колонки.Добавить("ИмяИсточника");
	ПараметрыКоманды.Колонки.Добавить("ПоставщикПредставление");
	ПараметрыКоманды.Колонки.Добавить("ПоставщикСсылка");
	ПараметрыКоманды.Колонки.Добавить("СрокПоставки");
	ПараметрыКоманды.Колонки.Добавить("СуммаМинимум");
	ПараметрыКоманды.Колонки.Добавить("СуммаМаксимум");
	ПараметрыКоманды.Колонки.Добавить("Охват");
	ПараметрыКоманды.Колонки.Добавить("ОхватПроценты");
	ПараметрыКоманды.Колонки.Добавить("Валюта");
	ПараметрыКоманды.Колонки.Добавить("МожетВыкупатьсяЧастично");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Описание параметров формирования переопределяемой части открытия форм списка документов.
//
// Возвращаемое значение:
//  Структура - шаблон для отображения пользователю текста ввода на основании - содержит поля:
//    * Нет - Строка - заголовок кнопки ввода на основании если подчиненные документы отсутствуют.
//    * Один - Строка - заголовок кнопки ввода на основании если есть один подчиненный документ.
//    * Много - Строка - заголовок кнопки ввода на основании если есть больше одного подчиненного документа.
//
Функция ОписаниеШаблоныДекорацииВводаНаОсновании() Экспорт
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("Нет"   , НСтр("ru = 'Создать коммерческое предложение клиенту'"));
	ПараметрыКоманды.Вставить("Один"  , НСтр("ru = 'Коммерческое предложение клиенту %1 от %2 (%3)'"));
	ПараметрыКоманды.Вставить("Много" , НСтр("ru = 'Коммерческие предложения клиенту (%1)'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Описание параметров формирования переопределяемой части открытия форм списка документов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о созданных на основании документа - содержит колонки:
//    * Ссылка   - ДокументСсылка - Ссылка на созданный документ.
//    * Номер    - Число - Номер документа.
//    * Дата     - Дата - Дата документа.
//    * Менеджер - Строка - Имя пользователя создавшего документ.
//
Функция ОписаниеКоммерческиеПредложенияКлиенту() Экспорт
	
	ПараметрыКоманды = Новый ТаблицаЗначений;
	ПараметрыКоманды.Колонки.Добавить("Ссылка");
	ПараметрыКоманды.Колонки.Добавить("Номер");
	ПараметрыКоманды.Колонки.Добавить("Дата");
	ПараметрыКоманды.Колонки.Добавить("Менеджер");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Определяет список анализируемых источников предложений.
// По умолчанию анализируются только торговые предложения из 1С:Торговая площадка и предложения не из этого запроса.
//
// Параметры:
//  Источники - ТаблицаЗначений - таблица с колонками.
//    * ИмяИсточника           - Строка   - имя источника предложений.
//    * ПредставлениеИсточника - Строка   - представление источника.
//    * КартинкаИсточника      - Картинка - картинка источника для вывода на форму. 
//    * КраткоеПредставление   - Строка   - текстовое описание источника.
//
Процедура АнализируемыеИсточникиПредложений(Источники) Экспорт
	
	Источники = ОписаниеАнализируемыхИсточников();
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		НоваяСтрока = Источники.Добавить();
		НоваяСтрока.ИмяИсточника = ИмяИсточникаПодчиненныеКоммерческиеПредложения();
		НоваяСтрока.ПредставлениеИсточника = НСтр("ru = 'Действующие коммерческие предложения, по этому запросу'");
		НоваяСтрока.КраткоеПредставление = НСтр("ru = 'предложения по текущему запросу'");
		НоваяСтрока.Заблокирован = Истина;
		НоваяСтрока.Использовать = Истина;
		НоваяСтрока.ПоддерживаетСохранение = Истина;
		НоваяСтрока.КартинкаИсточника = БиблиотекаКартинок.КоммерческоеПредложение;
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		НоваяСтрока = Источники.Добавить();
		НоваяСтрока.ИмяИсточника           = "БизнесСеть";
		НоваяСтрока.ПредставлениеИсточника = НСтр("ru = 'Торговые предложения из 1С:Бизнес-сеть'");
		НоваяСтрока.КраткоеПредставление   = НСтр("ru = '1С:Бизнес-сеть'");
		
		УстановитьПривилегированныйРежим(Истина);
		НоваяСтрока.Использовать = Константы.ИспользоватьОбменБизнесСеть.Получить();
		УстановитьПривилегированныйРежим(Ложь);
		НоваяСтрока.КартинкаИсточника = БиблиотекаКартинок.БизнесСеть;
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками") Тогда
		НоваяСтрока = Источники.Добавить();
		НоваяСтрока.ИмяИсточника           = "Бидзаар";
		НоваяСтрока.ПредставлениеИсточника = НСтр("ru = 'Коммерческие предложения из Бидзаар'");
		НоваяСтрока.КраткоеПредставление   = НСтр("ru = 'Бидзаар'");
		НоваяСтрока.Использовать = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей");
		НоваяСтрока.КартинкаИсточника = БиблиотекаКартинок.ЛоготипБидзаар;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
	
	КоммерческиеПредложенияДокументыПереопределяемый.АнализируемыеИсточникиПредложений(Источники);
	
КонецПроцедуры

#КонецОбласти

// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков

// ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками
#Область ИнтеграцияСЭлектроннымиТорговымиПлощадками
// 
// Проверяет существует ли подсистема "ИнтеграцияСЭлектроннымиТорговымиПлощадками" и используется ли интеграция с ЭТП
// Бидзаар для покупателей.
// 
// Возвращаемое значение:
//  Булево - Используется интеграция c ЭТП Бидзаар для покупателей
Функция ИспользуетсяИнтеграцияСЭТПБидзаарДляПокупателей() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками")
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей");
	
КонецФункции

#КонецОбласти
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЭлектроннымиТорговымиПлощадками

//
// Включает функциональные опции для всех встроенных документов подсистемы КоммерческиеПредложенияДокументы.
//
// Параметры:
//   Параметры - Структура - статус обработки обновления - содержит поля:
//    * ПрогрессВыполнения - Структура - прогресс обработки обновления - содержит поля:
//       ** ОбработаноОбъектов - Число - количество обработанных объектов.
//       ** ВсегоОбъектов - Число - количество объектов к обработке.
//    * ОбработкаЗавершена - Булево - Признак того, что обработка обновления завершена
//
Процедура УстановитьИспользованиеКоммерческихПредложений(Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		ПрогрессВыполнения = Новый Структура("ОбработаноОбъектов, ВсегоОбъектов");
		Параметры = Новый Структура();
		Параметры.Вставить("ПрогрессВыполнения", ПрогрессВыполнения);
		Параметры.Вставить("ОбработкаЗавершена");
	КонецЕсли;	
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0;
	ПроблемныхОбъектов   = 0;
	ОбработанныхОбъектов = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
	
	ПодсистемаСуществует = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков");
	
	Если ПодсистемаСуществует Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + 1;
		
		МетаданныеОбъекта = Метаданные.Константы["ИспользоватьЗапросыКоммерческихПредложенийПоставщиков"];
		ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Менеджер = Константы["ИспользоватьЗапросыКоммерческихПредложенийПоставщиков"].СоздатьМенеджерЗначения();
			Менеджер.Прочитать();
			
			Если Не Менеджер.Значение Тогда
				Менеджер.Значение = Истина;
				Записать = Истина;
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать запросы коммерческих предложений поставщиков"" по причине:'") 
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	ПодсистемаСуществует = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента");
	
	Если ПодсистемаСуществует Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + 1;
		
		МетаданныеОбъекта = Метаданные.Константы.ИспользоватьЗапросыКоммерческихПредложенийОтКлиента;
		ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Менеджер = Константы["ИспользоватьЗапросыКоммерческихПредложенийОтКлиента"].СоздатьМенеджерЗначения();
			Менеджер.Прочитать();
			
			Если Не Менеджер.Значение Тогда
				Менеджер.Значение = Истина;
				Записать = Истина;
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать запросы коммерческих предложений от клиентов"" по причине:'") 
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	// ЭлектронноеВзаимодействие.КоммерческоеПредложениеКлиенту
	
	ПодсистемаСуществует = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту");
	
	Если ПодсистемаСуществует Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + 1;
		
		МетаданныеОбъекта = Метаданные.Константы.ИспользоватьКоммерческиеПредложенияКлиентам;
		ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Менеджер = Константы["ИспользоватьКоммерческиеПредложенияКлиентам"].СоздатьМенеджерЗначения();
			Менеджер.Прочитать();
			
			Если Не Менеджер.Значение Тогда
				Менеджер.Значение = Истина;
				Записать = Истина;
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать коммерческие предложения клиентам"" по причине:'") 
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.КоммерческоеПредложениеКлиенту
	
	// ЭлектронноеВзаимодействие.КоммерческоеПредложениеПоставщика
	
	ПодсистемаСуществует = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика");
	
	Если ПодсистемаСуществует Тогда
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + 1;
		
		МетаданныеОбъекта = Метаданные.Константы.ИспользоватьКоммерческиеПредложенияПоставщиков;
		ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Менеджер = Константы["ИспользоватьКоммерческиеПредложенияПоставщиков"].СоздатьМенеджерЗначения();
			Менеджер.Прочитать();
			
			Если Не Менеджер.Значение Тогда
				Менеджер.Значение = Истина;
				Записать = Истина;
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать коммерческие предложения клиентам"" по причине:'") 
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Конец ЭлектронноеВзаимодействие.КоммерческоеПредложениеПоставщика
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать все константы подсистемы коммерческих предложений.'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработаны все константы подсистемы коммерческие предложения.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
	КонецЕсли;

	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов);
	
КонецПроцедуры

// Предназначена для формирования настроек учета в прикладной конфигурации
//
// Возвращаемое значение:
//  Структура - содержит поля:
//  * ИспользуетсяЕдинственнаяОрганизация                  - Булево - признак того, что в конфигурации используется только одна организация.
//  * ЕдинственнаяОрганизация                              - ОпределяемыйТип.Организация - значение единственной организации в ИБ.
//  * ИспользуетсяЕдинственнаяВалюта                       - Булево - признак того, что в конфигурации используется только одна валюта.
//  * ЕдинственнаяВалюта                                   - СправочникСсылка.Валюты - значение единственной валюты в ИБ.
//  * ИспользуютсяПартнеры                                 - Булево - признак того, что используются партнеры.
//  * НезависимоеВедениеПартнеровИКонтрагентов             - Булево - признак того, что независимо ведутся партнеры и контрагенты.
//  * ИспользуютсяХарактеристикиНоменклатуры               - Булево - признак того, что используются характеристики номенклатуры.
//  * ВидКонтактнойИнформацииEmailМенеджера                - СправочникСсылка.ВидыКонтактнойИнформации - для определения электронной почты менеджера как контактного лица.
//  * ВидКонтактнойИнформацииТелефонМенеджера              - СправочникСсылка.ВидыКонтактнойИнформации - для определения телефона менеджера как контактного лица.
//  * ИспользуютсяВидыЦен                                  - Булево - признак того, что используются виды цен.
//  * ИспользуютсяРучныеСкидкиВПродажах                    - Булево - признак того, что используются ручные скидки в продажах.
//  * ИспользуютсяАвтоматическиеСкидкиВПродажах            - Булево - признак того, что используются автоматические скидки в продажах.
//  * ИспользуютсяНазначаемыеАвтоматическиеСкидкиВПродажах - Булево - признак того, что используются назначаемые автоматические скидки в продажах.
//  * РеализованаФормаПросмотраСкидок                      - Булево - признак того, что возможен вызов формы просмотра скидок.
//  * РеализованоЗаполнениеЦенПоУсловиямПродаж             - Булево - признак того, что реализовано заполнение цен по условиям продаж.
//  * РеализованоЗаполнениеЦенПоВидамЦен                   - Булево - признак того, что реализовано заполнение цен по видам цен.
//  * РеализованоЗаполнениеУсловийОплаты                   - Булево - признак того, что реализовано заполнение условий оплаты.
//  * РеализованоЗаполнениеУсловийДоставки                 - Булево - признак того, что реализовано заполнение условий доставки.
//  * РеализованПодборНоменклатуры                         - Булево - признак того, что реализован подбор номенклатуры.
//  * РеализованПоискПоШтрихкоду                           - Булево - признак того, что реализован поиск товаров по штрихкоду.
//  * РеализованоРазбиениеСтрок                            - Булево - признак того, что реализовано разбиение строк в ТЧ Товары.
//  * РеализованаЗагрузкаДанныхТСД                         - Булево - признак того, что реализована загрузка данных при помощи ТСД в ТЧ Товары.
//  * РеализованоЗаполнениеДокументовИзВнешнегоФайла       - Булево - признак того, что реализовано заполнение ТЧ Товары из внешнего файла.
//  * ИспользуютсяСтатусыКоммерческихПредложенийКлиентам   - Булево - признак того, что реализовано используются статусы коммерческих предложений клиентам.
//  * ИспользуютсяСостоянияКоммерческихПредложенийКлиентам - Булево - признак того, что реализовано используются состояния коммерческих предложений клиентам.
//  * ИмяРеквизитаВладельцаНоменклатурыКонтрагента         - Строка - имя реквизита документа "Коммерческое предложение клиента", который содержит владельца номенклатуры контрагента.
//  * СтатусыКоммерческихПредложенийКлиентамЧерновик       - Массив - определяет те статусы, в которых коммерческое предложение считается черновиком.
//  * СтатусыКоммерческихПредложенийКлиентамДействует      - Массив - определяет те статусы, в которых коммерческое предложение считается действующим.
//  * ИспользоватьЗаказыПоставщикам                        - Булево - признак того, что используются заказы поставщикам.
//  * ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей      - Булево - признак того, что используется интеграция с ЭТП БИдзаар для покупателей.
//
Функция НастройкиУчета() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ИспользуетсяЕдинственнаяОрганизация",       Ложь);
	Настройки.Вставить("ЕдинственнаяОрганизация",                   Неопределено);
	
	Настройки.Вставить("ИспользуетсяЕдинственнаяВалюта",            Ложь);
	Настройки.Вставить("ЕдинственнаяВалюта",                        Неопределено);
	
	Настройки.Вставить("ИспользуютсяПартнеры",                      Ложь);
	Настройки.Вставить("НезависимоеВедениеПартнеровИКонтрагентов",  Истина);
	Настройки.Вставить("ИспользуютсяХарактеристикиНоменклатуры",    Ложь);
	
	Настройки.Вставить("ВидКонтактнойИнформацииEmailМенеджера",     Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Настройки.Вставить("ВидКонтактнойИнформацииТелефонМенеджера",   Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);

#Область КоммерческиеПредложенияКлиентам
	
	Настройки.Вставить("ИспользуютсяВидыЦен",                                  Ложь);
	Настройки.Вставить("ИспользуютсяРучныеСкидкиВПродажах",                    Ложь);
	Настройки.Вставить("ИспользуютсяАвтоматическиеСкидкиВПродажах",            Ложь);
	Настройки.Вставить("ИспользуютсяНазначаемыеАвтоматическиеСкидкиВПродажах", Ложь);
	Настройки.Вставить("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи",Ложь);
	Настройки.Вставить("НеВыводитьСкидкиВДокументахПродажи",                   Ложь);
	Настройки.Вставить("РеализованаФормаПросмотраСкидок",                      Ложь);
	Настройки.Вставить("РеализованоЗаполнениеЦенПоУсловиямПродаж",             Ложь);
	Настройки.Вставить("РеализованоЗаполнениеЦенПоВидамЦен",                   Ложь);
	Настройки.Вставить("РеализованоЗаполнениеУсловийОплаты",                   Ложь);
	Настройки.Вставить("РеализованоЗаполнениеУсловийДоставки",                 Ложь);
	Настройки.Вставить("РеализованПодборНоменклатуры",                         Ложь);
	Настройки.Вставить("РеализованПоискПоШтрихкоду",                           Ложь);
	Настройки.Вставить("РеализованоРазбиениеСтрок",                            Ложь);
	Настройки.Вставить("РеализованаЗагрузкаДанныхТСД",                         Ложь);
	Настройки.Вставить("РеализованоЗаполнениеДокументовИзВнешнегоФайла",       Ложь);
	Настройки.Вставить("ИмяРеквизитаВладельцаНоменклатурыКонтрагента",         "");
	Настройки.Вставить("СтатусыКоммерческихПредложенийКлиентамЧерновик",       Новый Массив);
	Настройки.Вставить("СтатусыКоммерческихПредложенийКлиентамДействует",      Новый Массив);
	Настройки.Вставить("ИспользуютсяСтатусыКоммерческихПредложенийКлиентам",   Ложь);
	Настройки.Вставить("ИспользуютсяСостоянияКоммерческихПредложенийКлиентам", Ложь);

#КонецОбласти

#Область КоммерческоеПредложениеПоставщика

	Настройки.Вставить("РегистрироватьЦеныПоставщиков", Ложь);
	Настройки.Вставить("ИспользоватьЗаказыПоставщикам", Истина);
	Настройки.Вставить("ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей", Ложь);

#КонецОбласти

	КоммерческиеПредложенияДокументыПереопределяемый.ПриОпределенииНастроекУчета(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Формализует имя источника подчиненного коммерческого предложения в контексте конкретного документа
// Запрос коммерческого предложения.
//
// Возвращаемое значение:
//  Строка - имя источника предложений
//
Функция ИмяИсточникаПодчиненныеКоммерческиеПредложения() Экспорт
	
	Возврат "КоммерческиеПредложенияОтПоставщика";
	
КонецФункции

// Формализует имя источника коммерческого предложения не подчиненного документу Запрос коммерческого предложения,
// в контексте которого анализируются предложения.
//
// Возвращаемое значение:
//  Строка - имя источника предложений
//
Функция ИмяИсточникаДругиеКоммерческиеПредложения() Экспорт
	
	Возврат "ДругиеКоммерческиеПредложенияОтПоставщика";
	
КонецФункции

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
#Область РаботаСНоменклатурой

// Выполняет преобразование номенклатуры учетной системы в категорию 1СН.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на справочник номенклатуры.
//
// Возвращаемое значение:
//  Структура - содержит поля:
//   * КатегорияВСервисеИдентификатор - Строка - идентификатор категории в сервисе 1С:Номенклатура.
//   * КатегорияВСервисеПредставление - Строка - представление категории в сервисе 1С:Номенклатура.
//
Функция ПолучитьКатегорию1СНПоНоменклатуре(Знач Номенклатура) Экспорт
	
	ВидНоменклатуры = Неопределено;
	РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры(Номенклатура, ВидНоменклатуры);
	
	ТаблицаКатегорий = РаботаСНоменклатурой.ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидНоменклатуры));
		
	Отбор = Новый Структура("ВидНоменклатуры", ВидНоменклатуры);
	НайденныеСтроки = ТаблицаКатегорий.НайтиСтроки(Отбор);
	
	Результат = Новый Структура("КатегорияВСервисеИдентификатор, КатегорияВСервисеПредставление");
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат.КатегорияВСервисеИдентификатор = НайденныеСтроки[0].ИдентификаторКатегории;
		Результат.КатегорияВСервисеПредставление = НайденныеСтроки[0].ПредставлениеКатегории;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает идентификаторы карточек 1С:Номенклатура, соответствующих переданным ссылкам.
//
// Параметры:
//  СсылкиНоменклатуры - Массив из ОпределяемыйТип.НоменклатураБЭД - ссылки на номенклатуру информационной базы.
// 
// Возвращаемое значение:
//  Соответствие - соответствие номенклатуры информационной базы идентификатору сервиса.
//    Ключ - ссылка на номенклатуру, значение - идентификатор сервиса.
//
Функция ИдентификаторыНоменклатурыСервиса(Знач СсылкиНоменклатуры) Экспорт
	
	Результат = Новый Соответствие;
	
	ДанныеСопоставления = РаботаСНоменклатурой.ПолучитьСоответствиеНоменклатурыПоСсылкамНоменклатуры(СсылкиНоменклатуры);
	
	Для Каждого СтрокаДанных Из ДанныеСопоставления Цикл
		Результат.Вставить(СтрокаДанных.Номенклатура, СтрокаДанных.ИдентификаторНоменклатурыСервиса);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает идентификаторы номенклатуры и характеристик по ссылкам на них.
//
// Параметры:
//  КортежиСсылок - Соответствие - содержит:
//    * Ключ - Строка - суррогатный ключ, идентифицирующий пару номенклатура + характеристика.
//    * Значение - Структура - содержит:
//      ** Номенклатура - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру.
//      ** Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику.
// 
// Возвращаемое значение:
//  Соответствие - содержит:
//    * Ключ - Строка - суррогатный ключ из входящего параметра,
//      идентифицирующий пару номенклатура + характеристика.
//    * Значение - Структура - содержит:
//      ** ИдентификаторНоменклатуры - Строка - идентификатор номенклатуры.
//      ** ИдентификаторХарактеристики - Строка - идентификатор характеристики.
//
Функция ИдентификаторыНоменклатурыИХарактеристикиСервиса(Знач КортежиСсылок) Экспорт
	
	Результат = Новый Соответствие;
	
	Отбор = Новый Массив;
	Для Каждого Кортеж Из КортежиСсылок Цикл
		Отбор.Добавить(Кортеж.Значение);
	КонецЦикла;
	
	ДанныеСопоставления = РаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(Отбор);
	
	Для Каждого Кортеж Из КортежиСсылок Цикл
		КортежИдентификаторов = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики");
		
		СтрокиСопоставления = ДанныеСопоставления.НайтиСтроки(Кортеж.Значение);
		Если СтрокиСопоставления.Количество() Тогда
			ЗаполнитьЗначенияСвойств(КортежИдентификаторов, СтрокиСопоставления[0]);
		КонецЕсли;
		
		Результат.Вставить(Кортеж.Ключ, КортежИдентификаторов);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает идентификаторы номенклатуры, характеристики по кортежу номенклатура + характеристика.
//
// Параметры:
//  ТаблицаСсылок - ТаблицаЗначений - таблица c колонками:
//    * Номенклатура - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица c колонками:
//    * Номенклатура - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику.
//    * ИдентификаторНоменклатуры - Строка - идентификатор номенклатуры.
//    * ИдентификаторХарактеристики - Строка - идентификатор характеристики.
//
Функция ТаблицаИдентификаторовНоменклатурИХарактеристикСервиса(Знач ТаблицаСсылок) Экспорт
	
	ДанныеСопоставления = РаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(ТаблицаСсылок);
	ДанныеСопоставления.Индексы.Добавить("Номенклатура,Характеристика");

	Возврат ДанныеСопоставления;
	
КонецФункции

// Функция возвращает данные категории из сервиса по идентификаторам номенклатуры. Если по переданным идентификаторам
//   не удалось получить данные из сервиса или карточки не куплены - в возвращаемом значении запись будет отсутствовать.
//
// Параметры:
//  ИдентификаторыСервиса - Массив, Строка - идентификаторы запрашиваемой номенклатуры.
// 
// Возвращаемое значение:
//  Соответствие - содержит:
//    * Ключ - Строка - идентификатор номенклатуры
//    * Значение - Структура - содержит:
//      ** КатегорияВСервисеИдентификатор - Строка - идентификатор категории.
//      ** КатегорияВСервисеПредставление - Строка - наименование категории.
//
Функция ДанныеКатегорийСервиса(Знач ИдентификаторыСервиса) Экспорт
	
	Результат = Новый Соответствие;
	
	ДанныеСервиса = РаботаСНоменклатурой.ДанныеНоменклатурыСервиса(ИдентификаторыСервиса, Ложь, Истина);
	Если Не ДанныеСервиса = Неопределено Тогда
		Для Каждого СтрокаДанных Из ДанныеСервиса Цикл
			ДанныеКатегории = СтрокаДанных.Категория;
			
			Если ТипЗнч(ДанныеКатегории) = Тип("Структура") И ДанныеКатегории.Свойство("Идентификатор") Тогда
				Результат.Вставить(СтрокаДанных.Идентификатор, 
					Новый Структура("КатегорияВСервисеИдентификатор, КатегорияВСервисеПредставление",
					ДанныеКатегории.Идентификатор, ДанныеКатегории.Наименование));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Единица хранения номенклатуры.
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураБЭД
// 
// Возвращаемое значение:
//  ОпределяемыйТип.УпаковкаНоменклатурыБЭД - Единица хранения номенклатуры
Функция ЕдиницаХраненияНоменклатуры(Знач Номенклатура) Экспорт
	ТипЕдиницыХранения = Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип;
	
	Возврат ТипЕдиницыХранения.ПривестиЗначение(Неопределено);
КонецФункции

#КонецОбласти
// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#Область РаботаСHTML

// Получает объект ДокументHTML из текста HTML.
//
// Параметры:
//  ТекстHTML  - Строка - текст в формате HTML.
//  Кодировка  - Строка - если задан, то объявление HTML-документа будет содержать
//      атрибут encoding с указанным значением.
//
// Возвращаемое значение:
//   ДокументHTML - созданный документ HTML.
//
Функция ОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка = Неопределено) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = СтрНайти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = СтрНайти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = ЛЕВ(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + ПРАВ(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		
	Иначе
		
		Попытка
		
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		
		Исключение
			
			ЧтениеHTML.УстановитьСтроку(ТекстHTML);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Обрабатывает текст HTML для помещения в форматированный документ.
//
// Параметры:
//  ВладелецФайлов    - ДокументСсылка - документ, присоединенные файлы которого требуется обработать.
//  ТекстHTML         - Строка - обрабатываемый текст HTML.
//  СтруктураВложений - Структура - структура в которую помещаются картинки - вложения письма.
//
// Возвращаемое значение:
//   Строка   - обработанный текст HTML.
//
Функция ОбработанныйТекстHTMLДляФорматированногоДокумента(ВладелецФайлов, ТекстHTML, СтруктураВложений) Экспорт
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ДокументHTML = ОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		ИмяВладельцаФайлов = ВладелецФайлов.Метаданные().Имя;
		
		ТаблицаФайлов = Документы[ИмяВладельцаФайлов].ПрисоединенныеФайлыСНеПустымCID(ВладелецФайлов);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.CIDВложенияHTML) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СсылкаНаДвоичныеДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла;
						СтруктураВложений.Вставить(ПрисоединенныйФайл.Наименование, Новый Картинка(ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Возврат ТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Заменяет имена картинок в документе HTML на CID вложений.
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML в котором будет выполняться замена.
//  ТаблицаСоответствий - ТаблицаЗначений - таблица соответствий имен файлов и идентификаторов.
//
Процедура ЗаменитьИменаКартинокНаCIDВложенийHTML(ДокументHTML, ТаблицаСоответствий) Экспорт
	
	ТаблицаСоответствий.Индексы.Добавить("ИмяФайла");
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		НайденнаяСтрока = ТаблицаСоответствий.Найти(АтрибутИсточникКартинки.ТекстовоеСодержимое,"ИмяФайла");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+НайденнаяСтрока.CID);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает текст из документа HTML.
//
// Параметры:
//  ДокументHTML - ДокументHTML - документ HTML, который нужно преобразовать в строку.
//
// Возвращаемое значение:
//   Строка - обработанный текст HTML.
//
Функция ТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	Попытка
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
		Возврат ЗаписьHTML.Закрыть();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Записывает вложение электронного письма, расположенное во временном хранилище в файл.
//
// Параметры:
//  ВладелецФайлов                 - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - папка файлов или объект, к которому
//                                                                                  требуется прикрепить добавляемый файл.
//  АдресВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  ИмяФайла                  - Строка - имя файла.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ПрисоединенныйФайл - ссылка на созданный присоединенный файл.
//
Функция ЗаписатьВложениеИзВременногоХранилища(ВладелецФайлов, АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ИмяФайлаДляРазбора = ИмяФайла;
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаДляРазбора);
	ИмяБезРасширения   = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              ВладелецФайлов);
	ПараметрыФайла.Вставить("Автор",                       Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	Возврат РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВоВременномХранилище);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
//   Документ                  - ДокументСсылка - документ, на основании которого осуществляется ввод.
//   ЕстьОшибкиПометкаУдаления - Булево         - если Истина - документ, на основании которого осуществляется ввод, не проведен или помечен на удаление.
//   Статус                    - Произвольный   - Статус документа, на основании которого осуществляется ввод.
//   ЕстьОшибкиСтатус          - Булево         - если Истина - документ, на основании которого осуществляется ввод, имеет некорректный статус.
//   МассивДопустимыхСтатусов  - Массив         - список допустимых статусов.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           ЕстьОшибкиПометкаУдаления,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено) Экспорт
	
	Если ЕстьОшибкиПометкаУдаления Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 помечен на удаление. Ввод на основании помеченного на удаление документа запрещен.'"),
		                        Документ);
	
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		Если Не ЗначениеЗаполнено(МассивДопустимыхСтатусов) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 находится в статусе ""%2"". Ввод на основании запрещен.'"),
			                        Документ,
			                        Статус);
			
		ИначеЕсли ТипЗнч(МассивДопустимыхСтатусов) = Тип("Массив") Тогда
			
			Если МассивДопустимыхСтатусов.Количество() = 1 Тогда
				
				СтрокаДопустимыхСтатусов = МассивДопустимыхСтатусов[0];
				
				ТекстОшибки = СтрШаблон(НСтр("ru='Документ %1 находится в статусе ""%2"". Ввод на основании разрешен только в статусе ""%3"".'"),
				                        Документ,
				                        Статус,
				                        СтрокаДопустимыхСтатусов);
			
			Иначе
				
				СтрокаДопустимыхСтатусов = СтрСоединить(МассивДопустимыхСтатусов, """, """);
				
				ТекстОшибки =СтрШаблон(НСтр("ru='Документ %1 находится в статусе ""%2"". Ввод на основании разрешен только в статусах ""%3"".'"),
				                            Документ,
					                        Статус,
					                        СтрокаДопустимыхСтатусов);;
			КонецЕсли;
			
		КонецЕсли;
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохранить изменения в источниках при анализе запросов.
// Параметры:
//  ПараметрыОперации - Структура - Параметры операции.
//  АдресРезультата   - Строка    - Адрес ответа результата.
//
Процедура СохранитьПользовательскиеИзмененияВДокументахИсточниках(ПараметрыОперации, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Источники = ПараметрыОперации.Источники;
	
	КоммерческиеПредложенияДокументыПереопределяемый.СохранитьПользовательскиеИзмененияВДокументахИсточниках(Источники, Отказ);
	
	ПоместитьВоВременноеХранилище(Отказ, АдресРезультата);
	
КонецПроцедуры

// Устанавливает условное оформление для "ставки НДС", "суммы НДС", "суммы с НДС" по налогообложению.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, для которой устанавливается условное оформление.
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС, если оно отличается от "ТоварыСтавкаНДС".
//  ИмяПоляВводаСуммыНДС  - Строка - Наименование элемента формы, содержащего сумму НДС,  если оно отличается от "ТоварыСуммаНДС"
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьУсловноеОформлениеСуммНДС(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеВводаСтавкиНДС = Форма.Элементы[ИмяПоляВводаСтавкиНДС]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеВводаСтавкиНДС.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеВводаСуммыНДС = Форма.Элементы[ИмяПоляВводаСуммыНДС]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеВводаСуммыНДС.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеВводаСуммыСНДС = Форма.Элементы[ИмяПоляВводаСуммыСНДС]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеВводаСуммыСНДС.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Налогообложение");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление для поля "сумма с НДС" в зависимости от флага "ЦенаВключаетНДС".
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, для которой устанавливается условное оформление.
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС, если оно отличается от "ТоварыСуммаСНДС".
//
Процедура УстановитьУсловноеОформлениеЦенаВключаетНДС(Форма, ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы; // ЭлементыФормы
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеСуммыНДС = ЭлементыФормы[ИмяПоляВводаСуммыСНДС]; // ПолеФормы
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеСуммыНДС.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

// Формирует представление документа-основания на форме, в случае, если документом основанием является запрос.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ-основание.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеОснованияПоЗапросу(ДокументОснование) Экспорт

	ДанныеЗапроса = Неопределено;
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		ЗапросКоммерческихПредложенийПоставщиковМодуль = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		ДанныеЗапроса = ЗапросКоммерческихПредложенийПоставщиковМодуль.ДанныеДокументаДляФормированияПредставления(ДокументОснование);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		ЗапросКоммерческихПредложенийОтКлиентаМодуль = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		ДанныеЗапроса = ЗапросКоммерческихПредложенийОтКлиентаМодуль.ДанныеДокументаДляФормированияПредставления(ДокументОснование);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстДокументОснование = Строка(ДокументОснование);
	
	МассивСтрок = Новый Массив;
	
	ТекстГиперссылки = "ОткрытьДокументОснованиеЗапрос";
	
	СтрокаДокументОснования = Новый ФорматированнаяСтрока(
		        ТекстДокументОснование,
		        Новый Шрифт(,,,,Истина),
		        ЦветаСтиля.ЦветГиперссылкиБЭД,
		        ,
		        ТекстГиперссылки);
	
	МассивСтрок.Добавить(СтрокаДокументОснования);
	
	ТребуетсяТочка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеЗапроса.ДатаОкончанияПубликации) Тогда
		
		ТребуетсяТочка = Истина;
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(НСтр("ru = 'принимается до'"));
		МассивСтрок.Добавить(" ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		        Формат(ДанныеЗапроса.ДатаОкончанияПубликации, "ДЛФ=D"),
		        Новый Шрифт(,,Истина)));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗапроса.ДатаОкончанияРассмотрения) Тогда
		
		ТребуетсяТочка = Истина;
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(НСтр("ru = 'рассматривается до'"));
		МассивСтрок.Добавить(" ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		        Формат(ДанныеЗапроса.ДатаОкончанияРассмотрения, "ДЛФ=D"),
		        Новый Шрифт(,,Истина)));
		
	КонецЕсли;
	
	Если ТребуетсяТочка Тогда
		МассивСтрок.Добавить(".");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

// Формирует представление документа-основания на форме.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на документ-основание.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеДокументаОснования(ДокументОснование) Экспорт
	
	ТекстГиперссылки = "ОткрытьДокументОснование";
	
	Возврат Новый ФорматированнаяСтрока(
	        Строка(ДокументОснование),
	        Новый Шрифт(,,,,Истина),
	        ЦветаСтиля.ЦветГиперссылкиБЭД,
	        ,
	        ТекстГиперссылки);
	
КонецФункции

// Определяет наличие комментария в строке табличной части
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, для которой выполняются действия.
//  ИмяТабличнойЧасти - Строка - табличная часть, для которой выполняются действия.
//  ИмяРеквизита1     - Строка - имя первого реквизита ТЧ, в котором может быть комментарий.
//  ИмяРеквизита2     - Строка - имя второго реквизита ТЧ, в котором может быть комментарий.
//  ИмяРеквизитаЕстьКомментарий - Строка - имя реквизита типа Булево, который содержит признак наличия комментария в строке.
//
Процедура ОпределитьНаличиеКомментарияВСтроках(Форма, ИмяТабличнойЧасти, ИмяРеквизита1, ИмяРеквизита2, ИмяРеквизитаЕстьКомментарий) Экспорт
	
	Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ[ИмяРеквизитаЕстьКомментарий] = Не ПустаяСтрока(СтрокаТЧ[ИмяРеквизита1])
		                                        Или Не ПустаяСтрока(СтрокаТЧ[ИмяРеквизита2]);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление контактной информации для одного из видов или типов.
//
// Параметры:
//  ТаблицаКонтактнойИнформации - ТаблицаЗначений    - содержит данные контактной информации.
//  ТипВидКонтактнойИнформации  - ПеречислениеСсылка.ТипыКонтактнойИнформации, СправочникСсылка.ВидыКонтактнойИнформации - тип или вид контактной информации.
//  Разделитель                 - Строка - как будут разделены различные значения КИ в представлении.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеКонтактнойИнформацииИзТаблицы(ТаблицаКонтактнойИнформации, ТипВидКонтактнойИнформации, Разделитель = "; ") Экспорт
	
	ОтборПоТипу = Ложь;
	ОтборПоВиду = Ложь;
	
	Если ЗначениеЗаполнено(ТипВидКонтактнойИнформации) Тогда
		Если ТипЗнч(ТипВидКонтактнойИнформации) = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
			ОтборПоТипу = Истина;
		ИначеЕсли ТипЗнч(ТипВидКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ОтборПоВиду = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПервыйПроход = Истина;

	Для каждого ЗаписьКонтактнойИнформации Из ТаблицаКонтактнойИнформации Цикл
		
		Если ОтборПоВиду И ЗаписьКонтактнойИнформации.Вид <> ТипВидКонтактнойИнформации Тогда
			Продолжить;
		ИначеЕсли ОтборПоТипу И ЗаписьКонтактнойИнформации.Тип <> ТипВидКонтактнойИнформации Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйПроход Тогда
			Представление = ЗаписьКонтактнойИнформации.Представление;
			ПервыйПроход = Ложь;
		Иначе
			Представление = Представление + Разделитель + ЗаписьКонтактнойИнформации.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

// Формирует представление организации, с которой происходит взаимодействие по коммерческому предложению.
//
// Параметры:
//  Партнер    - ОпределяемыйТип.ПартнерБЭД    - партнер документа.
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент документа.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеПартнераКонтрагента(Партнер, Контрагент) Экспорт
	
	ПредставлениеПартнераКонтрагента = "";
	СтандартнаяОбработка = Истина;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриПолученииПредставленияПартнераКонтрагента(ПредставлениеПартнераКонтрагента, Партнер, Контрагент, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			Возврат Строка(Партнер);
		Иначе
			Возврат Строка(Контрагент);
		КонецЕсли;
		
	Иначе
		Возврат ПредставлениеПартнераКонтрагента;
	КонецЕсли;
	
КонецФункции

// Формирует представление срока действия предложения.
//
// Параметры:
//  ЕстьСкидки   - Булево - наличие скидок в документе.
//  СрокДействия - Дата - срок действия предложения.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеСрокаДействияДляПечати(ЕстьСкидки, СрокДействия) Экспорт

	ПредставлениеСрокаДействия = "";
	
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		
		Если ЕстьСкидки Тогда
			ШаблонСообщения = НСтр("ru = 'Указанные цены и скидки действуют до %1'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Указанные цены действуют до %1'");
		КонецЕсли;
		
		ПредставлениеСрокаДействия = СтрШаблон(ШаблонСообщения, Формат(СрокДействия, "ДЛФ=DD"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСрокаДействия;
	
КонецФункции

// Формирует представление возможности частичного выкупа товаров по предложению.
//
// Параметры:
//  МожетВыкупатьсяЧастично - Булево  - условия оплаты по документу.
//
// Возвращаемое значение:
//   Строка.
//
Функция ПредставлениеЧастичногоВыкупаДляПечати(МожетВыкупатьсяЧастично) Экспорт
	
	Если МожетВыкупатьсяЧастично Тогда
		Возврат НСтр("ru = 'Покупка всех товаров предложения не обязательна.'");
	Иначе
		Возврат НСтр("ru = 'Цены действительны только при покупке всех товаров предложения.'");
	КонецЕсли;
	
КонецФункции

// Формирует представление условий поставки для печати.
//
// Параметры:
//  УсловияОплаты    - Строка  - условия оплаты по документу.
//  УсловияДоставки  - Строка  - условия доставки по документу.
//  ПрочиеУсловия    - Строка - прочие условия поставки по документу.
//
// Возвращаемое значение:
//   Строка - общее представление условий поставки
//
Функция ПредставлениеУсловийПоставкиДляПечати(УсловияОплаты, УсловияДоставки, ПрочиеУсловия) Экспорт

	ПредставлениеУсловийПоставки = "";
	
	Если Не ПустаяСтрока(УсловияОплаты) Тогда
		УсловияОплаты = СтрШаблон(НСтр("ru = 'Оплата: %1'"), УсловияОплаты);
		ПредставлениеУсловийПоставки = УсловияОплаты;
	КонецЕсли;
	
	Если Не ПустаяСтрока(УсловияДоставки) Тогда
		
		УсловияДоставки = СтрШаблон(НСтр("ru = 'Доставка: %1'"), УсловияДоставки);
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		                              + ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		                              + УсловияДоставки;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПрочиеУсловия) Тогда
		
		Если ПустаяСтрока(ПредставлениеУсловийПоставки) Тогда
			ПрочиеУсловия = ПрочиеУсловия;
		Иначе
			ПрочиеУсловия = СтрШаблон(НСтр("ru = 'Прочее: %1'"), ПрочиеУсловия);
		КонецЕсли;
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		                              + ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		                              + ПрочиеУсловия;
		
	КонецЕсли;
	
	Возврат ПредставлениеУсловийПоставки;

КонецФункции

// Формирует представление сумм для вывода в печатную форму документа
//
// Параметры:
//  ДанныеШапки      - ВыборкаИзРезультатаЗапроса, Структура - объект, для которого требуется определить наличие контактной информации.
//  СуммаВсего        - Число - сумма документа с НДС.
//  СуммаВсегоНДС     - Число - сумма НДС документа.
//  КоличествоТоваров - Число - количество товаров.
//
// Возвращаемое значение:
//  Структура - содержит поля:
//  * ИтоговаяСтрока - Строка-  итоговая строка по суммам и товарам документа.
//  * СуммаПрописью  - Строка - итоговая строка, содержащая суммы прописью.
//
Функция ПредставлениеСуммДокументаДляПечати(ДанныеШапки, СуммаВсего, СуммаВсегоНДС, КоличествоТоваров) Экспорт

	ПредставлениеВалюты = ?(ЗначениеЗаполнено(ДанныеШапки.Валюта), СокрЛП(ДанныеШапки.Валюта), "");
	
	СуммаКПрописи = СуммаВсего + ?(ДанныеШапки.ЦенаВключаетНДС, 0, СуммаВсегоНДС);
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеШапки.Валюта);
	
	ИтоговаяСтрока = "";
	Если ДанныеШапки.УчитыватьНДС И НЕ ДанныеШапки.ЦенаВключаетНДС Тогда
		
		ИтоговаяСтрока = СтрШаблон(НСтр("ru='Итого: %1 %2, сумма НДС: %3 %2'"),
		                           Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"),
		                           ПредставлениеВалюты,
		                           Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		
		ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС;
		
	КонецЕсли;
	
	СтрокаВсегоНаименований =  СтрШаблон(НСтр("ru='Всего наименований: %1, на сумму %2'"), 
	                                     КоличествоТоваров, 
	                                     ФорматСумм(СуммаКПрописи, ДанныеШапки.Валюта));
	ИтоговаяСтрока = ИтоговаяСтрока + СтрокаВсегоНаименований;
	
	Если ДанныеШапки.УчитыватьНДС И ДанныеШапки.ЦенаВключаетНДС Тогда
		
		СтрокаНДС = СтрШаблон(НСтр("ru='в том числе НДС %1 %2'"), Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"),ПредставлениеВалюты);
			ИтоговаяСтрока = ИтоговаяСтрока + ", " + СтрокаНДС;
		
	КонецЕсли;
	
	Если НЕ ДанныеШапки.УчитыватьНДС Тогда
		
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + НСтр("ru='Без налога (НДС)'");
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИтоговаяСтрока",ИтоговаяСтрока);
	СтруктураВозврата.Вставить("СуммаПрописью",СуммаПрописью);
	
	Возврат СтруктураВозврата;

КонецФункции

// ЭлектронноеВзаимодействие.КоммерческоеПредложениеПоставщика

// Определяет наличие контактной информации у объекта информационной базы
//
// Параметры:
//  Объект  - Произвольный - объект, для которого требуется определить наличие контактной информации.
//
// Возвращаемое значение:
//   Булево   - Истина, если контактная информация есть.
//
Функция УОбъектаЕстьКонтактнаяИнформация(Объект) Экспорт
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	Возврат МетаданныеОбъекта.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено;
	
КонецФункции

// Конец ЭлектронноеВзаимодействие.КоммерческоеПредложениеПоставщика

// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков

// Получение выбранных источников документа
//
// Параметры:
//  АнализируемыеИсточникиПредложений - ТаблицаЗначений - таблица источников, см. ОписаниеАнализируемыхИсточников.
//  ВсеИсточники - Булево - Выбрать все или только выбранные пользователем источники.
//
// Возвращаемое значение:
//   Массив из Строка - список источников.
//
Функция ПолучитьВыбранныеИсточникиДокумента(Знач АнализируемыеИсточникиПредложений, Знач ВсеИсточники = Ложь) Экспорт
	
	Если ВсеИсточники Тогда 
		Отбор = Новый Структура();
	Иначе 
		Отбор = Новый Структура("Использовать", Истина);
	КонецЕсли;
	
	Возврат АнализируемыеИсточникиПредложений.Выгрузить(Отбор).ВыгрузитьКолонку("ИмяИсточника");
	
КонецФункции

// Заполнение группы с источниками предложений
//
// Параметры:
//  Форма               - ФормаКлиентскогоПриложения - форма, в которую добавляются новые элементы.
//  БлокироватьЭлементы - Булево           - Доступность созданных элементов.
//
Процедура ЗаполнитьГруппуАнализируемыеИсточники(Форма, БлокироватьЭлементы = Ложь) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого Источник Из Форма.АнализируемыеИсточникиПредложений Цикл
		
		Источник.ИмяРеквизита = "Источник_" + Источник.ИмяИсточника;
		
		НовыйРеквизит = Новый РеквизитФормы(Источник.ИмяРеквизита, Новый ОписаниеТипов("Булево"));
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого Источник Из Форма.АнализируемыеИсточникиПредложений Цикл
		
		Форма[Источник.ИмяРеквизита] = Источник.Использовать;
		
		ГруппаИсточника = Форма.Элементы.Добавить("Группа_" + Источник.ИмяИсточника, Тип("ГруппаФормы"),Форма.Элементы.ГруппаАнализируемыеИсточники);
		ГруппаИсточника.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаИсточника.ОтображатьЗаголовок = Ложь;
		ГруппаИсточника.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаИсточника.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		ЭлементНадпись = Форма.Элементы.Добавить(Источник.ИмяРеквизита + "Отступ", Тип("ДекорацияФормы"), ГруппаИсточника);
		ЭлементНадпись.Вид = ВидДекорацииФормы.Надпись;
		ЭлементНадпись.Заголовок = "";
		
		ЭлементИсточник = Форма.Элементы.Добавить(Источник.ИмяРеквизита, Тип("ПолеФормы"), ГруппаИсточника);
		ЭлементИсточник.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементИсточник.ПутьКДанным = Источник.ИмяРеквизита;
		ЭлементИсточник.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементИсточник.УстановитьДействие("ПриИзменении","Подключаемый_ОбновитьАнализируемыеИсточники");
		ЭлементИсточник.Доступность = НЕ Источник.Заблокирован Или НЕ БлокироватьЭлементы;
		
		ЭлементКартинка = Форма.Элементы.Добавить(Источник.ИмяРеквизита + "Картинка", Тип("ДекорацияФормы"), ГруппаИсточника);
		ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
		ЭлементКартинка.Картинка = Источник.КартинкаИсточника;
		ЭлементКартинка.Ширина = 2;
		ЭлементКартинка.Высота = 1;
		ЭлементКартинка.АвтоМаксимальнаяВысота = Ложь;
		ЭлементКартинка.АвтоМаксимальнаяШирина = Ложь;
		ЭлементКартинка.Масштабировать = Истина;
		
		ЭлементНадпись = Форма.Элементы.Добавить(Источник.ИмяРеквизита + "Надпись", Тип("ДекорацияФормы"), ГруппаИсточника);
		ЭлементНадпись.Вид = ВидДекорацииФормы.Надпись;
		ЭлементНадпись.Заголовок = Источник.ПредставлениеИсточника;
		
	КонецЦикла;

КонецПроцедуры

// Сохранение данных в табличной части на момент записи документа в ИБ
//
// Параметры:
//  КоллекцияДанных      - ТаблицаЗначений - таблица с данными для сохранения.
//  ПараметрыКэширования - Структура    - Список реквизитов и имя таблицы для сохранения.
//  Кэш                  - Структура    - Результат сохранения.
//
Процедура КэшироватьДанныеТаблицы(КоллекцияДанных, ПараметрыКэширования, Кэш) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("НомерСтроки");
	МассивСтрок.Добавить(ПараметрыКэширования.Реквизиты);
	
	Реквизиты = СтрСоединить(МассивСтрок,",");
	
	ТаблицаЗначений = КоллекцияДанных.Выгрузить(,Реквизиты);
	
	Кэш.Вставить(ПараметрыКэширования.ИмяТаблицы, ТаблицаЗначений);
	
КонецПроцедуры

// Восстановление данных в табличной части из кэша.
//
// Параметры:
//  ИмяТаблицы      - Строка - имя таблицы для восстановления значений.
//  КоллекцияДанных - ТабличнаяЧасть - табличная часть для восстановления:
//    * НомерСтроки - Число - номер строки табличной части.
//  Кэш             - Структура    - результат сохранения.
//
Процедура ВосстановитьДанныеТаблицы(ИмяТаблицы, КоллекцияДанных, Кэш) Экспорт
	
	ИспользованиеКэша = Неопределено;
	
	Если Кэш.Свойство(ИмяТаблицы, ИспользованиеКэша) Тогда
		
		Для Каждого СтрокаКоллекции Из КоллекцияДанных Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ИспользованиеКэша[СтрокаКоллекции.НомерСтроки - 1]);
			
		КонецЦикла;
		
		Кэш.Удалить(ИмяТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает построчную информацию из найденных предложениях по запросу коммерческих предложений.
//
// Параметры:
//  ДокументСсылка         - ДокументСсылка  - запрос коммерческих предложений.
//  АнализируемыеИсточники - ТаблицаЗначений - таблица с выбранными источниками предложений, см. ОписаниеАнализируемыхИсточников.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными по предложениям:
//   * КоммерческоеПредложениеСсылка - ДокументСсылка
//   * ДокументОснование             - ДокументСсылка
//   * ПоставщикПредставление        - Строка
//   * ПоставщикСсылка               - СправочникСсылка.Контрагенты
//   * УсловияОплатыТекст            - Строка
//   * УсловиеПоставкиТекст          - Строка
//   * СуммаМинимум                  - Число
//   * СуммаМаксимум                 - Число
//   * СрокПоставки                  - Число
//   * Охват                         - Число
//   * ИмяИсточника                  - Строка
//   * Налогообложение               - Булево
//   * ЦенаВключаетНДС               - Булево
//   * КоммерческоеПредложениеНомер  - Число
//   * КоммерческоеПредложениеДата   - Дата
//   * МожетВыкупатьсяЧастично       - Булево
//   * Валюта                        - СправочникСсылка.Валюты
//   * Товары - ТаблицаЗначений - товары:
//      ** НоменклатураПоставщика               - Строка, СправочникСсылка - номенклатура поставщика.
//      ** ИдентификаторСтрокиЗапроса           - Строка
//      ** ИдентификаторСтрокиИсточника         - Строка
//      ** ИдентификаторНоменклатурыПоставщика  - Строка
//      ** ЕдиницаИзмерения                     - Строка
//      ** СрокПоставки                         - Число, Дата - количество дней или дата поставки.
//      ** Количество                           - Число
//      ** Цена                                 - Число
//      ** ПроцентСкидки                        - Число
//      ** СуммаСНДС                            - Число
//      ** ДополнительнаяИнформацияОтПоставщика - Строка
//      ** Комментарий                          - Строка
//      ** ЕдиницаИзмерения                     - Строка
//      ** СнятСРассмотрения                    - Булево
//      ** СтавкаНДС                            - ОпределяемыйТип.СтавкаНДСКоммерческихПредложений
//
Функция ПредложенияИсточниковПоЗапросуКоммерческихПредложений(ДокументСсылка, АнализируемыеИсточники) Экспорт
	
	Предложения = ОписаниеДанныхКоммерческихПредложений();
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПредложенияИсточниковПоЗапросуКоммерческихПредложений(
		ДокументСсылка, АнализируемыеИсточники, Предложения);
		
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		ДанныеКоммерческихПредложенийПоЗапросу(ДокументСсылка, АнализируемыеИсточники, Предложения);
		
	КонецЕсли;
	
	Возврат Предложения;
КонецФункции

// Преобразует строки дерева документа в структуру.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - Данные, соответствующие структуре макета ЗапросКоммерческихПредложений
//    или КоммерческоеПредложение обработки ОбменСКонтрагентами.
//  ПолныйПуть - Строка - Полный путь до реквизита в дереве.
//  СообщатьОбОшибке - Булево - Если Истина, то в случае отсутствия данных по указанному пути пользователю
//    будет выведено соответствующее сообщение.
//
// Возвращаемое значение:
//  Структура - данные дерева документа, расположенные по указанному пути.
//
Функция СтруктураПоГруппеДерева(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	СтруктураДанныхГруппы = Новый Структура;
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		
		Для Каждого ПодчиненнаяСтрока Из НайденнаяСтрока.Строки Цикл
			
			ИмяЭлемента = ИмяЭлементаИзПолногоПути(ПодчиненнаяСтрока.ПолныйПуть);
			Если Не ПустаяСтрока(ИмяЭлемента) Тогда
				СтруктураДанныхГруппы.Вставить(ИмяЭлемента, ПодчиненнаяСтрока.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СообщатьОбОшибке Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена группа в дереве данных по полному пути <%1>.'"), ПолныйПуть);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат СтруктураДанныхГруппы;
	
КонецФункции

// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#Область СопоставлениеНоменклатуры

// Для дерева документа получает соответствие идентификаторам номенклатуры
// контрагента сущностей информационной базы.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, для которого нужно определить владельца номенклатуры.
//  ДанныеДокумента - СтрокаДереваЗначений - строка дерева документа, в которой хранятся данные о товарах.
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные сопоставления, см. НовыеДанныеСопоставления
//
Функция СопоставлениеНоменклатурыДляДереваДокумента(Знач Контрагент, Знач ДанныеДокумента) Экспорт
	
	Результат = НовыеДанныеСопоставления();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецНоменклатуры = ВладелецНоменклатурыКонтрагента(Контрагент);
	Если Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	Для Каждого ДанныеСтроки Из ДанныеДокумента.Строки Цикл
		НоменклатураПоставщикаИдентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		            ДанныеСтроки, "Товары.НомерСтроки.Товар.ИдентификаторДляСопоставления");
		
		Если Не ЗначениеЗаполнено(НоменклатураПоставщикаИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборНоменклатурыКонтрагентов.Добавить(СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			ВладелецНоменклатуры, НоменклатураПоставщикаИдентификатор));
	КонецЦикла;
		
	Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(
		Новый Структура("НоменклатураКонтрагента", НаборНоменклатурыКонтрагентов));
		
	Для Каждого ЭлементСопоставления Из Сопоставление Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСопоставления.НоменклатураИБ);
		
		НоменклатураКонтрагента = ЭлементСопоставления.НоменклатураКонтрагента; // Структура
		НоваяСтрока.НоменклатураПоставщикаИдентификатор = НоменклатураКонтрагента.Идентификатор;
		НоваяСтрока.НоменклатураПоставщикаПредставление = ПредставлениеНоменклатурыКонтрагента(
			ЭлементСопоставления.НоменклатураКонтрагента);
		НоваяСтрока.НоменклатураПоставщикаВладелец      = ЭлементСопоставления.НоменклатураКонтрагента.Владелец;
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат;
	
КонецФункции

// Для коллекции, содержащей данные о товарах, получает соответствие идентификаторам номенклатуры
//   контрагента сущностей информационной базы.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, для которого нужно определить владельца номенклатуры.
//  ДанныеДокумента - ТаблицаЗначений - таблица с данными о товарах.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сопоставление номенклатуры контрагента.
//    См КоммерческиеПредложенияДокумента.НовыеДанныеСопоставления
//
Функция СопоставлениеНоменклатурыДляТабличнойЧастиДокумента(Знач Контрагент, Знач ДанныеДокумента) Экспорт

	Результат = НовыеДанныеСопоставления();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецНоменклатуры = ВладелецНоменклатурыКонтрагента(Контрагент);
	Если Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	Для Каждого СтрокаТовара Из ДанныеДокумента Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовара.НоменклатураПоставщикаИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборНоменклатурыКонтрагентов.Добавить(СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			ВладелецНоменклатуры, СтрокаТовара.НоменклатураПоставщикаИдентификатор));
	КонецЦикла;
	
	Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(
		Новый Структура("НоменклатураКонтрагента", НаборНоменклатурыКонтрагентов));
		
	Для Каждого ЭлементСопоставления Из Сопоставление Цикл
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСопоставления.НоменклатураИБ);

		НоменклатураКонтрагента = ЭлементСопоставления.НоменклатураКонтрагента; // Структура
		НоваяСтрока.НоменклатураПоставщикаИдентификатор = НоменклатураКонтрагента.Идентификатор;
		НоваяСтрока.НоменклатураПоставщикаПредставление = ПредставлениеНоменклатурыКонтрагента(
			ЭлементСопоставления.НоменклатураКонтрагента);
		НоваяСтрока.НоменклатураПоставщикаВладелец      = ЭлементСопоставления.НоменклатураКонтрагента.Владелец;
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат;
	
КонецФункции

// Определяет владельца номенклатуры контрагента в контексте данного прикладного решения.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, для которого нужно определить владельца номенклатуры.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сопоставление номенклатуры контрагента.
//    См КоммерческиеПредложенияДокумента.НовыеДанныеСопоставления
//
Функция ВладелецНоменклатурыКонтрагента(Знач Контрагент) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	КонтрагентВладелец = Контрагент;
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(КонтрагентВладелец,
		КонтрагентВладелец);
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КонтрагентВладелец;
	
КонецФункции

#КонецОбласти

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#Область ПодготовкаРазборЭлектронныхДокументов

// Формирует соответствие для массива переданных ключей
//
// Параметры:
//  МассивСтрок     - Массив    - содержит ключи.
//  СтруктураПолей  - Структура - содержит значения.
//
// Возвращаемое значение:
//   Соответствие   - сформированное соответствие.
//
Функция КонструкторЗначенияПолей(Знач МассивСтрок,Знач СтруктураПолей) Экспорт
	
	Ответ = Новый Соответствие;
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Ответ.Вставить(СтрокаМассива, ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПолей));
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Формирует структуру типов, используемых в электронных документах данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - ОписаниеТипов - любой простой тип: строка, булево, число, дата.
//   * Булево          - ОписаниеТипов - тип булево.
//   * Число           - ОписаниеТипов - тип число.
//   * ЧислоКоличество - ОписаниеТипов - тип число: 17 разрядов, 3 знака дробной части.
//   * ЧислоСумма      - ОписаниеТипов - тип число: 15 разрядов, 2 знака дробной части.
//   * ЧислоПроцент    - ОписаниеТипов - тип число: 5 разрядов, 2 знака дробной части.
//   * Дата            - ОписаниеТипов - тип дата.
//   * Строка          - ОписаниеТипов - тип строка.
//   * Структура       - ОписаниеТипов - тип структура.
//   * Массив          - ОписаниеТипов - тип массив.
//   * ТаблицаЗначений - ОписаниеТипов - тип таблица значений.
//
Функция ТипыДанныхЭлектронныхДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Простой"        ,     Новый ОписаниеТипов("Строка, Булево, Число, Дата"));
	Результат.Вставить("Булево"         ,     Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число"          ,     Новый ОписаниеТипов("Число"));
	Результат.Вставить("ЧислоКоличество",     Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(17,3)));
	Результат.Вставить("ЧислоСумма"     ,     Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Результат.Вставить("ЧислоПроцент"   ,     Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,2)));
	Результат.Вставить("Дата"           ,     Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка"         ,     Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Структура"      ,     Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив"         ,     Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица"        ,     Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру, описывающая логистическую упаковку для электронного документа.
//
// Параметры:
//  ЕдиницаИзмерения - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - единица измерения для которой формируется описание.
//  ЗначениеЕдиницИзмерения - Соответствие - содержит значения полей требуемых для формирования описания.
//
// Возвращаемое значение:
//  Структура - содержит поля:
//  * Описание    - Строка - описание единицы измерения
//  * Числитель   - Число - числитель коэффициента пересчета.
//  * Знаменатель - Число - знаменатель коэффициента пересчета.
//
Функция ЛогистическаяУпаковкаДляЭД(ЕдиницаИзмерения, ЗначениеЕдиницИзмерения) Экспорт
	
	ЗначениеПолей = ЗначениеЕдиницИзмерения[ЕдиницаИзмерения];
	Ответ         = Новый Структура("Описание, Числитель, Знаменатель");
	
	ЗаполнитьЗначенияСвойств(Ответ, ЗначениеПолей);
	Ответ.Описание = ЗначениеПолей.ЛогистическаяУпаковкаНаименование;
	Возврат Ответ;
	
КонецФункции

// Формирует структуру, описывающая данные товара для электронного документа.
//
// Параметры:
//  ВыборкаТовары                 - ВыборкаИзРезультатаЗапроса - содержит данные о номенклатуре, характеристике и единице измерения.
//  ЗначениеПолейНоменклатуры     - Соответствие    - содержит значения требуемых полей номенклатуры.
//  ЗначениеПолейХарактеристик    - Соответствие    - содержит значения требуемых полей характеристики.
//  ЗначениеПолейЕдиницыИзмерения - Соответствие    - содержит значения требуемых полей единицы измерения.
//  ТаблицаСоШтрихКодами          - ТаблицаЗначений - данные штриховых кодов по номенклатуре документа.
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеТовараДляЭД(Знач ВыборкаТовары, Знач ЗначениеПолейНоменклатуры,
			Знач ЗначениеПолейХарактеристик, Знач ЗначениеПолейЕдиницыИзмерения, Знач ТаблицаСоШтрихКодами) Экспорт
	
	Ключ = Новый Структура;
	Ключ.Вставить("Номенклатура"    , ВыборкаТовары.Номенклатура);
	Ключ.Вставить("Характеристика"  , ВыборкаТовары.Характеристика);
	Ключ.Вставить("ЕдиницаИзмерения", ВыборкаТовары.ЕдиницаИзмерения);
	
	Ответ = Новый Структура();
	Ответ.Вставить("НоменклатураСсылка"          , Неопределено);
	Ответ.Вставить("ХарактеристикаСсылка"        , Неопределено);
	Ответ.Вставить("ЕдиницаИзмеренияСсылка"      , Неопределено);
	Ответ.Вставить("НоменклатураНаименование"    , "");
	Ответ.Вставить("ХарактеристикаНаименование"  , "");
	Ответ.Вставить("ЕдиницаИзмеренияКодОКЕИ"     , 0);
	Ответ.Вставить("ЕдиницаИзмеренияНаименование", "");
	Ответ.Вставить("Описание"                    , "");
	Ответ.Вставить("АртикулПоставщика"           , "");
	Ответ.Вставить("Производитель"               , Неопределено);
	Ответ.Вставить("Штрихкоды"                   , Новый Массив);
	Ответ.Вставить("РеквизитыТовара"             , Неопределено);
	Ответ.Вставить("Сервис1СНоменклатура"        , Неопределено);
	Ответ.Вставить("ТорговаяМарка"               , Неопределено);
	
	ЗаполнитьЗначенияСвойств(Ответ, ЗначениеПолейНоменклатуры[ВыборкаТовары.Номенклатура]);
	ЗаполнитьЗначенияСвойств(Ответ, ЗначениеПолейХарактеристик[ВыборкаТовары.Характеристика]);
	ЗаполнитьЗначенияСвойств(Ответ, ЗначениеПолейЕдиницыИзмерения[ВыборкаТовары.ЕдиницаИзмерения]);
	
	УбратьПробелыИзСтроковыхЗначенийКоллекции(Ответ);
	
	Ответ.ШтрихКоды = ТаблицаСоШтрихКодами.Скопировать(Ключ, "ШтрихКод").ВыгрузитьКолонку("ШтрихКод");
	
	Возврат Ответ;
	
КонецФункции

// Формирует структуру, описывающая данные организации или контрагента.
//
// Параметры:
//  Участник        - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентБЭД - одна из сторон коммерческого предложения.
//
// Возвращаемое значение:
//  Структура - содержит поля:
//   * Ссылка           - ОпределяемыйТип.Организация, ОпределяемыйТип.КонтрагентБЭД - ссылка на элемент справочника.
//   * Наименование     - Строка - наименование контрагента или организации.
//   * ЮридическийАдрес - Строка - юридический адрес контрагента или организации.
//   * Вид              - Структура - если это индивидуальный предприниматель то "ИНН, Имя, Фамилия, Отчество",
//                                     если ЮридическоеЛицо то "ИНН, КПП".
//
Функция ДанныеУчастникаКоммерческихПредложений(Знач Участник) Экспорт
	
	ДанныеУчастника = Новый Структура;
	Если ЗначениеЗаполнено(Участник) Тогда
		КоммерческиеПредложенияДокументыПереопределяемый.ДанныеУчастникаКоммерческихПредложений(Участник, ДанныеУчастника);
	КонецЕсли;
	
	Возврат ДанныеУчастника;
	
КонецФункции

// Возвращает структуру, содержащую необходимые данные о пользователе.
//
// Параметры:
//    Менеджер - СправочникСсылка.Пользователи - владелец контактной информации.
//    ПредставлениеМенеджера - Строка - ФИО пользователя.
//
// Возвращаемое значение:
//  Структура - данные менеджера:
//    * ФИО - Строка - ФИО менеджера.
//    * Email - Строка - адрес электронной почты.
//    * Телефон - Строка - номер телефона.
//
Функция ДанныеМенеджераКакКонтактногоЛицаПредложений(Менеджер, ПредставлениеМенеджера) Экспорт
	
	ДанныеКонтактногоЛица = Новый Структура;
	
	ДанныеКонтактногоЛица.Вставить("ФИО", ПредставлениеМенеджера);
	
	КонтактнаяИнформацияМенеджера = КонтактнаяИнформацияМенеджера(Менеджер);
	ДанныеКонтактногоЛица.Вставить("ЭлектроннаяПочта", КонтактнаяИнформацияМенеджера.Email);
	ДанныеКонтактногоЛица.Вставить("Телефон",          КонтактнаяИнформацияМенеджера.Телефон);
	
	Возврат ДанныеКонтактногоЛица;
	
КонецФункции

// Формирует таблицу с данными присоединенных файлов владельца.
//
// Параметры:
//  ВладелецФайлов          - ДокументСсылка, СправочникСсылка - владелец присоединенных файлов.
//  НаличиеCIDВложенияHTML  - Булево - признак того, что нужны файлы, содержащие CIDВложенияHTML.
//                 Если в справочнике присоединенных файлов нет такого поля, то нужно передавать Неопределено.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит информацию о присоединенных файлах владельца:
//     * Ссылка - СправочникСсылка.
//     * ИмяФайла - Строка.
//     * Размер - Число.
//     * ПометкаУдаления - Булево.
//     * РасширениеФайла - Строка.
//
Функция ТаблицаПрисоединенныхФайловДляЭД(ВладелецФайлов, НаличиеCIDВложенияHTML = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеВладельца = Метаданные.НайтиПоТипу(ТипЗнч(ВладелецФайлов));
	ИмяСтандартногоОсновногоСправочника = МетаданныеВладельца.Имя + "ПрисоединенныеФайлы";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка          КАК Ссылка,
	|	ПрисоединенныеФайлы.Наименование    КАК ИмяФайла,
	|	ПрисоединенныеФайлы.Размер          КАК Размер,
	|	ПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
	|	ПрисоединенныеФайлы.Расширение      КАК РасширениеФайла
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
	|	И &УсловиеCIDВложенияHTML";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСтандартногоОсновногоСправочника);
	
	Если НаличиеCIDВложенияHTML = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеCIDВложенияHTML", "ИСТИНА");
	ИначеЕсли НаличиеCIDВложенияHTML = Истина Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеCIDВложенияHTML", "ПрисоединенныеФайлы.CIDВложенияHTML <> """"");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеCIDВложенияHTML", "ПрисоединенныеФайлы.CIDВложенияHTML = """"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Помечает на удаление все присоединенный файлы владельца.
//
// Параметры:
//  ВладелецФайлов - ДокументСсылка, СправочникСсылка - владелец присоединенных файлов.
//
Процедура УдалитьПрисоединенныеФайлаОбъекта(ВладелецФайлов) Экспорт
	
	ТаблицаПрисоединенныхФайлов = ТаблицаПрисоединенныхФайловДляЭД(ВладелецФайлов);
	
	Для Каждого СтрокаСФайлом Из ТаблицаПрисоединенныхФайлов Цикл
		
		Если СтрокаСФайлом.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлОбъект = СтрокаСФайлом.Ссылка.ПолучитьОбъект();
		ФайлОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// Формирует структуру, описывающая получателя или отправителя коммерческого предложения по данным электронного документа.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - содержит данные электронного документа.
//  ВидУчастника             - Строка - "Организация" или "Контрагент".
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучательОтправительПоДаннымЭД(ДанныеВходящегоДокумента, ВидУчастника) Экспорт
	
	Ответ = Новый Структура("Наименование, ЮридическийАдресКод, ЮридическийАдресПредставление, ИНН, КПП, Имя, Фамилия, Отчество");
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ЮридическоеЛицо") = Истина Тогда
			
		Ответ.Вставить("ИНН", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ЮридическоеЛицо.ИНН"));
		Ответ.Вставить("КПП", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ЮридическоеЛицо.КПП"));
			
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ИндивидуальныйПредприниматель") = Истина Тогда
			
		Ответ.Вставить("ИНН"     , ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ИндивидуальныйПредприниматель.ИНН"));
		Ответ.Вставить("Имя"     , ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ИндивидуальныйПредприниматель.Имя"));
		Ответ.Вставить("Фамилия" , ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ИндивидуальныйПредприниматель.Фамилия"));
		Ответ.Вставить("Отчество", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Вид.ИндивидуальныйПредприниматель.Отчество"));
			
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Ответ.Вставить("Наименование" , ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".Наименование"));
	
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".ЮридическийАдрес") = Истина Тогда
		Ответ.Вставить("ЮридическийАдресКод" , ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".ЮридическийАдрес.Код"));
		Ответ.Вставить("ЮридическийАдресПредставление" , ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДанныеВходящегоДокумента, ВидУчастника + ".ЮридическийАдрес.Представление"));
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// Возвращает структуру, содержащую необходимую контактную информацию пользователя.
//
// Параметры:
//    Менеджер - СправочникСсылка.Пользователи - владелец контактной информации.
//
// Возвращаемое значение:
//  Структура - контактная информация менеджера:
//    * Email - Строка - адрес электронной почты.
//    * EmailСоответствуетТребованиям - Булево - признак того, что email-адрес на соответствует
//        требованиям стандартов RFC 5321, RFC 5322, а также RFC 5335, RFC 5336 и RFC 3696.
//    * Телефон - Строка - номер телефона.
//
Функция КонтактнаяИнформацияМенеджера(Менеджер) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Email",                         "");
	СтруктураВозврата.Вставить("EmailСоответствуетТребованиям", Ложь);
	СтруктураВозврата.Вставить("Телефон",                       "");
	
	НастройкиУчета = НастройкиУчета();
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Менеджер);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(НастройкиУчета.ВидКонтактнойИнформацииEmailМенеджера);
	МассивВидовКИ.Добавить(НастройкиУчета.ВидКонтактнойИнформацииТелефонМенеджера);
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов,, МассивВидовКИ, ТекущаяДатаСеанса());
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтактнойИнформации Цикл
		
		Если СтрокаТаблицы.Вид = НастройкиУчета.ВидКонтактнойИнформацииEmailМенеджера
			И ПустаяСтрока(СтруктураВозврата.Email) Тогда
			
			СтруктураВозврата.Email = СтрокаТаблицы.Представление;
			СтруктураВозврата.EmailСоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаТаблицы.Представление)
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Вид = НастройкиУчета.ВидКонтактнойИнформацииТелефонМенеджера
			И ПустаяСтрока(СтруктураВозврата.Телефон) Тогда
			
			СтруктураВозврата.Телефон = СтрокаТаблицы.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

// Функция получает коэффициент пересчета из текущей валюты в новую валюту.
//
// Параметры:
//  ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта документа
//  НоваяВалюта - СправочникСсылка.Валюты - Новая валюта документа
//  Дата - Дата - Дата документа.
//
// Возвращаемое значение:
//  Число - Коэффициент пересчета в новую валюту.
//
Функция КоэффициентПересчетаИзВалютыВВалюту(ТекущаяВалюта, НоваяВалюта, Дата) Экспорт
	
	Если ТекущаяВалюта <> НоваяВалюта Тогда
		КурсТекущейВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяВалюта, Дата);
		КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Дата);
		Если КурсНовойВалюты.Курс * КурсТекущейВалюты.Кратность <> 0 Тогда
			КоэффициентПересчета = (КурсТекущейВалюты.Курс * КурсНовойВалюты.Кратность) / (КурсНовойВалюты.Курс * КурсТекущейВалюты.Кратность);
		Иначе
			КоэффициентПересчета = 0;
		КонецЕсли;
	Иначе
		КоэффициентПересчета = 1;
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
#Область ОбменСКонтрагентами

// Функция получает строковое представление номенклатуры контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - Описание номенклатуры контрагента.
//    См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
// Возвращаемое значение:
//  Строка - Строковое представление номенклатуры контрагента.
//
Функция ПредставлениеНоменклатурыКонтрагента(НоменклатураКонтрагента)
	
	Представление = НоменклатураКонтрагента.Наименование;
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.Характеристика) Тогда
		Представление = Представление + ", " + НоменклатураКонтрагента.Характеристика;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмерения) Тогда
		Представление = Представление + ", " + НоменклатураКонтрагента.ЕдиницаИзмерения;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Конструктор, создающий объект для хранения соответствия идентификатора номенклатуры
//   контрагента кортежу (Номенклатура, Характеристика, Упаковка) информационной базы.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * НоменклатураПоставщикаВладелец - ОпределяемыйТип.КонтрагентБЭД - контрагент, с номенклатурой которого
//        произведено сопоставление.
//    * НоменклатураПоставщикаИдентификатор - Строка - идентификатор номенклатуры контрагента.
//    * НоменклатураПоставщикаПредставление - Строка - представление номенклатуры контрагента.
//    * Номенклатура                        - ОпределяемыйТип.НоменклатураБЭД - номенклатура информационной базы.
//    * Характеристика                      - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
//    * Упаковка                            - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка информационной базы.
//
Функция НовыеДанныеСопоставления()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НоменклатураПоставщикаВладелец");
	Результат.Колонки.Добавить("НоменклатураПоставщикаИдентификатор");
	Результат.Колонки.Добавить("НоменклатураПоставщикаПредставление");
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Упаковка");
	
	Результат.Индексы.Добавить("НоменклатураПоставщикаИдентификатор");
	Результат.Индексы.Добавить("НоменклатураПоставщикаИдентификатор, Номенклатура, Характеристика, Упаковка");

	Возврат Результат;
	
КонецФункции

#КонецОбласти
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков
#Область ЗапросКоммерческихПредложенийПоставщиков

Функция ИмяЭлементаИзПолногоПути(ПолныйПуть)
	
	МассивЭлементовПути = СтрРазделить(ПолныйПуть, ".");
	КоличествоЭлементов = МассивЭлементовПути.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		
		Возврат МассивЭлементовПути[КоличествоЭлементов - 1];
		
	Иначе
		
		Возврат "";
	
	КонецЕсли;
	
КонецФункции

Процедура ДанныеКоммерческихПредложенийПоЗапросу(ДокументСсылка, АнализируемыеИсточники, Предложения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоммерческоеПредложениеПоставщика.Ссылка КАК КоммерческоеПредложениеСсылка,
		|	КоммерческоеПредложениеПоставщика.ДокументОснование КАК ДокументОснование,
		|	&ИсточникПодчиненныеКоммерческиеПредложения КАК ИмяИсточника,
		|	КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса
		|ПОМЕСТИТЬ ИсточникиПредложений
		|ИЗ
		|	Документ.КоммерческоеПредложениеПоставщика КАК КоммерческоеПредложениеПоставщика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеПоставщика.Товары КАК КоммерческоеПредложениеПоставщикаТовары
		|		ПО (КоммерческоеПредложениеПоставщикаТовары.Ссылка = КоммерческоеПредложениеПоставщика.Ссылка)
		|ГДЕ
		|	КоммерческоеПредложениеПоставщика.ДокументОснование = &ДокументОснование
		|	И &ИсточникПодчиненныеКоммерческиеПредложения В (&АнализируемыеИсточники)
		|	И НЕ КоммерческоеПредложениеПоставщика.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоммерческоеПредложениеПоставщика.Ссылка,
		|	NULL,
		|	&ИсточникДругиеКоммерческиеПредложения,
		|	КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтроки,
		|	ВложенныйЗапрос.ИдентификаторСтрокиЗапроса
		|ИЗ
		|	Документ.КоммерческоеПредложениеПоставщика КАК КоммерческоеПредложениеПоставщика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеПоставщика.Товары КАК КоммерческоеПредложениеПоставщикаТовары
		|		ПО (КоммерческоеПредложениеПоставщикаТовары.Ссылка = КоммерческоеПредложениеПоставщика.Ссылка),
		|	(ВЫБРАТЬ
		|		ЗапросКоммерческихПредложенийПоставщиковТовары.Номенклатура КАК Номенклатура,
		|		ЗапросКоммерческихПредложенийПоставщиковТовары.НоменклатураТекстом КАК НоменклатураТекстом,
		|		ЗапросКоммерческихПредложенийПоставщиковТовары.НоменклатураВСервисеПредставление КАК НоменклатураВСервисеПредставление,
		|		ЗапросКоммерческихПредложенийПоставщиковТовары.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса
		|	ИЗ
		|		Документ.ЗапросКоммерческихПредложенийПоставщиков.Товары КАК ЗапросКоммерческихПредложенийПоставщиковТовары
		|	ГДЕ
		|		ЗапросКоммерческихПредложенийПоставщиковТовары.Ссылка = &ДокументОснование) КАК ВложенныйЗапрос
		|ГДЕ
		|	КоммерческоеПредложениеПоставщикаТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
		|	И КоммерческоеПредложениеПоставщикаТовары.Ссылка.ДокументОснование <> &ДокументОснование
		|	И &ИсточникДругиеКоммерческиеПредложения В (&АнализируемыеИсточники)
		|	И ВложенныйЗапрос.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И НЕ КоммерческоеПредложениеПоставщика.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиПредложений.КоммерческоеПредложениеСсылка КАК КоммерческоеПредложениеСсылка,
		|	ИсточникиПредложений.ДокументОснование КАК ДокументОснование,
		|	ИсточникиПредложений.ИмяИсточника КАК ИмяИсточника
		|ПОМЕСТИТЬ ДоступныеИсточники
		|ИЗ
		|	ИсточникиПредложений КАК ИсточникиПредложений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступныеИсточники.КоммерческоеПредложениеСсылка КАК КоммерческоеПредложениеСсылка,
		|	ДоступныеИсточники.ДокументОснование КАК ДокументОснование,
		|	Контрагенты.Наименование КАК ПоставщикПредставление,
		|	Контрагенты.Ссылка КАК ПоставщикСсылка,
		|	КоммерческоеПредложениеПоставщика.УсловияДоставкиТекст КАК УсловияПоставкиТекст,
		|	КоммерческоеПредложениеПоставщика.УсловияОплатыТекст КАК УсловияОплатыТекст,
		|	КоммерческоеПредложениеПоставщика.ПрочаяДополнительнаяИнформацияТекст КАК ПрочаяДополнительнаяИнформацияТекст,
		|	КоммерческоеПредложениеПоставщика.СуммаМинимум КАК СуммаМинимум,
		|	КоммерческоеПредложениеПоставщика.СуммаМаксимум КАК СуммаМаксимум,
		|	КоммерческоеПредложениеПоставщика.Налогообложение КАК Налогообложение,
		|	КоммерческоеПредложениеПоставщика.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	КоммерческоеПредложениеПоставщика.Номер КАК Номер,
		|	КоммерческоеПредложениеПоставщика.Дата КАК Дата,
		|	НЕ КоммерческоеПредложениеПоставщика.ЦеныДействительныПриПокупкеВсехТоваров КАК МожетВыкупатьсяЧастично,
		|	КоммерческоеПредложениеПоставщика.Валюта КАК Валюта,
		|	ДоступныеИсточники.ИмяИсточника КАК ИмяИсточника,
		|	ВложенныйЗапрос.СрокПоставки КАК СрокПоставки,
		|	ВложенныйЗапрос.Охват КАК Охват
		|ИЗ
		|	ДоступныеИсточники КАК ДоступныеИсточники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеПоставщика КАК КоммерческоеПредложениеПоставщика
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ПО КоммерческоеПредложениеПоставщика.Контрагент = Контрагенты.Ссылка
		|		ПО ДоступныеИсточники.КоммерческоеПредложениеСсылка = КоммерческоеПредложениеПоставщика.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КоммерческоеПредложениеПоставщикаТовары.Ссылка КАК Ссылка,
		|			МАКСИМУМ(КоммерческоеПредложениеПоставщикаТовары.СрокПоставки) КАК СрокПоставки,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтрокиЗапроса) КАК Охват
		|		ИЗ
		|			Документ.КоммерческоеПредложениеПоставщика.Товары КАК КоммерческоеПредложениеПоставщикаТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КоммерческоеПредложениеПоставщикаТовары.Ссылка) КАК ВложенныйЗапрос
		|		ПО ДоступныеИсточники.КоммерческоеПредложениеСсылка = ВложенныйЗапрос.Ссылка
		|ГДЕ
		|	НЕ КоммерческоеПредложениеПоставщика.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоммерческоеПредложениеПоставщикаТовары.Ссылка КАК КоммерческоеПредложениеСсылка,
		|	КоммерческоеПредложениеПоставщикаТовары.НоменклатураПоставщикаПредставление КАК НоменклатураПоставщика,
		|	ВЫБОР
		|		КОГДА ИсточникиПредложений.ИдентификаторСтрокиЗапроса ЕСТЬ NULL
		|			ТОГДА КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтрокиЗапроса
		|		ИНАЧЕ ИсточникиПредложений.ИдентификаторСтрокиЗапроса
		|	КОНЕЦ КАК ИдентификаторСтрокиЗапроса,
		|	КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтроки КАК ИдентификаторСтрокиИсточника,
		|	КоммерческоеПредложениеПоставщикаТовары.Количество КАК Количество,
		|	КоммерческоеПредложениеПоставщикаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	КоммерческоеПредложениеПоставщикаТовары.Цена КАК Цена,
		|	КоммерческоеПредложениеПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
		|	КоммерческоеПредложениеПоставщикаТовары.СрокПоставки КАК СрокПоставки,
		|	КоммерческоеПредложениеПоставщикаТовары.СнятСРассмотрения КАК СнятСРассмотрения,
		|	КоммерческоеПредложениеПоставщикаТовары.ДополнительнаяИнформацияОтПоставщика КАК ДополнительнаяИнформацияОтПоставщика,
		|	КоммерческоеПредложениеПоставщикаТовары.Комментарий КАК Комментарий,
		|	КоммерческоеПредложениеПоставщикаТовары.НоменклатураПоставщикаИдентификатор КАК ИдентификаторНоменклатурыПоставщика,
		|	КоммерческоеПредложениеПоставщикаТовары.ПроцентСкидки КАК ПроцентСкидки,
		|	КоммерческоеПредложениеПоставщикаТовары.СуммаСНДС КАК СуммаСНДС
		|ИЗ
		|	Документ.КоммерческоеПредложениеПоставщика.Товары КАК КоммерческоеПредложениеПоставщикаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникиПредложений КАК ИсточникиПредложений
		|		ПО КоммерческоеПредложениеПоставщикаТовары.Ссылка = ИсточникиПредложений.КоммерческоеПредложениеСсылка
		|			И КоммерческоеПредложениеПоставщикаТовары.ИдентификаторСтроки = ИсточникиПредложений.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("ИсточникПодчиненныеКоммерческиеПредложения",
		ИмяИсточникаПодчиненныеКоммерческиеПредложения());
	Запрос.УстановитьПараметр("ИсточникДругиеКоммерческиеПредложения",
		ИмяИсточникаДругиеКоммерческиеПредложения());
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	Запрос.УстановитьПараметр("АнализируемыеИсточники", АнализируемыеИсточники);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
	Товары = РезультатЗапроса[3].Выгрузить(); // ТаблицаЗначений
	Товары.Индексы.Добавить("КоммерческоеПредложениеСсылка");
	
	Отбор = Новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = Предложения.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
		Отбор.Вставить("КоммерческоеПредложениеСсылка", НоваяСтрока.КоммерческоеПредложениеСсылка);
		
		НоваяСтрока.Товары = Товары.Скопировать(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры

// Описание параметров источников.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание возможных источников предложений для запроса коммерческих предложений:
//   * ИмяИсточника           - Строка - служебное имя источника предложений.
//   * ПредставлениеИсточника - Строка - пользовательское представление источника предложений.
//   * КраткоеПредставление   - Строка - краткое описание источника предложений.
//   * КартинкаИсточника      - Картинка - картинка источника предложений.
//   * Заблокирован           - Булево - блокировать возможность включения/выключения источника.
//   * Использовать           - Булево - использовать источник для поиска.
//
Функция ОписаниеАнализируемыхИсточников()
	
	ПараметрыКоманды = Новый ТаблицаЗначений;
	ПараметрыКоманды.Колонки.Добавить("ИмяИсточника"          , Новый ОписаниеТипов("Строка"));
	ПараметрыКоманды.Колонки.Добавить("ПредставлениеИсточника", Новый ОписаниеТипов("Строка"));
	ПараметрыКоманды.Колонки.Добавить("КраткоеПредставление"  , Новый ОписаниеТипов("Строка"));
	ПараметрыКоманды.Колонки.Добавить("КартинкаИсточника"     , Новый ОписаниеТипов("Картинка"));
	ПараметрыКоманды.Колонки.Добавить("Заблокирован"          , Новый ОписаниеТипов("Булево"));
	ПараметрыКоманды.Колонки.Добавить("Использовать"          , Новый ОписаниеТипов("Булево"));
	ПараметрыКоманды.Колонки.Добавить("ПоддерживаетСохранение", Новый ОписаниеТипов("Булево"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти
// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческихПредложенийПоставщиков

#Область Прочее

Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;

КонецФункции

Процедура УбратьПробелыИзСтроковыхЗначенийКоллекции(КоллекцияЗначений)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЗначений Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Строка") Тогда
			КоллекцияЗначений[ЭлементКоллекции.Ключ] = СокрЛП(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
