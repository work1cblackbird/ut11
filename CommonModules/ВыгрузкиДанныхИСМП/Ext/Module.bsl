#Область ПрограммныйИнтерфейс

// Загрузка сведений об отклонениях из ГИС МТ
// Запуск фонового задания для обновления
Процедура ЗагрузитьСведенияОбОтклоненияхИзГИСМТ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаСведенийОбОтклоненияхИСМП);
		
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		Возврат
	КонецЕсли;
	
	Организации = ОрганизацииОбмена();
	Если Организации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = ИнтеграцияИСМП.ПараметрыОбмена(Организации);
	
	ПодготовитьДанныеКПередачеПоНастройкеРегламентногоЗадания(ПараметрыОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СоздатьЗаданиеНаВыгрузку(Организация, Операция, ВидПродукции, ПараметрыЗапроса) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Данные",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыJSON = ПараметрыЗапроса.ПараметрыJSON;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("format",           "CSV");
	ТелоЗапроса.Вставить("name",             ПараметрыЗапроса.НаименованиеВыгрузки);
	ТелоЗапроса.Вставить("periodicity",      "SINGLE");
	
	ТелоЗапроса.Вставить("params",           ПараметрыJSON);
	ТелоЗапроса.Вставить("productGroupCode", ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппаЧислом(ВидПродукции));
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		ТелоЗапроса.Вставить("dataStartDate", ПараметрыЗапроса.ДатаВыгрузкиНачалоПериода);
		ТелоЗапроса.Вставить("dataEndDate",   ПараметрыЗапроса.ДатаВыгрузкиКонецПериода);
	КонецЕсли;
	
	URLЗапроса = "api/v3/true-api/dispenser/tasks";
	РезультатЗапроса = ОбщегоНазначенияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапроса,
		КлючСессии,
		"POST",
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);//, Ложь);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСМП.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
			Иначе
				
				Данные = Новый Структура;
				Данные.Вставить("ИдентификаторЗадания", ДанныеОбработки.id);
				Данные.Вставить("ДатаСоздания",         ПрочитатьДатуJSON(ДанныеОбработки.createDate, ФорматДатыJSON.ISO));
				Данные.Вставить("СтатусЗадания",        ДанныеОбработки.currentStatus);
				Данные.Вставить("НаименованиеЗадания",  ДанныеОбработки.name);
				
				ВозвращаемоеЗначение.Данные = Данные;
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусЗаданияНаВыгрузку(Организация, ИдентификаторЗадания, ВидПродукции = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппаЧислом(ВидПродукции)));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/dispenser/tasks/%1%2",
		ИдентификаторЗадания,
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИС.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
			Иначе
				
				ТекущийСтатус = ДанныеОбработки.currentStatus;
				Если ТекущийСтатус = "PREPARATION" Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				ИначеЕсли ТекущийСтатус = "COMPLETED" Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				ИначеЕсли ТекущийСтатус = "CANCELED" Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				ИначеЕсли ТекущийСтатус = "FAILED" Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
					ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
						Нстр("ru = 'При получении выгрузки %1 из сервиса ГИС МТ получена ошибка: ""currentStatus: FAILED"".
						           |Описание ошибки можно посмотреть в личном кабинете ГИС МТ в разделе ""Выгрузки"".'"),
						ИдентификаторЗадания);
				ИначеЕсли ТекущийСтатус = "ARCHIVE" Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультирующиеИдентификаторыВыгрузок(Организация, ИдентификаторыЗаданий, ВидПродукции) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Данные",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	
	// Номер страницы (отсчёт с 0)
	ПараметрыЗапроса.Добавить(СтрШаблон("page=%1", 0));
	
	// Количество записей на странице
	ПараметрыЗапроса.Добавить(СтрШаблон("size=%1", ИдентификаторыЗаданий.Количество()));
	
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		// Кодовое значение товарной группы
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппаЧислом(ВидПродукции)));
	КонецЕсли;
	
	// Список ID задач
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"task_ids=%1",
			СтрСоединить(ИдентификаторыЗаданий, ",")));
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/dispenser/results%1",
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, КлючСессии, ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов(""));
	
	РезультатОтправкиЗапроса = ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИС.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
			Иначе
				
				Данные = Новый Массив;
				
				Для Каждого Строка Из ДанныеОбработки.list Цикл
					
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("ИдентификаторЗадания",  Строка.taskId);
					ДанныеСтроки.Вставить("ИдентификаторВыгрузки", Строка.id);
					Если Строка.available = "AVAILABLE" Тогда
						ДанныеСтроки.Вставить("Доступен", Истина);
					Иначе
						ДанныеСтроки.Вставить("Доступен", Ложь);
					КонецЕсли;
					
					Данные.Добавить(ДанныеСтроки);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.Данные = Данные;
				Если Данные.Количество() Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				Иначе
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИС.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьРезультатыВыгрузкиИзZIP(Организация, ИдентификаторВыгрузки, ВидПродукции, Операция) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеВыгрузки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ОшибкаСервиса",                  Ложь);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("АдресФайлаВоВременномХранилище", Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	
	// Кодовое значение товарной группы
	ПараметрыЗапроса.Добавить(
		СтрШаблон(
			"pg=%1",
			ИнтерфейсИСМПОбщегоНазначения.ТоварнаяГруппаЧислом(ВидПродукции)));
	
	URLЗапроса = СтрШаблон(
		"api/v3/true-api/dispenser/results/%1/file%2",
		ИдентификаторВыгрузки,
		ИнтерфейсИСМП.ПараметрыЗапроса(ПараметрыЗапроса));
	
	ЗаголовокHTTP = Новый Соответствие;;
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	ПараметрыОтправкиHTTPЗапросов = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("");
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	ПараметрыПолученияФайла = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолученияФайла.Заголовки            = ЗаголовокHTTP;
	ПараметрыПолученияФайла.ЗащищенноеСоединение = ЗащищенноеСоединение;
	ПараметрыПолученияФайла.Порт                 = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыПолученияФайла.Таймаут              = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	
	// [Протокол://]<Сервер>/<Путь к файлу на сервере>
	ПолныйURLЗапроса = СтрШаблон(
		"%1://%2/%3",
		?(ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение, "https", "http"),
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		URLЗапроса);
	
	РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ПолныйURLЗапроса, ПараметрыПолученияФайла, Истина);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатСкачивания;
	
	Если РезультатСкачивания.КодСостояния = 200 Тогда
		
		Если РезультатСкачивания.Статус Тогда
			
			Если ЭтоАдресВременногоХранилища(РезультатСкачивания.Путь) Тогда
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(РезультатСкачивания.Путь);
				РезультатЧтенияФайла = ПолучитьТаблицуИзФайлаZIPВоВременномХранилище(
					ДвоичныеДанные, ВидПродукции, Операция);
				ВозвращаемоеЗначение.АдресФайлаВоВременномХранилище = РезультатСкачивания.Путь;
				Если ЗначениеЗаполнено(РезультатЧтенияФайла.ТекстОшибки) Тогда
					ВозвращаемоеЗначение.ТекстОшибки = РезультатЧтенияФайла.ТекстОшибки;
				ИначеЕсли РезультатЧтенияФайла.ДанныеВыгрузки <> Неопределено Тогда
					ВозвращаемоеЗначение.ДанныеВыгрузки = РезультатЧтенияФайла.ДанныеВыгрузки;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВозвращаемоеЗначение.ДанныеВыгрузки <> Неопределено Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			Иначе
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = РезультатСкачивания.СообщениеОбОшибке;
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
		
		Если РезультатСкачивания.КодСостояния = 401 Тогда
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ОшибкаСервиса = Истина;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТаблицуИзФайлаZIPВоВременномХранилище(ДвоичныеДанные, ВидПродукции, Операция, ДетальныеЗаписи = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ДанныеВыгрузки", Неопределено);
	
	ФайлыВыгрузки  = Новый Массив;
	ВременныйКаталог = Неопределено;
	
	ПрочитатьZIPФайлВыгрузки(ДвоичныеДанные, ФайлыВыгрузки, ВременныйКаталог, Операция);
	
	Для Каждого ИмяВременногоФайла Из ФайлыВыгрузки Цикл
		
		РезультатЧтенияФайла = ПрочитатьДаныеИзФайлаCSV(ИмяВременногоФайла, ВидПродукции, Операция, ДетальныеЗаписи);
		Если ЗначениеЗаполнено(РезультатЧтенияФайла.ТекстОшибки) Тогда
			Результат.ТекстОшибки = РезультатЧтенияФайла.ТекстОшибки;
			Прервать;
		Иначе
			Если Результат.ДанныеВыгрузки = Неопределено Тогда
				Результат.ДанныеВыгрузки = РезультатЧтенияФайла.ДанныеВыгрузки;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.ДанныеВыгрузки, РезультатЧтенияФайла.ДанныеВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
	Конеццикла;
	
	ОчиститьВременныеФайлы(ВременныйКаталог, ФайлыВыгрузки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьДаныеИзФайлаCSV(ИмяФайла, ВидПродукции, Операция, ДетальныеЗаписи = Ложь)
	
	КлючеваяОперация = "ОбщийМодуль.ВыгрузкиДанныхИСМП.ПрочитатьДаныеИзФайлаCSV";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ДанныеВыгрузки", Неопределено);
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		ТекстСообщения = НСтр("ru = 'Файла ошибок не существует.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Если Строка = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не получилось загрузить данные из файла ошибок.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
#Область ЧтениеЗаголовков
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
		// Первая строка для выгрузки списка КИ на балансе содержит информацию о фильтре вида:
		// "Filter(participantInn=, productGroup=, packageType=[], status=, includeGtin=[] ...)"
		// Заголовки во второй строке.
		Строка = ЧтениеТекста.ПрочитатьСтроку();
	КонецЕсли;
	
	РазделительКолонок = ",";
	ОдинарнаяКавычка      = """";
	ЭкранированнаяКавычка = """""";
	Замена = "¯\_(ツ)_/¯";
	
	Источник     = Новый ТаблицаЗначений;
	КолонкиШапки = Новый Соответствие();
	
	Строка  = СтрЗаменить(Строка, ЭкранированнаяКавычка, Замена);
	Позиция = СтрНайти(Строка, РазделительКолонок);
	
	НомерПозиции = 1;
	ЕстьОткрывающийСимвол = Ложь;
	ЕстьЗакрывающийСимвол = Ложь;
		
	Пока Позиция > 1 Цикл
		
		ЕстьОткрывающийСимвол = ЕстьОткрывающийСимвол Или Лев(Строка, 1) = ОдинарнаяКавычка;
		Колонка =  Лев(Строка, Позиция - 1);
		ЕстьЗакрывающийСимвол = ЕстьЗакрывающийСимвол Или Прав(Колонка,1) = ОдинарнаяКавычка;
		
		Колонка = СтрЗаменить(Колонка, ОдинарнаяКавычка, "");
		Колонка = СтрЗаменить(Колонка, Замена, ОдинарнаяКавычка);
		
		Если Не ЕстьЗакрывающийСимвол Тогда
			// Найден символ "," в заголовке, сохраняем исходное наименование
			Колонка = СтрШаблон("%1%2", Колонка, РазделительКолонок);
		КонецЕсли;
		
		ИмяКолонки = КолонкиШапки.Получить(НомерПозиции);
		Если ИмяКолонки = Неопределено Тогда
			КолонкиШапки.Вставить(НомерПозиции, Колонка);
		Иначе
			КолонкиШапки.Вставить(НомерПозиции, СтрШаблон("%1%2", ИмяКолонки, Колонка));
		КонецЕсли;
		
		Если ЕстьОткрывающийСимвол И ЕстьЗакрывающийСимвол Тогда
			ЕстьОткрывающийСимвол = Ложь;
			ЕстьЗакрывающийСимвол = Ложь;
			НомерПозиции = НомерПозиции + 1;
		КонецЕсли;
		
		Строка = Сред(Строка, Позиция + 1);
		Позиция = СтрНайти(Строка, РазделительКолонок);
		
	КонецЦикла;
	
	Если СтрДлина(Строка) > 1 Тогда
		Колонка = СтрЗаменить(Строка, ОдинарнаяКавычка, "");
		Колонка = СтрЗаменить(Колонка, Замена, ОдинарнаяКавычка);
		ИмяКолонки = КолонкиШапки.Получить(НомерПозиции);
		Если ИмяКолонки = Неопределено Тогда
			КолонкиШапки.Вставить(НомерПозиции, Колонка);
		Иначе
			КолонкиШапки.Вставить(НомерПозиции, СтрШаблон("%1%2", ИмяКолонки, Колонка));
		КонецЕсли;
	КонецЕсли;
	
	ПозицияКолонкиВФайле = Новый Соответствие;
	
	ИнформацияПоКолонкам = ИнформацияПоКолонкамПоВидуОперации(Операция, ДетальныеЗаписи);
	
	Для Каждого ЭлементКоллекции Из КолонкиШапки Цикл
		
		ОписаниеКолонки = ИнформацияПоКолонкам.Получить(ЭлементКоллекции.Значение);
		Если ОписаниеКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Источник.Колонки.Добавить(ОписаниеКолонки.ИмяКолонки, ОписаниеКолонки.ТипЗначения, ЭлементКоллекции.Значение);
		ПозицияКолонкиВФайле.Вставить(ЭлементКоллекции.Ключ, ОписаниеКолонки.ИмяКолонки);
		
	КонецЦикла;
	
	НоваяКолонка = Источник.Колонки.Добавить();
	НоваяКолонка.Имя = "Количество";
	
	СгруппированныеДанные = Источник.СкопироватьКолонки();
	РазмерПорции = 1000;
	
	Если Источник.Колонки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Файл выгрузки некорректный- не найдены заголовки таблицы'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
#КонецОбласти
	
#Область ЧтениеДанных
	
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	//Обработка ошибок. Может приходить в виде строки: "errors"
	ЭтоСписокКИНаБалансе = Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе;
	Если ЭтоСписокКИНаБалансе Тогда
		Значение = СтрЗаменить(Строка, ОдинарнаяКавычка, "");
		Если Значение = "errors" Тогда
			Строка = ЧтениеТекста.ПрочитатьСтроку();
			МассивОшибок = Новый Массив;
			Пока Строка <> Неопределено Цикл
				МассивОшибок.Добавить(Строка);
				Строка = ЧтениеТекста.ПрочитатьСтроку();
			КонецЦикла;
			Результат.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	КешТипов = Новый Соответствие;
	КешТипов.Вставить("", "");
	ИменаКолонокДляОбработкиТипа = КолонкиДляПриведенияТипа(ДетальныеЗаписи);
	КолонкиГруппировки = КолонкиГруппировки(Операция);
	ИндексТекущейСтроки = 0;
	Счетчик = 0;
	Пока Строка <> Неопределено Цикл
		
		Строка = СтрЗаменить(Строка, ЭкранированнаяКавычка, Замена);
		
		НоваяСтрока = Источник.Добавить();
		НоваяСтрока.Количество = 1;
		
		Если ЭтоСписокКИНаБалансе И Источник.Колонки.Найти("УпаковкаВерхнегоУровня") <> Неопределено Тогда
			НоваяСтрока.УпаковкаВерхнегоУровня = Истина;
		КонецЕсли;
		
		Индекс = 1;
		
		ДанныеСтроки = СтрРазделить(Строка, ОдинарнаяКавычка);
		ЭтоРазделитель = Истина;
		Для Каждого ЭлементКоллекции Из ДанныеСтроки Цикл
			Если ЭтоРазделитель Тогда
				Индекс = Индекс + СтрДлина(ЭлементКоллекции);
				ЭтоРазделитель = Ложь;
			Иначе
				ИмяКолонки = ПозицияКолонкиВФайле.Получить(Индекс);
				Если ИмяКолонки <> Неопределено Тогда
					Если ИменаКолонокДляОбработкиТипа[ИмяКолонки] = Истина Тогда
						Значение = ПривестиТипЗначения(ИмяКолонки, ЭлементКоллекции, ВидПродукции, КешТипов);
					Иначе
						Значение = СтрЗаменить(ЭлементКоллекции, Замена, ОдинарнаяКавычка);
					КонецЕсли;
					НоваяСтрока[ИмяКолонки] = Значение;
				КонецЕсли;
				ЭтоРазделитель = Истина;
			Конецесли;
		КонецЦикла;
		
		Если ИндексТекущейСтроки = РазмерПорции Тогда
			ИндексТекущейСтроки = 0;
			Если Не ДетальныеЗаписи Тогда
				СгруппироватьДанные(Источник, СгруппированныеДанные, КолонкиГруппировки);
			КонецЕсли;
		Иначе
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЕсли;
		Счетчик = Счетчик + 1;
		Строка = ЧтениеТекста.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если Источник.Количество()
		И Не ДетальныеЗаписи Тогда
		СгруппироватьДанные(Источник, СгруппированныеДанные, КолонкиГруппировки);
	КонецЕсли;
	
#КонецОбласти
	
	Если ДетальныеЗаписи Тогда
		Результат.ДанныеВыгрузки = Источник;
	Иначе
		Результат.ДанныеВыгрузки = СгруппированныеДанные;
	КонецЕсли;
	
	ТипИСМП = Метаданные.Документы.ОтчетИСМП.Имя;
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
		ОписаниеЗамера, Счетчик, ТипИСМП);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Счетчик);
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиТипЗначения(ИмяКолонки, ДанныеКолонки, ВидПродукции, КешТипов = Неопределено)
	
	Результат = КешТипов.Получить(ДанныеКолонки);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ДанныеКолонки;
	
	Если ИмяКолонки = "СтатусКодаМаркировки" Тогда
		Результат = ИнтерфейсИСМПОбщегоНазначения.СтатусКодаМаркировкиИСМП(ДанныеКолонки);
		КешТипов.Вставить(ДанныеКолонки, Результат);
	ИначеЕсли ИмяКолонки = "СпособВводаВОборот" Тогда
		Результат = ИнтерфейсИСМПСлужебный.СпособВыпускаВОборот(ДанныеКолонки);
		КешТипов.Вставить(ДанныеКолонки, Результат);
	ИначеЕсли ИмяКолонки = "ВидУпаковки" Тогда
		Результат= ИнтерфейсИСМПОбщегоНазначения.ВидУпаковки(ДанныеКолонки, ВидПродукции);
		КешТипов.Вставить(ДанныеКолонки, Результат);
	ИначеЕсли ИмяКолонки = "Нивелировано" Тогда
		Результат = Булево(ДанныеКолонки);
		КешТипов.Вставить(ДанныеКолонки, Результат);
	ИначеЕсли ИмяКолонки = "УпаковкаВерхнегоУровня" Тогда
		Результат = Не ЗначениеЗаполнено(ДанныеКолонки);
	ИначеЕсли ИмяКолонки = "АдресОбъекта" Тогда
		Результат = Справочники.КлючиАдресовИСМП.КлючАдреса(ДанныеКолонки);
		КешТипов.Вставить(ДанныеКолонки, Результат);
	ИначеЕсли ИмяКолонки = "ДатаИВремяВыполненияОперации" Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеКолонки, ЧастиДаты.ДатаВремя);
		КешТипов.Вставить(ДанныеКолонки, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КолонкиДляПриведенияТипа(ДетальныеЗаписи = Ложь)
	
	Результат = Новый Соответствие;
	Результат.Вставить("СтатусКодаМаркировки", Истина);
	Результат.Вставить("СпособВводаВОборот", Истина);
	Результат.Вставить("ВидУпаковки", Истина);
	Результат.Вставить("Нивелировано", Истина);
	Результат.Вставить("УпаковкаВерхнегоУровня", Истина);
	Результат.Вставить("АдресОбъекта", Истина);
	Если ДетальныеЗаписи Тогда
		Результат.Вставить("ДатаИВремяВыполненияОперации", Истина);
		Результат.Вставить("ИдентификаторВСД", Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КолонкиГруппировки(Операция)
	
	Колонки = Новый Массив;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		Колонки.Добавить("ВидОтклонения");
		Колонки.Добавить("РезультатПроверки");
		Колонки.Добавить("Субъект");
		Колонки.Добавить("Нивелировано");
		Колонки.Добавить("АдресОбъекта");
		Колонки.Добавить("НомерККТ");
	Иначе
		Колонки.Добавить("GTIN");
		Колонки.Добавить("СтатусКодаМаркировки");
		Колонки.Добавить("ВидУпаковки");
		Колонки.Добавить("СпособВводаВОборот");
		Колонки.Добавить("УпаковкаВерхнегоУровня");
	КонецЕсли;
	
	Возврат СтрСоединить(Колонки, ",");
	
КонецФункции

Функция ИнформацияПоКолонкамПоВидуОперации(Операция, ДетальныеЗаписи = Ложь)
	
	Результат = Новый Соответствие;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях Тогда
		ОписаниеТипаСтрока255 = ОбщегоНазначения.ОписаниеТипаСтрока(255);
		ОписаниеТипаСтрока36 = ОбщегоНазначения.ОписаниеТипаСтрока(36);
		Результат.Вставить(
			"Вид отклонения", 
			Новый Структура("ИмяКолонки, ТипЗначения","ВидОтклонения", ОписаниеТипаСтрока255));
		Результат.Вставить(
			"Результат проверки",
			Новый Структура("ИмяКолонки, ТипЗначения","РезультатПроверки", ОписаниеТипаСтрока255));
		Результат.Вставить(
			"Субъект",
			Новый Структура("ИмяКолонки, ТипЗначения","Субъект", ОписаниеТипаСтрока255));
		Результат.Вставить(
			"Адрес места фиксации отклонения",
			Новый Структура("ИмяКолонки, ТипЗначения","АдресОбъекта", Новый ОписаниеТипов("СправочникСсылка.КлючиАдресовИСМП")));
		Результат.Вставить(
			"Регистрационный номер ККТ (из чека)",
			Новый Структура("ИмяКолонки, ТипЗначения","НомерККТ", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
		Результат.Вставить(
			"Нивелировано",
			Новый Структура("ИмяКолонки, ТипЗначения","Нивелировано", Новый ОписаниеТипов("Булево"))); // "Да", "Нет"
		Если ДетальныеЗаписи Тогда
			Результат.Вставить(
				"Код",
				Новый Структура("ИмяКолонки, ТипЗначения","КодМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(200)));
			Результат.Вставить(
				"Дата и время выполнения операции, в результате которой было выявлено отклонение",
				Новый Структура("ИмяКолонки, ТипЗначения","ДатаИВремяВыполненияОперации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
			Результат.Вставить(
				"Номер документа",
				Новый Структура("ИмяКолонки, ТипЗначения","НомерДокумента", ОписаниеТипаСтрока36));
			Результат.Вставить(
				"Идентификатор ВСД",
				Новый Структура("ИмяКолонки, ТипЗначения","ИдентификаторВСД", ОписаниеТипаСтрока36));
		КонецЕсли;
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе Тогда
		Результат.Вставить(
			"gtin",
			Новый Структура("ИмяКолонки, ТипЗначения", "GTIN", ОбщегоНазначения.ОписаниеТипаСтрока(14)));
		Результат.Вставить(
			"parent",
			Новый Структура("ИмяКолонки, ТипЗначения", "УпаковкаВерхнегоУровня", Новый ОписаниеТипов("Булево")));
		Результат.Вставить(
			"status",
			Новый Структура("ИмяКолонки, ТипЗначения", "СтатусКодаМаркировки",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП")));
		Результат.Вставить(
			"emissionType",
			Новый Структура("ИмяКолонки, ТипЗначения", "СпособВводаВОборот",Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ")));
		Результат.Вставить(
			"packageType",
			Новый Структура("ИмяКолонки, ТипЗначения", "ВидУпаковки",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"))); 
		Если ДетальныеЗаписи Тогда
			Результат.Вставить(
				"requestedCis", Новый Структура("ИмяКолонки, ТипЗначения", "КодМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(200)));
		КонецЕсли;
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Неизвестный вид операции %1.'"), Операция);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СгруппироватьДанные(Источник, СгруппированныеДанные, КолонкиГруппировки)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Источник, СгруппированныеДанные);
	СгруппированныеДанные.Свернуть(КолонкиГруппировки, "Количество");
	Источник.Очистить();
	
КонецПроцедуры

Процедура ПрочитатьZIPФайлВыгрузки(ДвоичныеДанные, ФайлыВыгрузки, ВременныйКаталог, Операция = "")
	
	Попытка
		
		ПотокЧтения = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		ЧтениеZIP = Новый ЧтениеZIPФайла(ПотокЧтения);
		
		//@skip-check missing-temporary-file-deletion
		ВременныйКаталог = ПолучитьИмяВременногоФайла("cat");
		СоздатьКаталог(ВременныйКаталог);
		
		Для Каждого ЭлементАрхива Из ЧтениеZIP.Элементы Цикл
			ИмяВременногоФайла = ОбщегоНазначенияИС.ОбъединитьПути(ВременныйКаталог, ЭлементАрхива.ПолноеИмя);
			ФайлыВыгрузки.Добавить(ИмяВременногоФайла);
			ЧтениеZIP.Извлечь(ЭлементАрхива, ВременныйКаталог);
		КонецЦикла;
		
		ЧтениеZIP.Закрыть();
		ПотокЧтения.Закрыть();
		
	Исключение
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки результатов выгрузки %1:
			           |%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			Операция,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОписанияОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка загрузки результатов выгрузки %1:
			           |%2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			Операция,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибки,
			НСтр("ru = 'Выгрузка данных из ГИС МТ'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ВызватьИсключение ТекстОписанияОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьВременныеФайлы(ВременныйКаталог, ВременныеФайлы)
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныеФайлы.Добавить(ВременныйКаталог);
	КонецЕсли;
	Для Каждого ИмяВременногоФайла Из ВременныеФайлы Цикл
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЦикла;
	
КонецПроцедуры

Функция ОрганизацииОбмена()
	
	Организации = Новый Массив;
	
	ИмяПараметраИСМП = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ИмяДанныхКлючаСессии(Перечисления.ТипыТокеновАвторизации.ИСМП);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПараметраИСМП", ИмяПараметраИСМП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеКлючаСессииИСМП.ИмяПараметраСеанса КАК ИмяПараметраСеанса,
	|	ДанныеКлючаСессииИСМП.Данные             КАК Данные
	|ИЗ
	|	РегистрСведений.ДанныеКлючаСессииИСМП КАК ДанныеКлючаСессииИСМП
	|ГДЕ
	|	ДанныеКлючаСессииИСМП.ИмяПараметраСеанса = &ИмяПараметраИСМП
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДанныеКлючаСессииИСМП = Выборка.Данные.Получить();
		
		Для Каждого КлючИЗначение Из ДанныеКлючаСессииИСМП Цикл
			Организации.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Организации;
	
КонецФункции

Процедура ПодготовитьДанныеКПередачеПоНастройкеРегламентногоЗадания(ПараметрыОбмена)
	
	Операция = Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьСообщений.Сообщение КАК Сообщение
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщений
	|ГДЕ
	|	ОчередьСообщений.Операция = &Операция
	|	И ОчередьСообщений.Документ = ЗНАЧЕНИЕ(Документ.ОтчетИСМП.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СообщенияКОбмену = Результат.Выгрузить().ВыгрузитьКолонку("Сообщение");
		ИнтеграцияИСМПСлужебный.ПостроитьОчередьСообщений(ПараметрыОбмена, СообщенияКОбмену);
		ИнтеграцияИСМПСлужебный.ВыполнитьОбменУниверсально(ПараметрыОбмена);
		Возврат;
	КонецЕсли;
	
	ВходящиеДанные = Новый Массив;
	
	ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыОбработкиДокументов.Организация        = ПараметрыОбмена.Организации;
	ПараметрыОбработкиДокументов.Ссылка             = ПредопределенноеЗначение("Документ.ОтчетИСМП.ПустаяСсылка");
	ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
		"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ЗагрузкаОтклонений", Истина);
	
	ПараметрыОбработкиДокументов.ДополнительныеПараметры = ПараметрыЗапроса;
	
	ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
	
	ИнтеграцияИСМПСлужебный.ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
КонецПроцедуры

#КонецОбласти
