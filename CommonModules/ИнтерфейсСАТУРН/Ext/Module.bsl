#Область ПрограммныйИнтерфейс

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка           - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив из Строка - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = Метаданные.ПараметрыСеанса.ПараметрыЛогированияЗапросовСАТУРН.Имя Тогда
		ЛогированиеЗапросовИС.УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры);
	ИначеЕсли ИмяПараметра = Метаданные.ПараметрыСеанса.ДанныеКлючаСессииСАТУРН.Имя Тогда
		ПараметрыСеанса.ДанныеКлючаСессииСАТУРН = Новый ХранилищеЗначения(Неопределено);
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает адрес сервера.
// 
// Возвращаемое значение:
// 	Строка - адрес сервера.
//
Функция АдресСервера() Экспорт
	
	РежимРаботыСТестовымКонтуром = ИнтеграцияСАТУРНКлиентСервер.РежимРаботыСТестовымКонтуромСАТУРН();
	
	Если РежимРаботыСТестовымКонтуром Тогда
		Возврат "api-demo.fgis-saturn.ru";
	Иначе
		Возврат "api1.fgis-saturn.ru";
	КонецЕсли;
	
КонецФункции

// URL путь на сервере для отправки запроса.
// 
// Параметры:
//  Авторизация - Булево - Путь для авторизации.
// 
// Возвращаемое значение:
//  Строка - URL путь.
Функция АдресРесурса(Авторизация = Ложь) Экспорт
	
	РежимРаботыСТестовымКонтуром = ИнтеграцияСАТУРНКлиентСервер.РежимРаботыСТестовымКонтуромСАТУРН();
	
	Если РежимРаботыСТестовымКонтуром Тогда
		Если Авторизация Тогда
			Возврат "probeInnerArm/innerArm/seapiAuth";
		Иначе
			Возврат "probeInnerArm/innerArm/seapi";
		КонецЕсли;
	Иначе
		Если Авторизация Тогда
			Возврат "gate1/seapiAuth";
		Иначе
			Возврат "gate1/seapi";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов.
// 
// Параметры:
//  ПараметрыОптимизации - см. ИнтеграцияСАТУРНСлужебный.ПараметрыОптимизации
//  
// Возвращаемое значение:
//  Структура - Описание:
//   * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
//   * Таймаут - Число - Таймаут соединения.
//   * Порт - Число - Порт соединения.
//   * Сервер - Строка - Адрес сервера.
//   * АвторизацияHTTPТестовыйКонтурЛогин - Строка, Неопределено - Логин.
//   * АвторизацияHTTPТестовыйКонтурПароль - Строка, Неопределено - Пароль.
//   * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросов(ПараметрыОптимизации = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",                НСтр("ru = 'ФГИС Сатурн'"));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                              АдресСервера());
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                                443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                             30);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение",    Истина);
	ПараметрыОтправкиHTTPЗапросов.Вставить("АвторизацияHTTPТестовыйКонтурЛогин",  Неопределено);
	ПараметрыОтправкиHTTPЗапросов.Вставить("АвторизацияHTTPТестовыйКонтурПароль", Неопределено);
	
	Если ПараметрыОптимизации = Неопределено Тогда
		ПараметрыОптимизации = ИнтеграцияСАТУРНСлужебный.ПараметрыОптимизации();
	КонецЕсли;
	ПараметрыОтправкиHTTPЗапросов.Таймаут = ПараметрыОптимизации.ТаймаутHTTPЗапросов;
	Если ИнтеграцияСАТУРНКлиентСервер.РежимРаботыСТестовымКонтуромСАТУРН() Тогда
		ПараметрыОтправкиHTTPЗапросов.АвторизацияHTTPТестовыйКонтурЛогин  = ПараметрыОптимизации.АвторизацияHTTPТестовыйКонтурЛогин;
		ПараметрыОтправкиHTTPЗапросов.АвторизацияHTTPТестовыйКонтурПароль = ПараметрыОптимизации.АвторизацияHTTPТестовыйКонтурПароль;
	КонецЕсли;
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

#Область КонвертацияТипов

Функция ИмяКлассаСущности(Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента Тогда
		
		Возврат "Inventorization";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
		
		Возврат "Invoice";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияАннулирование Тогда
		
		Возврат "PatUsagePlanRec";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияАннулирование Тогда
		
		Возврат "PatUsage";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование Тогда
		
		Возврат "PatProductionAct";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка Тогда
		
		Возврат "WarehouseStates";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.МестоХраненияЗапросКлассификатора Тогда
			
		Возврат "Warehouse";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСозданиеКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияИзменениеКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВОтменено
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВАктуально Тогда

		Возврат "Contractor";

	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПАТСозданиеКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТИзменениеКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТСменаСтатусаИзЧерновикаВОтменено
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТСменаСтатусаИзЧерновикВАктуально
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТЗапросКлассификатора Тогда
		
		Возврат "PatProduct";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияЗапросКлассификатора Тогда
		
		Возврат "Contractor";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортируемаяПартияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки Тогда
		
		Возврат "PAImportRecord";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПартияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий Тогда
		
		Возврат "PATBatch";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.МестоПримененияЗапросКлассификатора Тогда
		
		Возврат "Acreage";
	
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Не обработана операция получения имени класса сущности %1'"), Операция);
		
	КонецЕсли;
	
КонецФункции

Функция ИмяОперации(Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТСозданиеКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСозданиеКлассификатора Тогда
		
		Возврат "static/createNew()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТИзменениеКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияИзменениеКлассификатора Тогда
	
		Возврат "draft/updateCard()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету Тогда
		
		Возврат "draft/setActual()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка Тогда
		
		Возврат "static/getTotals()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение Тогда
		
		Возврат "any/getFullCard()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка Тогда
		
		Возврат "draft/doSend()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля Тогда
		
		Возврат "draft/doSendToRetale()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация Тогда
		
		Возврат "draft/doSendToDestroy()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство Тогда
		
		Возврат "draft/doSendToIndustrial()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт Тогда
		
		Возврат "draft/doSendToExport()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки Тогда
		
		Возврат "onWay/notifyDelivered()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента Тогда
		
		Возврат "onWay/updateAcceptedCounts()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат Тогда
		
		Возврат "onWay/sendBack()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян Тогда
		
		Возврат "onWay/notifyLost()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата Тогда
		
		Возврат "onReturning/notifyDelivered()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента  Тогда
		
		Возврат "onReturning/updateReturnedCounts()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате Тогда
		
		Возврат "onReturning/notifyLost()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		
		Возврат "onWay/partiallyAcceptAndSendBack()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		
		Возврат "draft/doSendToExportInspection()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр Тогда
		
		Возврат "onWayToExportInspection/notifyDeliveredToInspection()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента Тогда
		
		Возврат "onWayToExportInspection/updateAcceptedCounts()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение Тогда
		
		Возврат "onExportInspection/notifyExport()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
		
		Возврат "onExportInspection/updateAcceptedCounts()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ Тогда
		
		Возврат "onExportInspection/refuseToExport()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПАТСменаСтатусаИзЧерновикаВОтменено
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВОтменено Тогда
		
		Возврат "draft/setCanceled()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПАТСменаСтатусаИзЧерновикВАктуально
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВАктуально Тогда
		
		Возврат "draft/setActual()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента Тогда
		
		Возврат "imported/setWarehouse()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки Тогда
		
		Возврат "imported/setReceived()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки Тогда
		
		Возврат "imported/setCanceled()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортируемаяПартияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПартияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПАТЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.МестоПримененияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.МестоХраненияЗапросКлассификатора
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов Тогда
		
		Возврат "static/getList()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктПримененияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПланПримененияАннулирование Тогда
		
		Возврат "actual/undoSetActual()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование Тогда
		
		Возврат "delivered/undoNotifyDelivered()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование Тогда
		
		Возврат "onIndustrSale/undoDoSendToIndustrial()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование Тогда
		
		Возврат "onWayToExportInspection/undoSendToExport()";
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование Тогда
		
		Возврат "onWay/undoDoSend()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование Тогда
		
		Возврат "onRetailSale/undoDoSendToRetale()";
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование Тогда
		
		Возврат "deliveredToDestroy/undoDoSendToDestroy()";
	
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Не обработано имя операции %1'"), Операция);
		
	КонецЕсли;
	
КонецФункции

Функция СпособПримененияПАТ(СпособПрименения) Экспорт
	
	Если СпособПрименения = Перечисления.СпособыПримененияПАТСАТУРН.АвиационноеПрименениеПестицидовИАгрохимикатов Тогда
		Возврат "авиационное применение пестицидов и агрохимикатов";
	ИначеЕсли СпособПрименения = Перечисления.СпособыПримененияПАТСАТУРН.НаземноеПрименениеПестицидовИАгрохимикатов Тогда
		Возврат "наземное применение пестицидов и агрохимикатов";
	ИначеЕсли СпособПрименения = Перечисления.СпособыПримененияПАТСАТУРН.ОбработкаПолейПестицидами Тогда
		Возврат "обработка полей, садов, земельных участков, посевов, посадок пестицидами";
	ИначеЕсли СпособПрименения = Перечисления.СпособыПримененияПАТСАТУРН.ОбработкаСтроенийПестицидами Тогда
		Возврат "обработка зданий, строений, сооружений пестицидами";
	ИначеЕсли СпособПрименения = Перечисления.СпособыПримененияПАТСАТУРН.ОбработкаТранспортныхСредствПестицидами Тогда
		Возврат "обработка транспортных средств пестицидами";
	ИначеЕсли СпособПрименения = Перечисления.СпособыПримененияПАТСАТУРН.ПрименениеПестицидовИАгрохимикатов Тогда
		Возврат "применение пестицидов и агрохимикатов (за исключением реализации физическим лицам для личного пользования)";
	
	ИначеЕсли СпособПрименения = "авиационное применение пестицидов и агрохимикатов" Тогда
		Возврат Перечисления.СпособыПримененияПАТСАТУРН.АвиационноеПрименениеПестицидовИАгрохимикатов;
	ИначеЕсли СпособПрименения = "наземное применение пестицидов и агрохимикатов" Тогда
		Возврат Перечисления.СпособыПримененияПАТСАТУРН.НаземноеПрименениеПестицидовИАгрохимикатов;
	ИначеЕсли СпособПрименения = "обработка полей, садов, земельных участков, посевов, посадок пестицидами" Тогда
		Возврат Перечисления.СпособыПримененияПАТСАТУРН.ОбработкаПолейПестицидами;
	ИначеЕсли СпособПрименения = "обработка зданий, строений, сооружений пестицидами" Тогда
		Возврат Перечисления.СпособыПримененияПАТСАТУРН.ОбработкаСтроенийПестицидами;
	ИначеЕсли СпособПрименения = "обработка транспортных средств пестицидами" Тогда
		Возврат Перечисления.СпособыПримененияПАТСАТУРН.ОбработкаТранспортныхСредствПестицидами;
	ИначеЕсли СпособПрименения = "применение пестицидов и агрохимикатов (за исключением реализации физическим лицам для личного пользования)" Тогда
		Возврат Перечисления.СпособыПримененияПАТСАТУРН.ПрименениеПестицидовИАгрохимикатов;
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный способ применения ПАТ %1'"), СпособПрименения);
		
	КонецЕсли;
	
КонецФункции

Функция ТипМестаПрименения(Значение) Экспорт
	
	Если Значение = Перечисления.ТипыМестПримененияСАТУРН.ЗарегистрованноеМестоПрименения Тогда
		Возврат "[зарегистрированные места применения]";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.Суда Тогда
		Возврат "Суда";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.АвтомобилиАвтомобильныеПрицепы Тогда
		Возврат "Автомобили/автомобильные прицепы";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.Вагоны Тогда
		Возврат "Вагоны";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.ВоздушныйТранспорт Тогда
		Возврат "Воздушный транспорт";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.СкладскиеПомещения Тогда
		Возврат "(иные) Складские помещения (склады, хранилища, силосы)";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.ПроизводственныеПомещения Тогда
		Возврат "(иные) Производственные помещения";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.ЗемлиСельскохозяйственногоНазначения Тогда
		Возврат "Земли несельскохозяйственного назначения";
	ИначеЕсли Значение = Перечисления.ТипыМестПримененияСАТУРН.Иное Тогда
		Возврат "Иное";
	
	ИначеЕсли Значение = "[зарегистрированные места применения]" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.ЗарегистрованноеМестоПрименения;
	ИначеЕсли Значение = "Суда" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.Суда;
	ИначеЕсли Значение = "Автомобили/автомобильные прицепы" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.АвтомобилиАвтомобильныеПрицепы;
	ИначеЕсли Значение = "Вагоны" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.Вагоны;
	ИначеЕсли Значение = "Воздушный транспорт" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.ВоздушныйТранспорт;
	ИначеЕсли Значение = "(иные) Складские помещения (склады, хранилища, силосы)" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.СкладскиеПомещения;
	ИначеЕсли Значение = "(иные) Производственные помещения" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.ПроизводственныеПомещения;
	ИначеЕсли Значение = "Земли несельскохозяйственного назначения" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.ЗемлиСельскохозяйственногоНазначения;
	ИначеЕсли Значение = "Иное" Тогда
		Возврат Перечисления.ТипыМестПримененияСАТУРН.Иное;
	
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный тип места применения %1'"), Значение);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Авторизация

Функция ПолучитьТокенАвторизации(Логин, КлючАвторизации, Идентификатор) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТокенАвторизации", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",      "");
	ВозвращаемоеЗначение.Вставить("РезультатЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",         Перечисления.ВидыОперацийСАТУРН.ГенерацияТокенаАвторизации);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("op",     "startAuth");
	ТелоЗапроса.Вставить("domain", "vetis");
	ТелоЗапроса.Вставить("login",  Логин);
	ТелоЗапроса.Вставить("reqid",  Идентификатор);
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(Истина),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	ВозвращаемоеЗначение.РезультатЗапроса = РезультатЗапроса;
	
	РезультатОтправкиЗапроса = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатЗапроса);
	Если РезультатОтправкиЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатОтправкиЗапроса.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.ТокенАвторизации = СтрШаблон("SEAPISID:%1",
		НРег(ПолучитьHexСтрокуИзДвоичныхДанных(
			ИнтеграцияИС.ХешированиеДанныхSHA256(
				СтрШаблон("%1.%2", РезультатОтправкиЗапроса.Объект.salt, КлючАвторизации), Ложь))));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродлитьТокенАвторизации(Логин, ТокенАвторизации, Идентификатор) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДействуетДо",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",      "");
	ВозвращаемоеЗначение.Вставить("РезультатЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",         Перечисления.ВидыОперацийСАТУРН.ПодтверждениеТокенаАвторизации);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("op",     "approveSID");
	ТелоЗапроса.Вставить("domain", "vetis");
	ТелоЗапроса.Вставить("login",  Логин);
	ТелоЗапроса.Вставить("reqid",  Идентификатор);
	ТелоЗапроса.Вставить("sid",    ТокенАвторизации);
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(Истина),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	ВозвращаемоеЗначение.РезультатЗапроса = РезультатЗапроса;
	
	РезультатОтправкиЗапроса = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатЗапроса);
	Если РезультатОтправкиЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатОтправкиЗапроса.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	// Формат даты: 2023-01-03 04:04:40.300
	// Преобразуем формат к: 2023-01-03T04:04:40+03:00
	Если Сред(РезультатОтправкиЗапроса.Объект.validTo, 5, 1) = "-"
		И Сред(РезультатОтправкиЗапроса.Объект.validTo, 11, 1) = " " Тогда
		ВозвращаемоеЗначение.ДействуетДо = УниверсальноеВремя(
			ОбщегоНазначенияИС.ДатаИзСтрокиISO(
				СтрЗаменить(Лев(РезультатОтправкиЗапроса.Объект.validTo, 19), " ", "T") + "+03:00"));
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает статус версионного объекта по коду
//
// Параметры:
//  Значение - Число - код статуса
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбъектовСАТУРН - статус
//
Функция Статус(Значение) Экспорт
	
	Статус = Неопределено;
	
	Если Значение = "actual" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Актуально;
	ИначеЕсли Значение = "archived" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Архив;
	ИначеЕсли Значение = "canceled" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Отменен;
	ИначеЕсли Значение = "draft" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Черновик;
	
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Актуально Тогда
		Статус = "actual";
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Архив Тогда
		Статус = "archived";
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Отменен Тогда
		Статус = "canceled";
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Черновик Тогда
		Статус = "draft";
		
	Иначе
		Статус = Перечисления.СтатусыОбъектовСАТУРН.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус с кодом: %1'"),
				Значение));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусИмпортаПродукции(Значение) Экспорт
	
	Статус = Неопределено;
	
	Если Значение = "received" Тогда
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено;
	ИначеЕсли Значение = "imported" Тогда
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ввезено;
	ИначеЕсли Значение = "canceled" Тогда
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен;
	ИначеЕсли Значение = "archived" Тогда
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Архив;
	
	ИначеЕсли Значение = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено Тогда
		Статус = "received";
	ИначеЕсли Значение = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ввезено Тогда
		Статус = "imported";
	ИначеЕсли Значение = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен Тогда
		Статус = "canceled";
	ИначеЕсли Значение = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Архив Тогда
		Статус = "archived";
		
	Иначе
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус с кодом: %1'"),
				Значение));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусНакладной(Значение) Экспорт
	
	Статус = Неопределено;
	
	Если Значение = "onWay" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути;
	ИначеЕсли Значение = "onReturning" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату;
	ИначеЕсли Значение = "returned" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен;
	ИначеЕсли Значение = "lost" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Утрачен;
	ИначеЕсли Значение = "delivered" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен;
//	ИначеЕсли Значение = "onStore" Тогда
//		Отвественное хранение, отключен
	ИначеЕсли Значение = "onRetailSale" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю;
	ИначеЕсли Значение = "onIndustrSale" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность;
	ИначеЕсли Значение = "onExportSent" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.НаправленНаЭкспорт;
	ИначеЕсли Значение = "onDestroy" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию;
	ИначеЕсли Значение = "canceled" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Отменен;
	ИначеЕсли Значение = "draft" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик;
	ИначеЕсли Значение = "archived" Тогда
		Статус = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Архив;
	Иначе
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус с кодом: %1'"),
				Значение));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусИмпортируемойПродукции(Значение) Экспорт
	
	Статус = Неопределено;
	
	Если Значение = "received" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Актуально;
	ИначеЕсли Значение = "imported" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Черновик;
	ИначеЕсли Значение = "canceled" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Отменен;
	ИначеЕсли Значение = "archived" Тогда
		Статус = Перечисления.СтатусыОбъектовСАТУРН.Архив;
	
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Актуально Тогда
		Статус = "received";
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Черновик Тогда
		Статус = "imported";
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Отменен Тогда
		Статус = "canceled";
	ИначеЕсли Значение = Перечисления.СтатусыОбъектовСАТУРН.Архив Тогда
		Статус = "archived";
		
	Иначе
		Статус = Перечисления.СтатусыОбъектовСАТУРН.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный статус с кодом: %1'"),
				Значение));
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ВидПродукции(Значение) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если Значение = "P" Тогда
		ВозвращаемоеЗначение = Перечисления.ВидыПродукцииСАТУРН.Пестицид;
	ИначеЕсли Значение = "A" Тогда
		ВозвращаемоеЗначение = Перечисления.ВидыПродукцииСАТУРН.Агрохимикат;
	ИначеЕсли Значение = "T" Тогда
		ВозвращаемоеЗначение = Перечисления.ВидыПродукцииСАТУРН.Тукосмесь;
	ИначеЕсли Значение = "K" Тогда
		ВозвращаемоеЗначение = Перечисления.ВидыПродукцииСАТУРН.Комбипак;
	
	ИначеЕсли Значение = Перечисления.ВидыПродукцииСАТУРН.Пестицид Тогда
		ВозвращаемоеЗначение = "P";
	ИначеЕсли Значение = Перечисления.ВидыПродукцииСАТУРН.Агрохимикат Тогда
		ВозвращаемоеЗначение = "A";
	ИначеЕсли Значение = Перечисления.ВидыПродукцииСАТУРН.Тукосмесь Тогда
		ВозвращаемоеЗначение = "T";
	ИначеЕсли Значение = Перечисления.ВидыПродукцииСАТУРН.Комбипак Тогда
		ВозвращаемоеЗначение = "K";
	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип ПАТ: %1'"),
				Значение));
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТипИзмеряемойВеличины(Значение) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если Значение = "KG" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес;
	ИначеЕсли Значение = "L" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем;
	
	ИначеЕсли Значение = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес Тогда
		ВозвращаемоеЗначение = "KG";
	ИначеЕсли Значение = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем Тогда
		ВозвращаемоеЗначение = "L";
	Иначе
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип измеряемой величины: %1'"),
				Значение));
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДатаИзСтрокиISO(ЗНАЧ Значение) Экспорт
	
	Значение = СокрЛП(Значение);
	
	ДлинаСтроки = СтрДлина(Значение);
	ЕстьТ       = (СтрНайти(Значение, "T") > 0);
	Если ЗначениеЗаполнено(Значение)
		И ДлинаСтроки < 25 Тогда
		Если ДлинаСтроки = 19 И ЕстьТ Тогда
			Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		ИначеЕсли ДлинаСтроки = 16 И ЕстьТ > 0 И Прав(Значение, 6) = "T00:00" Тогда
			Возврат ПрочитатьДатуJSON(Значение + ":00", ФорматДатыJSON.ISO);
		Иначе
			Возврат ОбщегоНазначенияИС.ДатаИзСтрокиISO(СтрЗаменить(Значение, "+", ":00+"));
		КонецЕсли;
	ИначеЕсли СтрДлина(Значение) = 25 Тогда
		Возврат ОбщегоНазначенияИС.ДатаИзСтрокиISO(Значение);
	ИначеЕсли ЕстьТ Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO)
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

Функция ТипХозяйствующегоСубъекта(Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение)
		Или Значение = "0" Тогда
		Возврат Перечисления.ТипыОрганизацийСАТУРН.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ИнтеграцияСАТУРН.ТипОрганизации(Число(Значение));
	
КонецФункции

Функция ДанныеОрганизации(ЭлементДанных) Экспорт
	
	Возврат Справочники.КлассификаторОрганизацийСАТУРН.ДанныеОбъекта(ЭлементДанных);
	
КонецФункции

Функция ДанныеМестаХранения(ЭлементДанных) Экспорт
	
	Возврат Справочники.МестаХраненияСАТУРН.ДанныеОбъекта(ЭлементДанных);
	
КонецФункции

Функция ДанныеМестаПрименения(ЭлементДанных) Экспорт
	
	Возврат Справочники.МестаПримененияСАТУРН.ДанныеОбъекта(ЭлементДанных);
	
КонецФункции

Функция ДанныеПАТ(ЭлементДанных) Экспорт
	
	Возврат Справочники.КлассификаторПАТСАТУРН.ДанныеОбъекта(ЭлементДанных);
	
КонецФункции

Функция ДанныеПартии(ЭлементДанных) Экспорт

	Возврат Справочники.ПартииСАТУРН.ДанныеОбъекта(ЭлементДанных);

КонецФункции

Функция ДанныеИмпортируемойПартии(ЭлементДанных) Экспорт
	
	Возврат Справочники.ИмпортируемаяПартияСАТУРН.ДанныеОбъекта(ЭлементДанных);
	
КонецФункции

// Список контрагентов.
// 
// Параметры:
//  ПараметрыПоиска - Структура - Параметры поиска
//  НомерСтраницы - Число - Номер страницы
//  КоличествоЭлементовНаСтранице - Число - Количество элементов на странице
// 
// Возвращаемое значение:
//  Структура - Список контрагентов:
// * Список - Неопределено, Массив из Произвольный - список полученных структур данных
// * ТекстОшибки - Строка - описание ошибки получения данных в САТУРН
// * ПараметрыОбмена - см. ИнтеграцияСАТУРН.ПараметрыОбмена
Функция СписокКонтрагентов(ПараметрыПоиска, НомерСтраницы, КоличествоЭлементовНаСтранице) Экспорт
	
	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();
	
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;
	
	Операция = Справочники.КлассификаторОрганизацийСАТУРН.ОперацияЗагрузкиКлассификатора();
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",      ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);
	
	Если НомерСтраницы > 1 Тогда
		ПозицияПервогоЭлемента = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	Иначе
		ПозицияПервогоЭлемента = 0;
	КонецЕсли;
	
	getFullCards = 0;
	Если ПараметрыПоиска.Свойство("РасширенныйСоставДанных")
		И ПараметрыПоиска.РасширенныйСоставДанных Тогда
		getFullCards = 1;
	КонецЕсли;
	
	ТелоЗапроса.Вставить("opargs", Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          ПозицияПервогоЭлемента);
	ТелоЗапроса.opargs.Вставить("size",         КоличествоЭлементовНаСтранице);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);
	
	Отборы = Новый Массив;
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.Идентификатор);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("GUID") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "sys_guid");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.GUID);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("НаименованиеПолное") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "name");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.НаименованиеПолное + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ИНН") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "INN");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.ИНН);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("КПП") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "KPP");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.КПП);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ОГРН") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "OGRN");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.ОГРН);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ФИО") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "personFio");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.ФИО);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	
	ВидАдреса = Неопределено;
	ПараметрыПоиска.Свойство("ВидАдреса", ВидАдреса);
	
	Если ВидАдреса = Неопределено Тогда
		ВидАдреса = "legalAddress";
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ДанныеАдреса") Тогда
		
		Если ПараметрыПоиска.ДанныеАдреса.ТипАдреса = "ВСвободнойФорме" Тогда
			
			Если ЗначениеЗаполнено(ПараметрыПоиска.АдресПредставление) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", ВидАдреса);
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.АдресПредставление + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
		Иначе
			
			АдресРазобран = Ложь;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Регион")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Регион) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", ВидАдреса);
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Регион + "%");
				Отборы.Добавить(Отбор);
				АдресРазобран = Истина;
			КонецЕсли;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Город")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Город) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", ВидАдреса);
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Город + "%");
				Отборы.Добавить(Отбор);
				АдресРазобран = Истина;
			КонецЕсли;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Район")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Район) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", ВидАдреса);
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Район + "%");
				Отборы.Добавить(Отбор);
				АдресРазобран = Истина;
			КонецЕсли;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Улица")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Улица) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", ВидАдреса);
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Улица + "%");
				Отборы.Добавить(Отбор);
				АдресРазобран = Истина;
			КонецЕсли;
			
			Если Не АдресРазобран Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", ВидАдреса);
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Представление + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отборы.Количество() > 0 Тогда
		ТелоЗапроса.opargs.Вставить("filters", Отборы);
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Список мест хранения.
// 
// Параметры:
//  ПараметрыПоиска - Структура - Параметры поиска
//  НомерСтраницы - Число - Номер страницы
//  КоличествоЭлементовНаСтранице - Число - Количество элементов на странице
// 
// Возвращаемое значение:
//  Структура - Список мест хранения:
// * Список - Неопределено, Массив из Произвольный - список полученных структур данных
// * ТекстОшибки - Строка - описание ошибки получения данных в САТУРН
// * ПараметрыОбмена - см. ИнтеграцияСАТУРН.ПараметрыОбмена
Функция СписокМестХранения(ПараметрыПоиска, НомерСтраницы, КоличествоЭлементовНаСтранице) Экспорт
	
	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();
	
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;
	
	Операция = Справочники.МестаХраненияСАТУРН.ОперацияЗагрузкиКлассификатора();
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",      ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);
	
	Если НомерСтраницы > 1 Тогда
		ПозицияПервогоЭлемента = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	Иначе
		ПозицияПервогоЭлемента = 0;
	КонецЕсли;
	
	РасширенныйСоставДанных = Ложь;
	getFullCards            = 0;
	
	Если ПараметрыПоиска.Свойство("РасширенныйСоставДанных")
		И ПараметрыПоиска.РасширенныйСоставДанных Тогда
		
		getFullCards            = 1;
		РасширенныйСоставДанных = Истина;
		
	КонецЕсли;
	
	ТелоЗапроса.Вставить("opargs", Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          ПозицияПервогоЭлемента);
	ТелоЗапроса.opargs.Вставить("size",         КоличествоЭлементовНаСтранице);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);
	
	Отборы = Новый Массив;
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.Идентификатор);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("GUID") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "sys_guid");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.GUID);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Наименование") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "name");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.Наименование + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ИдентификаторОрганизации") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "ownerId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.ИдентификаторОрганизации);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Организация") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "ownerId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПоиска.Организация, "Идентификатор"));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ЭтоПроизводственнаяПлощадка") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "isProducingStoreArea");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначенияИС.ОбъектВТекстJSON(ПараметрыПоиска.ЭтоПроизводственнаяПлощадка));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ЭтоСкладВременногоХранения") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "isTempStoringArea");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначенияИС.ОбъектВТекстJSON(ПараметрыПоиска.ЭтоСкладВременногоХранения));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("БезПодтипов") Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("column", "isProducingStoreArea");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначенияИС.ОбъектВТекстJSON(Ложь));
		Отборы.Добавить(Отбор);
		
		Отбор = Новый Структура;
		Отбор.Вставить("column", "isTempStoringArea");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначенияИС.ОбъектВТекстJSON(Ложь));
		Отборы.Добавить(Отбор);
		
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Статус") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "lcState");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", Статус(ПараметрыПоиска.Статус));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	
	Если ПараметрыПоиска.Свойство("ДанныеАдреса") Тогда
		
		Если ПараметрыПоиска.ДанныеАдреса.ТипАдреса = "ВСвободнойФорме" Тогда
			
			Если ЗначениеЗаполнено(ПараметрыПоиска.АдресПредставление) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", "addr");
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.АдресПредставление + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Регион")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Регион) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", "addr");
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Регион + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Город")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Город) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", "addr");
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Город + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Район")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Район) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", "addr");
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Район + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
			Если ПараметрыПоиска.ДанныеАдреса.Свойство("Улица")
				И ЗначениеЗаполнено(ПараметрыПоиска.ДанныеАдреса.Улица) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("column", "addr");
				Отбор.Вставить("condition", "like");
				Отбор.Вставить("value", "%" + ПараметрыПоиска.ДанныеАдреса.Улица + "%");
				Отборы.Добавить(Отбор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отборы.Количество() > 0 Тогда
		ТелоЗапроса.opargs.Вставить("filters", Отборы);
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса,, РасширенныйСоставДанных);
	
	Возврат Результат;
	
КонецФункции

// Список мест применения.
// 
// Параметры:
//  ПараметрыПоиска - Структура - Параметры поиска
//  НомерСтраницы - Число - Номер страницы
//  КоличествоЭлементовНаСтранице - Число - Количество элементов на странице
// 
// Возвращаемое значение:
//  Структура - Список мест применения:
// * Список - Неопределено, Массив из Произвольный - список полученных структур данных
// * ТекстОшибки - Строка - описание ошибки получения данных в САТУРН
// * ПараметрыОбмена - см. ИнтеграцияСАТУРН.ПараметрыОбмена
Функция СписокМестПрименения(ПараметрыПоиска, НомерСтраницы, КоличествоЭлементовНаСтранице) Экспорт
	
	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();
	
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;
	
	Операция = Справочники.МестаПримененияСАТУРН.ОперацияЗагрузкиКлассификатора();
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",      ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);
	
	Если НомерСтраницы > 1 Тогда
		ПозицияПервогоЭлемента = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	Иначе
		ПозицияПервогоЭлемента = 0;
	КонецЕсли;
	
	getFullCards            = 0;
	РасширенныйСоставДанных = Ложь;

	Если ПараметрыПоиска.Свойство("РасширенныйСоставДанных")
		И ПараметрыПоиска.РасширенныйСоставДанных Тогда

		getFullCards            = 1;
		РасширенныйСоставДанных = Истина;

	КонецЕсли;
	
	ТелоЗапроса.Вставить("opargs", Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          ПозицияПервогоЭлемента);
	ТелоЗапроса.opargs.Вставить("size",         КоличествоЭлементовНаСтранице);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);
	
	Отборы = Новый Массив;
	Если ПараметрыПоиска.Свойство("Наименование") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "name");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.Наименование + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ИдентификаторОрганизации") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "managingContractorId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.ИдентификаторОрганизации);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Организация") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "managingContractorId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПоиска.Организация, "Идентификатор"));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Статус") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "lcState");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", Статус(ПараметрыПоиска.Статус));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.Идентификатор);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("КадастровыйНомер") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "cadRegNum");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.КадастровыйНомер);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	
	Если Отборы.Количество() > 0 Тогда
		ТелоЗапроса.opargs.Вставить("filters", Отборы);
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	ИсключитьДанныеПоднадзорныхОбъектов = Ложь;
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса, ИсключитьДанныеПоднадзорныхОбъектов, РасширенныйСоставДанных);
	
	Возврат Результат;
	
КонецФункции

Функция СписокИнвентаризаций(getFullCards = 1) Экспорт
	
	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   "Inventorization");
	ТелоЗапроса.Вставить("op",      "static/getList()");
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);
	
	ТелоЗапроса.Вставить("opargs", Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          1);
	ТелоЗапроса.opargs.Вставить("size",         100);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);
	
	//ТелоЗапроса.opargs.Вставить("filters", Новый Структура);
	//ТелоЗапроса.opargs.filters.Вставить("column", "name");
	//ТелоЗапроса.opargs.filters.Вставить("condition", "like");
	//ТелоЗапроса.opargs.filters.Вставить("value", "%овая%");
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса);
	
	Возврат Результат;
	
КонецФункции

// Список ПАТ.
// 
// Параметры:
//  ПараметрыПоиска - Структура - Параметры поиска
//  НомерСтраницы - Число - Номер страницы
//  КоличествоЭлементовНаСтранице - Число - Количество элементов на странице
// 
// Возвращаемое значение:
//  Структура - Список мест применения:
// * Список - Неопределено, Массив из Произвольный - список полученных структур данных
// * ТекстОшибки - Строка - описание ошибки получения данных в САТУРН
// * ПараметрыОбмена - см. ИнтеграцияСАТУРН.ПараметрыОбмена
Функция СписокПАТ(ПараметрыПоиска, НомерСтраницы, КоличествоЭлементовНаСтранице) Экспорт
	
	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();
	
	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;
	
	Операция = Справочники.КлассификаторПАТСАТУРН.ОперацияЗагрузкиКлассификатора();
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",      ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);
	
	Если НомерСтраницы > 1 Тогда
		ПозицияПервогоЭлемента = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	Иначе
		ПозицияПервогоЭлемента = 0;
	КонецЕсли;
	
	getFullCards            = 0;
	РасширенныйСоставДанных = Ложь;
	
	Если ПараметрыПоиска.Свойство("РасширенныйСоставДанных")
		И ПараметрыПоиска.РасширенныйСоставДанных Тогда
		
		getFullCards            = 1;
		РасширенныйСоставДанных = Истина;
		
	КонецЕсли;
	
	ТелоЗапроса.Вставить("opargs", Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          ПозицияПервогоЭлемента);
	ТелоЗапроса.opargs.Вставить("size",         КоличествоЭлементовНаСтранице);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);
	
	Отборы = Новый Массив;
	Если ПараметрыПоиска.Свойство("Наименование") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "name");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.Наименование + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.Идентификатор);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ВидПродукции") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "type");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ВидПродукции(ПараметрыПоиска.ВидПродукции));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Статус") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "lcState");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", Статус(ПараметрыПоиска.Статус));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Группа") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "group");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.Группа + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Регистрант") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "registrant");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.Регистрант + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;

	Если Отборы.Количество() > 0 Тогда
		ТелоЗапроса.opargs.Вставить("filters", Отборы);
	КонецЕсли;

	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());

	ИсключитьДанныеПоднадзорныхОбъектов = Ложь;
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса, ИсключитьДанныеПоднадзорныхОбъектов, РасширенныйСоставДанных);

	Возврат Результат;

КонецФункции

// Список партий.
//
// Параметры:
//  ПараметрыПоиска - Структура - Параметры поиска
//  НомерСтраницы - Число - Номер страницы
//  КоличествоЭлементовНаСтранице - Число - Количество элементов на странице
//
// Возвращаемое значение:
//  Структура - Список мест применения:
// * Список - Неопределено, Массив из Произвольный - список полученных структур данных
// * ТекстОшибки - Строка - описание ошибки получения данных в САТУРН
// * ПараметрыОбмена - см. ИнтеграцияСАТУРН.ПараметрыОбмена
Функция СписокПартий(ПараметрыПоиска, НомерСтраницы, КоличествоЭлементовНаСтранице) Экспорт

	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();

	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;

	Операция = Справочники.ПартииСАТУРН.ОперацияЗагрузкиКлассификатора();

	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",      ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);

	Если НомерСтраницы > 1 Тогда
		ПозицияПервогоЭлемента = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	Иначе
		ПозицияПервогоЭлемента = 0;
	КонецЕсли;

	getFullCards            = 0;
	РасширенныйСоставДанных = Ложь;

	Если ПараметрыПоиска.Свойство("РасширенныйСоставДанных")
		И ПараметрыПоиска.РасширенныйСоставДанных Тогда

		getFullCards            = 1;
		РасширенныйСоставДанных = Истина;

	КонецЕсли;

	ТелоЗапроса.Вставить("opargs",              Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          ПозицияПервогоЭлемента);
	ТелоЗапроса.opargs.Вставить("size",         КоличествоЭлементовНаСтранице);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);

	Отборы = Новый Массив;
	Если ПараметрыПоиска.Свойство("Наименование") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "name");
		Отбор.Вставить("condition", "like");
		Отбор.Вставить("value", "%" + ПараметрыПоиска.Наименование + "%");
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.Идентификатор);
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("Статус") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "lcState");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", Статус(ПараметрыПоиска.Статус));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ПАТ") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "patProductId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПоиска.ПАТ, "Идентификатор"));
		Отборы.Добавить(Отбор);
	КонецЕсли;
	Если ПараметрыПоиска.Свойство("ИдентификаторПАТ") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "patProductId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.ИдентификаторПАТ);
		Отборы.Добавить(Отбор);
	КонецЕсли;

	Если Отборы.Количество() > 0 Тогда
		ТелоЗапроса.opargs.Вставить("filters", Отборы);
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	ИсключитьДанныеПоднадзорныхОбъектов = Ложь;
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса, ИсключитьДанныеПоднадзорныхОбъектов, РасширенныйСоставДанных);
	
	Возврат Результат;
	
КонецФункции

Функция СписокИмпортируемыхПартий(ПараметрыПоиска, НомерСтраницы, КоличествоЭлементовНаСтранице) Экспорт

	ДанныеКлючаСессии = ИнтеграцияСАТУРН.ПолучитьКлючСессии();

	Если Не ЗначениеЗаполнено(ДанныеКлючаСессии.ТокенАвторизации) Тогда
		ОбщегоНазначения.СообщитьПользователю(ДанныеКлючаСессии.ТекстОшибки);
	КонецЕсли;

	Операция = Справочники.ИмпортируемаяПартияСАТУРН.ОперацияЗагрузкиКлассификатора();

	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("com",     "execOperation");
	ТелоЗапроса.Вставить("otype",   ИмяКлассаСущности(Операция));
	ТелоЗапроса.Вставить("op",      ИмяОперации(Операция));
	ТелоЗапроса.Вставить("sid",     ДанныеКлючаСессии.ТокенАвторизации);

	Если НомерСтраницы > 1 Тогда
		ПозицияПервогоЭлемента = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	Иначе
		ПозицияПервогоЭлемента = 0;
	КонецЕсли;

	getFullCards            = 0;
	РасширенныйСоставДанных = Ложь;

	Если ПараметрыПоиска.Свойство("РасширенныйСоставДанных")
		И ПараметрыПоиска.РасширенныйСоставДанных Тогда

		getFullCards            = 1;
		РасширенныйСоставДанных = Истина;

	КонецЕсли;

	ТелоЗапроса.Вставить("opargs",              Новый Структура);
	ТелоЗапроса.opargs.Вставить("pos",          ПозицияПервогоЭлемента);
	ТелоЗапроса.opargs.Вставить("size",         КоличествоЭлементовНаСтранице);
	ТелоЗапроса.opargs.Вставить("getFullCards", getFullCards);

	Отборы = Новый Массив;
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыПоиска.Идентификатор);
		Отборы.Добавить(Отбор);
	КонецЕсли;

	Если Отборы.Количество() > 0 Тогда
		ТелоЗапроса.opargs.Вставить("filters", Отборы);
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
		АдресРесурса(),
		ТелоЗапроса,
		ПараметрыОтправкиHTTPЗапросов());
	
	ИсключитьДанныеПоднадзорныхОбъектов = Ложь;
	Результат = ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса, ИсключитьДанныеПоднадзорныхОбъектов, РасширенныйСоставДанных);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСВнешнимиСервисами

Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		HTTPЗапрос.АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

// Вывести HTTP-Запрос в лог
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос для вывода в файл.
//             - HTTPОтвет  - HTTP-ответ для вывода в файл.
//  ПутьКФайлу - Строка - Путь к файлу для записи лога.
//
// Возвращаемое значение:
//  Строка - Представление протокола
Функция ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу = Неопределено, ТекстОшибки = "") Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Если HTTPЗапрос <> Неопределено Тогда
		Если ТипЗнч(HTTPЗапрос) = Тип("HTTPЗапрос") Тогда
			
			Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
				ТекстовыйДокумент.ДобавитьСтроку("");
			КонецЕсли;
			
			URLЗапроса = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
			
			ТекстовыйДокумент.ДобавитьСтроку(URLЗапроса);
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("HTTPОтвет") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
			ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Код состояния: %1", HTTPЗапрос.КодСостояния));
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
			ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Запрос проксирован через сервис интернет-поддержки'"));
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			
			ЗначениеЗаголовка = КлючИЗначение.Значение;
			
			ТекстовыйДокумент.ДобавитьСтроку(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, ЗначениеЗаголовка));
			
		КонецЦикла;
		
		Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
			Тело = HTTPЗапрос.Тело;
		Иначе
			Тело = HTTPЗапрос.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если Не ПустаяСтрока(Тело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Тело);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ТекстОшибки);
	КонецЕсли;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

Функция ПолучитьДанныеИзСервиса(АдресЗапроса, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовокHTTP.Вставить("Cache-Control",  "no-cache");
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,
			"admin","qazwsx",
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса GET %1 в %2 %3:%4'"),
				АдресЗапроса,
				ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
				ПараметрыОтправкиHTTPЗапросов.Сервер,
				ПараметрыОтправкиHTTPЗапросов.Порт) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	HTTPМетод = "GET";
	
	ПараметрыЛогированияЗапросов   = ЛогированиеЗапросовСАТУРН.ПараметрыЛогированияЗапросов();
	ДанныеЗаписи                   = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPМетод         = HTTPМетод;
	ДанныеЗаписи.HTTPЗапросОтвет   = HTTPЗапрос;
	ДанныеЗаписи.АдресРесурса      = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, ДанныеЗаписи.HTTPМетод);
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ПараметрыОтправкиHTTPЗапросов.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	HTTPМетод = "POST";
	
	ЭтоДвоичныеДанные = ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные");
	ЭтоФайл           = ТипЗнч(ТелоЗапроса) = Тип("Файл");
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено И Не ЭтоДвоичныеДанные И Не ЭтоФайл Тогда
		ТелоЗапросаJSON = ОбщегоНазначенияИС.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовокHTTP.Вставить("Date",           ИнтеграцияИС.ДатаСЧасовымПоясом(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	Если ТелоЗапроса <> Неопределено Тогда
		Если ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		ИначеЕсли ЭтоФайл Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,
			ПараметрыОтправкиHTTPЗапросов.АвторизацияHTTPТестовыйКонтурЛогин,
			ПараметрыОтправкиHTTPЗапросов.АвторизацияHTTPТестовыйКонтурПароль,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'САТУРН'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса POST %1 в ФГИС ""Сатурн"" %2'"),
				АдресЗапроса, АдресСервера()) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПараметрыЛогированияЗапросов   = ЛогированиеЗапросовСАТУРН.ПараметрыЛогированияЗапросов();
	ДанныеЗаписи                   = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPМетод         = HTTPМетод;
	ДанныеЗаписи.HTTPЗапросОтвет   = HTTPЗапрос;
	ДанныеЗаписи.АдресРесурса      = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, ДанныеЗаписи.HTTPМетод);
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ПараметрыОтправкиHTTPЗапросов.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

Функция ФорматироватьЛогЗапросов(ИсходныйТекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Если КоличествоСтрок = 0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	Для СмещениеСКонца = 0 По КоличествоСтрок - 1 Цикл
		
		НомерСтрокиСКонца = КоличествоСтрок - СмещениеСКонца;
		ТекущаяСтрока     = ТекстовыйДокумент.ПолучитьСтроку(НомерСтрокиСКонца);
		ДанныеСтроки      = Новый Массив();
		Если СтрНачинаетсяС(ТекущаяСтрока, "{")
			Или СтрНачинаетсяС(ТекущаяСтрока, "[") Тогда
			Попытка
				ДанныеСтроки.Добавить(ОбщегоНазначенияИС.ФорматироватьJSON(ТекущаяСтрока));
			Исключение
				Продолжить;
			КонецПопытки;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстовыйДокумент.УдалитьСтроку(НомерСтрокиСКонца);
		ТекстовыйДокумент.ВставитьСтроку(НомерСтрокиСКонца, СтрСоединить(ДанныеСтроки, Символы.ПС));
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СлужебныеПоля(ИсключитьДанныеПоднадзорныхОбъектов = Истина, ВключитьДатыИзменения = Истина) Экспорт
	
	СлужебныеПоля = Новый Соответствие();
	СлужебныеПоля.Вставить("_FORMAT",     Истина);
	СлужебныеПоля.Вставить("_FORMAT_VER", Истина);
	СлужебныеПоля.Вставить("_guid",       Истина);
	
	СлужебныеПоля.Вставить("sys_timeTo",        Истина);
	СлужебныеПоля.Вставить("sys_authorId",      Истина);
	СлужебныеПоля.Вставить("sys_note",          Истина);
	СлужебныеПоля.Вставить("sys_ver",           Истина);
	
	Если Не ВключитьДатыИзменения Тогда
		СлужебныеПоля.Вставить("sys_timeFrom",      Истина); // Есть при getFullCards = 0
		СлужебныеПоля.Вставить("sys_changedAt",     Истина); // Есть при getFullCards = 0
		СлужебныеПоля.Вставить("sys_guid",          Истина); // Есть при getFullCards = 0
	КонецЕсли;
	
	СлужебныеПоля.Вставить("sys_ownerClass",    Истина);
	СлужебныеПоля.Вставить("sys_ownerId",       Истина);
	СлужебныеПоля.Вставить("sys_ownerListName", Истина);
	СлужебныеПоля.Вставить("sys_order",         Истина);
	СлужебныеПоля.Вставить("sys_recSource",     Истина);
	
	СлужебныеПоля.Вставить("sys_rwx_ownerClass",      Истина);
	СлужебныеПоля.Вставить("sys_rwx_ownerGroupClass", Истина);
	СлужебныеПоля.Вставить("sys_rwx_ownerGroupIds",   Истина);
	СлужебныеПоля.Вставить("sys_rwx_ownerIds",        Истина);
	
	СлужебныеПоля.Вставить("_raw_owner_class", Истина);
	СлужебныеПоля.Вставить("_raw_owner_id",    Истина);
	
	Если ИсключитьДанныеПоднадзорныхОбъектов Тогда
		СлужебныеПоля.Вставить("uco_allowedActions_csv", Истина);
		СлужебныеПоля.Вставить("uco_areaNumber",         Истина);
		СлужебныеПоля.Вставить("uco_objectNumber",       Истина);
		СлужебныеПоля.Вставить("uco_objectType",         Истина);
	КонецЕсли;
	
	Возврат СлужебныеПоля;
	
КонецФункции

Функция ОбработатьРезультатЗапросаСпискаОбъектов(РезультатЗапроса, ИсключитьДанныеПоднадзорныхОбъектов = Истина, ВернутьПараметрыОбмена = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Список",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",     "");
	ВозвращаемоеЗначение.Вставить("ПараметрыОбмена", Неопределено);
	
	РезультатОтправкиЗапроса = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатЗапроса);
	
	Если РезультатОтправкиЗапроса.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатОтправкиЗапроса.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ВернутьПараметрыОбмена Тогда
		ПараметрыОбмена = ИнтеграцияСАТУРН.ПараметрыОбмена();
	Иначе
		ПараметрыОбмена = Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение.Список = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(
		РезультатОтправкиЗапроса.Объект, ПараметрыОбмена, ИсключитьДанныеПоднадзорныхОбъектов);
	ВозвращаемоеЗначение.ПараметрыОбмена = ПараметрыОбмена;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультатОтправкиЗапросаКорректен(ТекстОшибки, РезультатОтправкиЗапроса, ВозвращаемоеЗначение) Экспорт
	
	Если РезультатОтправкиЗапроса.КодСостояния <> 200 Тогда
		ВозвращаемоеЗначение.Вставить("КодОшибки", РезультатОтправкиЗапроса.КодСостояния);
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = '%1.
			           |Текст ошибки: Код состояния HTTP-запроса: %2'"), ТекстОшибки, РезультатОтправкиЗапроса.КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РезультатОтправкиЗапроса.Объект.Свойство("resCode") Тогда
		ВозвращаемоеЗначение.Вставить("КодОшибки", Неопределено);
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1.
			               |Текст ошибки: Формат данных отличается от ожидаемого'"), ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РезультатОтправкиЗапроса.Объект.Свойство("resCode")
		Или РезультатОтправкиЗапроса.Объект.resCode < 0 Тогда
		ВозвращаемоеЗначение.Вставить("КодОшибки", РезультатОтправкиЗапроса.Объект.resCode);
		Если РезультатОтправкиЗапроса.Объект.Свойство("resMsg") Тогда
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = '%1.
			           |Текст ошибки: %2 (Код ошибки: %3)
			           |%4'"),
			ТекстОшибки,
			РезультатОтправкиЗапроса.Объект.resDescription,
			РезультатОтправкиЗапроса.Объект.resCode,
			РезультатОтправкиЗапроса.Объект.resMsg);
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = '%1.
			           |Текст ошибки: %2 (Код ошибки: %3)'"),
			ТекстОшибки,
			РезультатОтправкиЗапроса.Объект.resDescription,
			РезультатОтправкиЗапроса.Объект.resCode);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти