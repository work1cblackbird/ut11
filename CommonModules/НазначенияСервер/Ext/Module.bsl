////////////////////////////////////////////////////////////////
// Модуль "НазначенияСервер" содержит процедуры и функции для 
// работы с назначениями на сервере.
//
////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Заполнение

// Заполняет поле ТипНазначения в строках таблицы
//
// Параметры:
//  Таблица             - ДанныеФормыКоллекция - обрабатываемая таблица
//  Строки              - Массив из ДанныеФормыЭлементКоллекции - массив обрабатываемых строк
//                      - Неопределено
//  ПараметрыЗаполнения - см. НазначенияКлиентСервер.ПараметрыЗаполнения
//
Процедура ЗаполнитьТипНазначенияВТаблице(Таблица, Строки = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	ТипНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки              КАК НомерСтроки,
	|	Таблица.Назначение.ТипНазначения КАК ТипНазначения,
	|	ВЫБОР
	|		КОГДА Таблица.Назначение.ТипНазначения = &ТипНазначения
	|				ТОГДА &СтрокаТипНазначенияИмяЗаполняемогоПоля
	|		ИНАЧЕ &СтрокаТипНазначения
	|	КОНЕЦ                            КАК ЗаполняемыеПоля,
	|	&ЗначениеПоля                    КАК СинонимЗаполняемогоПоля
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	ЕСТЬNULL(Таблица.Назначение.ТипНазначения, ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ПустаяСсылка)) <> Таблица.ТипНазначения
	|";
	
	ТипНазначения = Null;
	ЗначениеПоля  = Null;
	Колонки       = "НомерСтроки, Назначение, ТипНазначения";
	
	СтрокаТипНазначения                    = "ТипНазначения";
	СтрокаТипНазначенияИмяЗаполняемогоПоля = "ТипНазначения, ИмяЗаполняемогоПоля";
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения) Тогда
		
		ТипНазначения = ПараметрыЗаполнения.ТипНазначения;
		ЗначениеПоля  = ПараметрыЗаполнения.ЗначениеПоля;
		ИмяПоляТЧ     = ПараметрыЗаполнения.ИмяПоляТЧ;
		
		СтрокаТипНазначенияИмяЗаполняемогоПоля  =
			СтрЗаменить(СтрокаТипНазначенияИмяЗаполняемогоПоля, "ИмяЗаполняемогоПоля", ПараметрыЗаполнения.ИмяЗаполняемогоПоля);
		
		Запрос.Текст  = СтрЗаменить(Запрос.Текст, "СинонимЗаполняемогоПоля", ПараметрыЗаполнения.ИмяЗаполняемогоПоля);
		
		Если ЗначениеЗаполнено(ИмяПоляТЧ) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗначениеПоля", СтрШаблон("Таблица.%1", ИмяПоляТЧ));
			Колонки      = СтрШаблон("НомерСтроки, Назначение, ТипНазначения, %1", ИмяПоляТЧ);
		КонецЕсли;
		
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица",                                Таблица.Выгрузить(Строки, Колонки));
	Запрос.УстановитьПараметр("ТипНазначения",                          ТипНазначения);
	Запрос.УстановитьПараметр("ЗначениеПоля",                           ЗначениеПоля);
	Запрос.УстановитьПараметр("СтрокаТипНазначения",                    СтрокаТипНазначения);
	Запрос.УстановитьПараметр("СтрокаТипНазначенияИмяЗаполняемогоПоля", СтрокаТипНазначенияИмяЗаполняемогоПоля);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица[Выборка.НомерСтроки - 1], Выборка, Выборка.ЗаполняемыеПоля);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет служебный реквизит "ТипНазначения" в строке по данным указанного назначения
//
// Параметры:
//  ТекущаяСтрока        - Структура            - данные обрабатываемой строки.
//  КэшированныеЗначения - Структура            - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - см. НазначенияКлиентСервер.ПараметрыЗаполнения
//
Процедура ЗаполнитьТипНазначения(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ТипНазначения = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		
		СвойстваНазначение = КэшированныеЗначения.СвойстваНазначений.Получить(ТекущаяСтрока.Назначение);
		
		Если СвойстваНазначение = Неопределено Тогда 
		
			СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(ТекущаяСтрока.Назначение);
			СвойстваНазначение = СвойстваНазначений.Получить(ТекущаяСтрока.Назначение);
				
			КэшированныеЗначения.СвойстваНазначений.Вставить(ТекущаяСтрока.Назначение, СвойстваНазначение);
					
		КонецЕсли;
		
		ТипНазначения = СвойстваНазначение.ТипНазначения;
		
	КонецЕсли;
	
	ТекущаяСтрока.ТипНазначения = ТипНазначения;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения)
	   И ТекущаяСтрока.ТипНазначения = ПараметрыЗаполнения.ТипНазначения Тогда
	
		ТекущаяСтрока[ПараметрыЗаполнения.ИмяЗаполняемогоПоля] = ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ИмяПоляТЧ),
																	ТекущаяСтрока[ПараметрыЗаполнения.ИмяПоляТЧ],
																	ПараметрыЗаполнения.ЗначениеПоля);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор структуры парамтеров встраивания направлений деятельности в документ.
//  Возвращаемое значение:
//   Структура - структура полей:
//    * ИменаТабличныхЧастейДляЗаполненияНазначения - Строка, Неопределено -
//    * ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений - Строка, Неопределено -
//    * УсловияОбработкиСтрок - Соответствие Из Строка -
//    * ЗаполнятьНазначениеВШапке - Булево
//    * ИмяЭлементаФормыОбособленно - Строка, Неопределено -
//    * ИмяГруппыЭлементовКомандыОбособленно - Строка, Неопределено -
//    * ИмяРеквизитаПоЗаказу - Строка, Неопределено -
//    * ВДокументеОпределенаФункцияШаблонНазначения - Булево -
//    * ИменаТаблицЗначенийДляОчисткиНекорректныхНазначений - Строка, Неопределено -
Функция ПорядокЗаполненияНазначенийВДокументе() Экспорт
	
	ПорядокЗаполнения = Новый Структура();
	ПорядокЗаполнения.Вставить("ИменаТабличныхЧастейДляЗаполненияНазначения",          Неопределено);
	ПорядокЗаполнения.Вставить("ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений", Неопределено);
	ПорядокЗаполнения.Вставить("УсловияОбработкиСтрок",                                Новый Соответствие());
	ПорядокЗаполнения.Вставить("ЗаполнятьНазначениеВШапке",                            Ложь);
	ПорядокЗаполнения.Вставить("ИмяЭлементаФормыОбособленно",                          Неопределено);
	ПорядокЗаполнения.Вставить("ИмяГруппыЭлементовКомандыОбособленно",                 Неопределено);
	ПорядокЗаполнения.Вставить("ИмяРеквизитаПоЗаказу",                                 Неопределено);
	ПорядокЗаполнения.Вставить("ВДокументеОпределенаФункцияШаблонНазначения",          Ложь);
	ПорядокЗаполнения.Вставить("ИменаТаблицЗначенийДляОчисткиНекорректныхНазначений",  Неопределено);
	
	Возврат ПорядокЗаполнения;
	
КонецФункции

Функция УсловияОбработкиНазначенийВСтроках(ШаблоныУсловий) Экспорт
	
	Условия = СтрРазделить(ШаблоныУсловий, ",");
	
	УсловияОбработкиСтрок = Новый Массив();
	
	Если Условия.Найти("ТипНоменклатуры") <> Неопределено И Условия.Найти("КодСтроки") <> Неопределено Тогда
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		СтруктураПолей.Вставить("КодСтроки", 0);
		
		УсловияОбработкиСтрок.Добавить(СтруктураПолей);
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Работа);
		СтруктураПолей.Вставить("КодСтроки", 0);
		
		УсловияОбработкиСтрок.Добавить(СтруктураПолей);
		
	ИначеЕсли Условия.Найти("ТипНоменклатуры") <> Неопределено Тогда
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		
		УсловияОбработкиСтрок.Добавить(СтруктураПолей);
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Работа);
		
		УсловияОбработкиСтрок.Добавить(СтруктураПолей);
		
	КонецЕсли;
	
	Возврат УсловияОбработкиСтрок;
	
КонецФункции

// Конструктор структуры по умолчанию для использования в функциях ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности
// модулей менеджеров документов.
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   *ОформляетсяПоЗаказу - Булево - признак, что строки табличных частей могут быть оформлены по заказу.
//   *ЭтоИсточникПотребности - Булево - признак, что документ является документом фиксации обособленной потребности (заказом).
//   *ЕстьНазначениеВТЧ - Булево - признак, что в строках табличных частей есть реквизит назначение.
//   *ВТЧНазначениеОтгрузки - Булево - признак, что в строках табличных частей реквизит назначение используется для указания
//                            назначения отгружаемых товаров и работ, а не принимаемых).
//   *ТабЧасти - Структура - описание табличной части документа, используется для переопределения общих параметров, заданных для
//                           всех табличных частей.
//
Функция СтруктураОбъекта() Экспорт
	
	ФильтрХозОперация = Новый Массив();
	ФильтрХозОперация.Добавить("ОТГРУЗКА");
	ФильтрХозОперация.Добавить("ПОСТУПЛЕНИЕ");
	ОписаниеТабЧасти = Новый Структура("ФильтрХозОперация, ОформляетсяПоЗаказу", ФильтрХозОперация, Истина);
	
	ТабЧасти = Новый Структура();
	ТабЧасти.Вставить("Товары", ОписаниеТабЧасти);
	
	СтруктураОбъекта = Новый Структура();
	СтруктураОбъекта.Вставить("ТабЧасти", ТабЧасти);
	СтруктураОбъекта.Вставить("ОформляетсяПоЗаказу", Истина);
	СтруктураОбъекта.Вставить("ЭтоИсточникПотребности", Ложь);
	СтруктураОбъекта.Вставить("ЕстьНазначениеВТЧ", Истина);
	СтруктураОбъекта.Вставить("ВТЧНазначениеОтгрузки", Ложь);
	
	Возврат СтруктураОбъекта;
	
КонецФункции

//  Используется в формах документов. Заполняет реквизит формы "Отгружать обособленно" табличной части исходя из заполненности назначения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой необходимо инициализировать реквизиты связанные с использованием
//                             направлений деятельности.
//
Процедура ПерезаполнитьСлужебныеРеквизитыТабличнойЧасти(Форма, Устарело = Ложь) Экспорт
	
	Если Устарело Тогда
		ПорядокОбработкиДокумента = Форма.МетаданныеФормы;
	Иначе
		ПорядокОбработкиДокумента = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента;
	КонецЕсли;
	ИмяЭлемента = ПорядокОбработкиДокумента.ИмяЭлементаФормыОбособленно;
	Если ИмяЭлемента <> Неопределено Тогда
		
		ИмяРеквизитаПоЗаказу = ПорядокОбработкиДокумента.ИмяРеквизитаПоЗаказу;
		Кэш = Форма.НаправленияДеятельностиКэшированныеЗначения;
		
		ЭтоНакладнаяПоЗаказу = Форма.Объект[ИмяРеквизитаПоЗаказу];
		ЭтоРеквизитБулевогоТипа = ТипЗнч(ЭтоНакладнаяПоЗаказу) = Тип("Булево");
		
		Если ЗначениеЗаполнено(Кэш.НазначениеПоУмолчанию)
			И (ЭтоРеквизитБулевогоТипа И Не ЭтоНакладнаяПоЗаказу
				Или Не ЭтоРеквизитБулевогоТипа И Не ЗначениеЗаполнено(ЭтоНакладнаяПоЗаказу)) Тогда
			ОбновитьФлагИзНазначенияТабличнойЧасти(Форма, Устарело);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает назначение по направлению деятельности.
//
// Параметры:
//  НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - направление деятельности.
//
// Возвращаемое значение:
//  СправочникСсылка.Назначения - назначение, связанное с направлением деятельности.
//
Функция ТолкающееНазначение(НаправлениеДеятельности) Экспорт
	
	Назначение = Справочники.Назначения.ПустаяСсылка();
	Если ЗначениеЗаполнено(НаправлениеДеятельности) И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаправлениеДеятельности, "УчетЗатрат, Назначение");
		Если Реквизиты.УчетЗатрат Тогда
			
			Назначение = Реквизиты.Назначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Назначение;
	
КонецФункции

#КонецОбласти

#Область ОбщиеОбработчикиСобытийФорм

// Используется в формах документов, в одноименных процедурах "ПриЧтенииСозданииНаСервере".
// Инициализирует реквизиты формы, используемые при интерактивной работе пользователя. Заполняет назначение, исходя из
// направления деятельности.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой необходимо инициализировать реквизиты связанные с использованием
//   направлений деятельности.
//  Устарело - Булево - для совместимости с НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере
//
Процедура ПриЧтенииСозданииНаСервере(Форма, Устарело = Ложь) Экспорт
	
	ОбъектФормы = Форма.Объект; // ДокументОбъект - 
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектФормы.Ссылка);
	Если Устарело Тогда
		Кэш = НаправленияДеятельностиКэшированныеЗначения();
		Форма.НаправленияДеятельностиКэшированныеЗначения = Кэш;
		ПорядокОбработкиДокумента = МенеджерОбъекта.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма);
		Форма.МетаданныеФормы = ПорядокОбработкиДокумента;
	Иначе
		Кэш = НазначенияКэшированныеЗначения();
		Форма.НазначенияКэшированныеЗначения = Кэш;
		ПорядокОбработкиДокумента = МенеджерОбъекта.ПорядокЗаполненияНазначенийВДокументе(Форма);
		Кэш.ПорядокОбработкиДокумента = ПорядокОбработкиДокумента;
	КонецЕсли;
	
	Кэш.ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	Кэш.ИспользоватьНаправленияДеятельности        = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	НазначениеПоУмолчанию = Справочники.Назначения.ПустаяСсылка();
	Если ПорядокОбработкиДокумента.ВДокументеОпределенаФункцияШаблонНазначения Тогда
		
		НазначениеПоУмолчанию = Справочники.Назначения.ПустаяСсылка();
		ШаблонНазначения = МенеджерОбъекта.ШаблонНазначения(Форма.Объект);
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ШаблонНазначения, Справочники.Назначения.ШаблонНового()) Тогда
			НазначениеПоУмолчанию = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		КонецЕсли;
		
	Иначе
		Если ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения <> Неопределено Тогда
			НазначениеПоУмолчанию = ТолкающееНазначение(Форма.Объект.НаправлениеДеятельности);
		КонецЕсли;
	КонецЕсли;

	// Запись данных формы.
	Кэш.НазначениеПоУмолчанию = НазначениеПоУмолчанию;
		
	Если ПорядокОбработкиДокумента.ЗаполнятьНазначениеВШапке И Не ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		
		// Инициализация назначения у нового документа.
		ШаблонНазначения = МенеджерОбъекта.ШаблонНазначения(Форма.Объект);
		
		// Если текущий вариант обособления не по заказу.
		Если ШаблонНазначения.Заказ = Неопределено Тогда
			Форма.Объект.Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		КонецЕсли;
		
	КонецЕсли;
	
	// Работа с флагом Обособленно
	ИмяЭлемента = ПорядокОбработкиДокумента.ИмяЭлементаФормыОбособленно;
	Служебные = Новый Структура("ИмяРеквизитаОбособленно");
	
	Если ИмяЭлемента <> Неопределено Тогда
		ЭлементФормы = Форма.Элементы[ИмяЭлемента];
		МассивПолей = СтрРазделить(ЭлементФормы.ПутьКДанным, ".");
		Служебные.ИмяРеквизитаОбособленно = МассивПолей[2];
	КонецЕсли; 
	ПорядокОбработкиДокумента.Вставить("Служебные", Служебные);
	УстановитьВидимостьЭлементовОбособленно(Форма, Устарело);
	ПерезаполнитьСлужебныеРеквизитыТабличнойЧасти(Форма, Устарело);
	
КонецПроцедуры

// Используется в формах документов, в одноименных процедурах "ПослеЗаписиНаСервере".
// Заполняет реквизит формы "Отгружать обособленно" табличной части исходя из заполненности назначения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой необходимо инициализировать реквизиты связанные с использованием
//            направлений деятельности.
//  Устарело - Булево - для совместимости с НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности
//
Процедура ПослеЗаписиНаСервере(Форма, Устарело) Экспорт
	
	ПерезаполнитьСлужебныеРеквизитыТабличнойЧасти(Форма, Устарело);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормах

// Заполняет назначение по умолчанию в документе, в соответствии с изенениями шаблона,
// произошедшего в результате редактирования реквизитов документа.
// Проверяет назначения в табличной части и заполняет их в соотвествии с изменившимся шаблоном.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа
//  Устарело - Булево - для совместимости с НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельности
// Возвращаемое значение:
//  Массив Из ДанныеФормыЭлементКоллекции - массив измененных строк табличной части документа.
//
Функция ПриИзмененииШаблонаНазначенияВДокументе(Форма, Устарело = Ложь) Экспорт
	
	НайденныеСтроки = Новый Массив();
	
	Если Устарело Тогда
		Кэш = Форма.НаправленияДеятельностиКэшированныеЗначения;
		ПорядокОбработкиДокумента = Форма.МетаданныеФормы;
	Иначе
		Кэш = Форма.НазначенияКэшированныеЗначения;
		ПорядокОбработкиДокумента = Кэш.ПорядокОбработкиДокумента;
	КонецЕсли;
	
	Если (Не Кэш.ИспользоватьНаправленияДеятельности И Устарело) Или Не Кэш.ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Возврат НайденныеСтроки;
	КонецЕсли;
	
	// Инициализируем назначение для измененного документа.
	ОбъектФормы = Форма.Объект; // ДокументОбъект - 
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектФормы.Ссылка);
	
	Если ПорядокОбработкиДокумента.ЗаполнятьНазначениеВШапке Тогда
		
		ШаблонНазначения = МенеджерОбъекта.ШаблонНазначения(Форма.Объект);
		
		// Если шаблон заполнен полностью или текущий вариант обособления не по заказу.
		Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Или ШаблонНазначения.Заказ = Неопределено Тогда
			Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		Иначе
			Назначение = Неопределено; // если такого назначения еще нет в базе то нужно чтобы не подбирались остатки по старому назначению.
		КонецЕсли;
		
		// Запись данных формы.
		Форма.Объект.Назначение = Назначение;
		
	КонецЕсли;
	
	// Получение данных формы.
	НаправлениеДеятельности = Форма.Объект.НаправлениеДеятельности;
	ТолкающееНазначение = ТолкающееНазначение(НаправлениеДеятельности);
	НазначениеПоУмолчанию = Справочники.Назначения.ПустаяСсылка();
	Если ПорядокОбработкиДокумента.ВДокументеОпределенаФункцияШаблонНазначения Тогда
		
		ШаблонНазначения = МенеджерОбъекта.ШаблонНазначения(Форма.Объект);
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ШаблонНазначения, Справочники.Назначения.ШаблонНового()) Тогда
			НазначениеПоУмолчанию = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		КонецЕсли;
		
	Иначе
		
		Если ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения <> Неопределено Тогда
			НазначениеПоУмолчанию = ТолкающееНазначение;
		КонецЕсли;
		
	КонецЕсли;

	// Запись данных формы.
	Кэш.НазначениеПоУмолчанию = НазначениеПоУмолчанию;
	
	Результат = Новый Массив();
	Если ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения <> Неопределено Тогда
		
		ИмяРеквизитаПоЗаказу = ПорядокОбработкиДокумента.ИмяРеквизитаПоЗаказу;
		НазначениеПоУмолчанию = Неопределено;

		ЭтоНакладнаяПоЗаказу = Ложь;
		ЭтоРеквизитБулевогоТипа = Ложь;
		Если ИмяРеквизитаПоЗаказу <> Неопределено Тогда
			ЭтоНакладнаяПоЗаказу = Форма.Объект[ИмяРеквизитаПоЗаказу];
			ЭтоРеквизитБулевогоТипа = ТипЗнч(ЭтоНакладнаяПоЗаказу) = Тип("Булево");
		КонецЕсли;
		
		НазначениеПоУмолчанию = Неопределено;
		Если ИмяРеквизитаПоЗаказу = Неопределено
			Или ЭтоРеквизитБулевогоТипа И Не ЭтоНакладнаяПоЗаказу
			Или Не ЭтоРеквизитБулевогоТипа И Не ЗначениеЗаполнено(ЭтоНакладнаяПоЗаказу) Тогда
			НазначениеПоУмолчанию = Кэш.НазначениеПоУмолчанию;
		КонецЕсли;
		
		Результат = НайтиСтрокиВКоллекциях(
			Форма,
			ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения,
			ПорядокОбработкиДокумента.УсловияОбработкиСтрок);
			
		Для Каждого Строка Из Результат Цикл
			Строка.Назначение = НазначениеПоУмолчанию;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений <> Неопределено Тогда
		
		НазначениеПоУмолчанию = Кэш.НазначениеПоУмолчанию;
		
		НазначениеДляСопоставления = НазначениеПоУмолчанию;
		Если Не ЗначениеЗаполнено(НазначениеДляСопоставления) Тогда
			НазначениеДляСопоставления = ТолкающееНазначение;
		КонецЕсли;
		
		НайденныеСтроки = НайтиСтрокиВКоллекциях(
			Форма,
			ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений,
			ПорядокОбработкиДокумента.УсловияОбработкиСтрок);
			
		ПроверитьЗаполнитьНазначенияСтрокахКоллекции(НайденныеСтроки, НазначениеДляСопоставления, НазначениеПоУмолчанию);
		
		Если Результат.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НайденныеСтроки);
		Иначе
			Результат = НайденныеСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПорядокОбработкиДокумента.ИменаТаблицЗначенийДляОчисткиНекорректныхНазначений <> Неопределено Тогда
		
		НазначениеПоУмолчанию = Кэш.НазначениеПоУмолчанию;
		
		НазначениеДляСопоставления = НазначениеПоУмолчанию;
		Если Не ЗначениеЗаполнено(НазначениеДляСопоставления) Тогда
			НазначениеДляСопоставления = ТолкающееНазначение;
		КонецЕсли;
		
		НайденныеСтроки = НайтиСтрокиВКоллекцияхФормы(
			Форма,
			ПорядокОбработкиДокумента.ИменаТаблицЗначенийДляОчисткиНекорректныхНазначений,
			ПорядокОбработкиДокумента.УсловияОбработкиСтрок);
			
		ПроверитьЗаполнитьНазначенияСтрокахКоллекции(НайденныеСтроки, НазначениеДляСопоставления, НазначениеПоУмолчанию);
		
		Если Результат.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НайденныеСтроки);
		Иначе
			Результат = НайденныеСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПерезаполнитьСлужебныеРеквизитыТабличнойЧасти(Форма, Устарело);
	
	// Работа с флагом Обособленно
	УстановитьВидимостьЭлементовОбособленно(Форма, Устарело);

	Возврат Результат;
	
КонецФункции

// Используется в форме документа заказ переработчику при заполнении документа по спецификации.
// Инициализирует реквизиты формы, используемые при интерактивной работе пользователя. Заполняет назначение, исходя из
// направления деятельности.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой необходимо инициализировать реквизиты связанные с использованием
//   направлений деятельности.
//  Устарело - Булево - для совместимости с НаправленияДеятельностиСервер.ПриЗаполненииПоСпецификацииСервер
//
Процедура ПриЗаполненииПоСпецификацииСервер(Форма, Устарело = Ложь) Экспорт
	
	Если Устарело Тогда
		Кэш = Форма.НаправленияДеятельностиКэшированныеЗначения;
	Иначе
		Кэш = Форма.НазначенияКэшированныеЗначения;
	КонецЕсли;
	
	Если (Не Кэш.ИспользоватьНаправленияДеятельности И Устарело) Или Не Кэш.ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Возврат;
	КонецЕсли;
	
	// Получение данных формы.
	Назначение = Кэш.НазначениеПоУмолчанию;
	НаправлениеДеятельности = Форма.Объект.НаправлениеДеятельности;
	
	ЗаполнятьНазначение = ЗначениеЗаполнено(Назначение) Или ЗначениеЗаполнено(НаправлениеДеятельности);
	
	Если ЗаполнятьНазначение Тогда
		
		// Обработка.
		УсловияОтбора = Новый Соответствие();
		УсловияОтбора.Вставить("ВозвратныеОтходы", УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры"));
		НайденныеСтроки = НайтиСтрокиВКоллекциях(Форма, "ВозвратныеОтходы", УсловияОтбора);
		ТолкающееНазначение = ТолкающееНазначение(НаправлениеДеятельности);
		ПроверитьЗаполнитьНазначенияСтрокахКоллекции(
			НайденныеСтроки,
			ТолкающееНазначение,
			Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется в формах документов. Устанавливает условное оформление флага Обособленно.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой необходимо установить условное оформление.
//  Устарело - Булево - для совместимости с НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеФлагаОбособленно
Процедура УстановитьУсловноеОформлениеФлагаОбособленно(Форма, Устарело = Ложь) Экспорт
	
	Если Устарело Тогда
		ПорядокОбработкиДокумента = Форма.МетаданныеФормы;
	Иначе
		ПорядокОбработкиДокумента = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента;
	КонецЕсли;
	
	ИмяЭлемента = ПорядокОбработкиДокумента.ИмяЭлементаФормыОбособленно;
	Если ИмяЭлемента <> Неопределено Тогда
		
		ЭлементФормы = Форма.Элементы[ИмяЭлемента];
		МассивПолей = СтрРазделить(ЭлементФормы.ПутьКДанным, ".");
		ПутьКТипуНоменклатуры = МассивПолей[0] + "." + МассивПолей[1] + "." + "ТипНоменклатуры";

		УсловноеОформление = Форма.УсловноеОформление;
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		
		СписокТиповНоменклатуры = Новый СписокЗначений();
		СписокТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		СписокТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТипуНоменклатуры);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокТиповНоменклатуры;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется в формах документов, в процедурах, приводящих к изменению флага по заказам.
// Управляет видимостью элементов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой необходимо отреагировать на изменение флага по заказам.
//  Устарело - Булево - для совместимости с НаправленияДеятельностиСервер.УстановитьВидимостьЭлементовОбособленно
//
Процедура УстановитьВидимостьЭлементовОбособленно(Форма, Устарело = Ложь) Экспорт
	
	Если Устарело Тогда
		ПорядокОбработкиДокумента = Форма.МетаданныеФормы;
	Иначе
		ПорядокОбработкиДокумента = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента;
	КонецЕсли;
	НазначениеПоУмолчанию = Справочники.Назначения.ПустаяСсылка();
	Если ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения <> Неопределено Тогда
		НазначениеПоУмолчанию = ТолкающееНазначение(Форма.Объект.НаправлениеДеятельности);
	КонецЕсли;
	ИмяЭлемента = ПорядокОбработкиДокумента.ИмяЭлементаФормыОбособленно;
	ИмяГруппыЭлементовКоманды = ПорядокОбработкиДокумента.ИмяГруппыЭлементовКомандыОбособленно;
	ИмяРеквизитаПоЗаказу = ПорядокОбработкиДокумента.ИмяРеквизитаПоЗаказу;
	
	Если ИмяЭлемента <> Неопределено Тогда
		
		ЭтоНакладнаяПоЗаказу = Форма.Объект[ИмяРеквизитаПоЗаказу];
		ЭтоРеквизитБулевогоТипа = ТипЗнч(ЭтоНакладнаяПоЗаказу) = Тип("Булево");
		ОтобразитьЭлементы = ЗначениеЗаполнено(НазначениеПоУмолчанию)
			И (ЭтоРеквизитБулевогоТипа И Не ЭтоНакладнаяПоЗаказу
				Или Не ЭтоРеквизитБулевогоТипа И Не ЗначениеЗаполнено(ЭтоНакладнаяПоЗаказу));
		Форма.Элементы[ИмяЭлемента].Видимость = ОтобразитьЭлементы;
		Форма.Элементы[ИмяГруппыЭлементовКоманды].Видимость = ОтобразитьЭлементы;
		
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// В табличной части формы документа устанавливает флаг "Обособленно" для выделенных строк.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Установить - Булево - Истина если нужно установить флаг, Ложь - если нужно сбросить флаг.
//  Устарело - Булево - Для совместимости с НаправленияДеятельностиСервер.УстановитьСнятьОтметкуОбособленно
Процедура УстановитьСнятьОтметкуОбособленно(Форма, Установить, Устарело = Ложь) Экспорт
	
	Если Устарело Тогда
		ПорядокОбработкиДокумента = Форма.МетаданныеФормы;
	Иначе
		ПорядокОбработкиДокумента = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента;
	КонецЕсли;
	
	Коллекция = 	КоллекцияОтгрузитьОбособленно(Форма, Устарело);
	ТаблицаФормы = Форма.Элементы[ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляЗаполненияНазначения];
	Для Каждого Идентификатор Из ТаблицаФормы.ВыделенныеСтроки Цикл
		СтрокаКоллекции = Коллекция.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаКоллекции.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				Или СтрокаКоллекции.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
					ОбновитьФлагИНазначениеВСтроке(Форма, СтрокаКоллекции, Установить, Устарело);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнитьНазначенияСтрокахКоллекции(Массив, НазначениеДляСопоставления, НазначениеПоУмолчанию)
	
	Если Не ЗначениеЗаполнено(Массив) Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Индекс = Индекс;
		НоваяСтрока.Назначение = Массив[Индекс].Назначение;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Индекс КАК Индекс,
		|	Таблица.Назначение КАК Назначение
		|ПОМЕСТИТЬ ВтТаблица
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Индекс КАК Индекс,
		|	&НазначениеПоУмолчанию КАК Назначение
		|ИЗ
		|	ВтТаблица КАК Таблица
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|		ПО СпрНазначения.Ссылка = Таблица.Назначение
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначениеДляСопоставления
		|		ПО НазначениеДляСопоставления.Ссылка = &НазначениеДляСопоставления
		|
		|ГДЕ
		|	Таблица.Назначение <> &НазначениеПоУмолчанию
		|		И ВЫБОР
		|			КОГДА СпрНазначения.Ссылка ЕСТЬ NULL
		|				ТОГДА &НазначениеПоУмолчанию <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			КОГДА НазначениеДляСопоставления.Ссылка ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			КОГДА НазначениеДляСопоставления.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|					И НазначениеДляСопоставления.Заказ = НЕОПРЕДЕЛЕНО
		|					И НазначениеДляСопоставления.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					И НазначениеДляСопоставления.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ТОГДА
		|					СпрНазначения.НаправлениеДеятельности <> НазначениеДляСопоставления.НаправлениеДеятельности
		|			КОГДА НазначениеДляСопоставления.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|					И НазначениеДляСопоставления.Заказ = НЕОПРЕДЕЛЕНО
		|				ТОГДА СпрНазначения.НаправлениеДеятельности <> НазначениеДляСопоставления.НаправлениеДеятельности
		|					ИЛИ СпрНазначения.Партнер <> НазначениеДляСопоставления.Партнер
		|					ИЛИ СпрНазначения.Договор <> НазначениеДляСопоставления.Договор
		|			КОГДА НазначениеДляСопоставления.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|					И НазначениеДляСопоставления.Заказ <> НЕОПРЕДЕЛЕНО
		|				ТОГДА СпрНазначения.НаправлениеДеятельности <> НазначениеДляСопоставления.НаправлениеДеятельности
		|					ИЛИ СпрНазначения.Партнер <> НазначениеДляСопоставления.Партнер
		|					ИЛИ СпрНазначения.Договор <> НазначениеДляСопоставления.Договор
		|					ИЛИ СпрНазначения.Заказ <> НазначениеДляСопоставления.Заказ
		|			КОГДА НазначениеДляСопоставления.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|					И НазначениеДляСопоставления.Заказ = НЕОПРЕДЕЛЕНО
		|				ТОГДА СпрНазначения.Партнер <> НазначениеДляСопоставления.Партнер
		|					ИЛИ СпрНазначения.Договор <> НазначениеДляСопоставления.Договор
		|			КОГДА НазначениеДляСопоставления.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
		|					И НазначениеДляСопоставления.Заказ <> НЕОПРЕДЕЛЕНО
		|				ТОГДА СпрНазначения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					ИЛИ СпрНазначения.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|					ИЛИ СпрНазначения.Заказ <> НазначениеДляСопоставления.Заказ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		
	Запрос.УстановитьПараметр("НазначениеДляСопоставления", НазначениеДляСопоставления);
	Запрос.УстановитьПараметр("НазначениеПоУмолчанию", НазначениеПоУмолчанию);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Массив[Выборка.Индекс].Назначение = Выборка.Назначение;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокиВКоллекциях(Форма, ИменаТабЧастей, УсловияОтбора)
	
	Табчасти = СтрРазделить(ИменаТабЧастей, ",");
	НайденныеСтроки = Новый Массив();
	Для Каждого ИмяТабЧасти Из Табчасти Цикл
		
		УсловияОтбораТабЧасти = УсловияОтбора.Получить(ИмяТабЧасти);
		Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТабЧасти] Цикл
			
			Если УсловияОтбораТабЧасти = Неопределено Или УдовлетворяетОтбору(СтрокаТЧ, УсловияОтбораТабЧасти) Тогда
				
				НайденныеСтроки.Добавить(СтрокаТЧ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция НайтиСтрокиВКоллекцияхФормы(Форма, ИменаТабЗначений, УсловияОтбора)
	
	ТабЗнач = СтрРазделить(ИменаТабЗначений, ",");
	НайденныеСтроки = Новый Массив();
	Для Каждого ИмяТабЗнач Из ТабЗнач Цикл
		
		УсловияОтбораТабЗнач = УсловияОтбора.Получить(ИмяТабЗнач);
		Для Каждого СтрокаТЗ Из Форма[ИмяТабЗнач] Цикл
			
			Если УсловияОтбораТабЗнач = Неопределено Или УдовлетворяетОтбору(СтрокаТЗ, УсловияОтбораТабЗнач) Тогда
				
				НайденныеСтроки.Добавить(СтрокаТЗ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция НаправленияДеятельностиКэшированныеЗначения()
	
	КэшированныеЗначения = Новый Структура();
	КэшированныеЗначения.Вставить("ИспользоватьНаправленияДеятельности");
	КэшированныеЗначения.Вставить("ИспользоватьОбособленноеОбеспечениеЗаказов");
	КэшированныеЗначения.Вставить("НазначениеПоУмолчанию");
	Возврат КэшированныеЗначения;
	
КонецФункции

Функция НазначенияКэшированныеЗначения()
	
	КэшированныеЗначения = Новый Структура();
	КэшированныеЗначения.Вставить("ИспользоватьНаправленияДеятельности");
	КэшированныеЗначения.Вставить("ИспользоватьОбособленноеОбеспечениеЗаказов");
	КэшированныеЗначения.Вставить("НазначениеПоУмолчанию");
	КэшированныеЗначения.Вставить("ПорядокОбработкиДокумента");
	Возврат КэшированныеЗначения;
	
КонецФункции

Функция УдовлетворяетОтбору(ПроверяемоеЗначение, УсловияОтбора)
	
	Результат = Истина;
	Для Каждого Условие Из УсловияОтбора Цикл
		
		Результат = Истина;
		Для Каждого Поле Из Условие Цикл
			
			Если ПроверяемоеЗначение[Поле.Ключ] <> Поле.Значение Тогда
				
				Результат = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьФлагИНазначениеВСтроке(Форма, СтрокаКоллекции, Установить, Устарело)
	
	Если Устарело Тогда
		Служебные = Форма.МетаданныеФормы.Служебные;
	Иначе
		Служебные = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента.Служебные;
	КонецЕсли;
	
	СтрокаКоллекции[Служебные.ИмяРеквизитаОбособленно] = Установить;
	СтрокаКоллекции.Назначение = ?(Установить,
		Форма.НаправленияДеятельностиКэшированныеЗначения.НазначениеПоУмолчанию,
		Справочники.Назначения.ПустаяСсылка());
	
КонецПроцедуры

Процедура ОбновитьФлагИзНазначенияТабличнойЧасти(Форма, Устарело)
	Если Устарело Тогда
		Служебные = Форма.МетаданныеФормы.Служебные;
	Иначе
		Служебные = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента.Служебные;
	КонецЕсли;
	Коллекция = КоллекцияОтгрузитьОбособленно(Форма, Устарело);
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		СтрокаКоллекции[Служебные.ИмяРеквизитаОбособленно] = ЗначениеЗаполнено(СтрокаКоллекции.Назначение);
	КонецЦикла;
КонецПроцедуры

Функция КоллекцияОтгрузитьОбособленно(Форма, Устарело)
	Если Устарело Тогда
		ПорядокОбработкиДокумента = Форма.МетаданныеФормы;
	Иначе
		ПорядокОбработкиДокумента = Форма.НазначенияКэшированныеЗначения.ПорядокОбработкиДокумента;
	КонецЕсли;
	ИмяЭлемента = ПорядокОбработкиДокумента.ИмяЭлементаФормыОбособленно;
	ЭлементФормы = Форма.Элементы[ИмяЭлемента];
	МассивПолей = СтрРазделить(ЭлементФормы.ПутьКДанным, ".");
	Коллекция = Форма[МассивПолей[0]][МассивПолей[1]];
	Возврат Коллекция; 
КонецФункции
 
#КонецОбласти
