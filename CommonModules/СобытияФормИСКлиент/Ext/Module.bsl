#Область ПрограммныйИнтерфейс

#Область Локализация

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма	- ФормаКлиентскогоПриложения - форма, в которой расположена команда
//  Команда	- КомандаФормы - команда формы
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСКлиентПереопределяемый.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ПослеЗаписи(Форма, ПараметрыЗаписи);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ПослеЗаписи(Форма, ПараметрыЗаписи);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ПослеЗаписи(Форма, ПараметрыЗаписи);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ПослеЗаписи(Форма, ПараметрыЗаписи);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ПослеЗаписи(Форма, ПараметрыЗаписи);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ПослеЗаписи(Форма, ПараметрыЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "При открытии" интегрируемых форм
//  Используется при расчете статусов оформления вне транзакции записи документа для обновления информации о статусе
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Отказ - Булево - Отказ от открытия
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ОбработчикОжиданияРасчетСтатусаОформления") Тогда
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияРасчетСтатусаОформления", 60);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ожидания расчета статуса оформления.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
Процедура ОбработчикОжиданияРасчетСтатусаОформления(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ТекстДокументаИС) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаФормыОбъект = Форма.ПараметрыИнтеграцииГосИС.Получить("ИС").ИмяРеквизитаФормыОбъект;
	
	ОбновленныеРеквизиты = Новый Структура;
	Если СобытияФормИСВызовСервера.ОбновитьСтатусыОформления(Форма[ИмяРеквизитаФормыОбъект].Ссылка, Форма.ПараметрыИнтеграцииГосИС, ОбновленныеРеквизиты) Тогда
		ЗаполнитьЗначенияСвойств(Форма, ОбновленныеРеквизиты);
		Для Каждого КлючИЗначение Из Форма.ПараметрыИнтеграцииГосИС Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
				И КлючИЗначение.Значение.Свойство("ГиперссылкаВДокументОснование") Тогда
				СтрокаНастроек = КлючИЗначение.Значение;
				Если ОбновленныеРеквизиты.Свойство(СтрокаНастроек.ИмяРеквизитаФормы) Тогда
					Форма.Элементы[СтрокаНастроек.ИмяЭлементаФормы].Видимость = ЗначениеЗаполнено(ОбновленныеРеквизиты[СтрокаНастроек.ИмяРеквизитаФормы]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//   Ограничения: не предполагает контекстный серверный вызов.
//
// Параметры:
//   Форма     - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура    - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСКлиентПереопределяемый.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииСтроки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ПриАктивизацииСтроки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЕГАИСКлиент");
			Модуль.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ВЕТИС")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормВЕТИСКлиент");
			Модуль.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ГИСМ")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормГИСМКлиент");
			Модуль.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормИСМПКлиент");
			Модуль.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЗЕРНО")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормЗЕРНОКлиент");
			Модуль.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("САТУРН")<>Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СобытияФормСАТУРНКлиент");
			Модуль.ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбщиеДействияТребующиеЗаписиОбъекта

Процедура ВыполнитьДействиеСЗаписьюОбъекта(Форма, Объект, Действие) Экспорт
	
	ТребуетсяЗапись = Ложь;
	ТекстВопроса = "";
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТребуетсяЗапись = Истина;
		ТекстВопроса = НСтр("ru = 'Документ не записан. Записать?'");
	ИначеЕсли Форма.Модифицированность Тогда
		ТребуетсяЗапись = Истина;
		ТекстВопроса = НСтр("ru = '%1 был изменен. Записать?'");
	КонецЕсли;
	
	Если ТребуетсяЗапись Тогда
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВыполнитьЗаписьОбъекта",
			ЭтотОбъект,
			Новый Структура("Форма, Действие", Форма, Действие));
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Действие);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьОбъекта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ОбъектЗаписан = Ложь;
	Форма = ДополнительныеПараметры.Форма;
	
	Если Форма.ПроверитьЗаполнение() Тогда
		ОбъектЗаписан = Форма.Записать();
	КонецЕсли;
	
	Если ОбъектЗаписан Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Действие);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РазбитьСтроку

// Параметры разбиения строки.
// 
// Параметры:
//  Количество - Число - разбиваемое количество
// 
// Возвращаемое значение:
//  Структура - Параметры разбиения строки:
// * ИмяПоляКоличество - Строка - имя поля (строки табличной части) по которому будет выполнено разбиение
// * Заголовок         - Строка - заголовок для пользователя в процессе разбиения, если действие интерактивное
// * Количество        - Число  - исходное количество к разбиению
// * РазрешитьНулевоеКоличество - Булево - разрешить 0 в поле Количество в новой или измененной строке
Функция ПараметрыРазбиенияСтроки(Количество) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяПоляКоличество", "Количество");
	Результат.Вставить("Заголовок", НСтр("ru = 'Введите количество товара в новой строке'"));
	Результат.Вставить("Количество", Количество);
	Результат.Вставить("РазрешитьНулевоеКоличество", Ложь);
	Возврат Результат;
	
КонецФункции

// Вызывает внешнюю процедуру разбиения строки табличной части. Если она не определена - копирует строку 
//    и обнуляет указанное в параметрах поле "Количество"
// 
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть объекта где происходит разбиение
//  ЭлементФормы   - ТаблицаФормы   - Элемент табличной части в пользовательском интерфейсе.
//  ПараметрыРазбиенияСтроки - См. ПараметрыРазбиенияСтроки
//  ОповещениеПослеРазбиения - ОписаниеОповещения - действия после разбиения (ожидаемый результат действия - новая строка)
Процедура РазбитьСтрокуТабличнойЧасти(ТабличнаяЧасть, ЭлементФормы, ПараметрыРазбиенияСтроки, ОповещениеПослеРазбиения) Экспорт
	
	СтандартнаяОбработка = Истина;
	СобытияФормИСКлиентПереопределяемый.РазбитьСтрокуТабличнойЧасти(
		СтандартнаяОбработка, ТабличнаяЧасть, ЭлементФормы, ПараметрыРазбиенияСтроки, ОповещениеПослеРазбиения);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТабличнаяЧасть.Вставить(ТабличнаяЧасть.Индекс(ЭлементФормы.ТекущиеДанные)+1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементФормы.ТекущиеДанные);
	НоваяСтрока[ПараметрыРазбиенияСтроки.ИмяПоляКоличество] = 0;
	Если ОповещениеПослеРазбиения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеРазбиения, НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(Форма, Источник, Событие, Данные) Экспорт
	
	Если Не Форма.ВводДоступен() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	
	ДанныеСоСканера = Неопределено;
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.СобытияФормИСКлиент.ВнешнееСобытиеОбработатьВводШтрихкода");
		ДанныеСоСканера = ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		
		Возврат ДанныеСоСканера;
		
	ИначеЕсли Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "RFID"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СчитывательRFID") > 0
		И Не Форма.ИдетЗаписьRFID
		И СобытияФормИСКлиент.ДляОбработкиRFIDНуженСерверныйВызов(Результат.Параметр, Форма) Тогда
		
		ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"].Вставить(
			Данные, ОбщегоНазначенияКлиент.ДатаУниверсальная());
		
		СырыеДанные = Результат.Параметр;
		Если СырыеДанные.Количество() = 1 Тогда
			ДанныеRFID = ШтрихкодированиеИСКлиентСервер.ИнициализироватьДанныеRFID(СырыеДанные[0]);
		Иначе
			РезультатОбработкиСырыхДанных = ШтрихкодированиеИСВызовСервера.ДанныеRFID(СырыеДанные);
			ДанныеRFID = РезультатОбработкиСырыхДанных.ДанныеRFID;
			Если ЗначениеЗаполнено(РезультатОбработкиСырыхДанных.ТекстОшибки) Тогда
				ОбщегоНазначенияИСКлиент.СообщитьПользователюВФорму(
					Форма.УникальныйИдентификатор,
					РезультатОбработкиСырыхДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Возврат ДанныеRFID;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Типовой сценарий обработки оповещения прикладных объектов об изменениях в библиотечных.
//   Вызывается для обновления гиперссылок в прикладных документах.
// 
// Параметры:
//   МестоВызова - Структура - сведения о месте в котором требуется обработка:
//    * Форма  - ФормаКлиентскогоПриложения     - источник вызова
//    * Объект - ДанныеФормыСтруктура - основной реквизит формы
//   Событие     - Структура - сведения о событии:
//    * Имя        - Строка       - имя события формы
//    * Параметр   - Произвольный - параметр события формы
//    * Источник   - Произвольный - источник события формы
//    * Обработано - Булево       - признак что событие уже обработано
//   Подсистема  - Структура - сведения о подсистеме ГосИС - источнике события:
//    * Имя       - Строка           - имя подсистемы
//    * Документы - Массив Из Строка - имена документов, для которых требуется обработка оповещения
//
Процедура ОбработкаОповещенияВФормеДокументаОснования(МестоВызова, Событие, Подсистема) Экспорт
	
	ОписаниеСобытия = ИнтеграцияИСКлиентСервер.ПреобразоватьИмяСобытияОповещенияВоВнутреннийФормат(Событие.Имя);
	
	// Проверим корректность имени события оповещения.
	Если ИнтеграцияИСКлиентСервер.ЭтоСобытиеОповещенияИзмененоСостояние(ОписаниеСобытия)
	 ИЛИ ИнтеграцияИСКлиентСервер.ЭтоСобытиеОповещенияВыполненОбмен(ОписаниеСобытия) Тогда
		
		Событие.Обработано = Истина;
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоСобытиеОповещенияИзмененОбъект(ОписаниеСобытия) Тогда
		
		ИмяИзмененногоОбъекта = ИнтеграцияИСКлиентСервер.ИмяИзмененногоОбъектаИзВнутреннегоФорматаСобытияОповещения(ОписаниеСобытия);
		ЧастиИмениОбъекта     = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяИзмененногоОбъекта, ".");
		
		Если ЧастиИмениОбъекта.Количество() = 2 
			И ЧастиИмениОбъекта[0] = "Документ" Тогда
			ОбрабатываютсяДокументы = Подсистема.МодульВызовСервера.ИменаДокументовДляДокументаОснования(МестоВызова.Объект.Ссылка);
			Если ОбрабатываютсяДокументы.Найти(ЧастиИмениОбъекта[1]) <> Неопределено Тогда
				Событие.Обработано = Истина; // будет обработано далее по коду
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Событие.Обработано Тогда
		
		// Проверим, что оповещение относится к объекту указанной формы.
		ОбязательныеПараметрыОповещения = Новый Структура("Основание");
		Если Событие.Параметр <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ОбязательныеПараметрыОповещения, Событие.Параметр);
		КонецЕсли;
		
		Если Событие.Параметр = Неопределено ИЛИ ОбязательныеПараметрыОповещения.Основание = МестоВызова.Объект.Ссылка Тогда
			
			ИнтеграцияИСКлиент.ОбновитьПолеИнтеграцииВФормеДокументаОснования(
				МестоВызова.Форма,
				Подсистема);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при сканировании штрихкода в форме объекта.
//
// Параметры:
//  ЗавершениеОбработки - Строка - имя процедуры формы, вызываемой при завершении обработки,
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканирован штрихкод,
//  Источник - Строка - источник внешнего события,
//  Событие - Строка - наименование события,
//  Данные - Строка - данные для события,
//  ПараметрыСканирования - Структура - параметры сканирования акцизных марок.
//
Процедура ВнешнееСобытиеПолученыШтрихкоды(ЗавершениеОбработки, Форма, Источник, Событие, Данные, ПараметрыСканирования = Неопределено) Экспорт
	
	Если Не Форма.ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды");
		
		ДанныеШтрихкода = ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		
		// Печатает новый код маркировки. Подменяет отсканированный код номенклатуры кодом маркировки.
		Если ОбщегоНазначенияИСКлиент.ЭтоРасширеннаяВерсияГосИС()
				И ПараметрыСканирования <> Неопределено Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
			Модуль.ОбработатьСобытиеПотоковойПечати(Форма, ДанныеШтрихкода, ПараметрыСканирования)
		КонецЕсли;
		
		// Обрабатывает сканирование существующего кода маркировки в формах проверки и подбора.
		Если ПараметрыСканирования <> Неопределено
			И ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
			
			ВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
			
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
				
				НормализованныйШтрихкод = ДанныеШтрихкода.Штрихкод;
				
			Иначе
				
				ПримечаниеКРазборуШтрихкода      = Неопределено;
				ПользовательскиеПараметрыРазбора = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
				ПользовательскиеПараметрыРазбора.ВалидироватьШтрихкодЛогистическойУпаковкиGS1128СОшибками = (ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект) <> Тип("ДокументСсылка.МаркировкаТоваровИСМП"));
				ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
					ДанныеШтрихкода.Штрихкод, ВидПродукции, ПримечаниеКРазборуШтрихкода,, ПользовательскиеПараметрыРазбора);
				
				Если ДанныеРазбора = Неопределено Тогда
					
					НормализованныйШтрихкод = ДанныеШтрихкода.Штрихкод;
					
				ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
					
					ДанныеРазбораИРезультат = Новый Структура;
					ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
					ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
					
					КешДанныхРазбора = Новый Соответствие;
					КешДанныхРазбора.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеРазбораИРезультат);
					
					НормализованныйШтрихкод = РазборКодаМаркировкиИССлужебныйКлиент.НормализованныйШтрихкод(
						ДанныеШтрихкода.Штрихкод, ВидПродукции, КешДанныхРазбора);
					
				Иначе
					
					НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(НормализованныйШтрихкод) <> Неопределено Тогда
				Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции) Тогда
					СтрокаДерева = НайтиПоИдентификатору(Форма.ДеревоМаркированнойПродукции,
						Форма.СоответствиеШтрихкодовСтрокДерева.Получить(НормализованныйШтрихкод));
					Если СтрокаДерева <> Неопределено Тогда
						ЕстьВложенныеСтроки = Ложь;
						Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
							ЕстьВложенныеСтроки = СтрокаДерева.ПолучитьЭлементы().Количество() > 0;
						КонецЕсли;
						Если Форма.ДопустимаПроизвольнаяЕдиницаУчета
							И Форма.ПараметрыПроверкиКодовМаркировки.ЗапрашиватьКоличествоМерногоТовара
							И ЗначениеЗаполнено(СтрокаДерева.ВидУпаковки)
							И СтрокаДерева.ПроизвольнаяЕдиницаУчета
							И СтрокаДерева.Количество = 0
							И Не ЕстьВложенныеСтроки Тогда
							ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
								ЗавершениеОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования, ДанныеРазбора);
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ДанныеШтрихкода.Штрихкод = НормализованныйШтрихкод;
				Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
					МодульПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
					МодульПроверкаИПодборПродукцииИСМПКлиентСервер.ДополнитьДанныеШтрихкодаПолнымКодомМаркировки(
						ДанныеШтрихкода,
						ДанныеРазбора,
						ВидПродукции,
						ПараметрыСканирования);
				КонецЕсли;
				ОповещениеПриЗавершении = Новый ОписаниеОповещения(ЗавершениеОбработки, Форма);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
			ЗавершениеОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования, ДанныеРазбора);
		
	ИначеЕсли Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "RFID"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СчитывательRFID") > 0
		И Не Форма.ИдетЗаписьRFID
		И ДляОбработкиRFIDНуженСерверныйВызов(Результат.Параметр, Форма) Тогда
		
		ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"].Вставить(
			Данные, ОбщегоНазначенияКлиент.ДатаУниверсальная());
		
		СырыеДанные = Результат.Параметр;
		Если СырыеДанные.Количество() = 1 Тогда
			ДанныеRFID = ШтрихкодированиеИСКлиентСервер.ИнициализироватьДанныеRFID(СырыеДанные[0]);
		Иначе
			РезультатОбработкиСырыхДанных = ШтрихкодированиеИСВызовСервера.ДанныеRFID(СырыеДанные);
			ДанныеRFID = РезультатОбработкиСырыхДанных.ДанныеRFID;
			Если ЗначениеЗаполнено(РезультатОбработкиСырыхДанных.ТекстОшибки) Тогда
				ОбщегоНазначенияИСКлиент.СообщитьПользователюВФорму(
					Форма.УникальныйИдентификатор,
					РезультатОбработкиСырыхДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеRFID <> Неопределено Тогда
			ШтрихкодированиеИСКлиент.ОбработатьДанныеRFID(
				ЗавершениеОбработки, Форма, ДанныеRFID, ПараметрыСканирования, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует параметры для обработки штрихкода через внешнее событие.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Необязательный параметр. Нужно заполнять в случае
//       необходимости отбора по виду продукции и при отсутствии параметров сканирования.
// * ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
// * Оповещение - ОписаниеОповещения - после обработки штрихкода по данному оповещению будет передан результат обработки
//       штрихкода. Параметр необязателен.
// * КэшированныеЗначения - Структура - закэшированные значения.
// * Данные - Строка - данные для события.
// * Событие - Строка - наименование события.
// * Источник - Строка - источник внешнего события.
Функция ПараметрыОбработкиВводаШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Источник");
	Параметры.Вставить("Событие");
	Параметры.Вставить("Данные");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("Оповещение");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ВидПродукции");
	
	Возврат Параметры;
	
КонецФункции

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Параметр - Массив - входящие данные.
//
// Возвращаемое значение:
//  Массив - Массив структур со свойствами:
//   * Штрихкод   - Строка - штрихкод,
//   * Количество - Число  - количество.
Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	Результат = Новый Массив;
	СобытияФормИСКлиентПереопределяемый.ПреобразоватьДанныеСоСканераВМассив(Результат, Параметр);
	Возврат Результат;
	
КонецФункции

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Параметр - Массив - входящие данные.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Штрихкод   - Строка - Штрихкод,
//   * Количество - Число  - количество.
Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	Результат = Новый Структура("Штрихкод, Количество");
	СобытияФормИСКлиентПереопределяемый.ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр);
	Возврат Результат;
	
КонецФункции

#Область RFID

// Для обработки RFID нужен серверный вызов
//
// Параметры:
//  ДанныеRFID - Массив - данные меток
//  Форма      - ФормаКлиентскогоПриложения - форма, из которой вызывается функция.
// 
// Возвращаемое значение:
// Булево - Истина, если нужен серверный вызов.
//
Функция ДляОбработкиRFIDНуженСерверныйВызов(ДанныеRFID, Форма) Экспорт
	
	ЕстьЗаполненныйTID = Ложь;
	Для Каждого Метка Из ДанныеRFID Цикл
		
		// Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			ЕстьЗаполненныйTID = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныйTID Тогда
		
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОбработкаСчитывания";
		ПараметрыОперацииСчитывателяRFID.Форма               = Форма;
		
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
		
		Возврат Истина;
		
	Иначе
		
		// Если нет корректно считанных меток, то ничего не делаем - ждем еще события от оборудования.
		// В следующем событии могут уже приехать корректные данные.
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Открыть сессию считывателя RFID
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, из которой вызывается процедура
//  СледующееДействие - ОписаниеОповещения - описание следующего действия.
//
Процедура ОткрытьСессиюСчитывателяRFID(Форма, СледующееДействие = Неопределено) Экспорт
	
	ОткрытаСессияСчитывателяRFID = Форма.ОткрытаСессияСчитывателяRFID;
	УникальныйИдентификатор      = Форма.УникальныйИдентификатор;
	СчитывательRFID              = Форма.СчитывательRFID;
	
	Если Не ОткрытаСессияСчитывателяRFID Тогда
		
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		
		ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОткрытиеСессии";
		ПараметрыОперацииСчитывателяRFID.СледующееДействие   = СледующееДействие;
		ПараметрыОперацииСчитывателяRFID.Форма               = Форма;
		
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения(
			"ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, ПараметрыОперацииСчитывателяRFID);
		
		МенеджерОборудованияИСКлиент.НачатьОткрытиеСессииСчитывателяRFID(
			ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
		
	КонецЕсли;
	
КонецПроцедуры

// Отработать таймаут ожидания считывания RFID-метки
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается процедура.
//
Процедура ОтработатьТаймаутОжиданияСчитыванияRFID(Форма) Экспорт
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Истекло время ожидания чтения RFID-метки.
		           |Возможные проблемы: метка находится вне зоны считывания,
		           |метка повреждена или чтение заводской метки в настройках оборудования не включено.'"));
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ТаймаутОжиданияСчитывания";
	ПараметрыОперацииСчитывателяRFID.Форма               = Форма;
	
	ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	
КонецПроцедуры

// Записать данные в RFID-метку
//
// Параметры:
//  СлужебныеДанные - Неопределено, Структура,- служебный параметр описания оповещения подключение оборудования.
//  ДополнительныеПараметры - Структура - параметры с данными серий для записи.
//
Процедура ЗаписатьДанныеRFID(СлужебныеДанные, ДополнительныеПараметры) Экспорт
	
	Форма               = ДополнительныеПараметры.Форма;
	ДанныеRFIDДляЗаписи = ДополнительныеПараметры.ДанныеRFIDДляЗаписи;
	
	УникальныйИдентификатор      = Форма.УникальныйИдентификатор;
	СчитывательRFID              = Форма.СчитывательRFID;
	ОткрытаСессияСчитывателяRFID = Форма.ОткрытаСессияСчитывателяRFID;
	GTIN                         = Форма.GTIN;
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.Форма = Форма;
	
	Если ТипЗнч(СлужебныеДанные) = Тип("Структура")
		И СлужебныеДанные.Свойство("Результат")
		И СлужебныеДанные.Результат = Ложь Тогда
		Возврат;
	ИначеЕсли Не ОткрытаСессияСчитывателяRFID Тогда
		
		ТекущееДействие = Новый ОписаниеОповещения(
			"ЗаписатьДанныеRFID", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьСессиюСчитывателяRFID(Форма, ТекущееДействие);
		Возврат;
		
	КонецЕсли;
	
	РезультатРасчетаНомера = МенеджерОборудованияКлиентСервер.ПолучитьСерийныйНомерПоTID(ДанныеRFIDДляЗаписи.TID);
	
	СерийныйНомер = Неопределено;
	Если РезультатРасчетаНомера.Результат Тогда
		СерийныйНомер = Формат(РезультатРасчетаНомера.СерийныйНомер, "ЧГ=0");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Номер серии должен быть сгенерирован по TID RFID-метки.
				           |При генерации произошла ошибка: %1. Обратитесь к администратору.'"),
				РезультатРасчетаНомера.ОписаниеОшибки));
	КонецЕсли;
	
	ПараметрыЗаписи = МенеджерОборудованияИСКлиент.ПараметрыЗаписиМеткиRFID();
	ПараметрыЗаписи.TID        = ДанныеRFIDДляЗаписи.TID;
	ПараметрыЗаписи.EPC        = ДанныеRFIDДляЗаписи.EPC;
	ПараметрыЗаписи.БанкПамяти = "EPC";
	ПараметрыЗаписи.Данные     = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(GTIN, СерийныйНомер, 1);
	
	ДополнительныеПараметры.ДанныеRFIDДляЗаписи.ЗаписанныйEPC = ПараметрыЗаписи.Данные;
	
	ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗаписьRFID";
	ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения(
		"ПослеЗаписиДанныхRFID", ЭтотОбъект, ДополнительныеПараметры);
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения(
		"ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, ПараметрыОперацииСчитывателяRFID);
	
	МенеджерОборудованияИСКлиент.НачатьЗаписьДанныхВМеткуRFID(
		ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	
КонецПроцедуры

// Записать данные RFID завершение
//
// Параметры:
//  Результат - Структура - со свойствами:
//   * Результат - Булево - признак успешного выполнения предыдущей операции
//  ДополнительныеПараметры - Произвольный - дополнительные параметры обработчика.
//
Процедура ПослеЗаписиДанныхRFID(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.Форма = ДополнительныеПараметры.Форма;
	ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПриЗавершении,
		Результат);
	
КонецПроцедуры

// Отключить оборудование
//
// Параметры:
//  Результат - Неопределено - не используется (служебный параметр)
//  ДополнительныеПараметры - Структура - содержит свойства:
//   * Форма - ФормаКлиентскогоПриложения - форма, откуда было инициировано отключение оборудования.
//
Процедура ОтключитьОборудование(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Не Форма.ОткрытаСессияСчитывателяRFID Тогда
		
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
		
	Иначе
		
		ДействиеОтключитьОборудование = Новый ОписаниеОповещения("ОтключитьОборудование", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.Форма             = Форма;
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = ДействиеОтключитьОборудование;
		
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СообщитьОбОшибке(РезультатВыполнения) Экспорт
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'При выполнении операции произошла ошибка: %1.'"),
		РезультатВыполнения.ОписаниеОшибки);
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#Область РаботаСПолямимСоставногоТипа

Процедура ПолеСоставногоТипаПриИзменении(Форма, Элемент) Экспорт

	ПоляФормы = СтруктураПолейФормыЭлементаСоставногоТипа(Форма, Элемент.Имя);
	Если ПоляФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Очистка данных, сбрасываем как представление, так и внутреннее значение поля.
	ПоляФормы.РеквизитПуть[ПоляФормы.РеквизитИмя] = Неопределено;
	ПоляФормы.ПредставлениеПуть[ПоляФормы.ПредставлениеИмя] = "";

КонецПроцедуры

Процедура ПолеСоставногоТипаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПоляФормы = СтруктураПолейФормыЭлементаСоставногоТипа(Форма, Элемент.Имя);
	Если ПоляФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизита = ПоляФормы.РеквизитПуть[ПоляФормы.РеквизитИмя];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		// ОписаниеОповещенияОЗакрытии не работает
		ПоказатьЗначение(, ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеСоставногоТипаОбработатьИзменениеДанных(Форма, Источник) Экспорт
	
	Если Не Форма.ПоляСоставногоТипа.ВсеТипы.СодержитТип(ТипЗнч(Источник)) Тогда
		Возврат;
	КонецЕсли;
	
	Представление = Неопределено;
	
	Для Каждого КлючИЗначение Из Форма.ПоляСоставногоТипа.Поля Цикл
		ДанныеПоля = КлючИЗначение.Значение;
		ПутьКРеквизиту = ИнтеграцияИСКлиентСервер.ПутьКДаннымИзСтроки(Форма, ДанныеПоля.РеквизитПуть);
		Если ДанныеПоля.ИмяТаблицыФормы <> "" Тогда
			Для Каждого Строка Из ПутьКРеквизиту Цикл
				Если Строка[ДанныеПоля.РеквизитИмя] = Источник Тогда
					Если Представление = Неопределено Тогда
						Представление = Строка(Источник);
					КонецЕсли;
					Строка[ДанныеПоля.ПредставлениеРеквизитИмя] = Представление;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ПутьКРеквизиту[ДанныеПоля.РеквизитИмя] = Источник Тогда
				Если Представление = Неопределено Тогда
					Представление = Строка(Источник);
				КонецЕсли;
				ПутьКПредставлению = ИнтеграцияИСКлиентСервер.ПутьКДаннымИзСтроки(Форма, ДанныеПоля.ПредставлениеРеквизитПуть);
				ПутьКПредставлению[ДанныеПоля.ПредставлениеРеквизитИмя] = Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолеСоставногоТипаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("Действие") Тогда
		Если ВыбранноеЗначение.Действие = "ОткрытьФорму" Тогда
			
			ОткрытьСтандартнуюФормуВыбора = Истина;
			
			ПараметрыОткрытияФормы = Новый Структура;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолеСоставногоТипаОкончаниеВыбора", Форма, ДополнительныеПараметры);
			
			СобытияФормИСКлиентПереопределяемый.ПолеСоставногоТипаОткрытьФормуВыбора(
				Форма, Элемент, ВыбранноеЗначение, ОткрытьСтандартнуюФормуВыбора, ПараметрыОткрытияФормы, ОписаниеОповещения);
			
			Если ОткрытьСтандартнуюФормуВыбора Тогда
				ОткрытьФорму(СтрШаблон("%1.%2.%3",
						ВыбранноеЗначение.Вид,
						ВыбранноеЗначение.Имя,
						ВыбранноеЗначение.ИмяФормы),
					ПараметрыОткрытияФормы,
					Форма,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		ИначеЕсли ВыбранноеЗначение.Действие = "Очистить" Тогда
			ПоляФормы = СтруктураПолейФормыЭлементаСоставногоТипа(Форма, Элемент.Имя);
			Если ПоляФормы = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ПоляФормы.РеквизитПуть[ПоляФормы.РеквизитИмя] = Неопределено;
			ПоляФормы.ПредставлениеПуть[ПоляФормы.ПредставлениеИмя] = "";
		
			Форма.Модифицированность = Истина;
		КонецЕсли;
	Иначе
		ПоляФормы = СтруктураПолейФормыЭлементаСоставногоТипа(Форма, Элемент.Имя);
		Если ПоляФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПоляФормы.РеквизитПуть[ПоляФормы.РеквизитИмя] = ВыбранноеЗначение.Ссылка;
		ПоляФормы.ПредставлениеПуть[ПоляФормы.ПредставлениеИмя] = ВыбранноеЗначение.Представление;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеСоставногоТипаОкончаниеВыбора(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоляФормы = СтруктураПолейФормыЭлементаСоставногоТипа(Форма, ДополнительныеПараметры.Элемент.Имя);
	Если ПоляФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоляФормы.РеквизитПуть[ПоляФормы.РеквизитИмя] = Результат;
	ПоляФормы.ПредставлениеПуть[ПоляФормы.ПредставлениеИмя] = Строка(Результат);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеСоставногоТипаАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Текст) Тогда
		ТекстДляАвтоПодбора = СокрЛП(Элемент.ТекстРедактирования);
	Иначе
		ТекстДляАвтоПодбора = СокрЛП(Текст);
	КонецЕсли;
	
	ДанныеПоля = Форма.ПоляСоставногоТипа.Поля[Элемент.Имя];
	
	ДанныеВыбора = ИнтеграцияИСВызовСервера.СписокАвтоподбораПолеСоставногоТипа(
		ДанныеПоля.РеквизитТип, ТекстДляАвтоПодбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПоИдентификатору(ДанныеФормыДерево, Идентификатор)
	
	// Существует проблема в веб-клиенте: метод НайтиПоИдентификатору, может вернуть ДанныеФормыДерево
	
	Если Идентификатор = -1
		Или Идентификатор = Неопределено
		Или ТипЗнч(Идентификатор) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФормыЭлементДерева = ДанныеФормыДерево.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ДанныеФормыЭлементДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат ДанныеФормыЭлементДерева;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииRFID

Процедура ЗакрытьСессиюСчитывателяRFID(Результат, ПараметрыОперацииСчитывателяRFID)
	
	СчитывательRFID = ПараметрыОперацииСчитывателяRFID.Форма.СчитывательRFID;
	УникальныйИдентификатор = ПараметрыОперацииСчитывателяRFID.Форма.УникальныйИдентификатор;
	
	НовыеПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	НовыеПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии";
	
	НовыеПараметрыОперацииСчитывателяRFID.Форма = ПараметрыОперацииСчитывателяRFID.Форма;
	Если ПараметрыОперацииСчитывателяRFID.СледующееДействие <> Неопределено Тогда
		НовыеПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии";
		НовыеПараметрыОперацииСчитывателяRFID.СледующееДействие   = ПараметрыОперацииСчитывателяRFID.СледующееДействие;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, НовыеПараметрыОперацииСчитывателяRFID);
	МенеджерОборудованияИСКлиент.НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	
КонецПроцедуры

Процедура ЗавершениеОперацииСчитывателяRFID(РезультатВыполнения, ПараметрыОперацииСчитывателяRFID) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Операция считывателя RFID завершилась с ошибкой: %1'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ПараметрыОперацииСчитывателяRFID.Форма.ИдетЗаписьRFID = Ложь;
	ИначеЕсли ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОткрытиеСессии" Тогда
		ПараметрыОперацииСчитывателяRFID.Форма.ОткрытаСессияСчитывателяRFID = Истина;
	ИначеЕсли ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии" Тогда
		ПараметрыОперацииСчитывателяRFID.Форма.ОткрытаСессияСчитывателяRFID = Ложь;
		ПараметрыОперацииСчитывателяRFID.Форма.ИдетЗаписьRFID = Ложь;
	КонецЕсли;

	Если ПараметрыОперацииСчитывателяRFID.СледующееДействие <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ПараметрыОперацииСчитывателяRFID.СледующееДействие,
			РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОперацииСчитывателяRFID()
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполненноеДействие", "");
	Результат.Вставить("СледующееДействие");
	Результат.Вставить("Форма");
	Результат.Вставить("Форма");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

Функция СтруктураПолейФормыЭлементаСоставногоТипа(Форма, ИмяЭлемента)
	
	Результат = Новый Структура;
	
	ДанныеПоля = Форма.ПоляСоставногоТипа.Поля[ИмяЭлемента];
	
	Если ДанныеПоля.ИмяТаблицыФормы <> "" Тогда
		ТекущиеДанные = Форма.Элементы[ДанныеПоля.ИмяТаблицыФормы].ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат.Вставить("РеквизитПуть",      ТекущиеДанные);
		Результат.Вставить("ПредставлениеПуть", ТекущиеДанные);
	Иначе
		Результат.Вставить("РеквизитПуть",
			ИнтеграцияИСКлиентСервер.ПутьКДаннымИзСтроки(Форма, ДанныеПоля.РеквизитПуть));
		Результат.Вставить("ПредставлениеПуть",
			ИнтеграцияИСКлиентСервер.ПутьКДаннымИзСтроки(Форма, ДанныеПоля.ПредставлениеРеквизитПуть));
	КонецЕсли;
	
	Результат.Вставить("РеквизитИмя",       ДанныеПоля.РеквизитИмя);
	Результат.Вставить("ПредставлениеИмя",  ДанныеПоля.ПредставлениеРеквизитИмя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти