#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ТипДокумента = ТипЗнч(Документ);
		
		Если Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ЗаказПоставщику")

				)
			Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И (ТипДокумента = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
				Или ТипДокумента = Тип("ДокументОбъект.ПриемкаТоваровНаХранение"))
			Или ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ) Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
		КонецЕсли;

		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И (ТипДокумента = Тип("ДокументОбъект.ОтчетКомитенту") 
			Или ТипДокумента = Тип("ДокументОбъект.ОтчетКомитентуОСписании")
			) Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу);
		КонецЕсли;
		
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ЗаказыПоставщикам;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам закупок.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЗаказыПоставщикам");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "УслугиКОформлениюОтчетовПринципалу");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ДвиженияУслугиКОформлениюОтчетовПринципалуИзменение", 
		РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаказыПоставщикамИзменение") Тогда
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаОстатков.ЗаказПоставщику                КАК Заказ,
				|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
				|	ТаблицаОстатков.Склад                          КАК Склад,
				|	ТаблицаОстатков.КОформлениюОстаток             КАК КОформлению,
				|	ТаблицаОстатков.КПоступлениюОстаток            КАК КПоступлению
				|ИЗ
				|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
				|			(ЗаказПоставщику, Номенклатура, Характеристика, Склад) В
				|				(ВЫБРАТЬ
				|					Таблица.ЗаказПоставщику,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика,
				|					Таблица.Склад
				|				ИЗ
				|					ДвиженияЗаказыПоставщикамИзменение КАК Таблица)
				|	) КАК ТаблицаОстатков
				|ГДЕ
				|	ТаблицаОстатков.КОформлениюОстаток < 0
				|	ИЛИ ТаблицаОстатков.КПоступлениюОстаток < 0
				|";
			
		Иначе
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ЗаказыОстатки.ЗаказПоставщику                КАК Заказ,
				|	ЗаказыОстатки.Номенклатура                   КАК Номенклатура,
				|	ЗаказыОстатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
				|	ЗаказыОстатки.Характеристика                 КАК Характеристика,
				|	ЗаказыОстатки.Склад                          КАК Склад,
				|	ЗаказыОстатки.КОформлениюОстаток             КАК КОформлению,
				|	ЗаказыОстатки.КПоступлениюОстаток            КАК КПоступлению
				|ИЗ
				|	ВТЗаказыПоставщикамОстатки КАК ЗаказыОстатки
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		ВТДопустимыеОтклоненияЗаказыПоставщикам КАК ДопустимыеОтклонения
				|		ПО
				|			ЗаказыОстатки.ЗаказПоставщику  = ДопустимыеОтклонения.ЗаказПоставщику
				|			И ЗаказыОстатки.Номенклатура   = ДопустимыеОтклонения.Номенклатура
				|			И ЗаказыОстатки.Характеристика = ДопустимыеОтклонения.Характеристика
				|			И ЗаказыОстатки.Склад          = ДопустимыеОтклонения.Склад
				|ГДЕ
				|	ЗаказыОстатки.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0
				|	ИЛИ ЗаказыОстатки.КПоступлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонениеКПоступлению,0) < 0
				|";
			
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЗаказыПоставщикам");
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияУслугиКОформлениюОтчетовПринципалуИзменение") Тогда
		
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Организация КАК Организация,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
				|	ТаблицаОстатков.АналитикаУчетаНоменклатуры.Серия КАК Серия,
				|	ТаблицаОстатков.Соглашение КАК Соглашение,
				|	ТаблицаОстатков.Соглашение.Партнер КАК Комитент,
				|	ТаблицаОстатков.Валюта КАК Валюта,
				|	ТаблицаОстатков.КоличествоОстаток КАК Количество,
				|	ТаблицаОстатков.СуммаВыручкиОстаток КАК СуммаВыручки,
				|	ТаблицаОстатков.СуммаНДСОстаток КАК СуммаНДС
				|ИЗ
				|	РегистрНакопления.УслугиКОформлениюОтчетовПринципалу.Остатки(
				|			,
				|			(Организация, АналитикаУчетаНоменклатуры, Соглашение, Валюта) В
				|				(ВЫБРАТЬ
				|					Таблица.Организация,
				|					Таблица.АналитикаУчетаНоменклатуры,
				|					Таблица.Соглашение,
				|					Таблица.Валюта
				|				ИЗ
				|					ДвиженияУслугиКОформлениюОтчетовПринципалуИзменение КАК Таблица)) КАК ТаблицаОстатков
				|ГДЕ
				|	(ТаблицаОстатков.КоличествоОстаток < 0
				|			ИЛИ ТаблицаОстатков.СуммаВыручкиОстаток < 0
				|			ИЛИ ТаблицаОстатков.СуммаНДСОстаток < 0)";

		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиУслугиКОформлениюОтчетовПринципалу");
			
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаказыПоставщикамИзменение") Тогда
		
		ШаблонСообщенияСоСкладом = НСтр("ru = 'Номенклатура %1, склад %2
			|Оформлено больше, чем указано в распоряжении %3, на %4 %5'");
			
		ШаблонСообщенияБезСклада = НСтр("ru = 'Номенклатура %1
			|Оформлено больше, чем указано в распоряжении %3, на %4 %5'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЗаказыПоставщикам Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			Если ЗначениеЗаполнено(СтрокаОшибки.КОформлению) Тогда
				Количество = -СтрокаОшибки.КОформлению;
			Иначе
				Количество = -СтрокаОшибки.КПоступлению;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.Склад) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСоСкладом, ПредставлениеНоменклатуры, СтрокаОшибки.Склад,
					СтрокаОшибки.Заказ, Количество, СтрокаОшибки.ЕдиницаИзмерения);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияБезСклада, ПредставлениеНоменклатуры,,
					СтрокаОшибки.Заказ, Количество, СтрокаОшибки.ЕдиницаИзмерения);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияУслугиКОформлениюОтчетовПринципалуИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'По организации %1 не хватает к оформлению %2 %3 на сумму %4 %5 услуг: %6, у партнера %7'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиУслугиКОформлениюОтчетовПринципалу Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика,, СтрокаОшибки.Серия);
				
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.Организация, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения, -СтрокаОшибки.СуммаВыручки, СтрокаОшибки.Валюта, ПредставлениеНоменклатуры,
				СтрокаОшибки.Комитент);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
