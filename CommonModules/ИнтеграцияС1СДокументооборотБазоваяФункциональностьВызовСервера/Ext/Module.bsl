////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера: сервер, вызов сервера
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АсинхронныеОперации

// Записывает изменения объекта в Документообороте в фоновом задании.
//
// Параметры:
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ОбъектСтрока - Строка - строковое представление объекта XDTO с сохраняемыми данными.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ЗаписатьОбъектАсинхронно(УникальныйИдентификаторФормы, ОбъектСтрока) Экспорт
	
	ПараметрыДлительнойОперации = ПараметрыДлительнойОперации();
	ПараметрыДлительнойОперации.Вставить("ОбъектСтрока", ОбъектСтрока);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // Запускать сразу.
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись объекта в 1С:Документообороте'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъектВФоне",
		ПараметрыДлительнойОперации,
		ПараметрыВыполнения);
	
КонецФункции

// Определяет требуется ли обработать форму клиентского приложения согласно версии сервиса ДО, либо же вызвать исключение.
//
// Параметры:
//   ИнформацияОбОшибке - Строка
//                      - ИнформацияОбОшибке - информация об ошибке, полученной в ходе выполнения длительной операции.
//   МинимальнаяВерсияДО - Строка - минимальная версия сервиса ДО, требуемая для корректной работы формы.
//
// Возвращаемое значение:
//   Булево - Истина, в случае если форму требуется обработать. В противном случае будет вызвано исключение.
//
Функция НужноОбработатьФорму(Знач ИнформацияОбОшибке, МинимальнаяВерсияДО = "") Экспорт
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		Возврат Истина;
		
	ИначеЕсли МинимальнаяВерсияДО <> ""
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса(МинимальнаяВерсияДО) Тогда
		Возврат Истина;
		
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			ПредставлениеОшибки = ИнформацияОбОшибке;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ПредставлениеОшибки = Строка(ИнформацияОбОшибке);
		КонецЕсли;
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров для обращения к сервису 1С:Документооборот в фоновом задании.
//
// Параметры:
//   ИспользоватьКэш - Булево - при проверке возможности авторизации без пароля не требуется использовать кэш.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыДлительнойОперации
//
Функция ПараметрыДлительнойОперации(ИспользоватьКэш = Истина) Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыДлительнойОперации(ИспользоватьКэш);
	
КонецФункции

// Функция выполняется однократно и запускает фоновое задание подключения к ДО.
// Если фоновое задание было запущено ранее и еще не завершено - вернет текущее задание
// без запуска нового.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ИспользоватьКэш - Булево - при проверке возможности авторизации без пароля не требуется использовать кэш.
//
// Возвращаемое значение:
//   Неопределено - в случае если подключение не выполнялось.
//   см. ДлительныеОперации.ВыполнитьВФоне - в случае если подключение началось.
//
Функция ПодключитьсяИПолучитьВерсиюСервисаАсинхронно(ИмяПользователя, Пароль,
		УникальныйИдентификаторФормы = Неопределено, ИспользоватьКэш = Истина) Экспорт
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = ИспользоватьИнтеграцию();
	Если Не Настройки.ИспользоватьИнтеграциюДО2 И Не Настройки.ИспользоватьИнтеграциюДО3
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.АдресВебСервиса1СДокументооборот() = "" Тогда
		// Интеграция вообще не используется. Проверять нечего.
		Возврат Неопределено;
	КонецЕсли;
	
	ОперацияПодключения = ПараметрыСеанса.ИнтеграцияС1СДокументооборотОперацияПодключения.Получить(); // см. ДлительныеОперации.ВыполнитьВФоне
	
	Если ОперацияПодключения = Неопределено Тогда
		ЗаданиеВыполняется = Ложь;
	Иначе
		Попытка
			ЗаданиеВыполняется = Не ДлительныеОперации.ЗаданиеВыполнено(ОперацияПодключения.ИдентификаторЗадания);
		Исключение
			ЗаданиеВыполняется = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗаданиеВыполняется Тогда
		ОперацияПодключения = ОперацияПодключенияИПолученияВерсииСервиса(
			ИспользоватьКэш,
			ИмяПользователя,
			Пароль,
			УникальныйИдентификаторФормы);
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотОперацияПодключения = Новый ХранилищеЗначения(ОперацияПодключения);
	КонецЕсли;
	
	Возврат ОперацияПодключения;
	
КонецФункции

// Получает объект из Документооборота в фоновом задании.
//
// Параметры:
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   Тип - Строка - имя типа XDTO.
//   ID - Строка - уникальный идентификатор объекта в Документообороте.
//   Колонки - Массив из Строка - необязательно, состав заполняемых колонок.
//           - Строка - если список колонок разделен через запятую.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило интеграции для
//     заполнения объекта ИС.
//   ВнешнийОбъектИС - ЛюбаяСсылка - передается для заполнения свойства externalObject.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ПолучитьОбъектАсинхронно(УникальныйИдентификаторФормы, Тип, ID, Колонки = Неопределено,
		ПравилоИнтеграции = Неопределено, ВнешнийОбъектИС = Неопределено) Экспорт
	
	ПараметрыДлительнойОперации = ПараметрыДлительнойОперации();
	ПараметрыДлительнойОперации.Вставить("Тип", Тип);
	ПараметрыДлительнойОперации.Вставить("ID", ID);
	ПараметрыДлительнойОперации.Вставить("Колонки", Колонки);
	ПараметрыДлительнойОперации.Вставить("ПравилоИнтеграции", ПравилоИнтеграции);
	ПараметрыДлительнойОперации.Вставить("ВнешнийОбъектИС", ВнешнийОбъектИС);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // Запускать сразу.
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных из 1С:Документооборота'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъектВФоне",
		ПараметрыДлительнойОперации,
		ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Получает версию сервиса ДО.
//
// Возвращаемое значение:
//   Строка - версия сервиса.
//
Функция ВерсияСервиса() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	
КонецФункции

// Возвращает время жизни токена доступа к веб-сервису 1С:Документооборот в секундах.
//
// Возвращаемое значение:
//   Число
//
Функция ВремяЖизниТокенаДоступа() Экспорт
	
	Возврат 12*60*60; // Время жизни 12 часов.
	
КонецФункции

// Возвращает структуру данных для заполнения объекта ИС на основании объекта ДО.
//
// Параметры:
//   УИДПравила - УникальныйИдентификатор - уникальный идентификатор используемого правила.
//   ТипОбъектаДО - Строка - имя типа объекта XDTO.
//   ИдентификаторОбъектаДО - Строка - идентификатор объекта Документооборота.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеЗаполненияИнтегрируемогоОбъекта
//
Функция ДанныеЗаполненияИнтегрируемогоОбъекта(УИДПравила, ТипОбъектаДО, ИдентификаторОбъектаДО) Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеЗаполненияИнтегрируемогоОбъекта(
		УИДПравила,
		ТипОбъектаДО,
		ИдентификаторОбъектаДО);
	
КонецФункции

// Добавляет связь объекта ИС с объектом ДО.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ИнтегрированныйОбъект - ЛюбаяСсылка - объект ИС.
//   НаличиеПрисоединенныхФайлов - Булево - Истина, если в ДО есть присоединенные файлы.
//   ДобавитьСвязьВДО - Булево - Истина, если требуется добавить связь на стороне ДО.
//
Процедура ДобавитьСвязь(ID, Тип, ИнтегрированныйОбъект, НаличиеПрисоединенныхФайлов = Неопределено,
		ДобавитьСвязьВДО = Истина) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		СвязьВДОСоздаетсяАвтоматически =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.9.18");
		Если ДобавитьСвязьВДО Или Не СвязьВДОСоздаетсяАвтоматически Тогда
			Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
			
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
			
			Запрос.ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
				Прокси,
				ИнтегрированныйОбъект);
			
			Запрос.linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
			
			Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		КонецЕсли;
		
		РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
			ID,
			Тип,
			ИнтегрированныйОбъект,
			НаличиеПрисоединенныхФайлов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Не удалось добавить связь'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Получает доступность функционала версии web-сервиса Документооборота.
//
// Параметры:
//   ВерсияСервиса - Строка - версия web-сервиса Документооборота, содержащая требуемый функционал.
//
// Возвращаемое значение:
//   Булево - Истина, если web-сервис Документооборота указанной версии доступен.
//
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса = "") Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса(ВерсияСервиса);
	
КонецФункции

// Записывает ошибку в ЖР.
//
// Параметры:
//   ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибку(ТекстОшибки) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОшибку(ТекстОшибки);
	
КонецПроцедуры

// Записывает предупреждение в ЖР.
//
// Параметры:
//   ТекстПредупреждения - Строка - текст предупреждения.
//
Процедура ЗаписатьПредупреждение(ТекстПредупреждения) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьПредупреждение(ТекстПредупреждения);
	
КонецПроцедуры

// Возвращает имя объекта метаданных ИС по его типу.
//
// Параметры:
//   ТипОбъекта - Тип - тип объекта ИС.
//
// Возвращаемое значение:
//   Строка - имя объекта.
//
Функция ИмяОбъектаМетаданныхПоТипу(ТипОбъекта) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя();
	
КонецФункции

// Возвращает имя типа XDTO по типу объекта Интегрированной системы.
//
// Параметры:
//   ТипИС - Строка
//         - Тип - полное имя типа объекта ИС или тип объекта ИС.
//
// Возвращаемое значение:
//   Строка - имя типа XDTO.
//
Функция ИмяТипаXDTO(ТипИС) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.СоответствиеТипов();
	
	Если ТипЗнч(ТипИС) = Тип("Строка") Тогда
		Строка = ТаблицаСоответствия.Найти(ТипИС, "ИмяТипаИС");
	ИначеЕсли ТипЗнч(ТипИС) = Тип("Тип") Тогда
		Строка = ТаблицаСоответствия.Найти(ТипИС, "ТипОбъектаИС");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Строка["ИмяТипаXDTO"];
	КонецЕсли;
	
КонецФункции

// Возвращает полное имя типа объекта Интегрированной системы по имени типа XDTO.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Строка - полное имя типа объекта ИС.
//
Функция ИмяТипаИС(ИмяТипаXDTO) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяТипаXDTO");
	Если Строка = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Строка["ИмяТипаИС"];
	КонецЕсли;
	
КонецФункции

// Возвращает информацию, включена ли интеграция с 1С:Документооборотом.
//
// Возвращаемое значение:
//   Структура:
//     * ИспользоватьИнтеграциюДО2 - Булево
//     * ИспользоватьИнтеграциюДО3 - Булево
//
Функция ИспользоватьИнтеграцию() Экспорт
	
	Результат = Новый Структура("ИспользоватьИнтеграциюДО2, ИспользоватьИнтеграциюДО3", Ложь, Ложь);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		Результат.ИспользоватьИнтеграциюДО2 = МодульИнтеграцияС1СДокументооборот.ИспользоватьИнтеграцию();
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО3() Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		Результат.ИспользоватьИнтеграциюДО3 = МодульИнтеграцияС1СДокументооборот3.ИспользоватьИнтеграцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, настроена ли интеграция для указанного объекта интегрируемой системы.
//
// Параметры:
//   ОбъектИС - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - проверяемый объект ИС.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом
//                     - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - неявно возвращаемое значение,
//     правило интеграции, подходящее для объекта ИС.
//   СоздаватьАвтоматически - Булево - создавать правила интеграции автоматически, если в переопределяемой процедуре
//     ПриСозданииПравилИнтеграцииАвтоматически для данного объекта ИС прописано шаблонное правило.
//
// Возвращаемое значение:
//   Булево
//
Функция НастроенаИнтеграцияДляОбъекта(ОбъектИС, ПравилоИнтеграции = Неопределено,
		СоздаватьАвтоматически = Истина) Экспорт
	
	Результат = Ложь;
	
	СвязанныйОбъектДО = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДанныеОбъектаДОПоВнешнемуОбъекту(
		ОбъектИС);
	Если СвязанныйОбъектДО <> Неопределено Тогда
		Результат = Истина;
	Иначе
		Правила = НайтиСоздатьПодходящиеПравила(ОбъектИС,, СоздаватьАвтоматически);
		Если Правила.Количество() > 0 Тогда
			Результат = Истина;
			ПравилоИнтеграции = Правила[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив подходящих правил интеграции, или создает новые в случае их отсутствия, и если объект ИС
// поддерживает автоматическое создание правил.
//
// Параметры:
//   ОбъектИС - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//   ТипОбъектаИС - Строка - тип объекта ИС.
//   СоздаватьАвтоматически - Булево - создавать правила интеграции автоматически, если в переопределяемой процедуре
//     ПриСозданииПравилИнтеграцииАвтоматически для данного объекта ИС прописано шаблонное правило.
//
// Возвращаемое значение:
//   Массив из Структура:
//     * Ссылка - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило.
//     * ПредставлениеОбъектаДО - Строка - представление объекта ДО.
//     * ПредставлениеОбъектаИС - Строка - представление объекта ИС.
//     * ТипОбъектаДО - Строка - тип объекта ДО.
//     * ТипОбъектаИС - Строка - тип объекта ИС.
//     * ИдентификаторВидаДокумента - Строка - идентификатор вида документа ДО.
//     * ТипВидаДокумента - Строка - тип вида документа ДО.
//
Функция НайтиСоздатьПодходящиеПравила(ОбъектИС = Неопределено, ТипОбъектаИС = Неопределено,
		СоздаватьАвтоматически = Истина) Экспорт
	
	Правила = Новый Массив;
	
	Если ТипОбъектаИС = Неопределено И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектИС)) Тогда
		ТипОбъектаИС = ОбъектИС.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	Настройки = ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		
		МодульИнтеграцияС1СДокументооборотВызовСервера = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотВызовСервера");
		Правила = МодульИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ОбъектИС,,ТипОбъектаИС);
		Если Правила.Количество() = 0 И СоздаватьАвтоматически Тогда
			// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС.
			СозданныеПравила = МодульИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(
				?(ЗначениеЗаполнено(ТипОбъектаИС), ТипОбъектаИС, ОбъектИС));
			Если СозданныеПравила.Количество() = 1 Тогда
				Правила.Добавить(СозданныеПравила[0]);
			ИначеЕсли СозданныеПравила.Количество() > 1 Тогда
				Правила = МодульИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ОбъектИС,,ТипОбъектаИС);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		МодульИнтеграцияС1СДокументооборот3ВызовСервера = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборот3ВызовСервера");
		Если ЗначениеЗаполнено(ОбъектИС) Тогда
			Правила = МодульИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграцииОбъекта(
				ОбъектИС,,
				Истина);
		ИначеЕсли ЗначениеЗаполнено(ТипОбъектаИС) Тогда
			Правила = МодульИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграцииПоТипуОбъектаИС(
				ТипОбъектаИС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Правила;
	
КонецФункции

// Проверяет, известен ли пароль пользователя ДО. Возвращает Истина, если пароль пользователя ДО уже известен.
//
// Возвращаемое значение:
//   Булево
//
Функция ПарольИзвестен() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции()
		И ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен;
	
КонецФункции

// Возвращает настройки базы Документооборота.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки
//
Функция ПолучитьНастройки() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
	
КонецФункции

// Помечает объект на удаление или снимает пометку.
//
// Параметры:
//   ID - Строка - идентификатор помечаемого на удаление объекта в Документообороте.
//   Тип - Строка - имя типа XDTO помечаемого на удаление объекта.
//
Процедура ПометитьНаУдалениеСнятьПометкуОбъекта(ID, Тип) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПометитьНаУдалениеСнятьПометкуОбъекта(Прокси, ID, Тип);
	
КонецПроцедуры

// Помечает объект на удаление или снимает пометку.
//
// Параметры:
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * Тип - Строка
//
Процедура ПометитьНаУдалениеСнятьПометкуОбъектов(Объекты) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПометитьНаУдалениеСнятьПометкуОбъектов(Прокси, Объекты);
	
КонецПроцедуры

// Проверяет подключение к веб-сервису ДО и возвращает результат проверки.
//
// Параметры:
//   НастройкиАвторизации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НастройкиАвторизацииВ1СДокументообороте
//   АдресСервиса - Строка - адрес веб-сервиса ДО, или
//                - Неопределено - признак необходимости использовать ранее сохраненный адрес.
//   ТекстСообщенияОбОшибке - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ПользовательЗаданияОбмена - Булево - вызов выполняется для настройки пользователя задания обмена.
//     Параметры сеанса текущего пользователя изменяться не будут.
//
// Возвращаемое значение:
//   Булево - Истина, если подключиться удалось, и Ложь в противном случае.
//
Функция ПроверитьПодключение(НастройкиАвторизации, Знач АдресСервиса = Неопределено,
		ТекстСообщенияОбОшибке = "", ПользовательЗаданияОбмена = Ложь) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьПрокси(
		Ложь,
		НастройкиАвторизации,
		АдресСервиса,
		ТекстСообщенияОбОшибке,
		ПользовательЗаданияОбмена);
	
	Возврат (Прокси <> Неопределено);
	
КонецФункции

// Получает имя пользователя ДО и пароль из ИБ (в веб-клиенте - только имя пользователя). Все параметры -
// неявно возвращаемые значения.
//
// Параметры:
//   НастройкиАвторизации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НастройкиАвторизацииВ1СДокументообороте
//   ИмяКомпьютера - Строка - имя компьютера, хранящего часть пароля, или:
//                 - Неопределено - признак того, что пароль восстанавливать не нужно.
//   ЧастьПароляВИБ - Строка - часть пароля, хранимая в ИБ.
//   ВременныйФайлЧастиПароля - Строка - путь ко временному файлу с другой частью пароля.
//
Процедура ПрочитатьНастройкиАвторизации(НастройкиАвторизации, Знач ИмяКомпьютера = Неопределено, ЧастьПароляВИБ = "",
		ВременныйФайлЧастиПароля = "") Экспорт
	
	НастройкиАвторизации.ИмяПользователя = Неопределено;
	НастройкиАвторизации.ПарольСохранен = Ложь;
	НастройкиАвторизации.ИспользуетсяАутентификацияОС = Ложь;
	НастройкиАвторизации.ИспользуетсяАутентификацияJWT = Ложь;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	// Выберем имя пользователя и данные для восстановления пароля, или хотя бы имя пользователя. Приоритет -
	// у данных, сохраненных с текущего компьютера, чтобы обеспечить восстановление раздельно хранимого пароля.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиАвторизацииВ1СДокументообороте.ИмяПользователя КАК ИмяПользователя,
		|	НастройкиАвторизацииВ1СДокументообороте.ЧастьПароляВИнформационнойБазе КАК ЧастьПароляВИнформационнойБазе,
		|	НастройкиАвторизацииВ1СДокументообороте.ВременныйФайлЧастиПароля КАК ВременныйФайлЧастиПароля,
		|	НастройкиАвторизацииВ1СДокументообороте.ИспользуетсяАутентификацияОС КАК ИспользуетсяАутентификацияОС,
		|	НастройкиАвторизацииВ1СДокументообороте.ИспользуетсяАутентификацияJWT КАК ИспользуетсяАутентификацияJWT,
		|	ВЫБОР
		|		КОГДА НастройкиАвторизацииВ1СДокументообороте.ХешИмениКомпьютера = &ХешИмениКомпьютера
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.НастройкиАвторизацииВ1СДокументообороте КАК НастройкиАвторизацииВ1СДокументообороте
		|ГДЕ
		|	НастройкиАвторизацииВ1СДокументообороте.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет");
	Если ИмяКомпьютера = Неопределено Тогда // Веб-клиент.
		Запрос.УстановитьПараметр("ХешИмениКомпьютера", 0);
	Иначе // Восстановим данные для пароля, если компьютер тот же, или хотя бы имя.
		Запрос.УстановитьПараметр("ХешИмениКомпьютера", ХешСуммаCRC32(ИмяКомпьютера));
	КонецЕсли;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НастройкиАвторизации.ИмяПользователя = Выборка.ИмяПользователя;
		НастройкиАвторизации.ПарольСохранен = ЗначениеЗаполнено(Выборка.ВременныйФайлЧастиПароля);
		ЧастьПароляВИБ = Выборка.ЧастьПароляВИнформационнойБазе;
		ВременныйФайлЧастиПароля = Выборка.ВременныйФайлЧастиПароля;
		НастройкиАвторизации.ИспользуетсяАутентификацияОС = Выборка.ИспользуетсяАутентификацияОС;
		НастройкиАвторизации.ИспользуетсяАутентификацияJWT = Выборка.ИспользуетсяАутентификацияJWT;
	КонецЕсли;
	
КонецПроцедуры

// Получает настройки авторизации в ДО из старого хранилища (из хранилища общих настроек).
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль.
//   ПарольСохранен - Булево - Истина, если пароль сохранен.
//
Процедура ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(ИмяПользователя, Пароль, ПарольСохранен) Экспорт
	
	ИмяПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "Пользователь", "");
	Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "Пароль", "");
	ПарольСохранен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "СохранитьПароль", Ложь);
	
КонецПроцедуры

// Сбрасывает все сохраненные параметры подключения к ДО.
//
Процедура СброситьКэшПодключенияКДО() Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотWSОпределения = Новый ХранилищеЗначения(Неопределено);
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотОперацияПодключения = Новый ХранилищеЗначения(Неопределено);
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "";
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = "";
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT = Ложь;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = Ложь;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси = "";
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Сохраняет имя пользователя ДО и, если необходимо, пароль.
//
// Параметры:
//   НастройкиАвторизации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НастройкиАвторизацииВ1СДокументообороте
//   ИмяКомпьютера - Строка - имя компьютера, где хранится часть пароля, или:
//                 - Неопределено - признак того, что пароль сохранять не нужно.
//   ЧастьПароляВИБ - Строка - пароль целиком или его часть, хранимая в ИБ.
//   ВременныйФайлЧастиПароля - Строка - путь ко временному файлу с другой частью пароля.
//
Процедура СохранитьНастройкиАвторизации(Знач НастройкиАвторизации, Знач ИмяКомпьютера = Неопределено,
		Знач ЧастьПароляВИБ = "", Знач ВременныйФайлЧастиПароля = "") Экспорт
	
	Если ИмяКомпьютера = Неопределено Тогда // Веб-клиент.
		ПарольСохранен = Ложь;
		ХешИмениКомпьютера = 0;
	Иначе
		ПарольСохранен = Истина;
		ХешИмениКомпьютера = ХешСуммаCRC32(ИмяКомпьютера);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиАвторизацииВ1СДокументообороте.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписей.Отбор.ПарольСохранен.Установить(ПарольСохранен);
	НаборЗаписей.Отбор.ХешИмениКомпьютера.Установить(ХешИмениКомпьютера);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.ИмяПользователя = НастройкиАвторизации.ИмяПользователя;
	Запись.ЧастьПароляВИнформационнойБазе = ЧастьПароляВИБ; // Не имеет смысла для веб-клиента.
	Запись.ВременныйФайлЧастиПароля = ВременныйФайлЧастиПароля; // Не имеет смысла для веб-клиента.
	Запись.ИспользуетсяАутентификацияОС = НастройкиАвторизации.ИспользуетсяАутентификацияОС;
	Запись.ИспользуетсяАутентификацияJWT = НастройкиАвторизации.ИспользуетсяАутентификацияJWT;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Сохраняет имя пользователя ДО для обмена и его пароль.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО для выполнения обмена данными.
//   Пароль - Строка - пароль этого пользователя.
//
Процедура СохранитьНастройкиАвторизацииДляОбмена(Знач ИмяПользователя, Знач Пароль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Установить(ИмяПользователя);
	Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Установить(Пароль);
	
КонецПроцедуры

// Сохраняет признак использования аутентификации ОС для текущего пользователя, не изменяя настройки авторизации
// 1С:Предприятия.
//
// Параметры:
//   ИмяКомпьютера - Строка, Неопределено - имя компьютера, где хранится часть пароля. Неопределено указывает на
//     работу с веб-клиентом.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура СохранитьНастройкиИспользованияАутентификацииОС(ИмяКомпьютера, ИспользуетсяАутентификацияОС) Экспорт
	
	Если ИмяКомпьютера = Неопределено Тогда // Веб-клиент.
		ПарольСохранен = Ложь;
		ХешИмениКомпьютера = 0;
	Иначе
		ПарольСохранен = Истина;
		ХешИмениКомпьютера = ХешСуммаCRC32(ИмяКомпьютера);
	КонецЕсли;
	
	Запись = РегистрыСведений.НастройкиАвторизацииВ1СДокументообороте.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.Прочитать();
	
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.ИспользуетсяАутентификацияОС = ИспользуетсяАутентификацияОС;
	
	Запись.Записать();
	
КонецПроцедуры

// Сохраняет признак использования аутентификации JWT для текущего пользователя, не изменяя настройки авторизации
// 1С:Предприятия.
//
// Параметры:
//   ИмяКомпьютера - Строка, Неопределено - имя компьютера, где хранится часть пароля. Неопределено указывает на
//     работу с веб-клиентом.
//   ИспользуетсяАутентификацияJWT - Булево - Истина, если используется аутентификация через JWT-токены.
//
Процедура СохранитьНастройкиИспользованияАутентификацииJWT(ИмяКомпьютера, ИспользуетсяАутентификацияJWT) Экспорт
	
	Если ИмяКомпьютера = Неопределено Тогда // Веб-клиент.
		ПарольСохранен = Ложь;
		ХешИмениКомпьютера = 0;
	Иначе
		ПарольСохранен = Истина;
		ХешИмениКомпьютера = ХешСуммаCRC32(ИмяКомпьютера);
	КонецЕсли;
	
	Запись = РегистрыСведений.НастройкиАвторизацииВ1СДокументообороте.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.Прочитать();
	
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.ИспользуетсяАутентификацияJWT = ИспользуетсяАутентификацияJWT;
	
	Запись.Записать();
	
КонецПроцедуры

// Возвращает тип объекта интегрированной системы по имени типа XDTO.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Тип, Неопределено - тип объекта ИС.
//
Функция ТипИС(ИмяТипаXDTO) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяТипаXDTO");
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка["ТипОбъектаИС"];
	КонецЕсли;
	
КонецФункции

// Удаляет настройки авторизации в ДО из старого хранилища (из хранилища общих настроек).
//
Процедура УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"ИнтеграцияС1СДокументооборот", "Пользователь", ПользовательИБ.Имя);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"ИнтеграцияС1СДокументооборот", "Пароль", ПользовательИБ.Имя);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"ИнтеграцияС1СДокументооборот", "СохранитьПароль", ПользовательИБ.Имя);
	
КонецПроцедуры

// Удаляет связь объекта с объектом Документооборота.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   ИнтегрированныйОбъект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - ссылка на объект
//     системы.
//
Процедура УдалитьСвязь(ID, Тип, ИнтегрированныйОбъект) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.УдалитьСвязь(ID, Тип, ИнтегрированныйОбъект);
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRemoveObjectLinkRequest");
		
		Запрос.ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,
			ИнтегрированныйОбъект);
		
		Запрос.linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
		
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Не удалось удалить связь'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает версию сервиса в параметры сеанса.
//
// Параметры:
//   ВерсияСервиса - Строка, Неопределено - устанавливаемая версия сервиса. Неопределено указывает на необходимость
//     получить версию сервиса перед установкой.
//   ТекстОшибки - Строка - неявно возвращаемое значение, текст сообщения об ошибке,
//     полученный при определении версии сервиса.
//
Процедура УстановитьВерсиюСервисаВПараметрыСеанса(Знач ВерсияСервиса = Неопределено, ТекстОшибки = "") Экспорт
	
	Если ВерсияСервиса = Неопределено Тогда // Получим ее.
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьВерсиюСервиса(, ТекстОшибки);
	Иначе
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ВерсияСервиса;
	КонецЕсли;
	
	Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки авторизации ДО в параметры сеанса.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//   ИспользуетсяАутентификацияJWT - Булево - Истина, если используется аутентификация через JWT-токены.
//   WSОпределения - ХранилищеЗначения - содержит двоичные данные WSDL описания сервиса ДО.
//   МестоположениеПрокси - Строка - местоположение прокси сервиса 1С:Документооборота.
//
Процедура УстановитьНастройкиАвторизацииВПараметрыСеанса(Знач ИмяПользователя, Знач Пароль,
		Знач ИспользуетсяАутентификацияОС, Знач ИспользуетсяАутентификацияJWT,
		WSОпределения = Неопределено, МестоположениеПрокси = Неопределено) Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Истина;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = Строка(ИмяПользователя);
	Если Пароль = Неопределено Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
	Иначе
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = Строка(Пароль);
	КонецЕсли;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = ИспользуетсяАутентификацияОС;
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT = ИспользуетсяАутентификацияJWT;
	
	Если ЗначениеЗаполнено(МестоположениеПрокси) Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси = МестоположениеПрокси;
	Иначе
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси = "";
	КонецЕсли;
	
	Если WSОпределения <> Неопределено Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотWSОпределения = WSОпределения;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбновитьПовторноИспользуемыеПараметры(); // Возможно был изменен текущий пользователь ДО.
	
КонецПроцедуры

// Читает настройки авторизации ДО из параметров сеанса.
//
// Параметры:
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//   ИспользуетсяАутентификацияJWT - Булево - Истина, если используется аутентификация через JWT-токены.
//
Процедура ПрочитатьНастройкиАвторизацииИзПараметровСеанса(ИспользуетсяАутентификацияОС,
		ИспользуетсяАутентификацияJWT) Экспорт
	
	ИспользуетсяАутентификацияОС = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
	ИспользуетсяАутентификацияJWT = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT;
	
КонецПроцедуры

// Возвращает предопределенные шаблоны выражений на встроенном языке.
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//     * Ключ - Строка - имя шаблона.
//     * Значение - Строка - выражение на встроенном языке.
//
Функция ШаблоныВыраженийНаВстроенномЯзыке() Экспорт
	
	ШаблоныВыражений = Новый Соответствие;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервераПереопределяемый.ПриОпределенииШаблоновВыраженийНаВстроенномЯзыке(
		ШаблоныВыражений);
	
	Возврат ШаблоныВыражений;
	
КонецФункции

// Возвращает Истина, если текущий пользователь - тот, под которым выполняется регламентное задание обмена.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоПользовательЗаданияОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Попытка
		ЗаданиеОбмена = РегламентныеЗаданияСервер.Задание(
			Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными);
		Возврат (ЗаданиеОбмена.ИмяПользователя = ПользовательИБ.Имя);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ЗапросыКДокументообороту

// Готовит данные для выбора из списка при обработке события АвтоПодбор у полей ввода.
//
// Параметры:
//   ТипыЗначений - Строка - имена классов XDTO, разделенные ';'.
//                - СписокЗначений из Строка - список типов XDTO.
//                - Массив из Строка - список типов XDTO.
//   ДанныеВыбора - СписокЗначений из Структура - наполняемый список:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * presentation - Строка
//     * isNotAvailableAccordingCommunicationRules - Булево
//   Текст - Строка - строка текста, введенная в поле ввода.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//   Отбор - Структура - необязательный, дополнительный отбор.
//
Процедура ДанныеДляАвтоПодбора(ТипыЗначений, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ТипЗнч(ТипыЗначений) = Тип("Строка") Тогда
		МассивТипов = Новый Массив;
		Если СтрНайти(ТипыЗначений, ";") > 0 Тогда
			
			Для Каждого ИмяТипа Из СтрРазделить(ТипыЗначений, ";") Цикл
				МассивТипов.Добавить(СокрЛП(ИмяТипа));
			КонецЦикла;
			
		ИначеЕсли СтрНайти(ТипыЗначений, ",") > 0 Тогда
			
			Для Каждого ИмяТипа Из СтрРазделить(ТипыЗначений, ",") Цикл
				МассивТипов.Добавить(СокрЛП(ИмяТипа));
			КонецЦикла;
			
		Иначе
			
			МассивТипов.Добавить(СокрЛП(ТипыЗначений));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТипыЗначений) = Тип("СписокЗначений") Тогда
		МассивТипов = ТипыЗначений.ВыгрузитьЗначения();
		
	ИначеЕсли ТипЗнч(ТипыЗначений) = Тип("Массив") Тогда
		МассивТипов = ТипыЗначений;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно подобрать данные для типа: %1'"), Строка(ТипыЗначений));
		
	КонецЕсли;
	
	Для Каждого ТипXDTO Из МассивТипов Цикл
		
		Если Не ЗначениеЗаполнено(ТипXDTO) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
		УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
		
		ДополнитьНаборКолонокУсловийВыбора(СписокУсловий.columnSet, ТипXDTO);
		
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "name";
		Условие.value = Текст;
		
		УсловияОтбора.Добавить(Условие);
		
		// Наложим дополнительный отбор.
		Если Отбор <> Неопределено Тогда
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Если СтрокаОтбора.Ключ = "КонтекстПравилКоммуникаций" Тогда
					// Дополняем условия отбора контекстом правил коммуникаций.
					МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
					МодульИнтеграцияС1СДокументооборот3.ДополнитьОтборКонтекстомПравилКоммуникаций(
						Прокси,
						СтрокаОтбора.Значение,
						УсловияОтбора);
				Иначе
					Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
					Условие.property = СтрокаОтбора.Ключ;
					Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Структура") Тогда
						Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
							Прокси,
							СтрокаОтбора.Значение.ID,
							СтрокаОтбора.Значение.type);
					Иначе
						Условие.value = СтрокаОтбора.Значение;
					КонецЕсли;
					УсловияОтбора.Добавить(Условие);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Ограничим размер списка.
		Если СписокУсловий.Свойства().Получить("limit") <> Неопределено Тогда
			СписокУсловий.limit = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредельноеКоличествоВыбираемыхОбъектов(
				ТипXDTO);
		КонецЕсли;
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
			Прокси,
			ТипXDTO,
			СписокУсловий);
		
		Для Каждого Элемент Из Результат.items Цикл
			
			Имя = Элемент.object.name + ?(Элемент.object.objectID.type = "DMBusinessProcessExecutorRole", " (роль)", "");
			
			ЭлементДанных = Новый Структура;
			ЭлементДанных.Вставить("ID", Элемент.object.objectID.ID);
			ЭлементДанных.Вставить("type", Элемент.object.objectID.type);
			ЭлементДанных.Вставить("presentation", Элемент.object.objectID.presentation);
			ЭлементДанных.Вставить("name", Имя);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
					Элемент.object, "isNotAvailableAccordingCommunicationRules") Тогда
				ЭлементДанных.Вставить("isNotAvailableAccordingCommunicationRules",
					Элемент.object.isNotAvailableAccordingCommunicationRules);
			Иначе
				ЭлементДанных.Вставить("isNotAvailableAccordingCommunicationRules", Ложь);
			КонецЕсли;
			
			// Прочие свойства, зависящие от типа (см. ДополнитьСписокУсловийВыбора);
			Для Каждого Колонка Из СписокУсловий.columnSet Цикл
				Значение = Элемент.object[Колонка];
				Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
					Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Значение, "objectID") Тогда
						ЭлементДанных.Вставить(Колонка, Значение.name);
						ЭлементДанных.Вставить(СтрШаблон("%1ID", Колонка), Значение.objectID.ID);
						ЭлементДанных.Вставить(СтрШаблон("%1Тип", Колонка), Значение.objectID.type);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ЭлементДанных.Вставить(Колонка, Значение);
			КонецЦикла;
			
			ПредставлениеЭлемента = Новый ФорматированнаяСтрока(
				Имя,,
				?(ЭлементДанных.isNotAvailableAccordingCommunicationRules,
					ЦветаСтиля.НедоступныеДанныеЦвет,
					Неопределено));
			
			ДанныеВыбора.Добавить(ЭлементДанных, ПредставлениеЭлемента);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает объект 1С:Документооборота, связанный с объектом конфигурации-потребителя.
//
// Параметры:
//   СсылкаНаВнешнийОбъект - ЛюбаяСсылка - ссылка на объект конфигурации-потребителя.
//   ПолучитьИзДО - Булево - требуется получить ссылку на связанный объект на стороне Документооборота.
//   ПолучатьНДПС - Булево - требуется получить настройки доступности по состоянию на стороне Документооборота.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеОбъектаДОПоВнешнемуОбъекту
//
Функция ДанныеОбъектаДОПоВнешнемуОбъекту(СсылкаНаВнешнийОбъект, ПолучитьИзДО = Ложь, ПолучатьНДПС = Ложь) Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеОбъектаДОПоВнешнемуОбъекту(
		СсылкаНаВнешнийОбъект,
		ПолучитьИзДО,
		ПолучатьНДПС);
	
КонецФункции

// Возвращает список значений, заполненный значениями элементов указанного типа с учетом отборов.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO.
//   Отбор - Структура - с перечислением свойств и их значений.
//
// Возвращаемое значение:
//   СписокЗначений из Структура:
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//
Функция ЗначенияДляВыбора(ТипОбъектаВыбора, Отбор = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
			Условие.property = СтрокаОтбора.Ключ;
			
			Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Структура") Тогда
				Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
					Прокси,
					СтрокаОтбора.Значение.ID,
					СтрокаОтбора.Значение.type);
			Иначе
				Условие.value = СтрокаОтбора.Значение;
			КонецЕсли;
			
			УсловияОтбора.Добавить(Условие);
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьНаборКолонокУсловийВыбора(СписокУсловий.columnSet, ТипОбъектаВыбора);
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		ТипОбъектаВыбора,
		СписокУсловий);
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Каждого Элемент Из Результат.items Цикл
		
		// Стандартные свойства.
		СтруктураВыбора = Новый Структура;
		СтруктураВыбора.Вставить("РеквизитПредставление", Элемент.object.name);
		СтруктураВыбора.Вставить("РеквизитID", Элемент.object.objectID.ID);
		СтруктураВыбора.Вставить("РеквизитТип", Элемент.object.objectID.type);
		
		// Прочие свойства, зависящие от типа (см. ДополнитьСписокУсловийВыбора);
		Для Каждого Колонка Из СписокУсловий.columnSet Цикл
			СтруктураВыбора.Вставить(Колонка, Элемент.object[Колонка]);
		КонецЦикла;
		
		СписокВыбора.Добавить(СтруктураВыбора, Элемент.object.name);
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

// Ищет объект в ДО по его типу и по точному совпадению наименования.
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта, поиск по которому требуется выполнить.
//   Имя - Строка - наименование объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено - XDTO Объект типа DMObject. Если объект не найден возвращается Неопределено.
//
Функция НайтиОбъектВДОПоИмени(ТипОбъекта, Имя) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Настройки = ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяОбработки = "ИнтеграцияС1СДокументооборот";
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяОбработки = "ИнтеграцияС1СДокументооборот3";
	Иначе
		Возврат НайденныйОбъект;
	КонецЕсли;
	
	// Определим структуру поиска
	ОтборИмя = Новый Структура;
	ОтборИмя.Вставить("Значение", Имя);
	ОтборИмя.Вставить("ОператорСравнения", "=");
	ОтборИмя.Вставить("Представление", "Наименование");
	ОтборИмя.Вставить("ПредставлениеУсловия", СтрШаблон("= ""%1""", Имя));
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("name", ОтборИмя);
	
	// Выполним поиск
	АдресВоВременномХранилище = "";
	КоличествоРезультатов = 0;
	ПредельноеКоличествоРезультатов = 0;
	Обработки[ИмяОбработки].ВыполнитьПоискПоРеквизитам(
		ТипОбъекта,
		СтруктураОтбора,
		АдресВоВременномХранилище,
		КоличествоРезультатов,
		ПредельноеКоличествоРезультатов);
	
	Если КоличествоРезультатов > 0 Тогда
		// Получим объект
		РезультатыПоиска = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		НайденныйОбъект = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			ТипОбъекта,
			РезультатыПоиска.НайденныеОбъекты[0].ID);
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//
// Возвращаемое значение:
//   Структура:
//     * name - Строка
//     * ID - Строка
//     * type - Строка
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(ОбъектИС, Правило) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Настройки = ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		ОбъектДОИлиСообщение = МодульИнтеграцияС1СДокументооборот.СоздатьОбъектДОПоПравилу(
			Прокси,
			ОбъектИС,
			Правило);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		ОбъектДОИлиСообщение = МодульИнтеграцияС1СДокументооборот3.СоздатьОбъектДОПоПравилу(
			Прокси,
			ОбъектИС,
			Правило);
	Иначе
		Возврат НСтр("ru = 'Интеграция с 1С:Документооборот не используется'");
	КонецЕсли;
	
	Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда
		// Вернем сообщение об ошибке.
		Возврат ОбъектДОИлиСообщение;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("name", ОбъектДОИлиСообщение.name);
	Результат.Вставить("ID", ОбъектДОИлиСообщение.objectID.ID);
	Результат.Вставить("type", ОбъектДОИлиСообщение.objectID.type);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьНДПС(Результат);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьНДПСизОбъектаXDTO(Результат, ОбъектДОИлиСообщение);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцессыИЗадачи

// Вызывается при изменении состояния согласования в ДО. Изменяет состояние на стороне ИС.
//
// Параметры:
//   Идентификатор - Строка - идентификатор связанного объекта ДО.
//   Тип - Строка - тип связанного объекта ДО.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте - новое состояние, или
//             - Неопределено - при прерывании согласования.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект, или
//                       - Неопределено - признак необходимости найти объект ИС по объекту ДО.
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - Дата установки нового состояния.
//
Процедура ПриИзмененииСостоянияСогласования(Знач Идентификатор, Знач Тип, Знач Состояние, Знач ВызовИзФормыОбъекта,
		ПредметСогласования = Неопределено, Знач Установил = Неопределено, Знач ДатаУстановки = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостоянияСогласованияВДокументообороте.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОбъектаДО.Установить(Идентификатор);
	
	Если Состояние <> Неопределено Тогда // Неопределено - удаление.
		Запись = НаборЗаписей.Добавить();
		Запись.ИдентификаторОбъектаДО = Идентификатор;
		Запись.Состояние = Состояние;
		Если Установил = Неопределено Тогда
			Запись.Установил = Строка(Пользователи.ТекущийПользователь());
		Иначе
			Запись.Установил = Установил;
		КонецЕсли;
		Если ДатаУстановки = Неопределено Тогда
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
		Иначе
			Запись.ДатаУстановки = ДатаУстановки;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	// Ссылка на предмет в ИС может быть неизвестна, если вызов - из формы задачи ДО. Определим ее.
	Если ПредметСогласования = Неопределено Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК ПредметСогласования
			|ИЗ
			|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
			|ГДЕ
			|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = &Тип
			|	И ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО = &Идентификатор");
		Запрос.УстановитьПараметр("Тип", Тип);
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПредметСогласования = Выборка.ПредметСогласования;
		КонецЕсли;
	КонецЕсли;
	
	// На стороне ИС не следует выполнять действия при согласовании несвязанных объектов ДО.
	Если ПредметСогласования <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриИзмененииСостоянияСогласования(
			ПредметСогласования,
			Состояние,
			ВызовИзФормыОбъекта,
			Установил,
			ДатаУстановки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

// Возвращает список версий файла по его идентификатору.
//
// Параметры:
//   ИдентификаторФайла - Строка - уникальный идентификатор файла Документооборота.
//   ВключатьПомеченныеНаУдаление - Булево - Истина, если нужно получить файлы без учета пометки.
//
// Возвращаемое значение:
//   СписокXDTO - список объектов XDTO типа DMObjectListItem.
//
Функция ВерсииФайла(ИдентификаторФайла, ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "owner";
	Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ИдентификаторФайла,
		"DMFile");
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
	ПолучаемыеПоля = СписокУсловий.columnSet; // СписокXDTO
	
	УсловияОтбора.Добавить(Условие);
	
	ПолучаемыеПоля.Добавить("size");
	ПолучаемыеПоля.Добавить("creationDate");
	ПолучаемыеПоля.Добавить("modificationDate");
	ПолучаемыеПоля.Добавить("author");
	ПолучаемыеПоля.Добавить("extension");
	
	Если ВключатьПомеченныеНаУдаление Тогда
		
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "ignoreDeletionMark";
		Условие.value = Истина;
		УсловияОтбора.Добавить(Условие);
		
		ПолучаемыеПоля.Добавить("deletionMark");
		
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		ПолучаемыеПоля.Добавить("modificationDateUniversal");
		ПолучаемыеПоля.Добавить("comment");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.9.18") Тогда
		ПолучаемыеПоля.Добавить("number");
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		"DMFileVersion",
		СписокУсловий);
	
	Возврат Результат.items;
	
КонецФункции

// Получает двоичные данные файла.
//
// Параметры:
//   ID - Строка - идентификатор файла, данные которого нужно получить.
//
// Возвращаемое значение:
//   ДвоичныеДанные - двоичные данные файла из Документооборота.
//
Функция ДвоичныеДанныеФайла(ID) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		"DMFile",
		ID,
		"objectID,name,binaryData,extension");
	
	Возврат ДанныеФайла.binaryData;
	
КонецФункции

// Возвращает список XDTO, содержащий данные файлов.
//
// Параметры:
//   Файлы - Массив из Строка - массив идентификаторов файлов в Документообороте.
//
// Возвращаемое значение:
//   СписокXDTO - список объектов XDTO типа DMFile.
//
Функция ДвоичныеДанныеФайлов(Файлы) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	СписокОбъектов = Новый Массив;
	Для Каждого Файл Из Файлы Цикл
		СписокОбъектов.Добавить(Новый Структура("ID, Тип", Файл, "DMFile"));
	КонецЦикла;
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъекты(
		Прокси,
		СписокОбъектов,
		"objectID,name,binaryData,encrypted");
	
КонецФункции

// Возвращает Истина, если есть хранимые файлы к объекту ВнешнийОбъект.
//
// Параметры:
//   ВнешнийОбъект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект-владелец.
//
// Возвращаемое значение:
//   Булево - Истина, если есть хранимые файлы.
//
Функция ЕстьХранимыеФайлыВИС(ВнешнийОбъект) Экспорт
	
	ЕстьХранимыеФайлы = Ложь;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриОпределенииНаличияПрисоединенныхФайлов(
		ВнешнийОбъект,
		ЕстьХранимыеФайлы);
	
	Возврат ЕстьХранимыеФайлы;
	
КонецФункции

// Заносит информацию о подписи объекта в базу Документооборот.
//
// Параметры:
//   Наименование - Строка - имя объекта ДО.
//   ID - Строка - идентификатор объекта ДО.
//   Тип - Строка - тип объекта XDTO.
//   Зашифрован - Булево - владелец подписи зашифрован.
//   МассивПодписей - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПодписи
//
Процедура ЗанестиИнформациюОПодписяхОбъекта(Наименование, ID, Тип, Зашифрован, МассивПодписей) Экспорт
	
	ПодписиОбъектов = Новый Соответствие;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
		ПодписиОбъектов,
		Наименование,
		ID,
		Тип,
		Зашифрован,
		МассивПодписей);
	ЗанестиИнформациюОПодписяхОбъектов(ПодписиОбъектов);
	
КонецПроцедуры

// Заполняет поля указанного файла данными его владельца на стороне ДО.
//
// Параметры:
//   ID - Строка - идентификатор файла ДО.
//
Процедура ЗаполнитьПоляФайлаДаннымиВладельца(ID) Экспорт
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.0.15.1") Тогда
		ТекстСообщения = НСтр("ru = 'Для заполнения файлов нужен 1С:Документооборот версии не ниже 2.0.15.1'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMAutoFillRequest");
	
	Файл = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMFile");
	Файл.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, "DMFile");
	Файл.name = "";
	
	Запрос.file = Файл;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
КонецПроцедуры

// Заполняет список файлов копированием присоединенных файлов или Файлов из внешнего объекта.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект потребитель.
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   Представление - Строка - представление объекта Документооборота.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ЗаполнитьФайлыКопированием(ВнешнийОбъект, ID, Тип, Представление, УникальныйИдентификаторФормы) Экспорт
	
	МассивФайлов = ПолучитьХранимыеФайлы(ВнешнийОбъект);
	
	Для Каждого ДанныеФайла Из МассивФайлов Цикл
		
		// Поместим Файл в ВременноеХранилище.
		Если ДанныеФайла.Свойство("ДвоичныеДанныеФайла") Тогда
			Если ТипЗнч(ДанныеФайла.ДвоичныеДанныеФайла) = Тип("Строка")
					И ЭтоАдресВременногоХранилища(ДанныеФайла.ДвоичныеДанныеФайла) Тогда
				АдресВременногоХранилищаФайла = ДанныеФайла.ДвоичныеДанныеФайла;
			Иначе // Двоичные данные.
				АдресВременногоХранилищаФайла =
					ПоместитьВоВременноеХранилище(ДанныеФайла.ДвоичныеДанныеФайла, УникальныйИдентификаторФормы);
			КонецЕсли;
		ИначеЕсли ДанныеФайла.Свойство("СсылкаНаДвоичныеДанныеФайла")
				И ЭтоАдресВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
			АдресВременногоХранилищаФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не удалось определить адрес временного хранилища присоединенного файла'");
		КонецЕсли;
		
		ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
			ДанныеФайла.Наименование,
			Неопределено,
			"DMFile",
			ДанныеФайла.Расширение);
		ТекущийФайл.Размер = ДанныеФайла.Размер;
		ТекущийФайл.ДатаМодификации = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
		ТекущийФайл.ДатаМодификацииУниверсальная = ДанныеФайла.ДатаМодификацииУниверсальная;
		Если ДанныеФайла.СтатусИзвлеченияТекста = "Извлечен" Тогда
			ТекстХранилище = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФайла.Ссылка, "ТекстХранилище");
			Если ТипЗнч(ТекстХранилище) = Тип("ХранилищеЗначения") Тогда
				ТекущийФайл.Текст = ТекстХранилище.Получить();
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСоздания = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(
			ТекущийФайл);
		ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		ПараметрыСоздания.Владелец = ВнешнийОбъект;
		
		СоздатьФайлВДокументообороте(
			ПараметрыСоздания,
			ID,
			Тип,
			Представление);
		
	КонецЦикла;
	
КонецПроцедуры

// Захватывает файл в ДО.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла в ДО.
//   ДатаЗахвата - Дата
//
Процедура ЗахватитьФайл(Знач Идентификатор, Знач ДатаЗахвата) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMLockFileRequest");
	Запрос.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, Идентификатор, "DMFile");
	Запрос.lockDate = ДатаЗахвата;
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

// Проверяет, используются ли присоединенные файлы ДО. Предназначена для определения ФО на клиенте.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьПрисоединенныеФайлы1СДокументооборота() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИспользоватьПрисоединенныеФайлы1СДокументооборота();
	
КонецФункции

// Проверяет, следует ли использовать присоединенные файлы ДО для указанного объекта. Возвращает
// Истина, если интеграция настроена, а своих присоединенных файлов у объекта ИС нет.
//
// Параметры:
//   ОбъектИС - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - проверяемый объект ИС.
//   ПравилоИнтеграции - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом
//                     - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - неявно возвращаемое значение,
//     правило интеграции, подходящее для объекта ИС.
//
// Возвращаемое значение:
//   Булево - Истина, если следует использовать присоединенные файлы ДО.
//
Функция ИспользоватьПрисоединенныеФайлы1СДокументооборотаДляОбъекта(ОбъектИС, ПравилоИнтеграции = Неопределено) Экспорт
	
	Если Не ИспользоватьПрисоединенныеФайлы1СДокументооборота() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастроенаИнтеграцияДляОбъекта = НастроенаИнтеграцияДляОбъекта(ОбъектИС, ПравилоИнтеграции, Ложь);
	
	Настройки = ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		
		Если Не НастроенаИнтеграцияДляОбъекта Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Не ЕстьХранимыеФайлыВИС(ОбъектИС);
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		Возврат НастроенаИнтеграцияДляОбъекта;
		
	КонецЕсли;
	
КонецФункции

// Возвращает максимально допустимый размер файла из соответствующей константы.
//
// Возвращаемое значение:
//   Число
//
Функция МаксимальныйРазмерПередаваемогоФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайлаПередачи = Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Получить();
	
	Если МаксимальныйРазмерФайлаПередачи = Неопределено Или МаксимальныйРазмерФайлаПередачи = 0 Тогда
		МаксимальныйРазмерФайлаПередачи = 10485760; // = 10 мб
		Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Установить(МаксимальныйРазмерФайлаПередачи);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайлаПередачи;
	
КонецФункции

// Заполняет список файлов в карточке документа.
//
// Параметры:
//   ДеревоФайлов - ДанныеФормыДерево - список который требуется заполнить:
//     * Наименование - Строка
//     * ИндексКартинки - Число
//     * Размер - Число
//     * ДатаСоздания - Дата
//     * ПодписанЭП - Булево
//     * Автор - Строка
//     * ДатаМодификации - Дата
//     * Редактируется - Булево
//     * РедактируетсяТекущимПользователем - Булево
//     * Описание - Строка
//     * Расширение - Строка
//     * Зашифрован - Булево
//     * ЯвляетсяОригиналом - Булево
//     * ПометкаУдаления - Булево
//     * ШаблонID - Строка
//     * Редактирует - Строка
//     * НомерКартинкиПодписанЗашифрован - Число
//     * ID - Строка
//     * Тип - Строка
//     * РольФайлаID - Строка
//     * РольОбязательная - Булево
//   ДоступныеРоли - СписокЗначений из Строка - список который требуется заполнить, содержит
//     идентификаторы и представления ролей.
//   ФайлыXDTO - СписокXDTO - список объектов XDTO типа DMFile.
//   ИспользоватьРолиФайлов - Булево - признак использования ролей файлов.
//   РолиФайловXDTO - СписокXDTO - список объектов XDTO типа DMFileRole.
//   ЭлементДляОбновленияЗаголовка - ГруппаФормы - элемент формы, заголовок которого требуется дополнить
//     количеством файлов.
//
Процедура ОбновитьДеревоФайлов(ДеревоФайлов, ДоступныеРоли, ФайлыXDTO, ИспользоватьРолиФайлов = Ложь,
		РолиФайловXDTO = Неопределено, ЭлементДляОбновленияЗаголовка = Неопределено) Экспорт
	
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	ДоступныеРоли.Очистить();
	
	ТекущийПользовательИСотрудники =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
	
	// Определим нужно ли выводить пустую роль файлов.
	Если ИспользоватьРолиФайлов Тогда
		
		ЕстьФайлыБезРоли = Ложь;
		Для Каждого ФайлXDTO Из ФайлыXDTO Цикл
			
			Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "role") Тогда
				ЕстьФайлыБезРоли = Истина;
				Прервать;
			КонецЕсли;
			
			РольФайлаНайдена = Ложь;
			Для Каждого РольФайлаXDTO Из РолиФайловXDTO Цикл
				Если РольФайлаXDTO.objectID.id = ФайлXDTO.role.objectID.id Тогда
					РольФайлаНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не РольФайлаНайдена Тогда
				ЕстьФайлыБезРоли = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// На первом уровне дерева выведем роли файлов.
	Если ИспользоватьРолиФайлов Тогда
		
		Для Каждого РольФайлаXDTO Из РолиФайловXDTO Цикл
			НоваяСтрока = ДеревоФайлов.ПолучитьЭлементы().Добавить();
			НоваяСтрока.ИндексКартинки = 2;
			НоваяСтрока.НомерКартинкиПодписанЗашифрован = -1;
			НоваяСтрока.Наименование = РольФайлаXDTO.name;
			НоваяСтрока.ID = РольФайлаXDTO.objectID.id;
			НоваяСтрока.Тип = РольФайлаXDTO.objectID.type;
			НоваяСтрока.РольОбязательная = РольФайлаXDTO.required;
			
			ДоступныеРоли.Добавить(РольФайлаXDTO.objectID.id, РольФайлаXDTO.name);
		КонецЦикла;
		
		Если ЕстьФайлыБезРоли Тогда
			СтрокаПустаяРоль = ДеревоФайлов.ПолучитьЭлементы().Добавить();
			СтрокаПустаяРоль.ИндексКартинки = 2;
			СтрокаПустаяРоль.НомерКартинкиПодписанЗашифрован = -1;
			СтрокаПустаяРоль.Наименование = "<>";
			СтрокаПустаяРоль.ID = "";
			СтрокаПустаяРоль.Тип = "DMFileRole";
			СтрокаПустаяРоль.РольОбязательная = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// На втором уровне дерева выведем файлы.
	Для Каждого ФайлXDTO Из ФайлыXDTO Цикл
		
		КорневойЭлемент = ДеревоФайлов.ПолучитьЭлементы();
		
		Если ИспользоватьРолиФайлов Тогда
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "role") Тогда
				
				РольФайлаНайдена = Ложь;
				
				Для Каждого СтрокаРольФайлов Из ДеревоФайлов.ПолучитьЭлементы() Цикл
					Если СтрокаРольФайлов.ID = ФайлXDTO.role.objectID.id Тогда
						КорневойЭлемент = СтрокаРольФайлов.ПолучитьЭлементы();
						РольФайлаНайдена = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не РольФайлаНайдена Тогда
					КорневойЭлемент = СтрокаПустаяРоль.ПолучитьЭлементы();
				КонецЕсли;
				
			Иначе
				
				КорневойЭлемент = СтрокаПустаяРоль.ПолучитьЭлементы();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСтрокуСпискаФайлов(КорневойЭлемент.Добавить(), ФайлXDTO, ТекущийПользовательИСотрудники);
		
	КонецЦикла;
	
	// Добавим количество файлов в заголовки ролей.
	Если ИспользоватьРолиФайлов Тогда
		
		Для Каждого СтрокаРольФайлов Из ДеревоФайлов.ПолучитьЭлементы() Цикл
			КолВоФайловВРоли = СтрокаРольФайлов.ПолучитьЭлементы().Количество();
			Если КолВоФайловВРоли > 0 Тогда
				СтрокаРольФайлов.Наименование = СтрШаблон("%1 (%2)", СтрокаРольФайлов.Наименование, КолВоФайловВРоли);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Выведем общее количество файлов в заголовок формы.
	Если ЭлементДляОбновленияЗаголовка <> Неопределено Тогда
		
		ФайлыКоличество = ФайлыXDTO.Количество();
		Если ФайлыКоличество = 0 Тогда
			ФайлыЗаголовок = НСтр("ru = 'Файлы'");
		Иначе
			ФайлыЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файлы (%1)'"),
				ФайлыКоличество);
		КонецЕсли;
		ЭлементДляОбновленияЗаголовка.Заголовок = ФайлыЗаголовок;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список файлов в карточке документа.
//
// Параметры:
//   ФайлыXDTO - СписокXDTO - список объектов XDTO типа DMFile.
//   Файлы - ДанныеФормыКоллекция:
//     * ID - Строка
//     * Автор - Строка
//     * АдресВременногоХранилищаФайла - Строка
//     * ДатаМодификацииУниверсальная - Дата
//     * ДатаСоздания - Дата
//     * Зашифрован - Булево
//     * ИндексКартинки - Число
//     * Наименование - Строка
//     * НомерКартинкиПодписанЗашифрован - Число
//     * Описание - Строка
//     * ПодписанЭП - Булево
//     * ПометкаУдаления - Булево
//     * Размер - Число
//     * Расширение - Строка
//     * Редактируется - Булево
//     * РедактируетсяТекущимПользователем - Булево
//     * Тип - Строка
//     * ШаблонID - Строка
//     * ЯвляетсяОригиналом - Булево
//   ЭлементДляОбновленияЗаголовка - ГруппаФормы - элемент формы, заголовок которого требуется дополнить
//     количеством файлов.
//
Процедура ОбновитьСписокФайлов(ФайлыXDTO, Файлы, ЭлементДляОбновленияЗаголовка = Неопределено) Экспорт
	
	Файлы.Очистить();
	
	ТекущийПользовательИСотрудники =
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
	
	// Файлы.
	Для Каждого ФайлXDTO Из ФайлыXDTO Цикл
		ЗаполнитьСтрокуСпискаФайлов(Файлы.Добавить(), ФайлXDTO, ТекущийПользовательИСотрудники);
	КонецЦикла;
	
	Если ЭлементДляОбновленияЗаголовка <> Неопределено Тогда
		ФайлыКоличество = Файлы.Количество();
		Если ФайлыКоличество = 0 Тогда
			ФайлыЗаголовок = НСтр("ru = 'Файлы'");
		Иначе
			ФайлыЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файлы (%1)'"),
				ФайлыКоличество);
		КонецЕсли;
		ЭлементДляОбновленияЗаголовка.Заголовок = ФайлыЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет файл ДО двоичными данными, предварительно помещенными во временное хранилище.
//
// Параметры:
//   Параметры - Структура - параметры создания файла, содержит свойства:
//     * ТекущийФайл - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла
//     * УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//     * СведенияОРедактировании - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПолучитьСведенияОРедактированииФайла.
//     * АдресВременногоХранилищаФайла - Строка - адрес временного хранилища, содержащий двоичные данные.
//     * ОсвободитьФайл - Булево - Истина, если файл следует освободить.
//     * ОбновитьСведенияОРедактировании - Булево - указывает следует ли обновить сведения о редактировании.
//
// Возвращаемое значение:
//    Булево - Истина, если файл помещен успешно.
//
Функция ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(Знач Параметры) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Файл = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMFile");
	Файл.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Параметры.ТекущийФайл.ID,
		Параметры.ТекущийФайл.Тип);
	Файл.name = ""; // имя не меняется
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаФайла);
	Файл.binaryData = ДвоичныеДанные;
	Если Не ПустаяСтрока(Параметры.ТекущийФайл.Текст) Тогда
		Файл.text = Параметры.ТекущийФайл.Текст;
	КонецЕсли;
	
	// В веб-клиенте без расширения размер и дата могут быть неизвестны на клиенте. Получим.
	Если Не ЗначениеЗаполнено(Параметры.ТекущийФайл.Размер) Тогда
		Параметры.ТекущийФайл.Размер = ДвоичныеДанные.Размер();
	КонецЕсли;
	ДатаСеанса = ТекущаяДатаСеанса();
	Если Не ЗначениеЗаполнено(Параметры.ТекущийФайл.ДатаМодификации) Тогда
		Параметры.ТекущийФайл.ДатаМодификации = ДатаСеанса;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Параметры.ТекущийФайл.ДатаМодификацииУниверсальная) Тогда
		Параметры.ТекущийФайл.ДатаМодификацииУниверсальная = УниверсальноеВремя(ДатаСеанса);
	КонецЕсли;
	
	Файл.extension = Параметры.ТекущийФайл.Расширение;
	Файл.size = Параметры.ТекущийФайл.Размер;
	Файл.modificationDate = Параметры.ТекущийФайл.ДатаМодификации;
	Файл.modificationDateUniversal = Параметры.ТекущийФайл.ДатаМодификацииУниверсальная;
	Если Параметры.Свойство("СведенияОРедактировании")
			И Параметры.СведенияОРедактировании.Свойство("КомментарийКВерсии")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(Файл, "comment") Тогда
		Файл.comment = Параметры.СведенияОРедактировании.КомментарийКВерсии;
	КонецЕсли;
	
	РезультатЗаписи = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(Прокси, Файл);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		
		Если Параметры.ОсвободитьФайл Тогда
			ОсвободитьФайл(Параметры.ТекущийФайл.ID);
		КонецЕсли;
		
		Если Параметры.ОбновитьСведенияОРедактировании Тогда
			Если Параметры.Свойство("СведенияОРедактировании") Тогда
				СведенияОРедактировании = Параметры.СведенияОРедактировании;
				
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
						Прокси, РезультатЗаписи.objects[0], "DMObjectChangeResponseStructure") Тогда
					ОбновленныйФайл = РезультатЗаписи.objects[0].object;
				Иначе
					ОбновленныйФайл = РезультатЗаписи.objects[0];
				КонецЕсли;
				
				СведенияОРедактировании.ИдентификаторВерсии = ОбновленныйФайл.activeVersion.objectID.ID;
			Иначе
				СведенияОРедактировании = ПолучитьСведенияОРедактированииФайла(
					Параметры.ТекущийФайл.ID,
					Параметры.ТекущийФайл.Тип);
			КонецЕсли;
			Если СведенияОРедактировании.Сохранен Тогда
				СведенияОРедактировании.НаЧтение = Параметры.ОсвободитьФайл;
			Иначе
				СведенияОРедактировании.Сохранен = Истина;
				СведенияОРедактировании.Вставить("НаЧтение", Истина);
				СведенияОРедактировании.Вставить("ВРабочемКаталогеВладельца", Ложь);
			КонецЕсли;
			СведенияОРедактировании.Вставить("Размер", Параметры.ТекущийФайл.Размер);
			СведенияОРедактировании.Вставить(
				"ДатаМодификацииУниверсальная",
			Параметры.ТекущийФайл.ДатаМодификацииУниверсальная);
			СохранитьСведенияОРедактированииФайла(СведенияОРедактировании);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру описания файла из Документооборота с двоичными данными, если передан
// адрес временного хранилища для них.
//
// Параметры:
//   ID - Строка - идентификатор файла.
//   Форма - ФормаКлиентскогоПриложения - если задана, помещаем на форму дополнительные реквизиты.
//   АдресВременногоХранилищаФайла - Строка - адрес для получения двоичных данных.
//
// Возвращаемое значение:
//   Структура - описание файла в ДО:
//     * Наименование - Строка
//     * Расширение - Строка
//     * Описание - Строка
//     * Размер - Число
//     * ПодписанЭП - Булево
//     * Зашифрован - Булево
//     * НомерКартинкиПодписанЗашифрован - Число
//     * Автор - Строка
//     * ID - Строка
//     * ДатаСоздания - Дата
//     * Редактируется - Булево
//     * ДопРеквизиты - СписокXDTO
//     * ДатаМодификацииУниверсальная - Дата
//     * ДатаМодификации - Дата
//     * АвторМодификации - Строка
//     * ЯвляетсяОригиналом - Булево
//     * ЯвляетсяОригиналомВидимость - Булево
//     * ЯвляетсяОригиналомТолькоПросмотр - Булево
//     * Шаблон - Строка
//     * РольФайла - Строка
//     * РольФайлаID - Строка
//     * Код - Строка
//     * Проект - Строка
//     * ПредставлениеHTML - Строка
//     * ПредпросмотрУрезан - Булево
//                          - Неопределено
//     * ЗадачиПоПриложению - Строка
//     * ХранитьВерсии - Булево
//                     - Неопределено
//     * ТекущаяВерсияID - Строка
//                       - Неопределено
//     * ТекущаяВерсияНомер - Строка
//                          - Неопределено
//     * ТекущаяВерсияАвтор - Строка
//                          - Неопределено
//     * ТекущаяВерсияДатаСоздания - Дата
//                                 - Неопределено
//     * ТекущаяВерсияДатаИзменения - Дата
//                                  - Неопределено
//     * ТекущаяВерсияРазмер - Число
//                           - Неопределено
//     * СтатусЭП - Число
//                - Неопределено
//     * СтатусЭППодсказка - Строка
//                         - Неопределено
//     * СтатусВзаимодействия - Число
//                            - Неопределено
//     * СтатусВзаимодействияПодсказка - Строка
//                                     - Неопределено
//     * Владелец - Строка
//     * ВладелецID - Строка
//     * ВладелецТип - Строка
//     * ВладелецФайла - см. РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота
//     * Редактирует - Строка
//     * РедактируетID - Строка
//     * РедактируетТип - Строка
//     * ДатаЗаема - Дата
//     * Подписи - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураПодписи
//
Функция ОписаниеФайла(ID, Форма = Неопределено, АдресВременногоХранилищаФайла = "") Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ПолучаемыеПоля = Новый Массив;
	
	ПолучаемыеПоля.Добавить("objectID");
	ПолучаемыеПоля.Добавить("signed");
	ПолучаемыеПоля.Добавить("name");
	ПолучаемыеПоля.Добавить("size");
	ПолучаемыеПоля.Добавить("creationDate");
	ПолучаемыеПоля.Добавить("modificationDate");
	ПолучаемыеПоля.Добавить("modificationDateUniversal");
	ПолучаемыеПоля.Добавить("author");
	ПолучаемыеПоля.Добавить("extension");
	ПолучаемыеПоля.Добавить("description");
	ПолучаемыеПоля.Добавить("editing");
	ПолучаемыеПоля.Добавить("encrypted");
	ПолучаемыеПоля.Добавить("scannedOriginal");
	ПолучаемыеПоля.Добавить("template");
	ПолучаемыеПоля.Добавить("additionalProperties");
	// Получение двоичных данных.
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
		ПолучаемыеПоля.Добавить("binaryData");
	КонецЕсли;
	// Получение владельца файла.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.1.3") Тогда
		ПолучаемыеПоля.Добавить("owner");
	КонецЕсли;
	// Получение сведений о редактировании.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		ПолучаемыеПоля.Добавить("editingUser");
		ПолучаемыеПоля.Добавить("lockDate");
		ПолучаемыеПоля.Добавить("activeVersion");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.9.18") Тогда
		ПолучаемыеПоля.Добавить("htmlView");
		ПолучаемыеПоля.Добавить("htmlViewTruncated");
		ПолучаемыеПоля.Добавить("modificatedBy");
		ПолучаемыеПоля.Добавить("role");
		ПолучаемыеПоля.Добавить("signatureStatus");
		ПолучаемыеПоля.Добавить("signatureStatusDescription");
		ПолучаемыеПоля.Добавить("interactionStatus");
		ПолучаемыеПоля.Добавить("interactionStatusDescription");
		ПолучаемыеПоля.Добавить("tasksDescription");
		ПолучаемыеПоля.Добавить("storeVersions");
		ПолучаемыеПоля.Добавить("code");
		ПолучаемыеПоля.Добавить("project");
		ПолучаемыеПоля.Добавить("scannedOriginalEnabled");
		ПолучаемыеПоля.Добавить("scannedOriginalReadOnly");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.9.18") Тогда
		ПолучаемыеПоля.Добавить("signatures");
	Иначе
		ПолучаемыеПоля.Добавить("signatures.author");
		ПолучаемыеПоля.Добавить("signatures.date");
		ПолучаемыеПоля.Добавить("signatures.comment");
		ПолучаемыеПоля.Добавить("signatures.signature");
		ПолучаемыеПоля.Добавить("signatures.thumbprint");
		ПолучаемыеПоля.Добавить("signatures.lineNumber");
		ПолучаемыеПоля.Добавить("signatures.signer");
		ПолучаемыеПоля.Добавить("signatures.certificate");
		ПолучаемыеПоля.Добавить("signatures.signatureFileName");
	КонецЕсли;
	
	СведенияОФайле = СведенияОФайле(Прокси, ID, ПолучаемыеПоля);
	
	ОписаниеФайла = Новый Структура;
	
	ОписаниеФайла.Вставить("Наименование", СведенияОФайле.name);
	ОписаниеФайла.Вставить("Расширение", СведенияОФайле.extension);
	ОписаниеФайла.Вставить("Описание", СведенияОФайле.description);
	ОписаниеФайла.Вставить("Размер", СведенияОФайле.size);
	
	ОписаниеФайла.Вставить("ПодписанЭП", СведенияОФайле.signed);
	ОписаниеФайла.Вставить("Зашифрован", СведенияОФайле.encrypted);
	ОписаниеФайла.Вставить("НомерКартинкиПодписанЗашифрован", НомерКартинкиПодписанЗашифрован(СведенияОФайле));
	
	ОписаниеФайла.Вставить("ID", СведенияОФайле.objectID.ID);
	ОписаниеФайла.Вставить("ДатаСоздания", СведенияОФайле.creationDate);
	ОписаниеФайла.Вставить("Редактируется", СведенияОФайле.editing);
	ОписаниеФайла.Вставить("ДопРеквизиты", СведенияОФайле.additionalProperties);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "author") Тогда
		ОписаниеФайла.Вставить("Автор", СведенияОФайле.author.name);
	Иначе
		ОписаниеФайла.Вставить("Автор", "");
	КонецЕсли;
	
	ОписаниеФайла.Вставить("ДатаМодификацииУниверсальная", СведенияОФайле.modificationDateUniversal);
	ОписаниеФайла.Вставить("ДатаМодификации", СведенияОФайле.modificationDate);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "modificatedBy") Тогда
		ОписаниеФайла.Вставить("АвторМодификации", СведенияОФайле.modificatedBy.name);
	Иначе
		ОписаниеФайла.Вставить("АвторМодификации", "");
	КонецЕсли;
	
	ОписаниеФайла.Вставить("ЯвляетсяОригиналом", СведенияОФайле.scannedOriginal);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "scannedOriginalEnabled") Тогда
		ОписаниеФайла.Вставить("ЯвляетсяОригиналомВидимость", СведенияОФайле.scannedOriginalEnabled);
	Иначе
		ОписаниеФайла.Вставить("ЯвляетсяОригиналомВидимость", Ложь);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "scannedOriginalReadOnly") Тогда
		ОписаниеФайла.Вставить("ЯвляетсяОригиналомТолькоПросмотр", СведенияОФайле.scannedOriginalReadOnly);
	Иначе
		ОписаниеФайла.Вставить("ЯвляетсяОригиналомТолькоПросмотр", Истина);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "template") Тогда
		ОписаниеФайла.Вставить("Шаблон", СведенияОФайле.template.name);
	Иначе
		ОписаниеФайла.Вставить("Шаблон", "");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "role") Тогда
		ОписаниеФайла.Вставить("РольФайла", СведенияОФайле.role.name);
		ОписаниеФайла.Вставить("РольФайлаID", СведенияОФайле.role.objectID.ID);
	Иначе
		ОписаниеФайла.Вставить("РольФайла", "");
		ОписаниеФайла.Вставить("РольФайлаID", "");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "code") Тогда
		ОписаниеФайла.Вставить("Код", СведенияОФайле.code);
	Иначе
		ОписаниеФайла.Вставить("Код", "");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "project") Тогда
		ОписаниеФайла.Вставить("Проект", СведенияОФайле.project.name);
	Иначе
		ОписаниеФайла.Вставить("Проект", "");
	КонецЕсли;
	
	// Предпросмотр файла.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "htmlView") Тогда
		ОписаниеФайла.Вставить("ПредставлениеHTML", СведенияОФайле.htmlView);
		ОписаниеФайла.Вставить("ПредпросмотрУрезан", СведенияОФайле.htmlViewTruncated);
	Иначе
		ОписаниеФайла.Вставить("ПредставлениеHTML", "");
		ОписаниеФайла.Вставить("ПредпросмотрУрезан", Неопределено);
	КонецЕсли;
	
	// Заголовок команды задачи по приложению.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "tasksDescription") Тогда
		ОписаниеФайла.Вставить("ЗадачиПоПриложению", СведенияОФайле.tasksDescription);
	Иначе
		ОписаниеФайла.Вставить("ЗадачиПоПриложению", "");
	КонецЕсли;
	
	// Хранить версии.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "storeVersions") Тогда
		ОписаниеФайла.Вставить("ХранитьВерсии", СведенияОФайле.storeVersions);
	Иначе
		ОписаниеФайла.Вставить("ХранитьВерсии", Неопределено);
	КонецЕсли;
	
	// Текущая версия.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "activeVersion") Тогда
		ТекущаяВерсияXDTO = СведенияОФайле.activeVersion;
		ОписаниеФайла.Вставить("ТекущаяВерсияID", ТекущаяВерсияXDTO.objectID.ID);
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ТекущаяВерсияXDTO, "number") Тогда
			ОписаниеФайла.Вставить("ТекущаяВерсияНомер", ТекущаяВерсияXDTO.number);
		Иначе
			ОписаниеФайла.Вставить("ТекущаяВерсияНомер", Неопределено);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ТекущаяВерсияXDTO, "author") Тогда
			ОписаниеФайла.Вставить("ТекущаяВерсияАвтор", ТекущаяВерсияXDTO.author.name);
		Иначе
			ОписаниеФайла.Вставить("ТекущаяВерсияАвтор", Неопределено);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ТекущаяВерсияXDTO, "creationDate") Тогда
			ОписаниеФайла.Вставить("ТекущаяВерсияДатаСоздания", ТекущаяВерсияXDTO.creationDate);
		Иначе
			ОписаниеФайла.Вставить("ТекущаяВерсияДатаСоздания", Неопределено);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ТекущаяВерсияXDTO, "modificationDate") Тогда
			ОписаниеФайла.Вставить("ТекущаяВерсияДатаИзменения", ТекущаяВерсияXDTO.modificationDate);
		Иначе
			ОписаниеФайла.Вставить("ТекущаяВерсияДатаИзменения", Неопределено);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ТекущаяВерсияXDTO, "size") Тогда
			ОписаниеФайла.Вставить("ТекущаяВерсияРазмер", ТекущаяВерсияXDTO.size);
		Иначе
			ОписаниеФайла.Вставить("ТекущаяВерсияРазмер", Неопределено);
		КонецЕсли;
	Иначе
		ОписаниеФайла.Вставить("ТекущаяВерсияID", Неопределено);
		ОписаниеФайла.Вставить("ТекущаяВерсияНомер", Неопределено);
		ОписаниеФайла.Вставить("ТекущаяВерсияАвтор", Неопределено);
		ОписаниеФайла.Вставить("ТекущаяВерсияДатаСоздания", Неопределено);
		ОписаниеФайла.Вставить("ТекущаяВерсияДатаИзменения", Неопределено);
		ОписаниеФайла.Вставить("ТекущаяВерсияРазмер", Неопределено);
	КонецЕсли;
	
	// Статус ЭП файла.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "signatureStatus") Тогда
		ОписаниеФайла.Вставить("СтатусЭП", СведенияОФайле.signatureStatus);
		ОписаниеФайла.Вставить("СтатусЭППодсказка", СведенияОФайле.signatureStatusDescription);
	Иначе
		ОписаниеФайла.Вставить("СтатусЭП", Неопределено);
		ОписаниеФайла.Вставить("СтатусЭППодсказка", Неопределено);
	КонецЕсли;
	
	// Статус взаимодействия файла.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "interactionStatus") Тогда
		ОписаниеФайла.Вставить("СтатусВзаимодействия", СведенияОФайле.interactionStatus);
		ОписаниеФайла.Вставить("СтатусВзаимодействияПодсказка", СведенияОФайле.interactionStatusDescription);
	Иначе
		ОписаниеФайла.Вставить("СтатусВзаимодействия", Неопределено);
		ОписаниеФайла.Вставить("СтатусВзаимодействияПодсказка", Неопределено);
	КонецЕсли;
	
	// Сохранение двоичных данных.
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаФайла) Тогда
		ПоместитьВоВременноеХранилище(СведенияОФайле.binaryData, АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	// Получение владельца файла.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.1.3") Тогда
		ОписаниеФайла.Вставить("Владелец", СведенияОФайле.owner.name);
		ОписаниеФайла.Вставить("ВладелецID", СведенияОФайле.owner.objectID.ID);
		ОписаниеФайла.Вставить("ВладелецТип", СведенияОФайле.owner.objectID.type);
		ВладелецФайла = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
			СведенияОФайле.owner.objectID.ID,
			СведенияОФайле.owner.objectID.type);
		ОписаниеФайла.Вставить("ВладелецФайла", ВладелецФайла);
	КонецЕсли;
	
	// Получение сведений о редактировании.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СведенияОФайле, "editingUser") Тогда
			ОписаниеФайла.Вставить("Редактирует", СведенияОФайле.editingUser.name);
			ОписаниеФайла.Вставить("РедактируетID", СведенияОФайле.editingUser.objectID.ID);
			ОписаниеФайла.Вставить("РедактируетТип", СведенияОФайле.editingUser.objectID.type);
		Иначе
			ОписаниеФайла.Вставить("Редактирует", "");
			ОписаниеФайла.Вставить("РедактируетID", "");
			ОписаниеФайла.Вставить("РедактируетТип", "");
		КонецЕсли;
		ОписаниеФайла.Вставить("ДатаЗаема", СведенияОФайле.lockDate);
	КонецЕсли;
	
	Подписи = Новый Массив;
	
	Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
		Подписи.Добавить(ДанныеПодписиИзXDTO(ПодписьXDTO));
	КонецЦикла;
	
	ОписаниеФайла.Вставить("Подписи", Подписи);
	
	Если Форма <> Неопределено Тогда
		Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПоместитьДополнительныеРеквизитыНаФорму(
			Форма,
			СведенияОФайле);
		Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьНавигационнуюСсылку(
			Форма,
			СведенияОФайле);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Освобождает файл в ДО.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла в ДО.
//
Процедура ОсвободитьФайл(Знач Идентификатор) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMUnlockFileRequest");
	Запрос.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, Идентификатор, "DMFile");
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

// Формирует структуру параметров, необходимую для показа пользователю вопроса о переносе файлов из ИС в ДО, и для
// дальнейшего переноса файлов.
//
// Параметры:
//   ДанныеСвязи - Структура:
//     * ID - Строка - идентификатор объекта Документооборота.
//     * Тип - Строка - тип XDTO объекта Документооборота.
//     * Объект - ЛюбаяСсылка - ссылка на объект интегрированной системы, являющийся владельцем файлов.
//   ПрисоединенныеФайлыВИС - СписокЗначений из ЛюбаяСсылка - список файлов в ИС, не перенесенных в ДО.
//                          - Неопределено - если список файлов требуется определить.
//   ТипСправочникаСФайлами - Строка - полное имя метаданных владельца файла в ИС.
//   ПредставлениеТипаВладельца - Строка - представление типа владельца файла в ИС.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыПереносаФайловВДО
//
Функция ПараметрыПереносаФайловВДО(ДанныеСвязи, ПрисоединенныеФайлыВИС = Неопределено,
		ТипСправочникаСФайлами = "Неопределено", ПредставлениеТипаВладельца = "объекта") Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыПереносаФайловВДО(
		ДанныеСвязи,
		ПрисоединенныеФайлыВИС,
		ТипСправочникаСФайлами,
		ПредставлениеТипаВладельца);
	
КонецФункции

// Получает двоичные данные версии файла и помещает их во временное хранилище.
//
// Параметры:
//   ID - Строка - идентификатор версии файла.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   Размер - Число - неявно возвращаемый параметр, размер файла в ДО.
//   ДатаМодификацииУниверсальная - Дата - неявно возвращаемый параметр, дата-время изменения в ДО.
//
// Возвращаемое значение:
//   Строка - адрес во временном хранилище с двоичными данными версии файла.
//
Функция ПолучитьВерсиюФайлаИПоместитьВХранилище(ID, УникальныйИдентификаторФормы, Размер = Неопределено,
		ДатаМодификацииУниверсальная = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ДанныеВерсии = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		"DMFileVersion",
		ID,
		"objectID,name,binaryData,extension,size,modificationDateUniversal");
	Размер = ДанныеВерсии.size;
	ДатаМодификацииУниверсальная = ДанныеВерсии.modificationDateUniversal;
	Адрес = ПоместитьВоВременноеХранилище(ДанныеВерсии.binaryData, УникальныйИдентификаторФормы);
	
	Возврат Адрес;
	
КонецФункции

// Получает из ДО сведения о редактировании активной версии файла или указанной версии.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла или версии.
//   Тип - Строка - DMFile или DMFileVersion.
//
// Возвращаемое значение:
//   Структура:
//     * ИдентификаторВерсии - Строка - идентификатор сохраненной версии файла (тот же, если версия указана явно).
//     * Сохранен - Булево - Истина, если файл сохранен на диске.
//     * ДатаСохранения - Дата - дата сохранения файла на диске, если он сохранен.
//     * ПолныйПуть - Строка - полный путь к файлу на диске, если он сохранен.
//     * РекомендуемаяПапка - Строка - рекомендуемая папка для сохранения файла, если он не сохранен.
//     * НаЧтение - Булево - Истина, если файл сохранен только для чтения.
//     * ВРабочемКаталогеВладельца - Булево - Истина, если файл сохранен в рабочем каталоге папки-владельца.
//     * ДатаМодификацииУниверсальная - Дата - дата и время модификации сохраненной версии файла.
//     * Размер - Число - размер сохраненной версии файла.
//     * МаксимальныйРазмерЛокальногоКэшаФайлов - Число - максимальный размер каталога.
//     * КомментарийКВерсии - Строка - комментарий к версии файла. Применимо к ДО 3.0.11 или выше.
//
Функция ПолучитьСведенияОРедактированииФайла(Идентификатор, Тип) Экспорт
	
	СведенияОРедактировании = СведенияОРедактировании(Идентификатор, Тип);
	
	Сведения = Новый Структура;
	Сведения.Вставить("ИдентификаторВерсии", СведенияОРедактировании.objectID.ID);
	Сведения.Вставить("Сохранен", СведенияОРедактировании.info.saved);
	Если Сведения.Сохранен Тогда
		Сведения.Вставить("ДатаСохранения", СведенияОРедактировании.info.saveDate);
		Сведения.Вставить("ПолныйПуть", СведенияОРедактировании.info.fullPath);
		Сведения.Вставить("НаЧтение", СведенияОРедактировании.info.readOnly);
		Сведения.Вставить("ДатаМодификацииУниверсальная", СведенияОРедактировании.info.modificationDateUniversal);
		Сведения.Вставить("Размер", СведенияОРедактировании.info.size);
	КонецЕсли;
	Сведения.Вставить("РекомендуемаяПапка", СведенияОРедактировании.info.folder);
	Сведения.Вставить("МаксимальныйРазмерЛокальногоКэшаФайлов", 0);
	Сведения.Вставить("ВРабочемКаталогеВладельца", СведенияОРедактировании.info.inOwnersFolder);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.14.2") Тогда
		Сведения.МаксимальныйРазмерЛокальногоКэшаФайлов = СведенияОРедактировании.info.maxFolderSize;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.11.25") Тогда
		Сведения.Вставить("КомментарийКВерсии", "");
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

// Получает двоичные данные файла и помещает во временное хранилище. При указании даты заема выполняется
// заем файла в ДО текущим пользователем. Для уменьшения числа вызовов неявно возвращаются размер и дата.
//
// Параметры:
//   ID - Строка - идентификатор файла
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//   ДатаЗаема - Дата - дата заема файла текущим пользователем. Если не указана, заем не производится.
//   Размер - Число - неявно возвращаемый параметр, размер файла в ДО.
//   ДатаМодификацииУниверсальная - Дата - неявно возвращаемый параметр, дата-время изменения в ДО.
//
// Возвращаемое значение:
//   Строка - адрес во временном хранилище с двоичными данными активной версии файла.
//
Функция ПолучитьФайлИПоместитьВХранилище(ID, УникальныйИдентификаторФормы, ДатаЗаема = Неопределено,
		Размер = Неопределено, ДатаМодификацииУниверсальная = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ДатаЗаема = Неопределено Тогда
		ДанныеФайла = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			"DMFile",
			ID,
			"objectID,name,binaryData,extension,size,modificationDateUniversal");
	Иначе // Получение с захватом.
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
			ВызватьИсключение НСтр("ru = 'Заем файлов не поддерживается используемой версией 1С:Документооборота'");
		КонецЕсли;
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMLockFileRequest");
		ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
		
		Запрос.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, "DMFile");
		Запрос.lockDate = ДатаЗаема;
		ПолучаемыеПоля.Добавить("binaryData");
		ПолучаемыеПоля.Добавить("size");
		ПолучаемыеПоля.Добавить("modificationDateUniversal");
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		ДанныеФайла = Ответ.object;
	КонецЕсли;
	
	Размер = ДанныеФайла.size;
	ДатаМодификацииУниверсальная = ДанныеФайла.modificationDateUniversal;
	Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла.binaryData, УникальныйИдентификаторФормы);
	
	Возврат Адрес;
	
КонецФункции

// Возвращает хранимые файлы к объекту ВнешнийОбъект.
//
// Параметры:
//   ВнешнийОбъект - Произвольный - объект-владелец.
//
// Возвращаемое значение:
//   Массив из см. РаботаСФайлами.ДанныеФайла
//
Функция ПолучитьХранимыеФайлы(ВнешнийОбъект) Экспорт
	
	ХранимыеФайлы = Новый Массив;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриПолученииПрисоединенныхФайлов(
		ВнешнийОбъект,
		ХранимыеФайлы);
	
	Возврат ХранимыеФайлы;
	
КонецФункции

// Делает активной указанную версию файла.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла-владельца.
//   ИдентификаторВерсии - Строка - идентификатор версии, которую следует сделать активной.
//   ТекстСообщения - Строка - неявно возвращаемый параметр, текст сообщения о проблеме.
//
// Возвращаемое значение:
//   Булево - Истина, если операция выполнена успешно.
//
Функция СделатьВерсиюАктивной(ИдентификаторФайла, ИдентификаторВерсии, ТекстСообщения = "") Экспорт
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.6.1") Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с версиями нужен 1С:Документооборот версии не ниже 1.4.6.1'");
		Возврат Ложь;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Файл = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMFile");
	Файл.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ИдентификаторФайла,
		"DMFile");
	Файл.name = "";
	Версия = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMFileVersion");
	Версия.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ИдентификаторВерсии,
		"DMFileVersion");
	Версия.name = "";
	Файл.activeVersion = Версия;
	
	Попытка
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъект(Прокси, Файл);
		Возврат Истина;
	Исключение
		ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Создает в файл в Документообороте.
//
// Параметры:
//   ПараметрыСоздания - Структура - ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//   ВладелецID - Строка - идентификатор владельца файла в Документообороте.
//   ВладелецТип - Строка - тип владельца файла в Документообороте.
//   ВладелецПредставление - Строка - представление владельца файла в Документообороте.
//   ПытатьсяОбновить - Булево - Истина, если при обнаружении одноименного файла нужно обновить его, и
//     Ложь, если необходимо безусловное создание нового файла.
//
// Возвращаемое значение:
//   Строка - идентификатор созданного файла.
//
Функция СоздатьФайлВДокументообороте(ПараметрыСоздания, ВладелецID, ВладелецТип, ВладелецПредставление = "",
		ПытатьсяОбновить = Ложь) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ФайлXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ФайлXDTOИзПараметровСоздания(
		Прокси,
		ПараметрыСоздания);
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьФайлЗапрос(
		Прокси,
		ФайлXDTO,
		ВладелецID,
		ВладелецТип,
		ВладелецПредставление);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.9.1") Тогда
		Запрос.tryToUpdate = ПытатьсяОбновить;
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	НаличиеПрисоединенныхФайлов = Истина;
	
	ОбъектИС = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
		ВладелецID,
		ВладелецТип);
	Если ОбъектИС <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриПоявленииПрисоединенныхФайловДокументооборота(
			ВладелецID,
			ВладелецТип,
			ОбъектИС,
			НаличиеПрисоединенныхФайлов);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСоздания.Владелец) Тогда
		// Если объект ИС, являющийся владельцем файла известен, а связь в базе не установлена - добавим новую связь.
		// Метод ПриПоявленииПрисоединенныхФайловДокументооборота при этом будет вызван неявно, при добавлении связи.
		// Если связи в базе нет, и объект-владелец в ИС не известен - ничего делать не надо.
		ДобавитьСвязь(
			ВладелецID,
			ВладелецТип,
			ПараметрыСоздания.Владелец,
			НаличиеПрисоединенныхФайлов);
	КонецЕсли;
	
	Возврат Ответ.file.objectID.ID;
	
КонецФункции

// Сохраняет в ДО сведения о редактировании версии файла.
//
// Параметры:
//   Сведения - Структура:
//     * ИдентификаторВерсии - Строка - идентификатор версии файла.
//     * Сохранен - Булево - Истина, если файл сохранен на диске.
//     * ДатаСохранения - Булево - дата сохранения файла на диске.
//     * ПолныйПуть - Строка - полный путь к файлу на диске.
//     * НаЧтение - Булево - Истина, если файл сохранен только для чтения.
//     * ВРабочемКаталогеВладельца - Булево - Истина, если файл сохранен в рабочем каталоге папки-владельца.
//     * Размер - Число - размер сохраненной версии файла.
//
Процедура СохранитьСведенияОРедактированииФайла(Сведения) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMUpdateFileEditingInfoRequest");
	
	Запрос.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Сведения.ИдентификаторВерсии,
		"DMFileVersion");
	
	Если Запрос.Свойства().Получить("clientIdentifier") <> Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
		Запрос.clientIdentifier = Строка(СисИнфо.ИдентификаторКлиента);
	КонецЕсли;
	
	Запрос.info = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMFileEditingInfo");
	
	Запрос.info.saved = Сведения.Сохранен;
	Если Сведения.Сохранен Тогда
		Запрос.info.saveDate = Сведения.ДатаСохранения;
		Запрос.info.fullPath = Сведения.ПолныйПуть;
		Запрос.info.readOnly = Сведения.НаЧтение;
		Запрос.info.modificationDateUniversal = Сведения.ДатаМодификацииУниверсальная;
		Запрос.info.size = Сведения.Размер;
		Запрос.info.inOwnersFolder = Сведения.ВРабочемКаталогеВладельца;
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
КонецПроцедуры

// Возвращает список XDTO файлов по объекту Документооборота.
//
// Параметры:
//   ИдентификаторВладельца - Строка - уникальный идентификатор объекта Документооборота.
//   ИмяВладельца - Строка - представление объекта Документооборота.
//   ТипВладельца - Строка - тип XDTO объекта Документооборота.
//   ВключатьПомеченныеНаУдаление - Булево - Истина, если нужно получить файлы без учета пометки.
//
// Возвращаемое значение:
//   ОбъектXDTO - Список объектов XDTO типа DMFile.
//
Функция ФайлыПоВладельцу(ИдентификаторВладельца, ИмяВладельца, ТипВладельца,
		ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetFileListByOwnerRequest");
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	Владельцы = Запрос.owners; // СписокXDTO
	
	ОбъектВладелец =  ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.name = ИмяВладельца;
	ОбъектВладелец.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Строка(ИдентификаторВладельца),
		ТипВладельца);
	
	Владельцы.Добавить(ОбъектВладелец);
	
	ПолучаемыеПоля.Добавить("objectID");
	ПолучаемыеПоля.Добавить("signed");
	ПолучаемыеПоля.Добавить("name");
	ПолучаемыеПоля.Добавить("size");
	ПолучаемыеПоля.Добавить("creationDate");
	ПолучаемыеПоля.Добавить("modificationDateUniversal");
	ПолучаемыеПоля.Добавить("author");
	ПолучаемыеПоля.Добавить("extension");
	ПолучаемыеПоля.Добавить("description");
	ПолучаемыеПоля.Добавить("encrypted");
	ПолучаемыеПоля.Добавить("editing");
	
	Если ВключатьПомеченныеНаУдаление Тогда
		Запрос.ignoreDeletionMark = Истина;
		ПолучаемыеПоля.Добавить("deletionMark");
	КонецЕсли;
	
	// Захват и редактирование файлов.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
		ПолучаемыеПоля.Добавить("editingUser");
	КонецЕсли;
	
	Файлы = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	Возврат Файлы;
	
КонецФункции

// Проверяет редактируется ли файл текущим пользователем.
//
// Параметры:
//   КтоРедактируетID - Строка - идентификатор того, кто редактирует файл.
//   КтоРедактируетТип - Строка - тип объекта того, кто редактирует файл.
//   ТекущийПользовательИСотрудники - Массив из ОбъектXDTO - текущий пользователь и его сотрудники.
//
// Возвращаемое значение:
//   Булево.
//
Функция ФайлРедактируетсяТекущимПользователем(КтоРедактируетID, КтоРедактируетТип,
		ТекущийПользовательИСотрудники) Экспорт
	
	Для Каждого Элемент Из ТекущийПользовательИСотрудники Цикл
		Если КтоРедактируетID = Элемент.objectID.ID И КтоРедактируетТип = Элемент.objectID.type Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЭлектронныеПодписи

// Заполняет список подписей Входящего Исходящего Внутреннего документа и его подчиненных файлов.
//
// Параметры:
//   ПодписиXDTO - СписокXDTO - список подписей документа Документооборота.
//   ФайлыXDTO - СписокXDTO - список файлов документа Документооборота.
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   ЭлементДляИзмененияЗаголовка - ГруппаФормы - элемент, в заголовке которого требуется вывести количество подписей.
//
Процедура ЗаполнитьСписокПодписейСервер(ПодписиXDTO, ФайлыXDTO, Форма,
		ЭлементДляИзмененияЗаголовка = Неопределено) Экспорт
	
	ПодписиОбъектов = Новый Соответствие;
	
	// Добавим подписи самого документа.
	МассивПодписей = Новый Массив;
	Для Каждого ПодписьXDTO Из ПодписиXDTO Цикл
		МассивПодписей.Добавить(ДанныеПодписиИзXDTO(ПодписьXDTO));
	КонецЦикла;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
		ПодписиОбъектов,
		Форма.Представление,
		Форма.ID,
		Форма.Тип,
		Ложь,
		МассивПодписей);
	
	// Добавим подписи файлов документа.
	Для Каждого Файл Из ФайлыXDTO Цикл
		МассивПодписей = Новый Массив;
		Для Каждого ПодписьXDTO Из Файл.signatures Цикл
			МассивПодписей.Добавить(ДанныеПодписиИзXDTO(ПодписьXDTO));
		КонецЦикла;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
			ПодписиОбъектов,
			Файл.name,
			Файл.objectID.ID,
			Файл.objectID.type,
			Файл.encrypted,
			МассивПодписей);
	КонецЦикла;
	
	ШаблонКомуВыданСертификат = "%1 ""%2""";
	ВсегоПодписей = 0;
	
	Форма.ДеревоПодписей.ПолучитьЭлементы().Очистить();
	ЭлементыДерева = Форма.ДеревоПодписей.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
	
	// Выведем подписи документа на форму.
	Для Каждого ЭлементСоответствия Из ПодписиОбъектов Цикл
		
		ДанныеВладельцаПодписи = ЭлементСоответствия.Значение; // см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
		
		Если ДанныеВладельцаПодписи.Тип <> "DMFile" И ДанныеВладельцаПодписи.МассивПодписей.Количество() <> 0 Тогда
			НоваяСтрокаВладельцаПодписи = ЭлементыДерева.Добавить();
			
			ПредставлениеТипа = ПредставлениеТипа(ДанныеВладельцаПодписи.Тип);
			НоваяСтрокаВладельцаПодписи.КомуВыданСертификат = СтрШаблон(ШаблонКомуВыданСертификат,
				ПредставлениеТипа,
				ДанныеВладельцаПодписи.Наименование);
			Если НоваяСтрокаВладельцаПодписи.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрокаВладельцаПодписи.КомуВыданСертификатИСтатус = НоваяСтрокаВладельцаПодписи.КомуВыданСертификат;
			КонецЕсли;
			
			НоваяСтрокаВладельцаПодписи.ИндексКартинки = 0; // стандартная иконка справочника
			
			НоваяСтрокаВладельцаПодписиЭлементы = НоваяСтрокаВладельцаПодписи.ПолучитьЭлементы();
			НомерСтроки = 0;
			Для Каждого Подпись Из ДанныеВладельцаПодписи.МассивПодписей Цикл
				ЗаполнитьСтрокуДереваПодписей(
					НоваяСтрокаВладельцаПодписиЭлементы.Добавить(),
					НомерСтроки,
					Подпись,
					ДанныеВладельцаПодписи,
					Форма.УникальныйИдентификатор);
				НомерСтроки = НомерСтроки + 1;
				ВсегоПодписей = ВсегоПодписей + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выведем подписи файлов документа на форму.
	Для Каждого ЭлементСоответствия Из ПодписиОбъектов Цикл
		
		ДанныеВладельцаПодписи = ЭлементСоответствия.Значение; // см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
		
		Если ДанныеВладельцаПодписи.Тип = "DMFile" И ДанныеВладельцаПодписи.МассивПодписей.Количество() <> 0 Тогда
			НоваяСтрокаВладельцаПодписи = ЭлементыДерева.Добавить();
			
			ПредставлениеТипа = ПредставлениеТипа(ДанныеВладельцаПодписи.Тип);
			НоваяСтрокаВладельцаПодписи.КомуВыданСертификат = СтрШаблон(ШаблонКомуВыданСертификат,
				ПредставлениеТипа,
				ДанныеВладельцаПодписи.Наименование);
			Если НоваяСтрокаВладельцаПодписи.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрокаВладельцаПодписи.КомуВыданСертификатИСтатус = НоваяСтрокаВладельцаПодписи.КомуВыданСертификат;
			КонецЕсли;
			
			Отбор = Новый Структура("ID", ДанныеВладельцаПодписи.ID);
			СтрокаФайлов = Форма.Файлы.НайтиСтроки(Отбор);
			Если СтрокаФайлов.Количество() <> 0 Тогда
				НоваяСтрокаВладельцаПодписи.ИндексКартинки = СтрокаФайлов[0].ИндексКартинки;
			КонецЕсли;
			
			НоваяСтрокаВладельцаПодписиЭлементы = НоваяСтрокаВладельцаПодписи.ПолучитьЭлементы();
			НомерСтроки = 0;
			Для Каждого Подпись Из ДанныеВладельцаПодписи.МассивПодписей Цикл
				ЗаполнитьСтрокуДереваПодписей(
					НоваяСтрокаВладельцаПодписиЭлементы.Добавить(),
					НомерСтроки,
					Подпись,
					ДанныеВладельцаПодписи,
					Форма.УникальныйИдентификатор);
				НомерСтроки = НомерСтроки + 1;
				ВсегоПодписей = ВсегоПодписей + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементДляИзмененияЗаголовка <> Неопределено Тогда
		ЭлементДляИзмененияЗаголовка.Заголовок = СтрШаблон(НСтр("ru = 'ЭП (%1)'"), ВсегоПодписей);
		ЭлементДляИзмененияЗаголовка.Видимость = (ВсегоПодписей > 0);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку дерева на закладке ЭП в документе.
//
// Параметры:
//   НоваяСтрока - ДанныеФормыЭлементДерева - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   НомерСтроки - Число - номер подписи в ветке объекта-владельца.
//   Подпись - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураПодписи
//   ДанныеВладельцаПодписи - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ЗаполнитьСтрокуДереваПодписей(НоваяСтрока, НомерСтроки, Подпись, ДанныеВладельцаПодписи,
		УникальныйИдентификаторФормы) Экспорт
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Подпись);
	
	НоваяСтрока.НомерСтроки = НомерСтроки;
	
	НоваяСтрока.КомуВыданСертификатИСтатус = НоваяСтрока.КомуВыданСертификат + Символы.ПС + НоваяСтрока.Статус;
	//@skip-check module-nstr-camelcase
	ФорматнаяСтрока = НСтр("ru = 'ДФ=""дд.ММ.гггг ЧЧ:мм""'");
	НоваяСтрока.ДатаПодписиИКомментарий = Формат(НоваяСтрока.ДатаПодписи, ФорматнаяСтрока)
		+ Символы.ПС + НоваяСтрока.Комментарий;
	
	НоваяСтрока.Зашифрован = ДанныеВладельцаПодписи.Зашифрован;
	НоваяСтрока.Объект = ДанныеВладельцаПодписи.ID;
	НоваяСтрока.ОбъектИд = ДанныеВладельцаПодписи.ID;
	НоваяСтрока.ОбъектИмя = ДанныеВладельцаПодписи.Наименование;
	НоваяСтрока.ОбъектТип = ДанныеВладельцаПодписи.Тип;
	
	НоваяСтрока.Неверна = Ложь;
	НоваяСтрока.ИндексКартинки = -1;
	
	НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(
		Подпись.Подпись,
		УникальныйИдентификаторФормы);
	
	ДвоичныеДанныеСертификата = Подпись.ДвоичныеДанныеСертификата;
	Если ДвоичныеДанныеСертификата <> Неопределено Тогда
		НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
			ДвоичныеДанныеСертификата,
			УникальныйИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение константы "ИспользоватьЭлектронныеЦифровыеПодписи".
//
// Возвращаемое значение:
//   Булево - если Истина, электронные подписи используются.
//
Функция ИспользоватьЭлектронныеЦифровыеПодписи() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Возврат МодульЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Обновляет дерево подписей по данным коллекций XDTO.
//
// Параметры:
//   ФайлыXDTO - СписокXDTO - файлы документа Документооборота.
//   Подписи - ДанныеФормыДерево - подписи в форме.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
Процедура ОбновитьСписокПодписейФайлов(ФайлыXDTO, Подписи, УникальныйИдентификаторФормы) Экспорт
	
	ПодписиОбъектов = Новый Соответствие;
	
	// Добавим подписи файлов документа.
	Для Каждого Файл Из ФайлыXDTO Цикл
		МассивПодписей = Новый Массив;
		Для Каждого ПодписьXDTO Из Файл.signatures Цикл
			МассивПодписей.Добавить(ДанныеПодписиИзXDTO(ПодписьXDTO));
		КонецЦикла;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
			ПодписиОбъектов,
			Файл.name,
			Файл.objectID.ID,
			Файл.objectID.type,
			Файл.encrypted,
			МассивПодписей);
	КонецЦикла;
	
	ШаблонКомуВыданСертификат = "%1 ""%2""";
	
	ЭлементыДерева = Подписи.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Для Каждого ЭлементСоответствия Из ПодписиОбъектов Цикл
		
		ДанныеВладельцаПодписи = ЭлементСоответствия.Значение; // см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
		
		Если ДанныеВладельцаПодписи.Тип = "DMFile" И ДанныеВладельцаПодписи.МассивПодписей.Количество() <> 0 Тогда
			НоваяСтрокаВладельцаПодписи = ЭлементыДерева.Добавить();
			
			ПредставлениеТипа = ПредставлениеТипа(ДанныеВладельцаПодписи.Тип);
			НоваяСтрокаВладельцаПодписи.КомуВыданСертификат = СтрШаблон(ШаблонКомуВыданСертификат,
				ПредставлениеТипа,
				ДанныеВладельцаПодписи.Наименование);
			Если НоваяСтрокаВладельцаПодписи.Свойство("КомуВыданСертификатИСтатус") Тогда
				НоваяСтрокаВладельцаПодписи.КомуВыданСертификатИСтатус = НоваяСтрокаВладельцаПодписи.КомуВыданСертификат;
			КонецЕсли;
			
			НоваяСтрокаВладельцаПодписиЭлементы = НоваяСтрокаВладельцаПодписи.ПолучитьЭлементы();
			НомерСтроки = 0;
			Для Каждого Подпись Из ДанныеВладельцаПодписи.МассивПодписей Цикл
				ЗаполнитьСтрокуДереваПодписей(
					НоваяСтрокаВладельцаПодписиЭлементы.Добавить(),
					НомерСтроки,
					Подпись,
					ДанныеВладельцаПодписи,
					УникальныйИдентификаторФормы);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подписывает документ электронной подписью.
//
// Параметры:
//   ПодписиОбъектов - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураПодписи
//   ДеревоПодписей - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//
Процедура ПодписатьДокумент(ПодписиОбъектов, ДеревоПодписей) Экспорт
	
	ТаблицаПодписей = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ТаблицаПодписей(ДеревоПодписей);
	
	// Дополним добавленные подписи.
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		Если ЗначениеЗаполнено(ДанныеСтроки.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		Иначе
			ДвоичныеДанныеСертификата = Неопределено;
		КонецЕсли;
		ДанныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеПодписи(
			ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи),
			ДвоичныеДанныеСертификата,
			ДанныеСтроки);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
			ПодписиОбъектов,
			ДанныеСтроки.ОбъектИмя,
			ДанныеСтроки.ОбъектИд,
			ДанныеСтроки.ОбъектТип,
			ДанныеСтроки.Зашифрован,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписи));
		
	КонецЦикла;
	
	ЗанестиИнформациюОПодписяхОбъектов(ПодписиОбъектов);
	
КонецПроцедуры

// Получает объекты, которые требуется подписать ЭП, заполняет массив для подписей.
//
// Параметры:
//   ОбъектНаименование - Строка - наименование документа Документооборота.
//   ОбъектИд - Строка - идентификатор документа Документооборота.
//   ОбъектТип - Строка - тип объекта XDTO документа Документообороте.
//   МассивОбъектовДляПодписи - Массив из Структура:
//     * ДвоичныеДанные - ДвоичныеДанные
//     * ОбъектСсылкаДляПодписи - Строка
//     * ОбъектТип - Строка
//   Файлы - Массив из Строка - массив идентификаторов файлов в Документообороте.
//   ДвоичныеДанные - ДвоичныеДанные - двоичные данные документа Документооборота.
//
Процедура ПолучитьОбъектыДляПодписи(ОбъектНаименование, ОбъектИд, ОбъектТип, МассивОбъектовДляПодписи, Файлы,
		ДвоичныеДанные) Экспорт
	
	// Добавим в массив документ
	ОбъектДляПодписи = ОбъектДляПодписи();
	ОбъектДляПодписи.ДвоичныеДанные = ДвоичныеДанные;
	ОбъектДляПодписи.ОбъектСсылкаДляПодписи = ОбъектИд;
	ОбъектДляПодписи.ОбъектТип = ОбъектТип;
	ОбъектДляПодписи.ОбъектНаименование = ОбъектНаименование;
	ОбъектДляПодписи.Зашифрован = Ложь;
	МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
	
	// Добавим все подчиненные файлы
	ДанныеФайловXDTO = ДвоичныеДанныеФайлов(Файлы);
	
	Для Каждого ФайлXDTO Из ДанныеФайловXDTO Цикл
		ОбъектДляПодписи = ОбъектДляПодписи();
		ОбъектДляПодписи.ДвоичныеДанные = ФайлXDTO.binaryData;
		ОбъектДляПодписи.ОбъектСсылкаДляПодписи = ФайлXDTO.objectID.ID;
		ОбъектДляПодписи.ОбъектТип = ФайлXDTO.objectID.type;
		ОбъектДляПодписи.ОбъектНаименование = ФайлXDTO.name;
		ОбъектДляПодписи.Зашифрован = ФайлXDTO.encrypted;
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет подписи файла во временном хранилище.
//
// Параметры:
//   ID - Строка - идентификатор файла.
//
// Возвращаемое значение:
//   Строка - адрес массива подписей во временном хранилище.
//
Функция ПоместитьВХранилищеПодписиФайла(ID) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ПолучаемыеПоля = Новый Массив;
	ПолучаемыеПоля.Добавить("signatures");
	ПолучаемыеПоля.Добавить("signatures.author");
	ПолучаемыеПоля.Добавить("signatures.date");
	ПолучаемыеПоля.Добавить("signatures.comment");
	ПолучаемыеПоля.Добавить("signatures.signature");
	ПолучаемыеПоля.Добавить("signatures.thumbprint");
	ПолучаемыеПоля.Добавить("signatures.lineNumber");
	ПолучаемыеПоля.Добавить("signatures.signer");
	ПолучаемыеПоля.Добавить("signatures.certificate");
	ПолучаемыеПоля.Добавить("signatures.signatureFileName");
	СведенияОФайле = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		"DMFile",
		ID,
		ПолучаемыеПоля);
	
	Подписи = Новый Массив;
	
	Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
		Подписи.Добавить(ДанныеПодписиИзXDTO(ПодписьXDTO));
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Подписи, Новый УникальныйИдентификатор);
	
КонецФункции

// Проверяет подписи из массива ВыделенныеСтроки. Если массив выделенных строк не передан - проверяет все
// подписи из таблицы подписей.
//
// Параметры:
//   ТаблицаПодписей - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//   ВыделенныеПодписи - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи
//   АдресСлепкаДокумента - Строка - адрес временного хранилища двоичных данных документа Документооборота.
//   Программа - Неопределено - возвращает менеджер криптографии первой программы, для которой удалось его создать.
//             - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программ для которой нужно создать и
//     вернуть менеджер криптографии.
//             - Структура - см. ЭлектроннаяПодпись.НовоеОписаниеПрограммы.
//             - ДвоичныеДанные - данные подписи или сертификата в кодировке DER для определения программы.
//             - Строка - адрес двоичных данных, описанных выше, во временном хранилище.
//
Процедура ПроверитьПодписи(ТаблицаПодписей, ВыделенныеПодписи = Неопределено, АдресСлепкаДокумента = Неопределено,
		Программа = Неопределено) Экспорт
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии("ПроверкаПодписи", Программа);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьПодписи(
		МенеджерКриптографии,
		ТаблицаПодписей,
		ВыделенныеПодписи,
		АдресСлепкаДокумента);
	
КонецПроцедуры

// Удаляет подписи документа и его файлов.
//
// Параметры:
//   УдаляемыеПодписи - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыделенныеПодписи
//   ТаблицаПодписей - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураСтрокиДереваПодписей
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//     * Ключ - Строка - идентификатор объекта ДО, являющегося владельцем подписи.
//     * Значение - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
//
Функция УдалитьПодписи(УдаляемыеПодписи, ТаблицаПодписей) Экспорт
	
	ПодписиОбъектов = Новый Соответствие;
	
	// формируем массив данных подписи.
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		// по GUID объекта + номер строки - удаляем из массива всех те, что надо удалить.
		ПодписьУдалена = Ложь;
		Для Каждого СтрокаУдаленнойПодписи Из УдаляемыеПодписи Цикл
			Если СтрокаУдаленнойПодписи.ОбъектID = ДанныеСтроки.ОбъектИд
					И СтрокаУдаленнойПодписи.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
				ПодписьУдалена = Истина;
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
					ПодписиОбъектов,
					ДанныеСтроки.ОбъектИмя,
					ДанныеСтроки.ОбъектИд,
					ДанныеСтроки.ОбъектТип,
					ДанныеСтроки.Зашифрован);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодписьУдалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		Иначе
			ДвоичныеДанныеСертификата = Неопределено;
		КонецЕсли;
		ДанныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДанныеПодписи(
			ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи),
			ДвоичныеДанныеСертификата,
			ДанныеСтроки);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьПодписиОбъектов(
			ПодписиОбъектов,
			ДанныеСтроки.ОбъектИмя,
			ДанныеСтроки.ОбъектИд,
			ДанныеСтроки.ОбъектТип,
			ДанныеСтроки.Зашифрован,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписи));
		
	КонецЦикла;
	
	ЗанестиИнформациюОПодписяхОбъектов(ПодписиОбъектов);
	
	Возврат ПодписиОбъектов;
	
КонецФункции

#КонецОбласти

#Область Документы

// Создает файлы печатных форм объектов по имени команды формы документа 1С:Документооборот и
// присоединяет их к документам.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - ссылка на объект текущей базы данных.
//   ОбъектДО - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ИмяКоманды - Строка - имя команды кнопки в формате "Менеджер_%_Команда_%".
//   ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//   ФорматФайла - ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип сохраняемого файла.
//   РольФайлаID - Строка - идентификатор роли файла, в который требуется сохранить печатную форму.
//   ПредставлениеКоманды - Строка - синоним команды печати.
//
// Возвращаемое значение:
//   Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла
//
Функция ПрисоединитьПечатнуюФормуОбъектаКДокументу(ОбъектИС, ОбъектДО, ИмяКоманды, ДополнительныеПараметры,
		ФорматФайла, РольФайлаID, ПредставлениеКоманды = "") Экспорт
	
	Результат = Новый Массив;
	
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьКоллекциюПечатныхФорм(
		ОбъектИС,
		ИмяКоманды,
		ДополнительныеПараметры,
		КоллекцияПечатныхФорм);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ФорматФайлаИмя = ОбщегоНазначения.ИмяЗначенияПеречисления(ФорматФайла);
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено
				И ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц() > 0 Тогда
			
			ПечатнаяФорма.ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента[ФорматФайлаИмя]);
			
			Наименование = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяПечатнойФормы(
				ОбъектИС,
				ПредставлениеКоманды,
				ПечатнаяФорма.СинонимМакета,
				ПечатнаяФорма.ИмяМакета);
			
			Расширение = ИнтеграцияС1СДокументооборотБазоваяФункциональность.РасширениеСохраняемойПечатнойФормы(
				ФорматФайла);
			
			ТекущийФайл = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеФайла(
				Наименование,
				Неопределено,
				"DMFile",
				Расширение,
				РольФайлаID);
			
			Файл = Новый Файл(ИмяВременногоФайла);
			ТекущийФайл.Размер = Файл.Размер();
			ТекущийФайл.ДатаМодификации = Файл.ПолучитьВремяИзменения();
			ТекущийФайл.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
			Файл = Неопределено;
			
			ПараметрыСоздания = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.НовыеПараметрыСозданияФайла(
				ТекущийФайл);
			ПараметрыСоздания.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(
				Новый ДвоичныеДанные(ИмяВременногоФайла));
			ПараметрыСоздания.Владелец = ОбъектИС;
			
			ПараметрыСоздания.ТекущийФайл.ID = СоздатьФайлВДокументообороте(
				ПараметрыСоздания,
				ОбъектДО.ID,
				ОбъектДО.Тип,
				ОбъектДО.Представление,
				Истина);
			
			Результат.Добавить(ПараметрыСоздания);
			
		КонецЕсли;
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет структуру данных подписи по объекту XDTO.
//
// Параметры:
//   ПодписьXDTO - ОбъектXDTO - объект XDTO подписи, тип DMSignature.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураПодписи
//
Функция ДанныеПодписиИзXDTO(ПодписьXDTO)
	
	ДанныеПодписи = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СтруктураПодписи();
	
	ДанныеПодписи.Подпись = ПодписьXDTO.signature;
	ДанныеПодписи.ДвоичныеДанныеСертификата = ПодписьXDTO.certificate;
	ДанныеПодписи.Сертификат = Новый ХранилищеЗначения(ПодписьXDTO.certificate);
	
	ДанныеПодписи.КомуВыданСертификат = ПодписьXDTO.author;
	ДанныеПодписи.ДатаПодписи = ПодписьXDTO.date;
	ДанныеПодписи.Комментарий = ПодписьXDTO.comment;
	ДанныеПодписи.Отпечаток = ПодписьXDTO.thumbprint;
	ДанныеПодписи.ИмяФайлаПодписи = ПодписьXDTO.signatureFileName;
	ДанныеПодписи.УстановившийПодпись = ПодписьXDTO.signer.name;
	ДанныеПодписи.УстановившийПодписьИд = ПодписьXDTO.signer.objectID.ID;
	
	Возврат ДанныеПодписи;
	
КонецФункции

// Дополняет набор колонок условий выбора DMObjectListQuery.query колонками для отдельных типов объектов.
//
// Параметры:
//   НаборКолонок - СписокXDTO
//   ТипXDTO - Строка
//
Процедура ДополнитьНаборКолонокУсловийВыбора(НаборКолонок, ТипXDTO)
	
	Если ТипXDTO = "DMOrganization" Тогда
		// НДС и статьи ДДС.
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.8.1.CORP") Тогда
			НаборКолонок.Добавить("VATpayer");
		КонецЕсли;
		
	ИначеЕсли ТипXDTO = "DMCorrespondent" Тогда
		НаборКолонок.Добавить("legalPrivatePerson");
		
	ИначеЕсли ТипXDTO = "DMProduct" Тогда
		НаборКолонок.Добавить("VATRate");
		НаборКолонок.Добавить("measurementUnit");
		НаборКолонок.Добавить("price");
		
	КонецЕсли;
	
КонецПроцедуры

// Заносит информацию о подписях объектов в базу Документооборот.
//
// Параметры:
//   ПодписиОбъектов - Соответствие из КлючИЗначение:
//     * Ключ - Строка - идентификатор объекта ДО, являющегося владельцем подписи.
//     * Значение - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеВладельцаПодписи
//
Процедура ЗанестиИнформациюОПодписяхОбъектов(ПодписиОбъектов)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	МассивXDTOОбъектов = Новый Массив;
	Для Каждого ЭлементСоответствия Из ПодписиОбъектов Цикл
		ДанныеВладельцаПодписи = ЭлементСоответствия.Значение;
		ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъектXDTOДляСохраненияПодписей(
			Прокси,
			ДанныеВладельцаПодписи);
		МассивXDTOОбъектов.Добавить(ОбъектXDTO);
	КонецЦикла;
	
	Если МассивXDTOОбъектов.Количество() > 0 Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОбъекты(Прокси, МассивXDTOОбъектов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуСпискаФайлов(СтрокаСпискаФайлов, ФайлXDTO, ТекущийПользовательИСотрудники)
	
	// Общие сведения о файле.
	СтрокаСпискаФайлов.Наименование = ФайлXDTO.name;
	СтрокаСпискаФайлов.ID = ФайлXDTO.objectID.ID;
	Если СтрокаСпискаФайлов.Свойство("Тип") Тогда
		СтрокаСпискаФайлов.Тип = ФайлXDTO.objectID.type;
	КонецЕсли;
	СтрокаСпискаФайлов.Расширение = ФайлXDTO.extension;
	ПометкаУдаления = Ложь;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "deletionMark") Тогда
		ПометкаУдаления = ФайлXDTO.deletionMark;
	КонецЕсли;
	СтрокаСпискаФайлов.ИндексКартинки =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИндексПиктограммыФайла(
			СтрокаСпискаФайлов.Расширение,
			ПометкаУдаления);
	
	// Шаблон файла.
	// Пропустим прототипы файлов, которые будут заполнены по шаблонам при записи.
	Если ФайлXDTO.Свойства().Получить("template") <> Неопределено И ФайлXDTO.template <> Неопределено Тогда
		СтрокаСпискаФайлов.ШаблонID = ФайлXDTO.template.objectID.ID;
		Если Не ЗначениеЗаполнено(ФайлXDTO.objectID.ID) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Дата создания/модификации.
	СтрокаСпискаФайлов.ДатаСоздания = ФайлXDTO.creationDate;
	Если СтрокаСпискаФайлов.Свойство("ДатаМодификации") Тогда
		СтрокаСпискаФайлов.ДатаМодификации = МестноеВремя(ФайлXDTO.modificationDateUniversal, ЧасовойПоясСеанса());
	КонецЕсли;
	Если СтрокаСпискаФайлов.Свойство("ДатаМодификацииУниверсальная") Тогда
		СтрокаСпискаФайлов.ДатаМодификацииУниверсальная = ФайлXDTO.modificationDateUniversal;
	КонецЕсли;
	
	// Автор файла/изменений.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "author") Тогда
		СтрокаСпискаФайлов.Автор = ФайлXDTO.author.name;
	КонецЕсли;
	Если СтрокаСпискаФайлов.Свойство("Отредактировал")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "activeVersion")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO.activeVersion, "author") Тогда
		СтрокаСпискаФайлов.Отредактировал = ФайлXDTO.activeVersion.author.name;
	КонецЕсли;
	
	// Прочие сведения о файле.
	СтрокаСпискаФайлов.Описание = ФайлXDTO.description;
	СтрокаСпискаФайлов.Размер = Формат(
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РазмерВКб(ФайлXDTO.size),
		"ЧЦ=10; ЧН=0");
	СтрокаСпискаФайлов.ПодписанЭП = ФайлXDTO.signed;
	Если СтрокаСпискаФайлов.Свойство("Зашифрован") Тогда
		СтрокаСпискаФайлов.Зашифрован = ФайлXDTO.encrypted;
	КонецЕсли;
	Если СтрокаСпискаФайлов.Свойство("НомерКартинкиПодписанЗашифрован") Тогда
		СтрокаСпискаФайлов.НомерКартинкиПодписанЗашифрован = НомерКартинкиПодписанЗашифрован(ФайлXDTO, Истина);
	КонецЕсли;
	Если СтрокаСпискаФайлов.Свойство("РольФайлаID")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "role") Тогда
		СтрокаСпискаФайлов.РольФайлаID = ФайлXDTO.role.objectID.id;
	КонецЕсли;
	
	СтрокаСпискаФайлов.Редактируется = ФайлXDTO.editing;
	СтрокаСпискаФайлов.Зашифрован = ФайлXDTO.encrypted;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "editingUser") Тогда
		СтрокаСпискаФайлов.РедактируетсяТекущимПользователем = ФайлРедактируетсяТекущимПользователем(
			ФайлXDTO.editingUser.objectID.ID,
			ФайлXDTO.editingUser.objectID.type,
			ТекущийПользовательИСотрудники);
		Если СтрокаСпискаФайлов.Свойство("Редактирует") Тогда
			СтрокаСпискаФайлов.Редактирует = ФайлXDTO.editingUser.name;
		КонецЕсли;
	Иначе
		СтрокаСпискаФайлов.РедактируетсяТекущимПользователем = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "scannedOriginal") Тогда
		СтрокаСпискаФайлов.ЯвляетсяОригиналом = ФайлXDTO.scannedOriginal;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "deletionMark") Тогда
		СтрокаСпискаФайлов.ПометкаУдаления = ФайлXDTO.deletionMark;
	КонецЕсли;
	
	Если СтрокаСпискаФайлов.Свойство("ПредставлениеHTML")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "htmlView") Тогда
		СтрокаСпискаФайлов.ПредставлениеHTML = ФайлXDTO.htmlView;
		СтрокаСпискаФайлов.ПредпросмотрУрезан = ФайлXDTO.htmlViewTruncated;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает номер картинки.
//
// Параметры:
//   ФайлXDTO - ОбъектXDTO - объект XDTO типа DMFile.
//   ЗаполнениеСтроки - Булево
//
// Возвращаемое значение:
//   Число
//
Функция НомерКартинкиПодписанЗашифрован(ФайлXDTO, ЗаполнениеСтроки = Ложь)
	
	НомерКартинкиПодписанЗашифрован = -1;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФайлXDTO, "signatureStatus") Тогда
		
		НомерКартинкиПодписанЗашифрован = ФайлXDTO.signatureStatus;
		
	Иначе
		
		Если ФайлXDTO.signed = Истина И ФайлXDTO.encrypted = Истина Тогда
			НомерКартинкиПодписанЗашифрован = 3;
		ИначеЕсли ФайлXDTO.encrypted = Истина Тогда
			НомерКартинкиПодписанЗашифрован = 1;
		ИначеЕсли ФайлXDTO.signed = Истина Тогда
			НомерКартинкиПодписанЗашифрован = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнениеСтроки И НомерКартинкиПодписанЗашифрован = 0 Тогда
		НомерКартинкиПодписанЗашифрован = -1;
	КонецЕсли;
	
	Возврат НомерКартинкиПодписанЗашифрован;
	
КонецФункции

Функция ОбъектДляПодписи()
	
	Результат = Новый Структура;
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	Результат.Вставить("ОбъектСсылкаДляПодписи", Неопределено);
	Результат.Вставить("ОбъектТип", "");
	Результат.Вставить("ОбъектНаименование", "");
	Результат.Вставить("Зашифрован", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняет в фоне операцию подключения к ДО и получения версии сервиса ДО.
//
// Параметры:
//   ИспользоватьКэш - Булево - при проверке возможности авторизации без пароля не требуется использовать кэш.
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор вызвавшей формы.
//
// Возвращаемое значение:
//   см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ОперацияПодключенияИПолученияВерсииСервиса(ИспользоватьКэш, ИмяПользователя, Пароль,
		УникальныйИдентификаторФормы = Неопределено)
	
	ПараметрыДлительнойОперации = ПараметрыДлительнойОперации(ИспользоватьКэш);
	ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотИмяПользователя = ИмяПользователя;
	ПараметрыДлительнойОперации.ИнтеграцияС1СДокументооборотПароль = Пароль;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // Запускать сразу.
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подключение к 1С:Документооборот'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПодключитьсяИПолучитьВерсиюСервисаВФоне",
		ПараметрыДлительнойОперации,
		ПараметрыВыполнения);
	
КонецФункции

// Получает менеджер криптографии.
//
// Параметры:
//   Операция - Строка - если не пустая, то должна содержать одну из строк, которые определяют
//     операцию для вставки в описание ошибки: Подписание, ПроверкаПодписи, Шифрование,
//     Расшифровка, ПроверкаСертификата, ПолучениеСертификатов.
//   Программа - Неопределено - возвращает менеджер криптографии первой программы, для которой удалось его создать.
//             - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования - программ для которой нужно создать и
//     вернуть менеджер криптографии.
//             - Структура - см. ЭлектроннаяПодпись.НовоеОписаниеПрограммы.
//             - ДвоичныеДанные - данные подписи или сертификата в кодировке DER для определения программы.
//             - Строка - адрес двоичных данных, описанных выше, во временном хранилище.
//
// Возвращаемое значение:
//   МенеджерКриптографии, Неопределено - менеджер криптографии или Неопределено, если произошла ошибка.
//
Функция ПолучитьМенеджерКриптографии(Операция = "", Программа = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Возврат МодульЭлектроннаяПодпись.МенеджерКриптографии(Операция,,, Программа);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получает представление для указанного типа XDTO.
//
// Параметры:
//   ОбъектТип - Строка - строка типа объекта XDTO.
//
// Возвращаемое значение:
//   Строка - представление типа объекта 1С:Документооборота
//
Функция ПредставлениеТипа(ОбъектТип)
	
	ПредставлениеТипа = "";
	
	Если ОбъектТип = "DMFile" Тогда
		ПредставлениеТипа = НСтр("ru='Файл'");
		
	ИначеЕсли ОбъектТип = "DMInternalDocument" Тогда
		ПредставлениеТипа =  НСтр("ru='Внутренний документ'");
		
	ИначеЕсли ОбъектТип = "DMIncomingDocument" Тогда
		ПредставлениеТипа =  НСтр("ru='Входящий документ'");
		
	ИначеЕсли ОбъектТип = "DMOutgoingDocument" Тогда
		ПредставлениеТипа =  НСтр("ru='Исходящий документ'");
		
	КонецЕсли;
	
	Возврат ПредставлениеТипа;
	
КонецФункции

// Получает сведения о файле из Документооборота.
//
// Параметры:
//   Идентификатор - Строка - идентификатор файла или версии.
//   Тип - Строка - DMFile или DMFileVersion.
//
// Возвращаемое значение:
//   ОбъектXDTO:
//     * name - Строка
//     * objectID - ОбъектXDTO:
//       ** ID - Строка
//       ** type - Строка
//     * info - ОбъектXDTO:
//       ** saved - Булево
//       ** saveDate - Дата
//       ** fullPath - Строка
//       ** readOnly - Булево
//       ** modificationDateUniversal - Дата
//       ** size - Число
//       ** folder - Строка
//       ** inOwnersFolder - Булево
//       ** maxFolderSize - Число
//
Функция СведенияОРедактировании(Идентификатор, Тип)
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси,"DMGetFileEditingInfoRequest");
	Запрос.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, Идентификатор, Тип);
	
	Если Запрос.Свойства().Получить("clientIdentifier") <> Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
		Запрос.clientIdentifier = Строка(СисИнфо.ИдентификаторКлиента);
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат;
	
КонецФункции

// Получает сведения о файле из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор файла в ДО.
//   ПолучаемыеПоля - Массив из Строка - реквизиты файла, которые требуется получить из ДО.
//
// Возвращаемое значение:
//   ОбъектXDTO:
//     * name - Строка
//     * objectID - ОбъектXDTO:
//       ** ID - Строка
//       ** type - Строка
//     * description - Строка
//     * size - Число
//     * scannedOriginal - Булево
//     * signed - Булево
//     * additionalProperties - СписокXDTO
//     * modificationDateUniversal - Дата
//     * modificationDate - Дата
//     * extension - Строка
//     * encrypted - Булево
//     * creationDate - Дата
//     * lockDate - Дата
//     * editing - Булево
//     * author - ОбъектXDTO:
//       ** name - Строка
//       ** objectID - ОбъектXDTO:
//         *** ID - Строка
//         *** type - Строка
//     * owner - ОбъектXDTO:
//       ** name - Строка
//       ** objectID - ОбъектXDTO:
//         *** ID - Строка
//         *** type - Строка
//
Функция СведенияОФайле(Прокси, ID, ПолучаемыеПоля)
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
		Прокси,
		"DMFile",
		ID,
		ПолучаемыеПоля);
	
КонецФункции

// Возвращает хеш-сумму данных по алгоритму CRC32.
//
// Параметры:
//   Данные - Строка, ДвоичныеДанные - данные для расчета.
//
// Возвращаемое значение:
//   Число - хеш-сумма, рассчитанная по алгоритму CRC32.
//
Функция ХешСуммаCRC32(Данные)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.Добавить(Данные);
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

#КонецОбласти