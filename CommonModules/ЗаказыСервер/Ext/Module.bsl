
#Область ПрограммныйИнтерфейс

// Устанавливает ключ в строках табличной части
//
// Параметры:
//  Объект							 - ДокументОбъект - Изменяемый документ
//  ИмяТабличнойЧасти				 - Строка - Название табличной части
//  РеквизитМаксимальныйКодСтроки	 - Строка - Имя реквизита максимального кода строки объекта
//  ИмяРеквизитаТЧ					 - Строка - Имя реквизита кода строки в ТЧ объекта
//
Процедура УстановитьКлючВСтрокахТабличнойЧасти(Объект,
											ИмяТабличнойЧасти,
											РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки",
											ИмяРеквизитаТЧ = "КодСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаТЧ, 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары[ИмяРеквизитаТЧ] = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецПроцедуры

// Получает минимальную дату отгрузки по неоформленным строкам заказа. Используется в событии обработка заполнения,
// для заполнения даты документа.
//
// Параметры:
//  ЗаказИлиМассивЗаказов - ДокументСсылка - заказ, дату отгрузки которого необходимо получить.
//  ИмяРегистра - Строка - Имя регистра накопления, содержащего сведения о неоформленных строках заказа.
//  ИмяРаспоряжения - Строка - Имя измерения регистра накопления, содержащего распоряжение (заказ).
//
// Возвращаемое значение:
//  Дата - Минимальная дата отгрузки по неоформленным строкам заказа.
Функция ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ЗаказИлиМассивЗаказов, ИмяРегистра = "РаспоряженияНаОтгрузку", ИмяРаспоряжения = "Распоряжение") Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос();
	Если ИмяРегистра = "ЗаказыНаСборку" Тогда

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаСборку КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказНаСборку = ТаблицаКОформлению.ЗаказНаСборку
			|		 И Отбор.КодСтроки     = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.Активность
			|		 И Отбор.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|		 И ТаблицаКОформлению.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";

	ИначеЕсли ИмяРегистра = "РаспоряженияНаОтгрузку" Тогда
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(, , , Распоряжение В (&МассивЗаказов)) КАК Отбор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РаспоряженияНаОтгрузку КАК ТаблицаКОформлению
			|		ПО Отбор.Распоряжение = ТаблицаКОформлению.Распоряжение
			|			И Отбор.КодСтроки = ТаблицаКОформлению.КодСтроки
			|			И (Отбор.КОформлениюОборот > 0)
			|			И (ТаблицаКОформлению.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход))
			|			И (ТаблицаКОформлению.КОформлению > 0)
			|			И (ТаблицаКОформлению.Активность)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказПоставщику = ТаблицаКОформлению.ЗаказПоставщику
			|		 И Отбор.КодСтроки    = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.Активность
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказыПоставщикам", ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПоставщику", ИмяРаспоряжения);

	КонецЕсли;

	Запрос.УстановитьПараметр("МассивЗаказов", ЗаказИлиМассивЗаказов);

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Макс(ТекущаяДатаСеанса(), Выборка.Период);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает минимальную дату отгрузки Документа. 
//
// Параметры:
//  Объект - ДокументОбъект - ЗаказКлиента, ЗаявкаНаВозвратКлиента.
//  ИмяТабличнойЧасти - Строка - Имя табличной части. Значение по-умолчанию - "Товары".
//
// Возвращаемое значение:
//  Дата - Минимальная дата отгрузки документа.
Функция ПолучитьМинимальнуюДатуОтгрузкиОбъекта(Объект, ИмяТабличнойЧасти = "Товары") Экспорт

	ПлановаяДатаОтгрузки = Объект.Дата;
	Если Объект.НеОтгружатьЧастями Тогда
		ПлановаяДатаОтгрузки = ?(ЗначениеЗаполнено(Объект.ДатаОтгрузки), Объект.ДатаОтгрузки, Объект.Дата); 
	Иначе
		ТаблицаДат = Объект[ИмяТабличнойЧасти].Выгрузить(,"ДатаОтгрузки");
		Если ТаблицаДат.Количество() > 0 Тогда
			ТаблицаДат.Сортировать("ДатаОтгрузки Возр"); 
			ДатаОтгрузки = ТаблицаДат[0].ДатаОтгрузки;
			Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
				ПлановаяДатаОтгрузки = ДатаОтгрузки; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПлановаяДатаОтгрузки;

КонецФункции

// Получает максимальную дату отгрузки по неоформленным строкам заказа. Используется в событии обработка заполнения,
// для заполнения даты документа.
//
// Параметры:
//  ЗаказИлиМассивЗаказов - ДокументСсылка - заказ, дату отгрузки которого необходимо получить.
//  ИмяРегистра - Строка - Имя регистра накопления, содержащего сведения о неоформленных строках заказа.
//  ИмяРаспоряжения - Строка - Имя измерения регистра накопления, содержащего распоряжение (заказ).
//
// Возвращаемое значение:
//  Дата - Максимальная дата отгрузки по неоформленным строкам заказа.
Функция ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(ЗаказИлиМассивЗаказов, ИмяРегистра = "РаспоряженияНаОтгрузку", ИмяРаспоряжения = "Распоряжение") Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос();
	Если ИмяРегистра = "ЗаказыНаСборку" Тогда

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаСборку КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказНаСборку = ТаблицаКОформлению.ЗаказНаСборку
			|		 И Отбор.КодСтроки     = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.Активность
			|		 И Отбор.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|		 И ТаблицаКОформлению.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";

	ИначеЕсли ИмяРегистра = "РаспоряженияНаОтгрузку" Тогда

		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(, , , Распоряжение В (&МассивЗаказов)) КАК Отбор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РаспоряженияНаОтгрузку КАК ТаблицаКОформлению
			|		ПО Отбор.Распоряжение = ТаблицаКОформлению.Распоряжение
			|			И Отбор.КодСтроки = ТаблицаКОформлению.КодСтроки
			|			И (Отбор.КОформлениюОборот > 0)
			|			И (ТаблицаКОформлению.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход))
			|			И (ТаблицаКОформлению.КОформлению > 0)
			|			И (ТаблицаКОформлению.Активность)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
	Иначе
	
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТаблицаКОформлению.Период КАК Период
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В(&МассивЗаказов)) КАК Отбор
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК ТаблицаКОформлению
			|		ПО Отбор.ЗаказПоставщику = ТаблицаКОформлению.ЗаказПоставщику
			|		 И Отбор.КодСтроки    = ТаблицаКОформлению.КодСтроки
			|		 И Отбор.КОформлениюОстаток > 0
			|		 И ТаблицаКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		 И ТаблицаКОформлению.КОформлению > 0
			|		 И ТаблицаКОформлению.Активность
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказыПоставщикам", ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПоставщику", ИмяРаспоряжения);

	КонецЕсли;

	Запрос.УстановитьПараметр("МассивЗаказов", ЗаказИлиМассивЗаказов);

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() И Выборка.Период >= НачалоДня(ТекущаяДатаСеанса()) Тогда
		Результат = Выборка.Период;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция-конструктор параметров обновления информации по заказам в форме
//
// Возвращаемое значение:
// Структура - Структура параметров для определения счета:
//      * ИмяРеквизитаСписокЗаказов         - Строка - Имя реквизита формы содержащего список заказов, например, "СписокЗаказов".
//      * ПутьЗаказаВШапке                  - Строка - Путь к заказу шапки, например, для вызова из формы документа "Объект.ЗаказКлиента",
//                                                     или "ЗаказКлиента" для вызова из формы подбора.
//      * ИмяНадписиЗаголовка               - Строка - Имя реквизита формы для вывода надписи "Всего заказов" или "Заказ
//                                                     ...".
//      * ИмяГруппыКолонокВТабличнойЧасти   - Строка - Имя группы колонок заказа клиента и кода строки в ТЧ
//                                                          документа для установки группировки.
//      * ИмяЗаказаВТабличнойЧасти          - Строка - Имя колонки ТЧ с заказами (например "ЗаказКлиента").
//      * ИспользоватьЗаказыВТабличнойЧасти - Булево - Значение функциональной опции использовать несколько заказов.
//      * НадписьВсегоЗаказов               - Строка - Необязательный, префикс надписи заказа.
//      * ИспользоватьЗаказы                - Неопределено, Булево - используются заказы.
//
Функция ПараметрыОбновленияИнформацииПоЗаказамВФорме() Экспорт
	
	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("ИмяРеквизитаСписокЗаказов");
	ПараметрыОбновления.Вставить("ПутьЗаказаВШапке");
	ПараметрыОбновления.Вставить("ИмяНадписиЗаголовка");
	ПараметрыОбновления.Вставить("ИмяГруппыКолонокВТабличнойЧасти");
	ПараметрыОбновления.Вставить("ИмяЗаказаВТабличнойЧасти");
	ПараметрыОбновления.Вставить("ИспользоватьЗаказыВТабличнойЧасти");
	ПараметрыОбновления.Вставить("НадписьВсегоЗаказов", Неопределено);
	ПараметрыОбновления.Вставить("ИспользоватьЗаказы", Неопределено);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет информацию по заказам в форме
//
// Параметры:
// 	 Форма - ФормаКлиентскогоПриложения - форма, для которой обновляется информация по заказам
// 	 ТабличнаяЧасть - ДанныеФормыКоллекция - ТаблицаЗначений, Табличная часть, используемая для заполнения списка заказов.
// 	 ПараметрыОбновления - см. ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме
//
Процедура ОбновитьИнформациюПоЗаказамВФорме(Форма, ТабличнаяЧасть, ПараметрыОбновления) Экспорт
	
	ЭлементыФормы                     = Форма.Элементы;
	СписокЗаказов                     = Форма[ПараметрыОбновления.ИмяРеквизитаСписокЗаказов];
	
	ЗаказВШапке                       = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПараметрыОбновления.ПутьЗаказаВШапке);
	ГруппаКолонокВТабличнойЧасти      = ?(ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти = Неопределено, Неопределено, Форма.Элементы[ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти]);
	
	ИмяЗаказаВТабличнойЧасти          = ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти;
	ИспользоватьЗаказыВТабличнойЧасти = ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти;
	НадписьВсегоЗаказов               = ПараметрыОбновления.НадписьВсегоЗаказов;
	
	Если ПараметрыОбновления.ИспользоватьЗаказы <> Неопределено Тогда
		Если Не ПараметрыОбновления.ИспользоватьЗаказы Тогда
			Если ЗначениеЗаполнено(ЗаказВШапке) Тогда
				ЭлементыФормы.СтраницыЗаказ.Доступность = Ложь;
			Иначе
				ЭлементыФормы.СтраницыЗаказ.Видимость = Ложь;
			КонецЕсли;
			Если Не ГруппаКолонокВТабличнойЧасти = Неопределено Тогда
				ГруппаКолонокВТабличнойЧасти.Видимость = Ложь;
			КонецЕсли;
		Иначе
			ЭлементыФормы.СтраницыЗаказ.Видимость = Истина;
			ЭлементыФормы.СтраницыЗаказ.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИспользоватьЗаказыВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли;
		
	СписокЗаказов.Очистить();
	ВоВсехСтрокахЕстьЗаказ = Истина;
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) Тогда
			Если  СписокЗаказов.НайтиПоЗначению(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) = Неопределено Тогда
				СписокЗаказов.Добавить(ТекСтрока[ИмяЗаказаВТабличнойЧасти]);
			КонецЕсли;
		Иначе
			ВоВсехСтрокахЕстьЗаказ = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокЗаказов.Количество() = 1 И ВоВсехСтрокахЕстьЗаказ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,ПараметрыОбновления.ПутьЗаказаВШапке,СписокЗаказов[0].Значение);
	ИначеЕсли СписокЗаказов.Количество() > 1 ИЛИ НЕ ВоВсехСтрокахЕстьЗаказ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,ПараметрыОбновления.ПутьЗаказаВШапке,Неопределено);
	КонецЕсли;
	ЗаказВШапке = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПараметрыОбновления.ПутьЗаказаВШапке); 
	
	Если СписокЗаказов.Количество() > 1 Тогда
		Если НадписьВсегоЗаказов = Неопределено Тогда
			НадписьВсегоЗаказов = НСтр("ru = 'Всего заказов'");
		КонецЕсли;
		Форма[ПараметрыОбновления.ИмяНадписиЗаголовка] = НадписьВсегоЗаказов + ": " + СписокЗаказов.Количество();
	КонецЕсли;
	
	Если СписокЗаказов.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказ;
	Иначе
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказы;
		Если ПараметрыОбновления.ИспользоватьЗаказы <> Неопределено Тогда
			Если Не ПараметрыОбновления.ИспользоватьЗаказы Тогда
				ЭлементыФормы.СтраницыЗаказ.Видимость = Истина;
				ЭлементыФормы.СтраницаЗаказы.Доступность = Ложь;
			Иначе
				ЭлементыФормы.СтраницаЗаказы.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ГруппаКолонокВТабличнойЧасти <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЗаказВШапке) Или Не ИспользоватьЗаказыВТабличнойЧасти Тогда
			ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.Вертикальная;
		Иначе
			ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.ВЯчейке;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет заказ в шапке накладной если в табличной части указан только один заказ.
//
// Параметры:
//  ЗаказВШапке - ДокументСсылка - поле, которое необходимо заполнить.
//  ТабличнаяЧасть - ТабличнаяЧасть - табличная часть накладной, по которой необходимо заполнить заказ в шапке.
//  ИмяЗаказаВТабличнойЧасти - Строка - имя реквизита в табличной части, где хранится ссылка на заказ.
//
Процедура ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказВШапке, Знач ТабличнаяЧасть, Знач ИмяЗаказаВТабличнойЧасти) Экспорт
	
	// Заполним заказ в шапке, если в табличной части указан один заказ
	ЗаказыТабличнойЧасти = ТабличнаяЧасть.Выгрузить(,ИмяЗаказаВТабличнойЧасти);
	ЗаказыТабличнойЧасти.Свернуть(ИмяЗаказаВТабличнойЧасти);
	
	Если ЗаказыТабличнойЧасти.Количество() = 1 Тогда
		СтрокаТабличнойЧасти = ЗаказыТабличнойЧасти[0];
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти]) Тогда
			ЗаказВШапке = СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты шапки по табличным частям
//
// Параметры:
//  СоответствиеРеквизитов	- Соответствие - Соответствие реквизитов шапки и реквизитов табличных частей (ключ - реквизит шапки, значение - реквизит ТЧ)
//  ТабличныеЧасти			- Строка - Список табличных частей из которых нужно получить значения
//  Объект					- ДокументОбъект, ДанныеФормыСтруктура - Объект в котором нужно заполнить реквизиты.
//
Процедура ЗаполнитьРеквизитыШапкиПоТабличнымЧастям(СоответствиеРеквизитов, ТабличныеЧасти, Объект) Экспорт

	СписокТЧ = СтрРазделить(ТабличныеЧасти, ",");
	
	Для каждого КлючИЗначение Из СоответствиеРеквизитов Цикл
		
		КоличествоЗначений = 0;
		ЗначениеРеквизита = Неопределено;
		
		Для каждого ИмяТЧ Из СписокТЧ Цикл
			
			Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки[КлючИЗначение.Значение]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДанныеСтроки[КлючИЗначение.Значение] <> ЗначениеРеквизита Тогда
					КоличествоЗначений = КоличествоЗначений + 1;
				КонецЕсли;
				ЗначениеРеквизита = ДанныеСтроки[КлючИЗначение.Значение];
				Если КоличествоЗначений > 1 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоЗначений > 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоЗначений <> 1 Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Объект[КлючИЗначение.Ключ]));
			ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
			ЗначениеРеквизита = ТипРеквизита.ПривестиЗначение();
		КонецЕсли; 
		
		Объект[КлючИЗначение.Ключ] = ЗначениеРеквизита;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак присутствия строки в документе относительно распоряжения по кодам строк.
//
// Параметры:
//  ТаблицаТовары            - ТаблицаЗначений - таблица, в которой необходимо установить признак.
//  ИмяЗаказаВТабличнойЧасти - Строка - имя реквизита Заказ в таблице для сопоставления.
//  МассивКодовСтрок         - Массив - коды строк заказов, с которыми осуществляется сопоставление.
//  ИмяРеквизитаКодСтроки    - Строка - имя реквизита КодСтроки заказа в таблице для сопоставления.
//
Процедура УстановитьПризнакиПрисутствияСтрокиВДокументе(ТаблицаТовары, ИмяЗаказаВТабличнойЧасти, МассивКодовСтрок, ИмяРеквизитаКодСтроки = "КодСтроки") Экспорт

	Для Каждого СтрокаТаб Из ТаблицаТовары Цикл
	
		СтрокаТаб.ПрисутствуетВДокументе = Ложь;
		
		Для Каждого ТекСтрока Из МассивКодовСтрок Цикл
			
			Если ТекСтрока[ИмяРеквизитаКодСтроки] = СтрокаТаб[ИмяРеквизитаКодСтроки] 
				И ТекСтрока[ИмяЗаказаВТабличнойЧасти] = СтрокаТаб[ИмяЗаказаВТабличнойЧасти] Тогда
				
				СтрокаТаб.ПрисутствуетВДокументе = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТаб.СтрокаВыбрана = Не СтрокаТаб.ПрисутствуетВДокументе;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление отмененной строки ТЧ в форме Заказа
// Параметры:
//	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы;
//	ТаблицаФормы - ТаблицаФормы - элемент формы, связанного с ТЧ, в которой отменяются строки;
//	ИмяЭлементаОтменено - Строка - наименование элемента формы, связанного с признаком отмены строки заказа;
//	ИмяЭлементаПричинаОтмены - Строка - наименование элемента формы, связанного с причиной отмены строки заказа.
//	ИмяПоляВводаЦены - Строка - наименование элемента формы, связанного с полем ввода цены
//	ИмяПоляВводаСуммы - Строка - наименование элемента формы, связанного с полем ввода суммы
//
Процедура УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, ТаблицаФормы, ИмяЭлементаОтменено, ИмяЭлементаПричинаОтмены = "", ИмяПоляВводаЦены = "", ИмяПоляВводаСуммы = "") Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	
	ИсключаяПоля = Новый Массив;
	ИсключаяПоля.Добавить(ИмяЭлементаОтменено);
	Если ЗначениеЗаполнено(ИмяЭлементаПричинаОтмены) Тогда
		ИсключаяПоля.Добавить(ИмяЭлементаПричинаОтмены);
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент.Поля, ТаблицаФормы.ПодчиненныеЭлементы, ИсключаяПоля);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Если ЗначениеЗаполнено(ИмяЭлементаПричинаОтмены) Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПричинаОтмены);
		
		ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".ПричинаОтмены");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаПричинаОтмены);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляВводаЦены) Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаЦены);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляВводаСуммы) Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаСуммы);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДублиКодовСтрокВТаблице(ДокументОбъект, КодСтроки, НомерСтроки, СоответствиеКодовСтрок, Отказ, ИмяТЧ = Неопределено) Экспорт
	Если ИмяТЧ = Неопределено Тогда
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодСтроки) Тогда
		Если СоответствиеКодовСтрок[КодСтроки] = Неопределено Тогда
			СоответствиеКодовСтрок.Вставить(КодСтроки, НомерСтроки);
		Иначе
			НомерСтрокиДубля = СоответствиеКодовСтрок[КодСтроки];
			ТекстОшибки = НСтр("ru='Дублируется значение реквизита ""Код строки"" строки %1 и строки %2 заказа.
				|Документ создан некорректно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НомерСтрокиДубля, НомерСтроки); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, НомерСтроки, "КодСтроки"),
				,
				Отказ);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Заполнение

// Заполняет служебный реквизит "РасхождениеЗаказ" в строке
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки
//  ПараметрыЗаполнения  - см. ЗаказыКлиентСервер.ПараметрыЗаполненияПризнакРасхождениеЗаказ
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке
//
Процедура ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, ПараметрыЗаполнения, КэшированныеЗначения) Экспорт

	Если Не ПараметрыЗаполнения.ПоЗаказам Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока.РасхождениеЗаказ = ?(ТекущаяСтрока.КодСтроки = 0, 1, 0);
	
КонецПроцедуры

// Заполняет признак "РасхождениеЗаказ" в строках таблицы
// 
//	Параметры:
//   ПараметрыЗаполнения  - см. ЗаказыКлиентСервер.ПараметрыЗаполненияПризнакРасхождениеЗаказ
//	 Таблица              - ДанныеФормыКоллекция - обрабатываемая таблица
//	 Строки               - Массив, Неопределено - массив обрабатываемых строк
//  
Процедура ЗаполнитьПризнакРасхождениеЗаказВТаблице(ПараметрыЗаполнения, Таблица, Строки = Неопределено) Экспорт
	
	Если Не ПараметрыЗаполнения.ПоЗаказам Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки      КАК НомерСтроки,
	|	Таблица.КодСтроки        КАК КодСтроки,
	|	Таблица.РасхождениеЗаказ КАК РасхождениеЗаказ
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки,
	|	РасхождениеЗаказ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА КодСтроки = 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ               КАК РасхождениеЗаказ
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	Таблица.КодСтроки = 0 И Таблица.РасхождениеЗаказ = 0
	|	ИЛИ
	|	Таблица.КодСтроки <> 0 И Таблица.РасхождениеЗаказ <> 0
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Таблица.Выгрузить(Строки, "НомерСтроки, КодСтроки, РасхождениеЗаказ"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица[Выборка.НомерСтроки - 1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

// Отвязывает строки в таблице от заказов, сбрасывая значение реквизита "КодСтроки" в 0
//
//	Параметры:
//   ПараметрыЗаполнения - см. ЗаказыКлиентСервер.ПараметрыЗаполненияПризнакРасхождениеЗаказ
//	 Таблица             - ДанныеФормыКоллекция - обрабатываемая таблица
//	 Строки              - Массив, Неопределено - массив обрабатываемых строк
//  
Процедура ОтвязатьСтрокиОтЗаказов(ПараметрыЗаполнения, Таблица, Строки = Неопределено) Экспорт
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки      КАК НомерСтроки,
	|	Таблица.КодСтроки        КАК КодСтроки,
	|	Таблица.РасхождениеЗаказ КАК РасхождениеЗаказ
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	0                   КАК КодСтроки,
	|	&РасхождениеЗаказ   КАК РасхождениеЗаказ
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	НЕ Таблица.КодСтроки = 0 ИЛИ Таблица.РасхождениеЗаказ = 0
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Таблица.Выгрузить(Строки, "НомерСтроки, КодСтроки, РасхождениеЗаказ"));
	Запрос.УстановитьПараметр("РасхождениеЗаказ", ?(ПараметрыЗаполнения.ПоЗаказам, 1, 0));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица[Выборка.НомерСтроки - 1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаНеотработанныхСтрок

// Функция-конструктор структуры корректировки строк заказа
//
// Возвращаемое значение:
//  Структура - Структура параметров для корректировки строк заказа:
//      * ДокументОбъект - ДокументОбъект - Заказ, в котором требуется скорректировать строки.
//      * ИмяДокумента                    - Строка - Имя заказа (объекта метаданных).
//      * ИмяТабличнойЧасти               - Строка - Имя табличной части заказа.
//      * ПричинаОтмены                   - СправочникСсылка.ПричиныОтменыЗаказовКлиентов, СправочникСсылка.ПричиныОтменыЗаказовПоставщикам - Причина отмены строк заказа.
//      * ПроверятьОстатки                - Булево - Требуется ли проверять остатки при корректировке строк.
//      * ОтменитьНеотработанныеСтроки    - Булево - Строки заказа, по которым не оформлена накладная и не
//                                                   осуществлялась приемка/отгрузка будут отменены.
//      * СкорректироватьМерныеТовары     - Булево - Строки заказа, по которым в пределах допустимого отклонения не
//                                                   оформлена накладная и не осуществлялась приемка/отгрузка, будут
//                                                   отменены. Строки заказа, по которым было принято/отгружено и
//                                                   оформлено товара больше, чем в заказе в пределах допустимого
//                                                   отклонения будут увеличены.
//      * СкорректироватьМерныеТоварыПоПриемке - Булево - то же, что СкорректироватьМерныеТовары, но применяется если у документа
//                                                   есть отдельная табличная часть, ориентированная на приемку.
//      * СкорректироватьЦены             - Булево - Цены заказа будут приведены к ценам накладной.
//      * ЗакрыватьЗаказы                 - Булево - Нужно ли предпринять попытку установки статуса Закрыт для заказа.
//
Функция СтруктураКорректировкиСтрокЗаказа() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ДокументОбъект");
	Структура.Вставить("ИмяДокумента");
	Структура.Вставить("ИмяТабличнойЧасти",                    "Товары");
	Структура.Вставить("ПричинаОтмены");
	Структура.Вставить("ПроверятьОстатки",                     Ложь);
	Структура.Вставить("ОтменитьНеотработанныеСтроки",         Ложь);
	Структура.Вставить("СкорректироватьМерныеТовары",          Ложь);
	Структура.Вставить("СкорректироватьМерныеТоварыПоПриемке", Ложь);
	Структура.Вставить("СкорректироватьЦены",                  Ложь);
	Структура.Вставить("ЗакрыватьЗаказы",                      Ложь);
	
	Возврат Структура;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - состав:
// * МенеджерРегистра  - РегистрНакопленияМенеджер
// * ОтборПоИзмерениям - Структура
// * ИмяТабличнойЧасти - Строка
// * ПутиКДанным       - Структура
// * ТаблицаЗамен      - Неопределено
//
Функция ПараметрыЗаполненияДляОтменыСтрок() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("МенеджерРегистра",  Неопределено);
	ПараметрыЗаполнения.Вставить("ОтборПоИзмерениям", Новый Структура);
	ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти", "Товары");
	ПараметрыЗаполнения.Вставить("ПутиКДанным",       Новый Структура);
	ПараметрыЗаполнения.Вставить("ТаблицаЗамен",      Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - состав:
// * ИмяПоляПричинаОтмены        - Строка
// * ПричинаОтмены               - Неопределено
// * УдалятьСтроки               - Булево
// * КорректироватьСумму         - Булево
// * ОтменятьТолькоМерныеТовары  - Булево
// * СкорректироватьМерныеТовары - Булево
//
Функция ПараметрыОтменыСтрокЗаказов() Экспорт
	
	ПараметрыОтмены = Новый Структура;
	ПараметрыОтмены.Вставить("ИмяПоляПричинаОтмены",        "ПричинаОтмены");
	ПараметрыОтмены.Вставить("ПричинаОтмены",               Неопределено);
	ПараметрыОтмены.Вставить("УдалятьСтроки",               Ложь);
	ПараметрыОтмены.Вставить("КорректироватьСумму",         Ложь);
	ПараметрыОтмены.Вставить("ОтменятьТолькоМерныеТовары",  Ложь);
	ПараметрыОтмены.Вставить("СкорректироватьМерныеТовары", Ложь);
	
	Возврат ПараметрыОтмены;
	
КонецФункции

// В зависимости от типа заказа вызывает процедуру корректировки строк и процедуры постобработки заказа.
//
// Параметры:
//  ЗаказОбъект                       - ДокументОбъект - Корректируемый заказ.
//  СтруктураДополнительныхПараметров - Структура - Структура корректировки строк заказа.
// 
// Возвращаемое значение:
//  Булево - Скорректировать строки заказа
Функция СкорректироватьСтрокиЗаказа(ЗаказОбъект, СтруктураДополнительныхПараметров) Экспорт
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	ЗаполнитьЗначенияСвойств(СтруктураКорректировкиСтрокЗаказа, СтруктураДополнительныхПараметров);
	
	ЗаказИзменен = Ложь;
	
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ДокументОбъект   = ЗаказОбъект;
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			Не (ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
		
		СтруктураРезультата = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок <> 0 ИЛИ СтруктураРезультата.СуммаКорректировки > 0 Тогда
			
			ЗаказИзменен = Истина;
			
			ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ЗаказОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			Не (ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован);
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок <> 0 Тогда
			
			ЗаказИзменен = Истина;
			
			ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ЗаказОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ДокументОбъект   = ЗаказОбъект;
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = Истина;
		
		// Возвращаемые товары
		СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "ВозвращаемыеТовары";
		СтруктураРезультатаВТ = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		// Заменяющие товары
		СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "ЗаменяющиеТовары";
		СтруктураРезультатаЗТ = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультатаЗТ.КоличествоСтрок > 0 ИЛИ СтруктураРезультатаЗТ.СуммаКорректировки > 0 Тогда
			ЗаказИзменен = Истина;
			
			ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ЗаказОбъект);
		КонецЕсли;
		
		Если СтруктураРезультатаВТ.КоличествоСтрок > 0 ИЛИ СтруктураРезультатаВТ.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаВнутреннееПотребление") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
			ЗаказОбъект.Статус <> Перечисления.СтатусыВнутреннихЗаказов.НаСогласовании;
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = Истина;
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		
		СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = Истина;
		
		СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		
		Если СтруктураРезультата.КоличествоСтрок > 0 Тогда
			ЗаказИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаказИзменен;
	
КонецФункции

// Параметры:
// 	ДокументОбъект - ДокументОбъект
// 	ПараметрыЗаполнения - см. ПараметрыЗаполненияДляОтменыСтрок
// 	ПараметрыОтмены - см. ПараметрыОтменыСтрокЗаказов
// Возвращаемое значение:
// 	см. ЗаказыСервер.РезультатОтменыНеотработанныхСтрок
// 
Функция ОтменитьНеотработанныеСтрокиПоОтгрузке(ДокументОбъект, ПараметрыЗаполнения, ПараметрыОтмены) Экспорт
	
	// 1. Описание таблицы
	ТаблицаВыбранныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Ссылка",               Новый ОписаниеТипов("ДокументСсылка." + ДокументОбъект.Ссылка.Метаданные().Имя));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КодСтроки",            Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Характеристика",       Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Склад",                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Серия",                Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Назначение",           Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("НазначениеСклада",     Новый ОписаниеТипов("СправочникСсылка.Назначения")); // без старых назначений
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Идентификатор",        Новый ОписаниеТипов("Число"));
	
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КоличествоВНакладной", Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КоличествоВОрдере",    Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Порядок",              Новый ОписаниеТипов("Число")); // для адекватного распределения ордеров
	
	// 2. Заполнение данными документа
	Идентификатор = 0;
	ЕстьТаблицаЗамен = ЗначениеЗаполнено(ПараметрыЗаполнения.ТаблицаЗамен);
	ДокументОбъектТЧ = ДокументОбъект[ПараметрыЗаполнения.ИмяТабличнойЧасти]; // ТабличнаяЧасть
	Для Каждого Строка Из ДокументОбъектТЧ Цикл
		Если (ПараметрыОтмены.УдалятьСтроки Или Не Строка.Отменено)
			И Не Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПереданРанее Тогда
			
			НоваяСтрока = ТаблицаВыбранныхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Ссылка        = ДокументОбъект.Ссылка;
			НоваяСтрока.Идентификатор = Идентификатор;
			
			Для каждого ПутьКДанным Из ПараметрыЗаполнения.ПутиКДанным Цикл
				НоваяСтрока[ПутьКДанным.Ключ] = ДокументОбъект[ПутьКДанным.Значение];
			КонецЦикла;
			
			Если ЕстьТаблицаЗамен Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения.ТаблицаЗамен[Строка.НомерСтроки-1]);
			КонецЕсли;
			
			Если Строка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить Или Не Строка.Обособленно Тогда
				НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
			
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
				НоваяСтрока.Порядок = 0;
			ИначеЕсли Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
				НоваяСтрока.Порядок = 1;
			Иначе
				НоваяСтрока.Порядок = 2;
			КонецЕсли;
			
		КонецЕсли;
		Идентификатор = Идентификатор + 1;
	КонецЦикла;
	
	ТаблицаВыбранныхСтрок.Сортировать("Порядок");
	
	СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(ТаблицаВыбранныхСтрок.ВыгрузитьКолонку("Назначение"));
	Для каждого СтрокаТаблицы Из ТаблицаВыбранныхСтрок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Назначение)
			И СвойстваНазначений[СтрокаТаблицы.Назначение].УчитываетсяВСкладскойПодсистеме Тогда
			СтрокаТаблицы.НазначениеСклада = СтрокаТаблицы.Назначение;
		КонецЕсли;
	КонецЦикла;
	
	// 3. Распределение количества накладных
	ОформленоПоНакладным = ПараметрыЗаполнения.МенеджерРегистра.ТаблицаОформлено(ТаблицаВыбранныхСтрок, ПараметрыЗаполнения.ОтборПоИзмерениям);
	КоличествоКолонка = ОформленоПоНакладным.Колонки.Количество; // КолонкаТаблицыЗначений
	КоличествоКолонка.Имя = "КоличествоВНакладной";
	
	Условие = "ПО [Количество]";
	
	Ключ = "КодСтроки";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоНакладным, ТаблицаВыбранныхСтрок, "КоличествоВНакладной", Ключ, Условие, Истина);
	
	// 4. Распределение количества ордеров
	Корректировка = ТаблицаВыбранныхСтрок.Скопировать(); // пустая таблица для передачи в регистры
	Корректировка.Колонки.Добавить("КОтгрузке", Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Назначение.Имя = "НазначениеДокумента";
	ТаблицаВыбранныхСтрок.Колонки.НазначениеСклада.Имя = "Назначение";
	
	ОформленоПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ТаблицаВыбранныхСтрок, Корректировка, Истина);
	КоличествоКолонка = ОформленоПоОрдерам.Колонки.Количество; // КолонкаТаблицыЗначений
	КоличествоКолонка.Имя = "КоличествоВОрдере";
	
	// Для взаимосвязанного распределения количества ордеров учтем предшествующее распределение количества накладных по кодам строк
	Условие = "ПО [КоличествоВНакладной]";
	
	Ключ = "Номенклатура, Характеристика, Серия, Назначение";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоОрдерам, ТаблицаВыбранныхСтрок, "КоличествоВОрдере", Ключ, Условие);
	
	Условие = "ПО [Количество]";
	
	Ключ = "Номенклатура, Характеристика, Серия, Назначение";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоОрдерам, ТаблицаВыбранныхСтрок, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Если в ордере не указаны назначения или указаны неверно
	Ключ = "Номенклатура, Характеристика, Серия";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоОрдерам, ТаблицаВыбранныхСтрок, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	ТаблицаВыбранныхСтрок.Колонки.Удалить("Назначение");
	КолонкаНазначениеДокумента = ТаблицаВыбранныхСтрок.Колонки.НазначениеДокумента; // КолонкаТаблицыЗначений
	КолонкаНазначениеДокумента.Имя = "Назначение";
	
	// 5. Свертка таблицы до отменяемых строк
	КоличествоИндексов = ТаблицаВыбранныхСтрок.Количество() - 1;
	Для Индекс = 0 По КоличествоИндексов Цикл
		Строка = ТаблицаВыбранныхСтрок[КоличествоИндексов - Индекс];
		Если Строка.Количество < Строка.КоличествоВНакладной Тогда
			Оформлено = Строка.КоличествоВНакладной;
		Иначе
			Оформлено = Макс(Строка.КоличествоВНакладной, Строка.КоличествоВОрдере);
		КонецЕсли;
		Строка.Количество = Строка.Количество - Оформлено;
		Если Строка.Количество = 0 Тогда
			ТаблицаВыбранныхСтрок.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокКОтмене = ПеренестиВТаблицуДокументаОтмененныеСтроки(ДокументОбъект,
		ДокументОбъект[ПараметрыЗаполнения.ИмяТабличнойЧасти], ТаблицаВыбранныхСтрок,
		ПараметрыОтмены, Перечисления.ТипыДвиженияЗапасов.Отгрузка);
	
	Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСтрокКОтмене);
	
КонецФункции

// Параметры:
// 	ДокументОбъект - ДокументОбъект
// 	ПараметрыЗаполнения - см. ПараметрыЗаполненияДляОтменыСтрок
// 	ПараметрыОтмены - см. ПараметрыОтменыСтрокЗаказов
// Возвращаемое значение:
// 	см. ЗаказыСервер.РезультатОтменыНеотработанныхСтрок
//
Функция ОтменитьНеотработанныеСтрокиПоПриемке(ДокументОбъект, ПараметрыЗаполнения, ПараметрыОтмены) Экспорт
	
	// 1. Описание таблицы
	ТаблицаВыбранныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Ссылка",               Новый ОписаниеТипов("ДокументСсылка." + ДокументОбъект.Ссылка.Метаданные().Имя));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КодСтроки",            Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Характеристика",       Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Склад",                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Назначение",           Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("НазначениеСклада",     Новый ОписаниеТипов("СправочникСсылка.Назначения")); // без старых назначений
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Идентификатор",        Новый ОписаниеТипов("Число"));
	
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КоличествоВНакладной", Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КоличествоВОрдере",    Новый ОписаниеТипов("Число"));
	
	// 2. Заполнение данными документа
	Идентификатор = 0;
	ЕстьТаблицаЗамен = ЗначениеЗаполнено(ПараметрыЗаполнения.ТаблицаЗамен);
	ДокументОбъектТЧ = ДокументОбъект[ПараметрыЗаполнения.ИмяТабличнойЧасти]; // ДокументТабличнаяЧасть.ЗаказНаСборку.Товары, ДокументТабличнаяЧасть.ЗаказДавальца2_5.Материалы
	Для Каждого Строка Из ДокументОбъектТЧ Цикл
		Если (ПараметрыОтмены.УдалятьСтроки Или Не Строка.Отменено)
			Тогда
			НоваяСтрока = ТаблицаВыбранныхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Ссылка        = ДокументОбъект.Ссылка;
			НоваяСтрока.Идентификатор = Идентификатор;
			Для каждого ПутьКДанным Из ПараметрыЗаполнения.ПутиКДанным Цикл
				НоваяСтрока[ПутьКДанным.Ключ] = ДокументОбъект[ПутьКДанным.Значение];
			КонецЦикла;
			Если ЕстьТаблицаЗамен Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения.ТаблицаЗамен[Строка.НомерСтроки-1]);
			КонецЕсли;
		КонецЕсли;
		Идентификатор = Идентификатор + 1;
	КонецЦикла;
	
	// 3. Распределение количества накладных
	ОформленоПоНакладным = ПараметрыЗаполнения.МенеджерРегистра.ТаблицаОформлено(ТаблицаВыбранныхСтрок, ПараметрыЗаполнения.ОтборПоИзмерениям);
	КолонкаКоличество = ОформленоПоНакладным.Колонки.Количество; // КолонкаТаблицыЗначений
	КолонкаКоличество.Имя = "КоличествоВНакладной";
	
	Условие = "ПО [Количество]";
	
	Ключ = "КодСтроки";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоНакладным, ТаблицаВыбранныхСтрок, "КоличествоВНакладной", Ключ, Условие, Истина);
	
	// 4. Распределение количества ордеров
	Корректировка = ТаблицаВыбранныхСтрок.Скопировать(); // пустая таблица для передачи в регистры
	Корректировка.Колонки.Добавить("КПоступлению", Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Назначение.Имя = "НазначениеДокумента";
	ТаблицаВыбранныхСтрок.Колонки.НазначениеСклада.Имя = "Назначение";
	
	ОформленоПоОрдерам = РегистрыНакопления.ТоварыКПоступлению.ТаблицаОформлено(ТаблицаВыбранныхСтрок, Корректировка, Истина);
	КолонкаКоличество = ОформленоПоОрдерам.Колонки.Количество; // КолонкаТаблицыЗначений
	КолонкаКоличество.Имя = "КоличествоВОрдере";
	
	// Для взаимосвязанного распределения количества ордеров учтем предшествующее распределение количества накладных по кодам строк
	Условие = "ПО [КоличествоВНакладной]";
	
	Ключ = "Номенклатура, Характеристика, Назначение";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоОрдерам, ТаблицаВыбранныхСтрок, "КоличествоВОрдере", Ключ, Условие);
	
	Условие = "ПО [Количество]";
	
	Ключ = "Номенклатура, Характеристика, Назначение";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоОрдерам, ТаблицаВыбранныхСтрок, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Если в ордере не указаны назначения или указаны неверно
	Ключ = "Номенклатура, Характеристика";
	НакладныеСервер.РаспределитьКоличество(ОформленоПоОрдерам, ТаблицаВыбранныхСтрок, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	ТаблицаВыбранныхСтрок.Колонки.Удалить("Назначение");
	КолонкаНазначениеДокумента = ТаблицаВыбранныхСтрок.Колонки.НазначениеДокумента; // КолонкаТаблицыЗначений
	КолонкаНазначениеДокумента.Имя = "Назначение";
	
	// 5. Свертка таблицы до отменяемых строк
	КоличествоИндексов = ТаблицаВыбранныхСтрок.Количество() - 1;
	Для Индекс = 0 По КоличествоИндексов Цикл
		Строка = ТаблицаВыбранныхСтрок[КоличествоИндексов - Индекс];
		Если Строка.Количество < Строка.КоличествоВНакладной Тогда
			Оформлено = Строка.КоличествоВНакладной;
		Иначе
			Оформлено = Макс(Строка.КоличествоВНакладной, Строка.КоличествоВОрдере);
		КонецЕсли;
		Строка.Количество = Строка.Количество - Оформлено;
		Если Строка.Количество = 0 Тогда
			ТаблицаВыбранныхСтрок.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрокКОтмене = ПеренестиВТаблицуДокументаОтмененныеСтроки(ДокументОбъект,
		ДокументОбъект[ПараметрыЗаполнения.ИмяТабличнойЧасти], ТаблицаВыбранныхСтрок,
		ПараметрыОтмены, Перечисления.ТипыДвиженияЗапасов.Поступление);
	
	Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСтрокКОтмене);
	
КонецФункции


// Описание
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект
// 	ТаблицаДокумента - ТабличнаяЧасть
// 	ТаблицаОтмененныхСтрок - ТаблицаЗначений:
// * Ссылка - ДокументСсылка
// * КодСтроки - Число
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// * Склад - СправочникСсылка.Склады
// * Назначение - СправочникСсылка.Назначения
// * НазначениеСклада - СправочникСсылка.Назначения
// * Идентификатор - Число
// * Количество - Число
// * КоличествоВНакладной - Число
// * КоличествоВОрдере - Число
// * КПоступлению - Число
// 	ПараметрыОтмены - Структура:
// * ПричинаОтмены - Неопределено
// * УдалятьСтроки - Булево
// * КорректироватьСумму - Булево
// * ОтменятьТолькоМерныеТовары - Булево
// * СкорректироватьМерныеТовары - Булево
// 	ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов
// 	
// Возвращаемое значение:
// 	Число 
Функция ПеренестиВТаблицуДокументаОтмененныеСтроки(ДокументОбъект, ТаблицаДокумента, ТаблицаОтмененныхСтрок, ПараметрыОтмены, ТипДвиженияЗапасов)
	
	СтрокиКОбработке = Новый Соответствие();
	Для Каждого Строка Из ТаблицаОтмененныхСтрок Цикл
		СтрокаТовары = ТаблицаДокумента[Строка.Идентификатор];
		СтрокиКОбработке.Вставить(Строка, СтрокаТовары);
	КонецЦикла;
	
	Если ПараметрыОтмены.СкорректироватьМерныеТовары Тогда
		
		ДопустимыеОтклонения = Документы[ДокументОбъект.Метаданные().Имя].ДопустимыеОтклоненияМерныхТоваров(
			ДокументОбъект.Ссылка, ТипДвиженияЗапасов); // см. Документы.ЗаказНаПеремещение.ДопустимыеОтклоненияМерныхТоваров
		
		Ключ = Новый Массив;
		Для Каждого Колонка Из ДопустимыеОтклонения.Колонки Цикл
			Если Колонка.Имя <> "ДопустимоеОтклонение" И Колонка.Имя <> "Заказ" Тогда
				Ключ.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		Ключ = СтрСоединить(Ключ, ",");
		
		СтруктураПоиска = Новый Структура(Ключ);
		
		ТаблицаТоваровКОтмене = ДопустимыеОтклонения.Скопировать();
		ТаблицаТоваровКОтмене.Очистить();
		ТаблицаТоваровКОтмене.Колонки.Добавить("Количество",ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		// Сворачиваем строки, которые собираемся отменять
		Для Каждого КлючЗначение Из СтрокиКОбработке Цикл
			Строка = КлючЗначение.Ключ;
			СтрокаТовары = КлючЗначение.Значение;
			
			СтрокаКОтмене = ТаблицаТоваровКОтмене.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКОтмене, СтрокаТовары);
			СтрокаКОтмене.Количество = Строка.Количество;
		КонецЦикла;
		
		ТаблицаТоваровКОтмене.Свернуть(Ключ,"Количество");
		ТаблицаТоваровКОтмене.Колонки.Добавить("ИсключитьИзОтмены",Новый ОписаниеТипов("Булево"));
		ТаблицаТоваровКОтмене.Индексы.Добавить(Ключ);
		
		// Недопустимые отклонения исключаем из отмены
		Для Каждого СтрокаОтмены Из ТаблицаТоваровКОтмене Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаОтмены);
			СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДопустимыхОтклонений.Количество() = 0
				Или СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение < -СтрокаОтмены.Количество
				Или СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение < СтрокаОтмены.Количество Тогда
				СтрокаОтмены.ИсключитьИзОтмены = СтрокаОтмены.Количество < 0 Или ПараметрыОтмены.ОтменятьТолькоМерныеТовары;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоОтмененныхСтрок     = 0;
	ПересчитатьКоличествоУпаковок = Ложь;
	
	Для Каждого КлючЗначение Из СтрокиКОбработке Цикл
		Строка = КлючЗначение.Ключ;
		СтрокаТовары = КлючЗначение.Значение;
		
		Если ПараметрыОтмены.СкорректироватьМерныеТовары Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокаТаблицыКОтмене = ТаблицаТоваровКОтмене.НайтиСтроки(СтруктураПоиска)[0];
			Если СтрокаТаблицыКОтмене.ИсключитьИзОтмены Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли Строка.Количество < 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.Количество < СтрокаТовары.Количество Тогда
			
			Если ПараметрыОтмены.КорректироватьСумму Тогда
				СуммаОтмены = Окр(СтрокаТовары.Сумма / СтрокаТовары.Количество * Строка.Количество, 2);
				СтрокаТовары.Сумма = СтрокаТовары.Сумма - СуммаОтмены;
			КонецЕсли;
			
			СтрокаТовары.Количество = СтрокаТовары.Количество - Строка.Количество;
			
			Если Строка.Количество > 0 И Не ПараметрыОтмены.УдалятьСтроки Тогда
				
				НоваяСтрока = ТаблицаДокумента.Вставить(ТаблицаДокумента.Индекс(СтрокаТовары) + 1);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.Отменено = Истина;
				НоваяСтрока.КодСтроки = 0;
				Если ПараметрыОтмены.ПричинаОтмены <> Неопределено Тогда
					НоваяСтрока[ПараметрыОтмены.ИмяПоляПричинаОтмены] = ПараметрыОтмены.ПричинаОтмены;
				КонецЕсли;
				Если ПараметрыОтмены.КорректироватьСумму Тогда
					НоваяСтрока.Сумма = СуммаОтмены;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыОтмены.УдалятьСтроки Тогда
			ТаблицаДокумента.Удалить(СтрокаТовары);
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			Продолжить;
		Иначе
			
			СтрокаТовары.Отменено = Истина;
			Если ПараметрыОтмены.ПричинаОтмены <> Неопределено
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, ПараметрыОтмены.ИмяПоляПричинаОтмены) Тогда
				СтрокаТовары[ПараметрыОтмены.ИмяПоляПричинаОтмены] = ПараметрыОтмены.ПричинаОтмены;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтрокаТовары = Неопределено
			И Не ПересчитатьКоличествоУпаковок Тогда
			ПересчитатьКоличествоУпаковок = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "Упаковка");
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Если ПересчитатьКоличествоУпаковок Тогда
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоУпаковок",
			ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаДокумента, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Возвращает текст оповещения об операции отмены строк
//
// Параметры:
//  ОтмененоСтрок      - Число - Количество отмененных строк.
//  Модифицированность - Булево - Одноименный параметр формы, для изменения в процедуре.
// 
// Возвращаемое значение:
//  Структура - текст оповещения об операции отмены строк и количество отмененных строк.
//
Функция РезультатОтменыНеотработанныхСтрок(ОтмененоСтрок, Модифицированность = Ложь) Экспорт
	
	РезультатОтмены = Новый Структура("Оповещение, КоличествоСтрок");
	
	Если ОтмененоСтрок = Неопределено Тогда
		РезультатОтмены.Оповещение = НСтр("ru = 'Отмена неотработанных строк не выполнена'");
		РезультатОтмены.КоличествоСтрок = 0;
	ИначеЕсли ОтмененоСтрок = 0 Тогда
		РезультатОтмены.Оповещение = НСтр("ru = 'Строки не отменены, поскольку полностью отработаны'");
		РезультатОтмены.КоличествоСтрок = 0;
	Иначе
		РезультатОтмены.Оповещение = СтрШаблон(НСтр("ru = 'Отменено неотработанных строк: %1'"), ОтмененоСтрок);
		РезультатОтмены.КоличествоСтрок = ОтмененоСтрок;
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат РезультатОтмены;

КонецФункции

#КонецОбласти

#Область РегламентноеЗадание

// Корректирует строки мерных товаров заказов, попавших в регистр ОчередьЗаказовККорректировкеСтрокМерныхТоваров.
// Метод регламентного задания КорректировкаСтрокЗаказовМерныхТоваров.
//
Процедура АвтоматическаяКорректировкаСтрокЗаказовМерныхТоваров() Экспорт
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.КорректировкаСтрокЗаказовМерныхТоваров;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКорректировкиСтрокЗаказа = Новый Структура();
	СтруктураКорректировкиСтрокЗаказа.Вставить("СкорректироватьМерныеТовары", Истина);
	СтруктураКорректировкиСтрокЗаказа.Вставить("СкорректироватьМерныеТоварыПоПриемке", Истина);
	
	УровеньИнформация = УровеньЖурналаРегистрации.Информация;
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередьЗаказовККорректировкеСтрокМерныхТоваров.Заказ КАК Заказ,
	|	ОчередьЗаказовККорректировкеСтрокМерныхТоваров.Заказ.Проведен КАК Проведен
	|ИЗ
	|	РегистрСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров КАК ОчередьЗаказовККорректировкеСтрокМерныхТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЗаказовККорректировкеСтрокМерныхТоваров.ДатаДобавления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Заказ", Выборка.Заказ);
		Блокировка.Заблокировать();
		
		Если НЕ Выборка.Проведен Тогда
			
			НаборЗаписей = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		// Захват объекта для редактирования
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Заказ);
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось заблокировать объект при автоматической корректировке строк мерных товаров.'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				Выборка.Заказ);
			
			Продолжить;
			
		КонецПопытки;
		
		ЗаказОбъект = Выборка.Заказ.ПолучитьОбъект(); // ДокументОбъект
		
		ЗаказИзменен = ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЗаказОбъект, СтруктураКорректировкиСтрокЗаказа);
		
		Если ЗаказИзменен Тогда
			Попытка
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);

				НаборЗаписей = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
				НаборЗаписей.Записать();
				
				ТекстСообщения = НСтр("ru = 'Выполнена корректировка строк мерных товаров по заказу %Заказ%'", КодОсновногоЯзыка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Выборка.Заказ);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Окончание корректировки строк мерных товаров.'", КодОсновногоЯзыка),
					УровеньИнформация,
					,
					Выборка.Заказ,
					ТекстСообщения);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить корректировку строк
				                            | мерных товаров по заказу %Заказ% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Выборка.Заказ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновая корректировка строк заказов мерных товаров'", КодОсновногоЯзыка),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				ВызватьИсключение;
				
			КонецПопытки
			
		Иначе
			
			Попытка
				
				НаборЗаписей = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
				ТекстСообщения = НСтр("ru = 'Не удалось удалить %Заказ% из очереди на корректировку строк
				                            | мерных товаров по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Выборка.Заказ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновая корректировка строк заказов мерных товаров'", КодОсновногоЯзыка),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				ВызватьИсключение;
				
			КонецПопытки
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

Процедура ОчиститьОчередьЗаказовККорректировкеСтрокМерныхТоваровПередУдалениемДокументаПередУдалением(Источник, Отказ) Экспорт
	
    Если Источник.ОбменДанными.Загрузка Тогда
        Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
		
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Заказ", Источник.Ссылка);
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ОчередьЗаказовККорректировкеСтрокМерныхТоваров.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(Источник.Ссылка);
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ОписаниеОшибки();
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;

КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// При разбиении строк пересчитывает значения реквизитов и зависимых реквизитов.
// Параметры:
//  ИзмененныеСтроки   - ТаблицаЗначений - таблица с колонками:
//   * Идентификатор   - Число - Идентификатор исходной строки, которая подверглась разбиению на несколько строк.
//   * Строка          - Строка - Строка таблицы формы, результат разбиения. Подлежит пересчету реквизитов.
//  Реквизиты          - Строка    - Реквизиты таблицы формы через запятую.
Процедура ПересчитатьЗависимыеРеквизитыПослеРазбиенияСтрок(ИзмененныеСтроки, Реквизиты) Экспорт
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты);
	
	Идентификатор = Неопределено;
	Для Каждого Изменение Из ИзмененныеСтроки Цикл
		
		Если Идентификатор <> Изменение.Идентификатор Тогда
			
			Идентификатор = Изменение.Идентификатор;
			
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, Изменение.Строка);
			
		КонецЕсли;
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, Изменение.Строка);
		
	КонецЦикла;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
КонецПроцедуры

#КонецОбласти