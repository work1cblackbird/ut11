// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура ОжидатьПолученияДанныхКомпонентовПросмотраПослеДлительнойОперации(ДлительнаяОперация, 
	ОповещениеОЗавершении) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда // Прервана
		Возврат;
	КонецЕсли; 
	
	Результат = НовыйРезультатОжиданияДанныхКомпонентовПросмотраДокумента();

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Результат.ОперацияПолученияДанных = ДлительнаяОперация;
		Результат.Успех = Истина;
	Иначе
		ВидОперации = НСтр("ru = 'Получение данных электронного документа'");
		ТекстСообщения = ?(ДлительнаяОперация = Неопределено,
			НСтр("ru = 'Не удалось получить данные электронного документа.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);

КонецПроцедуры

#Область События

// Возвращаемое значение:
//  Строка
Функция ИмяСобытияИзмененияОбъектовУчетаДокумента() Экспорт
	Возврат "ОбновитьОбъектыУчетаЭД";
КонецФункции

#КонецОбласти // События

#Область ОбработкаКоманд

#Область ДополнительныеКоманды

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  СтандартнаяОбработка - Булево
Процедура ОткрытьЖурналРегистрацииПоОшибкамПредставленияИзКарточкиДокумента(Форма, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ОтборЖурналаРегистрации = Новый Структура;
	ОтборЖурналаРегистрации.Вставить("Данные", "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, Форма);

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СоставПакета - ДанныеФормыКоллекция Из ТаблицаЗначений
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ЭтоПакетнаяОбработка - Булево
Процедура СменитьОтветственногоИзКарточкиДокумента(Форма, ОповещениеОЗавершении, 
	ЭтоПакетнаяОбработка = Ложь) Экспорт

	Если ЭтоПакетнаяОбработка Тогда
		ЭлектронныеДокументы = ЭлектронныеДокументыИзСоставаПакета(Форма.СоставПакета);
	Иначе
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	КонецЕсли;

	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы, ОповещениеОЗавершении);

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ОтключитьВыводДопДанных - Булево
//  * ОтключитьВыводКопияВерна - Булево
Процедура ОткрытьФормуПечатиИзКарточкиДокумента(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для печати необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДОВызовСервера.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Форма.ВыводитьБанковскиеРеквизиты;
	ПараметрыВизуализации.ВыводитьДопДанные = Не Форма.ОтключитьВыводДопДанных;
	ПараметрыВизуализации.ВыводитьКопияВерна = Не Форма.ОтключитьВыводКопияВерна;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиЭлектронныхДокументов(Форма.Объект.Ссылка, ПараметрыВизуализации);

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * УникальныйИдентификаторв - УникальныйИдентификатор
Процедура ВыгрузитьДокументооборотЦеликомИзКарточкиДокумента(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликом(ЭлектронныеДокументы);

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * УникальныйИдентификаторв - УникальныйИдентификатор
Процедура ВыгрузитьДокументыВФорматеPDFИзКарточкиДокумента(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыВФорматеPDF(ЭлектронныеДокументы,
		Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура ВыгрузитьДокументыДляФНСИзКарточкиДокумента(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы);

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** ИдентификаторКонтрагента - Строка
//   ** ИдентификаторОрганизации - Строка
//   ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   ** Организация - ОпределяемыйТип.Организация
Процедура ОткрытьНастройкиОтраженияВУчетеИзКарточкиДокумента(Форма) Экспорт

	ПараметрыФормы = НастройкиЭДОКлиент.НовыеПараметрыФормыНастройкиОтраженияВУчете();
	ПараметрыФормы.ИдентификаторКонтрагента = Форма.Объект.ИдентификаторКонтрагента;
	ПараметрыФормы.ИдентификаторОрганизации = Форма.Объект.ИдентификаторОрганизации;
	ПараметрыФормы.Контрагент = Форма.Объект.Контрагент;
	ПараметрыФормы.Организация = Форма.Объект.Организация;
	
	НастройкиЭДОКлиент.ОткрытьНастройкуОтраженияВУчете(ПараметрыФормы);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Организация - ОпределяемыйТип.Организация
//   ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//   ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   ** ИдентификаторОрганизации - Строка
//   ** ИдентификаторКонтрагента - Строка
//   ** ВыгружатьДополнительныеСведения - Булево
//   ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//   ** ОбменБезПодписи - Булево
//   ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//   ** ТребуетсяИзвещение - Булево
//   ** ТребуетсяПодтверждение - Булево
//   ** ФорматОсновногоТитула - Строка
//  ОбработчикЗавершения - ОписаниеОповещения - процедура, которая будет вызвана после закрытия формы настройки обмена:
//  * Настройки - Неопределено - если настройки не были изменены
//              - См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения
Процедура ОткрытьНастройкиОтправкиИзКарточкиДокумента(Форма, ОбработчикЗавершения) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Форма.Объект.Организация;
	КлючНастроекОтправки.Получатель = Форма.Объект.Контрагент;
	КлючНастроекОтправки.Договор = Форма.Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Форма.Объект.ВидДокумента;
	
	ПараметрыОткрытия = НастройкиЭДОКлиент.НовыеПараметрыТранспортныхНастроек();
	ПараметрыОткрытия.КлючНастроек = КлючНастроекОтправки;
	ПараметрыОткрытия.ИдентификаторОтправителя = Форма.Объект.ИдентификаторОрганизации;
	ПараметрыОткрытия.ИдентификаторПолучателя = Форма.Объект.ИдентификаторКонтрагента;
	ПараметрыОткрытия.НастройкаДокумента = Истина;
	
	НастройкаОтправки = НастройкаОтправкиПоДаннымКарточкиДокумента(Форма);
	
	НастройкиЭДОКлиент.ОткрытьТранспортныеНастройкиОтправки(ПараметрыОткрытия, Форма, ОбработчикЗавершения,
		НастройкаОтправки);
		
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Организация - ОпределяемыйТип.Организация
//   ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//   ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   ** ИдентификаторОрганизации - Строка
//   ** ИдентификаторКонтрагента - Строка
//   ** ВыгружатьДополнительныеСведения - Булево
//   ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//   ** ОбменБезПодписи - Булево
//   ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//   ** ТребуетсяИзвещение - Булево
//   ** ТребуетсяПодтверждение - Булево
//   ** ФорматОсновногоТитула - Строка
//  ОбработчикЗавершения - ОписаниеОповещения - процедура, которая будет вызвана после закрытия формы настройки обмена:
//  * Настройки - Неопределено - если настройки не были изменены
//              - См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
//  * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения
Процедура ОткрытьНастройкиФормированияИзКарточкиДокумента(Форма, ОбработчикЗавершения) Экспорт
	
	КлючНастроекОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
	КлючНастроекОтправки.Отправитель = Форма.Объект.Организация;
	КлючНастроекОтправки.Получатель = Форма.Объект.Контрагент;
	КлючНастроекОтправки.Договор = Форма.Объект.ДоговорКонтрагента;
	КлючНастроекОтправки.ВидДокумента = Форма.Объект.ВидДокумента;
	
	НастройкаОтправки = НастройкаОтправкиПоДаннымКарточкиДокумента(Форма);
	
	НастройкиЭДОКлиент.НастроитьРегламентЭДО(КлючНастроекОтправки, Форма, ОбработчикЗавершения, Истина,
		НастройкаОтправки);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторПакета - Строка
//  ДокументКУдалениюИзПакета - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                            - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура УдалитьДокументИзПакета(ИдентификаторПакета, ДокументКУдалениюИзПакета) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	ИнтерфейсДокументовЭДОВызовСервера.УдалитьДокументИзПакета(ИдентификаторПакета,
		ДокументКУдалениюИзПакета, КонтекстДиагностики);
		
	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстДиагностики) Тогда
		ИнтерфейсДокументовЭДОКлиент.ПоказатьПредставлениеОшибокКонтекстаДиагностики(КонтекстДиагностики);
	Иначе		
		Оповестить(ПакетыДокументовЭДОКлиент.ИмяСобытияУдалениеДокументаИзПакета(), ДокументКУдалениюИзПакета,
			ИдентификаторПакета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ДополнительныеКоманды

#Область ОтражениеВУчете

#Область Открытие

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * ОбъектыУчетаДокумента - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НомерОбъектаУчета - Число
Процедура ОткрытьОбъектУчетаИзКарточкиДокумента(Форма, НомерОбъектаУчета) Экспорт

	Если Форма.ОбъектыУчетаДокумента.Количество() >= НомерОбъектаУчета Тогда
		ПоказатьЗначение(, Форма.ОбъектыУчетаДокумента[НомерОбъектаУчета - 1].ОбъектУчета);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Открытие

#Область Создание

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ЕстьНоменклатураНаКонтроле - Булево
//  * СписокСоздания - СписокЗначений Из Строка
//  * СоставПакета - ДанныеФормыКоллекция Из ТаблицаЗначений
Процедура ПоказатьВыборСпособаОбработкиСозданияОбъектовУчетаИзКарточкиДокумента(Форма) Экспорт

	ПараметрыОтраженияВУчете = НовыеПараметрыСозданияОбъектовУчета();
	ПараметрыОтраженияВУчете.ЭлектронныйДокумент = Форма.Объект.Ссылка;
	ПараметрыОтраженияВУчете.ЕстьНоменклатураНаКонтроле = Форма.ЕстьНоменклатураНаКонтроле;
	ПараметрыОтраженияВУчете.ДокументыПакета = ЭлектронныеДокументыИзСоставаПакета(Форма.СоставПакета);

	ОбработкаВыбора = Новый ОписаниеОповещения("ПроверитьНоменклатуруНаКонтролеПослеВыбораСпособаОбработки", ЭтотОбъект,
		ПараметрыОтраженияВУчете);

	Если Форма.СписокСоздания.Количество() > 1 Тогда
		Форма.ПоказатьВыборИзМеню(ОбработкаВыбора, Форма.СписокСоздания, Форма.Элементы.КнопкаСоздатьДокументУчета);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, Форма.СписокСоздания[0]);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма текущих дел ЭДО легкого интерфейса:
//  * ТекущийЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ЕстьНоменклатураНаКонтролеТекущегоДокумента - Булево
//  * СписокСоздания - СписокЗначений Из Строка
//  * СоставПакетаТекущегоДокумента - ДанныеФормыКоллекция Из ТаблицаЗначений
Процедура ПоказатьВыборСпособаОбработкиСозданияОбъектовУчетаИзСпискаТекущихДел(Форма) Экспорт

	ПараметрыОтраженияВУчете = НовыеПараметрыСозданияОбъектовУчета();
	ПараметрыОтраженияВУчете.ЭлектронныйДокумент = Форма.ТекущийЭлектронныйДокумент;
	ПараметрыОтраженияВУчете.ЕстьНоменклатураНаКонтроле = Форма.ЕстьНоменклатураНаКонтролеТекущегоДокумента;
	ПараметрыОтраженияВУчете.ДокументыПакета = ЭлектронныеДокументыИзСоставаПакета(Форма.СоставПакетаТекущегоДокумента);

	ОбработкаВыбора = Новый ОписаниеОповещения("ПроверитьНоменклатуруНаКонтролеПослеВыбораСпособаОбработки", ЭтотОбъект,
		ПараметрыОтраженияВУчете);

	Если Форма.СписокСоздания.Количество() > 1 Тогда
		Форма.ПоказатьВыборИзМеню(ОбработкаВыбора, Форма.СписокСоздания, Форма.Элементы.КнопкаСоздатьДокументУчета);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, Форма.СписокСоздания[0]);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений:
//  * Значение - Строка,Массив Из Строка
//  ПараметрыОтраженияВУчете - См. НовыеПараметрыСозданияОбъектовУчета
Процедура ПроверитьНоменклатуруНаКонтролеПослеВыбораСпособаОбработки(ВыбранныйЭлемент, ПараметрыОтраженияВУчете) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтраженияВУчете.ЕстьНоменклатураНаКонтроле Тогда

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ПараметрыОтраженияВУчете", ПараметрыОтраженияВУчете);
		ПараметрыОткрытия.Вставить("ВыбранныйЭлемент", ВыбранныйЭлемент);
		ОбработчикЗавершения = Новый ОписаниеОповещения("СоздатьОбъектыУчетаПослеСопоставленияНоменклатуры",
			ЭтотОбъект, ПараметрыОткрытия);
		ОткрытьСопоставлениеНоменклатуры(ПараметрыОткрытия, ОбработчикЗавершения);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("СоздатьОбъектыУчетаПослеВыбораСпособаОбработки", ЭтотОбъект,
			ПараметрыОтраженияВУчете);
		ВыполнитьОбработкуОповещения(Оповещение, ВыбранныйЭлемент);
		
	КонецЕсли;
		
КонецПроцедуры

// Параметры:
//  ПараметрыОткрытия - Структура:
//  * ПараметрыОтраженияВУчете - См. НовыеПараметрыСозданияОбъектовУчета
//  * ВыбранныйЭлемент - ЭлементСпискаЗначений:
//   ** Значение - Строка,Массив Из Строка
//  ОбработчикЗавершения - ОписаниеОповещения
Процедура ОткрытьСопоставлениеНоменклатуры(ПараметрыОткрытия, ОбработчикЗавершения) Экспорт
	
	Если ПараметрыОткрытия.ПараметрыОтраженияВУчете.ДокументыПакета.Количество() Тогда
		ЭлектронныеДокументы = ПараметрыОткрытия.ПараметрыОтраженияВУчете.ДокументыПакета;
	Иначе
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ПараметрыОткрытия.ПараметрыОтраженияВУчете.ЭлектронныйДокумент);
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = 
		ЛегкийИнтерфейсДокументовЭДОВызовСервера.НоменклатураЭлектронныхДокументовДляСопоставления(
			ЭлектронныеДокументы);
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(НаборНоменклатурыКонтрагентов,, 
		ОбработчикЗавершения);
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено,Массив Из Структура - результат сопоставления, состоящий из структур:
//   * НоменклатураКонтрагента - См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//   * НоменклатураИБ          - См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы
//  ДополнительныеПараметры - Структура:
//  * ПараметрыОтраженияВУчете - См. НовыеПараметрыСозданияОбъектовУчета
//  * ВыбранныйЭлемент - ЭлементСпискаЗначений:
//   ** Значение - Строка,Массив Из Строка
Процедура СоздатьОбъектыУчетаПослеСопоставленияНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Документ учета не создан, т.к. не сопоставлена номенклатура'"));
		Возврат;
	КонецЕсли;
	
	СпособыОбработкиДокументов = Новый Соответствие;
	СпособыОбработкиДокументов.Вставить(ДополнительныеПараметры.ПараметрыОтраженияВУчете.ЭлектронныйДокумент,
		ДополнительныеПараметры.ВыбранныйЭлемент.Значение);
	
	СоздатьОбъектыУчета(ДополнительныеПараметры.ПараметрыОтраженияВУчете, СпособыОбработкиДокументов);
	
КонецПроцедуры

// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений:
//   * Значение - Строка,Массив Из Строка
//  ПараметрыОтраженияВУчете - См. НовыеПараметрыСозданияОбъектовУчета
Процедура СоздатьОбъектыУчетаПослеВыбораСпособаОбработки(ВыбранныйЭлемент, ПараметрыОтраженияВУчете) Экспорт

	СпособыОбработкиДокументов = Новый Соответствие;
	СпособыОбработкиДокументов.Вставить(ПараметрыОтраженияВУчете.ЭлектронныйДокумент, ВыбранныйЭлемент.Значение);

	СоздатьОбъектыУчета(ПараметрыОтраженияВУчете, СпособыОбработкиДокументов);

КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  ДополнительныеПараметры - Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура ОбработатьРезультатСозданияОбъектовУчета(ДлительнаяОперация, ДополнительныеПараметры) Экспорт

	Если ДлительнаяОперация = Неопределено
		Или ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;

	Результат = ЛегкийИнтерфейсДокументовЭДОВызовСервера.ОбработатьРезультатСозданияОбъектовУчета(
		ДлительнаяОперация.АдресРезультата);

	Если Не Результат.ЕстьОшибка Тогда
		
		Оповестить(ИмяСобытияИзмененияОбъектовУчетаДокумента(), ДополнительныеПараметры.ЭлектронныйДокумент);
		Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
		
		#Если Не МобильноеПриложениеКлиент Тогда
		ЗаголовокОповещения = НСтр("ru='Создан документ учета:'");
		Для Каждого ОбъектУчета Из Результат.СозданныеОбъектыУчета Цикл
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ОбъектУчета);
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, НавигационнаяСсылка, Строка(ОбъектУчета),
				БиблиотекаКартинок.ЭмблемаСервиса1СЭДО48, СтатусОповещенияПользователя.Важное);
		КонецЦикла;
		#КонецЕсли
		
	КонецЕсли;

	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);

КонецПроцедуры

#КонецОбласти // Создание

#Область Подбор

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   ** Организация - ОпределяемыйТип.Организация
//   ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * СписокПодбора - СписокЗначений Из Строка
//  * СпособыОбработкиОсновные - СписокЗначений Из Строка
//  * СпособыОбработкиДополнительные - СписокЗначений Из Строка
//  * ОбъектыУчетаДокумента - ДанныеФормыКоллекция Из ТаблицаЗначений
//  Номер - Число
Процедура ПоказатьВыборСпособаОбработкиПодбораОбъектаУчетаИзКарточкиДокумента(Форма, Номер) Экспорт

	ПараметрыПодбора = НовыеПараметрыПодбораОбъектовУчета();
	ПараметрыПодбора.ЭлектронныйДокумент = Форма.Объект.Ссылка;
	ПараметрыПодбора.Организация = Форма.Объект.Организация;
	ПараметрыПодбора.Контрагент = Форма.Объект.Контрагент;
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПоказатьПодборОбъектаУчетаПослеВыбораСпособаОбработки", ЭтотОбъект,
		ПараметрыПодбора);
	
	ТекущийСписокПодбора = Форма.СписокПодбора;
	НомерПодбораВторогоОбъектаУчета = 2;
	Если Номер = НомерПодбораВторогоОбъектаУчета Тогда
		ЕстьОсновнойДокумент = ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ЕстьОтражениеВОбъектУчетаКарточкиДокумента(
			Форма.ОбъектыУчетаДокумента, Форма.СпособыОбработкиОсновные);
		ТекущийСписокПодбора = ?(ЕстьОсновнойДокумент,
			Форма.СпособыОбработкиДополнительные, Форма.СпособыОбработкиОсновные);
	КонецЕсли;

	Если ТекущийСписокПодбора.Количество() > 1 Тогда

		Элемент = ?(Номер = 1,
			Форма.Элементы.КнопкаПодобратьДокументУчета1, Форма.Элементы.КнопкаПодобратьДокументУчета2);

		Форма.ПоказатьВыборИзМеню(ОбработкаВыбора, ТекущийСписокПодбора, Элемент);

	ИначеЕсли ТекущийСписокПодбора.Количество() = 1 Тогда

		ВыполнитьОбработкуОповещения(ОбработкаВыбора, ТекущийСписокПодбора[0]);

	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма текущих дел ЭДО легкого интерфейса:
//  * ТекущийЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ОрганизацияТекущегоДокумента - ОпределяемыйТип.Организация
//  * КонтрагентТекущегоДокумента - ОпределяемыйТип.КонтрагентБЭД
//  * СписокПодбора - СписокЗначений Из Строка
//  * СпособыОбработкиОсновные - СписокЗначений Из Строка
//  * СпособыОбработкиДополнительные - СписокЗначений Из Строка
//  * ОбъектыУчетаТекущегоДокумента - ДанныеФормыКоллекция Из ТаблицаЗначений
//  Номер - Число
Процедура ПоказатьВыборСпособаОбработкиПодбораОбъектаУчетаИзСпискаТекущихДел(Форма, Номер) Экспорт

	ПараметрыПодбора = НовыеПараметрыПодбораОбъектовУчета();
	ПараметрыПодбора.ЭлектронныйДокумент = Форма.ТекущийЭлектронныйДокумент;
	ПараметрыПодбора.Организация = Форма.ОрганизацияТекущегоДокумента;
	ПараметрыПодбора.Контрагент = Форма.КонтрагентТекущегоДокумента;
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПоказатьПодборОбъектаУчетаПослеВыбораСпособаОбработки", ЭтотОбъект,
		ПараметрыПодбора);
	
	ТекущийСписокПодбора = Форма.СписокПодбора;
	НомерПодбораВторогоОбъектаУчета = 2;
	Если Номер = НомерПодбораВторогоОбъектаУчета Тогда
		ЕстьОсновнойДокумент = ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ЕстьОтражениеВОбъектУчетаКарточкиДокумента(
			Форма.ОбъектыУчетаТекущегоДокумента, Форма.СпособыОбработкиОсновные);
		ТекущийСписокПодбора = ?(ЕстьОсновнойДокумент,
			Форма.СпособыОбработкиДополнительные, Форма.СпособыОбработкиОсновные);
	КонецЕсли;

	Если ТекущийСписокПодбора.Количество() > 1 Тогда

		Элемент = ?(Номер = 1,
			Форма.Элементы.КнопкаПодобратьДокументУчета1, Форма.Элементы.КнопкаПодобратьДокументУчета2);

		Форма.ПоказатьВыборИзМеню(ОбработкаВыбора, ТекущийСписокПодбора, Элемент);

	ИначеЕсли ТекущийСписокПодбора.Количество() = 1 Тогда

		ВыполнитьОбработкуОповещения(ОбработкаВыбора, ТекущийСписокПодбора[0]);

	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - Неопределено - отказ от выбора.
//                    - ЭлементСпискаЗначений:
//  * Значение - Строка,Массив Из Строка
//  ПараметрыПодбора - См. НовыеПараметрыПодбораОбъектовУчета
Процедура ПоказатьПодборОбъектаУчетаПослеВыбораСпособаОбработки(ВыбранноеЗначение, ПараметрыПодбора) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СпособОбработки = ВыбранноеЗначение.Значение;
	НастройкиПодбора = НастройкиПодбораОбъектаУчета(ПараметрыПодбора, СпособОбработки);

	Если ЗначениеЗаполнено(НастройкиПодбора) Тогда
		ДополнительныеПараметры = Новый Структура("ЭлектронныйДокумент, СпособОбработки",
			ПараметрыПодбора.ЭлектронныйДокумент, СпособОбработки);
		ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборОбъектаУчета", ЭтотОбъект, ДополнительныеПараметры);
		ИнтерфейсДокументовЭДОКлиент.ПоказатьПодборУчетногоДокумента(НастройкиПодбора, ОбработкаВыбора);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ОбъектУчета - Неопределено - отказ от выбора.
//              - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДополнительныеПараметры - Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СпособОбработки - Строка
Процедура ОбработатьВыборОбъектаУчета(ОбъектУчета, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(ОбъектУчета) Тогда

		ИнтеграцияЭДОВызовСервера.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(
			ДополнительныеПараметры.ЭлектронныйДокумент, ОбъектУчета, ДополнительныеПараметры.СпособОбработки);

		Оповестить(ИмяСобытияИзмененияОбъектовУчетаДокумента(), ДополнительныеПараметры.ЭлектронныйДокумент);
		Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());

	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ЕстьВозможностьОтраженияВУчете - Булево
Процедура ПоказатьРасширенныйПодборОбъектовУчетаИзКарточкиДокумента(Форма) Экспорт

	ДополнительныеПараметры = Новый Структура("ЭлектронныйДокумент", Форма.Объект.Ссылка);
	ОбработкаРасширенногоПодбора = Новый ОписаниеОповещения("ОбработатьРасширенныйПодборОбъектовУчета", ЭтотОбъект,
		ДополнительныеПараметры);

	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент, ВидДокумента, ДокументРаспознан",
		Форма.Объект.Ссылка, Форма.Объект.ВидДокумента, Форма.ЕстьВозможностьОтраженияВУчете);
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы,
		ОбработкаРасширенногоПодбора);

КонецПроцедуры

// Параметры:
//  Результат - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ДополнительныеПараметры - Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                        - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура ОбработатьРасширенныйПодборОбъектовУчета(Результат, ДополнительныеПараметры) Экспорт

	Оповестить(ИмяСобытияИзмененияОбъектовУчетаДокумента(), ДополнительныеПараметры.ЭлектронныйДокумент);
	ИнтерфейсДокументовЭДОКлиент.ПослеПодбораУчетногоДокумента(ДополнительныеПараметры.ЭлектронныйДокумент, Результат);

КонецПроцедуры

#КонецОбласти // Подбор

#Область РазрывСвязи

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ОбъектыУчетаДокумента - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  НомерОбъектаУчета - Число
Процедура ПоказатьВопросОРазрывеСвязиСОбъектомУчетаИзКарточкиДокумента(Форма, НомерОбъектаУчета) Экспорт

	Если Форма.ОбъектыУчетаДокумента.Количество() < НомерОбъектаУчета Тогда
		Возврат;
	КонецЕсли;

	ОбъектУчета = Форма.ОбъектыУчетаДокумента[НомерОбъектаУчета - 1].ОбъектУчета;

	ДополнительныеПараметры = Новый Структура("ЭлектронныйДокумент, ОбъектУчета", 
		Форма.Объект.Ссылка, ОбъектУчета);
	ОписаниеОповещения = Новый ОписаниеОповещения("РазорватьСвязьСОбъектомУчетаПослеОтветаНаВопрос",
		ЭтотОбъект, ДополнительныеПараметры);

	ТекстВопроса = НСтр("ru = 'Связь между документами разорвется. Повторно связать документы возможно только в ручном режиме. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);

КонецПроцедуры

// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                        - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура РазорватьСвязьСОбъектомУчетаПослеОтветаНаВопрос(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЭДОВызовСервера.РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(
		ДополнительныеПараметры.ЭлектронныйДокумент, ДополнительныеПараметры.ОбъектУчета);

	Оповестить(ИмяСобытияИзмененияОбъектовУчетаДокумента(), ДополнительныеПараметры.ЭлектронныйДокумент);
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());

КонецПроцедуры

#КонецОбласти // РазрывСвязи

#КонецОбласти // ОтражениеВУчете

#Область ВыполнениеДействийПоЭДО

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  Заблокировать - Булево
Процедура НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма, Заблокировать = Истина) Экспорт
	
	Форма.Элементы.ГруппаПанельКоманд.Доступность = Не Заблокировать;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СостоянияПакетаОднородно - Булево
//  * ИдентификаторПакета - УникальныйИдентификатор
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеАннулироватьИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().Аннулировать;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЭтоПакетнаяОбработка Тогда
		ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов.Добавить(Форма.ИдентификаторПакета);
	Иначе
		ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ОсновноеДействие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Аннулировать");
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ОсновноеДействие);
	ДобавитьДействияПодписатьОтправитьПодготовитьКОтправке(НаборДействий);
	
	ПараметрыВыполнения.ДополнительныеПараметрыДействий.Вставить(ОсновноеДействие,
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия());
		
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ПараметрыВыполнения", Форма, ПараметрыВыполнения);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтрокиИзКарточкиДокумента",
		ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
	ПоказатьВводСтрокиДляВыполненияДействийПоЭДО(ПараметрыВводаСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СостоянияПакетаОднородно - Булево
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеВернутьВРаботуИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ВернутьВРаботу;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ВернутьВРаботу"));
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СостоянияПакетаОднородно - Булево
//  * ИдентификаторПакета - УникальныйИдентификатор
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеЗакрытьПринудительноИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ЗакрытьПринудительно;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЭтоПакетнаяОбработка Тогда
		ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов.Добавить(Форма.ИдентификаторПакета);
	Иначе
		ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ОсновноеДействие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ЗакрытьПринудительно");
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ОсновноеДействие);
	
	ПараметрыВыполнения.ДополнительныеПараметрыДействий.Вставить(ОсновноеДействие,
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия());
		
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ПараметрыВыполнения", Форма, ПараметрыВыполнения);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтрокиИзКарточкиДокумента",
		ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины принудительного закрытия документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть принудительно'");
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для принудительного закрытия документа необходимо указать причину.'");
	ПоказатьВводСтрокиДляВыполненияДействийПоЭДО(ПараметрыВводаСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СостоянияПакетаОднородно - Булево
//  * ИдентификаторПакета - УникальныйИдентификатор
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеОтклонитьИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().Отклонить;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЭтоПакетнаяОбработка Тогда
		ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов.Добавить(Форма.ИдентификаторПакета);
	Иначе
		ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ОсновноеДействие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Отклонить");
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ОсновноеДействие);
	ДобавитьДействияПодписатьОтправитьПодготовитьКОтправке(НаборДействий);
	
	ПараметрыВыполнения.ДополнительныеПараметрыДействий.Вставить(ОсновноеДействие,
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия());
		
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ПараметрыВыполнения", Форма, ПараметрыВыполнения);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтрокиИзКарточкиДокумента",
		ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения документа необходимо указать причину.'");
	ПоказатьВводСтрокиДляВыполненияДействийПоЭДО(ПараметрыВводаСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СостоянияПакетаОднородно - Булево
//  * ИдентификаторПакета - УникальныйИдентификатор
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеОтклонитьПодписаниеИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ОтклонитьПодписание;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЭтоПакетнаяОбработка Тогда
		ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов.Добавить(Форма.ИдентификаторПакета);
	Иначе
		ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ОсновноеДействие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ОтклонитьПодписание");
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ОсновноеДействие);
	
	ПараметрыВыполнения.ДополнительныеПараметрыДействий.Вставить(ОсновноеДействие,
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия());
		
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ПараметрыВыполнения", Форма, ПараметрыВыполнения);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтрокиИзКарточкиДокумента",
		ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения документа'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить'");
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отказа от подписания документа необходимо указать причину.'");
	ПоказатьВводСтрокиДляВыполненияДействийПоЭДО(ПараметрыВводаСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СостоянияПакетаОднородно - Булево
//  * ИдентификаторПакета - УникальныйИдентификатор
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеОтклонитьАннулированиеИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ОтклонитьАннулирование;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	Если ЭтоПакетнаяОбработка Тогда
		ПараметрыВыполнения.ОбъектыДействий.ПакетыДокументов.Добавить(Форма.ИдентификаторПакета);
	Иначе
		ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ОсновноеДействие = ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ОтклонитьАннулирование");
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ОсновноеДействие);
	ДобавитьДействияПодписатьОтправитьПодготовитьКОтправке(НаборДействий);
	
	ПараметрыВыполнения.ДополнительныеПараметрыДействий.Вставить(ОсновноеДействие,
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия());
		
	ДополнительныеПараметры = Новый Структура("ФормаВладелец, ПараметрыВыполнения", Форма, ПараметрыВыполнения);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтрокиИзКарточкиДокумента", 
		ЭтотОбъект, ДополнительныеПараметры);
		
	ПараметрыВводаСтроки = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
	ПараметрыВводаСтроки.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ПараметрыВводаСтроки.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения предложения об аннулировании документа необходимо указать причину.'");
	ПоказатьВводСтрокиДляВыполненияДействийПоЭДО(ПараметрыВводаСтроки, ОбработчикЗавершения);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   ** ОбменБезПодписи - Булево
//  * СостоянияПакетаОднородно - Булево
//  * ИдентификаторПакета - УникальныйИдентификатор
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеОтправитьИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().Отправить;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	Если Форма.Объект.ОбменБезПодписи Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	КонецЕсли;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СостоянияПакетаОднородно - Булево
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеОтправитьПовторноИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ОтправитьПовторно;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма);
	
	ПараметрыВыполнения = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьПовторно"));
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СостоянияПакетаОднородно - Булево
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеПодписатьИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().Подписать;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СостоянияПакетаОднородно - Булево
//  * СформироватьИзвещение - Булево
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействияПодписатьОтправитьИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ПодписатьОтправить;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));

	Если Форма.СформироватьИзвещение Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.СформироватьИзвещение"));
	КонецЕсли;
	
	ДобавитьДействияПодписатьОтправитьПодготовитьКОтправке(НаборДействий);
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СостоянияПакетаОднородно - Булево
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеПринятьАннулированиеИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().ПринятьАннулирование;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	ДобавитьДействияПодписатьОтправитьПодготовитьКОтправке(НаборДействий);
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СостоянияПакетаОднородно - Булево
//  ЭтоПакетнаяОбработка - Булево
Асинх Процедура ВыполнитьДействиеУтвердитьИзКарточкиДокумента(Форма, ЭтоПакетнаяОбработка = Ложь) Экспорт
	
	ВидВыполняемогоДействия = ВидыВыполняемыхДействийСДокументом().Утвердить;
	Если Не ВыполнениеДействийПоЭДОДоступноДляПакета(Форма.СостоянияПакетаОднородно, ЭтоПакетнаяОбработка) Тогда
		ТекстВопроса = ТекстВопросаОВыполненииДействияДляДокументаПакета(ВидВыполняемогоДействия);
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭтоПакетнаяОбработка = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(Форма);
	
	НаборДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО();
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	
	ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка);
	
КонецПроцедуры

// Параметры:
//  Комментарий - Неопределено,Строка
//  ДополнительныеПараметры - Структура:
//  * ФормаВладелец -  ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  * ПараметрыВыполнения - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
Процедура ВыполнитьДействияПоЭДОПослеВводаСтрокиИзКарточкиДокумента(Комментарий, ДополнительныеПараметры) Экспорт
	
	Если Комментарий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьБлокировкуПанелиКомандКарточкиДокумента(ДополнительныеПараметры.ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент);
	ДополнительныеПараметрыДействий = 
		ДополнительныеПараметры.ПараметрыВыполнения.ДополнительныеПараметрыДействий;
	Для Каждого ДополнительныйПараметрДействия Из ДополнительныеПараметрыДействий Цикл
		ДополнительныйПараметрДействия.Значение.Комментарий = Комментарий;
	КонецЦикла;
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ДополнительныеПараметры.ПараметрыВыполнения);
	
КонецПроцедуры

// Параметры:
//  ВыполняемоеДействие - Строка - См. ВидыВыполняемыхДействийСДокументом
// 
// Возвращаемое значение:
//  Строка
Функция ТекстВопросаОВыполненииДействияДляДокументаПакета(ВыполняемоеДействие) Экспорт
	
	ВидыВыполняемыхДействий = ВидыВыполняемыхДействийСДокументом();
	
	Если ВыполняемоеДействие = ВидыВыполняемыхДействий.ПринятьАннулирование
		Или ВыполняемоеДействие = ВидыВыполняемыхДействий.ОтклонитьАннулирование Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru='По этому пакету нельзя %1, т.к. документы пакета имеют разные состояния.
			|%2 только для выбранного документа?'"), НРег(ВыполняемоеДействие), ВыполняемоеДействие);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru='Этот пакет нельзя %1, т.к. документы пакета имеют разные состояния.
			|%2 только выбранный документ?'"), НРег(ВыполняемоеДействие), ВыполняемоеДействие);
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Утвердить - Строка
// * Подписать - Строка
// * ПодписатьОтправить - Строка
// * Отправить - Строка
// * Отклонить - Строка
// * ОтклонитьПодписание - Строка
// * ОтправитьПовторно - Строка
// * ВернутьНаПодготовкуКОтправке - Строка
// * ПринятьАннулирование - Строка
// * ОтклонитьАннулирование - Строка
// * Аннулировать - Строка
// * ЗакрытьПринудительно - Строка
// * ВернутьВРаботу - Строка
Функция ВидыВыполняемыхДействийСДокументом() Экспорт

	ВидыВыполняемыхДействий = Новый Структура;
	ВидыВыполняемыхДействий.Вставить("Утвердить", НСтр("ru='Утвердить'"));
	ВидыВыполняемыхДействий.Вставить("Подписать", НСтр("ru='Подписать'"));
	ВидыВыполняемыхДействий.Вставить("ПодписатьОтправить", НСтр("ru='Подписать и отправить'"));
	ВидыВыполняемыхДействий.Вставить("Отправить", НСтр("ru='Отправить'"));
	ВидыВыполняемыхДействий.Вставить("Отклонить", НСтр("ru='Отклонить'"));
	ВидыВыполняемыхДействий.Вставить("ОтклонитьПодписание", НСтр("ru='Отклонить подписание'"));
	ВидыВыполняемыхДействий.Вставить("ОтправитьПовторно", НСтр("ru='Отправить повторно'"));
	ВидыВыполняемыхДействий.Вставить("ВернутьНаПодготовкуКОтправке", НСтр("ru='Вернуть на подготовку к отправке'"));
	ВидыВыполняемыхДействий.Вставить("ПринятьАннулирование", НСтр("ru='Подтвердить аннулирование'"));
	ВидыВыполняемыхДействий.Вставить("ОтклонитьАннулирование", НСтр("ru='Отклонить аннулирование'"));
	ВидыВыполняемыхДействий.Вставить("Аннулировать", НСтр("ru='Аннулировать'"));
	ВидыВыполняемыхДействий.Вставить("ЗакрытьПринудительно", НСтр("ru='Закрыть принудительно'"));
	ВидыВыполняемыхДействий.Вставить("ВернутьВРаботу", НСтр("ru='Вернуть в работу'"));
	Возврат ВидыВыполняемыхДействий;

КонецФункции

#КонецОбласти // ВыполнениеДействийПоЭДО

#Область Подписи

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ОбработкаЗавершения - ОписаниеОповещения
Процедура ВыполнитьПроверкуПодписейИзКарточкиДокумента(Форма, ОбработкаЗавершения) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписиДокумента(
		ОбработкаЗавершения, Форма.Объект.Ссылка, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура
//  * ВизуализацияТабличныйДокумент - ТабличныйДокумент
//  * УникальныйИдентификатор - УникальныйИдентификатор
//  Элемент - См. Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.Элементы.Подписи
//  Поле - ПолеВвода - элемент таблицы подписей
//  СтандартнаяОбработка - Булево
//  ОбработчикЗавершения - Неопределено,ОписаниеОповещения
Процедура ОбработатьВыборВТаблицеПодписейИзКарточкиДокумента(Форма, Элемент, Поле, СтандартнаяОбработка = Ложь, 
	ОбработчикЗавершения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Форма.Элементы.ПодписиДоверенностьПредставление Тогда

		ПоказатьДоверенностьИзКарточкиДокумента(Форма);

	ИначеЕсли Поле = Форма.Элементы.ПодписиПодписьВернаПредставление Тогда 

		ПоказатьРезультатПроверкиПодписиИзКарточкиДокумента(Форма, ОбработчикЗавершения);

	Иначе
	
		ПоказатьСертификатИзКарточкиДокумента(Форма);
	
	КонецЕсли;
	
КонецПроцедуры

//@skip-check property-return-type, invocation-parameter-type-intersect
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * УникальныйИдентификатор - УникальныйИдентификатор
//  * Элементы - ВсеЭлементыФормы:
//   ** Подписи - ТаблицаФормы - таблица подписей формы
Процедура ПоказатьСертификатИзКарточкиДокумента(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Подписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИнтеграцияБСПБЭДКлиент.ПоказатьСертификатПодписиПодписанногоОбъекта(ТекущиеДанные.ПодписанныйОбъект,
		ТекущиеДанные.ПорядковыйНомер, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

//@skip-check property-return-type, invocation-parameter-type-intersect
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * ЕстьПравоИзмененияМЧД - Булево
//  * Элементы - ВсеЭлементыФормы:
//   ** КнопкаПодписиПроверкаДоверенностиВыполненаВручную - КнопкаФормы
//  Элемент - ТаблицаФормы - таблица подписей формы:
Процедура ОбработатьАктивациюСтрокиВТаблицеПодписейКарточкиДокумента(Форма, Элемент) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;

	Форма.Элементы.КнопкаПодписиПроверкаДоверенностиВыполненаВручную.Видимость = Ложь;
	
	Если ТекущиеДанные = Неопределено Или Не Форма.ЕстьПравоИзмененияМЧД
		Или Не ТекущиеДанные.ЭтоВходящаяПодпись Или Не ТекущиеДанные.ЭтоПодписьПоДоверенности Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаДоверенностиВыполненаВручную = ТекущиеДанные.ПроверкаДоверенностиВыполненаВручную; // Булево
	
	ДоступнаКомандаРучнойПроверки = ПроверкаДоверенностиВыполненаВручную 
		Или Не (ТекущиеДанные.ДоверенностьПроверенаУспешно И ТекущиеДанные.ПроверкаПолномочийВыполненаБезОшибок);
	Форма.Элементы.КнопкаПодписиПроверкаДоверенностиВыполненаВручную.Видимость = ДоступнаКомандаРучнойПроверки;
	
	Если ДоступнаКомандаРучнойПроверки Тогда
		Форма.Элементы.КнопкаПодписиПроверкаДоверенностиВыполненаВручную.Пометка = ПроверкаДоверенностиВыполненаВручную;
	КонецЕсли;
	
КонецПроцедуры

//@skip-check property-return-type, invocation-parameter-type-intersect
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Элементы - ВсеЭлементыФормы:
//   ** Подписи - ТаблицаФормы - таблица подписей формы
//  ОбработкаЗавершения - ОписаниеОповещения
Процедура ПроверитьПодписьПоДоверенностиВручнуюИзКарточкиДокумента(Форма, ОбработкаЗавершения) Экспорт
	
	Если Форма.Элементы.КнопкаПодписиПроверкаДоверенностиВыполненаВручную.Пометка Тогда
		
		ВыполнитьПроверкуПодписейИзКарточкиДокумента(Форма, ОбработкаЗавершения);
		
	Иначе
		
		ТекущиеДанные = Форма.Элементы.Подписи.ТекущиеДанные;
		
		ДанныеПодписиОбъекта = ЛегкийИнтерфейсДокументовЭДОВызовСервера.ДанныеПодписиОбъектаДляОткрытияРезультатаПроверки(
			ТекущиеДанные.ПодписанныйОбъект, ТекущиеДанные.ПорядковыйНомер);
		
		МашиночитаемыеДоверенностиВызовСервера.ЗаписатьРезультатРучнойПроверкиПодписи(
			ДанныеПодписиОбъекта.ДанныеПодписи);
		
		Результат = Новый Структура("Успех, КонтекстДиагностики",
			Истина, ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
			
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Подписи

#Область ОткрытиеФайла

//@skip-check property-return-type, invocation-parameter-type-intersect
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ЭтоОблачныйЭДО - Булево
//  ИдентификаторФормы - УникальныйИдентификатор
Процедура ОткрытьФайлИнформацииОтправителяДокумента(ЭлектронныйДокумент, ЭтоОблачныйЭДО, ИдентификаторФормы) Экспорт
	
	РезультатВоВременномХранилище = ЛегкийИнтерфейсДокументовЭДОВызовСервера.ДанныеФайлаИнформацииОтправителяДокумента(
		ЭлектронныйДокумент, ЭтоОблачныйЭДО, ИдентификаторФормы);
	
	Результат = ПолучитьИзВременногоХранилища(РезультатВоВременномХранилище); // См. ЛегкийИнтерфейсДокументовЭДО.ДанныеФайлаИнформацииОтправителяДокумента

	Если ЗначениеЗаполнено(Результат.ДлительнаяОперация) Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОткрытьФайлИнформацииОтправителяДокументаПослеОжидания",
			ЭтотОбъект, ИдентификаторФормы);

		Оповещение = Новый ОписаниеОповещения("ОжидатьПолученияДанныхФайлаПослеДлительнойОперации",
			ЭтотОбъект, ОповещениеОЗавершении);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат.ДлительнаяОперация, Оповещение, ПараметрыОжидания);
		Возврат;
	КонецЕсли;

	ОбработатьРезультатПодготовкиДанныхФайла(Результат, ИдентификаторФормы);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура ОжидатьПолученияДанныхФайлаПослеДлительнойОперации(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда // Прервана
		Возврат;
	КонецЕсли; 
	
	Результат = НовыйРезультатОжиданияДанныхФайла();

	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Результат.Данные = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Результат.Успех = Истина;
	Иначе
		ВидОперации = НСтр("ru = 'Получение данных файла информации отправителя электронного документа'");
		ТекстСообщения = ?(ДлительнаяОперация = Неопределено,
			НСтр("ru = 'Не удалось получить данные файла электронного документа.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);

КонецПроцедуры

//@skip-check property-return-type, invocation-parameter-type-intersect, variable-value-type
// Параметры:
//  Результат - См. НовыйРезультатОжиданияДанныхФайла
//  ИдентификаторФормы - УникальныйИдентификатор
Процедура ОткрытьФайлИнформацииОтправителяДокументаПослеОжидания(Результат, ИдентификаторФормы) Экспорт

	Если Результат.Успех И ЗначениеЗаполнено(Результат.Данные) Тогда
		ОбработатьРезультатПодготовкиДанныхФайла(Результат.Данные, ИдентификаторФормы);
	Иначе
		ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ОткрытиеФайла

#КонецОбласти // ОбработкаКоманд

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * ОперацияПолученияДанных - Неопределено
//                           - См. ДлительныеОперации.ВыполнитьФункцию
// * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатОжиданияДанныхКомпонентовПросмотраДокумента()

	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ОперацияПолученияДанных", Неопределено);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * Данные - Неопределено
//          - См. ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
// * КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатОжиданияДанныхФайла()

	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Данные", Неопределено);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;

КонецФункции

// Параметры:
//  Результат - См. ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
//  ИдентификаторФормы - УникальныйИдентификатор
Процедура ОбработатьРезультатПодготовкиДанныхФайла(Результат, ИдентификаторФормы)
	
	Если ЗначениеЗаполнено(Результат.ДанныеФайла) Тогда
		
		ДанныеФайла = Результат.ДанныеФайла; // См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеФайлаИнформацииОтправителя
		ПолныеДанныеФайла = ДанныеФайла.ПолныеДанныеФайла; // См. РаботаСФайлами.ДанныеФайла
		Если ПолныеДанныеФайла.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОНеобходимостиСнятьПометкуУдаленияДляОткрытияФайла());
		Иначе
			ПолныеДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДанныеФайла.ДвоичныеДанные,
				ИдентификаторФормы);
			РаботаСФайламиКлиент.ОткрытьФайл(ПолныеДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
		
КонецПроцедуры

#Область ОбработкаКоманд

#Область ДополнительныеКоманды

// Электронные документы из состава пакета.
// 
// Параметры:
//  СоставПакета - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                         - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ЭлектронныеДокументыИзСоставаПакета(СоставПакета) 

	ЭлектронныеДокументы = Новый Массив; // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
	Для Каждого ДанныеПакета Из СоставПакета Цикл
		ЭлектронныеДокументы.Добавить(ДанныеПакета.ЭлектронныйДокумент);
	КонецЦикла;
	
	Возврат ЭлектронныеДокументы;

КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Организация - ОпределяемыйТип.Организация
//   ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//   ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   ** ИдентификаторОрганизации - Строка
//   ** ИдентификаторКонтрагента - Строка
//   ** ВыгружатьДополнительныеСведения - Булево
//   ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//   ** ОбменБезПодписи - Булево
//   ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//   ** ТребуетсяИзвещение - Булево
//   ** ТребуетсяПодтверждение - Булево
//   ** ФорматОсновногоТитула - Строка
//
// Возвращаемое значение:
//  См. НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки
Функция НастройкаОтправкиПоДаннымКарточкиДокумента(Форма)
	
	Настройка = НастройкиЭДОКлиентСервер.НоваяНастройкаОтправки();
	Настройка.ИдентификаторОтправителя = Форма.Объект.ИдентификаторОрганизации;
	Настройка.ИдентификаторПолучателя = Форма.Объект.ИдентификаторКонтрагента;
	Настройка.ВидДокумента = Форма.Объект.ВидДокумента;
	Настройка.ВыгружатьДополнительныеСведения = Форма.Объект.ВыгружатьДополнительныеСведения;
	Настройка.Договор = Форма.Объект.ДоговорКонтрагента;
	Настройка.МаршрутПодписания = Форма.Объект.МаршрутПодписания;
	Настройка.ОбменБезПодписи = Форма.Объект.ОбменБезПодписи;
	Настройка.Отправитель = Форма.Объект.Организация;
	Настройка.Получатель = Форма.Объект.Контрагент;
	Настройка.СпособОбмена = Форма.Объект.СпособОбмена;
	Настройка.ТребуетсяИзвещениеОПолучении = Форма.Объект.ТребуетсяИзвещение;
	Настройка.ТребуетсяОтветнаяПодпись = Форма.Объект.ТребуетсяПодтверждение;
	Настройка.ЭтоНастройкаОтправки = Истина;
	Настройка.Формат = Форма.Объект.ФорматОсновногоТитула;
	
	Возврат Настройка;
	
КонецФункции

#КонецОбласти // ДополнительныеКоманды

#Область ВыполнениеДействийПоЭДО

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИдентификаторПакета - УникальныйИдентификатор
//  НаборДействий - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ЭтоПакетнаяОбработка - Булево
Процедура ВыполнитьДействияПоЭДОИзКарточкиДокумента(Форма, НаборДействий, ЭтоПакетнаяОбработка = Ложь)
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	Если ЭтоПакетнаяОбработка И ЗначениеЗаполнено(Форма.ИдентификаторПакета) Тогда
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов.Добавить(Форма.ИдентификаторПакета);
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент,
		ДополнительныеПараметры);
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

// Параметры:
//  ПараметрыВводаСтроки - См. ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки
//  ОбработчикЗавершения - ОписаниеОповещения
Процедура ПоказатьВводСтрокиДляВыполненияДействийПоЭДО(ПараметрыВводаСтроки, ОбработчикЗавершения)
	
	ПараметрыВводаСтроки.Многострочность = Истина;
	ПараметрыВводаСтроки.Обязательность = Истина;
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(ОбработчикЗавершения, ПараметрыВводаСтроки);
	
КонецПроцедуры

// Параметры:
//  НаборДействий - Соответствие Из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
Процедура ДобавитьДействияПодписатьОтправитьПодготовитьКОтправке(НаборДействий)
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
КонецПроцедуры

// Параметры:
//  СостоянияПакетаОднородно - Булево
//  ЭтоПакетнаяОбработка - Булево
// 
// Возвращаемое значение:
//  Булево
Функция ВыполнениеДействийПоЭДОДоступноДляПакета(СостоянияПакетаОднородно, ЭтоПакетнаяОбработка)
	
	Если Не ЭтоПакетнаяОбработка
		Или СостоянияПакетаОднородно Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ВыполнениеДействийПоЭДО

#Область ОтражениеВУчете

// Возвращаемое значение:
//  Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ЭтоДокументОблачногоЭДО - Булево
//  * ЕстьНоменклатураНаКонтроле - Булево 
//  * ДокументыПакета - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИдентификаторФормы - УникальныйИдентификатор
Функция НовыеПараметрыСозданияОбъектовУчета()

	ПараметрыОтраженияВУчете = Новый Структура;
	ПараметрыОтраженияВУчете.Вставить("ЭлектронныйДокумент",
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка"));
	ПараметрыОтраженияВУчете.Вставить("ЭтоДокументОблачногоЭДО", Ложь);
	ПараметрыОтраженияВУчете.Вставить("ЕстьНоменклатураНаКонтроле", Ложь);
	ПараметрыОтраженияВУчете.Вставить("ДокументыПакета", Новый Массив);
	ПараметрыОтраженияВУчете.Вставить("ИдентификаторФормы", Новый УникальныйИдентификатор);
	Возврат ПараметрыОтраженияВУчете;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.КонтрагентБЭД
Функция НовыеПараметрыПодбораОбъектовУчета()

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЭлектронныйДокумент",
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка"));
	ПараметрыПодбора.Вставить("Организация", Неопределено);
	ПараметрыПодбора.Вставить("Контрагент", Неопределено);
	Возврат ПараметрыПодбора;
	
КонецФункции

// Параметры:
//  ПараметрыОтраженияВУчете - См. НовыеПараметрыСозданияОбъектовУчета
//  СпособыОбработкиДокументов - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Строка
Процедура СоздатьОбъектыУчета(ПараметрыОтраженияВУчете, СпособыОбработкиДокументов)

	ДлительнаяОперация = ЛегкийИнтерфейсДокументовЭДОВызовСервера.СоздатьОбъектыУчетаПоДокументамЭДОВФоне(
		СпособыОбработкиДокументов, ПараметрыОтраженияВУчете.ИдентификаторФормы);

	ПараметрыЗавершения = Новый Структура("ЭлектронныйДокумент", ПараметрыОтраженияВУчете.ЭлектронныйДокумент);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатСозданияОбъектовУчета", 
		ЭтотОбъект, ПараметрыЗавершения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ПараметрыПодбора - См. НовыеПараметрыПодбораОбъектовУчета
//  СпособОбработки - Строка
//
// Возвращаемое значение:
// - Неопределено
// - Структура:
//  * СпособОбработки - Строка
//  * ИмяОбъектаМетаданных - Строка
//  * ИмяТипаСсылки - Строка
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
Функция НастройкиПодбораОбъектаУчета(ПараметрыПодбора, СпособОбработки)

	Настройки = Новый Структура;

	ПараметрыОбъектаУчета = ЛегкийИнтерфейсДокументовЭДОВызовСервера.ПараметрыОбъектаУчетаПоСпособуОбработки(
		СпособОбработки);
	Если Не ЗначениеЗаполнено(ПараметрыОбъектаУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки.Вставить("СпособОбработки", "");
	Настройки.Вставить("ИмяОбъектаМетаданных", "");
	Настройки.Вставить("ИмяТипаСсылки", "");
	Настройки.Вставить("Организация", Неопределено);
	Настройки.Вставить("Контрагент", Неопределено);

	Настройки.СпособОбработки = СпособОбработки;
	Настройки.ИмяОбъектаМетаданных = ПараметрыОбъектаУчета.ИмяОбъектаМетаданных;
	Настройки.ИмяТипаСсылки = ПараметрыОбъектаУчета.ИмяТипаСсылки;
	Настройки.Организация = ПараметрыПодбора.Организация;
	Настройки.Контрагент = ПараметрыПодбора.Контрагент;

	Возврат Настройки;

КонецФункции

#КонецОбласти // ОтражениеВУчете

#Область Подписи

//@skip-check property-return-type, statement-type-change
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Элементы - ВсеЭлементыФормы:
//   ** Подписи - См. Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.Элементы.Подписи
//              - См. Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.Элементы.Подписи
//  * ВизуализацияТабличныйДокумент - ТабличныйДокумент
//  ОбработчикЗавершения - Неопределено,ОписаниеОповещения
Процедура ПоказатьРезультатПроверкиПодписиИзКарточкиДокумента(Форма, ОбработчикЗавершения = Неопределено)
	
	ТекущиеДанные = Форма.Элементы.Подписи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписиОбъекта = ЛегкийИнтерфейсДокументовЭДОВызовСервера.ДанныеПодписиОбъектаДляОткрытияРезультатаПроверки(
		ТекущиеДанные.ПодписанныйОбъект, ТекущиеДанные.ПорядковыйНомер);

	Если Не ЗначениеЗаполнено(ДанныеПодписиОбъекта.ДанныеПодписи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось получить данные подписи'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = МашиночитаемыеДоверенностиКлиент.НовыеПараметрыФормыРезультатовПроверкиПодписи();	
	
	ПараметрыФормы.СвойстваПодписи = ДанныеПодписиОбъекта.ДанныеПодписи.СвойстваПодписи; 
	ПараметрыФормы.СвойстваДоверенности = ДанныеПодписиОбъекта.ДанныеПодписи.СвойстваДоверенности; 
	ПараметрыФормы.РезультатПроверки = ДанныеПодписиОбъекта.ДанныеПодписи.РезультатПроверкиПоМЧД;
	
	Если ТекущиеДанные.ЭтоПодписьПоДоверенности Тогда
		
		ПараметрыФормы.ЭлектронныйДокумент = Форма.Объект.Ссылка;
		ПараметрыФормы.ПредставлениеДокумента = Форма.ВизуализацияТабличныйДокумент;
		ПараметрыФормы.ПодписанныйОбъект = ТекущиеДанные.ПодписанныйОбъект;
		ПараметрыФормы.СообщениеЭДО = ДанныеПодписиОбъекта.СообщениеЭДО;
		
	КонецЕсли;
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	ПараметрыОткрытия.Владелец = Форма;
	ПараметрыОткрытия.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ПараметрыОткрытия.ОписаниеОповещенияОЗакрытии = ОбработчикЗавершения;

	МашиночитаемыеДоверенностиКлиент.ОткрытьРезультатыПроверкиПодписи(ПараметрыФормы, ПараметрыОткрытия);
	
КонецПроцедуры

//@skip-check property-return-type, variable-value-type, invocation-parameter-type-intersect
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Элементы - ВсеЭлементыФормы:
//   ** Подписи - См. Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.Элементы.Подписи
//              - См. Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс.Элементы.Подписи
Процедура ПоказатьДоверенностьИзКарточкиДокумента(Форма)

	ТекущиеДанные = Форма.Элементы.Подписи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодписанныйОбъект = ТекущиеДанные.ПодписанныйОбъект; // СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
	ДанныеПодписиОбъекта = ЛегкийИнтерфейсДокументовЭДОВызовСервера.ДанныеПодписиОбъектаДляОткрытияРезультатаПроверки(
		ПодписанныйОбъект, ТекущиеДанные.ПорядковыйНомер);

	Если Не ЗначениеЗаполнено(ДанныеПодписиОбъекта.ДанныеПодписи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось получить данные подписи'"));
		Возврат;
	КонецЕсли;

	РезультатПроверкиПоМЧД = ДанныеПодписиОбъекта.ДанныеПодписи.РезультатПроверкиПоМЧД; // Неопределено,См. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи

	Если РезультатПроверкиПоМЧД <> Неопределено 
		И ЗначениеЗаполнено(РезультатПроверкиПоМЧД.Доверенность) Тогда
		ПоказатьЗначение(, РезультатПроверкиПоМЧД.Доверенность);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // Подписи

#КонецОбласти // ОбработкаКоманд

#КонецОбласти // СлужебныеПроцедурыИФункции
