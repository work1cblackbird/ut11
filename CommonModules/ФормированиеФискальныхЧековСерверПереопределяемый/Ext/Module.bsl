#Область ПрограммныйИнтерфейс

// Определяет структуру параметров для печати чеков, заполняет параметры значениями по-умолчанию
//
// Возвращаемое значение:
// 	Структура - Структура параметров:
//	* ДокументСсылка - ДокументСсылка, Неопределено - 
//	* Организация - СправочникСсылка.Организации, Неопределено - 
//	* Контрагент - СправочникСсылка.Контрагенты, Неопределено - 
//	* Партнер - СправочникСсылка.Партнеры, Неопределено - 
//	* ТорговыйОбъект - СправочникСсылка.Склады, Неопределено - 
//	* Валюта - СправочникСсылка.Валюты, Неопределено - 
//	* ВалютаВзаиморасчетов - СправочникСсылка.Валюты, Неопределено - 
//	* СуммаДокумента - Число, Неопределено -
//	* ИмяКомандыПробитияЧека - Строка, Неопределено - 
//	* ИмяРеквизитаГиперссылкиНаФорме - Строка, Неопределено - 
//	* ОплатаВыполнена - Булево, Неопределено - 
//	* ПараметрыЭквайринговойОперации - См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков
Функция СтруктураОсновныхПараметровОперации() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Неопределено);
	СтруктураПараметров.Вставить("Организация", Неопределено);
	СтруктураПараметров.Вставить("Контрагент", Неопределено);
	СтруктураПараметров.Вставить("Партнер", Неопределено);
	СтруктураПараметров.Вставить("ТорговыйОбъект", Неопределено);
	СтруктураПараметров.Вставить("Валюта", Неопределено);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", Неопределено);
	СтруктураПараметров.Вставить("СуммаДокумента", Неопределено);
	СтруктураПараметров.Вставить("ИмяКомандыПробитияЧека", Неопределено);
	СтруктураПараметров.Вставить("ИмяРеквизитаГиперссылкиНаФорме", Неопределено);
	СтруктураПараметров.Вставить("ОплатаВыполнена", Неопределено);
	СтруктураПараметров.Вставить("ПараметрыЭквайринговойОперации", Новый Структура());
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры по документу для формирования формы предпросмотра чека
// 
// Параметры:
// 	ПараметрыОперации - Структура - Основные параметры документа
// Возвращаемое значение:
// 	Структура - параметры по документу для формирования формы предпросмотра чека
Функция ПараметрыПредпросмотраЧека(ПараметрыОперации) Экспорт
	
	ПараметрыПредпросмотраЧека = Новый Структура;
	
	// ПроверитьЗавершениеОбработчиковОбновления
	ВзаиморасчетыОбновлены = ВзаиморасчетыОбновлены();
	ПараметрыПредпросмотраЧека.Вставить(
		"ВзаиморасчетыОбновлены",
		ВзаиморасчетыОбновлены());
	
	// ОбновитьВзаиморасчеты
	ОбновитьВзаиморасчеты(
		ПараметрыОперации,
		ВзаиморасчетыОбновлены);
	
	// ПараметрыЕдиногоЧека
	ПараметрыПредпросмотраЧека.Вставить(
		"ДокументыЕдиногоЧека",
		ПараметрыЕдиногоЧека(ПараметрыОперации));
	
	// СуммаПредоплатыВРамкахОдногоДня
	ПараметрыПредпросмотраЧека.Вставить(
		"СуммаПредоплатыВРамкахОдногоДня",
		 ПредоплатаПоДокументуПоставкиВРамкахОдногоДня(ПараметрыОперации.ДокументСсылка));
	
	// ОбъектыРасчетовПоДокументу
	ОбъектыРасчетовПоДокументу = ОбъектыРасчетовПоДокументу(ПараметрыОперации);
	ПараметрыПредпросмотраЧека.Вставить(
		"ОбъектыРасчетовПоДокументу",
		ОбъектыРасчетовПоДокументу);
	
	// ПризнакиСпособаРасчетаАвто
	ПризнакиСпособаРасчетаАвто = ПризнакиСпособаРасчетаАвто(
		ПараметрыОперации,
		ОбъектыРасчетовПоДокументу,
		ВзаиморасчетыОбновлены);
	ПараметрыПредпросмотраЧека.Вставить(
		"ПризнакиСпособаРасчетаАвто",
		ПризнакиСпособаРасчетаАвто);
	
	// ДанныеФискальнойОперации
	ДанныеФискальнойОперации = ДанныеФискальнойОперации();
	ПараметрыПредпросмотраЧека.Вставить(
		"ДанныеФискальнойОперации",
		ДанныеФискальнойОперации);

	// ПараметрыФискальногоЧека
	ПараметрыПредпросмотраЧека.Вставить(
		"ПараметрыОперацииФискализацииЧека",
		ПараметрыОперацииФискализацииЧека(ПараметрыОперации));
		
	// ПараметрыПерсональныхДанныхПокупателя
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных = Новый Структура;
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных.Вставить(
		"ЕдиныйЧек",
		ПараметрыПредпросмотраЧека.ПараметрыОперацииФискализацииЧека.ЕдиныйЧек);
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных.Вставить(
		"ДокументСсылка",
		ПараметрыПредпросмотраЧека.ПараметрыОперацииФискализацииЧека.ДокументОснование);
	ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных.Вставить(
		"Контрагент",
		ПараметрыОперации.Контрагент);	
	ПараметрыПредпросмотраЧека.Вставить(
		"РазрешенВводПерсональныхДанных",
		РазрешенВводПерсональныхДанных(ПараметрыПроверкиРазрешенияНаВводПерсональныхДанных));
	
	// ПраваДоступа
	ПараметрыПредпросмотраЧека.Вставить(
		"ПраваДоступа",
		ПраваДоступа());
	
	Возврат ПараметрыПредпросмотраЧека;
	
КонецФункции

// Возвращает статус работы документа с эквайринговым оборудованием
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, проверяемый на возможность работы с эквайринговым оборудованием
// Возвращаемое значение:
// 	Булево - Статус работы документа с эквайринговым оборудованием
Функция ПредполагаетсяПодключениеЭквайринговогоТерминалаПоДокументу(ДокументСсылка) Экспорт
	
	ПредполагаетсяПодключениеЭквайринговогоТерминалаПоДокументу = Ложь;
	
	//++ Локализация
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		ПредполагаетсяПодключениеЭквайринговогоТерминалаПоДокументу =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДоговорЭквайринга.ИспользуютсяЭквайринговыеТерминалы");
	КонецЕсли;
	//-- Локализация
	
	Возврат ПредполагаетсяПодключениеЭквайринговогоТерминалаПоДокументу;
	
КонецФункции

// Определяет дату операции чека коррекции по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Корректируемый документ
// Возвращаемое значение:
// 	Дата - Дата операции чека коррекции по документу
Функция ДатаСовершенияКорректируемогоРасчета(ДокументСсылка) Экспорт
	
	ДатаКоррекции = ТекущаяДатаСеанса();
	
	//++ Локализация
	ИмяРеквизитаДата = "Дата";
	ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, ИмяРеквизитаДокументОснование);
		ДатаКоррекции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, ИмяРеквизитаДата);
	Иначе
		ДатаКоррекции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, ИмяРеквизитаДата);
	КонецЕсли;
	//-- Локализация
	
	Возврат ДатаКоррекции;
	
КонецФункции

// Определяет типы видов фискальных чеков по документы
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ пробития фискального чека
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	Массив Из ПеречислениеСсылка.ТипыФискальныхДокументовККТ - Типы фискальных чеков
Функция ТипыФискальногоДокумента(ДокументСсылка, ИмяКомандыПробитияЧека) Экспорт
	
	ТипыФискальногоДокумента = Новый Массив;
	
	//++ Локализация
	ВидыВозможныхФискальныхЧеков = ПараметрыВидовФискальногоЧека(ДокументСсылка, ИмяКомандыПробитияЧека);
	ТипыФискальногоДокумента = ОбщегоНазначения.ВыгрузитьКолонку(ВидыВозможныхФискальныхЧеков, "ТипФискальногоДокумента", Истина);
	//-- Локализация
	
	Возврат ТипыФискальногоДокумента;
	
КонецФункции

// Определяет типы расчета денежными средствами по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ пробития фискального чека
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// 	ТипФискальногоДокумента - ПеречислениеСсылка.ТипыФискальныхДокументовККТ - Тип фискального документа
// Возвращаемое значение:
// 	Массив Из ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - Типы расчета денежными средствами
Функция ТипыРасчетаДенежнымиСредствами(ДокументСсылка, ИмяКомандыПробитияЧека, ТипФискальногоДокумента) Экспорт
	
	ТипыРасчетаДенежнымиСредствами = Новый Массив;
	
	//++ Локализация
	ТЗВидыВозможныхФискальныхЧеков = ПараметрыВидовФискальногоЧека(ДокументСсылка, ИмяКомандыПробитияЧека);
	ТЗВидыВозможныхФискальныхЧеков.Свернуть("ТипФискальногоДокумента, ТипРасчетаДенежнымиСредствами");
	
	СтруктураОтбора = Новый Структура("ТипФискальногоДокумента", ТипФискальногоДокумента);
	МассивСтрокТЗВидыВозможныхФискальныхЧеков = ТЗВидыВозможныхФискальныхЧеков.НайтиСтроки(СтруктураОтбора);
	
	ТипыРасчетаДенежнымиСредствами = ОбщегоНазначения.ВыгрузитьКолонку(
		МассивСтрокТЗВидыВозможныхФискальныхЧеков,
		"ТипРасчетаДенежнымиСредствами",
		Истина);
	//-- Локализация
	
	Возврат ТипыРасчетаДенежнымиСредствами;
	
КонецФункции

// Определяет виды чека коррекции по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ пробития фискального чека
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	Массив Из ПеречислениеСсылка.ВидыЧековКоррекции - Виды чека коррекции
Функция ВидыЧекаКоррекции(ДокументСсылка, ИмяКомандыПробитияЧека) Экспорт
	
	ВидыЧекаКоррекции = Новый Массив;
	
	//++ Локализация
	ВидыВозможныхФискальныхЧеков = ПараметрыВидовФискальногоЧека(ДокументСсылка, ИмяКомандыПробитияЧека);
	
	ВидыЧекаКоррекции = ОбщегоНазначения.ВыгрузитьКолонку(ВидыВозможныхФискальныхЧеков, "ВидЧекаКоррекции", Истина);
	Если НЕ ВидыЧекаКоррекции.Найти(Перечисления.ВидыЧековКоррекции.ПустаяСсылка()) = Неопределено Тогда
		ВидыЧекаКоррекции.Удалить(ВидыЧекаКоррекции.Найти(Перечисления.ВидыЧековКоррекции.ПустаяСсылка()));
	КонецЕсли;
	//-- Локализация
	
	Возврат ВидыЧекаКоррекции;
	
КонецФункции

// Формирует таблицу объектов расчетов с признаками способа расчетов по каждому объекту для формирования позиции чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ пробития фискального чека
// 	ВозможныеПризнакиСпособаРасчетаПоДокументу - ТаблицаЗначений - Возможные признаки способа расчета по документу
// 	ПризнакиСпособаРасчетаАвто - ТаблицаЗначений - Признаки способа расчета по взаиморасчетам с контрагентом
// 	ПризнакСпособаРасчета - ПеречислениеСсылка.ПризнакиСпособаРасчета - Выбранный признак способа расчета
// 	ОбъектыРасчетов - ТаблицаЗначений - Объекты расчетов по документу
// 	СуммаДокумента - Число - Сумма документа
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица объектов расчетов с признаками способа расчетов по каждому объекту:
//	* ОбъектРасчетов - ДокументСсылка, СправочникСсылка - 
//	* ПризнакСпособаРасчета - ПеречислениеСсылка.ПризнакиСпособаРасчета - 
//	* Сумма - Число - 
Функция ОбъектыРасчетовСПризнакамиСпособаРасчетов(ДокументСсылка, ВозможныеПризнакиСпособаРасчетаПоДокументу, ПризнакиСпособаРасчетаАвто, ПризнакСпособаРасчета, ОбъектыРасчетов, СуммаДокумента, СуммаПредоплатыВРамкахОдногоДня) Экспорт
	
	ТипыОбъектовРасчетов = Документы.ТипВсеСсылки().Типы();
	ТипыОбъектовРасчетов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ТипыОбъектовРасчетов.Добавить(Тип("СправочникСсылка.ПодарочныеСертификаты"));
	
	ОбъектыРасчетовСПризнакамиСпособаРасчетов = Новый ТаблицаЗначений;
	ОбъектыРасчетовСПризнакамиСпособаРасчетов.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов(Новый ОписаниеТипов, ТипыОбъектовРасчетов));
	ОбъектыРасчетовСПризнакамиСпособаРасчетов.Колонки.Добавить("ПризнакСпособаРасчета", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("ПеречислениеСсылка.ПризнакиСпособаРасчета")));
	ОбъектыРасчетовСПризнакамиСпособаРасчетов.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Число")));
	
	//++ Локализация
	Если ПризнакСпособаРасчета = "<Авто>" Тогда
		
		Если ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
			
			Если ПризнакиСпособаРасчетаАвто.Количество() > 0 Тогда
			
				Для Каждого ПризнакСпособаРасчетаАвто Из ПризнакиСпособаРасчетаАвто Цикл
					
					Если ВзаиморасчетыПоОбъектуАванс(ПризнакСпособаРасчетаАвто.ОбъектРасчета, ПризнакСпособаРасчетаАвто.ДокументРасчета) Тогда
						
						ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
						ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов        = ПризнакСпособаРасчетаАвто.ОбъектРасчета;
						ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
						ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма                 = ПризнакСпособаРасчетаАвто.Оплата;
						
						Продолжить;
					КонецЕсли;
	
					Если ВзаиморасчетыПоОбъектуПредоплата(ПризнакСпособаРасчетаАвто.ОбъектРасчета, ПризнакСпособаРасчетаАвто.ДокументРасчета) Тогда
						
						ДанныеПоСпособуРасчета = ОпределитьВидПредоплатыПоВзаиморасчетам(
							ПризнакСпособаРасчетаАвто.ОбъектРасчета,
							ПризнакСпособаРасчетаАвто.Оплата,
							ПризнакиСпособаРасчетаАвто);
						
						ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
						ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов        = ПризнакСпособаРасчетаАвто.ОбъектРасчета;
						ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = ДанныеПоСпособуРасчета.ПризнакСпособаРасчета;
						ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма                 = ПризнакСпособаРасчетаАвто.Оплата;
						
						Если ДанныеПоСпособуРасчета.СуммаПереплаты > 0 Тогда
							ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма
								 = ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма - ДанныеПоСпособуРасчета.СуммаПереплаты;
							
							ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
							ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов        = ПризнакСпособаРасчетаАвто.ОбъектРасчета;
							ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
							ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма                 = ДанныеПоСпособуРасчета.СуммаПереплаты;
						КонецЕсли;
						
						Продолжить;
					КонецЕсли;
					
					Если ВзаиморасчетыПоОбъектуОплатаКредита(ПризнакСпособаРасчетаАвто.ОбъектРасчета, ПризнакСпособаРасчетаАвто.ДокументРасчета) Тогда
						Если Не ТипЗнч(ПризнакСпособаРасчетаАвто.ДокументРасчета) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
							ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
							ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов        = ПризнакСпособаРасчетаАвто.ДокументРасчета;
							ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
							ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма                 = ПризнакСпособаРасчетаАвто.Оплата;
						Иначе
							ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
							ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов        = ПризнакСпособаРасчетаАвто.ОбъектРасчета;
							ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
							ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма                 = ПризнакСпособаРасчетаАвто.Оплата;
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
				ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов 		  = ДокументСсылка;
				ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = ВозможныеПризнакиСпособаРасчетаПоДокументу[1];
				ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма		 		  = СуммаДокумента;
				
			КонецЕсли;
			
		Иначе
			
			ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
			ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов 		  = ДокументСсылка;
			ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета
				 = РассчитатьПоВзаиморасчетамПризнакСпособаРасчетаДокументаПоставки(
				 		ПризнакиСпособаРасчетаАвто,
				 		СуммаПредоплатыВРамкахОдногоДня);
			ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма		 		  = СуммаДокумента;
			
		КонецЕсли;
		
	Иначе
		
		Если ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
		
			Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс И ОбъектыРасчетов.Количество() = 0 Тогда
				
				ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
				ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов 		  = ДокументСсылка;
				ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
				ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма				  = СуммаДокумента;
				
			ИначеЕсли ВозможныеПризнакиСпособаРасчетаПоДокументу.Количество() = 1 Тогда
				
				Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл
					ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
					ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов 		  = ОбъектРасчетов.Заказ;
					ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = ВозможныеПризнакиСпособаРасчетаПоДокументу[0];
					ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма				  = ОбъектРасчетов.Сумма;
				КонецЦикла;
				
			Иначе

				Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл

					ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
					ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов 		  = ОбъектРасчетов.Заказ;
					ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
					ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма				  = ОбъектРасчетов.Сумма;

					Если Не ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
						ДанныеПоСпособуРасчета = ОпределитьВидПредоплатыПоВзаиморасчетам(
						ОбъектРасчетов.Заказ,
						ОбъектРасчетов.Сумма,
						ПризнакиСпособаРасчетаАвто);
												
						Если ДанныеПоСпособуРасчета.СуммаПереплаты > 0 Тогда
							
							Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
								ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;	
							КонецЕсли;

							ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма
							= ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма - ДанныеПоСпособуРасчета.СуммаПереплаты;
							
							ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
							ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов        = ОбъектРасчетов.Заказ;
							ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
							ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма                 = ДанныеПоСпособуРасчета.СуммаПереплаты;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ОбъектРасчетовСПризнакомСпособаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
			ОбъектРасчетовСПризнакомСпособаРасчетов.ОбъектРасчетов 		  = ДокументСсылка;
			ОбъектРасчетовСПризнакомСпособаРасчетов.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
			ОбъектРасчетовСПризнакомСпособаРасчетов.Сумма				  = СуммаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектыРасчетовСПризнакамиСпособаРасчетов.Свернуть("ОбъектРасчетов, ПризнакСпособаРасчета", "Сумма");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыРасчетовСПризнакамиСпобораРасчета.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОбъектыРасчетовСПризнакамиСпобораРасчета.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета,
	|	ОбъектыРасчетовСПризнакамиСпобораРасчета.Сумма КАК Сумма
	|ПОМЕСТИТЬ ОбъектыРасчетовСПризнакамиСпобораРасчета
	|ИЗ
	|	&ОбъектыРасчетов КАК ОбъектыРасчетовСПризнакамиСпобораРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
	|	КорректировкаРеализации.Ссылка КАК ДокументКоррекции,
	|	ОбъектыРасчетовСПризнакамиСпобораРасчета.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета,
	|	ВЫБОР
	|		КОГДА &ДокументОплаты = ИСТИНА
	|			ТОГДА ОбъектыРасчетовСПризнакамиСпобораРасчета.Сумма
	|		ИНАЧЕ КорректировкаРеализации.СуммаДокумента
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	ОбъектыРасчетовСПризнакамиСпобораРасчета КАК ОбъектыРасчетовСПризнакамиСпобораРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО ОбъектыРасчетовСПризнакамиСпобораРасчета.ОбъектРасчетов = КорректировкаРеализации.ДокументОснование
	|			И КорректировкаРеализации.Проведен = ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРеализации.Дата УБЫВ";
	Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетовСПризнакамиСпособаРасчетов);
	Запрос.УстановитьПараметр("ДокументОплаты", ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка));
	
	ДокументыКоррекцииОбъектовРасчетов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДанныеДокументаКоррекции Из ДокументыКоррекцииОбъектовРасчетов Цикл
		МассивСтрокОбъектовРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.НайтиСтроки(Новый Структура("ОбъектРасчетов", ДанныеДокументаКоррекции.ДокументОснование));
		Для Каждого СтрокаОбъектаРасчетов Из МассивСтрокОбъектовРасчетов Цикл
			ОбъектыРасчетовСПризнакамиСпособаРасчетов.Удалить(СтрокаОбъектаРасчетов);
		КонецЦикла;
		
		СтрокаОбъектаРасчетов = ОбъектыРасчетовСПризнакамиСпособаРасчетов.Добавить();
		СтрокаОбъектаРасчетов.ОбъектРасчетов = ДанныеДокументаКоррекции.ДокументКоррекции;
		СтрокаОбъектаРасчетов.ПризнакСпособаРасчета = ДанныеДокументаКоррекции.ПризнакСпособаРасчета;
		СтрокаОбъектаРасчетов.Сумма = ДанныеДокументаКоррекции.Сумма;
	КонецЦикла;
	//-- Локализация
	
	Возврат ОбъектыРасчетовСПризнакамиСпособаРасчетов;
	
КонецФункции

// Определяет, является ли документ документом оплаты с возможностью пробития чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Проверяемый документ
// Возвращаемое значение:
// 	Булево - флаг, является ли документ документом оплаты с возможностью пробития чека, да = истина, нет = ложь
Функция ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка) Экспорт
	
	ДокументОплатыСВозможностьюПробитияЧеков = Ложь;
	
	//++ Локализация
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов") Тогда
		ДокументОплатыСВозможностьюПробитияЧеков = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ДокументОплатыСВозможностьюПробитияЧеков;
	
КонецФункции

// Определяет, является ли документ документом поставки с возможностью пробития чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Проверяемый документ
// Возвращаемое значение:
// 	Булево - флаг, является ли документ документом поставки с возможностью пробития чека, да = истина, нет = ложь
Функция ДокументПоставкиСВозможностьюПробитияЧеков(ДокументСсылка) Экспорт
	
	ДокументПоставкиСВозможностьюПробитияЧеков = Ложь;
	
	//++ Локализация
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ДокументПоставкиСВозможностьюПробитияЧеков = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ДокументПоставкиСВозможностьюПробитияЧеков;
	
КонецФункции

// Определяет, является ли объект расчетов авансовым
// 
// Параметры:
// 	ОбъектРасчетов - СправочникСсылка, ДокументСсылка - объект расчета документа оплаты
// Возвращаемое значение:
// 	Булево - флаг, является ли объект расчета авансовым, да = истина, нет = ложь
Функция ОбъектРасчетовАвансовый(ОбъектРасчетов) Экспорт
	
	ОбъектРасчетовАвансовый = Ложь;
	
	//++ Локализация
	Если ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ОбъектРасчетовАвансовый = Истина;
	ИначеЕсли ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ОбъектРасчетовАвансовый = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбъектРасчетовАвансовый;
	
КонецФункции

// Определяет, является ли объект расчетов предоплатным
// 
// Параметры:
// 	ОбъектРасчетов - ДокументСсылка - объект расчета документа оплаты
// Возвращаемое значение:
// 	Булево - флаг, является ли объект расчета предоплатным, да = истина, нет = ложь
Функция ОбъектРасчетовПредоплатный(ОбъектРасчетов) Экспорт
	
	ОбъектРасчетовПредоплатный = Ложь;
	
	//++ Локализация
	Если ТипЗнч(ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ОбъектРасчетовПредоплатный = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбъектРасчетовПредоплатный;
	
КонецФункции

// Определяет платежный документ по документу поставки товаров/услуг. Если платежных документов больше одного или
// не было платежей по документу, возвращается Неопределено.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ поставки
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДокументОплатыПоДокументуПоставкиВРамкахЕдиногоЧека(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОплатыПоДокументуПоставки = Новый Массив;
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.ОснованиеПлатежа = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)))
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.Ссылка.ДокументОснование = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента)))
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.ОснованиеПлатежа = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)))
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОплатыПоДокументуПоставки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//-- Локализация
	
	Возврат ДокументОплатыПоДокументуПоставки;
	
КонецФункции

// Определяет документ поставки товаров/услуг по документу оплаты. Если документов поставки больше одного или
// не было поставки по документу, возвращается Неопределено.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ Оплаты
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДокументПоставкиПоДокументуОплатыВРамкахЕдиногоЧека(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОплатыПоДокументуПоставки = Новый Массив;
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументОплаты.ОбъектРасчетов.Объект КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Сумма) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	ДокументОплаты.Ссылка = &ДокументСсылка
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.ОбъектРасчетов.Объект,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.ОснованиеПлатежа КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Сумма) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	ДокументОплаты.Ссылка = &ДокументСсылка
	|		И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.ОснованиеПлатежа,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.ОбъектРасчетов.Объект КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Сумма) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	ДокументОплаты.Ссылка = &ДокументСсылка
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.ОбъектРасчетов.Объект,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.Ссылка.ДокументОснование КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	ДокументОплаты.Ссылка = &ДокументСсылка
	|		И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка.ДокументОснование,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.ОбъектРасчетов.Объект КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Сумма) КАК СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	ДокументОплаты.Ссылка = &ДокументСсылка
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.ОбъектРасчетов.Объект,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.ОснованиеПлатежа КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Сумма) КАК СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	ДокументОплаты.Ссылка = &ДокументСсылка
	|		И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.ОснованиеПлатежа,
	|	ДокументОплаты.Ссылка.Дата";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ДокументПоставкиСВозможностьюПробитияЕдиногоЧека(Выборка.Ссылка) Тогда
			ДокументОплатыПоДокументуПоставки.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
	
	Возврат ДокументОплатыПоДокументуПоставки;
	
КонецФункции

// Определяет платежный документ по документу поставки товаров/услуг. Если платежных документов больше одного или
// не было платежей по документу, возвращается Неопределено.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ поставки
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДокументОплатыПоДокументуПоставкиВРамкахОдногоДня(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОплатыПоДокументуПоставки = Новый Массив;
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.ОснованиеПлатежа = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)))
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.Ссылка.ДокументОснование = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента)))
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.ОснованиеПлатежа = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)))
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОплаты.Ссылка КАК Ссылка,
	|	ДокументОплаты.Ссылка.Дата КАК Дата,
	|	СУММА(ДокументОплаты.Ссылка.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДокументОплаты
	|ГДЕ
	|	(ДокументОплаты.ОбъектРасчетов.Объект = &ДокументСсылка
	|		ИЛИ (ДокументОплаты.ОснованиеПлатежа = &ДокументСсылка
	|			И ТИПЗНАЧЕНИЯ(ДокументОплаты.ОбъектРасчетов.Объект) = ЗНАЧЕНИЕ(Документ.ЗаказКлиента)))
	|	И ДокументОплаты.Ссылка.ПроведеноБанком
	|	И ДокументОплаты.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДокументОплаты.Ссылка,
	|	ДокументОплаты.Ссылка.Дата";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОплатыПоДокументуПоставки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//-- Локализация
	
	Возврат ДокументОплатыПоДокументуПоставки;
	
КонецФункции

// Обновляет параметры операции фискализации чека
// 
// Параметры:
// 	ПараметрыОперацииЧека - Структура - Данные для формирования параметров операции фискализации чека
// 	ВерсияФФД - Строка - Версия ФФД
// Возвращаемое значение:
// 	Структура - См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека
Функция ОбновитьПараметрыФискальногоЧека(ПараметрыОперацииЧека, ВерсияФФД) Экспорт
	
	ПараметрыОперацииФискализацииЧека = ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧека(
		ПараметрыОперацииЧека.ДокументСсылка,
		ПараметрыОперацииЧека.Организация);
	
	//++ Локализация
	ПараметрыОперацииФискализацииЧека.Вставить("ВерсияФФД", ВерсияФФД);
	Если ПараметрыОперацииЧека.Свойство("ОборудованиеККТ") Тогда
		ПараметрыОперацииФискализацииЧека.Вставить("ИдентификаторУстройства", ПараметрыОперацииЧека.ОборудованиеККТ);
	Иначе
		ПараметрыОперацииФискализацииЧека.Вставить("ИдентификаторУстройства", Неопределено);
	КонецЕсли;
	
	ОбновитьПараметрыФискальногоЧекаДокументОснование(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	ОбновитьПараметрыФискальногоЧекаТипРасчета(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	ОбновитьПараметрыФискальногоЧекаСерийныйНомерОборудования(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	ОбновитьПараметрыФискальногоЧекаЕдиныйЧек(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	ОбновитьПараметрыФискальногоЧекаПокупателя(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	
	ОбновитьПараметрыФискальногоЧекаМестоРасчетов(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	
	ОбновитьПараметрыФискальногоЧекаПараметрыОтправкиЭлектронногоЧека(
		ПараметрыОперацииФискализацииЧека,
		ПараметрыОперацииЧека);
	
	ОбновитьПараметрыФискальногоЧекаПерсональныеДанные(
		ПараметрыОперацииФискализацииЧека,
		ПараметрыОперацииЧека,
		ВерсияФФД);
	
	ОбновитьПараметрыФискальногоЧекаПризнакСпособаРасчетаПозицийЧека(
		ПараметрыОперацииФискализацииЧека,
		ПараметрыОперацииЧека);
	ОбновитьПараметрыФискальногоЧекаТаблицаОплат(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	
	ОбновитьПараметрыФискальногоЧекаПараметрыКоррекции(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
	
	ИмяРеквизитаТипОборудования = "ТипОборудования";
	ТипОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыОперацииЧека.ОборудованиеККТ,
		ИмяРеквизитаТипОборудования);
	
	Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(
			ПараметрыОперацииФискализацииЧека,
			ПараметрыОперацииЧека.ОборудованиеККТ);
	КонецЕсли;
	//-- Локализация
	
	Возврат ПараметрыОперацииФискализацииЧека;
	
КонецФункции

// Формирует текст нефискального чека по шаблону.
// 
// Параметры:
// 	ПараметрыОперацииФискализацииЧека - Структура - Параметры операции фискализации чека
// 	ВерсияФФД - Строка - Версия ФФД, по которой формируется текст чека
// Возвращаемое значение:
// 	Строка - Текст нефискального чека по шаблону
Функция ОбновитьМакетЧека(ПараметрыОперацииФискализацииЧека, ВерсияФФД) Экспорт
	
	ТекстНефискальногоЧека = "";
	
	//++ Локализация
	Если ПараметрыОперацииФискализацииЧека = Неопределено
		ИЛИ ТипЗнч(ПараметрыОперацииФискализацииЧека) <> Тип("Структура") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ТекстНефискальногоЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.СформироватьТекстНефискальногоЧека(
		ПараметрыОперацииФискализацииЧека,
		34,
		ВерсияФФД);
	//-- Локализация
	
	Возврат ТекстНефискальногоЧека;
	
КонецФункции

// Возвращает массив возможных признаков способа расчета документа
// 
// Параметры:
//  ПризнакиСпособаРасчета - Массив Из ПеречислениеСсылка.ПризнакиСпособаРасчета - Признак способа расчета для документа, возвращаемое значение
// 	ДокументСсылка - ДокументСсылка - Документ
// 	ОбъектыРасчетов - СправочникСсылка, ДокументСсылка - Объекты расчетов документа 
// 	ТипРасчетаДенежнымиСредствами - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - тип расчета денежными средствами
// 	СуммаДокумента - Число - Сумма документа
Процедура ВидыВозможныхПризнаковСпособаРасчетаПоДокументу(ПризнакиСпособаРасчета, ДокументСсылка, ОбъектыРасчетов, ТипРасчетаДенежнымиСредствами, СуммаДокумента) Экспорт
	
	//++ Локализация
	ВзаиморасчетыОбновлены = ВзаиморасчетыОбновлены();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		Если ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств
			ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
			
			Если ОплатаПодарочнымСертификатом(ДокументСсылка)
				И ПоВсемОбъектамРасчетовНеобходимоПробитьЧек(ОбъектыРасчетов) Тогда
					
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
				Иначе
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
				КонецЕсли;
			
			ИначеЕсли ОбъектыРасчетовДокументаПредоплатные(ОбъектыРасчетов) Тогда
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
				Иначе
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
				КонецЕсли;
			Иначе
				ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ОплатаКредита);
			КонецЕсли;
			
		ИначеЕсли ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			
			Если ОбъектыРасчетовДокументаАвансовые(ОбъектыРасчетов) Тогда
				ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.Аванс);
			Иначе
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
				Иначе
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ (ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств
			ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств) Тогда
			
			Если ВзаиморасчетыОбновлены Тогда
				ПризнакиСпособаРасчета.Добавить("<Авто>");
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
			
			Если ОбъектыРасчетовДокументаАвансовые(ОбъектыРасчетов) Тогда
				ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.Аванс);
			Иначе
				
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная);
				Иначе
					ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная);
				КонецЕсли;
				
				ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ОплатаКредита);
			КонецЕсли;
			
		Иначе
			ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
			ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
			Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ПризнакиСпособаРасчета.Добавить(Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Возвращает массив возможных признаков способа расчета документа
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ
// 	ОбъектыРасчетов - СправочникСсылка, ДокументСсылка - Объекты расчетов документа 
// 	ТипРасчетаДенежнымиСредствами - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами - тип расчета денежными средствами
// 	СуммаДокумента - Число - Сумма документа
// Возвращаемое значение:
// 	ПеречислениеСсылка.ПризнакиСпособаРасчета - Массив возможных признаков способа расчета документа
Функция ПризнакСпособаРасчетаПоУмолчанию(ДокументСсылка, ОбъектыРасчетов, ТипРасчетаДенежнымиСредствами, СуммаДокумента) Экспорт
	
	ПризнакСпособаРасчетаПоУмолчанию = Перечисления.ПризнакиСпособаРасчета.ПустаяСсылка();
	
	//++ Локализация
	ВзаиморасчетыОбновлены = ВзаиморасчетыОбновлены();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		
		Если ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств
			ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
			
			Если ОплатаПодарочнымСертификатом(ДокументСсылка)
				И ПоВсемОбъектамРасчетовНеобходимоПробитьЧек(ОбъектыРасчетов) Тогда
					
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
				Иначе
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
				КонецЕсли;
			
			ИначеЕсли ОбъектыРасчетовДокументаПредоплатные(ОбъектыРасчетов) Тогда
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
				Иначе
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
				КонецЕсли;
			Иначе
				Возврат Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
			КонецЕсли;
			
		ИначеЕсли ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			
			Если ОбъектыРасчетовДокументаАвансовые(ОбъектыРасчетов) Тогда
				Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
			Иначе
				Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
					
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
				Иначе
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ (ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств
			ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств) Тогда
			
			Если ВзаиморасчетыОбновлены Тогда
				Возврат "<Авто>";
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
			
			Если ОбъектыРасчетовДокументаАвансовые(ОбъектыРасчетов) Тогда
				Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
			Иначе
				
				Если ДатаОплатыБольшеДатыПоставки(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ НЕ ВзаиморасчетыОбновлены Тогда
					
					Возврат Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
					
				КонецЕсли;
					
				Если ДатаОплатыМеньшеДатыПоставки(ДокументСсылка, ОбъектыРасчетов)
					ИЛИ ПоДокументуОплатыПробитЧек(ДокументСсылка)
					ИЛИ НЕ ПоВсемОбъектамРасчетовНеобходимоПробитьЧек(ОбъектыРасчетов)
					ИЛИ ОбъектыРасчетовРТУКПредоплате(ОбъектыРасчетов)
					ИЛИ НЕ ВзаиморасчетыОбновлены
					ИЛИ ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
					
					Если СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
						ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
						
						Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
					Иначе
						
						Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
					КонецЕсли;
				Иначе
					
					Если ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
						
						Возврат Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
					ИначеЕсли СуммаОплатыБольшеСуммыПоставок(ДокументСсылка, ОбъектыРасчетов)
						ИЛИ СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов) Тогда
						
						Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
					Иначе
						
						Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат ПризнакСпособаРасчетаПоУмолчанию;
	
КонецФункции

// Возвращает поддерживаемую максимальную версию ФФД
// 
// Возвращаемое значение:
// 	Строка - Описание - Версия ФФД
Функция МаксимальнаяВерсияФФД() Экспорт

	МаксимальнаяВерсияФФД = "";
	
	//++ Локализация
	ПоддерживаемыеФорматыФФД = ПолучитьПоддерживаемыйФорматыФФД();

	Если ПоддерживаемыеФорматыФФД.Количество() > 0 Тогда
		МаксимальнаяВерсияФФД = ПоддерживаемыеФорматыФФД[ПоддерживаемыеФорматыФФД.Количество() - 1].Значение;
	КонецЕсли;
	//-- Локализация
	
	Возврат МаксимальнаяВерсияФФД;

КонецФункции

// Возвращает версию ФФД, поддерживаемую оборудованием
// 
// Параметры:
// 	ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - ККТ
// Возвращаемое значение:
// 	Строка - Версия ФФД, поддерживаемую оборудованием
Функция ВерсияФФДОборудования(ПодключаемоеОборудование) Экспорт

	ЗначениеВерсияФФД = "";
	
	//++ Локализация
	ТипОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ТипОборудования");

	Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков
		ИЛИ ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда

		ЗначениеВерсияФФД = МаксимальнаяВерсияФФД();

	Иначе

		ПараметрыРегистрацииУстройства = ОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(ПодключаемоеОборудование);
		Если ПараметрыРегистрацииУстройства.ЕстьДанные Тогда
			ЗначениеВерсияФФД = ПараметрыРегистрацииУстройства.ВерсияФФДККТ;
		КонецЕсли;

	КонецЕсли;
	//-- Локализация
	
	Возврат ЗначениеВерсияФФД;

КонецФункции

// Проверяет, соответствует ли введенный ИНН требованиям законодательства
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ печати чека
// 	ИНН - Строка - Введенный ИНН
// 	ТекстСообщения - Строка - Сообщение об ошибке
// Возвращаемое значение:
// 	Булево - Статус корректности ввода ИНН
Функция ИННСоответствуетТребованиямНаСервере(ДокументСсылка, ИНН, ТекстСообщения) Экспорт
	
	ИННЗаполненКорректно = Истина;
	
	//++ Локализация
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Контрагент");
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо);
	
	Если ПустаяСтрока(ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
		ТекстСообщения = НСтр("ru='Не заполнен ИНН покупателя'")
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		ИННЗаполненКорректно = Ложь;
	КонецЕсли;
	//-- Локализация
	
	Возврат ИННЗаполненКорректно;
	
КонецФункции

// Возвращает подключенное оборудовани по организации и торговому объекту
// 
// Параметры:
// 	ПараметрыОперации - Структура - Структура параметров операции
// Возвращаемое значение:
// 	Массив из Структура - список подключенного оборудования:
// 	* Оборудование - СправочникСсылка.ПодключаемоеОборудование - Оборудование
// 	* Подключено - Булево - Статус подключение, где Истина = подключено
// 	* ВерсияФФД - Строка - Версия ФФД, поддерживаемая оборудованием
Функция ПодключенноеОборудованиеПечатиЧеков(ПараметрыОперации) Экспорт
	
	ПодключенноеОборудованиеПечатиЧеков = Новый Массив;
	
	//++ Локализация
	ПодключенноеОборудование = Неопределено;
	
	Если ПараметрыОперации.Свойство("ТорговыйОбъект") И ЗначениеЗаполнено(ПараметрыОперации.ТорговыйОбъект) Тогда
		ПодключенноеОборудование = ПодключенноеОборудование(ПараметрыОперации.Организация, ПараметрыОперации.ТорговыйОбъект);
	Иначе
		ПодключенноеОборудование = ПодключенноеОборудование(ПараметрыОперации.Организация);
	КонецЕсли;
	
	Если ТипЗнч(ПодключенноеОборудование.ККТ) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ПодключенноеОборудование.ККТ Цикл
			НовоеОборудование = Новый Структура();
			НовоеОборудование.Вставить("Оборудование", ЭлементМассива);
			НовоеОборудование.Вставить("Подключено", Ложь);
			НовоеОборудование.Вставить("ВерсияФФД", ВерсияФФДОборудования(ЭлементМассива));
			
			ПодключенноеОборудованиеПечатиЧеков.Добавить(НовоеОборудование);
		КонецЦикла;
		
	Иначе // ТипЗнч(ПодключенноеОборудование.ККТ) = Тип("СправочникСсылка.ПодключаемоеОборудование")
		
		НовоеОборудование = Новый Структура();
		НовоеОборудование.Вставить("Оборудование", ПодключенноеОборудование.ККТ);
		НовоеОборудование.Вставить("Подключено", Ложь);
		НовоеОборудование.Вставить("ВерсияФФД", ВерсияФФДОборудования(ПодключенноеОборудование.ККТ));
		
		ПодключенноеОборудованиеПечатиЧеков.Добавить(НовоеОборудование);
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат ПодключенноеОборудованиеПечатиЧеков;
	
КонецФункции

// Возвращает объекты расчетов документа оплаты
// 
// Параметры:
// 	ДокументыОплаты - ДокументСсылка - Документы оплаты
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Описание
Функция ОбъектыРасчетовДокументаОплаты(ДокументыОплаты, ИмяКомандыПробитияЧека) Экспорт
	
	ОбъектыРасчетовДокументаОплаты = Неопределено;
	
	//++ Локализация
	Для Каждого ДокументОплаты Из ДокументыОплаты Цикл
		Если ОбъектыРасчетовДокументаОплаты = Неопределено Тогда
			ОбъектыРасчетовДокументаОплаты = ДанныеПоОбъектамРасчетовПоДокументу(ДокументОплаты, ИмяКомандыПробитияЧека);
		Иначе
			ДанныеПоОбъектамРасчетовПоДокументу = ДанныеПоОбъектамРасчетовПоДокументу(ДокументОплаты, ИмяКомандыПробитияЧека);
			
			Для Каждого СтрокаДанныхПоОбъекту Из ДанныеПоОбъектамРасчетовПоДокументу Цикл
				НоваяСтрокаОбъектовРасчетов = ОбъектыРасчетовДокументаОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектовРасчетов, СтрокаДанныхПоОбъекту);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектыРасчетовДокументаОплаты <> Неопределено Тогда
		ОбъектыРасчетовДокументаОплаты.Свернуть("Заказ", "Сумма");
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбъектыРасчетовДокументаОплаты;
	
КонецФункции

// Обновляет представление гиперссылки данными фискального чека в переданном параметре "РеквизитГиперссылкиНаФорме"
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Ссылка на документ, из формы документа которого ожидается возможность
// 	 ввода/отображения фискального чека.
// 	Форма - ФормаКлиентскогоПриложения - Форма документа, на которой необходимо обновить гиперссылку ввода/отображения
// 	 фискального чека.
// 	РеквизитГиперссылкиНаФорме - РеквизитФормы - Реквизит формы, отображающий гиперссылку ввода/отображения фискального
// 	 чека.
Процедура ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, РеквизитГиперссылкиНаФорме) Экспорт
	
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ РазрешеноИспользованиеПодключаемогоОборудования()
		ИЛИ НЕ РазрешеноПробитиеФискальныхЧековПоДокументу(ДокументСсылка, Форма) Тогда
		
		Возврат;
	КонецЕсли;
	
	МассивПредставлений = Новый Массив;
	
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	МодульЛокализации.ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, МассивПредставлений);
	
	РеквизитГиперссылкиНаФорме = Новый ФорматированнаяСтрока(МассивПредставлений);
	
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
	
КонецПроцедуры

// Формирование кэш данных механизмов основными параметрами операции при создании формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа - состоит из:
// 	* Объект - ДокументОбъект - Основной реквизит формы.
Процедура ФормаПриСозданииНаСервере(Форма) Экспорт
	
	//++ Локализация
	ФормаПриИзмененииРеквизитов(Форма);
	//-- Локализация
	
КонецПроцедуры

// Формирование кэш данных механизмов основными параметрами операции при чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа - состоит из:
// 	* Объект - ДокументОбъект - Основной реквизит формы.
Процедура ФормаПриЧтенииНаСервере(Форма) Экспорт
	
	//++ Локализация
	ФормаПриИзмененииРеквизитов(Форма);
	//-- Локализация
	
КонецПроцедуры

// Формирование кэш данных механизмов основными параметрами операции при изменении реквизита формы
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа - состоит из:
// 	* Объект - ДокументОбъект - Основной реквизит формы - состоит из
Процедура ФормаПриИзмененииРеквизитов(Форма) Экспорт
	
	//++ Локализация
	ДокументСсылка = Форма.Объект.Ссылка;
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	
	СтруктураПараметров = МодульЛокализации.ОсновныеПараметрыОперации(Форма);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "РозничныеПродажи", СтруктураПараметров);
	
	Если СтруктураПараметров.ИмяРеквизитаГиперссылкиНаФорме <> Неопределено Тогда
		ОбновитьГиперссылкуПробитияФискальногоЧека(
			Форма.Объект.Ссылка,
			Форма,
			Форма[СтруктураПараметров.ИмяРеквизитаГиперссылкиНаФорме]);
			
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			Если ВзаиморасчетыОбновлены() Тогда
				РеквизитаГиперссылкиНаФорме = Форма.Элементы[СтруктураПараметров.ИмяРеквизитаГиперссылкиНаФорме];
				РеквизитаГиперссылкиНаФорме.Доступность = Истина;
				РеквизитаГиперссылкиНаФорме.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Иначе
				РеквизитаГиперссылкиНаФорме = Форма.Элементы[СтруктураПараметров.ИмяРеквизитаГиперссылкиНаФорме];
				РеквизитаГиперссылкиНаФорме.Доступность = Ложь;
				РеквизитаГиперссылкиНаФорме.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Расширение для метода ОбработкаПолученияФормы модуля менеджера Обработка.ПредпросмотрЧека.
// 	
// Параметры:
// 	ВидФормы - Строка - Имя стандартной формы.
// 	Параметры - Структура - Параметры формы
// 	ВыбраннаяФорма - Строка, ОбъектМетаданных - Содержит имя открываемой формы или объект метаданных Форма
// 	ДополнительнаяИнформация - Структура - Дополнительная информация открытия формы.
// 	СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаПолученияФормыПредпросмотрЧека(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт

	//++ Локализация
		
	Если Не ВзаиморасчетыОбновлены() Тогда

		ТекстСообщения = НСтр("ru = 'Предпросмотр чека по документу %1:
									|Выполнение обработчиков отложенного обновления регистров механизма ""Взаиморасчеты"" не завершено.'");
		ОписаниеПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметры.ПараметрыОперации.ДокументСсылка);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение, , , ОписаниеПредупреждения);
	
	КонецЕсли;

	Если Не ВзаиморасчетыРассчитаны(Параметры.ПараметрыОперации) Тогда
		
		ВыбраннаяФорма = "ФормаДлительнойОперации";

		Параметры.Вставить("ВидДлительнойОперации",      "РаспределитьРасчетыСКлиентами");
		// Форма длительной операции будет вызвана синхронного.
		Параметры.Вставить("ИдентификаторЗадания",       Неопределено);
		Параметры.Вставить("ТекстСообщения",       		 НСтр("ru = 'Выполняется операция актуализации распределения расчетов с клиентами. Рекомендуется перейти на онлайн расчеты.'"));
		Параметры.Вставить("ВыводитьОкноОжидания",       Истина);
		Параметры.Вставить("ВыводитьПрогрессВыполнения", Истина);
		Параметры.Вставить("ВыводитьСообщения",          Истина);

	КонецЕсли;

	//-- Локализация
	
КонецПроцедуры

// Определеяет, проводится ли документом оплата подарочным сертификатом.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВзаимозачетЗадолженности - Взаимозачет задолженности
// 
// Возвращаемое значение:
//  Булево - Истина, оплата подарочным сертификатом
Функция ОплатаПодарочнымСертификатом(ДокументСсылка) Экспорт
	
	ОплатаПодарочнымСертификатом = Ложь;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидОперации")
			= Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом Тогда
			
		ОплатаПодарочнымСертификатом = Истина;
	КонецЕсли;
	
	Возврат ОплатаПодарочнымСертификатом;
	
КонецФункции

//++ Локализация

// Метод определяет и возвращает по оплачиваемому объекту расчетов суммы НДС в разрезе ставок НДС 
// 
// Параметры:
// 	ДокументОплаты - ДокументСсылка - документ оплаты, для которого нужно определить ставки НДС и суммы НДС
// 	ОбъектРасчета - СправочникСсылка, ДокументСсылка - объект расчетов, по которому проводится оплата и по которому нужно определить ставки НДС и суммы НДС
//	СистемаНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по организации
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений, содержащая значения ставок НДС и сумм НДС по оплачиваемому объекту расчетов:
//	* СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - 
//	* СуммаНДС - Число - 
//	* Сумма - Число - 
Функция СтавкиНДСПоОбъектуРасчетовПоДокументуОплаты(ДокументОплаты, ОбъектРасчета, СистемаНалогообложения, ИмяКомандыПробитияЧека) Экспорт
	
	СтавкиНДСПоОбъектуРасчетов = Новый ТаблицаЗначений();
	СтавкиНДСПоОбъектуРасчетов.Колонки.Добавить("СтавкаНДС");
	СтавкиНДСПоОбъектуРасчетов.Колонки.Добавить("СуммаНДС");
	СтавкиНДСПоОбъектуРасчетов.Колонки.Добавить("Сумма");
	
	Если СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход
		ИЛИ СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход Тогда
		
		СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	Иначе
		СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
	КонецЕсли;
	
	ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ДокументОплаты)
		ИЛИ НЕ ДокументОплатыСВозможностьюПробитияЧеков(ДокументОплаты)
		ИЛИ ТипЗнч(ДокументОплаты) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		СтавкаНДСПоОбъектуРасчетов = СтавкиНДСПоОбъектуРасчетов.Добавить();
		СтавкаНДСПоОбъектуРасчетов.СтавкаНДС = СтавкаНДС;
		Если ТипЗнч(ДокументОплаты) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			СтавкаНДСПоОбъектуРасчетов.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "СуммаРегл");
		Иначе
			СтавкаНДСПоОбъектуРасчетов.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "СуммаДокумента");
		КонецЕсли;
		
		Возврат СтавкиНДСПоОбъектуРасчетов;
	КонецЕсли;
	
	Если ЕстьТаблицаОбъекта("РасшифровкаПлатежа", ДокументОплаты.Метаданные()) Тогда
		ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа = ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа(ДокументОплаты);
	Иначе
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументОплаты.Метаданные().Имя);
		ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа = МодульЛокализации.ДанныеПоОбъектамРасчетовПоДокументу(
			ДокументОплаты,
			ИмяКомандыПробитияЧека,
			ВзаиморасчетыОбновлены());
	КонецЕсли;
	
	Если ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа <> Неопределено Тогда
		
		Для Каждого ДанныеПоОбъектуРасчетов Из ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа Цикл
			
			Если ДанныеПоОбъектуРасчетов.Заказ = ОбъектРасчета
				ИЛИ ТипЗнч(ДанныеПоОбъектуРасчетов.Заказ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				СтавкаНДСПоОбъектуРасчетов = СтавкиНДСПоОбъектуРасчетов.Добавить();
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДанныеПоОбъектуРасчетов, "СтавкаНДС")
					И ЗначениеЗаполнено(ДанныеПоОбъектуРасчетов.СтавкаНДС) Тогда
					
					СтавкаНДСПоОбъектуРасчетов.СтавкаНДС = ДанныеПоОбъектуРасчетов.СтавкаНДС;
				Иначе
					СтавкаНДСПоОбъектуРасчетов.СтавкаНДС = СтавкаНДС;
				КонецЕсли;
				
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДанныеПоОбъектуРасчетов, "СуммаНДС")
					И ЗначениеЗаполнено(ДанныеПоОбъектуРасчетов.СуммаНДС) Тогда
					
					СтавкаНДСПоОбъектуРасчетов.СуммаНДС = ДанныеПоОбъектуРасчетов.СуммаНДС;
				Иначе
					СтавкаНДСПоОбъектуРасчетов.СуммаНДС = 0;
				КонецЕсли;
				
				СтавкаНДСПоОбъектуРасчетов.Сумма = ДанныеПоОбъектуРасчетов.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтавкаНДСПоОбъектуРасчетов = СтавкиНДСПоОбъектуРасчетов.Добавить();
		СтавкаНДСПоОбъектуРасчетов.СтавкаНДС = СтавкаНДС;
		СтавкаНДСПоОбъектуРасчетов.СуммаНДС = 0;
		
		Если ТипЗнч(ДокументОплаты) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			СтавкаНДСПоОбъектуРасчетов.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "СуммаРегл");
		Иначе
			СтавкаНДСПоОбъектуРасчетов.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "СуммаДокумента");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтавкиНДСПоОбъектуРасчетов.Количество() > 0 Тогда
		СтавкиНДСПоОбъектуРасчетов.Свернуть("СтавкаНДС", "СуммаНДС, Сумма");
	Иначе
		
		Для Каждого ДанныеПоОбъектуРасчетов Из ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа Цикл
			
			Если ДокументОплатыСВозможностьюПробитияЧеков(ДанныеПоОбъектуРасчетов.Заказ) Тогда
				СтавкаНДСПоОбъектуРасчетов = СтавкиНДСПоОбъектуРасчетов.Добавить();
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоОбъектуРасчетов, "СтавкаНДС") Тогда
					СтавкаНДСПоОбъектуРасчетов.СтавкаНДС = ДанныеПоОбъектуРасчетов.СтавкаНДС;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПоОбъектуРасчетов, "СуммаНДС") Тогда
					СтавкаНДСПоОбъектуРасчетов.СуммаНДС = ДанныеПоОбъектуРасчетов.СуммаНДС;
				КонецЕсли;
				СтавкаНДСПоОбъектуРасчетов.Сумма = ДанныеПоОбъектуРасчетов.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтавкиНДСПоОбъектуРасчетов;
	
КонецФункции

// Разбивает строки товаров по единичиным кодам маркировки 
//
// Параметры:
//   Товары        - ТаблицаЗначений - Таблица товаров в позиции чека:
//   	*НомерСтроки - Число - Номер строки
//   ДанныеДляИСМП - ТаблицаЗначений, Неопределено - Таблица товаров с маркировкой продукции
//
Процедура ТаблицаТоваровСРаспределениемКодовМаркировкиИСМП(Товары, ДанныеДляИСМП) Экспорт
	
	ТаблицаТоваровСРаспределением = Товары.СкопироватьКолонки();
	Если ТаблицаТоваровСРаспределением.Колонки.Найти("Штрихкод") = Неопределено Тогда
		ТаблицаТоваровСРаспределением.Колонки.Добавить("Штрихкод");
	КонецЕсли;
	Если ТаблицаТоваровСРаспределением.Колонки.Найти("РезультатРаспределения") = Неопределено Тогда
		ТаблицаТоваровСРаспределением.Колонки.Добавить("РезультатРаспределения");
	КонецЕсли;
	Если ТаблицаТоваровСРаспределением.Колонки.Найти("ДополнениеКНаименованиюТовара") = Неопределено Тогда
		ТаблицаТоваровСРаспределением.Колонки.Добавить("ДополнениеКНаименованиюТовара");
	КонецЕсли;
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		КоэффциентУпаковкиДокумента = СтрокаТЧ.КоличествоУпаковок / СтрокаТЧ.Количество;
		
		МассивСтрокДляДобавленияВТовары = Новый Массив;
		МассивСтрокДляДобавленияВТовары.Добавить(СтрокаТЧ);
		
		// Данные по маркируемой продукции
		ЭтоМаркируемаяПродукция = Ложь;
		Если НЕ ДанныеДляИСМП = Неопределено
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "ОсобенностьУчета")
			И ВидыПродукцииИСМП.Найти(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтрокаТЧ.ОсобенностьУчета)) <> Неопределено Тогда
			
			ЭтоМаркируемаяПродукция = Истина;
			// заменяем строки для добавления в чек детализированными данными
			МассивСтрокДляДобавленияВТовары = ДанныеДляИСМП.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки));
		КонецЕсли;
		
		Для каждого СтрокаДляДобавленияВТовары из МассивСтрокДляДобавленияВТовары Цикл
			Если НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВТовары, "РезультатРаспределения")
				ИЛИ СтрокаДляДобавленияВТовары.РезультатРаспределения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 И СтрокаТЧ.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаДляДобавленияВТовары.КоличествоУпаковок = 0 И СтрокаДляДобавленияВТовары.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоэффициентПересчетаУпаковки = КоэффциентУпаковкиДокумента;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(
				СтрокаДляДобавленияВТовары,
				"КоэффициентПересчетаУпаковки") Тогда
				
				КоэффициентПересчетаУпаковки = СтрокаДляДобавленияВТовары.КоэффициентПересчетаУпаковки;
			КонецЕсли;
			
			СтрокаТоваровСРаспределением = ТаблицаТоваровСРаспределением.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровСРаспределением, СтрокаТЧ);
			
			ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(
				СтрокаДляДобавленияВТовары,
				"ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения") Тогда
				
				ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения
					= СтрокаДляДобавленияВТовары.ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения;
			КонецЕсли;
			
			Если СтрокаДляДобавленияВТовары.КоличествоУпаковок >= СтрокаТЧ.КоличествоУпаковок
					И НЕ СтрокаДляДобавленияВТовары.КоличествоУпаковок = 0
					И НЕ ТребуетсяПересчетИзУпаковкиВБазовуюЕдиницуИзмерения Тогда
				
				СтрокаТоваровСРаспределением.Количество         = СтрокаТЧ.Количество;
				СтрокаТоваровСРаспределением.КоличествоУпаковок = СтрокаТЧ.Количество * КоэффициентПересчетаУпаковки;
				СтрокаТоваровСРаспределением.СуммаСНДС          = СтрокаТЧ.СуммаСНДС;
				СтрокаТоваровСРаспределением.СуммаНДС           = СтрокаТЧ.СуммаНДС;
				СтрокаТоваровСРаспределением.СуммаСкидки        = СтрокаТЧ.СуммаСкидки;
				СтрокаТоваровСРаспределением.Цена               = (СтрокаТЧ.СуммаСНДС + СтрокаТЧ.СуммаСкидки)
				                                                  / СтрокаТЧ.КоличествоУпаковок;
			Иначе
				
				Если СтрокаТоваровСРаспределением.КоличествоУпаковок = 0 Тогда
					СтрокаТоваровСРаспределением.КоличествоУпаковок = 1;
					СтрокаТоваровСРаспределением.Количество = 1;
				Иначе
					СтрокаТоваровСРаспределением.КоличествоУпаковок = СтрокаДляДобавленияВТовары.КоличествоУпаковок;
					СтрокаТоваровСРаспределением.Количество = СтрокаДляДобавленияВТовары.Количество;
				КонецЕсли;
				
				СтрокаТоваровСРаспределением.СуммаСНДС = СтрокаДляДобавленияВТовары.СуммаСНДС;
				СтрокаТоваровСРаспределением.СуммаНДС = СтрокаДляДобавленияВТовары.СуммаНДС;
				СтрокаТоваровСРаспределением.СуммаСкидки = СтрокаДляДобавленияВТовары.СуммаСкидки;
				СтрокаТоваровСРаспределением.Цена = (СтрокаТоваровСРаспределением.СуммаСНДС + СтрокаДляДобавленияВТовары.СуммаСкидки)
														 / СтрокаТоваровСРаспределением.КоличествоУпаковок;
			КонецЕсли;
			
			СтрокаТЧ.Количество         = СтрокаТЧ.Количество - СтрокаТоваровСРаспределением.Количество;
			СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок
			                              - СтрокаТоваровСРаспределением.Количество * КоэффциентУпаковкиДокумента;
			
			Если СтрокаТЧ.Количество = 0 Тогда
				СтрокаТЧ.КоличествоУпаковок = 0;
			КонецЕсли;
				
			СтрокаТЧ.СуммаСНДС          = СтрокаТЧ.СуммаСНДС - СтрокаТоваровСРаспределением.СуммаСНДС;
			СтрокаТЧ.СуммаНДС           = СтрокаТЧ.СуммаНДС - СтрокаТоваровСРаспределением.СуммаНДС;
			СтрокаТЧ.СуммаСкидки        = СтрокаТЧ.СуммаСкидки - СтрокаТоваровСРаспределением.СуммаСкидки;
			
			СтрокаДляДобавленияВТовары.Количество         = СтрокаДляДобавленияВТовары.Количество - СтрокаТоваровСРаспределением.Количество;
			СтрокаДляДобавленияВТовары.КоличествоУпаковок = СтрокаДляДобавленияВТовары.КоличествоУпаковок
			                                                - СтрокаТоваровСРаспределением.КоличествоУпаковок;
			СтрокаДляДобавленияВТовары.СуммаСНДС          = СтрокаДляДобавленияВТовары.СуммаСНДС - СтрокаТоваровСРаспределением.СуммаСНДС;
			СтрокаДляДобавленияВТовары.СуммаНДС           = СтрокаДляДобавленияВТовары.СуммаНДС - СтрокаТоваровСРаспределением.СуммаНДС;
			СтрокаДляДобавленияВТовары.СуммаСкидки        = СтрокаДляДобавленияВТовары.СуммаСкидки - СтрокаТоваровСРаспределением.СуммаСкидки;
			
			Если ЭтоМаркируемаяПродукция
				И ЗначениеЗаполнено(СтрокаДляДобавленияВТовары.Упаковка)
				И СтрокаТоваровСРаспределением.Упаковка <> СтрокаДляДобавленияВТовары.Упаковка Тогда
				
				СтрокаТоваровСРаспределением.Упаковка = СтрокаДляДобавленияВТовары.Упаковка;
				СтрокаТоваровСРаспределением.УпаковкаНаименование = Строка(СтрокаДляДобавленияВТовары.Упаковка);
			КонецЕсли;
			
			Если ЭтоМаркируемаяПродукция И ЗначениеЗаполнено(СтрокаДляДобавленияВТовары.Штрихкод) Тогда
				СтрокаТоваровСРаспределением.Штрихкод               = СтрокаДляДобавленияВТовары.Штрихкод;
				СтрокаТоваровСРаспределением.РезультатРаспределения = СтрокаДляДобавленияВТовары.РезультатРаспределения;
				СтрокаТоваровСРаспределением.ДополнениеКНаименованиюТовара = СтрокаДляДобавленияВТовары.ДополнениеКНаименованиюТовара;
			ИначеЕсли ЭтоМаркируемаяПродукция И НЕ ЗначениеЗаполнено(СтрокаДляДобавленияВТовары.Штрихкод) Тогда
				СтрокаТоваровСРаспределением.Штрихкод = Неопределено;
			КонецЕсли;
			
			Если СтрокаДляДобавленияВТовары.КоличествоУпаковок > 0 Тогда
				ДанныеДляИСМП_Копия = ДанныеДляИСМП.СкопироватьКолонки();
				НоваяСтрока = ДанныеДляИСМП_Копия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляДобавленияВТовары);
				
				ДанныеДляИСМП = ДанныеДляИСМП_Копия;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТЧ.КоличествоУпаковок > 0 Тогда
			СтрокаТоваровСРаспределением = ТаблицаТоваровСРаспределением.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровСРаспределением, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Товары = ТаблицаТоваровСРаспределением;
	
КонецПроцедуры

//-- Локализация

// Проверяет разрешение ввода персональных данных 
//
// Параметры:
// 	ПараметрыОперацииЧека - Структура - Параметры необходимые для проверки разрешения:
// 	* ДокументСсылка - ДокументСсылка - Ссылка на документ поставки/оплаты
// 	* Контрагент - СправочникСсылка.Контрагенты - Покупатель
// 	* ЕдиныйЧек - Булево - Признак оформления единого чека
// Возвращаемое значение:
//  Булево - 
Функция РазрешенВводПерсональныхДанных(ПараметрыОперацииЧека) Экспорт
	
	РазрешенВводПерсональныхДанных = Ложь;
	
	//++ Локализация
	РазрешенВводПерсональныхДанных = Истина;
	ИмяРеквизитаЮрФизЛицо = "ЮрФизЛицо";
	ИмяРеквизитаХозяйственнаяОперация = "ХозяйственнаяОперация";
	
	ДокументыРазрешенныеКВводуПерсональныхДанных = ДокументыРазрешенныеКВводуПерсональныхДанных();
	
	ЭтоЕдиныйЧек = ЗначениеЗаполнено(ПараметрыОперацииЧека.ЕдиныйЧек) И ПараметрыОперацииЧека.ЕдиныйЧек;
	
	ТипДокумента = ТипЗнч(ПараметрыОперацииЧека.ДокументСсылка);
	ДокументВходитВСписокРазрешенныхКВводуПермональныхДанных
		= ДокументыРазрешенныеКВводуПерсональныхДанных.Найти(ТипДокумента) <> Неопределено;
		
	РазрешенВводПерсональныхДанных = ЭтоЕдиныйЧек Или ДокументВходитВСписокРазрешенныхКВводуПермональныхДанных;
	
	Если РазрешенВводПерсональныхДанных Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперацииЧека.Контрагент, ИмяРеквизитаЮрФизЛицо);
		
		Если ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			РазрешенВводПерсональныхДанных = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДокументЯвляетсяПриходнымКассовымОрдером =
		ТипЗнч(ПараметрыОперацииЧека.ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
		
	Если РазрешенВводПерсональныхДанных И ДокументЯвляетсяПриходнымКассовымОрдером Тогда
		ХозяйственнаяОперацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыОперацииЧека.ДокументСсылка,
			ИмяРеквизитаХозяйственнаяОперация);
		
		Если ХозяйственнаяОперацияДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
			РазрешенВводПерсональныхДанных = Ложь;
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
	Возврат РазрешенВводПерсональныхДанных;
	
КонецФункции

// Вызывает метод механизма Взаиморасчеты для распределения расчетов с клиентами
// 
// Параметры:
// 	ПараметрыОперации - см. ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧека
//
Процедура РаспределитьРасчетыСКлиентами(ПараметрыОперации) Экспорт
	
	//++ Локализация
	Организации = Новый Массив;
	Организации.Добавить(ПараметрыОперации.Организация);
	
	АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
	АналитикиРасчета.Организации = Организации;
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ТекущаяДатаСеанса(), АналитикиРасчета);
	//-- Локализация
	
КонецПроцедуры

// Выполняет проверку, что распределение взаиморасчетов является актуальным.
// 
// Параметры:
// 	ПараметрыОперации - см. ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧека
//
// Возвращаемое значение:
//  Булево
Функция ВзаиморасчетыРассчитаны(ПараметрыОперации) Экспорт
	
	ВзаиморасчетыРассчитаны = Истина;
	
	//++ Локализация
	ИмяРеквизитаДата = "Дата";
	ИмяРеквизитаРасчетыСКлиентами = "РасчетыСКлиентами";

	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			
		Организации = Новый Массив;
		Организации.Добавить(ПараметрыОперации.Организация);
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = Организации;
		
		ДатаРасчета = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(
			ТекущаяДатаСеанса(),
			АналитикиРасчета,
			ИмяРеквизитаРасчетыСКлиентами);
			
		ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперации.ДокументСсылка, ИмяРеквизитаДата);
		Если ДатаРасчета <> Неопределено И ДатаРасчета < ДатаДокумента Тогда
			ВзаиморасчетыРассчитаны = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация
	
	Возврат ВзаиморасчетыРассчитаны;
	
КонецФункции

// Проверяет, что тип расчетов денежными средствами входит в список разрешенных для использования кассового чека коррекции.
//
// Параметры:
//  ТипРасчетовДенежнымиСредствами - ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами -
//
// Возвращаемое значение:
//  Булево -
//
Функция РазрешенКассовыйЧекКоррекцииДляТипаРасчетов(ТипРасчетовДенежнымиСредствами) Экспорт

	Результат = Ложь;
	
	Если ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств 
		Или ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыЗаполненияПараметровПредпросмотраЧека

Функция ВзаиморасчетыОбновлены()
	
	Возврат ВзаиморасчетыСервер.ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено();
	
КонецФункции

Процедура ОбновитьВзаиморасчеты(ПараметрыОперации, ВзаиморасчетыОбновлены)
	
	//++ Локализация
	Если ВзаиморасчетыОбновлены
		И НЕ ВзаиморасчетыРассчитаны(ПараметрыОперации) Тогда
		
		РаспределитьРасчетыСКлиентами(ПараметрыОперации);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Функция ПараметрыЕдиногоЧека(ПараметрыОперации)
	
	ДокументыЕдиногоЧека = Новый ТаблицаЗначений();
	ДокументыЕдиногоЧека.Колонки.Добавить("Документ");
	ДокументыЕдиногоЧека.Колонки.Добавить("Сумма");
	
	//++ Локализация
	ДокументыЕдиногоЧекаЗаполнитьТаблицу(ПараметрыОперации.ДокументСсылка, ДокументыЕдиногоЧека, ПараметрыОперации.ИмяКомандыПробитияЧека);
	//-- Локализация
	
	Возврат ДокументыЕдиногоЧека;
	
КонецФункции

Функция ПредоплатаПоДокументуПоставкиВРамкахОдногоДня(ДокументСсылка)
	
	СуммаПредоплаты = 0;
	
	//++ Локализация
	СуммаПредоплаты = ПредоплатаПоДокументуПоставкиВРамкахОдногоДняЛокализация(ДокументСсылка);
	//-- Локализация
	
	Возврат СуммаПредоплаты;
	
КонецФункции

Функция ОбъектыРасчетовПоДокументу(ПараметрыОперации)
	
	ОбъектыРасчетовПоДокументу = Новый ТаблицаЗначений();
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("ОбъектРасчетов");
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("Заказ");
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("Сумма");
	
	//++ Локализация
	ДанныеПоОбъектамРасчетовПоДокументу = ДанныеПоОбъектамРасчетовПоДокументу(ПараметрыОперации.ДокументСсылка, ПараметрыОперации.ИмяКомандыПробитияЧека);
	
	Если ДанныеПоОбъектамРасчетовПоДокументу <> Неопределено Тогда
		ОбъектыРасчетовПоДокументу = ДанныеПоОбъектамРасчетовПоДокументу;
		ОбъектыРасчетовПоДокументу.Свернуть("ОбъектРасчетов, Заказ", "Сумма");
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбъектыРасчетовПоДокументу;
	
КонецФункции

Функция ПризнакиСпособаРасчетаАвто(ПараметрыОперации, ОбъектыРасчетовПоДокументу, ВзаиморасчетыОбновлены)
	
	ПризнакиСпособаРасчетаАвто = Новый Массив;
	
	//++ Локализация
	Для Каждого ДанныеПоОбъектуРасчета Из ОбъектыРасчетовПоДокументу Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеПоОбъектуРасчета.ОбъектРасчетов)
			ИЛИ НЕ ВзаиморасчетыОбновлены Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПризнакиСпособаРасчетаАвтоПоОбъекту = Неопределено;
		
		Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			ПризнакиСпособаРасчетаАвтоПоОбъекту = ОпределитьАвтоПризнакСпособаРасчетовПоОфлайнРасчетам(
				ПараметрыОперации,
				ДанныеПоОбъектуРасчета);
		Иначе
			ПризнакиСпособаРасчетаАвтоПоОбъекту = ОпределитьАвтоПризнакСпособаРасчетовПоОнлайнРасчетам(
				ПараметрыОперации,
				ДанныеПоОбъектуРасчета);
		КонецЕсли;
		
		Для Каждого ПризнакСпособаРасчета Из ПризнакиСпособаРасчетаАвтоПоОбъекту Цикл
			ПризнакиСпособаРасчетаАвто.Добавить(ПризнакСпособаРасчета);
		КонецЦикла;
	КонецЦикла;
	//-- Локализация
	
	Возврат ПризнакиСпособаРасчетаАвто;
	
КонецФункции

Функция ДанныеФискальнойОперации()
	
	Возврат РозничныеПродажи.СтруктураДанныеФискальнойОперации();
	
КонецФункции

Функция ПараметрыОперацииФискализацииЧека(ПараметрыОперации)
	
	Возврат ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧека(
		ПараметрыОперации.ДокументСсылка,
		ПараметрыОперации.Организация);
	
КонецФункции

Функция ПраваДоступа()
	
	Возврат НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь());
	
КонецФункции

// Проверяет заполнение акцизных марок по одному документу (проверка по объекту)
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - ДокументОбъект
// 
// Возвращаемое значение:
//  Булево - Результат проверки
Функция ШтрихкодыУпаковокЗаполнены(ДокументОбъект) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
		
	Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		ИнтеграцияИСУТ.ПроверитьЗаполнениеАкцизныхМарок(ДокументОбъект, Результат);
	КонецЕсли;
	
	//-- Локализация
	
	Возврат НЕ Результат;
	
КонецФункции

// Проверяет заполнение акцизных марок по одному документу или списку документов (проверка по ссылкам)
// 
// Параметры:
//  ДокументыРеализации - ДокументСсылка, Массив Из ДокументСсылка - объекты для проверки (ссылка или ссылки одного типа).
// 
// Возвращаемое значение:
//  Булево - Результат проверки
Функция ШтрихкодыУпаковокПоДокументамЗаполнены(ДокументыРеализации) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	
	СтатусыДокументовРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыРеализации, "Статус");
	Для Каждого СтатусДокументаРеализации из СтатусыДокументовРеализации Цикл
		Если СтатусДокументаРеализации.Значение = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			ИндексДокументаРеализации = ДокументыРеализации.Найти(СтатусДокументаРеализации.Ключ);
			Если ИндексДокументаРеализации <> Неопределено Тогда
				ДокументыРеализации.Удалить(ИндексДокументаРеализации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыРеализации.Количество() > 0
		И ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		
		ИнтеграцияИСУТ.ПроверитьЗаполнениеАкцизныхМарокПоСсылкам(ДокументыРеализации, Результат);
	КонецЕсли;
	
	//-- Локализация
	
	Возврат НЕ Результат;
	
КонецФункции

#КонецОбласти

//++ Локализация

#Область ВзаиморасчетыПоДокументу

Функция ВзаиморасчетыПоОбъектуАванс(ОбъектРасчета, ДокументРасчета)
	
	ВзаиморасчетыПоОбъектуАванс = Ложь;
	
	Если ОбъектРасчетовАвансовый(ОбъектРасчета)
		И (ДокументОплатыСВозможностьюПробитияЧеков(ДокументРасчета)
			ИЛИ НЕ ЗначениеЗаполнено(ДокументРасчета)) Тогда
		
		ВзаиморасчетыПоОбъектуАванс = Истина;
	КонецЕсли;
	
	Возврат ВзаиморасчетыПоОбъектуАванс;
	
КонецФункции

Функция ВзаиморасчетыПоОбъектуПредоплата(ОбъектРасчета, ДокументРасчета)
	
	ВзаиморасчетыПоОбъектуПредоплата = Ложь;
	
	Если НЕ ОбъектРасчетовАвансовый(ОбъектРасчета)
		И (ДокументОплатыСВозможностьюПробитияЧеков(ДокументРасчета)
			ИЛИ НЕ ЗначениеЗаполнено(ДокументРасчета)) Тогда
		
		ВзаиморасчетыПоОбъектуПредоплата = Истина;
	КонецЕсли;
	
	Возврат ВзаиморасчетыПоОбъектуПредоплата;
	
КонецФункции

Функция ВзаиморасчетыПоОбъектуОплатаКредита(ОбъектРасчета, ДокументРасчета)
	
	ВзаиморасчетыПоОбъектуОплатаКредита = Ложь;
	
	Если НЕ ДокументОплатыСВозможностьюПробитияЧеков(ДокументРасчета)
		И ЗначениеЗаполнено(ДокументРасчета) Тогда
		
		ВзаиморасчетыПоОбъектуОплатаКредита = Истина;
	КонецЕсли;
	
	Возврат ВзаиморасчетыПоОбъектуОплатаКредита;
	
КонецФункции

Функция ОпределитьВидПредоплатыПоВзаиморасчетам(ОбъектРасчета, Оплата, ПризнакиСпособаРасчетаАвто)
	
	ДанныеПоСпособуРасчета = Новый Структура("ПризнакСпособаРасчета, СуммаПереплаты");
	
	СуммаПереплаты = 0;
	СуммаДетальнойОплаты = 0;
	СуммаПолнойОплаты = 0;
	Для Каждого ПризнакСпособаРасчетаАвто Из ПризнакиСпособаРасчетаАвто Цикл
		
		Если ПризнакСпособаРасчетаАвто.ОбъектРасчета = ОбъектРасчета
			И ПризнакСпособаРасчетаАвто.ОбъектРасчета <> ПризнакСпособаРасчетаАвто.ДокументРасчета
			И ПризнакСпособаРасчетаАвто.ДокументРасчета <> Неопределено Тогда
			
			СуммаДетальнойОплаты = СуммаДетальнойОплаты + ПризнакСпособаРасчетаАвто.Оплата;
		ИначеЕсли ПризнакСпособаРасчетаАвто.ОбъектРасчета = ОбъектРасчета Тогда
			СуммаПолнойОплаты = СуммаПолнойОплаты + ПризнакСпособаРасчетаАвто.Оплата;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		СуммаПоставки = ФормированиеПараметровФискальногоЧекаСервер.ПозицииНоменклатурыПоДокументу(ОбъектРасчета).Итог("Сумма");
		СуммаПоставки = СуммаПоставки - СуммаДетальнойОплаты;
		
		Если СуммаПолнойОплаты > СуммаПоставки Тогда
			СуммаПереплаты = СуммаПолнойОплаты - СуммаПоставки;
		КонецЕсли;
		
		Если СуммаДетальнойОплаты > 0 Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		ИначеЕсли Оплата < СуммаПоставки ИЛИ СуммаПереплаты > 0 И Оплата = СуммаПолнойОплаты Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		Иначе
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		КонецЕсли;
	Исключение
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
	КонецПопытки;
	
	ДанныеПоСпособуРасчета.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
	ДанныеПоСпособуРасчета.СуммаПереплаты = СуммаПереплаты;
	
	Возврат ДанныеПоСпособуРасчета;
	
КонецФункции

Функция РассчитатьПоВзаиморасчетамПризнакСпособаРасчетаДокументаПоставки(ПризнакиСпособаРасчетаАвто, СуммаПредоплатыВРамкахОдногоДня)
	
	ПризнакСпособаРасчетаПоставки = Неопределено;
	
	СуммаПредоплаты = СуммаПредоплаты(ПризнакиСпособаРасчетаАвто) + СуммаПредоплатыВРамкахОдногоДня;
	СуммаПоставки = ПризнакиСпособаРасчетаАвто.Итог("Поставка");
	
	Если СуммаПредоплаты = 0 Тогда
		ПризнакСпособаРасчетаПоставки = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
	ИначеЕсли СуммаПредоплаты >= СуммаПоставки Тогда
		ПризнакСпособаРасчетаПоставки = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Иначе
		ПризнакСпособаРасчетаПоставки = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
	КонецЕсли;
	
	Возврат ПризнакСпособаРасчетаПоставки;
	
КонецФункции

Функция СуммаПредоплаты(ПризнакиСпособаРасчетаАвто)
	
	СуммаПредоплаты = 0;
	Для Каждого СтрокаПризнакаСпособаРасчетаАвто Из ПризнакиСпособаРасчетаАвто Цикл
		
		Если ( ОбъектРасчетовАвансовый(СтрокаПризнакаСпособаРасчетаАвто.ОбъектРасчета)
				И ДокументОплатыСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ДокументРасчета) )
			ИЛИ ( ОбъектРасчетовПредоплатный(СтрокаПризнакаСпособаРасчетаАвто.ОбъектРасчета)
				И ДокументОплатыСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ДокументРасчета) )
			ИЛИ ( СтрокаПризнакаСпособаРасчетаАвто.ОбъектРасчета = СтрокаПризнакаСпособаРасчетаАвто.ДокументРасчета
				И ДокументОплатыСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ОбъектРасчета) )
			ИЛИ ( ДокументПоставкиСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ОбъектРасчета) 
				И ДокументОплатыСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ДокументРасчета) ) Тогда
				
			Если НЕ ДокументОплатыСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ОбъектРасчета)
				И ДокументОплатыСВозможностьюПробитияЧеков(СтрокаПризнакаСпособаРасчетаАвто.ДокументРасчета) Тогда
				СуммаПредоплаты = СуммаПредоплаты + СтрокаПризнакаСпособаРасчетаАвто.Поставка;
			Иначе
				СуммаПредоплаты = СуммаПредоплаты + СтрокаПризнакаСпособаРасчетаАвто.ДолгОрганизацииНаНачало;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаПредоплаты;
	
КонецФункции

#КонецОбласти

#Область МетодыОбновленияПараметровФискальногоЧека

Процедура ОбновитьПараметрыФискальногоЧекаДокументОснование(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	ДокументОснование = ПараметрыОперацииЧека.ДокументСсылка;
	ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаДокументОснование(ПараметрыОперацииФискализацииЧека, ДокументОснование);
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаТипРасчета(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьТипРасчета(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека.ТипРасчетаДенежнымиСредствами);
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаСерийныйНомерОборудования(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	Если ПараметрыОперацииФискализацииЧека = Неопределено
		ИЛИ ТипЗнч(ПараметрыОперацииФискализацииЧека) <> Тип("Структура") Тогда
		
		Возврат;
	КонецЕсли;
	
	ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьСерийныйНомерОборудования(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека.СерийныйНомерОборудования);
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаЕдиныйЧек(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаЕдиныйЧек(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека.ЕдиныйЧек);
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПокупателя(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	Если ПараметрыОперацииЧека.ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств
		ИЛИ ПараметрыОперацииЧека.ТипРасчетаДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
		
		ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьПараметрыПокупателя(ПараметрыОперацииФискализацииЧека, Неопределено);
	Иначе
		Если ЗначениеЗаполнено(ПараметрыОперацииЧека.Контрагент)
			И НЕ РозничныеПродажи.ПокупательФизическоеЛицо(ПараметрыОперацииЧека.Контрагент) Тогда
			СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ПараметрыОперацииЧека.Контрагент, ТекущаяДатаСеанса());
			ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьПараметрыПокупателя(ПараметрыОперацииФискализацииЧека, СведенияОЮрФизЛице);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаМестоРасчетов(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	Если НЕ ПараметрыОперацииЧека.Свойство("Склад")
		ИЛИ НЕ ПараметрыОперацииЧека.Свойство("ОборудованиеККТ") Тогда
			
		Возврат;
	КонецЕсли;
	
	ФормированиеПараметровФискальногоЧекаСерверПереопределяемый.ОбновитьПараметрыФискальногоЧекаМестоРасчетов(
		ПараметрыОперацииФискализацииЧека,
		ПараметрыОперацииЧека.Организация,
		ПараметрыОперацииЧека.Склад,
		ПараметрыОперацииЧека.ОборудованиеККТ);
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПараметрыОтправкиЭлектронногоЧека(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьПараметрыОтправкиЭлектронногоЧека(
		ПараметрыОперацииФискализацииЧека,
		ПараметрыОперацииЧека.ВариантОтправкиЭлектронногоЧека,
		ПараметрыОперацииЧека.КонтактПолучателяЭлектронногоЧека);
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПерсональныеДанные(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека, ВерсияФФД)
	
	Если ПараметрыОперацииЧека.ОперацияПредусматриваетВводПерсональныхДанныхПокупателя Тогда
			
		СубъектПерсональныхДанных = ПараметрыОперацииЧека.ПокупательНаименование;
		Если ПараметрыОперацииЧека.ПокупательТипПерсональныхДанных = "ИНН" Тогда
			ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ИНН;
		Иначе
			ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ПаспортныеДанные;
		КонецЕсли;
		
		СведенияОПокупателе = ПараметрыОперацииФискализацииЧека.СведенияОПокупателе;
		СведенияОПокупателе.Покупатель = СокрЛП(ПараметрыОперацииЧека.ПокупательНаименование);
		Если ПараметрыОперацииЧека.ПокупательТипПерсональныхДанных = "ИНН" Тогда
			СведенияОПокупателе.ПокупательИНН = СокрЛП(ПараметрыОперацииЧека.ПокупательПерсональныеДанные);
		КонецЕсли;
		ПараметрыОперацииФискализацииЧека.СведенияОПокупателе = СведенияОПокупателе;
		
		ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьПерсональныеДанныеФФД_1_2(
			ПараметрыОперацииФискализацииЧека,
			Истина,
			ТипПерсональныхДанных,
			СубъектПерсональныхДанных,
			СведенияОПокупателе);
			
	Иначе
		
		ОбновитьПараметрыФискальногоЧекаПокупателя(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПризнакСпособаРасчетаПозицийЧека(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	Если ПараметрыОперацииЧека.ЕдиныйЧек Тогда
		
		ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаПозицийЧекаЕдиныйЧек(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека.ДокументыЕдиногоЧека);
		
	Иначе
		
		Если ДокументОплатыСВозможностьюПробитияЧеков(ПараметрыОперацииЧека.ДокументСсылка) Тогда
			ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументуОплаты(
				ПараметрыОперацииФискализацииЧека,
				ПараметрыОперацииЧека.ОбъектыРасчетовСПризнакамиСпособаРасчетов,
				ПараметрыОперацииЧека.ИмяКомандыПробитияЧека);
		Иначе
			ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаПозицийЧекаПоДокументуПоставки(
				ПараметрыОперацииФискализацииЧека, 
				ПараметрыОперацииЧека.ОбъектыРасчетовСПризнакамиСпособаРасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаТаблицаОплат(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	Если ПараметрыОперацииЧека.ЕдиныйЧек Тогда
		
		ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаТаблицаОплатЕдиныйЧек(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека.ДокументыЕдиногоЧека);
		
	Иначе
		
		Если ДокументОплатыСВозможностьюПробитияЧеков(ПараметрыОперацииЧека.ДокументСсылка) Тогда
			ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаТаблицыОплатПоДокументуОплаты(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека.СуммаДокумента);
		Иначе
			// Требуется пересчет суммы документа в связи с возможным исключеним из чека возвратной тары
			СуммаПоставки = 0;
			Для Каждого СтрокаПозицииЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
				СуммаПоставки = СуммаПоставки + СтрокаПозицииЧека.Сумма;
			КонецЦикла;
			СуммаПоставки = ?(СуммаПоставки > 0, СуммаПоставки, ПараметрыОперацииЧека.СуммаДокумента);
			
			Если НЕ ПараметрыОперацииЧека.Свойство("ЗаданныйПризнакСпособаРасчета")
				ИЛИ ПараметрыОперацииЧека.ЗаданныйПризнакСпособаРасчета = "<Авто>" Тогда
				
				УточнениеТипаОплатПоСуммам = ?(
					ПараметрыОперацииЧека.Свойство("УточнениеТипаОплатПоСуммам"),
					ПараметрыОперацииЧека.УточнениеТипаОплатПоСуммам,
					Неопределено);
				
				СтруктураОплатДокументаПоставки = РассчитатьСтруктуруОплатДокументаПоставки(
					ПараметрыОперацииЧека.ПризнакиСпособаРасчетаАвто,
					СуммаПоставки,
					,
					УточнениеТипаОплатПоСуммам);
				
				ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаТаблицыОплатПоДокументуПоставки(
					ПараметрыОперацииФискализацииЧека,
					СтруктураОплатДокументаПоставки);
					
			Иначе
				
				УточнениеТипаОплатПоСуммам = Неопределено;
				Если ПараметрыОперацииЧека.Свойство("УточнениеТипаОплатПоСуммам") Тогда
					УточнениеТипаОплатПоСуммам = ПараметрыОперацииЧека.УточнениеТипаОплатПоСуммам;
				КонецЕсли;
				
				СтруктураОплатДокументаПоставки = РассчитатьСтруктуруОплатДокументаПоставки(
					ПараметрыОперацииЧека.ОбъектыРасчетовСПризнакамиСпособаРасчетов, 
					СуммаПоставки,
					Истина,
					УточнениеТипаОплатПоСуммам);
					
				ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаТаблицыОплатПоДокументуПоставки(
					ПараметрыОперацииФискализацииЧека,
					СтруктураОплатДокументаПоставки);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыФискальногоЧекаПараметрыКоррекции(ПараметрыОперацииФискализацииЧека, ПараметрыОперацииЧека)
	
	Если ПараметрыОперацииЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции Тогда
		
		ИмяРеквизита = "ДокументОснование";
		
		ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьПараметрыКоррекции(
			ПараметрыОперацииФискализацииЧека,
			?(ПараметрыОперацииЧека.ВидЧекаКоррекции = Перечисления.ВидыЧековКоррекции.ИсправлениеОшибки,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОперацииЧека.ДокументСсылка, ИмяРеквизита),
				Неопределено),
			ПараметрыОперацииЧека.ВидЧекаКоррекции,
			ПараметрыОперацииЧека.ДанныеКоррекции);
		
	Иначе
		
		ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаУдалитьПараметрыКоррекции(ПараметрыОперацииФискализацииЧека);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Функция возвращает поддерживаемые форматы ФФД в прикладном решении.
//
// Возвращаемое значение:
//  СписокЗначений Из Строка - 
//
Функция ПолучитьПоддерживаемыйФорматыФФД() Экспорт
	
	ФорматыФФД = Новый СписокЗначений();
	ФорматыФФД.Добавить("1.0");
	ФорматыФФД.Добавить("1.0.5");
	ФорматыФФД.Добавить("1.1");
	ФорматыФФД.Добавить("1.2");
	
	Возврат ФорматыФФД;
	
КонецФункции

Функция РазрешеноИспользованиеПодключаемогоОборудования()

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");

КонецФункции

// Проверяет, настроена ли возможность ввода фискального чека по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, из которого предполагается ввод фискального чека
// 	Форма - ФормаКлиентскогоПриложения - Форма документа, из которой предполагается ввод фискального чека
// Возвращаемое значение:
// 	Булево - Истина, если разрешен ввод фискальных чеков.
Функция РазрешеноПробитиеФискальныхЧековПоДокументу(ДокументСсылка, Форма)
	
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	
	Возврат МодульЛокализации.РазрешеноПробитиеФискальныхЧековПоДокументу(Форма);
	
КонецФункции

Функция ПодключенноеОборудование(Организация, ТорговыйОбъект = Неопределено)
	
	Если ТорговыйОбъект = Неопределено Тогда
		Возврат ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеПоОрганизацииВзаимодействующееОнлайнС1С(Организация);
	Иначе
		Возврат ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеПоТорговомуОбъектуВзаимодействующееОнлайнС1С(ТорговыйОбъект);
	КонецЕсли;
	
КонецФункции

Функция СтруктураТаблицыВидовЧековПоДокументу()
	
	ВидыЧеков = Новый ТаблицаЗначений();
	ВидыЧеков.Колонки.Добавить("ТипФискальногоДокумента"	  , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыФискальныхДокументовККТ"));
	ВидыЧеков.Колонки.Добавить("ТипРасчетаДенежнымиСредствами", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетаДенежнымиСредствами"));
	ВидыЧеков.Колонки.Добавить("ВидЧекаКоррекции"			  , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЧековКоррекции"));
	
	Возврат ВидыЧеков;
	
КонецФункции

// Возвращает таблицу видов возможных фискальных чеков
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, из формы которого пробивается чек.
// 	ИмяКомандыПробитияЧека - Строка, Неопределено - Имя команды пробития чека
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Талица видов возможных фискальных чеков
Функция ПараметрыВидовФискальногоЧека(ДокументСсылка, ИмяКомандыПробитияЧека)
	
	ПараметрыВидовФискальногоЧека = СтруктураТаблицыВидовЧековПоДокументу();
	
	МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ДокументСсылка.Метаданные().Имя);
	
	Если ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка)
		И НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
		И ИмяКомандыПробитияЧека <> Неопределено Тогда
		
		ИмяРеквизита = "ХозяйственнаяОперация";
		
		МодульЛокализации.ЗаполнитьВидыФискальныхЧековПоДокументу(
			ПараметрыВидовФискальногоЧека,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, ИмяРеквизита),
			ИмяКомандыПробитияЧека);
		
	Иначе
		
		МодульЛокализации.ЗаполнитьВидыФискальныхЧековПоДокументу(
			ПараметрыВидовФискальногоЧека,
			Неопределено,
			ИмяКомандыПробитияЧека);
		
	КонецЕсли;
	
	Возврат ПараметрыВидовФискальногоЧека;
	
КонецФункции

// Заполняет переданную таблицу в параметре "ТаблицаДокументовЕдиногоЧека" найденными документами,
// которые могут участвовать в едином чеке.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, для которого производится поиск возможных документов единого чека
// 	ТаблицаДокументовЕдиногоЧека - ТаблицаЗначений - Изменяемый параметр, заполняется найденными документами,
//		которые могут участвовать в едином чеке.
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ДокументыЕдиногоЧекаЗаполнитьТаблицу(ДокументСсылка, ТаблицаДокументовЕдиногоЧека, ИмяКомандыПробитияЧека)
	
	ДокументыОплаты = ДокументОплаты(ДокументСсылка);
	ОбъектыРасчетов = ОбъектыРасчетовДокументаОплаты(ДокументыОплаты, ИмяКомандыПробитияЧека);
	
	ИмяРеквизитаСуммаДокумента = "СуммаДокумента";
	ИмяРеквизитаСуммаРегл = "СуммаРегл";
	
	// Документы оплаты
	Для Каждого ДокументОплаты Из ДокументыОплаты Цикл
		Если НЕ ДоступнаВозможностьПробитияЕдиногоЧека(ДокументОплаты, ОбъектыРасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокументЕдиногоЧека = ТаблицаДокументовЕдиногоЧека.Добавить();
		СтрокаДокументЕдиногоЧека.Документ = ДокументОплаты;
		СтрокаДокументЕдиногоЧека.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументОплаты,
			ИмяРеквизитаСуммаДокумента);
	КонецЦикла;
	
	// Документы взаимозачета
	Если ОбъектыРасчетов <> Неопределено
		И ПоВсемОбъектамРасчетовВозможностиПробитиеЕдиногоЧекаПоставки(ОбъектыРасчетов) Тогда
		
		ДокументыВзаимозачета = ДокументыВзаимозачета(ОбъектыРасчетов.ВыгрузитьКолонку("Заказ"));
		
		Для Каждого ДокументВзаимозачета Из ДокументыВзаимозачета Цикл
			СтрокаДокументЕдиногоЧека = ТаблицаДокументовЕдиногоЧека.Добавить();
			СтрокаДокументЕдиногоЧека.Документ = ДокументВзаимозачета;
			СтрокаДокументЕдиногоЧека.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДокументВзаимозачета,
				ИмяРеквизитаСуммаРегл);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаДокументовЕдиногоЧека.Количество() > 0 Тогда
		Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
			Если ДокументПоставкиСВозможностьюПробитияЕдиногоЧека(СтрокаОбъектыРасчетов.Заказ) Тогда
				СтрокаДокументЕдиногоЧека = ТаблицаДокументовЕдиногоЧека.Добавить();
				СтрокаДокументЕдиногоЧека.Документ = СтрокаОбъектыРасчетов.Заказ;
				СтрокаДокументЕдиногоЧека.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаОбъектыРасчетов.Заказ,
					ИмяРеквизитаСуммаДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредоплатаПоДокументуПоставкиВРамкахОдногоДняЛокализация(ДокументСсылка)
	
	СуммаПредоплаты = 0;
	
	ИмяРеквизитаСуммаДокумента = "СуммаДокумента";
	ДокументыОплаты = ДокументОплатыВРамкахОдногоДня(ДокументСсылка);
	
	ОбъектыРасчетов = Новый Массив;
	ОбъектыРасчетов.Добавить(Новый Структура("Заказ", ДокументСсылка));
	
	// Документы оплаты
	Для Каждого ДокументОплаты Из ДокументыОплаты Цикл
		Если НЕ ПоДокументуОплатыПробитЧек(ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДатаОплатыОтличаетсяОтДатыПоставки(ДокументОплаты, ОбъектыРасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, ИмяРеквизитаСуммаДокумента);
		СуммаПредоплаты = СуммаПредоплаты + СуммаДокумента;
	КонецЦикла;
	
	Возврат СуммаПредоплаты;
	
КонецФункции

Функция ДокументОплатыВРамкахОдногоДня(ДокументСсылка)
	
	ДокументОплаты = Новый Массив;
	
	Если ДокументОплатыСВозможностьюПробитияВРамкахОдногоДня(ДокументСсылка) Тогда
		ДокументОплаты.Добавить(ДокументСсылка);
	Иначе
		ДокументОплаты = ДокументОплатыПоДокументуПоставкиВРамкахОдногоДня(ДокументСсылка);
	КонецЕсли;
	
	Возврат ДокументОплаты;
	
КонецФункции

Функция ДокументОплаты(ДокументСсылка)
	
	ДокументОплаты = Новый Массив;
	
	Если ДокументОплатыСВозможностьюПробитияЕдиногоЧека(ДокументСсылка) Тогда
		ДокументОплаты.Добавить(ДокументСсылка);
	Иначе
		ДокументОплаты = ДокументОплатыПоДокументуПоставкиВРамкахЕдиногоЧека(ДокументСсылка);
	КонецЕсли;
	
	Возврат ДокументОплаты;
	
КонецФункции

Функция ДокументыВзаимозачета(ДокументыПоставки)
	
	ДокументыВзаимозачета = Новый Массив;
	
	МассивВидовОпераций = Новый Массив;
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПереносАвансаКлиентаОрганизацияКонтрагент);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ОплатаПодарочнымСертификатом);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка КАК Ссылка,
	|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ВзаимозачетЗадолженностиДебиторскаяЗадолженность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|			И ОбъектыРасчетов.Объект В (&ДокументыПоставки)
	|ГДЕ
	|	ВзаимозачетЗадолженностиДебиторскаяЗадолженность.Ссылка.ВидОперации В (&ВидыОпераций)
	|	И ВзаимозачетЗадолженностиДебиторскаяЗадолженность.ТипРасчетов = &ТипРасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("ВидыОпераций", МассивВидовОпераций);
	Запрос.УстановитьПараметр("ТипРасчетов", Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	Запрос.УстановитьПараметр("ДокументыПоставки", ДокументыПоставки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументыВзаимозачета.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДокументыВзаимозачета;
	
КонецФункции

Функция ДоступнаВозможностьПробитияЕдиногоЧека(ДокументОплаты, ОбъектыРасчетов)
	
	Если ДокументОплаты = Неопределено ИЛИ ОбъектыРасчетов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПоВсемОбъектамРасчетовВозможностиПробитиеЕдиногоЧекаПоставки(ОбъектыРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаОплатыОтличаетсяОтДатыПоставки(ДокументОплаты, ОбъектыРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоДокументуОплатыПробитЧек(ДокументОплаты) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ПоВсемОбъектамРасчетовНеобходимоПробитьЧек(ОбъектыРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьУПДПоДокументуРеализацииСОСУ(ОбъектыРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДокументОплатыСВозможностьюПробитияЕдиногоЧека(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ПриходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнойКарте.Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ОперацияПоПлатежнойКарте
	|ГДЕ
	|	ОперацияПоПлатежнойКарте.Ссылка = &Ссылка
	|	И (ОперацияПоПлатежнойКарте.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		ИЛИ ОперацияПоПлатежнойКарте.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	И ОперацияПоПлатежнойКарте.Проведен";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ДокументОплатыСВозможностьюПробитияВРамкахОдногоДня(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ПриходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнойКарте.Ссылка
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ОперацияПоПлатежнойКарте
	|ГДЕ
	|	ОперацияПоПлатежнойКарте.Ссылка = &Ссылка
	|	И (ОперацияПоПлатежнойКарте.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		ИЛИ ОперацияПоПлатежнойКарте.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	И ОперацияПоПлатежнойКарте.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредств.Ссылка = &Ссылка
	|	И ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ПоступлениеБезналичныхДенежныхСредств.ПроведеноБанком
	|	И ПоступлениеБезналичныхДенежныхСредств.Проведен";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ДокументПоставкиСВозможностьюПробитияЕдиногоЧека(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктВыполненныхРабот.Ссылка
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка = &Ссылка
	|	И АктВыполненныхРабот.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|	И ВозвратТоваровОтКлиента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|	И РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|	И РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|	И РеализацияТоваровУслуг.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПрочихАктивов.Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|ГДЕ
	|	РеализацияУслугПрочихАктивов.Ссылка = &Ссылка
	|	И (РеализацияУслугПрочихАктивов.ХозяйственнаяОперация
	|			= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		ИЛИ РеализацияУслугПрочихАктивов.ХозяйственнаяОперация
	|			= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов))
	|	И РеализацияУслугПрочихАктивов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|	И РеализацияУслугПрочихАктивов.Проведен";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПоВсемОбъектамРасчетовВозможностиПробитиеЕдиногоЧекаПоставки(ОбъектыРасчетов)
	
	ПоВсемОбъектамРасчетовВозможностиПробитиеЕдиногоЧекаПоставки = Истина;
	
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		Если НЕ ДокументПоставкиСВозможностьюПробитияЕдиногоЧека(СтрокаОбъектыРасчетов.Заказ) Тогда
			
			ПоВсемОбъектамРасчетовВозможностиПробитиеЕдиногоЧекаПоставки = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоВсемОбъектамРасчетовВозможностиПробитиеЕдиногоЧекаПоставки;
	
КонецФункции

Функция ДатаОплатыОтличаетсяОтДатыПоставки(ДокументОплаты, ОбъектыРасчетов)
	
	ДатаОплатыОтличаетсяОтДатыПоставки = Ложь;
	ИмяРеквизитаДата = "Дата";
	
	ДатаДокументаОплаты = НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, ИмяРеквизитаДата));
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		ДатаОбъектаРасчета = НачалоДня(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбъектыРасчетов.Заказ, ИмяРеквизитаДата));
		
		Если ДатаДокументаОплаты <> ДатаОбъектаРасчета Тогда
			ДатаОплатыОтличаетсяОтДатыПоставки = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОплатыОтличаетсяОтДатыПоставки;
	
КонецФункции

Функция ДатаОплатыБольшеДатыПоставки(ДокументОплаты, ОбъектыРасчетов)
	
	ДатаОплатыОтличаетсяОтДатыПоставки = Ложь;
	ИмяРеквизитаДата = "Дата";
	
	ДатаДокументаОплаты = НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, ИмяРеквизитаДата));
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		ДатаОбъектаРасчета = НачалоДня(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбъектыРасчетов.Заказ, ИмяРеквизитаДата));
		
		Если ДатаДокументаОплаты > ДатаОбъектаРасчета Тогда
			ДатаОплатыОтличаетсяОтДатыПоставки = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОплатыОтличаетсяОтДатыПоставки;
	
КонецФункции

Функция ДатаОплатыМеньшеДатыПоставки(ДокументОплаты, ОбъектыРасчетов)
	
	ДатаОплатыОтличаетсяОтДатыПоставки = Ложь;
	ИмяРеквизитаДата = "Дата";
	
	ДатаДокументаОплаты = НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, ИмяРеквизитаДата));
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		ДатаОбъектаРасчета = НачалоДня(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбъектыРасчетов.Заказ, ИмяРеквизитаДата));
		
		Если ДатаДокументаОплаты < ДатаОбъектаРасчета Тогда
			ДатаОплатыОтличаетсяОтДатыПоставки = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОплатыОтличаетсяОтДатыПоставки;
	
КонецФункции

Функция ПоДокументуОплатыПробитЧек(ДокументОплаты)
	
	ПоДокументуОплатыПробитЧек = Ложь;
	
	ДанныеФискальнойОперации
		 = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ДокументОплаты);
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		ПоДокументуОплатыПробитЧек = Истина;
	КонецЕсли;
	
	Возврат ПоДокументуОплатыПробитЧек;
	
КонецФункции

Функция ПоВсемОбъектамРасчетовНеобходимоПробитьЧек(ОбъектыРасчетов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоВсемОбъектамРасчетовНеобходимоПробитьЧек = Истина;
	
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		Если ФормированиеФискальныхЧековСервер.ДанныеПробитогоФискальногоЧекаПоДокументу(СтрокаОбъектыРасчетов.Заказ) <> Неопределено Тогда
			ПоВсемОбъектамРасчетовНеобходимоПробитьЧек = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоВсемОбъектамРасчетовНеобходимоПробитьЧек;
	
КонецФункции

Функция ЕстьУПДПоДокументуРеализацииСОСУ(ОбъектыРасчетов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьУПДПоДокументуРеализацииСОСУ = Ложь;
	
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		Если ТипЗнч(СтрокаОбъектыРасчетов.Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			СтатусДокументооборота = ОбменСКонтрагентами.СтатусДокументооборота(СтрокаОбъектыРасчетов.Заказ);
			Если СтатусДокументооборота.ЭлектронныйДокумент <> Неопределено
				И ОбменСКонтрагентамиУТ.ЕстьТоварыОСУ(СтрокаОбъектыРасчетов.Заказ) Тогда
				ЕстьУПДПоДокументуРеализацииСОСУ = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьУПДПоДокументуРеализацииСОСУ;
	
КонецФункции

Функция СуммаОплатыБольшеСуммыПоставок(ДокументОплаты, ОбъектыРасчетов)
	СуммаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОплаты, "СуммаДокумента");
	
	СуммаПоставки = 0;
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		ИмяРеквизитаСуммыЗаказа = "СуммаДокумента";
		Если ТипЗнч(СтрокаОбъектыРасчетов.Заказ) = Тип("СправочникСсылка.ПодарочныеСертификаты") Тогда
			ИмяРеквизитаСуммыЗаказа = "Владелец.Номинал";
		КонецЕсли;
		СуммаПоставки = СуммаПоставки + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбъектыРасчетов.Заказ, ИмяРеквизитаСуммыЗаказа);
	КонецЦикла;
	
	Возврат СуммаОплаты > СуммаПоставки;
КонецФункции

// Определяет, есть ли среди объектов расчета авансовые объекты расчетов
// 
// Параметры:
// 	ОбъектыРасчетов - ТаблицаЗначений - Список объектов расчетов
// Возвращаемое значение:
// 	Булево - Флаг, есть ли среди объектов расчетов авансовые объекты расчетов
Функция ОбъектыРасчетовДокументаАвансовые(ОбъектыРасчетов)
	
	ОбъектыРасчетовДокументаАвансовые = Истина;
	
	Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл
		
		Если ЗначениеЗаполнено(ОбъектРасчетов.Заказ)
			И НЕ ОбъектРасчетовАвансовый(ОбъектРасчетов.Заказ) Тогда
			
			ОбъектыРасчетовДокументаАвансовые = Ложь;
			Прервать; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыРасчетовДокументаАвансовые;
	
КонецФункции

Функция ОбъектыРасчетовДокументаПредоплатные(ОбъектыРасчетов)
	
	ОбъектыРасчетовДокументаПредоплатные = Истина;
	
	Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл
		
		Если ЗначениеЗаполнено(ОбъектРасчетов.Заказ)
			И НЕ ТипЗнч(ОбъектРасчетов.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			ОбъектыРасчетовДокументаПредоплатные = Ложь;
			Прервать; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыРасчетовДокументаПредоплатные;
	
КонецФункции

Функция ОбъектыРасчетовРТУКПредоплате(ОбъектыРасчетов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектыРасчетовРТУКПредоплате = (ОбъектыРасчетов.Количество() > 0);
	КПредоплате = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате;
	
	Для Каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		Если ТипЗнч(СтрокаОбъектыРасчетов.Заказ) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбъектыРасчетов.Заказ, "Статус") <> КПредоплате Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыРасчетовРТУКПредоплате;
	
КонецФункции

// Определяет, равна ли сумма оплаты сумме объектов расчетов
// 
// Параметры:
// 	СуммаДокумента - Число - Сумма оплаты
// 	ОбъектыРасчетов - ТаблицаЗначений - Список объектов расчетов
// Возвращаемое значение:
// 	Булево - Флаг, равна ли сумма оплаты сумме документов расчетов
Функция СуммаОплатыРавнаСуммеОбъектовРасчетов(СуммаДокумента, ОбъектыРасчетов)
	
	СуммаОбъектовРасчетов = 0;
	
	Для Каждого ОбъектРасчетов Из ОбъектыРасчетов Цикл
		СуммаОбъектаРасчета = 0;
		
		Попытка
			СуммаОбъектаРасчета = ФормированиеПараметровФискальногоЧекаСервер.ПозицииНоменклатурыПоДокументу(ОбъектРасчетов.Заказ).Итог("Сумма");
		Исключение
			СуммаОбъектаРасчета = ОбъектРасчетов.Сумма;
		КонецПопытки;
		
		СуммаОбъектовРасчетов = СуммаОбъектовРасчетов + СуммаОбъектаРасчета; 
	КонецЦикла;
	
	Возврат СуммаОбъектовРасчетов = СуммаДокумента;
	
КонецФункции

Функция ОпределитьАвтоПризнакСпособаРасчетовПоОфлайнРасчетам(ПараметрыОперации, ДанныеПоОбъектуРасчетов)
	
	ДокументСсылка = ПараметрыОперации.ДокументСсылка;
	
	ПризнакиСпособаРасчетаАвто = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент КАК ДокументРасчета,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.ПорядокОперации КАК ПорядокОперации,
	|	СУММА(Расчеты.ДолгКлиента) КАК ДолгКлиента,
	|	СУММА(Расчеты.НашДолг) КАК НашДолг,
	|	ВЫБОР
	|		КОГДА СУММА(Расчеты.Оплачено) + СУММА(Расчеты.Отгружено) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(Расчеты.Зачтено) = 0
	|						ТОГДА 0
	|					ИНАЧЕ СУММА(Расчеты.Зачтено)
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(Расчеты.Оплачено) + СУММА(Расчеты.Отгружено)
	|	КОНЕЦ КАК СуммаПоДокументу
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		РасчетыПоСрокамОстатки.ЗаказКлиента КАК ОбъектРасчетов,
	|		РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|		"""" КАК ДокументРегистратор,
	|		ДАТАВРЕМЯ(0001,01,01,0,0,0) КАК Период,
	|		0 КАК ПорядокОперации,
	|		0 КАК Заказано,
	|		0 КАК Отгружено,
	|		0 КАК Зачтено,
	|		0 КАК Оплачено,
	|		РасчетыПоСрокамОстатки.ДолгРеглНачальныйОстаток КАК ДолгКлиента,
	|		РасчетыПоСрокамОстатки.ПредоплатаРеглНачальныйОстаток КАК НашДолг
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам.ОстаткиИОбороты(, &КонецПериода, , , ЗаказКлиента = &ОбъектРасчетов) КАК РасчетыПоСрокамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоСрокам.ЗаказКлиента,
	|		РасчетыПоСрокам.РасчетныйДокумент,
	|		РасчетыПоСрокам.Регистратор,
	|		РасчетыПоСрокам.Период,
	|		РасчетыПоСрокам.РасчетныйДокумент = РасчетыПоСрокам.Регистратор,
	|		0,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|				ТОГДА -РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ТОГДА РасчетыПоСрокам.ДолгРегл - РасчетыПоСрокам.ПредоплатаРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|					И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.Регистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.КорректировкаЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|						ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|				ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|						ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|						ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл - РасчетыПоСрокам.ДолгРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|				ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|					И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.Регистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.КорректировкаЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|					И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.Регистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.КорректировкаЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ -РасчетыПоСрокам.ДолгРегл
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|			ИНАЧЕ -РасчетыПоСрокам.ПредоплатаРегл
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыПоСрокам
	|	ГДЕ
	|		(РасчетыПоСрокам.ДолгРегл <> 0
	|				ИЛИ РасчетыПоСрокам.ПредоплатаРегл <> 0)
	|		И РасчетыПоСрокам.Период <= &КонецПериода
	|		И РасчетыПоСрокам.ЗаказКлиента = &ОбъектРасчетов) КАК Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ),
	|	Расчеты.ПорядокОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ),
	|	Расчеты.ДокументРегистратор,
	|	ПорядокОперации";
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОбъектРасчетов", ДанныеПоОбъектуРасчетов.ОбъектРасчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДолгОрганизации = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДокументРегистратор = ДокументСсылка
			ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование") = Выборка.ДокументРегистратор) Тогда
			
			СтруктураПризнака = Новый Структура;
			СтруктураПризнака.Вставить("ОбъектРасчета");
			СтруктураПризнака.Вставить("ДокументРасчета");
			СтруктураПризнака.Вставить("ДолгОрганизацииНаНачало");
			СтруктураПризнака.Вставить("ДолгКонтрагентаНаНачало");
			СтруктураПризнака.Вставить("Оплата");
			СтруктураПризнака.Вставить("Поставка");
			СтруктураПризнака.Вставить("ДолгОрганизацииНаКонец");
			СтруктураПризнака.Вставить("ДолгКонтрагентаНаКонец");
			СтруктураПризнака.Вставить("ПризнакСпособаРасчета");
			СтруктураПризнака.Вставить("Заказ");
			
			
			СтруктураПризнака.ОбъектРасчета = ДанныеПоОбъектуРасчетов.Заказ;
			
			СтруктураПризнака.ДокументРасчета = ?(Выборка.ДокументРасчета = Выборка.ДокументРегистратор, Неопределено, Выборка.ДокументРасчета);
			СтруктураПризнака.ДолгОрганизацииНаНачало = ?(ДолгОрганизации < 0, МодульЧисла(ДолгОрганизации), 0); 
			СтруктураПризнака.ДолгКонтрагентаНаНачало = ?(ДолгОрганизации > 0, МодульЧисла(ДолгОрганизации), 0);
			
			Если ДокументПоставкиСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
				СтруктураПризнака.Поставка = МодульЧисла(Выборка.ДолгКлиента) + МодульЧисла(Выборка.НашДолг);
			Иначе
				СтруктураПризнака.Оплата = МодульЧисла(Выборка.ДолгКлиента) + МодульЧисла(Выборка.НашДолг);
			КонецЕсли;
			
			ПризнакиСпособаРасчетаАвто.Добавить(СтруктураПризнака);
		КонецЕсли;
		
		ДолгОрганизации = ДолгОрганизации + Выборка.ДолгКлиента + Выборка.НашДолг; // Важно, есть отличия в хранении авансов между онлайн и офлайн расчетами в знаке числа "НашДолг"!
		
	КонецЦикла;
	
	Возврат ПризнакиСпособаРасчетаАвто;
	
КонецФункции

Функция ОпределитьАвтоПризнакСпособаРасчетовПоОнлайнРасчетам(ПараметрыОперации, ДанныеПоОбъектуРасчетов)
	
	ДокументСсылка = ПараметрыОперации.ДокументСсылка;
	
	ПризнакиСпособаРасчетаАвто = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент КАК ДокументРасчета,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.ДатаВозникновения КАК ДатаВозникновения,
	|	Расчеты.ПорядокОперации КАК ПорядокОперации,
	|	СУММА(Расчеты.ДолгКлиента) КАК ДолгКлиента,
	|	СУММА(Расчеты.НашДолг) КАК НашДолг,
	|	ВЫБОР
	|		КОГДА СУММА(Расчеты.Оплачено) + СУММА(Расчеты.Отгружено) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(Расчеты.Зачтено) = 0
	|						ТОГДА 0
	|					ИНАЧЕ СУММА(Расчеты.Зачтено)
	|				КОНЕЦ
	|		ИНАЧЕ СУММА(Расчеты.Оплачено) + СУММА(Расчеты.Отгружено)
	|	КОНЕЦ КАК СуммаПоДокументу
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		РасчетыПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|		"""" КАК ДокументРегистратор,
	|		РасчетыПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|		РасчетыПоСрокамОстатки.ДатаВозникновения КАК ДатаВозникновения,
	|		ДАТАВРЕМЯ(0001,01,01,0,0,0) КАК Период,
	|		"""" КАК ПорядокОперации,
	|		0 КАК Заказано,
	|		0 КАК Отгружено,
	|		0 КАК Зачтено,
	|		0 КАК Оплачено,
	|		РасчетыПоСрокамОстатки.ДолгРеглНачальныйОстаток КАК ДолгКлиента,
	|		РасчетыПоСрокамОстатки.ПредоплатаРеглНачальныйОстаток КАК НашДолг
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.ОстаткиИОбороты(, &КонецПериода, , , ОбъектРасчетов = &ОбъектРасчетов) КАК РасчетыПоСрокамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыПоСрокам.ОбъектРасчетов,
	|		РасчетыПоСрокам.РасчетныйДокумент,
	|		РасчетыПоСрокам.ДокументРегистратор,
	|		РасчетыПоСрокам.ДатаВозникновения,
	|		РасчетыПоСрокам.ДатаПлановогоПогашения,
	|		РасчетыПоСрокам.Период,
	|		РасчетыПоСрокам.ПорядокОперации,
	|		0,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|				ТОГДА -РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ТОГДА РасчетыПоСрокам.ДолгРегл - РасчетыПоСрокам.ПредоплатаРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса))
	|					И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.КорректировкаЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|						ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|				ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|						ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|						ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл - РасчетыПоСрокам.ДолгРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|				ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|					И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.КорректировкаЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|					И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.КорректировкаЗадолженности))
	|				ТОГДА РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыПоСрокам.ДолгРегл
	|			ИНАЧЕ -РасчетыПоСрокам.ДолгРегл
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|			ИНАЧЕ -РасчетыПоСрокам.ПредоплатаРегл
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
	|		
	|	ГДЕ
	|		(РасчетыПоСрокам.ДолгРегл <> 0
	|			ИЛИ РасчетыПоСрокам.ПредоплатаРегл <> 0)
	|		И РасчетыПоСрокам.Период <= &КонецПериода
	|		И РасчетыПоСрокам.ОбъектРасчетов = &ОбъектРасчетов) КАК Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.ДатаВозникновения,
	|	НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ),
	|	Расчеты.ПорядокОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокОперации,
	|	Расчеты.РасчетныйДокумент = Расчеты.ДокументРегистратор";
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОбъектРасчетов", ДанныеПоОбъектуРасчетов.ОбъектРасчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСтруктураПризнака = Неопределено;
	
	ДолгОрганизации = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДокументРегистратор = ДокументСсылка
			Или (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование") = Выборка.ДокументРегистратор) Тогда
			
			СтруктураПризнака = Новый Структура;
			СтруктураПризнака.Вставить("ОбъектРасчета");
			СтруктураПризнака.Вставить("ДокументРасчета");
			СтруктураПризнака.Вставить("ДолгОрганизацииНаНачало", 0);
			СтруктураПризнака.Вставить("ДолгКонтрагентаНаНачало", 0);
			СтруктураПризнака.Вставить("Оплата", 0);
			СтруктураПризнака.Вставить("Поставка", 0);
			СтруктураПризнака.Вставить("ДолгОрганизацииНаКонец", 0);
			СтруктураПризнака.Вставить("ДолгКонтрагентаНаКонец", 0);
			СтруктураПризнака.Вставить("ПризнакСпособаРасчета");
			СтруктураПризнака.Вставить("Заказ");
			
			СтруктураПризнака.ОбъектРасчета = ДанныеПоОбъектуРасчетов.Заказ;
			
			СтруктураПризнака.ДокументРасчета = ?(Выборка.ДокументРасчета = Выборка.ДокументРегистратор, Неопределено, Выборка.ДокументРасчета);
			СтруктураПризнака.ДолгОрганизацииНаНачало = ?(ДолгОрганизации < 0, МодульЧисла(ДолгОрганизации), 0); 
			СтруктураПризнака.ДолгКонтрагентаНаНачало = ?(ДолгОрганизации > 0, МодульЧисла(ДолгОрганизации), 0);
			
			Если ДокументПоставкиСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
				СтруктураПризнака.Поставка = МодульЧисла(Выборка.ДолгКлиента) + МодульЧисла(Выборка.НашДолг);
			Иначе
				СтруктураПризнака.Оплата = МодульЧисла(Выборка.ДолгКлиента) + МодульЧисла(Выборка.НашДолг);
			КонецЕсли;
			
			Если СтруктураПризнака.Поставка > 0 ИЛИ СтруктураПризнака.Оплата > 0 Тогда
				Если ТекущаяСтруктураПризнака = Неопределено Тогда
					ПризнакиСпособаРасчетаАвто.Добавить(СтруктураПризнака);
					ТекущаяСтруктураПризнака = СтруктураПризнака;
				ИначеЕсли ТекущаяСтруктураПризнака.ОбъектРасчета = СтруктураПризнака.ОбъектРасчета
					И ТекущаяСтруктураПризнака.ДокументРасчета = СтруктураПризнака.ДокументРасчета Тогда
					ТекущаяСтруктураПризнака.ДолгОрганизацииНаНачало = ТекущаяСтруктураПризнака.ДолгОрганизацииНаНачало
						 + СтруктураПризнака.ДолгОрганизацииНаНачало;
					ТекущаяСтруктураПризнака.ДолгКонтрагентаНаНачало = ТекущаяСтруктураПризнака.ДолгКонтрагентаНаНачало
						 + СтруктураПризнака.ДолгКонтрагентаНаНачало;
					ТекущаяСтруктураПризнака.Оплата = ТекущаяСтруктураПризнака.Оплата + СтруктураПризнака.Оплата;
					ТекущаяСтруктураПризнака.Поставка = ТекущаяСтруктураПризнака.Поставка + СтруктураПризнака.Поставка;
				Иначе
					ПризнакиСпособаРасчетаАвто.Добавить(СтруктураПризнака);
					ТекущаяСтруктураПризнака = СтруктураПризнака;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДолгОрганизации = ДолгОрганизации + Выборка.ДолгКлиента - Выборка.НашДолг;  // Важно, есть отличия в хранении авансов между онлайн и офлайн расчетами в знаке числа "НашДолг"!
		
	КонецЦикла;
	
	Возврат ПризнакиСпособаРасчетаАвто;
	
КонецФункции

Функция МодульЧисла(Число)
	Возврат Макс(Число, -Число);
КонецФункции

// Проверяет, существует ли таблица в метаданных документа
// 
// Параметры:
// 	ИмяТаблицы - Строка - Имя таблицы, которая проверяется на существование в объекте
// 	МетаданныеОбъекта - ОбъектМетаданныхДокумент - Метаданные объекта, в котором ищется таблица
// Возвращаемое значение:
// 	Булево - Описание
Функция ЕстьТаблицаОбъекта(ИмяТаблицы, МетаданныеОбъекта)

	Возврат НЕ (МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТаблицы) = Неопределено);

КонецФункции

Функция ДокументыРазрешенныеКВводуПерсональныхДанных()
	
	ДокументыРазрешенныеКВводуПерсональныхДанных = Новый Массив;
	ДокументыРазрешенныеКВводуПерсональныхДанных.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ДокументыРазрешенныеКВводуПерсональныхДанных.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ДокументыРазрешенныеКВводуПерсональныхДанных.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	ДокументыРазрешенныеКВводуПерсональныхДанных.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ДокументыРазрешенныеКВводуПерсональныхДанных.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));

	Возврат ДокументыРазрешенныеКВводуПерсональныхДанных;
	
КонецФункции

Функция РассчитатьСтруктуруОплатДокументаПоставки(ПризнакиСпособаРасчетаАвто,
	СуммаДокумента, ПризнакСпособаРасчетаЗаданВручную = Ложь, УточнениеТипаОплатПоСуммам = Неопределено)
	
	СуммаПредоплаты       = 0;
	СуммаОплатыНаличные   = 0;
	СуммаОплатыЭлектронно = 0;
	СуммаПостоплаты       = 0;
	
	Если ПризнакСпособаРасчетаЗаданВручную Тогда
		
		Если УточнениеТипаОплатПоСуммам = Неопределено Тогда
			
			Для Каждого СтрокаПризнаковСпособаРасчета Из ПризнакиСпособаРасчетаАвто Цикл
				Если СтрокаПризнаковСпособаРасчета.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
					СуммаПредоплаты = СтрокаПризнаковСпособаРасчета.Сумма;
				ИначеЕсли СтрокаПризнаковСпособаРасчета.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
					СуммаПостоплаты = СтрокаПризнаковСпособаРасчета.Сумма;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			СуммаПредоплаты       = УточнениеТипаОплатПоСуммам.СуммаПредоплаты;
			СуммаОплатыНаличные   = УточнениеТипаОплатПоСуммам.СуммаОплатыНаличные;
			СуммаОплатыЭлектронно = УточнениеТипаОплатПоСуммам.СуммаОплатыЭлектронно;
			СуммаПостоплаты       = УточнениеТипаОплатПоСуммам.СуммаКредита;
			
		КонецЕсли;
		
	Иначе
		
		СуммаПредоплаты = 0;
		ДокументРасчета = Неопределено;
		
		Для Каждого СтрокаПризнакиСпособаРасчетаАвто Из ПризнакиСпособаРасчетаАвто Цикл
			
			Если ДокументОплатыСВозможностьюПробитияЕдиногоЧека(СтрокаПризнакиСпособаРасчетаАвто.ДокументРасчета)
				И ДокументРасчета <> СтрокаПризнакиСпособаРасчетаАвто.ДокументРасчета
				И СтрокаПризнакиСпособаРасчетаАвто.ДолгОрганизацииНаНачало > 0
				И СтрокаПризнакиСпособаРасчетаАвто.ДолгОрганизацииНаНачало = СтрокаПризнакиСпособаРасчетаАвто.Поставка Тогда
				
				ДокументРасчета = СтрокаПризнакиСпособаРасчетаАвто.ДокументРасчета;
				СуммаПредоплаты = СуммаПредоплаты + СтрокаПризнакиСпособаРасчетаАвто.ДолгОрганизацииНаНачало;
				
			Иначе
				
				СуммаПредоплаты = ?(
					ПризнакиСпособаРасчетаАвто.Количество() > 0,
					ПризнакиСпособаРасчетаАвто[0].ДолгОрганизацииНаНачало,
					0);
				
				Если УточнениеТипаОплатПоСуммам <> Неопределено Тогда
					СуммаПредоплаты = СуммаПредоплаты + УточнениеТипаОплатПоСуммам.СуммаПредоплатыВРамкахОдногоДня;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаПоставки = СуммаДокумента;
		
		Если СуммаПредоплаты > СуммаДокумента Тогда
			СуммаПредоплаты = СуммаДокумента;
			СуммаПоставки = 0;
		КонецЕсли;
		
		СуммаПостоплаты = СуммаПоставки - СуммаПредоплаты;
		Если СуммаПостоплаты < 0 Тогда
			СуммаПостоплаты = 0;
		КонецЕсли;
		
		Если СуммаПредоплаты = 0 И СуммаПостоплаты = 0 Тогда
			СуммаПостоплаты = СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктуруОплатДокументаПоставки = Новый Структура;
	СтруктуруОплатДокументаПоставки.Вставить("СуммаПредоплаты", СуммаПредоплаты);
	СтруктуруОплатДокументаПоставки.Вставить("СуммаОплатыНаличные", СуммаОплатыНаличные);
	СтруктуруОплатДокументаПоставки.Вставить("СуммаОплатыЭлектронно", СуммаОплатыЭлектронно);
	СтруктуруОплатДокументаПоставки.Вставить("СуммаПостоплаты", СуммаПостоплаты);
	
	Возврат СтруктуруОплатДокументаПоставки;
	
КонецФункции

// Возвращает товарные позиции объектов расчетов документа. Если объекты не определены, то возвращает Неопределено
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для получения товарных позиций его объектов расчетов
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Товарные позиции объектов расчетов документа
Функция ДанныеПоОбъектамРасчетовПоДокументу(ДокументСсылка, ИмяКомандыПробитияЧека)
	
	Если НЕ ДокументПоставкиСВозможностьюПробитияЧеков(ДокументСсылка)
		И НЕ ДокументОплатыСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
	
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
		Возврат ДанныеПоОбъектамРасчетовПоДокументу(ДокументОснование, ИмяКомандыПробитияЧека);
		
	ИначеЕсли ДокументПоставкиСВозможностьюПробитияЧеков(ДокументСсылка) Тогда
		
		Возврат ДанныеПоОбъектамРасчетовИзРНРасчетыСКлиентамиПоДокументам(ДокументСсылка);
		
	ИначеЕсли ЕстьТаблицаОбъекта("РасшифровкаПлатежа", ДокументСсылка.Метаданные()) Тогда
		
		Возврат ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа(ДокументСсылка);
		
	Иначе
		
		МетаданныеИмя = ДокументСсылка.Метаданные().Имя;
		МодульЛокализации = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(МетаданныеИмя);
		Возврат МодульЛокализации.ДанныеПоОбъектамРасчетовПоДокументу(ДокументСсылка, ИмяКомандыПробитияЧека, ВзаиморасчетыОбновлены());
		
	КонецЕсли;
	
КонецФункции

// Возвращает объекты расчетов с суммами оплат по документу оплаты
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ оплаты, из которого получаются объекты расчетов с суммами оплат
// Возвращаемое значение:
// 	ТаблицаЗначений - Объекты расчетов с суммами оплат
Функция ДанныеПоОбъектамРасчетовИзРасшифровкиПлатежа(ДокументСсылка)
	
	ВзаиморасчетыОбновлены = ВзаиморасчетыОбновлены();
	РасшифровкаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "РасшифровкаПлатежа").Выгрузить();
	
	Если ТипЗнч(РасшифровкаПлатежа) = Тип("ТаблицаЗначений") Тогда
		
		Если ДокументОплатыСВозможностьюПробитияЕдиногоЧека(ДокументСсылка) Тогда
			Если РасшифровкаПлатежа.Колонки.Найти("ОснованиеПлатежа") = Неопределено Тогда
				РасшифровкаПлатежа.Колонки.Добавить("ОснованиеПлатежа");
			КонецЕсли;
			РасшифровкаПлатежа.Свернуть("ОбъектРасчетов, ОснованиеПлатежа, СтавкаНДС", "СуммаНДС, Сумма");
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
				
				Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
					СтрокаПлатежа.ОснованиеПлатежа = ДокументОснование;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если РасшифровкаПлатежа.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
				РасшифровкаПлатежа.Свернуть("ОбъектРасчетов, СтавкаНДС", "СуммаНДС, Сумма");
			Иначе
				РасшифровкаПлатежа.Свернуть("ОбъектРасчетов", "Сумма");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	Для Каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОбъектРасчетов) Тогда
			Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровкиПлатежа.ОбъектРасчетов, "Объект");
			
			Если (ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента")
					ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"))
				И РасшифровкаПлатежа.Колонки.Найти("ОснованиеПлатежа") <> НЕОПРЕДЕЛЕНО
				И ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОснованиеПлатежа)
				И ДокументОплатыСВозможностьюПробитияЕдиногоЧека(ДокументСсылка)
				И ДокументПоставкиСВозможностьюПробитияЕдиногоЧека(СтрокаРасшифровкиПлатежа.ОснованиеПлатежа) Тогда
				
				СтрокаРасшифровкиПлатежа.Заказ = СтрокаРасшифровкиПлатежа.ОснованиеПлатежа;
			Иначе
				СтрокаРасшифровкиПлатежа.Заказ = Объект;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОбъектРасчетов)
			И НЕ ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.Заказ) Тогда
			СтрокаРасшифровкиПлатежа.Заказ = ДокументСсылка;
		КонецЕсли;
		
		Если НЕ ВзаиморасчетыОбновлены
			И РасшифровкаПлатежа.Колонки.Найти("ОснованиеПлатежа") <> Неопределено
			И ЗначениеЗаполнено(СтрокаРасшифровкиПлатежа.ОснованиеПлатежа) Тогда
			
			ОснованиеПлатежа = СтрокаРасшифровкиПлатежа.ОснованиеПлатежа;
			СтрокаРасшифровкиПлатежа.Заказ = ОснованиеПлатежа;
			
			Если ТипЗнч(ОснованиеПлатежа) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "ДокументОснование");
				СтрокаРасшифровкиПлатежа.Заказ = ДокументОснование;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

Функция ДанныеПоОбъектамРасчетовИзРНРасчетыСКлиентамиПоДокументам(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Заказ,
		|	ЕСТЬNULL(ОбъектыРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбъектаРасчетов,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл > 0
		|			ТОГДА РасчетыСКлиентамиПоДокументам.ДолгРегл
		|		ИНАЧЕ -РасчетыСКлиентамиПоДокументам.ДолгРегл
		|	КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасчетыСКлиентамиПоДокументам.ЗаказКлиента = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	РасчетыСКлиентамиПоДокументам.Регистратор = &Регистратор
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента,
		|	ОбъектыРасчетов.Объект,
		|	ЕСТЬNULL(ОбъектыРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбъектаРасчетов";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Заказ,
		|	ЕСТЬNULL(ОбъектыРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбъектаРасчетов,
		|	СУММА(ВЫБОР
		|		КОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл > 0
		|			ТОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл
		|		ИНАЧЕ -РасчетыСКлиентамиПоСрокам.ДолгРегл
		|	КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасчетыСКлиентамиПоСрокам.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор = &Регистратор
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект,
		|	ЕСТЬNULL(ОбъектыРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбъектаРасчетов";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

//-- Локализация

#КонецОбласти

