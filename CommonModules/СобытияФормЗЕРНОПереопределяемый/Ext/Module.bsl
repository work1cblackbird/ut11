#Область ПрограммныйИнтерфейс

#Область Локализация

// Переопределение параметров интеграции ЗЕРНО (расположения форматированной строки)
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - см. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования
Процедура ПриОпределенииПараметровИнтеграцииЗЕРНО(Форма, ПараметрыНадписи) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Заполняет табличную часть подобранными товарами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
//  ПараметрыЗаполнения - Структура - дополнительные параметры заполнения
//  ПараметрыЗаполнения - Структура - параметры заполнения,
//  КэшированныеЗначения - Неопределено, Структура - сохраненные значения параметров, используемых при обработке,
//  ДобавленныеСтроки - Неопределено, Массив из ДанныеФормыЭлементКоллекции - массив добавленных строк таблицы товаров
Процедура ОбработкаРезультатаПодбораНоменклатуры(
	Форма, ВыбранноеЗначение, ПараметрыЗаполнения,
	КэшированныеЗначения = Неопределено, ДобавленныеСтроки = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Если КэшированныеЗначения = Неопределено Тогда 
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ИспользуютсяУпаковки = Истина;
	Если ПараметрыЗаполнения.Свойство("ИспользуютсяУпаковки") Тогда
		ИспользуютсяУпаковки = ПараметрыЗаполнения.ИспользуютсяУпаковки;
	КонецЕсли;
	
	ПараметрыУказанияСерий = Неопределено;
	ПараметрыЗаполнения.Свойство("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ИмяТабличнойЧасти = Неопределено;
	Если НЕ ПараметрыЗаполнения.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти) Тогда
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	ТекущаяСтрока     = Неопределено;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если Не ИспользуютсяУпаковки Тогда
			СтрокаТовара.КоличествоУпаковок = СтрокаТовара.Количество;
			СтрокаТовара.Упаковка = Неопределено;
		КонецЕсли;
		
		ТекущаяСтрока = Форма.Объект[ИмяТабличнойЧасти].Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		ТаблицаОКПД2ТНВЭД = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(ТекущаяСтрока.ОКПД2);
		ИнтеграцияЗЕРНО.ОбновитьКэшВидовСельхозКультур(Форма, ТаблицаОКПД2ТНВЭД);
		ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(ТекущаяСтрока.КодТНВЭД, ТекущаяСтрока.ОКПД2, ТаблицаОКПД2ТНВЭД);
	
		Если ДобавленныеСтроки <> Неопределено Тогда
			ДобавленныеСтроки.Добавить(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - редактируемая строка таблицы,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Структура - (См. ИнтеграцияИС.ПараметрыУказанияСерий).
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия")
			И ПараметрыУказанияСерий <> Неопределено Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
		ИсточникЗначенийВФорме = Форма;
		ПараметрыУказанияСерийКопия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
			
		ИмяТЧ = "Товары";
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			
			Если ПараметрыУказанияСерийКопия.Свойство("Сырье") Тогда
				ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.Сырье;
			КонецЕсли;
			
			Если ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные" Тогда
				ИсточникЗначенийВФорме = ТекущаяСтрока;
			ИначеЕсли ЗначениеЗаполнено(ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта) Тогда
				ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерийКопия.ИмяИсточникаЗначенийВФормеОбъекта];
			КонецЕсли;
		КонецЕсли;
	
		Склад = Неопределено;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, Склад));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОКПД2") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодОКПД2", Новый Структура("Номенклатура", "ОКПД2"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоЗЕРНО")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕдиницаИзмеренияКилограмм") Тогда
		Если Форма.ИмяФормы = "Документ.ЗапросОстатковПартийЗЕРНО.Форма.ФормаДокумента" Тогда
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоЗЕРНО",
			Новый Структура("Упаковка", Форма.ЕдиницаИзмеренияКилограмм));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область РаботаСАдресами

// Предназначена для получения данных адреса объекта хранения зерна.
// 
// Параметры:
//  ДанныеАдреса - Структура - содержит данные адреса, которые необходимо заполнить  
//   ВладелецАдреса               - СправочникСсылка - ссылка на элемент справочника, адрес которого необходимо заполнить.
//   Адрес                        - Строка - контактная информация во внутреннем формате JSON или XML.
//   ПредставлениеАдреса          - Строка - строкое представление адреса.
//
Процедура ДанныеАдресаОбъекта(ДанныеАдреса) Экспорт

	//++ НЕ ГОСИС
	ТипВладельцаАдреса = ТипЗнч(ДанныеАдреса.ВладелецАдреса);
	Если ТипВладельцаАдреса = Тип("СправочникСсылка.Организации")
		Или ТипВладельцаАдреса = Тип("СправочникСсылка.Партнеры")
		Или ТипВладельцаАдреса = Тип("СправочникСсылка.Контрагенты")
		Или ТипВладельцаАдреса = Тип("СправочникСсылка.Склады") Тогда
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ДанныеАдреса.ВладелецАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес, ТекущаяДатаСеанса(), Ложь);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ДанныеАдреса.Адрес               = КонтактнаяИнформация[0].Значение;
			ДанныеАдреса.ПредставлениеАдреса = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
