#Область ПрограммныйИнтерфейс

#Область Фискализация

//++ Локализация

// Возвращает параметры операции фискализации чека для печати чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Структура - Структура параметров операции фискализации чека
Функция ОсновныеПараметрыОперации(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОсновныеПараметрыОперации = ФормированиеФискальныхЧековСерверПереопределяемый.СтруктураОсновныхПараметровОперации();
	
	ОсновныеПараметрыОперации.ДокументСсылка       = Объект.Ссылка;
	ОсновныеПараметрыОперации.Организация          = Объект.Организация;
	ОсновныеПараметрыОперации.Контрагент           = Объект.Контрагент;
	ОсновныеПараметрыОперации.Партнер              = Объект.Партнер;
	ОсновныеПараметрыОперации.Валюта               = Объект.Валюта;
	ОсновныеПараметрыОперации.СуммаДокумента       = Объект.СуммаДокумента;
	
	ОсновныеПараметрыОперации.ИмяКомандыПробитияЧека         = "ПробитьЧек";
	ОсновныеПараметрыОперации.ИмяРеквизитаГиперссылкиНаФорме = "ФискальнаяОперацияСтатус";
	
	Возврат ОсновныеПараметрыОперации;
	
КонецФункции

// Определяет, разрешено ли пробитие фискального чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Булево - Истина, если разрешено пробитие чека
Функция РазрешеноПробитиеФискальныхЧековПоДокументу(Форма) Экспорт
	
	РазрешеноПробитиеФискальныхЧековПоДокументу = Истина;
	
	Возврат РазрешеноПробитиеФискальныхЧековПоДокументу;
	
КонецФункции

// Формирует массив форматированных строк для формирования гиперссылки пробития фискального чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ-ссылка, по которому пробивается фискальный чек
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// 	МассивПредставлений - Массив из ФорматированнаяСтрока - Массив форматированных строк для формирования гиперссылки
//    пробития фискального чека.
Процедура ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, МассивПредставлений) Экспорт
	
	ФискальнаяОперацияДанныеЖурнала = ФормированиеФискальныхЧековСервер.ДанныеПробитогоФискальногоЧекаПоДокументу(ДокументСсылка);
	
	Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
		
		НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
		СуммаЧекаККМ = ФискальнаяОперацияДанныеЖурнала.Сумма;
		ТекстСсылки = "ОткрытьЗаписьФискальнойОперации";
		
		Если Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
			ТекстПредставления = СтрШаблон(НСтр("ru = 'Пробит чек на сумму %1'"), СуммаЧекаККМ);
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки, ТекстПредставления);
		Иначе
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
		КонецЕсли;
		
	ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
		
		Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, "ПробитьЧек");
		Иначе
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
		КонецЕсли;
		
	Иначе
		
		ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет виды фискальных чеков, доступных по документу
// 
// Параметры:
// 	ВидыЧеков - ТаблицаЗначений - Таблица значений, содержащая виды фискальных чеков, доступных по документу
// 	Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция по документу
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ЗаполнитьВидыФискальныхЧековПоДокументу(ВидыЧеков, Операция, ИмяКомандыПробитияЧека) Экспорт
	
	// Операция = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	
	Если Операция = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли;
	
	ВидЧека = ВидыЧеков.Добавить();
	ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
	ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетовДенежнымиСредствами;
	ВидЧека.ВидЧекаКоррекции = Неопределено;
	
	Если ФормированиеФискальныхЧековСерверПереопределяемый.РазрешенКассовыйЧекКоррекцииДляТипаРасчетов(ТипРасчетовДенежнымиСредствами) Тогда
		ВидЧека = ВидыЧеков.Добавить();
		ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
		ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетовДенежнымиСредствами;
		ВидЧека.ВидЧекаКоррекции = Перечисления.ВидыЧековКоррекции.НеприменениеККТ;
	КонецЕсли;
	
КонецПроцедуры

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация");
	СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Возвращает наименование клиента, кто внес или получил денежные средства в качестве аванса
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	Строка - Наименование клиента платежа-аванса
Функция КлиентАвансовогоПлатежаНаименование(ДокументСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ПринятоОт");
	
КонецФункции

// Возвращает данные по объекта расчетов по документу в зависимости от выбранной команды пробития чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, по которому определяются объекты расчетов
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
// 	ВзаиморасчетыОбновлены - Булево - Флаг, завершены ли обработчики обновления по взаиморасчетам
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений, содержащая суммы по объектам расчетов документа
Функция ДанныеПоОбъектамРасчетовПоДокументу(ДокументСсылка, ИмяКомандыПробитияЧека, ВзаиморасчетыОбновлены) Экспорт
	
	ИскомыеРеквизиты = "ОбъектРасчетов, ОснованиеПлатежа, СуммаНДС10, СуммаНДС20, СуммаДокумента";
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИскомыеРеквизиты);
	
	ОбъектыРасчетовПоДокументу = Новый ТаблицаЗначений();
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("ОбъектРасчетов");
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("Заказ");
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("СуммаНДС");
	ОбъектыРасчетовПоДокументу.Колонки.Добавить("Сумма");
	
	НоваяСтрока = ОбъектыРасчетовПоДокументу.Добавить();
	НоваяСтрока.СуммаНДС = РеквизитыДокумента.СуммаНДС10 + РеквизитыДокумента.СуммаНДС20;
	НоваяСтрока.Сумма = РеквизитыДокумента.СуммаДокумента;
	
	НоваяСтрока.Заказ = РеквизитыДокумента.ОснованиеПлатежа;
	Если ТипЗнч(РеквизитыДокумента.ОснованиеПлатежа) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ОснованиеПлатежа, "ДокументОснование");
		НоваяСтрока.Заказ = ДокументОснование;
	КонецЕсли;
	
	Если НоваяСтрока.Заказ = РеквизитыДокумента.ОснованиеПлатежа Тогда
		НоваяСтрока.ОбъектРасчетов = РеквизитыДокумента.ОбъектРасчетов;
	Иначе
		НоваяСтрока.ОбъектРасчетов = Справочники.ОбъектыРасчетов.НайтиПоРеквизиту("Объект", НоваяСтрока.Заказ);
	КонецЕсли;
	
	Возврат ОбъектыРасчетовПоДокументу;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти