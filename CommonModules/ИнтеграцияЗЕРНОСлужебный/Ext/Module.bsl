#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыСеансаИС() Экспорт
	
	ПараметрыСеансаИС = Новый Структура;
	ПараметрыСеансаИС.Вставить(
		"ПараметрыЛогированияЗапросовЗЕРНО",
		ЛогированиеЗапросовЗЕРНО.ПараметрыЛогированияЗапросов());
	
	Возврат ПараметрыСеансаИС;
	
КонецФункции

#Область ДлительныеОперации

Процедура ПодготовитьКПередачеДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена         = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ВходящиеДанные          = ПараметрыФоновогоЗадания.ВходящиеДанные;
	ПараметрыСеансаИС       = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	УникальныйИдентификатор = ПараметрыФоновогоЗадания.УникальныйИдентификатор;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена, УникальныйИдентификатор);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьОбменДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбменаДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПодписанныеСообщенияПоОрганизациям = ПараметрыФоновогоЗадания.ПодписанныеСообщенияПоОрганизациям;
	ПараметрыОбмена                    = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС                  = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Обмен

Функция ПодготовитьДанныеКПередачеПоНастройкеРегламентногоЗадания(ПараметрыОбмена) Экспорт
	
	ВыполнитьОбработкуОчередиСообщений = Истина;
	
	Если ПараметрыОбмена.НастройкаРегламентногоЗадания = Неопределено Тогда
		Возврат ВыполнитьОбработкуОчередиСообщений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыОбмена.НастройкаРегламентногоЗадания);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРегламентныхЗаданий.Организация,
	|	НастройкиРегламентныхЗаданий.Подразделение,
	|	НастройкиРегламентныхЗаданий.ВидНастройкиОбмена,
	|	НастройкиРегламентныхЗаданий.ПараметрыНастройкиОбмена,
	|	ВЫБОР
	|		КОГДА ОчередьСообщений.НастройкаРегламентногоЗадания ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСообщенияВОчереди
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСообщенийЗЕРНО КАК ОчередьСообщений
	|		ПО НастройкиРегламентныхЗаданий.Ссылка = ОчередьСообщений.НастройкаРегламентногоЗадания
	|ГДЕ
	|	НастройкиРегламентныхЗаданий.Ссылка = &Ссылка
	|	И НастройкиРегламентныхЗаданий.ВидНастройкиОбмена <> ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ОбменДанными)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат ВыполнитьОбработкуОчередиСообщений;
	КонецЕсли;
	
	Если ИнтеграцияЗЕРНОПовтИсп.ИспользоватьАвтоматическийОбменДанными(Выборка.Организация, Выборка.Подразделение) Тогда
		ВыполнитьОбработкуОчередиСообщений = Ложь;
	КонецЕсли;
	
	Если Выборка.ЕстьСообщенияВОчереди Тогда
		Возврат ВыполнитьОбработкуОчередиСообщений;
	КонецЕсли;
	
	ТребуютсяПараметрыНастройкиОбмена =
		Выборка.ВидНастройкиОбмена <> Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаОстатковПартий;
	
	Если ТребуютсяПараметрыНастройкиОбмена Тогда
		
		Данные = Выборка.ПараметрыНастройкиОбмена.Получить();
		Если ТипЗнч(Данные) <> Тип("Структура") Тогда
			Возврат ВыполнитьОбработкуОчередиСообщений;
		КонецЕсли;
		
		ПараметрыНастройкиОбмена = ИнтеграцияЗЕРНОКлиентСервер.ИнициализироватьПараметрыНастройкиОбмена(Выборка.ВидНастройкиОбмена);
		ЗаполнитьЗначенияСвойств(ПараметрыНастройкиОбмена, Данные);
		
	КонецЕсли;
	
	ВходящиеДанные = Новый Массив;
	
	ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыОбработкиСообщений.Организация   = Выборка.Организация;
	ПараметрыОбработкиСообщений.Подразделение = Выборка.Подразделение;
	
	ПараметрыЗапроса = Новый Структура;
	ДобавитьИнтервал = Истина;
	
	Если Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаМестФормированияПартий Тогда
		
		ПараметрыОбработкиСообщений.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
		ПараметрыОбработкиСообщений.Операция     = Перечисления.ВидыОперацийЗЕРНО.ЗапросМестФормированияПартий;
		ПараметрыОбработкиСообщений.Ссылка       = Справочники.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка();
		
	ИначеЕсли Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаРезультатовИсследований Тогда
		
		ПараметрыОбработкиСообщений.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросРезультатовИсследований;
		ПараметрыОбработкиСообщений.Ссылка   = Справочники.РезультатыИсследованийЗЕРНО.ПустаяСсылка();
	
	ИначеЕсли Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаАктовОтбораПроб Тогда
		
		ПараметрыОбработкиСообщений.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросАктовОтбораПроб;
		ПараметрыОбработкиСообщений.Ссылка   = Справочники.АктыОтбораПробЗЕРНО.ПустаяСсылка();
	
	ИначеЕсли Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаСДИЗ Тогда
		
		ПараметрыОбработкиСообщений.ВидПродукции = ПараметрыНастройкиОбмена.ВидПродукции;
		ПараметрыОбработкиСообщений.Операция     = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗ;
		ПараметрыОбработкиСообщений.Ссылка       = Справочники.СДИЗЗЕРНО.ПустаяСсылка();

		Если ПараметрыНастройкиОбмена.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
			ПараметрыОбработкиСообщений.ЭтоЭлеватор = ПараметрыНастройкиОбмена.ТипОрганизации = 1;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("ЗапрашиватьПогашенияСДИЗ",       ПараметрыНастройкиОбмена.ЗапрашиватьПогашенияСДИЗ);
		ПараметрыЗапроса.Вставить("ЗапрашиватьОтказыПогашенийСДИЗ", ПараметрыНастройкиОбмена.ЗапрашиватьОтказыПогашенийСДИЗ);
	
	ИначеЕсли Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаПартий Тогда
		
		ПараметрыОбработкиСообщений.ВидПродукции = ПараметрыНастройкиОбмена.ВидПродукции;
		ПараметрыОбработкиСообщений.Ссылка       = Справочники.РеестрПартийЗЕРНО.ПустаяСсылка();
		Если ПараметрыНастройкиОбмена.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
			ПараметрыОбработкиСообщений.Операция = ПараметрыНастройкиОбмена.Операция;
		Иначе
			ПараметрыОбработкиСообщений.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий;
		КонецЕсли;
		
	ИначеЕсли Выборка.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ЗагрузкаОстатковПартий Тогда
		
		ДобавитьИнтервал = Ложь;
		
		ПараметрыОбработкиСообщений.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
		ПараметрыОбработкиСообщений.Операция     = Перечисления.ВидыОперацийЗЕРНО.ЗагрузкаОстатковПартий;
		ПараметрыОбработкиСообщений.Ссылка       = Документы.ЗапросОстатковПартийЗЕРНО.ПустаяСсылка();
		
	Иначе
		
		Возврат ВыполнитьОбработкуОчередиСообщений;
		
	КонецЕсли;
	
	ПараметрыОбработкиСообщений.ПараметрыЗапроса = ПараметрыЗапроса;
	
	Если ДобавитьИнтервал И ЗначениеЗаполнено(ПараметрыОбмена.НастройкаРегламентногоЗадания) Тогда
		
		ИмяЗапросаЗЕРНО = ИмяЗапросаЗЕРНОИзНастроекОбмена(ПараметрыОбработкиСообщений);
		ДатаНачала = Неопределено;
		
		Если ИмяЗапросаЗЕРНО <> Неопределено Тогда
			
			ДатыНачалаЗагрузки = ДатыНачалаЗагрузки(ПараметрыОбработкиСообщений, ИмяЗапросаЗЕРНО);
			СтрокаДатаНачалаЗагрузки = ДатыНачалаЗагрузки.Найти(ПараметрыОбработкиСообщений.Организация, "Организация");
			ДатаНачала = СтрокаДатаНачалаЗагрузки.ДатаСинхронизации;
			
			ПараметрыОбмена.ИмяЗапросаЗЕРНО = ИмяЗапросаЗЕРНО;
		КонецЕсли;
		
		Если ДатаНачала = Неопределено Тогда
			ДатаНачала = НачалоДня(ТекущаяДатаСеанса()) - (ПараметрыНастройкиОбмена.ДнейЗагрузки - 1) * 86400;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("НачалоПериодаИзменений", ДатаНачала);
		
	КонецЕсли;
	
	ВходящиеДанные.Добавить(ПараметрыОбработкиСообщений);
	
	ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
	ВыполнитьОбработкуОчередиСообщений = Ложь;
	
	Возврат ВыполнитьОбработкуОчередиСообщений;
	
КонецФункции

Процедура ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена.ОчередьСообщений.Очистить();
	ПараметрыОбмена.ЗависимостиСообщений.Очистить();
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбмена.НастройкаРегламентногоЗадания = Неопределено
		Или ПараметрыОбмена.ВидНастройкиОбмена = Перечисления.ВидыНастроекОбменаЗЕРНО.ОбменДанными Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Очередь.ДатаСоздания       КАК ДатаСоздания,
		|	Очередь.Сообщение          КАК Сообщение,
		|	
		|	Очередь.Операция           КАК Операция,
		|	Очередь.ВидПродукции       КАК ВидПродукции,
		|
		|	Очередь.Организация         КАК Организация,
		|	Очередь.СсылкаНаОбъект      КАК СсылкаНаОбъект,
		|	Очередь.СообщениеОснование  КАК СообщениеОснование,
		|	Очередь.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	
		|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
		|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
		|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
		|	Очередь.ТекущееДействие                   КАК ТекущееДействие,
		|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
		|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
		|	Очередь.ПередаватьПосле                   КАК ПередаватьПосле,
		|	Очередь.ИдентификаторЦепочки              КАК ИдентификаторЦепочки,
		|	Очередь.ТребуетсяПодписать                КАК ТребуетсяПодписать,
		|	Очередь.Сертификат                        КАК Сертификат,
		|	Очередь.Подразделение                     КАК Подразделение
		|
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК Очередь
		|ГДЕ
		|	&УсловиеПоОрганизациям
		|	И &УсловиеПоСообщениюИлиДокументу";
		
		Если ПараметрыОбмена.Организации = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "Очередь.Организация В(&Организации)");
			Запрос.УстановитьПараметр("Организации", ПараметрыОбмена.Организации);
		КонецЕсли;
		
		Если СообщениеИлиДокумент = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСообщениюИлиДокументу", "ИСТИНА");
		Иначе
			ТекстУсловия = "(Очередь.Сообщение В(&СообщениеИлиДокумент) Или Очередь.СсылкаНаОбъект В(&СообщениеИлиДокумент))";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСообщениюИлиДокументу", ТекстУсловия);
			Запрос.УстановитьПараметр("СообщениеИлиДокумент", СообщениеИлиДокумент);
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Очередь.ДатаСоздания       КАК ДатаСоздания,
		|	Очередь.Сообщение          КАК Сообщение,
		|	
		|	Очередь.Операция           КАК Операция,
		|	Очередь.ВидПродукции       КАК ВидПродукции,
		|
		|	Очередь.Организация         КАК Организация,
		|	Очередь.СсылкаНаОбъект      КАК СсылкаНаОбъект,
		|	Очередь.СообщениеОснование  КАК СообщениеОснование,
		|	Очередь.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	
		|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
		|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
		|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
		|	Очередь.ТекущееДействие                   КАК ТекущееДействие,
		|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
		|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
		|	Очередь.ПередаватьПосле                   КАК ПередаватьПосле,
		|	Очередь.ИдентификаторЦепочки              КАК ИдентификаторЦепочки,
		|	Очередь.ТребуетсяПодписать                КАК ТребуетсяПодписать,
		|	Очередь.Сертификат                        КАК Сертификат,
		|	Очередь.Подразделение                     КАК Подразделение
		|
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийЗЕРНО КАК Очередь
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийЗЕРНО КАК НастройкиРегламентныхЗаданий
		|	ПО ВЫБОР
		|		КОГДА НастройкиРегламентныхЗаданий.ВидНастройкиОбмена = ЗНАЧЕНИЕ(Перечисление.ВидыНастроекОбменаЗЕРНО.ОбменДанными)
		|		ТОГДА Очередь.Организация = НастройкиРегламентныхЗаданий.Организация
		|		ИНАЧЕ Очередь.НастройкаРегламентногоЗадания = НастройкиРегламентныхЗаданий.Ссылка
		|	   КОНЕЦ
		|ГДЕ
		|	НастройкиРегламентныхЗаданий.Ссылка = &НастройкаРегламентныхЗаданий";
		Запрос.УстановитьПараметр("НастройкаРегламентныхЗаданий", ПараметрыОбмена.НастройкаРегламентногоЗадания);
		
	КонецЕсли;
	
	СообщенияТребующиеПодписания = Новый Массив();
	ЭлементыОчередиПоСообщению   = Новый Соответствие();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		ПротоколОбмена               = Выборка.ПротоколОбмена.Получить();
		
		Если РеквизитыИсходящегоСообщения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания       = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение          = Выборка.Сообщение;
		ЭлементОчереди.СообщениеОснование = Выборка.СообщениеОснование;
		
		ЭлементОчереди.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		ЭлементОчереди.ИдентификаторЦепочки = Выборка.ИдентификаторЦепочки;
		
		ЭлементОчереди.Операция           = Выборка.Операция;
		ЭлементОчереди.ВидПродукции       = Выборка.ВидПродукции;
		ЭлементОчереди.Организация        = Выборка.Организация;
		ЭлементОчереди.СсылкаНаОбъект     = Выборка.СсылкаНаОбъект;
		
		ЭлементОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщения;
		ЭлементОчереди.ПротоколОбмена               = ПротоколОбмена;
		ЭлементОчереди.ДатаМодификацииУниверсальная = Выборка.ДатаМодификацииУниверсальная;
		ЭлементОчереди.ТекущееДействие              = Выборка.ТекущееДействие;
		ЭлементОчереди.ТребуетсяПодписать           = Выборка.ТребуетсяПодписать;
		ЭлементОчереди.Сертификат                   = Выборка.Сертификат;
		ЭлементОчереди.Подразделение                = Выборка.Подразделение;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьДо) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.ЗагружатьДо;
			НоваяЗависимость.Сообщение2 = Выборка.Сообщение;
			НоваяЗависимость.Загрузка   = Истина;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ЗагружатьПосле;
			НоваяЗависимость.Загрузка   = Истина;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ПередаватьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ПередаватьПосле;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Истина;
		КонецЕсли;
		
		Если ПротоколОбмена <> Неопределено
			И ПротоколОбмена.Количество() > 0 Тогда
			
			ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
			ЭлементОчереди.ТекущийСтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
			
		КонецЕсли;
		Если ЭлементОчереди.ТребуетсяПодписать Тогда
			СообщенияТребующиеПодписания.Добавить(РеквизитыИсходящегоСообщения);
			ЭлементыОчередиПоСообщению.Вставить(РеквизитыИсходящегоСообщения, ЭлементОчереди);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗависимостиКУдалению = Новый Соответствие();
	Для Каждого СтрокаТЧ Из ПараметрыОбмена.ЗависимостиСообщений Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение1, "Сообщение") = Неопределено
			Или ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение2, "Сообщение") = Неопределено Тогда
			ЗависимостиКУдалению.Вставить(СтрокаТЧ, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ЗависимостиКУдалению Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОВызовСервера.НоваяСтруктураРезультатовОбмена();
	
	// Собрать XML для передаваемых документов
	// Требуется подписание документа на клиенте? Если да, то документы требуется вернуть на клиент.
	// После всего - выполнить передачу и дождаться результата - изменений.
	СообщенияXML = Новый Массив;
	Для Каждого ПараметрыОбработкиДокумента Из ВходящиеДанные Цикл
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыОбмена",             ПараметрыОбмена);
		ДополнительныеПараметры.Вставить("ПараметрыОбработкиДокумента", ПараметрыОбработкиДокумента);
		ДополнительныеПараметры.Вставить("ИдентификаторФормы",          УникальныйИдентификатор);
		
		Если ПараметрыОбработкиДокумента.Свойство("ИмяЗапросаЗерно") Тогда
			ПараметрыОбмена.Вставить("ИмяЗапросаЗерно", ПараметрыОбработкиДокумента.ИмяЗапросаЗерно);
		КонецЕсли;
		
		СообщенияДокументаXML= СообщениеКПередачеXML(
			ПараметрыОбработкиДокумента.Ссылка,
			ПараметрыОбработкиДокумента.ДальнейшееДействие,
			ДополнительныеПараметры);
			
		Для Каждого СообщениеXML Из СообщенияДокументаXML Цикл
			Если СообщениеXML.ИдентификаторФормы = Неопределено
				И УникальныйИдентификатор <> Неопределено Тогда
				СообщениеXML.ИдентификаторФормы = УникальныйИдентификатор;
			КонецЕсли;
			СообщенияXML.Добавить(СообщениеXML);
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатОбработки = СообщенияКПередаче(СообщенияXML, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		РезультатОбработки.ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	// Добавить сообщения без подписания в очередь сообщений
	ПодготовитьСообщенияБезПодписания(
		РезультатОбработки.СообщенияБезПодписанияПоОрганизациям,
		ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	ЕстьОшибкиТранспорта  = ЕстьОшибкиТранспорта(ПараметрыОбмена);
	ТребуетсяОжидание     = ТребуетсяОжидание(ДатаСледующейИтерации, ЕстьОшибкиТранспорта, ПараметрыОбмена);
	ТребуетсяПодписание   = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                         И ПараметрыОбмена.СообщенияКПодписанию.Количество());
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание И Не ПараметрыОбмена.ПрерватьОбработкуОчереди Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда

		Если ТребуетсяПодписание Тогда
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию, ПараметрыОбмена.СертификатыПользователя);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ПараметрыОбмена.СертификатыПользователя;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;

		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.ПараметрыПреобразования  = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	ОтправитьСерверныеОповещнияПоИзменениямОбмена(ПараметрыОбмена);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОВызовСервера.НоваяСтруктураРезультатовОбмена();
	
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ВыполнитьИтерацию = Истина;
	ВремяОжидания     = Неопределено;
	Пока ВыполнитьИтерацию Цикл
		
		ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
		ЕстьОшибкиТранспорта  = ЕстьОшибкиТранспорта(ПараметрыОбмена);
		ТребуетсяОжидание     = ТребуетсяОжидание(ДатаСледующейИтерации, ЕстьОшибкиТранспорта, ПараметрыОбмена);
		ТребуетсяПодписание   = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
		                         И ПараметрыОбмена.СообщенияКПодписанию.Количество());
		
		ДоступныеСертификаты = Неопределено;

		Если ТребуетсяОжидание И Не ТребуетсяПодписание И Не ПараметрыОбмена.ПрерватьОбработкуОчереди Тогда
			
			Если ДатаСледующейИтерации <> Неопределено Тогда
				ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
			Иначе
				ВремяОжидания = 0;
			КонецЕсли;
			
			Если ПараметрыОбмена.ОжидатьНаСервере Тогда
				ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			ИначеЕсли ПараметрыОбмена.ОжидатьНаКлиенте И ВремяОжидания <> 0 Тогда
				ВыполнитьИтерацию = Ложь;
			КонецЕсли;
			
		Иначе
			
			ВыполнитьИтерацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда

		Если ТребуетсяПодписание Тогда
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.ПараметрыПреобразования  = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	ОтправитьСерверныеОповещнияПоИзменениямОбмена(ПараметрыОбмена);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьОбменУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОВызовСервера.НоваяСтруктураРезультатовОбмена();
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	ЕстьОшибкиТранспорта  = ЕстьОшибкиТранспорта(ПараметрыОбмена);
	ТребуетсяОжидание     = ТребуетсяОжидание(ДатаСледующейИтерации, ЕстьОшибкиТранспорта, ПараметрыОбмена);
	ТребуетсяПодписание   = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                         И ПараметрыОбмена.СообщенияКПодписанию.Количество());
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание И Не ПараметрыОбмена.ПрерватьОбработкуОчереди Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И Не ПараметрыОбмена.ПрерватьОбработкуОчереди
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.ПараметрыПреобразования  = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = ИнтеграцияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	ОтправитьСерверныеОповещнияПоИзменениямОбмена(ПараметрыОбмена);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗагрузитьИзменения(ПараметрыСинхронизации) Экспорт
	
	ИмяЗапросаЗерно = ПараметрыСинхронизации.ИмяЗапросаЗерно;
	
	СоответствиеОперацийИмяЗапроса = СоответствиеОперацийИмяЗапроса();
	ДанныеОперации = СоответствиеОперацийИмяЗапроса[ИмяЗапросаЗерно];
	
	ВходящиеДанные = Новый Массив();
	
	ДатыНачалаЗагрузки = ДатыНачалаЗагрузки(ПараметрыСинхронизации, ИмяЗапросаЗерно);
	
	Для Каждого СтрокаДатаНачалаЗагрузки Из ДатыНачалаЗагрузки Цикл
		
		ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыОбработкиСообщений.ИмяЗапросаЗерно  = ИмяЗапросаЗерно;
		ПараметрыОбработкиСообщений.Организация      = СтрокаДатаНачалаЗагрузки.Организация;
		ПараметрыОбработкиСообщений.Подразделение    = СтрокаДатаНачалаЗагрузки.Подразделение;
		
		ДатаСинхронизации = СтрокаДатаНачалаЗагрузки.ДатаСинхронизации;
		
		Если ДатаСинхронизации = Неопределено Тогда
			ДатаСинхронизации = НачалоДня(ТекущаяДатаСеанса() - 1*24*60*60);
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("НачалоПериодаИзменений", ДатаСинхронизации);
		
		ПараметрыОбработкиСообщений.ПараметрыЗапроса = ПараметрыЗапроса;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОбработкиСообщений, ДанныеОперации, "Операция, Ссылка");
		ДанныеОперации.Свойство("ВидПродукции", ПараметрыОбработкиСообщений.ВидПродукции);
		
		Если ДанныеОперации.ПараметрыЗапроса <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыЗапроса, ДанныеОперации.ПараметрыЗапроса);
		КонецЕсли;
		
		ВходящиеДанные.Добавить(ПараметрыОбработкиСообщений);
		
	КонецЦикла;
	
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ПодготовитьКПередаче(ВходящиеДанные, ПараметрыСинхронизации.УникальныйИдентификатор);
	
	Возврат РезультатОбмена;
	
КонецФункции

Функция ВремяОжидания(НомерИтерации) Экспорт
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

// Формирует пустую структуру сообщения XML
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие из КлючИЗначение - Описание ошибок.
//   * ДополнительноеОписание      - Строка - Описание для отображения в формах текущей операции.
//   * Идентификатор               - Строка, Неопределено - Уникальный идентификатор сообщения.
//   * ИдентификаторЗаявки         - Строка - Текст сообщения XML.
//   * ИдентификаторСтроки         - Строка - Уникальный идентификатор строки.
//   * ИдентификаторФормы          - Неопределено, Строка - Идентификатор формы.
//   * ЗагружатьДо                 - Неопределено, Строка - Уникальный идентификатор сообщения.
//   * ЗагружатьПосле              - Неопределено, Строка - Уникальный идентификатор сообщения.
//   * ПередаватьПосле             - Неопределено, Строка - Уникальный идентификатор сообщения.
//   * ИдентификаторЦепочки        - Неопределено, Строка - Уникальный идентификатор сообщения.
//   * ТекстСообщенияЗапросXML     - Строка - Текст сообщения XML.
//   * КонвертЗапросXML            - Неопределено, Строка - Текст сообщения XML.
//   * КонвертРезультатXML         - Неопределено, Строка - Текст сообщения XML.
//   * КонвертПодтверждениеXML     - Неопределено, Строка - Текст сообщения XML.
//   * Организация                 - Неопределено, ОпределяемыйТип.Организация - Организация.
//   * Операция                    - Неопределено, ПеречислениеСсылка.ВидыОперацийЗЕРНО - Вид операции.
//   * ТипСообщения                - Неопределено, ПеречислениеСсылка.ТипыЗапросовИС - Тип запроса.
//   * СсылкаНаОбъект              - Неопределено, ДокументСсылка, СправочникСсылка, ПеречислениеСсылка - Ссылка на объект.
//   * Версия                      - Число - Версия сообщения.
//   * ТребуетсяПодписание         - Булево - Требуется подписание.
//   * Сертификат                  - Неопределено - Сертфикат.
//   * НомерСтраницы               - Число - номер страницы.
//   * ВерсияГосИС                 - Неопределено, Строка - версия.
//   * ВидПродукции                - Неопределено
//   * СообщениеОснование          - Неопределено
//   * ЯвляетсяОснованиемСообщений - Булево - является основанием.
//   * ПараметрыЗапроса            - Неопределено
//   * Подразделение               - Неопределено
//   * ДокументОснование           - Неопределено
//   * ПодписываемоеТекущееДействие - Неопределено, ПеречислениеСсылка.ДействиеССообщениемЗЕРНО -
Функция СтруктураСообщенияXML() Экспорт
	
	СообщениеXML = Новый Структура;
	
	СообщениеXML.Вставить("ТекстОшибки", "");
	СообщениеXML.Вставить("Ошибки", Новый Соответствие);
	СообщениеXML.Вставить("ИдентификаторЗаявки", "");
	СообщениеXML.Вставить("ИдентификаторСтроки", "");
	СообщениеXML.Вставить("ИдентификаторФормы",  Неопределено);
	
	// Для отображения в формах представления текущей операции
	СообщениеXML.Вставить("ДополнительноеОписание", "");
	
	// Для управления очередностью
	СообщениеXML.Вставить("Идентификатор", Строка(Новый УникальныйИдентификатор()));
	СообщениеXML.Вставить("ЗагружатьДо", Неопределено);
	СообщениеXML.Вставить("ЗагружатьПосле", Неопределено);
	СообщениеXML.Вставить("ПередаватьПосле", Неопределено);
	СообщениеXML.Вставить("ИдентификаторЦепочки", Неопределено);
	
	// Для использования в механизмах электронной подписи
	СообщениеXML.Вставить("ТекстСообщенияЗапросXML", "");
	СообщениеXML.Вставить("КонвертЗапросXML", Неопределено);
	СообщениеXML.Вставить("КонвертРезультатXML", Неопределено);
	СообщениеXML.Вставить("КонвертПодтверждениеXML", Неопределено);
	СообщениеXML.Вставить("ПодписываемоеТекущееДействие", Неопределено);
	СообщениеXML.Вставить("Сертификат", Неопределено);
	
	СообщениеXML.Вставить("ТребуетсяПодписание", Истина);
	СообщениеXML.Вставить("ТипСообщения", Неопределено);
	СообщениеXML.Вставить("Версия", 0);
	
	// Для сохранения в Протокол обмена
	СообщениеXML.Вставить("ВерсияГосИС", Неопределено);
	СообщениеXML.Вставить("Операция", Неопределено);
	СообщениеXML.Вставить("ВидПродукции", Неопределено);
	
	СообщениеXML.Вставить("СообщениеОснование", Неопределено);
	СообщениеXML.Вставить("ЯвляетсяОснованиемСообщений", Ложь);
	
	СообщениеXML.Вставить("ПараметрыЗапроса", Неопределено);
	
	// Для обновления в формах
	СообщениеXML.Вставить("Организация", Неопределено);
	СообщениеXML.Вставить("Подразделение", Неопределено);
	СообщениеXML.Вставить("СсылкаНаОбъект", Неопределено);
	СообщениеXML.Вставить("ДокументОснование", Неопределено);
	
	СообщениеXML.Вставить("НомерСтраницы", 0);
	
	Возврат СообщениеXML;
	
КонецФункции

Функция СтруктураСообщенияXMLПоДокументу(ДанныеДокумента, Операция, НомерВерсии) Экспорт
	
	СообщениеXML = СтруктураСообщенияXML();
	СообщениеXML.Операция            = Операция;
	СообщениеXML.ВидПродукции        = ДанныеДокумента.ВидПродукции;
	СообщениеXML.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия              = НомерВерсии;
	
	СообщениеXML.ПараметрыЗапроса = Новый Структура();
	СообщениеXML.Организация      = ДанныеДокумента.Организация;
	СообщениеXML.СсылкаНаОбъект   = ДанныеДокумента.Ссылка;
	СообщениеXML.Подразделение    = ДанныеДокумента.Подразделение;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, "ДокументОснование") Тогда
		СообщениеXML.ДокументОснование = ДанныеДокумента.ДокументОснование;
	КонецЕсли;
	
	Возврат СообщениеXML;
	
КонецФункции

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  см. ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена
//
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияXML, Реквизиты, ПроверятьХешБезСсылки = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Реквизиты.Документ)
		И Метаданные.ОпределяемыеТипы.ДокументыЗЕРНО.Тип.СодержитТип(ТипЗнч(Реквизиты.Документ)) Тогда
		Реквизиты.Вставить("ВладелецФайлов", Реквизиты.Документ);
	Иначе
		Реквизиты.Вставить("ВладелецФайлов", Реквизиты.Организация);
	КонецЕсли;
	
	Возврат ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.ЗЕРНОПрисоединенныеФайлы,
		ТекстСообщенияXML,
		Реквизиты,
		ПроверятьХешБезСсылки);
	
КонецФункции

Процедура ПроверитьВозможностьСозданияНеразделенныхДанных(Идентификатор, ВидДанных, ПараметрыОбмена) Экспорт
	
	Если ИнтеграцияЗЕРНО.ДоступнаЗагрузкаКлассификаторов() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЛогирования = ЛогированиеЗапросовЗЕРНО.ПараметрыЛогированияЗапросов();
	Если ВидДанных = Справочники.РеестрЭлеваторовЗЕРНО.ПустаяСсылка() Тогда
		ПредставлениеВидаДанных = Метаданные.Справочники.РеестрЭлеваторовЗЕРНО.Синоним;
	Иначе
		ПредставлениеВидаДанных = Строка(ВидДанных);
	КонецЕсли;
	ДанныеТекстаИсключения = Новый Массив();
	
	ДоступноОбновлениеКлассификатора = (ПараметрыОбмена.ДоступныОбновленияКлассификаторов.Найти(ВидДанных) <> Неопределено);
	
	Если ДоступноОбновлениеКлассификатора Тогда
		ДанныеТекстаИсключения.Добавить(
			СтрШаблон(
				НСтр("ru = 'zerno-001. Не удалось создать элемент классификатора ""%1"" по идентификатору ""%2"".'"),
				ПредставлениеВидаДанных,
				Идентификатор));
	Иначе
		ДанныеТекстаИсключения.Добавить(
			СтрШаблон(
				НСтр("ru = 'zerno-002. Не удалось создать элемент классификатора ""%1"" по идентификатору ""%2"".'"),
				ПредставлениеВидаДанных,
				Идентификатор));
	КонецЕсли;
	
	ДанныеЗаписиЛога = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписиЛога.ТекстОшибки = СтрСоединить(ДанныеТекстаИсключения, Символы.ПС);
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписиЛога, ПараметрыЛогирования);
	
	Если ДоступноОбновлениеКлассификатора Тогда
		ДанныеТекстаИсключения.Добавить(
			СтрШаблон(
				НСтр("ru = 'Обратитесь в службу поддержки для обновления поставляемых данных классификатора %1'"),
				ПредставлениеВидаДанных));
	Иначе
		Если ЛогированиеЗапросовИС.ВыполняетсяЛогированиеЗапросов(ПараметрыЛогирования) Тогда
			ДанныеТекстаИсключения.Добавить(
				НСтр("ru = 'Предоставьте записанный лог запросов из панели обмена ФГИС ""Зерно"" в службу поддержки.'"));
		Иначе
			ДанныеТекстаИсключения.Добавить(
				НСтр("ru = 'Включите запись логов запросов в панели обмена ФГИС ""Зерно"" и повторите операцию.'"));
		КонецЕсли;
	КонецЕсли;
	ТекстИсключения = СтрСоединить(ДанныеТекстаИсключения, Символы.ПС);
	
	ВызватьИсключение ТекстИсключения;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область XDTO

Функция ЭтоВерсияВключая_1_0_8(ПараметрыОптимизации) Экспорт
	Возврат ИнтеграцияЗЕРНОПовтИсп.ЭтоВерсияВключая_1_0_8(ПараметрыОптимизации.ВерсияAPI);
КонецФункции

// Устанавливает значение свойства объекта XDTO.
//
// Параметры:
//  ОбъектXDTO          - ОбъектXDTO - Объект XDTO
//  ИмяСвойства         - Строка     - Имя свойства.
//  ЗначениеСвойства    - Произвольный - значение свойства
//  КешОшибок           - Структура    - см. ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки()
//  Глубина             - Неопределено, Число  - уровень вложенности ошибки в макете
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КешОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = РаботаСXMLИС.ДанныеДляРасшифровкиОшибок(, Глубина);
	ДанныеДляРасшифровкиОшибок.Таблица = ИнтеграцияЗЕРНОПовтИсп.ТаблицаПолейДанныйДляРасшифровкиОшибок();
	
	РаботаСXMLИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок);
	
КонецПроцедуры

// Устанавливает значение свойства объекта XDTO.
// 
// Параметры:
//  ОбъектXDTO          - ОбъектXDTO - Объект XDTO
//  ИмяСвойства         - Строка     - Имя свойства.
//  ЗначениеСвойства    - Произвольный - значение свойства
//  КешОшибок           - Структура    - см. ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки()
//  Глубина             - Неопределено, Число  - уровень вложенности ошибки в макете
//
Процедура УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КешОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = РаботаСXMLИС.ДанныеДляРасшифровкиОшибок(, Глубина);
	ДанныеДляРасшифровкиОшибок.Таблица = ИнтеграцияЗЕРНОПовтИсп.ТаблицаПолейДанныйДляРасшифровкиОшибок();
	
	РаботаСXMLИС.УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок);
	
КонецПроцедуры

// Преобразует объект XDTO в XML
//
// Параметры:
//  ОбъектXDTO          - ОбъектXDTO - Объект XDTO
//  ПространствоИмен    - Строка     - Пространство имен.
//  ИмяТипа             - Строка     - Имя типа.
//  ПараметрыОбмена     - см. ИнтеграцияЗЕРНО.ПараметрыОбмена 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ПространствоИмен, ИмяТипа, ПараметрыОбмена = Неопределено) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(РаботаСXMLИС.ПараметрыФорматированияXML(Ложь));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("zerno:MessagePrimaryContent");
	
	Зависимости = Новый Массив;
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema-instance");
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema");
	
	РаботаСXMLИС.ЗависимыеПространстваИмен(ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).Зависимости, Зависимости);
	
	Если Зависимости.Найти(ПространствоИмен) = Неопределено Тогда
		Зависимости.Добавить(ПространствоИмен);
	КонецЕсли;
	
	Для Каждого ЗависимоеПространство Из Зависимости Цикл
		Префикс = ПрефиксПространстваИмен(ЗависимоеПространство);
		Если НЕ ПустаяСтрока(Префикс) Тогда
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Префикс, ЗависимоеПространство);
		КонецЕсли;
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	ПакетыXDTO = ИнтеграцияЗЕРНО.ПакетыXDTO();
	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОптимизации = ИнтеграцияЗЕРНО.ПараметрыОптимизации();
	Иначе
		ПараметрыОптимизации = ПараметрыОбмена.ПараметрыОптимизации;
	КонецЕсли;
	
	Если ПараметрыОптимизации.ПоддерживаемыеВерсииAPI.Найти(ПараметрыОптимизации.ВерсияAPI) <> Неопределено Тогда
		Для Каждого ПакетXDTO Из ПакетыXDTO.СписокAPI Цикл
			ТекстXML = СтрЗаменить(
				ТекстXML,
				ПакетXDTO.ПространствоИмен,
				СтрЗаменить(
					ПакетXDTO.ПространствоИмен,
					ПакетыXDTO.ВерсияAPI,
					ПараметрыОптимизации.ВерсияAPI));
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыОптимизации.ПоддерживаемыеВерсииAPI.Найти(ПараметрыОптимизации.ВерсияСервисаAPI) <> Неопределено Тогда
		Для Каждого ПакетXDTO Из ПакетыXDTO.СписокСервисаAPI Цикл
			ТекстXML = СтрЗаменить(
				ТекстXML,
				ПакетXDTO.ПространствоИмен,
				СтрЗаменить(
					ПакетXDTO.ПространствоИмен,
					ПакетыXDTO.ВерсияСервисаAPI,
					ПараметрыОптимизации.ВерсияСервисаAPI));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Глубина) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = РаботаСXMLИС.ДанныеДляРасшифровкиОшибок(,Глубина);
	Возврат РаботаСXMLИС.ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, ДанныеДляРасшифровкиОшибок);
	
КонецФункции

Процедура ОбработатьДанныеРезультатаОтвета(ЗНАЧ ИсходныйТекстОтвета, ПараметрыОбмена, ВозвращаемоеЗначение) Экспорт
	
	ПараметрыПреобразования = ПараметрыОбмена.ПараметрыПреобразования;
	ПакетыXDTO              = ИнтеграцияЗЕРНО.ПакетыXDTO();
	ПараметрыОптимизации    = ПараметрыОбмена.ПараметрыОптимизации;
	
	Попытка
		
		ПостроительDOM          = Новый ПостроительDOM;
		ЧтениеXML               = Новый ЧтениеXML;
		ЧитатьВерсиейAPI        = ПакетыXDTO.ВерсияAPI;
		ЧитатьВерсиейСервисаAPI = ПакетыXDTO.ВерсияСервисаAPI;
		
		ЧтениеXML.УстановитьСтроку(ИсходныйТекстОтвета);
		
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		УзлыПоИмени = ДокументDOM.ПолучитьЭлементыПоИмени("*", "Body");
		
		Если УзлыПоИмени.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка разбора конверта SOAP. Не найден узел Body'");
		КонецЕсли;
		
		УзелDOM = УзлыПоИмени[0];
		Если УзелDOM.ПервыйДочерний = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка разбора конверта SOAP. Не найден узел дочерний узел Body'");
		КонецЕсли;
		
		ТекстТела           = ТекстXMLУзлаDOM(УзелDOM.ПервыйДочерний);
		ЛокальноеИмя        = УзелDOM.ПервыйДочерний.ЛокальноеИмя;
		URIПространстваИмен = УзелDOM.ПервыйДочерний.URIПространстваИмен;
		
		Если ЛокальноеИмя = "Fault" Тогда
			
			ОбъектXDTO = РаботаСXMLИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстТела);
			
		Иначе
			
			ЧастиURL               = СтрРазделить(URIПространстваИмен, "/");
			ВерсияСервисаAPIОтвета = ЧастиURL[ЧастиURL.ВГраница()];
			Если ВерсияСервисаAPIОтвета <> ПакетыXDTO.ВерсияСервисаAPI Тогда
				Для Каждого ПакетXDTO Из ПакетыXDTO.СписокСервисаAPI Цикл
					ТекстТела = СтрЗаменить(
						ТекстТела,
						СтрЗаменить(ПакетXDTO.ПространствоИмен, ПакетыXDTO.ВерсияСервисаAPI, ВерсияСервисаAPIОтвета),
						ПакетXDTO.ПространствоИмен);
				КонецЦикла;
			КонецЕсли;
			
			ВладелецСодержания = ДокументDOM.ПолучитьЭлементыПоИмени("*", "MessagePrimaryContent");
			Если ВладелецСодержания.Количество() > 0 Тогда
				
				УзелСодержания = ВладелецСодержания[0].ПервыйДочерний;
				
				Если УзелСодержания <> Неопределено Тогда
					
					ЧастиURL        = СтрРазделить(УзелСодержания.URIПространстваИмен, "/");
					ВерсияAPIОтвета = ЧастиURL[ЧастиURL.ВГраница()];
					Если ПараметрыОптимизации.ПоддерживаемыеВерсииAPI.Найти(ВерсияAPIОтвета) = Неопределено Тогда
						РанняяПоддерживаемаяВерсияAPI = ПараметрыОптимизации.ПоддерживаемыеВерсииAPI[ПараметрыОптимизации.ПоддерживаемыеВерсииAPI.ВГраница()];
						Если ИнтеграцияИСКлиентСервер.СравнитьВерсии(РанняяПоддерживаемаяВерсияAPI, ВерсияAPIОтвета) > 0 Тогда
							ЧитатьВерсиейAPI = РанняяПоддерживаемаяВерсияAPI;
						КонецЕсли;
					Иначе
						ЧитатьВерсиейAPI = ВерсияAPIОтвета;
					КонецЕсли;
					
					Если ЧитатьВерсиейAPI <> ВерсияAPIОтвета Тогда
						Для Каждого ПакетXDTO Из ПакетыXDTO.СписокAPI Цикл
							ТекстТела = СтрЗаменить(
								ТекстТела,
								СтрЗаменить(ПакетXDTO.ПространствоИмен, ЧитатьВерсиейAPI, ВерсияAPIОтвета),
								ПакетXDTO.ПространствоИмен);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			URIПространстваИмен  = ПространствоИменПоИмениПакетаXDTO("zerno_ws_types", ПараметрыОбмена.ПараметрыОптимизации, ПакетыXDTO.ВерсияСервисаAPI);
			ОбъектXDTO           = ПрочитатьОбъект(ТекстТела, URIПространстваИмен, ЛокальноеИмя);
			
		КонецЕсли;
		
	Исключение
		ОбработатьОшибку(
			НСтр("ru = 'При разборе XML ответа возникла ошибка:
				       |Текст ошибки: %ТекстОшибки%'"),
			РасширеннаяИнформацияОбОшибке(
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			ВозвращаемоеЗначение);
		Возврат;
	КонецПопытки;
	
	ПреобразованныйОбъектXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(URIПространстваИмен, ЛокальноеИмя);
	ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
		ОбъектXDTO, ПреобразованныйОбъектXDTO, ПараметрыПреобразования, ЧитатьВерсиейAPI, ЧитатьВерсиейСервисаAPI);
	
	ДанныеОбработки = Новый Структура();
	КорневыеУзлы    = Новый Массив();
	
	ОбъектXDTOВСтруктуру(ПреобразованныйОбъектXDTO, ПараметрыПреобразования, КорневыеУзлы);
	
	Для Каждого ДанныеУзла Из КорневыеУзлы Цикл
		ИмяСвойства = ДанныеУзла.Параметры.ИмяПоляРезультат;
		ДанныеОбработки.Вставить(ИмяСвойства, ДанныеУзла.Значение);
	КонецЦикла;
	
	КодОтветаСервиса = Неопределено;
	ДанныеОшибки     = Неопределено;
	Если ДанныеОбработки.Свойство("КодОтвета", КодОтветаСервиса)
		И ЗначениеЗаполнено(КодОтветаСервиса) Тогда
		ДанныеОбработки.Вставить("СтатусОбработки", СтатусОбработкиСообщения(КодОтветаСервиса));
	ИначеЕсли ДанныеОбработки.Свойство("ДанныеОшибки", ДанныеОшибки) Тогда
		ДанныеОбработки.Вставить("СтатусОбработки", Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка);
		ТекстыОшибок = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеОшибки.faultstring) Тогда
			Если ЗначениеЗаполнено(ДанныеОшибки.faultcode) Тогда
				ТекстыОшибок.Добавить(СтрШаблон("%1 (%2)", ДанныеОшибки.faultstring, ДанныеОшибки.faultcode));
			Иначе
				ТекстыОшибок.Добавить(ДанныеОшибки.faultstring);
			КонецЕсли;
		КонецЕсли;
		Если ДанныеОбработки.Свойство("Объект")
			И ДанныеОбработки.Объект <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеОбработки.Объект.Description) Тогда
				Если ЗначениеЗаполнено(ДанныеОбработки.Объект.Code) Тогда
					ТекстыОшибок.Добавить(СтрШаблон("%1 (%2)", ДанныеОбработки.Объект.Description, ДанныеОбработки.Объект.Code));
				Иначе
					ТекстыОшибок.Добавить(ДанныеОбработки.Объект.Description);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеОбработки.Объект.Details) Тогда
				ТекстыОшибок.Добавить(ДанныеОбработки.Объект.Details);
			КонецЕсли;
		КонецЕсли;
		ДанныеОбработки.Вставить("ТекстОшибки",           СтрСоединить(ТекстыОшибок, Символы.ПС));
		ДанныеОбработки.Вставить("ЭтоОбработаннаяОшибка", Истина);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, ДанныеОбработки);
	
КонецПроцедуры

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
//  ПараметрыПреобразования - см. ПараметрыПреобразования
//  КорневыеУзлы - Массив из Структура, Неопределено -
//  ЭтоВложенныйКорневойУзел - Булево -
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено, КорневыеУзлы = Неопределено, ЭтоВложенныйКорневойУзел = Ложь) Экспорт
	
	Структура             = Новый Структура;
	ТипОбъектаXDTO        = ОбъектXDTO.Тип();
	ТипЛюбойТип           = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	ПроверятьКорневыеУзлы = (Не ЭтоВложенныйКорневойУзел И ПараметрыПреобразования <> Неопределено);
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства                = Свойство.Имя;
		ТипСвойства                = Свойство.Тип;
		ЗначениеСвойства           = ОбъектXDTO[ИмяСвойства];
		ЭтоКорневойТип             = Ложь;
		
		Если ПроверятьКорневыеУзлы Тогда
			ПараметрыКорневогоТипа = ПараметрыПреобразования.КорневыеТипы[ТипСвойства];
			Если ПараметрыКорневогоТипа <> Неопределено
				И (ПараметрыКорневогоТипа.ИмяПоля = Неопределено
					Или ПараметрыКорневогоТипа.ИмяПоля = ИмяСвойства) Тогда
				ЭтоКорневойТип = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования, КорневыеУзлы, ЭтоВложенныйКорневойУзел));
			
			ДобавитьИдентификаторВТаблицуПриПреобразованииВСтруктуру(
				ТипСвойства,
				Структура[ИмяСвойства],
				ИмяСвойства,
				ПараметрыПреобразования);
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			ПроверкаЭлеметаНаКорневыеТипыВыполнена = (Не ПроверятьКорневыеУзлы);
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					ПреобразованноеЗначение = ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования, КорневыеУзлы, ЭтоВложенныйКорневойУзел);
				Иначе
					ПреобразованноеЗначение = ЭлементСписка;
				КонецЕсли;
				Структура[ИмяСвойства].Добавить(ПреобразованноеЗначение);
				
				Если Не ПроверкаЭлеметаНаКорневыеТипыВыполнена Тогда
					ПроверкаЭлеметаНаКорневыеТипыВыполнена = Истина;
					Если ТипСвойства = ТипЛюбойТип Тогда
						Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
							ПараметрыКорневогоТипа = ПараметрыПреобразования.КорневыеТипы[ЭлементСписка.Тип()];
							Если ПараметрыКорневогоТипа <> Неопределено
								И (ПараметрыКорневогоТипа.ИмяПоля = Неопределено
									Или ПараметрыКорневогоТипа.ИмяПоля = ИмяСвойства) Тогда
								ЭтоКорневойТип = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			ДобавитьИдентификаторВТаблицуПриПреобразованииВСтруктуру(
				ТипСвойства, ЗначениеСвойства, ИмяСвойства, ПараметрыПреобразования);
			ДобавитьИдентификаторВТаблицуПриПреобразованииВСтруктуру(
				ТипОбъектаXDTO, ЗначениеСвойства, ИмяСвойства, ПараметрыПреобразования);
			
		КонецЕсли;
		
		Если ЭтоКорневойТип Тогда
			ДанныеУзла = Новый Структура();
			ДанныеУзла.Вставить("Значение",  Структура[ИмяСвойства]);
			ДанныеУзла.Вставить("Параметры", ПараметрыКорневогоТипа);
			КорневыеУзлы.Добавить(ДанныеУзла);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверятьКорневыеУзлы Тогда
		ПараметрыКорневогоТипа = ПараметрыПреобразования.КорневыеТипы[ТипОбъектаXDTO];
		Если ПараметрыКорневогоТипа <> Неопределено Тогда
			ДанныеУзла = Новый Структура();
			ДанныеУзла.Вставить("Значение",  Структура);
			ДанныеУзла.Вставить("Параметры", ПараметрыКорневогоТипа);
			КорневыеУзлы.Добавить(ДанныеУзла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция МассивДанныхПоляXDTO(ОбъектXDTO, ИмяПоля = Неопределено) Экспорт
	
	Если ИмяПоля = Неопределено Тогда
		Значение = ОбъектXDTO;
	Иначе
		Значение = ОбъектXDTO[ИмяПоля];
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат Новый Массив();
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Возврат Значение;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение);
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьИдентификаторВТаблицуПриПреобразованииВСтруктуру(ТипОбъектаXDTO, ЗначениеСвойства, ИмяСвойства, ПараметрыПреобразования)
	
	Если ПараметрыПреобразования.НайтиИдентификаторы
		И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
		
		Если РезультатПоиска = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыТипа = РезультатПоиска.РеквизитыТипа;
		Если РезультатПоиска.ПараметрыПоИменамПолей.Количество() Тогда
			РеквизитыТипа = РезультатПоиска.ПараметрыПоИменамПолей[ИмяСвойства];
		КонецЕсли;
		
		Если РеквизитыТипа = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если РеквизитыТипа.ИмяПоля <> Неопределено
			И РеквизитыТипа.ИмяПоля <> ИмяСвойства Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, РеквизитыТипа);
		Если ЗначениеЗаполнено(РеквизитыТипа.ВидКлассификатора) Тогда
			СтруктураПоиска.Вставить("ВидКлассификатора", РеквизитыТипа.ВидКлассификатора);
		КонецЕсли;
		СтруктураПоиска.Идентификатор = ПреобразованныйИдентификатор(
			РеквизитыТипа, ПараметрыПреобразования, ЗначениеСвойства);
			
		Если ПараметрыПреобразования.Идентификаторы.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			НоваяСтрока = ПараметрыПреобразования.Идентификаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразованныйИдентификатор(РеквизитыТипа, ПараметрыПреобразования, ЗначениеСвойства) Экспорт
	
	Если РеквизитыТипа.ПоляСоставногоКлюча <> Неопределено Тогда
		
		Возврат СоставнойКлючОбъекта(
			ЗначениеСвойства,
			РеквизитыТипа.ПоляСоставногоКлюча,
			РеквизитыТипа.ДополнительныеДанныеХеша,
			РеквизитыТипа.ХешироватьЗначениеСоставногоКлюча,
			РеквизитыТипа.РазделительПолейКлюча);
			
	ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Число") Тогда
		Возврат Формат(ЗначениеСвойства, "ЧГ=0;");
	Иначе
		Возврат Лев(ЗначениеСвойства, 100);
	КонецЕсли;
	
КонецФункции

Функция ПараметрыПреобразования(ПараметрыОптимизации) Экспорт
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("НайтиИдентификаторы",                 Истина);
	ПараметрыПреобразования.Вставить("ТипыИдентификаторов",                 Новый Соответствие);
	ПараметрыПреобразования.Вставить("Идентификаторы",                      НоваяТаблицаПоискаСсылок());
	ПараметрыПреобразования.Вставить("БлокируемыеОбъекты",                  Новый Соответствие);
	ПараметрыПреобразования.Вставить("КорневыеТипы",                        Новый Соответствие);
	ПараметрыПреобразования.Вставить("ПространстваИменПоИменамСвойств",     Новый Соответствие);
	ПараметрыПреобразования.Вставить("СоответствиеСвойствСОпечатками",      Новый Соответствие);
	ПараметрыПреобразования.Вставить("ТипПроверкиДаты",                     Неопределено);
	ПараметрыПреобразования.Вставить("ТипыИмеющиеВложенныеСвойства",        Новый Соответствие);
	ПараметрыПреобразования.Вставить("ТипыОрганизацийПоИменамСвойств",      Новый Соответствие);
	ПараметрыПреобразования.Вставить("ТипыИмеющиеСодержаниеТега",           Новый Соответствие);
	ПараметрыПреобразования.Вставить("ТипыДокументовПоИменамСвойств",       Новый Соответствие);
	ПараметрыПреобразования.Вставить("ТипыПриемникаПростыхТипов",           Новый Соответствие);
	
	ПараметрыПреобразования.ТипПроверкиДаты = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
	ПараметрыПреобразования.СоответствиеСвойствСОпечатками.Вставить("WeightDiscperancyCause", "WeightDiscrepancyCause");
	
	ВерсияСервисаAPI = ИнтеграцияЗЕРНО.ВерсияСервисаAPI();
	
	// Организации и контрагенты
	РеквизитыТипа = Новый Структура();
	РеквизитыТипа.Вставить("ТипОрганизации", Перечисления.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо);
	РеквизитыТипа.Вставить("ИмяПоля",        "LegalEntity");
	ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств.Вставить("LegalEntityType", РеквизитыТипа);
	РеквизитыТипа = Новый Структура();
	РеквизитыТипа.Вставить("ТипОрганизации", Перечисления.ТипыОрганизацийЗЕРНО.ИндивидуальныйПредприниматель);
	РеквизитыТипа.Вставить("ИмяПоля",        "SoleProprietor");
	ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств.Вставить("SoleProprietorType", РеквизитыТипа);
	РеквизитыТипа = Новый Структура();
	РеквизитыТипа.Вставить("ТипОрганизации", Перечисления.ТипыОрганизацийЗЕРНО.Самозанятый);
	РеквизитыТипа.Вставить("ИмяПоля",        "SelfEmployed");
	ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств.Вставить("SelfEmployedType", РеквизитыТипа);
	РеквизитыТипа = Новый Структура();
	РеквизитыТипа.Вставить("ТипОрганизации", Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация);
	РеквизитыТипа.Вставить("ИмяПоля",        "ForeignLegalEntity");
	ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств.Вставить("ForeignLegalEntityType", РеквизитыТипа);
	РеквизитыТипа = Новый Структура();
	РеквизитыТипа.Вставить("ТипОрганизации", Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизацияБезРегистрацииВРФ);
	РеквизитыТипа.Вставить("ИмяПоля",        "ForeignEntity");
	ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств.Вставить("ForeignType", РеквизитыТипа);
	
	ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_ws_faults", ПараметрыОптимизации, ВерсияСервисаAPI));
	
	Для Каждого ВерсияСервисаAPI Из ИнтеграцияЗЕРНО.ПоддерживаемыеВерсииСервисаAPI() Цикл
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_ws_faults", ПараметрыОптимизации, ВерсияСервисаAPI), ВерсияСервисаAPI);
	КонецЦикла;
	
	Для Каждого ВерсияAPI Из ИнтеграцияЗЕРНО.ПоддерживаемыеВерсииAPI() Цикл
		
		ОбъектСпискаСтрок = РаботаСXMLИС.ОбъектXDTO(ПространствоИменПоИмениПакетаXDTO("zerno_dictionary", ПараметрыОптимизации, ВерсияAPI), "StringListType");
		ПараметрыПреобразования.ТипыИмеющиеВложенныеСвойства.Вставить(ОбъектСпискаСтрок.Тип(), ОбъектСпискаСтрок.Свойства()[0]);
		
		ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_dictionaries", ПараметрыОптимизации, ВерсияAPI));
		ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz",         ПараметрыОптимизации, ВерсияAPI));
		ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_lots",         ПараметрыОптимизации, ВерсияAPI));
		ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_grainmonitor", ПараметрыОптимизации, ВерсияAPI));
		ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb",          ПараметрыОптимизации, ВерсияAPI));
		ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz",     ПараметрыОптимизации, ВерсияAPI));
		
		РеквизитыТипа = Новый Структура;
		РеквизитыТипа.Вставить("ИмяПоляПриемника", "__content");
		ПараметрыПреобразования.ТипыИмеющиеСодержаниеТега.Вставить(
			ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_common", ПараметрыОптимизации, ВерсияAPI), "ValueQualityIndicatorType"),
			РеквизитыТипа);
		
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_dictionaries", ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz",         ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_lots",         ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_grainmonitor", ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb",          ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz",     ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
		ДобавитьПространстваИменПоИменамСвойств(
			ПараметрыПреобразования, ПространствоИменПоИмениПакетаXDTO("zerno_dictionary",       ПараметрыОптимизации, ВерсияAPI), ВерсияAPI);
			
		Для Каждого КлючИЗначение Из ПараметрыПреобразования.СоответствиеСвойствСОпечатками Цикл
			ПространствоИмен = ПараметрыПреобразования.ПространстваИменПоИменамСвойств[ВерсияAPI][КлючИЗначение.Ключ];
			Если ПространствоИмен <> Неопределено Тогда
				ПараметрыПреобразования.ПространстваИменПоИменамСвойств[ВерсияAPI].Вставить(КлючИЗначение.Значение, ПространствоИмен);
			КонецЕсли;
		КонецЦикла;
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_dictionary", ПараметрыОптимизации, ВерсияAPI), "StringListType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ВложенноеСвойство", "Item");
		ПараметрыПреобразования.ТипыПриемникаПростыхТипов.Вставить(
			ТипПоля,
			РеквизитыТипа);
		
		Для Каждого ВидКлассификатора Из Перечисления.ВидыКлассификаторовЗЕРНО Цикл
		
			Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
				Продолжить;
			ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
				Продолжить;
			ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ТипУслугиЭлеватора Тогда
				Продолжить;
			ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения Тогда
				Продолжить;
			КонецЕсли;
			
			ТипПоля = ФабрикаXDTO.Тип(
				ПространствоИменПоИмениПакетаXDTO("zerno_dictionary", ПараметрыОптимизации, ВерсияAPI),
				ИмяСвойстваТипаКлассификатораПоВидуКлассификатора(ВидКлассификатора));
			ДобавитьРеквизитыТипа(
				ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.КлассификаторНСИЗЕРНО,, ВидКлассификатора);
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств Цикл
			ПоляСоставногоКлюча = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПоляСоставногоКлючаПоТипуОрганизации(
				ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств[КлючИЗначение.Ключ].ТипОрганизации);
			ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОптимизации, ВерсияAPI), КлючИЗначение.Ключ);
			ИмяПоля = КлючИЗначение.Значение.ИмяПоля;
			ДобавитьРеквизитыТипа(
				ПараметрыПреобразования,
				ТипПоля,
				Метаданные.Справочники.КлючиРеквизитовОрганизацийЗЕРНО,
				ИмяПоля,,
				ПоляСоставногоКлюча);
		КонецЦикла;
		
		// Первичные документы
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_common", ПараметрыОптимизации, ВерсияAPI), "DocNumberDateType");
		ПоляСоставногоКлюча = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.ПоляСоставногоКлючаПоТипуПервичногоДокумента();
		МетаданныеКлюча     = Метаданные.Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО;
		
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ГосКонтракт);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("GovernmentContract", РеквизитыТипа);
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ГПД);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("Contract", РеквизитыТипа);
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ДополнительноеСоглашение);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("AdditionalAgreement", РеквизитыТипа);
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.КонтрактВЭД);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("ContractVED", РеквизитыТипа);
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.Товаросопроводительный);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("OtherTransportDocument", РеквизитыТипа);
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ПротоколИсследований);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("Protocol", РеквизитыТипа);
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.АктОтбораПроб);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("Check", РеквизитыТипа);
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_sdiz", ПараметрыОптимизации, ВерсияAPI), "ConfirmingDocumentType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ПодтверждениеПраваСобственности);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("ConfirmingDocument", РеквизитыТипа);
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_common", ПараметрыОптимизации, ВерсияAPI), "DeclarationOfConformitType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ДекларацияСоответствия);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("DeclarationOfConformit", РеквизитыТипа);
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_common", ПараметрыОптимизации, ВерсияAPI), "PhytosanitaryCertificateType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ФитосанитарныйСертификат);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("PhytosanitaryCertificate", РеквизитыТипа);
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_common", ПараметрыОптимизации, ВерсияAPI), "VeterinaryCertificateType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ВетеринарныйСертификат);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("VeterinaryCertificate", РеквизитыТипа);
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_common", ПараметрыОптимизации, ВерсияAPI), "DocOtherNumberDateType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.Товаросопроводительный);
		РеквизитыТипа.Вставить("ТипПоля",      ТипПоля);
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("OtherDocument", РеквизитыТипа);
		
		Для Каждого КлючИЗначение Из ПараметрыПреобразования.ТипыДокументовПоИменамСвойств Цикл
			ИмяПоля       = КлючИЗначение.Ключ;
			ТипПоля       = КлючИЗначение.Значение.ТипПоля;
			ТипДокумента  = КлючИЗначение.Значение.ТипДокумента;
			РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлюча, ИмяПоля,, ПоляСоставногоКлюча);
			РеквизитыТипа.ДополнительныеДанныеХеша = ТипДокумента;
		КонецЦикла;
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_gpb_sdiz", ПараметрыОптимизации, ВерсияAPI), "ConfirmingDocumentType");
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлюча, "ConfirmingDocument",, ПоляСоставногоКлюча);
		РеквизитыТипа.ДополнительныеДанныеХеша = Перечисления.ТипыПервичныхДокументовЗЕРНО.ПодтверждениеПраваСобственности;
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_sdiz", ПараметрыОптимизации, ВерсияAPI), "AcceptanceElevatorType");
		РеквизитыТипа = Новый Структура();
		РеквизитыТипа.Вставить("ТипДокумента", Перечисления.ТипыПервичныхДокументовЗЕРНО.ДоговорХранения);
		ПоляСоставногоКлюча = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.ПоляСоставногоКлючаПоТипуПервичногоДокумента(
			Перечисления.ТипыПервичныхДокументовЗЕРНО.ДоговорХранения);
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлюча, "AcceptanceElevator",, ПоляСоставногоКлюча);
		РеквизитыТипа.ДополнительныеДанныеХеша = Перечисления.ТипыПервичныхДокументовЗЕРНО.ДоговорХранения;
		ПараметрыПреобразования.ТипыДокументовПоИменамСвойств.Вставить("OtherDocument", РеквизитыТипа);
		
		// Данные адреса
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОптимизации, ВерсияAPI), "AddressRFType");
		ПоляСоставногоКлюча   = Справочники.КлючиАдресовЗЕРНО.ПоляСоставногоКлюча();
		МетаданныеКлючаАдреса = Метаданные.Справочники.КлючиАдресовЗЕРНО;
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлючаАдреса, "StoragePlace",, ПоляСоставногоКлюча);
		РеквизитыТипа.ХешироватьЗначениеСоставногоКлюча = Ложь;
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлючаАдреса, "PlaceOfChecking",, ПоляСоставногоКлюча);
		РеквизитыТипа.ХешироватьЗначениеСоставногоКлюча = Ложь;
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлючаАдреса, "ShipperAddress",, ПоляСоставногоКлюча);
		РеквизитыТипа.ХешироватьЗначениеСоставногоКлюча = Ложь;
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлючаАдреса, "ConsigneeAddress",, ПоляСоставногоКлюча);
		РеквизитыТипа.ХешироватьЗначениеСоставногоКлюча = Ложь;
		РеквизитыТипа = ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, МетаданныеКлючаАдреса, "MovingStoragePlace",, ПоляСоставногоКлюча);
		РеквизитыТипа.ХешироватьЗначениеСоставногоКлюча = Ложь;
		
		// Реестр партий
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_lots", ПараметрыОптимизации, ВерсияAPI), "RecordLotType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрПартийЗЕРНО, "number");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_lots", ПараметрыОптимизации, ВерсияAPI), "RecordGpbType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрПартийЗЕРНО, "number");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_lots", ПараметрыОптимизации, ВерсияAPI), "ParentLotType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрПартийЗЕРНО, "lotNumber");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_gpb", ПараметрыОптимизации, ВерсияAPI), "ParentGpbType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрПартийЗЕРНО, "gpbNumber");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_sdiz", ПараметрыОптимизации, ВерсияAPI), "RecordSDIZType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрПартийЗЕРНО, "lotNumber");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_gpb_sdiz", ПараметрыОптимизации, ВерсияAPI), "RecordGpbSDIZType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрПартийЗЕРНО, "gpbNumber");
		
		//Результаты исследования
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_grainmonitor", ПараметрыОптимизации, ВерсияAPI), "RecordResearchType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РезультатыИсследованийЗЕРНО, "reserchNumber");
		
		//Акт отбора проб
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_grainmonitor", ПараметрыОптимизации, ВерсияAPI), "RecordSamplesPickingType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.АктыОтбораПробЗЕРНО, "id");
		
		//Реестр мест формирования партий
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_grainmonitor", ПараметрыОптимизации, ВерсияAPI), "RecordPrimaryStoragePlaceType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.РеестрМестФормированияПартийЗЕРНО, "id");
		
		// СДИЗ
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_sdiz", ПараметрыОптимизации, ВерсияAPI), "RecordSDIZType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.СДИЗЗЕРНО, "number");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_sdiz", ПараметрыОптимизации, ВерсияAPI), "RecordSDIZElevatorType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.СДИЗЗЕРНО, "number");
		
		ТипПоля = ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_gpb_sdiz", ПараметрыОптимизации, ВерсияAPI), "RecordGpbSDIZType");
		ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипПоля, Метаданные.Справочники.СДИЗЗЕРНО, "number");
		
	КонецЦикла;
	
	РеквизитыТипа = РеквизитыКорневогоТипа("КодОтвета");
	ПараметрыПреобразования.КорневыеТипы.Вставить(
		ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_ws_types", ПараметрыОптимизации, ВерсияСервисаAPI), "ResponseCodeType"),
		РеквизитыТипа);
		
	РеквизитыТипа = РеквизитыКорневогоТипа("ИдентификаторЗаявки");
	РеквизитыТипа.ИмяПоля = "MessageID";
	ПараметрыПреобразования.КорневыеТипы.Вставить(
		ФабрикаXDTO.Тип(ПространствоИменПоИмениПакетаXDTO("zerno_ws_types", ПараметрыОптимизации, ВерсияСервисаAPI), "UUID"),
		РеквизитыТипа);
	
	РеквизитыТипа = РеквизитыКорневогоТипа("ДанныеОшибки");
	ПараметрыПреобразования.КорневыеТипы.Вставить(
		ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.Envelope.ПространствоИмен, "Fault"),
		РеквизитыТипа);
	
	// Реестр элеваторов
	РеквизитыТипа = Новый Структура();
	РеквизитыТипа.Вставить("ТипОрганизации", Перечисления.ТипыОрганизацийЗЕРНО.ПустаяСсылка());
	РеквизитыТипа.Вставить("ИмяПоля",        "subject");
	ПараметрыПреобразования.ТипыОрганизацийПоИменамСвойств.Вставить("subject", РеквизитыТипа);
	
	ИмяПоля = "registrationNumber";
	ПространствоИмен = Метаданные.ПакетыXDTO.РеестрЭлеваторовЗЕРНО.ПространствоИмен;
	ТипПоля          = ФабрикаXDTO.Тип(ПространствоИмен, "elevatorResult");
	РеквизитыТипа    = ДобавитьРеквизитыТипа(
		ПараметрыПреобразования,
		ТипПоля,
		Метаданные.Справочники.РеестрЭлеваторовЗЕРНО,
		ИмяПоля);
	
	РеквизитыТипа = РеквизитыКорневогоТипа("Объект");
	ПараметрыПреобразования.КорневыеТипы.Вставить(
		ФабрикаXDTO.Тип(ПространствоИмен, "elevatorList"),
		РеквизитыТипа);
	
	Возврат ПараметрыПреобразования;
	
КонецФункции

Процедура ДобавитьКорневыеТипы(ПараметрыПреобразования, ПространствоИмен)
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
	Для Каждого ЭлементКоллекции Из ПакетXDTO Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ТипОбъектаXDTO") Тогда
			РеквизитыТипа = РеквизитыКорневогоТипа();
			ПараметрыПреобразования.КорневыеТипы.Вставить(
				ФабрикаXDTO.Тип(ПространствоИмен, ЭлементКоллекции.Имя),
				РеквизитыТипа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПространстваИменПоИменамСвойств(ПараметрыПреобразования, ПространствоИмен, ВерсияAPI)
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен);
	Для Каждого Свойство Из ПакетXDTO.КорневыеСвойства Цикл
		ПространстваПоВерсии = ПараметрыПреобразования.ПространстваИменПоИменамСвойств[ВерсияAPI];
		Если ПространстваПоВерсии = Неопределено Тогда
			ПространстваПоВерсии = Новый Соответствие();
			ПараметрыПреобразования.ПространстваИменПоИменамСвойств[ВерсияAPI] = ПространстваПоВерсии;
		КонецЕсли;
		ПространстваПоВерсии.Вставить(Свойство.Имя, Свойство.URIПространстваИмен);
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыКорневогоТипа(ИмяПоляРезультат = "Объект")
	
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяПоляРезультат", ИмяПоляРезультат);
	РеквизитыТипа.Вставить("ИмяПоля",          Неопределено);
	
	Возврат РеквизитыТипа;
	
КонецФункции

Функция ДобавитьРеквизитыТипа(ПараметрыПреобразования, ТипXDTO, МетаданныеОбъекта, ИмяПоля = Неопределено, ВидКлассификатора = Неопределено, ПоляСоставногоКлюча = Неопределено)
	
	ДанныеПоТипу = ПараметрыПреобразования.ТипыИдентификаторов[ТипXDTO];
	Если ДанныеПоТипу = Неопределено Тогда
		ДанныеПоТипу = Новый Структура;
		ДанныеПоТипу.Вставить("РеквизитыТипа",           Неопределено);
		ДанныеПоТипу.Вставить("ИмеетСоставнойКлюч",      ПоляСоставногоКлюча <> Неопределено);
		ДанныеПоТипу.Вставить("ПараметрыПоИменамПолей",  Новый Соответствие());
		ПараметрыПреобразования.ТипыИдентификаторов[ТипXDTO] = ДанныеПоТипу;
	КонецЕсли;
	
	РеквизитыТипа = ПараметрыПоискаСсылкиПоТипу(МетаданныеОбъекта);
	РеквизитыТипа.ВидКлассификатора   = ВидКлассификатора;
	РеквизитыТипа.ПоляСоставногоКлюча = ПоляСоставногоКлюча;
	РеквизитыТипа.ИмяПоля             = ИмяПоля;
	
	Если ИмяПоля = Неопределено Тогда
		ДанныеПоТипу.РеквизитыТипа = РеквизитыТипа;
	Иначе
		ДанныеПоТипу.ПараметрыПоИменамПолей[ИмяПоля] = РеквизитыТипа;
	КонецЕсли;
	
	Возврат РеквизитыТипа;
	
КонецФункции

Процедура ОбработатьОшибку(ТекстОшибки, ИнформацияОбОшибке, ВозвращаемоеЗначение) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда
		КраткоеПредставлениеОшибки   = ИнформацияОбОшибке.КраткоеПредставлениеОшибки;
		ПодробноеПредставлениеОшибки = ИнформацияОбОшибке.ПодробноеПредставлениеОшибки;
	Иначе
		КраткоеПредставлениеОшибки   = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодробноеПредставлениеОшибки) Тогда
		ПодробноеПредставлениеОшибки = КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ЗаписатьОшибкуВЖурналРегистрации(СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", ПодробноеПредставлениеОшибки));
	
	ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка;
	
	ПодготовленныйТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", КраткоеПредставлениеОшибки);
	
	Если Не ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = ПодготовленныйТекстОшибки;
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
		                                 + Символы.ПС
		                                 + ПодготовленныйТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипЗначенияПотребительскогоСвойства(Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	ИначеЕсли Значение = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число Тогда
		Возврат "NUMBER";
	ИначеЕсли Значение = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Булево Тогда
		Возврат "BOOLEAN";
	ИначеЕсли Значение = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Строка Тогда
		Возврат "CHAR";
	ИначеЕсли Значение = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Перечисление Тогда
		Возврат "ENUM";
	
	ИначеЕсли Значение = "NUMBER" Тогда
		Возврат Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число;
	ИначеЕсли Значение = "BOOLEAN" Тогда
		Возврат Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Булево;
	ИначеЕсли Значение = "CHAR" Тогда
		Возврат Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Строка;
	ИначеЕсли Значение = "ENUM" Тогда
		Возврат Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Перечисление;
		
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный тип органичения допустимого значения потребительского свойства ""%1""'"), Значение);
	КонецЕсли;
		
КонецФункции

Функция ТекстXMLУзлаDOM(УзелDOM)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(УзелDOM, ЗаписьXML);
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПрочитатьОбъект(ТекстВходящегоСообщенияXML, ПространствоИмен, ИмяТипа) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияXML);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(
		ЧтениеXML,
		РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа).Тип());
		
	Возврат ОбъектXDTO;
	
КонецФункции

// Преобразует содержимое произвольного объекта XDTO источника (без типов) в содержимое объекта XDTO приемника (с типами).
//
// Параметры:
//  ОбъектXDTOИсточник - ОбъектXDTO - ОбъектXDTO Источник
//  ОбъектXDTOПриемник - ЗначениеXDTO, ОбъектXDTO - ОбъектXDTO Приемник
//  ПараметрыПреобразования - см. ПараметрыПреобразования
//  ЧитатьВерсиейAPI - Строка -
//  ЧитатьВерсиейСервисаAPI - Строка -
// Возвращаемое значение:
//  ЗначениеXDTO, ОбъектXDTO - ОбъектXDTO Приемник
Функция ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ОбъектXDTOИсточник, ОбъектXDTOПриемник, ПараметрыПреобразования, ЧитатьВерсиейAPI, ЧитатьВерсиейСервисаAPI) Экспорт
	
	Для Каждого СвойствоИсточника Из ОбъектXDTOИсточник.Свойства() Цикл
		
		ИмяСвойства      = СвойствоИсточника.Имя;
		ЗначениеСвойства = ОбъектXDTOИсточник[ИмяСвойства];
		
		СвойствоПриемника                 = ОбъектXDTOПриемник.Свойства().Получить(ИмяСвойства);
		ПространствоИменСвойстваПриемника = ПараметрыПреобразования.ПространстваИменПоИменамСвойств[ЧитатьВерсиейAPI][ИмяСвойства];
		Если ПространствоИменСвойстваПриемника = Неопределено Тогда
			ПространствоИменСвойстваПриемника = ПараметрыПреобразования.ПространстваИменПоИменамСвойств[ЧитатьВерсиейСервисаAPI][ИмяСвойства];
		КонецЕсли;
		Если ПространствоИменСвойстваПриемника = Неопределено Тогда
			Если СвойствоПриемника = Неопределено Тогда
				Продолжить;
			Иначе
				ПространствоИменСвойстваПриемника = СвойствоПриемника.URIПространстваИмен;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			ЗаполнятьСвойство = Истина;
			Если СвойствоПриемника = Неопределено Тогда
				Если ТипЗнч(СвойствоИсточника.Тип) <> Тип("ТипОбъектаXDTO") Тогда
					ЗаполнятьСвойство = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СвойствоПриемника.Тип) <> Тип("ТипОбъектаXDTO") Тогда
				ЗаполнятьСвойство = Ложь;
			КонецЕсли;
			
			Если ЗаполнятьСвойство Тогда
				
				ЗначениеСвойстваПриемника = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
					ПространствоИменСвойстваПриемника, ИмяСвойства, ОбъектXDTOПриемник);
				
				Если ТипЗнч(ЗначениеСвойстваПриемника) = Тип("ОбъектXDTO") Тогда
					
					ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
						ЗначениеСвойства,
						ЗначениеСвойстваПриемника,
						ПараметрыПреобразования,
						ЧитатьВерсиейAPI,
						ЧитатьВерсиейСервисаAPI);
					
					ЗаполнитьСодержаниеЭлементаXDTO(
						ПараметрыПреобразования,
						ЗначениеСвойства,
						ЗначениеСвойстваПриемника);
					
					Если СвойствоПриемника = Неопределено Тогда
						ОбъектXDTOПриемник.Добавить(
							ФормаXML.Элемент,
							ПространствоИменСвойстваПриемника,
							ИмяСвойства,
							ЗначениеСвойстваПриемника);
					ИначеЕсли ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриемника);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриемника;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Если СвойствоПриемника <> Неопределено
				И ОбъектXDTOПриемник[ИмяСвойства] = Неопределено Тогда
				ОпасныйРежим = Истина;
			Иначе
				ОпасныйРежим = Ложь;
			КонецЕсли;
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСпискаИсточника = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСпискаИсточника) = Тип("ОбъектXDTO") Тогда
					
					Если (СвойствоПриемника = Неопределено И СвойствоИсточника.Тип.Открытый)
						Или (СвойствоПриемника <> Неопределено И ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO")) Тогда
						
						ИмяСвойстваОбъекта = ПараметрыПреобразования.СоответствиеСвойствСОпечатками[ИмяСвойства];
						Если Не ЗначениеЗаполнено(ИмяСвойстваОбъекта) Тогда
							ИмяСвойстваОбъекта = ИмяСвойства;
						КонецЕсли;
						
						ЭлементаСпискаПриемника = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
							ПространствоИменСвойстваПриемника, ИмяСвойстваОбъекта, ОбъектXDTOПриемник);
						
						Если ТипЗнч(ЭлементаСпискаПриемника) = Тип("ОбъектXDTO") Тогда
							
							Если Не ОпасныйРежим Тогда
								
								ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
									ЭлементСпискаИсточника,
									ЭлементаСпискаПриемника,
									ПараметрыПреобразования,
									ЧитатьВерсиейAPI,
									ЧитатьВерсиейСервисаAPI);
								
								ЗаполнитьСодержаниеЭлементаXDTO(
									ПараметрыПреобразования,
									ЭлементСпискаИсточника,
									ЭлементаСпискаПриемника);
								
								Если СвойствоПриемника = Неопределено
									Или СвойствоПриемника.Тип.Открытый Тогда
									ОбъектXDTOПриемник.Добавить(
										ФормаXML.Элемент,
										ПространствоИменСвойстваПриемника,
										ИмяСвойства,
										ЭлементаСпискаПриемника);
								Иначе
									ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементаСпискаПриемника);
								КонецЕсли;
								
							Иначе
								
								Если ОбъектXDTOПриемник[ИмяСвойства] = Неопределено Тогда
									ОбъектXDTOПриемник[ИмяСвойства] = ЭлементаСпискаПриемника;
								КонецЕсли;
								
								ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
									ЭлементСпискаИсточника,
									ОбъектXDTOПриемник[ИмяСвойства],
									ПараметрыПреобразования,
									ЧитатьВерсиейAPI,
									ЧитатьВерсиейСервисаAPI);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
				
				Иначе
					
					Если ОбъектXDTOПриемник[ИмяСвойства] = Неопределено Тогда
						ЭлементаСпискаПриемника = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
							ПространствоИменСвойстваПриемника,
							ИмяСвойства,
							ОбъектXDTOПриемник);
						ОбъектXDTOПриемник[ИмяСвойства] = ЭлементаСпискаПриемника;
					КонецЕсли;
					
					ПриемникЗначенияСвойства = ОбъектXDTOПриемник[ИмяСвойства];
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("ОбъектXDTO") Тогда
						СвойствоВложенногоОбъекта = ПараметрыПреобразования.ТипыИмеющиеВложенныеСвойства[ЭлементаСпискаПриемника.Тип()];
						Если СвойствоВложенногоОбъекта <> Неопределено Тогда
							ПриемникЗначенияСвойства = ОбъектXDTOПриемник[ИмяСвойства][СвойствоВложенногоОбъекта.Имя];
						КонецЕсли;
					КонецЕсли;
					
					ПриемникЗначенияСвойства.Добавить(ЭлементСпискаИсточника);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			РеквизитыТипа = ПараметрыПреобразования.ТипыПриемникаПростыхТипов[СвойствоПриемника.Тип];
			
			Если РеквизитыТипа = Неопределено
				Или ТипЗнч(ЗначениеСвойства) <> Тип("Строка") Тогда
				
				ФасетыПриемника = СвойствоПриемника.Тип.Фасеты;
				Если ФасетыПриемника = Неопределено Тогда
					ФасетыПриемника = СвойствоПриемника.Тип.БазовыйТип.Фасеты;
				КонецЕсли;
				
				ЗаполнитьСвойствоПоФасету(
					ОбъектXDTOПриемник,
					СвойствоПриемника,
					ИмяСвойства,
					ПространствоИменСвойстваПриемника,
					ПараметрыПреобразования,
					ЗначениеСвойства,
					ФасетыПриемника);
			
			Иначе
				
				Если ОбъектXDTOПриемник[ИмяСвойства] = Неопределено Тогда
					ОбъектXDTOПриемник[ИмяСвойства] = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
						ПространствоИменСвойстваПриемника, ИмяСвойства, ОбъектXDTOПриемник)
				КонецЕсли;
				
				ВложенноеСвойство = ОбъектXDTOПриемник[ИмяСвойства].Свойства().Получить(РеквизитыТипа.ВложенноеСвойство);
				
				ФасетыПриемника = ВложенноеСвойство.Тип.Фасеты;
				Если ФасетыПриемника = Неопределено Тогда
					ФасетыПриемника = ВложенноеСвойство.Тип.БазовыйТип.Фасеты;
				КонецЕсли;
				
				ЗаполнитьСвойствоПоФасету(
					ОбъектXDTOПриемник[ИмяСвойства],
					ВложенноеСвойство,
					РеквизитыТипа.ВложенноеСвойство,
					ПространствоИменСвойстваПриемника,
					ПараметрыПреобразования,
					ЗначениеСвойства,
					ФасетыПриемника);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектXDTOПриемник;
	
КонецФункции

Процедура ЗаполнитьСодержаниеЭлементаXDTO(ПараметрыПреобразования, ЗначениеИсточник, ЗначениеПриемник)
	
	РеквизитыТипаСодержание = ПараметрыПреобразования.ТипыИмеющиеСодержаниеТега[ЗначениеПриемник.Тип()];
	Если РеквизитыТипаСодержание <> Неопределено
		И ЗначениеИсточник.Последовательность().Количество() Тогда
		ЗначениеСодержания = ЗначениеИсточник.Последовательность().ПолучитьТекст(0);
		ЗначениеПриемник[РеквизитыТипаСодержание.ИмяПоляПриемника] = ЗначениеСодержания;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойствоПоФасету(ОбъектXDTOПриемник, СвойствоПриемника, ИмяСвойства, ПространствоИменСвойстваПриемника, ПараметрыПреобразования, ЗначениеСвойства, ФасетыПриемника)
	
	ЗначениеСвойстваПриведенноеКФасету = ПривестиЗначениеСвойстваКФасетам(ЗначениеСвойства, ФасетыПриемника);
	Если ЗначениеСвойстваПриведенноеКФасету <> Неопределено Тогда
		
		Попытка
			Если СвойствоПриемника = Неопределено Тогда
				ОбъектXDTOПриемник.Добавить(
					ФормаXML.Элемент,
					ПространствоИменСвойстваПриемника,
					ИмяСвойства,
					ЗначениеСвойстваПриведенноеКФасету);
			ИначеЕсли ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
				ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриведенноеКФасету);
			ИначеЕсли СвойствоПриемника.Тип.БазовыйТип = ПараметрыПреобразования.ТипПроверкиДаты Тогда
				ШаблонПоискаБезСекунд = "T00:00";
				ВремяПоШаблону        = Прав(ЗначениеСвойстваПриведенноеКФасету, СтрДлина(ШаблонПоискаБезСекунд));
				Если Лев(ВремяПоШаблону, 1) = Лев(ШаблонПоискаБезСекунд, 1) Тогда
					ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриведенноеКФасету + ":00";
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриведенноеКФасету;
				КонецЕсли;
			Иначе
				Если ИмяСвойства = "faultcode" Тогда
					ЗначениеСвойстваПриведенноеКФасету = СтрЗаменить(ЗначениеСвойстваПриведенноеКФасету, "soap:", "");
				КонецЕсли;
				ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриведенноеКФасету;
			КонецЕсли;
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасширеннаяИнформацияОбОшибке(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки = Неопределено) Экспорт
	
	РасширеннаяИнформацияОбОшибке = Новый Структура;
	РасширеннаяИнформацияОбОшибке.Вставить("КраткоеПредставлениеОшибки",   КраткоеПредставлениеОшибки);
	РасширеннаяИнформацияОбОшибке.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	
	Возврат РасширеннаяИнформацияОбОшибке;
	
КонецФункции

Функция ПривестиЗначениеСвойстваКФасетам(Значение, Фасеты)
	
	Если Фасеты = Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	ПриведенноеЗначение  = Значение;
	ПроверкаПеречисления = Ложь;
	ПеречислениеНайдено  = Ложь;
	
	Для Каждого Фасет Из Фасеты Цикл
		Если Фасет.Вид = ВидФасетаXDTO.МаксДлина
			Или Фасет.Вид = ВидФасетаXDTO.Длина Тогда
			ПриведенноеЗначение = Лев(СокрЛП(Значение), Число(Фасет.Значение));
		ИначеЕсли Фасет.Вид = ВидФасетаXDTO.МинДлина Тогда
			МинимальнаяДлина = Число(Фасет.Значение);
			Пока СтрДлина(ПриведенноеЗначение) < МинимальнаяДлина Цикл
				ПриведенноеЗначение = ПриведенноеЗначение + " ";
			КонецЦикла;
		ИначеЕсли Фасет.Вид = ВидФасетаXDTO.Перечисление Тогда
			ПроверкаПеречисления = Истина;
			Если ВРег(Фасет.Значение) = ВРег(Значение) Тогда
				ПриведенноеЗначение = Фасет.Значение;
				ПеречислениеНайдено = Истина;
				Прервать;
			КонецЕсли;
		ИначеЕсли Фасет.Вид = ВидФасетаXDTO.РазрядовДробнойЧасти Тогда
			ПриведенноеЗначение = Окр(ПриведенноеЗначение, Число(Фасет.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверкаПеречисления
		И Не ПеречислениеНайдено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПриведенноеЗначение;
	КонецЕсли;
	
КонецФункции

// Возвращает префикс переданного пространства имен.
// 
// Параметры:
//  ПространствоИмен - Строка - Полное пространство имен
// 
// Возвращаемое значение:
//  Строка - Префикс пространства имен
Функция ПрефиксПространстваИмен(ПространствоИмен) Экспорт
	
	ВерсияAPI        = ИнтеграцияЗЕРНО.ВерсияAPI();
	ВерсияСервисаAPI = ИнтеграцияЗЕРНО.ВерсияСервисаAPI();
	
	Если ВРег(ПространствоИмен) = ВРег("http://www.w3.org/2001/XMLSchema-instance") Тогда
		Возврат "xsi";
		
	ИначеЕсли ВРег(ПространствоИмен) = ВРег("http://www.w3.org/2001/XMLSchema") Тогда
		Возврат "xs";
		
	ИначеЕсли ВРег(ПространствоИмен) = ВРег("http://www.w3.org/2005/05/xmlmime") Тогда
		Возврат "xmime";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/lots/"), ВерсияAPI) Тогда
		Возврат "lots";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/common/"), ВерсияAPI) Тогда
		Возврат "common";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/dictionary/"), ВерсияAPI) Тогда
		Возврат "dict";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/organizations/"), ВерсияAPI) Тогда
		Возврат "org";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/sdiz/"), ВерсияAPI) Тогда
		Возврат "sdiz";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/gpb/"), ВерсияAPI) Тогда
		Возврат "gpb";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/gpb-sdiz/"), ВерсияAPI) Тогда
		Возврат "gpbsdiz";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/grain-monitor/"), ВерсияAPI) Тогда
		Возврат "gm";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/common-types/"), ВерсияAPI) Тогда
		Возврат "common2";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/faults/"), ВерсияСервисаAPI) Тогда
		Возврат "fault";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/types/"), ВерсияСервисаAPI) Тогда
		Возврат "wstypes";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/sdiz/"), ВерсияAPI) Тогда
		Возврат "wssdiz";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/lots/"), ВерсияAPI) Тогда
		Возврат "wslots";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/dictionaries/"), ВерсияAPI) Тогда
		Возврат "wsdict";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/gpb/"), ВерсияAPI) Тогда
		Возврат "wsgpb";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/gpb-sdiz/"), ВерсияAPI) Тогда
		Возврат "wsgpbsdiz";
		
	ИначеЕсли ВРег(ПространствоИмен) = СтрШаблон("%1%2", ВРег("urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/grain-monitor/"), ВерсияAPI) Тогда
		Возврат "wsgm";
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеПостраничногоПросмотра(ТелоXDTO, СообщениеXML, НомерСтраницы = 0, КоличествоЭлементов = 1000) Экспорт
	
	ПараметрыПросмотраXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ТелоXDTO.Тип().URIПространстваИмен, "Paging", ТелоXDTO);
	
	ЗаполнитьСвойствоXDTO(
		ПараметрыПросмотраXDTO,
		"pageLength",
		КоличествоЭлементов,
		СообщениеXML);
	
	ЗаполнитьСвойствоXDTO(
		ПараметрыПросмотраXDTO,
		"pageNumber",
		НомерСтраницы,
		СообщениеXML);
	
	ЗаполнитьСвойствоXDTO(
		ТелоXDTO,
		"Paging",
		ПараметрыПросмотраXDTO,
		СообщениеXML);
	
	СообщениеXML.НомерСтраницы = НомерСтраницы;
	
КонецПроцедуры

Функция ТипКлассификатораXDTO(Значение) Экспорт
	
	Если Значение = Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПартии Тогда
		Возврат "LotsPurpose";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство Тогда
		Возврат "QualityIndicator";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаСписания Тогда
		Возврат "ReasonWriteOff";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидОтбораПроб Тогда
		Возврат "Probe";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидТранспортногоСредства Тогда
		Возврат "Transport";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ЕдиницаИзмерения Тогда
		Возврат "UnitOfMeasure";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаРасхожденияВеса Тогда
		Возврат "WeightDiscrepancyCause";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидДокумента Тогда
		Возврат "Document";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПотребительскогоСвойства Тогда
		Возврат "IndicatorPurpose";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ДокументНаПартию Тогда
		Возврат "LotDocument";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаВозвратаПартии Тогда
		Возврат "LotReturnReason";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ДокументПраваСобственности Тогда
		Возврат "PropertyRightTransferDoc";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.СпособПереработки Тогда
		Возврат "ProcessingMethod";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.СведенияОСобственности Тогда
		Возврат "PropertyRight";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ЦельИспользованияПартии Тогда
		Возврат "LotsTarget";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2 Тогда
		Возврат "OKPD2";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ТНВЭД Тогда
		Возврат "TNVED";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
		Возврат "QualityIndicatorLimit";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ТипУслугиЭлеватора Тогда
		Возврат "ElevatorService";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения Тогда
		Возврат "Storage";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		Возврат "Agriculture";
	
	ИначеЕсли Значение = "LotsPurpose" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПартии;
	ИначеЕсли Значение = "QualityIndicator" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство;
	ИначеЕсли Значение = "ReasonWriteOff" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаСписания;
	ИначеЕсли Значение = "Probe" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ВидОтбораПроб;
	ИначеЕсли Значение = "Transport" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ВидТранспортногоСредства;
	ИначеЕсли Значение = "UnitOfMeasure" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ЕдиницаИзмерения;
	ИначеЕсли Значение = "WeightDiscrepancyCause" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаРасхожденияВеса;
	ИначеЕсли Значение = "Document" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ВидДокумента;
	ИначеЕсли Значение = "IndicatorPurpose" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПотребительскогоСвойства;
	ИначеЕсли Значение = "LotDocument" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ДокументНаПартию;
	ИначеЕсли Значение = "LotReturnReason" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаВозвратаПартии;
	ИначеЕсли Значение = "PropertyRightTransferDoc" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ДокументПраваСобственности;
	ИначеЕсли Значение = "ProcessingMethod" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.СпособПереработки;
	ИначеЕсли Значение = "PropertyRight" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.СведенияОСобственности;
	ИначеЕсли Значение = "LotsTarget" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ЦельИспользованияПартии;
	ИначеЕсли Значение = "OKPD2" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2;
	ИначеЕсли Значение = "TNVED" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ТНВЭД;
	ИначеЕсли Значение = "QualityIndicatorLimit" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств;
	ИначеЕсли Значение = "Agriculture" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры;
	ИначеЕсли Значение = "ElevatorService" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ТипУслугиЭлеватора;
	ИначеЕсли Значение = "Storage" Тогда
		Возврат Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный тип классификатора ""%1""'"), Значение);
	КонецЕсли;
		
КонецФункции

Функция ОрганизацияКонтрагентXDTO(Реквизиты, СообщениеXML, ПараметрыОбмена, ПредставлениеРевизита = "") Экспорт
	
	ПространствоИмен          = ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОбмена.ПараметрыОптимизации);
	ОрганизацияКонтрагентXDTO = РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, "SubjectType");
	
	КешОшибок = СтруктураСообщенияXML();
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо Тогда
		
		СтруктураНаименования = НаименованиеОрганизации(Реквизиты.Наименование);
		СокращенноеНаименование = СтруктураНаименования.СокращенноеНаименование;
		
		ТипОрганизацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LegalEntity", ОрганизацияКонтрагентXDTO);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Name",      Реквизиты.Наименование,  КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "ShortName", СокращенноеНаименование, КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "INN",       Реквизиты.ИНН,           КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "OGRN",      Реквизиты.ОГРН,          КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "KPP",       Реквизиты.КПП,           КешОшибок);
		
		Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
			Если ЗначениеЗаполнено(Реквизиты.ИдентификаторАдреса)
				Или ЗначениеЗаполнено(Реквизиты.ОКТМО) Тогда
				ДанныеДополнения = ИдентификаторыАдресногоОбъекта();
				ЗаполнитьЗначенияСвойств(ДанныеДополнения, Реквизиты);
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдресJSON) Тогда
				АдресРФXDTO = АдресРФXDTO(Реквизиты.ЮридическийАдресJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, ДанныеДополнения);
			Иначе
				АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					Реквизиты.ЮридическийАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
				АдресРФXDTO = АдресРФXDTO(АдресСтрокойJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, ДанныеДополнения);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				КешОшибок,
				НСтр("ru = 'не заполнен юридический адрес.'"));
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Address", АдресРФXDTO, КешОшибок);
		
		ЗаполнитьСвойствоXDTO(ОрганизацияКонтрагентXDTO, "LegalEntity", ТипОрганизацииXDTO,     СообщениеXML);
		
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИндивидуальныйПредприниматель Тогда
		
		ТипОрганизацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "SoleProprietor", ОрганизацияКонтрагентXDTO);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "FamilyName", Реквизиты.Фамилия, КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "FirstName",  Реквизиты.Имя,     КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "INN",        Реквизиты.ИНН,     КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "OGRN",       Реквизиты.ОГРН,    КешОшибок);
		
		Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
			Если ЗначениеЗаполнено(Реквизиты.ИдентификаторАдреса)
				Или ЗначениеЗаполнено(Реквизиты.ОКТМО) Тогда
				ДанныеДополнения = ИдентификаторыАдресногоОбъекта();
				ЗаполнитьЗначенияСвойств(ДанныеДополнения, Реквизиты);
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдресJSON) Тогда
				АдресРФXDTO = АдресРФXDTO(Реквизиты.ЮридическийАдресJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, ДанныеДополнения);
			Иначе
				АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					Реквизиты.ЮридическийАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
				АдресРФXDTO = АдресРФXDTO(АдресСтрокойJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, ДанныеДополнения);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				КешОшибок,
				НСтр("ru = 'не заполнен юридический адрес.'"));
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Address", АдресРФXDTO, КешОшибок);
		
		ЗаполнитьСвойствоXDTO(ОрганизацияКонтрагентXDTO, "SoleProprietor", ТипОрганизацииXDTO, СообщениеXML);
		
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.Самозанятый Тогда
		
		ТипОрганизацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "SelfEmployed", ОрганизацияКонтрагентXDTO);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "FamilyName", Реквизиты.Фамилия, КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "FirstName",  Реквизиты.Имя,     КешОшибок);
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "INN",        Реквизиты.ИНН,     КешОшибок);
		
		Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
			Если ЗначениеЗаполнено(Реквизиты.ИдентификаторАдреса)
				Или ЗначениеЗаполнено(Реквизиты.ОКТМО) Тогда
				ДанныеДополнения = ИдентификаторыАдресногоОбъекта();
				ЗаполнитьЗначенияСвойств(ДанныеДополнения, Реквизиты);
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдресJSON) Тогда
				АдресРФXDTO = АдресРФXDTO(Реквизиты.ЮридическийАдресJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, ДанныеДополнения);
			Иначе
				АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					Реквизиты.ЮридическийАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
				АдресРФXDTO = АдресРФXDTO(АдресСтрокойJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, ДанныеДополнения);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				КешОшибок,
				НСтр("ru = 'не заполнен юридический адрес.'"));
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Address", АдресРФXDTO, КешОшибок);
		
		ЗаполнитьСвойствоXDTO(ОрганизацияКонтрагентXDTO, "SelfEmployed", ТипОрганизацииXDTO, СообщениеXML);
		
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация
		Или Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизацияБезРегистрацииВРФ Тогда
		
		Если ЗначениеЗаполнено(Реквизиты.ИНН) Тогда
			
			ТипОрганизацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ForeignLegalEntity", ОрганизацияКонтрагентXDTO);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Name", Реквизиты.Наименование, КешОшибок);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "INN",  Реквизиты.ИНН,          КешОшибок);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "KPP",  Реквизиты.КПП,          КешОшибок);
			Если ЗначениеЗаполнено(Реквизиты.КодРАФП) Тогда
				ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "RAFP", Реквизиты.КодРАФП, КешОшибок);
			КонецЕсли;
			
			СтранаРегистрацииXDTO = СтранаXDTO(Реквизиты.КодАльфа3, КешОшибок, ПараметрыОбмена);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Country", СтранаРегистрацииXDTO, КешОшибок);
			
			Если ЗначениеЗаполнено(Реквизиты.ЮридическийАдресJSON) Тогда
				АдресРФXDTO = АдресРФXDTO(Реквизиты.ЮридическийАдресJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена);
			Иначе
				АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					Реквизиты.ЮридическийАдрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
				АдресРФXDTO = АдресРФXDTO(АдресСтрокойJSON, Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена);
			КонецЕсли;
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Address", АдресРФXDTO, КешОшибок);
			
			ЗаполнитьСвойствоXDTO(ОрганизацияКонтрагентXDTO, "ForeignLegalEntity", ТипОрганизацииXDTO, СообщениеXML);
		
		Иначе // ИностраннаяОрганизацияБезРегистрацииВРФ
			
			ТипОрганизацииXDTO =  РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ForeignEntity", ОрганизацияКонтрагентXDTO);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Name", Реквизиты.Наименование, КешОшибок);
			
			СтранаРегистрацииXDTO = СтранаXDTO(Реквизиты.КодАльфа3, КешОшибок, ПараметрыОбмена);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO,    "Country", СтранаРегистрацииXDTO, КешОшибок);
			
			// AddressType 1.0.8
			АдресXDTO = АдресXDTO(Реквизиты.ЮридическийАдрес, КешОшибок, ПараметрыОбмена, Истина);
			ЗаполнитьСвойствоXDTO(ТипОрганизацииXDTO, "Address", АдресXDTO, КешОшибок);
			
			ЗаполнитьСвойствоXDTO(ОрганизацияКонтрагентXDTO, "ForeignEntity", ТипОрганизацииXDTO, СообщениеXML);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеПредставленияОрганизации = Новый Массив();
		Если ЗначениеЗаполнено(Реквизиты.Наименование) Тогда
			ДанныеПредставленияОрганизации.Добавить(Реквизиты.Наименование);
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.Фамилия) Тогда
			ДанныеПредставленияОрганизации.Добавить(Реквизиты.Фамилия);
			Если ЗначениеЗаполнено(Реквизиты.Имя) Тогда
				ДанныеПредставленияОрганизации.Добавить(Реквизиты.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИНН) Тогда
			ДанныеПредставленияОрганизации.Добавить(СтрШаблон("ИНН: %1", Реквизиты.ИНН));
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.КПП) Тогда
			ДанныеПредставленияОрганизации.Добавить(СтрШаблон("КПП: %1", Реквизиты.КПП));
		КонецЕсли;
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(
				НСтр("ru = 'Внутренняя ошибка. Не определен тип организации %1.'"),
				СтрСоединить(ДанныеПредставленияОрганизации, " ")));
		
	КонецЕсли;
	
	ДополнитьТекстОшибки(СообщениеXML, КешОшибок, ПредставлениеРевизита);
	
	Возврат ОрганизацияКонтрагентXDTO;
	
КонецФункции

Функция АдресРФXDTO(Адрес, Знач АдресСтрокой, СообщениеXML, ПараметрыОбмена, ДанныеДополнения = Неопределено) Экспорт
	
	ПространствоИмен = ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОбмена.ПараметрыОптимизации);
	АдресРФXDTO = РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, "AddressRFType");
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("Индекс", "");
	ДанныеАдреса.Вставить("Комментарий", "");
	ДанныеАдреса.Вставить("Идентификатор", "");
	ДанныеАдреса.Вставить("ИдентификаторДома", "");
	ДанныеАдреса.Вставить("ИдентификаторАдресногоОбъекта", "");
	ДанныеАдреса.Вставить("ИдентификаторКвартиры", "");
	ДанныеАдреса.Вставить("ДополнительныеКоды", "");
	
	Если ДанныеДополнения = Неопределено
		Или Не (ЗначениеЗаполнено(ДанныеДополнения.ИдентификаторАдреса)
				Или ЗначениеЗаполнено(ДанныеДополнения.ОКТМО)) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КодыАдреса", Истина);
	КонецЕсли;
	
	ИнтеграцияИС.ДанныеИзСтрокиКонтактнойИнформации(Адрес, ДанныеАдреса, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДанныеАдреса.Индекс) Тогда
		АдресСтрокой = СтрЗаменить(АдресСтрокой, ДанныеАдреса.Индекс + ", ", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.Комментарий) Тогда
		МестоположениеСКомментарием = АдресСтрокой + ", " + ДанныеАдреса.Комментарий;
	Иначе
		МестоположениеСКомментарием = АдресСтрокой;
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(АдресРФXDTO, "PostalCode", ДанныеАдреса.Индекс, СообщениеXML);
	ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Address", МестоположениеСКомментарием, СообщениеXML);
	
	ДополнитьАдресРФXDTO_1_0_8(АдресРФXDTO, ДанныеАдреса, СообщениеXML, АдресСтрокой, ДанныеДополнения);
	Возврат АдресРФXDTO;
	
КонецФункции

Функция ДанныеКлючаАдреса() Экспорт
	
	ДанныеКлюча = Новый Структура;
	ДанныеКлюча.Вставить("АдресСтрокой");
	ДанныеКлюча.Вставить("Индекс");
	ДанныеКлюча.Вставить("ИдентификаторАдреса");
	ДанныеКлюча.Вставить("ОКТМО");
	Возврат ДанныеКлюча;
	
КонецФункции

Функция АдресРФПоКлючуАдресовXDTO(ДанныеКлючаАдреса, СообщениеXML, ПараметрыОбмена, ДанныеАдреса = Неопределено, ДанныеДополнения = Неопределено) Экспорт
	
	АдресСтрокой = ДанныеКлючаАдреса.АдресСтрокой;
	Индекс       = ДанныеКлючаАдреса.Индекс;
	
	Если (ЗначениеЗаполнено(ДанныеКлючаАдреса.ИдентификаторАдреса)
		Или ЗначениеЗаполнено(ДанныеКлючаАдреса.ОКТМО)) Тогда
		
		Если ДанныеДополнения = Неопределено Тогда
			ДанныеДополнения = ИдентификаторыАдресногоОбъекта();
		КонецЕсли;
		
		ДанныеДополнения.ИдентификаторАдреса = ДанныеКлючаАдреса.ИдентификаторАдреса;
		ДанныеДополнения.ОКТМО               = ДанныеКлючаАдреса.ОКТМО;
		
	КонецЕсли;
	
	ПространствоИмен = ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОбмена.ПараметрыОптимизации);
	АдресРФXDTO = РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, "AddressRFType");
	
	ЗаполнитьСвойствоXDTO(АдресРФXDTO, "PostalCode", Индекс, СообщениеXML);
	ЗаполнитьСвойствоXDTO(АдресРФXDTO, "Address", АдресСтрокой, СообщениеXML);
	
	// Дополнение адреса для нового формата 1.0.8
	Если ДанныеАдреса = Неопределено Тогда
		АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресСтрокой, Перечисления.ТипыКонтактнойИнформации.Адрес);
		ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(АдресСтрокойJSON, Новый Структура("КодыАдреса", Истина));
	КонецЕсли;
	
	ДополнитьАдресРФXDTO_1_0_8(АдресРФXDTO, ДанныеАдреса, СообщениеXML, АдресСтрокой, ДанныеДополнения);
	
	Возврат АдресРФXDTO;
	
КонецФункции

Функция АдресXDTO(Адрес, КешОшибок, ПараметрыОбмена, ТребуетсяПреобразованиеJSON = Ложь) Экспорт
	
	ПространствоИмен = ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОбмена.ПараметрыОптимизации);
	АдресXDTO = РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, "AddressType");
	
	Если ТребуетсяПреобразованиеJSON Тогда
		
		АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(АдресСтрокойJSON);
		
		ЗаполнитьСвойствоXDTO(АдресXDTO, "Address", Адрес, КешОшибок);
		
	Иначе
		
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("Представление", "");
		ДанныеАдреса.Вставить("КодСтраны",     "");
		ДанныеАдреса.Вставить("Страна",        "");
		
		ИнтеграцияИС.ДанныеИзСтрокиКонтактнойИнформации(Адрес, ДанныеАдреса);
		
		ЗаполнитьСвойствоXDTO(АдресXDTO, "Address", ДанныеАдреса.Представление, КешОшибок);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.КодСтраны) Тогда
		ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ДанныеАдреса.КодСтраны);
	Иначе
		ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(,ДанныеАдреса.Страна);
	КонецЕсли;
	
	Если ДанныеСтраны <> Неопределено Тогда
		КодАльфа3 = ДанныеСтраны.КодАльфа3;
	Иначе
		КодАльфа3 = "";
	КонецЕсли;
	
	СтранаXDTO = СтранаXDTO(КодАльфа3, КешОшибок, ПараметрыОбмена);
	ЗаполнитьСвойствоXDTO(АдресXDTO, "Country", СтранаXDTO, КешОшибок);
	
	Возврат АдресXDTO;
	
КонецФункции

Функция АдресПеревозкиXDTO(ДанныеКлючаАдреса, КешОшибок, ПараметрыОбмена, ТребуетсяПреобразованиеJSON = Ложь,
	ДанныеДополненияКлючаАдресов = Неопределено) Экспорт
	
	Адрес        = ДанныеКлючаАдреса.АдресСтрокой;
	АдресСтрокой = ДанныеКлючаАдреса.Индекс;
	
	Если ТребуетсяПреобразованиеJSON Тогда
		АдресСтрокойJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе
		АдресСтрокойJSON = Адрес;
	КонецЕсли;
	
	ДанныеАдреса     = РаботаСАдресами.СведенияОбАдресе(АдресСтрокойJSON, Новый Структура("КодыАдреса", Истина));
	ПространствоИмен = ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОбмена.ПараметрыОптимизации);
	АдресXDTO        = РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, "AddressComplexType");
	
	Если ДанныеАдреса.КодСтраны = "643" Тогда // Россия
		Если ТребуетсяПреобразованиеJSON Тогда
			АдресРФXDTO = АдресРФПоКлючуАдресовXDTO(ДанныеКлючаАдреса, КешОшибок, ПараметрыОбмена, ДанныеАдреса, ДанныеДополненияКлючаАдресов);
		Иначе
			АдресРФXDTO = АдресРФXDTO(Адрес, АдресСтрокой, КешОшибок, ПараметрыОбмена);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(АдресXDTO, "AddressRF", АдресРФXDTO, КешОшибок);
	Иначе
		АдресЗаПределамиРФXDTO = АдресXDTO(АдресСтрокойJSON, КешОшибок, ПараметрыОбмена);
		ЗаполнитьСвойствоXDTO(АдресXDTO, "ForeignAddress", АдресЗаПределамиРФXDTO, КешОшибок);
	КонецЕсли;
	
	Возврат АдресXDTO;
	
КонецФункции

Функция СтранаXDTO(КодАльфа3, КешОшибок, ПараметрыОбмена) Экспорт
	
	ПространствоИмен = ПространствоИменПоИмениПакетаXDTO("zerno_organizations", ПараметрыОбмена.ПараметрыОптимизации);
	СтранаXDTO = РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, "CountryType");
	ЗаполнитьСвойствоXDTO(СтранаXDTO, "alpha_3", КодАльфа3, КешОшибок);
	
	Возврат СтранаXDTO;
	
КонецФункции

Функция КодАльфа3ПоСтранеXDTO(ОбъектXDTO) Экспорт
	
	Результат = "";
	
	Если ОбъектXDTO.Country <> Неопределено Тогда
		Если ЗначениеЗаполнено(ОбъектXDTO.Country.alpha_3) Тогда
			Результат = ОбъектXDTO.Country.alpha_3;
		ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.Country.ShortName) Тогда
			ДанныеСтраны = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(,ОбъектXDTO.Country.ShortName);
			Если ДанныеСтраны <> Неопределено Тогда
				Результат = ДанныеСтраны.КодАльфа3;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПотребительскиеСвойстваXDTO(ПотребительскиеСвойства, ИдентификаторСтроки, ОбъектXDTOРодитель,
	ПространствоИмен, СообщениеXML) Экспорт
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		ПараметрыОтбораПоСтроке = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтроки);
		ИсточникДанных = ПотребительскиеСвойства.НайтиСтроки(ПараметрыОтбораПоСтроке);
	Иначе
		ИсточникДанных = ПотребительскиеСвойства;
	КонецЕсли;
	
	ПотребительскиеСвойстваXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен, "ListValueQualityIndicator", ОбъектXDTOРодитель);
	
	Для Каждого ПотребительскоеСвойство Из ИсточникДанных Цикл
		ЗначениеСвойстваXDTO =  РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Value", ПотребительскиеСвойстваXDTO);
		ЗаполнитьСвойствоXDTO(
			ЗначениеСвойстваXDTO,
			"qualityIndicatorCode",
			ПотребительскоеСвойство.ПотребительскоеСвойствоИдентификатор,
			СообщениеXML);
		ЗаполнитьСвойствоXDTO(ЗначениеСвойстваXDTO, "__content", ПотребительскоеСвойство.Значение, СообщениеXML);
		ЗаполнитьСвойствоXDTO(ПотребительскиеСвойстваXDTO, "Value", ЗначениеСвойстваXDTO, СообщениеXML);
	КонецЦикла;
	
	ЗаполнитьСвойствоXDTO(ОбъектXDTOРодитель, "ListValueQualityIndicator", ПотребительскиеСвойстваXDTO, СообщениеXML);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДокументНомерДатаXDTO(ИсточникДанных, ПараметрыРасширенияТипаXDTO = Неопределено, ИмяСвойства, ОбъектXDTOРодитель,
	ПространствоИмен, СообщениеXML) Экспорт
	
	Для Каждого СтрокаДокумента Из ИсточникДанных Цикл
		
		// extension base="common:DocNumberDateType"
		
		ДокументСертификацииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойства, ОбъектXDTOРодитель);
		ЗаполнитьСвойствоXDTO(ДокументСертификацииXDTO, "number", СокрЛП(СтрокаДокумента.Номер), СообщениеXML);
		ЗаполнитьСвойствоXDTO(ДокументСертификацииXDTO, "date", Формат(СтрокаДокумента.Дата, "ДФ=yyyy-MM-dd;"), СообщениеXML);
		
		Если ЗначениеЗаполнено(ПараметрыРасширенияТипаXDTO) Тогда
			
			Для Каждого ЭлементСтруктуры Из ПараметрыРасширенияТипаXDTO Цикл
				
				ЗаполнитьСвойствоXDTO(
					ДокументСертификацииXDTO,
					ЭлементСтруктуры.Ключ,
					СтрокаДокумента[ЭлементСтруктуры.Значение],
					СообщениеXML);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ОбъектXDTOРодитель, ИмяСвойства, ДокументСертификацииXDTO, СообщениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредшествующиеПартииXDTO(Партии, ОбъектXDTOРодитель, ПространствоИмен, СообщениеXML) Экспорт
	
	Для Каждого СтрокаПартии Из Партии Цикл
		ПартияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ParentLot", ОбъектXDTOРодитель);
		ЗаполнитьСвойствоXDTO(ПартияXDTO, "lotNumber", СтрокаПартии.НомерПартии, СообщениеXML);
		ЗаполнитьСвойствоXDTO(ПартияXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, СообщениеXML);
		ЗаполнитьСвойствоXDTO(ОбъектXDTOРодитель, "ParentLot", ПартияXDTO, СообщениеXML);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредшествующиеПартииПродуктовПереработкиXDTO(Партии, ОбъектXDTOРодитель, ПространствоИмен, СообщениеXML) Экспорт
	
	Для Каждого СтрокаПартии Из Партии Цикл
		ПартияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "ParentGpb", ОбъектXDTOРодитель);
		ЗаполнитьСвойствоXDTO(ПартияXDTO, "gpbNumber", СтрокаПартии.НомерПартии, СообщениеXML);
		ЗаполнитьСвойствоXDTO(ПартияXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, СообщениеXML);
		ЗаполнитьСвойствоXDTO(ОбъектXDTOРодитель, "ParentGpb", ПартияXDTO, СообщениеXML);
	КонецЦикла;
	
КонецПроцедуры

Функция ПространствоИменПоИмениПакетаXDTO(ИмяПакета, ПараметрыОптимизации, Знач Версия = Неопределено) Экспорт
	
	Если Версия = Неопределено Тогда
		Версия = ПараметрыОптимизации.ВерсияAPI;
	КонецЕсли;
	
	Если ПараметрыОптимизации.ПоддерживаемыеВерсииСервисаAPI.Найти(Версия) = Неопределено
		И ПараметрыОптимизации.ПоддерживаемыеВерсииAPI.Найти(Версия) = Неопределено Тогда
		РанняяПоддерживаемаяВерсияAPI = ПараметрыОптимизации.ПоддерживаемыеВерсииAPI[ПараметрыОптимизации.ПоддерживаемыеВерсииAPI.ВГраница()];
		Если ИнтеграцияИСКлиентСервер.СравнитьВерсии(РанняяПоддерживаемаяВерсияAPI, Версия) > 0 Тогда
			Версия = РанняяПоддерживаемаяВерсияAPI;
		Иначе
			Версия = ПараметрыОптимизации.ПоддерживаемыеВерсииAPI[0];
		КонецЕсли;
	КонецЕсли;
	
	ПолноеИмяПакета = СтрШаблон("%1_%2", ИмяПакета, СтрЗаменить(Версия, ".", "_"));
	
	Возврат Метаданные.ПакетыXDTO[ПолноеИмяПакета].ПространствоИмен;
	
КонецФункции

Функция ПараметрыФормированияСообщенияXML() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить("Организация");
	ВозвращаемоеЗначение.Вставить("Подразделение");
	ВозвращаемоеЗначение.Вставить("ВидПродукции");
	ВозвращаемоеЗначение.Вставить("Операция");
	ВозвращаемоеЗначение.Вставить("НомерВерсии",   1);
	ВозвращаемоеЗначение.Вставить("НомерСтраницы", 0);
	ВозвращаемоеЗначение.Вставить("КоличествоНаСтранице", 1000);
	ВозвращаемоеЗначение.Вставить("ПараметрыЗапроса");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "sdizNumber";
	Иначе
		Возврат "gpbSDIZNumber";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "lotNumber";
	Иначе
		Возврат "gpbNumber";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляНомерПартииСозданнойПриОтказеОтГашенияПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "createLotNumber";
	Иначе
		Возврат "createGpbNumber";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляПричинаОтказаОтГашенияПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "LotReturnReasonCode";
	Иначе
		Возврат "GpbReturnReasonCode";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляКорректируемыйСДИЗПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "correctedSDIZNumber";
	Иначе
		Возврат "correctedGpbSDIZNumber";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляКорректирующийСДИЗПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "correctedBySDIZNumber";
	Иначе
		Возврат "correctedByGpbSDIZNumber";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляИдентификаторОтказаПогашенияПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "extinctionRefusalId";
	Иначе
		Возврат "gpbExtinctionRefusalId";
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьТекстОшибки(СообщениеXML, КешОшибок, ПредставлениеРевизита)
	
	Если КешОшибок.Ошибки.Количество() Тогда
		Для Каждого ЭлементКоллекции Из КешОшибок.Ошибки Цикл
			ТекстОшибки = СтрШаблон(НСтр("ru = '%1: %2'"), ПредставлениеРевизита, ЭлементКоллекции.Ключ);
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьАдресРФXDTO_1_0_8(АдресРФXDTO, ДанныеАдреса, СообщениеXML, АдресСтрокой, ДанныеДополнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(АдресСтрокой) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.ИдентификаторДома) Тогда
		ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OBJECTGUID", Строка(ДанныеАдреса.ИдентификаторДома), СообщениеXML);
	ИначеЕсли ЗначениеЗаполнено(ДанныеАдреса.ИдентификаторАдресногоОбъекта) Тогда
		ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OBJECTGUID", Строка(ДанныеАдреса.ИдентификаторАдресногоОбъекта), СообщениеXML);
	ИначеЕсли ТипЗнч(ДанныеАдреса.ДополнительныеКоды) = Тип("Структура")
		И ДанныеАдреса.ДополнительныеКоды.Свойство("ОКТМО")
		И ЗначениеЗаполнено(ДанныеАдреса.ДополнительныеКоды.ОКТМО) Тогда
		ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OKTMO", ДанныеАдреса.ДополнительныеКоды.ОКТМО, СообщениеXML);
	Иначе
		// Приоритет дополнения:
		// 1. Получить ГУИД по данным адреса в документе.
		// 2. Получить ГУИД по данным сопоставленных операторов ключа адресов.
		// 3. Если не найдено, сообщать об ошибке.
		Если ДанныеДополнения <> Неопределено Тогда
			Если ДанныеДополнения.Свойство("ИдентификаторАдреса")
				И ЗначениеЗаполнено(ДанныеДополнения.ИдентификаторАдреса) Тогда
				ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OBJECTGUID", Строка(ДанныеДополнения.ИдентификаторАдреса), СообщениеXML);
			ИначеЕсли ДанныеДополнения.Свойство("OKTMO")
				И ЗначениеЗаполнено(ДанныеДополнения.ОКТМО) Тогда
				ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OKTMO", ДанныеДополнения.ОКТМО, СообщениеXML);
			Иначе
				ДополнитьИдентификаторДомаОКТМОПоДаннымОператораКлючаАдресов(ДанныеДополнения, АдресРФXDTO, СообщениеXML);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресРФXDTO.OBJECTGUID)
			И Не ЗначениеЗаполнено(АдресРФXDTO.OKTMO) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML,
				СтрШаблон(
					НСтр("ru = 'Не удалось получить OBJECTGUID или OKTMO при разборе адреса %1'"),
					АдресСтрокой));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИдентификаторДомаОКТМОПоДаннымОператораКлючаАдресов(ДанныеДополнения, АдресРФXDTO, СообщениеXML)
	
	Если ДанныеДополнения.Свойство("ОператорыАдреса") Тогда
		Для Каждого СкладКонтрагент Из ДанныеДополнения.ОператорыАдреса Цикл
			ДанныеАдресаОператора = ДанныеДополненияАдресаРФППоОператоруАдреса(СкладКонтрагент);
			Если ЗначениеЗаполнено(ДанныеАдресаОператора.ИдентификаторАдреса) Тогда
				ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OBJECTGUID", Строка(ДанныеАдресаОператора.ИдентификаторАдреса), СообщениеXML);
				Возврат;
			ИначеЕсли ЗначениеЗаполнено(ДанныеАдресаОператора.ОКТМО) Тогда
				ЗаполнитьСвойствоXDTO(АдресРФXDTO, "OKTMO", ДанныеАдресаОператора.ОКТМО, СообщениеXML);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторыАдресногоОбъекта() Экспорт
	
	Возврат Новый Структура("ОператорыАдреса,ИдентификаторАдреса,ОКТМО", Новый Массив);
	
КонецФункции

Функция ДанныеДополненияАдресаРФППоОператоруАдреса(СкладКонтрагент) Экспорт
	
	Результат = ИдентификаторыАдресногоОбъекта();
	Если ЗначениеЗаполнено(СкладКонтрагент) Тогда
		
		ДанныеАдресаОбъекта = ИнтеграцияЗЕРНОВызовСервера.ДанныеАдресаОбъекта(СкладКонтрагент, Истина);
		
		Результат.ИдентификаторАдреса = ДанныеАдресаОбъекта.Идентификатор;
		Результат.ОКТМО = ДанныеАдресаОбъекта.ОКТМО;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПоискСсылок

Функция ПараметрыПоискаСсылкиПоТипу(МетаданыеПоиска) Экспорт
	
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",                        МетаданыеПоиска.ПолноеИмя());
	РеквизитыТипа.Вставить("ВидКлассификатора",                 Неопределено);
	РеквизитыТипа.Вставить("ПоляСоставногоКлюча",               Неопределено);
	РеквизитыТипа.Вставить("ИмяПоля",                           Неопределено);
	РеквизитыТипа.Вставить("ДополнительныеДанныеХеша",          Неопределено);
	РеквизитыТипа.Вставить("ХешироватьЗначениеСоставногоКлюча", Истина);
	РеквизитыТипа.Вставить("РазделительПолейКлюча",             "|");
	РеквизитыТипа.Вставить("ДинамическиеПоляСоставногоКлюча",   Ложь);
	
	Возврат РеквизитыТипа;
	
КонецФункции

Функция СоставнойКлючОбъекта(ЭлементДанных, ПоляКлюча, ДополнительныеДанныеХеша = Неопределено, ХешироватьЗначениеСоставногоКлюча = Истина, РазделительПолейКлюча = "|") Экспорт
	
	ЕстьДанные = Ложь;
	
	ПоляИдентификатора = Новый Массив();
	Для Каждого ИмяПоля Из ПоляКлюча Цикл
		ЗначениеПоля = СокрЛП(ЭлементДанных[ИмяПоля]);
		Если Не ХешироватьЗначениеСоставногоКлюча
			И Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Продолжить;
		КонецЕсли;
		ПоляИдентификатора.Добавить(ЗначениеПоля);
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			ЕстьДанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДанные Тогда
		Если ДополнительныеДанныеХеша <> Неопределено Тогда
			ПоляИдентификатора.Добавить(Строка(ДополнительныеДанныеХеша));
		КонецЕсли;
		Если ХешироватьЗначениеСоставногоКлюча Тогда
			Возврат ИнтеграцияИС.ХешированиеДанныхSHA256(СтрСоединить(ПоляИдентификатора, РазделительПолейКлюча));
		Иначе
			Возврат СтрСоединить(ПоляИдентификатора, РазделительПолейКлюча);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СсылкиПоИдентификаторам(ПараметрыОбмена) Экспорт
	
	Если ПараметрыОбмена.ПараметрыПреобразования = Неопределено Тогда
		ПараметрыОбмена.ПараметрыПреобразования = ПараметрыПреобразования(ПараметрыОбмена.ПараметрыОптимизации);
	КонецЕсли;
	
	Идентификаторы = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
	
	ТекстыЗапросов = Новый Массив;
	Разделитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ПолноеИмяТаблицыКлассификаторов = Метаданные.Справочники.КлассификаторНСИЗЕРНО.ПолноеИмя();
	ТаблицаИдентификаторов = НоваяТаблицаПоискаСсылок();
	
	ИменаТаблиц = Идентификаторы.Скопировать(, "ИмяТаблицы");
	ИменаТаблиц.Свернуть("ИмяТаблицы");
	
	Справочники.КлассификаторНСИЗЕРНО.ЗаполнитьСсылкиНаПредопределенныеЗначения(Идентификаторы);
	
	Для Каждого СтрокаТаблицы Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ИменаТаблиц Цикл
		
		ИмяПоляИдентификатор = "Идентификатор";
		
		Текст =
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторов.ИмяТаблицы        КАК ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор     КАК Идентификатор,
		|	ТаблицаИдентификаторов.ВидКлассификатора КАК ВидКлассификатора,
		|	Таблица.Ссылка                           КАК Ссылка
		|ИЗ
		|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
		|		ПО ТаблицаИдентификаторов.Идентификатор = Таблица.#ИмяПоляИдентификатор
		|			И (Таблица.#ИмяПоляИдентификатор <> """")
		|			И (ТаблицаИдентификаторов.ИмяТаблицы = ""&ИмяТаблицы"")
		|			И &ВидКлассификатора
		|ГДЕ
		|	ТаблицаИдентификаторов.Ссылка = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаИдентификаторов.ИмяТаблицы        КАК ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор     КАК Идентификатор,
		|	ТаблицаИдентификаторов.ВидКлассификатора КАК ВидКлассификатора,
		|	Таблица.Ссылка                           КАК Ссылка
		|ИЗ
		|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
		|		ПО ТаблицаИдентификаторов.Ссылка = Таблица.Ссылка
		|			И (Таблица.#ИмяПоляИдентификатор <> """")
		|			И (ТаблицаИдентификаторов.ИмяТаблицы = ""&ИмяТаблицы"")
		|ГДЕ
		|	ТаблицаИдентификаторов.Ссылка <> НЕОПРЕДЕЛЕНО
		|";
		
		Текст = СтрЗаменить(Текст, "#ИмяТаблицы",           СтрокаТаблицы.ИмяТаблицы);
		Текст = СтрЗаменить(Текст, "&ИмяТаблицы",           СтрокаТаблицы.ИмяТаблицы);
		Текст = СтрЗаменить(Текст, "#ИмяПоляИдентификатор", ИмяПоляИдентификатор);
		Если СтрокаТаблицы.ИмяТаблицы = ПолноеИмяТаблицыКлассификаторов Тогда
			Текст = СтрЗаменить(Текст, "&ВидКлассификатора", "ТаблицаИдентификаторов.ВидКлассификатора = Таблица.ВидКлассификатора");
		Иначе
			Текст = СтрЗаменить(Текст, "&ВидКлассификатора", "ИСТИНА");
		КонецЕсли;
		ТекстыЗапросов.Добавить(Текст);
		
	КонецЦикла;
	
	Если ТаблицаИдентификаторов.Количество() Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторов.ИмяТаблицы        КАК ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор     КАК Идентификатор,
		|	ТаблицаИдентификаторов.ВидКлассификатора КАК ВидКлассификатора,
		|	ТаблицаИдентификаторов.Ссылка            КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаИдентификаторов
		|ИЗ
		|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор,
		|	ИмяТаблицы";
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|" + СтрСоединить(ТекстыЗапросов, Разделитель);
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДетальные = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока ВыборкаДетальные.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальные);
			Если ЗначениеЗаполнено(ВыборкаДетальные.ВидКлассификатора) Тогда
				СтруктураПоиска.Вставить("ВидКлассификатора", ВыборкаДетальные.ВидКлассификатора);
			КонецЕсли;
			ПоискСтрок = Идентификаторы.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТаблицы Из ПоискСтрок Цикл
				СтрокаТаблицы.Ссылка = ВыборкаДетальные.Ссылка;
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБлокируемыеОбъекты(ПараметрыОбмена) Экспорт
	
	Если ПараметрыОбмена.ПараметрыПреобразования = Неопределено Тогда
		ПараметрыОбмена.ПараметрыПреобразования = ПараметрыПреобразования(ПараметрыОбмена.ПараметрыОптимизации);
	КонецЕсли;
	
	ПараметрыПреобразования = ПараметрыОбмена.ПараметрыПреобразования;
	
	ИмяТаблицыКлассификатора = Метаданные.Справочники.КлассификаторНСИЗЕРНО.ПолноеИмя();
	ИменаТаблицБлокировки    = ПараметрыПреобразования.Идентификаторы.ВыгрузитьКолонку("ИмяТаблицы");
	ИменаТаблицБлокировки    = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаТаблицБлокировки);
	
	Для Каждого ИмяТаблицы Из ИменаТаблицБлокировки Цикл
		
		Если ИмяТаблицы = ИмяТаблицыКлассификатора Тогда
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ИмяТаблицы", ИмяТаблицы);
			БлокируемыеДанные = ПараметрыПреобразования.Идентификаторы.Скопировать(СтруктураПоиска, "ВидКлассификатора");
			БлокируемыеДанные.Свернуть("ВидКлассификатора");
			
			ПараметрыПреобразования.БлокируемыеОбъекты.Вставить(ИмяТаблицы, БлокируемыеДанные);
			
		КонецЕсли;
		
		ПараметрыПреобразования.БлокируемыеОбъекты.Вставить(ИмяТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыКЗагрузке(ИдентификаторыОбъектовКЗагрузке,
                                    ИдентификаторыНайденныхОбъектов,
                                    ИдентификаторыВсехОбъектов) Экспорт
	
	ИдентификаторыОбъектовКЗагрузке.Очистить();
	
	Для каждого ИмяОбъектаМетаданныхИОбъекты Из ИдентификаторыВсехОбъектов Цикл
		
		ИмяТаблицы = ИмяОбъектаМетаданныхИОбъекты.Ключ;
		
		СоответствиеИдентификаторов = ИмяОбъектаМетаданныхИОбъекты.Значение;
		СоответствиеНеПрочитанныхИдентификаторов = Неопределено;
		
		СоответствиеПрочитанныхИдентификаторов   = Неопределено;
		ИдентификаторыНайденныхОбъектов.Свойство(ИмяТаблицы, СоответствиеПрочитанныхИдентификаторов); 
		
		Для каждого ИдентификаторИДанныеОбъекта из СоответствиеИдентификаторов Цикл
			
			Идентификатор = ИдентификаторИДанныеОбъекта.Ключ;
			
			Если СоответствиеПрочитанныхИдентификаторов = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрочитанныхИдентификаторов.Получить(Идентификатор)) Тогда
				
				Если СоответствиеНеПрочитанныхИдентификаторов = Неопределено Тогда
					СоответствиеНеПрочитанныхИдентификаторов = Новый Соответствие;
					ИдентификаторыОбъектовКЗагрузке.Вставить(ИмяТаблицы, СоответствиеНеПрочитанныхИдентификаторов);
				КонецЕсли;
				
				ДанныеОбъекта = ИдентификаторИДанныеОбъекта.Значение;
				Если ДанныеОбъекта = Неопределено Тогда
					ДанныеОбъекта = Справочники[ИмяТаблицы].ПустаяСсылка();
				КонецЕсли;
				
				СоответствиеНеПрочитанныхИдентификаторов.Вставить(Идентификатор, ДанныеОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВидКлассификатора = Неопределено) Экспорт
	
	Возврат СлужебныйСсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВидКлассификатора);
	
КонецФункции

Функция ДанныеСсылкиПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВидКлассификатора = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	
	ВозвращаемоеЗначение.Вставить(
		"Ссылка",
		СлужебныйСсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВидКлассификатора));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, ВидКлассификатора = Неопределено, ВыполненаЗагрузка = Ложь) Экспорт
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
	СтруктураПоиска.ИмяТаблицы    = ИмяТаблицы;
	СтруктураПоиска.Идентификатор = Идентификатор;
	Если ВидКлассификатора <> Неопределено Тогда
		СтруктураПоиска.Вставить("ВидКлассификатора", ВидКлассификатора);
	КонецЕсли;
	
	НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
	
	ПоискСтрок = НайденныеСсылки.НайтиСтроки(СтруктураПоиска);
	Если ПоискСтрок.Количество() Тогда
		ПоискСтрок[0].Ссылка = СправочникСсылка;
		Если ВыполненаЗагрузка Тогда
			ПоискСтрок[0].ВыполненаЗагрузка = ВыполненаЗагрузка;
		КонецЕсли;
	Иначе
		НоваяСтрока = НайденныеСсылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
		НоваяСтрока.Ссылка = СправочникСсылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СсылкаНаОбъект, Организация, Подразделение, ВидПродукции = Неопределено, ВидКлассификатора = Неопределено) Экспорт
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	КОтложеннойЗагрузке = ПараметрыОбмена.КОтложеннойЗагрузке;
	ДанныеПоОрганизации = КОтложеннойЗагрузке[Организация];
	Если ДанныеПоОрганизации = Неопределено Тогда
		ДанныеПоОрганизации = Новый Соответствие();
		ПараметрыОбмена.КОтложеннойЗагрузке.Вставить(Организация, ДанныеПоОрганизации);
	КонецЕсли;
	ДанныеПоИмениТаблицы = ДанныеПоОрганизации[ИмяТаблицы];
	Если ДанныеПоИмениТаблицы = Неопределено Тогда
		ДанныеПоИмениТаблицы = Новый Соответствие();
		ДанныеПоОрганизации[ИмяТаблицы] = ДанныеПоИмениТаблицы;
	КонецЕсли;
	
	ДанныеСсылки = ДанныеПоИмениТаблицы[СсылкаНаОбъект];
	Если ДанныеСсылки = Неопределено Тогда
		ДанныеСсылки = Новый Структура();
		ДанныеСсылки.Вставить("ВидПродукции",      ВидПродукции);
		ДанныеСсылки.Вставить("ВидКлассификатора", ВидКлассификатора);
		ДанныеСсылки.Вставить("Подразделение",     Подразделение);
		ДанныеПоИмениТаблицы[СсылкаНаОбъект] = ДанныеСсылки;
	КонецЕсли;
	
КонецПроцедуры

Функция СлужебныйСсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВидКлассификатора)
	
	СправочникСсылка = Неопределено;
	
	Если ПараметрыОбмена <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("ИмяТаблицы,Идентификатор");
		СтруктураПоиска.ИмяТаблицы        = ИмяТаблицы;
		СтруктураПоиска.Идентификатор     = Идентификатор;
		Если ВидКлассификатора <> Неопределено Тогда
			СтруктураПоиска.Вставить("ВидКлассификатора", ВидКлассификатора);
		КонецЕсли;
		
		НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
		
		ПоискСтрок = НайденныеСсылки.НайтиСтроки(СтруктураПоиска);
		Если ПоискСтрок.Количество() Тогда
			СправочникСсылка = ПоискСтрок[0].Ссылка;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СправочникСсылка) И ЗначениеЗаполнено(ВидКлассификатора) Тогда
			СправочникСсылка = Справочники.КлассификаторНСИЗЕРНО.ПредопределенныйЭлементКлассификатора(ВидКлассификатора, Идентификатор);
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда
				ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		Если ЗначениеЗаполнено(ВидКлассификатора) Тогда
			СправочникСсылка = Справочники.КлассификаторНСИЗЕРНО.СсылкаПоИдентификаторуКлассификатораНСИ(Идентификатор, ВидКлассификатора);
		Иначе
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
			//@skip-check wrong-string-literal-content
			СправочникСсылка = Менеджер.НайтиПоРеквизиту("Идентификатор", Идентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОчередиСообщений

Функция ДоступныеСертификаты(СообщенияПоОрганизациям, ДоступныеСертификаты = Неопределено) Экспорт
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат ДоступныеСертификаты;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		
		Если ДоступныеСертификаты = Неопределено Тогда
			ДоступныеСертификаты = Новый Соответствие;
		КонецЕсли;
		
		СертификатыПользователяДляПодписиПоОрганизации = ДоступныеСертификаты[Организация];
		Если СертификатыПользователяДляПодписиПоОрганизации = Неопределено Тогда
			ДоступныеСертификаты.Вставить(
				Организация,
				ОбщегоНазначенияИС.СертификатыПользователяДляПодписиПоОрганизации(Организация));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеСертификаты;
	
КонецФункции

Функция ОбработатьОчередьСообщений(ПараметрыОбмена)
	
	СтруктураПоискаСтопЛист = Новый Структура("Организация");
	
	ПовторитьЦиклОбработкиСообщений  = Истина;
	МинимальнаяДатаСледующейОперации = Неопределено;
	
	Пока ПовторитьЦиклОбработкиСообщений Цикл
		
		ПовторитьЦиклОбработкиСообщений  = Ложь;
		МинимальнаяДатаСледующейОперации = Неопределено;
		
		ДлительныеОперации.СообщитьПрогресс(,
			СтрШаблон(
				НСтр("ru = 'Выполняется обмен с ФГИС ""Зерно""
				           |Пожалуйста, подождите...
				           |Сообщений в очереди: %1'"),
				КоличестовСообщенийВОчередиДляОтображения(ПараметрыОбмена)));
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			СтруктураПоискаСтопЛист.Организация = ЭлементОчереди.Организация;
			
			Если ПараметрыОбмена.СтопЛист.НайтиСтроки(СтруктураПоискаСтопЛист).Количество() > 0 Тогда
				// При выполнении обмена по организации были ошибки. Пропустим сообщения.
				Продолжить;
			КонецЕсли;
			
			ДатаСледующейИтерации = Неопределено;
			НайденныеЗависимости  = Неопределено;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ЭлементОчереди.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.Отправка Тогда
				
				Если СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					ПередатьЗапросВСервисТранзакция(ЭлементОчереди, ПараметрыОбмена);
				КонецЕсли;
			
			ИначеЕсли ЭлементОчереди.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата Тогда
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					ЗапроситьРезультатОбработкиВСервисеТранзакция(ЭлементОчереди, ПараметрыОбмена);
				КонецЕсли;
			
			КонецЕсли;
			
			Если ПараметрыОбмена.ПрерватьОбработкуОчереди Тогда
				Прервать;
			КонецЕсли;
			
			Если ЭлементОчереди.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения Тогда
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноПодтверждать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
					ПодтвердитьПолучениеВСервисеТранзакция(ЭлементОчереди, ПараметрыОбмена);
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыОбмена.ПрерватьОбработкуОчереди Тогда
				Прервать;
			КонецЕсли;
			
			Если НайденныеЗависимости <> Неопределено
				И НайденныеЗависимости.Количество() Тогда
				// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
				ВОчередиЕстьЗависимыеСообщения = Ложь;
				Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
					Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") <> Неопределено Тогда
						ВОчередиЕстьЗависимыеСообщения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ВОчередиЕстьЗависимыеСообщения Тогда
					ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				КонецЕсли;
			КонецЕсли;
			
			Если ДатаСледующейИтерации <> Неопределено
				И (МинимальнаяДатаСледующейОперации = Неопределено Или МинимальнаяДатаСледующейОперации > ДатаСледующейИтерации) Тогда
				МинимальнаяДатаСледующейОперации = ДатаСледующейИтерации;
			КонецЕсли;
			
		КонецЦикла;
		
		// Действия после основного цикла очереди.
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
		
		Если МинимальнаяДатаСледующейОперации <> Неопределено
			И МинимальнаяДатаСледующейОперации < ТекущаяДатаСеанса()
			И Не ПараметрыОбмена.ПрерватьОбработкуОчереди Тогда
			ПовторитьЦиклОбработкиСообщений = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальнаяДатаСледующейОперации;
	
КонецФункции

Функция ЕстьОшибкиТранспорта(ПараметрыОбмена)
	
	Результат = Ложь;
	ПараметрыОтбора = Новый Структура("Сообщение");
	Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
		ПараметрыОтбора.Сообщение = ИзмененияЭлементДанных.ИдентификаторСообщения;
		Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки)
			И ПараметрыОбмена.ОчередьСообщений.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТребуетсяОжидание(ДатаСледующейИтерации, ЕстьОшибки, ПараметрыОбмена)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ДатаСледующейИтерации <> Неопределено Тогда
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли Не ЕстьОшибки Тогда
		
		СообщенияТребующиеПодписания = Новый Соответствие();
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если ЭлементОчереди.ТребуетсяПодписать Тогда
				СообщенияТребующиеПодписания.Вставить(ЭлементОчереди.Сообщение, ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			Если СообщенияТребующиеПодписания[ЭлементОчереди.Сообщение] <> Неопределено Тогда
				Продолжить;
			Иначе
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
				
				НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеЗависимости.Количество() Тогда
					
					Для Каждого Зависимость Из НайденныеЗависимости Цикл
						Если СообщенияТребующиеПодписания[Зависимость.Сообщение2] = Неопределено Тогда
							ВозвращаемоеЗначение = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				
				Иначе
					
					ВозвращаемоеЗначение = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВозвращаемоеЗначение Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьОчередьОтложеннойЗагрузки(ПараметрыОбмена)
	
	СообщенияXML = Новый Массив();
	
	Для Каждого КлючИЗначение Из ПараметрыОбмена.КОтложеннойЗагрузке Цикл
		
		Организация = КлючИЗначение.Ключ;
		
		Для Каждого КлючИЗначениеИмяТаблицы Из КлючИЗначение.Значение Цикл
			
			ИмяТаблицы      = КлючИЗначениеИмяТаблицы.Ключ;
			ДанныеЗагрузки  = КлючИЗначениеИмяТаблицы.Значение;
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
			
			Если МенеджерОбъекта = Справочники.КлассификаторНСИЗЕРНО Тогда
				
				Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросКлассификатора;
				Если Не ИнтеграцияЗЕРНО.ДоступнаЗагрузкаКлассификаторов() Тогда
					Продолжить;
				КонецЕсли;
				
				ВидыКлассификаторов = Новый Массив();
				Идентификаторы      = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
				
				Для Каждого КлючИЗначениеПоСсылке Из ДанныеЗагрузки Цикл
					СсылкаНаОбъект  = КлючИЗначениеПоСсылке.Ключ;
					СтрокаСсылки = Идентификаторы.Найти(СсылкаНаОбъект, "Ссылка");
					Если СтрокаСсылки = Неопределено
						Или СтрокаСсылки.ВыполненаЗагрузка Тогда
						Продолжить;
					КонецЕсли;
					Если ВидыКлассификаторов.Найти(СтрокаСсылки.ВидКлассификатора) = Неопределено Тогда
						ВидыКлассификаторов.Добавить(СтрокаСсылки.ВидКлассификатора);
					КонецЕсли;
				КонецЦикла;
				
				Если Не ВидыКлассификаторов.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				ДополнительныеПараметрыЗагрузки = Новый Структура();
				ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
				ДополнительныеПараметрыЗагрузки.Вставить(
					"ПараметрыОбработкиДокумента",
					ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений());
				ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Операция      = Операция;
				ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Организация   = Организация;
				ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка        = МенеджерОбъекта.ПустаяСсылка();
				
				СформированныеСообщенияXML = МенеджерОбъекта.СообщениеКПередачеXML(
					ВидыКлассификаторов,
					Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
					ДополнительныеПараметрыЗагрузки);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияXML, СформированныеСообщенияXML);
					
			ИначеЕсли МенеджерОбъекта = Справочники.РеестрЭлеваторовЗЕРНО Тогда
				
				Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросРеестраЭлеваторов;
				Если Не ИнтеграцияЗЕРНО.ДоступнаЗагрузкаКлассификаторов() Тогда
					Продолжить;
				КонецЕсли;
				
				ДополнительныеПараметрыЗагрузки = Новый Структура();
				ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
				ДополнительныеПараметрыЗагрузки.Вставить(
					"ПараметрыОбработкиДокумента",
					ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений());
				ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Операция    = Операция;
				ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Организация = Организация;
				ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка      = МенеджерОбъекта.ПустаяСсылка();
				СформированныеСообщенияXML = МенеджерОбъекта.СообщениеКПередачеXML(
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка,
					Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
					ДополнительныеПараметрыЗагрузки);
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияXML, СформированныеСообщенияXML);
				
			ИначеЕсли МенеджерОбъекта = Справочники.РеестрПартийЗЕРНО Тогда
				
				Если Не ДанныеЗагрузки.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий;
				
				ТаблицаИзмерений = Новый ТаблицаЗначений();
				ТаблицаИзмерений.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
				ТаблицаИзмерений.Колонки.Добавить("Подразделение",  Метаданные.ОпределяемыеТипы.Подразделение.Тип);
				ТаблицаИзмерений.Колонки.Добавить("Идентификаторы", Новый ОписаниеТипов("Массив"));
				ТаблицаИзмерений.Индексы.Добавить("ВидПродукции");
				ТаблицаИзмерений.Индексы.Добавить("ВидПродукции, Подразделение");
				
				Идентификаторы = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
				Для Каждого КлючИЗначениеПоСсылке Из ДанныеЗагрузки Цикл
					
					СсылкаНаОбъект  = КлючИЗначениеПоСсылке.Ключ;
					ПараметрыСсылки = КлючИЗначениеПоСсылке.Значение;
					СтрокаСсылки = Идентификаторы.Найти(СсылкаНаОбъект, "Ссылка");
					Если СтрокаСсылки = Неопределено
						Или СтрокаСсылки.ВыполненаЗагрузка Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("ВидПродукции",  ПараметрыСсылки.ВидПродукции);
					Если Метаданные.ОпределяемыеТипы.Подразделение.Тип.СодержитТип(ТипЗнч(ПараметрыСсылки.Подразделение)) Тогда
						СтруктураПоиска.Вставить("Подразделение", ПараметрыСсылки.Подразделение);
					Иначе
						СтруктураПоиска.Вставить("Подразделение", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Подразделение"));
					КонецЕсли;
					НайденныеСтроки = ТаблицаИзмерений.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() = 0 Тогда
						СтрокаДанных = ТаблицаИзмерений.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, СтруктураПоиска);
					Иначе
						СтрокаДанных = НайденныеСтроки[0];
					КонецЕсли;
					СтрокаДанных.Идентификаторы.Добавить(СтрокаСсылки.Идентификатор);
					
				КонецЦикла;
				
				Для Каждого СтрокаТаблицы Из ТаблицаИзмерений Цикл
					
					ПараметрыЗапроса = Новый Структура();
					ПараметрыЗапроса.Вставить("НомерПартии", СтрокаТаблицы.Идентификаторы);
					ДополнительныеПараметрыЗагрузки = Новый Структура();
					ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
					ДополнительныеПараметрыЗагрузки.Вставить(
						"ПараметрыОбработкиДокумента",
						ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений());
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Операция         = Операция;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Организация      = Организация;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Подразделение    = СтрокаТаблицы.Подразделение;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.ВидПродукции     = СтрокаТаблицы.ВидПродукции;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.ПараметрыЗапроса = ПараметрыЗапроса;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка           = МенеджерОбъекта.ПустаяСсылка();
					
					СформированныеСообщенияXML = МенеджерОбъекта.СообщениеКПередачеXML(
						ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка,
						Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
						ДополнительныеПараметрыЗагрузки);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияXML, СформированныеСообщенияXML);
					
				КонецЦикла;
				
			ИначеЕсли МенеджерОбъекта = Справочники.СДИЗЗЕРНО Тогда
				
				Если Не ДанныеЗагрузки.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Операция           = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗ;
				
				ТаблицаИзмерений = Новый ТаблицаЗначений();
				ТаблицаИзмерений.Колонки.Добавить("ВидПродукции",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
				ТаблицаИзмерений.Колонки.Добавить("Подразделение",  Метаданные.ОпределяемыеТипы.Подразделение.Тип);
				ТаблицаИзмерений.Колонки.Добавить("Идентификаторы", Новый ОписаниеТипов("Массив"));
				ТаблицаИзмерений.Индексы.Добавить("ВидПродукции");
				ТаблицаИзмерений.Индексы.Добавить("ВидПродукции, Подразделение");
				
				Идентификаторы = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
				Для Каждого КлючИЗначениеПоСсылке Из ДанныеЗагрузки Цикл
					
					СсылкаНаОбъект  = КлючИЗначениеПоСсылке.Ключ;
					ПараметрыСсылки = КлючИЗначениеПоСсылке.Значение;
					СтрокаСсылки = Идентификаторы.Найти(СсылкаНаОбъект, "Ссылка");
					Если СтрокаСсылки = Неопределено
						Или СтрокаСсылки.ВыполненаЗагрузка Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("ВидПродукции",  ПараметрыСсылки.ВидПродукции);
					Если Метаданные.ОпределяемыеТипы.Подразделение.Тип.СодержитТип(ТипЗнч(ПараметрыСсылки.Подразделение)) Тогда
						СтруктураПоиска.Вставить("Подразделение", ПараметрыСсылки.Подразделение);
					Иначе
						СтруктураПоиска.Вставить("Подразделение", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Подразделение"));
					КонецЕсли;
					НайденныеСтроки = ТаблицаИзмерений.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() = 0 Тогда
						СтрокаДанных = ТаблицаИзмерений.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанных, СтруктураПоиска);
					Иначе
						СтрокаДанных = НайденныеСтроки[0];
					КонецЕсли;
					СтрокаДанных.Идентификаторы.Добавить(СтрокаСсылки.Идентификатор);
					
				КонецЦикла;
				
				Для Каждого СтрокаТаблицы Из ТаблицаИзмерений Цикл
					
					ПараметрыЗапроса = Новый Структура();
					ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаТаблицы.Идентификаторы);
					ДополнительныеПараметрыЗагрузки = Новый Структура();
					ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
					ДополнительныеПараметрыЗагрузки.Вставить(
						"ПараметрыОбработкиДокумента",
						ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений());
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Операция         = Операция;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Организация      = Организация;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Подразделение    = СтрокаТаблицы.Подразделение;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.ВидПродукции     = СтрокаТаблицы.ВидПродукции;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.ПараметрыЗапроса = ПараметрыЗапроса;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка           = МенеджерОбъекта.ПустаяСсылка();
					
					СформированныеСообщенияXML = МенеджерОбъекта.СообщениеКПередачеXML(
						ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка,
						Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
						ДополнительныеПараметрыЗагрузки);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияXML, СформированныеСообщенияXML);
					
				КонецЦикла;
				
			ИначеЕсли МенеджерОбъекта = Справочники.РеестрМестФормированияПартийЗЕРНО Тогда
				Продолжить;
			ИначеЕсли МенеджерОбъекта = Справочники.РезультатыИсследованийЗЕРНО Тогда
				Продолжить;
			ИначеЕсли МенеджерОбъекта = Справочники.АктыОтбораПробЗЕРНО Тогда
				
				// Пока не работает загрузка данных по иденитификатору
				Продолжить;
				
				Если Не ДанныеЗагрузки.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросАктовОтбораПроб;
				
				Идентификаторы = ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы;
				Для Каждого КлючИЗначениеПоСсылке Из ДанныеЗагрузки Цикл
					
					СсылкаНаОбъект  = КлючИЗначениеПоСсылке.Ключ;
					ПараметрыСсылки = КлючИЗначениеПоСсылке.Значение;
					СтрокаСсылки = Идентификаторы.Найти(СсылкаНаОбъект, "Ссылка");
					Если СтрокаСсылки = Неопределено
						Или СтрокаСсылки.ВыполненаЗагрузка Тогда
						Продолжить;
					КонецЕсли;
					
					ПараметрыЗапроса = Новый Структура();
					ПараметрыЗапроса.Вставить("Идентификатор", СтрокаСсылки.Идентификатор);
					ДополнительныеПараметрыЗагрузки = Новый Структура();
					ДополнительныеПараметрыЗагрузки.Вставить("ПараметрыОбмена", ПараметрыОбмена);
					ДополнительныеПараметрыЗагрузки.Вставить(
						"ПараметрыОбработкиДокумента",
						ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений());
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Операция         = Операция;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Организация      = Организация;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Подразделение    = ПараметрыСсылки.Подразделение;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.ВидПродукции     = ПараметрыСсылки.ВидПродукции;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.ПараметрыЗапроса = ПараметрыЗапроса;
					ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка           = МенеджерОбъекта.ПустаяСсылка();
					
					СформированныеСообщенияXML = МенеджерОбъекта.СообщениеКПередачеXML(
						ДополнительныеПараметрыЗагрузки.ПараметрыОбработкиДокумента.Ссылка,
						Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные,
						ДополнительныеПараметрыЗагрузки);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СообщенияXML, СформированныеСообщенияXML);
					
				КонецЦикла;
				
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка. Для %1 не определена операция отложенной загрузки'"),
					ИмяТаблицы);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыОбмена.КОтложеннойЗагрузке.Очистить();
	
	ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ПередатьЗапросВСервисТранзакция(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка

		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийЗЕРНО.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийЗЕРНО");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();

		Если Не ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
			НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
			НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование.Сообщение);
			НаборЗаписейОснование.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ТекущееДействие <> Перечисления.ДействиеССообщениемЗЕРНО.Отправка Тогда
					ОтменитьТранзакцию();
					// Сообщение уже передано в ГИС, но еще не обработано.
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ПроверитьУстановитьОрганизациюВСообщенииОснование(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			
			ПередатьЗапросВСервис(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по объекту %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.СсылкаНаОбъект,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПередатьЗапросВСервис(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	НовоеТекущееДействие         = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата;
	ТелоЗапроса                  = РеквизитыИсходящегоСообщения.КонвертЗапросXML;
	
	ПараметрыЗапросаВСервис = НовыеПараметрыОтправкиЗапроса();
	ПараметрыЗапросаВСервис.ТелоЗапроса      = ТелоЗапроса;
	ПараметрыЗапросаВСервис.Организация      = ЭлементОчереди.Организация;
	ПараметрыЗапросаВСервис.ПараметрыЗапроса = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОтправкиHTTPЗапросов();
	
	РезультатЗапроса = ОтправитьДанныеВСервис(ПараметрыЗапросаВСервис, ПараметрыОбмена, ЭлементОчереди.Сертификат);
	
	ПараметрыОбработкиРезультата = НовыеПараметрыОбработкиРезультата();
	ПараметрыОбработкиРезультата.Организация      = ЭлементОчереди.Организация;
	ПараметрыОбработкиРезультата.Операция         = ЭлементОчереди.Операция;
	ПараметрыОбработкиРезультата.ТекущееДействие  = Перечисления.ДействиеССообщениемЗЕРНО.Отправка;
	
	ДанныеОбработки = ОбработатьРезультатОтправкиHTTPЗапроса(ПараметрыОбработкиРезультата, РезультатЗапроса, ПараметрыОбмена);
	
	РезультатОбработкиТекстаОшибки = ОбработкаТекстаОшибкиПриОтправкеHTTPЗапроса(ДанныеОбработки, ПараметрыОбмена, ЭлементОчереди);
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
		
		РезультатФормирования = СформироватьНовыйКонвертСообщения(ЭлементОчереди, ПараметрыОбмена);
		ЭлементОчереди.ТребуетсяПодписать = (Не РезультатФормирования.СообщениеПодписано);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ТекущееДействие              = ЭлементОчереди.ТекущееДействие;
		ПараметрыОбновленияОчереди.ДанныеПротокола              = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения = РезультатФормирования.РеквизитыИсходящегоСообщения;
		ПараметрыОбновленияОчереди.ТребуетсяПодписать           = ЭлементОчереди.ТребуетсяПодписать;
		
		ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
	ИначеЕсли ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по объекту %1 не принято ФГИС ""Зерно"":
						           |Текст ошибки: %2'"),
						ЭлементОчереди.СсылкаНаОбъект,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ФГИС ""Зерно"":
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
			
				Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчереди.ПротоколОбмена);
				ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
			
			КонецЕсли;
			
			УдалитьСообщенияОчередиПоЦепочке(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ЭлементОчереди.ТекущееДействие = НовоеТекущееДействие;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ТекущееДействие    = ЭлементОчереди.ТекущееДействие;
			ПараметрыОбновленияОчереди.ДанныеПротокола    = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			ПараметрыОбновленияОчереди.ТребуетсяПодписать = Ложь;
			
			ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
			
			ПараметрыОптимизации = ПараметрыОбмена.ПараметрыОптимизации;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			ЭлементОчереди.ДатаСледующейИтерации        = ТекущаяДатаСеанса() + ПараметрыОптимизации.ИнтервалМеждуОтправкойЗапросаИПолучениемРезультата;
			
		КонецЕсли;
		
		Если ОбъектСинхронизацииПоддерживаетСтатусыОбработки(ЭлементОчереди.СсылкаНаОбъект) Тогда
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.СсылкаНаОбъект);
			ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ИдентификаторСтроки = ЭлементОчереди.РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
			МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
				ЭлементОчереди.СсылкаНаОбъект, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки, ПараметрыОбновленияСтатуса);
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Если Не РезультатОбработкиТекстаОшибки.ТребуетсяОжидание
			И ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по %1 не принято ФГИС ""Зерно"":
					           |Текст ошибки: %2'"),
					ЭлементОчереди.СсылкаНаОбъект,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ФГИС ""Зерно"":
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, Истина);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		
		ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
		Если Не РезультатОбработкиТекстаОшибки.ТребуетсяОжидание Тогда
			ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапроситьРезультатОбработкиВСервисеТранзакция(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка

		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийЗЕРНО.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийЗЕРНО");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
			НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование.Сообщение);
			НаборЗаписейОснование.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.Отправка Тогда
					ОтменитьТранзакцию();
					// Сообщение еще не отправлено
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			Если Перечисления.ВидыОперацийЗЕРНО.ЭтоАбстрактнаяОперация(ЭлементОчереди.Операция) Тогда
				
				Если Не ЕстьСообщенияКПодписаниюПоЭлементуОчереди(ЭлементОчереди, ПараметрыОбмена) Тогда
					
					ИзмененныеОбъекты = Новый Массив;
					ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты);
					
					Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование)
						И Перечисления.ВидыОперацийЗЕРНО.ОперацииРасчетСтатусаПоСтроке().Найти(ЭлементОчереди.Операция) <> Неопределено
						Тогда
						РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
						Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
							ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
							ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
							ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
						КонецЕсли;
					КонецЕсли;
					
					СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаРезультата.Объект, ИзмененныеОбъекты, Истина);
					
					ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
					РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
					Если РеквизитыИсходящегоСообщения.ЯвляетсяОснованиемСообщений
						И Перечисления.ВидыОперацийЗЕРНО.ОперацииРасчетСтатуса().Найти(ЭлементОчереди.Операция) = Неопределено Тогда
						
						ДанныеОбработки = Новый Структура;
						ДанныеОбработки.Вставить("СтатусОбработки", Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена);
						ДанныеОбработки.Вставить("ТекстОшибки",     "");
						
						Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
						
						ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
							ЭлементОчередиОснование.ПротоколОбмена);
						
						СтрокаРезультата.ПротоколОбмена = ДобавитьЗаписьВПротоколОбмена(
							ПротоколаОбменаXML,
							Реквизиты).Ссылка;
							
					КонецЕсли;
					
					УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
					УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				
				КонецЕсли;
			
			ИначеЕсли Перечисления.ВидыОперацийЗЕРНО.ЭтоОперацияДополнительногоЗапроса(ЭлементОчереди.Операция) Тогда
				ОбработкаЗапросаДанныхОбъектаКонфигурации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			Иначе
				ЗапроситьРезультатОбработкиВСервисе(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			КонецЕсли;
			
			ОбработатьОчередьОтложеннойЗагрузки(ПараметрыОбмена);
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При запросе результата возникла ошибка:
			           |Текст ошибки: %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ТекстОшибкиПользователю = СтрШаблон(
			НСтр("ru = 'При запросе результата возникла ошибка:
			           |Текст ошибки: %1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПараметрыОшибки = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыНумерованнойОшибки(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Если ПараметрыОшибки = Неопределено Или ПараметрыОшибки.ЗаписыватьВЖурналРегистрации Тогда
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецЕсли;
		
		Если ПараметрыОшибки <> Неопределено И ПараметрыОшибки.ПрерватьОбработкуОчередиСообщений Тогда
			ПараметрыОбмена.ПрерватьОбработкуОчереди = Истина;
		КонецЕсли;
		
		Если ПараметрыОшибки <> Неопределено И ПараметрыОшибки.СообщатьОбОшибке Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПользователю);
		КонецЕсли;
		
		Если ПараметрыОшибки = Неопределено Или ПараметрыОшибки.ВыбрасыватьИсключение Тогда
			ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗапроситьРезультатОбработкиВСервисе(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	НовоеТекущееДействие         = Перечисления.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения;
	ТелоЗапроса                  = РеквизитыИсходящегоСообщения.КонвертРезультатXML;
	ИзмененныеОбъекты            = Новый Массив;
	
	ПараметрыЗапросаВСервис = НовыеПараметрыОтправкиЗапроса();
	ПараметрыЗапросаВСервис.ТелоЗапроса      = ТелоЗапроса;
	ПараметрыЗапросаВСервис.Организация      = ЭлементОчереди.Организация;
	ПараметрыЗапросаВСервис.ПараметрыЗапроса = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОтправкиHTTPЗапросов();
	
	РезультатЗапроса = ОтправитьДанныеВСервис(ПараметрыЗапросаВСервис, ПараметрыОбмена, ЭлементОчереди.Сертификат);
	
	ПараметрыОбработкиРезультата = НовыеПараметрыОбработкиРезультата();
	ПараметрыОбработкиРезультата.Организация      = ЭлементОчереди.Организация;
	ПараметрыОбработкиРезультата.Операция         = ЭлементОчереди.Операция;
	ПараметрыОбработкиРезультата.ТекущееДействие  = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата;
	
	ДанныеОбработки = ОбработатьРезультатОтправкиHTTPЗапроса(ПараметрыОбработкиРезультата, РезультатЗапроса, ПараметрыОбмена);
	
	Если ДанныеОбработки.ОтветПолучен Тогда
		УстановитьДатуПоследнегоЗапросаРезультата(ЭлементОчереди, ПараметрыОбмена);
	КонецЕсли;
	
	РезультатОбработкиТекстаОшибки = ОбработкаТекстаОшибкиПриОтправкеHTTPЗапроса(ДанныеОбработки, ПараметрыОбмена, ЭлементОчереди);
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		СообщениеОбработано = Истина;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка получения результата по объекту %1 из ФГИС ""Зерно"":
						           |Текст ошибки: %2'"),
						ЭлементОчереди.СсылкаНаОбъект,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка получения результата из ФГИС ""Зерно"":
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				
				Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчереди.ПротоколОбмена);
				ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
				РезультатыПередачиСообщения.ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
			КонецЕсли;
			УдалитьСообщенияОчередиПоЦепочке(ЭлементОчереди, ПараметрыОбмена);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		ИначеЕсли ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается
			Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения Тогда
			
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			СообщениеОбработано = Ложь;
			
			Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения Тогда
				РезультатФормирования = СформироватьНовыйКонвертСообщения(ЭлементОчереди, ПараметрыОбмена);
				ЭлементОчереди.ТребуетсяПодписать = (Не РезультатФормирования.СообщениеПодписано);
				НовыеРеквизитыИсходящегоСообщения = РезультатФормирования.РеквизитыИсходящегоСообщения;
			КонецЕсли;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ТекущееДействие    = ЭлементОчереди.ТекущееДействие;
			ПараметрыОбновленияОчереди.ДанныеПротокола    = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			ПараметрыОбновленияОчереди.ТребуетсяПодписать = ЭлементОчереди.ТребуетсяПодписать;
			ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения = НовыеРеквизитыИсходящегоСообщения;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
			Иначе
				ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
			КонецЕсли;
			
		Иначе
			
			ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты, ДанныеОбработки.Объект);
			
			РезультатыПередачиСообщения.ИзмененныеОбъекты = ИзмененныеОбъекты;
			
			ЭлементОчереди.ТекущееДействие = НовоеТекущееДействие;
			
			ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
			ПараметрыОбновленияОчереди.ТекущееДействие              = ЭлементОчереди.ТекущееДействие;
			ПараметрыОбновленияОчереди.ДанныеПротокола              = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
			ПараметрыОбновленияОчереди.ТребуетсяПодписать           = Ложь;
			
			Если ПараметрыОбмена.ПараметрыОптимизации.ИспользоватьПодтверждениеПолученияСообщения Тогда
				
				РезультатФормирования = СформироватьНовыйКонвертСообщения(
					ЭлементОчереди,
					ПараметрыОбмена,
					ДанныеОбработки.ИдентификаторЗаявки);
				ЭлементОчереди.ТребуетсяПодписать = (Не РезультатФормирования.СообщениеПодписано);
				
				ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения = РезультатФормирования.РеквизитыИсходящегоСообщения;
				ПараметрыОбновленияОчереди.ТребуетсяПодписать           = ЭлементОчереди.ТребуетсяПодписать;
				
			КонецЕсли;
			
			Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				
				ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
				
				// Сохранить параметры запроса абстрактной операции расчета статуса.
				Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
					ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
					ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
					ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
				КонецЕсли;
				
			Иначе
				
				ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(
					НаборЗаписей,
					НаборЗаписейОснование,
					ПараметрыОбновленияОчереди,
					РеквизитыИсходящегоСообщенияОснования);
				
			КонецЕсли;
			
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			Если Не ПараметрыОбмена.ПараметрыОптимизации.ИспользоватьПодтверждениеПолученияСообщения Тогда
				
				Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
				
				Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
					ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
						ЭлементОчереди.ПротоколОбмена);
					ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
						ПротоколаОбменаXML,
						Реквизиты);
					РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
				КонецЕсли;
				
				УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СообщениеОбработано Тогда
			
			Если ОбъектСинхронизацииПоддерживаетСтатусыОбработки(ЭлементОчереди.СсылкаНаОбъект) Тогда
				МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.СсылкаНаОбъект);
				ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ИдентификаторСтроки = ЭлементОчереди.РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
				ПараметрыОбновленияСтатуса.СтатусОбработки     = ДанныеОбработки.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции   = ДанныеОбработки.Операция;
				МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ЭлементОчереди.СсылкаНаОбъект, ЭлементОчереди.Операция, ПараметрыОбновленияСтатуса);
			КонецЕсли;
		
			ОбработатьРезультатПолученияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
		КонецЕсли;
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Если Не РезультатОбработкиТекстаОшибки.ТребуетсяОжидание
			И ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка получения результата по объекту %1 из ФГИС ""Зерно"":
					           |Текст ошибки: %2'"),
					ЭлементОчереди.СсылкаНаОбъект,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка получения результата из ФГИС ""Зерно"":
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, Истина);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		
		Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
			ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
		Иначе
			ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		КонецЕсли;
		
		Если Не РезультатОбработкиТекстаОшибки.ТребуетсяОжидание Тогда
			ОбработатьРезультатПолученияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодтвердитьПолучениеВСервисеТранзакция(ЭлементОчереди, ПараметрыОбмена)
	
	НачатьТранзакцию();
	
	Попытка

		ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

		Блокировка = Новый БлокировкаДанных;

		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийЗЕРНО.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

		Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийЗЕРНО");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

		Блокировка.Заблокировать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		ПротоколОбменаХранитсяВТекущемЭлементеОчереди = ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование);
		
		Если Не ПротоколОбменаХранитсяВТекущемЭлементеОчереди Тогда
			НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
			НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование.Сообщение);
			НаборЗаписейОснование.Прочитать();
		КонецЕсли;
		
		Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.ТекущееДействие <> Перечисления.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения Тогда
					ОтменитьТранзакцию();
					// Сообщение еще не отправлено или не обработано
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
			ТелоЗапроса                  = РеквизитыИсходящегоСообщения.КонвертПодтверждениеXML;
			
			Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
				ПодтвердитьПолучениеВСервисе(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по объекту %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.СсылкаНаОбъект,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодтвердитьПолучениеВСервисе(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ТелоЗапроса                  = РеквизитыИсходящегоСообщения.КонвертПодтверждениеXML;
	
	ПараметрыЗапросаВСервис = НовыеПараметрыОтправкиЗапроса();
	ПараметрыЗапросаВСервис.ТелоЗапроса      = ТелоЗапроса;
	ПараметрыЗапросаВСервис.Организация      = ЭлементОчереди.Организация;
	ПараметрыЗапросаВСервис.ПараметрыЗапроса = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОтправкиHTTPЗапросов();
	
	РезультатЗапроса = ОтправитьДанныеВСервис(ПараметрыЗапросаВСервис, ПараметрыОбмена, ЭлементОчереди.Сертификат);
	
	ПараметрыОбработкиРезультата = НовыеПараметрыОбработкиРезультата();
	ПараметрыОбработкиРезультата.Организация      = ЭлементОчереди.Организация;
	ПараметрыОбработкиРезультата.Операция         = ЭлементОчереди.Операция;
	ПараметрыОбработкиРезультата.ТекущееДействие  = Перечисления.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения;
	
	ДанныеОбработки = ОбработатьРезультатОтправкиHTTPЗапроса(ПараметрыОбработкиРезультата, РезультатЗапроса, ПараметрыОбмена);
	
	РезультатОбработкиТекстаОшибки = ОбработкаТекстаОшибкиПриОтправкеHTTPЗапроса(ДанныеОбработки, ПараметрыОбмена, ЭлементОчереди);
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
	
		РезультатФормирования = СформироватьНовыйКонвертСообщения(ЭлементОчереди, ПараметрыОбмена);
		ЭлементОчереди.ТребуетсяПодписать = (Не РезультатФормирования.СообщениеПодписано);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ТекущееДействие    = ЭлементОчереди.ТекущееДействие;
		ПараметрыОбновленияОчереди.ДанныеПротокола    = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыОбновленияОчереди.ТребуетсяПодписать = ЭлементОчереди.ТребуетсяПодписать;
		ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения = РезультатФормирования.РеквизитыИсходящегоСообщения;
		
		ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
	ИначеЕсли ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПроигнорирована Тогда
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена);
	
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка подтверждения получения по объекту %1 ФГИС ""Зерно"":
						           |Текст ошибки: %2'"),
						ЭлементОчереди.СсылкаНаОбъект,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка подтверждения получения ФГИС ""Зерно"":
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
			
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчереди.ПротоколОбмена);
				ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
			
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
				
				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчереди.ПротоколОбмена);
				ДанныеЗаписиПротоколаОбмена = ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
				РезультатыПередачиСообщения.ПротоколОбмена = ДанныеЗаписиПротоколаОбмена.Ссылка;
				
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
		РезультатыПередачиСообщения.РезультатОтправкиЗапроса = ДанныеОбработки.РезультатОтправкиЗапроса;
		РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
		РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
		РезультатыПередачиСообщения.ТекстСообщения           = ТелоЗапроса;
		
		Если Не РезультатОбработкиТекстаОшибки.ТребуетсяОжидание
			И ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по %1 не принято ФГИС ""Зерно"":
					           |Текст ошибки: %2'"),
					ЭлементОчереди.СсылкаНаОбъект,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ФГИС ""Зерно"":
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, Истина);
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.ДанныеПротокола = ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена);
		
		ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
	КонецЕсли;
	
	Если Не РезультатОбработкиТекстаОшибки.ТребуетсяОжидание Тогда
		ОбработатьРезультатПодтвержденияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование)
	Возврат Не (ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование)
		И Перечисления.ВидыОперацийЗЕРНО.ОперацииРасчетСтатуса().Найти(ЭлементОчередиОснование.Операция) = Неопределено);
КонецФункции

Функция ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование)
	Возврат (ЭлементОчереди <> ЭлементОчередиОснование И ЭлементОчередиОснование <> Неопределено);
КонецФункции

Функция ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементОчереди.СообщениеОснование) Тогда
		Возврат ЭлементОчереди;
	Иначе
		Возврат ПараметрыОбмена.ОчередьСообщений.Найти(ЭлементОчереди.СообщениеОснование, "Сообщение");
	КонецЕсли;
	
КонецФункции

Функция СообщенияКПередаче(СообщенияXML, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ПодписанныеСообщенияПоОрганизациям",   Неопределено);
	ВозвращаемоеЗначение.Вставить("СообщенияБезПодписанияПоОрганизациям", Неопределено);
	
	СообщенияНеТребующиеПодписания    = Новый Массив();
	СертификатыДляПодписанияНаСервере = ОбщегоНазначенияИС.СертификатыДляПодписанияНаСервере();
	
	Для Каждого СообщениеXML Из СообщенияXML Цикл
		
		ТребуетсяПодписание = СообщениеXML.ТребуетсяПодписание И Не ЗначениеЗаполнено(СообщениеXML.ТекстОшибки);
		
		СтрокаСертификата = Неопределено;
		Если ТребуетсяПодписание Тогда
			СтрокаСертификата = СтрокаСертификатаДляПодписанияНаСервере(СертификатыДляПодписанияНаСервере, СообщениеXML);
		КонецЕсли;
		
		Если (ТребуетсяПодписание
			И СтрокаСертификата <> Неопределено) Или Не ТребуетсяПодписание Тогда
			
			Если ТребуетсяПодписание Тогда
				
				ВсеСообщенияПодписаны   = Истина;
				ПараметрыЦиклаСообщения = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ПараметрыЦиклаСообщения(СообщениеXML.ПодписываемоеТекущееДействие);
				
				Для Каждого ПараметрыСообщения Из ПараметрыЦиклаСообщения Цикл
					
					Если Не ЗначениеЗаполнено(СообщениеXML[ПараметрыСообщения.ИмяПоляСообщения]) Тогда
						Продолжить;
					КонецЕсли;
					
					МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
					Если МенеджерКриптографии <> Неопределено Тогда
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
					КонецЕсли;
					РезультатПодписания = Подписать(
						СообщениеXML[ПараметрыСообщения.ИмяПоляСообщения],
						СтрокаСертификата.СертификатКриптографии,
						МенеджерКриптографии);
					
					Если РезультатПодписания.Успех Тогда
						СообщениеXML[ПараметрыСообщения.ИмяПоляСообщения] = РезультатПодписания.КонвертSOAP;
						СообщениеXML.Сертификат = СтрокаСертификата.Сертификат;
					Иначе
						ВсеСообщенияПодписаны = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ВсеСообщенияПодписаны Тогда
					
					КоллекцияСообщений = МассивИзСоответствияПоКлючу(
						ВозвращаемоеЗначение.ПодписанныеСообщенияПоОрганизациям,
						СообщениеXML.Организация);
					КоллекцияСообщений.Добавить(СообщениеXML);
					
					ТребуетсяПодписание = Ложь;
					
				КонецЕсли;
				
			Иначе
				
				Если ИспользоватьОтложенноеПодписаниеПоОрганизации(
					СообщениеXML.Организация,
					СообщениеXML.Подразделение,
					ПараметрыОбмена) Тогда
					КоллекцияСообщений = МассивИзСоответствияПоКлючу(
						ВозвращаемоеЗначение.ПодписанныеСообщенияПоОрганизациям,
						СообщениеXML.Организация);
					КоллекцияСообщений.Добавить(СообщениеXML);
				Иначе
					СообщенияНеТребующиеПодписания.Добавить(СообщениеXML);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяПодписание Тогда
			
			Если ИспользоватьОтложенноеПодписаниеПоОрганизации(
					СообщениеXML.Организация,
					СообщениеXML.Подразделение,
					ПараметрыОбмена) Тогда
				КоллекцияСообщений = МассивИзСоответствияПоКлючу(
					ВозвращаемоеЗначение.СообщенияБезПодписанияПоОрганизациям, СообщениеXML.Организация);
				КоллекцияСообщений.Добавить(СообщениеXML);
			Иначе
				КоллекцияСообщений = МассивИзСоответствияПоКлючу(
					ПараметрыОбмена.СообщенияКПодписанию, СообщениеXML.Организация);
				КоллекцияСообщений.Добавить(СообщениеXML);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СообщениеXML Из СообщенияНеТребующиеПодписания Цикл
		Организация = СообщениеXML.Организация;
		Если Организация = Неопределено Тогда
			Организация = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация");
		КонецЕсли;
		ЕстьСообщенияКПодписанию = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
			И ЗначениеЗаполнено(ПараметрыОбмена.СообщенияКПодписанию[Организация]));
		Если ЕстьСообщенияКПодписанию Тогда
			КоллекцияСообщений = МассивИзСоответствияПоКлючу(ПараметрыОбмена.СообщенияПослеПодписания, Организация);
			КоллекцияСообщений.Добавить(СообщениеXML);
		Иначе
			КоллекцияСообщений = МассивИзСоответствияПоКлючу(
				ВозвращаемоеЗначение.ПодписанныеСообщенияПоОрганизациям,
				Организация);
			КоллекцияСообщений.Добавить(СообщениеXML);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИспользоватьОтложенноеПодписаниеПоОрганизации(Организация, Подразделение, ПараметрыОбмена)
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ПараметрыОбмена.НастройкаРегламентногоЗадания <> Неопределено Тогда
		ВозвращаемоеЗначение = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если Не ИнтеграцияЗЕРНОПовтИсп.ИспользоватьАвтоматическийОбменДанными(Организация, Подразделение) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ОрганизацияСоответствие = Новый Соответствие();
	ОрганизацияСоответствие.Вставить(Организация);
	ДоступныеСертификаты(ОрганизацияСоответствие, ПараметрыОбмена.СертификатыПользователя);
	
	Если ПараметрыОбмена.СертификатыПользователя = Неопределено
		Или ПараметрыОбмена.СертификатыПользователя[Организация] = Неопределено
		Или ПараметрыОбмена.СертификатыПользователя[Организация].Количество() = 0 Тогда
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтрокаСертификатаДляПодписанияНаСервере(СертификатыДляПодписанияНаСервере, СообщениеXML)
	
	СтрокаСертификата = Неопределено;
	
	Если СертификатыДляПодписанияНаСервере <> Неопределено Тогда
		Если ЗначениеЗаполнено(СообщениеXML.Организация) Тогда
			
			Если ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс() Тогда
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Организация",   СообщениеXML.Организация);
				СтруктураПоиска.Вставить("Подразделение", СообщениеXML.Подразделение);
				
				Для Каждого СтрокаТаблицы Из СертификатыДляПодписанияНаСервере.Сертификаты.НайтиСтроки(СтруктураПоиска) Цикл
					СтрокаСертификата = СтрокаТаблицы;
				КонецЦикла;
				
			Иначе
				
				СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
					СообщениеXML.Организация,
					"Организация");
				
			КонецЕсли;
			
		ИначеЕсли СообщениеXML.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросКлассификатора
			И СертификатыДляПодписанияНаСервере.Сертификаты.Количество() Тогда
			СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты[0];
			СообщениеXML.Организация = СтрокаСертификата.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСертификата;
	
КонецФункции

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Истина);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОбмена.ОбработанныеЭлементыОчереди.Найти(ЭлементОчереди) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяДатаСеанса                  = ТекущаяДатаСеанса();
	ДатаОкончанияБлокировкиОтправителя = ДатаОкончанияБлокировкиОтправителя(ПараметрыОбмена, ЭлементОчереди);
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса)
	                    Или ДатаОкончанияБлокировкиОтправителя > ТекущаяДатаСеанса;
	
	Если ЭлементОчереди.ТребуетсяПодписать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТребуетсяОжидание Тогда
		Если ЭлементОчереди.ДатаСледующейИтерации = Неопределено
			Или ЭлементОчереди.ДатаСледующейИтерации >= ДатаОкончанияБлокировкиОтправителя Тогда
			ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		Иначе
			ДатаСледующейИтерации = ДатаОкончанияБлокировкиОтправителя;
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли Не ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение); // Есть ли сообщения
	ПараметрыОтбора.Вставить("Загрузка",   Истина);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОчереди.ТребуетсяПодписать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяДатаСеанса                  = ТекущаяДатаСеанса();
	ДатаОкончанияБлокировкиОтправителя = ДатаОкончанияБлокировкиОтправителя(ПараметрыОбмена, ЭлементОчереди);
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса)
	                    Или ДатаОкончанияБлокировкиОтправителя > ТекущаяДатаСеанса;
	
	Если ТребуетсяОжидание Тогда
		Если ЭлементОчереди.ДатаСледующейИтерации = Неопределено
			Или ЭлементОчереди.ДатаСледующейИтерации >= ДатаОкончанияБлокировкиОтправителя Тогда
			ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		Иначе
			ДатаСледующейИтерации = ДатаОкончанияБлокировкиОтправителя;
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли Не ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноПодтверждать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение); // Есть ли сообщения
	ПараметрыОтбора.Вставить("Загрузка",   Истина);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОчереди.ТребуетсяПодписать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяДатаСеанса                  = ТекущаяДатаСеанса();
	ДатаОкончанияБлокировкиОтправителя = ДатаОкончанияБлокировкиОтправителя(ПараметрыОбмена, ЭлементОчереди);
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса)
	                    Или ДатаОкончанияБлокировкиОтправителя > ТекущаяДатаСеанса;
	
	Если ТребуетсяОжидание Тогда
		Если ЭлементОчереди.ДатаСледующейИтерации = Неопределено
			Или ЭлементОчереди.ДатаСледующейИтерации >= ДатаОкончанияБлокировкиОтправителя Тогда
			ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		Иначе
			ДатаСледующейИтерации = ДатаОкончанияБлокировкиОтправителя;
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли Не ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДатаОкончанияБлокировкиОтправителя(ПараметрыОбмена, ЭлементОчереди)
	
	ИнтервалПовторенияЗапросаПослеБлокировкиОтправителя = 61;
	
	ДатаБлокировкиПоОрганизации = ПараметрыОбмена.ДатыБлокировкиОтправителя[ЭлементОчереди.Сертификат];
	Если ДатаБлокировкиПоОрганизации <> Неопределено Тогда
		Возврат ДатаБлокировкиПоОрганизации + ИнтервалПовторенияЗапросаПослеБлокировкиОтправителя;
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в ЗЕРНО.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - Ссылка на объект.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив из см. СтруктураСообщенияXML - Сообщения к передачи.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("Массив") Тогда
		Если СсылкаНаОбъект.Количество() Тогда
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(СсылкаНаОбъект[0]);
		Иначе
			Возврат Новый Массив();
		КонецЕсли;
	Иначе
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(СсылкаНаОбъект);
	КонецЕсли;
	СообщенияXML = МенеджерОбъекта.СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры);
	
	СформироватьКонвертыСообщенийXML(СообщенияXML, ДополнительныеПараметры);
	
	Возврат СообщенияXML;
	
КонецФункции

Процедура СформироватьКонвертыСообщенийXML(СообщенияXML, ДополнительныеПараметры) Экспорт
	
	Для Каждого СообщениеXML Из СообщенияXML Цикл
		
		Если Не СообщениеXML.ТребуетсяПодписание Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрыСообщения Из ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ПараметрыЦиклаСообщения() Цикл
			
			Если ПараметрыСообщения.ОперацияСообщения = Перечисления.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения Тогда
				Продолжить;
			КонецЕсли;
			
			СообщениеXML[ПараметрыСообщения.ИмяПоляСообщения] = КонвертСообщенияXML(
				СообщениеXML,
				ПараметрыСообщения,
				СообщениеXML.ИдентификаторЗаявки,
				ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщенияОчередиПоЦепочке(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементОчереди.ИдентификаторЦепочки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
		Если ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение
			И ЭлементОчередиКУдалению.ИдентификаторЦепочки = ЭлементОчереди.ИдентификаторЦепочки Тогда
			УдалитьСообщениеИзОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиКУдалению, ПараметрыОбмена);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если ЭлементОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

// Инициализация таблицы протокола обмена элемента очереди из ЗЕРНО
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * ДатаУниверсальная - Дата - Дата.
//  * Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - вид операции.
//  * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - статус обработки сообщения.
//  * Запрос - Строка - запрос.
//  * ЗапросЗаголовки - Строка - заголовки запроса.
//  * ЗапросТело - Строка - тело запроса.
//  * ОтветЗаголовки - Строка - заголовки ответа.
//  * ОтветТело - Строка - ответ.
//  * КодСостояния - Строка - код состояния запроса.
//  * ЭтоВременнаяОшибка - Булево - Это сетевая ошибка или ошибка обработки запроса
Функция ИнициализироватьТаблицуПротоколОбмена() Экспорт
	
	ПротоколОбмена = Новый ТаблицаЗначений;
	ПротоколОбмена.Колонки.Добавить("ДатаУниверсальная",      Новый ОписаниеТипов("Дата"));
	ПротоколОбмена.Колонки.Добавить("Операция",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийЗЕРНО"));
	ПротоколОбмена.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ПротоколОбмена.Колонки.Добавить("ТекущееДействие",        Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеССообщениемЗЕРНО"));
	ПротоколОбмена.Колонки.Добавить("СтатусОбработки",        Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО"));
	ПротоколОбмена.Колонки.Добавить("Запрос",                 Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросЗаголовки",        Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросТело",             Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветЗаголовки",         Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветТело",              Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("КодСостояния",           Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЭтоВременнаяОшибка",     Новый ОписаниеТипов("Булево"));
	ПротоколОбмена.Колонки.Добавить("ДополнительноеОписание", Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("НомерСтраницы",          ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ПротоколОбмена.Колонки.Добавить("СсылкаНаОбъект",         Метаданные.ОпределяемыеТипы.ОбъектыСинхронизацииЗЕРНО.Тип);
	
	Возврат ПротоколОбмена;
	
КонецФункции

Процедура ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, ЭтоВременнаяОшибка = Ложь) Экспорт
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
		ЭлементОчередиОснование = ЭлементОчереди;
	КонецЕсли;
	
	Если ЭлементОчередиОснование.ПротоколОбмена = Неопределено Тогда
		
		ПротоколОбмена = ИнициализироватьТаблицуПротоколОбмена();
		ЭлементОчередиОснование.ПротоколОбмена = ПротоколОбмена;
		
	Иначе
		ПротоколОбмена = ЭлементОчередиОснование.ПротоколОбмена;
	КонецЕсли;
	
	ДополнительныеПараметрыHTTP   = ДанныеОбработки.РезультатОтправкиЗапроса;
	ЗапросЗаголовки               = Новый Массив;
	ПараметрыОтправкиHTTPЗапросов = ДополнительныеПараметрыHTTP.ПараметрыОтправкиHTTPЗапросов;
	HTTPМетод                     = ДополнительныеПараметрыHTTP.HTTPМетод;
	HTTPЗапрос                    = ДополнительныеПараметрыHTTP.HTTPЗапрос;
	HTTPОтвет                     = ДополнительныеПараметрыHTTP.HTTPОтвет;
	
	Если HTTPЗапрос <> Неопределено Тогда
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			ЗапросЗаголовки.Добавить(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения  = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если HTTPОтвет <> Неопределено Тогда
		
		КодСостояния   = HTTPОтвет.КодСостояния;
		ОтветЗаголовки = ЗаголовкиИзHTTPОтвета(HTTPОтвет);
		
		Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
			ОтветТело = HTTPОтвет.Тело;
		Иначе
			ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("ТекстОшибки")
			И Не ЗначениеЗаполнено(ОтветТело) Тогда
			ОтветТело = ДанныеОбработки.ТекстОшибки;
		КонецЕсли;
			
	Иначе
		ОтветТело = ДанныеОбработки.ТекстОшибки;
	КонецЕсли;
	
	КоличествоСтрокПротоколаОбмена = ПротоколОбмена.Количество();
	Если КоличествоСтрокПротоколаОбмена > 0 Тогда
		ПоследняяЗаписьПротокола = ПротоколОбмена[КоличествоСтрокПротоколаОбмена - 1];
		Если ПоследняяЗаписьПротокола.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения
			И ПоследняяЗаписьПротокола.НомерСтраницы = РеквизитыИсходящегоСообщения.НомерСтраницы
			И ПоследняяЗаписьПротокола.ТекущееДействие = ДанныеОбработки.ТекущееДействие
			И ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения Тогда
			ЗаписьПротокола = ПоследняяЗаписьПротокола;
		ИначеЕсли ПоследняяЗаписьПротокола.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается
			И ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается
			И ПоследняяЗаписьПротокола.ТекущееДействие = ДанныеОбработки.ТекущееДействие
			И ПоследняяЗаписьПротокола.НомерСтраницы = РеквизитыИсходящегоСообщения.НомерСтраницы
			И ОтветТело = ПоследняяЗаписьПротокола.ОтветТело Тогда
			ЗаписьПротокола = ПоследняяЗаписьПротокола;
		ИначеЕсли ПоследняяЗаписьПротокола.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка
			И ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка
			И ПоследняяЗаписьПротокола.ТекущееДействие = ДанныеОбработки.ТекущееДействие
			И ПоследняяЗаписьПротокола.НомерСтраницы = РеквизитыИсходящегоСообщения.НомерСтраницы
			И ЭтоВременнаяОшибка = ПоследняяЗаписьПротокола.ЭтоВременнаяОшибка
			И ОтветТело = ПоследняяЗаписьПротокола.ОтветТело Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписьПротокола = Неопределено Тогда
		ЗаписьПротокола = ПротоколОбмена.Добавить();
		ЗаписьПротокола.ДатаУниверсальная      = ТекущаяУниверсальнаяДата();
		ЗаписьПротокола.Операция               = ДанныеОбработки.Операция;
		ЗаписьПротокола.ВидПродукции           = ЭлементОчереди.ВидПродукции;
		ЗаписьПротокола.СтатусОбработки        = ДанныеОбработки.СтатусОбработки;
		ЗаписьПротокола.НомерСтраницы          = РеквизитыИсходящегоСообщения.НомерСтраницы;
		ЗаписьПротокола.ДополнительноеОписание = РеквизитыИсходящегоСообщения.ДополнительноеОписание;
		ЗаписьПротокола.ТекущееДействие        = ДанныеОбработки.ТекущееДействие;
		ЗаписьПротокола.СсылкаНаОбъект         = ЭлементОчереди.СсылкаНаОбъект;
		Если ПараметрыОтправкиHTTPЗапросов <> Неопределено Тогда
			ЗаписьПротокола.Запрос = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьПротокола.ЗапросЗаголовки    = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.КодСостояния       = КодСостояния;
	ЗаписьПротокола.ОтветЗаголовки     = ОтветЗаголовки;
	ЗаписьПротокола.ОтветТело          = ОтветТело;
	ЗаписьПротокола.ЭтоВременнаяОшибка = ЭтоВременнаяОшибка;
	Если HTTPЗапрос <> Неопределено Тогда
		ЗаписьПротокола.ЗапросТело = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПротоколаОбмена(ЭлементОчереди, ПараметрыОбмена)
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ПротоколОбменаХранитсяВТекущемЭлементеОчереди(ЭлементОчереди, ЭлементОчередиОснование) Тогда
		Возврат Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена);
	Иначе
		Возврат Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена);
	КонецЕсли;
	
КонецФункции

Функция КоличестовСообщенийВОчередиДляОтображения(ПараметрыОбмена)
	
	АбстрактныеОперации = Перечисления.ВидыОперацийЗЕРНО.АбстрактныеОперации();
	
	Количество = 0;
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
		Если АбстрактныеОперации.Найти(ЭлементОчереди.Операция) = Неопределено Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Функция ЗаголовкиИзHTTPОтвета(HTTPОтвет) Экспорт
	
	ОтветЗаголовки = Новый Массив;
	
	ИгноруемыеЗаголовки = Новый Соответствие;
	ИгноруемыеЗаголовки.Вставить(ВРег("Set-Cookie"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Expires"),                Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Via"),                    Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Connection"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Proxy-Connection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Server"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Vary"),                   Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Frame-Options"),        Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Transfer-Encoding"),      Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Pragma"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Content-Type-Options"), Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-XSS-Protection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Cache-Control"),          Истина);
	
	Для Каждого КлючИЗначение Из HTTPОтвет.Заголовки Цикл
		Заголовок = КлючИЗначение.Ключ;
		Если ИгноруемыеЗаголовки[ВРег(Заголовок)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтветЗаголовки.Добавить(
			СтрШаблон("%1: %2", Заголовок, КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(ОтветЗаголовки, Символы.ПС);
	
КонецФункции

Функция НовыеПараметрыОтправкиЗапроса() Экспорт
	
	ПараметрыСозданияДокумента = Новый Структура();
	
	ПараметрыСозданияДокумента.Вставить("URLЗапроса", "ws/api/fgiz");
	ПараметрыСозданияДокумента.Вставить("ТелоЗапроса");
	ПараметрыСозданияДокумента.Вставить("Организация");
	ПараметрыСозданияДокумента.Вставить("ЗаголовкиHTTP");
	ПараметрыСозданияДокумента.Вставить("ПараметрыЗапроса");
	
	Возврат ПараметрыСозданияДокумента;
	
КонецФункции

Функция ПараметрыОбновленияОчереди() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекущееДействие");
	ВозвращаемоеЗначение.Вставить("ДанныеПротокола");
	ВозвращаемоеЗначение.Вставить("РеквизитыИсходящегоСообщения");
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписать");
	ВозвращаемоеЗначение.Вставить("Организация");
	ВозвращаемоеЗначение.Вставить("Сертификат");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыеРезультатыПередачиСообщения()
	
	РезультатыПередачиСообщения = Новый Структура;
	
	РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса");
	РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета");
	
	РезультатыПередачиСообщения.Вставить("Сообщение");
	РезультатыПередачиСообщения.Вставить("ТекстСообщения");
	
	РезультатыПередачиСообщения.Вставить("ПротоколОбмена");
	
	РезультатыПередачиСообщения.Вставить("ИзмененныеОбъекты", Новый Массив);
	
	Возврат РезультатыПередачиСообщения;
	
КонецФункции

Процедура ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, НаборЗаписейОснование, ПараметрыОбновленияОчереди, РеквизитыИсходящегоСообщенияОснования = Неопределено)
	
	Если НаборЗаписейОснование = Неопределено Тогда
		
		ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди);
		
	Иначе
		
		ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиОчереди, ПараметрыОбновленияОчереди,, "ДанныеПротокола");
		
		ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыЗаписиОчереди);
		
		ПараметрыЗаписиОчереди = ПараметрыОбновленияОчереди();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиОчереди, ПараметрыОбновленияОчереди, "ДанныеПротокола");
		Если РеквизитыИсходящегоСообщенияОснования <> Неопределено Тогда
			ПараметрыЗаписиОчереди.РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщенияОснования;
		КонецЕсли;
		ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыЗаписиОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыОчередиСообщений(НаборЗаписей, ПараметрыОбновленияОчереди) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ИзменитьДатуМодификации = Ложь;
		
		Если ПараметрыОбновленияОчереди.ТекущееДействие <> Неопределено
			И ЗаписьНабора.ТекущееДействие <> ПараметрыОбновленияОчереди.ТекущееДействие Тогда
			ЗаписьНабора.ТекущееДействие = ПараметрыОбновленияОчереди.ТекущееДействие;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.ДанныеПротокола <> Неопределено Тогда
			ЗаписьНабора.ПротоколОбмена = ПараметрыОбновленияОчереди.ДанныеПротокола;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения <> Неопределено Тогда
			ЗаписьНабора.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения);
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.Организация <> Неопределено Тогда
			ЗаписьНабора.Организация = ПараметрыОбновленияОчереди.Организация;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.Сертификат <> Неопределено Тогда
			ЗаписьНабора.Сертификат = ПараметрыОбновленияОчереди.Сертификат;
		КонецЕсли;
		
		Если ПараметрыОбновленияОчереди.ТребуетсяПодписать <> Неопределено Тогда
			ЗаписьНабора.ТребуетсяПодписать = ПараметрыОбновленияОчереди.ТребуетсяПодписать;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ИзменитьДатуМодификации
			Или Не ЗначениеЗаполнено(ЗаписьНабора.ДатаМодификацииУниверсальная) Тогда
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена) Экспорт
	
	Если СообщенияXML.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
	
	СформироватьКонвертыСообщенийXML(СообщенияXML, ДополнительныеПараметры);
	
	РезультатОбработки = СообщенияКПередаче(СообщенияXML, ПараметрыОбмена);

	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		РезультатОбработки.ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	// Добавить сообщения без подписания в очередь сообщений
	ПодготовитьСообщенияБезПодписания(
		РезультатОбработки.СообщенияБезПодписанияПоОрганизациям,
		ПараметрыОбмена);
		
КонецПроцедуры

// Подготавливает сообщения к передаче в ЗЕРНО.
//
// Параметры:
//  ПодписанныеСообщенияПоОрганизациям - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Организация
//   * Значение - см. СтруктураСообщенияXML
//  ПараметрыОбмена - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
Процедура ПодготовитьПодписанныеСообщенияКПередаче(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена) Экспорт
	
	Если ПодписанныеСообщенияПоОрганизациям <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПодписанныеСообщенияПоОрганизациям Цикл
			СообщенияXML = КлючИЗначение.Значение;
			ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена);
		КонецЦикла;
		ПодписанныеСообщенияПоОрганизациям = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает сообщения для подписания и последующей передачи в ЗЕРНО.
//
// Параметры:
//  СообщенияБезПодписания - Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.Организация
//   * Значение - см. СтруктураСообщенияXML
//  ПараметрыОбмена - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
Процедура ПодготовитьСообщенияБезПодписания(СообщенияБезПодписания, ПараметрыОбмена) Экспорт
	
	Если СообщенияБезПодписания <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СообщенияБезПодписания Цикл
			СообщенияXML = КлючИЗначение.Значение;
			ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена, Истина);
		КонецЦикла;
		СообщенияБезПодписания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает сообщения к передаче в ЗЕРНО.
//
// Параметры:
//  СообщенияXML    - Массив из см.СтруктураСообщенияXML
//  ПараметрыОбмена - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
//  ТребуетсяПодписать - Булево - Соообщение требуется подписать
Процедура ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена, ТребуетсяПодписать = Ложь)
	
	Если ТипЗнч(СообщенияXML) = Тип("Структура") Тогда
		КоллекцияСообщенийXML = Новый Массив;
		КоллекцияСообщенийXML.Добавить(СообщенияXML);
	Иначе
		КоллекцияСообщенийXML = СообщенияXML;
	КонецЕсли;
	
	Для Каждого Сообщение Из КоллекцияСообщенийXML Цикл
		
		ЭтоПовторноеПодписание = Ложь;
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			РеквизитыОчереди = Новый Структура;
			РеквизитыОчереди.Вставить("Операция",     Сообщение.Операция);
			РеквизитыОчереди.Вставить("ВидПродукции", Сообщение.ВидПродукции);
			РеквизитыОчереди.Вставить("Организация",  Сообщение.Организация);
			
			// Источник
			РеквизитыОчереди.Вставить("СсылкаНаОбъект",                Сообщение.СсылкаНаОбъект);
			РеквизитыОчереди.Вставить("СообщениеОснование",            Сообщение.СообщениеОснование);
			РеквизитыОчереди.Вставить("ИдентификаторСтроки",           Сообщение.ИдентификаторСтроки);
			РеквизитыОчереди.Вставить("НастройкаРегламентногоЗадания", ПараметрыОбмена.НастройкаРегламентногоЗадания);
			
			// Описание, протокол и очередь
			РеквизитыОчереди.Вставить("РеквизитыИсходящегоСообщения", Сообщение);
			РеквизитыОчереди.Вставить("ПротоколОбмена",               Неопределено);
			РеквизитыОчереди.Вставить("ЗагружатьДо",                  Сообщение.ЗагружатьДо);
			РеквизитыОчереди.Вставить("ЗагружатьПосле",               Сообщение.ЗагружатьПосле);
			РеквизитыОчереди.Вставить("ПередаватьПосле",              Сообщение.ПередаватьПосле);
			РеквизитыОчереди.Вставить("ИдентификаторЦепочки",         Сообщение.ИдентификаторЦепочки);
			РеквизитыОчереди.Вставить("ТребуетсяПодписать",           (ТребуетсяПодписать И Сообщение.ТребуетсяПодписание));
			РеквизитыОчереди.Вставить("Сертификат",                   Сообщение.Сертификат);
			РеквизитыОчереди.Вставить("Подразделение",                Сообщение.Подразделение);
			
			Попытка
				
				Результат = ПодготовитьСообщениеКПередаче(
					Сообщение,
					РеквизитыОчереди);
				
				ТекстОшибки            = Результат.ТекстОшибки;
				ПодготовленоКПередаче  = Не ЗначениеЗаполнено(ТекстОшибки);
				ИсходящееСообщение     = Результат.ИсходящееСообщение;
				
				Если Результат.ЭтоПовторноеПодписание Тогда
					ЭтоПовторноеПодписание = Истина;
					СтрокаОчереди = ПараметрыОбмена.ОчередьСообщений.Найти(Сообщение.Идентификатор, "Сообщение");
					Если СтрокаОчереди <> Неопределено Тогда
						СтрокаОчереди.РеквизитыИсходящегоСообщения = Сообщение;
						СтрокаОчереди.ТребуетсяПодписать           = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки            = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче  = Ложь;
				ИсходящееСообщение     = Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			ПредставлениеОперации = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ОписаниеОперацииПередачиДанных(
				Сообщение.Операция,
				Сообщение.ДополнительноеОписание,
				Сообщение.Версия);
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ФГИС ""Зерно"":
				           |%2'"),
				ПредставлениеОперации,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			ИсходящееСообщение    = Неопределено;
			
		КонецЕсли;
		
		Если ЭтоПовторноеПодписание
			Или ИнтеграцияЗЕРНОПовтИсп.ИспользоватьАвтоматическийОбменДанными(Сообщение.Организация, Сообщение.Подразделение)
				И ПараметрыОбмена.ВидНастройкиОбмена <> Перечисления.ВидыНастроекОбменаЗЕРНО.ОбменДанными Тогда
			
			Если Не ПодготовленоКПередаче Тогда
				СтрокаРезультата = СтруктураИзменения();
				СтрокаРезультата.ВидПродукции = Сообщение.ВидПродукции;
				СтрокаРезультата.ТекстОшибки  = ТекстОшибки;
				СтрокаРезультата.Сообщение    = Сообщение.Идентификатор;
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПодготовленоКПередаче Тогда
			
			ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
			
			ЭлементОчереди.ДатаСоздания        = ТекущаяУниверсальнаяДата();
			ЭлементОчереди.Сообщение           = ИсходящееСообщение;
			ЭлементОчереди.СообщениеОснование  = Сообщение.СообщениеОснование;
			ЭлементОчереди.Организация         = Сообщение.Организация;
			ЭлементОчереди.СсылкаНаОбъект      = Сообщение.СсылкаНаОбъект;
			ЭлементОчереди.Операция            = Сообщение.Операция;
			ЭлементОчереди.ВидПродукции        = Сообщение.ВидПродукции;
			ЭлементОчереди.ТребуетсяПодписать  = ТребуетсяПодписать;
			ЭлементОчереди.ИдентификаторСтроки = Сообщение.ИдентификаторСтроки;
			ЭлементОчереди.Сертификат          = Сообщение.Сертификат;
			ЭлементОчереди.Подразделение       = Сообщение.Подразделение;
			ЭлементОчереди.ИдентификаторЦепочки         = Сообщение.ИдентификаторЦепочки;
			
			Если Перечисления.ВидыОперацийЗЕРНО.ЭтоАбстрактнаяОперация(Сообщение.Операция)
				Или Перечисления.ВидыОперацийЗЕРНО.ЭтоОперацияДополнительногоЗапроса(Сообщение.Операция) Тогда
				ЭлементОчереди.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата;
			Иначе
				ЭлементОчереди.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.Отправка;
			КонецЕсли;
			ЭлементОчереди.РеквизитыИсходящегоСообщения = Сообщение;
			ЭлементОчереди.ПротоколОбмена               = Неопределено;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьДо) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1 = Сообщение.ЗагружатьДо;
				НоваяЗависимость.Сообщение2 = ИсходящееСообщение;
				НоваяЗависимость.Загрузка   = Истина;
				НоваяЗависимость.Передача   = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1 = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2 = Сообщение.ЗагружатьПосле;
				НоваяЗависимость.Загрузка   = Истина;
				НоваяЗависимость.Передача   = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ПередаватьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1 = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2 = Сообщение.ПередаватьПосле;
				НоваяЗависимость.Загрузка   = Ложь;
				НоваяЗависимость.Передача   = Истина;
			КонецЕсли;
			
		Иначе
			
			СтрокаРезультата = СтруктураИзменения();
			
			СтрокаРезультата.ВидПродукции = Сообщение.ВидПродукции;
			СтрокаРезультата.ТекстОшибки  = ТекстОшибки;
			
			СтрокаРезультата.Сообщение      = Сообщение.Идентификатор;
			СтрокаРезультата.ТекстСообщения = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает сообщение к передаче в сервис ЗЕРНО.
//
// Параметры:
//  Сообщение - Строка - Текст исходящего сообщения.
//  РеквизитыОчереди - Неопределено, Структура - Параметры очереди сообщений ЗЕРНО
//
// Возвращаемое значение:
//  Структура - результат подготовки сообщения к отправке с полями:
//    * НовыйСтатус - Неопределено, ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - новый статус,
//    * ИсходящееСообщение - Строка - идентификатор сообщения,
//    * ТекстОшибки - Строка - текст ошибки,
//    * ТребуетсяРасчетОчереди - Булево - необходимость пересчета очереди сообщений.
//    * ЭтоПовторноеПодписание - Булево - это обновление сообщения в очереди после переподписания.
//
Функция ПодготовитьСообщениеКПередаче(Сообщение, РеквизитыОчереди)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение",     Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",            "");
	ВозвращаемоеЗначение.Вставить("ЭтоПовторноеПодписание", ЗначениеЗаполнено(Сообщение.ПодписываемоеТекущееДействие));
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ИсходящееСообщение = Сообщение.Идентификатор;
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		
		Если РеквизитыОчереди <> Неопределено Тогда
			
			Если ВозвращаемоеЗначение.ЭтоПовторноеПодписание Тогда
				
				Блокировка = Новый БлокировкаДанных;

				ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
				ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийЗЕРНО.Измерения.Сообщение.Тип);
				ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ИсходящееСообщение;
		
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийЗЕРНО");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
				ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
				Блокировка.Заблокировать();
		
				НаборЗаписей = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сообщение.Установить(ИсходящееСообщение);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() Тогда
					
					ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
					ПараметрыОбновленияОчереди.РеквизитыИсходящегоСообщения = Сообщение;
					ПараметрыОбновленияОчереди.ТребуетсяПодписать           = Ложь;
					
					ОбновитьПараметрыОчередиСообщенийПоНаборамЗаписей(НаборЗаписей, Неопределено, ПараметрыОбновленияОчереди);
					
				Иначе
					// Сообщение уже обработано или удалено из очереди, возможно другим потоком
				КонецЕсли;
			Иначе
				ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, РеквизитыОчереди);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ВозвращаемоеЗначение.ЭтоПовторноеПодписание
			И ОбъектСинхронизацииПоддерживаетСтатусыОбработки(Сообщение.СсылкаНаОбъект) Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Сообщение.СсылкаНаОбъект);
			ПараметрыОбновленияСтатуса = НовыеПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ИдентификаторСтроки = Сообщение.ИдентификаторСтроки;
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(
				Сообщение.СсылкаНаОбъект, Сообщение.Операция, ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.НовыйСтатус = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по объекту %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Сообщение.СсылкаНаОбъект,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить сообщение в регистра сведений ОчередьСообщенийЗЕРНО.
//
// Параметры:
//  Сообщение - СправочникСсылка.ЗЕРНОПрисоединенныеФайлы - сообщение, которое добавляется в очередь.
//  Реквизиты - Структура                          - реквизиты очереди сообщений ЗЕРНО.
//
Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьСообщенийЗЕРНО.СоздатьМенеджерЗаписи();
	НоваяЗапись.ДатаСоздания       = ТекущаяУниверсальнаяДата();
	НоваяЗапись.Сообщение          = Сообщение;
	НоваяЗапись.СообщениеОснование = Реквизиты.СообщениеОснование;
	НоваяЗапись.Операция           = Реквизиты.Операция;
	НоваяЗапись.ВидПродукции       = Реквизиты.ВидПродукции;
	
	НоваяЗапись.ИдентификаторСтроки           = Реквизиты.ИдентификаторСтроки;
	НоваяЗапись.НастройкаРегламентногоЗадания = Реквизиты.НастройкаРегламентногоЗадания;
	
	// Источник
	НоваяЗапись.Организация       = Реквизиты.Организация;
	НоваяЗапись.СсылкаНаОбъект    = Реквизиты.СсылкаНаОбъект;
	
	// Описание, протокол и очередь
	НоваяЗапись.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(Реквизиты.РеквизитыИсходящегоСообщения);
	НоваяЗапись.ПротоколОбмена               = Новый ХранилищеЗначения(Неопределено);
	НоваяЗапись.ЗагружатьДо                  = Реквизиты.ЗагружатьДо;
	НоваяЗапись.ЗагружатьПосле               = Реквизиты.ЗагружатьПосле;
	НоваяЗапись.ПередаватьПосле              = Реквизиты.ПередаватьПосле;
	НоваяЗапись.ИдентификаторЦепочки         = Реквизиты.ИдентификаторЦепочки;
	НоваяЗапись.ТребуетсяПодписать           = Реквизиты.ТребуетсяПодписать;
	НоваяЗапись.Сертификат                   = Реквизиты.Сертификат;
	НоваяЗапись.Подразделение                = Реквизиты.Подразделение;
	
	Если Перечисления.ВидыОперацийЗЕРНО.ЭтоАбстрактнаяОперация(Реквизиты.Операция)
		Или Перечисления.ВидыОперацийЗЕРНО.ЭтоОперацияДополнительногоЗапроса(Реквизиты.Операция) Тогда
		НоваяЗапись.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата;
	Иначе
		НоваяЗапись.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.Отправка;
	КонецЕсли;
	
	НоваяЗапись.Записать();
	
КонецПроцедуры

Функция РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, ДанныеОбработки)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Документ",               ЭлементОчереди.СсылкаНаОбъект);
	Реквизиты.Вставить("Операция",               ЭлементОчереди.Операция);
	Реквизиты.Вставить("Организация",            ЭлементОчереди.Организация);
	Реквизиты.Вставить("ТекущееДействие",        ЭлементОчереди.ТекущееДействие);
	Реквизиты.Вставить("СообщениеОснование",     ЭлементОчереди.СообщениеОснование);
	Реквизиты.Вставить("Версия",                 ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
	Реквизиты.Вставить("ТипСообщения",           ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
	Реквизиты.Вставить("ДополнительноеОписание", ЭлементОчереди.РеквизитыИсходящегоСообщения.ДополнительноеОписание);
	Реквизиты.Вставить("СтатусОбработки",        ДанныеОбработки.СтатусОбработки);
	Реквизиты.Вставить("Описание",               ДанныеОбработки.ТекстОшибки);
	Реквизиты.Вставить("ИдентификаторСтроки",    ЭлементОчереди.ИдентификаторСтроки);
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПроверитьИнтервалыВыполненияЗапроса(ЭлементОчереди, ПараметрыОбмена, ДатаСледующейИтерации)
	
	Сертификат = ЭлементОчереди.Сертификат;
	
	Если Перечисления.ВидыОперацийЗЕРНО.ЭтоОперацияДополнительногоЗапроса(ЭлементОчереди.Операция)
		Или Перечисления.ВидыОперацийЗЕРНО.ЭтоАбстрактнаяОперация(ЭлементОчереди.Операция)
		Или Не ЗначениеЗаполнено(Сертификат) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОптимизации = ПараметрыОбмена.ПараметрыОптимизации;
	
	ДатаПроверки               = ТекущаяДатаСеанса() - 60;
	КоличествоЗапросовЗаМинуту = 0;
	КлючиКУдалению             = Новый Массив();
	МинимальнаяДата            = Неопределено;
	
	ДанныеПоСертификату = ПараметрыОбмена.КоличествоЗапросовПоСекундам[Сертификат];
	Если ДанныеПоСертификату = Неопределено Тогда
		ДанныеПоСертификату = Новый Соответствие();
		ПараметрыОбмена.КоличествоЗапросовПоСекундам[Сертификат] = ДанныеПоСертификату;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ДанныеПоСертификату Цикл
		Если КлючИЗначение.Ключ < ДатаПроверки Тогда
			КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
		Иначе
			КоличествоЗапросовЗаМинуту = КоличествоЗапросовЗаМинуту + КлючИЗначение.Значение;
			Если МинимальнаяДата = Неопределено Тогда
				МинимальнаяДата = КлючИЗначение.Ключ;
			Иначе
				МинимальнаяДата = Мин(МинимальнаяДата, КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ключ Из КлючиКУдалению Цикл
		ДанныеПоСертификату.Удалить(Ключ);
	КонецЦикла;

	Если КоличествоЗапросовЗаМинуту >= ПараметрыОптимизации.КоличествоЗапросовВМинуту Тогда
		ДатаСледующейИтерации = МинимальнаяДата + 61;
		ПараметрыОбмена.КоличествоБлокировок = ПараметрыОбмена.КоличествоБлокировок + 1;
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОчереди.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата Тогда
		
		Если ПараметрыОбмена.ДатыПоследнегоЗапросаРезультата[ЭлементОчереди.Организация] = Неопределено Тогда
			ДатаПоследнегоЗапросаРезультата = Дата(1, 1, 1);
		Иначе
			ДатаПоследнегоЗапросаРезультата = ПараметрыОбмена.ДатыПоследнегоЗапросаРезультата[ЭлементОчереди.Организация];
		КонецЕсли;
		
		ВыполнитьЗапросПосле = ДатаПоследнегоЗапросаРезультата + ПараметрыОптимизации.ИнтервалМеждуПолучениемРезультатов;
		Если ТекущаяДатаСеанса() <= ВыполнитьЗапросПосле Тогда
			ДатаСледующейИтерации = ВыполнитьЗапросПосле; // Отложить следующий запрос результата
			ПараметрыОбмена.КоличествоБлокировок = ПараметрыОбмена.КоличествоБлокировок + 1;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗафиксироватьДатуВыполненияЗапросаПроверкиИнтервала(ПараметрыОбмена, Сертификат)
	
	ДатаВыполненияЗапроса = ТекущаяДатаСеанса();
	ДанныеПоОрганизации = ПараметрыОбмена.КоличествоЗапросовПоСекундам[Сертификат];
	Если ДанныеПоОрганизации = Неопределено Тогда
		ДанныеПоОрганизации = Новый Соответствие();
		ПараметрыОбмена.КоличествоЗапросовПоСекундам[Сертификат] = ДанныеПоОрганизации;
	КонецЕсли;
	
	ТекущееКоличество = ДанныеПоОрганизации[ДатаВыполненияЗапроса];
	Если ТекущееКоличество = Неопределено Тогда
		ТекущееКоличество = 0;
	КонецЕсли;
	
	ДанныеПоОрганизации[ДатаВыполненияЗапроса] = ТекущееКоличество + 1;
	
КонецПроцедуры

Функция НовыеПараметрыОбработкиРезультата() Экспорт
	
	ПараметрыСозданияДокумента = Новый Структура();
	
	ПараметрыСозданияДокумента.Вставить("Организация");
	ПараметрыСозданияДокумента.Вставить("Операция");
	ПараметрыСозданияДокумента.Вставить("ТекущееДействие");
	
	Возврат ПараметрыСозданияДокумента;
	
КонецФункции

Функция НовыеПараметрыОбновленияСтатуса()
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторСтроки", "");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки",     Неопределено);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции",   Неопределено);
	ПараметрыОбновленияСтатуса.Вставить("ПараметрыЗапроса",    Неопределено);
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

Процедура УстановитьСообщениеОснование(СообщениеXML, СообщениеОснованиеXML) Экспорт
	
	Если ЗначениеЗаполнено(СообщениеОснованиеXML.СообщениеОснование) Тогда
		СообщениеXML.СообщениеОснование = СообщениеОснованиеXML.СообщениеОснование;
	Иначе
		СообщениеXML.СообщениеОснование = СообщениеОснованиеXML.Идентификатор;
		СообщениеОснованиеXML.ЯвляетсяОснованиемСообщений = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУстановитьОрганизациюВСообщенииОснование(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)

	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	Если ИмеетсяСообщениеОснования(ЭлементОчереди, ЭлементОчередиОснование)
		И Не ЗначениеЗаполнено(ЭлементОчередиОснование.Организация)
		И НаборЗаписейОснование <> Неопределено Тогда
		
		ЭлементОчередиОснование.Организация = ЭлементОчереди.Организация;
		
		ПараметрыОбновленияОчереди = ПараметрыОбновленияОчереди();
		ПараметрыОбновленияОчереди.Организация = ЭлементОчереди.Организация;
		
		ОбновитьПараметрыОчередиСообщений(НаборЗаписейОснование, ПараметрыОбновленияОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьСообщенияКПодписаниюПоЭлементуОчереди(ЭлементОчереди, ПараметрыОбмена)
	
	ВозвращаемоеЗначение = Ложь;
	Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	ИначеЕсли ПараметрыОбмена.СообщенияКПодписанию[ЭлементОчереди.Организация] = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Для Каждого СообщениеXML Из ПараметрыОбмена.СообщенияКПодписанию[ЭлементОчереди.Организация] Цикл
		
		Если СообщениеXML.СообщениеОснование = ЭлементОчереди.Сообщение Тогда
			ВозвращаемоеЗначение = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УстановитьДатуПоследнегоЗапросаРезультата(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ПараметрыОбмена.ДатыПоследнегоЗапросаРезультата[ЭлементОчереди.Организация] = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура УстановитьДатуВыполненияСинхронизации(ПараметрыОбмена, ПолученныеДанные, ЭлементОчереди) Экспорт
	
	Если Не (ПараметрыОбмена.Свойство("ИмяЗапросаЗЕРНО") И ЗначениеЗаполнено(ПараметрыОбмена.ИмяЗапросаЗЕРНО)) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИзменения = '00010101';
	
	Если ПолученныеДанные.Свойство("Record") Тогда
		
		Для Каждого Строка Из ПолученныеДанные.Record Цикл
			
			Если Не (Строка.Свойство("lastModified") И ЗначениеЗаполнено(Строка.lastModified)) Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаИзменения = Макс(ДатаИзменения, Строка.lastModified - 3*60*60); // Ошибка ФГИС Зерно - дата по Москве приходит с Z
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИмяЗапроса",        ПараметрыОбмена.ИмяЗапросаЗЕРНО);
	ПараметрыЗаписи.Вставить("ДатаСинхронизации", ДатаИзменения);
	ПараметрыЗаписи.Вставить("Организация",       ЭлементОчереди.Организация);
	ПараметрыЗаписи.Вставить("Подразделение",     ЭлементОчереди.Подразделение);
	
	РегистрыСведений.СинхронизацияДанныхЗЕРНО.УстановитьДатуВыполненияСинхронизации(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Формирует пустую структуру изменений данных
// Параметры:
// ЭлементОчереди - Неопределено -
//                - см. СтруктураСообщенияXML
// Возвращаемое значение:
//  Структура - Структура изменения:
// * Операция - Неопределено
// * ИдентификаторСообщения - Неопределено
// * Организация - Неопределено
// * ВидПродукции - Неопределено
// * Объект - Массив Из ЛюбаяСсылка
// * ДокументОснование - Неопределено
// * ТекстОшибки - Строка -
// * ДополнительноеОписание - Строка - 
// * НомерСтраницы - Число -
// * Сообщение - Неопределено
// * ТекстСообщения - Неопределено
// * ПротоколОбмена - Неопределено
Функция СтруктураИзменения(ЭлементОчереди = Неопределено) Экспорт
	
	СтруктураИзменения = Новый Структура;
	
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("ВидПродукции");
	СтруктураИзменения.Вставить("ИдентификаторСообщения");
	СтруктураИзменения.Вставить("ИдентификаторСообщенияОснования");
	СтруктураИзменения.Вставить("ДополнительноеОписание");
	СтруктураИзменения.Вставить("НомерСтраницы", 0);
	
	// Источник
	СтруктураИзменения.Вставить("Организация");
	СтруктураИзменения.Вставить("Подразделение");
	СтруктураИзменения.Вставить("Объект", Новый Массив());
	СтруктураИзменения.Вставить("ДокументОснование");
	СтруктураИзменения.Вставить("ИдентификаторФормы");
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки", "");
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение");
	СтруктураИзменения.Вставить("ТекстСообщения");
	СтруктураИзменения.Вставить("ПротоколОбмена");
	
	Если ЭлементОчереди <> Неопределено Тогда
		
		СтруктураИзменения.Операция                        = ЭлементОчереди.Операция;
		СтруктураИзменения.Организация                     = ЭлементОчереди.Организация;
		СтруктураИзменения.Подразделение                   = ЭлементОчереди.Подразделение;
		СтруктураИзменения.ИдентификаторСообщения          = ЭлементОчереди.Сообщение;
		СтруктураИзменения.ИдентификаторСообщенияОснования = ЭлементОчереди.СообщениеОснование;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементОчереди, "РеквизитыИсходящегоСообщения") Тогда
			РеквизитыИсходящегоСообщения              = ЭлементОчереди.РеквизитыИсходящегоСообщения;
			СтруктураИзменения.ДополнительноеОписание = РеквизитыИсходящегоСообщения.ДополнительноеОписание;
			СтруктураИзменения.ДокументОснование      = РеквизитыИсходящегоСообщения.ДокументОснование;
			СтруктураИзменения.НомерСтраницы          = РеквизитыИсходящегоСообщения.НомерСтраницы;
			СтруктураИзменения.ИдентификаторФормы     = РеквизитыИсходящегоСообщения.ИдентификаторФормы;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураИзменения;
	
КонецФункции

Функция НоваяТаблицаПоискаСсылок() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	
	ТаблицаДанных.Колонки.Добавить("ИмяТаблицы",        ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДанных.Колонки.Добавить("Идентификатор",     ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаДанных.Колонки.Добавить("ВидКлассификатора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО"));
	ТаблицаДанных.Колонки.Добавить("Ссылка",            Справочники.ТипВсеСсылки());
	ТаблицаДанных.Колонки.Добавить("ВыполненаЗагрузка", Новый ОписаниеТипов("Булево"));
	
	ТаблицаДанных.Индексы.Добавить("ИмяТаблицы");
	ТаблицаДанных.Индексы.Добавить("Ссылка");
	ТаблицаДанных.Индексы.Добавить("ИмяТаблицы, Идентификатор");
	ТаблицаДанных.Индексы.Добавить("ИмяТаблицы, Идентификатор, ВидКлассификатора");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция МассивИзСоответствияПоКлючу(ВходящееСоответствие, Ключ) Экспорт
	
	Если ВходящееСоответствие = Неопределено Тогда
		ВходящееСоответствие = Новый Соответствие;
	КонецЕсли;
	
	Коллекция = ВходящееСоответствие[Ключ];
	Если Коллекция = Неопределено Тогда
		Коллекция = Новый Массив();
		ВходящееСоответствие.Вставить(Ключ, Коллекция);
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

//Выполняет запись ошибки в журнал регистрации, добавляя имя события ЗЕРНО.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru = 'ЗЕРНО'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

Процедура ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС) Экспорт
	
	ЛогированиеЗапросовЗЕРНО.УстановитьПараметрыЛогированияЗапросов(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовЗЕРНО);
	ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовЗЕРНО);
	ЛогированиеЗапросовЗЕРНО.УстановитьПараметрыЛогированияЗапросов(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовЗЕРНО);
	
КонецПроцедуры

Функция ОбъектСинхронизацииПоддерживаетСтатусыОбработки(СсылкаНаОбъект)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект)
		И Метаданные.ОпределяемыеТипы.ДокументыЗЕРНО.Тип.СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, Приемник) Экспорт
	
	Если ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере() Тогда
		ПараметрыЛогирования = ЛогированиеЗапросовЗЕРНО.ПараметрыЛогированияЗапросов();
		Если ПараметрыЛогирования.Включено Тогда
			ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.СодержаниеЛогаЗапросов(ПараметрыЛогирования);
			Если ДанныеЛогаЗапросов <> Неопределено Тогда
				ПараметрыОбмена.АдресДанныхЛогаЗапроса = ПоместитьВоВременноеХранилище(ДанныеЛогаЗапросов, ПараметрыОбмена.АдресДанныхЛогаЗапроса);
				Приемник.АдресДанныхЛогаЗапроса = ПараметрыОбмена.АдресДанныхЛогаЗапроса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСерверныеОповещнияПоИзменениямОбмена(ПараметрыОбмена)
	
	Если ПараметрыОбмена.Изменения.Количество() = 0
		Или ПараметрыОбмена.НастройкаРегламентногоЗадания <> Перечисления.ВидыНастроекОбменаЗЕРНО.ОбменДанными Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ДанныеОповещенияВыполненОбменДанныим();
	Данные.Изменения = Новый Массив();
	
	Для Каждого ИсходныйЭлемент Из ПараметрыОбмена.Изменения Цикл
		ЭлементИзменения = СтруктураИзменения();
		ЗаполнитьЗначенияСвойств(ЭлементИзменения, ИсходныйЭлемент,, "ТекстСообщения");
		Данные.Изменения.Добавить(ЭлементИзменения);
	КонецЦикла;
	СерверныеОповещения.ОтправитьСерверноеОповещение(
		ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ИмяСерверногоОповещенияВыполненОбменДанныим(),
		Данные,
		Неопределено,
		Истина);
	
КонецПроцедуры

Функция ЗначениеСоответствияПоКлючу(ИсточникДанных, Ключ) Экспорт
	
	Если ИсточникДанных = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ИсточникДанных[Ключ];
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьПараметрыОптимизации(ПараметрыОптимизации, ВТранзакции = Истина) Экспорт
	
	Если ВТранзакции Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Константы.НастройкиОбменаЗЕРНО.Установить(Новый ХранилищеЗначения(ПараметрыОптимизации));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ИнфрмацияОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Выполнение операции'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнфрмацияОшибки));
			
			ВызватьИсключение;
			
		КонецПопытки;
	
	Иначе
		
		Константы.НастройкиОбменаЗЕРНО.Установить(Новый ХранилищеЗначения(ПараметрыОптимизации));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПотребительскиеСвойстваСправочникаПриЗагрузке(СправочникОбъект, ИсточникДанных, Организация, Подразделение, ПараметрыОбмена, НазначениеПартии = Неопределено, Операция = Неопределено) Экспорт
	
	ОписаниеТипаЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(11, 4);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ПотребительскиеСвойства = МассивДанныхПоляXDTO(ИсточникДанных.Value);
	
	СправочникОбъект.ПотребительскиеСвойства.Очистить();
	Для Каждого ПотребительскоеСвойство Из ПотребительскиеСвойства Цикл
		НоваяСтрока = СправочникОбъект.ПотребительскиеСвойства.Добавить();
		НоваяСтрока.ПотребительскоеСвойство = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
			Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство,
			ПотребительскоеСвойство.qualityIndicatorCode,
			Организация,
			Подразделение,
			ПараметрыОбмена);
		НоваяСтрока.Значение = ПотребительскоеСвойство.__content;
	КонецЦикла;
	
	Если СправочникОбъект.ПотребительскиеСвойства.Количество() Тогда
		ДопустимыеЗначенияСвойств = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
			СправочникОбъект.ОКПД2,
			НазначениеПартии,
			Операция);
		Для Каждого СтрокаТаблицы Из СправочникОбъект.ПотребительскиеСвойства Цикл
			СтрокаСвойства = ДопустимыеЗначенияСвойств.Найти(СтрокаТаблицы.ПотребительскоеСвойство, "ПотребительскоеСвойство");
			Если СтрокаСвойства = Неопределено
				Или Не ЗначениеЗаполнено(СтрокаСвойства.ТипЗначения)
				Или СтрокаСвойства.ТипЗначения = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Строка
				Или СтрокаСвойства.ТипЗначения = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Перечисление Тогда
				Продолжить;
			ИначеЕсли СтрокаСвойства.ТипЗначения = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число Тогда
				СтрокаТаблицы.Значение = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаТаблицы.Значение);
			ИначеЕсли СтрокаСвойства.ТипЗначения = Перечисления.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Булево Тогда
				СтрокаТаблицы.Значение = ОписаниеТипаБулево.ПривестиЗначение(СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДатыНачалаЗагрузки(Параметры, ИмяЗапросаЗЕРНО)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ИмяЗапроса",    Новый ОписаниеТипов("ПеречислениеСсылка.ИмяЗапросаЗЕРНО"));
	ТаблицаЗначений.Колонки.Добавить("Организация",   Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаЗначений.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.Подразделение.Тип);
	
	Если Параметры.Свойство("Организация") Тогда
		СтрокаТЧ = ТаблицаЗначений.Добавить();
		СтрокаТЧ.ИмяЗапроса    = ИмяЗапросаЗЕРНО;
		СтрокаТЧ.Организация   = Параметры.Организация;
		СтрокаТЧ.Подразделение = Параметры.Подразделение;
	КонецЕсли;
	
	ПустоеПодразделение = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Подразделение");
	
	Если Параметры.Свойство("Организации") Тогда
		Для Каждого Организация Из Параметры.Организации Цикл
			СтрокаТЧ = ТаблицаЗначений.Добавить();
			СтрокаТЧ.ИмяЗапроса    = ИмяЗапросаЗЕРНО;
			СтрокаТЧ.Организация   = Организация;
			СтрокаТЧ.Подразделение = ПустоеПодразделение;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ИмяЗапроса,
	|	Т.Организация,
	|	Т.Подразделение
	|ПОМЕСТИТЬ ВтЗапросыЗЕРНО
	|ИЗ
	|	&Таблица КАК Т
	|;
	|///////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЗапросыЗЕРНО.ИмяЗапроса КАК ИмяЗапроса,
	|	ВтЗапросыЗЕРНО.Организация КАК Организация,
	|	ВтЗапросыЗЕРНО.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ТаблицаСинхронизации.ДатаСинхронизации, 
	|	Неопределено) КАК ДатаСинхронизации
	|ИЗ
	|	ВтЗапросыЗЕРНО КАК ВтЗапросыЗЕРНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияДанныхЗЕРНО КАК ТаблицаСинхронизации
	|		ПО ТаблицаСинхронизации.ИмяЗапроса = ВтЗапросыЗЕРНО.ИмяЗапроса
	|		И ТаблицаСинхронизации.Организация = ВтЗапросыЗЕРНО.Организация
	|		И (ТаблицаСинхронизации.Подразделение = ВтЗапросыЗЕРНО.Подразделение 
	|			ИЛИ ВтЗапросыЗЕРНО.Подразделение = &ПустоеПодразделение)
	|");
	
	Запрос.УстановитьПараметр("Таблица",             ТаблицаЗначений);
	Запрос.УстановитьПараметр("ПустоеПодразделение", ПустоеПодразделение);
	
	ДатыНачалаЗагрузки = Запрос.Выполнить().Выгрузить();
	
	Возврат ДатыНачалаЗагрузки;
	
КонецФункции

Функция ИмяЗапросаЗЕРНОИзНастроекОбмена(Параметры)
	
	ИмяЗапросаЗЕРНО = Неопределено;
	
	Если Параметры.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросМестФормированияПартий Тогда
		ИмяЗапросаЗЕРНО = Перечисления.ИмяЗапросаЗЕРНО.МестаФормированияПартий;
	ИначеЕсли Параметры.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросРезультатовИсследований Тогда
		ИмяЗапросаЗЕРНО = Перечисления.ИмяЗапросаЗЕРНО.РезультатыИсследований;
	ИначеЕсли Параметры.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросАктовОтбораПроб Тогда
		ИмяЗапросаЗЕРНО = Перечисления.ИмяЗапросаЗЕРНО.АктыОтбораПроб;
	ИначеЕсли Параметры.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий Тогда
		Если Параметры.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
			ИмяЗапросаЗЕРНО = Перечисления.ИмяЗапросаЗЕРНО.ПартииППЗ;
		ИначеЕсли Параметры.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно И Параметры.ЭтоЭлеватор Тогда
			ИмяЗапросаЗЕРНО = Перечисления.ИмяЗапросаЗЕРНО.ПартииЗерноЭлеватор;
		Иначе
			ИмяЗапросаЗЕРНО = Перечисления.ИмяЗапросаЗЕРНО.ПартииЗерно;
		КонецЕсли;
	ИначеЕсли Параметры.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗ Тогда
		
		ТаблицаПоискаИмяЗапроса = ТаблицаПоискаИмяЗапросаСДИЗ();
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидПродукции",                   Параметры.ВидПродукции);
		СтруктураПоиска.Вставить("ЭтоЭлеватор",                    Параметры.ЭтоЭлеватор);
		СтруктураПоиска.Вставить("ЗапрашиватьПогашенияСДИЗ",       Параметры.ПараметрыЗапроса.ЗапрашиватьПогашенияСДИЗ);
		СтруктураПоиска.Вставить("ЗапрашиватьОтказыПогашенийСДИЗ", Параметры.ПараметрыЗапроса.ЗапрашиватьОтказыПогашенийСДИЗ);
		
		СтрокиПоНастройке = ТаблицаПоискаИмяЗапроса.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПоНастройке.Количество() > 0 Тогда
			ИмяЗапросаЗЕРНО = СтрокиПоНастройке[0].ИмяЗапросаЗЕРНО;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяЗапросаЗЕРНО;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультата

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты, ПолученныеДанные = Неопределено)
	
	Если ЭлементОчереди.СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкиПоИдентификаторам(ПараметрыОбмена);
	
	ЗаполнитьБлокируемыеОбъекты(ПараметрыОбмена);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияЗЕРНОСлужебный.ОбработкаЗагрузкиПолученныхДанных");
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.СсылкаНаОбъект);
	МенеджерОбъекта.ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты);
	
	ДанныеИмениШага = Новый Массив();
	Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
		ДанныеИмениШага.Добавить(ЭлементОчереди.СсылкаНаОбъект.Метаданные().Имя);
	КонецЕсли;
	ДанныеИмениШага.Добавить(XMLСтрока(ЭлементОчереди.Операция));
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, 1, СтрСоединить(ДанныеИмениШага, "."));
	
КонецПроцедуры

Процедура ОбработкаЗапросаДанныхОбъектаКонфигурации(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	Если ЭлементОчереди.СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.СсылкаНаОбъект);
	
	РезультатОбработки = МенеджерОбъекта.ВыполнитьЗапросВСервис(ЭлементОчереди, ПараметрыОбмена);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("ТекстОшибки",);
	
	РезультатыПередачиСообщения = НовыеРезультатыПередачиСообщения();
	РезультатыПередачиСообщения.РезультатОтправкиЗапроса = РезультатОбработки.РезультатОтправкиЗапроса;
	РезультатыПередачиСообщения.РезультатОбработкиОтвета = РезультатОбработкиОтвета;
	РезультатыПередачиСообщения.Сообщение                = ЭлементОчереди.Сообщение;
	
	Если РезультатОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка Тогда
		РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка обработки сообщения по операции %1:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.Операция,
			РезультатОбработки.ТекстОшибки);
		
	Иначе
		
		МенеджерОбъекта.ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, РезультатОбработки.Объект, РезультатыПередачиСообщения.ИзмененныеОбъекты);
		
	КонецЕсли;
	
	ОбработатьРезультатПолученияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
	
	Реквизиты = РеквизитыЗаписиПрисоединенногоФайла(ЭлементОчереди, РезультатОбработки);
	
	ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
		ЭлементОчереди.ПротоколОбмена);
	ДобавитьЗаписьВПротоколОбмена(
		ПротоколаОбменаXML,
		Реквизиты);
	
	УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
	
КонецПроцедуры

// Обработать результат отправки HTTP-запроса к сервису ФГИС "Зерно".
// 
// Параметры:
//  ПараметрыОбработкиРезультата - см. ПараметрыОбработкиРезультата
//  РезультатЗапроса - см. ОтправитьДанныеВСервис
//  ПараметрыОбмена  - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
//  ВыполнятьПреобразованиеРезультата - Булево - Преобразование по схеме
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
Функция ОбработатьРезультатОтправкиHTTPЗапроса(ПараметрыОбработкиРезультата, РезультатЗапроса, ПараметрыОбмена, ВыполнятьПреобразованиеРезультата = Истина) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", РезультатЗапроса);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",          Ложь);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",             Ложь);
	ВозвращаемоеЗначение.Вставить("КодСостояния",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Объект",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	ВозвращаемоеЗначение.Вставить("ЭтоОбработаннаяОшибка",    Ложь);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",          Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("Операция",                 ПараметрыОбработкиРезультата.Операция);
	ВозвращаемоеЗначение.Вставить("Организация",              ПараметрыОбработкиРезультата.Организация);
	ВозвращаемоеЗначение.Вставить("ТекущееДействие",          ПараметрыОбработкиРезультата.ТекущееДействие);
	
	РезультатОтправкиHTTPЗапроса = РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		Если ТипЗнч(РезультатЗапроса.HTTPОтвет) = Тип("Структура") Тогда
			РезультатОтправкиHTTPЗапроса.ТекстОтвета = РезультатЗапроса.HTTPОтвет.Тело;
		Иначе
			РезультатОтправкиHTTPЗапроса.ТекстОтвета = РезультатЗапроса.HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
	КонецЕсли;
	
	ВозвращаемоеЗначение.КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ИсходныйТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ИсходныйТекстОтвета) Тогда
		
		ВозвращаемоеЗначение.ЗапросОтправлен = Истина;
		ВозвращаемоеЗначение.ОтветПолучен    = Истина;
		
		Если ЗначениеЗаполнено(ВозвращаемоеЗначение.КодСостояния)
			И ВыполнятьПреобразованиеРезультата Тогда
			
			Если ПараметрыОбмена.ПараметрыПреобразования = Неопределено Тогда
				ПараметрыОбмена.ПараметрыПреобразования = ПараметрыПреобразования(ПараметрыОбмена.ПараметрыОптимизации);
			КонецЕсли;
			
			ОбработатьДанныеРезультатаОтвета(ИсходныйТекстОтвета, ПараметрыОбмена, ВозвращаемоеЗначение);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка;
		Если ЗначениеЗаполнено(ВозвращаемоеЗначение.КодСостояния) Тогда
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), ВозвращаемоеЗначение.КодСостояния);
			ВозвращаемоеЗначение.ОтветПолучен    = Истина;
			ВозвращаемоеЗначение.ЗапросОтправлен = Истина;
		Иначе
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработкаТекстаОшибкиПриОтправкеHTTPЗапроса(РезультатОбработки, ПараметрыОбмена, ЭлементОчереди)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОжидание", Ложь);
	
	Если Не ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если СтрНайти(НРег(РезультатОбработки.ТекстОшибки), НРег("Нарушена уникальность поля messageID")) > 0 Тогда
		РезультатОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ТребуетсяНовыйКонвертСообщения;
	ИначеЕсли СтрНайти(НРег(РезультатОбработки.ТекстОшибки), НРег("Отправитель заблокирован, превышен лимит сообщений в минуту")) > 0 Тогда
		ПараметрыОбмена.ДатыБлокировкиОтправителя[ЭлементОчереди.Сертификат] = ТекущаяДатаСеанса();
		РезультатОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка;
		ВозвращаемоеЗначение.ТребуетсяОжидание = Истина;
	ИначеЕсли СтрНайти(НРег(РезультатОбработки.ТекстОшибки), НРег("Непредвиденная ошибка на стороне ФГИС, пожалуйста обратитесь в поддержку")) > 0 Тогда
		РезультатОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена;
	ИначеЕсли РезультатОбработки.ТекущееДействие = Перечисления.ДействиеССообщениемЗЕРНО.ПолучениеРезультата
		И РезультатОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.Ошибка
		И РезультатОбработки.ЭтоОбработаннаяОшибка Тогда
		РезультатОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОтклонена;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли РезультатыПередачиСообщения.РезультатОтправкиЗапроса <> Неопределено
		И ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект)
		И ОбъектСинхронизацииПоддерживаетСтатусыОбработки(ЭлементОчереди.СсылкаНаОбъект) Тогда
		РезультатыПередачиСообщения.ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Передано = Не ЗначениеЗаполнено(ТекстОшибки);
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
	
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	СтрокаРезультата.ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	
	СтрокаРезультата.Сообщение      = РезультатыПередачиСообщения.Сообщение;
	СтрокаРезультата.ТекстСообщения = РезультатыПередачиСообщения.ТекстСообщения;
	СтрокаРезультата.ПротоколОбмена = РезультатыПередачиСообщения.ПротоколОбмена;
	
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.ИзмененныеОбъекты) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтрокаРезультата.Объект,
			РезультатыПередачиСообщения.ИзмененныеОбъекты,
			Истина);
	КонецЕсли;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	Если Не Передано Тогда
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатПолученияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли РезультатыПередачиСообщения.РезультатОтправкиЗапроса <> Неопределено
		И ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
	
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	СтрокаРезультата.ПротоколОбмена    = РезультатыПередачиСообщения.ПротоколОбмена;
	СтрокаРезультата.ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.ИзмененныеОбъекты) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтрокаРезультата.Объект,
			РезультатыПередачиСообщения.ИзмененныеОбъекты,
			Истина);
	КонецЕсли;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
КонецПроцедуры

Процедура ОбработатьРезультатПодтвержденияСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена)
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли РезультатыПередачиСообщения.РезультатОтправкиЗапроса <> Неопределено
		И ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения(ЭлементОчереди);
	
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	СтрокаРезультата.ПротоколОбмена    = РезультатыПередачиСообщения.ПротоколОбмена;
	СтрокаРезультата.ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.ИзмененныеОбъекты) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтрокаРезультата.Объект,
			РезультатыПередачиСообщения.ИзмененныеОбъекты,
			Истина);
	КонецЕсли;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

// Структура результата HTTP запроса
// 
// Возвращаемое значение:
// 	Структура - Результат HTTP-запроса:
// * КодСостояния - Число        - Код состояния HTTP
// * Заголовки    - Соответствие - Заголовки HTTP ответа
// * ТекстОтвета  - Строка       - Текст ответа
// * ТекстОшибки  - Строка       - Текст ошибки
Функция РезультатHTTPЗапроса() Экспорт
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

#КонецОбласти

#Область КонвертацияЗначений

Функция ИмяСвойстваТипаКлассификатораПоВидуКлассификатора(Значение)
	
	Если Значение = Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПартии Тогда
		Возврат "LotsPurposeCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство Тогда
		Возврат "QualityIndicatorCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаСписания Тогда
		Возврат "ReasonWriteOffCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидОтбораПроб Тогда
		Возврат "ProbeCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидТранспортногоСредства Тогда
		Возврат "TransportCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ЕдиницаИзмерения Тогда
		Возврат "UnitOfMeasureCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаРасхожденияВеса Тогда
		Возврат "WeightDiscrepancyCauseCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидДокумента Тогда
		Возврат "DocumentCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПотребительскогоСвойства Тогда
		Возврат "IndicatorPurposeCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ДокументНаПартию Тогда
		Возврат "LotDocumentCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаВозвратаПартии Тогда
		Возврат "LotReturnReasonCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ДокументПраваСобственности Тогда
		Возврат "PropertyRightTransferDocCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.СпособПереработки Тогда
		Возврат "ProcessingMethodType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.СведенияОСобственности Тогда
		Возврат "PropertyRightCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ЦельИспользованияПартии Тогда
		Возврат "LotsTargetCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2 Тогда
		Возврат "OKPD2CodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ТНВЭД Тогда
		Возврат "TNVEDCodeType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		Возврат "AgricultureType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ТипУслугиЭлеватора Тогда
		Возврат "ElevatorServiceType";
	ИначеЕсли Значение = Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения Тогда
		Возврат "StorageType";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Не определен тип поля идентификатора классификатора %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусОбработкиСообщения(Значение)
	
	Если Значение = "success" Тогда
		Возврат Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена;
	ИначеЕсли Значение = "queue-is-empty" Тогда
		Возврат Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаОбрабатывается;
	ИначеЕсли Значение = "accepted" Тогда
		Возврат Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	ИначеЕсли Значение = "ignored" Тогда
		Возврат Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПроигнорирована;
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус обработки сообщения %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусПартииЗерна(Значение) Экспорт
	
	Если Значение = "SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыПартийЗЕРНО.Подписано;
	ИначеЕсли Значение = "IN_ARCHIVE" Тогда
		Возврат Перечисления.СтатусыПартийЗЕРНО.ВАрхиве;
	ИначеЕсли Значение = "BLOCKED" Тогда
		Возврат Перечисления.СтатусыПартийЗЕРНО.Заблокировано;
	ИначеЕсли Значение = "CANCELED" Тогда
		Возврат Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
	
	ИначеЕсли Значение = Перечисления.СтатусыПартийЗЕРНО.Подписано Тогда
		Возврат "SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыПартийЗЕРНО.ВАрхиве Тогда
		Возврат "IN_ARCHIVE";
	ИначеЕсли Значение = Перечисления.СтатусыПартийЗЕРНО.Заблокировано Тогда
		Возврат "BLOCKED";
	ИначеЕсли Значение = Перечисления.СтатусыПартийЗЕРНО.Аннулировано Тогда
		Возврат "CANCELED";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус партии зерна %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусСДИЗ(Значение) Экспорт
	
	Если Значение = "SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыСДИЗЗЕРНО.Оформлен;
	ИначеЕсли Значение = "SUBSCRIBED_CONFIRMED" Тогда
		Возврат Перечисления.СтатусыСДИЗЗЕРНО.ОформленИПодтвержден;
	ИначеЕсли Значение = "EXTINGUISHED" Тогда
		Возврат Перечисления.СтатусыСДИЗЗЕРНО.Погашен;
	ИначеЕсли Значение = "CANCELED" Тогда
		Возврат Перечисления.СтатусыСДИЗЗЕРНО.Аннулирован;
	
	ИначеЕсли Значение = Перечисления.СтатусыСДИЗЗЕРНО.Оформлен Тогда
		Возврат "SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыСДИЗЗЕРНО.ОформленИПодтвержден Тогда
		Возврат "SUBSCRIBED_CONFIRMED";
	ИначеЕсли Значение = Перечисления.СтатусыСДИЗЗЕРНО.Погашен Тогда
		Возврат "EXTINGUISHED";
	ИначеЕсли Значение = Перечисления.СтатусыСДИЗЗЕРНО.Аннулирован Тогда
		Возврат "CANCELED";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус СДИЗ %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция ВидСДИЗ(Значение) Экспорт
	
	Если Значение = "OUTGOING" Тогда
		Возврат Перечисления.ВидыСДИЗЗЕРНО.Исходящий;
	ИначеЕсли Значение = "INCOMING" Тогда
		Возврат Перечисления.ВидыСДИЗЗЕРНО.Входящий;
	
	ИначеЕсли Значение = Перечисления.ВидыСДИЗЗЕРНО.Исходящий Тогда
		Возврат "OUTGOING";
	ИначеЕсли Значение = Перечисления.ВидыСДИЗЗЕРНО.Входящий Тогда
		Возврат "INCOMING";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный вид СДИЗ %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусРезультатаИсследований(Значение) Экспорт
	
	Если Значение = "SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыРезультатовИсследованийЗЕРНО.Подписан;
	ИначеЕсли Значение = "CANCELED" Тогда
		Возврат Перечисления.СтатусыРезультатовИсследованийЗЕРНО.Аннулирован;
	
	ИначеЕсли Значение = Перечисления.СтатусыРезультатовИсследованийЗЕРНО.Подписан Тогда
		Возврат "SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыРезультатовИсследованийЗЕРНО.Аннулирован Тогда
		Возврат "CANCELED";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус результата исследований %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусАктаОтбораПроб(Значение) Экспорт
	
	Если Значение = "SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыАктовОтбораПробЗЕРНО.Подписан;
	ИначеЕсли Значение = "CANCELED" Тогда
		Возврат Перечисления.СтатусыАктовОтбораПробЗЕРНО.Аннулирован;
	
	ИначеЕсли Значение = Перечисления.СтатусыАктовОтбораПробЗЕРНО.Подписан Тогда
		Возврат "SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыАктовОтбораПробЗЕРНО.Аннулирован Тогда
		Возврат "CANCELED";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус акта отбора проб %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусЗаписи(Значение) Экспорт
	
	Если Значение = "SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыЗаписейЗЕРНО.Подписано;
	ИначеЕсли Значение = "CANCELED" Тогда
		Возврат Перечисления.СтатусыЗаписейЗЕРНО.Аннулировано;
	
	ИначеЕсли Значение = Перечисления.СтатусыЗаписейЗЕРНО.Подписано Тогда
		Возврат "SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыЗаписейЗЕРНО.Аннулировано Тогда
		Возврат "CANCELED";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус записи %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция ОперацияСДИЗ(Значение) Экспорт
	
	Если Значение = "Перевозка" Тогда
		Возврат "SHIPPING";
	ИначеЕсли Значение = "Приемка" Тогда
		Возврат "ACCEPTANCE";
	ИначеЕсли Значение = "Реализация" Тогда
		Возврат "REALIZATION";
	ИначеЕсли Значение = "Отгрузка" Тогда
		Возврат "SHIPMENT";
	
	ИначеЕсли Значение = "SHIPPING" Тогда
		Возврат "Перевозка";
	ИначеЕсли Значение = "ACCEPTANCE" Тогда
		Возврат "Приемка";
	ИначеЕсли Значение = "REALIZATION" Тогда
		Возврат "Реализация";
	ИначеЕсли Значение = "SHIPMENT" Тогда
		Возврат "Отгрузка";
	
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестная операция СДЗИ %1'"), Значение);
	КонецЕсли;
	
КонецФункции

Функция СтатусМестаФормированияПартии(Значение) Экспорт
	
	Если Значение = "FORMATION" Тогда
		Возврат Перечисления.СтатусыМестФормированияПартийЗЕРНО.Наполняется;
	ИначеЕсли Значение = "FORMATION_COMPLETE" Тогда
		Возврат Перечисления.СтатусыМестФормированияПартийЗЕРНО.Сформировано;
	ИначеЕсли Значение = "CANCELED" Тогда
		Возврат Перечисления.СтатусыМестФормированияПартийЗЕРНО.Аннулировано;
	ИначеЕсли Значение = "SAMPLES_PICKING_SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыМестФормированияПартийЗЕРНО.ОтобраныПробы;
	ИначеЕсли Значение = "LABORATORY_MONITOR_SUBSCRIBED" Тогда
		Возврат Перечисления.СтатусыМестФормированияПартийЗЕРНО.ОсуществленГосударственныйМониторинг;
	ИначеЕсли Значение = "USED_IN_LOT" Тогда
		Возврат Перечисления.СтатусыМестФормированияПартийЗЕРНО.ОтобраныПробы;
	ИначеЕсли Значение = Перечисления.СтатусыМестФормированияПартийЗЕРНО.Наполняется Тогда
		Возврат "FORMATION";
	ИначеЕсли Значение = Перечисления.СтатусыМестФормированияПартийЗЕРНО.Сформировано Тогда
		Возврат "FORMATION_COMPLETE";
	ИначеЕсли Значение = Перечисления.СтатусыМестФормированияПартийЗЕРНО.Аннулировано Тогда
		Возврат "CANCELED";
	ИначеЕсли Значение = Перечисления.СтатусыМестФормированияПартийЗЕРНО.ОтобраныПробы Тогда
		Возврат "SAMPLES_PICKING_SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыМестФормированияПартийЗЕРНО.ОсуществленГосударственныйМониторинг Тогда
		Возврат "LABORATORY_MONITOR_SUBSCRIBED";
	ИначеЕсли Значение = Перечисления.СтатусыМестФормированияПартийЗЕРНО.ИспользованоДляСозданияПартии Тогда
		Возврат "USED_IN_LOT";
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Внутренняя ошибка. Неизвестный статус %1'"), Значение);
	КонецЕсли;
	
КонецФункции

// Формирует варианты наименования юридического лица в соответствии с его организационно-правовой формой.
//
// Параметры:
//    Наименование - Строка - Наименование юр. лица.
//
// Возвращаемое значение:
//    Структура - Наименование, РабочееНаименование, ПолноеНаименование.
//
Функция НаименованиеОрганизации(Знач Наименование)
	
	Наименование = СокрЛП(Наименование);
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, Наименование, Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма           = НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно = НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма           = "";
		ОрганизационноПравоваяФормаСокращенно = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек = СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки = СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование = Наименование;
			
			ПозицияКавычки = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки = СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если Не КоличествоКавычек%2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		ПолноеНаименование = Наименование;
	Иначе
		ПолноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
			ОрганизационноПравоваяФорма, Наименование);
	КонецЕсли;
	
	СокращенноеНаименование = Наименование + ?(ПустаяСтрока(ОрганизационноПравоваяФормаСокращенно), "", " ")
		+ ОрганизационноПравоваяФормаСокращенно;
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, СокращенноеНаименование, ПолноеНаименование);
	
	Возврат СтруктураНаименования;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)
	
	Результат = Ложь;
	
	Наименование       = СокрЛП(Наименование);
	НаименованиеПоиска = НРег(Наименование);
	
	ДлинаНаименования         = СтрДлина(Наименование);
	ДлинаОрганизационнойФормы = СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(НаименованиеПоиска, ДлинаОрганизационнойФормы) = НРег(ИмяОрганизационнойФормы) Тогда
		Наименование = СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат    = Истина;
	КонецЕсли;
	
	Если Прав(НаименованиеПоиска, ДлинаОрганизационнойФормы) = НРег(ИмяОрганизационнойФормы) Тогда
		Наименование = СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат    = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсЗЕРНО

Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		HTTPЗапрос.АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

Функция ОтправитьДанныеВСервис(ПараметрыЗапросаВСервис, ПараметрыОбмена, Сертификат) Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "text/xml;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Date",         ИнтеграцияИС.ДатаСЧасовымПоясом(ТекущаяДатаСеанса()));
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапросаВСервис.URLЗапроса, ЗаголовокHTTP);
	Если ПараметрыЗапросаВСервис.ТелоЗапроса <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ПараметрыЗапросаВСервис.ТелоЗапроса);
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		ЗаголовокHTTP.Вставить("Content-Length", Формат(ДвоичныеДанные.Размер(), "ЧГ=0"));
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыЗапросаВСервис.ПараметрыЗапроса;
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОбмена.ПараметрыОптимизации.ТаймаутHTTPЗапросов,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ЗафиксироватьДатуВыполненияЗапросаПроверкиИнтервала(ПараметрыОбмена, Сертификат);
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗЕРНО'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса POST %1 в %2 %3'"),
				ПараметрыЗапросаВСервис.URLЗапроса,
				ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
				ИнтеграцияЗЕРНОСлужебныйКлиентСервер.АдресСервера()) + Символы.ПС +
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПараметрыЛогированияЗапросов = ЛогированиеЗапросовЗЕРНО.ПараметрыЛогированияЗапросов();
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPЗапрос;
	ДанныеЗаписи.HTTPМетод       = "POST";
	ДанныеЗаписи.АдресРесурса    = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, ДанныеЗаписи.HTTPМетод);
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "POST");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьДанныеИзСервиса(ПараметрыЗапросаВСервис) Экспорт
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Date", ИнтеграцияИС.ДатаСЧасовымПоясом(ТекущаяДатаСеанса()));
	
	HTTPЗапрос  = Новый HTTPЗапрос(ПараметрыЗапросаВСервис.URLЗапроса, ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыЗапросаВСервис.ПараметрыЗапроса;
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияИСПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			30,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЗЕРНО'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru = 'Ошибка при выполнении запроса GET %1 в %2 %3'"),
				ПараметрыЗапросаВСервис.URLЗапроса,
				ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
				ИнтеграцияЗЕРНОСлужебныйКлиентСервер.АдресСервера()) + Символы.ПС +
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	ПараметрыЛогированияЗапросов = ЛогированиеЗапросовЗЕРНО.ПараметрыЛогированияЗапросов();
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPЗапрос;
	ДанныеЗаписи.HTTPМетод       = "GET";
	ДанныеЗаписи.АдресРесурса    = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, ДанныеЗаписи.HTTPМетод);
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "POST");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область КонвертИПодпись

Функция КонвертСообщенияXML(СообщениеXML, ПараметрыСообщения, ИдентификаторЗаявки, ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыОптимизации = ИнтеграцияЗЕРНО.ПараметрыОптимизации();
	Иначе
		ПараметрыОптимизации = ДополнительныеПараметры.ПараметрыОбмена.ПараметрыОптимизации;
	КонецЕсли;
	
	Если ПараметрыСообщения.ОперацияСообщения = Перечисления.ДействиеССообщениемЗЕРНО.Отправка Тогда
		СообщениеXML.ИдентификаторЗаявки = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	ТелоКонверта = ИнтеграцияЗЕРНОПовтИсп.ШаблонКонвертаSOAP();
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "%ВерсияAPI%",                        ПараметрыОптимизации.ВерсияСервисаAPI);
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "%ИмяЗапроса%",                       ПараметрыСообщения.ИмяЗапроса);
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "%ИдентификаторСвязанногоСообщения%", ИдентификаторЗаявки);
	ДанныеТела   = "";
	
	Если ЗначениеЗаполнено(ПараметрыСообщения.ИмяПоляТела) Тогда
		ТелоКонверта = СтрЗаменить(ТелоКонверта, "%ИдентификаторСообщения%", СообщениеXML.ИдентификаторЗаявки);
		ДанныеТела   = СообщениеXML[ПараметрыСообщения.ИмяПоляТела];
	Иначе
		ТелоКонверта = СтрЗаменить(ТелоКонверта, "%ИдентификаторСообщения%", Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "%ТелоСообщения%", ДанныеТела);
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
	ТелоКонверта = РаботаСXMLИС.ФорматироватьXML(ТелоКонверта, Ложь);
	ТелоКонверта = СтрЗаменить(ТелоКонверта, "<?xml version=""1.0"" encoding=""UTF-8""?>", "");
	
	Возврат ТелоКонверта;
	
КонецФункции

Функция СформироватьНовыйКонвертСообщения(ЭлементОчереди, ПараметрыОбмена, ИдентификаторЗаявки = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("РеквизитыИсходящегоСообщения", Неопределено);
	ВозвращаемоеЗначение.Вставить("СообщениеПодписано",           Ложь);
	
	СообщениеXML                              = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	СообщениеXML.ПодписываемоеТекущееДействие = ЭлементОчереди.ТекущееДействие;
	СообщенияТребующиеПодписания              = Новый Массив();
	
	КоллецкияПараметров = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ПараметрыЦиклаСообщения(ЭлементОчереди.ТекущееДействие);
	
	Для Каждого ПараметрыСообщения Из КоллецкияПараметров Цикл
		Если ИдентификаторЗаявки = Неопределено Тогда
			ИдентификаторЗаявкиВКонверте = СообщениеXML.ИдентификаторЗаявки;
		Иначе
			ИдентификаторЗаявкиВКонверте = ИдентификаторЗаявки;
		КонецЕсли;
		СообщениеXML[ПараметрыСообщения.ИмяПоляСообщения] = КонвертСообщенияXML(
			СообщениеXML,
			ПараметрыСообщения,
			ИдентификаторЗаявкиВКонверте);
	КонецЦикла;
	СообщенияТребующиеПодписания.Добавить(СообщениеXML);
	
	РезультатОбработки = СообщенияКПередаче(СообщенияТребующиеПодписания, ПараметрыОбмена);
	
	ВозвращаемоеЗначение.РеквизитыИсходящегоСообщения = СообщениеXML;
	ВозвращаемоеЗначение.СообщениеПодписано           = (РезультатОбработки.ПодписанныеСообщенияПоОрганизациям <> Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подписать сообщение XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Подписываемое сообщение XML
//  СертификатКриптографии - Сертификат криптографии
//  МенеджерКриптографии - Менеджер криптографии.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//   * Успех       - Булево - Признак успешности подписания.
//   * КонвертSOAP - Строка - Конверт SOAP.
//   * ТекстОшибки - Строка - Текст ошибки.
//
Функция Подписать(ТекстСообщенияXML, СертификатКриптографии, МенеджерКриптографии) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Успех");
	ВозвращаемоеЗначение.Вставить("КонвертSOAP");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	Попытка
		
		КонвертSOAP = ЭлектроннаяПодписьСлужебный.Подписать(
			ТекстСообщенияXML,
			ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыXMLDSig(),
			СертификатКриптографии, МенеджерКриптографии);
		
		ВозвращаемоеЗначение.Успех = Истина;
		ВозвращаемоеЗначение.КонвертSOAP = КонвертSOAP;
		
	Исключение
		
		ВозвращаемоеЗначение.Успех = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ИмяЗапросаЗерно

Функция СоответствиеОперацийИмяЗапроса()
	
	СоответствиеОперацийИмяЗапроса = Новый Соответствие;
	
	//РезультатыИсследованийЗЕРНО
	СтруктураЗапроса = СтруктураЗапросаЗерно(Справочники.РезультатыИсследованийЗЕРНО.ПустаяСсылка(),
		Перечисления.ВидыОперацийЗЕРНО.ЗапросРезультатовИсследований);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.РезультатыИсследований, СтруктураЗапроса);
	
	//АктыОтбораПробЗЕРНО
	СтруктураЗапроса = СтруктураЗапросаЗерно(Справочники.АктыОтбораПробЗЕРНО.ПустаяСсылка(),
		Перечисления.ВидыОперацийЗЕРНО.ЗапросАктовОтбораПроб);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.АктыОтбораПроб, СтруктураЗапроса);
	
	//РеестрМестФормированияПартийЗЕРНО
	СтруктураЗапроса = СтруктураЗапросаЗерно(Справочники.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка(),
		Перечисления.ВидыОперацийЗЕРНО.ЗапросМестФормированияПартий);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.МестаФормированияПартий, СтруктураЗапроса);
	
	//РеестрПартийЗЕРНО
	СтруктураЗапроса = СтруктураЗапросаЗерно(Справочники.РеестрПартийЗЕРНО.ПустаяСсылка(),
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий);
	СтруктураЗапроса.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Зерно);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.ПартииЗерно, СтруктураЗапроса);
	
	СтруктураЗапроса = СтруктураЗапросаЗерно(Справочники.РеестрПартийЗЕРНО.ПустаяСсылка(),
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении);
	СтруктураЗапроса.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Зерно);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.ПартииЗерноЭлеватор, СтруктураЗапроса);
	
	СтруктураЗапроса = СтруктураЗапросаЗерно(Справочники.РеестрПартийЗЕРНО.ПустаяСсылка(),
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий);
	СтруктураЗапроса.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.ПартииППЗ, СтруктураЗапроса);
	
	//СДИЗЗЕРНО
	Ссылка = Справочники.СДИЗЗЕРНО.ПустаяСсылка();
	Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗ;
	ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ();
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерно, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ(Ложь, Истина);
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноОтказОтПогашения, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ(Истина);
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноПогашение, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ();
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СтруктураЗапроса.Вставить("ЭтоЭлеватор",  Истина);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеватор, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ(Ложь, Истина);
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СтруктураЗапроса.Вставить("ЭтоЭлеватор",  Истина);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеваторОтказОтПогашения, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ(Истина);
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СтруктураЗапроса.Вставить("ЭтоЭлеватор",  Истина);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеваторПогашение, СтруктураЗапроса);
	
	//ППЗ
	ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ();
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗ, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ(Ложь, Истина);
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗОтказОтПогашения, СтруктураЗапроса);
	
	ПараметрыЗапроса = ПараметрыЗапросаСДИЗ(Истина);
	СтруктураЗапроса = СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса);
	СтруктураЗапроса.Вставить("ВидПродукции", ВидПродукции);
	СоответствиеОперацийИмяЗапроса.Вставить(Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗПогашение, СтруктураЗапроса);
	
	Возврат СоответствиеОперацийИмяЗапроса;
	
КонецФункции

Функция ПараметрыЗапросаСДИЗ(Погашения = Ложь, ОтказыПогашений = Ложь)
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ЗапрашиватьПогашенияСДИЗ",       Погашения);
	ПараметрыЗапроса.Вставить("ЗапрашиватьОтказыПогашенийСДИЗ", ОтказыПогашений);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция СтруктураЗапросаЗерно(Ссылка, Операция, ПараметрыЗапроса = Неопределено)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("Ссылка",           Ссылка);
	СтруктураЗапроса.Вставить("Операция",         Операция);
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция ТаблицаПоискаИмяЗапросаСДИЗ()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяЗапросаЗЕРНО");
	Таблица.Колонки.Добавить("ВидПродукции");
	Таблица.Колонки.Добавить("Операция");
	Таблица.Колонки.Добавить("ЗапрашиватьПогашенияСДИЗ");
	Таблица.Колонки.Добавить("ЗапрашиватьОтказыПогашенийСДИЗ");
	Таблица.Колонки.Добавить("ЭтоЭлеватор");
	
	//Зерно
	ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	ЭтоЭлеватор = Ложь;
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерно, ВидПродукции,,ЭтоЭлеватор);
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноПогашение, ВидПродукции, Истина,,ЭтоЭлеватор);
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноОтказОтПогашения, ВидПродукции, Истина, Истина,ЭтоЭлеватор);
	
	ЭтоЭлеватор = Истина;
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеватор, ВидПродукции,,ЭтоЭлеватор);
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеваторПогашение, ВидПродукции, Истина,,ЭтоЭлеватор);
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗЗерноЭлеваторОтказОтПогашения, ВидПродукции, Истина, ЭтоЭлеватор);
	
	ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗ, ВидПродукции);
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗПогашение, ВидПродукции, Истина);
	ДобавитьНастройкуИмяЗапросаЗерно(Таблица, Перечисления.ИмяЗапросаЗЕРНО.СДИЗППЗОтказОтПогашения, ВидПродукции, Истина, Истина);
	
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьНастройкуИмяЗапросаЗерно(Таблица, ИмяЗапросаЗЕРНО, ВидПродукции, Погашения = Ложь, ОтказыОтПогашений = Ложь, ЭтоЭлеватор = Ложь)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяЗапросаЗЕРНО                = ИмяЗапросаЗЕРНО;
	НоваяСтрока.ВидПродукции                   = ВидПродукции;
	НоваяСтрока.ЗапрашиватьПогашенияСДИЗ       = Погашения;
	НоваяСтрока.ЗапрашиватьОтказыПогашенийСДИЗ = ОтказыОтПогашений;
	НоваяСтрока.ЭтоЭлеватор                    = ЭтоЭлеватор;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
