///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтеграцияПодсистемБИП.
//
// Серверные процедуры и функции интеграции с БСП, БТС и БИП:
//  - Подписка на события БСП;
//  - Подписка на события БТС;
//  - Обработка событий БСП и БТС в подсистемах БИП;
//  - Определение списка возможных подписок в БИП;
//  - Вызов методов БСП, на которые выполнена подписка.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// Обработка программных событий, возникающих в подсистемах БСП.
// Только для вызовов из библиотеки БСП в БИП.

// Определяет события, на которые подписана эта библиотека.
//
// Параметры:
//  Подписки - Структура - См. ИнтеграцияПодсистемБСП.СобытияБСП.
//
Процедура ПриОпределенииПодписокНаСобытияБСП(Подписки) Экспорт
	
	// БазоваяФункциональность
	Подписки.ПриДобавленииПодсистем = Истина;
	Подписки.ПриДобавленииПараметровРаботыКлиентаПриЗапуске = Истина;
	Подписки.ПриДобавленииПараметровРаботыКлиента = Истина;
	Подписки.ПриДобавленииПереименованийОбъектовМетаданных = Истина;
	Подписки.ПриДобавленииОбработчиковУстановкиПараметровСеанса = Истина;
	Подписки.ПередЗапускомПрограммы = Истина;
	
	// Печать
	Подписки.ПриОпределенииНастроекПечати = Истина;
	
	// ПодключаемыеКоманды
	Подписки.ПриОпределенииВидовПодключаемыхКоманд = Истина;
	Подписки.ПриОпределенииСоставаНастроекПодключаемыхОбъектов = Истина;
	Подписки.ПриОпределенииКомандПодключенныхКОбъекту = Истина;
	
	// Профили безопасности
	Подписки.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам = Истина;
	
	// Пользователи
	Подписки.ПриОпределенииНазначенияРолей = Истина;
	
	// РегламентныеЗадания
	Подписки.ПриОпределенииНастроекРегламентныхЗаданий = Истина;
	Подписки.ПриЗапретеРаботыСВнешнимиРесурсами = Истина;
	Подписки.ПриРазрешенииРаботыСВнешнимиРесурсами = Истина;
	
	// Текущие дела
	Подписки.ПриОпределенииОбработчиковТекущихДел = Истина;
	Подписки.ПриОпределенииПорядкаРазделовКомандногоИнтерфейса = Истина;
	
	// Управление доступом
	Подписки.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных = Истина;
	Подписки.ПриЗаполненииСписковСОграничениемДоступа = Истина;
	
	// Варианты отчетов
	Подписки.ПриНастройкеВариантовОтчетов = Истина;
	
	// Центр мониторинга
	Подписки.ПриСбореПоказателейСтатистикиКонфигурации = Истина;
	
КонецПроцедуры

#Область БазоваяФункциональность

// См. ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем.
//
Процедура ПриДобавленииПодсистем(МодулиПодсистем) Экспорт
	
	МодулиПодсистем.Добавить("ОбновлениеИнформационнойБазыБИП");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ПараметрыИПП = Новый Структура;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		МодульМониторПортала1СИТС.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда
		МодульОблачныйАрхив20 = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив20");
		МодульОблачныйАрхив20.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ПараметрыИПП = Новый Структура;
	ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
	ПараметрыИПП.Вставить("ИмяПрограммы"             , ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы());
	ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);
	ПараметрыИПП.Вставить("КодЛокализации"           , ТекущийКодЛокализации());
	ПараметрыИПП.Вставить("ВерсияОбработкиОбновления", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	ПараметрыИПП.Вставить(
		"ДоменРасположенияСерверовИПП",
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	ПараметрыИПП.Вставить(
		"ДоступноПодключениеИнтернетПоддержки",
		ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки());
	
	// Добавление параметров подсистем.
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриДобавленииПараметровРаботыКлиента(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриДобавленииПараметровРаботыКлиента(ПараметрыИПП);
	КонецЕсли;
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПередЗапускомПрограммы
Процедура ПередЗапускомПрограммы() Экспорт
	
	КлиентЛицензирования.ПередЗапускомПрограммы();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПередЗапускомПрограммы();
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.2.5.1",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"Роль.ПодключениеИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.1.2.1",
		"Роль.ИспользованиеИПП",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		МодульМониторПортала1СИТС.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСКоннект") Тогда
		МодульИнтеграцияСКоннект = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСКоннект");
		МодульИнтеграцияСКоннект.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплатыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплатыСлужебный");
		МодульОнлайнОплатыСлужебный.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриОпределенииНастроекПечати(Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		НовыеРазрешения = Новый Массив;
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.ru",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.eu",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
			МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
			МодульПолучениеОбновленийПрограммы.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
			МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
			МодульМониторПортала1СИТС.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		МодульПодключениеСервисовСопровождения.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакском = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакском");
		МодульПодключение1СТакском.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныеКассы") Тогда
		МодульСервисОблачныеКассы = ОбщегоНазначения.ОбщийМодуль("СервисОблачныеКассы");
		МодульСервисОблачныеКассы.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда
		МодульОблачныйАрхив20 = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив20");
		МодульОблачныйАрхив20.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП") Тогда
		МодульСистемаБыстрыхПлатежейСлужебный = ОбщегоНазначения.ОбщийМодуль("СистемаБыстрыхПлатежейСлужебный");
		МодульСистемаБыстрыхПлатежейСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплатыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплатыСлужебный");
		МодульОнлайнОплатыСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОФД") Тогда
		МодульОФДСлужебный = ОбщегоНазначения.ОбщийМодуль("ОФДСлужебный");
		МодульОФДСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСЦРПТ") Тогда
		МодульИнтеграцияСЦРПТ = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЦРПТ");
		МодульИнтеграцияСЦРПТ.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		МодульПолучениеРегламентированныхОтчетов = ОбщегоНазначения.ОбщийМодуль("ПолучениеРегламентированныхОтчетов");
		МодульПолучениеРегламентированныхОтчетов.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СообщенияВСлужбуТехническойПоддержки") Тогда
		МодульСообщенияВСлужбуТехническойПоддержки = ОбщегоНазначения.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержки");
		МодульСообщенияВСлужбуТехническойПоддержки.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПоставляемыеНастройки") Тогда
		МодульПоставляемыеНастройкиСервер = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеНастройкиСервер");
		МодульПоставляемыеНастройкиСервер.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный =
			ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы,
			Источники,
			ПодключенныеОтчетыИОбработки,
			Команды);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы,
			Источники,
			ПодключенныеОтчетыИОбработки,
			Команды);
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОФД") Тогда
		МодульОФДСлужебный = ОбщегоНазначения.ОбщийМодуль("ОФДСлужебный");
		МодульОФДСлужебный.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы,
			Источники,
			ПодключенныеОтчетыИОбработки,
			Команды);
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = 
			ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(
			НастройкиПрограммногоИнтерфейса);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОФД") Тогда
		МодульОФДСлужебный = ОбщегоНазначения.ОбщийМодуль("ОФДСлужебный");
		МодульОФДСлужебный.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	КонецЕсли;
	
КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = 
			ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОФД") Тогда
		МодульОФДСлужебный = ОбщегоНазначения.ОбщийМодуль("ОФДСлужебный");
		МодульОФДСлужебный.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// См. БлокировкаРаботыСВнешнимиРесурсамиПереопределяемый.ПриЗапретеРаботыСВнешнимиРесурсами.
//
Процедура ПриЗапретеРаботыСВнешнимиРесурсами() Экспорт
	
	ИнтернетПоддержкаПользователей.ПриЗапретеРаботыСВнешнимиРесурсами();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда
		МодульОблачныйАрхив20 = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив20");
		МодульОблачныйАрхив20.ЗаблокироватьОблачныйАрхив();
	КонецЕсли;
	
КонецПроцедуры

// См. БлокировкаРаботыСВнешнимиРесурсамиПереопределяемый.ПриРазрешенииРаботыСВнешнимиРесурсами.
//
Процедура ПриРазрешенииРаботыСВнешнимиРесурсами() Экспорт
	
	ИнтернетПоддержкаПользователей.ПриРазрешенииРаботыСВнешнимиРесурсами();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда
		МодульОблачныйАрхив20 = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив20");
		МодульОблачныйАрхив20.РазблокироватьОблачныйАрхив();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
//
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
//
Процедура ПриОпределенииОбработчиковТекущихДел(ТекущиеДела) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		ТекущиеДела.Добавить(МодульПодключениеСервисовСопровождения);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		ТекущиеДела.Добавить(МодульПолучениеОбновленийПрограммы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		ТекущиеДела.Добавить(МодульРаботаСКлассификаторами);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		ТекущиеДела.Добавить(МодульСПАРКРиски);
	КонецЕсли;
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииПорядкаРазделовКомандногоИнтерфейса.
//
Процедура ПриОпределенииПорядкаРазделовКомандногоИнтерфейса(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.ИнтернетПоддержкаПользователей);
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЦентрМониторинга

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
//
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// ТехнологияСервиса.БазоваяФункциональность

// Обработка программных событий, возникающих в подсистемах БТС.
// Только для вызовов из библиотеки БТС в БИП.

// Определяет события, на которые подписана эта библиотека.
//
// Параметры:
//  Подписки - Структура - См. ИнтеграцияПодсистемБТС.СобытияБТС.
//
Процедура ПриОпределенииПодписокНаСобытияБТС(Подписки) Экспорт
	
	// Выгрузка загрузка данных
	Подписки.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке = Истина;
	Подписки.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки = Истина;
	Подписки.ПослеЗагрузкиДанных = Истина;
	
	// Очередь заданий
	Подписки.ПриПолученииСпискаШаблонов = Истина;
	Подписки.ПриОпределенииПсевдонимовОбработчиков = Истина;
	
	// Поставляемые данные
	Подписки.ПриОпределенииОбработчиковПоставляемыхДанных = Истина;
	
	// Тарификация
	Подписки.ПриФормированииСпискаУслуг = Истина;
	
КонецПроцедуры

#Область ВыгрузкаЗагрузкаДанных

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		МодульПодключениеСервисовСопровождения.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РасписанияРегламентныхЗаданий") Тогда
		МодульРасписанияРегламентныхЗаданий = ОбщегоНазначения.ОбщийМодуль("РасписанияРегламентныхЗаданий");
		МодульРасписанияРегламентныхЗаданий.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		МодульПодключениеСервисовСопровождения.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриПолученииСпискаШаблонов(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриПолученииСпискаШаблонов(Шаблоны);
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		МодульПодключениеСервисовСопровождения.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.СверкаВзаиморасчетовСБПc2b") Тогда
		МодульСверкаВзаиморасчетовСБПc2b = ОбщегоНазначения.ОбщийМодуль("СверкаВзаиморасчетовСБПc2b");
		МодульСверкаВзаиморасчетовСБПc2b.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныеКассы") Тогда
		МодульОблачныеКассыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОблачныеКассыСлужебный");
		МодульОблачныеКассыСлужебный.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнОплаты") Тогда
		МодульОнлайнОплаты = ОбщегоНазначения.ОбщийМодуль("ОнлайнОплаты");
		МодульОнлайнОплаты.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостейСлужебный");
		МодульОбработкаНовостейСлужебный.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		МодульМониторПортала1СИТС.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПоставляемыеНастройки") Тогда
		МодульПоставляемыеНастройкиСервер = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеНастройкиСервер");
		МодульПоставляемыеНастройкиСервер.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ВидДанных      = "ТипыСобытийМониторинга1СПАРКРиски";
		Обработчик.КодОбработчика = "ТипыСобытийМониторинга1СПАРКРиски";
		Обработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП") Тогда
		МодульСистемаБыстрыхПлатежейСлужебный = ОбщегоНазначения.ОбщийМодуль("СистемаБыстрыхПлатежейСлужебный");
		МодульСистемаБыстрыхПлатежейСлужебный.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеРегламентированныхОтчетов") Тогда
		МодульПолучениеРегламентированныхОтчетов = ОбщегоНазначения.ОбщийМодуль("ПолучениеРегламентированныхОтчетов");
		МодульПолучениеРегламентированныхОтчетов.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПоставляемыеНастройки") Тогда
		МодульПоставляемыеНастройкиСервер = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеНастройкиСервер");
		МодульПоставляемыеНастройкиСервер.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Тарификация

// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	Услуги = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	
	Если Услуги.Количество() > 0 Тогда
		// Поставщик добавляет только при наличии услуг.
		ПоставщикПортал1СИТС = ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(
			ПоставщикиУслуг);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоставщикПортал1СИТС.Услуги, Услуги);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Конец ТехнологияСервиса.БазоваяФункциональность

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БазоваяФункциональность

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации.
//
Процедура ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(КодЯзыка, КодЯзыкаВФорматеISO639_1) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(КодЯзыка, КодЯзыкаВФорматеISO639_1);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки.
//
Процедура ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриИзмененииДанныхАутентификацииИнтернетПоддержки Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииНомераВерсииПрограммы.
//
Процедура ПриОпределенииНомераВерсииПрограммы(ВерсияПрограммы) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииНомераВерсииПрограммы Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииНомераВерсииПрограммы(ВерсияПрограммы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьСБП

// См. СистемаБыстрыхПлатежейПереопределяемый.ПриОпределенииНастроекПодключения.
//
Процедура ПриОпределенииНастроекПодключения(Настройки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииНастроекПодключения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииНастроекПодключения(
			Настройки);
	КонецЕсли;
	
КонецПроцедуры

// См. СистемаБыстрыхПлатежейПереопределяемый.ПриЗаписиНастроекПодключения.
//
Процедура ПриЗаписиНастроекПодключения(ПараметрыОплаты, Отказ, СообщениеОбОшибке) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗаписиНастроекПодключения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаписиНастроекПодключения(
			ПараметрыОплаты,
			Отказ,
			СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// См. СистемаБыстрыхПлатежейПереопределяемый.ПриНастройкеЭлементовФормыПодключения.
//
Процедура ПриНастройкеЭлементовФормыПодключения(
		НастройкиФормы,
		ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриНастройкеЭлементовФормыПодключения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриНастройкеЭлементовФормыПодключения(
			НастройкиФормы,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. СистемаБыстрыхПлатежейПереопределяемый.ПриЗаполненииФормыНастройкиПодключения.
//
Процедура ПриЗаполненииФормыНастройкиПодключения(Настройки, ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗаполненииФормыНастройкиПодключения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииФормыНастройкиПодключения(
			Настройки,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереводыСБПc2b

// См. ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаОплатуСБП.
//
Процедура ПриФормированииЗаказаНаОплатуСБП(
		ДокументОплаты,
		ЗаказНаОплату,
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииЗаказаНаОплатуСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииЗаказаНаОплатуСБП(
			ДокументОплаты,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаЧастичнуюОплатуСБП.
//
Процедура ПриФормированииЗаказаНаЧастичнуюОплатуСБП(
		ДокументОплаты,
		ЗаказНаОплату,
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииЗаказаНаЧастичнуюОплатуСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииЗаказаНаЧастичнуюОплатуСБП(
			ДокументОплаты,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриФормированииЗаказаНаВозвратСБП.
//
Процедура ПриФормированииЗаказаНаВозвратСБП(
		ДокументВозврата,
		ЗаказНаВозврат,
		НастройкаПодключения,
		ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииЗаказаНаВозвратСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииЗаказаНаВозвратСБП(
			ДокументВозврата,
			ЗаказНаВозврат,
			НастройкаПодключения,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриЗагрузкеСтатусаОперации.
//
Процедура ПриЗагрузкеСтатусаОперации(
		ДокументОперации,
		НастройкаПодключения,
		РезультатОбработки,
		Обработан) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗагрузкеСтатусаОперации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеСтатусаОперации(
			ДокументОперации,
			НастройкаПодключения,
			РезультатОбработки,
			Обработан);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам.
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(
		Шаблоны) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам(Шаблоны);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриПроверкеИспользованияШаблоновСообщенийСБП.
//
Процедура ПриПроверкеИспользованияШаблоновСообщенийСБП(
		Используется) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриПроверкеИспользованияШаблоновСообщенийСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриПроверкеИспользованияШаблоновСообщенийСБП(Используется);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииДоступностиПодключенияПоДокументуОперации.
//
Процедура ПриОпределенииДоступностиПодключенияПоДокументуОперации(
		ДокументОперации,
		Результат) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииДоступностиПодключенияПоДокументуОперации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииДоступностиПодключенияПоДокументуОперации(
			ДокументОперации,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииОбъектовСКомандамиСБП.
//
Процедура ПриОпределенииОбъектовСКомандамиСБП(
		ИменаДокументовОперации) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииОбъектовСКомандамиСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииОбъектовСКомандамиСБП(ИменаДокументовОперации);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровПодключенияДокументаОперации.
//
Процедура ПриОпределенииПараметровПодключенияДокументаОперации(
		ДокументОперации,
		НастройкиПодключения,
		ДополнительныеНастройки,
		ПараметрыВопроса) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииПараметровПодключенияДокументаОперации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПараметровПодключенияДокументаОперации(
			ДокументОперации,
			НастройкиПодключения,
			ДополнительныеНастройки,
			ПараметрыВопроса);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриФормированииСпискаПолучателейСообщенияСБП.
//
Процедура ПриФормированииСпискаПолучателейСообщенияСБП(
		ОснованиеПлатежа,
		ВариантОтправки,
		Получатели) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииСпискаПолучателейСообщенияСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииСпискаПолучателейСообщенияСБП(
			ОснованиеПлатежа,
			ВариантОтправки,
			Получатели);
	КонецЕсли;
		
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийСБП.
//
Процедура ПриОпределенииПараметровОтправкиСообщенийСБП(ПараметрыОтправкиСообщений) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииПараметровОтправкиСообщенийСБП Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПараметровОтправкиСообщенийСБП(ПараметрыОтправкиСообщений);
	КонецЕсли;
	
КонецПроцедуры

// См. ПереводыСБПc2bПереопределяемый.ПриСозданииНаСервереФормыQRКода.
//
Процедура ПриСозданииНаСервереФормыQRКода(
		ЭтотОбъект,
		НастройкиФормы,
		ДанныеПлатежнойСсылки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСозданииНаСервереФормыQRКода Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСозданииНаСервереФормыQRКода(
			ЭтотОбъект,
			НастройкиФормы,
			ДанныеПлатежнойСсылки);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриСозданииНаСервереФормыПодключенияСсылки.
//
Процедура ПриСозданииНаСервереФормыПодключенияСсылки(ЭтотОбъект, Отказ) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСозданииНаСервереФормыПодключенияСсылки Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСозданииНаСервереФормыПодключенияСсылки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиПереопределяемый.ПриОпределенииДанныхКассовыхСсылок.
//
Процедура ПриОпределенииДанныхКассовыхСсылок(ПараметрыНастройки, ДанныеКассовыхСсылок) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииДанныхКассовыхСсылок Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииДанныхКассовыхСсылок(ПараметрыНастройки, ДанныеКассовыхСсылок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МониторПортала1СИТС

// См. МониторПортала1СИТСПереопределяемый.ПриОпределенииОбщихПараметровМонитора.
//
Процедура ПриОпределенииОбщихПараметровМонитора(ПараметрыМонитора) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииОбщихПараметровМонитора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииОбщихПараметровМонитора(
			ПараметрыМонитора);
	КонецЕсли;
	
КонецПроцедуры

// См. МониторПортала1СИТСПереопределяемый.ПриСозданииФормыМонитора.
//
Процедура ПриСозданииФормыМонитора(Форма, ПараметрыСоздания) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСозданииФормыМонитора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСозданииФормыМонитора(
			Форма,
			ПараметрыСоздания);
	КонецЕсли;
	
КонецПроцедуры

// См. МониторПортала1СИТСПереопределяемый.ПередПолучениемДанныхМонитора.
//
Процедура ПередПолучениемДанныхМонитора(Форма, ПараметрыПолученияДополнительныхДанных) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПередПолучениемДанныхМонитора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПередПолучениемДанныхМонитора(
			Форма,
			ПараметрыПолученияДополнительныхДанных);
	КонецЕсли;
	
КонецПроцедуры

// См. МониторПортала1СИТСПереопределяемый.ПриПолученииДополнительныхДанныхМонитора.
//
Процедура ПриПолученииДополнительныхДанныхМонитора(ДополнительныеДанные, ПараметрыПолученияДополнительныхДанных) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриПолученииДополнительныхДанныхМонитора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриПолученииДополнительныхДанныхМонитора(
			ДополнительныеДанные,
			ПараметрыПолученияДополнительныхДанных);
	КонецЕсли;
	
КонецПроцедуры

// См. МониторПортала1СИТСПереопределяемый.ОтобразитьДополнительныеДанныеМонитора.
//
Процедура ОтобразитьДополнительныеДанныеМонитора(Форма, ДополнительныеДанные) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ОтобразитьДополнительныеДанныеМонитора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ОтобразитьДополнительныеДанныеМонитора(
			Форма,
			ДополнительныеДанные);
	КонецЕсли;
	
КонецПроцедуры

// См. МониторПортала1СИТСПереопределяемый.ПриФормированииТекстовПредупреждений.
//
Процедура ПриФормированииТекстовПредупреждений(ДанныеСервиса, ТекстыПредупреждений) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриФормированииТекстовПредупреждений(
			ДанныеСервиса,
			ТекстыПредупреждений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриФормированииТекстовПредупреждений(
			ДанныеСервиса,
			ТекстыПредупреждений);
	КонецЕсли;
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииТекстовПредупреждений Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииТекстовПредупреждений(
			ДанныеСервиса,
			ТекстыПредупреждений);
	КонецЕсли;
	
КонецПроцедуры

// См. МониторПортала1СИТСПереопределяемый.ПриЗаполненииПараметровСервисов.
//
Процедура ПриЗаполненииПараметровСервисов(ПараметрыСервисов) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗаполненииПараметровСервисов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииПараметровСервисов(
			ПараметрыСервисов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПрограммы

// См. НастройкиПрограммыБИППереопределяемый.ПриСозданииФормыИнтернетПоддержкаИСервисы.
//
Процедура ПриСозданииФормыИнтернетПоддержкаИСервисы(Форма) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСозданииФормыИнтернетПоддержкаИСервисы Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСозданииФормыИнтернетПоддержкаИСервисы(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОблачнаяКасса

// См. ОблачныеКассыПереопределяемый.ПриЗагрузкеСтатусаОперации
//
Процедура ПриЗагрузкеСтатусаОперацииОблачнойКассы(ДокументОперации, Касса, ПараметрыОперации, Обработан) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗагрузкеСтатусаОперацииОблачнойКассы Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеСтатусаОперацииОблачнойКассы(
			ДокументОперации,
			Касса,
			ПараметрыОперации,
			Обработан);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОнлайнОплаты

// См. ОнлайнОплатыПереопределяемый.ПриОпределенииДополнительныхНастроекОнлайнОплаты.
//
Процедура ПриОпределенииДополнительныхНастроекОнлайнОплаты(ДополнительныеНастройки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииДополнительныхНастроекОнлайнОплаты Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииДополнительныхНастроекОнлайнОплаты(ДополнительныеНастройки);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПриСозданииФормыОнлайнОплаты.
//
Процедура ПриСозданииФормыОнлайнОплаты(Форма, Группа, Префикс, ДополнительныеНастройки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСозданииФормыОнлайнОплаты Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСозданииФормыОнлайнОплаты(Форма, Группа, Префикс, ДополнительныеНастройки);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПередНачаломРедактированияДополнительныхНастроекОнлайнОплаты.
//
Процедура ПередНачаломРедактированияДополнительныхНастроекОнлайнОплаты(Контекст, Отказ = Ложь) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПередНачаломРедактированияДополнительныхНастроекОнлайнОплаты Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПередНачаломРедактированияДополнительныхНастроекОнлайнОплаты(Контекст, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПередОкончаниемРедактированияДополнительныхНастроекОнлайнОплат.
//
Процедура ПередОкончаниемРедактированияДополнительныхНастроекОнлайнОплат(Контекст, Отказ = Ложь) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПередОкончаниемРедактированияДополнительныхНастроекОнлайнОплат Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПередОкончаниемРедактированияДополнительныхНастроекОнлайнОплат(Контекст, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.СоответствиеРеквизитовОснованийПлатежа.
//
Процедура СоответствиеРеквизитовОснованийПлатежа(СоответствиеРеквизитов) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().СоответствиеРеквизитовОснованийПлатежа Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.СоответствиеРеквизитовОснованийПлатежа(СоответствиеРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПриОпределенииОснованийПлатежа.
//
Процедура ПриОпределенииОснованийПлатежа(ОснованияПлатежа) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииОснованийПлатежа Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииОснованийПлатежа(ОснованияПлатежа);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПриПроверкеЗаполненияОснованияПлатежа.
//
Процедура ПриПроверкеЗаполненияОснованияПлатежа(Знач ОснованиеПлатежа, Отказ) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриПроверкеЗаполненияОснованияПлатежа Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриПроверкеЗаполненияОснованияПлатежа(ОснованиеПлатежа, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ЗаполнитьИдентификаторОснованияПлатежа.
//
Процедура ЗаполнитьИдентификаторОснованияПлатежа(Знач ОснованиеПлатежа, ДанныеОснованияПлатежа) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьИдентификаторОснованияПлатежа Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьИдентификаторОснованияПлатежа(ОснованиеПлатежа, ДанныеОснованияПлатежа);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ЗаполнитьРеквизитыОрганизации.
//
Процедура ЗаполнитьРеквизитыОрганизации(Знач Организация, Реквизиты) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьРеквизитыОрганизации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьРеквизитыОрганизации(Организация, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ИспользуетсяОднаОрганизация.
//
Процедура ИспользуетсяОднаОрганизация(Результат) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ИспользуетсяОднаОрганизация Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ИспользуетсяОднаОрганизация(Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ИмяПрикладногоСправочникаОрганизации.
//
Процедура ИмяПрикладногоСправочникаОрганизации(ИмяПрикладногоСправочника) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ИмяПрикладногоСправочникаОрганизации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ИмяПрикладногоСправочникаОрганизации(ИмяПрикладногоСправочника);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ЗаполнитьДанныеОснованияПлатежа.
//
Процедура ЗаполнитьДанныеОснованияПлатежа(Знач ОснованиеПлатежа, ДанныеОснованияПлатежа) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьДанныеОснованияПлатежа Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьДанныеОснованияПлатежа(ОснованиеПлатежа, ДанныеОснованияПлатежа);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа.
//
Процедура ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(Знач ОснованиеПлатежа, КонтактнаяИнформация) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьКонтактнуюИнформациюОснованияПлатежа Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьКонтактнуюИнформациюОснованияПлатежа(ОснованиеПлатежа, КонтактнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПриФормированииСпискаПолучателейСообщения.
//
Процедура ПриФормированииСпискаПолучателейСообщения(Знач ОснованиеПлатежа, Знач ВариантОтправки, Получатели) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииСпискаПолучателейСообщения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииСпискаПолучателейСообщения(ОснованиеПлатежа, ВариантОтправки, Получатели);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат.
//
Процедура ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат(ПараметрыОтправкиСообщений) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат(ПараметрыОтправкиСообщений);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПриЗагрузкеОперацийПоОнлайнОплате.
//
Процедура ПриЗагрузкеОперацийПоОнлайнОплате(Знач Операции, Результат, Отказ) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗагрузкеОперацийПоОнлайнОплате Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеОперацийПоОнлайнОплате(Операции, Результат, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПроверитьИспользованиеШаблоновСообщенийОнлайнОплат.
//
Процедура ПроверитьИспользованиеШаблоновСообщенийОнлайнОплат(Используется) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПроверитьИспользованиеШаблоновСообщенийОнлайнОплат Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПроверитьИспользованиеШаблоновСообщенийОнлайнОплат(Используется);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПредопределенныеШаблоныСообщенийОнлайнОплат.
//
Процедура ПредопределенныеШаблоныСообщенийОнлайнОплат(Шаблоны) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПредопределенныеШаблоныСообщенийОнлайнОплат Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПредопределенныеШаблоныСообщенийОнлайнОплат(Шаблоны);
	КонецЕсли;
	
КонецПроцедуры

// См. ОнлайнОплатыПереопределяемый.ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам.
//
Процедура ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам(Шаблоны) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам(Шаблоны);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключение1СТакском

// См. Подключение1СТакскомПереопределяемый.ИспользоватьСервис1СТакском.
//
Процедура ИспользоватьСервис1СТакском(Отказ) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ИспользоватьСервис1СТакском Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ИспользоватьСервис1СТакском(
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// См. Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации.
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьРегистрационныеДанныеОрганизации Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьРегистрационныеДанныеОрганизации(
			Организация,
			ДанныеОрганизации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеСервисовСопровождения

// См. ПодключениеСервисовСопровожденияПереопределяемый.ПриОпределенииСервисовСопровождения.
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииСервисовСопровождения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииСервисовСопровождения(МодулиСервисов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОбновленийПрограммы

// См. ПолучениеОбновленийПрограммыПереопределяемый.ПриОпределенииПараметровПолученияОбновлений.
//
Процедура ПриОпределенииПараметровПолученияОбновлений(ПараметрыПолученияОбновлений) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииПараметровПолученияОбновлений Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПараметровПолученияОбновлений(ПараметрыПолученияОбновлений);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.
//
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ДанныеНагрузкиИРентабельности") Тогда
		МодульДанныеНагрузкиИРентабельности = ОбщегоНазначения.ОбщийМодуль("ДанныеНагрузкиИРентабельности");
		МодульДанныеНагрузкиИРентабельности.ПриДобавленииКлассификаторов(Классификаторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодборФИО") Тогда
		МодульПодборФИО = ОбщегоНазначения.ОбщийМодуль("ПодборФИО");
		МодульПодборФИО.ПриДобавленииКлассификаторов(Классификаторы);
	КонецЕсли;
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриДобавленииКлассификаторов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриДобавленииКлассификаторов(Классификаторы);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриОпределенииНачальногоНомераВерсииКлассификатора.
//
Процедура ПриОпределенииНачальногоНомераВерсииКлассификатора(Идентификатор, НачальныйНомерВерсии) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииНачальногоНомераВерсииКлассификатора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииНачальногоНомераВерсииКлассификатора(
			Идентификатор,
			НачальныйНомерВерсии);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
//
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗагрузкеКлассификатора Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеКлассификатора(
			Идентификатор,
			Версия,
			Адрес,
			Обработан,
			ДополнительныеПараметры);
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ДанныеНагрузкиИРентабельности") Тогда
		МодульДанныеНагрузкиИРентабельности = ОбщегоНазначения.ОбщийМодуль("ДанныеНагрузкиИРентабельности");
		МодульДанныеНагрузкиИРентабельности.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодборФИО") Тогда
		МодульПодборФИО = ОбщегоНазначения.ОбщийМодуль("ПодборФИО");
		МодульПодборФИО.ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОбработкеОбластиДанных.
//
Процедура ПриОбработкеОбластиДанных(Идентификатор, Версия, ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОбработкеОбластиДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОбработкеОбластиДанных(
			Идентификатор,
			Версия,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОпределенииИдентификаторовКлассификаторов.
//
Процедура ПриОпределенииИдентификаторовКлассификаторов(Идентификаторы) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииИдентификаторовКлассификаторов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииИдентификаторовКлассификаторов(
			Идентификаторы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеВнешнихКомпонент

// См. ПолучениеВнешнихКомпонентВМоделиСервисаПереопределяемый.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент.
//
Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииИспользуемыхВерсийВнешнихКомпонент Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеНастройки

// См. ПоставляемыеНастройкиСервер.ПриДобавленииНастроек.
//
Процедура ПриДобавленииНастроек(Настройки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриДобавленииНастроек Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриДобавленииНастроек(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// См. ПоставляемыеНастройкиСервер.ПриЗагрузкеФайлаНастройки.
Процедура ПриЗагрузкеФайлаНастройки(
		ДанныеНастройки,
		ДанныеФайла,
		Обработан) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗагрузкеФайлаНастройки Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеФайлаНастройки(
			ДанныеНастройки,
			ДанныеФайла,
			Обработан);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СверкаВзаиморасчетовСБПc2b

// См. СверкаВзаиморасчетовСБПc2bПереопределяемый.ПриНастройкеСверкиВзаиморасчетов.
//
Процедура ПриНастройкеСверкиВзаиморасчетов(Настройки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриНастройкеСверкиВзаиморасчетов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриНастройкеСверкиВзаиморасчетов(
			Настройки);
	КонецЕсли;
	
КонецПроцедуры

// См. СверкаВзаиморасчетовСБПc2bПереопределяемый.ПриОпределенииОборотов.
//
Процедура ПриОпределенииОборотов(ДокументыОплаты, НастройкаИнтеграции, Обороты) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииОборотов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииОборотов(
			ДокументыОплаты,
			НастройкаИнтеграции,
			Обороты);
	КонецЕсли;
	
КонецПроцедуры

// См. СверкаВзаиморасчетовСБПc2bПереопределяемый.ПриСписанииРасходовКомиссии.
//
Процедура ПриСписанииРасходовКомиссии(ПараметрыСписанияРасходов, ДокументСписания) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСписанииРасходовКомиссии Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСписанииРасходовКомиссии(
			ПараметрыСписанияРасходов,
			ДокументСписания);
	КонецЕсли;
	
КонецПроцедуры

// См. СверкаВзаиморасчетовСБПc2bПереопределяемый.ПриОпределенииДанныхОпераций.
//
Процедура ПриОпределенииДанныхОпераций(
		ДокументыОплат,
		НастройкаИнтеграции,
		ДанныеОпераций) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииДанныхОпераций Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииДанныхОпераций(
			ДокументыОплат,
			НастройкаИнтеграции,
			ДанныеОпераций);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияВСлужбуТехническойПоддержки

// См. СообщенияВСлужбуТехническойПоддержкиПереопределяемый.ПриОпределенииХостаСервисовТехническойПоддержки.
//
Процедура ПриОпределенииХостаСервисовТехническойПоддержки(Хост) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииХостаСервисовТехническойПоддержки Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииХостаСервисовТехническойПоддержки(Хост);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СПАРКРиски

// См. СПАРКРискиПереопределяемый.ПриОпределенииСвойствСправочниковКонтрагентов.
//
Процедура ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииСвойствСправочниковКонтрагентов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.КонтрагентыДляМониторинга.
//
Процедура КонтрагентыДляМониторинга(ПоставитьНаМониторинг, СнятьСМониторинга) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().КонтрагентыДляМониторинга Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.КонтрагентыДляМониторинга(
			ПоставитьНаМониторинг,
			СнятьСМониторинга);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ПараметрыОтображенияОтчетов.
//
Процедура ПараметрыОтображенияОтчетов(ПараметрыОтображения) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПараметрыОтображенияОтчетов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПараметрыОтображенияОтчетов(ПараметрыОтображения);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервереСПАРК(
		Форма,
		КонтрагентОбъект,
		Контрагент,
		ВидКонтрагента,
		ПараметрыОтображения,
		ИспользованиеРазрешено,
		СтандартнаяОбработкаБиблиотекой) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриСозданииНаСервереСПАРК Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриСозданииНаСервереСПАРК(
			Форма,
			КонтрагентОбъект,
			Контрагент,
			ВидКонтрагента,
			ПараметрыОтображения,
			ИспользованиеРазрешено,
			СтандартнаяОбработкаБиблиотекой);
	КонецЕсли;

КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ВремяОжиданияФоновогоЗадания.
//
Процедура ВремяОжиданияФоновогоЗадания(ОжидатьЗавершение) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ВремяОжиданияФоновогоЗадания Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ВремяОжиданияФоновогоЗадания(ОжидатьЗавершение);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ПриФормированииОтчетаНадежностьВходящегоНДС.
//
Процедура ПриФормированииОтчетаНадежностьВходящегоНДС(
		МенеджерВременныхТаблиц,
		ПараметрыОтбора,
		Использование) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииОтчетаНадежностьВходящегоНДС Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииОтчетаНадежностьВходящегоНДС(
			МенеджерВременныхТаблиц,
			ПараметрыОтбора,
			Использование);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ПриФормированииНадежностьДебиторов.
//
Процедура ПриФормированииНадежностьДебиторов(
		МенеджерВременныхТаблиц,
		ПараметрыОтбора,
		Использование) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриФормированииНадежностьДебиторов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриФормированииНадежностьДебиторов(
			МенеджерВременныхТаблиц,
			ПараметрыОтбора,
			Использование);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц.
//
Процедура ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц(
		ПараметрыЗаполнения) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц(
			ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// См. СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей.
//
Процедура ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей(
		ПараметрыЗаполнения) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей(
			ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеРегламентированныхОтчетов

// См. ПолучениеРегламентированныхОтчетовПереопределяемый.ПриДобавленииВидовРегламентированныхОтчетов.
//
Процедура ПриДобавленииВидовРегламентированныхОтчетов(ВидыОтчетов, ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриДобавленииВидовРегламентированныхОтчетов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриДобавленииВидовРегламентированныхОтчетов(
			ВидыОтчетов, 
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ПолучениеРегламентированныхОтчетовПереопределяемый.ПриЗагрузкеРегламентированногоОтчета.
//
Процедура ПриЗагрузкеРегламентированногоОтчета(ОписаниеФайла, Обработан, ДополнительныеПараметры) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриЗагрузкеРегламентированногоОтчета Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеРегламентированногоОтчета(
			ОписаниеФайла,
			Обработан,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Новости

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи
//
Процедура ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(КлассификаторСсылка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(КлассификаторСсылка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьМассивКонтекстныхНовостей
//
Процедура ДополнительноОбработатьМассивКонтекстныхНовостей(
			Знач ИдентификаторМетаданных,
			Знач ИдентификаторФормы,
			Знач ИдентификаторыСобытийПриОткрытии,
			МассивСтруктурНовостей) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьМассивКонтекстныхНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьМассивКонтекстныхНовостей(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ИдентификаторыСобытийПриОткрытии,
			МассивСтруктурНовостей);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьНовостиПослеПолучения
//
Процедура ДополнительноОбработатьНовостиПослеПолучения(ТаблицаДатЗагрузокНовостейПередПолучением) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьНовостиПослеПолучения Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьНовостиПослеПолучения(ТаблицаДатЗагрузокНовостейПередПолучением);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьНовостьПослеПолученияПередЗаписью
//
Процедура ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовости, НовостьХДТО) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьНовостьПослеПолученияПередЗаписью Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовости, НовостьХДТО);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи
//
Процедура ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(НовостьСсылка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(НовостьСсылка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТаблицуКонтекстныхНовостей
//
Процедура ДополнительноОбработатьТаблицуКонтекстныхНовостей(
			Знач ИдентификаторМетаданных,
			Знач ИдентификаторФормы,
			Знач ИдентификаторыСобытийПриОткрытии,
			ТаблицаКонтекстныхНовостей) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьТаблицуКонтекстныхНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьТаблицуКонтекстныхНовостей(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ИдентификаторыСобытийПриОткрытии,
			ТаблицаКонтекстныхНовостей);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТекстНовостиПередПоказом
//
Процедура ДополнительноОбработатьТекстНовостиПередПоказом(ОбъектНовости, ТекстХТМЛ) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьТекстНовостиПередПоказом Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьТекстНовостиПередПоказом(ОбъектНовости, ТекстХТМЛ);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТекстСпискаНовостейПередПоказом
//
Процедура ДополнительноОбработатьТекстСпискаНовостейПередПоказом(ТекстХТМЛ) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьТекстСпискаНовостейПередПоказом Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьТекстСпискаНовостейПередПоказом(ТекстХТМЛ);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуКонтекстныхНовостейПриСозданииНаСервере
//
Процедура ДополнительноОбработатьФормуКонтекстныхНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьФормуКонтекстныхНовостейПриСозданииНаСервере Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьФормуКонтекстныхНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуНовостиПриСозданииНаСервере
//
Процедура ДополнительноОбработатьФормуНовостиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьФормуНовостиПриСозданииНаСервере Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьФормуНовостиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуОченьВажныхНовостейПриСозданииНаСервере
//
Процедура ДополнительноОбработатьФормуОченьВажныхНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьФормуОченьВажныхНовостейПриСозданииНаСервере Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьФормуОченьВажныхНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПриСозданииНаСервере
//
Процедура ДополнительноОбработатьФормуПриСозданииНаСервере(
			Форма,
			НастройкиЗаполненияНовостями,
			ИдентификаторыСобытийПриОткрытии,
			СозданнаяКнопкаИлиПодменюНовости,
			МассивСтруктурНовостей) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьФормуПриСозданииНаСервере Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьФормуПриСозданииНаСервере(
			Форма,
			НастройкиЗаполненияНовостями,
			ИдентификаторыСобытийПриОткрытии,
			СозданнаяКнопкаИлиПодменюНовости,
			МассивСтруктурНовостей);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПросмотраНовостейДляРабочегоСтолаПриСозданииНаСервере
//
Процедура ДополнительноОбработатьФормуПросмотраНовостейДляРабочегоСтолаПриСозданииНаСервере(
			Форма,
			ВозвращаемыеЗначения) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьФормуПросмотраНовостейДляРабочегоСтолаПриСозданииНаСервере Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьФормуПросмотраНовостейДляРабочегоСтолаПриСозданииНаСервере(
			Форма,
			ВозвращаемыеЗначения);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере
//
Процедура ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноПодготовитьПараметрыНавигационнойСсылки
//
Процедура ДополнительноПодготовитьПараметрыНавигационнойСсылки(
			Знач Объект,
			УИНДействия,
			Действие,
			СписокПараметров) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноПодготовитьПараметрыНавигационнойСсылки Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноПодготовитьПараметрыНавигационнойСсылки(
			Объект,
			УИНДействия,
			Действие,
			СписокПараметров);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ДополнительноУстановитьУсловноеОформлениеФормыКонтекстныхНовостей
//
Процедура ДополнительноУстановитьУсловноеОформлениеФормыКонтекстныхНовостей(
			ФормаКонтекстныхНовостей,
			УсловноеОформлениеФормы) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ДополнительноУстановитьУсловноеОформлениеФормыКонтекстныхНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ДополнительноУстановитьУсловноеОформлениеФормыКонтекстныхНовостей(
			ФормаКонтекстныхНовостей,
			УсловноеОформлениеФормы);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей
//
Процедура ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей(
			ТаблицаНовостей,
			Пользователь,
			Отбор,
			ИнтерактивныеДействия) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей(
			ТаблицаНовостей,
			Пользователь,
			Отбор,
			ИнтерактивныеДействия);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей
//
Процедура ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей(
			КодыКатегорийНовостей,
			ОбластьВидимости = "Общее",
			КонтекстВыполнения = Неопределено) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей(
			КодыКатегорийНовостей,
			ОбластьВидимости,
			КонтекстВыполнения);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории
//
Процедура ЗначениеПредопределеннойКатегории(Категория, Значение) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ЗначениеПредопределеннойКатегории Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ЗначениеПредопределеннойКатегории(Категория, Значение);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ОбработатьЗаписьПользователя
//
Процедура ОбработатьЗаписьПользователя(ПользовательОбъект, ЭтоНовыйПользователь, Отказ) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ОбработатьЗаписьПользователя Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ОбработатьЗаписьПользователя(ПользовательОбъект, ЭтоНовыйПользователь, Отказ);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПанельКонтекстныхНовостей_ВыбратьНовости
//
Процедура ПанельКонтекстныхНовостей_ВыбратьНовости(
			Форма,
			ТаблицаНовостейДляПанелиКонтекстныхНовостей,
			СтандартнаяОбработка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПанельКонтекстныхНовостей_ВыбратьНовости Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПанельКонтекстныхНовостей_ВыбратьНовости(
			Форма,
			ТаблицаНовостейДляПанелиКонтекстныхНовостей,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей
//
Процедура ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей(
			ЛентаНовостей,
			НовостьОбъект,
			Отказ) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей(
			ЛентаНовостей,
			НовостьОбъект,
			Отказ);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПереопределитьСбросСостоянияНовостиПриЗаписи
//
Процедура ПереопределитьСбросСостоянияНовостиПриЗаписи(Знач ОбъектНовость, СброситьСостояниеНовости) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПереопределитьСбросСостоянияНовостиПриЗаписи Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПереопределитьСбросСостоянияНовостиПриЗаписи(ОбъектНовость, СброситьСостояниеНовости);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей
//
Процедура ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей = Неопределено) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов
//
Процедура ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(
			ИмяОбъектаМетаданных,
			СтандартныеЗначения) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(
			ИмяОбъектаМетаданных,
			СтандартныеЗначения);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей
//
Процедура ПолучитьДополнительныеСтандартныеЗначенияНовостей(ЛентаНовостей, СтандартныеЗначения) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПолучитьДополнительныеСтандартныеЗначенияНовостей Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПолучитьДополнительныеСтандартныеЗначенияНовостей(ЛентаНовостей, СтандартныеЗначения);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.ПолучитьНовостиСНапоминаниями
//
Процедура ПолучитьНовостиСНапоминаниями(
			ОченьВажныеНовости,
			ВажныеНовости,
			ДополнительныеПараметры,
			СтандартнаяОбработка) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПолучитьНовостиСНапоминаниями Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПолучитьНовостиСНапоминаниями(
			ОченьВажныеНовости,
			ВажныеНовости,
			ДополнительныеПараметры,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.РазрешитьАвтоматическийРасчетЗначенийКатегорий
//
Процедура РазрешитьАвтоматическийРасчетЗначенийКатегорий(АвтоматическийРасчет) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().РазрешитьАвтоматическийРасчетЗначенийКатегорий Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.РазрешитьАвтоматическийРасчетЗначенийКатегорий(АвтоматическийРасчет);
	КонецЕсли;

КонецПроцедуры

// См. ОбработкаНовостейПереопределяемый.РассчитатьОтборПоКатегории
//
Процедура РассчитатьОтборПоКатегории(
			КатегорияНовостей,
			КодКатегорииНовостей,
			ЗначениеКатегорииНовостей,
			РезультатРасчета,
			ОбластьДанных = Неопределено,
			КонтекстВыполнения = Неопределено,
			СтандартнаяОбработка = Истина) Экспорт

	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().РассчитатьОтборПоКатегории Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.РассчитатьОтборПоКатегории(
			КатегорияНовостей,
			КодКатегорииНовостей,
			ЗначениеКатегорииНовостей,
			РезультатРасчета,
			ОбластьДанных,
			КонтекстВыполнения,
			СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОФД

// См. ОФДПереопределяемый.ПриОпределенииНастроекИнтеграции.
//
Процедура ПриОпределенииНастроекИнтеграции(Настройки) Экспорт
	
	Если ИнтеграцияПодсистемБИППовтИсп.ПодпискиБСП().ПриОпределенииНастроекИнтеграции Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииНастроекИнтеграции(Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет события, на которые могут подписаться другие библиотеки.
//
// Возвращаемое значение:
//   События - Структура - Ключами свойств структуры являются имена событий, на которые
//             могут быть подписаны библиотеки.
//
Функция СобытияБИП() Экспорт
	
	События = Новый Структура;
	
	// Базовая функциональность БИП
	События.Вставить("ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации", Ложь);
	События.Вставить("ПриИзмененииДанныхАутентификацииИнтернетПоддержки", Ложь);
	События.Вставить("ПриОпределенииНомераВерсииПрограммы", Ложь);
	
	// Монитор Портала 1С:ИТС
	События.Вставить("ПриОпределенииОбщихПараметровМонитора", Ложь);
	События.Вставить("ПриСозданииФормыМонитора", Ложь);
	События.Вставить("ПередПолучениемДанныхМонитора", Ложь);
	События.Вставить("ПриПолученииДополнительныхДанныхМонитора", Ложь);
	События.Вставить("ОтобразитьДополнительныеДанныеМонитора", Ложь);
	События.Вставить("ПриФормированииТекстовПредупреждений", Ложь);
	События.Вставить("ПриЗаполненииПараметровСервисов", Ложь);
	
	// Настройки программы
	События.Вставить("ПриСозданииФормыИнтернетПоддержкаИСервисы", Ложь);
	
	// Облачные кассы
	События.Вставить("ПриЗагрузкеСтатусаОперацииОблачнойКассы", Ложь);
	
	// Онлайн оплаты
	События.Вставить("ПриОпределенииДополнительныхНастроекОнлайнОплаты", Ложь);
	События.Вставить("ПриСозданииФормыОнлайнОплаты", Ложь);
	События.Вставить("ПередНачаломРедактированияДополнительныхНастроекОнлайнОплаты", Ложь);
	События.Вставить("ПередОкончаниемРедактированияДополнительныхНастроекОнлайнОплат", Ложь);
	События.Вставить("СоответствиеРеквизитовОснованийПлатежа", Ложь);
	События.Вставить("ПриОпределенииОснованийПлатежа", Ложь);
	События.Вставить("ПриПроверкеЗаполненияОснованияПлатежа", Ложь);
	События.Вставить("ЗаполнитьРеквизитыОрганизации", Ложь);
	События.Вставить("ИспользуетсяОднаОрганизация", Ложь);
	События.Вставить("ИмяПрикладногоСправочникаОрганизации", Ложь);
	События.Вставить("ЗаполнитьДанныеОснованияПлатежа", Ложь);
	События.Вставить("ЗаполнитьИдентификаторОснованияПлатежа", Ложь);
	События.Вставить("ЗаполнитьКонтактнуюИнформациюОснованияПлатежа", Ложь);
	События.Вставить("ПриФормированииСпискаПолучателейСообщения", Ложь);
	События.Вставить("ПриОпределенииПараметровОтправкиСообщенийОнлайнОплат", Ложь);
	События.Вставить("ПриЗагрузкеОперацийПоОнлайнОплате", Ложь);
	События.Вставить("ПроверитьИспользованиеШаблоновСообщенийОнлайнОплат", Ложь);
	События.Вставить("ПредопределенныеШаблоныСообщенийОнлайнОплат", Ложь);
	События.Вставить("ПредопределенныеШаблоныСообщенийОнлайнОплатПоТипам", Ложь);
	
	// ОФД
	События.Вставить("ПриОпределенииНастроекИнтеграции", Ложь);
	
	// Подключение сервисов сопровождения
	События.Вставить("ПриОпределенииСервисовСопровождения", Ложь);
	
	// Получение обновления программы
	События.Вставить("ПриОпределенииПараметровПолученияОбновлений", Ложь);
	
	// Поставляемые настройки
	События.Вставить("ПриДобавленииНастроек", Ложь);
	События.Вставить("ПриЗагрузкеФайлаНастройки", Ложь);
	
	// Работа с классификаторами
	События.Вставить("ПриДобавленииКлассификаторов", Ложь);
	События.Вставить("ПриОпределенииНачальногоНомераВерсииКлассификатора", Ложь);
	События.Вставить("ПриЗагрузкеКлассификатора", Ложь);
	События.Вставить("ПриОбработкеОбластиДанных", Ложь);
	События.Вставить("ПриОпределенииИдентификаторовКлассификаторов", Ложь);
	
	// Подключение 1С-Такском
	События.Вставить("ИспользоватьСервис1СТакском", Ложь);
	События.Вставить("ЗаполнитьРегистрационныеДанныеОрганизации", Ложь);
	
	// Получение внешних компонент
	События.Вставить("ПриОпределенииИспользуемыхВерсийВнешнихКомпонент", Ложь);
	
	// Базовая функциональность СБП
	События.Вставить("ПриОпределенииНастроекПодключения", Ложь);
	События.Вставить("ПриЗаписиНастроекПодключения", Ложь);
	События.Вставить("ПриНастройкеЭлементовФормыПодключения", Ложь);
	События.Вставить("ПриЗаполненииФормыНастройкиПодключения", Ложь);
	
	// Переводы СБП (c2b)
	События.Вставить("ПриФормированииЗаказаНаОплатуСБП", Ложь);
	События.Вставить("ПриФормированииЗаказаНаЧастичнуюОплатуСБП", Ложь);
	События.Вставить("ПриФормированииЗаказаНаВозвратСБП", Ложь);
	События.Вставить("ПриЗагрузкеСтатусаОперации", Ложь);
	События.Вставить("ПриОпределенииДоступностиПодключенияПоДокументуОперации", Ложь);
	События.Вставить("ПриОпределенииОбъектовСКомандамиСБП", Ложь);
	События.Вставить("ПриОпределенииПараметровПодключенияДокументаОперации", Ложь);
	События.Вставить("ПриФормированииСпискаПолучателейСообщенияСБП", Ложь);
	События.Вставить("ПриОпределенииПредопределенныхШаблоновСообщенийСБППоТипам", Ложь);
	События.Вставить("ПриПроверкеИспользованияШаблоновСообщенийСБП", Ложь);
	События.Вставить("ПриСозданииНаСервереФормыQRКода", Ложь);
	События.Вставить("ПриОпределенииПараметровОтправкиСообщенийСБП", Ложь);
	События.Вставить("ПриСозданииНаСервереФормыПодключенияСсылки", Ложь);
	События.Вставить("ПриОпределенииДанныхКассовыхСсылок", Ложь);
	
	// Сверка взаиморасчетов СБП (c2b)
	События.Вставить("ПриНастройкеСверкиВзаиморасчетов", Ложь);
	События.Вставить("ПриОпределенииОборотов", Ложь);
	События.Вставить("ПриСписанииРасходовКомиссии", Ложь);
	События.Вставить("ПриОпределенииДанныхОпераций", Ложь);
	
	// Сообщения в службу технической поддержки
	События.Вставить("ПриОпределенииХостаСервисовТехническойПоддержки", Ложь);
	
	// СПАРК Риски
	События.Вставить("ПриОпределенииСвойствСправочниковКонтрагентов", Ложь);
	События.Вставить("КонтрагентыДляМониторинга", Ложь);
	События.Вставить("ПараметрыОтображенияОтчетов", Ложь);
	События.Вставить("ПриСозданииНаСервереСПАРК", Ложь);
	События.Вставить("ВремяОжиданияФоновогоЗадания", Ложь);
	События.Вставить("ПриФормированииОтчетаНадежностьВходящегоНДС", Ложь);
	События.Вставить("ПриОпределенииИспользуемыхВерсийВнешнихКомпонент", Ложь);
	События.Вставить("ПриФормированииНадежностьДебиторов", Ложь);
	События.Вставить("ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц", Ложь);
	События.Вставить("ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей", Ложь);
	
	// Получение регламентированных отчетов
	События.Вставить("ПриДобавленииВидовРегламентированныхОтчетов", Ложь);
	События.Вставить("ПриЗагрузкеРегламентированногоОтчета", Ложь);
	
	// Новости (сервер)
	События.Вставить("ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи", Ложь);
	События.Вставить("ДополнительноОбработатьМассивКонтекстныхНовостей", Ложь);
	События.Вставить("ДополнительноОбработатьНовостиПослеПолучения", Ложь);
	События.Вставить("ДополнительноОбработатьНовостьПослеПолученияПередЗаписью", Ложь);
	События.Вставить("ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи", Ложь);
	События.Вставить("ДополнительноОбработатьТаблицуКонтекстныхНовостей", Ложь);
	События.Вставить("ДополнительноОбработатьТекстНовостиПередПоказом", Ложь);
	События.Вставить("ДополнительноОбработатьТекстСпискаНовостейПередПоказом", Ложь);
	События.Вставить("ДополнительноОбработатьФормуКонтекстныхНовостейПриСозданииНаСервере", Ложь);
	События.Вставить("ДополнительноОбработатьФормуНовостиПриСозданииНаСервере", Ложь);
	События.Вставить("ДополнительноОбработатьФормуОченьВажныхНовостейПриСозданииНаСервере", Ложь);
	События.Вставить("ДополнительноОбработатьФормуПриСозданииНаСервере", Ложь);
	События.Вставить("ДополнительноОбработатьФормуПросмотраНовостейДляРабочегоСтолаПриСозданииНаСервере", Ложь);
	События.Вставить("ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере", Ложь);
	События.Вставить("ДополнительноПодготовитьПараметрыНавигационнойСсылки", Ложь);
	События.Вставить("ДополнительноУстановитьУсловноеОформлениеФормыКонтекстныхНовостей", Ложь);
	События.Вставить("ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей", Ложь);
	События.Вставить("ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей", Ложь);
	События.Вставить("ЗаполнитьПрограммныеЗначенияКатегорий_ДляОбластиДанных", Ложь);
	События.Вставить("ЗаполнитьПрограммныеЗначенияКатегорий_Общие", Ложь);
	События.Вставить("ЗначениеПредопределеннойКатегории", Ложь);
	События.Вставить("ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск", Ложь);
	События.Вставить("ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию", Ложь);
	События.Вставить("ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск", Ложь);
	События.Вставить("ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию", Ложь);
	События.Вставить("ОбработатьЗаписьПользователя", Ложь);
	События.Вставить("ПанельКонтекстныхНовостей_ВыбратьНовости", Ложь);
	События.Вставить("ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей", Ложь);
	События.Вставить("ПереопределитьСбросСостоянияНовостиПриЗаписи", Ложь);
	События.Вставить("ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей", Ложь);
	События.Вставить("ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов", Ложь);
	События.Вставить("ПолучитьДополнительныеСтандартныеЗначенияНовостей", Ложь);
	События.Вставить("ПолучитьНовостиСНапоминаниями", Ложь);
	События.Вставить("ПриНачалеРаботыСистемы", Ложь);
	События.Вставить("ПриПереходеСДругойПрограммы", Ложь);
	События.Вставить("РазрешитьАвтоматическийРасчетЗначенийКатегорий", Ложь);
	События.Вставить("РассчитатьОтборПоКатегории", Ложь);
	
	Возврат События;
	
КонецФункции

// Возвращает описание поставщика "Портал 1С:ИТС" для заполнения списка услуг
// в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
// Поставщик добавляется в список поставщиков.
//
// Параметры:
//	ПоставщикиУслуг - Массив - массив элементов типа Структура - описание поставщиков.
//		Подробное описание параметра см. в процедуре ПриФормированииСпискаУслуг.
//
// Возвращаемое значение:
//	Структура - см. процедуру ПриФормированииСпискаУслуг,
//		описание параметра ПоставщикиУслуг.
//
// Пример:
//	// Использование в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//	ПоставщикПортал1СИТС =
//		ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
//	НоваяУслуга = Новый Структура;
//	НоваяУслуга.Вставить("Идентификатор", <Идентификатор услуги>);
//	НоваяУслуга.Вставить("Наименование" , <Наименование услуги>);
//	НоваяУслуга.Вставить("ТипУслуги"    , <Тип услуги>);
//	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
//
Функция ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг)
	
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для Каждого ТекущийПоставщик Из ПоставщикиУслуг Цикл
		Если ТекущийПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			Возврат ТекущийПоставщик;
		КонецЕсли;
	КонецЦикла;
	
	// Поставщика еще нет в списке - добавить нового поставщика.
	ПоставщикПортал1СИТС = Новый Структура;
	ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
	ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
	ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
	ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	
	Возврат ПоставщикПортал1СИТС;
	
КонецФункции

#КонецОбласти
