// @strict-types
#Область ПрограммныйИнтерфейс

// Генерация текста события, для записиси в журнал регистрации
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - вид электронной торговой площадки
// 
// Возвращаемое значение:
// 	Строка - текст события
//  
Функция СобытиеЖурналаРегистрации(ВидЭТП) Экспорт

	ПредставлениеВидаЭТП = XMLСтрока(ВидЭТП);

	ШаблонТекстаСобытия = "ru = 'Интеграция с %1'";
	ТекстСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(ШаблонТекстаСобытия,
		ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеВидаЭТП);

	Возврат ТекстСобытия;

КонецФункции

// Возвращает список используемых подсистемой префиксов настроек.
// Параметры:
//   ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - электронная торговая площадка.
//
// Возвращаемое значение:
//   Структура - список используемых подсистемой префиксов настроек. Содержит свойства:
//		* НастройкиСервиса - строка - идентификатор хранения настроек в безопасном хранилище
//		* КлючДоступа - строка - идентификатор хранения ключей доступа в безопасном хранилище
//
Функция ПрефиксыСервиса(ВидЭТП) Экспорт

	ПредставлениеВидаЭТП = XMLСтрока(ВидЭТП);

	Префиксы = Новый Структура;
	Префиксы.Вставить("НастройкиСервиса", ПредставлениеВидаЭТП + "Setup_");
	Префиксы.Вставить("КлючДоступа", ПредставлениеВидаЭТП + "AccessKey_");

	Возврат Префиксы;

КонецФункции

// Проверяет возможность установки соединения с электронной торговой площадкой.
//
// Параметры:
//   ДанныеДляПодключения - структура - данные для подключения. Содержит свойства: 
//   	* УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись, для которой проверяется подключение.
//   	* Организация - СправочникСсылка.Организации - необязателен при заполненном свойстве УчетнаяЗапись.
//   	* ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - необязателен при заполненном свойстве УчетнаяЗапись.
//   	* KeyAPI - строка - ключ, используемый для авторизации для поставщиков(необязателен при заполненном свойстве УчетнаяЗапись).
// 
// Возвращаемое значение:
//   Структура - содержит свойства:
//     * КодСостояния - Число - код состояния (ответа) выполнения запроса HTTP-сервера, 
//                        см. http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html .
//     * ТекстОшибки  - Строка - описание ошибки при выполнении HTTP-запроса.
//
Функция ПроверитьСвязьСЭТПБидзаарДляПоставщиков(ДанныеДляПодключения) Экспорт

	Результат = Новый Структура("КодСостояния, ТекстОшибки", 200, "");

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();
	ДанныеДляПодключения.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики;

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеАвторизаци, ДанныеДляПодключения);
	КонецЕсли;
	KeyAPI = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "KeyAPI", "");

	Если Не ЗначениеЗаполнено(ВидЭТП) Или Не ЗначениеЗаполнено(KeyAPI) Тогда
		Результат.КодСостояния = 401;
		Результат.ТекстОшибки = НСтр(
			"ru = 'Не удалось авторизоваться, проверьте корректность настроек подключения'");
		Возврат Результат;
	КонецЕсли;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("KeyAPI", KeyAPI);
	ПараметрыЗапроса.Вставить("ВариантВыгрузки", -1);
	
	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ЗапросСервиса = ЗапросСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса, Истина);
	
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Результат.КодСостояния = РезультатЗапроса.КодСостояния;

	Если Результат.КодСостояния = 0 Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	ИначеЕсли Результат.КодСостояния = 200 Тогда
		Результат.ТекстОшибки = "OK";
	ИначеЕсли Результат.КодСостояния = 301 Тогда
		Результат.ТекстОшибки = "Moved Permanently";
	ИначеЕсли Результат.КодСостояния = 400 Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось выгрузить данные, проверьте корректность настроек подключения'");
	ИначеЕсли Результат.КодСостояния = 401 Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось выгрузить данные, проверьте корректность настроек подключения'");
	ИначеЕсли Результат.КодСостояния = 403 Тогда
		Результат.ТекстОшибки = "Forbidden";
	ИначеЕсли Результат.КодСостояния = 404 Тогда
		Результат.ТекстОшибки = "Not Found";
	ИначеЕсли Результат.КодСостояния = 409 Тогда
		Результат.ТекстОшибки = "Conflict";
	ИначеЕсли Результат.КодСостояния = 500 Тогда
		Результат.ТекстОшибки = "Internal Server Error";
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверяет возможность установки соединения с электронной торговой площадкой
// 
// Параметры:
//  ДанныеДляПодключения - структура - Данные для подключения. Содержит свойства:
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись, под которой происходит подключение к ЭТП
//  * Источник - Произвольный - Объект, который должен получить оповещение с результатом выполнения, обязательный при выполнение через длительную операцию
//  * ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - Вид ЭТП, который должен получить оповещение с
//  результатом выполнения, обязательный при выполнение через длительную операцию
//  АдресРезультата - Строка - Адрес результата, обязательный при выполнение через длительную операцию
//
// Возвращаемое значение:
//  Структура - результат проверки связи с ЭТП. Содержит свойства:
// * КодСостояния - число - код состояния http
// * ТекстОшибки - строка - описание возникшей ошибки
Функция ПроверитьСвязьСЭТПБидзаарДляПокупателей(ДанныеДляПодключения, АдресРезультата = "") Экспорт

	Результат = Новый Структура("КодСостояния, ТекстОшибки", 200, "");

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();
	ДанныеДляПодключения.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись); // Ключи доступа для учетной записи

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеАвторизаци, ДанныеДляПодключения);
	КонецЕсли;

	Client_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "Client_id", "");
	Client_secret = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "Client_secret", "");

	Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
		Результат.КодСостояния = 401;
		Результат.ТекстОшибки = НСтр(
			"ru = 'Не удалось авторизоваться, проверьте корректность настроек подключения'");
		Возврат Результат;
	КонецЕсли;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Client_id", Client_id);
	ПараметрыЗапроса.Вставить("Client_secret", Client_secret);

	//Параметры, необходимые для генерации и выполнения http-запроса 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ЗапросСервиса = ЗапросСервисаПолучитьТокенДоступаБидзаар(ПараметрыЗапроса);
	
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Результат.КодСостояния = РезультатЗапроса.КодСостояния;
	
	Если РезультатЗапроса.КодСостояния = 0 Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Иначе
		Результат.ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Отправляет товары и услуги на электронную торговую площадку
//
// Параметры:
// 	ПараметрыЗапроса - Структура - данные для формирования запроса. Содержит свойства:
//  * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись подключения к сервису.
//  * ЛимитПозицийНаИтерацию - Число - ограничения выгрузки публикуемых данных на одну итерацию.
//  * Список - массив - список ключевых реквизитов данных, по которым необходимо произвести выгрузку.
//	* ВариантВыгрузки - число - управляет способом получения данных для выгрузки
//		-1 - выгрузить пустой список данных
//		 1 - выгрузить данные, находящиеся в статусе "К публикации" 
//		 2 - выгрузить данные по указанным в "Список" ключевым реквизитам
//		 любое другое чило - выгрузить все имеющиеся данные, не смотря на их статус.
//	АдресРезультата - Строка - Адрес временного хранилища, в которм будет размещен результат выполнения
//
Процедура ПубликацияТоваровИУслугБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт

	РезультатПубликации = Новый Структура("КоличествоОпубликованныхПозиций, ТекстОшибки", 0, "");

	УстановитьПривилегированныйРежим(Истина);

	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПустаяСсылка();
	ПараметрыЗапроса.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	ВидЭТП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидЭТП");

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
	KeyAPI = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "KeyAPI", "");
	Если Не ЗначениеЗаполнено(KeyAPI) Тогда
		РезультатПубликации.ТекстОшибки = НСтр(
			"ru = 'Не удалось выгрузить данные, введите уникальный ключ API в настройках подключения организации к Бидзаар'");
		ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
		Возврат;
	КонецЕсли;

	ДанныеДляПодключения = Новый Структура("УчетнаяЗапись, ВидЭТП", УчетнаяЗапись, ВидЭТП);
	РезультатПроверкиСвязи = ПроверитьСвязьСЭТПБидзаарДляПоставщиков(ДанныеДляПодключения);

	Если РезультатПроверкиСвязи.КодСостояния <> 200 Тогда
		РезультатПроверкиСвязи.Свойство("ТекстОшибки", РезультатПроверкиСвязи.ТекстОшибки);
		ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	ПараметрыЗапроса.Вставить("KeyAPI", KeyAPI);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	ЕстьДанныеДляОбработки = Истина;
	ПараметрыЗапроса.Вставить("НачалоВыгрузки", ТекущаяДатаСеанса());

	Пока ЕстьДанныеДляОбработки Цикл

		ЗапросСервиса = ЗапросСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса, ЕстьДанныеДляОбработки);

		ЗапросСервиса.Вставить("ВидЭТП", ВидЭТП);

		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

		РезультатЗапроса.Свойство("ТекстОшибки", РезультатПубликации.ТекстОшибки);
		Если ЗначениеЗаполнено(РезультатПубликации.ТекстОшибки) Тогда
			ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
			Возврат;
		КонецЕсли;

		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			КоличествоОпубликованныхПозиций = ОбработатьРезультатЗапросаПубликацияТоваровИУслугБидзаар(
				ЗапросСервиса.ОбработкаРезультата);
		КонецЕсли;

		РезультатПубликации.КоличествоОпубликованныхПозиций = РезультатПубликации.КоличествоОпубликованныхПозиций
			+ КоличествоОпубликованныхПозиций;

	КонецЦикла;

	ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);

КонецПроцедуры

// Публикация запроса коммерческих предложений в ЭТП Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//  	* ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - публикуемый документ
//  	* ПубликоватьПрисоединенныеФайлы - булево - указывает необходимость публикации присоединенных к документу файлов
//  АдресРезультата - строка - Адрес временного хранилища в которое помещена структура РезультатПубликации. Содержит свойства:
//		* Идентификатор - строка - идентификатор публикации запроса коммерческих предложений на ЭТП
//		* ТекстОшибки - строка - текст ошибки
//
Процедура ПубликацияЗапросаКоммерческихПредложенийБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт

	//Данные для оповещения публикуемого документа о результате публикации
	СостояниеДокумента = Новый Структура;
	СостояниеДокумента.Вставить("СостояниеСинхронизации", Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.ПустаяСсылка());
	СостояниеДокумента.Вставить("Детализация", Новый Соответствие);

	РезультатПубликации = Новый Структура;
	РезультатПубликации.Вставить("Идентификатор", "");
	РезультатПубликации.Вставить("СостояниеДокумента", СостояниеДокумента);
	РезультатПубликации.Вставить("ТекстОшибки", "");

	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	СобытиеЖР = СобытиеЖурналаРегистрации(ВидЭТП);

	РеквизитыЗапросаКП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗапроса.ЗапросКоммерческихПредложений,
		"Организация, МенеджерEmail, СписокПолучателейЗапроса");

	ПланПубликации = ПланПубликацииЗапросаКоммерческихПредложенийБидзаар(ПараметрыЗапроса.ЗапросКоммерческихПредложений, РеквизитыЗапросаКП.Организация);
	Если ПланПубликации = Неопределено Тогда
		РезультатПубликации.ТекстОшибки = "Не удалось создать служебные объекты публикации";
		СостояниеДокумента.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;

		ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
		Возврат;
	КонецЕсли;

	//Получение данных для авторизации
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(ВидЭТП,
		РеквизитыЗапросаКП.Организация);

	ДанныеАвторизаци = ПолучитьОбновитьДанныеАвторизацииИДоступаБидзаар(УчетнаяЗапись, РеквизитыЗапросаКП.МенеджерEmail);
	
	Если ДанныеАвторизаци.ТекстОшибки <> "" Тогда
		РезультатПубликации.ТекстОшибки = ДанныеАвторизаци.ТекстОшибки;
		ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
		Возврат;
	КонецЕсли;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса.Вставить("client_id", ДанныеАвторизаци.Client_id);
	ПараметрыЗапроса.Вставить("client_secret", ДанныеАвторизаци.Client_secret);
	ПараметрыЗапроса.Вставить("ТокенДоступа", ДанныеАвторизаци.ТокенДоступа);
	ПараметрыЗапроса.Вставить("UserEmail", РеквизитыЗапросаКП.МенеджерEmail);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	//Публикация файлов и получение идентификаторов публикаций для их последующей привязке к публикации ЗКП 
	Если ПараметрыЗапроса.ПубликоватьПрисоединенныеФайлы Тогда
		АдресРезультатаПубликацииДокументов = ПоместитьВоВременноеХранилище("");

		ПараметрыЗапросаПубликацииДокументов = Новый Структура;
		ПараметрыЗапросаПубликацииДокументов.Вставить("ОписанияФайлов",
			ОписанияФайловДляПубликацииЗапросаКоммерческихПредложенийБидзаар(
			ПараметрыЗапроса.ЗапросКоммерческихПредложений));
		ПараметрыЗапросаПубликацииДокументов.Вставить("МенеджерEmail", РеквизитыЗапросаКП.МенеджерEmail);
		ПараметрыЗапросаПубликацииДокументов.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыЗапросаПубликацииДокументов.Вставить("ТокенДоступа", ПараметрыЗапроса.ТокенДоступа);

		ПубликацияФайловБидзаар(ПараметрыЗапросаПубликацииДокументов, АдресРезультатаПубликацииДокументов);
		РезультатПубликацииФайлов = ПолучитьИзВременногоХранилища(АдресРезультатаПубликацииДокументов);
		Если ТипЗнч(РезультатПубликацииФайлов) = Тип("Структура") Тогда
			ПараметрыЗапроса.Вставить("ОписанияФайловСервиса", РезультатПубликацииФайлов.ОписанияФайловСервиса);
		КонецЕсли;
	КонецЕсли;

	//Вызов http-сервиса публикации запроса коммерческих предложений
	ЗапросСервиса = ЗапросСервисаПубликацияЗапросаКоммерческихПредложенийБидзаар(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда

		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);

		Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
			РезультатПубликации.ТекстОшибки = "";
			ДанныеОтвета.Свойство("id", РезультатПубликации.Идентификатор);
		Иначе
			РезультатПубликации.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;

	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса, ПараметрыЗапроса);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , РезультатЗапроса.ТекстОтвета);

		РезультатПубликации.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	//Изменение состояния документа
	Если РезультатПубликации.ТекстОшибки = "" Тогда

		ПланПубликации.ИдентификаторСервиса   = РезультатПубликации.Идентификатор;
		ПланПубликации.КлючИдемпотентности    = "";
		ПланПубликации.ПредставлениеОшибки    = "";
		ПланПубликации.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;
		Попытка
			ПланПубликации.Записать();
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;

		СостояниеДокумента.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена;

		ОбработчикиСобытийПереопределяемые = КоммерческиеПредложенияСлужебныйПовтИсп.ЗапросКоммерческихПредложенийОбработчикиСобытийПереопределяемые(
		ПараметрыЗапроса.ЗапросКоммерческихПредложений);

		Если ОбработчикиСобытийПереопределяемые.ПослеВыполненияСинхронизации Тогда
			СостояниеДокумента = Новый Структура;
			СостояниеДокумента.Вставить("Документ", ПараметрыЗапроса.ЗапросКоммерческихПредложений);
			СостояниеДокумента.Вставить("СостояниеСинхронизации",
				Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполнена);

			ПолноеИмя = ПараметрыЗапроса.ЗапросКоммерческихПредложений.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			МенеджерОбъекта.ПослеВыполненияСинхронизации(СостояниеДокумента);
		КонецЕсли;

	Иначе
		ПланПубликации.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
		ПланПубликации.ПредставлениеОшибки    = РезультатПубликации.ТекстОшибки;
		Попытка
			ПланПубликации.Записать();
		Исключение
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;

		СостояниеДокумента.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка;
	КонецЕсли;

	//Приглашение участников
	АдресХраненияУчастников = ПоместитьВоВременноеХранилище("");
	
	ПараметрыЗапросаПришлашениеУчастников = Новый Структура;
	ПараметрыЗапросаПришлашениеУчастников.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыЗапросаПришлашениеУчастников.Вставить("МенеджерEmail", РеквизитыЗапросаКП.МенеджерEmail);
	ПараметрыЗапросаПришлашениеУчастников.Вставить("ИдентификаторЗапроса", РезультатПубликации.Идентификатор);
	ПараметрыЗапросаПришлашениеУчастников.Вставить("ТокенДоступа", ПараметрыЗапроса.ТокенДоступа);
	
	ЗапросОписанияУчастников = Новый Запрос;
	ЗапросОписанияУчастников.Текст =
	"ВЫБРАТЬ
	|	ПриглашаемыеУчастники.Контрагент КАК Контрагент,
	|	ПриглашаемыеУчастники.Контрагент.ИНН КАК ИНН,
	|	ПриглашаемыеУчастники.Контрагент.НаименованиеПолное КАК Наименование
	|ИЗ
	|	Документ.ЗапросКоммерческихПредложенийПоставщиков.СписокПолучателейЗапроса КАК ПриглашаемыеУчастники
	|ГДЕ
	|	ПриглашаемыеУчастники.Ссылка = &Ссылка";
	
	ЗапросОписанияУчастников.УстановитьПараметр("Ссылка", ПараметрыЗапроса.ЗапросКоммерческихПредложений);
	
	РезультатЗапросаОписанияУчастников = ЗапросОписанияУчастников.Выполнить();
	
	Если Не РезультатЗапросаОписанияУчастников.Пустой() Тогда
		
		ОписанияУчастников = Новый Массив;	//массив из структура
		Выборка = РезультатЗапросаОписанияУчастников.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
			ОтборКИ.ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			ОтборКИ.Дата = Дата(1, 1, 1);
			КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Выборка.Контрагент, ОтборКИ);

			СтрокаКИ = КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
			Если СтрокаКИ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеУчастника = Новый Структура;
	
			ОписаниеУчастника.Вставить("ИНН", Выборка.ИНН);
			ОписаниеУчастника.Вставить("email", СтрокаКИ.Представление);
			ОписаниеУчастника.Вставить("Наименование", Выборка.Наименование);
		
			ОписанияУчастников.Добавить(ОписаниеУчастника);
		КонецЦикла;
		
		Если ОписанияУчастников.Количество() > 0 Тогда
			ПараметрыЗапросаПришлашениеУчастников.Вставить("ОписанияУчастников", ОписанияУчастников);
			ПриглашениеУчастниковБидзаар(ПараметрыЗапросаПришлашениеУчастников, АдресХраненияУчастников);
		КонецЕсли;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);

КонецПроцедуры

// Публикация файлов на ЭТП Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса.Содержит свойства:
//   * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись ЭТП
//   * ОписанияФайлов - массив из структура - данные публикуемых файлов
//   * МенеджерEmail - строка - email пользователя площадки Бидзаар
//   * ТокенДоступа - строка - токен доступа к сервису Бидзаар. Необязательный
//  АдресРезультата - строка - Адрес временного хранилища в которое помещена структура РезультатПубликации. Содержит свойства:
//		*ОписанияФайловСервиса - структура - описания опубликованных файлов. Содержит свойства: 
//		 ** Имя - строка - Имя файла
//		 ** Расширение - строка - расширение файла
//		 ** Идентификатор - строка - идентификатор файла на ЭТП
//		* ТекстОшибки - строка - текст ошибки
//
Процедура ПубликацияФайловБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	
	//Описание возвращаемого значения
	ОписанияОпубликованныхФайлов = Новый Массив; // Массив из структура

	РезультатПубликации = Новый Структура;
	РезультатПубликации.Вставить("ОписанияФайловСервиса", ОписанияОпубликованныхФайлов);
	РезультатПубликации.Вставить("ТекстОшибки", "");
	
	//Получение входящих параметров
	УчетнаяЗапись = ПараметрыЗапроса.УчетнаяЗапись;
	МенеджерEmail = ПараметрыЗапроса.МенеджерEmail;

	//Проверка наличия токена доступа
	ТокенДоступа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТокенДоступа", "");

	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;

	Если ТокенДоступа = "" Тогда
		ДанныеАвторизаци = ПолучитьОбновитьДанныеАвторизацииИДоступаБидзаар(УчетнаяЗапись, МенеджерEmail);
	
		Если ДанныеАвторизаци.ТекстОшибки <> "" Тогда
			РезультатПубликации.ТекстОшибки = ДанныеАвторизаци.ТекстОшибки;
			ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("ТокенДоступа", ДанныеАвторизаци.ТокенДоступа);
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("UserEmail", МенеджерEmail);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	//Форомирование текста и вызов http-запроса
	ЗапросСервиса = ЗапросСервисаПубликацияФайловБидзаар(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда

		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);

		Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
			РезультатПубликации.ТекстОшибки = "";

			Для Каждого ДанныеФайла Из ДанныеОтвета Цикл
				ОписаниеОпубликованногоФайла = НовыйОписаниеОпубликованногоФайлаБидзаар();
				ЗаполнитьЗначенияСвойств(ОписаниеОпубликованногоФайла, ДанныеФайла);
				ОписанияОпубликованныхФайлов.Добавить(ОписаниеОпубликованногоФайла);
			КонецЦикла;

		Иначе
			РезультатПубликации.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;
	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
			РезультатЗапроса.ТекстОтвета);

		РезультатПубликации.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);

КонецПроцедуры

// Получение файлов коммерческих предложений из ЭТП Бидзаар
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//  * ОписанияФайлов - соответствие из КлючИЗначение - информация о загружаемых файлах. Содержит КлючИЗначение: 
//  ** Ключ - ДокументСсылка.КоммерческоеПредложениеПоставщика - документ в который будут вложены файлы
//  ** Значение - массив из строка - идентификаторы файлов коммерческого предложения 
// 
Процедура ПолучениеФайловКоммерческихПредложенийБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеПоставщика.Ссылка КАК ВладелецФайла,
	|	КоммерческоеПредложениеПоставщика.Организация КАК Организация,
	|	КоммерческоеПредложениеПоставщика.ДокументОснование.МенеджерEmail КАК МенеджерEmail
	|ИЗ
	|	Документ.КоммерческоеПредложениеПоставщика КАК КоммерческоеПредложениеПоставщика
	|ГДЕ
	|	КоммерческоеПредложениеПоставщика.Ссылка В (&ДокументыВладельцы)
	|ИТОГИ
	|ПО
	|	Организация";

	ДокументыВладельцы = Новый Массив;

	Для Каждого ОписаниеФайла Из ПараметрыЗапроса.ОписанияФайлов Цикл
		ДокументыВладельцы.Добавить(ОписаниеФайла.Ключ);
	КонецЦикла;

	Запрос.УстановитьПараметр("ДокументыВладельцы", ДокументыВладельцы);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(
			Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели, ВыборкаОрганизация.Организация);

		Выборка = ВыборкаОрганизация.Выбрать();
		Пока Выборка.Следующий() Цикл

			ИдентификаторыФайлов = ПараметрыЗапроса.ОписанияФайлов.Получить(Выборка.ВладелецФайла);

			Для Каждого ИдентификаторФайла Из ИдентификаторыФайлов Цикл
				ПараметрыЗапросаПолученияФайла = Новый Структура;
				ПараметрыЗапросаПолученияФайла.Вставить("УчетнаяЗапись", УчетнаяЗапись);
				ПараметрыЗапросаПолученияФайла.Вставить("МенеджерEmail", Выборка.МенеджерEmail);
				ПараметрыЗапросаПолученияФайла.Вставить("ИдентификаторФайла", ИдентификаторФайла);

				АдресРезультатаПолученияФайла = ПоместитьВоВременноеХранилище("");

				ПолучениеФайлаБидзаар(ПараметрыЗапросаПолученияФайла, АдресРезультатаПолученияФайла);

				РезультатПолученияФайла = ПолучитьИзВременногоХранилища(АдресРезультатаПолученияФайла);

				Если РезультатПолученияФайла.ТекстОшибки = "" Тогда

					ОписаниеФайлаСервиса = РезультатПолученияФайла.ОписаниеФайлаСервиса;

					ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
					ПараметрыФайла.ВладелецФайлов = Выборка.ВладелецФайла;
					ПараметрыФайла.ИмяБезРасширения = ОписаниеФайлаСервиса.Имя;
					ПараметрыФайла.РасширениеБезТочки = ОписаниеФайлаСервиса.Расширение;
					АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Base64Значение(
						ОписаниеФайлаСервиса.Данные));
					РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВременногоХранилищаФайла);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Получение файла Бидзаар
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса.Содержит свойства:
//   *УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись ЭТП
//   *МенеджерEmail - строка - email пользователя площадки Бидзаар
//   *ИдентифифкаторФайла - строка - идентификатор файла в Бидзаар.
//  АдресРезультата - Строка - Адрес временного хранилища в которое помещена структура РезультатПубликации. Содержит свойства:
//		*ОписанияФайловСервиса - структура - описания опубликованных текстовых файлов. Содержит свойства: 
//		 *Имя - Строка - Имя файла
//		 *Расширение - строка - расширение файла
//		 *Данные - строка - представление данных файла в формате base64 
//		*ТекстОшибки - строка - текст ошибки
//
Процедура ПолучениеФайлаБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	
	ОписаниеФайлаСервиса = Новый Структура;
	ОписаниеФайлаСервиса.Вставить("Имя", "");
	ОписаниеФайлаСервиса.Вставить("Расширение", "");
	ОписаниеФайлаСервиса.Вставить("Данные", "");
	
	Результат = Новый Структура("ОписаниеФайлаСервиса, ТекстОшибки", ОписаниеФайлаСервиса, "");
	
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	СобытиеЖР = СобытиеЖурналаРегистрации(ВидЭТП);
	
	//Получение входящих параметров
	УчетнаяЗапись = ПараметрыЗапроса.УчетнаяЗапись;
	МенеджерEmail = ПараметрыЗапроса.МенеджерEmail;

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
	Client_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_id", "");
	Client_secret = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "Client_secret", "");

	Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить данные, введите %1 и %2 в настройках подключения организации к Бидзаар'"),
			"client_id", "client_secret");

		Результат.ТекстОшибки = ТекстОшибки;

		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;

	КонецЕсли;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса.Вставить("client_id", Client_id);
	ПараметрыЗапроса.Вставить("client_secret", Client_secret);
	ПараметрыЗапроса.Вставить("UserEmail", МенеджерEmail);

	РезультатПолученияКлючаДоступа = ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, Ложь);
	Если РезультатПолученияКлючаДоступа.ТекстОшибки <> "" Тогда

		Результат.ТекстОшибки = РезультатПолученияКлючаДоступа.ТекстОшибки;

		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , РезультатПолученияКлючаДоступа.ТекстОшибки);

		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;

	КонецЕсли;

	ПараметрыЗапроса.Вставить("ТокенДоступа", РезультатПолученияКлючаДоступа.КлючДоступа.ТокенДоступа);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	//Форомирование текста и вызов http-запроса
	ЗапросСервиса = ЗапросСервисаПолучениеФайлаБидзаар(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда

		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);

		Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
			Результат.ТекстОшибки = "";
			
			ОписаниеФайлаСервиса.Имя = ДанныеОтвета["Name"];
			ОписаниеФайлаСервиса.Расширение = ДанныеОтвета["Extension"];
			ОписаниеФайлаСервиса.Данные = ДанныеОтвета["base64"];
			
		Иначе
			Результат.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;
	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , РезультатЗапроса.ТекстОтвета);

		Результат.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Приглашение физических и юридических лиц к рассмотрению запроса коммерческих предложений на площадке Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись
//   * МенеджерEmail - строка - email менеджера
//   * ТокенДоступа - строка - токен доступа к сервису Бидзаар. Необязательный
//   * ОписанияУчастников - массив из структура - см описание ЗаполнитьДанныеДляСервисаПриглашениеУчастниковБидзаар
//  АдресРезультата - строка - Адрес временного хранилища результата вызова сервиса
//
Процедура ПриглашениеУчастниковБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	//Описание возвращаемого значения
	ОписанияПриглашенныхУчастников = Новый Массив; // Массив из Структура

	РезультатПубликации = Новый Структура;
	РезультатПубликации.Вставить("ОписанияПриглашенныхУчастников", ОписанияПриглашенныхУчастников);
	РезультатПубликации.Вставить("ТекстОшибки", "");
	
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	СобытиеЖР = СобытиеЖурналаРегистрации(ВидЭТП);
	
	//Получение входящих параметров
	УчетнаяЗапись = ПараметрыЗапроса.УчетнаяЗапись;
	МенеджерEmail = ПараметрыЗапроса.МенеджерEmail;

	//Проверка наличия токена доступа
	ТокенДоступа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТокенДоступа", "");

	Если ТокенДоступа = "" Тогда
		ДанныеАвторизаци = ПолучитьОбновитьДанныеАвторизацииИДоступаБидзаар(УчетнаяЗапись, МенеджерEmail);
	
		Если ДанныеАвторизаци.ТекстОшибки <> "" Тогда
			РезультатПубликации.ТекстОшибки = ДанныеАвторизаци.ТекстОшибки;
			ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("ТокенДоступа", ДанныеАвторизаци.ТокенДоступа);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("UserEmail", МенеджерEmail);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	//Форомирование текста и вызов http-запроса
	ЗапросСервиса = ЗапросСервисаПриглашениеУчастниковБидзаар(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда

		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);

		Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
			РезультатПубликации.ТекстОшибки = "";
		Иначе
			РезультатПубликации.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;
	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , РезультатЗапроса.ТекстОтвета);

		РезультатПубликации.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатПубликации, АдресРезультата);	
КонецПроцедуры

// Получение событий прошедших на ЭТП Бидзаар
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Данные, необходимые для выполения запроса. Содержит свойства:
// * ОпубликованныеДокументы - Массив из ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - Перечень документов
//                      по которым необходимо получить актуальные состояния
//  АдресРезультата - Строка - Адрес временного хранилища в которое помещена структура РезультатПубликации. Содержит свойства:
// * ТекстОшибки - Строка - Текст ошибки
Процедура ЗапросТекущихСостоянийОпубликованныхДокументовБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт

	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("СостоянияДокументов", Новый Соответствие);
	РезультатВыполнения.Вставить("ТекстОшибки", "");

	ТаблицаСобытий = НовыйТаблицаСобытийБидзаар();
	СостоянияДокументовБидзаар = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостоянияЗапросаКоммерческогоПредложенияБидзаар();

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("УчетнаяЗапись", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок"));
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));

	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	ВсеДокументы = ПараметрыЗапроса.ОпубликованныеДокументы.Количество() = 0;
	ДокументИдентификаторВСервисе = ?(ВсеДокументы, "", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыЗапроса.ОпубликованныеДокументы[0], "ИдентификаторВСервисе"));

	ИмяКлючевойОперации = "ОбщийМодуль.ИнтеграцияСЭлектроннымиТорговымиПлощадками.СостоянияВБидзаар.УчЗаписьЭмейлДата";
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации); // Соответсвие

	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗКППоставщиков.Ссылка КАК ЗапросКоммерческихПредложений,
	|	ТаблицаЗКППоставщиков.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	ТаблицаЗКППоставщиков.Организация КАК Организация,
	|	ТаблицаЗКППоставщиков.МенеджерEmail КАК Email,
	|	ТаблицаЗКППоставщиков.Дата КАК Дата,
	|	СостоянияЗапросовКоммерческихПредложений.СостояниеВСервисе КАК СостояниеВСервисе
	|ПОМЕСТИТЬ ВТ_СостоянияЗКП
	|ИЗ
	|	РегистрСведений.СостоянияЗапросовКоммерческихПредложений КАК СостоянияЗапросовКоммерческихПредложений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросКоммерческихПредложенийПоставщиков КАК ТаблицаЗКППоставщиков
	|		ПО СостоянияЗапросовКоммерческихПредложений.ЗапросКоммерческихПредложений = ТаблицаЗКППоставщиков.Ссылка
	|		И ТаблицаЗКППоставщиков.ЗапрашиватьПредложенияПоставщиков = &СпособРазмещения
	|		И ТаблицаЗКППоставщиков.Проведен
	|		И ВЫБОР
	|			КОГДА &ВсеДокументы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаЗКППоставщиков.Ссылка В (&ОпубликованныеДокументы)
	|		КОНЕЦ
	|ГДЕ
	|	СостоянияЗапросовКоммерческихПредложений.НовоеСостояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗапросаКоммерческихПредложений.Завершено)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ИдентификаторВСервисе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СостоянияЗКП.ЗапросКоммерческихПредложений КАК ЗапросКоммерческихПредложений
	|ИЗ
	|	ВТ_СостоянияЗКП КАК ВТ_СостоянияЗКП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетныеЗаписиЭлектронныхТорговыхПлощадок.Ссылка КАК УчетнаяЗапись,
	|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписиЭлектронныхТорговыхПлощадок.Организация) КАК ОрганизацияПредставление,
	|	ВТ_СостоянияЗКП.Email КАК Email,
	|	МИНИМУМ(ВТ_СостоянияЗКП.Дата) КАК ДатаОбновления
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектронныхТорговыхПлощадок КАК УчетныеЗаписиЭлектронныхТорговыхПлощадок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияЗКП КАК ВТ_СостоянияЗКП
	|		ПО УчетныеЗаписиЭлектронныхТорговыхПлощадок.Организация = ВТ_СостоянияЗКП.Организация
	|ГДЕ
	|	НЕ УчетныеЗаписиЭлектронныхТорговыхПлощадок.ПометкаУдаления
	|	И УчетныеЗаписиЭлектронныхТорговыхПлощадок.ВидЭТП = &ВидЭТП
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СостоянияЗКП.Email,
	|	УчетныеЗаписиЭлектронныхТорговыхПлощадок.Ссылка
	|ИТОГИ
	|ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("ВидЭТП", ВидЭТП);
	Запрос.УстановитьПараметр("ВсеДокументы", ВсеДокументы);
	Запрос.УстановитьПараметр("ОпубликованныеДокументы", ПараметрыЗапроса.ОпубликованныеДокументы);
	Запрос.УстановитьПараметр("СпособРазмещения",
		КоммерческиеПредложенияДокументыКлиентСервер.СпособРазмещенияБидзаар());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоДанных = РезультатЗапроса[1].Выбрать().Количество();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ?(КоличествоДанных = 0, 0.01, КоличествоДанных / 100));
	
	ВыборкаУчетныеЗаписи = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл

		УчетнаяЗаписьОбработана = Ложь;
		
		УчетнаяЗапись = ВыборкаУчетныеЗаписи["УчетнаяЗапись"]; // СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок

		ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
		Client_id =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_id", "");
		Client_secret =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_secret", "");

		Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
			ТекстОшибки = СтрШаблон(НСтр(
				"ru = 'Не удалось получить состояния документов. Введите %1 и %2 в настройках подключения к Бидзаар организации %3'"),
				"client_id", "client_secret", ВыборкаУчетныеЗаписи.ОрганизацияПредставление);

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстОшибки);

			СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
			СтрокаТаблицыОшибок.УчетнаяЗапись = УчетнаяЗапись;
			СтрокаТаблицыОшибок.ТекстОшибки = ТекстОшибки;

			Продолжить;

		КонецЕсли;

		//Параметры, необходимые для генерации http-запроса
		ПараметрыЗапроса.Вставить("client_id", Client_id);
		ПараметрыЗапроса.Вставить("client_secret", Client_secret);

		РезультатПолученияКлючаДоступа = ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, Ложь);
		Если РезультатПолученияКлючаДоступа.ТекстОшибки <> "" Тогда

			ТекстОшибки = РезультатПолученияКлючаДоступа.ТекстОшибки;

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП),
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);

			СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
			СтрокаТаблицыОшибок.УчетнаяЗапись = УчетнаяЗапись;
			СтрокаТаблицыОшибок.ТекстОшибки = ТекстОшибки;

			Продолжить;

		КонецЕсли;

		ПараметрыЗапроса.Вставить("ТокенДоступа", РезультатПолученияКлючаДоступа.КлючДоступа.ТокенДоступа);

		//Параметры, необходимые для генерации и выполнения http-запроса
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
		ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
		ПараметрыЗапроса.Вставить("ДатаОбновления", НачалоДня(НачалоДня(ВыборкаУчетныеЗаписи["ДатаОбновления"])-1));
		ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

		ВыборкаEmail = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаEmail.Следующий() Цикл

			ПараметрыЗапроса.Вставить("UserEmail", ВыборкаEmail["Email"]);

			ЗапросСервиса = ЗапросСервисаПолучениеСобытийБидзаар(ПараметрыЗапроса);

			РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

			//Обработка результата запроса
			Если РезультатЗапроса.КодСостояния = 200 Тогда

				ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, "date", Истина); // Массив, Неопределено

				Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					Для Каждого СобытиеПоОпубликованномуДокументу Из ДанныеОтвета Цикл
						ИдентификаторВСервисе = СобытиеПоОпубликованномуДокументу["procedureId"]; // Строка
						Если (Не ВсеДокументы И ИдентификаторВСервисе <> ДокументИдентификаторВСервисе)
							Или ТаблицаСобытий.Найти(ИдентификаторВСервисе) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						НС = ТаблицаСобытий.Добавить();
						НС.УчетнаяЗапись = УчетнаяЗапись;
						НС.ИдентификаторПроцедуры = ИдентификаторВСервисе;
						Событие = СостоянияДокументовБидзаар.Получить(СобытиеПоОпубликованномуДокументу["type"]);
						Если Не ВсеДокументы И Событие
							= ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеСборПредложенийЗавершен() Тогда
							ПараметрыЗапроса.Вставить("ИдентификаторЗапросаКП", ИдентификаторВСервисе);
							АдресРезультатаЗавершения = ПоместитьВоВременноеХранилище(Неопределено);
							ПолучениеДанныхУчастниковПоЗапросуБидзаар(ПараметрыЗапроса, АдресРезультатаЗавершения);
							Результат = ПолучитьИзВременногоХранилища(АдресРезультатаЗавершения); // Структура
							Если ТипЗнч(Результат) = Тип("Структура") Тогда
								ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ТекстОшибки",
									СтрШаблон(НСтр("ru = 'Свойство %1 не обнаружено'"), "ТекстОшибки")); // Строка
								Если ПустаяСтрока(ТекстОшибки) Тогда
									ДанныеУчастников = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат,
										"ДанныеУчастников", Новый Массив); // Массив
									Событие = ?(ДанныеУчастников.Количество() = 0,
										ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеСборПредложенийЗавершенБезПобедителя(),
										Событие);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						НС.Событие = Событие;
						НС.Дата = СобытиеПоОпубликованномуДокументу["date"];
						УчетнаяЗаписьОбработана = Истина;
					КонецЦикла;
				Иначе
					ТекстОшибки = ТекстОшибкиПоКодуОтвета();

					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
						ТекстОшибки);

					СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
					СтрокаТаблицыОшибок.УчетнаяЗапись = УчетнаяЗапись;
					СтрокаТаблицыОшибок.ТекстОшибки = ТекстОшибки;
				КонецЕсли;

			Иначе

				Если РезультатЗапроса.КодСостояния = 0 Тогда
					ТекстОшибки = РезультатЗапроса.ТекстОшибки;
				Иначе
					ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
				КонецЕсли;

				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
					РезультатЗапроса.ТекстОтвета);

				СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
				СтрокаТаблицыОшибок.УчетнаяЗапись = УчетнаяЗапись;
				СтрокаТаблицыОшибок.ТекстОшибки = ТекстОшибки;

			КонецЕсли;
			Если УчетнаяЗаписьОбработана Тогда
				Прервать
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ТаблицаСобытий.Количество() = 0 Тогда

		СообщенияОбОшибках = Новый Массив; //массив из строка
		Для Каждого СтрокаТаблицыОшибок Из ТаблицаОшибок Цикл
			СообщенияОбОшибках.Добавить(СтрокаТаблицыОшибок.ТекстОшибки);
		КонецЦикла;

		РезультатВыполнения.ТекстОшибки = СтрСоединить(СообщенияОбОшибках, Символы.ПС);

	Иначе

		ИмяКлючевойОперации = "ОбщийМодуль.ИнтеграцияСЭлектроннымиТорговымиПлощадками.СостоянияВБидзаар.ОбновлениеСостоянийЗКП";
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации); // Соответсвие

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСобытий.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ТаблицаСобытий.ИдентификаторПроцедуры КАК ИдентификаторВСервисе,
		|	ТаблицаСобытий.Событие КАК Событие
		|ПОМЕСТИТЬ ВТ_ТаблицаСобытий
		|ИЗ
		|	&ТаблицаСобытий КАК ТаблицаСобытий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторВСервисе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СостоянияЗКП.ЗапросКоммерческихПредложений КАК Документ,
		|	ВТ_СостоянияЗКП.СостояниеВСервисе,
		|	ВТ_ТаблицаСобытий.Событие КАК Событие
		|ИЗ
		|	ВТ_ТаблицаСобытий КАК ВТ_ТаблицаСобытий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияЗКП КАК ВТ_СостоянияЗКП
		|		ПО ВТ_СостоянияЗКП.ИдентификаторВСервисе = ВТ_ТаблицаСобытий.ИдентификаторВСервисе
		|		И ВТ_СостоянияЗКП.СостояниеВСервисе <> ВТ_ТаблицаСобытий.Событие";

		Запрос.УстановитьПараметр("ТаблицаСобытий", ТаблицаСобытий);

		РезультатЗапросаВТ = Запрос.Выполнить();
		Выборка = РезультатЗапросаВТ.Выбрать();

		КоличествоДанных = Выборка.Количество();
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ?(КоличествоДанных = 0, 0.01, КоличествоДанных / 100));

		Запрос.МенеджерВременныхТаблиц.Закрыть();

		Если Не РезультатЗапросаВТ.Пустой() Тогда

			КодСобытия = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.ИмяСервисаБидзаар();

			Пока Выборка.Следующий() Цикл
				Событие = Выборка["Событие"]; // Строка
				Документ = Выборка["Документ"]; // ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков
				РезультатВыполнения.СостоянияДокументов.Вставить(Документ, Событие);
				ПараметрыОбновления = РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ЗначенияПоУмолчанию(
						Документ);
				ПараметрыОбновления.СостояниеВСервисе = Событие;
				Если Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеОпубликован()
					Или Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеСборПредложений()
					Или Событие
					= ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеСборПредложенийАвтопродление() Тогда
					ПараметрыОбновления.ТекущееСостояние = Перечисления.СостоянияЗапросаКоммерческихПредложений.СборПредложений;
					ПараметрыОбновления.НовоеСостояние = Перечисления.СостоянияЗапросаКоммерческихПредложений.СборПредложений;
				ИначеЕсли Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеПодведениеИтогов() Тогда
					ПараметрыОбновления.ТекущееСостояние = Перечисления.СостоянияЗапросаКоммерческихПредложений.АнализПредложений;
					ПараметрыОбновления.НовоеСостояние = Перечисления.СостоянияЗапросаКоммерческихПредложений.АнализПредложений;
				ИначеЕсли Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеСборПредложенийЗавершен()
					Или Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеСборПредложенийЗавершенБезПобедителя()
					Или Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеПеренесенВАрхив()
					Или Событие = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.СостояниеВозвращенИзАрхива() Тогда
					ПараметрыОбновления.ТекущееСостояние = Перечисления.СостоянияЗапросаКоммерческихПредложений.ЗагрузкаИтоговыхДанныхБидзаар;
					ПараметрыОбновления.НовоеСостояние = Перечисления.СостоянияЗапросаКоммерческихПредложений.ЗагрузкаИтоговыхДанныхБидзаар;
				Иначе
					ЗаполнитьЗначенияСвойств(ПараметрыОбновления,
						РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние(Документ),
						"ТекущееСостояние, НовоеСостояние");
				КонецЕсли;
				РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ЗаписатьСтатус(Документ, ПараметрыОбновления,
					КодСобытия);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	Для Каждого Документ Из ПараметрыЗапроса.ОпубликованныеДокументы Цикл
		Если РезультатВыполнения.СостоянияДокументов[Документ] = Неопределено Тогда
			СостояниеДокумента = РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние(Документ);
			РезультатВыполнения.СостоянияДокументов.Вставить(Документ, СостояниеДокумента.СостояниеВСервисе);
		КонецЕсли;
	КонецЦикла;

	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);

КонецПроцедуры

// Получение коммерческих предложений по запросу Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - параметры запроса. Содержит свойства:
//   * ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - запрос, по которому нужно получить данные коммерческих предложений
//  АдресРезультата - Строка - Адрес временного хранилища, в которое помещены данные коммерческих предложений. Содержит свойства:
//   * ДанныеКоммерческихПредложений - массив из структура - данные коммерческих предложений
//	 * ТекстОшибки - строка - текст ошибки
//
Процедура ПолучениеДанныхКоммерческихПредложенийПоЗапросуБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ДанныеКоммерческихПредложений", Новый Массив);
	РезультатВыполнения.Вставить("ТекстОшибки", "");
	
	АдресДляИдентификторов = ПоместитьВоВременноеХранилище("");
	
	ПолучениеИдентификаторовКоммерческихПредложенийБидзаар(ПараметрыЗапроса, АдресДляИдентификторов);
	
	РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресДляИдентификторов);
	
	Если РезультатЗапроса= Неопределено Тогда
		РезультатВыполнения.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
		Возврат;
		
	ИначеЕсли РезультатЗапроса["ТекстОшибки"] <> "" Тогда
		РезультатВыполнения.ТекстОшибки = РезультатЗапроса["ТекстОшибки"];
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
		Возврат;
	КонецЕсли;

	ПараметрыЗапроса.Вставить("ИдентификаторыКП", РезультатЗапроса.ИдентификаторыКП);
	ПолучениеДанныхКоммерческихПредложенийБидзаар(ПараметрыЗапроса, АдресРезультата);
	
КонецПроцедуры

// Получение идентификаторв коммерческих предложений по запросу
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса. Содержит свойства:
//  	* ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков
//  АдресРезультата - Строка - Адрес временного хранилища в которое помещена структура РезультатВыполения. Содержит свойства:
//  	* ИдентификаторыКП - массив из структура - идентификаторы коммерческих предложений. Содержит свойства:
//		  ** Идентификатор - строка - идентификатор коммерческого предложения
//		  ** Состояние - строка - состояние коммерческого предложения
//		* ТекстОшибки - строка - текст ошибки
//
Процедура ПолучениеИдентификаторовКоммерческихПредложенийБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	
	ИдентификаторыКП = Новый Массив();	//Массив из строка
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ИдентификаторыКП", ИдентификаторыКП);
	РезультатВыполнения.Вставить("ТекстОшибки", "");

	РеквизитыЗапросаКП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗапроса.ЗапросКоммерческихПредложений,
		"Организация, МенеджерEmail, ИдентификаторВСервисе"); 

	//Получение данных для авторизации
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(ВидЭТП,
		РеквизитыЗапросаКП.Организация);

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
	Client_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_id", "");
	Client_secret = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "Client_secret", "");

	Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить данные, введите %1 и %2 в настройках подключения организации к Бидзаар'"),
			"client_id", "client_secret");
		
		РезультатВыполнения.ТекстОшибки = ТекстОшибки;
		
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);

		Возврат;

	КонецЕсли;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса.Вставить("ИдентификаторЗапросаКП", РеквизитыЗапросаКП.ИдентификаторВСервисе);
	ПараметрыЗапроса.Вставить("client_id", Client_id);
	ПараметрыЗапроса.Вставить("client_secret", Client_secret);
	ПараметрыЗапроса.Вставить("UserEmail", РеквизитыЗапросаКП.МенеджерEmail);

	РезультатПолученияКлючаДоступа = ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, Ложь);
	Если РезультатПолученияКлючаДоступа.ТекстОшибки <> "" Тогда
		
		РезультатВыполнения.ТекстОшибки = РезультатПолученияКлючаДоступа.ТекстОшибки;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП),
			УровеньЖурналаРегистрации.Ошибка, , , РезультатПолученияКлючаДоступа.ТекстОшибки);

		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ТокенДоступа", РезультатПолученияКлючаДоступа.КлючДоступа.ТокенДоступа);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	ЗапросСервиса = ЗапросСервисаПолучениеИдентификаторовКоммерческихПредложенийБидзаар(ПараметрыЗапроса);

	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда
		
		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);
		
		Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
			РезультатВыполнения.ТекстОшибки = "";
			
			Для Каждого СтрокаДанныеОтвета Из ДанныеОтвета Цикл

				Идентификатор = "";
				Если ТипЗнч(СтрокаДанныеОтвета) = Тип("Структура") Тогда
					СтрокаДанныеОтвета.Свойство("id", Идентификатор);
					
				ИначеЕсли ТипЗнч(СтрокаДанныеОтвета) = Тип("Строка") Тогда
					Идентификатор = СтрокаДанныеОтвета;
					
				КонецЕсли;
				
				ИдентификаторыКП.Добавить(Идентификатор);
			КонецЦикла;
			
		Иначе
			РезультатВыполнения.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;
	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
			РезультатЗапроса.ТекстОтвета);

		РезультатВыполнения.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
	
КонецПроцедуры

// Получение данных коммерческих предложений из ЭТП Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса. Содержит свойства:
//  	* ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - документ, для которого запрашиваются коммерческие предложения
//  	* ИдентификаторыКП - массив из строка - идентификаторы коммерческих предложений. Идентификаторы можно получить в процедуре ПолучениеИдентификаторовКоммерческихПредложенийБидзаар
//  АдресРезультата - Строка - Адрес временного хранилища в которое помещена структура РезультатВыполения. Содержит свойства:
//  	* ДанныеКП - массив из структура - данные коммерческих предложений. Содержит свойства:
//		* ТекстОшибки - строка - текст ошибки
//
Процедура ПолучениеДанныхКоммерческихПредложенийБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ДанныеКоммерческихПредложений", Новый Массив);
	РезультатВыполнения.Вставить("ТекстОшибки", "");

	РеквизитыЗапросаКП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗапроса.ЗапросКоммерческихПредложений,
		"Организация, МенеджерEmail, ИдентификаторВСервисе"); 

	//Получение данных для авторизации
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(ВидЭТП,
		РеквизитыЗапросаКП.Организация);

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
	Client_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_id", "");
	Client_secret = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "Client_secret", "");

	Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить данные, введите %1 и %2 в настройках подключения организации к Бидзаар'"),
			"client_id", "client_secret");
		
		РезультатВыполнения.ТекстОшибки = ТекстОшибки;
		
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);

		Возврат;

	КонецЕсли;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса.Вставить("ИдентификаторЗапросаКП", РеквизитыЗапросаКП.ИдентификаторВСервисе);
	ПараметрыЗапроса.Вставить("client_id", Client_id);
	ПараметрыЗапроса.Вставить("client_secret", Client_secret);
	ПараметрыЗапроса.Вставить("UserEmail", РеквизитыЗапросаКП.МенеджерEmail);

	РезультатПолученияКлючаДоступа = ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, Ложь);
	Если РезультатПолученияКлючаДоступа.ТекстОшибки <> "" Тогда
		
		РезультатВыполнения.ТекстОшибки = РезультатПолученияКлючаДоступа.ТекстОшибки;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
			РезультатПолученияКлючаДоступа.ТекстОшибки);

		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ТокенДоступа", РезультатПолученияКлючаДоступа.КлючДоступа.ТокенДоступа);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	ЗапросСервиса = ЗапросСервисаПолучениеДанныхКоммерческихПредложенийБидзаар(ПараметрыЗапроса);

	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда
		
		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);
		
		Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
			РезультатВыполнения.ТекстОшибки = "";
			
			Для Каждого СтрокаДанныеОтвета Из ДанныеОтвета Цикл
				ДанныеКП = Новый Структура;
				ДанныеКП.Вставить("ИдентификаторПредложения", СтрокаДанныеОтвета["id"]);
				ДанныеКП.Вставить("ИдентификаторУчастника", СтрокаДанныеОтвета["participantId"]);	//Идентификатор в пределах документа
				ДанныеКП.Вставить("НомерПредложенияУчастника", СтрокаДанныеОтвета["number"]);
				ДанныеКП.Вставить("ЭтоОсновноеПредложение", СтрокаДанныеОтвета["number"] = 1);
				ДанныеКП.Вставить("ИдентификаторКонтрагента", СтрокаДанныеОтвета["companyId"]);
				ДанныеКП.Вставить("СуммаПоДокументу", СтрокаДанныеОтвета["price"]);
				ДанныеКП.Вставить("Валюта", СтрокаДанныеОтвета["currency"]);
				ДанныеКП.Вставить("СуммаПоДокументуВВалюте", СтрокаДанныеОтвета["priceInCurrency"]);
				ДанныеКП.Вставить("ЭтоПобедитель", СтрокаДанныеОтвета["selected"]);
				
				//Файлы поставщиков
				ОписанияФайлов = Новый Массив;	//массив из структура
				ОписанияФайловСервиса = СтрокаДанныеОтвета["files"]; //массив из структура
				
				Для Каждого ОписаниеФайлаСервиса Из ОписанияФайловСервиса Цикл
					ОписаниеФайла = Новый Структура;
					ОписаниеФайла.Вставить("Идентификатор", ОписаниеФайлаСервиса["id"]);
					ОписаниеФайла.Вставить("Имя", ОписаниеФайлаСервиса["name"]);
					ОписаниеФайла.Вставить("Расширение",ОписаниеФайлаСервиса["extension"]);
					ОписаниеФайла.Вставить("Длина", ОписаниеФайлаСервиса["length"]);
					ОписанияФайлов.Добавить(ОписаниеФайла);
				КонецЦикла;
				ДанныеКП.Вставить("ОписанияФайлов", ОписанияФайлов);
				
				ТоварыИУслуги = Новый Массив;
				Для Каждого ГруппаПозиций из СтрокаДанныеОтвета["positionGroups"] Цикл
					
					Для Каждого Позиция Из ГруппаПозиций["positions"] Цикл
						ОписаниеПозиции = Новый Структура;
						ОписаниеПозиции.Вставить("ИдентификаторПозиции", Позиция["originId"]);
						ОписаниеПозиции.Вставить("Номенклатура", Позиция["originId"]);
						ОписаниеПозиции.Вставить("Наименование", Позиция["name"]);
						ОписаниеПозиции.Вставить("ЭтоПобедитель", Позиция["selected"]);
						ОписаниеПозиции.Вставить("КоличествоПобедителя", Позиция["selectedCount"]);
						ОписаниеПозиции.Вставить("КоличествоУчастника", Позиция["count"]);
						ОписаниеПозиции.Вставить("ПредставлениеЕдиницыИзмерения", Позиция["unit"]);
						ОписаниеПозиции.Вставить("ЦенаУчастника", Позиция["price"]);
						ОписаниеПозиции.Вставить("СтавкаНДС", Позиция["vat"]);
						ОписаниеПозиции.Вставить("ЕстьПредложение", Не Позиция["dontHaveAny"]);
						ОписаниеПозиции.Вставить("Валюта", Позиция["currency"]);
						ОписаниеПозиции.Вставить("СуммаВВалюте", Позиция["priceInCurrency"]);
						ОписаниеПозиции.Вставить("Комментарий", Позиция["comment"]);
						
						ОписанияДопПолей = Новый Массив();
						Для Каждого ДопПолеПозиции Из Позиция["additionalFieldsValues"] Цикл
							ОписаниеДопПоля = Новый Структура;
							ОписаниеДопПоля.Вставить("Идентификатор", ДопПолеПозиции["originId"]);
							ОписаниеДопПоля.Вставить("Наименование", ДопПолеПозиции["name"]);
							ОписаниеДопПоля.Вставить("Тип", ДопПолеПозиции["type"]);
							ОписаниеДопПоля.Вставить("Значение", ДопПолеПозиции["value"]);
							
							ОписанияДопПолей.Добавить(ОписаниеДопПоля);
						КонецЦикла;
						ОписаниеПозиции.Вставить("ДополнительныеПоля", ОписанияДопПолей);

						ТоварыИУслуги.Добавить(ОписаниеПозиции);
					КонецЦикла;
				КонецЦикла;
				
				ДанныеКП.Вставить("ТоварыИУслуги", ТоварыИУслуги);
			
				РезультатВыполнения.ДанныеКоммерческихПредложений.Добавить(ДанныеКП);
			КонецЦикла;
			
		Иначе
			РезультатВыполнения.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;
	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
			РезультатЗапроса.ТекстОтвета);

		РезультатВыполнения.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
КонецПроцедуры

// Получение данных коммерческих предложений из ЭТП Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса. Содержит свойства:
//  	* ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - опубликованный документ.
//  	* ТолькоПобедители - булево - получить только победителей
//  АдресРезультата - Строка - Адрес временного хранилища в которое помещена структура РезультатВыполения. Содержит свойства:
//  	* ДанныеКП - массив из структура - данные коммерческих предложений. Содержит свойства:
//		* ТекстОшибки - строка - текст ошибки
//
Процедура ПолучениеДанныхУчастниковПоЗапросуБидзаар(Знач ПараметрыЗапроса, АдресРезультата) Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ДанныеУчастников", Новый Массив);
	РезультатВыполнения.Вставить("ТекстОшибки", "");

	ТолькоПобедители = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ТолькоПобедители", Ложь);
	
	Если ПараметрыЗапроса.Свойство("ЗапросКоммерческихПредложений") Тогда
		РеквизитыЗапросаКП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗапроса.ЗапросКоммерческихПредложений,
			"Организация, МенеджерEmail, ИдентификаторВСервисе");
		
		//Получение данных для авторизации
		ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектронныхТорговыхПлощадок.УчетнаяЗаписьОрганизации(ВидЭТП,
			РеквизитыЗапросаКП.Организация);
			
		ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);
		Client_id =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_id", "");
		Client_secret =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_secret", "");
		
		Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
			ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить данные, введите %1 и %2 в настройках подключения организации к Бидзаар'"),
				"client_id", "client_secret");

			РезультатВыполнения.ТекстОшибки = ТекстОшибки;

			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);

			Возврат;
		КонецЕсли;

		//Параметры, необходимые для генерации http-запроса
		ПараметрыЗапроса.Вставить("ИдентификаторЗапросаКП", РеквизитыЗапросаКП.ИдентификаторВСервисе);
		ПараметрыЗапроса.Вставить("client_id", Client_id);
		ПараметрыЗапроса.Вставить("client_secret", Client_secret);
		ПараметрыЗапроса.Вставить("UserEmail", РеквизитыЗапросаКП.МенеджерEmail);

		РезультатПолученияКлючаДоступа = ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, Ложь);
		Если РезультатПолученияКлючаДоступа.ТекстОшибки <> "" Тогда

			РезультатВыполнения.ТекстОшибки = РезультатПолученияКлючаДоступа.ТекстОшибки;

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
				РезультатПолученияКлючаДоступа.ТекстОшибки);

			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
			Возврат;

		КонецЕсли;

		ПараметрыЗапроса.Вставить("ТокенДоступа", РезультатПолученияКлючаДоступа.КлючДоступа.ТокенДоступа);
		
		//Параметры, необходимые для генерации и выполнения http-запроса
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
		ДополнительныеПараметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
		ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Иначе
		Client_id =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "client_id", "");
		Client_secret =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "client_secret", "");
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхУчастниковПоЗапросуБидзаар(ПараметрыЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	//Обработка результата выполения запроса
	Если РезультатЗапроса.КодСостояния = 200 Тогда
		
		ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, , Ложь);
		
		Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
			РезультатВыполнения.ТекстОшибки = "";
			
			Для Каждого СтрокаДанныеОтвета Из ДанныеОтвета Цикл
				
				Если ТолькоПобедители = Истина И СтрокаДанныеОтвета["businessStatus"] <> 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеУчастника = Новый Структура;
				ДанныеУчастника.Вставить("ИдентификаторУчастника", СтрокаДанныеОтвета["id"]);
				ДанныеУчастника.Вставить("ИдентификаторКонтрагента", СтрокаДанныеОтвета["companyId"]);
				ДанныеУчастника.Вставить("ЭтоПобедитель", СтрокаДанныеОтвета["businessStatus"] = 0);
				ДанныеУчастника.Вставить("Заблокирован",  СтрокаДанныеОтвета["isBlocked"]);
				ДанныеУчастника.Вставить("КонтактИмя",  СтрокаДанныеОтвета["contactName"]);
				ДанныеУчастника.Вставить("КонтактТелефон",  СтрокаДанныеОтвета["contactPhone"]);
				ДанныеУчастника.Вставить("КонтактEmail",  СтрокаДанныеОтвета["contactEmail"]);
				
				Если СтрокаДанныеОтвета["companyInfo"] <> Неопределено Тогда
					ДанныеУчастника.Вставить("Наименование",СтрокаДанныеОтвета["companyInfo"]["name"]);
					ДанныеУчастника.Вставить("ПолноеНаименование",  СтрокаДанныеОтвета["companyInfo"]["requisites"]["name"]);
				
					ЧастиИННКПП = СтрРазделить(СтрокаДанныеОтвета["companyInfo"]["requisites"]["tin"], "/");
					Если ЧастиИННКПП.Количество()>0 Тогда
						ДанныеУчастника.Вставить("ИНН", ЧастиИННКПП[0]);
					Иначе
						ДанныеУчастника.Вставить("ИНН", "");
					КонецЕсли;
					Если ЧастиИННКПП.Количество()>1 Тогда
						ДанныеУчастника.Вставить("КПП", ЧастиИННКПП[1]);
					Иначе
						ДанныеУчастника.Вставить("КПП", "");
					КонецЕсли;
				Иначе
					ДанныеУчастника.Вставить("Наименование", "");
					ДанныеУчастника.Вставить("ПолноеНаименование",  "");
					ДанныеУчастника.Вставить("ИНН", "");
					ДанныеУчастника.Вставить("КПП", "");
				КонецЕсли;
					
				РезультатВыполнения.ДанныеУчастников.Добавить(ДанныеУчастника);
			КонецЦикла;
			
		Иначе
			РезультатВыполнения.ТекстОшибки = ТекстОшибкиПоКодуОтвета();
		КонецЕсли;
	Иначе

		Если РезультатЗапроса.КодСостояния = 0 Тогда
			ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ТекстОшибкиПоКодуОтвета(РезультатЗапроса.КодСостояния, ПараметрыЗапроса);
		КонецЕсли;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(ВидЭТП), УровеньЖурналаРегистрации.Ошибка, , ,
			РезультатЗапроса.ТекстОтвета);

		РезультатВыполнения.ТекстОшибки = ТекстОшибки;

	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
КонецПроцедуры

// Получить вид ЭТП по разделу учета или раздел учета по виду ЭТП.
// 
// Параметры:
//  Параметр - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок, Строка - Соответствующий возвращаемому значению
//  ПолучитьВидЭТП - Булево - Истина (вид ЭТП), Ложь (раздел учета)
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок, Строка - Вид ЭТП или раздел учета
Функция ПолучитьВидЭТПИлиРазделУчета(Параметр, ПолучитьВидЭТП = Истина) Экспорт

	Контекст = "ИнтеграцияСЭлектроннымиТорговымиПлощадками.ПолучитьВидЭТПИлиРазделУчета";

	Если ПолучитьВидЭТП Тогда
		Если Параметр = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели");
		ИначеЕсли Параметр = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики");
		КонецЕсли;
	Иначе
		Если Параметр = ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели") Тогда
			Возврат ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели();
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики") Тогда
			Возврат ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПоставщики();
		КонецЕсли;
	КонецЕсли;

	ВызватьИсключение(Контекст);

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// При создании на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Отказ - Булево
//  СтандартнаяОбработка - Булево - Стандартная обработка
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы = Форма.Элементы;

	Если Форма.ИмяФормы = "Документ.ЗапросКоммерческихПредложенийПоставщиков.Форма.ФормаДокумента" Тогда
		
		ГруппаФормы = Форма.Элементы.Вставить("ГруппаРегистрацииБидзаар", Тип("ГруппаФормы"), Форма.Элементы.СтраницаДополнительно, Форма.Элементы.ГруппаРегистрацииБизнесСеть);
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.ОтображатьЗаголовок = Ложь;
		ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		ДекорацияРегистрацияБидзаарИмя = "ДекорацияРегистрацияБидзаар";
		ЭлементФормы = Форма.Элементы.Добавить(ДекорацияРегистрацияБидзаарИмя, Тип("ДекорацияФормы"), ГруппаФормы);
		ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
		
		ЧастиЗаголовка = Новый Массив; // Массив из строка
		ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Организация не подключена к сервису Бидзаар.'"),
			, WebЦвета.Красный));
		ЧастиЗаголовка.Добавить(" ");
		Если ДоступноПравоНастройкиАвторизацииБидзаар() И (ДоступноПравоАктивацииИнтеграцииДляПокупателейБидзаар()
			Или ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей")) Тогда
			ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Подключить'"), , , , "Открыть"));
		Иначе
			Текст = НСтр("ru = 'Интеграция с ЭТП Бидзаар для покупателей не активирована, обратитесь к администратору.'");
			ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.СкорректироватьТекст(ДекорацияРегистрацияБидзаарИмя, Текст);
			ЧастиЗаголовка.Добавить(Новый ФорматированнаяСтрока(Текст, , WebЦвета.Красный));
		КонецЕсли;
		
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(ЧастиЗаголовка);
		ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ДекорацияРегистрацияБидзаарОбработкаНавигационнойСсылки");
		
	КонецЕсли;

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

// Очищает сохраненные данные авторизации по учетной записи.
//
// Параметры:
//   УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Булево - результат выполнения очистки.
//
Функция ОчиститьНастройкиУчетнойЗаписи(УчетнаяЗапись) Экспорт

	ОчисткаУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		ОбъектЭТП = УчетнаяЗапись.ПолучитьОбъект();

		ВладелецЗаписиХранилища = ПрефиксыСервиса(ОбъектЭТП.ВидЭТП).НастройкиСервиса + УчетнаяЗапись.УникальныйИдентификатор();
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, Неопределено);
		УстановитьПривилегированныйРежим(Ложь);

		ОбъектЭТП.УстановитьПометкуУдаления(Истина);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ОчисткаУспешна = Ложь;

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось очистить настройки по причине: %1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	КонецПопытки;

	Возврат ОчисткаУспешна;

КонецФункции

// Возвращает общие параметры подключения к REST API торговой площадки
//
// Параметры:
//   ДополнительныеПараметры - Структура - содержит свойства:
//   * ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок
//   * РазделУчета - Строка - "Поставщики" или "Покупатели"
//     
// Возвращаемое значение:
//  Структура - содержит свойства:
//  * Сервер - Строка - Имя сервера.
//  * Порт - число - номер порта подключения.
//  * Протокол - строка - протокол передачи данных
//  * Таймаут - число - время ожидания ответа в секундах
//	* ШаблонОшибки - строка
//	* ШаблонОшибкиСКодом - строка
Функция ПараметрыРаботыССервисомАвторизации(ДополнительныеПараметры) Экспорт

	ПараметрыРаботы = Новый Структура;
	ПараметрыРаботы.Вставить("Сервер", "");
	ПараметрыРаботы.Вставить("Порт", 443);
	ПараметрыРаботы.Вставить("Протокол", "https");
	ПараметрыРаботы.Вставить("Таймаут", 20);
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр(
		"ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ВидЭТП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВидЭТП",
		Перечисления.ВидыЭлектронныхТорговыхПлощадок.ПустаяСсылка());

	Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики
		Или ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели Тогда

		ПараметрыРаботы.Сервер = "bidzaar.com";

	КонецЕсли;

	Возврат ПараметрыРаботы;

КонецФункции

Функция ДоступноПравоНастройкиАвторизацииБидзаар() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.УправлениеВыгрузкамиВБидзаар);
КонецФункции

Функция ДоступноПравоАктивацииИнтеграцииДляПоставщиковБидзаар() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьИнтеграциюСЭТПБидзаарДляПоставщиков);
КонецФункции

Функция ДоступноПравоАктивацииИнтеграцииДляПокупателейБидзаар() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей);
КонецФункции

#Область СлужебныйПрограммныйИнтерфейсПокупатели

// Описания файлов для публикации запроса коммерческих предложений бидзаар.
// 
// Параметры:
//  ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - документ
// 
// Возвращаемое значение:
//  Структура - Описания файлов для публикации запроса коммерческих предложений бидзаар:
// * Имя - Строка - имя файла без расширения
// * Расширение - Строка - расширения файла
// * Данные - Строка - данные документа
Функция ОписанияФайловДляПубликацииЗапросаКоммерческихПредложенийБидзаар(ЗапросКоммерческихПредложений) Экспорт
	
	ОписанияФайлов = Новый Массив;	//массив из структура

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.Наименование,
	|	Файлы.Расширение
	|ИЗ
	|	Справочник.ЗапросКоммерческихПредложенийПоставщиковПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ЗапросКоммерческихПредложений";
	
	Запрос.УстановитьПараметр("ЗапросКоммерческихПредложений", ЗапросКоммерческихПредложений);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Имя", Выборка.Наименование);
		ОписаниеФайла.Вставить("Расширение", Выборка.Расширение);
		ОписаниеФайла.Вставить("Данные", Base64Строка(РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка)));

		ОписанияФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат ОписанияФайлов;
	
КонецФункции

// См. КоммерческиеПредложенияДокументыПереопределяемый.ПриОпределенииНастроекУчета.
//
Процедура ПриОпределенииНастроекУчета(Настройки) Экспорт

	Настройки.ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей =
		ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЭТПБидзаарДляПокупателей");

	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ПриОпределенииНастроекУчета(Настройки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункцииДляРаботыССервисом

// Данные для прохождения авторизации в сервисе электронной торговой площадки
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок -
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок -
// 
// Возвращаемое значение:
//  Структура - значения свойств, необходимых для авторизации
//
Функция ДанныеАвторизации(ВидЭТП, УчетнаяЗапись)

	ДанныеАвторизации = НовыйДанныеАвторизации(ВидЭТП);

	Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики
		Или ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели Тогда

		УстановитьПривилегированныйРежим(Истина);
		ВладелецЗаписиХранилища = ПрефиксыСервиса(ВидЭТП).НастройкиСервиса + XMLСтрока(УчетнаяЗапись);
		КлючиДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "КлючиДоступа");
		Если ТипЗнч(КлючиДоступа) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ДанныеАвторизации, КлючиДоступа);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;

	Возврат ДанныеАвторизации;

КонецФункции

// Данные для прохождения авторизации в сервисе электронной торговой площадки
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - вид ЭТП
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись
//  ПринудительноОбновлятьКлючДоступа - Булево - указание необходимости принудительного обновления ключа доступа
//  
// Возвращаемое значение:
//  Структура - содержит свойства:
//  * КлючДоступа - Структура - см. описание функции НовыйКлючДоступа
//  * ТекстОшибки - строка - описание ошибки, возникшей при получении (обновлении) ключа доступа
//
Функция ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, ПринудительноОбновлятьКлючДоступа)
	
	Результат = Новый Структура;
	Результат.Вставить("КлючДоступа", НовыйКлючДоступа(ВидЭТП));
	Результат.Вставить("ТекстОшибки", "");
	
	ВладелецЗаписиХранилища = ПрефиксыСервиса(ВидЭТП).КлючДоступа + УчетнаяЗапись.УникальныйИдентификатор();
	
	УстановитьПривилегированныйРежим(Истина);
	СохраненныйКлючДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВладелецЗаписиХранилища, "КлючДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(СохраненныйКлючДоступа) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат.КлючДоступа, СохраненныйКлючДоступа);
	КонецЕсли;
	
	Если Не СрокТокенаДоступаАктуален(Результат.КлючДоступа) ИЛИ ПринудительноОбновлятьКлючДоступа Тогда
		Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики
			Или ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели Тогда
			РезультатОбновления = ОбновитьКлючДоступаБидзаар(ВидЭТП, УчетнаяЗапись);
			Результат.КлючДоступа = РезультатОбновления.КлючДоступа;
			Результат.ТекстОшибки = РезультатОбновления.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновление ключа доступа для работы с ЭТП Бидзаар
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок -
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - 
//  
// Возвращаемое значение:
//  Структура - содержит свойства:
//  * КлючДоступа - Структура - см. описание функции НовыйКлючДоступа
//  * ТекстОшибки - строка - описание ошибки, возникшей при получении (обновлении) ключа доступа
//
Функция ОбновитьКлючДоступаБидзаар(ВидЭТП, УчетнаяЗапись)

	Результат = Новый Структура;
	Результат.Вставить("КлючДоступа", НовыйКлючДоступа(ВидЭТП));
	Результат.Вставить("ТекстОшибки", "");
	
	//Получение ключей доступа
	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись);

	Client_id = "";
	ДанныеАвторизаци.Свойство("client_id", client_id);
	Client_secret = "";
	ДанныеАвторизаци.Свойство("client_secret", Client_secret);

	Если Не ЗначениеЗаполнено(Client_id) Или Не ЗначениеЗаполнено(Client_secret) Тогда
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить данные, введите %1 и %2 в настройках подключения организации к Бидзаар'"),
			"client_id", "client_secret");

		Результат.ТекстОшибки = ТекстОшибки;
		
		Возврат Результат;
	КонецЕсли;

	//Подготовка и вызов http-запроса
	ПараметрыЗапроса = Новый Структура;

	//Параметры, необходимые для генерации http-запроса
	ПараметрыЗапроса.Вставить("client_id", Client_id);
	ПараметрыЗапроса.Вставить("client_secret", Client_secret);

	//Параметры, необходимые для генерации и выполнения http-запроса
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидЭТП", ВидЭТП);
	ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);

	ЗапросСервиса = ЗапросСервисаПолучитьТокенДоступаБидзаар(ПараметрыЗапроса);

	ДатаПолученияТокена = ТекущаяДатаСеанса();	//Для расчета даты окончания срока действия 
	
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса);

	Если РезультатЗапроса.КодСостояния = 200 Тогда
		ДанныеТокена = ОбщегоНазначения.JSONВЗначение(РезультатЗапроса.ТекстОтвета, "", Ложь);

		ТокенДоступа = "";
		СрокДействияСекунды = 0;
		
		Если ТипЗнч(ДанныеТокена) = Тип("Структура") Тогда
			ДанныеТокена.Свойство("access_token", ТокенДоступа);
			ДанныеТокена.Свойство("expires_in", СрокДействияСекунды);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТокенДоступа) и ЗначениеЗаполнено(СрокДействияСекунды) Тогда 
			Результат.КлючДоступа.ТокенДоступа = ТокенДоступа;
			Результат.КлючДоступа.СрокДействияТокенаДоступа = ДатаПолученияТокена + СрокДействияСекунды;
			
			ВладелецЗаписиХранилища = ПрефиксыСервиса(ВидЭТП).КлючДоступа + УчетнаяЗапись.УникальныйИдентификатор();
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ВладелецЗаписиХранилища, Результат.КлючДоступа, "КлючДоступа");
			УстановитьПривилегированныйРежим(Ложь);
			
		Иначе
			Результат.ТекстОшибки = "Неверный формат ответа";
		КонецЕсли;

	Иначе
		Если РезультатЗапроса.КодСостояния = 0 Тогда
			Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		ИначеЕсли РезультатЗапроса.КодСостояния = 200 Тогда
			Результат.ТекстОшибки = "OK";
		ИначеЕсли РезультатЗапроса.КодСостояния = 301 Тогда
			Результат.ТекстОшибки = "Moved Permanently";
		ИначеЕсли РезультатЗапроса.КодСостояния = 400 Тогда
			Результат.ТекстОшибки = НСтр(
				"ru = 'Не удалось выгрузить данные, проверьте корректность настроек подключения'");
		ИначеЕсли РезультатЗапроса.КодСостояния = 401 Тогда
			Результат.ТекстОшибки = НСтр(
				"ru = 'Не удалось выгрузить данные, проверьте корректность настроек подключения'");
		ИначеЕсли РезультатЗапроса.КодСостояния = 403 Тогда
			Результат.ТекстОшибки = "Forbidden";
		ИначеЕсли РезультатЗапроса.КодСостояния = 404 Тогда
			Результат.ТекстОшибки = "Not Found";
		ИначеЕсли РезультатЗапроса.КодСостояния = 409 Тогда
			Результат.ТекстОшибки = "Conflict";
		ИначеЕсли РезультатЗапроса.КодСостояния = 500 Тогда
			Результат.ТекстОшибки = "Internal Server Error";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Выполнение команды сервиса.
// Параметры:
//  ЗапросСервиса - Структура - параметры вызова или имя команды.
//
// Возвращаемое значение:
//  Структура - возвращаемые данные сервиса. Содержит свойства:
//     * КодСостояния - Число - код состояния (ответа) выполнения запроса HTTP-сервера, 
//                        см. http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html .
//     * ТекстОтвета - Строка - полученный ответ
//     * ТекстОшибки  - Строка - описание ошибки при выполнении HTTP-запроса. 
//
Функция ВыполнитьЗапрос(ЗапросСервиса) Экспорт

	Ответ = Новый Структура;
	Ответ.Вставить("КодСостояния", 0);
	Ответ.Вставить("ТекстОтвета", "");
	Ответ.Вставить("ТекстОшибки", "");
	
	Если Не ПравоРаботыССервисомБидзаар(Истина) Тогда
		Ответ.ТекстОшибки = НСтр("ru = 'Нарушение прав доступа.'");
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыРаботыССервисомАвторизации(ЗапросСервиса.ДополнительныеПараметры);

	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыПодключения.Таймаут;
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);

	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для Каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляЗапроса = Неопределено;
	ЗапросСервиса.Свойство("Данные", ДанныеДляЗапроса);
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ДанныеДляЗапроса) Тогда
		Если ТипЗнч(ДанныеДляЗапроса) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ДанныеДляЗапроса);
		ИначеЕсли ТипЗнч(ДанныеДляЗапроса) = Тип("Строка") Тогда
			Запрос.УстановитьТелоИзСтроки(ДанныеДляЗапроса);
		КонецЕсли;
	КонецЕсли;

	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Протокол);
	Если ПараметрыПодключения.Протокол = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение( , );
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, , , Прокси, Таймаут,
			ЗащищенноеСоединение, Ложь);
	Иначе
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт);
	КонецЕсли;

	Если Не МетодHTTPДопустим(ЗапросСервиса.Метод) Тогда
		ШаблонОшибки = НСтр("ru = 'Указан недопустимый метод HTTP (%1)'", ОбщегоНазначения.КодОсновногоЯзыка());
		Ответ.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЗапросСервиса.Метод);
		Возврат Ответ;
	КонецЕсли;

	Попытка
		РезультатЗапроса = Соединение.ВызватьHTTPМетод(ВРег(ЗапросСервиса.Метод), Запрос);

		Ответ.КодСостояния = РезультатЗапроса.КодСостояния;
		Ответ.ТекстОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При отправке запроса на сервер %1 возникла ошибка: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПараметрыПодключения.Сервер, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Ответ.ТекстОшибки = ТекстОшибки;
	КонецПопытки;

	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеКонструкторы

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - данные для запроса. Содержит свойства:
//  * Данные - Строка, ДвоичныеДанные -
//
Функция НовыйЗапросСервиса()

	ЗапросСервиса = Новый Структура;
	
	ЗапросСервиса.Вставить("Сервис", "");	// Имя сервиса
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес", ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод", ""); // Метод HTTP соединения, например POST. См. МетодыСоединения()
	ЗапросСервиса.Вставить("Права", "");
	ЗапросСервиса.Вставить("Данные", "");             // Двоичные данные или строка.
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Ошибки", Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("ОбработкаРезультата", Неопределено);        // Строка, ТаблицаЗначений, Неопределено
	ЗапросСервиса.Вставить("Страница", 0);  // page
	ЗапросСервиса.Вставить("РазмерСтраницы", 0);  // size
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", "");
	ЗапросСервиса.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	ЗапросСервиса.Вставить("Аутентификация", Ложь); // для некоторых методов, аутентификация может быть не нужна
	ЗапросСервиса.Вставить("ТипКонтента", "application/json");
	ЗапросСервиса.Вставить("Таймаут", 120);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("ДополнительныеПараметры", Новый Структура); // Дополнительные параметры
	ЗапросСервиса.Вставить("Контент", ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("Детализация", ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("Заголовки", Новый Соответствие); // Дополнительная информация для описания деталей запроса.

	Возврат ЗапросСервиса;

КонецФункции

// Описание данных для прохождения авторизации
// 
// Параметры:
//  ВидЭТП - ПеречислениеССылка.ВидыЭлектронныхТорговыхПлощадок - 
// 
// Возвращаемое значение:
//  Структура - описание данных. Состав меняется в зависимости от вида электронной площадки
//
Функция НовыйДанныеАвторизации(ВидЭТП)
	
	ДанныеАвторизации = Новый Структура;
	
	Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики Тогда
		ДанныеАвторизации.Вставить("KeyAPI", ""); //Ключ авторизации для поставщика
	ИначеЕсли ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели Тогда
		ДанныеАвторизации.Вставить("Client_id", ""); //Ключ аутентификации на ЭТП для покупателя
		ДанныеАвторизации.Вставить("Client_secret", ""); //Ключ авторизации для определения набора прав покупателя
	КонецЕсли;
	
	Возврат ДанныеАвторизации;
	
КонецФункции

// Описание ключ доступа, позволяющего вызывать функции сервисов ЭТП
// 
// Параметры:
//  ВидЭТП - ПеречислениеСсылка.ВидыЭлектронныхТорговыхПлощадок - Вид ЭТП
// 
// Возвращаемое значение:
//  Структура - описание свойств ключа доступа. Состав меняется в зависимости от вида электронной площадки  
// 
Функция НовыйКлючДоступа(ВидЭТП)
	
	КлючДоступа = Новый Структура;
	
	Если ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики
		Или ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели Тогда
		КлючДоступа.Вставить("ТокенДоступа", "");
		КлючДоступа.Вставить("СрокДействияТокенаДоступа", '00010101');
	КонецЕсли;
	
	Возврат КлючДоступа;
	
КонецФункции

// Описание события Бидзаар
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый таблица событий бидзаар:
// * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок
// * ИдентификаторПроцедуры - Строка - Идентификатор процедуры
// * Событие - Число - описание события
// * Дата - Дата - Дата события
Функция НовыйТаблицаСобытийБидзаар()
	
	ТаблицаСобытий = Новый ТаблицаЗначений();
	ТаблицаСобытий.Колонки.Добавить("УчетнаяЗапись", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок"));
	ТаблицаСобытий.Колонки.Добавить("ИдентификаторПроцедуры", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	ТаблицаСобытий.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ТаблицаСобытий.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Возврат ТаблицаСобытий;
	
КонецФункции

 // Описание опубликованного файла Бидзаар.
// 
// Возвращаемое значение:
//  Структура - Новый описание опубликованного файла бидзаар:
// * id - Строка - Идентификатор файла на площадке Бидзаар
// * index - Число - номер по порядку
// * name - Строка - имя файла без расширения 
// * extension - Строка - расширение файла
// * length - Число - длина файла
Функция НовыйОписаниеОпубликованногоФайлаБидзаар()
	ОписаниеФайла = Новый Структура;
	
    ОписаниеФайла.Вставить("id","");
    ОписаниеФайла.Вставить("index",0);
    ОписаниеФайла.Вставить("name","");
    ОписаниеФайла.Вставить("extension","");
    ОписаниеФайла.Вставить("length", 0);
	
	Возврат ОписаниеФайла;
КонецФункции

#КонецОбласти

#Область ФормированиеЗапросовКСервису

Функция ЗапросСервисаПолучитьТокенДоступаБидзаар(ПараметрыЗапроса)
	ЗапросСервиса = НовыйЗапросСервиса();

	ДополнительныеПараметры = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметры) Тогда
		Для Каждого ДополнительныйПараметр Из ПараметрыЗапроса.ДополнительныеПараметры Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	ЗапросСервиса.Наименование = НСтр("ru = 'Получение токена доступа'");
	ЗапросСервиса.Адрес = "/auth/connect/token";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	ДанныеЗапроса = Новый массив;	//Массив из строка
	ДанныеЗапроса.Добавить("grant_type=client_credentials");
	ДанныеЗапроса.Добавить("client_id=" + ПараметрыЗапроса.Client_id);
	ДанныеЗапроса.Добавить("client_secret=" + ПараметрыЗапроса.Client_secret);

	ЗапросСервиса.Данные = СтрСоединить(ДанныеЗапроса, "&");

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("charset", "UTF-8");
	Заголовки.Вставить("accept", "*/*");
	Заголовки.Вставить("content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("content-Length", СтрДлина(ЗапросСервиса.Данные));

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса, ЕстьДанныеДляОбработки)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	ЗапросСервиса.Наименование = НСтр("ru = 'Публикация товаров и услуг на ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/goods/" + СокрЛП(ПараметрыЗапроса.KeyAPI);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.Аутентификация = Ложь;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("charset", "UTF-8");
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("content-type", "application/json");

	Результат = ЗаполнитьДанныеДляСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса);

	ЗапросСервиса.Заголовки = Заголовки;

	ЗапросСервиса.Данные = ОбщегоНазначения.ЗначениеВJSON(Новый Структура("positions", Результат.ДанныеДляВыгрузки));
	ЗапросСервиса.ОбработкаРезультата = Результат.ОбработкаРезультата;

	Если ТипЗнч(Результат.ОбработкаРезультата) = Тип("Массив") Тогда
		ЕстьДанныеДляОбработки = Результат.ОбработкаРезультата.Количество() > 0;
	Иначе
		ЕстьДанныеДляОбработки = Ложь;
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

// Подготовка данных для создания и отправки http-запроса относящегося к публикации запроса коммерческих предложений на ЭТП Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   * UserEmail - Строка - зарегистрированный в Бидзаар Email пользователя
//   * ТокенДоступа - строка - актуальный токен доступа
//   * ДополнительныеПараметры - структура - значения вспомогательных параметров
// 
// Возвращаемое значение:
//  Структура - Запрос сервиса публикация запроса коммерческих предложений бидзаар:
// 
Функция ЗапросСервисаПубликацияЗапросаКоммерческихПредложенийБидзаар(ПараметрыЗапроса)

	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Публикация запроса коммерческих предложений на ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/procedures/draft";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Ложь;

	//Формирование тела запроса и таблицы с данными, которые необходимо обработать после выполнения запроса 
	Результат = ЗаполнитьДанныеДляСервисаПубликацияЗапросаКоммерческихПредложенийБидзаар(ПараметрыЗапроса);
	ЗапросСервиса.Данные = ОбщегоНазначения.ЗначениеВJSON(Результат.ДанныеДляВыгрузки);

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;

КонецФункции

// Подготовка данных для создания и отправки http-запроса относящегося к публикации файлов на ЭТП Бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   * UserEmail - Строка - зарегистрированный в Бидзаар Email пользователя
//   * ТокенДоступа - строка - актуальный токен доступа
//   * ДополнительныеПараметры - структура - значения вспомогательных параметров
// 
// Возвращаемое значение:
//  Структура - Запрос сервиса публикация запроса коммерческих предложений бидзаар:
//
Функция ЗапросСервисаПубликацияФайловБидзаар(ПараметрыЗапроса)
	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Публикация запроса коммерческих предложений на ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/files/upload";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Ложь;

	//Формирование тела запроса и таблицы с данными, которые необходимо обработать после выполнения запроса 
	Результат = ЗаполнитьДанныеДляСервисаПубликацияФайловБидзаар(ПараметрыЗапроса);
	ЗапросСервиса.Данные = ОбщегоНазначения.ЗначениеВJSON(Результат.ДанныеДляВыгрузки);

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;
КонецФункции

// Подготовка данных для создания и отправки http-запроса относящегося к приглашеню участников.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   * UserEmail - Строка - зарегистрированный в Бидзаар Email пользователя
//   * ТокенДоступа - строка - актуальный токен доступа
//   * ИдентификаторЗапроса - строка - идентификатор запроса в сервисе
//   * ОписанияУчастников - массив из структура - см описание ЗаполнитьДанныеДляСервисаПриглашениеУчастниковБидзаар
//   * ДополнительныеПараметры - структура - значения вспомогательных параметров
// 
// Возвращаемое значение:
//  Структура - Запрос сервиса публикация запроса коммерческих предложений бидзаар:
//
Функция ЗапросСервисаПриглашениеУчастниковБидзаар(ПараметрыЗапроса)
	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Приглашение участников ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/procedures/" + ПараметрыЗапроса.ИдентификаторЗапроса + "/participants/bytinemail";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Ложь;

	//Формирование тела запроса и таблицы с данными, которые необходимо обработать после выполнения запроса 
	Результат = ЗаполнитьДанныеДляСервисаПриглашениеУчастниковБидзаар(ПараметрыЗапроса);
	ЗапросСервиса.Данные = ОбщегоНазначения.ЗначениеВJSON(Результат.ДанныеДляВыгрузки);

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;
КонецФункции

// Подготовка данных для создания и отправки http-запроса относящегося к получению файла
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   * UserEmail - Строка - зарегистрированный в Бидзаар Email пользователя
//   * ТокенДоступа - строка - актуальный токен доступа
//   * ИдентификаторФайла - строка - идентификатор файла в сервисе
//   * ДополнительныеПараметры - структура - значения вспомогательных параметров
// 
// Возвращаемое значение:
//  Структура - Запрос сервиса 'Получение файла'
//
Функция ЗапросСервисаПолучениеФайлаБидзаар(ПараметрыЗапроса) Экспорт
	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение файла Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/files/" + ПараметрыЗапроса.ИдентификаторФайла;
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Ложь;

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("fileId", ПараметрыЗапроса.ИдентификаторФайла);
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;
КонецФункции

Функция ЗаполнитьДанныеДляСервисаПубликацияТоваровИУслугБидзаар(ПараметрыЗапроса)

	ДанныеДляВыгрузки = Новый Массив;	//массив из строка
	ОбработкаРезультата = Новый ТаблицаЗначений;
	
	Результат = Новый Структура("ДанныеДляВыгрузки, ОбработкаРезультата", ДанныеДляВыгрузки, ОбработкаРезультата);

	ВариантВыгрузки = -1;
	ПараметрыЗапроса.Свойство("ВариантВыгрузки", ВариантВыгрузки);

	Запрос = Новый Запрос;

	Если ВариантВыгрузки = -1 Тогда //Данные для проверки подключения
		
		Возврат Результат;

	ИначеЕсли ВариантВыгрузки = 2 Тогда //Данные по указанному в параметрах списку

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Список.Номенклатура,
		|	Список.Характеристика
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	&Список КАК Список
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	&УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВТ_Список.Номенклатура КАК Номенклатура,
		|	ВТ_Список.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|		ПО &УчетнаяЗапись = СтатусыПубликацииТоваровЭТП.УчетнаяЗапись
		|		И ВТ_Список.Номенклатура = СтатусыПубликацииТоваровЭТП.Номенклатура
		|		И ВТ_Список.Характеристика = СтатусыПубликацииТоваровЭТП.Характеристика
		|ГДЕ
		|	НЕ СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры ЕСТЬ NULL
		|	И СтатусыПубликацииТоваровЭТП.ДатаВыгрузки < &НачалоВыгрузки";

		Запрос.УстановитьПараметр("Список", ПараметрыЗапроса["Список"]);

	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись КАК УчетнаяЗапись,
		|	СтатусыПубликацииТоваровЭТП.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииТоваровЭТП.Характеристика КАК Характеристика,
		|	СтатусыПубликацииТоваровЭТП.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЭТП КАК СтатусыПубликацииТоваровЭТП
		|ГДЕ
		|	СтатусыПубликацииТоваровЭТП.УчетнаяЗапись = &УчетнаяЗапись
		|	И ВЫБОР
		|		КОГДА &ВариантВыгрузки = 1
		|			ТОГДА СтатусыПубликацииТоваровЭТП.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭТП.КПубликации))
		|		ИНАЧЕ СтатусыПубликацииТоваровЭТП.ДатаВыгрузки < &НачалоВыгрузки
		|	КОНЕЦ";

		Запрос.УстановитьПараметр("ВариантВыгрузки", ВариантВыгрузки);

	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(ПараметрыЗапроса["ЛимитПозицийНаИтерацию"], "ЧГ="));

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УчетнаяЗапись", ПараметрыЗапроса["УчетнаяЗапись"]);
	Запрос.УстановитьПараметр("НачалоВыгрузки", ПараметрыЗапроса["НачалоВыгрузки"]);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		ДанныеДляВыгрузки.Добавить(ВыборкаДанных["ПредставлениеНоменклатуры"]);
	КонецЦикла;

	Результат.ОбработкаРезультата = РезультатЗапроса.Выгрузить();

	Возврат Результат;

КонецФункции

// Заполнить данные для сервиса публикация запроса коммерческих предложений бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса. Содержит свойства:
//   *ЗапросКоммерческихПредложений - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - содержит выгружаемые данные
//   *ОписанияФайловСервиса - массив из структура - данные ранее опубликованных файлов. см описание НовыйОписаниеОпубликованногоФайлаБидзаар()
// 
// Возвращаемое значение:
// Структура - содержит свойства:
//  *ДанныеДляВыгрузки - структура - данные в формате http-запроса
//  *ОбработкаРезультата - ТаблицаЗначений - данные 1С, подлежащие пост обработке после успешного выполения запроса
//  
Функция ЗаполнитьДанныеДляСервисаПубликацияЗапросаКоммерческихПредложенийБидзаар(ПараметрыЗапроса)

	ДанныеДляВыгрузки = Новый Структура;
	ОбработкаРезультата = Новый ТаблицаЗначений;

	Результат = Новый Структура("ДанныеДляВыгрузки, ОбработкаРезультата", ДанныеДляВыгрузки, ОбработкаРезультата);

	ЗапросКП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗапроса.ЗапросКоммерческихПредложений,
		"Валюта.Наименование, Номер, Дата, КраткоеОписание,
		|ДатаОкончанияРассмотрения, АдресДоставкиЗначенияПолей,
		|Менеджер, МенеджерEmail, МенеджерНомерТелефона, Налогообложение, ЦенаВключаетНДС,
		|УсловиеПоставкиТекст, УсловияОплатыТекст, ПрочаяДополнительнаяИнформацияТекст,
		|МожетОбеспечиватьсяЧастично");
	
	ЧастиОписаниия = Новый Массив;	//Массив из строка
	Если Не ПустаяСтрока(ЗапросКП.УсловиеПоставкиТекст) Тогда
		ЧастиОписаниия.Добавить("<b>" + НСтр("ru = 'Условия поставки:'") + "</b>");
		ЧастиОписаниия.Добавить(СокрЛП(ЗапросКП.УсловиеПоставкиТекст));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗапросКП.УсловияОплатыТекст) Тогда
		ЧастиОписаниия.Добавить("<b>" + НСтр("ru = 'Условия оплаты:'") + "</b>");
		ЧастиОписаниия.Добавить(СокрЛП(ЗапросКП.УсловияОплатыТекст));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗапросКП.ПрочаяДополнительнаяИнформацияТекст) Тогда
		ЧастиОписаниия.Добавить("<b>" + НСтр("ru = 'Прочее:'") + "</b>");
		ЧастиОписаниия.Добавить(СокрЛП(ЗапросКП.ПрочаяДополнительнаяИнформацияТекст));
	КонецЕсли;
	
	ДанныеДляВыгрузки.Вставить("status", 0);	//Черновик
	ДанныеДляВыгрузки.Вставить("tradingType", 2);	//Торги за единицу
	ДанныеДляВыгрузки.Вставить("specialCondition");	//специальных условий нет
	ДанныеДляВыгрузки.Вставить("type", 1);	//Закупка
	ДанныеДляВыгрузки.Вставить("name", "" + СокрЛП(ЗапросКП.Номер) + " от " + Формат(ЗапросКП.Дата, "ДФ=dd.MM.yyyy;"));
	ДанныеДляВыгрузки.Вставить("description", СтрСоединить(ЧастиОписаниия, "<br/>"));
	ДанныеДляВыгрузки.Вставить("acceptanceEndDate", ЗапросКП.ДатаОкончанияРассмотрения);	//Дата окончания раунда приема предложений
	ДанныеДляВыгрузки.Вставить("openType", 0);	//Открытая (все поставщики видят процедуру)
	ДанныеДляВыгрузки.Вставить("otherParticipantsVisibility", 2);	//Участники видят предложения конкурентов без наименования
	ДанныеДляВыгрузки.Вставить("vatEnabled", ЗапросКП.Налогообложение И ЗапросКП.ЦенаВключаетНДС); // Цена включает НДС
	ДанныеДляВыгрузки.Вставить("alternativeProposals", 1);	//Максимум одно альтернативное предложение
	ДанныеДляВыгрузки.Вставить("currency", ЗапросКП.ВалютаНаименование);	//Наименование валюты. Формат ISO 4217
	ДанныеДляВыгрузки.Вставить("additionalCurrencies");	//Предложения только в основной валюте
	ДанныеДляВыгрузки.Вставить("prolongationTime", 15);	//Автопродление приема предложений - 15 минутах
	ДанныеДляВыгрузки.Вставить("acceptanceEndNotificationHours", 48);	//Напомнить об окончании срока рассмотрения за 48 часов
	ДанныеДляВыгрузки.Вставить("additionalAcceptanceEndNotificationHours", 0);	//Не информировать повторно об окончании срока рассмотрения
	ДанныеДляВыгрузки.Вставить("ownerVisibility", 0);	//орагизатор видит предложения участников на этапе сбора 
	ДанныеДляВыгрузки.Вставить("approximateDeadlineForSummingUp", 2);	//В течение 2 дней итоги должны быть подведены
	ДанныеДляВыгрузки.Вставить("contacts", ПредставлениеКонтактнойИнформацииЗапросаКоммерческихПредложений(ЗапросКП));
	
	//Адреса доставки
	АдресДоставкиЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
		ЗапросКП.АдресДоставкиЗначенияПолей,
		Перечисления.ТипыКонтактнойИнформации.Адрес);

	ПолеСтрана = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "country", ""); // Строка
	ПолеРегион = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "area", "");
	ПолеГород = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "areaValue", "");
	ПолеТипУлицы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "streetType", "");
	ПолеУлица = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "street", "");
	ПолеНомерДома = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "houseNumber", "");
	ПолеСтроения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "buildings", Новый массив);
	ПолеСтроение = "";
	Если ТипЗнч(ПолеСтроения) = Тип("Массив") И ПолеСтроения.Количество() = 1 Тогда
		Если ТипЗнч(ПолеСтроения[0]) = Тип("Структура") Тогда
			ТипСтроения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПолеСтроения[0], "type", "");
			НомерСтроения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПолеСтроения[0], "number", "");
			ПолеСтроение = СокрЛП("" + ТипСтроения + " " + НомерСтроения);
		КонецЕсли;
	КонецЕсли;

	АдресДоставки = Новый Структура;
	АдресДоставки.Вставить("country", ПолеСтрана);
	АдресДоставки.Вставить("region", ПолеРегион);
	АдресДоставки.Вставить("city", ПолеГород);
	АдресДоставки.Вставить("building", "" + ПолеТипУлицы + " " + ПолеУлица + " " + ПолеНомерДома + " " + ПолеСтроение);
	АдресВСвободнойФорме = УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(ЗапросКП.АдресДоставкиЗначенияПолей); // Булево
	Если АдресВСвободнойФорме Тогда
		ПолеАдресДоставки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(АдресДоставкиЗначенияПолей, "value", ""); // Строка
		ПолеАдресДоставки = СокрЛП(СтрЗаменить(ПолеАдресДоставки, ПолеСтрана + ",", ""));
		АдресДоставки.Вставить("building", ПолеАдресДоставки);
	КонецЕсли;

	АдресаДоставки = Новый Массив; // Массив Из Структура
	АдресаДоставки.Добавить(АдресДоставки);

	ДанныеДляВыгрузки.Вставить("deliveryAddresses", АдресаДоставки);
	
	//теги для классификации запроса коммерческих предложений
	ДанныеДляВыгрузки.Вставить("tags", "");
	ДанныеДляВыгрузки.Вставить("betUpDown", Истина);	//Разрешено и повышать и понижать цену
	ДанныеДляВыгрузки.Вставить("betStep", 1);	//Шаг изменения - 1 единица валюты
	ДанныеДляВыгрузки.Вставить("betStepType", ?(ЗапросКП.МожетОбеспечиватьсяЧастично = 1, 1, 0)); // В чем изменяется цена: 0 - процент, 1 - валюта
	ДанныеДляВыгрузки.Вставить("betReference", 0);	//Отсчет новой цены от своего предложения
	ДанныеДляВыгрузки.Вставить("betPrice", 0);
	ДанныеДляВыгрузки.Вставить("positionsEnabled", Истина);	//Спецификация по позициям

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыЗапроса.ЗапросКоммерческихПредложений);
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.ПривестиЗначение(Неопределено));
	Запрос.УстановитьПараметр("НоменклатураЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.ПривестиЗначение(Неопределено));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК ГруппаТоваров,
	|	ТаблицаТоваров.ИдентификаторСтрокиЗапроса КАК НоменклатураИдентификатор,
	|	ТаблицаТоваров.НаименованиеСтрокой КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(&НоменклатураЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.МаксимальнаяЦена КАК МаксимальнаяЦена
	|ИЗ
	|	Документ.ЗапросКоммерческихПредложенийПоставщиков.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	ГруппаТоваров";
	
	ИнтеграцияСЭлектроннымиТорговымиПлощадкамиПереопределяемый.ДополнитьТекстЗапросаЕдиницейИзмеренияНоменклатуры(
		Запрос.Текст,
		"&НоменклатураЕдиницаИзмерения",
		"ТаблицаТоваров");
	
	РезультатЗапроса = Запрос.Выполнить();

	ОписанияГруппТоваров = Новый Массив; // Массив Из Структура
	НомерГруппыТоваров = 1;

	ВыборкаГруппТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппТоваров.Следующий() Цикл

		ОписаниеГруппыТовара = Новый Структура;
		ОписаниеГруппыТовара.Вставить("originId", XMLСтрока(ВыборкаГруппТоваров["ГруппаТоваров"]));
		ОписаниеГруппыТовара.Вставить("index", НомерГруппыТоваров);
		ОписаниеГруппыТовара.Вставить("name", "Состав лота");

		Если ЗапросКП.МожетОбеспечиватьсяЧастично = 0 Тогда
			ОписаниеГруппыТовара.Вставить("deviationType", 2);	//В комм. предложении разрешена подача части позиций
		ИначеЕсли ЗапросКП.МожетОбеспечиватьсяЧастично = 1 Тогда
			ОписаниеГруппыТовара.Вставить("deviationType", 0);	//Все товары группы идут одним неделимым лотом
		Иначе
			ОписаниеГруппыТовара.Вставить("deviationType", 1);	//В комм. предложении разрешена подача части позиций с отклонением по кол-ву
		КонецЕсли;
		
		ОписаниеГруппыТовара.Вставить("betUpDown", Истина);	//Цену можно как повышать, так и понижать
		ОписаниеГруппыТовара.Вставить("betStep", 1);	//Шаг изменения - 1 единица валюты
		ОписаниеГруппыТовара.Вставить("betStepType", ?(ЗапросКП.МожетОбеспечиватьсяЧастично = 1, 1, 0)); // В чем изменяется цена: 0 - процент, 1 - валюта
		ОписаниеГруппыТовара.Вставить("betReference", 0);	//Отсчет новой цены от своего предложения
		ОписаниеГруппыТовара.Вставить("betPrice", 0);
		ОписаниеГруппыТовара.Вставить("additionalFields");

		ОписанияТоваров = Новый Массив;	//массив из структура

		Выборка = ВыборкаГруппТоваров.Выбрать();
		Пока Выборка.Следующий() Цикл

			ОписаниеТовара = Новый Структура;
			ОписаниеТовара.Вставить("originId", Выборка["НоменклатураИдентификатор"]);
			ОписаниеТовара.Вставить("index", Выборка["НомерСтроки"]);
			ОписаниеТовара.Вставить("name", Выборка["НоменклатураНаименование"]);
			ОписаниеТовара.Вставить("description", Выборка["НоменклатураНаименование"]);
			ОписаниеТовара.Вставить("count", Выборка["Количество"]);
			ОписаниеТовара.Вставить("unit", Выборка["ЕдиницаИзмеренияНаименование"]);
			ОписаниеТовара.Вставить("price", Выборка["МаксимальнаяЦена"]);
			ОписаниеТовара.Вставить("betPrice", Выборка["МаксимальнаяЦена"]);
			ОписаниеТовара.Вставить("additionalFieldsValues");
			ОписаниеТовара.Вставить("files");

			ОписанияТоваров.Добавить(ОписаниеТовара);

		КонецЦикла;

		ОписаниеГруппыТовара.Вставить("positions", ОписанияТоваров);

		ОписанияГруппТоваров.Добавить(ОписаниеГруппыТовара);

		НомерГруппыТоваров = НомерГруппыТоваров + 1;

	КонецЦикла;

	ДанныеДляВыгрузки.Вставить("positionGroups", ОписанияГруппТоваров);

	//Документы запроса коммерческих приложений
	ПрисоединяемыеФайлы = Новый массив;	// массив из структура
	ДанныеДляВыгрузки.Вставить("commonFiles", ПрисоединяемыеФайлы);

	Для Каждого ОписанияФайлаСервиса из ПараметрыЗапроса.ОписанияФайловСервиса Цикл
		ПрисоединяемыеФайлы.Добавить(ОписанияФайлаСервиса);
	КонецЦикла;

	ДанныеДляВыгрузки.Вставить("questionnaireEnabled", Ложь);

	ДанныеДляВыгрузки.Вставить("questionnaire");

	Возврат Результат;

КонецФункции

// Заполнить данные для сервиса публикация документов бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   *ОписанияФайлов - массив из структура - публикуемые файлы. Содержит свойства:
//    **Имя - строка - имя публикуемого файла без расширения
//    **Расширение - строка - расширение выгружаемого файла
//    **Данные - строка - двоичные данные файла в формате Base64 
// 
// Возвращаемое значение:
//  Структура - Заполнить данные для сервиса публикация документов бидзаар.Содержит свойства:
//   *ДанныеДляВыгрузки - Массив из структура - данные в формате htpp-запроса Бидзаар 
//   *ОбработкаРезультата - ТаблицаЗначений - данные, которые необходимо обработать после выполнения запроса сервиса 
Функция ЗаполнитьДанныеДляСервисаПубликацияФайловБидзаар(ПараметрыЗапроса)
	
	ДанныеДляВыгрузки = Новый Массив;	//массив из структура
	ОбработкаРезультата = Новый ТаблицаЗначений;

	Результат = Новый Структура("ДанныеДляВыгрузки, ОбработкаРезультата", ДанныеДляВыгрузки, ОбработкаРезультата);

	Для Каждого ОписаниеФайла Из ПараметрыЗапроса.ОписанияФайлов Цикл

		ОписаниеФайлаСервиса = Новый Структура;
		ОписаниеФайлаСервиса.Вставить("name", ОписаниеФайла.Имя);
		ОписаниеФайлаСервиса.Вставить("extension", ОписаниеФайла.Расширение);
		ОписаниеФайлаСервиса.Вставить("base64", ОписаниеФайла.Данные);

		ДанныеДляВыгрузки.Добавить(ОписаниеФайлаСервиса);
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

// Заполнить данные для сервиса публикация документов бидзаар.
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   *ОписанияУчастников - массив из структура - данные приглашаемых участников. Содержит свойства:
//    **ИНН - строка - имя публикуемого файла без расширения
//    **email - строка - email контактного лица
//    **companyName - строка - наименование организации 
// 
// Возвращаемое значение:
//  Структура - данные для сервиса приглашения участников.Содержит свойства:
//   *ДанныеДляВыгрузки - Массив из структура - данные в формате htpp-запроса Бидзаар 
//   *ОбработкаРезультата - ТаблицаЗначений - данные, которые необходимо обработать после выполнения запроса сервиса 
Функция ЗаполнитьДанныеДляСервисаПриглашениеУчастниковБидзаар(ПараметрыЗапроса)
	
	ДанныеДляВыгрузки = Новый Массив;	//массив из структура
	ОбработкаРезультата = Новый ТаблицаЗначений;

	Результат = Новый Структура("ДанныеДляВыгрузки, ОбработкаРезультата", ДанныеДляВыгрузки, ОбработкаРезультата);

	Для Каждого ОписаниеУчастника Из ПараметрыЗапроса.ОписанияУчастников Цикл

		ОписаниеУчастникаСервиса = Новый Структура;
		ОписаниеУчастникаСервиса.Вставить("tin", ОписаниеУчастника.ИНН);
		ОписаниеУчастникаСервиса.Вставить("email", ОписаниеУчастника.email);
		ОписаниеУчастникаСервиса.Вставить("companyName", ОписаниеУчастника.Наименование);

		ДанныеДляВыгрузки.Добавить(ОписаниеУчастникаСервиса);
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

// Подготовка данных для создания и отправки http-запроса относящегося к получению событий, произошедшими с документами на ЭТП Бидзаар
// 
// Параметры:
//  ПараметрыЗапроса - структура - Параметры запроса. Содержит свойства:
//   * UserEmail - Строка - зарегистрированный в Бидзаар Email пользователя
//   * ТокенДоступа - строка - актуальный токен доступа
//   * ДополнительныеПараметры - структура - значения вспомогательных параметров
// 
// Возвращаемое значение:
//  Структура - Запрос сервиса публикация запроса коммерческих предложений бидзаар:
//
Функция ЗапросСервисаПолучениеСобытийБидзаар(ПараметрыЗапроса)

	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса,
		"ДополнительныеПараметры", Новый Структура); // Структура
	Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
		ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
	КонецЦикла;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка событий'");
	ДатаОбновления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса, "ДатаОбновления", Дата(1, 1, 1)); // Дата
	ПараметрДата = ?(ДатаОбновления = Дата(1, 1, 1), "", "?dateFrom=" + Формат(ДатаОбновления, "ДФ=yyyy.MM.dd;"));
	ЗапросСервиса.Адрес = СтрШаблон("/api/connector/v1/events/%1", ПараметрДата);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Истина;

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеИдентификаторовКоммерческихПредложенийБидзаар(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение идентификаторв коммерческих предложений ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/procedures/" + ПараметрыЗапроса.ИдентификаторЗапросаКП + "/proposals-ids";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Истина;

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеДанныхКоммерческихПредложенийБидзаар(ПараметрыЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	Если ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметрыЗапроса) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметрыЗапроса Цикл
			ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение идентификаторв коммерческих предложений ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/procedures/" + ПараметрыЗапроса.ИдентификаторЗапросаКП + "/proposals";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Истина;

	//Переменные http-запроса
	Если ПараметрыЗапроса["ИдентификаторыКП"].Количество() > 0 Тогда
		ЗапросСервиса.Адрес = ЗапросСервиса.Адрес + "?ids=" + СтрСоединить(ПараметрыЗапроса["ИдентификаторыКП"],"&ids=");
	КонецЕсли;

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;
КонецФункции

// Запрос сервиса получение данных участников.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса
// 
// Возвращаемое значение:
//  ЗапросСервиса - Структура
Функция ЗапросСервисаПолучениеДанныхУчастниковПоЗапросуБидзаар(ПараметрыЗапроса)

	ЗапросСервиса = НовыйЗапросСервиса();

	//Трансляция дополнительных параметров запроса в описание запроса
	ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса,
		"ДополнительныеПараметры", Новый Структура); // Структура
	Для Каждого ДополнительныйПараметр Из ДополнительныеПараметры Цикл
		ЗапросСервиса.ДополнительныеПараметры.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
	КонецЦикла;

	Если Не ДополнительныеПараметры.Свойство("РазделУчета") Тогда
		ДополнительныеПараметры.Вставить("РазделУчета", ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели());
	КонецЕсли;

	//Данные для вызова http-запроса
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение идентификаторв коммерческих предложений ЭТП Бидзаар'");
	ЗапросСервиса.Адрес = "/api/connector/v1/procedures/" + ПараметрыЗапроса.ИдентификаторЗапросаКП + "/participants";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Аутентификация = Истина;

	//Заполнение заголовков http-запроса
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Bidzaar-Connector-User-Email", СокрЛП(ПараметрыЗапроса.UserEmail));
	Заголовки.Вставить("Authorization", "Bearer " + ПараметрыЗапроса.ТокенДоступа);

	ЗапросСервиса.Заголовки = Заголовки;

	Возврат ЗапросСервиса;

КонецФункции

#КонецОбласти

#Область ОбработкаРезультатовЗапросовКСервису

// Обработатка данных, выгруженных на ЭТП Бидзаар
// 
// Параметры:
//  ОбработкаРезультата - ТаблицаЗначений - Обработка результата
// 
// Возвращаемое значение:
//  Число - количество опубликованных позиций
//
Функция ОбработатьРезультатЗапросаПубликацияТоваровИУслугБидзаар(ОбработкаРезультата)

	КоличествоОпубликованныхПозиций = 0;

	ДанныеДляИзменения = ОбработкаРезультата;

	ДатаВыгрузки = ТекущаяДатаСеанса();

	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();

	Попытка

		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииТоваровЭТП");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.ИсточникДанных = ДанныеДляИзменения;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗапись", "УчетнаяЗапись");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		БлокировкаДанных.Заблокировать();

		Для Каждого СтрокаДанных Из ДанныеДляИзменения Цикл
			Запись = РегистрыСведений.СтатусыПубликацииТоваровЭТП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДанных);
			Запись.ДатаВыгрузки = ДатаВыгрузки;
			Запись.Статус = Перечисления.СтатусыОбъектовЭТП.Выгружено;
			Запись.Записать();
			КоличествоОпубликованныхПозиций = КоличествоОпубликованныхПозиций + 1;
		КонецЦикла;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПоставщики),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат КоличествоОпубликованныхПозиций;

КонецФункции

#КонецОбласти

#Область Права

// Проверяет наличие прав для работы с сервисом электронной торговой площадки
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоРаботыССервисомБидзаар(ВыводитьСообщение = Ложь) Экспорт

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;

	ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.УправлениеВыгрузкамиВБидзаар);

	Возврат ЕстьПраво;

КонецФункции

#КонецОбласти

// Проверяет строку на допустимость использования в качестве метода HTTP согласно разделу 4 RFC 7231.
// Параметры:
//  Метод	 - Строка - Переданный метод HTTP.
// 
// Возвращаемое значение:
//  Булево - Признак допустимости метода HTTP.
//
Функция МетодHTTPДопустим(Метод)

	Методы = Новый Структура("DELETE, GET, POST, PUT");
	Возврат Методы.Свойство(ВРег(Метод)) <> Неопределено;

КонецФункции

// Проверка актуальности токена 
// 
// Параметры:
//  КлючДоступа - Структура, Неопределено - Ключ доступа. Содержит свойства:
//  * СрокДействияТокенаДоступа - Дата - Дата-время окончания действия токена доступа
// 
// Возвращаемое значение:
//  Булево - Истина - срок токена доступа актуален
Функция СрокТокенаДоступаАктуален(КлючДоступа)
	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КлючДоступа.СрокДействияТокенаДоступа = '00010101' Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Результат = КлючДоступа.СрокДействияТокенаДоступа > ТекущаяДатаСеанса();
	
	Возврат Результат;
	
КонецФункции

// Формирует представление контактной информации для отражения в ЭТП
// 
// Параметры:
//  ЗапросКП - Документобъект.ЗапросКоммерческихПредложенийПоставщиков - документ, содержащий контактную информацию 
// 
// Возвращаемое значение:
//  Строка - Представление контактной информации запроса коммерческих предложений
Функция ПредставлениеКонтактнойИнформацииЗапросаКоммерческихПредложений(ЗапросКП)

	ЧастиКИ = Новый Массив;	//Массив из строка
	
	Если ЗначениеЗаполнено(ЗапросКП.Менеджер) Тогда
		ФИО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗапросКП.Менеджер, "Наименование");
		ЧастиКИ.Добавить(ФИО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросКП.МенеджерEmail) Тогда
		ЧастиКИ.Добавить(НСтр("ru ='email'") + ": " + ЗапросКП.МенеджерEmail);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗапросКП.МенеджерНомерТелефона) Тогда
		ЧастиКИ.Добавить(НСтр("ru ='телефон'") + ": " + ЗапросКП.МенеджерНомерТелефона);
	КонецЕсли;

	Возврат СтрСоединить(ЧастиКИ, "; ");

КонецФункции

// формирует план публикации запроса коммерческих предложений и переводит состояние документа в статус "Выполняется"
// 
// Параметры:
//  ЗапросКП - ДокументСсылка.ЗапросКоммерческихПредложенийПоставщиков - публикуемый документ
//  Организация - СправочникСсылка.Организации - организация публикуемого документа
// 
// Возвращаемое значение:
//  СправочникОбъект.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений - План публикации запроса коммерческих предложений бидзаар
Функция ПланПубликацииЗапросаКоммерческихПредложенийБидзаар(ЗапросКП, Организация)
	
	// Определение текущего плана синхронизации.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка КАК Ссылка,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации КАК СпособСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Дата КАК Дата,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Номер КАК Номер
	|ПОМЕСТИТЬ ПланСинхронизации
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Требуется)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.Ссылка,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СпособСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДействиеСинхронизации,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Дата,
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец.Номер
	|ИЗ
	|	Справочник.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений КАК ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений
	|ГДЕ
	|	ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.ДокументВладелец = &ДокументВладелец
	|	И ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СостояниеСинхронизации = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Ошибка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланСинхронизации.Ссылка КАК Ссылка,
	|	ПланСинхронизации.СпособСинхронизации КАК СпособСинхронизации,
	|	ПланСинхронизации.ДействиеСинхронизации КАК ДействиеСинхронизации,
	|	ПланСинхронизации.Дата КАК Дата,
	|	ПланСинхронизации.Номер КАК Номер
	|ИЗ
	|	ПланСинхронизации КАК ПланСинхронизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСинхронизации.СпособСинхронизации.Порядок
	|";

	Запрос.УстановитьПараметр("ДокументВладелец", ЗапросКП);

	 СобытиеЖР = СобытиеЖурналаРегистрации(Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели);

	СостояниеЗапросаКП = РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ТекущееСостояние(ЗапросКП);
	СостояниеЗапросаКП.Действие = НСтр("ru = 'Публикация запроса'");

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда

		ПланПубликации = Справочники.ОснованияЭлектронныхДокументовПоЗапросамКоммерческихПредложений.СоздатьЭлемент();
		ПланПубликации.ДокументВладелец = ЗапросКП;
		ПланПубликации.СпособСинхронизации = Перечисления.СпособыСинхронизацииЗапросовКоммерческихПредложений.Сервис;
		ПланПубликации.КлючИдемпотентности = Строка(Новый УникальныйИдентификатор);
		ПланПубликации.Организация = Организация;
		ПланПубликации.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииЗапросовКоммерческихПредложений.Добавить;
		ПланПубликации.СостояниеСинхронизации = Перечисления.СостоянияСинхронизацииЗапросовКоммерческихПредложений.Выполняется;

		НачатьТранзакцию();
		Попытка
			ПланПубликации.Записать();
			РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ЗаписатьСтатус(ЗапросКП, СостояниеЗапросаКП,
				ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.ИмяСервисаБидзаар());
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ПланПубликации = Неопределено;
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;

	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ПланПубликации = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			РегистрыСведений.СостоянияЗапросовКоммерческихПредложений.ЗаписатьСтатус(ЗапросКП, СостояниеЗапросаКП,
				ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.ИмяСервисаБидзаар());
		Исключение
			ПланПубликации = Неопределено;
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
		
	КонецЕсли;

	Возврат ПланПубликации;

КонецФункции

// Текст ошибки по коду ответа.
// 
// Параметры:
//  Результат - Структура, Число, Неопределено - Код или результат http-запроса
//  * ТекстОтвета - Строка - Текст ответа
// 
// Возвращаемое значение:
//  Строка - текстовое описание ошибки
Функция ТекстОшибкиПоКодуОтвета(Результат = Неопределено, ПараметрыЗапроса = Неопределено)
	
	ТекстОшибки = "";
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КодОтвета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "КодСостояния"); // Число
		ТекстОтвета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ТекстОтвета", ""); // Строка
		Если Не ПустаяСтрока(ТекстОтвета) И КодОтвета <> 200 Тогда
			ДанныеОтвета = ОбщегоНазначения.JSONВЗначение(ТекстОтвета);
			НаборОшибок = ДанныеОтвета["errors"]; // Соответствие
			Если ЗначениеЗаполнено(НаборОшибок) Тогда
				МассивОшибок = Новый Массив; // Массив из Строка
				Для каждого ТипОшибки Из НаборОшибок Цикл
					Если ТипЗнч(ТипОшибки.Значение) = Тип("Массив") Тогда
						Для каждого Ошибка из ТипОшибки.Значение Цикл // Строка
							МассивОшибок.Добавить(Ошибка);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Если МассивОшибок.Количество() > 0 Тогда
					Возврат СтрСоединить(МассивОшибок, Символы.ПС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КодОтвета = Результат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапроса,
			"ДополнительныеПараметры", Новый Структура); // Структура
		РазделУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "РазделУчета", "");
	КонецЕсли;
	
	Если КодОтвета = 200 Тогда
		ТекстОшибки = "OK";
	ИначеЕсли КодОтвета = 301 Тогда
		ТекстОшибки = "Moved Permanently";
	ИначеЕсли КодОтвета = 400 Тогда
		ТекстОшибки = НСтр("ru = 'Некорректный запрос, проверьте корректность настроек подключения'");
	ИначеЕсли КодОтвета = 401 Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка авторизации, проверьте корректность настроек подключения'");
	ИначеЕсли КодОтвета = 403 Тогда
		ТекстОшибки = "Forbidden";
	ИначеЕсли КодОтвета = 404 Тогда
		ТекстОшибки = "Not Found";
	ИначеЕсли КодОтвета = 409 Тогда
		ТекстОшибки = "Conflict";
	ИначеЕсли КодОтвета = 500 Тогда
		ТекстОшибки = НСтр("ru = 'Внутренняя ошибка сервера'");
		Если РазделУчета = ИнтеграцияСЭлектроннымиТорговымиПлощадкамиКлиентСервер.РазделУчетаПокупатели() Тогда
			ДополнительныйТекст = НСтр("ru = 'Возможно, указанный для менеджера email не зарегистрирован в сервисе'");
			ТекстОшибки = СтрШаблон("%1. %2", ТекстОшибки, ДополнительныйТекст);
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru = 'Ответ сервиса не соотвествует формату'");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Получить обновить данные авторизации и доступа бидзаар.
// 
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектронныхТорговыхПлощадок - учетная запись
//  МенеджерEmail - строка - email зарегистрированный на ЭТП
// 
// Возвращаемое значение:
//  Структура - Получить обновить данные авторизации и доступа бидзаар:
// * client_id - Строка - 
// * client_secret - Строка - 
// * ТокенДоступа - Строка - 
// * ТекстОшибки - Строка - 
Функция ПолучитьОбновитьДанныеАвторизацииИДоступаБидзаар(УчетнаяЗапись, МенеджерEmail)
	
	Результат = Новый Структура();
	Результат.Вставить("client_id", "");
	Результат.Вставить("client_secret", "");
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ТекстОшибки", "");
	
	ВидЭТП = Перечисления.ВидыЭлектронныхТорговыхПлощадок.БидзаарПокупатели;
	СобытиеЖР = СобытиеЖурналаРегистрации(ВидЭТП);

	ДанныеАвторизаци = ДанныеАвторизации(ВидЭТП, УчетнаяЗапись); // Структура
	Результат.client_id = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_id", ""); // Строка
	Результат.client_secret = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеАвторизаци, "client_secret", ""); // Строка

	Если Не ЗначениеЗаполнено(Результат.client_id) Или Не ЗначениеЗаполнено(Результат.client_secret) Тогда
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Не удалось выгрузить данные, введите %1 и %2 в настройках подключения организации к Бидзаар'"),
			"client_id", "client_secret");

		Результат.ТекстОшибки = ТекстОшибки;

		Возврат Результат;

	КонецЕсли;

	РезультатПолученияКлючаДоступа = ПолучитьОбновитьКлючДоступа(ВидЭТП, УчетнаяЗапись, Ложь);
	Если РезультатПолученияКлючаДоступа.ТекстОшибки <> "" Тогда

		Результат.ТекстОшибки = РезультатПолученияКлючаДоступа.ТекстОшибки;

		ЗаписьЖурналаРегистрации(СобытиеЖР, УровеньЖурналаРегистрации.Ошибка, , , РезультатПолученияКлючаДоступа.ТекстОшибки);
	Иначе
		Результат.ТокенДоступа = РезультатПолученияКлючаДоступа.КлючДоступа.ТокенДоступа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти