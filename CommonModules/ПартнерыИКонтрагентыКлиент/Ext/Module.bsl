
#Область ПрограммныйИнтерфейс

// Удаляет все доступные пользователю в списке партнеров и позиционируется на элементе справочника.
//
// Параметры:
//  Форма          -  ФормаКлиентскогоПриложения - форма, для которой выполняются действия, содержит:
//    * Элементы - ВсеЭлементыФормы - содержит:
//      ** Список - ТаблицаФормы - .
//  ПараметрВыбора - Структура - содержит данные выбора.
//  ПустыеСсылки   - Структура - содержит кэшированные значения, получаемые на сервере и необходимые на клиенте.
//
Процедура ОбработатьВыборПартнераЧерезПомощникВводаНового(Форма,ПараметрВыбора) Экспорт
	
	МассивНедоступныхОтборовУдалить = Новый Массив;
	Для каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если  ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сегмент") Тогда
				МассивНедоступныхОтборовУдалить.Добавить("Сегмент");
				Форма.Сегмент = ПредопределенноеЗначение("Справочник.СегментыПартнеров.ПустаяСсылка");
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поиск") Тогда
				МассивНедоступныхОтборовУдалить.Добавить("Поиск");
				Форма.СтрокаПоиска = "";
				Форма.РасширенныйПоиск = Ложь;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновнойМенеджер") И ЭлементОтбора.ПравоеЗначение <> ПараметрВыбора.ОсновнойМенеджер Тогда
				МассивНедоступныхОтборовУдалить.Добавить("ОсновнойМенеджер");
				Форма.ТолькоМои = Ложь;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БизнесРегион") И ЭлементОтбора.ПравоеЗначение <> ПараметрВыбора.ОсновнойМенеджер Тогда
				МассивНедоступныхОтборовУдалить.Добавить("БизнесРегион");
				Форма.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.ПустаяСсылка");
			КонецЕсли;
		Иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементМассива Из МассивНедоступныхОтборовУдалить Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, ЭлементМассива);
	КонецЦикла;
	
	Форма.Элементы.Список.ТекущаяСтрока = ПараметрВыбора.Партнер;
	
КонецПроцедуры

// Процедура формирует наименование партнера/контрагента на основе полного (юридического).
//
// Параметры:
//  Наименование  - Строка - рабочее наименование партнера/контрагента.
//  НаименованиеПолное  - Строка - полное (юридическое) наименование.
//
Процедура СокрЮрНаименованиеПриИзменении(Наименование, НаименованиеПолное) Экспорт
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		
		Наименование = "";
		Возврат;
		
	КонецЕсли;
	
	НачальнаяПозицияКавычек = 0;
	КонечнаяПозицияКавычек  = 0;
	
	МассивВидовКавычек = Новый Массив;
	МассивВидовКавычек.Добавить("""");
	МассивВидовКавычек.Добавить("'");
	МассивВидовКавычек.Добавить("«");

	Для Каждого ВидКавычки Из МассивВидовКавычек Цикл
		
		ПозицияВидаКавычки = СтрНайти(НаименованиеПолное, ВидКавычки);
		Если ПозицияВидаКавычки > 0 И (НачальнаяПозицияКавычек = 0 ИЛИ ПозицияВидаКавычки < НачальнаяПозицияКавычек) Тогда
			НачальнаяПозицияКавычек = ПозицияВидаКавычки;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивВидовКавычек[2] ="»";
	Для Каждого ВидКавычки Из МассивВидовКавычек Цикл
		
		ПозицияВидаКавычки = СтрНайти(НаименованиеПолное, ВидКавычки, НаправлениеПоиска.СКонца);
		Если ПозицияВидаКавычки > 0 И (КонечнаяПозицияКавычек = 0 ИЛИ ПозицияВидаКавычки > КонечнаяПозицияКавычек) Тогда
			КонечнаяПозицияКавычек = ПозицияВидаКавычки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НачальнаяПозицияКавычек = 0 Тогда
		Наименование = НаименованиеПолное;
	ИначеЕсли КонечнаяПозицияКавычек = 0 Тогда
		Наименование = Прав(НаименованиеПолное, СтрДлина(НаименованиеПолное) - НачальнаяПозицияКавычек);
	Иначе
		Наименование = Сред(НаименованиеПолное, НачальнаяПозицияКавычек + 1, КонечнаяПозицияКавычек - НачальнаяПозицияКавычек-1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает диалог выбора головного контрагента для обособленного подразделения.
// Сначала будет произведена попытка найти по ИНН и предложен диалог выбора из найденных.
// Если пользователь откажется от выбора, то будет вызван диалог создания головного контрагента.
//
// Параметры:
//  Форма  -  ФормаКлиентскогоПриложения - форма, из которой вызывается заполнения.
//  ПараметрыЗаполнения  -Структура - структура содержащая реквизиты подчиненного контрагента.
//  СохранитьИзменения  - Булево - необходимость установки подобранного головного контрагента в подчиненного.
//  ОповещениеЗавершения  - ОписаниеОповещения - дополнительная обработка в форме вызова.
//
Процедура ЗаполнитьГоловногоКонтрагента(Форма, ПараметрыЗаполнения, СохранитьИзменения, ОповещениеЗавершения = Неопределено) Экспорт
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент",                           Неопределено);
	Параметры.Вставить("Партнер",                              Неопределено);
	Параметры.Вставить("ИспользоватьПартнеровКакКонтрагентов", Ложь);
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.ДополнитьПараметрыЗаполнитьГоловногоКонтрагента(Параметры);
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", Параметры);
	ДополнительныеПараметры.Вставить("СохранитьИзменения", СохранитьИзменения);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ВыборГоловногоКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("Контрагент", Параметры.Контрагент);
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.ДополнитьПараметрыЗаполнитьГоловногоКонтрагента(ПараметрыФормы, Параметры);
	ОткрытьФорму("Справочник.Контрагенты.Форма.ВыборГоловногоКонтрагента",
		ПараметрыФормы,
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение модального выбора головного контрагента
// если контрагент не выбран, то запускается его создание, в противном случае - переходим в процедуру завершения выбора.
//
// Параметры:
//  ВыбранноеЗначение  - СправочникСсылка.Контрагенты - значение выбранного головного контрагента
//  ДополнительныеПараметры  -Структура - структура со свойствами:
//   * ПараметрыЗаполнения    - Структура - данные заполнения для создания головного контрагента
//   * Форма                  - ФормаКлиентскогоПриложения - форма из которой запущена процедура
//   * СохранитьИзменения     - Булево - записать выбранного головного контрагента в обособленное подразделение
//   * ОповещениеЗавершения   - ОписаниеОповещения - будет вызвана при завершении процедуры.
//
Процедура ВыборГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
			Оповещение = Новый ОписаниеОповещения("СозданиеГоловногоКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ЗначенияЗаполнения = Новый Структура;
			ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
			
			Если ПараметрыЗаполнения.ИспользоватьПартнеровКакКонтрагентов Тогда
				ИмяФормы = "Справочник.Партнеры.Форма.ПомощникНового";
			Иначе
				ИмяФормы = "Справочник.Контрагенты.ФормаОбъекта";
				ЗначенияЗаполнения.Вставить("Партнер", ПараметрыЗаполнения.Партнер);
			КонецЕсли;
			ЗначенияЗаполнения.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
			ПартнерыИКонтрагентыЛокализацияКлиентСервер.ДополнитьПараметрыЗаполнитьГоловногоКонтрагента(ЗначенияЗаполнения, ПараметрыЗаполнения);
		
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ПараметрыФормы.Вставить("ОснованиеОбособленныйКонтрагент", ПараметрыЗаполнения.Контрагент);
			
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,
				ДополнительныеПараметры.Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			СозданиеГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение модального создания головного контрагента
// Если головной контрагент создан, то он устанавливается в реквизит подчиненного, если это указано в параметрах.
//
// Параметры:
//  ВыбранноеЗначение        - СправочникСсылка.Контрагенты - значение выбранного головного контрагента
//  ДополнительныеПараметры  - Структура - структура со свойствами:
//   * ПараметрыЗаполнения    - Структура - данные заполнения для создания головного контрагента
//   * Форма                  - ФормаКлиентскогоПриложения - форма из которой запущена процедура
//   * СохранитьИзменения     - Булево - записать созданного головного контрагента в обособленное подразделение
//   * ОповещениеЗавершения   - ОписаниеОповещения - будет вызвана при завершении процедуры.
//
Процедура СозданиеГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
	
	Если ВыбранноеЗначение <> Неопределено
		И ДополнительныеПараметры.СохранитьИзменения
		И ЗначениеЗаполнено(ПараметрыЗаполнения.Контрагент) Тогда
		
		ОписаниеОшибки = "";
		
		ПартнерыИКонтрагентыЛокализацияВызовСервера.ИзменитьГоловногоКонтрагента(
			ПараметрыЗаполнения.Контрагент, ВыбранноеЗначение, ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, ОписаниеОшибки);
			ВыбранноеЗначение = Неопределено;
		КонецЕсли
		
	КонецЕсли;
		
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИспользуютсяТолькоПартнеры, Поле="", ОчищатьСообщения = Ложь) Экспорт
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Если ИспользуютсяТолькоПартнеры Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = 'партнера'"), НСтр("ru = 'контрагента'"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
	
КонецПроцедуры

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

// Вызывается из обработчика события "Перетаскивание" панели навигации различных форм списка партнера.
// Параметры:
//  КоличествоЗаписанных     - Число                   - количество изменяемых элементов справочника "Партнеры".
//  Элемент                  - ПолеФормы               - элемент, в котором происходит событие.
//  ПараметрыПеретаскивания  - ПараметрыПеретаскивания - содержит параметры перетаскивания.
//  СтандартнаяОбработка     - Булево                  - признак выполнения стандартной обработки события.
//  Строка                   - СтрокаТаблицыЗначений   - строка , над которой находится курсор.
//  Поле                     - ПолеФормы               - элемент управляемой формы, с которым связана данная колонка таблицы.
//
Процедура ФильтрыПанельНавигацииПеретаскивание(КоличествоЗаписанных, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		ПартнерыИКонтрагентыВызовСервера.ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Строка, ПараметрыПеретаскивания.Значение, КоличествоЗаписанных);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		МассивПартнеров = Новый Массив;
		МассивПартнеров.Добавить(ПараметрыПеретаскивания.Значение);
		ПартнерыИКонтрагентыВызовСервера.ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Строка, МассивПартнеров, КоличествоЗаписанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "Проверка перетаскивания" панели навигации различных форм списка партнера.
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//  Элемент                  - ПолеФормы                  - элемент, в котором происходит событие.
//  ПараметрыПеретаскивания  - ПараметрыПеретаскивания    - содержит параметры перетаскивания.
//  СтандартнаяОбработка     - Булево                     - признак выполнения стандартной обработки события.
//  Строка                   - СтрокаТаблицыЗначений      - строка , над которой находится курсор.
//  Поле                     - ПолеФормы                  - элемент управляемой формы, с которым связана данная колонка таблицы.
//
Процедура ФильтрыПанельНавигацииПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	Если (Строка = Неопределено) ИЛИ (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл

			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Возврат;
				
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			
		КонецЦикла;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Возврат;
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "При изменении" панели навигации различных форм списка партнера.
// Параметры:
//  Форма                                - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//  Элемент                              - ПолеФормы                  - элемент, в котором происходит событие.
//  ТребуетсяЗаполнениеСтраницыСвойств   - Булево                     - признак того, что требуется перезаполнение страницы свойств.
//
Процедура ФильтрыПанельНавигацииТипФильтраПриИзменении(Форма, Элемент, ТребуетсяЗаполнениеСтраницыСвойств) Экспорт
	
	Если ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
		И Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра
		И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "Категории" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "БизнесРегионы" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "Менеджер" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПанелиНавигации(Форма);
	
	Если ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
		ИЛИ Форма.ТипФильтра  = "Категории" Тогда
		ТребуетсяЗаполнениеСтраницыСвойств = Истина;
	ИначеЕсли Форма.ТипФильтра  = "БизнесРегионы" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы; 
	ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа;
	ИначеЕсли Форма.ТипФильтра = "Менеджер" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры;
		Форма.ТолькоМои = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТолькоМои","Доступность", Форма.ТипФильтра <> "Менеджер");
	
КонецПроцедуры

// Вызывается из обработчика события "При закрытии" различных форм списка партнера.
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения          - форма, в которой происходит событие.
//
Процедура ФормаСпискаВыбораПриЗакрытии(Форма) Экспорт
	
	 СохранитьНастройкиПанелиНавигации(Форма);
	
КонецПроцедуры

// Управляет доступностью форм списка справочника "Партнеры".
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой выполняется команда, содержит:
//   * Элементы - ВсеЭлементыФормы - содержит:
//     ** ТипФильтра             - ПолеФормы - 
//     ** БизнесРегионы          - ТаблицаФормы - 
//     ** ГруппыДоступаПартнеров - ТаблицаФормы - 
//     ** ТолькоЗначимые         - ПолеФормы - 
//     ** Менеджеры              - ТаблицаФормы - 
//     ** ТолькоМои              - ПолеФормы -
//
Процедура ПанельНавигацииУправлениеДоступностью(Форма) Экспорт

	Форма.Элементы.ТипФильтра.Доступность             = Форма.ИспользоватьФильтр;
	Форма.Элементы.БизнесРегионы.Доступность          = Форма.ИспользоватьФильтр;
	Форма.Элементы.ГруппыДоступаПартнеров.Доступность = Форма.ИспользоватьФильтр;
	Форма.Элементы.Менеджеры.Доступность              = Форма.ИспользоватьФильтр;
	Форма.Элементы.ТолькоЗначимые.Доступность         = Форма.ИспользоватьФильтр 
	                                                    И Не (ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") 
	                                                          Или Форма.ТипФильтра  = "Категории");
	Форма.Элементы.ТолькоМои.Доступность              = НЕ Форма.ИспользоватьФильтр ИЛИ Не Форма.ТипФильтра = "Менеджер";
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаСкопировать1", "Видимость", Форма.УпрощенныйВводДоступен);
	
КонецПроцедуры

// Заполняет элемент формы значением контактной информации в информационной панели формы списка справочника "Партнеры".
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - форма, в которой выполняется заполнение.
//  ВидКонтактнойИнформации  - СправочникСсылка.ВидыКонтактнойИнформации - вид КИ, значение которого устанавливается.
//  СтруктураДанных          - Структура - структура, содержащая данный КИ.
//
Процедура ЗаполнитьЭлементКонтактнойИнформации(Форма, ВидКонтактнойИнформации, СтруктураДанных) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	Форма[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

// Получает данные контактной информации партнера, хранящиеся в таблице формы.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения - форма, в которой находится таблица с данными.
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, для которого
//                                                                        получаются данные.
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции   - строка с данными контактной информации.
//
Функция ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации) Экспорт
	
	Отбор  = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ВидКонтактнойИнформации, Ложь);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Партнер", СсылкаНаПартнераСтрокиСписка(Форма)));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, корректно ли выполнено позиционирование в динамическом списке.
// 
// Параметры:
//  ИмяСписка - Строка - наименование элемента формы, для которого выполняется проверка.
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой находится динамический список партнеров.
//
// Возвращаемое значение:
//   ЭлементОтбора   - созданная группа отбора.
//
Функция ПозиционированиеКорректно(ИмяСписка, Форма) Экспорт

	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	
	Список = Форма.Элементы[ИмяСписка]; // ТаблицаФормы
		
	Если ТипЗнч(Список.ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Список.ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Вызывается из различных форм списка справочника "Партнеры" при нажатии на гиперссылку "Контрагенты" в информационной панели.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется команда, содержит:
//    * Элементы - ВсеЭлементыФормы - содержит:
//      ** Список - ТаблицаФормы - .
//
Процедура КонтрагентыПартнераНажатие(Форма) Экспорт
	
	Если ПозиционированиеКорректно("Список",Форма) Тогда
		
		ПараметрыФормы = Новый Структура("ОтборКонтрагентов", Форма.Элементы.Список.ТекущаяСтрока);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Контрагенты.Форма.ФормаСпискаПараметрическая",
		ПараметрыФормы,
		Форма);
		
	Оповестить("ОбновитьСписокСправочника", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Вызывается из различных форм списка справочника "Партнеры" при нажатии на гиперссылку "Контактные лица" в
// информационной панели.
//  Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//
Процедура КонтактныеЛицаПартнераНажатие(Форма) Экспорт
	
	Если ПозиционированиеКорректно("Список", Форма) Тогда
		
		Если СтрЧислоВхождений(Форма.ИмяФормы, "Контрагенты") > 0 Тогда
			Отбор = Новый Структура("Владелец", Форма.Элементы.Список.ТекущиеДанные.Партнер);
		Иначе
			Отбор = Новый Структура("Владелец", Форма.Элементы.Список.ТекущаяСтрока);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ОткрытьФорму(
		"Справочник.КонтактныеЛицаПартнеров.ФормаСписка",
		ПараметрыФормы,
		Форма);
		
	Оповестить("ОбновитьСписокСправочника", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Описание
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит:
//   * Элементы - ВсеЭлементыФормы - содержит:
//     ** Список - ТаблицаФормы - .
//    
Процедура ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Форма.РасширенныйПоиск 
	     И Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Иерархический список'") Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Дерево'") Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "Обработка оповещения" различных форм списка партнера.
// Параметры:
//  Форма                               - ФормаКлиентскогоПриложения  - форма, в которой происходит событие.
//  ИмяСобытия                          - Строка            - имя обрабатываемого события.
//  Параметр                            - Произвольный      - параметр оповещения.
//  Источник                            - Произвольный      - источник оповещения.
//  ТребуетсяОбновлениеПанелиИнформации - Булево            - определяет, нужно ли обновлять панель информации по
//                                                            текущему партнеру.
//
Процедура ПартнерыФормаСпискаВыбораОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ТребуетсяОбновлениеПанелиИнформации) Экспорт
	
	Если ИмяСобытия = "ВыборПартнераНайдено" И Параметр.Свойство("Партнер") Тогда
		
		ОбработатьВыборПартнераЧерезПомощникВводаНового(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_КонтактныеЛицаПартнеров" И  Параметр.Свойство("Владелец") Тогда
			
		ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ((ТекущиеДанные.Свойство("Ссылка") И ТекущиеДанные["Ссылка"] = Параметр.Владелец)
			ИЛИ ТекущиеДанные.Свойство("Партнер") И ТекущиеДанные["Партнер"] = Параметр.Владелец) Тогда
			ТребуетсяОбновлениеПанелиИнформации = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" И Параметр.Свойство("Партнер") Тогда
		
		ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные["Ссылка"] = Параметр.Партнер Тогда
			ТребуетсяОбновлениеПанелиИнформации = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Партнеры" Тогда
	
		ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ((ТекущиеДанные.Свойство("Ссылка") И ТекущиеДанные["Ссылка"] = Параметр)
			ИЛИ ТекущиеДанные.Свойство("Партнер") И ТекущиеДанные.Партнер = Параметр)Тогда
			ТребуетсяОбновлениеПанелиИнформации = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия ="ИзменилсяРежимПолнотекстовогоПоиска" Тогда
		
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из различных форм списка справочника "Партнеры" при нажатии на гиперссылку основания.
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//  Элемент              - ЭлементыФормы    - элемент, в котором выполняется действие.
//  СтандартнаяОбработка - Булево           - признак выполнения стандартной обработки события.
//
Процедура ПартнерыФормаСпискаВыбораОснованиеВыбораНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Партнер", СсылкаНаПартнераСтрокиСписка(Форма)));
	Если Основание.Количество() > 0 Тогда
		Партнер = Основание[0]; // СправочникСсылка.Партнеры
		ПоказатьЗначение(Неопределено, Партнер);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из различных форм списка справочника "Партнеры" при изменении отбора по сегменту партнеров.
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//  Элемент              - КомандаФормы     - выполненная команда формы.
//
Процедура ПартнерыФормаСпискаВыбораСегментПриИзменении(Форма, Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Сегмент) Тогда
		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегментуУстановлен",
		                                                                   Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегменту",
		                                                                   СегментыВызовСервера.СписокЗначений(Форма.Сегмент).ВыгрузитьЗначения());
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.Сегмент.СписокВыбора, Форма.Сегмент, 7);
		Форма.ИсторияВыбораСегментов.ЗагрузитьЗначения(Форма.Элементы.Сегмент.СписокВыбора.ВыгрузитьЗначения());
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегментуУстановлен",
		                                                                   Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегменту",
		                                                                   Неопределено);
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "Перед началом добавления" различных форм списка партнера.
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//  Элемент              - ПолеФормы                  - элементы формы, в котором происходит событие.
//  Отказ                - Булево                     - признак отказа от выполнения копирования.
//  Копирование          - Булево                     - признак копирования элемента.
//  Родитель             - СправочникСсылка.Партнеры  - справочник - родитель партнера.
//  Группа               - Булево                     - признак того, что является группой.
//  Основание            - Произвольный               - основание создаваемого элемента.
//
Процедура ПартнерыФормаСпискаВыбораСписокПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Основание = Неопределено) Экспорт
	
	Если Копирование Тогда
		Если НЕ Форма.УпрощенныйВводДоступен Тогда
			Отказ = Истина;
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru='Копирование %1 запрещено.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			            ТекстСообщения, 
			            ?(Форма.ИспользоватьПартнеровКакКонтрагентов, НСтр("ru='контрагентов'"), НСтр("ru='партнеров'")));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Копирование партнеров запрещено.'"));
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",Новый Структура("СписокОтборПоТипуПартнера, Основание", Форма.СписокОтборПоТипуПартнера, Основание), Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из различных форм списка справочника "Партнеры" при выполнении команды по созданию нового партнера.
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//  Команда - КомандаФормы     - выполненная команда формы.
//
Процедура ПартнерыФормаСпискаВыбораСоздатьНового(Форма, Команда) Экспорт
	
	СтруктураПараметры = Новый Структура;
	СтруктураЗначенияЗаполнения = Новый Структура;
	
	Для каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.Использование Тогда
			СтруктураЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Элементы.Список.Отображение <> ОтображениеТаблицы.Список Тогда
		СтруктураЗначенияЗаполнения.Вставить("Родитель", Форма.Элементы.Список.ТекущийРодитель);
	КонецЕсли;
	
	СтруктураПараметры.Вставить("ЗначенияЗаполнения", СтруктураЗначенияЗаполнения);
	СтруктураПараметры.Вставить("СписокОтборПоТипуПартнера", Форма.СписокОтборПоТипуПартнера);
	
	Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", СтруктураПараметры,Форма);
	Иначе
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлементаРеквизитыКонтрагента", СтруктураПараметры,Форма);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормЭлементаСправочникаПартнеры

// Вызывается из обработчика события "При изменении" элемента различных форм партнера "Канал первичного интереса".
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//  Элемент              - ПолеФормы                  - элементы формы, в котором происходит событие.
//
Процедура ПартнерФормаЭлементаКаналПервичногоИнтересаПриИзменении(Форма, Элемент) Экспорт
	
	Форма.ИсточникПервичногоИнтереса = Неопределено;
	Форма.Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(Форма.КаналПервичногоИнтереса);
	
КонецПроцедуры

// Вызывается из обработчика события "При изменении" элемента различных форм партнера "Наименование".
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой происходит событие, содержит:
//   * Объект - СправочникОбъект.Партнеры - .
//  Элемент              - ПолеФормы     - элементы формы, в котором происходит событие.
//
Процедура ПартнерФормаЭлементаНаименованиеПриИзменении(Форма, Элемент) Экспорт
	
	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное) Тогда
		Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "При изменении" элементов различных форм партнера "Тип отношений".
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой происходит событие, содержит:
//    * Элементы - ВсеЭлементыФормы - содержит:
//      ** ОбслуживаетсяТорговымиПредставителями - ПолеФормы - .
//      ** Перевозчик                            - ПолеФормы - .
//  Элемент              - ПолеФормы - элементы формы, в котором происходит событие.
//
Процедура ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(Форма, Элемент) Экспорт
	
	Форма.Элементы.ОбслуживаетсяТорговымиПредставителями.Доступность = Форма.Объект.Клиент;
	Если НЕ Форма.Объект.Клиент Тогда
		Форма.Объект.ОбслуживаетсяТорговымиПредставителями = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Перевозчик.Доступность = Форма.Объект.Поставщик;
	Если НЕ Форма.Объект.Поставщик Тогда
		Форма.Объект.Перевозчик = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "Начало выбора" элемента различных форм партнера "Комментарий".
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//  Элемент              - ПолеФормы     - элемент формы, в котором происходит событие.
//  ДанныеВыбора         - СписокЗначений   - может содержать подготовленные данные для выбора.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПартнерФормаЭлементаКомментарииНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		Форма, 
		"Объект.Комментарий");
	
КонецПроцедуры

// Вызывается из обработчика события "При изменении" элемента различных форм партнера "Бизнес-регион".
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой происходит событие.
//  Элемент              - ПолеФормы                  - элементы формы, в котором происходит событие.
//
Процедура ПартнерФормаЭлементаБизнесРегионПриИзменении(Форма, Элемент) Экспорт
	
	Если Форма.Объект.БизнесРегион <> Форма.ТекущийБизнесРегион Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.БизнесРегион) Тогда
			ОсновнойМенеджерБизнесРегиона = ПартнерыИКонтрагентыВызовСервера.ОсновнойМенеджерБизнесРегиона(Форма.Объект.БизнесРегион);
			Если ЗначениеЗаполнено(ОсновнойМенеджерБизнесРегиона) И ОсновнойМенеджерБизнесРегиона <> Форма.Объект.ОсновнойМенеджер Тогда
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для выбранного бизнес-региона основным менеджером является %1. Установить его основным менеджером партнера?'"),ОсновнойМенеджерБизнесРегиона);
				Результат = Неопределено;

				ПоказатьВопрос(Новый ОписаниеОповещения("ПартнерФормаЭлементаБизнесРегионПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ОсновнойМенеджерБизнесРегиона, Форма", ОсновнойМенеджерБизнесРегиона, Форма)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
                Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущийБизнесРегион = Форма.Объект.БизнесРегион;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения выбора бизнес-региона. Также устанавливает основного менеджера бизнес-региона.
// Параметры:
//  РезультатВопроса        - КодВозвратаДиалога - ответ пользователя на вопрос о необходимости установки основного менеджера.
//  ДополнительныеПараметры - Структура          - 
//                             * ОсновнойМенеджерБизнесРегиона - СправочникСсылка.Пользователи - менеджер бизнес-региона.
//                             * Форма                         - форма, из которой вызывалась форма выбора.
//
Процедура ПартнерФормаЭлементаБизнесРегионПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОсновнойМенеджерБизнесРегиона = ДополнительныеПараметры.ОсновнойМенеджерБизнесРегиона;
	Форма = ДополнительныеПараметры.Форма;
	
	
	Результат = РезультатВопроса;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Форма.Объект.ОсновнойМенеджер = ОсновнойМенеджерБизнесРегиона;
		
	КонецЕсли;
	
	Форма.ТекущийБизнесРегион = Форма.Объект.БизнесРегион;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияРеквизитов

// Вызывается из различных форм элемента справочника Контрагенты при редактировании ИНН.
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой выполняется команда, содержит:
//    * Объект - СправочникОбъект.Контрагенты - 
//    * КонтактнаяИнформацияОписаниеДополнительныхРеквизитов - ТаблицаЗначений - содержит:
//    ** Вид - СправочникСсылка.ВидыКонтактнойИнформации -
//  РеквизитыКомпании    - Структура        - реквизиты контрагента.
//
Процедура ЗаполнитьИсториюАдресов(Форма, РеквизитыКомпании) Экспорт
	
	ИсторияАдресов = ПолучитьИсториюРеквизита(РеквизитыКомпании, "Адрес");
	
	Если ИсторияАдресов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсторияАдресов) = Тип("Массив") 
		И ИсторияАдресов.Количество() > 0 Тогда
		ИсторияАдресов[0].Дата = Дата(1,1,1);
	КонецЕсли;

	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ИмяВидаКонтактнойИнформацииЮрАдрес = "ЮрАдресОрганизации";
	Иначе
		ИмяВидаКонтактнойИнформацииЮрАдрес = "ЮрАдресКонтрагента";
	КонецЕсли;
	ВидКонтактнойИнформацииЮрАдрес = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."+ИмяВидаКонтактнойИнформацииЮрАдрес);
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииЮрАдрес);
	
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	ИмяРеквизита = "";
	ИмяЭлементаДляРазмещения = "";
	ХранитьИсториюИзменений = Истина;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
			ИмяРеквизита = СтрокаКонтактнойИнформации.ИмяРеквизита;
			ИмяЭлементаДляРазмещения = СтрокаКонтактнойИнформации.ИмяЭлементаДляРазмещения;
			ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.ХранитьИсториюИзменений;
		КонецЕсли;
		Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
	КонецЦикла;
	
	Если НЕ ХранитьИсториюИзменений Тогда
		ПартнерыИКонтрагентыВызовСервера.ВключитьХранениеИсторииИзменений(ИмяВидаКонтактнойИнформацииЮрАдрес);
	КонецЕсли;
	
	ИндексАктуальногоАдреса = ИсторияАдресов.ВГраница();
	
	ПараметрыОбновления = Новый Структура;
	Для Каждого СтрокаКонтактнойИнформации Из ИсторияАдресов Цикл
		ИндексТекущейКонтактнойИнформации = ИсторияАдресов.Найти(СтрокаКонтактнойИнформации);
		
		ДанныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		ДанныеСтроки.Вид = ВидКонтактнойИнформацииЮрАдрес;
		ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		ДанныеСтроки.Значение = СтрокаКонтактнойИнформации.КонтактнаяИнформация;
		ДанныеСтроки.Представление = СтрокаКонтактнойИнформации.Представление;
		ДанныеСтроки.Комментарий = СтрокаКонтактнойИнформации.Комментарий;
		ДанныеСтроки.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
		
		ДанныеСтроки.ДействуетС = СтрокаКонтактнойИнформации.Дата;
			
		Если ИндексТекущейКонтактнойИнформации = ИндексАктуальногоАдреса Тогда
			ДанныеСтроки.ИмяРеквизита = ИмяРеквизита;
			ДанныеСтроки.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
			ДанныеСтроки.ХранитьИсториюИзменений = Истина;
		Иначе
			ДанныеСтроки.ИмяРеквизита = Неопределено;
			ДанныеСтроки.ЭтоИсторическаяКонтактнаяИнформация = Истина;
			ДанныеСтроки.ХранитьИсториюИзменений = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Вызывается из различных форм элемента справочника Контрагенты при редактировании ИНН.
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой выполняется команда, содержит:
//   * ИсторияКонтактнойИнформации - ТаблицаЗначений - содержит:
//    ** Вид - СправочникСсылка.ВидыКонтактнойИнформации -
//  РеквизитыКомпании    - Структура        - реквизиты контрагента.
//
Процедура ЗаполнитьИсториюАдресовВФорме(Форма, РеквизитыКомпании) Экспорт
	
	Форма.ИсторияКонтактнойИнформации.Очистить();
	
	ИсторияАдресов = ПолучитьИсториюРеквизита(РеквизитыКомпании, "Адрес");
	Если ИсторияАдресов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияАдресов.Количество() > 1 Тогда
		Для Каждого Адрес Из ИсторияАдресов Цикл
			СтрокаИсторииКИ = Форма.ИсторияКонтактнойИнформации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсторииКИ, Адрес);
			СтрокаИсторииКИ.Вид           = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
			СтрокаИсторииКИ.Тип           = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
			СтрокаИсторииКИ.Дата          = Адрес.Дата;
			СтрокаИсторииКИ.ЗначенияПолей = Адрес.КонтактнаяИнформация;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Вызывается из различных форм элемента справочника Контрагенты при редактировании ИНН.
// Параметры:
//  Объект               - ДанныеФормыСтруктура - реквизиты формы.
//  РеквизитыКомпании    - Структура            - реквизиты контрагента.
//
Процедура ЗаполнитьИсториюНаименований(Объект, РеквизитыКомпании) Экспорт
	
	ЭтоЮрЛицо = СтрДлина(РеквизитыКомпании.ИНН) = 10;
	
	Объект.ИсторияНаименований.Очистить();
	
	ИсторияНаименований = ПолучитьИсториюРеквизита(РеквизитыКомпании,"Наименование");
	Если ИсторияНаименований = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияНаименований.Количество() > 0 Тогда
	    Для i = 0 По ИсторияНаименований.ВГраница() Цикл
	        Для j = 0 По ИсторияНаименований.Вграница() - i - 1 Цикл
	            Если ИсторияНаименований[j].Дата > ИсторияНаименований[j + 1].Дата Тогда
	                Замена = ИсторияНаименований[j];
	                ИсторияНаименований[j] = ИсторияНаименований[j + 1];
	                ИсторияНаименований[j + 1] = Замена;
	            КонецЕсли;            
	        КонецЦикла;        
	    КонецЦикла;
	        
	    ИмяРеквизитаСокращенноеНаименование = Неопределено;
		
		Для Счетчик = 0 По ИсторияНаименований.Количество() - 1 Цикл
			
			СтрокаНаименование = ИсторияНаименований[Счетчик];
			СтрокаИсторииНаименований = Объект.ИсторияНаименований.Добавить();
			
			Если ИмяРеквизитаСокращенноеНаименование = Неопределено Тогда
			
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсторииНаименований, "СокращенноеНаименование") Тогда
					ИмяРеквизитаСокращенноеНаименование = "СокращенноеНаименование";
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИсторииНаименований, "НаименованиеСокращенное") Тогда
					ИмяРеквизитаСокращенноеНаименование = "НаименованиеСокращенное";
				Иначе
					Возврат;
				КонецЕсли;
			
			КонецЕсли;
			
			Если Счетчик > 0 Тогда 
				СтрокаИсторииНаименований.Период = СтрокаНаименование.Дата;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаИсторииНаименований, СтрокаНаименование);
			СтрокаИсторииНаименований[ИмяРеквизитаСокращенноеНаименование] = СтрокаНаименование.НаименованиеСокращенное;
			Если Не ЭтоЮрЛицо Тогда
				СтрокаИсторииНаименований[ИмяРеквизитаСокращенноеНаименование] = СтрШаблон(НСтр("ru = 'ИП %1'"), СтрокаНаименование.НаименованиеСокращенное);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИсториюРеквизита(РеквизитыКомпании, ИмяРеквизита) Экспорт
	
	ИсторияРеквизитов = Неопределено;
	Результат         = Неопределено;
	
	Если Не (РеквизитыКомпании.Свойство("ИсторияРеквизитов", ИсторияРеквизитов) 
		И ТипЗнч(ИсторияРеквизитов) = Тип("Структура")
		И ИсторияРеквизитов.Свойство(ИмяРеквизита, Результат)
		И ТипЗнч(Результат) = Тип("Массив")) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

// Сохраняет настройки панели навигации формы списка справочника Партнеры.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма для которой устанавливается условное оформление, содержит:
//   * Элементы - ВсеЭлементыФормы - содержит:
//    ** СтрокаПоиска  - ПолеФормы - 
//    ** БизнесРегионы           - ТаблицаФормы -
//    ** ГруппыДоступаПартнеров  - ТаблицаФормы -
//    ** Свойства                - ТаблицаФормы - 
//    ** Менеджеры               - ТаблицаФормы - 
//    ** Категории               - ТаблицаФормы - 
//
Процедура СохранитьНастройкиПанелиНавигации(Форма)

	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		ВидПанели = "Категории";
		ТекущаяСтрока = Форма.Элементы.Категории.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Категории.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				 ТекущееЗначение = ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
		ВидПанели = "БизнесРегионы";
		ТекущееЗначение = Форма.Элементы.БизнесРегионы.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
		ВидПанели = "ГруппыДоступа";
		ТекущееЗначение = Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		ВидПанели = "Менеджер";
		ТекущееЗначение = Форма.Элементы.Менеджеры.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		ВидПанели = Форма.ТекущееСвойствоПанелиНавигации;
		ТекущаяСтрока = Форма.Элементы.Свойства.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Свойства.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				 ТекущееЗначение = ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели",ВидПанели));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаНастроек = Форма.НастройкиПанелейНавигации.Добавить();
		СтрокаНастроек.ВидПанели = ВидПанели;
	Иначе
		СтрокаНастроек = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаНастроек.ТекущееЗначение = ТекущееЗначение;

КонецПроцедуры

Функция СсылкаНаПартнераСтрокиСписка(Форма)
	
	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ?(Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры",
	          ТекущиеДанные.Партнер,
	          ТекущиеДанные["Ссылка"]);
	
КонецФункции

#КонецОбласти

#КонецОбласти
