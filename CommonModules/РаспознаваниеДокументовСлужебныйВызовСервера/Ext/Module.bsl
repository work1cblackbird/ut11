#Область СлужебныеПроцедурыИФункции

#Область ПроверкаАвторизации

Функция ВыполнитьАвторизациюПоТикетуИТС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	РаспознаваниеДокументов.УдалитьДанныеАвторизации();
	
	Попытка
		РаспознаваниеДокументов.ВыполнитьАвторизациюПоТикетуИТС();
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Попытка авторизации по тикету с Портала 1С:ИТС не удалось
			           |по причине:
			           |%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

Функция ПодключеноКСервисуРаспознавания() Экспорт
	
	ПытатьсяПодключитьсяПриПроверке = Ложь;
	ВыбрасыватьИсключение = Истина;
	
	Возврат РаспознаваниеДокументов.ПодключеноКСервисуРаспознавания(ПытатьсяПодключитьсяПриПроверке, ВыбрасыватьИсключение);
	
КонецФункции

Функция КорректныДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(
			НСтр("ru = 'Нет прав подключения сервиса 1С:Распознавание первичных документов'"),
			КатегорияОшибки.НарушениеПравДоступа
		);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецТикета = "DocumentRecognition";
	РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	
	Если РезультатПолученияТикета.КодОшибки = "НеверныйЛогинИлиПароль"
	 Или РезультатПолученияТикета.КодОшибки = "ПревышеноКоличествоПопыток" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НачатьПроверкуДопустимыхДействийПриАвторизации() Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка допустимых действий при авторизации'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации
		.ВыполнитьФункцию(ПараметрыВыполнения, "РаспознаваниеДокументовSDK.ТекущиеДопустимыеДействияПриАвторизации");
	
КонецФункции

#КонецОбласти

#Область ОбменСКонтрагентамиСлужебныйВызовСервера

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - Строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера).
//
// Возвращаемое значение:
//  Булево - признак доступности каталога.
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			РаспознаваниеДокументов.УдалитьВременныеФайлы(Каталог.ПолноеИмя);
		Иначе
			РаспознаваниеДокументов.УдалитьВременныеФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса.
//
// Возвращаемое значение:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла)
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ОтправкаВложенийИзПочты(УчетнаяЗапись) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		КлючЗадания = "ОтправкаВложенийИзПочты" + XMLСтрока(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	Иначе
		КлючЗадания = "ОтправкаВложенийИзПочты";
	КонецЕсли;
	
	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "Ссылка,ПротоколВходящейПочты");
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ДанныеУчетнойЗаписи);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно)); 
	Если Задания.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаспознаваниеДокументов.ОтправитьВложенияИзПочтыНаРаспознавание", ПараметрыЗадания,
			КлючЗадания, НСтр("ru = 'Отправка вложений из почты на распознавание'"));
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно выполнить фоновое задание с ключом: %1
			           |Описание ошибки:
			           |%2'"),
			КлючЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправкаФайловИзКаталога(ПараметрыПоиска) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		КлючЗадания = "ОтправкаФайловИзКаталога" + XMLСтрока(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	Иначе
		КлючЗадания = "ОтправкаФайловИзКаталога";
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ПараметрыПоиска);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно)); 
	Если Задания.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаспознаваниеДокументов.ОтправитьФайлыИзКаталогаНаРаспознавание", ПараметрыЗадания,
			КлючЗадания, НСтр("ru = 'Отправка файлов из каталога на распознавание'"));
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно выполнить фоновое задание с ключом: %1
			           |Описание ошибки:
			           |%2'"),
			КлючЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Возвращает значения реквизита, прочитанного из информационной базы по ссылке на объект.
// Рекомендуется использовать вместо обращения к реквизитам объекта через точку от ссылки на объект
// для быстрого чтения отдельных реквизитов объекта из базы данных.
//
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//            - Строка      - полное имя предопределенного элемента, значения реквизитов которого необходимо получить.
//  ИмяРеквизита       - Строка - имя получаемого реквизита.
//                                Допускается указание имени реквизита через точку, но при этом параметр КодЯзыка для
//                                такого реквизита учитываться не будет.
//  ВыбратьРазрешенные - Булево - если Истина, то запрос к объекту выполняется с учетом прав пользователя;
//                                если есть ограничение на уровне записей, то возвращается Неопределено;
//                                если нет прав для работы с таблицей, то возникнет исключение;
//                                если Ложь, то возникнет исключение при отсутствии прав на таблицу
//                                или любой из реквизитов.
//  КодЯзыка - Строка - код языка для мультиязычного реквизита. Значение по умолчанию - основной язык конфигурации.
//
// Возвращаемое значение:
//  Произвольный - если в параметр Ссылка передана пустая ссылка, то возвращается Неопределено.
//                 Если в параметр Ссылка передана ссылка несуществующего объекта (битая ссылка), 
//                 то возвращается Неопределено.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь, Знач КодЯзыка = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные, КодЯзыка);
	
КонецФункции

Функция ТипРаспознанногоДокумента(Ссылка) Экспорт 
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипДокумента");
	
КонецФункции

Функция ВариантОбработкиРаспознанногоДокумента(Ссылка) Экспорт 
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВариантОбработки");
	
КонецФункции

Функция ФайлыРаспознанногоДокумента(РаспознанныйДокумент, ИдентификаторФормы) Экспорт
	
	УправлениеДоступом.ПроверитьЧтениеРазрешено(РаспознанныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИмяФайла КАК ИмяФайла,
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИсходныйФайл КАК ИсходныйФайл,
		|	ИсходныеДанныеЗаданийРаспознаваниеДокументов.ДатаЗагрузки КАК ДатаЗагрузки,
		|	РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИменаФайлов КАК ИменаФайлов
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов КАК РезультатыОбработкиЗаданийРаспознаваниеДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов КАК ИсходныеДанныеЗаданийРаспознаваниеДокументов
		|		ПО РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторФайла = ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторФайла
		|ГДЕ
		|	РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторРезультата = &ИдентификаторРезультата";
	
	Запрос.УстановитьПараметр("ИдентификаторРезультата", РаспознанныйДокумент.ИдентификаторРезультата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Файлы = Новый Массив;
	
	ИсходныйФайлУдален = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ДвоичныеДанные = Выборка.ИсходныйФайл.Получить();
		Если ДвоичныеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		
		ИмяФайла = Выборка.ИмяФайла;
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресХранилища);
		
		Файлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Файлы;
	
КонецФункции

Функция КоличествоФайловРаспознанногоДокумента(РаспознанныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторФайла) КАК КоличествоФайлов
		|ИЗ
		|	РегистрСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов КАК РезультатыОбработкиЗаданийРаспознаваниеДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов КАК ИсходныеДанныеЗаданийРаспознаваниеДокументов
		|		ПО РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторФайла = ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИдентификаторФайла
		|			И (РезультатыОбработкиЗаданийРаспознаваниеДокументов.ИдентификаторРезультата = &ИдентификаторРезультата)";
	
	Запрос.УстановитьПараметр("ИдентификаторРезультата", РаспознанныйДокумент.ИдентификаторРезультата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.КоличествоФайлов;
	
КонецФункции

Функция ХарактеристикиИспользуются(Объект) Экспорт
	
	Возврат Справочники.Номенклатура.ХарактеристикиИспользуются(Объект);
	
КонецФункции  

Функция ЭтоНоменклатураУслуга(Объект) Экспорт
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ТипНоменклатуры");
	Возврат ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	
КонецФункции

Функция ТипНоменклатуры(Объект) Экспорт
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ТипНоменклатуры");
	Возврат ТипНоменклатуры;
	
КонецФункции 

Функция ЭтоНоменклатураРабота(Объект) Экспорт
	
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ТипНоменклатуры");
	Возврат ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа;
	
КонецФункции

Функция СтранаПоНомеруГТД(Объект) Экспорт
	
	СтранаПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "СтранаПроисхождения");
	Возврат СтранаПроисхождения;
	
КонецФункции

Функция ВедетсяУчетПоГТД(Объект) Экспорт
	
	ВедетсяУчетПоГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВестиУчетПоГТД");
	Возврат ВедетсяУчетПоГТД;
	
КонецФункции

Функция ВедетсяУчетПоРНПТ(Объект) Экспорт
	
	ВедетсяУчетПоГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВестиУчетПоГТД");   
	ВедетсяУчетПоРНПТ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ПрослеживаемыйТовар");
	Возврат (ВедетсяУчетПоГТД И ВедетсяУчетПоРНПТ и ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров"));
	
КонецФункции

Функция ЕдиницаИзмеренияНоменклатуры(Объект) Экспорт
	
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЕдиницаИзмерения");
	Возврат ЕдиницаИзмерения;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Функция ДоступенНеоплаченныйРаспознанныйДокумент(РаспознанныйДокумент) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РаспознанныйДокумент, "Статус, ТребуетсяОплата, Ответственный", Истина);
		Если ЗначениеЗаполнено(ДанныеДокумента) И (ДанныеДокумента.ТребуетсяОплата
			ИЛИ ДанныеДокумента.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка)
			И Пользователи.ТекущийПользователь() <> ДанныеДокумента.Ответственный Тогда
			
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Другие случаи должно проверить RLS
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПараметрыЗаполненияТиповогоДокументаПоРаспознанному

Функция ПараметрыЗаполненияТиповойНаОсновеФормыТОРГ12(Знач НашДокумент, Знач ВидОперации, Знач ТипДокументаСтрокой) Экспорт
	
	Если ТипЗнч(НашДокумент) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
		ДокументОбъект = НашДокумент.ПолучитьОбъект();
	Иначе
		ДокументОбъект = НашДокумент;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Основание", ДокументОбъект.Ссылка);
	ПараметрыЗаполнения.Вставить("ВидОперации", ВидОперации);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[1].Значение);
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
		
		ПараметрыЗаполнения.Вставить("НомерВходящегоДокументаСчетаФактуры", ДокументОбъект.РеквизитыДокумента[0].Значение);
		ПараметрыЗаполнения.Вставить("ДатаВходящегоДокументаСчетаФактуры", ДокументОбъект.РеквизитыДокумента[1].Значение);
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ЭтоУниверсальныйДокумент", ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
	ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", ДокументОбъект.РеквизитыДокумента[6].Значение);
	
	Для Каждого ДанныеРеквизита Из ДокументОбъект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец);
		
	Иначе
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПродавецОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		
		ПараметрыЗаполнения.Вставить("Номер", ДокументОбъект.РеквизитыДокумента[0].Значение);
	КонецЕсли;
	
	ТипДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.Основание, "ТипДокумента");
	
	Если ТипДокументаОснования = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		Или ТипДокументаОснования = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		Или ТипДокументаОснования = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
		
		ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", Ложь);
	Иначе
		
		ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", ДокументОбъект.РеквизитыДокумента[17].Значение);
	КонецЕсли;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		ПараметрыЗаполнения.Вставить("НДСНеВыделять", Ложь);
	Иначе
		ПараметрыЗаполнения.Вставить("ДокументБезНДС", Ложь);
	КонецЕсли;
	
	СтрокиТаблицыТовары = Новый Массив;
	СтрокиТаблицыУслуги = Новый Массив;
	
	ТаблицаДокумента = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	КолонкиТаблицы = ТаблицаДокумента.Колонки;
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			Если Колонка.Имя = "ЕдиницаИзмерения" Тогда
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыДокумента.Номенклатура, "ЕдиницаИзмерения"));
			Иначе
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
			КонецЕсли;
			ДанныеСтрокиТаблицы.Вставить("СуммаВРознице", СтрокаТаблицыДокумента[Колонка.Имя]);
		КонецЦикла;
		
		Если СтрокаТаблицыДокумента.Номенклатура.Услуга Тогда
			СтрокиТаблицыУслуги.Добавить(ДанныеСтрокиТаблицы);
		Иначе
			ДанныеСтрокиТаблицы.Вставить("Коэффициент", 1);
			СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Товары", СтрокиТаблицыТовары);
	ПараметрыЗаполнения.Вставить("Услуги", СтрокиТаблицыУслуги);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ПараметрыЗаполненияТиповойНаОсновеСчетНаОплату(Знач НашДокумент, Знач ТипДокументаСтрокой) Экспорт
	
	Если ТипЗнч(НашДокумент) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
		ДокументОбъект = НашДокумент.ПолучитьОбъект();
	Иначе
		ДокументОбъект = НашДокумент;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Основание", ДокументОбъект.Ссылка);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", ДокументОбъект.РеквизитыДокумента[6].Значение);
	ПараметрыЗаполнения.Вставить("СрокОплаты", ДокументОбъект.РеквизитыДокумента[7].Значение);
	
	Для Каждого ДанныеРеквизита Из ДокументОбъект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец);
	Иначе
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.Исполнитель);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		ПараметрыЗаполнения.Вставить("ОрганизацияПолучатель", ПараметрыЗаполнения.ПродавецОрганизация);
		
		ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница", ПараметрыЗаполнения.БанковскийСчетОрганизации);
		ПараметрыЗаполнения.Вставить("Номер", ДокументОбъект.РеквизитыДокумента[0].Значение);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", ДокументОбъект.РеквизитыДокумента[26].Значение);
	
	ТаблицаТовары = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	
	ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
		ДокументОбъект, "ВидСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена);
	Если ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
		Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
			
			// В счете от поставщика сумма принимает смысл "Сумма с учетом скидки".
			
			Для Каждого Строка Из ТаблицаТовары Цикл
				Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
			КонецЦикла;
			
		Иначе
			
			// Сумма используемая в типовом документе имеет смысл "Сумма без скидки".
			
			Для Каждого Строка Из ТаблицаТовары Цикл
				Если Строка.СуммаСкидки < 0 Тогда
					Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
				Иначе
					Строка.Сумма = Строка.Сумма + Строка.СуммаСкидки;
					Строка.Всего = Строка.Сумма;
					Строка.ПроцентСкидки = ?(Строка.Сумма = 0, 0, Строка.СуммаСкидки / Строка.Сумма * 100);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом Тогда
		
		Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
			
			ИтогоСуммаСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", 0);
			ДанныеОбъекта = Новый Структура;
			ДанныеОбъекта.Вставить("СуммаСкидки", ИтогоСуммаСкидки);
			ДанныеОбъекта.Вставить("СуммаВключаетНДС", ПараметрыЗаполнения.СуммаВключаетНДС);
			
		Иначе
			
			ПараметрыЗаполнения.Вставить("СуммаСкидки", ПараметрыЗаполнения.ИтогоСуммаСкидки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиТаблицыТовары = Новый Массив;
	
	КолонкиТаблицы = ТаблицаТовары.Колонки;
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаТовары Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
		КонецЦикла;
		
		СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Товары", СтрокиТаблицыТовары);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти